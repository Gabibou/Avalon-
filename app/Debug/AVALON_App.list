
AVALON_App.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014400  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  080145e0  080145e0  000245e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080147a0  080147a0  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  080147a0  080147a0  000247a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080147a8  080147a8  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080147a8  080147a8  000247a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080147ac  080147ac  000247ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  080147b0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005578  200001f0  080149a0  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005768  080149a0  00035768  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 13 .debug_info   000321aa  00000000  00000000  000302d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007098  00000000  00000000  00062482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000025b0  00000000  00000000  00069520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001cd6  00000000  00000000  0006bad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00031e98  00000000  00000000  0006d7a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00034f07  00000000  00000000  0009f63e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00125dbe  00000000  00000000  000d4545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a450  00000000  00000000  001fa304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00204754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00000010  00000000  00000000  002047c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	080145c8 	.word	0x080145c8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	080145c8 	.word	0x080145c8

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <__aeabi_drsub>:
 8000234:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000238:	e002      	b.n	8000240 <__adddf3>
 800023a:	bf00      	nop

0800023c <__aeabi_dsub>:
 800023c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000240 <__adddf3>:
 8000240:	b530      	push	{r4, r5, lr}
 8000242:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000246:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024a:	ea94 0f05 	teq	r4, r5
 800024e:	bf08      	it	eq
 8000250:	ea90 0f02 	teqeq	r0, r2
 8000254:	bf1f      	itttt	ne
 8000256:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000262:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000266:	f000 80e2 	beq.w	800042e <__adddf3+0x1ee>
 800026a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000272:	bfb8      	it	lt
 8000274:	426d      	neglt	r5, r5
 8000276:	dd0c      	ble.n	8000292 <__adddf3+0x52>
 8000278:	442c      	add	r4, r5
 800027a:	ea80 0202 	eor.w	r2, r0, r2
 800027e:	ea81 0303 	eor.w	r3, r1, r3
 8000282:	ea82 0000 	eor.w	r0, r2, r0
 8000286:	ea83 0101 	eor.w	r1, r3, r1
 800028a:	ea80 0202 	eor.w	r2, r0, r2
 800028e:	ea81 0303 	eor.w	r3, r1, r3
 8000292:	2d36      	cmp	r5, #54	; 0x36
 8000294:	bf88      	it	hi
 8000296:	bd30      	pophi	{r4, r5, pc}
 8000298:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800029c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x70>
 80002aa:	4240      	negs	r0, r0
 80002ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002bc:	d002      	beq.n	80002c4 <__adddf3+0x84>
 80002be:	4252      	negs	r2, r2
 80002c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c4:	ea94 0f05 	teq	r4, r5
 80002c8:	f000 80a7 	beq.w	800041a <__adddf3+0x1da>
 80002cc:	f1a4 0401 	sub.w	r4, r4, #1
 80002d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d4:	db0d      	blt.n	80002f2 <__adddf3+0xb2>
 80002d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002da:	fa22 f205 	lsr.w	r2, r2, r5
 80002de:	1880      	adds	r0, r0, r2
 80002e0:	f141 0100 	adc.w	r1, r1, #0
 80002e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e8:	1880      	adds	r0, r0, r2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	4159      	adcs	r1, r3
 80002f0:	e00e      	b.n	8000310 <__adddf3+0xd0>
 80002f2:	f1a5 0520 	sub.w	r5, r5, #32
 80002f6:	f10e 0e20 	add.w	lr, lr, #32
 80002fa:	2a01      	cmp	r2, #1
 80002fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000300:	bf28      	it	cs
 8000302:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	18c0      	adds	r0, r0, r3
 800030c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000310:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000314:	d507      	bpl.n	8000326 <__adddf3+0xe6>
 8000316:	f04f 0e00 	mov.w	lr, #0
 800031a:	f1dc 0c00 	rsbs	ip, ip, #0
 800031e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000322:	eb6e 0101 	sbc.w	r1, lr, r1
 8000326:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032a:	d31b      	bcc.n	8000364 <__adddf3+0x124>
 800032c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000330:	d30c      	bcc.n	800034c <__adddf3+0x10c>
 8000332:	0849      	lsrs	r1, r1, #1
 8000334:	ea5f 0030 	movs.w	r0, r0, rrx
 8000338:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800033c:	f104 0401 	add.w	r4, r4, #1
 8000340:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000344:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000348:	f080 809a 	bcs.w	8000480 <__adddf3+0x240>
 800034c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000350:	bf08      	it	eq
 8000352:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000356:	f150 0000 	adcs.w	r0, r0, #0
 800035a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035e:	ea41 0105 	orr.w	r1, r1, r5
 8000362:	bd30      	pop	{r4, r5, pc}
 8000364:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000368:	4140      	adcs	r0, r0
 800036a:	eb41 0101 	adc.w	r1, r1, r1
 800036e:	3c01      	subs	r4, #1
 8000370:	bf28      	it	cs
 8000372:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000376:	d2e9      	bcs.n	800034c <__adddf3+0x10c>
 8000378:	f091 0f00 	teq	r1, #0
 800037c:	bf04      	itt	eq
 800037e:	4601      	moveq	r1, r0
 8000380:	2000      	moveq	r0, #0
 8000382:	fab1 f381 	clz	r3, r1
 8000386:	bf08      	it	eq
 8000388:	3320      	addeq	r3, #32
 800038a:	f1a3 030b 	sub.w	r3, r3, #11
 800038e:	f1b3 0220 	subs.w	r2, r3, #32
 8000392:	da0c      	bge.n	80003ae <__adddf3+0x16e>
 8000394:	320c      	adds	r2, #12
 8000396:	dd08      	ble.n	80003aa <__adddf3+0x16a>
 8000398:	f102 0c14 	add.w	ip, r2, #20
 800039c:	f1c2 020c 	rsb	r2, r2, #12
 80003a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a4:	fa21 f102 	lsr.w	r1, r1, r2
 80003a8:	e00c      	b.n	80003c4 <__adddf3+0x184>
 80003aa:	f102 0214 	add.w	r2, r2, #20
 80003ae:	bfd8      	it	le
 80003b0:	f1c2 0c20 	rsble	ip, r2, #32
 80003b4:	fa01 f102 	lsl.w	r1, r1, r2
 80003b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003bc:	bfdc      	itt	le
 80003be:	ea41 010c 	orrle.w	r1, r1, ip
 80003c2:	4090      	lslle	r0, r2
 80003c4:	1ae4      	subs	r4, r4, r3
 80003c6:	bfa2      	ittt	ge
 80003c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003cc:	4329      	orrge	r1, r5
 80003ce:	bd30      	popge	{r4, r5, pc}
 80003d0:	ea6f 0404 	mvn.w	r4, r4
 80003d4:	3c1f      	subs	r4, #31
 80003d6:	da1c      	bge.n	8000412 <__adddf3+0x1d2>
 80003d8:	340c      	adds	r4, #12
 80003da:	dc0e      	bgt.n	80003fa <__adddf3+0x1ba>
 80003dc:	f104 0414 	add.w	r4, r4, #20
 80003e0:	f1c4 0220 	rsb	r2, r4, #32
 80003e4:	fa20 f004 	lsr.w	r0, r0, r4
 80003e8:	fa01 f302 	lsl.w	r3, r1, r2
 80003ec:	ea40 0003 	orr.w	r0, r0, r3
 80003f0:	fa21 f304 	lsr.w	r3, r1, r4
 80003f4:	ea45 0103 	orr.w	r1, r5, r3
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	f1c4 040c 	rsb	r4, r4, #12
 80003fe:	f1c4 0220 	rsb	r2, r4, #32
 8000402:	fa20 f002 	lsr.w	r0, r0, r2
 8000406:	fa01 f304 	lsl.w	r3, r1, r4
 800040a:	ea40 0003 	orr.w	r0, r0, r3
 800040e:	4629      	mov	r1, r5
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	fa21 f004 	lsr.w	r0, r1, r4
 8000416:	4629      	mov	r1, r5
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	f094 0f00 	teq	r4, #0
 800041e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000422:	bf06      	itte	eq
 8000424:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000428:	3401      	addeq	r4, #1
 800042a:	3d01      	subne	r5, #1
 800042c:	e74e      	b.n	80002cc <__adddf3+0x8c>
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf18      	it	ne
 8000434:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000438:	d029      	beq.n	800048e <__adddf3+0x24e>
 800043a:	ea94 0f05 	teq	r4, r5
 800043e:	bf08      	it	eq
 8000440:	ea90 0f02 	teqeq	r0, r2
 8000444:	d005      	beq.n	8000452 <__adddf3+0x212>
 8000446:	ea54 0c00 	orrs.w	ip, r4, r0
 800044a:	bf04      	itt	eq
 800044c:	4619      	moveq	r1, r3
 800044e:	4610      	moveq	r0, r2
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	ea91 0f03 	teq	r1, r3
 8000456:	bf1e      	ittt	ne
 8000458:	2100      	movne	r1, #0
 800045a:	2000      	movne	r0, #0
 800045c:	bd30      	popne	{r4, r5, pc}
 800045e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000462:	d105      	bne.n	8000470 <__adddf3+0x230>
 8000464:	0040      	lsls	r0, r0, #1
 8000466:	4149      	adcs	r1, r1
 8000468:	bf28      	it	cs
 800046a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000474:	bf3c      	itt	cc
 8000476:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047a:	bd30      	popcc	{r4, r5, pc}
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000484:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000488:	f04f 0000 	mov.w	r0, #0
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf1a      	itte	ne
 8000494:	4619      	movne	r1, r3
 8000496:	4610      	movne	r0, r2
 8000498:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800049c:	bf1c      	itt	ne
 800049e:	460b      	movne	r3, r1
 80004a0:	4602      	movne	r2, r0
 80004a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a6:	bf06      	itte	eq
 80004a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004ac:	ea91 0f03 	teqeq	r1, r3
 80004b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	bf00      	nop

080004b8 <__aeabi_ui2d>:
 80004b8:	f090 0f00 	teq	r0, #0
 80004bc:	bf04      	itt	eq
 80004be:	2100      	moveq	r1, #0
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004cc:	f04f 0500 	mov.w	r5, #0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e750      	b.n	8000378 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_i2d>:
 80004d8:	f090 0f00 	teq	r0, #0
 80004dc:	bf04      	itt	eq
 80004de:	2100      	moveq	r1, #0
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f0:	bf48      	it	mi
 80004f2:	4240      	negmi	r0, r0
 80004f4:	f04f 0100 	mov.w	r1, #0
 80004f8:	e73e      	b.n	8000378 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_f2d>:
 80004fc:	0042      	lsls	r2, r0, #1
 80004fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000502:	ea4f 0131 	mov.w	r1, r1, rrx
 8000506:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050a:	bf1f      	itttt	ne
 800050c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000510:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000514:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000518:	4770      	bxne	lr
 800051a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051e:	bf08      	it	eq
 8000520:	4770      	bxeq	lr
 8000522:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000526:	bf04      	itt	eq
 8000528:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000534:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000538:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800053c:	e71c      	b.n	8000378 <__adddf3+0x138>
 800053e:	bf00      	nop

08000540 <__aeabi_ul2d>:
 8000540:	ea50 0201 	orrs.w	r2, r0, r1
 8000544:	bf08      	it	eq
 8000546:	4770      	bxeq	lr
 8000548:	b530      	push	{r4, r5, lr}
 800054a:	f04f 0500 	mov.w	r5, #0
 800054e:	e00a      	b.n	8000566 <__aeabi_l2d+0x16>

08000550 <__aeabi_l2d>:
 8000550:	ea50 0201 	orrs.w	r2, r0, r1
 8000554:	bf08      	it	eq
 8000556:	4770      	bxeq	lr
 8000558:	b530      	push	{r4, r5, lr}
 800055a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055e:	d502      	bpl.n	8000566 <__aeabi_l2d+0x16>
 8000560:	4240      	negs	r0, r0
 8000562:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000566:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000572:	f43f aed8 	beq.w	8000326 <__adddf3+0xe6>
 8000576:	f04f 0203 	mov.w	r2, #3
 800057a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057e:	bf18      	it	ne
 8000580:	3203      	addne	r2, #3
 8000582:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000586:	bf18      	it	ne
 8000588:	3203      	addne	r2, #3
 800058a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058e:	f1c2 0320 	rsb	r3, r2, #32
 8000592:	fa00 fc03 	lsl.w	ip, r0, r3
 8000596:	fa20 f002 	lsr.w	r0, r0, r2
 800059a:	fa01 fe03 	lsl.w	lr, r1, r3
 800059e:	ea40 000e 	orr.w	r0, r0, lr
 80005a2:	fa21 f102 	lsr.w	r1, r1, r2
 80005a6:	4414      	add	r4, r2
 80005a8:	e6bd      	b.n	8000326 <__adddf3+0xe6>
 80005aa:	bf00      	nop

080005ac <__aeabi_dmul>:
 80005ac:	b570      	push	{r4, r5, r6, lr}
 80005ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ba:	bf1d      	ittte	ne
 80005bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c0:	ea94 0f0c 	teqne	r4, ip
 80005c4:	ea95 0f0c 	teqne	r5, ip
 80005c8:	f000 f8de 	bleq	8000788 <__aeabi_dmul+0x1dc>
 80005cc:	442c      	add	r4, r5
 80005ce:	ea81 0603 	eor.w	r6, r1, r3
 80005d2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005da:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005de:	bf18      	it	ne
 80005e0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005ec:	d038      	beq.n	8000660 <__aeabi_dmul+0xb4>
 80005ee:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f2:	f04f 0500 	mov.w	r5, #0
 80005f6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fe:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000602:	f04f 0600 	mov.w	r6, #0
 8000606:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060a:	f09c 0f00 	teq	ip, #0
 800060e:	bf18      	it	ne
 8000610:	f04e 0e01 	orrne.w	lr, lr, #1
 8000614:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000618:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800061c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000620:	d204      	bcs.n	800062c <__aeabi_dmul+0x80>
 8000622:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000626:	416d      	adcs	r5, r5
 8000628:	eb46 0606 	adc.w	r6, r6, r6
 800062c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000630:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000634:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000638:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800063c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000640:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000644:	bf88      	it	hi
 8000646:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064a:	d81e      	bhi.n	800068a <__aeabi_dmul+0xde>
 800064c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000656:	f150 0000 	adcs.w	r0, r0, #0
 800065a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000664:	ea46 0101 	orr.w	r1, r6, r1
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	ea81 0103 	eor.w	r1, r1, r3
 8000670:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000674:	bfc2      	ittt	gt
 8000676:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067e:	bd70      	popgt	{r4, r5, r6, pc}
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f04f 0e00 	mov.w	lr, #0
 8000688:	3c01      	subs	r4, #1
 800068a:	f300 80ab 	bgt.w	80007e4 <__aeabi_dmul+0x238>
 800068e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000692:	bfde      	ittt	le
 8000694:	2000      	movle	r0, #0
 8000696:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069a:	bd70      	pople	{r4, r5, r6, pc}
 800069c:	f1c4 0400 	rsb	r4, r4, #0
 80006a0:	3c20      	subs	r4, #32
 80006a2:	da35      	bge.n	8000710 <__aeabi_dmul+0x164>
 80006a4:	340c      	adds	r4, #12
 80006a6:	dc1b      	bgt.n	80006e0 <__aeabi_dmul+0x134>
 80006a8:	f104 0414 	add.w	r4, r4, #20
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f305 	lsl.w	r3, r0, r5
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f205 	lsl.w	r2, r1, r5
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	fa21 f604 	lsr.w	r6, r1, r4
 80006d0:	eb42 0106 	adc.w	r1, r2, r6
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f1c4 040c 	rsb	r4, r4, #12
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f304 	lsl.w	r3, r0, r4
 80006ec:	fa20 f005 	lsr.w	r0, r0, r5
 80006f0:	fa01 f204 	lsl.w	r2, r1, r4
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000700:	f141 0100 	adc.w	r1, r1, #0
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f205 	lsl.w	r2, r0, r5
 8000718:	ea4e 0e02 	orr.w	lr, lr, r2
 800071c:	fa20 f304 	lsr.w	r3, r0, r4
 8000720:	fa01 f205 	lsl.w	r2, r1, r5
 8000724:	ea43 0302 	orr.w	r3, r3, r2
 8000728:	fa21 f004 	lsr.w	r0, r1, r4
 800072c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000730:	fa21 f204 	lsr.w	r2, r1, r4
 8000734:	ea20 0002 	bic.w	r0, r0, r2
 8000738:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800073c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000740:	bf08      	it	eq
 8000742:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000746:	bd70      	pop	{r4, r5, r6, pc}
 8000748:	f094 0f00 	teq	r4, #0
 800074c:	d10f      	bne.n	800076e <__aeabi_dmul+0x1c2>
 800074e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000752:	0040      	lsls	r0, r0, #1
 8000754:	eb41 0101 	adc.w	r1, r1, r1
 8000758:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800075c:	bf08      	it	eq
 800075e:	3c01      	subeq	r4, #1
 8000760:	d0f7      	beq.n	8000752 <__aeabi_dmul+0x1a6>
 8000762:	ea41 0106 	orr.w	r1, r1, r6
 8000766:	f095 0f00 	teq	r5, #0
 800076a:	bf18      	it	ne
 800076c:	4770      	bxne	lr
 800076e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000772:	0052      	lsls	r2, r2, #1
 8000774:	eb43 0303 	adc.w	r3, r3, r3
 8000778:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800077c:	bf08      	it	eq
 800077e:	3d01      	subeq	r5, #1
 8000780:	d0f7      	beq.n	8000772 <__aeabi_dmul+0x1c6>
 8000782:	ea43 0306 	orr.w	r3, r3, r6
 8000786:	4770      	bx	lr
 8000788:	ea94 0f0c 	teq	r4, ip
 800078c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000790:	bf18      	it	ne
 8000792:	ea95 0f0c 	teqne	r5, ip
 8000796:	d00c      	beq.n	80007b2 <__aeabi_dmul+0x206>
 8000798:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079c:	bf18      	it	ne
 800079e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a2:	d1d1      	bne.n	8000748 <__aeabi_dmul+0x19c>
 80007a4:	ea81 0103 	eor.w	r1, r1, r3
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b6:	bf06      	itte	eq
 80007b8:	4610      	moveq	r0, r2
 80007ba:	4619      	moveq	r1, r3
 80007bc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c0:	d019      	beq.n	80007f6 <__aeabi_dmul+0x24a>
 80007c2:	ea94 0f0c 	teq	r4, ip
 80007c6:	d102      	bne.n	80007ce <__aeabi_dmul+0x222>
 80007c8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007cc:	d113      	bne.n	80007f6 <__aeabi_dmul+0x24a>
 80007ce:	ea95 0f0c 	teq	r5, ip
 80007d2:	d105      	bne.n	80007e0 <__aeabi_dmul+0x234>
 80007d4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d8:	bf1c      	itt	ne
 80007da:	4610      	movne	r0, r2
 80007dc:	4619      	movne	r1, r3
 80007de:	d10a      	bne.n	80007f6 <__aeabi_dmul+0x24a>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fe:	bd70      	pop	{r4, r5, r6, pc}

08000800 <__aeabi_ddiv>:
 8000800:	b570      	push	{r4, r5, r6, lr}
 8000802:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000806:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080e:	bf1d      	ittte	ne
 8000810:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000814:	ea94 0f0c 	teqne	r4, ip
 8000818:	ea95 0f0c 	teqne	r5, ip
 800081c:	f000 f8a7 	bleq	800096e <__aeabi_ddiv+0x16e>
 8000820:	eba4 0405 	sub.w	r4, r4, r5
 8000824:	ea81 0e03 	eor.w	lr, r1, r3
 8000828:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800082c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000830:	f000 8088 	beq.w	8000944 <__aeabi_ddiv+0x144>
 8000834:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000838:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800083c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000840:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000844:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000848:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800084c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000850:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000854:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000858:	429d      	cmp	r5, r3
 800085a:	bf08      	it	eq
 800085c:	4296      	cmpeq	r6, r2
 800085e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000862:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000866:	d202      	bcs.n	800086e <__aeabi_ddiv+0x6e>
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	1ab6      	subs	r6, r6, r2
 8000870:	eb65 0503 	sbc.w	r5, r5, r3
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 000c 	orrcs.w	r0, r0, ip
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008dc:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e0:	d018      	beq.n	8000914 <__aeabi_ddiv+0x114>
 80008e2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ea:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fe:	d1c0      	bne.n	8000882 <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	d10b      	bne.n	800091e <__aeabi_ddiv+0x11e>
 8000906:	ea41 0100 	orr.w	r1, r1, r0
 800090a:	f04f 0000 	mov.w	r0, #0
 800090e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000912:	e7b6      	b.n	8000882 <__aeabi_ddiv+0x82>
 8000914:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000918:	bf04      	itt	eq
 800091a:	4301      	orreq	r1, r0
 800091c:	2000      	moveq	r0, #0
 800091e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000922:	bf88      	it	hi
 8000924:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000928:	f63f aeaf 	bhi.w	800068a <__aeabi_dmul+0xde>
 800092c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000930:	bf04      	itt	eq
 8000932:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000936:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093a:	f150 0000 	adcs.w	r0, r0, #0
 800093e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000942:	bd70      	pop	{r4, r5, r6, pc}
 8000944:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000948:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800094c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000950:	bfc2      	ittt	gt
 8000952:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000956:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095a:	bd70      	popgt	{r4, r5, r6, pc}
 800095c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000960:	f04f 0e00 	mov.w	lr, #0
 8000964:	3c01      	subs	r4, #1
 8000966:	e690      	b.n	800068a <__aeabi_dmul+0xde>
 8000968:	ea45 0e06 	orr.w	lr, r5, r6
 800096c:	e68d      	b.n	800068a <__aeabi_dmul+0xde>
 800096e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000972:	ea94 0f0c 	teq	r4, ip
 8000976:	bf08      	it	eq
 8000978:	ea95 0f0c 	teqeq	r5, ip
 800097c:	f43f af3b 	beq.w	80007f6 <__aeabi_dmul+0x24a>
 8000980:	ea94 0f0c 	teq	r4, ip
 8000984:	d10a      	bne.n	800099c <__aeabi_ddiv+0x19c>
 8000986:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098a:	f47f af34 	bne.w	80007f6 <__aeabi_dmul+0x24a>
 800098e:	ea95 0f0c 	teq	r5, ip
 8000992:	f47f af25 	bne.w	80007e0 <__aeabi_dmul+0x234>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e72c      	b.n	80007f6 <__aeabi_dmul+0x24a>
 800099c:	ea95 0f0c 	teq	r5, ip
 80009a0:	d106      	bne.n	80009b0 <__aeabi_ddiv+0x1b0>
 80009a2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a6:	f43f aefd 	beq.w	80007a4 <__aeabi_dmul+0x1f8>
 80009aa:	4610      	mov	r0, r2
 80009ac:	4619      	mov	r1, r3
 80009ae:	e722      	b.n	80007f6 <__aeabi_dmul+0x24a>
 80009b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b4:	bf18      	it	ne
 80009b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ba:	f47f aec5 	bne.w	8000748 <__aeabi_dmul+0x19c>
 80009be:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c2:	f47f af0d 	bne.w	80007e0 <__aeabi_dmul+0x234>
 80009c6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ca:	f47f aeeb 	bne.w	80007a4 <__aeabi_dmul+0x1f8>
 80009ce:	e712      	b.n	80007f6 <__aeabi_dmul+0x24a>

080009d0 <__gedf2>:
 80009d0:	f04f 3cff 	mov.w	ip, #4294967295
 80009d4:	e006      	b.n	80009e4 <__cmpdf2+0x4>
 80009d6:	bf00      	nop

080009d8 <__ledf2>:
 80009d8:	f04f 0c01 	mov.w	ip, #1
 80009dc:	e002      	b.n	80009e4 <__cmpdf2+0x4>
 80009de:	bf00      	nop

080009e0 <__cmpdf2>:
 80009e0:	f04f 0c01 	mov.w	ip, #1
 80009e4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	bf18      	it	ne
 80009f6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fa:	d01b      	beq.n	8000a34 <__cmpdf2+0x54>
 80009fc:	b001      	add	sp, #4
 80009fe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a02:	bf0c      	ite	eq
 8000a04:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a08:	ea91 0f03 	teqne	r1, r3
 8000a0c:	bf02      	ittt	eq
 8000a0e:	ea90 0f02 	teqeq	r0, r2
 8000a12:	2000      	moveq	r0, #0
 8000a14:	4770      	bxeq	lr
 8000a16:	f110 0f00 	cmn.w	r0, #0
 8000a1a:	ea91 0f03 	teq	r1, r3
 8000a1e:	bf58      	it	pl
 8000a20:	4299      	cmppl	r1, r3
 8000a22:	bf08      	it	eq
 8000a24:	4290      	cmpeq	r0, r2
 8000a26:	bf2c      	ite	cs
 8000a28:	17d8      	asrcs	r0, r3, #31
 8000a2a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2e:	f040 0001 	orr.w	r0, r0, #1
 8000a32:	4770      	bx	lr
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	d102      	bne.n	8000a44 <__cmpdf2+0x64>
 8000a3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a42:	d107      	bne.n	8000a54 <__cmpdf2+0x74>
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	d1d6      	bne.n	80009fc <__cmpdf2+0x1c>
 8000a4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a52:	d0d3      	beq.n	80009fc <__cmpdf2+0x1c>
 8000a54:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_cdrcmple>:
 8000a5c:	4684      	mov	ip, r0
 8000a5e:	4610      	mov	r0, r2
 8000a60:	4662      	mov	r2, ip
 8000a62:	468c      	mov	ip, r1
 8000a64:	4619      	mov	r1, r3
 8000a66:	4663      	mov	r3, ip
 8000a68:	e000      	b.n	8000a6c <__aeabi_cdcmpeq>
 8000a6a:	bf00      	nop

08000a6c <__aeabi_cdcmpeq>:
 8000a6c:	b501      	push	{r0, lr}
 8000a6e:	f7ff ffb7 	bl	80009e0 <__cmpdf2>
 8000a72:	2800      	cmp	r0, #0
 8000a74:	bf48      	it	mi
 8000a76:	f110 0f00 	cmnmi.w	r0, #0
 8000a7a:	bd01      	pop	{r0, pc}

08000a7c <__aeabi_dcmpeq>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff fff4 	bl	8000a6c <__aeabi_cdcmpeq>
 8000a84:	bf0c      	ite	eq
 8000a86:	2001      	moveq	r0, #1
 8000a88:	2000      	movne	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmplt>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffea 	bl	8000a6c <__aeabi_cdcmpeq>
 8000a98:	bf34      	ite	cc
 8000a9a:	2001      	movcc	r0, #1
 8000a9c:	2000      	movcs	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmple>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffe0 	bl	8000a6c <__aeabi_cdcmpeq>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpge>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffce 	bl	8000a5c <__aeabi_cdrcmple>
 8000ac0:	bf94      	ite	ls
 8000ac2:	2001      	movls	r0, #1
 8000ac4:	2000      	movhi	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpgt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffc4 	bl	8000a5c <__aeabi_cdrcmple>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmpun>:
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__aeabi_dcmpun+0x10>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d10a      	bne.n	8000b06 <__aeabi_dcmpun+0x26>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__aeabi_dcmpun+0x20>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_dcmpun+0x26>
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0001 	mov.w	r0, #1
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_d2f>:
 8000b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b14:	bf24      	itt	cs
 8000b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1e:	d90d      	bls.n	8000b3c <__aeabi_d2f+0x30>
 8000b20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b40:	d121      	bne.n	8000b86 <__aeabi_d2f+0x7a>
 8000b42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b46:	bfbc      	itt	lt
 8000b48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	4770      	bxlt	lr
 8000b4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b56:	f1c2 0218 	rsb	r2, r2, #24
 8000b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b62:	fa20 f002 	lsr.w	r0, r0, r2
 8000b66:	bf18      	it	ne
 8000b68:	f040 0001 	orrne.w	r0, r0, #1
 8000b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b78:	ea40 000c 	orr.w	r0, r0, ip
 8000b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b84:	e7cc      	b.n	8000b20 <__aeabi_d2f+0x14>
 8000b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8a:	d107      	bne.n	8000b9c <__aeabi_d2f+0x90>
 8000b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b90:	bf1e      	ittt	ne
 8000b92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b9a:	4770      	bxne	lr
 8000b9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b970 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9e08      	ldr	r6, [sp, #32]
 8000be2:	460d      	mov	r5, r1
 8000be4:	4604      	mov	r4, r0
 8000be6:	460f      	mov	r7, r1
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d14a      	bne.n	8000c82 <__udivmoddi4+0xa6>
 8000bec:	428a      	cmp	r2, r1
 8000bee:	4694      	mov	ip, r2
 8000bf0:	d965      	bls.n	8000cbe <__udivmoddi4+0xe2>
 8000bf2:	fab2 f382 	clz	r3, r2
 8000bf6:	b143      	cbz	r3, 8000c0a <__udivmoddi4+0x2e>
 8000bf8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bfc:	f1c3 0220 	rsb	r2, r3, #32
 8000c00:	409f      	lsls	r7, r3
 8000c02:	fa20 f202 	lsr.w	r2, r0, r2
 8000c06:	4317      	orrs	r7, r2
 8000c08:	409c      	lsls	r4, r3
 8000c0a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0e:	fa1f f58c 	uxth.w	r5, ip
 8000c12:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c16:	0c22      	lsrs	r2, r4, #16
 8000c18:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c1c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c20:	fb01 f005 	mul.w	r0, r1, r5
 8000c24:	4290      	cmp	r0, r2
 8000c26:	d90a      	bls.n	8000c3e <__udivmoddi4+0x62>
 8000c28:	eb1c 0202 	adds.w	r2, ip, r2
 8000c2c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c30:	f080 811c 	bcs.w	8000e6c <__udivmoddi4+0x290>
 8000c34:	4290      	cmp	r0, r2
 8000c36:	f240 8119 	bls.w	8000e6c <__udivmoddi4+0x290>
 8000c3a:	3902      	subs	r1, #2
 8000c3c:	4462      	add	r2, ip
 8000c3e:	1a12      	subs	r2, r2, r0
 8000c40:	b2a4      	uxth	r4, r4
 8000c42:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c46:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c4a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4e:	fb00 f505 	mul.w	r5, r0, r5
 8000c52:	42a5      	cmp	r5, r4
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x90>
 8000c56:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5e:	f080 8107 	bcs.w	8000e70 <__udivmoddi4+0x294>
 8000c62:	42a5      	cmp	r5, r4
 8000c64:	f240 8104 	bls.w	8000e70 <__udivmoddi4+0x294>
 8000c68:	4464      	add	r4, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c70:	1b64      	subs	r4, r4, r5
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11e      	cbz	r6, 8000c7e <__udivmoddi4+0xa2>
 8000c76:	40dc      	lsrs	r4, r3
 8000c78:	2300      	movs	r3, #0
 8000c7a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d908      	bls.n	8000c98 <__udivmoddi4+0xbc>
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	f000 80ed 	beq.w	8000e66 <__udivmoddi4+0x28a>
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c92:	4608      	mov	r0, r1
 8000c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c98:	fab3 f183 	clz	r1, r3
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	d149      	bne.n	8000d34 <__udivmoddi4+0x158>
 8000ca0:	42ab      	cmp	r3, r5
 8000ca2:	d302      	bcc.n	8000caa <__udivmoddi4+0xce>
 8000ca4:	4282      	cmp	r2, r0
 8000ca6:	f200 80f8 	bhi.w	8000e9a <__udivmoddi4+0x2be>
 8000caa:	1a84      	subs	r4, r0, r2
 8000cac:	eb65 0203 	sbc.w	r2, r5, r3
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	4617      	mov	r7, r2
 8000cb4:	2e00      	cmp	r6, #0
 8000cb6:	d0e2      	beq.n	8000c7e <__udivmoddi4+0xa2>
 8000cb8:	e9c6 4700 	strd	r4, r7, [r6]
 8000cbc:	e7df      	b.n	8000c7e <__udivmoddi4+0xa2>
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xe6>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f382 	clz	r3, r2
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x210>
 8000ccc:	1a8a      	subs	r2, r1, r2
 8000cce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd2:	fa1f fe8c 	uxth.w	lr, ip
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cdc:	fb07 2015 	mls	r0, r7, r5, r2
 8000ce0:	0c22      	lsrs	r2, r4, #16
 8000ce2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce6:	fb0e f005 	mul.w	r0, lr, r5
 8000cea:	4290      	cmp	r0, r2
 8000cec:	d908      	bls.n	8000d00 <__udivmoddi4+0x124>
 8000cee:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x122>
 8000cf8:	4290      	cmp	r0, r2
 8000cfa:	f200 80cb 	bhi.w	8000e94 <__udivmoddi4+0x2b8>
 8000cfe:	4645      	mov	r5, r8
 8000d00:	1a12      	subs	r2, r2, r0
 8000d02:	b2a4      	uxth	r4, r4
 8000d04:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d08:	fb07 2210 	mls	r2, r7, r0, r2
 8000d0c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d10:	fb0e fe00 	mul.w	lr, lr, r0
 8000d14:	45a6      	cmp	lr, r4
 8000d16:	d908      	bls.n	8000d2a <__udivmoddi4+0x14e>
 8000d18:	eb1c 0404 	adds.w	r4, ip, r4
 8000d1c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d20:	d202      	bcs.n	8000d28 <__udivmoddi4+0x14c>
 8000d22:	45a6      	cmp	lr, r4
 8000d24:	f200 80bb 	bhi.w	8000e9e <__udivmoddi4+0x2c2>
 8000d28:	4610      	mov	r0, r2
 8000d2a:	eba4 040e 	sub.w	r4, r4, lr
 8000d2e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d32:	e79f      	b.n	8000c74 <__udivmoddi4+0x98>
 8000d34:	f1c1 0720 	rsb	r7, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d42:	fa05 f401 	lsl.w	r4, r5, r1
 8000d46:	fa20 f307 	lsr.w	r3, r0, r7
 8000d4a:	40fd      	lsrs	r5, r7
 8000d4c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d56:	fa1f fe8c 	uxth.w	lr, ip
 8000d5a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d64:	fb08 f50e 	mul.w	r5, r8, lr
 8000d68:	42a5      	cmp	r5, r4
 8000d6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d72:	d90b      	bls.n	8000d8c <__udivmoddi4+0x1b0>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d7c:	f080 8088 	bcs.w	8000e90 <__udivmoddi4+0x2b4>
 8000d80:	42a5      	cmp	r5, r4
 8000d82:	f240 8085 	bls.w	8000e90 <__udivmoddi4+0x2b4>
 8000d86:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8a:	4464      	add	r4, ip
 8000d8c:	1b64      	subs	r4, r4, r5
 8000d8e:	b29d      	uxth	r5, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d9c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000da0:	45a6      	cmp	lr, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1da>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dac:	d26c      	bcs.n	8000e88 <__udivmoddi4+0x2ac>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	d96a      	bls.n	8000e88 <__udivmoddi4+0x2ac>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	4464      	add	r4, ip
 8000db6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dba:	fba3 9502 	umull	r9, r5, r3, r2
 8000dbe:	eba4 040e 	sub.w	r4, r4, lr
 8000dc2:	42ac      	cmp	r4, r5
 8000dc4:	46c8      	mov	r8, r9
 8000dc6:	46ae      	mov	lr, r5
 8000dc8:	d356      	bcc.n	8000e78 <__udivmoddi4+0x29c>
 8000dca:	d053      	beq.n	8000e74 <__udivmoddi4+0x298>
 8000dcc:	b156      	cbz	r6, 8000de4 <__udivmoddi4+0x208>
 8000dce:	ebb0 0208 	subs.w	r2, r0, r8
 8000dd2:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dda:	40ca      	lsrs	r2, r1
 8000ddc:	40cc      	lsrs	r4, r1
 8000dde:	4317      	orrs	r7, r2
 8000de0:	e9c6 7400 	strd	r7, r4, [r6]
 8000de4:	4618      	mov	r0, r3
 8000de6:	2100      	movs	r1, #0
 8000de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dec:	f1c3 0120 	rsb	r1, r3, #32
 8000df0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df4:	fa20 f201 	lsr.w	r2, r0, r1
 8000df8:	fa25 f101 	lsr.w	r1, r5, r1
 8000dfc:	409d      	lsls	r5, r3
 8000dfe:	432a      	orrs	r2, r5
 8000e00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e04:	fa1f fe8c 	uxth.w	lr, ip
 8000e08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e0c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e10:	0c11      	lsrs	r1, r2, #16
 8000e12:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e16:	fb00 f50e 	mul.w	r5, r0, lr
 8000e1a:	428d      	cmp	r5, r1
 8000e1c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x258>
 8000e22:	eb1c 0101 	adds.w	r1, ip, r1
 8000e26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2a:	d22f      	bcs.n	8000e8c <__udivmoddi4+0x2b0>
 8000e2c:	428d      	cmp	r5, r1
 8000e2e:	d92d      	bls.n	8000e8c <__udivmoddi4+0x2b0>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4461      	add	r1, ip
 8000e34:	1b49      	subs	r1, r1, r5
 8000e36:	b292      	uxth	r2, r2
 8000e38:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e3c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e44:	fb05 f10e 	mul.w	r1, r5, lr
 8000e48:	4291      	cmp	r1, r2
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x282>
 8000e4c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e50:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e54:	d216      	bcs.n	8000e84 <__udivmoddi4+0x2a8>
 8000e56:	4291      	cmp	r1, r2
 8000e58:	d914      	bls.n	8000e84 <__udivmoddi4+0x2a8>
 8000e5a:	3d02      	subs	r5, #2
 8000e5c:	4462      	add	r2, ip
 8000e5e:	1a52      	subs	r2, r2, r1
 8000e60:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e64:	e738      	b.n	8000cd8 <__udivmoddi4+0xfc>
 8000e66:	4631      	mov	r1, r6
 8000e68:	4630      	mov	r0, r6
 8000e6a:	e708      	b.n	8000c7e <__udivmoddi4+0xa2>
 8000e6c:	4639      	mov	r1, r7
 8000e6e:	e6e6      	b.n	8000c3e <__udivmoddi4+0x62>
 8000e70:	4610      	mov	r0, r2
 8000e72:	e6fb      	b.n	8000c6c <__udivmoddi4+0x90>
 8000e74:	4548      	cmp	r0, r9
 8000e76:	d2a9      	bcs.n	8000dcc <__udivmoddi4+0x1f0>
 8000e78:	ebb9 0802 	subs.w	r8, r9, r2
 8000e7c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e80:	3b01      	subs	r3, #1
 8000e82:	e7a3      	b.n	8000dcc <__udivmoddi4+0x1f0>
 8000e84:	4645      	mov	r5, r8
 8000e86:	e7ea      	b.n	8000e5e <__udivmoddi4+0x282>
 8000e88:	462b      	mov	r3, r5
 8000e8a:	e794      	b.n	8000db6 <__udivmoddi4+0x1da>
 8000e8c:	4640      	mov	r0, r8
 8000e8e:	e7d1      	b.n	8000e34 <__udivmoddi4+0x258>
 8000e90:	46d0      	mov	r8, sl
 8000e92:	e77b      	b.n	8000d8c <__udivmoddi4+0x1b0>
 8000e94:	3d02      	subs	r5, #2
 8000e96:	4462      	add	r2, ip
 8000e98:	e732      	b.n	8000d00 <__udivmoddi4+0x124>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e70a      	b.n	8000cb4 <__udivmoddi4+0xd8>
 8000e9e:	4464      	add	r4, ip
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	e742      	b.n	8000d2a <__udivmoddi4+0x14e>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eae:	463b      	mov	r3, r7
 8000eb0:	2220      	movs	r2, #32
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f012 fb5d 	bl	8013574 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000eba:	4b3a      	ldr	r3, [pc, #232]	; (8000fa4 <MX_ADC2_Init+0xfc>)
 8000ebc:	4a3a      	ldr	r2, [pc, #232]	; (8000fa8 <MX_ADC2_Init+0x100>)
 8000ebe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV128;
 8000ec0:	4b38      	ldr	r3, [pc, #224]	; (8000fa4 <MX_ADC2_Init+0xfc>)
 8000ec2:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
 8000ec6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000ec8:	4b36      	ldr	r3, [pc, #216]	; (8000fa4 <MX_ADC2_Init+0xfc>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ece:	4b35      	ldr	r3, [pc, #212]	; (8000fa4 <MX_ADC2_Init+0xfc>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000ed4:	4b33      	ldr	r3, [pc, #204]	; (8000fa4 <MX_ADC2_Init+0xfc>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000eda:	4b32      	ldr	r3, [pc, #200]	; (8000fa4 <MX_ADC2_Init+0xfc>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ee0:	4b30      	ldr	r3, [pc, #192]	; (8000fa4 <MX_ADC2_Init+0xfc>)
 8000ee2:	2204      	movs	r2, #4
 8000ee4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000ee6:	4b2f      	ldr	r3, [pc, #188]	; (8000fa4 <MX_ADC2_Init+0xfc>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000eec:	4b2d      	ldr	r3, [pc, #180]	; (8000fa4 <MX_ADC2_Init+0xfc>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 3;
 8000ef2:	4b2c      	ldr	r3, [pc, #176]	; (8000fa4 <MX_ADC2_Init+0xfc>)
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ef8:	4b2a      	ldr	r3, [pc, #168]	; (8000fa4 <MX_ADC2_Init+0xfc>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f00:	4b28      	ldr	r3, [pc, #160]	; (8000fa4 <MX_ADC2_Init+0xfc>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f06:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <MX_ADC2_Init+0xfc>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000f0c:	4b25      	ldr	r3, [pc, #148]	; (8000fa4 <MX_ADC2_Init+0xfc>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f14:	4b23      	ldr	r3, [pc, #140]	; (8000fa4 <MX_ADC2_Init+0xfc>)
 8000f16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f1a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000f1c:	4b21      	ldr	r3, [pc, #132]	; (8000fa4 <MX_ADC2_Init+0xfc>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f24:	481f      	ldr	r0, [pc, #124]	; (8000fa4 <MX_ADC2_Init+0xfc>)
 8000f26:	f003 fb0b 	bl	8004540 <HAL_ADC_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 8000f30:	f002 f94c 	bl	80031cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f34:	4b1d      	ldr	r3, [pc, #116]	; (8000fac <MX_ADC2_Init+0x104>)
 8000f36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f38:	2306      	movs	r3, #6
 8000f3a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000f3c:	2304      	movs	r3, #4
 8000f3e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000f40:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <MX_ADC2_Init+0x108>)
 8000f42:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f44:	2304      	movs	r3, #4
 8000f46:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f4c:	463b      	mov	r3, r7
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4814      	ldr	r0, [pc, #80]	; (8000fa4 <MX_ADC2_Init+0xfc>)
 8000f52:	f003 fda9 	bl	8004aa8 <HAL_ADC_ConfigChannel>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8000f5c:	f002 f936 	bl	80031cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f60:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <MX_ADC2_Init+0x10c>)
 8000f62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f64:	230c      	movs	r3, #12
 8000f66:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f68:	463b      	mov	r3, r7
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	480d      	ldr	r0, [pc, #52]	; (8000fa4 <MX_ADC2_Init+0xfc>)
 8000f6e:	f003 fd9b 	bl	8004aa8 <HAL_ADC_ConfigChannel>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_ADC2_Init+0xd4>
  {
    Error_Handler();
 8000f78:	f002 f928 	bl	80031cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <MX_ADC2_Init+0x110>)
 8000f7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f80:	2312      	movs	r3, #18
 8000f82:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f84:	237f      	movs	r3, #127	; 0x7f
 8000f86:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f88:	463b      	mov	r3, r7
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <MX_ADC2_Init+0xfc>)
 8000f8e:	f003 fd8b 	bl	8004aa8 <HAL_ADC_ConfigChannel>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_ADC2_Init+0xf4>
  {
    Error_Handler();
 8000f98:	f002 f918 	bl	80031cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f9c:	bf00      	nop
 8000f9e:	3720      	adds	r7, #32
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	2000020c 	.word	0x2000020c
 8000fa8:	50000100 	.word	0x50000100
 8000fac:	04300002 	.word	0x04300002
 8000fb0:	407f0000 	.word	0x407f0000
 8000fb4:	19200040 	.word	0x19200040
 8000fb8:	2a000400 	.word	0x2a000400

08000fbc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b0a0      	sub	sp, #128	; 0x80
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fd4:	f107 0318 	add.w	r3, r7, #24
 8000fd8:	2254      	movs	r2, #84	; 0x54
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f012 fac9 	bl	8013574 <memset>
  if(adcHandle->Instance==ADC2)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a4c      	ldr	r2, [pc, #304]	; (8001118 <HAL_ADC_MspInit+0x15c>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	f040 8090 	bne.w	800110e <HAL_ADC_MspInit+0x152>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000fee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ff2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000ff4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000ff8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ffa:	f107 0318 	add.w	r3, r7, #24
 8000ffe:	4618      	mov	r0, r3
 8001000:	f008 f9a8 	bl	8009354 <HAL_RCCEx_PeriphCLKConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800100a:	f002 f8df 	bl	80031cc <Error_Handler>
    }

    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800100e:	4b43      	ldr	r3, [pc, #268]	; (800111c <HAL_ADC_MspInit+0x160>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	4a42      	ldr	r2, [pc, #264]	; (800111c <HAL_ADC_MspInit+0x160>)
 8001014:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001018:	64d3      	str	r3, [r2, #76]	; 0x4c
 800101a:	4b40      	ldr	r3, [pc, #256]	; (800111c <HAL_ADC_MspInit+0x160>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001022:	617b      	str	r3, [r7, #20]
 8001024:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001026:	4b3d      	ldr	r3, [pc, #244]	; (800111c <HAL_ADC_MspInit+0x160>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102a:	4a3c      	ldr	r2, [pc, #240]	; (800111c <HAL_ADC_MspInit+0x160>)
 800102c:	f043 0320 	orr.w	r3, r3, #32
 8001030:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001032:	4b3a      	ldr	r3, [pc, #232]	; (800111c <HAL_ADC_MspInit+0x160>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001036:	f003 0320 	and.w	r3, r3, #32
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800103e:	4b37      	ldr	r3, [pc, #220]	; (800111c <HAL_ADC_MspInit+0x160>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001042:	4a36      	ldr	r2, [pc, #216]	; (800111c <HAL_ADC_MspInit+0x160>)
 8001044:	f043 0304 	orr.w	r3, r3, #4
 8001048:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104a:	4b34      	ldr	r3, [pc, #208]	; (800111c <HAL_ADC_MspInit+0x160>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104e:	f003 0304 	and.w	r3, r3, #4
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	4b31      	ldr	r3, [pc, #196]	; (800111c <HAL_ADC_MspInit+0x160>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	4a30      	ldr	r2, [pc, #192]	; (800111c <HAL_ADC_MspInit+0x160>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001062:	4b2e      	ldr	r3, [pc, #184]	; (800111c <HAL_ADC_MspInit+0x160>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC2_IN6
    PC1     ------> ADC2_IN7
    PA0     ------> ADC2_IN1
    PA1     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800106e:	2302      	movs	r3, #2
 8001070:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001072:	2303      	movs	r3, #3
 8001074:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800107a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800107e:	4619      	mov	r1, r3
 8001080:	4827      	ldr	r0, [pc, #156]	; (8001120 <HAL_ADC_MspInit+0x164>)
 8001082:	f004 fe59 	bl	8005d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001086:	2303      	movs	r3, #3
 8001088:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800108a:	2303      	movs	r3, #3
 800108c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001092:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001096:	4619      	mov	r1, r3
 8001098:	4822      	ldr	r0, [pc, #136]	; (8001124 <HAL_ADC_MspInit+0x168>)
 800109a:	f004 fe4d 	bl	8005d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800109e:	2303      	movs	r3, #3
 80010a0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010a2:	2303      	movs	r3, #3
 80010a4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010aa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010ae:	4619      	mov	r1, r3
 80010b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b4:	f004 fe40 	bl	8005d38 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 80010b8:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <HAL_ADC_MspInit+0x16c>)
 80010ba:	4a1c      	ldr	r2, [pc, #112]	; (800112c <HAL_ADC_MspInit+0x170>)
 80010bc:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80010be:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <HAL_ADC_MspInit+0x16c>)
 80010c0:	2224      	movs	r2, #36	; 0x24
 80010c2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010c4:	4b18      	ldr	r3, [pc, #96]	; (8001128 <HAL_ADC_MspInit+0x16c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ca:	4b17      	ldr	r3, [pc, #92]	; (8001128 <HAL_ADC_MspInit+0x16c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80010d0:	4b15      	ldr	r3, [pc, #84]	; (8001128 <HAL_ADC_MspInit+0x16c>)
 80010d2:	2280      	movs	r2, #128	; 0x80
 80010d4:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010d6:	4b14      	ldr	r3, [pc, #80]	; (8001128 <HAL_ADC_MspInit+0x16c>)
 80010d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010dc:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010de:	4b12      	ldr	r3, [pc, #72]	; (8001128 <HAL_ADC_MspInit+0x16c>)
 80010e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010e4:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80010e6:	4b10      	ldr	r3, [pc, #64]	; (8001128 <HAL_ADC_MspInit+0x16c>)
 80010e8:	2220      	movs	r2, #32
 80010ea:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80010ec:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <HAL_ADC_MspInit+0x16c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80010f2:	480d      	ldr	r0, [pc, #52]	; (8001128 <HAL_ADC_MspInit+0x16c>)
 80010f4:	f004 faee 	bl	80056d4 <HAL_DMA_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <HAL_ADC_MspInit+0x146>
    {
      Error_Handler();
 80010fe:	f002 f865 	bl	80031cc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a08      	ldr	r2, [pc, #32]	; (8001128 <HAL_ADC_MspInit+0x16c>)
 8001106:	655a      	str	r2, [r3, #84]	; 0x54
 8001108:	4a07      	ldr	r2, [pc, #28]	; (8001128 <HAL_ADC_MspInit+0x16c>)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800110e:	bf00      	nop
 8001110:	3780      	adds	r7, #128	; 0x80
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	50000100 	.word	0x50000100
 800111c:	40021000 	.word	0x40021000
 8001120:	48001400 	.word	0x48001400
 8001124:	48000800 	.word	0x48000800
 8001128:	20000278 	.word	0x20000278
 800112c:	40020008 	.word	0x40020008

08001130 <Battery_ReadBatteryVoltage>:

#include "adc_voltage_current_measurement.h"



void Battery_ReadBatteryVoltage(Battery_t * battery_struct,uint16_t BatteryMonitoringData[]){
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
	battery_struct->BatteryVoltage = (BatteryMonitoringData[BATTERY_VOLTAGE_RANK]*ADC_VOLTAGE_REF)/ADC_BIT_VALUE;
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	3304      	adds	r3, #4
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff f9c9 	bl	80004d8 <__aeabi_i2d>
 8001146:	a30f      	add	r3, pc, #60	; (adr r3, 8001184 <Battery_ReadBatteryVoltage+0x54>)
 8001148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114c:	f7ff fa2e 	bl	80005ac <__aeabi_dmul>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4610      	mov	r0, r2
 8001156:	4619      	mov	r1, r3
 8001158:	f04f 0200 	mov.w	r2, #0
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <Battery_ReadBatteryVoltage+0x50>)
 800115e:	f7ff fb4f 	bl	8000800 <__aeabi_ddiv>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	4610      	mov	r0, r2
 8001168:	4619      	mov	r1, r3
 800116a:	f7ff fccf 	bl	8000b0c <__aeabi_d2f>
 800116e:	4602      	mov	r2, r0
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	601a      	str	r2, [r3, #0]
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	f3af 8000 	nop.w
 8001180:	40b00000 	.word	0x40b00000
 8001184:	66666666 	.word	0x66666666
 8001188:	400a6666 	.word	0x400a6666
 800118c:	00000000 	.word	0x00000000

08001190 <Battery_ReadCurrent3V3>:

void Battery_ReadCurrent3V3(Battery_t * battery_struct,uint16_t BatteryMonitoringData[]){
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
	float32_t shunt_resistor_voltage = (BatteryMonitoringData[BATTERY_3V3CURR_RANK]*ADC_VOLTAGE_REF)/ADC_BIT_VALUE;
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	3302      	adds	r3, #2
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff f999 	bl	80004d8 <__aeabi_i2d>
 80011a6:	a319      	add	r3, pc, #100	; (adr r3, 800120c <Battery_ReadCurrent3V3+0x7c>)
 80011a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ac:	f7ff f9fe 	bl	80005ac <__aeabi_dmul>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4610      	mov	r0, r2
 80011b6:	4619      	mov	r1, r3
 80011b8:	f04f 0200 	mov.w	r2, #0
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <Battery_ReadCurrent3V3+0x78>)
 80011be:	f7ff fb1f 	bl	8000800 <__aeabi_ddiv>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	4610      	mov	r0, r2
 80011c8:	4619      	mov	r1, r3
 80011ca:	f7ff fc9f 	bl	8000b0c <__aeabi_d2f>
 80011ce:	4603      	mov	r3, r0
 80011d0:	60fb      	str	r3, [r7, #12]
	battery_struct->CurrentConsumption3V3 = shunt_resistor_voltage/SHUNT_RESISTOR_VALUE;
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	f7ff f992 	bl	80004fc <__aeabi_f2d>
 80011d8:	a309      	add	r3, pc, #36	; (adr r3, 8001200 <Battery_ReadCurrent3V3+0x70>)
 80011da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011de:	f7ff fb0f 	bl	8000800 <__aeabi_ddiv>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	4610      	mov	r0, r2
 80011e8:	4619      	mov	r1, r3
 80011ea:	f7ff fc8f 	bl	8000b0c <__aeabi_d2f>
 80011ee:	4602      	mov	r2, r0
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	605a      	str	r2, [r3, #4]
}
 80011f4:	bf00      	nop
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	f3af 8000 	nop.w
 8001200:	d2f1a9fc 	.word	0xd2f1a9fc
 8001204:	3f60624d 	.word	0x3f60624d
 8001208:	40b00000 	.word	0x40b00000
 800120c:	66666666 	.word	0x66666666
 8001210:	400a6666 	.word	0x400a6666
 8001214:	00000000 	.word	0x00000000

08001218 <Battery_ReadCurrent5V>:

void Battery_ReadCurrent5V(Battery_t * battery_struct,uint16_t BatteryMonitoringData[]){
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
	float32_t shunt_resistor_voltage = (BatteryMonitoringData[BATTERY_5VCURR_RANK]*ADC_VOLTAGE_REF)/ADC_BIT_VALUE;
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	881b      	ldrh	r3, [r3, #0]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff f956 	bl	80004d8 <__aeabi_i2d>
 800122c:	a319      	add	r3, pc, #100	; (adr r3, 8001294 <Battery_ReadCurrent5V+0x7c>)
 800122e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001232:	f7ff f9bb 	bl	80005ac <__aeabi_dmul>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4610      	mov	r0, r2
 800123c:	4619      	mov	r1, r3
 800123e:	f04f 0200 	mov.w	r2, #0
 8001242:	4b13      	ldr	r3, [pc, #76]	; (8001290 <Battery_ReadCurrent5V+0x78>)
 8001244:	f7ff fadc 	bl	8000800 <__aeabi_ddiv>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4610      	mov	r0, r2
 800124e:	4619      	mov	r1, r3
 8001250:	f7ff fc5c 	bl	8000b0c <__aeabi_d2f>
 8001254:	4603      	mov	r3, r0
 8001256:	60fb      	str	r3, [r7, #12]
	battery_struct->CurrentConsumption5V = shunt_resistor_voltage/SHUNT_RESISTOR_VALUE;
 8001258:	68f8      	ldr	r0, [r7, #12]
 800125a:	f7ff f94f 	bl	80004fc <__aeabi_f2d>
 800125e:	a30a      	add	r3, pc, #40	; (adr r3, 8001288 <Battery_ReadCurrent5V+0x70>)
 8001260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001264:	f7ff facc 	bl	8000800 <__aeabi_ddiv>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4610      	mov	r0, r2
 800126e:	4619      	mov	r1, r3
 8001270:	f7ff fc4c 	bl	8000b0c <__aeabi_d2f>
 8001274:	4602      	mov	r2, r0
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	609a      	str	r2, [r3, #8]
}
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	f3af 8000 	nop.w
 8001288:	d2f1a9fc 	.word	0xd2f1a9fc
 800128c:	3f60624d 	.word	0x3f60624d
 8001290:	40b00000 	.word	0x40b00000
 8001294:	66666666 	.word	0x66666666
 8001298:	400a6666 	.word	0x400a6666
 800129c:	00000000 	.word	0x00000000

080012a0 <Battery_RemaningTime>:

void Battery_RemaningTime(Battery_t * battery_struct){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]

	float32_t current_average = battery_struct->CurrentConsumption3V3 + battery_struct->CurrentConsumption5V;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	ed93 7a01 	vldr	s14, [r3, #4]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80012b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012b8:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t battery_remaining_hour = BATTERRY_CAPACITY/current_average;
 80012bc:	68f8      	ldr	r0, [r7, #12]
 80012be:	f7ff f91d 	bl	80004fc <__aeabi_f2d>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	a10f      	add	r1, pc, #60	; (adr r1, 8001304 <Battery_RemaningTime+0x64>)
 80012c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012cc:	f7ff fa98 	bl	8000800 <__aeabi_ddiv>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4610      	mov	r0, r2
 80012d6:	4619      	mov	r1, r3
 80012d8:	f7ff fc18 	bl	8000b0c <__aeabi_d2f>
 80012dc:	4603      	mov	r3, r0
 80012de:	60bb      	str	r3, [r7, #8]
	battery_struct->battery_left_ms = (battery_remaining_hour*3600000);
 80012e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80012e4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001300 <Battery_RemaningTime+0x60>
 80012e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012f0:	ee17 2a90 	vmov	r2, s15
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	60da      	str	r2, [r3, #12]
}
 80012f8:	bf00      	nop
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	4a5bba00 	.word	0x4a5bba00
 8001304:	9999999a 	.word	0x9999999a
 8001308:	40019999 	.word	0x40019999

0800130c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800130c:	b5b0      	push	{r4, r5, r7, lr}
 800130e:	b0b4      	sub	sp, #208	; 0xd0
 8001310:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN Init */

	/*Configure output for timer*/
	PropulsionAndControl_Init(&HDW_CONTROLLER_struct, ESC_GPIO_PIN, ESC_GPIO_PORT, SERVO_LEFT_GPIO_PIN, SERVO_LEFT_GPIO_PORT, SERVO_RIGHT_GPIO_PIN, SERVO_RIGHT_GPIO_PORT, ESC_TIMER_CHANNEL_NBR, SERVO_LEFT_TIMER_CHANNEL_NBR, SERVO_RIGHT_TIMER_CHANNEL_NBR, &htim4);
 8001312:	4b63      	ldr	r3, [pc, #396]	; (80014a0 <MX_FREERTOS_Init+0x194>)
 8001314:	9306      	str	r3, [sp, #24]
 8001316:	2302      	movs	r3, #2
 8001318:	9305      	str	r3, [sp, #20]
 800131a:	2301      	movs	r3, #1
 800131c:	9304      	str	r3, [sp, #16]
 800131e:	2304      	movs	r3, #4
 8001320:	9303      	str	r3, [sp, #12]
 8001322:	4b60      	ldr	r3, [pc, #384]	; (80014a4 <MX_FREERTOS_Init+0x198>)
 8001324:	9302      	str	r3, [sp, #8]
 8001326:	2380      	movs	r3, #128	; 0x80
 8001328:	9301      	str	r3, [sp, #4]
 800132a:	4b5e      	ldr	r3, [pc, #376]	; (80014a4 <MX_FREERTOS_Init+0x198>)
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	2340      	movs	r3, #64	; 0x40
 8001330:	4a5c      	ldr	r2, [pc, #368]	; (80014a4 <MX_FREERTOS_Init+0x198>)
 8001332:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001336:	485c      	ldr	r0, [pc, #368]	; (80014a8 <MX_FREERTOS_Init+0x19c>)
 8001338:	f002 f9be 	bl	80036b8 <PropulsionAndControl_Init>

	/*Init for IMU sensors*/
	BNO055_Init(&hi2c2, &IMU_BNO055_struct);
 800133c:	495b      	ldr	r1, [pc, #364]	; (80014ac <MX_FREERTOS_Init+0x1a0>)
 800133e:	485c      	ldr	r0, [pc, #368]	; (80014b0 <MX_FREERTOS_Init+0x1a4>)
 8001340:	f000 fe11 	bl	8001f66 <BNO055_Init>


  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of I2C_Controller */
  osMutexDef(I2C_Controller);
 8001344:	2300      	movs	r3, #0
 8001346:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  I2C_ControllerHandle = osMutexCreate(osMutex(I2C_Controller));
 800134a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800134e:	4618      	mov	r0, r3
 8001350:	f00f fb4d 	bl	80109ee <osMutexCreate>
 8001354:	4603      	mov	r3, r0
 8001356:	4a57      	ldr	r2, [pc, #348]	; (80014b4 <MX_FREERTOS_Init+0x1a8>)
 8001358:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of GPS_UART_Semaphore */
  osSemaphoreDef(GPS_UART_Semaphore);
 800135a:	2300      	movs	r3, #0
 800135c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  GPS_UART_SemaphoreHandle = osSemaphoreCreate(osSemaphore(GPS_UART_Semaphore), 1);
 8001360:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001364:	2101      	movs	r1, #1
 8001366:	4618      	mov	r0, r3
 8001368:	f00f fb4d 	bl	8010a06 <osSemaphoreCreate>
 800136c:	4603      	mov	r3, r0
 800136e:	4a52      	ldr	r2, [pc, #328]	; (80014b8 <MX_FREERTOS_Init+0x1ac>)
 8001370:	6013      	str	r3, [r2, #0]

  /* definition and creation of HG_PROTECTION_SEM */
  osSemaphoreDef(HG_PROTECTION_SEM);
 8001372:	2300      	movs	r3, #0
 8001374:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HG_PROTECTION_SEMHandle = osSemaphoreCreate(osSemaphore(HG_PROTECTION_SEM), 1);
 8001378:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800137c:	2101      	movs	r1, #1
 800137e:	4618      	mov	r0, r3
 8001380:	f00f fb41 	bl	8010a06 <osSemaphoreCreate>
 8001384:	4603      	mov	r3, r0
 8001386:	4a4d      	ldr	r2, [pc, #308]	; (80014bc <MX_FREERTOS_Init+0x1b0>)
 8001388:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of LedTask */
  osThreadDef(LedTask, StartLedTask, osPriorityNormal, 0, 128);
 800138a:	4b4d      	ldr	r3, [pc, #308]	; (80014c0 <MX_FREERTOS_Init+0x1b4>)
 800138c:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8001390:	461d      	mov	r5, r3
 8001392:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001394:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001396:	682b      	ldr	r3, [r5, #0]
 8001398:	6023      	str	r3, [r4, #0]
  LedTaskHandle = osThreadCreate(osThread(LedTask), NULL);
 800139a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800139e:	2100      	movs	r1, #0
 80013a0:	4618      	mov	r0, r3
 80013a2:	f00f fae9 	bl	8010978 <osThreadCreate>
 80013a6:	4603      	mov	r3, r0
 80013a8:	4a46      	ldr	r2, [pc, #280]	; (80014c4 <MX_FREERTOS_Init+0x1b8>)
 80013aa:	6013      	str	r3, [r2, #0]

  /* definition and creation of Roll_PID */
  osThreadDef(Roll_PID, StartRoll_PID, osPriorityLow, 0, 128);
 80013ac:	4b46      	ldr	r3, [pc, #280]	; (80014c8 <MX_FREERTOS_Init+0x1bc>)
 80013ae:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 80013b2:	461d      	mov	r5, r3
 80013b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013b8:	682b      	ldr	r3, [r5, #0]
 80013ba:	6023      	str	r3, [r4, #0]
  Roll_PIDHandle = osThreadCreate(osThread(Roll_PID), NULL);
 80013bc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f00f fad8 	bl	8010978 <osThreadCreate>
 80013c8:	4603      	mov	r3, r0
 80013ca:	4a40      	ldr	r2, [pc, #256]	; (80014cc <MX_FREERTOS_Init+0x1c0>)
 80013cc:	6013      	str	r3, [r2, #0]

  /* definition and creation of Pitch_PID */
  osThreadDef(Pitch_PID, StartPitch_PID, osPriorityLow, 0, 128);
 80013ce:	4b40      	ldr	r3, [pc, #256]	; (80014d0 <MX_FREERTOS_Init+0x1c4>)
 80013d0:	f107 0468 	add.w	r4, r7, #104	; 0x68
 80013d4:	461d      	mov	r5, r3
 80013d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013da:	682b      	ldr	r3, [r5, #0]
 80013dc:	6023      	str	r3, [r4, #0]
  Pitch_PIDHandle = osThreadCreate(osThread(Pitch_PID), NULL);
 80013de:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80013e2:	2100      	movs	r1, #0
 80013e4:	4618      	mov	r0, r3
 80013e6:	f00f fac7 	bl	8010978 <osThreadCreate>
 80013ea:	4603      	mov	r3, r0
 80013ec:	4a39      	ldr	r2, [pc, #228]	; (80014d4 <MX_FREERTOS_Init+0x1c8>)
 80013ee:	6013      	str	r3, [r2, #0]

  /* definition and creation of Yaw_PID */
  osThreadDef(Yaw_PID, StartYaw_PID, osPriorityLow, 0, 128);
 80013f0:	4b39      	ldr	r3, [pc, #228]	; (80014d8 <MX_FREERTOS_Init+0x1cc>)
 80013f2:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80013f6:	461d      	mov	r5, r3
 80013f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013fc:	682b      	ldr	r3, [r5, #0]
 80013fe:	6023      	str	r3, [r4, #0]
  Yaw_PIDHandle = osThreadCreate(osThread(Yaw_PID), NULL);
 8001400:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f00f fab6 	bl	8010978 <osThreadCreate>
 800140c:	4603      	mov	r3, r0
 800140e:	4a33      	ldr	r2, [pc, #204]	; (80014dc <MX_FREERTOS_Init+0x1d0>)
 8001410:	6013      	str	r3, [r2, #0]

  /* definition and creation of PressureMonitor */
  osThreadDef(PressureMonitor, StartPressureMonitor, osPriorityLow, 0, 128);
 8001412:	4b33      	ldr	r3, [pc, #204]	; (80014e0 <MX_FREERTOS_Init+0x1d4>)
 8001414:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001418:	461d      	mov	r5, r3
 800141a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800141c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800141e:	682b      	ldr	r3, [r5, #0]
 8001420:	6023      	str	r3, [r4, #0]
  PressureMonitorHandle = osThreadCreate(osThread(PressureMonitor), NULL);
 8001422:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001426:	2100      	movs	r1, #0
 8001428:	4618      	mov	r0, r3
 800142a:	f00f faa5 	bl	8010978 <osThreadCreate>
 800142e:	4603      	mov	r3, r0
 8001430:	4a2c      	ldr	r2, [pc, #176]	; (80014e4 <MX_FREERTOS_Init+0x1d8>)
 8001432:	6013      	str	r3, [r2, #0]

  /* definition and creation of GPS */
  osThreadDef(GPS, StartGPS, osPriorityLow, 0, 128);
 8001434:	4b2c      	ldr	r3, [pc, #176]	; (80014e8 <MX_FREERTOS_Init+0x1dc>)
 8001436:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800143a:	461d      	mov	r5, r3
 800143c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800143e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001440:	682b      	ldr	r3, [r5, #0]
 8001442:	6023      	str	r3, [r4, #0]
  GPSHandle = osThreadCreate(osThread(GPS), NULL);
 8001444:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001448:	2100      	movs	r1, #0
 800144a:	4618      	mov	r0, r3
 800144c:	f00f fa94 	bl	8010978 <osThreadCreate>
 8001450:	4603      	mov	r3, r0
 8001452:	4a26      	ldr	r2, [pc, #152]	; (80014ec <MX_FREERTOS_Init+0x1e0>)
 8001454:	6013      	str	r3, [r2, #0]

  /* definition and creation of MainTask */
  osThreadDef(MainTask, StartMainTask, osPriorityLow, 0, 256);
 8001456:	4b26      	ldr	r3, [pc, #152]	; (80014f0 <MX_FREERTOS_Init+0x1e4>)
 8001458:	f107 0418 	add.w	r4, r7, #24
 800145c:	461d      	mov	r5, r3
 800145e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001460:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001462:	682b      	ldr	r3, [r5, #0]
 8001464:	6023      	str	r3, [r4, #0]
  MainTaskHandle = osThreadCreate(osThread(MainTask), NULL);
 8001466:	f107 0318 	add.w	r3, r7, #24
 800146a:	2100      	movs	r1, #0
 800146c:	4618      	mov	r0, r3
 800146e:	f00f fa83 	bl	8010978 <osThreadCreate>
 8001472:	4603      	mov	r3, r0
 8001474:	4a1f      	ldr	r2, [pc, #124]	; (80014f4 <MX_FREERTOS_Init+0x1e8>)
 8001476:	6013      	str	r3, [r2, #0]

  /* definition and creation of BatteryMonitori */
  osThreadDef(BatteryMonitori, StartBatteryMonitoring, osPriorityLow, 0, 128);
 8001478:	4b1f      	ldr	r3, [pc, #124]	; (80014f8 <MX_FREERTOS_Init+0x1ec>)
 800147a:	1d3c      	adds	r4, r7, #4
 800147c:	461d      	mov	r5, r3
 800147e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001480:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001482:	682b      	ldr	r3, [r5, #0]
 8001484:	6023      	str	r3, [r4, #0]
  BatteryMonitoriHandle = osThreadCreate(osThread(BatteryMonitori), NULL);
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	2100      	movs	r1, #0
 800148a:	4618      	mov	r0, r3
 800148c:	f00f fa74 	bl	8010978 <osThreadCreate>
 8001490:	4603      	mov	r3, r0
 8001492:	4a1a      	ldr	r2, [pc, #104]	; (80014fc <MX_FREERTOS_Init+0x1f0>)
 8001494:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001496:	bf00      	nop
 8001498:	37b0      	adds	r7, #176	; 0xb0
 800149a:	46bd      	mov	sp, r7
 800149c:	bdb0      	pop	{r4, r5, r7, pc}
 800149e:	bf00      	nop
 80014a0:	2000097c 	.word	0x2000097c
 80014a4:	48000400 	.word	0x48000400
 80014a8:	20000434 	.word	0x20000434
 80014ac:	200003bc 	.word	0x200003bc
 80014b0:	20000370 	.word	0x20000370
 80014b4:	20000364 	.word	0x20000364
 80014b8:	20000368 	.word	0x20000368
 80014bc:	2000036c 	.word	0x2000036c
 80014c0:	080145e8 	.word	0x080145e8
 80014c4:	20000344 	.word	0x20000344
 80014c8:	08014608 	.word	0x08014608
 80014cc:	20000348 	.word	0x20000348
 80014d0:	08014628 	.word	0x08014628
 80014d4:	2000034c 	.word	0x2000034c
 80014d8:	08014644 	.word	0x08014644
 80014dc:	20000350 	.word	0x20000350
 80014e0:	08014668 	.word	0x08014668
 80014e4:	20000354 	.word	0x20000354
 80014e8:	08014680 	.word	0x08014680
 80014ec:	20000358 	.word	0x20000358
 80014f0:	080146a0 	.word	0x080146a0
 80014f4:	2000035c 	.word	0x2000035c
 80014f8:	080146c4 	.word	0x080146c4
 80014fc:	20000360 	.word	0x20000360

08001500 <StartLedTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLedTask */
void StartLedTask(void const * argument)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	/*htim3.Instance->CCR1 = 1000;
	vTaskDelay(100);
	htim3.Instance->CCR1 = 0;*/
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001508:	f44f 7100 	mov.w	r1, #512	; 0x200
 800150c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001510:	f004 fdac 	bl	800606c <HAL_GPIO_TogglePin>
    vTaskDelay(5000);
 8001514:	f241 3088 	movw	r0, #5000	; 0x1388
 8001518:	f010 f8e0 	bl	80116dc <vTaskDelay>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800151c:	e7f4      	b.n	8001508 <StartLedTask+0x8>
	...

08001520 <StartRoll_PID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRoll_PID */
void StartRoll_PID(void const * argument)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRoll_PID */


	/*PID factor init*/
	Pid_Init(&hpid_roll, PID_KP_ROLL, PID_KI_ROLL, PID_KD_ROLL);
 8001528:	ed9f 1a11 	vldr	s2, [pc, #68]	; 8001570 <StartRoll_PID+0x50>
 800152c:	eddf 0a11 	vldr	s1, [pc, #68]	; 8001574 <StartRoll_PID+0x54>
 8001530:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8001578 <StartRoll_PID+0x58>
 8001534:	4811      	ldr	r0, [pc, #68]	; (800157c <StartRoll_PID+0x5c>)
 8001536:	f001 fe99 	bl	800326c <Pid_Init>

  /* Infinite loop */
	for(;;)
	{	/*Read roll axis data*/
		xSemaphoreTake(I2C_ControllerHandle,25);
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <StartRoll_PID+0x60>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2119      	movs	r1, #25
 8001540:	4618      	mov	r0, r3
 8001542:	f00f fd89 	bl	8011058 <xQueueSemaphoreTake>
		BNO055_ReadEuler_Roll(&hi2c2, &IMU_BNO055_struct);
 8001546:	490f      	ldr	r1, [pc, #60]	; (8001584 <StartRoll_PID+0x64>)
 8001548:	480f      	ldr	r0, [pc, #60]	; (8001588 <StartRoll_PID+0x68>)
 800154a:	f000 ffa7 	bl	800249c <BNO055_ReadEuler_Roll>
		xSemaphoreGive(I2C_ControllerHandle);
 800154e:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <StartRoll_PID+0x60>)
 8001550:	6818      	ldr	r0, [r3, #0]
 8001552:	2300      	movs	r3, #0
 8001554:	2200      	movs	r2, #0
 8001556:	2100      	movs	r1, #0
 8001558:	f00f fc0a 	bl	8010d70 <xQueueGenericSend>

		/*Compensate PID*/
		Pid_CompensateRoll(&hpid_roll, &COMMAND_struct, &IMU_BNO055_struct, &HDW_CONTROLLER_struct);
 800155c:	4b0b      	ldr	r3, [pc, #44]	; (800158c <StartRoll_PID+0x6c>)
 800155e:	4a09      	ldr	r2, [pc, #36]	; (8001584 <StartRoll_PID+0x64>)
 8001560:	490b      	ldr	r1, [pc, #44]	; (8001590 <StartRoll_PID+0x70>)
 8001562:	4806      	ldr	r0, [pc, #24]	; (800157c <StartRoll_PID+0x5c>)
 8001564:	f001 fee0 	bl	8003328 <Pid_CompensateRoll>
		vTaskDelay(150);
 8001568:	2096      	movs	r0, #150	; 0x96
 800156a:	f010 f8b7 	bl	80116dc <vTaskDelay>
		xSemaphoreTake(I2C_ControllerHandle,25);
 800156e:	e7e4      	b.n	800153a <StartRoll_PID+0x1a>
 8001570:	bdb15662 	.word	0xbdb15662
 8001574:	bce59984 	.word	0xbce59984
 8001578:	be07bf5a 	.word	0xbe07bf5a
 800157c:	20000320 	.word	0x20000320
 8001580:	20000364 	.word	0x20000364
 8001584:	200003bc 	.word	0x200003bc
 8001588:	20000370 	.word	0x20000370
 800158c:	20000434 	.word	0x20000434
 8001590:	20000420 	.word	0x20000420

08001594 <StartPitch_PID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPitch_PID */
void StartPitch_PID(void const * argument)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPitch_PID */
	Pid_Init(&hpid_pitch, PID_KP_PITCH, PID_KI_PITCH, PID_KD_PITCH);
 800159c:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 80015a0:	eddf 0a10 	vldr	s1, [pc, #64]	; 80015e4 <StartPitch_PID+0x50>
 80015a4:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80015e8 <StartPitch_PID+0x54>
 80015a8:	4810      	ldr	r0, [pc, #64]	; (80015ec <StartPitch_PID+0x58>)
 80015aa:	f001 fe5f 	bl	800326c <Pid_Init>
  /* Infinite loop */
  for(;;)
  {
	  	/*Read pitch axis data*/
		xSemaphoreTake(I2C_ControllerHandle,25);
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <StartPitch_PID+0x5c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2119      	movs	r1, #25
 80015b4:	4618      	mov	r0, r3
 80015b6:	f00f fd4f 	bl	8011058 <xQueueSemaphoreTake>
		BNO055_ReadEuler_Pitch(&hi2c2, &IMU_BNO055_struct);
 80015ba:	490e      	ldr	r1, [pc, #56]	; (80015f4 <StartPitch_PID+0x60>)
 80015bc:	480e      	ldr	r0, [pc, #56]	; (80015f8 <StartPitch_PID+0x64>)
 80015be:	f000 ffbf 	bl	8002540 <BNO055_ReadEuler_Pitch>
		xSemaphoreGive(I2C_ControllerHandle);
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <StartPitch_PID+0x5c>)
 80015c4:	6818      	ldr	r0, [r3, #0]
 80015c6:	2300      	movs	r3, #0
 80015c8:	2200      	movs	r2, #0
 80015ca:	2100      	movs	r1, #0
 80015cc:	f00f fbd0 	bl	8010d70 <xQueueGenericSend>

		/*Compensate PID */
		Pid_CompensatePitch(&hpid_pitch, &COMMAND_struct, &IMU_BNO055_struct, &HDW_CONTROLLER_struct);
 80015d0:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <StartPitch_PID+0x68>)
 80015d2:	4a08      	ldr	r2, [pc, #32]	; (80015f4 <StartPitch_PID+0x60>)
 80015d4:	490a      	ldr	r1, [pc, #40]	; (8001600 <StartPitch_PID+0x6c>)
 80015d6:	4805      	ldr	r0, [pc, #20]	; (80015ec <StartPitch_PID+0x58>)
 80015d8:	f001 ff6c 	bl	80034b4 <Pid_CompensatePitch>
		vTaskDelay(150);
 80015dc:	2096      	movs	r0, #150	; 0x96
 80015de:	f010 f87d 	bl	80116dc <vTaskDelay>
		xSemaphoreTake(I2C_ControllerHandle,25);
 80015e2:	e7e4      	b.n	80015ae <StartPitch_PID+0x1a>
 80015e4:	3ccccccd 	.word	0x3ccccccd
 80015e8:	42c80000 	.word	0x42c80000
 80015ec:	200002d8 	.word	0x200002d8
 80015f0:	20000364 	.word	0x20000364
 80015f4:	200003bc 	.word	0x200003bc
 80015f8:	20000370 	.word	0x20000370
 80015fc:	20000434 	.word	0x20000434
 8001600:	20000420 	.word	0x20000420

08001604 <StartYaw_PID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartYaw_PID */
void StartYaw_PID(void const * argument)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartYaw_PID */
	Pid_Init(&hpid_yaw, PID_KP_YAW, PID_KI_YAW, PID_KD_YAW);
 800160c:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 8001610:	eddf 0a10 	vldr	s1, [pc, #64]	; 8001654 <StartYaw_PID+0x50>
 8001614:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8001658 <StartYaw_PID+0x54>
 8001618:	4810      	ldr	r0, [pc, #64]	; (800165c <StartYaw_PID+0x58>)
 800161a:	f001 fe27 	bl	800326c <Pid_Init>
  /* Infinite loop */
  for(;;)
  {
	  	/*Read yaw axis data*/
		xSemaphoreTake(I2C_ControllerHandle,25);
 800161e:	4b10      	ldr	r3, [pc, #64]	; (8001660 <StartYaw_PID+0x5c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2119      	movs	r1, #25
 8001624:	4618      	mov	r0, r3
 8001626:	f00f fd17 	bl	8011058 <xQueueSemaphoreTake>
		BNO055_ReadEuler_Yaw(&hi2c2, &IMU_BNO055_struct);
 800162a:	490e      	ldr	r1, [pc, #56]	; (8001664 <StartYaw_PID+0x60>)
 800162c:	480e      	ldr	r0, [pc, #56]	; (8001668 <StartYaw_PID+0x64>)
 800162e:	f000 ffd9 	bl	80025e4 <BNO055_ReadEuler_Yaw>
		xSemaphoreGive(I2C_ControllerHandle);
 8001632:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <StartYaw_PID+0x5c>)
 8001634:	6818      	ldr	r0, [r3, #0]
 8001636:	2300      	movs	r3, #0
 8001638:	2200      	movs	r2, #0
 800163a:	2100      	movs	r1, #0
 800163c:	f00f fb98 	bl	8010d70 <xQueueGenericSend>

		/*Compensate PID step 1 - error calculation */
		Pid_CompensateYaw(&hpid_yaw, &COMMAND_struct, &IMU_BNO055_struct, &HDW_CONTROLLER_struct);
 8001640:	4b0a      	ldr	r3, [pc, #40]	; (800166c <StartYaw_PID+0x68>)
 8001642:	4a08      	ldr	r2, [pc, #32]	; (8001664 <StartYaw_PID+0x60>)
 8001644:	490a      	ldr	r1, [pc, #40]	; (8001670 <StartYaw_PID+0x6c>)
 8001646:	4805      	ldr	r0, [pc, #20]	; (800165c <StartYaw_PID+0x58>)
 8001648:	f001 fe2b 	bl	80032a2 <Pid_CompensateYaw>
		vTaskDelay(150);
 800164c:	2096      	movs	r0, #150	; 0x96
 800164e:	f010 f845 	bl	80116dc <vTaskDelay>
		xSemaphoreTake(I2C_ControllerHandle,25);
 8001652:	e7e4      	b.n	800161e <StartYaw_PID+0x1a>
 8001654:	3ccccccd 	.word	0x3ccccccd
 8001658:	42c80000 	.word	0x42c80000
 800165c:	200002fc 	.word	0x200002fc
 8001660:	20000364 	.word	0x20000364
 8001664:	200003bc 	.word	0x200003bc
 8001668:	20000370 	.word	0x20000370
 800166c:	20000434 	.word	0x20000434
 8001670:	20000420 	.word	0x20000420

08001674 <StartPressureMonitor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPressureMonitor */
void StartPressureMonitor(void const * argument)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPressureMonitor */
	BMP390_Init(&hi2c2);
 800167c:	480f      	ldr	r0, [pc, #60]	; (80016bc <StartPressureMonitor+0x48>)
 800167e:	f000 f9e5 	bl	8001a4c <BMP390_Init>

	/*Barometer calibration*/
	BMP390_GetP0Pressure(&hi2c2, &ALTIMETER_struct, I2C_ControllerHandle);
 8001682:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <StartPressureMonitor+0x4c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	461a      	mov	r2, r3
 8001688:	490e      	ldr	r1, [pc, #56]	; (80016c4 <StartPressureMonitor+0x50>)
 800168a:	480c      	ldr	r0, [pc, #48]	; (80016bc <StartPressureMonitor+0x48>)
 800168c:	f000 fa28 	bl	8001ae0 <BMP390_GetP0Pressure>

  /* Infinite loop */
  for(;;)
  {
	  BMP390_ReadPress(&hi2c2,&ALTIMETER_struct, I2C_ControllerHandle);
 8001690:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <StartPressureMonitor+0x4c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	461a      	mov	r2, r3
 8001696:	490b      	ldr	r1, [pc, #44]	; (80016c4 <StartPressureMonitor+0x50>)
 8001698:	4808      	ldr	r0, [pc, #32]	; (80016bc <StartPressureMonitor+0x48>)
 800169a:	f000 f971 	bl	8001980 <BMP390_ReadPress>
	  BMP390_ReadTemp(&hi2c2, &ALTIMETER_struct, I2C_ControllerHandle);
 800169e:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <StartPressureMonitor+0x4c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	461a      	mov	r2, r3
 80016a4:	4907      	ldr	r1, [pc, #28]	; (80016c4 <StartPressureMonitor+0x50>)
 80016a6:	4805      	ldr	r0, [pc, #20]	; (80016bc <StartPressureMonitor+0x48>)
 80016a8:	f000 f912 	bl	80018d0 <BMP390_ReadTemp>
	  BMP390_GetRelativeAltitude(&ALTIMETER_struct);
 80016ac:	4805      	ldr	r0, [pc, #20]	; (80016c4 <StartPressureMonitor+0x50>)
 80016ae:	f000 fa43 	bl	8001b38 <BMP390_GetRelativeAltitude>
	  /*Recalibrate sensor if gps data move too much*/
	  vTaskDelay(500);
 80016b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016b6:	f010 f811 	bl	80116dc <vTaskDelay>
	  BMP390_ReadPress(&hi2c2,&ALTIMETER_struct, I2C_ControllerHandle);
 80016ba:	e7e9      	b.n	8001690 <StartPressureMonitor+0x1c>
 80016bc:	20000370 	.word	0x20000370
 80016c0:	20000364 	.word	0x20000364
 80016c4:	20000464 	.word	0x20000464

080016c8 <StartGPS>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGPS */
void StartGPS(void const * argument)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  /*TO BE DONE marche pas trop */
	  /*When UART IT then block task until IT*/
	  HAL_UART_Receive_IT(&huart4, &gps_receive_rx, BUFFER_SIZE_NMEA);
 80016d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016d4:	4909      	ldr	r1, [pc, #36]	; (80016fc <StartGPS+0x34>)
 80016d6:	480a      	ldr	r0, [pc, #40]	; (8001700 <StartGPS+0x38>)
 80016d8:	f009 faae 	bl	800ac38 <HAL_UART_Receive_IT>
	  xSemaphoreTake(GPS_UART_SemaphoreHandle,100000);
 80016dc:	4b09      	ldr	r3, [pc, #36]	; (8001704 <StartGPS+0x3c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4909      	ldr	r1, [pc, #36]	; (8001708 <StartGPS+0x40>)
 80016e2:	4618      	mov	r0, r3
 80016e4:	f00f fcb8 	bl	8011058 <xQueueSemaphoreTake>
	  gps_ReadNMEA(gps_receive_rx,&GPS_struct);
 80016e8:	4908      	ldr	r1, [pc, #32]	; (800170c <StartGPS+0x44>)
 80016ea:	4804      	ldr	r0, [pc, #16]	; (80016fc <StartGPS+0x34>)
 80016ec:	f001 f910 	bl	8002910 <gps_ReadNMEA>
	  vTaskDelay(1000);
 80016f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016f4:	f00f fff2 	bl	80116dc <vTaskDelay>
	  HAL_UART_Receive_IT(&huart4, &gps_receive_rx, BUFFER_SIZE_NMEA);
 80016f8:	e7ea      	b.n	80016d0 <StartGPS+0x8>
 80016fa:	bf00      	nop
 80016fc:	200004a8 	.word	0x200004a8
 8001700:	200009c8 	.word	0x200009c8
 8001704:	20000368 	.word	0x20000368
 8001708:	000186a0 	.word	0x000186a0
 800170c:	20000478 	.word	0x20000478

08001710 <StartMainTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMainTask */
void StartMainTask(void const * argument)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMainTask */
	  xSemaphoreTake(HG_PROTECTION_SEMHandle,9999999999999999);
 8001718:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <StartMainTask+0x78>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	491b      	ldr	r1, [pc, #108]	; (800178c <StartMainTask+0x7c>)
 800171e:	4618      	mov	r0, r3
 8001720:	f00f fc9a 	bl	8011058 <xQueueSemaphoreTake>
	  xSemaphoreTake(HG_PROTECTION_SEMHandle,9999999999999999);
 8001724:	4b18      	ldr	r3, [pc, #96]	; (8001788 <StartMainTask+0x78>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4918      	ldr	r1, [pc, #96]	; (800178c <StartMainTask+0x7c>)
 800172a:	4618      	mov	r0, r3
 800172c:	f00f fc94 	bl	8011058 <xQueueSemaphoreTake>
	for(int i=0;i<5;i++){
 8001730:	2300      	movs	r3, #0
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	e011      	b.n	800175a <StartMainTask+0x4a>
		htim3.Instance->CCR1 = 1000;
 8001736:	4b16      	ldr	r3, [pc, #88]	; (8001790 <StartMainTask+0x80>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800173e:	635a      	str	r2, [r3, #52]	; 0x34
		vTaskDelay(100);
 8001740:	2064      	movs	r0, #100	; 0x64
 8001742:	f00f ffcb 	bl	80116dc <vTaskDelay>
		htim3.Instance->CCR1 = 0;
 8001746:	4b12      	ldr	r3, [pc, #72]	; (8001790 <StartMainTask+0x80>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2200      	movs	r2, #0
 800174c:	635a      	str	r2, [r3, #52]	; 0x34
		vTaskDelay(100);
 800174e:	2064      	movs	r0, #100	; 0x64
 8001750:	f00f ffc4 	bl	80116dc <vTaskDelay>
	for(int i=0;i<5;i++){
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	3301      	adds	r3, #1
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2b04      	cmp	r3, #4
 800175e:	ddea      	ble.n	8001736 <StartMainTask+0x26>
	}
  /* Infinite loop */
  for(;;)
  {

	  BNO055_ReadLina(&hi2c2, &IMU_BNO055_struct, I2C_ControllerHandle);
 8001760:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <StartMainTask+0x84>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	461a      	mov	r2, r3
 8001766:	490c      	ldr	r1, [pc, #48]	; (8001798 <StartMainTask+0x88>)
 8001768:	480c      	ldr	r0, [pc, #48]	; (800179c <StartMainTask+0x8c>)
 800176a:	f000 fd79 	bl	8002260 <BNO055_ReadLina>
	  BNO055_ReadAccel(&hi2c2, &IMU_BNO055_struct, I2C_ControllerHandle);
 800176e:	4b09      	ldr	r3, [pc, #36]	; (8001794 <StartMainTask+0x84>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	461a      	mov	r2, r3
 8001774:	4908      	ldr	r1, [pc, #32]	; (8001798 <StartMainTask+0x88>)
 8001776:	4809      	ldr	r0, [pc, #36]	; (800179c <StartMainTask+0x8c>)
 8001778:	f000 fc52 	bl	8002020 <BNO055_ReadAccel>
	  vTaskDelay(1000);
 800177c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001780:	f00f ffac 	bl	80116dc <vTaskDelay>
	  BNO055_ReadLina(&hi2c2, &IMU_BNO055_struct, I2C_ControllerHandle);
 8001784:	e7ec      	b.n	8001760 <StartMainTask+0x50>
 8001786:	bf00      	nop
 8001788:	2000036c 	.word	0x2000036c
 800178c:	6fc0ffff 	.word	0x6fc0ffff
 8001790:	20000930 	.word	0x20000930
 8001794:	20000364 	.word	0x20000364
 8001798:	200003bc 	.word	0x200003bc
 800179c:	20000370 	.word	0x20000370

080017a0 <StartBatteryMonitoring>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBatteryMonitoring */
void StartBatteryMonitoring(void const * argument)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBatteryMonitoring */
  /* Infinite loop */
  for(;;)
  {
	Battery_ReadBatteryVoltage(&BATTERY_Struct,BatteryMonitoringData);
 80017a8:	4909      	ldr	r1, [pc, #36]	; (80017d0 <StartBatteryMonitoring+0x30>)
 80017aa:	480a      	ldr	r0, [pc, #40]	; (80017d4 <StartBatteryMonitoring+0x34>)
 80017ac:	f7ff fcc0 	bl	8001130 <Battery_ReadBatteryVoltage>
	Battery_ReadCurrent5V(&BATTERY_Struct, BatteryMonitoringData);
 80017b0:	4907      	ldr	r1, [pc, #28]	; (80017d0 <StartBatteryMonitoring+0x30>)
 80017b2:	4808      	ldr	r0, [pc, #32]	; (80017d4 <StartBatteryMonitoring+0x34>)
 80017b4:	f7ff fd30 	bl	8001218 <Battery_ReadCurrent5V>
	Battery_ReadCurrent3V3(&BATTERY_Struct, BatteryMonitoringData);
 80017b8:	4905      	ldr	r1, [pc, #20]	; (80017d0 <StartBatteryMonitoring+0x30>)
 80017ba:	4806      	ldr	r0, [pc, #24]	; (80017d4 <StartBatteryMonitoring+0x34>)
 80017bc:	f7ff fce8 	bl	8001190 <Battery_ReadCurrent3V3>
	Battery_RemaningTime(&BATTERY_Struct);
 80017c0:	4804      	ldr	r0, [pc, #16]	; (80017d4 <StartBatteryMonitoring+0x34>)
 80017c2:	f7ff fd6d 	bl	80012a0 <Battery_RemaningTime>
    vTaskDelay(5000);
 80017c6:	f241 3088 	movw	r0, #5000	; 0x1388
 80017ca:	f00f ff87 	bl	80116dc <vTaskDelay>
	Battery_ReadBatteryVoltage(&BATTERY_Struct,BatteryMonitoringData);
 80017ce:	e7eb      	b.n	80017a8 <StartBatteryMonitoring+0x8>
 80017d0:	20000890 	.word	0x20000890
 80017d4:	20000498 	.word	0x20000498

080017d8 <BMP390_EnablePressureSensor>:
	//Clearing the register is done by reading it
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, STATUS_REG, 1, &data, 1, 10);
}

void BMP390_EnablePressureSensor(I2C_HandleTypeDef *I2C){
 80017d8:	b580      	push	{r7, lr}
 80017da:	b088      	sub	sp, #32
 80017dc:	af04      	add	r7, sp, #16
 80017de:	6078      	str	r0, [r7, #4]
	uint8_t reg_value;
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
 80017e0:	230a      	movs	r3, #10
 80017e2:	9302      	str	r3, [sp, #8]
 80017e4:	2301      	movs	r3, #1
 80017e6:	9301      	str	r3, [sp, #4]
 80017e8:	f107 030f 	add.w	r3, r7, #15
 80017ec:	9300      	str	r3, [sp, #0]
 80017ee:	2301      	movs	r3, #1
 80017f0:	221b      	movs	r2, #27
 80017f2:	21ec      	movs	r1, #236	; 0xec
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f004 fe19 	bl	800642c <HAL_I2C_Mem_Read>
	data = (reg_value&0x32) + 0x01;
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
 80017fc:	f003 0332 	and.w	r3, r3, #50	; 0x32
 8001800:	b2db      	uxtb	r3, r3
 8001802:	3301      	adds	r3, #1
 8001804:	b2db      	uxtb	r3, r3
 8001806:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
 8001808:	230a      	movs	r3, #10
 800180a:	9302      	str	r3, [sp, #8]
 800180c:	2301      	movs	r3, #1
 800180e:	9301      	str	r3, [sp, #4]
 8001810:	f107 030e 	add.w	r3, r7, #14
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	2301      	movs	r3, #1
 8001818:	221b      	movs	r2, #27
 800181a:	21ec      	movs	r1, #236	; 0xec
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f004 fcf1 	bl	8006204 <HAL_I2C_Mem_Write>
}
 8001822:	bf00      	nop
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <BMP390_EnableTempSensor>:
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
	data = (reg_value&0x31);
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
}

void BMP390_EnableTempSensor(I2C_HandleTypeDef *I2C){
 800182a:	b580      	push	{r7, lr}
 800182c:	b088      	sub	sp, #32
 800182e:	af04      	add	r7, sp, #16
 8001830:	6078      	str	r0, [r7, #4]
	uint8_t reg_value;
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
 8001832:	230a      	movs	r3, #10
 8001834:	9302      	str	r3, [sp, #8]
 8001836:	2301      	movs	r3, #1
 8001838:	9301      	str	r3, [sp, #4]
 800183a:	f107 030f 	add.w	r3, r7, #15
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	2301      	movs	r3, #1
 8001842:	221b      	movs	r2, #27
 8001844:	21ec      	movs	r1, #236	; 0xec
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f004 fdf0 	bl	800642c <HAL_I2C_Mem_Read>
	data = (reg_value&0x31) + 0x01;
 800184c:	7bfb      	ldrb	r3, [r7, #15]
 800184e:	f003 0331 	and.w	r3, r3, #49	; 0x31
 8001852:	b2db      	uxtb	r3, r3
 8001854:	3301      	adds	r3, #1
 8001856:	b2db      	uxtb	r3, r3
 8001858:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
 800185a:	230a      	movs	r3, #10
 800185c:	9302      	str	r3, [sp, #8]
 800185e:	2301      	movs	r3, #1
 8001860:	9301      	str	r3, [sp, #4]
 8001862:	f107 030e 	add.w	r3, r7, #14
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	2301      	movs	r3, #1
 800186a:	221b      	movs	r2, #27
 800186c:	21ec      	movs	r1, #236	; 0xec
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f004 fcc8 	bl	8006204 <HAL_I2C_Mem_Write>
}
 8001874:	bf00      	nop
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <BMP390_WakeUp>:
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
	data = (reg_value&0x03);
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
}

void BMP390_WakeUp(I2C_HandleTypeDef *I2C){
 800187c:	b580      	push	{r7, lr}
 800187e:	b088      	sub	sp, #32
 8001880:	af04      	add	r7, sp, #16
 8001882:	6078      	str	r0, [r7, #4]
	uint8_t reg_value;
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
 8001884:	230a      	movs	r3, #10
 8001886:	9302      	str	r3, [sp, #8]
 8001888:	2301      	movs	r3, #1
 800188a:	9301      	str	r3, [sp, #4]
 800188c:	f107 030f 	add.w	r3, r7, #15
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	2301      	movs	r3, #1
 8001894:	221b      	movs	r2, #27
 8001896:	21ec      	movs	r1, #236	; 0xec
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f004 fdc7 	bl	800642c <HAL_I2C_Mem_Read>
	data = (reg_value&0x03) + 0x30;
 800189e:	7bfb      	ldrb	r3, [r7, #15]
 80018a0:	f003 0303 	and.w	r3, r3, #3
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	3330      	adds	r3, #48	; 0x30
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
 80018ac:	230a      	movs	r3, #10
 80018ae:	9302      	str	r3, [sp, #8]
 80018b0:	2301      	movs	r3, #1
 80018b2:	9301      	str	r3, [sp, #4]
 80018b4:	f107 030e 	add.w	r3, r7, #14
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	2301      	movs	r3, #1
 80018bc:	221b      	movs	r2, #27
 80018be:	21ec      	movs	r1, #236	; 0xec
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f004 fc9f 	bl	8006204 <HAL_I2C_Mem_Write>
}
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <BMP390_ReadTemp>:
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, CONFIG_REG, 1, &reg_value, 1, 10);
	data = (reg_value&0x01) + (value<<1);
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, OSR_REG, 1, &data, 1, 10);
}

void BMP390_ReadTemp(I2C_HandleTypeDef *I2C,ALTIMETER_t *altimeter,osMutexId I2CControllerProtect){
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08a      	sub	sp, #40	; 0x28
 80018d4:	af04      	add	r7, sp, #16
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
	uint8_t XLSB;
	uint8_t LSB;
	uint8_t MSB;
	uint32_t temp;

	xSemaphoreTake(I2CControllerProtect, 35);
 80018dc:	2123      	movs	r1, #35	; 0x23
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f00f fbba 	bl	8011058 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, TEMP_XLSB_REG, 1, &XLSB, 1, 10);
 80018e4:	230a      	movs	r3, #10
 80018e6:	9302      	str	r3, [sp, #8]
 80018e8:	2301      	movs	r3, #1
 80018ea:	9301      	str	r3, [sp, #4]
 80018ec:	f107 0313 	add.w	r3, r7, #19
 80018f0:	9300      	str	r3, [sp, #0]
 80018f2:	2301      	movs	r3, #1
 80018f4:	2207      	movs	r2, #7
 80018f6:	21ec      	movs	r1, #236	; 0xec
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f004 fd97 	bl	800642c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, TEMP_LSB_REG, 1, &LSB, 1, 10);
 80018fe:	230a      	movs	r3, #10
 8001900:	9302      	str	r3, [sp, #8]
 8001902:	2301      	movs	r3, #1
 8001904:	9301      	str	r3, [sp, #4]
 8001906:	f107 0312 	add.w	r3, r7, #18
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	2301      	movs	r3, #1
 800190e:	2208      	movs	r2, #8
 8001910:	21ec      	movs	r1, #236	; 0xec
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	f004 fd8a 	bl	800642c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, TEMP_MSB_REG, 1, &MSB, 1, 10);
 8001918:	230a      	movs	r3, #10
 800191a:	9302      	str	r3, [sp, #8]
 800191c:	2301      	movs	r3, #1
 800191e:	9301      	str	r3, [sp, #4]
 8001920:	f107 0311 	add.w	r3, r7, #17
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	2301      	movs	r3, #1
 8001928:	2209      	movs	r2, #9
 800192a:	21ec      	movs	r1, #236	; 0xec
 800192c:	68f8      	ldr	r0, [r7, #12]
 800192e:	f004 fd7d 	bl	800642c <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 8001932:	2300      	movs	r3, #0
 8001934:	2200      	movs	r2, #0
 8001936:	2100      	movs	r1, #0
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f00f fa19 	bl	8010d70 <xQueueGenericSend>
	temp = XLSB + (LSB<<8) + (MSB<<16);
 800193e:	7cfb      	ldrb	r3, [r7, #19]
 8001940:	461a      	mov	r2, r3
 8001942:	7cbb      	ldrb	r3, [r7, #18]
 8001944:	021b      	lsls	r3, r3, #8
 8001946:	441a      	add	r2, r3
 8001948:	7c7b      	ldrb	r3, [r7, #17]
 800194a:	041b      	lsls	r3, r3, #16
 800194c:	4413      	add	r3, r2
 800194e:	617b      	str	r3, [r7, #20]
	altimeter->temp_data = (temp/258111);
 8001950:	697a      	ldr	r2, [r7, #20]
 8001952:	4b09      	ldr	r3, [pc, #36]	; (8001978 <BMP390_ReadTemp+0xa8>)
 8001954:	fba3 1302 	umull	r1, r3, r3, r2
 8001958:	1ad2      	subs	r2, r2, r3
 800195a:	0852      	lsrs	r2, r2, #1
 800195c:	4413      	add	r3, r2
 800195e:	0c5b      	lsrs	r3, r3, #17
 8001960:	ee07 3a90 	vmov	s15, r3
 8001964:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800196e:	bf00      	nop
 8001970:	3718      	adds	r7, #24
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	04000105 	.word	0x04000105
 800197c:	00000000 	.word	0x00000000

08001980 <BMP390_ReadPress>:

void BMP390_ReadPress(I2C_HandleTypeDef *I2C,ALTIMETER_t *altimeter,osMutexId I2CControllerProtect){
 8001980:	b580      	push	{r7, lr}
 8001982:	b08a      	sub	sp, #40	; 0x28
 8001984:	af04      	add	r7, sp, #16
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
	uint8_t XLSB;
	uint8_t LSB;
	uint8_t MSB;
	uint32_t press;

	xSemaphoreTake(I2CControllerProtect, 35);
 800198c:	2123      	movs	r1, #35	; 0x23
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f00f fb62 	bl	8011058 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PRESS_XLSB_REG, 1, &XLSB, 1, 10);
 8001994:	230a      	movs	r3, #10
 8001996:	9302      	str	r3, [sp, #8]
 8001998:	2301      	movs	r3, #1
 800199a:	9301      	str	r3, [sp, #4]
 800199c:	f107 0313 	add.w	r3, r7, #19
 80019a0:	9300      	str	r3, [sp, #0]
 80019a2:	2301      	movs	r3, #1
 80019a4:	2204      	movs	r2, #4
 80019a6:	21ec      	movs	r1, #236	; 0xec
 80019a8:	68f8      	ldr	r0, [r7, #12]
 80019aa:	f004 fd3f 	bl	800642c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PRESS_LSB_REG, 1, &LSB, 1, 10);
 80019ae:	230a      	movs	r3, #10
 80019b0:	9302      	str	r3, [sp, #8]
 80019b2:	2301      	movs	r3, #1
 80019b4:	9301      	str	r3, [sp, #4]
 80019b6:	f107 0312 	add.w	r3, r7, #18
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	2301      	movs	r3, #1
 80019be:	2205      	movs	r2, #5
 80019c0:	21ec      	movs	r1, #236	; 0xec
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f004 fd32 	bl	800642c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PRESS_MSB_REG, 1, &MSB, 1, 10);
 80019c8:	230a      	movs	r3, #10
 80019ca:	9302      	str	r3, [sp, #8]
 80019cc:	2301      	movs	r3, #1
 80019ce:	9301      	str	r3, [sp, #4]
 80019d0:	f107 0311 	add.w	r3, r7, #17
 80019d4:	9300      	str	r3, [sp, #0]
 80019d6:	2301      	movs	r3, #1
 80019d8:	2206      	movs	r2, #6
 80019da:	21ec      	movs	r1, #236	; 0xec
 80019dc:	68f8      	ldr	r0, [r7, #12]
 80019de:	f004 fd25 	bl	800642c <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 80019e2:	2300      	movs	r3, #0
 80019e4:	2200      	movs	r2, #0
 80019e6:	2100      	movs	r1, #0
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f00f f9c1 	bl	8010d70 <xQueueGenericSend>
	press = XLSB + (LSB<<8) + (MSB<<16);
 80019ee:	7cfb      	ldrb	r3, [r7, #19]
 80019f0:	461a      	mov	r2, r3
 80019f2:	7cbb      	ldrb	r3, [r7, #18]
 80019f4:	021b      	lsls	r3, r3, #8
 80019f6:	441a      	add	r2, r3
 80019f8:	7c7b      	ldrb	r3, [r7, #17]
 80019fa:	041b      	lsls	r3, r3, #16
 80019fc:	4413      	add	r3, r2
 80019fe:	617b      	str	r3, [r7, #20]
	altimeter->pressure_hpa = (press*PRESS_STEP)+300;
 8001a00:	6978      	ldr	r0, [r7, #20]
 8001a02:	f7fe fd59 	bl	80004b8 <__aeabi_ui2d>
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <BMP390_ReadPress+0xc8>)
 8001a0c:	f7fe fdce 	bl	80005ac <__aeabi_dmul>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4610      	mov	r0, r2
 8001a16:	4619      	mov	r1, r3
 8001a18:	a309      	add	r3, pc, #36	; (adr r3, 8001a40 <BMP390_ReadPress+0xc0>)
 8001a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1e:	f7fe fc0f 	bl	8000240 <__adddf3>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	4610      	mov	r0, r2
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f7ff f86f 	bl	8000b0c <__aeabi_d2f>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	601a      	str	r2, [r3, #0]

}
 8001a34:	bf00      	nop
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	f3af 8000 	nop.w
 8001a40:	00000000 	.word	0x00000000
 8001a44:	4072c000 	.word	0x4072c000
 8001a48:	3f0db000 	.word	0x3f0db000

08001a4c <BMP390_Init>:
	xSemaphoreGive(I2CControllerProtect);
	time = XLSB + (LSB<<8) + (MSB<<16);
	altimeter->time_data = time;
}

uint8_t BMP390_Init(I2C_HandleTypeDef *I2C){
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b088      	sub	sp, #32
 8001a50:	af04      	add	r7, sp, #16
 8001a52:	6078      	str	r0, [r7, #4]

	uint8_t data;
	uint8_t res = 0;
 8001a54:	2300      	movs	r3, #0
 8001a56:	73fb      	strb	r3, [r7, #15]

	//Start by checking dev ID and REV iD
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, CHIP_ID_REG, 1, &data, 1, 10);
 8001a58:	230a      	movs	r3, #10
 8001a5a:	9302      	str	r3, [sp, #8]
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	9301      	str	r3, [sp, #4]
 8001a60:	f107 030e 	add.w	r3, r7, #14
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	2301      	movs	r3, #1
 8001a68:	2200      	movs	r2, #0
 8001a6a:	21ec      	movs	r1, #236	; 0xec
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f004 fcdd 	bl	800642c <HAL_I2C_Mem_Read>
	if(data!=0x60){
 8001a72:	7bbb      	ldrb	r3, [r7, #14]
 8001a74:	2b60      	cmp	r3, #96	; 0x60
 8001a76:	d001      	beq.n	8001a7c <BMP390_Init+0x30>
		res = 1;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	73fb      	strb	r3, [r7, #15]
	}
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, REV_ID_REG, 1, &data, 1, 10);
 8001a7c:	230a      	movs	r3, #10
 8001a7e:	9302      	str	r3, [sp, #8]
 8001a80:	2301      	movs	r3, #1
 8001a82:	9301      	str	r3, [sp, #4]
 8001a84:	f107 030e 	add.w	r3, r7, #14
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	21ec      	movs	r1, #236	; 0xec
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f004 fccb 	bl	800642c <HAL_I2C_Mem_Read>
	if(data!=0x01){
 8001a96:	7bbb      	ldrb	r3, [r7, #14]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d001      	beq.n	8001aa0 <BMP390_Init+0x54>
		res = 1;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	73fb      	strb	r3, [r7, #15]
	}

	//Enable all sensors
	BMP390_EnableTempSensor(I2C);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff fec2 	bl	800182a <BMP390_EnableTempSensor>
	BMP390_EnablePressureSensor(I2C);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff fe96 	bl	80017d8 <BMP390_EnablePressureSensor>

	BMP390_WakeUp(I2C);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f7ff fee5 	bl	800187c <BMP390_WakeUp>
	/*Wait until sensor wake up */
	HAL_Delay(5);
 8001ab2:	2005      	movs	r0, #5
 8001ab4:	f002 fb00 	bl	80040b8 <HAL_Delay>

	//Set the IT pin on high level and enable with pressure/temp sensor
	data = 0x42;
 8001ab8:	2342      	movs	r3, #66	; 0x42
 8001aba:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, INT_CTRL_REG, 1, &data, 1, 10);
 8001abc:	230a      	movs	r3, #10
 8001abe:	9302      	str	r3, [sp, #8]
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	9301      	str	r3, [sp, #4]
 8001ac4:	f107 030e 	add.w	r3, r7, #14
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	2301      	movs	r3, #1
 8001acc:	2219      	movs	r2, #25
 8001ace:	21ec      	movs	r1, #236	; 0xec
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f004 fb97 	bl	8006204 <HAL_I2C_Mem_Write>

	//Set Filter value
	//BMP390_SetFilter(I2C, 0x02);


	return res;
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <BMP390_GetP0Pressure>:

void BMP390_GetP0Pressure(I2C_HandleTypeDef *I2C,ALTIMETER_t *altimeter,osMutexId I2CControllerProtect){
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
	float P0;
	for(int i=0;i<STARTUP_PRESSURE_AVERAGE_COUNT;i++){
 8001aec:	2300      	movs	r3, #0
 8001aee:	613b      	str	r3, [r7, #16]
 8001af0:	e010      	b.n	8001b14 <BMP390_GetP0Pressure+0x34>
		BMP390_ReadPress(I2C, altimeter, I2CControllerProtect);
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	68b9      	ldr	r1, [r7, #8]
 8001af6:	68f8      	ldr	r0, [r7, #12]
 8001af8:	f7ff ff42 	bl	8001980 <BMP390_ReadPress>
		P0 += altimeter->pressure_hpa;
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	edd3 7a00 	vldr	s15, [r3]
 8001b02:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b0a:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i=0;i<STARTUP_PRESSURE_AVERAGE_COUNT;i++){
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	3301      	adds	r3, #1
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	2b09      	cmp	r3, #9
 8001b18:	ddeb      	ble.n	8001af2 <BMP390_GetP0Pressure+0x12>
	}
	altimeter->calibration_pressure = (P0/STARTUP_PRESSURE_AVERAGE_COUNT);
 8001b1a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b1e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001b22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001b2c:	bf00      	nop
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	0000      	movs	r0, r0
	...

08001b38 <BMP390_GetRelativeAltitude>:

/*Function use to calculate relative altitude. In order to work properly it should'nt be call before a calibration*/
void BMP390_GetRelativeAltitude(ALTIMETER_t *altimeter){
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
	altimeter->differential_altitude = 44330.0 * (1.0 - pow(altimeter->pressure_hpa / altimeter->calibration_pressure, 0.1903));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	ed93 7a00 	vldr	s14, [r3]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b4c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001b50:	ee16 0a90 	vmov	r0, s13
 8001b54:	f7fe fcd2 	bl	80004fc <__aeabi_f2d>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8001ba8 <BMP390_GetRelativeAltitude+0x70>
 8001b60:	ec43 2b10 	vmov	d0, r2, r3
 8001b64:	f011 fdf6 	bl	8013754 <pow>
 8001b68:	ec53 2b10 	vmov	r2, r3, d0
 8001b6c:	f04f 0000 	mov.w	r0, #0
 8001b70:	4911      	ldr	r1, [pc, #68]	; (8001bb8 <BMP390_GetRelativeAltitude+0x80>)
 8001b72:	f7fe fb63 	bl	800023c <__aeabi_dsub>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	4610      	mov	r0, r2
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	a30c      	add	r3, pc, #48	; (adr r3, 8001bb0 <BMP390_GetRelativeAltitude+0x78>)
 8001b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b84:	f7fe fd12 	bl	80005ac <__aeabi_dmul>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	4619      	mov	r1, r3
 8001b90:	f7fe ffbc 	bl	8000b0c <__aeabi_d2f>
 8001b94:	4602      	mov	r2, r0
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	611a      	str	r2, [r3, #16]
}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	f3af 8000 	nop.w
 8001ba8:	1a36e2eb 	.word	0x1a36e2eb
 8001bac:	3fc85bc0 	.word	0x3fc85bc0
 8001bb0:	00000000 	.word	0x00000000
 8001bb4:	40e5a540 	.word	0x40e5a540
 8001bb8:	3ff00000 	.word	0x3ff00000

08001bbc <BNO055_SetPage>:
 * Method use to switch page in IMU memory
 * param: I2C --> pointer on I2C handle struct
 * param: page --> integer value range 0 to 1 include
 * note: If a page value is bigger than 1 then no error will be raise so be carefull
 */
void BNO055_SetPage(I2C_HandleTypeDef *I2C,uint8_t page){
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af04      	add	r7, sp, #16
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_PAGE_ID, 1, &page, 1, 10);
 8001bc8:	230a      	movs	r3, #10
 8001bca:	9302      	str	r3, [sp, #8]
 8001bcc:	2301      	movs	r3, #1
 8001bce:	9301      	str	r3, [sp, #4]
 8001bd0:	1cfb      	adds	r3, r7, #3
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	2207      	movs	r2, #7
 8001bd8:	2150      	movs	r1, #80	; 0x50
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f004 fb12 	bl	8006204 <HAL_I2C_Mem_Write>
}
 8001be0:	bf00      	nop
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <BNO055_SetOperationMode>:
 * Method use to switch operation mode of IMU
 * param: I2C --> pointer on I2C handle struct
 * param: BNO055 --> pointer on IMU struct
 * param: mode --> operation mode already define in <bno055.h>
 */
void BNO055_SetOperationMode(I2C_HandleTypeDef *I2C,bno055_opmode_t mode,BNO055_t *BNO055){
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b088      	sub	sp, #32
 8001bec:	af04      	add	r7, sp, #16
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	607a      	str	r2, [r7, #4]
 8001bf4:	72fb      	strb	r3, [r7, #11]
	BNO055->operational_mode = mode;
 8001bf6:	7afa      	ldrb	r2, [r7, #11]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_OPR_MODE, 1, &mode, 1, 10);
 8001bfe:	230a      	movs	r3, #10
 8001c00:	9302      	str	r3, [sp, #8]
 8001c02:	2301      	movs	r3, #1
 8001c04:	9301      	str	r3, [sp, #4]
 8001c06:	f107 030b 	add.w	r3, r7, #11
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	223d      	movs	r2, #61	; 0x3d
 8001c10:	2150      	movs	r1, #80	; 0x50
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f004 faf6 	bl	8006204 <HAL_I2C_Mem_Write>
}
 8001c18:	bf00      	nop
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <BNO055_ReadSystemReg>:

/*
 * Function use read the system register
 * param: I2C --> pointer on I2C handle struct
 */
uint8_t BNO055_ReadSystemReg(I2C_HandleTypeDef *I2C){
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b088      	sub	sp, #32
 8001c24:	af04      	add	r7, sp, #16
 8001c26:	6078      	str	r0, [r7, #4]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &system_reg, 1, 100);
 8001c28:	2364      	movs	r3, #100	; 0x64
 8001c2a:	9302      	str	r3, [sp, #8]
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	9301      	str	r3, [sp, #4]
 8001c30:	f107 030f 	add.w	r3, r7, #15
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	2301      	movs	r3, #1
 8001c38:	223f      	movs	r2, #63	; 0x3f
 8001c3a:	2150      	movs	r1, #80	; 0x50
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f004 fbf5 	bl	800642c <HAL_I2C_Mem_Read>
	return system_reg;
 8001c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <BNO055_ReadITStatus>:

/*
 * Function use to read interrupt register
 * param: I2C --> pointer on I2C handle struct
 */
uint8_t BNO055_ReadITStatus(I2C_HandleTypeDef * I2C){
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af04      	add	r7, sp, #16
 8001c52:	6078      	str	r0, [r7, #4]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_INT_STATUS, 1, &system_reg, 1, 100);
 8001c54:	2364      	movs	r3, #100	; 0x64
 8001c56:	9302      	str	r3, [sp, #8]
 8001c58:	2301      	movs	r3, #1
 8001c5a:	9301      	str	r3, [sp, #4]
 8001c5c:	f107 030f 	add.w	r3, r7, #15
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	2301      	movs	r3, #1
 8001c64:	2237      	movs	r2, #55	; 0x37
 8001c66:	2150      	movs	r1, #80	; 0x50
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f004 fbdf 	bl	800642c <HAL_I2C_Mem_Read>
	return system_reg;
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <BNO055_EnableAccHighG>:
/*
 * Method use to set high G acceleration interrupt
 * param: I2C --> pointer on I2C handle struct
 * note: This method should only be call after a SetPage(1)
 */
void BNO055_EnableAccHighG(I2C_HandleTypeDef *I2C){
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b088      	sub	sp, #32
 8001c7c:	af04      	add	r7, sp, #16
 8001c7e:	6078      	str	r0, [r7, #4]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_INT_EN, 1, &system_reg, 1, 100);
 8001c80:	2364      	movs	r3, #100	; 0x64
 8001c82:	9302      	str	r3, [sp, #8]
 8001c84:	2301      	movs	r3, #1
 8001c86:	9301      	str	r3, [sp, #4]
 8001c88:	f107 030f 	add.w	r3, r7, #15
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	2301      	movs	r3, #1
 8001c90:	2210      	movs	r2, #16
 8001c92:	2150      	movs	r1, #80	; 0x50
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f004 fbc9 	bl	800642c <HAL_I2C_Mem_Read>
	system_reg|=1<<5;
 8001c9a:	7bfb      	ldrb	r3, [r7, #15]
 8001c9c:	f043 0320 	orr.w	r3, r3, #32
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_INT_EN, 1, &system_reg, 1, 10);
 8001ca4:	230a      	movs	r3, #10
 8001ca6:	9302      	str	r3, [sp, #8]
 8001ca8:	2301      	movs	r3, #1
 8001caa:	9301      	str	r3, [sp, #4]
 8001cac:	f107 030f 	add.w	r3, r7, #15
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	2210      	movs	r2, #16
 8001cb6:	2150      	movs	r1, #80	; 0x50
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f004 faa3 	bl	8006204 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_INT_MSK, 1, &system_reg, 1, 100);
 8001cbe:	2364      	movs	r3, #100	; 0x64
 8001cc0:	9302      	str	r3, [sp, #8]
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	9301      	str	r3, [sp, #4]
 8001cc6:	f107 030f 	add.w	r3, r7, #15
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	2301      	movs	r3, #1
 8001cce:	220f      	movs	r2, #15
 8001cd0:	2150      	movs	r1, #80	; 0x50
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f004 fbaa 	bl	800642c <HAL_I2C_Mem_Read>
	system_reg|=1<<5;
 8001cd8:	7bfb      	ldrb	r3, [r7, #15]
 8001cda:	f043 0320 	orr.w	r3, r3, #32
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_INT_MSK, 1, &system_reg, 1, 10);
 8001ce2:	230a      	movs	r3, #10
 8001ce4:	9302      	str	r3, [sp, #8]
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	9301      	str	r3, [sp, #4]
 8001cea:	f107 030f 	add.w	r3, r7, #15
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	220f      	movs	r2, #15
 8001cf4:	2150      	movs	r1, #80	; 0x50
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f004 fa84 	bl	8006204 <HAL_I2C_Mem_Write>
}
 8001cfc:	bf00      	nop
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <BNO055_EnableHighGAcc>:
/*
 * Method use to set high G acceleration interrupt for each axis
 * param: I2C --> pointer on I2C handle struct
 * axis: --> char use to define an axis Eg: 'X' or 'Y' or 'Z'
 */
void BNO055_EnableHighGAcc(I2C_HandleTypeDef *I2C,char axis){
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af04      	add	r7, sp, #16
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	70fb      	strb	r3, [r7, #3]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_INT_SETTINGS, 1, &system_reg, 1, 100);
 8001d10:	2364      	movs	r3, #100	; 0x64
 8001d12:	9302      	str	r3, [sp, #8]
 8001d14:	2301      	movs	r3, #1
 8001d16:	9301      	str	r3, [sp, #4]
 8001d18:	f107 030f 	add.w	r3, r7, #15
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	2301      	movs	r3, #1
 8001d20:	2212      	movs	r2, #18
 8001d22:	2150      	movs	r1, #80	; 0x50
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f004 fb81 	bl	800642c <HAL_I2C_Mem_Read>
	switch (axis) {
 8001d2a:	78fb      	ldrb	r3, [r7, #3]
 8001d2c:	2b5a      	cmp	r3, #90	; 0x5a
 8001d2e:	d012      	beq.n	8001d56 <BNO055_EnableHighGAcc+0x52>
 8001d30:	2b5a      	cmp	r3, #90	; 0x5a
 8001d32:	dc16      	bgt.n	8001d62 <BNO055_EnableHighGAcc+0x5e>
 8001d34:	2b58      	cmp	r3, #88	; 0x58
 8001d36:	d002      	beq.n	8001d3e <BNO055_EnableHighGAcc+0x3a>
 8001d38:	2b59      	cmp	r3, #89	; 0x59
 8001d3a:	d006      	beq.n	8001d4a <BNO055_EnableHighGAcc+0x46>
 8001d3c:	e011      	b.n	8001d62 <BNO055_EnableHighGAcc+0x5e>
		case 'X':
			system_reg|=1<<5;
 8001d3e:	7bfb      	ldrb	r3, [r7, #15]
 8001d40:	f043 0320 	orr.w	r3, r3, #32
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	73fb      	strb	r3, [r7, #15]
			break;
 8001d48:	e00b      	b.n	8001d62 <BNO055_EnableHighGAcc+0x5e>
		case 'Y':
			system_reg|=1<<6;
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
 8001d4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	73fb      	strb	r3, [r7, #15]
			break;
 8001d54:	e005      	b.n	8001d62 <BNO055_EnableHighGAcc+0x5e>
		case 'Z':
			system_reg|=1<<7;
 8001d56:	7bfb      	ldrb	r3, [r7, #15]
 8001d58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	73fb      	strb	r3, [r7, #15]
			break;
 8001d60:	bf00      	nop
	}
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_ACC_INT_SETTINGS, 1, &system_reg, 1, 10);
 8001d62:	230a      	movs	r3, #10
 8001d64:	9302      	str	r3, [sp, #8]
 8001d66:	2301      	movs	r3, #1
 8001d68:	9301      	str	r3, [sp, #4]
 8001d6a:	f107 030f 	add.w	r3, r7, #15
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	2301      	movs	r3, #1
 8001d72:	2212      	movs	r2, #18
 8001d74:	2150      	movs	r1, #80	; 0x50
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f004 fa44 	bl	8006204 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_INT_SETTINGS, 1, &system_reg, 1, 100);
 8001d7c:	2364      	movs	r3, #100	; 0x64
 8001d7e:	9302      	str	r3, [sp, #8]
 8001d80:	2301      	movs	r3, #1
 8001d82:	9301      	str	r3, [sp, #4]
 8001d84:	f107 030f 	add.w	r3, r7, #15
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	2212      	movs	r2, #18
 8001d8e:	2150      	movs	r1, #80	; 0x50
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f004 fb4b 	bl	800642c <HAL_I2C_Mem_Read>
}
 8001d96:	bf00      	nop
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <BNO055_ClearIntFlag>:
/*
 * Method use to clear interrupt flag set by hardware
 * param: I2C --> pointer on I2C handle struct
 * note: if call in interrupt, you can find SPI pointer in IMU struct
 */
void BNO055_ClearIntFlag(I2C_HandleTypeDef *I2C){
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b088      	sub	sp, #32
 8001da2:	af04      	add	r7, sp, #16
 8001da4:	6078      	str	r0, [r7, #4]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &system_reg, 1, 100);
 8001da6:	2364      	movs	r3, #100	; 0x64
 8001da8:	9302      	str	r3, [sp, #8]
 8001daa:	2301      	movs	r3, #1
 8001dac:	9301      	str	r3, [sp, #4]
 8001dae:	f107 030f 	add.w	r3, r7, #15
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	2301      	movs	r3, #1
 8001db6:	223f      	movs	r2, #63	; 0x3f
 8001db8:	2150      	movs	r1, #80	; 0x50
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f004 fb36 	bl	800642c <HAL_I2C_Mem_Read>
	system_reg|=1<<6;
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
 8001dc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &system_reg, 1, 10);
 8001dca:	230a      	movs	r3, #10
 8001dcc:	9302      	str	r3, [sp, #8]
 8001dce:	2301      	movs	r3, #1
 8001dd0:	9301      	str	r3, [sp, #4]
 8001dd2:	f107 030f 	add.w	r3, r7, #15
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	2301      	movs	r3, #1
 8001dda:	223f      	movs	r2, #63	; 0x3f
 8001ddc:	2150      	movs	r1, #80	; 0x50
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f004 fa10 	bl	8006204 <HAL_I2C_Mem_Write>
	BNO055_ReadITStatus(I2C);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff ff31 	bl	8001c4c <BNO055_ReadITStatus>
}
 8001dea:	bf00      	nop
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <BNO055_EnableExtClock>:
/*
 * Method use to enable external clock for IMU
 * param: I2C --> pointer on I2C handle struct
 * note: If not clock selected then work with LSI else LSE
 */
void BNO055_EnableExtClock(I2C_HandleTypeDef *I2C){
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b088      	sub	sp, #32
 8001df6:	af04      	add	r7, sp, #16
 8001df8:	6078      	str	r0, [r7, #4]
	uint8_t actual_reg_value = BNO055_ReadSystemReg(I2C);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff ff10 	bl	8001c20 <BNO055_ReadSystemReg>
 8001e00:	4603      	mov	r3, r0
 8001e02:	73fb      	strb	r3, [r7, #15]
	//Change the 7th bit of this reg --> activate external clock
	uint8_t sys_reg_value = (actual_reg_value&0x7F) + (0x01<<7);
 8001e04:	7bfb      	ldrb	r3, [r7, #15]
 8001e06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	3b80      	subs	r3, #128	; 0x80
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &sys_reg_value, 1, 10);
 8001e12:	230a      	movs	r3, #10
 8001e14:	9302      	str	r3, [sp, #8]
 8001e16:	2301      	movs	r3, #1
 8001e18:	9301      	str	r3, [sp, #4]
 8001e1a:	f107 030e 	add.w	r3, r7, #14
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	2301      	movs	r3, #1
 8001e22:	223f      	movs	r2, #63	; 0x3f
 8001e24:	2150      	movs	r1, #80	; 0x50
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f004 f9ec 	bl	8006204 <HAL_I2C_Mem_Write>
}
 8001e2c:	bf00      	nop
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <BNO055_TriggerSelfTest>:

/*
 * Method use to start a self test
 * param: I2C --> pointer on I2C handle struct
 */
void BNO055_TriggerSelfTest(I2C_HandleTypeDef *I2C){
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b088      	sub	sp, #32
 8001e38:	af04      	add	r7, sp, #16
 8001e3a:	6078      	str	r0, [r7, #4]
	uint8_t actual_reg_value = BNO055_ReadSystemReg(I2C);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff feef 	bl	8001c20 <BNO055_ReadSystemReg>
 8001e42:	4603      	mov	r3, r0
 8001e44:	73fb      	strb	r3, [r7, #15]
	//Change the 7th bit of this reg --> activate external clock
	uint8_t sys_reg_value = (actual_reg_value&0xFE) + 0x01;
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
 8001e48:	f023 0301 	bic.w	r3, r3, #1
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	3301      	adds	r3, #1
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &sys_reg_value, 1, 10);
 8001e54:	230a      	movs	r3, #10
 8001e56:	9302      	str	r3, [sp, #8]
 8001e58:	2301      	movs	r3, #1
 8001e5a:	9301      	str	r3, [sp, #4]
 8001e5c:	f107 030e 	add.w	r3, r7, #14
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	2301      	movs	r3, #1
 8001e64:	223f      	movs	r2, #63	; 0x3f
 8001e66:	2150      	movs	r1, #80	; 0x50
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f004 f9cb 	bl	8006204 <HAL_I2C_Mem_Write>
}
 8001e6e:	bf00      	nop
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <BNO055_CheckSelfTestResult>:
/*
 * Method use to check self test result
 * param: I2C --> pointer on I2C handle struct
 * param: BNO055 --> pointer on IMU struct
 */
uint8_t BNO055_CheckSelfTestResult(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b088      	sub	sp, #32
 8001e7a:	af04      	add	r7, sp, #16
 8001e7c:	6078      	str	r0, [r7, #4]
 8001e7e:	6039      	str	r1, [r7, #0]
	uint8_t res = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_value;
	//Checking all self power on test result
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ST_RESULT, 1, &reg_value, 1, 10);
 8001e84:	230a      	movs	r3, #10
 8001e86:	9302      	str	r3, [sp, #8]
 8001e88:	2301      	movs	r3, #1
 8001e8a:	9301      	str	r3, [sp, #4]
 8001e8c:	f107 030e 	add.w	r3, r7, #14
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	2301      	movs	r3, #1
 8001e94:	2236      	movs	r2, #54	; 0x36
 8001e96:	2150      	movs	r1, #80	; 0x50
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f004 fac7 	bl	800642c <HAL_I2C_Mem_Read>
	if((reg_value&0x0F)!=0x0F){
 8001e9e:	7bbb      	ldrb	r3, [r7, #14]
 8001ea0:	f003 030f 	and.w	r3, r3, #15
 8001ea4:	2b0f      	cmp	r3, #15
 8001ea6:	d001      	beq.n	8001eac <BNO055_CheckSelfTestResult+0x36>
		res = 1;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	73fb      	strb	r3, [r7, #15]
	}
	//Trigger a test to ensure sensor is working properly
	BNO055_TriggerSelfTest(I2C);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff ffc1 	bl	8001e34 <BNO055_TriggerSelfTest>
	//Wait some time to ensure test is done (made with hal delay because task hasn't started yet)
	osDelay(500);
 8001eb2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001eb6:	f00e fd86 	bl	80109c6 <osDelay>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_ERR, 1, &reg_value, 1, 10);
 8001eba:	230a      	movs	r3, #10
 8001ebc:	9302      	str	r3, [sp, #8]
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	9301      	str	r3, [sp, #4]
 8001ec2:	f107 030e 	add.w	r3, r7, #14
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	2301      	movs	r3, #1
 8001eca:	223a      	movs	r2, #58	; 0x3a
 8001ecc:	2150      	movs	r1, #80	; 0x50
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f004 faac 	bl	800642c <HAL_I2C_Mem_Read>
	if(reg_value!=0x00){
 8001ed4:	7bbb      	ldrb	r3, [r7, #14]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <BNO055_CheckSelfTestResult+0x68>
		res = 1;
 8001eda:	2301      	movs	r3, #1
 8001edc:	73fb      	strb	r3, [r7, #15]
	}
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_STATUS, 1, &reg_value, 1, 10);
 8001ede:	230a      	movs	r3, #10
 8001ee0:	9302      	str	r3, [sp, #8]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	9301      	str	r3, [sp, #4]
 8001ee6:	f107 030e 	add.w	r3, r7, #14
 8001eea:	9300      	str	r3, [sp, #0]
 8001eec:	2301      	movs	r3, #1
 8001eee:	2239      	movs	r2, #57	; 0x39
 8001ef0:	2150      	movs	r1, #80	; 0x50
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f004 fa9a 	bl	800642c <HAL_I2C_Mem_Read>

	return res;
 8001ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <BNO055_SetHighGThreshold>:
 * Method use to set the high g interrupt threshold
 * param: I2C --> pointer on I2C handle struct
 * param: threshold --> threshold in LSB (15.81mg = 1LSB)
 *  * note: need to be call after page(1)
 */
void BNO055_SetHighGThreshold(I2C_HandleTypeDef *I2C,uint8_t threshold){
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b088      	sub	sp, #32
 8001f06:	af04      	add	r7, sp, #16
 8001f08:	6078      	str	r0, [r7, #4]
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	70fb      	strb	r3, [r7, #3]
	uint8_t system_reg;
	system_reg = threshold;
 8001f0e:	78fb      	ldrb	r3, [r7, #3]
 8001f10:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_ACC_HG_THRESH, 1, &system_reg, 1, 10);
 8001f12:	230a      	movs	r3, #10
 8001f14:	9302      	str	r3, [sp, #8]
 8001f16:	2301      	movs	r3, #1
 8001f18:	9301      	str	r3, [sp, #4]
 8001f1a:	f107 030f 	add.w	r3, r7, #15
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	2301      	movs	r3, #1
 8001f22:	2214      	movs	r2, #20
 8001f24:	2150      	movs	r1, #80	; 0x50
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f004 f96c 	bl	8006204 <HAL_I2C_Mem_Write>
}
 8001f2c:	bf00      	nop
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <BNO055_SetHighGDuration>:
 * Method use to set the high g interrupt duration
 * param: I2C --> pointer on I2C handle struct
 * param: duration --> duration in ms (1LSB = 2ms)
 *  * note: need to be call after page(1)
 */
void BNO055_SetHighGDuration(I2C_HandleTypeDef *I2C,uint8_t duration){
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b088      	sub	sp, #32
 8001f38:	af04      	add	r7, sp, #16
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	70fb      	strb	r3, [r7, #3]
	uint8_t system_reg;
	system_reg = duration;
 8001f40:	78fb      	ldrb	r3, [r7, #3]
 8001f42:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_ACC_HG_DURATION, 1, &system_reg, 1, 10);
 8001f44:	230a      	movs	r3, #10
 8001f46:	9302      	str	r3, [sp, #8]
 8001f48:	2301      	movs	r3, #1
 8001f4a:	9301      	str	r3, [sp, #4]
 8001f4c:	f107 030f 	add.w	r3, r7, #15
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	2301      	movs	r3, #1
 8001f54:	2213      	movs	r2, #19
 8001f56:	2150      	movs	r1, #80	; 0x50
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f004 f953 	bl	8006204 <HAL_I2C_Mem_Write>
}
 8001f5e:	bf00      	nop
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <BNO055_Init>:
/*
 * Init function for IMU, it enable it run self test
 * param: I2C --> pointer on I2C handle struct
 * param: BNO055 --> pointer on IMU struct
 */
uint8_t BNO055_Init(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b088      	sub	sp, #32
 8001f6a:	af04      	add	r7, sp, #16
 8001f6c:	6078      	str	r0, [r7, #4]
 8001f6e:	6039      	str	r1, [r7, #0]

	uint8_t res = 0;
 8001f70:	2300      	movs	r3, #0
 8001f72:	73fb      	strb	r3, [r7, #15]
	uint8_t reg;

	//Reset the IMU error counter
	BNO055->self_test_error = 0;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

	//Add pointer into IMU struct
	BNO055->I2C_pt = I2C;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	661a      	str	r2, [r3, #96]	; 0x60

	//We need to select the page 1
	BNO055_SetPage(I2C,1);
 8001f82:	2101      	movs	r1, #1
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff fe19 	bl	8001bbc <BNO055_SetPage>

	//Enable High G accelerometer interrupt
	BNO055_EnableAccHighG(I2C);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7ff fe74 	bl	8001c78 <BNO055_EnableAccHighG>

	//Enable HIGH G for axis X/Y/Z
	BNO055_EnableHighGAcc(I2C, 'X');
 8001f90:	2158      	movs	r1, #88	; 0x58
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff feb6 	bl	8001d04 <BNO055_EnableHighGAcc>
	BNO055_EnableHighGAcc(I2C, 'Y');
 8001f98:	2159      	movs	r1, #89	; 0x59
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7ff feb2 	bl	8001d04 <BNO055_EnableHighGAcc>
	BNO055_EnableHighGAcc(I2C, 'Z');
 8001fa0:	215a      	movs	r1, #90	; 0x5a
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff feae 	bl	8001d04 <BNO055_EnableHighGAcc>

	//Set threshold
	BNO055_SetHighGThreshold(I2C, BNO055_HG_THRESHOLD);
 8001fa8:	2150      	movs	r1, #80	; 0x50
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff ffa9 	bl	8001f02 <BNO055_SetHighGThreshold>

	//Set the duration
	BNO055_SetHighGDuration(I2C, BNO055_HG_DURATION);
 8001fb0:	2140      	movs	r1, #64	; 0x40
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff ffbe 	bl	8001f34 <BNO055_SetHighGDuration>

	//We need to select the page 0
	BNO055_SetPage(I2C,0);
 8001fb8:	2100      	movs	r1, #0
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff fdfe 	bl	8001bbc <BNO055_SetPage>

	//As the board have external 32.756 khz clock we use it
	BNO055_EnableExtClock(I2C);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7ff ff16 	bl	8001df2 <BNO055_EnableExtClock>
	/*Make BIST and power up test*/
	osDelay(200);
 8001fc6:	20c8      	movs	r0, #200	; 0xc8
 8001fc8:	f00e fcfd 	bl	80109c6 <osDelay>
	reg = BNO055_CheckSelfTestResult(I2C, BNO055);
 8001fcc:	6839      	ldr	r1, [r7, #0]
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7ff ff51 	bl	8001e76 <BNO055_CheckSelfTestResult>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	73bb      	strb	r3, [r7, #14]
	if(reg != 0x00){
 8001fd8:	7bbb      	ldrb	r3, [r7, #14]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <BNO055_Init+0x7c>
		res = 1;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	73fb      	strb	r3, [r7, #15]
	}

	//Select the operation mode (the NDOF use all 3 sensor and will calculate data using absolute orientation (USE BNO055_OPERATION_MODE_IMU if you want to have relative orientation)
	BNO055_SetOperationMode(I2C, BNO055_OPERATION_MODE_NDOF, BNO055);
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	210c      	movs	r1, #12
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff fdfe 	bl	8001be8 <BNO055_SetOperationMode>

	/*Check for writing problem of OPR_MODE_REG*/
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_OPR_MODE, 1, &reg, 1, 10);
 8001fec:	230a      	movs	r3, #10
 8001fee:	9302      	str	r3, [sp, #8]
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	9301      	str	r3, [sp, #4]
 8001ff4:	f107 030e 	add.w	r3, r7, #14
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	223d      	movs	r2, #61	; 0x3d
 8001ffe:	2150      	movs	r1, #80	; 0x50
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f004 fa13 	bl	800642c <HAL_I2C_Mem_Read>
	if( reg != BNO055_OPERATION_MODE_NDOF){
 8002006:	7bbb      	ldrb	r3, [r7, #14]
 8002008:	2b0c      	cmp	r3, #12
 800200a:	d001      	beq.n	8002010 <BNO055_Init+0xaa>
		res = 1;
 800200c:	2301      	movs	r3, #1
 800200e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8002010:	7bfb      	ldrb	r3, [r7, #15]
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	0000      	movs	r0, r0
 800201c:	0000      	movs	r0, r0
	...

08002020 <BNO055_ReadAccel>:
 * Function use to read accelerometer data from IMU
 * param: I2C --> pointer on I2C handle struct
 * param: BNO055 --> pointer on IMU struct
 * param: I2CControllerProtect --> Semaphore use to protect I2C hardware from being modified by more than one task at the same time
 */
void BNO055_ReadAccel(I2C_HandleTypeDef *I2C,BNO055_t *BNO055,osMutexId I2CControllerProtect){
 8002020:	b580      	push	{r7, lr}
 8002022:	b08a      	sub	sp, #40	; 0x28
 8002024:	af04      	add	r7, sp, #16
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
	//Read gyroscope value
	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;


	xSemaphoreTake(I2CControllerProtect,25);
 800202c:	2119      	movs	r1, #25
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f00f f812 	bl	8011058 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_X_LSB, 1, &reg_value_lsb, 1, 10);
 8002034:	230a      	movs	r3, #10
 8002036:	9302      	str	r3, [sp, #8]
 8002038:	2301      	movs	r3, #1
 800203a:	9301      	str	r3, [sp, #4]
 800203c:	f107 0317 	add.w	r3, r7, #23
 8002040:	9300      	str	r3, [sp, #0]
 8002042:	2301      	movs	r3, #1
 8002044:	2208      	movs	r2, #8
 8002046:	2150      	movs	r1, #80	; 0x50
 8002048:	68f8      	ldr	r0, [r7, #12]
 800204a:	f004 f9ef 	bl	800642c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_X_MSB, 1, &reg_value_msb, 1, 10);
 800204e:	230a      	movs	r3, #10
 8002050:	9302      	str	r3, [sp, #8]
 8002052:	2301      	movs	r3, #1
 8002054:	9301      	str	r3, [sp, #4]
 8002056:	f107 0316 	add.w	r3, r7, #22
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	2301      	movs	r3, #1
 800205e:	2209      	movs	r2, #9
 8002060:	2150      	movs	r1, #80	; 0x50
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f004 f9e2 	bl	800642c <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 8002068:	2300      	movs	r3, #0
 800206a:	2200      	movs	r2, #0
 800206c:	2100      	movs	r1, #0
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f00e fe7e 	bl	8010d70 <xQueueGenericSend>
	BNO055->raw_data.accelerometer.x = ((float)(reg_value_lsb + (reg_value_msb<<8))/ (float) accelScale);	//The minus sign is only use to sync axis value to board schematic
 8002074:	7dfb      	ldrb	r3, [r7, #23]
 8002076:	461a      	mov	r2, r3
 8002078:	7dbb      	ldrb	r3, [r7, #22]
 800207a:	021b      	lsls	r3, r3, #8
 800207c:	4413      	add	r3, r2
 800207e:	ee07 3a90 	vmov	s15, r3
 8002082:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002086:	4b74      	ldr	r3, [pc, #464]	; (8002258 <BNO055_ReadAccel+0x238>)
 8002088:	881b      	ldrh	r3, [r3, #0]
 800208a:	ee07 3a90 	vmov	s15, r3
 800208e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002092:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	edc3 7a03 	vstr	s15, [r3, #12]

	/*In order to scale the acceleration correclty on -327m/s^2 to +327m/s^2*/
	if(BNO055->raw_data.accelerometer.x > 327.68){
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7fe fa2b 	bl	80004fc <__aeabi_f2d>
 80020a6:	a368      	add	r3, pc, #416	; (adr r3, 8002248 <BNO055_ReadAccel+0x228>)
 80020a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ac:	f7fe fd0e 	bl	8000acc <__aeabi_dcmpgt>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d012      	beq.n	80020dc <BNO055_ReadAccel+0xbc>
		BNO055->raw_data.accelerometer.x = BNO055->raw_data.accelerometer.x - 655.36;
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe fa1e 	bl	80004fc <__aeabi_f2d>
 80020c0:	a363      	add	r3, pc, #396	; (adr r3, 8002250 <BNO055_ReadAccel+0x230>)
 80020c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c6:	f7fe f8b9 	bl	800023c <__aeabi_dsub>
 80020ca:	4602      	mov	r2, r0
 80020cc:	460b      	mov	r3, r1
 80020ce:	4610      	mov	r0, r2
 80020d0:	4619      	mov	r1, r3
 80020d2:	f7fe fd1b 	bl	8000b0c <__aeabi_d2f>
 80020d6:	4602      	mov	r2, r0
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	60da      	str	r2, [r3, #12]
	}

	xSemaphoreTake(I2CControllerProtect,25);
 80020dc:	2119      	movs	r1, #25
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f00e ffba 	bl	8011058 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_Y_LSB, 1, &reg_value_lsb, 1, 10);
 80020e4:	230a      	movs	r3, #10
 80020e6:	9302      	str	r3, [sp, #8]
 80020e8:	2301      	movs	r3, #1
 80020ea:	9301      	str	r3, [sp, #4]
 80020ec:	f107 0317 	add.w	r3, r7, #23
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	2301      	movs	r3, #1
 80020f4:	220a      	movs	r2, #10
 80020f6:	2150      	movs	r1, #80	; 0x50
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f004 f997 	bl	800642c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_Y_MSB, 1, &reg_value_msb, 1, 10);
 80020fe:	230a      	movs	r3, #10
 8002100:	9302      	str	r3, [sp, #8]
 8002102:	2301      	movs	r3, #1
 8002104:	9301      	str	r3, [sp, #4]
 8002106:	f107 0316 	add.w	r3, r7, #22
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	2301      	movs	r3, #1
 800210e:	220b      	movs	r2, #11
 8002110:	2150      	movs	r1, #80	; 0x50
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f004 f98a 	bl	800642c <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 8002118:	2300      	movs	r3, #0
 800211a:	2200      	movs	r2, #0
 800211c:	2100      	movs	r1, #0
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f00e fe26 	bl	8010d70 <xQueueGenericSend>
	BNO055->raw_data.accelerometer.y = ((float)(reg_value_lsb + (reg_value_msb<<8))/ (float) accelScale);
 8002124:	7dfb      	ldrb	r3, [r7, #23]
 8002126:	461a      	mov	r2, r3
 8002128:	7dbb      	ldrb	r3, [r7, #22]
 800212a:	021b      	lsls	r3, r3, #8
 800212c:	4413      	add	r3, r2
 800212e:	ee07 3a90 	vmov	s15, r3
 8002132:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002136:	4b48      	ldr	r3, [pc, #288]	; (8002258 <BNO055_ReadAccel+0x238>)
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	ee07 3a90 	vmov	s15, r3
 800213e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002142:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	edc3 7a04 	vstr	s15, [r3, #16]

	if(BNO055->raw_data.accelerometer.y > 327.68){
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	4618      	mov	r0, r3
 8002152:	f7fe f9d3 	bl	80004fc <__aeabi_f2d>
 8002156:	a33c      	add	r3, pc, #240	; (adr r3, 8002248 <BNO055_ReadAccel+0x228>)
 8002158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800215c:	f7fe fcb6 	bl	8000acc <__aeabi_dcmpgt>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d012      	beq.n	800218c <BNO055_ReadAccel+0x16c>
		BNO055->raw_data.accelerometer.y = BNO055->raw_data.accelerometer.y - 655.36;
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	4618      	mov	r0, r3
 800216c:	f7fe f9c6 	bl	80004fc <__aeabi_f2d>
 8002170:	a337      	add	r3, pc, #220	; (adr r3, 8002250 <BNO055_ReadAccel+0x230>)
 8002172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002176:	f7fe f861 	bl	800023c <__aeabi_dsub>
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	4610      	mov	r0, r2
 8002180:	4619      	mov	r1, r3
 8002182:	f7fe fcc3 	bl	8000b0c <__aeabi_d2f>
 8002186:	4602      	mov	r2, r0
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	611a      	str	r2, [r3, #16]
	}


	xSemaphoreTake(I2CControllerProtect,25);
 800218c:	2119      	movs	r1, #25
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f00e ff62 	bl	8011058 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_Z_LSB, 1, &reg_value_lsb, 1, 10);
 8002194:	230a      	movs	r3, #10
 8002196:	9302      	str	r3, [sp, #8]
 8002198:	2301      	movs	r3, #1
 800219a:	9301      	str	r3, [sp, #4]
 800219c:	f107 0317 	add.w	r3, r7, #23
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	2301      	movs	r3, #1
 80021a4:	220c      	movs	r2, #12
 80021a6:	2150      	movs	r1, #80	; 0x50
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f004 f93f 	bl	800642c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_Z_MSB, 1, &reg_value_msb, 1, 10);
 80021ae:	230a      	movs	r3, #10
 80021b0:	9302      	str	r3, [sp, #8]
 80021b2:	2301      	movs	r3, #1
 80021b4:	9301      	str	r3, [sp, #4]
 80021b6:	f107 0316 	add.w	r3, r7, #22
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	2301      	movs	r3, #1
 80021be:	220d      	movs	r2, #13
 80021c0:	2150      	movs	r1, #80	; 0x50
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f004 f932 	bl	800642c <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 80021c8:	2300      	movs	r3, #0
 80021ca:	2200      	movs	r2, #0
 80021cc:	2100      	movs	r1, #0
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f00e fdce 	bl	8010d70 <xQueueGenericSend>
	BNO055->raw_data.accelerometer.z = ((float)(reg_value_lsb + (reg_value_msb<<8))/ (float) accelScale);
 80021d4:	7dfb      	ldrb	r3, [r7, #23]
 80021d6:	461a      	mov	r2, r3
 80021d8:	7dbb      	ldrb	r3, [r7, #22]
 80021da:	021b      	lsls	r3, r3, #8
 80021dc:	4413      	add	r3, r2
 80021de:	ee07 3a90 	vmov	s15, r3
 80021e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80021e6:	4b1c      	ldr	r3, [pc, #112]	; (8002258 <BNO055_ReadAccel+0x238>)
 80021e8:	881b      	ldrh	r3, [r3, #0]
 80021ea:	ee07 3a90 	vmov	s15, r3
 80021ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	edc3 7a05 	vstr	s15, [r3, #20]

	if(BNO055->raw_data.accelerometer.z > 327.68){
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	4618      	mov	r0, r3
 8002202:	f7fe f97b 	bl	80004fc <__aeabi_f2d>
 8002206:	a310      	add	r3, pc, #64	; (adr r3, 8002248 <BNO055_ReadAccel+0x228>)
 8002208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220c:	f7fe fc5e 	bl	8000acc <__aeabi_dcmpgt>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d100      	bne.n	8002218 <BNO055_ReadAccel+0x1f8>
		BNO055->raw_data.accelerometer.z = BNO055->raw_data.accelerometer.z - 655.36;
	}
}
 8002216:	e012      	b.n	800223e <BNO055_ReadAccel+0x21e>
		BNO055->raw_data.accelerometer.z = BNO055->raw_data.accelerometer.z - 655.36;
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	4618      	mov	r0, r3
 800221e:	f7fe f96d 	bl	80004fc <__aeabi_f2d>
 8002222:	a30b      	add	r3, pc, #44	; (adr r3, 8002250 <BNO055_ReadAccel+0x230>)
 8002224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002228:	f7fe f808 	bl	800023c <__aeabi_dsub>
 800222c:	4602      	mov	r2, r0
 800222e:	460b      	mov	r3, r1
 8002230:	4610      	mov	r0, r2
 8002232:	4619      	mov	r1, r3
 8002234:	f7fe fc6a 	bl	8000b0c <__aeabi_d2f>
 8002238:	4602      	mov	r2, r0
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	615a      	str	r2, [r3, #20]
}
 800223e:	bf00      	nop
 8002240:	3718      	adds	r7, #24
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	47ae147b 	.word	0x47ae147b
 800224c:	40747ae1 	.word	0x40747ae1
 8002250:	47ae147b 	.word	0x47ae147b
 8002254:	40847ae1 	.word	0x40847ae1
 8002258:	20000000 	.word	0x20000000
 800225c:	00000000 	.word	0x00000000

08002260 <BNO055_ReadLina>:
 * Function use to read linear acceleration data from IMU (from fusion sensor)
 * param: I2C --> pointer on I2C handle struct
 * param: BNO055 --> pointer on IMU struct
 * param: I2CControllerProtect --> Semaphore use to protect I2C hardware from being modified by more than one task at the same time
 */
void BNO055_ReadLina(I2C_HandleTypeDef *I2C,BNO055_t *BNO055,osMutexId I2CControllerProtect){
 8002260:	b580      	push	{r7, lr}
 8002262:	b08a      	sub	sp, #40	; 0x28
 8002264:	af04      	add	r7, sp, #16
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
	//Read gyroscope value
	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;

	xSemaphoreTake(I2CControllerProtect,25);
 800226c:	2119      	movs	r1, #25
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f00e fef2 	bl	8011058 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_LIA_DATA_X_LSB, 1, &reg_value_lsb, 1, 10);
 8002274:	230a      	movs	r3, #10
 8002276:	9302      	str	r3, [sp, #8]
 8002278:	2301      	movs	r3, #1
 800227a:	9301      	str	r3, [sp, #4]
 800227c:	f107 0317 	add.w	r3, r7, #23
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	2301      	movs	r3, #1
 8002284:	2228      	movs	r2, #40	; 0x28
 8002286:	2150      	movs	r1, #80	; 0x50
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f004 f8cf 	bl	800642c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_LIA_DATA_X_MSB, 1, &reg_value_msb, 1, 10);
 800228e:	230a      	movs	r3, #10
 8002290:	9302      	str	r3, [sp, #8]
 8002292:	2301      	movs	r3, #1
 8002294:	9301      	str	r3, [sp, #4]
 8002296:	f107 0316 	add.w	r3, r7, #22
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	2301      	movs	r3, #1
 800229e:	2229      	movs	r2, #41	; 0x29
 80022a0:	2150      	movs	r1, #80	; 0x50
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f004 f8c2 	bl	800642c <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 80022a8:	2300      	movs	r3, #0
 80022aa:	2200      	movs	r2, #0
 80022ac:	2100      	movs	r1, #0
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f00e fd5e 	bl	8010d70 <xQueueGenericSend>
	BNO055->processed_data.linear_acceleration.x = ((float)(reg_value_lsb + (reg_value_msb<<8))/ (float) accelScale);
 80022b4:	7dfb      	ldrb	r3, [r7, #23]
 80022b6:	461a      	mov	r2, r3
 80022b8:	7dbb      	ldrb	r3, [r7, #22]
 80022ba:	021b      	lsls	r3, r3, #8
 80022bc:	4413      	add	r3, r2
 80022be:	ee07 3a90 	vmov	s15, r3
 80022c2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80022c6:	4b74      	ldr	r3, [pc, #464]	; (8002498 <BNO055_ReadLina+0x238>)
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	ee07 3a90 	vmov	s15, r3
 80022ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

	if(BNO055->processed_data.linear_acceleration.x > 327.68){
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7fe f90b 	bl	80004fc <__aeabi_f2d>
 80022e6:	a368      	add	r3, pc, #416	; (adr r3, 8002488 <BNO055_ReadLina+0x228>)
 80022e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ec:	f7fe fbee 	bl	8000acc <__aeabi_dcmpgt>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d012      	beq.n	800231c <BNO055_ReadLina+0xbc>
		BNO055->processed_data.linear_acceleration.x = BNO055->processed_data.linear_acceleration.x - 655.36;
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7fe f8fe 	bl	80004fc <__aeabi_f2d>
 8002300:	a363      	add	r3, pc, #396	; (adr r3, 8002490 <BNO055_ReadLina+0x230>)
 8002302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002306:	f7fd ff99 	bl	800023c <__aeabi_dsub>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	4610      	mov	r0, r2
 8002310:	4619      	mov	r1, r3
 8002312:	f7fe fbfb 	bl	8000b0c <__aeabi_d2f>
 8002316:	4602      	mov	r2, r0
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	645a      	str	r2, [r3, #68]	; 0x44
	}


	xSemaphoreTake(I2CControllerProtect,25);
 800231c:	2119      	movs	r1, #25
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f00e fe9a 	bl	8011058 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_LIA_DATA_Y_LSB, 1, &reg_value_lsb, 1, 10);
 8002324:	230a      	movs	r3, #10
 8002326:	9302      	str	r3, [sp, #8]
 8002328:	2301      	movs	r3, #1
 800232a:	9301      	str	r3, [sp, #4]
 800232c:	f107 0317 	add.w	r3, r7, #23
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	2301      	movs	r3, #1
 8002334:	222a      	movs	r2, #42	; 0x2a
 8002336:	2150      	movs	r1, #80	; 0x50
 8002338:	68f8      	ldr	r0, [r7, #12]
 800233a:	f004 f877 	bl	800642c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_LIA_DATA_Y_MSB, 1, &reg_value_msb, 1, 10);
 800233e:	230a      	movs	r3, #10
 8002340:	9302      	str	r3, [sp, #8]
 8002342:	2301      	movs	r3, #1
 8002344:	9301      	str	r3, [sp, #4]
 8002346:	f107 0316 	add.w	r3, r7, #22
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	2301      	movs	r3, #1
 800234e:	222b      	movs	r2, #43	; 0x2b
 8002350:	2150      	movs	r1, #80	; 0x50
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f004 f86a 	bl	800642c <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 8002358:	2300      	movs	r3, #0
 800235a:	2200      	movs	r2, #0
 800235c:	2100      	movs	r1, #0
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f00e fd06 	bl	8010d70 <xQueueGenericSend>
	BNO055->processed_data.linear_acceleration.y = ((float)(reg_value_lsb + (reg_value_msb<<8))/ (float) accelScale);
 8002364:	7dfb      	ldrb	r3, [r7, #23]
 8002366:	461a      	mov	r2, r3
 8002368:	7dbb      	ldrb	r3, [r7, #22]
 800236a:	021b      	lsls	r3, r3, #8
 800236c:	4413      	add	r3, r2
 800236e:	ee07 3a90 	vmov	s15, r3
 8002372:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002376:	4b48      	ldr	r3, [pc, #288]	; (8002498 <BNO055_ReadLina+0x238>)
 8002378:	881b      	ldrh	r3, [r3, #0]
 800237a:	ee07 3a90 	vmov	s15, r3
 800237e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002382:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

	if(BNO055->processed_data.linear_acceleration.y > 327.68){
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002390:	4618      	mov	r0, r3
 8002392:	f7fe f8b3 	bl	80004fc <__aeabi_f2d>
 8002396:	a33c      	add	r3, pc, #240	; (adr r3, 8002488 <BNO055_ReadLina+0x228>)
 8002398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239c:	f7fe fb96 	bl	8000acc <__aeabi_dcmpgt>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d012      	beq.n	80023cc <BNO055_ReadLina+0x16c>
		BNO055->processed_data.linear_acceleration.y = BNO055->processed_data.linear_acceleration.y - 655.36;
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe f8a6 	bl	80004fc <__aeabi_f2d>
 80023b0:	a337      	add	r3, pc, #220	; (adr r3, 8002490 <BNO055_ReadLina+0x230>)
 80023b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b6:	f7fd ff41 	bl	800023c <__aeabi_dsub>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	4610      	mov	r0, r2
 80023c0:	4619      	mov	r1, r3
 80023c2:	f7fe fba3 	bl	8000b0c <__aeabi_d2f>
 80023c6:	4602      	mov	r2, r0
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	649a      	str	r2, [r3, #72]	; 0x48
	}

	xSemaphoreTake(I2CControllerProtect,25);
 80023cc:	2119      	movs	r1, #25
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f00e fe42 	bl	8011058 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_LIA_DATA_Z_LSB, 1, &reg_value_lsb, 1, 10);
 80023d4:	230a      	movs	r3, #10
 80023d6:	9302      	str	r3, [sp, #8]
 80023d8:	2301      	movs	r3, #1
 80023da:	9301      	str	r3, [sp, #4]
 80023dc:	f107 0317 	add.w	r3, r7, #23
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	2301      	movs	r3, #1
 80023e4:	222c      	movs	r2, #44	; 0x2c
 80023e6:	2150      	movs	r1, #80	; 0x50
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f004 f81f 	bl	800642c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_LIA_DATA_Z_MSB, 1, &reg_value_msb, 1, 10);
 80023ee:	230a      	movs	r3, #10
 80023f0:	9302      	str	r3, [sp, #8]
 80023f2:	2301      	movs	r3, #1
 80023f4:	9301      	str	r3, [sp, #4]
 80023f6:	f107 0316 	add.w	r3, r7, #22
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	2301      	movs	r3, #1
 80023fe:	222d      	movs	r2, #45	; 0x2d
 8002400:	2150      	movs	r1, #80	; 0x50
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f004 f812 	bl	800642c <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 8002408:	2300      	movs	r3, #0
 800240a:	2200      	movs	r2, #0
 800240c:	2100      	movs	r1, #0
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f00e fcae 	bl	8010d70 <xQueueGenericSend>
	BNO055->processed_data.linear_acceleration.z = ((float)(reg_value_lsb + (reg_value_msb<<8)) / (float) accelScale);
 8002414:	7dfb      	ldrb	r3, [r7, #23]
 8002416:	461a      	mov	r2, r3
 8002418:	7dbb      	ldrb	r3, [r7, #22]
 800241a:	021b      	lsls	r3, r3, #8
 800241c:	4413      	add	r3, r2
 800241e:	ee07 3a90 	vmov	s15, r3
 8002422:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002426:	4b1c      	ldr	r3, [pc, #112]	; (8002498 <BNO055_ReadLina+0x238>)
 8002428:	881b      	ldrh	r3, [r3, #0]
 800242a:	ee07 3a90 	vmov	s15, r3
 800242e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

	if(BNO055->processed_data.linear_acceleration.z > 327.68){
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002440:	4618      	mov	r0, r3
 8002442:	f7fe f85b 	bl	80004fc <__aeabi_f2d>
 8002446:	a310      	add	r3, pc, #64	; (adr r3, 8002488 <BNO055_ReadLina+0x228>)
 8002448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244c:	f7fe fb3e 	bl	8000acc <__aeabi_dcmpgt>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d100      	bne.n	8002458 <BNO055_ReadLina+0x1f8>
		BNO055->processed_data.linear_acceleration.z = BNO055->processed_data.linear_acceleration.z - 655.36;
	}

}
 8002456:	e012      	b.n	800247e <BNO055_ReadLina+0x21e>
		BNO055->processed_data.linear_acceleration.z = BNO055->processed_data.linear_acceleration.z - 655.36;
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245c:	4618      	mov	r0, r3
 800245e:	f7fe f84d 	bl	80004fc <__aeabi_f2d>
 8002462:	a30b      	add	r3, pc, #44	; (adr r3, 8002490 <BNO055_ReadLina+0x230>)
 8002464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002468:	f7fd fee8 	bl	800023c <__aeabi_dsub>
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	4610      	mov	r0, r2
 8002472:	4619      	mov	r1, r3
 8002474:	f7fe fb4a 	bl	8000b0c <__aeabi_d2f>
 8002478:	4602      	mov	r2, r0
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800247e:	bf00      	nop
 8002480:	3718      	adds	r7, #24
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	47ae147b 	.word	0x47ae147b
 800248c:	40747ae1 	.word	0x40747ae1
 8002490:	47ae147b 	.word	0x47ae147b
 8002494:	40847ae1 	.word	0x40847ae1
 8002498:	20000000 	.word	0x20000000

0800249c <BNO055_ReadEuler_Roll>:
 * @INPUT - I2C interface struct
 * @INPUT - IMU struc
 * @OUTPUT - None
 * @INFORMATIONS - If use with freertos or other reeltime os please use a semaphore/mutex to protect I2C interface
 */
void BNO055_ReadEuler_Roll(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 800249c:	b580      	push	{r7, lr}
 800249e:	b088      	sub	sp, #32
 80024a0:	af04      	add	r7, sp, #16
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]

	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;

	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_ROLL_LSB, 1, &reg_value_lsb, 1, 10);
 80024a6:	230a      	movs	r3, #10
 80024a8:	9302      	str	r3, [sp, #8]
 80024aa:	2301      	movs	r3, #1
 80024ac:	9301      	str	r3, [sp, #4]
 80024ae:	f107 030f 	add.w	r3, r7, #15
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	2301      	movs	r3, #1
 80024b6:	221c      	movs	r2, #28
 80024b8:	2150      	movs	r1, #80	; 0x50
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f003 ffb6 	bl	800642c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_ROLL_MSB, 1, &reg_value_msb, 1, 10);
 80024c0:	230a      	movs	r3, #10
 80024c2:	9302      	str	r3, [sp, #8]
 80024c4:	2301      	movs	r3, #1
 80024c6:	9301      	str	r3, [sp, #4]
 80024c8:	f107 030e 	add.w	r3, r7, #14
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	2301      	movs	r3, #1
 80024d0:	221d      	movs	r2, #29
 80024d2:	2150      	movs	r1, #80	; 0x50
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f003 ffa9 	bl	800642c <HAL_I2C_Mem_Read>
	BNO055->processed_data.euler_angles.y = (float) ((reg_value_lsb + (reg_value_msb<<8))/ (float) eulerScale);
 80024da:	7bfb      	ldrb	r3, [r7, #15]
 80024dc:	461a      	mov	r2, r3
 80024de:	7bbb      	ldrb	r3, [r7, #14]
 80024e0:	021b      	lsls	r3, r3, #8
 80024e2:	4413      	add	r3, r2
 80024e4:	ee07 3a90 	vmov	s15, r3
 80024e8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80024ec:	4b11      	ldr	r3, [pc, #68]	; (8002534 <BNO055_ReadEuler_Roll+0x98>)
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	ee07 3a90 	vmov	s15, r3
 80024f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	/*Make sure the data are rotating clockwise*/
	if(BNO055->processed_data.euler_angles.y > 2000){
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002508:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002538 <BNO055_ReadEuler_Roll+0x9c>
 800250c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002514:	dc00      	bgt.n	8002518 <BNO055_ReadEuler_Roll+0x7c>
		BNO055->processed_data.euler_angles.y = BNO055->processed_data.euler_angles.y - 4096;
	}
}
 8002516:	e009      	b.n	800252c <BNO055_ReadEuler_Roll+0x90>
		BNO055->processed_data.euler_angles.y = BNO055->processed_data.euler_angles.y - 4096;
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800251e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800253c <BNO055_ReadEuler_Roll+0xa0>
 8002522:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 800252c:	bf00      	nop
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	20000002 	.word	0x20000002
 8002538:	44fa0000 	.word	0x44fa0000
 800253c:	45800000 	.word	0x45800000

08002540 <BNO055_ReadEuler_Pitch>:
 * @INPUT - I2C interface struct
 * @INPUT - IMU struc
 * @OUTPUT - None
 * @INFORMATIONS - If use with freertos or other reeltime os please use a semaphore/mutex to protect I2C interface
 */
void BNO055_ReadEuler_Pitch(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8002540:	b580      	push	{r7, lr}
 8002542:	b088      	sub	sp, #32
 8002544:	af04      	add	r7, sp, #16
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]

	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;

	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_PITCH_LSB, 1, &reg_value_lsb, 1, 10);
 800254a:	230a      	movs	r3, #10
 800254c:	9302      	str	r3, [sp, #8]
 800254e:	2301      	movs	r3, #1
 8002550:	9301      	str	r3, [sp, #4]
 8002552:	f107 030f 	add.w	r3, r7, #15
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	2301      	movs	r3, #1
 800255a:	221e      	movs	r2, #30
 800255c:	2150      	movs	r1, #80	; 0x50
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f003 ff64 	bl	800642c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_PITCH_MSB, 1, &reg_value_msb, 1, 10);
 8002564:	230a      	movs	r3, #10
 8002566:	9302      	str	r3, [sp, #8]
 8002568:	2301      	movs	r3, #1
 800256a:	9301      	str	r3, [sp, #4]
 800256c:	f107 030e 	add.w	r3, r7, #14
 8002570:	9300      	str	r3, [sp, #0]
 8002572:	2301      	movs	r3, #1
 8002574:	221f      	movs	r2, #31
 8002576:	2150      	movs	r1, #80	; 0x50
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f003 ff57 	bl	800642c <HAL_I2C_Mem_Read>
	BNO055->processed_data.euler_angles.x = (float) ((reg_value_lsb + (reg_value_msb<<8))/(float) eulerScale);
 800257e:	7bfb      	ldrb	r3, [r7, #15]
 8002580:	461a      	mov	r2, r3
 8002582:	7bbb      	ldrb	r3, [r7, #14]
 8002584:	021b      	lsls	r3, r3, #8
 8002586:	4413      	add	r3, r2
 8002588:	ee07 3a90 	vmov	s15, r3
 800258c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002590:	4b11      	ldr	r3, [pc, #68]	; (80025d8 <BNO055_ReadEuler_Pitch+0x98>)
 8002592:	881b      	ldrh	r3, [r3, #0]
 8002594:	ee07 3a90 	vmov	s15, r3
 8002598:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800259c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	/*Make sure the data are rotating clockwise*/
	if(BNO055->processed_data.euler_angles.x > 2000){
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80025ac:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80025dc <BNO055_ReadEuler_Pitch+0x9c>
 80025b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b8:	dc00      	bgt.n	80025bc <BNO055_ReadEuler_Pitch+0x7c>
		BNO055->processed_data.euler_angles.x = BNO055->processed_data.euler_angles.x - 4096;
	}
}
 80025ba:	e009      	b.n	80025d0 <BNO055_ReadEuler_Pitch+0x90>
		BNO055->processed_data.euler_angles.x = BNO055->processed_data.euler_angles.x - 4096;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80025c2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80025e0 <BNO055_ReadEuler_Pitch+0xa0>
 80025c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 80025d0:	bf00      	nop
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	20000002 	.word	0x20000002
 80025dc:	44fa0000 	.word	0x44fa0000
 80025e0:	45800000 	.word	0x45800000

080025e4 <BNO055_ReadEuler_Yaw>:
 * @INPUT - I2C interface struct
 * @INPUT - IMU struc
 * @OUTPUT - None
 * @INFORMATIONS - If use with freertos or other reeltime os please use a semaphore/mutex to protect I2C interface
 */
void BNO055_ReadEuler_Yaw(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af04      	add	r7, sp, #16
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]

	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;

	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_HEADING_LSB, 1, &reg_value_lsb, 1, 10);
 80025ee:	230a      	movs	r3, #10
 80025f0:	9302      	str	r3, [sp, #8]
 80025f2:	2301      	movs	r3, #1
 80025f4:	9301      	str	r3, [sp, #4]
 80025f6:	f107 030f 	add.w	r3, r7, #15
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	2301      	movs	r3, #1
 80025fe:	221a      	movs	r2, #26
 8002600:	2150      	movs	r1, #80	; 0x50
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f003 ff12 	bl	800642c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_HEADING_MSB, 1, &reg_value_msb, 1, 10);
 8002608:	230a      	movs	r3, #10
 800260a:	9302      	str	r3, [sp, #8]
 800260c:	2301      	movs	r3, #1
 800260e:	9301      	str	r3, [sp, #4]
 8002610:	f107 030e 	add.w	r3, r7, #14
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	2301      	movs	r3, #1
 8002618:	221b      	movs	r2, #27
 800261a:	2150      	movs	r1, #80	; 0x50
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f003 ff05 	bl	800642c <HAL_I2C_Mem_Read>
	BNO055->processed_data.euler_angles.z = (float) ((reg_value_lsb + (reg_value_msb<<8))/ (float) eulerScale);
 8002622:	7bfb      	ldrb	r3, [r7, #15]
 8002624:	461a      	mov	r2, r3
 8002626:	7bbb      	ldrb	r3, [r7, #14]
 8002628:	021b      	lsls	r3, r3, #8
 800262a:	4413      	add	r3, r2
 800262c:	ee07 3a90 	vmov	s15, r3
 8002630:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002634:	4b07      	ldr	r3, [pc, #28]	; (8002654 <BNO055_ReadEuler_Yaw+0x70>)
 8002636:	881b      	ldrh	r3, [r3, #0]
 8002638:	ee07 3a90 	vmov	s15, r3
 800263c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002640:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 800264a:	bf00      	nop
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20000002 	.word	0x20000002

08002658 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800265e:	4b12      	ldr	r3, [pc, #72]	; (80026a8 <MX_DMA_Init+0x50>)
 8002660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002662:	4a11      	ldr	r2, [pc, #68]	; (80026a8 <MX_DMA_Init+0x50>)
 8002664:	f043 0304 	orr.w	r3, r3, #4
 8002668:	6493      	str	r3, [r2, #72]	; 0x48
 800266a:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <MX_DMA_Init+0x50>)
 800266c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800266e:	f003 0304 	and.w	r3, r3, #4
 8002672:	607b      	str	r3, [r7, #4]
 8002674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002676:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <MX_DMA_Init+0x50>)
 8002678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800267a:	4a0b      	ldr	r2, [pc, #44]	; (80026a8 <MX_DMA_Init+0x50>)
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	6493      	str	r3, [r2, #72]	; 0x48
 8002682:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <MX_DMA_Init+0x50>)
 8002684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	603b      	str	r3, [r7, #0]
 800268c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800268e:	2200      	movs	r2, #0
 8002690:	2105      	movs	r1, #5
 8002692:	200b      	movs	r0, #11
 8002694:	f002 fff6 	bl	8005684 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002698:	200b      	movs	r0, #11
 800269a:	f003 f80d 	bl	80056b8 <HAL_NVIC_EnableIRQ>

}
 800269e:	bf00      	nop
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40021000 	.word	0x40021000

080026ac <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b08a      	sub	sp, #40	; 0x28
 80026b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b2:	f107 0314 	add.w	r3, r7, #20
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	605a      	str	r2, [r3, #4]
 80026bc:	609a      	str	r2, [r3, #8]
 80026be:	60da      	str	r2, [r3, #12]
 80026c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026c2:	4b37      	ldr	r3, [pc, #220]	; (80027a0 <MX_GPIO_Init+0xf4>)
 80026c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c6:	4a36      	ldr	r2, [pc, #216]	; (80027a0 <MX_GPIO_Init+0xf4>)
 80026c8:	f043 0320 	orr.w	r3, r3, #32
 80026cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026ce:	4b34      	ldr	r3, [pc, #208]	; (80027a0 <MX_GPIO_Init+0xf4>)
 80026d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d2:	f003 0320 	and.w	r3, r3, #32
 80026d6:	613b      	str	r3, [r7, #16]
 80026d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026da:	4b31      	ldr	r3, [pc, #196]	; (80027a0 <MX_GPIO_Init+0xf4>)
 80026dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026de:	4a30      	ldr	r2, [pc, #192]	; (80027a0 <MX_GPIO_Init+0xf4>)
 80026e0:	f043 0304 	orr.w	r3, r3, #4
 80026e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026e6:	4b2e      	ldr	r3, [pc, #184]	; (80027a0 <MX_GPIO_Init+0xf4>)
 80026e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ea:	f003 0304 	and.w	r3, r3, #4
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f2:	4b2b      	ldr	r3, [pc, #172]	; (80027a0 <MX_GPIO_Init+0xf4>)
 80026f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f6:	4a2a      	ldr	r2, [pc, #168]	; (80027a0 <MX_GPIO_Init+0xf4>)
 80026f8:	f043 0301 	orr.w	r3, r3, #1
 80026fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026fe:	4b28      	ldr	r3, [pc, #160]	; (80027a0 <MX_GPIO_Init+0xf4>)
 8002700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	60bb      	str	r3, [r7, #8]
 8002708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800270a:	4b25      	ldr	r3, [pc, #148]	; (80027a0 <MX_GPIO_Init+0xf4>)
 800270c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270e:	4a24      	ldr	r2, [pc, #144]	; (80027a0 <MX_GPIO_Init+0xf4>)
 8002710:	f043 0308 	orr.w	r3, r3, #8
 8002714:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002716:	4b22      	ldr	r3, [pc, #136]	; (80027a0 <MX_GPIO_Init+0xf4>)
 8002718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271a:	f003 0308 	and.w	r3, r3, #8
 800271e:	607b      	str	r3, [r7, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002722:	4b1f      	ldr	r3, [pc, #124]	; (80027a0 <MX_GPIO_Init+0xf4>)
 8002724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002726:	4a1e      	ldr	r2, [pc, #120]	; (80027a0 <MX_GPIO_Init+0xf4>)
 8002728:	f043 0302 	orr.w	r3, r3, #2
 800272c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800272e:	4b1c      	ldr	r3, [pc, #112]	; (80027a0 <MX_GPIO_Init+0xf4>)
 8002730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	603b      	str	r3, [r7, #0]
 8002738:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800273a:	2200      	movs	r2, #0
 800273c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002740:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002744:	f003 fc7a 	bl	800603c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002748:	f44f 7300 	mov.w	r3, #512	; 0x200
 800274c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800274e:	2301      	movs	r3, #1
 8002750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002752:	2300      	movs	r3, #0
 8002754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002756:	2300      	movs	r3, #0
 8002758:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800275a:	f107 0314 	add.w	r3, r7, #20
 800275e:	4619      	mov	r1, r3
 8002760:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002764:	f003 fae8 	bl	8005d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_IT_Pin;
 8002768:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800276c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800276e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002774:	2300      	movs	r3, #0
 8002776:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_IT_GPIO_Port, &GPIO_InitStruct);
 8002778:	f107 0314 	add.w	r3, r7, #20
 800277c:	4619      	mov	r1, r3
 800277e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002782:	f003 fad9 	bl	8005d38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002786:	2200      	movs	r2, #0
 8002788:	2105      	movs	r1, #5
 800278a:	2028      	movs	r0, #40	; 0x28
 800278c:	f002 ff7a 	bl	8005684 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002790:	2028      	movs	r0, #40	; 0x28
 8002792:	f002 ff91 	bl	80056b8 <HAL_NVIC_EnableIRQ>

}
 8002796:	bf00      	nop
 8002798:	3728      	adds	r7, #40	; 0x28
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40021000 	.word	0x40021000

080027a4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80027a8:	4b1b      	ldr	r3, [pc, #108]	; (8002818 <MX_I2C2_Init+0x74>)
 80027aa:	4a1c      	ldr	r2, [pc, #112]	; (800281c <MX_I2C2_Init+0x78>)
 80027ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20C0EDFF;
 80027ae:	4b1a      	ldr	r3, [pc, #104]	; (8002818 <MX_I2C2_Init+0x74>)
 80027b0:	4a1b      	ldr	r2, [pc, #108]	; (8002820 <MX_I2C2_Init+0x7c>)
 80027b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80027b4:	4b18      	ldr	r3, [pc, #96]	; (8002818 <MX_I2C2_Init+0x74>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027ba:	4b17      	ldr	r3, [pc, #92]	; (8002818 <MX_I2C2_Init+0x74>)
 80027bc:	2201      	movs	r2, #1
 80027be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027c0:	4b15      	ldr	r3, [pc, #84]	; (8002818 <MX_I2C2_Init+0x74>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80027c6:	4b14      	ldr	r3, [pc, #80]	; (8002818 <MX_I2C2_Init+0x74>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80027cc:	4b12      	ldr	r3, [pc, #72]	; (8002818 <MX_I2C2_Init+0x74>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027d2:	4b11      	ldr	r3, [pc, #68]	; (8002818 <MX_I2C2_Init+0x74>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027d8:	4b0f      	ldr	r3, [pc, #60]	; (8002818 <MX_I2C2_Init+0x74>)
 80027da:	2200      	movs	r2, #0
 80027dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80027de:	480e      	ldr	r0, [pc, #56]	; (8002818 <MX_I2C2_Init+0x74>)
 80027e0:	f003 fc81 	bl	80060e6 <HAL_I2C_Init>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80027ea:	f000 fcef 	bl	80031cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80027ee:	2100      	movs	r1, #0
 80027f0:	4809      	ldr	r0, [pc, #36]	; (8002818 <MX_I2C2_Init+0x74>)
 80027f2:	f004 f9db 	bl	8006bac <HAL_I2CEx_ConfigAnalogFilter>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80027fc:	f000 fce6 	bl	80031cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002800:	2100      	movs	r1, #0
 8002802:	4805      	ldr	r0, [pc, #20]	; (8002818 <MX_I2C2_Init+0x74>)
 8002804:	f004 fa1d 	bl	8006c42 <HAL_I2CEx_ConfigDigitalFilter>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800280e:	f000 fcdd 	bl	80031cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002812:	bf00      	nop
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20000370 	.word	0x20000370
 800281c:	40005800 	.word	0x40005800
 8002820:	20c0edff 	.word	0x20c0edff

08002824 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b0a0      	sub	sp, #128	; 0x80
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800282c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	605a      	str	r2, [r3, #4]
 8002836:	609a      	str	r2, [r3, #8]
 8002838:	60da      	str	r2, [r3, #12]
 800283a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800283c:	f107 0318 	add.w	r3, r7, #24
 8002840:	2254      	movs	r2, #84	; 0x54
 8002842:	2100      	movs	r1, #0
 8002844:	4618      	mov	r0, r3
 8002846:	f010 fe95 	bl	8013574 <memset>
  if(i2cHandle->Instance==I2C2)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a2c      	ldr	r2, [pc, #176]	; (8002900 <HAL_I2C_MspInit+0xdc>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d151      	bne.n	80028f8 <HAL_I2C_MspInit+0xd4>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002854:	2380      	movs	r3, #128	; 0x80
 8002856:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002858:	2300      	movs	r3, #0
 800285a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800285c:	f107 0318 	add.w	r3, r7, #24
 8002860:	4618      	mov	r0, r3
 8002862:	f006 fd77 	bl	8009354 <HAL_RCCEx_PeriphCLKConfig>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800286c:	f000 fcae 	bl	80031cc <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002870:	4b24      	ldr	r3, [pc, #144]	; (8002904 <HAL_I2C_MspInit+0xe0>)
 8002872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002874:	4a23      	ldr	r2, [pc, #140]	; (8002904 <HAL_I2C_MspInit+0xe0>)
 8002876:	f043 0320 	orr.w	r3, r3, #32
 800287a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800287c:	4b21      	ldr	r3, [pc, #132]	; (8002904 <HAL_I2C_MspInit+0xe0>)
 800287e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002880:	f003 0320 	and.w	r3, r3, #32
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002888:	4b1e      	ldr	r3, [pc, #120]	; (8002904 <HAL_I2C_MspInit+0xe0>)
 800288a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288c:	4a1d      	ldr	r2, [pc, #116]	; (8002904 <HAL_I2C_MspInit+0xe0>)
 800288e:	f043 0304 	orr.w	r3, r3, #4
 8002892:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002894:	4b1b      	ldr	r3, [pc, #108]	; (8002904 <HAL_I2C_MspInit+0xe0>)
 8002896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	613b      	str	r3, [r7, #16]
 800289e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0-OSC_IN     ------> I2C2_SDA
    PC4     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80028a0:	2301      	movs	r3, #1
 80028a2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028a4:	2312      	movs	r3, #18
 80028a6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a8:	2300      	movs	r3, #0
 80028aa:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ac:	2300      	movs	r3, #0
 80028ae:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80028b0:	2304      	movs	r3, #4
 80028b2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80028b4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80028b8:	4619      	mov	r1, r3
 80028ba:	4813      	ldr	r0, [pc, #76]	; (8002908 <HAL_I2C_MspInit+0xe4>)
 80028bc:	f003 fa3c 	bl	8005d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80028c0:	2310      	movs	r3, #16
 80028c2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028c4:	2312      	movs	r3, #18
 80028c6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c8:	2300      	movs	r3, #0
 80028ca:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028cc:	2300      	movs	r3, #0
 80028ce:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80028d0:	2304      	movs	r3, #4
 80028d2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80028d8:	4619      	mov	r1, r3
 80028da:	480c      	ldr	r0, [pc, #48]	; (800290c <HAL_I2C_MspInit+0xe8>)
 80028dc:	f003 fa2c 	bl	8005d38 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80028e0:	4b08      	ldr	r3, [pc, #32]	; (8002904 <HAL_I2C_MspInit+0xe0>)
 80028e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e4:	4a07      	ldr	r2, [pc, #28]	; (8002904 <HAL_I2C_MspInit+0xe0>)
 80028e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028ea:	6593      	str	r3, [r2, #88]	; 0x58
 80028ec:	4b05      	ldr	r3, [pc, #20]	; (8002904 <HAL_I2C_MspInit+0xe0>)
 80028ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80028f8:	bf00      	nop
 80028fa:	3780      	adds	r7, #128	; 0x80
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40005800 	.word	0x40005800
 8002904:	40021000 	.word	0x40021000
 8002908:	48001400 	.word	0x48001400
 800290c:	48000800 	.word	0x48000800

08002910 <gps_ReadNMEA>:
 */

#include "l80-m39.h"


void gps_ReadNMEA(uint8_t nmea_data[],GPS_t *gps_struct){
 8002910:	b580      	push	{r7, lr}
 8002912:	b08e      	sub	sp, #56	; 0x38
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]

	uint8_t string_nmea[6];
	uint8_t gpgga_nmea[6] = "GPGGA\0";
 800291a:	4a70      	ldr	r2, [pc, #448]	; (8002adc <gps_ReadNMEA+0x1cc>)
 800291c:	f107 0318 	add.w	r3, r7, #24
 8002920:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002924:	6018      	str	r0, [r3, #0]
 8002926:	3304      	adds	r3, #4
 8002928:	8019      	strh	r1, [r3, #0]
	uint8_t readed_data[12];
	uint8_t delta;
	uint8_t begin_offset;
	uint8_t processing_offset = 0;
 800292a:	2300      	movs	r3, #0
 800292c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	//Loop for all the nmea data
	for(int i=0;i<BUFFER_SIZE_NMEA;i++){
 8002930:	2300      	movs	r3, #0
 8002932:	633b      	str	r3, [r7, #48]	; 0x30
 8002934:	e0c8      	b.n	8002ac8 <gps_ReadNMEA+0x1b8>
		/*only look for a data beginin symbol = $ */
		if(nmea_data[i] == '$'){
 8002936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	4413      	add	r3, r2
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b24      	cmp	r3, #36	; 0x24
 8002940:	f040 80bf 	bne.w	8002ac2 <gps_ReadNMEA+0x1b2>
			/*Check if we have $GPGGA*/
			for(int j=0;j<5;j++){
 8002944:	2300      	movs	r3, #0
 8002946:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002948:	e00f      	b.n	800296a <gps_ReadNMEA+0x5a>
				string_nmea[j] = nmea_data[(i+j+1)];
 800294a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800294c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800294e:	4413      	add	r3, r2
 8002950:	3301      	adds	r3, #1
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	4413      	add	r3, r2
 8002956:	7819      	ldrb	r1, [r3, #0]
 8002958:	f107 0220 	add.w	r2, r7, #32
 800295c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295e:	4413      	add	r3, r2
 8002960:	460a      	mov	r2, r1
 8002962:	701a      	strb	r2, [r3, #0]
			for(int j=0;j<5;j++){
 8002964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002966:	3301      	adds	r3, #1
 8002968:	62fb      	str	r3, [r7, #44]	; 0x2c
 800296a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800296c:	2b04      	cmp	r3, #4
 800296e:	ddec      	ble.n	800294a <gps_ReadNMEA+0x3a>
			}
			string_nmea[5] = 0;
 8002970:	2300      	movs	r3, #0
 8002972:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			/*Be aware that input string of strcmp need to end on \0 If not the result will probably be random value*/
			if(strcmp(string_nmea,gpgga_nmea) == 0){
 8002976:	f107 0218 	add.w	r2, r7, #24
 800297a:	f107 0320 	add.w	r3, r7, #32
 800297e:	4611      	mov	r1, r2
 8002980:	4618      	mov	r0, r3
 8002982:	f7fd fc4d 	bl	8000220 <strcmp>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	f040 809a 	bne.w	8002ac2 <gps_ReadNMEA+0x1b2>
				i+=6;	/*Skip GPGGA,*/
 800298e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002990:	3306      	adds	r3, #6
 8002992:	633b      	str	r3, [r7, #48]	; 0x30
				for(int k=0;k<12;k++){
 8002994:	2300      	movs	r3, #0
 8002996:	62bb      	str	r3, [r7, #40]	; 0x28
 8002998:	e08e      	b.n	8002ab8 <gps_ReadNMEA+0x1a8>

					/*Read a part of the incomming data*/
					i++;	/*skip ','*/
 800299a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299c:	3301      	adds	r3, #1
 800299e:	633b      	str	r3, [r7, #48]	; 0x30
					begin_offset = i;
 80029a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					delta = 0;
 80029a6:	2300      	movs	r3, #0
 80029a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

					while((nmea_data[i] !='\0' )&&( nmea_data[i] != ',')){
 80029ac:	e013      	b.n	80029d6 <gps_ReadNMEA+0xc6>
						readed_data[delta] = nmea_data[i];
 80029ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	441a      	add	r2, r3
 80029b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80029b8:	7812      	ldrb	r2, [r2, #0]
 80029ba:	3338      	adds	r3, #56	; 0x38
 80029bc:	443b      	add	r3, r7
 80029be:	f803 2c2c 	strb.w	r2, [r3, #-44]
						i++;
 80029c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c4:	3301      	adds	r3, #1
 80029c6:	633b      	str	r3, [r7, #48]	; 0x30
						delta = i - begin_offset;
 80029c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					while((nmea_data[i] !='\0' )&&( nmea_data[i] != ',')){
 80029d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	4413      	add	r3, r2
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d005      	beq.n	80029ee <gps_ReadNMEA+0xde>
 80029e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	4413      	add	r3, r2
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b2c      	cmp	r3, #44	; 0x2c
 80029ec:	d1df      	bne.n	80029ae <gps_ReadNMEA+0x9e>
					}
					processing_offset++;
 80029ee:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80029f2:	3301      	adds	r3, #1
 80029f4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					/*Process incomming data*/
					switch (processing_offset) {
 80029f8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80029fc:	3b01      	subs	r3, #1
 80029fe:	2b0a      	cmp	r3, #10
 8002a00:	d857      	bhi.n	8002ab2 <gps_ReadNMEA+0x1a2>
 8002a02:	a201      	add	r2, pc, #4	; (adr r2, 8002a08 <gps_ReadNMEA+0xf8>)
 8002a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a08:	08002a35 	.word	0x08002a35
 8002a0c:	08002a43 	.word	0x08002a43
 8002a10:	08002a51 	.word	0x08002a51
 8002a14:	08002a5f 	.word	0x08002a5f
 8002a18:	08002a6d 	.word	0x08002a6d
 8002a1c:	08002a7b 	.word	0x08002a7b
 8002a20:	08002a89 	.word	0x08002a89
 8002a24:	08002ab3 	.word	0x08002ab3
 8002a28:	08002a97 	.word	0x08002a97
 8002a2c:	08002ab3 	.word	0x08002ab3
 8002a30:	08002aa5 	.word	0x08002aa5
						/*UTC*/
						case 1:
							gps_ProcessUTC(readed_data, gps_struct);
 8002a34:	f107 030c 	add.w	r3, r7, #12
 8002a38:	6839      	ldr	r1, [r7, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 f850 	bl	8002ae0 <gps_ProcessUTC>
							break;
 8002a40:	e037      	b.n	8002ab2 <gps_ReadNMEA+0x1a2>

						/*LATITUDE*/
						case 2:
							gps_ProcessLatitude(readed_data, gps_struct);
 8002a42:	f107 030c 	add.w	r3, r7, #12
 8002a46:	6839      	ldr	r1, [r7, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f000 f889 	bl	8002b60 <gps_ProcessLatitude>
							break;
 8002a4e:	e030      	b.n	8002ab2 <gps_ReadNMEA+0x1a2>

						/*NORTH - SOUTH*/
						case 3:
							gps_ProcessNorthSouth(readed_data, gps_struct);
 8002a50:	f107 030c 	add.w	r3, r7, #12
 8002a54:	6839      	ldr	r1, [r7, #0]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f000 f9fc 	bl	8002e54 <gps_ProcessNorthSouth>
							break;
 8002a5c:	e029      	b.n	8002ab2 <gps_ReadNMEA+0x1a2>

						/*LONGITUDE*/
						case 4:
							gps_ProcessLongitude(readed_data, gps_struct);
 8002a5e:	f107 030c 	add.w	r3, r7, #12
 8002a62:	6839      	ldr	r1, [r7, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f000 f937 	bl	8002cd8 <gps_ProcessLongitude>
							break;
 8002a6a:	e022      	b.n	8002ab2 <gps_ReadNMEA+0x1a2>

						/*EAST - WEST*/
						case 5:
							gps_ProcessEastWest(readed_data,gps_struct);
 8002a6c:	f107 030c 	add.w	r3, r7, #12
 8002a70:	6839      	ldr	r1, [r7, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 fa04 	bl	8002e80 <gps_ProcessEastWest>
							break;
 8002a78:	e01b      	b.n	8002ab2 <gps_ReadNMEA+0x1a2>

						/*FIX QUALIFICATION*/
						case 6:
							gps_ProcessFix(readed_data, gps_struct);
 8002a7a:	f107 030c 	add.w	r3, r7, #12
 8002a7e:	6839      	ldr	r1, [r7, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f000 fa13 	bl	8002eac <gps_ProcessFix>
							break;
 8002a86:	e014      	b.n	8002ab2 <gps_ReadNMEA+0x1a2>

						/*SATELLITES COUNT */
						case 7:
							gps_ProcessSatelliteCount(readed_data, gps_struct);
 8002a88:	f107 030c 	add.w	r3, r7, #12
 8002a8c:	6839      	ldr	r1, [r7, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 fa2a 	bl	8002ee8 <gps_ProcessSatelliteCount>
							break;
 8002a94:	e00d      	b.n	8002ab2 <gps_ReadNMEA+0x1a2>

						/*MSL ALTITUDE*/
						case 9:
							gps_ProcessAltitude(readed_data, gps_struct);
 8002a96:	f107 030c 	add.w	r3, r7, #12
 8002a9a:	6839      	ldr	r1, [r7, #0]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f000 fa3f 	bl	8002f20 <gps_ProcessAltitude>
							break;
 8002aa2:	e006      	b.n	8002ab2 <gps_ReadNMEA+0x1a2>

						/*ELLIPTICAL CORRECTION */
						case 11:
							gps_ProcessAltitudeCorre(readed_data, gps_struct);	//Can be use to process altitude correction as well
 8002aa4:	f107 030c 	add.w	r3, r7, #12
 8002aa8:	6839      	ldr	r1, [r7, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 fa94 	bl	8002fd8 <gps_ProcessAltitudeCorre>
							break;
 8002ab0:	bf00      	nop
				for(int k=0;k<12;k++){
 8002ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aba:	2b0b      	cmp	r3, #11
 8002abc:	f77f af6d 	ble.w	800299a <gps_ReadNMEA+0x8a>
					}
				}
				/*After the first $GPGGA read we need to quit the current reading process*/
				break;
 8002ac0:	e008      	b.n	8002ad4 <gps_ReadNMEA+0x1c4>
	for(int i=0;i<BUFFER_SIZE_NMEA;i++){
 8002ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	633b      	str	r3, [r7, #48]	; 0x30
 8002ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ace:	f6ff af32 	blt.w	8002936 <gps_ReadNMEA+0x26>

			}
		}
	}
}
 8002ad2:	bf00      	nop
 8002ad4:	bf00      	nop
 8002ad6:	3738      	adds	r7, #56	; 0x38
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	080146d8 	.word	0x080146d8

08002ae0 <gps_ProcessUTC>:

void gps_ProcessUTC(uint8_t utc_incomming[],GPS_t *gps_struct){
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
	gps_struct->utc_time.hour = ((utc_incomming[0] - '0')*10) + (utc_incomming[1] - '0');
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	461a      	mov	r2, r3
 8002af0:	0092      	lsls	r2, r2, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3301      	adds	r3, #1
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	4413      	add	r3, r2
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	3b10      	subs	r3, #16
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	761a      	strb	r2, [r3, #24]
	gps_struct->utc_time.minute = ((utc_incomming[2] - '0')*10) + (utc_incomming[3] - '0');
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	3302      	adds	r3, #2
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	461a      	mov	r2, r3
 8002b12:	0092      	lsls	r2, r2, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	3303      	adds	r3, #3
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	4413      	add	r3, r2
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	3b10      	subs	r3, #16
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	765a      	strb	r2, [r3, #25]
	gps_struct->utc_time.second = ((utc_incomming[4] - '0')*10) + (utc_incomming[5] - '0');
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	3304      	adds	r3, #4
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	461a      	mov	r2, r3
 8002b34:	0092      	lsls	r2, r2, #2
 8002b36:	4413      	add	r3, r2
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3305      	adds	r3, #5
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	4413      	add	r3, r2
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	3b10      	subs	r3, #16
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	769a      	strb	r2, [r3, #26]
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	0000      	movs	r0, r0
 8002b5c:	0000      	movs	r0, r0
	...

08002b60 <gps_ProcessLatitude>:

void gps_ProcessLatitude(uint8_t utc_incomming[],GPS_t *gps_struct){
 8002b60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b64:	b084      	sub	sp, #16
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
 8002b6a:	6039      	str	r1, [r7, #0]

	int8_t degree_DMm = 0;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	73fb      	strb	r3, [r7, #15]
	float minute_DMm = 0;
 8002b70:	f04f 0300 	mov.w	r3, #0
 8002b74:	60bb      	str	r3, [r7, #8]

	/*Add reader degree*/
	degree_DMm = ((utc_incomming[0] - '0')*10) + (utc_incomming[1] - '0');
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	3b30      	subs	r3, #48	; 0x30
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	461a      	mov	r2, r3
 8002b80:	0092      	lsls	r2, r2, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	b2da      	uxtb	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	4413      	add	r3, r2
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	3b30      	subs	r3, #48	; 0x30
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	73fb      	strb	r3, [r7, #15]
	/*Add first part of minutes*/
	minute_DMm = ((utc_incomming[2] - '0')*10) + (utc_incomming[3] - '0');
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3302      	adds	r3, #2
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	461a      	mov	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3303      	adds	r3, #3
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	3b30      	subs	r3, #48	; 0x30
 8002bb4:	4413      	add	r3, r2
 8002bb6:	ee07 3a90 	vmov	s15, r3
 8002bba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bbe:	edc7 7a02 	vstr	s15, [r7, #8]
	minute_DMm += ((utc_incomming[5] - '0')*0.1) + ((utc_incomming[6] - '0')*0.01) + ((utc_incomming[7] - '0')*0.001) + ((utc_incomming[8] - '0')*0.0001);
 8002bc2:	68b8      	ldr	r0, [r7, #8]
 8002bc4:	f7fd fc9a 	bl	80004fc <__aeabi_f2d>
 8002bc8:	4604      	mov	r4, r0
 8002bca:	460d      	mov	r5, r1
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3305      	adds	r3, #5
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	3b30      	subs	r3, #48	; 0x30
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7fd fc7f 	bl	80004d8 <__aeabi_i2d>
 8002bda:	a336      	add	r3, pc, #216	; (adr r3, 8002cb4 <gps_ProcessLatitude+0x154>)
 8002bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be0:	f7fd fce4 	bl	80005ac <__aeabi_dmul>
 8002be4:	4602      	mov	r2, r0
 8002be6:	460b      	mov	r3, r1
 8002be8:	4690      	mov	r8, r2
 8002bea:	4699      	mov	r9, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3306      	adds	r3, #6
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	3b30      	subs	r3, #48	; 0x30
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7fd fc6f 	bl	80004d8 <__aeabi_i2d>
 8002bfa:	a330      	add	r3, pc, #192	; (adr r3, 8002cbc <gps_ProcessLatitude+0x15c>)
 8002bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c00:	f7fd fcd4 	bl	80005ac <__aeabi_dmul>
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	4640      	mov	r0, r8
 8002c0a:	4649      	mov	r1, r9
 8002c0c:	f7fd fb18 	bl	8000240 <__adddf3>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	4690      	mov	r8, r2
 8002c16:	4699      	mov	r9, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3307      	adds	r3, #7
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	3b30      	subs	r3, #48	; 0x30
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7fd fc59 	bl	80004d8 <__aeabi_i2d>
 8002c26:	a327      	add	r3, pc, #156	; (adr r3, 8002cc4 <gps_ProcessLatitude+0x164>)
 8002c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c2c:	f7fd fcbe 	bl	80005ac <__aeabi_dmul>
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	4640      	mov	r0, r8
 8002c36:	4649      	mov	r1, r9
 8002c38:	f7fd fb02 	bl	8000240 <__adddf3>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4690      	mov	r8, r2
 8002c42:	4699      	mov	r9, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3308      	adds	r3, #8
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	3b30      	subs	r3, #48	; 0x30
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7fd fc43 	bl	80004d8 <__aeabi_i2d>
 8002c52:	a31e      	add	r3, pc, #120	; (adr r3, 8002ccc <gps_ProcessLatitude+0x16c>)
 8002c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c58:	f7fd fca8 	bl	80005ac <__aeabi_dmul>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	460b      	mov	r3, r1
 8002c60:	4640      	mov	r0, r8
 8002c62:	4649      	mov	r1, r9
 8002c64:	f7fd faec 	bl	8000240 <__adddf3>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	4620      	mov	r0, r4
 8002c6e:	4629      	mov	r1, r5
 8002c70:	f7fd fae6 	bl	8000240 <__adddf3>
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	4610      	mov	r0, r2
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	f7fd ff46 	bl	8000b0c <__aeabi_d2f>
 8002c80:	4603      	mov	r3, r0
 8002c82:	60bb      	str	r3, [r7, #8]

	gps_struct->latitude_deg_s = (degree_DMm + (minute_DMm/60));
 8002c84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c88:	ee07 3a90 	vmov	s15, r3
 8002c8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c90:	edd7 6a02 	vldr	s13, [r7, #8]
 8002c94:	ed9f 6a06 	vldr	s12, [pc, #24]	; 8002cb0 <gps_ProcessLatitude+0x150>
 8002c98:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002c9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	edc3 7a00 	vstr	s15, [r3]
}
 8002ca6:	bf00      	nop
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002cb0:	42700000 	.word	0x42700000
 8002cb4:	9999999a 	.word	0x9999999a
 8002cb8:	3fb99999 	.word	0x3fb99999
 8002cbc:	47ae147b 	.word	0x47ae147b
 8002cc0:	3f847ae1 	.word	0x3f847ae1
 8002cc4:	d2f1a9fc 	.word	0xd2f1a9fc
 8002cc8:	3f50624d 	.word	0x3f50624d
 8002ccc:	eb1c432d 	.word	0xeb1c432d
 8002cd0:	3f1a36e2 	.word	0x3f1a36e2
 8002cd4:	00000000 	.word	0x00000000

08002cd8 <gps_ProcessLongitude>:

void gps_ProcessLongitude(uint8_t utc_incomming[],GPS_t *gps_struct){
 8002cd8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002cdc:	b084      	sub	sp, #16
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	6039      	str	r1, [r7, #0]

	int8_t degree_DMm = 0;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	73fb      	strb	r3, [r7, #15]
	float minute_DMm = 0;
 8002ce8:	f04f 0300 	mov.w	r3, #0
 8002cec:	60bb      	str	r3, [r7, #8]

	/*Add reader degree*/
	degree_DMm = ((utc_incomming[1] - '0')*10) + (utc_incomming[2] - '0');
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	3b30      	subs	r3, #48	; 0x30
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	0092      	lsls	r2, r2, #2
 8002cfc:	4413      	add	r3, r2
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	3302      	adds	r3, #2
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	4413      	add	r3, r2
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	3b30      	subs	r3, #48	; 0x30
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	73fb      	strb	r3, [r7, #15]
	/*Add first part of minutes*/
	minute_DMm = ((utc_incomming[3] - '0')*10) + (utc_incomming[4] - '0');
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	3303      	adds	r3, #3
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	461a      	mov	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	3304      	adds	r3, #4
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	3b30      	subs	r3, #48	; 0x30
 8002d2e:	4413      	add	r3, r2
 8002d30:	ee07 3a90 	vmov	s15, r3
 8002d34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d38:	edc7 7a02 	vstr	s15, [r7, #8]
	minute_DMm += ((utc_incomming[5] - '0')*0.1) + ((utc_incomming[6] - '0')*0.01) + ((utc_incomming[7] - '0')*0.001) + ((utc_incomming[8] - '0')*0.0001);
 8002d3c:	68b8      	ldr	r0, [r7, #8]
 8002d3e:	f7fd fbdd 	bl	80004fc <__aeabi_f2d>
 8002d42:	4604      	mov	r4, r0
 8002d44:	460d      	mov	r5, r1
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	3305      	adds	r3, #5
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	3b30      	subs	r3, #48	; 0x30
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fd fbc2 	bl	80004d8 <__aeabi_i2d>
 8002d54:	a337      	add	r3, pc, #220	; (adr r3, 8002e34 <gps_ProcessLongitude+0x15c>)
 8002d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5a:	f7fd fc27 	bl	80005ac <__aeabi_dmul>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	4690      	mov	r8, r2
 8002d64:	4699      	mov	r9, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	3306      	adds	r3, #6
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	3b30      	subs	r3, #48	; 0x30
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7fd fbb2 	bl	80004d8 <__aeabi_i2d>
 8002d74:	a331      	add	r3, pc, #196	; (adr r3, 8002e3c <gps_ProcessLongitude+0x164>)
 8002d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7a:	f7fd fc17 	bl	80005ac <__aeabi_dmul>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	4640      	mov	r0, r8
 8002d84:	4649      	mov	r1, r9
 8002d86:	f7fd fa5b 	bl	8000240 <__adddf3>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	4690      	mov	r8, r2
 8002d90:	4699      	mov	r9, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	3307      	adds	r3, #7
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	3b30      	subs	r3, #48	; 0x30
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7fd fb9c 	bl	80004d8 <__aeabi_i2d>
 8002da0:	a328      	add	r3, pc, #160	; (adr r3, 8002e44 <gps_ProcessLongitude+0x16c>)
 8002da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da6:	f7fd fc01 	bl	80005ac <__aeabi_dmul>
 8002daa:	4602      	mov	r2, r0
 8002dac:	460b      	mov	r3, r1
 8002dae:	4640      	mov	r0, r8
 8002db0:	4649      	mov	r1, r9
 8002db2:	f7fd fa45 	bl	8000240 <__adddf3>
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	4690      	mov	r8, r2
 8002dbc:	4699      	mov	r9, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	3308      	adds	r3, #8
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	3b30      	subs	r3, #48	; 0x30
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fd fb86 	bl	80004d8 <__aeabi_i2d>
 8002dcc:	a31f      	add	r3, pc, #124	; (adr r3, 8002e4c <gps_ProcessLongitude+0x174>)
 8002dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd2:	f7fd fbeb 	bl	80005ac <__aeabi_dmul>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	460b      	mov	r3, r1
 8002dda:	4640      	mov	r0, r8
 8002ddc:	4649      	mov	r1, r9
 8002dde:	f7fd fa2f 	bl	8000240 <__adddf3>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	4620      	mov	r0, r4
 8002de8:	4629      	mov	r1, r5
 8002dea:	f7fd fa29 	bl	8000240 <__adddf3>
 8002dee:	4602      	mov	r2, r0
 8002df0:	460b      	mov	r3, r1
 8002df2:	4610      	mov	r0, r2
 8002df4:	4619      	mov	r1, r3
 8002df6:	f7fd fe89 	bl	8000b0c <__aeabi_d2f>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	60bb      	str	r3, [r7, #8]

	gps_struct->longitude_deg_s = (degree_DMm + (minute_DMm/60));
 8002dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e02:	ee07 3a90 	vmov	s15, r3
 8002e06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e0a:	edd7 6a02 	vldr	s13, [r7, #8]
 8002e0e:	ed9f 6a08 	vldr	s12, [pc, #32]	; 8002e30 <gps_ProcessLongitude+0x158>
 8002e12:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002e16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8002e20:	bf00      	nop
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002e2a:	bf00      	nop
 8002e2c:	f3af 8000 	nop.w
 8002e30:	42700000 	.word	0x42700000
 8002e34:	9999999a 	.word	0x9999999a
 8002e38:	3fb99999 	.word	0x3fb99999
 8002e3c:	47ae147b 	.word	0x47ae147b
 8002e40:	3f847ae1 	.word	0x3f847ae1
 8002e44:	d2f1a9fc 	.word	0xd2f1a9fc
 8002e48:	3f50624d 	.word	0x3f50624d
 8002e4c:	eb1c432d 	.word	0xeb1c432d
 8002e50:	3f1a36e2 	.word	0x3f1a36e2

08002e54 <gps_ProcessNorthSouth>:

void gps_ProcessNorthSouth(uint8_t utc_incomming[],GPS_t *gps_struct){
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]

	if(utc_incomming[0] == 'N'){
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b4e      	cmp	r3, #78	; 0x4e
 8002e64:	d103      	bne.n	8002e6e <gps_ProcessNorthSouth+0x1a>
		gps_struct->north_south = north;
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	741a      	strb	r2, [r3, #16]
	}
	else{
		gps_struct->north_south = south;
	}
}
 8002e6c:	e002      	b.n	8002e74 <gps_ProcessNorthSouth+0x20>
		gps_struct->north_south = south;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	2201      	movs	r2, #1
 8002e72:	741a      	strb	r2, [r3, #16]
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <gps_ProcessEastWest>:

void gps_ProcessEastWest(uint8_t utc_incomming[],GPS_t *gps_struct){
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]

	if(utc_incomming[0] == 'E'){
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	2b45      	cmp	r3, #69	; 0x45
 8002e90:	d103      	bne.n	8002e9a <gps_ProcessEastWest+0x1a>
		gps_struct->east_west = east;
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	2202      	movs	r2, #2
 8002e96:	745a      	strb	r2, [r3, #17]
	}
	else{
		gps_struct->east_west = west;
	}
}
 8002e98:	e002      	b.n	8002ea0 <gps_ProcessEastWest+0x20>
		gps_struct->east_west = west;
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	2203      	movs	r2, #3
 8002e9e:	745a      	strb	r2, [r3, #17]
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <gps_ProcessFix>:

void gps_ProcessFix(uint8_t utc_incomming[],GPS_t *gps_struct){
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]

	if(utc_incomming[0] == '1'){
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	2b31      	cmp	r3, #49	; 0x31
 8002ebc:	d103      	bne.n	8002ec6 <gps_ProcessFix+0x1a>
		gps_struct->qualification = fix_gps;
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	771a      	strb	r2, [r3, #28]
		}
		else{
			gps_struct->qualification = unvalid;
		}
	}
}
 8002ec4:	e00a      	b.n	8002edc <gps_ProcessFix+0x30>
		if(utc_incomming[0] == '2'){
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	2b32      	cmp	r3, #50	; 0x32
 8002ecc:	d103      	bne.n	8002ed6 <gps_ProcessFix+0x2a>
			gps_struct->qualification = fix_dgps;
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	771a      	strb	r2, [r3, #28]
}
 8002ed4:	e002      	b.n	8002edc <gps_ProcessFix+0x30>
			gps_struct->qualification = unvalid;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	771a      	strb	r2, [r3, #28]
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <gps_ProcessSatelliteCount>:

void gps_ProcessSatelliteCount(uint8_t utc_incomming[],GPS_t *gps_struct){
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]

	gps_struct->satelite_number = ((utc_incomming[0] - '0')*10) + (utc_incomming[1] - '0');
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	0092      	lsls	r2, r2, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	b2da      	uxtb	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3301      	adds	r3, #1
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	4413      	add	r3, r2
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	3b10      	subs	r3, #16
 8002f0c:	b2da      	uxtb	r2, r3
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	76da      	strb	r2, [r3, #27]
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
	...

08002f20 <gps_ProcessAltitude>:

void gps_ProcessAltitude(uint8_t utc_incomming[],GPS_t *gps_struct){
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]

	float altitude = 0;
 8002f2a:	f04f 0300 	mov.w	r3, #0
 8002f2e:	617b      	str	r3, [r7, #20]
	uint8_t dot_find = 0;
 8002f30:	2300      	movs	r3, #0
 8002f32:	74fb      	strb	r3, [r7, #19]
	for(int i=0;i<sizeof(utc_incomming);i++){
 8002f34:	2300      	movs	r3, #0
 8002f36:	60fb      	str	r3, [r7, #12]
 8002f38:	e03f      	b.n	8002fba <gps_ProcessAltitude+0x9a>

		if(utc_incomming[i] == '.'){
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	4413      	add	r3, r2
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b2e      	cmp	r3, #46	; 0x2e
 8002f44:	d104      	bne.n	8002f50 <gps_ProcessAltitude+0x30>
			dot_find = 1;
 8002f46:	2301      	movs	r3, #1
 8002f48:	74fb      	strb	r3, [r7, #19]
			i++;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	60fb      	str	r3, [r7, #12]
		}

		if(dot_find){
 8002f50:	7cfb      	ldrb	r3, [r7, #19]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d01b      	beq.n	8002f8e <gps_ProcessAltitude+0x6e>
			altitude +=  (float)((utc_incomming[i] - '0')*0.1);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	3b30      	subs	r3, #48	; 0x30
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7fd fab9 	bl	80004d8 <__aeabi_i2d>
 8002f66:	a31a      	add	r3, pc, #104	; (adr r3, 8002fd0 <gps_ProcessAltitude+0xb0>)
 8002f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6c:	f7fd fb1e 	bl	80005ac <__aeabi_dmul>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4610      	mov	r0, r2
 8002f76:	4619      	mov	r1, r3
 8002f78:	f7fd fdc8 	bl	8000b0c <__aeabi_d2f>
 8002f7c:	ee07 0a10 	vmov	s14, r0
 8002f80:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f84:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f88:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8002f8c:	e018      	b.n	8002fc0 <gps_ProcessAltitude+0xa0>

		}
		else{
			altitude = (altitude*10) + (utc_incomming[i] - '0');
 8002f8e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f92:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002f96:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	3b30      	subs	r3, #48	; 0x30
 8002fa4:	ee07 3a90 	vmov	s15, r3
 8002fa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fb0:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i=0;i<sizeof(utc_incomming);i++){
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	60fb      	str	r3, [r7, #12]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2b03      	cmp	r3, #3
 8002fbe:	d9bc      	bls.n	8002f3a <gps_ProcessAltitude+0x1a>
		}

	}
	gps_struct->altitude_deg_s = altitude;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	609a      	str	r2, [r3, #8]
}
 8002fc6:	bf00      	nop
 8002fc8:	3718      	adds	r7, #24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	9999999a 	.word	0x9999999a
 8002fd4:	3fb99999 	.word	0x3fb99999

08002fd8 <gps_ProcessAltitudeCorre>:

void gps_ProcessAltitudeCorre(uint8_t utc_incomming[],GPS_t *gps_struct){
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]

	float altitude = 0;
 8002fe2:	f04f 0300 	mov.w	r3, #0
 8002fe6:	617b      	str	r3, [r7, #20]
	uint8_t dot_find = 0;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	74fb      	strb	r3, [r7, #19]
	for(int i=0;i<sizeof(utc_incomming);i++){
 8002fec:	2300      	movs	r3, #0
 8002fee:	60fb      	str	r3, [r7, #12]
 8002ff0:	e03f      	b.n	8003072 <gps_ProcessAltitudeCorre+0x9a>

		if(utc_incomming[i] == '.'){
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	2b2e      	cmp	r3, #46	; 0x2e
 8002ffc:	d104      	bne.n	8003008 <gps_ProcessAltitudeCorre+0x30>
			dot_find = 1;
 8002ffe:	2301      	movs	r3, #1
 8003000:	74fb      	strb	r3, [r7, #19]
			i++;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	3301      	adds	r3, #1
 8003006:	60fb      	str	r3, [r7, #12]
		}

		if(dot_find){
 8003008:	7cfb      	ldrb	r3, [r7, #19]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d01b      	beq.n	8003046 <gps_ProcessAltitudeCorre+0x6e>
			altitude +=  (float)((utc_incomming[i] - '0')*0.1);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	4413      	add	r3, r2
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	3b30      	subs	r3, #48	; 0x30
 8003018:	4618      	mov	r0, r3
 800301a:	f7fd fa5d 	bl	80004d8 <__aeabi_i2d>
 800301e:	a31a      	add	r3, pc, #104	; (adr r3, 8003088 <gps_ProcessAltitudeCorre+0xb0>)
 8003020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003024:	f7fd fac2 	bl	80005ac <__aeabi_dmul>
 8003028:	4602      	mov	r2, r0
 800302a:	460b      	mov	r3, r1
 800302c:	4610      	mov	r0, r2
 800302e:	4619      	mov	r1, r3
 8003030:	f7fd fd6c 	bl	8000b0c <__aeabi_d2f>
 8003034:	ee07 0a10 	vmov	s14, r0
 8003038:	edd7 7a05 	vldr	s15, [r7, #20]
 800303c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003040:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8003044:	e018      	b.n	8003078 <gps_ProcessAltitudeCorre+0xa0>

		}
		else{
			altitude = (altitude*10) + (utc_incomming[i] - '0');
 8003046:	edd7 7a05 	vldr	s15, [r7, #20]
 800304a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800304e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	4413      	add	r3, r2
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	3b30      	subs	r3, #48	; 0x30
 800305c:	ee07 3a90 	vmov	s15, r3
 8003060:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003068:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i=0;i<sizeof(utc_incomming);i++){
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	3301      	adds	r3, #1
 8003070:	60fb      	str	r3, [r7, #12]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2b03      	cmp	r3, #3
 8003076:	d9bc      	bls.n	8002ff2 <gps_ProcessAltitudeCorre+0x1a>
		}

	}
	gps_struct->altitude_correction = altitude;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	60da      	str	r2, [r3, #12]
}
 800307e:	bf00      	nop
 8003080:	3718      	adds	r7, #24
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	9999999a 	.word	0x9999999a
 800308c:	3fb99999 	.word	0x3fb99999

08003090 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8003094:	b662      	cpsie	i
}
 8003096:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003098:	f000 ffd7 	bl	800404a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800309c:	f000 f836 	bl	800310c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80030a0:	f7ff fb04 	bl	80026ac <MX_GPIO_Init>
  MX_DMA_Init();
 80030a4:	f7ff fad8 	bl	8002658 <MX_DMA_Init>
  MX_I2C2_Init();
 80030a8:	f7ff fb7c 	bl	80027a4 <MX_I2C2_Init>
  MX_TIM2_Init();
 80030ac:	f000 fc76 	bl	800399c <MX_TIM2_Init>
  MX_TIM3_Init();
 80030b0:	f000 fccc 	bl	8003a4c <MX_TIM3_Init>
  MX_TIM4_Init();
 80030b4:	f000 fd24 	bl	8003b00 <MX_TIM4_Init>
  MX_UART4_Init();
 80030b8:	f000 fe3a 	bl	8003d30 <MX_UART4_Init>
  MX_UART5_Init();
 80030bc:	f000 fe84 	bl	8003dc8 <MX_UART5_Init>
  MX_ADC2_Init();
 80030c0:	f7fd fef2 	bl	8000ea8 <MX_ADC2_Init>
  MX_USB_Device_Init();
 80030c4:	f00f fd52 	bl	8012b6c <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  /*Timer start flaps and throttle + buzzer*/
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80030c8:	2100      	movs	r1, #0
 80030ca:	480c      	ldr	r0, [pc, #48]	; (80030fc <main+0x6c>)
 80030cc:	f006 fcc2 	bl	8009a54 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80030d0:	2100      	movs	r1, #0
 80030d2:	480b      	ldr	r0, [pc, #44]	; (8003100 <main+0x70>)
 80030d4:	f006 fcbe 	bl	8009a54 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80030d8:	2104      	movs	r1, #4
 80030da:	4809      	ldr	r0, [pc, #36]	; (8003100 <main+0x70>)
 80030dc:	f006 fcba 	bl	8009a54 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80030e0:	210c      	movs	r1, #12
 80030e2:	4807      	ldr	r0, [pc, #28]	; (8003100 <main+0x70>)
 80030e4:	f006 fcb6 	bl	8009a54 <HAL_TIM_PWM_Start>

  /*Start ADC conversion with DMA request*/
  HAL_ADC_Start_DMA(&hadc2, &BatteryMonitoringData, CONVERSION_COUNT);
 80030e8:	2203      	movs	r2, #3
 80030ea:	4906      	ldr	r1, [pc, #24]	; (8003104 <main+0x74>)
 80030ec:	4806      	ldr	r0, [pc, #24]	; (8003108 <main+0x78>)
 80030ee:	f001 fbe9 	bl	80048c4 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80030f2:	f7fe f90b 	bl	800130c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80030f6:	f00d fc38 	bl	801096a <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80030fa:	e7fe      	b.n	80030fa <main+0x6a>
 80030fc:	20000930 	.word	0x20000930
 8003100:	2000097c 	.word	0x2000097c
 8003104:	20000890 	.word	0x20000890
 8003108:	2000020c 	.word	0x2000020c

0800310c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b094      	sub	sp, #80	; 0x50
 8003110:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003112:	f107 0318 	add.w	r3, r7, #24
 8003116:	2238      	movs	r2, #56	; 0x38
 8003118:	2100      	movs	r1, #0
 800311a:	4618      	mov	r0, r3
 800311c:	f010 fa2a 	bl	8013574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003120:	1d3b      	adds	r3, r7, #4
 8003122:	2200      	movs	r2, #0
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	605a      	str	r2, [r3, #4]
 8003128:	609a      	str	r2, [r3, #8]
 800312a:	60da      	str	r2, [r3, #12]
 800312c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800312e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003132:	f005 fb05 	bl	8008740 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8003136:	2322      	movs	r3, #34	; 0x22
 8003138:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800313a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800313e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003140:	2340      	movs	r3, #64	; 0x40
 8003142:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003144:	2301      	movs	r3, #1
 8003146:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003148:	2302      	movs	r3, #2
 800314a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800314c:	2302      	movs	r3, #2
 800314e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003150:	2304      	movs	r3, #4
 8003152:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8003154:	234b      	movs	r3, #75	; 0x4b
 8003156:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003158:	2302      	movs	r3, #2
 800315a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800315c:	2302      	movs	r3, #2
 800315e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003160:	2302      	movs	r3, #2
 8003162:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003164:	f107 0318 	add.w	r3, r7, #24
 8003168:	4618      	mov	r0, r3
 800316a:	f005 fb8d 	bl	8008888 <HAL_RCC_OscConfig>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8003174:	f000 f82a 	bl	80031cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003178:	230f      	movs	r3, #15
 800317a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800317c:	2303      	movs	r3, #3
 800317e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003180:	2300      	movs	r3, #0
 8003182:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003184:	2300      	movs	r3, #0
 8003186:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003188:	2300      	movs	r3, #0
 800318a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800318c:	1d3b      	adds	r3, r7, #4
 800318e:	2104      	movs	r1, #4
 8003190:	4618      	mov	r0, r3
 8003192:	f005 fe91 	bl	8008eb8 <HAL_RCC_ClockConfig>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800319c:	f000 f816 	bl	80031cc <Error_Handler>
  }
}
 80031a0:	bf00      	nop
 80031a2:	3750      	adds	r7, #80	; 0x50
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a04      	ldr	r2, [pc, #16]	; (80031c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d101      	bne.n	80031be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80031ba:	f000 ff5f 	bl	800407c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80031be:	bf00      	nop
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	40012c00 	.word	0x40012c00

080031cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031d0:	b672      	cpsid	i
}
 80031d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031d4:	e7fe      	b.n	80031d4 <Error_Handler+0x8>

080031d6 <Pid_CalculatePitchError>:
DESCRIPTION - Basic driver for the mpu6050 accelerometer.
*******************************************************)*/
#include "main.h"

//As the gyro got the front at x axis then rotation on X mean roll / rotation on Y mean pitch and rotation on Z mean yaw
float32_t Pid_CalculatePitchError(COMMAND_t *command,BNO055_t *Accelerometer){
 80031d6:	b480      	push	{r7}
 80031d8:	b085      	sub	sp, #20
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
 80031de:	6039      	str	r1, [r7, #0]
	float32_t res = (Accelerometer->processed_data.euler_angles.x)-(command->pitch_angle);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	edd3 7a02 	vldr	s15, [r3, #8]
 80031ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031f0:	edc7 7a03 	vstr	s15, [r7, #12]
	return res;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	ee07 3a90 	vmov	s15, r3
}
 80031fa:	eeb0 0a67 	vmov.f32	s0, s15
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <Pid_CalculateYawError>:

float32_t Pid_CalculateYawError(COMMAND_t *command,BNO055_t *Accelerometer){
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
	float32_t res = (Accelerometer->processed_data.euler_angles.z)-(command->yaw_angle);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	edd3 7a03 	vldr	s15, [r3, #12]
 800321e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003222:	edc7 7a03 	vstr	s15, [r7, #12]
	return res;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	ee07 3a90 	vmov	s15, r3
}
 800322c:	eeb0 0a67 	vmov.f32	s0, s15
 8003230:	3714      	adds	r7, #20
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <Pid_CalculateRollError>:

float32_t Pid_CalculateRollError(COMMAND_t *command,BNO055_t *Accelerometer){
 800323a:	b480      	push	{r7}
 800323c:	b085      	sub	sp, #20
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
 8003242:	6039      	str	r1, [r7, #0]
	float32_t res = (Accelerometer->processed_data.euler_angles.y)-(command->roll_angle);
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	edd3 7a04 	vldr	s15, [r3, #16]
 8003250:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003254:	edc7 7a03 	vstr	s15, [r7, #12]
	return res;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	ee07 3a90 	vmov	s15, r3
}
 800325e:	eeb0 0a67 	vmov.f32	s0, s15
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <Pid_Init>:

void Pid_Init(arm_pid_instance_f32 *PID,float32_t KP,float32_t KI,float32_t KD){
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	ed87 0a02 	vstr	s0, [r7, #8]
 8003278:	edc7 0a01 	vstr	s1, [r7, #4]
 800327c:	ed87 1a00 	vstr	s2, [r7]

	//Set PID gain
	PID->Kp = KP;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	619a      	str	r2, [r3, #24]
	PID->Ki = KI;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	61da      	str	r2, [r3, #28]
	PID->Kd = KD;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	621a      	str	r2, [r3, #32]

	//Set the PID
	arm_pid_init_f32(PID, 1);
 8003292:	2101      	movs	r1, #1
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f010 f94f 	bl	8013538 <arm_pid_init_f32>

}
 800329a:	bf00      	nop
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <Pid_CompensateYaw>:

//Function use to compensate a roatation on yaw axis --> make sure to update accelerometer before reading and compensate
void Pid_CompensateYaw(arm_pid_instance_f32 *PID,COMMAND_t *command,BNO055_t *Accelerometer,PROPULSION_t *propulsion){
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b08a      	sub	sp, #40	; 0x28
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	60f8      	str	r0, [r7, #12]
 80032aa:	60b9      	str	r1, [r7, #8]
 80032ac:	607a      	str	r2, [r7, #4]
 80032ae:	603b      	str	r3, [r7, #0]
	float32_t error;
	float32_t pid_value;
	//Calculate the erro in °/s around yaw/z axis
	error = Pid_CalculateYawError(command, Accelerometer);
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	68b8      	ldr	r0, [r7, #8]
 80032b4:	f7ff ffa8 	bl	8003208 <Pid_CalculateYawError>
 80032b8:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	61fb      	str	r3, [r7, #28]
 80032c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c2:	61bb      	str	r3, [r7, #24]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	ed93 7a00 	vldr	s14, [r3]
 80032ca:	edd7 7a06 	vldr	s15, [r7, #24]
 80032ce:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	edd3 6a01 	vldr	s13, [r3, #4]
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	edd3 7a03 	vldr	s15, [r3, #12]
 80032de:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80032e2:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	edd3 6a02 	vldr	s13, [r3, #8]
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	edd3 7a04 	vldr	s15, [r3, #16]
 80032f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8003300:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003304:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Update state */
    S->state[1] = S->state[0];
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	68da      	ldr	r2, [r3, #12]
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 800331c:	697b      	ldr	r3, [r7, #20]
	//calculate the amount of mouve needed to force back the plane
	pid_value = arm_pid_f32(PID, error);
 800331e:	623b      	str	r3, [r7, #32]

	//Ase the plane is a fixed wing we can't compensate move on yaw axis ...
	//If you have different plane make sure to create a thing to do here
}
 8003320:	bf00      	nop
 8003322:	3728      	adds	r7, #40	; 0x28
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <Pid_CompensateRoll>:

//Function use to compensate a roatation on Roll axis --> make sure to update accelerometer before reading and compensate
void Pid_CompensateRoll(arm_pid_instance_f32 *PID,COMMAND_t *command,BNO055_t *Accelerometer,PROPULSION_t *propulsion){
 8003328:	b580      	push	{r7, lr}
 800332a:	b08a      	sub	sp, #40	; 0x28
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
 8003334:	603b      	str	r3, [r7, #0]

	float32_t error;
	float32_t pid_value;
	//Calculate the erro in °/s around yaw/z axis
	error = Pid_CalculateRollError(command, Accelerometer);
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	68b8      	ldr	r0, [r7, #8]
 800333a:	f7ff ff7e 	bl	800323a <Pid_CalculateRollError>
 800333e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	61fb      	str	r3, [r7, #28]
 8003346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003348:	61bb      	str	r3, [r7, #24]
    out = (S->A0 * in) +
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	ed93 7a00 	vldr	s14, [r3]
 8003350:	edd7 7a06 	vldr	s15, [r7, #24]
 8003354:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	edd3 6a01 	vldr	s13, [r3, #4]
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	edd3 7a03 	vldr	s15, [r3, #12]
 8003364:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8003368:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	edd3 6a02 	vldr	s13, [r3, #8]
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	edd3 7a04 	vldr	s15, [r3, #16]
 8003378:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800337c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8003386:	ee77 7a27 	vadd.f32	s15, s14, s15
 800338a:	edc7 7a05 	vstr	s15, [r7, #20]
    S->state[1] = S->state[0];
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	68da      	ldr	r2, [r3, #12]
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	615a      	str	r2, [r3, #20]
    return (out);
 80033a2:	697b      	ldr	r3, [r7, #20]
	//calculate the amount of mouve needed to force back the plane
	pid_value = arm_pid_f32(PID, error);
 80033a4:	623b      	str	r3, [r7, #32]

	/*Left flaps up and right flaps down*/


#ifndef SERVO_LEFT_REVERSED
	if((propulsion->servo_left_timer_val + pid_value)>MAX_LEFT_EXTENSION){
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033aa:	ee07 3a90 	vmov	s15, r3
 80033ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033b2:	edd7 7a08 	vldr	s15, [r7, #32]
 80033b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ba:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80034ac <Pid_CompensateRoll+0x184>
 80033be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033c6:	dd04      	ble.n	80033d2 <Pid_CompensateRoll+0xaa>
		propulsion->servo_left_timer_val = MAX_LEFT_EXTENSION;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	f640 52ac 	movw	r2, #3500	; 0xdac
 80033ce:	625a      	str	r2, [r3, #36]	; 0x24
 80033d0:	e025      	b.n	800341e <Pid_CompensateRoll+0xf6>
	}
	else{
		if((propulsion->servo_left_timer_val + pid_value)<MIN_LEFT_EXTENSION){
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	ee07 3a90 	vmov	s15, r3
 80033da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033de:	edd7 7a08 	vldr	s15, [r7, #32]
 80033e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033e6:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80034b0 <Pid_CompensateRoll+0x188>
 80033ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033f2:	d504      	bpl.n	80033fe <Pid_CompensateRoll+0xd6>
			propulsion->servo_left_timer_val = MIN_LEFT_EXTENSION;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	f240 5214 	movw	r2, #1300	; 0x514
 80033fa:	625a      	str	r2, [r3, #36]	; 0x24
 80033fc:	e00f      	b.n	800341e <Pid_CompensateRoll+0xf6>
		}
		else{
			propulsion->servo_left_timer_val += pid_value;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	ee07 3a90 	vmov	s15, r3
 8003406:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800340a:	edd7 7a08 	vldr	s15, [r7, #32]
 800340e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003412:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003416:	ee17 2a90 	vmov	r2, s15
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	625a      	str	r2, [r3, #36]	; 0x24
			propulsion->servo_right_timer_val -= pid_value;
		}
	}
#endif
#ifdef SERVO_RIGHT_REVERSED
	if((propulsion->servo_right_timer_val + pid_value)>MIN_RIGHT_EXTENSION){
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003422:	ee07 3a90 	vmov	s15, r3
 8003426:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800342a:	edd7 7a08 	vldr	s15, [r7, #32]
 800342e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003432:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80034ac <Pid_CompensateRoll+0x184>
 8003436:	eef4 7ac7 	vcmpe.f32	s15, s14
 800343a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800343e:	dd04      	ble.n	800344a <Pid_CompensateRoll+0x122>
		propulsion->servo_right_timer_val = MIN_RIGHT_EXTENSION;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	f640 52ac 	movw	r2, #3500	; 0xdac
 8003446:	629a      	str	r2, [r3, #40]	; 0x28
 8003448:	e025      	b.n	8003496 <Pid_CompensateRoll+0x16e>
	}
	else{
		if((propulsion->servo_right_timer_val + pid_value)<MAX_RIGHT_EXTENSION){
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344e:	ee07 3a90 	vmov	s15, r3
 8003452:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003456:	edd7 7a08 	vldr	s15, [r7, #32]
 800345a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800345e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80034b0 <Pid_CompensateRoll+0x188>
 8003462:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800346a:	d504      	bpl.n	8003476 <Pid_CompensateRoll+0x14e>
			propulsion->servo_right_timer_val = MAX_RIGHT_EXTENSION;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	f240 5214 	movw	r2, #1300	; 0x514
 8003472:	629a      	str	r2, [r3, #40]	; 0x28
 8003474:	e00f      	b.n	8003496 <Pid_CompensateRoll+0x16e>
		}
		else{
			propulsion->servo_right_timer_val += pid_value;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347a:	ee07 3a90 	vmov	s15, r3
 800347e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003482:	edd7 7a08 	vldr	s15, [r7, #32]
 8003486:	ee77 7a27 	vadd.f32	s15, s14, s15
 800348a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800348e:	ee17 2a90 	vmov	r2, s15
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	629a      	str	r2, [r3, #40]	; 0x28
			propulsion->servo_left_timer_val -= pid_value;
		}
	}
#endif

	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 8003496:	6838      	ldr	r0, [r7, #0]
 8003498:	f000 f8d2 	bl	8003640 <PropulsionAndControl_UpdateLeftFlaps>
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 800349c:	6838      	ldr	r0, [r7, #0]
 800349e:	f000 f8ed 	bl	800367c <PropulsionAndControl_UpdateRightFlaps>

}
 80034a2:	bf00      	nop
 80034a4:	3728      	adds	r7, #40	; 0x28
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	455ac000 	.word	0x455ac000
 80034b0:	44a28000 	.word	0x44a28000

080034b4 <Pid_CompensatePitch>:
//Function use to compensate a roatation on Pitch axis --> make sure to update accelerometer before reading and compensate
void Pid_CompensatePitch(arm_pid_instance_f32 *PID,COMMAND_t *command,BNO055_t *Accelerometer,PROPULSION_t *propulsion){
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b08a      	sub	sp, #40	; 0x28
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
 80034c0:	603b      	str	r3, [r7, #0]

	float32_t error;
	float32_t pid_value;
	//Calculate the erro in °/s around yaw/z axis
	error = Pid_CalculatePitchError(command, Accelerometer);
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	68b8      	ldr	r0, [r7, #8]
 80034c6:	f7ff fe86 	bl	80031d6 <Pid_CalculatePitchError>
 80034ca:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	61fb      	str	r3, [r7, #28]
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	61bb      	str	r3, [r7, #24]
    out = (S->A0 * in) +
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	ed93 7a00 	vldr	s14, [r3]
 80034dc:	edd7 7a06 	vldr	s15, [r7, #24]
 80034e0:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	edd3 6a01 	vldr	s13, [r3, #4]
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80034f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80034f4:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	edd3 6a02 	vldr	s13, [r3, #8]
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	edd3 7a04 	vldr	s15, [r3, #16]
 8003504:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003508:	ee37 7a27 	vadd.f32	s14, s14, s15
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8003512:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003516:	edc7 7a05 	vstr	s15, [r7, #20]
    S->state[1] = S->state[0];
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	68da      	ldr	r2, [r3, #12]
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	615a      	str	r2, [r3, #20]
    return (out);
 800352e:	697b      	ldr	r3, [r7, #20]
	//calculate the amount of mouve needed to force back the plane
	pid_value = arm_pid_f32(PID, error);
 8003530:	623b      	str	r3, [r7, #32]


#ifndef SERVO_LEFT_REVERSED
	if((propulsion->servo_left_timer_val + pid_value)>MAX_LEFT_EXTENSION){
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	ee07 3a90 	vmov	s15, r3
 800353a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800353e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003542:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003546:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8003638 <Pid_CompensatePitch+0x184>
 800354a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800354e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003552:	dd04      	ble.n	800355e <Pid_CompensatePitch+0xaa>
		propulsion->servo_left_timer_val = MAX_LEFT_EXTENSION;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	f640 52ac 	movw	r2, #3500	; 0xdac
 800355a:	625a      	str	r2, [r3, #36]	; 0x24
 800355c:	e025      	b.n	80035aa <Pid_CompensatePitch+0xf6>
	}
	else{
		if((propulsion->servo_left_timer_val + pid_value)<MIN_LEFT_EXTENSION){
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003562:	ee07 3a90 	vmov	s15, r3
 8003566:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800356a:	edd7 7a08 	vldr	s15, [r7, #32]
 800356e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003572:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800363c <Pid_CompensatePitch+0x188>
 8003576:	eef4 7ac7 	vcmpe.f32	s15, s14
 800357a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800357e:	d504      	bpl.n	800358a <Pid_CompensatePitch+0xd6>
			propulsion->servo_left_timer_val = MIN_LEFT_EXTENSION;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	f240 5214 	movw	r2, #1300	; 0x514
 8003586:	625a      	str	r2, [r3, #36]	; 0x24
 8003588:	e00f      	b.n	80035aa <Pid_CompensatePitch+0xf6>
		}
		else{
			propulsion->servo_left_timer_val += pid_value;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	ee07 3a90 	vmov	s15, r3
 8003592:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003596:	edd7 7a08 	vldr	s15, [r7, #32]
 800359a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800359e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035a2:	ee17 2a90 	vmov	r2, s15
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	625a      	str	r2, [r3, #36]	; 0x24
			propulsion->servo_right_timer_val += pid_value;
		}
	}
#endif
#ifdef SERVO_RIGHT_REVERSED
	if((propulsion->servo_right_timer_val - pid_value)>MIN_RIGHT_EXTENSION){
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ae:	ee07 3a90 	vmov	s15, r3
 80035b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80035b6:	edd7 7a08 	vldr	s15, [r7, #32]
 80035ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035be:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003638 <Pid_CompensatePitch+0x184>
 80035c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ca:	dd04      	ble.n	80035d6 <Pid_CompensatePitch+0x122>
		propulsion->servo_right_timer_val = MIN_RIGHT_EXTENSION;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	f640 52ac 	movw	r2, #3500	; 0xdac
 80035d2:	629a      	str	r2, [r3, #40]	; 0x28
 80035d4:	e025      	b.n	8003622 <Pid_CompensatePitch+0x16e>
	}
	else{
		if((propulsion->servo_right_timer_val - pid_value)<MAX_RIGHT_EXTENSION){
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035da:	ee07 3a90 	vmov	s15, r3
 80035de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80035e2:	edd7 7a08 	vldr	s15, [r7, #32]
 80035e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035ea:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800363c <Pid_CompensatePitch+0x188>
 80035ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035f6:	d504      	bpl.n	8003602 <Pid_CompensatePitch+0x14e>
			propulsion->servo_right_timer_val = MAX_RIGHT_EXTENSION;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	f240 5214 	movw	r2, #1300	; 0x514
 80035fe:	629a      	str	r2, [r3, #40]	; 0x28
 8003600:	e00f      	b.n	8003622 <Pid_CompensatePitch+0x16e>
		}
		else{
			propulsion->servo_right_timer_val -= pid_value;
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003606:	ee07 3a90 	vmov	s15, r3
 800360a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800360e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003612:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003616:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800361a:	ee17 2a90 	vmov	r2, s15
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	629a      	str	r2, [r3, #40]	; 0x28
		}
	}
#endif


	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 8003622:	6838      	ldr	r0, [r7, #0]
 8003624:	f000 f80c 	bl	8003640 <PropulsionAndControl_UpdateLeftFlaps>
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8003628:	6838      	ldr	r0, [r7, #0]
 800362a:	f000 f827 	bl	800367c <PropulsionAndControl_UpdateRightFlaps>

}
 800362e:	bf00      	nop
 8003630:	3728      	adds	r7, #40	; 0x28
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	455ac000 	.word	0x455ac000
 800363c:	44a28000 	.word	0x44a28000

08003640 <PropulsionAndControl_UpdateLeftFlaps>:
void PropulsionAndControl_UpdateESC(PROPULSION_t *propulsion){
	uint32_t * timer_base_addr_ptr = &(propulsion->timer->Instance->CCR1);
	*(timer_base_addr_ptr + ((propulsion->esc_timer_channel-1))) = propulsion->esc_timer_val;
	propulsion->update_timer = 0x01;
}
void PropulsionAndControl_UpdateLeftFlaps(PROPULSION_t *propulsion){
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
	uint32_t * timer_base_addr_ptr = &(propulsion->timer->Instance->CCR1);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	3334      	adds	r3, #52	; 0x34
 8003650:	60fb      	str	r3, [r7, #12]
	*(timer_base_addr_ptr + ((propulsion->servo_left_timer_channel-1))) = propulsion->servo_left_timer_val;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	7f5b      	ldrb	r3, [r3, #29]
 8003656:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800365a:	3b01      	subs	r3, #1
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	4413      	add	r3, r2
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003666:	601a      	str	r2, [r3, #0]
	propulsion->update_timer = 0x01;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8003670:	bf00      	nop
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <PropulsionAndControl_UpdateRightFlaps>:
void PropulsionAndControl_UpdateRightFlaps(PROPULSION_t *propulsion){
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
	uint32_t * timer_base_addr_ptr = &(propulsion->timer->Instance->CCR1);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	3334      	adds	r3, #52	; 0x34
 800368c:	60fb      	str	r3, [r7, #12]
	*(timer_base_addr_ptr + ((propulsion->servo_right_timer_channel-1))) = propulsion->servo_right_timer_val;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	7f9b      	ldrb	r3, [r3, #30]
 8003692:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003696:	3b01      	subs	r3, #1
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	4413      	add	r3, r2
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80036a2:	601a      	str	r2, [r3, #0]
	propulsion->update_timer = 0x01;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 80036ac:	bf00      	nop
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <PropulsionAndControl_Init>:

void PropulsionAndControl_Init(PROPULSION_t *propulsion,uint32_t esc_pin,GPIO_TypeDef *esc_port,uint32_t servo_left_pin,GPIO_TypeDef *servo_left_port,uint32_t servo_right_pin,GPIO_TypeDef *servo_right_port,uint32_t esc_channel,uint32_t servo_left_channel,uint32_t servo_right_channel,TIM_HandleTypeDef *timer_entity){
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
 80036c4:	603b      	str	r3, [r7, #0]

	//Store all pins into the struct
	propulsion->esc_pin = esc_pin;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	611a      	str	r2, [r3, #16]
	propulsion->esc_port = esc_port;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	615a      	str	r2, [r3, #20]
	propulsion->esc_timer_channel = esc_channel;
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	771a      	strb	r2, [r3, #28]

	propulsion->servo_left_pin = servo_left_pin;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	601a      	str	r2, [r3, #0]
	propulsion->servo_left_port = servo_left_port;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	605a      	str	r2, [r3, #4]
	propulsion->servo_left_timer_channel = servo_left_channel;
 80036e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e8:	b2da      	uxtb	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	775a      	strb	r2, [r3, #29]

	propulsion->servo_right_pin = servo_right_pin;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	69fa      	ldr	r2, [r7, #28]
 80036f2:	609a      	str	r2, [r3, #8]
	propulsion->servo_right_port = servo_right_port;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6a3a      	ldr	r2, [r7, #32]
 80036f8:	60da      	str	r2, [r3, #12]
	propulsion->servo_right_timer_channel = servo_right_channel;
 80036fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fc:	b2da      	uxtb	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	779a      	strb	r2, [r3, #30]

	propulsion->timer = timer_entity;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003706:	619a      	str	r2, [r3, #24]

	//put the flaps at minimum
	HAL_Delay(20);
 8003708:	2014      	movs	r0, #20
 800370a:	f000 fcd5 	bl	80040b8 <HAL_Delay>
	propulsion->servo_left_timer_val = MIN_LEFT_EXTENSION;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f240 5214 	movw	r2, #1300	; 0x514
 8003714:	625a      	str	r2, [r3, #36]	; 0x24
	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f7ff ff92 	bl	8003640 <PropulsionAndControl_UpdateLeftFlaps>

	//put the flaps at minimum
	propulsion->servo_right_timer_val = MIN_RIGHT_EXTENSION;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f640 52ac 	movw	r2, #3500	; 0xdac
 8003722:	629a      	str	r2, [r3, #40]	; 0x28
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f7ff ffa9 	bl	800367c <PropulsionAndControl_UpdateRightFlaps>

	//put the flaps at maximum
	HAL_Delay(1500);
 800372a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800372e:	f000 fcc3 	bl	80040b8 <HAL_Delay>
	propulsion->servo_left_timer_val = MAX_LEFT_EXTENSION;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f640 52ac 	movw	r2, #3500	; 0xdac
 8003738:	625a      	str	r2, [r3, #36]	; 0x24
	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f7ff ff80 	bl	8003640 <PropulsionAndControl_UpdateLeftFlaps>

	//put the flaps at maximum
	propulsion->servo_right_timer_val = MAX_RIGHT_EXTENSION;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f240 5214 	movw	r2, #1300	; 0x514
 8003746:	629a      	str	r2, [r3, #40]	; 0x28
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f7ff ff97 	bl	800367c <PropulsionAndControl_UpdateRightFlaps>

	HAL_Delay(1500);
 800374e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003752:	f000 fcb1 	bl	80040b8 <HAL_Delay>
	propulsion->servo_left_timer_val = (MAX_LEFT_EXTENSION+MIN_LEFT_EXTENSION)/2;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f44f 6216 	mov.w	r2, #2400	; 0x960
 800375c:	625a      	str	r2, [r3, #36]	; 0x24
	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f7ff ff6e 	bl	8003640 <PropulsionAndControl_UpdateLeftFlaps>

	//put the flaps at minimum
	propulsion->servo_right_timer_val = (MAX_RIGHT_EXTENSION+MIN_RIGHT_EXTENSION)/2;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f44f 6216 	mov.w	r2, #2400	; 0x960
 800376a:	629a      	str	r2, [r3, #40]	; 0x28
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f7ff ff85 	bl	800367c <PropulsionAndControl_UpdateRightFlaps>
}
 8003772:	bf00      	nop
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
	...

0800377c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003782:	4b11      	ldr	r3, [pc, #68]	; (80037c8 <HAL_MspInit+0x4c>)
 8003784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003786:	4a10      	ldr	r2, [pc, #64]	; (80037c8 <HAL_MspInit+0x4c>)
 8003788:	f043 0301 	orr.w	r3, r3, #1
 800378c:	6613      	str	r3, [r2, #96]	; 0x60
 800378e:	4b0e      	ldr	r3, [pc, #56]	; (80037c8 <HAL_MspInit+0x4c>)
 8003790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	607b      	str	r3, [r7, #4]
 8003798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800379a:	4b0b      	ldr	r3, [pc, #44]	; (80037c8 <HAL_MspInit+0x4c>)
 800379c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379e:	4a0a      	ldr	r2, [pc, #40]	; (80037c8 <HAL_MspInit+0x4c>)
 80037a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a4:	6593      	str	r3, [r2, #88]	; 0x58
 80037a6:	4b08      	ldr	r3, [pc, #32]	; (80037c8 <HAL_MspInit+0x4c>)
 80037a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ae:	603b      	str	r3, [r7, #0]
 80037b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80037b2:	2200      	movs	r2, #0
 80037b4:	210f      	movs	r1, #15
 80037b6:	f06f 0001 	mvn.w	r0, #1
 80037ba:	f001 ff63 	bl	8005684 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037be:	bf00      	nop
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40021000 	.word	0x40021000

080037cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b08c      	sub	sp, #48	; 0x30
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80037d4:	2300      	movs	r3, #0
 80037d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80037d8:	2300      	movs	r3, #0
 80037da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80037dc:	4b2c      	ldr	r3, [pc, #176]	; (8003890 <HAL_InitTick+0xc4>)
 80037de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037e0:	4a2b      	ldr	r2, [pc, #172]	; (8003890 <HAL_InitTick+0xc4>)
 80037e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80037e6:	6613      	str	r3, [r2, #96]	; 0x60
 80037e8:	4b29      	ldr	r3, [pc, #164]	; (8003890 <HAL_InitTick+0xc4>)
 80037ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037f0:	60bb      	str	r3, [r7, #8]
 80037f2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80037f4:	f107 020c 	add.w	r2, r7, #12
 80037f8:	f107 0310 	add.w	r3, r7, #16
 80037fc:	4611      	mov	r1, r2
 80037fe:	4618      	mov	r0, r3
 8003800:	f005 fd30 	bl	8009264 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003804:	f005 fd18 	bl	8009238 <HAL_RCC_GetPCLK2Freq>
 8003808:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800380a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380c:	4a21      	ldr	r2, [pc, #132]	; (8003894 <HAL_InitTick+0xc8>)
 800380e:	fba2 2303 	umull	r2, r3, r2, r3
 8003812:	0c9b      	lsrs	r3, r3, #18
 8003814:	3b01      	subs	r3, #1
 8003816:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003818:	4b1f      	ldr	r3, [pc, #124]	; (8003898 <HAL_InitTick+0xcc>)
 800381a:	4a20      	ldr	r2, [pc, #128]	; (800389c <HAL_InitTick+0xd0>)
 800381c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800381e:	4b1e      	ldr	r3, [pc, #120]	; (8003898 <HAL_InitTick+0xcc>)
 8003820:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003824:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003826:	4a1c      	ldr	r2, [pc, #112]	; (8003898 <HAL_InitTick+0xcc>)
 8003828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800382c:	4b1a      	ldr	r3, [pc, #104]	; (8003898 <HAL_InitTick+0xcc>)
 800382e:	2200      	movs	r2, #0
 8003830:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003832:	4b19      	ldr	r3, [pc, #100]	; (8003898 <HAL_InitTick+0xcc>)
 8003834:	2200      	movs	r2, #0
 8003836:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8003838:	4817      	ldr	r0, [pc, #92]	; (8003898 <HAL_InitTick+0xcc>)
 800383a:	f005 ffd9 	bl	80097f0 <HAL_TIM_Base_Init>
 800383e:	4603      	mov	r3, r0
 8003840:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8003844:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003848:	2b00      	cmp	r3, #0
 800384a:	d11b      	bne.n	8003884 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800384c:	4812      	ldr	r0, [pc, #72]	; (8003898 <HAL_InitTick+0xcc>)
 800384e:	f006 f831 	bl	80098b4 <HAL_TIM_Base_Start_IT>
 8003852:	4603      	mov	r3, r0
 8003854:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8003858:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800385c:	2b00      	cmp	r3, #0
 800385e:	d111      	bne.n	8003884 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003860:	2019      	movs	r0, #25
 8003862:	f001 ff29 	bl	80056b8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b0f      	cmp	r3, #15
 800386a:	d808      	bhi.n	800387e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800386c:	2200      	movs	r2, #0
 800386e:	6879      	ldr	r1, [r7, #4]
 8003870:	2019      	movs	r0, #25
 8003872:	f001 ff07 	bl	8005684 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003876:	4a0a      	ldr	r2, [pc, #40]	; (80038a0 <HAL_InitTick+0xd4>)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6013      	str	r3, [r2, #0]
 800387c:	e002      	b.n	8003884 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003884:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003888:	4618      	mov	r0, r3
 800388a:	3730      	adds	r7, #48	; 0x30
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	40021000 	.word	0x40021000
 8003894:	431bde83 	.word	0x431bde83
 8003898:	20000898 	.word	0x20000898
 800389c:	40012c00 	.word	0x40012c00
 80038a0:	20000008 	.word	0x20000008

080038a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80038a8:	e7fe      	b.n	80038a8 <NMI_Handler+0x4>

080038aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038aa:	b480      	push	{r7}
 80038ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038ae:	e7fe      	b.n	80038ae <HardFault_Handler+0x4>

080038b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038b4:	e7fe      	b.n	80038b4 <MemManage_Handler+0x4>

080038b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038b6:	b480      	push	{r7}
 80038b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038ba:	e7fe      	b.n	80038ba <BusFault_Handler+0x4>

080038bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038c0:	e7fe      	b.n	80038c0 <UsageFault_Handler+0x4>

080038c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038c2:	b480      	push	{r7}
 80038c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038c6:	bf00      	nop
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80038d4:	4802      	ldr	r0, [pc, #8]	; (80038e0 <DMA1_Channel1_IRQHandler+0x10>)
 80038d6:	f002 f8e0 	bl	8005a9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80038da:	bf00      	nop
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	20000278 	.word	0x20000278

080038e4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80038e8:	4802      	ldr	r0, [pc, #8]	; (80038f4 <USB_LP_IRQHandler+0x10>)
 80038ea:	f003 fafd 	bl	8006ee8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80038ee:	bf00      	nop
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	20005114 	.word	0x20005114

080038f8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80038fc:	4802      	ldr	r0, [pc, #8]	; (8003908 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80038fe:	f006 f9bb 	bl	8009c78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003902:	bf00      	nop
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	20000898 	.word	0x20000898

0800390c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_IT_Pin);
 8003910:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003914:	f002 fbc4 	bl	80060a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  BNO055_ClearIntFlag(&hi2c2);
 8003918:	4805      	ldr	r0, [pc, #20]	; (8003930 <EXTI15_10_IRQHandler+0x24>)
 800391a:	f7fe fa40 	bl	8001d9e <BNO055_ClearIntFlag>
  xSemaphoreGiveFromISR(HG_PROTECTION_SEMHandle,1);
 800391e:	4b05      	ldr	r3, [pc, #20]	; (8003934 <EXTI15_10_IRQHandler+0x28>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2101      	movs	r1, #1
 8003924:	4618      	mov	r0, r3
 8003926:	f00d fb09 	bl	8010f3c <xQueueGiveFromISR>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800392a:	bf00      	nop
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	20000370 	.word	0x20000370
 8003934:	2000036c 	.word	0x2000036c

08003938 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800393c:	4805      	ldr	r0, [pc, #20]	; (8003954 <UART4_IRQHandler+0x1c>)
 800393e:	f007 f9d1 	bl	800ace4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  xSemaphoreGiveFromISR(GPS_UART_SemaphoreHandle,pdFALSE);
 8003942:	4b05      	ldr	r3, [pc, #20]	; (8003958 <UART4_IRQHandler+0x20>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2100      	movs	r1, #0
 8003948:	4618      	mov	r0, r3
 800394a:	f00d faf7 	bl	8010f3c <xQueueGiveFromISR>

  /* USER CODE END UART4_IRQn 1 */
}
 800394e:	bf00      	nop
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	200009c8 	.word	0x200009c8
 8003958:	20000368 	.word	0x20000368

0800395c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003960:	4802      	ldr	r0, [pc, #8]	; (800396c <UART5_IRQHandler+0x10>)
 8003962:	f007 f9bf 	bl	800ace4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003966:	bf00      	nop
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	20000a58 	.word	0x20000a58

08003970 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003974:	4b08      	ldr	r3, [pc, #32]	; (8003998 <SystemInit+0x28>)
 8003976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397a:	4a07      	ldr	r2, [pc, #28]	; (8003998 <SystemInit+0x28>)
 800397c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003980:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8003984:	4b04      	ldr	r3, [pc, #16]	; (8003998 <SystemInit+0x28>)
 8003986:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800398a:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800398c:	bf00      	nop
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	e000ed00 	.word	0xe000ed00

0800399c <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b08a      	sub	sp, #40	; 0x28
 80039a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039a2:	f107 031c 	add.w	r3, r7, #28
 80039a6:	2200      	movs	r2, #0
 80039a8:	601a      	str	r2, [r3, #0]
 80039aa:	605a      	str	r2, [r3, #4]
 80039ac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80039ae:	463b      	mov	r3, r7
 80039b0:	2200      	movs	r2, #0
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	605a      	str	r2, [r3, #4]
 80039b6:	609a      	str	r2, [r3, #8]
 80039b8:	60da      	str	r2, [r3, #12]
 80039ba:	611a      	str	r2, [r3, #16]
 80039bc:	615a      	str	r2, [r3, #20]
 80039be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80039c0:	4b20      	ldr	r3, [pc, #128]	; (8003a44 <MX_TIM2_Init+0xa8>)
 80039c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80039c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80039c8:	4b1e      	ldr	r3, [pc, #120]	; (8003a44 <MX_TIM2_Init+0xa8>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039ce:	4b1d      	ldr	r3, [pc, #116]	; (8003a44 <MX_TIM2_Init+0xa8>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1440000;
 80039d4:	4b1b      	ldr	r3, [pc, #108]	; (8003a44 <MX_TIM2_Init+0xa8>)
 80039d6:	4a1c      	ldr	r2, [pc, #112]	; (8003a48 <MX_TIM2_Init+0xac>)
 80039d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039da:	4b1a      	ldr	r3, [pc, #104]	; (8003a44 <MX_TIM2_Init+0xa8>)
 80039dc:	2200      	movs	r2, #0
 80039de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039e0:	4b18      	ldr	r3, [pc, #96]	; (8003a44 <MX_TIM2_Init+0xa8>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80039e6:	4817      	ldr	r0, [pc, #92]	; (8003a44 <MX_TIM2_Init+0xa8>)
 80039e8:	f005 ffdc 	bl	80099a4 <HAL_TIM_PWM_Init>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80039f2:	f7ff fbeb 	bl	80031cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039f6:	2300      	movs	r3, #0
 80039f8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039fa:	2300      	movs	r3, #0
 80039fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80039fe:	f107 031c 	add.w	r3, r7, #28
 8003a02:	4619      	mov	r1, r3
 8003a04:	480f      	ldr	r0, [pc, #60]	; (8003a44 <MX_TIM2_Init+0xa8>)
 8003a06:	f006 ffeb 	bl	800a9e0 <HAL_TIMEx_MasterConfigSynchronization>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8003a10:	f7ff fbdc 	bl	80031cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a14:	2360      	movs	r3, #96	; 0x60
 8003a16:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a20:	2300      	movs	r3, #0
 8003a22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003a24:	463b      	mov	r3, r7
 8003a26:	2208      	movs	r2, #8
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4806      	ldr	r0, [pc, #24]	; (8003a44 <MX_TIM2_Init+0xa8>)
 8003a2c:	f006 faa4 	bl	8009f78 <HAL_TIM_PWM_ConfigChannel>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8003a36:	f7ff fbc9 	bl	80031cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003a3a:	bf00      	nop
 8003a3c:	3728      	adds	r7, #40	; 0x28
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	200008e4 	.word	0x200008e4
 8003a48:	0015f900 	.word	0x0015f900

08003a4c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b08a      	sub	sp, #40	; 0x28
 8003a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a52:	f107 031c 	add.w	r3, r7, #28
 8003a56:	2200      	movs	r2, #0
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	605a      	str	r2, [r3, #4]
 8003a5c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a5e:	463b      	mov	r3, r7
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	605a      	str	r2, [r3, #4]
 8003a66:	609a      	str	r2, [r3, #8]
 8003a68:	60da      	str	r2, [r3, #12]
 8003a6a:	611a      	str	r2, [r3, #16]
 8003a6c:	615a      	str	r2, [r3, #20]
 8003a6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003a70:	4b21      	ldr	r3, [pc, #132]	; (8003af8 <MX_TIM3_Init+0xac>)
 8003a72:	4a22      	ldr	r2, [pc, #136]	; (8003afc <MX_TIM3_Init+0xb0>)
 8003a74:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 50;
 8003a76:	4b20      	ldr	r3, [pc, #128]	; (8003af8 <MX_TIM3_Init+0xac>)
 8003a78:	2232      	movs	r2, #50	; 0x32
 8003a7a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a7c:	4b1e      	ldr	r3, [pc, #120]	; (8003af8 <MX_TIM3_Init+0xac>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7200;
 8003a82:	4b1d      	ldr	r3, [pc, #116]	; (8003af8 <MX_TIM3_Init+0xac>)
 8003a84:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8003a88:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a8a:	4b1b      	ldr	r3, [pc, #108]	; (8003af8 <MX_TIM3_Init+0xac>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a90:	4b19      	ldr	r3, [pc, #100]	; (8003af8 <MX_TIM3_Init+0xac>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003a96:	4818      	ldr	r0, [pc, #96]	; (8003af8 <MX_TIM3_Init+0xac>)
 8003a98:	f005 ff84 	bl	80099a4 <HAL_TIM_PWM_Init>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8003aa2:	f7ff fb93 	bl	80031cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003aae:	f107 031c 	add.w	r3, r7, #28
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4810      	ldr	r0, [pc, #64]	; (8003af8 <MX_TIM3_Init+0xac>)
 8003ab6:	f006 ff93 	bl	800a9e0 <HAL_TIMEx_MasterConfigSynchronization>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8003ac0:	f7ff fb84 	bl	80031cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ac4:	2360      	movs	r3, #96	; 0x60
 8003ac6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003acc:	2300      	movs	r3, #0
 8003ace:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ad4:	463b      	mov	r3, r7
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	4619      	mov	r1, r3
 8003ada:	4807      	ldr	r0, [pc, #28]	; (8003af8 <MX_TIM3_Init+0xac>)
 8003adc:	f006 fa4c 	bl	8009f78 <HAL_TIM_PWM_ConfigChannel>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8003ae6:	f7ff fb71 	bl	80031cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003aea:	4803      	ldr	r0, [pc, #12]	; (8003af8 <MX_TIM3_Init+0xac>)
 8003aec:	f000 f8c2 	bl	8003c74 <HAL_TIM_MspPostInit>

}
 8003af0:	bf00      	nop
 8003af2:	3728      	adds	r7, #40	; 0x28
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	20000930 	.word	0x20000930
 8003afc:	40000400 	.word	0x40000400

08003b00 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b08a      	sub	sp, #40	; 0x28
 8003b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b06:	f107 031c 	add.w	r3, r7, #28
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	601a      	str	r2, [r3, #0]
 8003b0e:	605a      	str	r2, [r3, #4]
 8003b10:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b12:	463b      	mov	r3, r7
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	605a      	str	r2, [r3, #4]
 8003b1a:	609a      	str	r2, [r3, #8]
 8003b1c:	60da      	str	r2, [r3, #12]
 8003b1e:	611a      	str	r2, [r3, #16]
 8003b20:	615a      	str	r2, [r3, #20]
 8003b22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003b24:	4b2e      	ldr	r3, [pc, #184]	; (8003be0 <MX_TIM4_Init+0xe0>)
 8003b26:	4a2f      	ldr	r2, [pc, #188]	; (8003be4 <MX_TIM4_Init+0xe4>)
 8003b28:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 50;
 8003b2a:	4b2d      	ldr	r3, [pc, #180]	; (8003be0 <MX_TIM4_Init+0xe0>)
 8003b2c:	2232      	movs	r2, #50	; 0x32
 8003b2e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b30:	4b2b      	ldr	r3, [pc, #172]	; (8003be0 <MX_TIM4_Init+0xe0>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000;
 8003b36:	4b2a      	ldr	r3, [pc, #168]	; (8003be0 <MX_TIM4_Init+0xe0>)
 8003b38:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003b3c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b3e:	4b28      	ldr	r3, [pc, #160]	; (8003be0 <MX_TIM4_Init+0xe0>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b44:	4b26      	ldr	r3, [pc, #152]	; (8003be0 <MX_TIM4_Init+0xe0>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003b4a:	4825      	ldr	r0, [pc, #148]	; (8003be0 <MX_TIM4_Init+0xe0>)
 8003b4c:	f005 ff2a 	bl	80099a4 <HAL_TIM_PWM_Init>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8003b56:	f7ff fb39 	bl	80031cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003b62:	f107 031c 	add.w	r3, r7, #28
 8003b66:	4619      	mov	r1, r3
 8003b68:	481d      	ldr	r0, [pc, #116]	; (8003be0 <MX_TIM4_Init+0xe0>)
 8003b6a:	f006 ff39 	bl	800a9e0 <HAL_TIMEx_MasterConfigSynchronization>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d001      	beq.n	8003b78 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8003b74:	f7ff fb2a 	bl	80031cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b78:	2360      	movs	r3, #96	; 0x60
 8003b7a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2880;
 8003b7c:	f44f 6334 	mov.w	r3, #2880	; 0xb40
 8003b80:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b82:	2300      	movs	r3, #0
 8003b84:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b86:	2300      	movs	r3, #0
 8003b88:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b8a:	463b      	mov	r3, r7
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	4619      	mov	r1, r3
 8003b90:	4813      	ldr	r0, [pc, #76]	; (8003be0 <MX_TIM4_Init+0xe0>)
 8003b92:	f006 f9f1 	bl	8009f78 <HAL_TIM_PWM_ConfigChannel>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8003b9c:	f7ff fb16 	bl	80031cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003ba0:	463b      	mov	r3, r7
 8003ba2:	2204      	movs	r2, #4
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	480e      	ldr	r0, [pc, #56]	; (8003be0 <MX_TIM4_Init+0xe0>)
 8003ba8:	f006 f9e6 	bl	8009f78 <HAL_TIM_PWM_ConfigChannel>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8003bb2:	f7ff fb0b 	bl	80031cc <Error_Handler>
  }
  sConfigOC.Pulse = 6000;
 8003bb6:	f241 7370 	movw	r3, #6000	; 0x1770
 8003bba:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003bbc:	463b      	mov	r3, r7
 8003bbe:	220c      	movs	r2, #12
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4807      	ldr	r0, [pc, #28]	; (8003be0 <MX_TIM4_Init+0xe0>)
 8003bc4:	f006 f9d8 	bl	8009f78 <HAL_TIM_PWM_ConfigChannel>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8003bce:	f7ff fafd 	bl	80031cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003bd2:	4803      	ldr	r0, [pc, #12]	; (8003be0 <MX_TIM4_Init+0xe0>)
 8003bd4:	f000 f84e 	bl	8003c74 <HAL_TIM_MspPostInit>

}
 8003bd8:	bf00      	nop
 8003bda:	3728      	adds	r7, #40	; 0x28
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	2000097c 	.word	0x2000097c
 8003be4:	40000800 	.word	0x40000800

08003be8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b087      	sub	sp, #28
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf8:	d10c      	bne.n	8003c14 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003bfa:	4b1b      	ldr	r3, [pc, #108]	; (8003c68 <HAL_TIM_PWM_MspInit+0x80>)
 8003bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfe:	4a1a      	ldr	r2, [pc, #104]	; (8003c68 <HAL_TIM_PWM_MspInit+0x80>)
 8003c00:	f043 0301 	orr.w	r3, r3, #1
 8003c04:	6593      	str	r3, [r2, #88]	; 0x58
 8003c06:	4b18      	ldr	r3, [pc, #96]	; (8003c68 <HAL_TIM_PWM_MspInit+0x80>)
 8003c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	617b      	str	r3, [r7, #20]
 8003c10:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003c12:	e022      	b.n	8003c5a <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM3)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a14      	ldr	r2, [pc, #80]	; (8003c6c <HAL_TIM_PWM_MspInit+0x84>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d10c      	bne.n	8003c38 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003c1e:	4b12      	ldr	r3, [pc, #72]	; (8003c68 <HAL_TIM_PWM_MspInit+0x80>)
 8003c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c22:	4a11      	ldr	r2, [pc, #68]	; (8003c68 <HAL_TIM_PWM_MspInit+0x80>)
 8003c24:	f043 0302 	orr.w	r3, r3, #2
 8003c28:	6593      	str	r3, [r2, #88]	; 0x58
 8003c2a:	4b0f      	ldr	r3, [pc, #60]	; (8003c68 <HAL_TIM_PWM_MspInit+0x80>)
 8003c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	613b      	str	r3, [r7, #16]
 8003c34:	693b      	ldr	r3, [r7, #16]
}
 8003c36:	e010      	b.n	8003c5a <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM4)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a0c      	ldr	r2, [pc, #48]	; (8003c70 <HAL_TIM_PWM_MspInit+0x88>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d10b      	bne.n	8003c5a <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003c42:	4b09      	ldr	r3, [pc, #36]	; (8003c68 <HAL_TIM_PWM_MspInit+0x80>)
 8003c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c46:	4a08      	ldr	r2, [pc, #32]	; (8003c68 <HAL_TIM_PWM_MspInit+0x80>)
 8003c48:	f043 0304 	orr.w	r3, r3, #4
 8003c4c:	6593      	str	r3, [r2, #88]	; 0x58
 8003c4e:	4b06      	ldr	r3, [pc, #24]	; (8003c68 <HAL_TIM_PWM_MspInit+0x80>)
 8003c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c52:	f003 0304 	and.w	r3, r3, #4
 8003c56:	60fb      	str	r3, [r7, #12]
 8003c58:	68fb      	ldr	r3, [r7, #12]
}
 8003c5a:	bf00      	nop
 8003c5c:	371c      	adds	r7, #28
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	40000400 	.word	0x40000400
 8003c70:	40000800 	.word	0x40000800

08003c74 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b08a      	sub	sp, #40	; 0x28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c7c:	f107 0314 	add.w	r3, r7, #20
 8003c80:	2200      	movs	r2, #0
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	605a      	str	r2, [r3, #4]
 8003c86:	609a      	str	r2, [r3, #8]
 8003c88:	60da      	str	r2, [r3, #12]
 8003c8a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a22      	ldr	r2, [pc, #136]	; (8003d1c <HAL_TIM_MspPostInit+0xa8>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d11c      	bne.n	8003cd0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c96:	4b22      	ldr	r3, [pc, #136]	; (8003d20 <HAL_TIM_MspPostInit+0xac>)
 8003c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c9a:	4a21      	ldr	r2, [pc, #132]	; (8003d20 <HAL_TIM_MspPostInit+0xac>)
 8003c9c:	f043 0304 	orr.w	r3, r3, #4
 8003ca0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ca2:	4b1f      	ldr	r3, [pc, #124]	; (8003d20 <HAL_TIM_MspPostInit+0xac>)
 8003ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ca6:	f003 0304 	and.w	r3, r3, #4
 8003caa:	613b      	str	r3, [r7, #16]
 8003cac:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003cae:	2340      	movs	r3, #64	; 0x40
 8003cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cc2:	f107 0314 	add.w	r3, r7, #20
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	4816      	ldr	r0, [pc, #88]	; (8003d24 <HAL_TIM_MspPostInit+0xb0>)
 8003cca:	f002 f835 	bl	8005d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003cce:	e021      	b.n	8003d14 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM4)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a14      	ldr	r2, [pc, #80]	; (8003d28 <HAL_TIM_MspPostInit+0xb4>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d11c      	bne.n	8003d14 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cda:	4b11      	ldr	r3, [pc, #68]	; (8003d20 <HAL_TIM_MspPostInit+0xac>)
 8003cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cde:	4a10      	ldr	r2, [pc, #64]	; (8003d20 <HAL_TIM_MspPostInit+0xac>)
 8003ce0:	f043 0302 	orr.w	r3, r3, #2
 8003ce4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ce6:	4b0e      	ldr	r3, [pc, #56]	; (8003d20 <HAL_TIM_MspPostInit+0xac>)
 8003ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	60fb      	str	r3, [r7, #12]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8003cf2:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8003cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d00:	2300      	movs	r3, #0
 8003d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003d04:	2302      	movs	r3, #2
 8003d06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d08:	f107 0314 	add.w	r3, r7, #20
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	4807      	ldr	r0, [pc, #28]	; (8003d2c <HAL_TIM_MspPostInit+0xb8>)
 8003d10:	f002 f812 	bl	8005d38 <HAL_GPIO_Init>
}
 8003d14:	bf00      	nop
 8003d16:	3728      	adds	r7, #40	; 0x28
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	40000400 	.word	0x40000400
 8003d20:	40021000 	.word	0x40021000
 8003d24:	48000800 	.word	0x48000800
 8003d28:	40000800 	.word	0x40000800
 8003d2c:	48000400 	.word	0x48000400

08003d30 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart5;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003d34:	4b22      	ldr	r3, [pc, #136]	; (8003dc0 <MX_UART4_Init+0x90>)
 8003d36:	4a23      	ldr	r2, [pc, #140]	; (8003dc4 <MX_UART4_Init+0x94>)
 8003d38:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8003d3a:	4b21      	ldr	r3, [pc, #132]	; (8003dc0 <MX_UART4_Init+0x90>)
 8003d3c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003d40:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003d42:	4b1f      	ldr	r3, [pc, #124]	; (8003dc0 <MX_UART4_Init+0x90>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003d48:	4b1d      	ldr	r3, [pc, #116]	; (8003dc0 <MX_UART4_Init+0x90>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003d4e:	4b1c      	ldr	r3, [pc, #112]	; (8003dc0 <MX_UART4_Init+0x90>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003d54:	4b1a      	ldr	r3, [pc, #104]	; (8003dc0 <MX_UART4_Init+0x90>)
 8003d56:	220c      	movs	r2, #12
 8003d58:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d5a:	4b19      	ldr	r3, [pc, #100]	; (8003dc0 <MX_UART4_Init+0x90>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d60:	4b17      	ldr	r3, [pc, #92]	; (8003dc0 <MX_UART4_Init+0x90>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003d66:	4b16      	ldr	r3, [pc, #88]	; (8003dc0 <MX_UART4_Init+0x90>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003d6c:	4b14      	ldr	r3, [pc, #80]	; (8003dc0 <MX_UART4_Init+0x90>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003d72:	4b13      	ldr	r3, [pc, #76]	; (8003dc0 <MX_UART4_Init+0x90>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003d78:	4811      	ldr	r0, [pc, #68]	; (8003dc0 <MX_UART4_Init+0x90>)
 8003d7a:	f006 ff0d 	bl	800ab98 <HAL_UART_Init>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8003d84:	f7ff fa22 	bl	80031cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003d88:	2100      	movs	r1, #0
 8003d8a:	480d      	ldr	r0, [pc, #52]	; (8003dc0 <MX_UART4_Init+0x90>)
 8003d8c:	f008 fe23 	bl	800c9d6 <HAL_UARTEx_SetTxFifoThreshold>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8003d96:	f7ff fa19 	bl	80031cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	4808      	ldr	r0, [pc, #32]	; (8003dc0 <MX_UART4_Init+0x90>)
 8003d9e:	f008 fe58 	bl	800ca52 <HAL_UARTEx_SetRxFifoThreshold>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8003da8:	f7ff fa10 	bl	80031cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8003dac:	4804      	ldr	r0, [pc, #16]	; (8003dc0 <MX_UART4_Init+0x90>)
 8003dae:	f008 fdd9 	bl	800c964 <HAL_UARTEx_DisableFifoMode>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8003db8:	f7ff fa08 	bl	80031cc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003dbc:	bf00      	nop
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	200009c8 	.word	0x200009c8
 8003dc4:	40004c00 	.word	0x40004c00

08003dc8 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003dcc:	4b22      	ldr	r3, [pc, #136]	; (8003e58 <MX_UART5_Init+0x90>)
 8003dce:	4a23      	ldr	r2, [pc, #140]	; (8003e5c <MX_UART5_Init+0x94>)
 8003dd0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8003dd2:	4b21      	ldr	r3, [pc, #132]	; (8003e58 <MX_UART5_Init+0x90>)
 8003dd4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003dd8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003dda:	4b1f      	ldr	r3, [pc, #124]	; (8003e58 <MX_UART5_Init+0x90>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003de0:	4b1d      	ldr	r3, [pc, #116]	; (8003e58 <MX_UART5_Init+0x90>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003de6:	4b1c      	ldr	r3, [pc, #112]	; (8003e58 <MX_UART5_Init+0x90>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003dec:	4b1a      	ldr	r3, [pc, #104]	; (8003e58 <MX_UART5_Init+0x90>)
 8003dee:	220c      	movs	r2, #12
 8003df0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003df2:	4b19      	ldr	r3, [pc, #100]	; (8003e58 <MX_UART5_Init+0x90>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003df8:	4b17      	ldr	r3, [pc, #92]	; (8003e58 <MX_UART5_Init+0x90>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003dfe:	4b16      	ldr	r3, [pc, #88]	; (8003e58 <MX_UART5_Init+0x90>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003e04:	4b14      	ldr	r3, [pc, #80]	; (8003e58 <MX_UART5_Init+0x90>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003e0a:	4b13      	ldr	r3, [pc, #76]	; (8003e58 <MX_UART5_Init+0x90>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003e10:	4811      	ldr	r0, [pc, #68]	; (8003e58 <MX_UART5_Init+0x90>)
 8003e12:	f006 fec1 	bl	800ab98 <HAL_UART_Init>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d001      	beq.n	8003e20 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8003e1c:	f7ff f9d6 	bl	80031cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003e20:	2100      	movs	r1, #0
 8003e22:	480d      	ldr	r0, [pc, #52]	; (8003e58 <MX_UART5_Init+0x90>)
 8003e24:	f008 fdd7 	bl	800c9d6 <HAL_UARTEx_SetTxFifoThreshold>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8003e2e:	f7ff f9cd 	bl	80031cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003e32:	2100      	movs	r1, #0
 8003e34:	4808      	ldr	r0, [pc, #32]	; (8003e58 <MX_UART5_Init+0x90>)
 8003e36:	f008 fe0c 	bl	800ca52 <HAL_UARTEx_SetRxFifoThreshold>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8003e40:	f7ff f9c4 	bl	80031cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8003e44:	4804      	ldr	r0, [pc, #16]	; (8003e58 <MX_UART5_Init+0x90>)
 8003e46:	f008 fd8d 	bl	800c964 <HAL_UARTEx_DisableFifoMode>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8003e50:	f7ff f9bc 	bl	80031cc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003e54:	bf00      	nop
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	20000a58 	.word	0x20000a58
 8003e5c:	40005000 	.word	0x40005000

08003e60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b0a2      	sub	sp, #136	; 0x88
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e68:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	601a      	str	r2, [r3, #0]
 8003e70:	605a      	str	r2, [r3, #4]
 8003e72:	609a      	str	r2, [r3, #8]
 8003e74:	60da      	str	r2, [r3, #12]
 8003e76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e78:	f107 0320 	add.w	r3, r7, #32
 8003e7c:	2254      	movs	r2, #84	; 0x54
 8003e7e:	2100      	movs	r1, #0
 8003e80:	4618      	mov	r0, r3
 8003e82:	f00f fb77 	bl	8013574 <memset>
  if(uartHandle->Instance==UART4)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a56      	ldr	r2, [pc, #344]	; (8003fe4 <HAL_UART_MspInit+0x184>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d141      	bne.n	8003f14 <HAL_UART_MspInit+0xb4>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003e90:	2308      	movs	r3, #8
 8003e92:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003e94:	2300      	movs	r3, #0
 8003e96:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e98:	f107 0320 	add.w	r3, r7, #32
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f005 fa59 	bl	8009354 <HAL_RCCEx_PeriphCLKConfig>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003ea8:	f7ff f990 	bl	80031cc <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003eac:	4b4e      	ldr	r3, [pc, #312]	; (8003fe8 <HAL_UART_MspInit+0x188>)
 8003eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb0:	4a4d      	ldr	r2, [pc, #308]	; (8003fe8 <HAL_UART_MspInit+0x188>)
 8003eb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003eb6:	6593      	str	r3, [r2, #88]	; 0x58
 8003eb8:	4b4b      	ldr	r3, [pc, #300]	; (8003fe8 <HAL_UART_MspInit+0x188>)
 8003eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ebc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ec0:	61fb      	str	r3, [r7, #28]
 8003ec2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ec4:	4b48      	ldr	r3, [pc, #288]	; (8003fe8 <HAL_UART_MspInit+0x188>)
 8003ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ec8:	4a47      	ldr	r2, [pc, #284]	; (8003fe8 <HAL_UART_MspInit+0x188>)
 8003eca:	f043 0304 	orr.w	r3, r3, #4
 8003ece:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ed0:	4b45      	ldr	r3, [pc, #276]	; (8003fe8 <HAL_UART_MspInit+0x188>)
 8003ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ed4:	f003 0304 	and.w	r3, r3, #4
 8003ed8:	61bb      	str	r3, [r7, #24]
 8003eda:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003edc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003ee0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eea:	2300      	movs	r3, #0
 8003eec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8003ef0:	2305      	movs	r3, #5
 8003ef2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ef6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003efa:	4619      	mov	r1, r3
 8003efc:	483b      	ldr	r0, [pc, #236]	; (8003fec <HAL_UART_MspInit+0x18c>)
 8003efe:	f001 ff1b 	bl	8005d38 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8003f02:	2200      	movs	r2, #0
 8003f04:	2105      	movs	r1, #5
 8003f06:	2034      	movs	r0, #52	; 0x34
 8003f08:	f001 fbbc 	bl	8005684 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003f0c:	2034      	movs	r0, #52	; 0x34
 8003f0e:	f001 fbd3 	bl	80056b8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8003f12:	e063      	b.n	8003fdc <HAL_UART_MspInit+0x17c>
  else if(uartHandle->Instance==UART5)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a35      	ldr	r2, [pc, #212]	; (8003ff0 <HAL_UART_MspInit+0x190>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d15e      	bne.n	8003fdc <HAL_UART_MspInit+0x17c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8003f1e:	2310      	movs	r3, #16
 8003f20:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8003f22:	2300      	movs	r3, #0
 8003f24:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f26:	f107 0320 	add.w	r3, r7, #32
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f005 fa12 	bl	8009354 <HAL_RCCEx_PeriphCLKConfig>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <HAL_UART_MspInit+0xda>
      Error_Handler();
 8003f36:	f7ff f949 	bl	80031cc <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003f3a:	4b2b      	ldr	r3, [pc, #172]	; (8003fe8 <HAL_UART_MspInit+0x188>)
 8003f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f3e:	4a2a      	ldr	r2, [pc, #168]	; (8003fe8 <HAL_UART_MspInit+0x188>)
 8003f40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f44:	6593      	str	r3, [r2, #88]	; 0x58
 8003f46:	4b28      	ldr	r3, [pc, #160]	; (8003fe8 <HAL_UART_MspInit+0x188>)
 8003f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f4e:	617b      	str	r3, [r7, #20]
 8003f50:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f52:	4b25      	ldr	r3, [pc, #148]	; (8003fe8 <HAL_UART_MspInit+0x188>)
 8003f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f56:	4a24      	ldr	r2, [pc, #144]	; (8003fe8 <HAL_UART_MspInit+0x188>)
 8003f58:	f043 0304 	orr.w	r3, r3, #4
 8003f5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f5e:	4b22      	ldr	r3, [pc, #136]	; (8003fe8 <HAL_UART_MspInit+0x188>)
 8003f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f62:	f003 0304 	and.w	r3, r3, #4
 8003f66:	613b      	str	r3, [r7, #16]
 8003f68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f6a:	4b1f      	ldr	r3, [pc, #124]	; (8003fe8 <HAL_UART_MspInit+0x188>)
 8003f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f6e:	4a1e      	ldr	r2, [pc, #120]	; (8003fe8 <HAL_UART_MspInit+0x188>)
 8003f70:	f043 0308 	orr.w	r3, r3, #8
 8003f74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f76:	4b1c      	ldr	r3, [pc, #112]	; (8003fe8 <HAL_UART_MspInit+0x188>)
 8003f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f7a:	f003 0308 	and.w	r3, r3, #8
 8003f7e:	60fb      	str	r3, [r7, #12]
 8003f80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003f82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f86:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f88:	2302      	movs	r3, #2
 8003f8a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f90:	2300      	movs	r3, #0
 8003f92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8003f96:	2305      	movs	r3, #5
 8003f98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f9c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	4812      	ldr	r0, [pc, #72]	; (8003fec <HAL_UART_MspInit+0x18c>)
 8003fa4:	f001 fec8 	bl	8005d38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003fa8:	2304      	movs	r3, #4
 8003faa:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fac:	2302      	movs	r3, #2
 8003fae:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8003fba:	2305      	movs	r3, #5
 8003fbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003fc0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	480b      	ldr	r0, [pc, #44]	; (8003ff4 <HAL_UART_MspInit+0x194>)
 8003fc8:	f001 feb6 	bl	8005d38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8003fcc:	2200      	movs	r2, #0
 8003fce:	2105      	movs	r1, #5
 8003fd0:	2035      	movs	r0, #53	; 0x35
 8003fd2:	f001 fb57 	bl	8005684 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003fd6:	2035      	movs	r0, #53	; 0x35
 8003fd8:	f001 fb6e 	bl	80056b8 <HAL_NVIC_EnableIRQ>
}
 8003fdc:	bf00      	nop
 8003fde:	3788      	adds	r7, #136	; 0x88
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	40004c00 	.word	0x40004c00
 8003fe8:	40021000 	.word	0x40021000
 8003fec:	48000800 	.word	0x48000800
 8003ff0:	40005000 	.word	0x40005000
 8003ff4:	48000c00 	.word	0x48000c00

08003ff8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003ff8:	480d      	ldr	r0, [pc, #52]	; (8004030 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003ffa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ffc:	480d      	ldr	r0, [pc, #52]	; (8004034 <LoopForever+0x6>)
  ldr r1, =_edata
 8003ffe:	490e      	ldr	r1, [pc, #56]	; (8004038 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004000:	4a0e      	ldr	r2, [pc, #56]	; (800403c <LoopForever+0xe>)
  movs r3, #0
 8004002:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004004:	e002      	b.n	800400c <LoopCopyDataInit>

08004006 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004006:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004008:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800400a:	3304      	adds	r3, #4

0800400c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800400c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800400e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004010:	d3f9      	bcc.n	8004006 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004012:	4a0b      	ldr	r2, [pc, #44]	; (8004040 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004014:	4c0b      	ldr	r4, [pc, #44]	; (8004044 <LoopForever+0x16>)
  movs r3, #0
 8004016:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004018:	e001      	b.n	800401e <LoopFillZerobss>

0800401a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800401a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800401c:	3204      	adds	r2, #4

0800401e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800401e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004020:	d3fb      	bcc.n	800401a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004022:	f7ff fca5 	bl	8003970 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004026:	f00f fb09 	bl	801363c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800402a:	f7ff f831 	bl	8003090 <main>

0800402e <LoopForever>:

LoopForever:
    b LoopForever
 800402e:	e7fe      	b.n	800402e <LoopForever>
  ldr   r0, =_estack
 8004030:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004034:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004038:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 800403c:	080147b0 	.word	0x080147b0
  ldr r2, =_sbss
 8004040:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8004044:	20005768 	.word	0x20005768

08004048 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004048:	e7fe      	b.n	8004048 <ADC1_2_IRQHandler>

0800404a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b082      	sub	sp, #8
 800404e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004050:	2300      	movs	r3, #0
 8004052:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004054:	2003      	movs	r0, #3
 8004056:	f001 fb0a 	bl	800566e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800405a:	200f      	movs	r0, #15
 800405c:	f7ff fbb6 	bl	80037cc <HAL_InitTick>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d002      	beq.n	800406c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	71fb      	strb	r3, [r7, #7]
 800406a:	e001      	b.n	8004070 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800406c:	f7ff fb86 	bl	800377c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004070:	79fb      	ldrb	r3, [r7, #7]

}
 8004072:	4618      	mov	r0, r3
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
	...

0800407c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004080:	4b05      	ldr	r3, [pc, #20]	; (8004098 <HAL_IncTick+0x1c>)
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	4b05      	ldr	r3, [pc, #20]	; (800409c <HAL_IncTick+0x20>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4413      	add	r3, r2
 800408a:	4a03      	ldr	r2, [pc, #12]	; (8004098 <HAL_IncTick+0x1c>)
 800408c:	6013      	str	r3, [r2, #0]
}
 800408e:	bf00      	nop
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	20000ae8 	.word	0x20000ae8
 800409c:	2000000c 	.word	0x2000000c

080040a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
  return uwTick;
 80040a4:	4b03      	ldr	r3, [pc, #12]	; (80040b4 <HAL_GetTick+0x14>)
 80040a6:	681b      	ldr	r3, [r3, #0]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	20000ae8 	.word	0x20000ae8

080040b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040c0:	f7ff ffee 	bl	80040a0 <HAL_GetTick>
 80040c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d0:	d004      	beq.n	80040dc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80040d2:	4b09      	ldr	r3, [pc, #36]	; (80040f8 <HAL_Delay+0x40>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	4413      	add	r3, r2
 80040da:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80040dc:	bf00      	nop
 80040de:	f7ff ffdf 	bl	80040a0 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d8f7      	bhi.n	80040de <HAL_Delay+0x26>
  {
  }
}
 80040ee:	bf00      	nop
 80040f0:	bf00      	nop
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	2000000c 	.word	0x2000000c

080040fc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	431a      	orrs	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	609a      	str	r2, [r3, #8]
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004122:	b480      	push	{r7}
 8004124:	b083      	sub	sp, #12
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
 800412a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	431a      	orrs	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	609a      	str	r2, [r3, #8]
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004158:	4618      	mov	r0, r3
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004164:	b480      	push	{r7}
 8004166:	b087      	sub	sp, #28
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
 8004170:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	3360      	adds	r3, #96	; 0x60
 8004176:	461a      	mov	r2, r3
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	4b08      	ldr	r3, [pc, #32]	; (80041a8 <LL_ADC_SetOffset+0x44>)
 8004186:	4013      	ands	r3, r2
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	4313      	orrs	r3, r2
 8004194:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800419c:	bf00      	nop
 800419e:	371c      	adds	r7, #28
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	03fff000 	.word	0x03fff000

080041ac <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	3360      	adds	r3, #96	; 0x60
 80041ba:	461a      	mov	r2, r3
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	3360      	adds	r3, #96	; 0x60
 80041e8:	461a      	mov	r2, r3
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	4413      	add	r3, r2
 80041f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	431a      	orrs	r2, r3
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004202:	bf00      	nop
 8004204:	371c      	adds	r7, #28
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800420e:	b480      	push	{r7}
 8004210:	b087      	sub	sp, #28
 8004212:	af00      	add	r7, sp, #0
 8004214:	60f8      	str	r0, [r7, #12]
 8004216:	60b9      	str	r1, [r7, #8]
 8004218:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	3360      	adds	r3, #96	; 0x60
 800421e:	461a      	mov	r2, r3
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	431a      	orrs	r2, r3
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004238:	bf00      	nop
 800423a:	371c      	adds	r7, #28
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004244:	b480      	push	{r7}
 8004246:	b087      	sub	sp, #28
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	3360      	adds	r3, #96	; 0x60
 8004254:	461a      	mov	r2, r3
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	4413      	add	r3, r2
 800425c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	431a      	orrs	r2, r3
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800426e:	bf00      	nop
 8004270:	371c      	adds	r7, #28
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800427a:	b480      	push	{r7}
 800427c:	b083      	sub	sp, #12
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
 8004282:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	431a      	orrs	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	615a      	str	r2, [r3, #20]
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80042b4:	2301      	movs	r3, #1
 80042b6:	e000      	b.n	80042ba <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b087      	sub	sp, #28
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	60f8      	str	r0, [r7, #12]
 80042ce:	60b9      	str	r1, [r7, #8]
 80042d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	3330      	adds	r3, #48	; 0x30
 80042d6:	461a      	mov	r2, r3
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	0a1b      	lsrs	r3, r3, #8
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	f003 030c 	and.w	r3, r3, #12
 80042e2:	4413      	add	r3, r2
 80042e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	f003 031f 	and.w	r3, r3, #31
 80042f0:	211f      	movs	r1, #31
 80042f2:	fa01 f303 	lsl.w	r3, r1, r3
 80042f6:	43db      	mvns	r3, r3
 80042f8:	401a      	ands	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	0e9b      	lsrs	r3, r3, #26
 80042fe:	f003 011f 	and.w	r1, r3, #31
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	f003 031f 	and.w	r3, r3, #31
 8004308:	fa01 f303 	lsl.w	r3, r1, r3
 800430c:	431a      	orrs	r2, r3
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004312:	bf00      	nop
 8004314:	371c      	adds	r7, #28
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800431e:	b480      	push	{r7}
 8004320:	b087      	sub	sp, #28
 8004322:	af00      	add	r7, sp, #0
 8004324:	60f8      	str	r0, [r7, #12]
 8004326:	60b9      	str	r1, [r7, #8]
 8004328:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	3314      	adds	r3, #20
 800432e:	461a      	mov	r2, r3
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	0e5b      	lsrs	r3, r3, #25
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	f003 0304 	and.w	r3, r3, #4
 800433a:	4413      	add	r3, r2
 800433c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	0d1b      	lsrs	r3, r3, #20
 8004346:	f003 031f 	and.w	r3, r3, #31
 800434a:	2107      	movs	r1, #7
 800434c:	fa01 f303 	lsl.w	r3, r1, r3
 8004350:	43db      	mvns	r3, r3
 8004352:	401a      	ands	r2, r3
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	0d1b      	lsrs	r3, r3, #20
 8004358:	f003 031f 	and.w	r3, r3, #31
 800435c:	6879      	ldr	r1, [r7, #4]
 800435e:	fa01 f303 	lsl.w	r3, r1, r3
 8004362:	431a      	orrs	r2, r3
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004368:	bf00      	nop
 800436a:	371c      	adds	r7, #28
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a0f      	ldr	r2, [pc, #60]	; (80043c0 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d10a      	bne.n	800439e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004394:	431a      	orrs	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 800439c:	e00a      	b.n	80043b4 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043aa:	43db      	mvns	r3, r3
 80043ac:	401a      	ands	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80043b4:	bf00      	nop
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr
 80043c0:	407f0000 	.word	0x407f0000

080043c4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f003 031f 	and.w	r3, r3, #31
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80043f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	6093      	str	r3, [r2, #8]
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004414:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004418:	d101      	bne.n	800441e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800441a:	2301      	movs	r3, #1
 800441c:	e000      	b.n	8004420 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800443c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004440:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004464:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004468:	d101      	bne.n	800446e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800446a:	2301      	movs	r3, #1
 800446c:	e000      	b.n	8004470 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800448c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004490:	f043 0201 	orr.w	r2, r3, #1
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d101      	bne.n	80044bc <LL_ADC_IsEnabled+0x18>
 80044b8:	2301      	movs	r3, #1
 80044ba:	e000      	b.n	80044be <LL_ADC_IsEnabled+0x1a>
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80044da:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80044de:	f043 0204 	orr.w	r2, r3, #4
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80044e6:	bf00      	nop
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b083      	sub	sp, #12
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f003 0304 	and.w	r3, r3, #4
 8004502:	2b04      	cmp	r3, #4
 8004504:	d101      	bne.n	800450a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004506:	2301      	movs	r3, #1
 8004508:	e000      	b.n	800450c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f003 0308 	and.w	r3, r3, #8
 8004528:	2b08      	cmp	r3, #8
 800452a:	d101      	bne.n	8004530 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800452c:	2301      	movs	r3, #1
 800452e:	e000      	b.n	8004532 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
	...

08004540 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004540:	b590      	push	{r4, r7, lr}
 8004542:	b089      	sub	sp, #36	; 0x24
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004548:	2300      	movs	r3, #0
 800454a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800454c:	2300      	movs	r3, #0
 800454e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e1af      	b.n	80048ba <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004564:	2b00      	cmp	r3, #0
 8004566:	d109      	bne.n	800457c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f7fc fd27 	bl	8000fbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4618      	mov	r0, r3
 8004582:	f7ff ff3f 	bl	8004404 <LL_ADC_IsDeepPowerDownEnabled>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d004      	beq.n	8004596 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4618      	mov	r0, r3
 8004592:	f7ff ff25 	bl	80043e0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4618      	mov	r0, r3
 800459c:	f7ff ff5a 	bl	8004454 <LL_ADC_IsInternalRegulatorEnabled>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d115      	bne.n	80045d2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7ff ff3e 	bl	800442c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045b0:	4b9f      	ldr	r3, [pc, #636]	; (8004830 <HAL_ADC_Init+0x2f0>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	099b      	lsrs	r3, r3, #6
 80045b6:	4a9f      	ldr	r2, [pc, #636]	; (8004834 <HAL_ADC_Init+0x2f4>)
 80045b8:	fba2 2303 	umull	r2, r3, r2, r3
 80045bc:	099b      	lsrs	r3, r3, #6
 80045be:	3301      	adds	r3, #1
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80045c4:	e002      	b.n	80045cc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	3b01      	subs	r3, #1
 80045ca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1f9      	bne.n	80045c6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7ff ff3c 	bl	8004454 <LL_ADC_IsInternalRegulatorEnabled>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10d      	bne.n	80045fe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e6:	f043 0210 	orr.w	r2, r3, #16
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045f2:	f043 0201 	orr.w	r2, r3, #1
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4618      	mov	r0, r3
 8004604:	f7ff ff75 	bl	80044f2 <LL_ADC_REG_IsConversionOngoing>
 8004608:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800460e:	f003 0310 	and.w	r3, r3, #16
 8004612:	2b00      	cmp	r3, #0
 8004614:	f040 8148 	bne.w	80048a8 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	2b00      	cmp	r3, #0
 800461c:	f040 8144 	bne.w	80048a8 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004624:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004628:	f043 0202 	orr.w	r2, r3, #2
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4618      	mov	r0, r3
 8004636:	f7ff ff35 	bl	80044a4 <LL_ADC_IsEnabled>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d141      	bne.n	80046c4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004648:	d004      	beq.n	8004654 <HAL_ADC_Init+0x114>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a7a      	ldr	r2, [pc, #488]	; (8004838 <HAL_ADC_Init+0x2f8>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d10f      	bne.n	8004674 <HAL_ADC_Init+0x134>
 8004654:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004658:	f7ff ff24 	bl	80044a4 <LL_ADC_IsEnabled>
 800465c:	4604      	mov	r4, r0
 800465e:	4876      	ldr	r0, [pc, #472]	; (8004838 <HAL_ADC_Init+0x2f8>)
 8004660:	f7ff ff20 	bl	80044a4 <LL_ADC_IsEnabled>
 8004664:	4603      	mov	r3, r0
 8004666:	4323      	orrs	r3, r4
 8004668:	2b00      	cmp	r3, #0
 800466a:	bf0c      	ite	eq
 800466c:	2301      	moveq	r3, #1
 800466e:	2300      	movne	r3, #0
 8004670:	b2db      	uxtb	r3, r3
 8004672:	e012      	b.n	800469a <HAL_ADC_Init+0x15a>
 8004674:	4871      	ldr	r0, [pc, #452]	; (800483c <HAL_ADC_Init+0x2fc>)
 8004676:	f7ff ff15 	bl	80044a4 <LL_ADC_IsEnabled>
 800467a:	4604      	mov	r4, r0
 800467c:	4870      	ldr	r0, [pc, #448]	; (8004840 <HAL_ADC_Init+0x300>)
 800467e:	f7ff ff11 	bl	80044a4 <LL_ADC_IsEnabled>
 8004682:	4603      	mov	r3, r0
 8004684:	431c      	orrs	r4, r3
 8004686:	486f      	ldr	r0, [pc, #444]	; (8004844 <HAL_ADC_Init+0x304>)
 8004688:	f7ff ff0c 	bl	80044a4 <LL_ADC_IsEnabled>
 800468c:	4603      	mov	r3, r0
 800468e:	4323      	orrs	r3, r4
 8004690:	2b00      	cmp	r3, #0
 8004692:	bf0c      	ite	eq
 8004694:	2301      	moveq	r3, #1
 8004696:	2300      	movne	r3, #0
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d012      	beq.n	80046c4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046a6:	d004      	beq.n	80046b2 <HAL_ADC_Init+0x172>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a62      	ldr	r2, [pc, #392]	; (8004838 <HAL_ADC_Init+0x2f8>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d101      	bne.n	80046b6 <HAL_ADC_Init+0x176>
 80046b2:	4a65      	ldr	r2, [pc, #404]	; (8004848 <HAL_ADC_Init+0x308>)
 80046b4:	e000      	b.n	80046b8 <HAL_ADC_Init+0x178>
 80046b6:	4a65      	ldr	r2, [pc, #404]	; (800484c <HAL_ADC_Init+0x30c>)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	4619      	mov	r1, r3
 80046be:	4610      	mov	r0, r2
 80046c0:	f7ff fd1c 	bl	80040fc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	7f5b      	ldrb	r3, [r3, #29]
 80046c8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80046ce:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80046d4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80046da:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80046e2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80046e4:	4313      	orrs	r3, r2
 80046e6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d106      	bne.n	8004700 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f6:	3b01      	subs	r3, #1
 80046f8:	045b      	lsls	r3, r3, #17
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004704:	2b00      	cmp	r3, #0
 8004706:	d009      	beq.n	800471c <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004714:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004716:	69ba      	ldr	r2, [r7, #24]
 8004718:	4313      	orrs	r3, r2
 800471a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	4b4b      	ldr	r3, [pc, #300]	; (8004850 <HAL_ADC_Init+0x310>)
 8004724:	4013      	ands	r3, r2
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	6812      	ldr	r2, [r2, #0]
 800472a:	69b9      	ldr	r1, [r7, #24]
 800472c:	430b      	orrs	r3, r1
 800472e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	430a      	orrs	r2, r1
 8004744:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4618      	mov	r0, r3
 800474c:	f7ff fed1 	bl	80044f2 <LL_ADC_REG_IsConversionOngoing>
 8004750:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4618      	mov	r0, r3
 8004758:	f7ff fede 	bl	8004518 <LL_ADC_INJ_IsConversionOngoing>
 800475c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d17f      	bne.n	8004864 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d17c      	bne.n	8004864 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800476e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004776:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004778:	4313      	orrs	r3, r2
 800477a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004786:	f023 0302 	bic.w	r3, r3, #2
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	6812      	ldr	r2, [r2, #0]
 800478e:	69b9      	ldr	r1, [r7, #24]
 8004790:	430b      	orrs	r3, r1
 8004792:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d017      	beq.n	80047cc <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	691a      	ldr	r2, [r3, #16]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80047aa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80047b4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80047b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	6911      	ldr	r1, [r2, #16]
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	6812      	ldr	r2, [r2, #0]
 80047c4:	430b      	orrs	r3, r1
 80047c6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80047ca:	e013      	b.n	80047f4 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	691a      	ldr	r2, [r3, #16]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80047da:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6812      	ldr	r2, [r2, #0]
 80047e8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80047ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80047f0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d12a      	bne.n	8004854 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004808:	f023 0304 	bic.w	r3, r3, #4
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004814:	4311      	orrs	r1, r2
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800481a:	4311      	orrs	r1, r2
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004820:	430a      	orrs	r2, r1
 8004822:	431a      	orrs	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f042 0201 	orr.w	r2, r2, #1
 800482c:	611a      	str	r2, [r3, #16]
 800482e:	e019      	b.n	8004864 <HAL_ADC_Init+0x324>
 8004830:	20000004 	.word	0x20000004
 8004834:	053e2d63 	.word	0x053e2d63
 8004838:	50000100 	.word	0x50000100
 800483c:	50000400 	.word	0x50000400
 8004840:	50000500 	.word	0x50000500
 8004844:	50000600 	.word	0x50000600
 8004848:	50000300 	.word	0x50000300
 800484c:	50000700 	.word	0x50000700
 8004850:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	691a      	ldr	r2, [r3, #16]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 0201 	bic.w	r2, r2, #1
 8004862:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	695b      	ldr	r3, [r3, #20]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d10c      	bne.n	8004886 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004872:	f023 010f 	bic.w	r1, r3, #15
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	1e5a      	subs	r2, r3, #1
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	430a      	orrs	r2, r1
 8004882:	631a      	str	r2, [r3, #48]	; 0x30
 8004884:	e007      	b.n	8004896 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f022 020f 	bic.w	r2, r2, #15
 8004894:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800489a:	f023 0303 	bic.w	r3, r3, #3
 800489e:	f043 0201 	orr.w	r2, r3, #1
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80048a6:	e007      	b.n	80048b8 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ac:	f043 0210 	orr.w	r2, r3, #16
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80048b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3724      	adds	r7, #36	; 0x24
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd90      	pop	{r4, r7, pc}
 80048c2:	bf00      	nop

080048c4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048d8:	d004      	beq.n	80048e4 <HAL_ADC_Start_DMA+0x20>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a5a      	ldr	r2, [pc, #360]	; (8004a48 <HAL_ADC_Start_DMA+0x184>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d101      	bne.n	80048e8 <HAL_ADC_Start_DMA+0x24>
 80048e4:	4b59      	ldr	r3, [pc, #356]	; (8004a4c <HAL_ADC_Start_DMA+0x188>)
 80048e6:	e000      	b.n	80048ea <HAL_ADC_Start_DMA+0x26>
 80048e8:	4b59      	ldr	r3, [pc, #356]	; (8004a50 <HAL_ADC_Start_DMA+0x18c>)
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7ff fd6a 	bl	80043c4 <LL_ADC_GetMultimode>
 80048f0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7ff fdfb 	bl	80044f2 <LL_ADC_REG_IsConversionOngoing>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f040 809b 	bne.w	8004a3a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800490a:	2b01      	cmp	r3, #1
 800490c:	d101      	bne.n	8004912 <HAL_ADC_Start_DMA+0x4e>
 800490e:	2302      	movs	r3, #2
 8004910:	e096      	b.n	8004a40 <HAL_ADC_Start_DMA+0x17c>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a4d      	ldr	r2, [pc, #308]	; (8004a54 <HAL_ADC_Start_DMA+0x190>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d008      	beq.n	8004936 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d005      	beq.n	8004936 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	2b05      	cmp	r3, #5
 800492e:	d002      	beq.n	8004936 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	2b09      	cmp	r3, #9
 8004934:	d17a      	bne.n	8004a2c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	f000 fcf6 	bl	8005328 <ADC_Enable>
 800493c:	4603      	mov	r3, r0
 800493e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004940:	7dfb      	ldrb	r3, [r7, #23]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d16d      	bne.n	8004a22 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800494a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800494e:	f023 0301 	bic.w	r3, r3, #1
 8004952:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a3a      	ldr	r2, [pc, #232]	; (8004a48 <HAL_ADC_Start_DMA+0x184>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d009      	beq.n	8004978 <HAL_ADC_Start_DMA+0xb4>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a3b      	ldr	r2, [pc, #236]	; (8004a58 <HAL_ADC_Start_DMA+0x194>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d002      	beq.n	8004974 <HAL_ADC_Start_DMA+0xb0>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	e003      	b.n	800497c <HAL_ADC_Start_DMA+0xb8>
 8004974:	4b39      	ldr	r3, [pc, #228]	; (8004a5c <HAL_ADC_Start_DMA+0x198>)
 8004976:	e001      	b.n	800497c <HAL_ADC_Start_DMA+0xb8>
 8004978:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	6812      	ldr	r2, [r2, #0]
 8004980:	4293      	cmp	r3, r2
 8004982:	d002      	beq.n	800498a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d105      	bne.n	8004996 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800498e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800499a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d006      	beq.n	80049b0 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049a6:	f023 0206 	bic.w	r2, r3, #6
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	661a      	str	r2, [r3, #96]	; 0x60
 80049ae:	e002      	b.n	80049b6 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ba:	4a29      	ldr	r2, [pc, #164]	; (8004a60 <HAL_ADC_Start_DMA+0x19c>)
 80049bc:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c2:	4a28      	ldr	r2, [pc, #160]	; (8004a64 <HAL_ADC_Start_DMA+0x1a0>)
 80049c4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ca:	4a27      	ldr	r2, [pc, #156]	; (8004a68 <HAL_ADC_Start_DMA+0x1a4>)
 80049cc:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	221c      	movs	r2, #28
 80049d4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	685a      	ldr	r2, [r3, #4]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f042 0210 	orr.w	r2, r2, #16
 80049ec:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68da      	ldr	r2, [r3, #12]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f042 0201 	orr.w	r2, r2, #1
 80049fc:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	3340      	adds	r3, #64	; 0x40
 8004a08:	4619      	mov	r1, r3
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f000 ff09 	bl	8005824 <HAL_DMA_Start_IT>
 8004a12:	4603      	mov	r3, r0
 8004a14:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7ff fd55 	bl	80044ca <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004a20:	e00d      	b.n	8004a3e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8004a2a:	e008      	b.n	8004a3e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8004a38:	e001      	b.n	8004a3e <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3718      	adds	r7, #24
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	50000100 	.word	0x50000100
 8004a4c:	50000300 	.word	0x50000300
 8004a50:	50000700 	.word	0x50000700
 8004a54:	50000600 	.word	0x50000600
 8004a58:	50000500 	.word	0x50000500
 8004a5c:	50000400 	.word	0x50000400
 8004a60:	080053ed 	.word	0x080053ed
 8004a64:	080054c5 	.word	0x080054c5
 8004a68:	080054e1 	.word	0x080054e1

08004a6c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b0b6      	sub	sp, #216	; 0xd8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d102      	bne.n	8004acc <HAL_ADC_ConfigChannel+0x24>
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	f000 bc13 	b.w	80052f2 <HAL_ADC_ConfigChannel+0x84a>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f7ff fd0a 	bl	80044f2 <LL_ADC_REG_IsConversionOngoing>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f040 83f3 	bne.w	80052cc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6818      	ldr	r0, [r3, #0]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	6859      	ldr	r1, [r3, #4]
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	461a      	mov	r2, r3
 8004af4:	f7ff fbe7 	bl	80042c6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7ff fcf8 	bl	80044f2 <LL_ADC_REG_IsConversionOngoing>
 8004b02:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7ff fd04 	bl	8004518 <LL_ADC_INJ_IsConversionOngoing>
 8004b10:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004b14:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f040 81d9 	bne.w	8004ed0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004b1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f040 81d4 	bne.w	8004ed0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b30:	d10f      	bne.n	8004b52 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6818      	ldr	r0, [r3, #0]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	f7ff fbee 	bl	800431e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7ff fb95 	bl	800427a <LL_ADC_SetSamplingTimeCommonConfig>
 8004b50:	e00e      	b.n	8004b70 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6818      	ldr	r0, [r3, #0]
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	6819      	ldr	r1, [r3, #0]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	461a      	mov	r2, r3
 8004b60:	f7ff fbdd 	bl	800431e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2100      	movs	r1, #0
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7ff fb85 	bl	800427a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	695a      	ldr	r2, [r3, #20]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	08db      	lsrs	r3, r3, #3
 8004b7c:	f003 0303 	and.w	r3, r3, #3
 8004b80:	005b      	lsls	r3, r3, #1
 8004b82:	fa02 f303 	lsl.w	r3, r2, r3
 8004b86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	d022      	beq.n	8004bd8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6818      	ldr	r0, [r3, #0]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	6919      	ldr	r1, [r3, #16]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ba2:	f7ff fadf 	bl	8004164 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6818      	ldr	r0, [r3, #0]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	6919      	ldr	r1, [r3, #16]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	f7ff fb2b 	bl	800420e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6818      	ldr	r0, [r3, #0]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	6919      	ldr	r1, [r3, #16]
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	7f1b      	ldrb	r3, [r3, #28]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d102      	bne.n	8004bce <HAL_ADC_ConfigChannel+0x126>
 8004bc8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bcc:	e000      	b.n	8004bd0 <HAL_ADC_ConfigChannel+0x128>
 8004bce:	2300      	movs	r3, #0
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	f7ff fb37 	bl	8004244 <LL_ADC_SetOffsetSaturation>
 8004bd6:	e17b      	b.n	8004ed0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2100      	movs	r1, #0
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7ff fae4 	bl	80041ac <LL_ADC_GetOffsetChannel>
 8004be4:	4603      	mov	r3, r0
 8004be6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10a      	bne.n	8004c04 <HAL_ADC_ConfigChannel+0x15c>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7ff fad9 	bl	80041ac <LL_ADC_GetOffsetChannel>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	0e9b      	lsrs	r3, r3, #26
 8004bfe:	f003 021f 	and.w	r2, r3, #31
 8004c02:	e01e      	b.n	8004c42 <HAL_ADC_ConfigChannel+0x19a>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2100      	movs	r1, #0
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7ff face 	bl	80041ac <LL_ADC_GetOffsetChannel>
 8004c10:	4603      	mov	r3, r0
 8004c12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c16:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004c1a:	fa93 f3a3 	rbit	r3, r3
 8004c1e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004c22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004c2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004c32:	2320      	movs	r3, #32
 8004c34:	e004      	b.n	8004c40 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004c36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c3a:	fab3 f383 	clz	r3, r3
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d105      	bne.n	8004c5a <HAL_ADC_ConfigChannel+0x1b2>
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	0e9b      	lsrs	r3, r3, #26
 8004c54:	f003 031f 	and.w	r3, r3, #31
 8004c58:	e018      	b.n	8004c8c <HAL_ADC_ConfigChannel+0x1e4>
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c62:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004c66:	fa93 f3a3 	rbit	r3, r3
 8004c6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004c6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004c76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004c7e:	2320      	movs	r3, #32
 8004c80:	e004      	b.n	8004c8c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004c82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004c86:	fab3 f383 	clz	r3, r3
 8004c8a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d106      	bne.n	8004c9e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2200      	movs	r2, #0
 8004c96:	2100      	movs	r1, #0
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7ff fa9d 	bl	80041d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2101      	movs	r1, #1
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f7ff fa81 	bl	80041ac <LL_ADC_GetOffsetChannel>
 8004caa:	4603      	mov	r3, r0
 8004cac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10a      	bne.n	8004cca <HAL_ADC_ConfigChannel+0x222>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2101      	movs	r1, #1
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7ff fa76 	bl	80041ac <LL_ADC_GetOffsetChannel>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	0e9b      	lsrs	r3, r3, #26
 8004cc4:	f003 021f 	and.w	r2, r3, #31
 8004cc8:	e01e      	b.n	8004d08 <HAL_ADC_ConfigChannel+0x260>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2101      	movs	r1, #1
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7ff fa6b 	bl	80041ac <LL_ADC_GetOffsetChannel>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cdc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004ce0:	fa93 f3a3 	rbit	r3, r3
 8004ce4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004ce8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004cec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004cf0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d101      	bne.n	8004cfc <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004cf8:	2320      	movs	r3, #32
 8004cfa:	e004      	b.n	8004d06 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004cfc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d00:	fab3 f383 	clz	r3, r3
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d105      	bne.n	8004d20 <HAL_ADC_ConfigChannel+0x278>
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	0e9b      	lsrs	r3, r3, #26
 8004d1a:	f003 031f 	and.w	r3, r3, #31
 8004d1e:	e018      	b.n	8004d52 <HAL_ADC_ConfigChannel+0x2aa>
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d2c:	fa93 f3a3 	rbit	r3, r3
 8004d30:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004d34:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004d38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004d3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d101      	bne.n	8004d48 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004d44:	2320      	movs	r3, #32
 8004d46:	e004      	b.n	8004d52 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004d48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d4c:	fab3 f383 	clz	r3, r3
 8004d50:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d106      	bne.n	8004d64 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	2101      	movs	r1, #1
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7ff fa3a 	bl	80041d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2102      	movs	r1, #2
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7ff fa1e 	bl	80041ac <LL_ADC_GetOffsetChannel>
 8004d70:	4603      	mov	r3, r0
 8004d72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10a      	bne.n	8004d90 <HAL_ADC_ConfigChannel+0x2e8>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2102      	movs	r1, #2
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7ff fa13 	bl	80041ac <LL_ADC_GetOffsetChannel>
 8004d86:	4603      	mov	r3, r0
 8004d88:	0e9b      	lsrs	r3, r3, #26
 8004d8a:	f003 021f 	and.w	r2, r3, #31
 8004d8e:	e01e      	b.n	8004dce <HAL_ADC_ConfigChannel+0x326>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2102      	movs	r1, #2
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7ff fa08 	bl	80041ac <LL_ADC_GetOffsetChannel>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004da2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004da6:	fa93 f3a3 	rbit	r3, r3
 8004daa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004dae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004db2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004db6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004dbe:	2320      	movs	r3, #32
 8004dc0:	e004      	b.n	8004dcc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004dc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004dc6:	fab3 f383 	clz	r3, r3
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d105      	bne.n	8004de6 <HAL_ADC_ConfigChannel+0x33e>
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	0e9b      	lsrs	r3, r3, #26
 8004de0:	f003 031f 	and.w	r3, r3, #31
 8004de4:	e016      	b.n	8004e14 <HAL_ADC_ConfigChannel+0x36c>
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004df2:	fa93 f3a3 	rbit	r3, r3
 8004df6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004df8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004dfa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004dfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004e06:	2320      	movs	r3, #32
 8004e08:	e004      	b.n	8004e14 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004e0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e0e:	fab3 f383 	clz	r3, r3
 8004e12:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d106      	bne.n	8004e26 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	2102      	movs	r1, #2
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7ff f9d9 	bl	80041d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2103      	movs	r1, #3
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7ff f9bd 	bl	80041ac <LL_ADC_GetOffsetChannel>
 8004e32:	4603      	mov	r3, r0
 8004e34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10a      	bne.n	8004e52 <HAL_ADC_ConfigChannel+0x3aa>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2103      	movs	r1, #3
 8004e42:	4618      	mov	r0, r3
 8004e44:	f7ff f9b2 	bl	80041ac <LL_ADC_GetOffsetChannel>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	0e9b      	lsrs	r3, r3, #26
 8004e4c:	f003 021f 	and.w	r2, r3, #31
 8004e50:	e017      	b.n	8004e82 <HAL_ADC_ConfigChannel+0x3da>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2103      	movs	r1, #3
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7ff f9a7 	bl	80041ac <LL_ADC_GetOffsetChannel>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e64:	fa93 f3a3 	rbit	r3, r3
 8004e68:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004e6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e6c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004e6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d101      	bne.n	8004e78 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004e74:	2320      	movs	r3, #32
 8004e76:	e003      	b.n	8004e80 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004e78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e7a:	fab3 f383 	clz	r3, r3
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d105      	bne.n	8004e9a <HAL_ADC_ConfigChannel+0x3f2>
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	0e9b      	lsrs	r3, r3, #26
 8004e94:	f003 031f 	and.w	r3, r3, #31
 8004e98:	e011      	b.n	8004ebe <HAL_ADC_ConfigChannel+0x416>
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ea2:	fa93 f3a3 	rbit	r3, r3
 8004ea6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004ea8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004eaa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004eac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004eb2:	2320      	movs	r3, #32
 8004eb4:	e003      	b.n	8004ebe <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eb8:	fab3 f383 	clz	r3, r3
 8004ebc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d106      	bne.n	8004ed0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	2103      	movs	r1, #3
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7ff f984 	bl	80041d8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7ff fae5 	bl	80044a4 <LL_ADC_IsEnabled>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f040 813d 	bne.w	800515c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6818      	ldr	r0, [r3, #0]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	6819      	ldr	r1, [r3, #0]
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	461a      	mov	r2, r3
 8004ef0:	f7ff fa40 	bl	8004374 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	4aa2      	ldr	r2, [pc, #648]	; (8005184 <HAL_ADC_ConfigChannel+0x6dc>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	f040 812e 	bne.w	800515c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10b      	bne.n	8004f28 <HAL_ADC_ConfigChannel+0x480>
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	0e9b      	lsrs	r3, r3, #26
 8004f16:	3301      	adds	r3, #1
 8004f18:	f003 031f 	and.w	r3, r3, #31
 8004f1c:	2b09      	cmp	r3, #9
 8004f1e:	bf94      	ite	ls
 8004f20:	2301      	movls	r3, #1
 8004f22:	2300      	movhi	r3, #0
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	e019      	b.n	8004f5c <HAL_ADC_ConfigChannel+0x4b4>
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f30:	fa93 f3a3 	rbit	r3, r3
 8004f34:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004f36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f38:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004f3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004f40:	2320      	movs	r3, #32
 8004f42:	e003      	b.n	8004f4c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004f44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f46:	fab3 f383 	clz	r3, r3
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	f003 031f 	and.w	r3, r3, #31
 8004f52:	2b09      	cmp	r3, #9
 8004f54:	bf94      	ite	ls
 8004f56:	2301      	movls	r3, #1
 8004f58:	2300      	movhi	r3, #0
 8004f5a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d079      	beq.n	8005054 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d107      	bne.n	8004f7c <HAL_ADC_ConfigChannel+0x4d4>
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	0e9b      	lsrs	r3, r3, #26
 8004f72:	3301      	adds	r3, #1
 8004f74:	069b      	lsls	r3, r3, #26
 8004f76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f7a:	e015      	b.n	8004fa8 <HAL_ADC_ConfigChannel+0x500>
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f84:	fa93 f3a3 	rbit	r3, r3
 8004f88:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004f8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f8c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004f8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d101      	bne.n	8004f98 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004f94:	2320      	movs	r3, #32
 8004f96:	e003      	b.n	8004fa0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004f98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f9a:	fab3 f383 	clz	r3, r3
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	069b      	lsls	r3, r3, #26
 8004fa4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d109      	bne.n	8004fc8 <HAL_ADC_ConfigChannel+0x520>
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	0e9b      	lsrs	r3, r3, #26
 8004fba:	3301      	adds	r3, #1
 8004fbc:	f003 031f 	and.w	r3, r3, #31
 8004fc0:	2101      	movs	r1, #1
 8004fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc6:	e017      	b.n	8004ff8 <HAL_ADC_ConfigChannel+0x550>
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fd0:	fa93 f3a3 	rbit	r3, r3
 8004fd4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004fd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fd8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004fda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d101      	bne.n	8004fe4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004fe0:	2320      	movs	r3, #32
 8004fe2:	e003      	b.n	8004fec <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004fe4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fe6:	fab3 f383 	clz	r3, r3
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	3301      	adds	r3, #1
 8004fee:	f003 031f 	and.w	r3, r3, #31
 8004ff2:	2101      	movs	r1, #1
 8004ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff8:	ea42 0103 	orr.w	r1, r2, r3
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005004:	2b00      	cmp	r3, #0
 8005006:	d10a      	bne.n	800501e <HAL_ADC_ConfigChannel+0x576>
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	0e9b      	lsrs	r3, r3, #26
 800500e:	3301      	adds	r3, #1
 8005010:	f003 021f 	and.w	r2, r3, #31
 8005014:	4613      	mov	r3, r2
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	4413      	add	r3, r2
 800501a:	051b      	lsls	r3, r3, #20
 800501c:	e018      	b.n	8005050 <HAL_ADC_ConfigChannel+0x5a8>
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005026:	fa93 f3a3 	rbit	r3, r3
 800502a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800502c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800502e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8005036:	2320      	movs	r3, #32
 8005038:	e003      	b.n	8005042 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800503a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800503c:	fab3 f383 	clz	r3, r3
 8005040:	b2db      	uxtb	r3, r3
 8005042:	3301      	adds	r3, #1
 8005044:	f003 021f 	and.w	r2, r3, #31
 8005048:	4613      	mov	r3, r2
 800504a:	005b      	lsls	r3, r3, #1
 800504c:	4413      	add	r3, r2
 800504e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005050:	430b      	orrs	r3, r1
 8005052:	e07e      	b.n	8005152 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800505c:	2b00      	cmp	r3, #0
 800505e:	d107      	bne.n	8005070 <HAL_ADC_ConfigChannel+0x5c8>
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	0e9b      	lsrs	r3, r3, #26
 8005066:	3301      	adds	r3, #1
 8005068:	069b      	lsls	r3, r3, #26
 800506a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800506e:	e015      	b.n	800509c <HAL_ADC_ConfigChannel+0x5f4>
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005078:	fa93 f3a3 	rbit	r3, r3
 800507c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800507e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005080:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8005082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005084:	2b00      	cmp	r3, #0
 8005086:	d101      	bne.n	800508c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8005088:	2320      	movs	r3, #32
 800508a:	e003      	b.n	8005094 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800508c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508e:	fab3 f383 	clz	r3, r3
 8005092:	b2db      	uxtb	r3, r3
 8005094:	3301      	adds	r3, #1
 8005096:	069b      	lsls	r3, r3, #26
 8005098:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d109      	bne.n	80050bc <HAL_ADC_ConfigChannel+0x614>
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	0e9b      	lsrs	r3, r3, #26
 80050ae:	3301      	adds	r3, #1
 80050b0:	f003 031f 	and.w	r3, r3, #31
 80050b4:	2101      	movs	r1, #1
 80050b6:	fa01 f303 	lsl.w	r3, r1, r3
 80050ba:	e017      	b.n	80050ec <HAL_ADC_ConfigChannel+0x644>
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050c2:	6a3b      	ldr	r3, [r7, #32]
 80050c4:	fa93 f3a3 	rbit	r3, r3
 80050c8:	61fb      	str	r3, [r7, #28]
  return result;
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80050ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d101      	bne.n	80050d8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80050d4:	2320      	movs	r3, #32
 80050d6:	e003      	b.n	80050e0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	fab3 f383 	clz	r3, r3
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	3301      	adds	r3, #1
 80050e2:	f003 031f 	and.w	r3, r3, #31
 80050e6:	2101      	movs	r1, #1
 80050e8:	fa01 f303 	lsl.w	r3, r1, r3
 80050ec:	ea42 0103 	orr.w	r1, r2, r3
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10d      	bne.n	8005118 <HAL_ADC_ConfigChannel+0x670>
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	0e9b      	lsrs	r3, r3, #26
 8005102:	3301      	adds	r3, #1
 8005104:	f003 021f 	and.w	r2, r3, #31
 8005108:	4613      	mov	r3, r2
 800510a:	005b      	lsls	r3, r3, #1
 800510c:	4413      	add	r3, r2
 800510e:	3b1e      	subs	r3, #30
 8005110:	051b      	lsls	r3, r3, #20
 8005112:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005116:	e01b      	b.n	8005150 <HAL_ADC_ConfigChannel+0x6a8>
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	fa93 f3a3 	rbit	r3, r3
 8005124:	613b      	str	r3, [r7, #16]
  return result;
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d101      	bne.n	8005134 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005130:	2320      	movs	r3, #32
 8005132:	e003      	b.n	800513c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	fab3 f383 	clz	r3, r3
 800513a:	b2db      	uxtb	r3, r3
 800513c:	3301      	adds	r3, #1
 800513e:	f003 021f 	and.w	r2, r3, #31
 8005142:	4613      	mov	r3, r2
 8005144:	005b      	lsls	r3, r3, #1
 8005146:	4413      	add	r3, r2
 8005148:	3b1e      	subs	r3, #30
 800514a:	051b      	lsls	r3, r3, #20
 800514c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005150:	430b      	orrs	r3, r1
 8005152:	683a      	ldr	r2, [r7, #0]
 8005154:	6892      	ldr	r2, [r2, #8]
 8005156:	4619      	mov	r1, r3
 8005158:	f7ff f8e1 	bl	800431e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	4b09      	ldr	r3, [pc, #36]	; (8005188 <HAL_ADC_ConfigChannel+0x6e0>)
 8005162:	4013      	ands	r3, r2
 8005164:	2b00      	cmp	r3, #0
 8005166:	f000 80be 	beq.w	80052e6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005172:	d004      	beq.n	800517e <HAL_ADC_ConfigChannel+0x6d6>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a04      	ldr	r2, [pc, #16]	; (800518c <HAL_ADC_ConfigChannel+0x6e4>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d10a      	bne.n	8005194 <HAL_ADC_ConfigChannel+0x6ec>
 800517e:	4b04      	ldr	r3, [pc, #16]	; (8005190 <HAL_ADC_ConfigChannel+0x6e8>)
 8005180:	e009      	b.n	8005196 <HAL_ADC_ConfigChannel+0x6ee>
 8005182:	bf00      	nop
 8005184:	407f0000 	.word	0x407f0000
 8005188:	80080000 	.word	0x80080000
 800518c:	50000100 	.word	0x50000100
 8005190:	50000300 	.word	0x50000300
 8005194:	4b59      	ldr	r3, [pc, #356]	; (80052fc <HAL_ADC_ConfigChannel+0x854>)
 8005196:	4618      	mov	r0, r3
 8005198:	f7fe ffd6 	bl	8004148 <LL_ADC_GetCommonPathInternalCh>
 800519c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a56      	ldr	r2, [pc, #344]	; (8005300 <HAL_ADC_ConfigChannel+0x858>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d004      	beq.n	80051b4 <HAL_ADC_ConfigChannel+0x70c>
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a55      	ldr	r2, [pc, #340]	; (8005304 <HAL_ADC_ConfigChannel+0x85c>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d13a      	bne.n	800522a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80051b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d134      	bne.n	800522a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051c8:	d005      	beq.n	80051d6 <HAL_ADC_ConfigChannel+0x72e>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a4e      	ldr	r2, [pc, #312]	; (8005308 <HAL_ADC_ConfigChannel+0x860>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	f040 8085 	bne.w	80052e0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051de:	d004      	beq.n	80051ea <HAL_ADC_ConfigChannel+0x742>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a49      	ldr	r2, [pc, #292]	; (800530c <HAL_ADC_ConfigChannel+0x864>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d101      	bne.n	80051ee <HAL_ADC_ConfigChannel+0x746>
 80051ea:	4a49      	ldr	r2, [pc, #292]	; (8005310 <HAL_ADC_ConfigChannel+0x868>)
 80051ec:	e000      	b.n	80051f0 <HAL_ADC_ConfigChannel+0x748>
 80051ee:	4a43      	ldr	r2, [pc, #268]	; (80052fc <HAL_ADC_ConfigChannel+0x854>)
 80051f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80051f8:	4619      	mov	r1, r3
 80051fa:	4610      	mov	r0, r2
 80051fc:	f7fe ff91 	bl	8004122 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005200:	4b44      	ldr	r3, [pc, #272]	; (8005314 <HAL_ADC_ConfigChannel+0x86c>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	099b      	lsrs	r3, r3, #6
 8005206:	4a44      	ldr	r2, [pc, #272]	; (8005318 <HAL_ADC_ConfigChannel+0x870>)
 8005208:	fba2 2303 	umull	r2, r3, r2, r3
 800520c:	099b      	lsrs	r3, r3, #6
 800520e:	1c5a      	adds	r2, r3, #1
 8005210:	4613      	mov	r3, r2
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	4413      	add	r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800521a:	e002      	b.n	8005222 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	3b01      	subs	r3, #1
 8005220:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1f9      	bne.n	800521c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005228:	e05a      	b.n	80052e0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a3b      	ldr	r2, [pc, #236]	; (800531c <HAL_ADC_ConfigChannel+0x874>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d125      	bne.n	8005280 <HAL_ADC_ConfigChannel+0x7d8>
 8005234:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005238:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d11f      	bne.n	8005280 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a31      	ldr	r2, [pc, #196]	; (800530c <HAL_ADC_ConfigChannel+0x864>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d104      	bne.n	8005254 <HAL_ADC_ConfigChannel+0x7ac>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a34      	ldr	r2, [pc, #208]	; (8005320 <HAL_ADC_ConfigChannel+0x878>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d047      	beq.n	80052e4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800525c:	d004      	beq.n	8005268 <HAL_ADC_ConfigChannel+0x7c0>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a2a      	ldr	r2, [pc, #168]	; (800530c <HAL_ADC_ConfigChannel+0x864>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d101      	bne.n	800526c <HAL_ADC_ConfigChannel+0x7c4>
 8005268:	4a29      	ldr	r2, [pc, #164]	; (8005310 <HAL_ADC_ConfigChannel+0x868>)
 800526a:	e000      	b.n	800526e <HAL_ADC_ConfigChannel+0x7c6>
 800526c:	4a23      	ldr	r2, [pc, #140]	; (80052fc <HAL_ADC_ConfigChannel+0x854>)
 800526e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005272:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005276:	4619      	mov	r1, r3
 8005278:	4610      	mov	r0, r2
 800527a:	f7fe ff52 	bl	8004122 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800527e:	e031      	b.n	80052e4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a27      	ldr	r2, [pc, #156]	; (8005324 <HAL_ADC_ConfigChannel+0x87c>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d12d      	bne.n	80052e6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800528a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800528e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d127      	bne.n	80052e6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a1c      	ldr	r2, [pc, #112]	; (800530c <HAL_ADC_ConfigChannel+0x864>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d022      	beq.n	80052e6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052a8:	d004      	beq.n	80052b4 <HAL_ADC_ConfigChannel+0x80c>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a17      	ldr	r2, [pc, #92]	; (800530c <HAL_ADC_ConfigChannel+0x864>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d101      	bne.n	80052b8 <HAL_ADC_ConfigChannel+0x810>
 80052b4:	4a16      	ldr	r2, [pc, #88]	; (8005310 <HAL_ADC_ConfigChannel+0x868>)
 80052b6:	e000      	b.n	80052ba <HAL_ADC_ConfigChannel+0x812>
 80052b8:	4a10      	ldr	r2, [pc, #64]	; (80052fc <HAL_ADC_ConfigChannel+0x854>)
 80052ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80052be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80052c2:	4619      	mov	r1, r3
 80052c4:	4610      	mov	r0, r2
 80052c6:	f7fe ff2c 	bl	8004122 <LL_ADC_SetCommonPathInternalCh>
 80052ca:	e00c      	b.n	80052e6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052d0:	f043 0220 	orr.w	r2, r3, #32
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80052de:	e002      	b.n	80052e6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80052e0:	bf00      	nop
 80052e2:	e000      	b.n	80052e6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80052e4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80052ee:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	37d8      	adds	r7, #216	; 0xd8
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	50000700 	.word	0x50000700
 8005300:	c3210000 	.word	0xc3210000
 8005304:	90c00010 	.word	0x90c00010
 8005308:	50000600 	.word	0x50000600
 800530c:	50000100 	.word	0x50000100
 8005310:	50000300 	.word	0x50000300
 8005314:	20000004 	.word	0x20000004
 8005318:	053e2d63 	.word	0x053e2d63
 800531c:	c7520000 	.word	0xc7520000
 8005320:	50000500 	.word	0x50000500
 8005324:	cb840000 	.word	0xcb840000

08005328 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4618      	mov	r0, r3
 8005336:	f7ff f8b5 	bl	80044a4 <LL_ADC_IsEnabled>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d14d      	bne.n	80053dc <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689a      	ldr	r2, [r3, #8]
 8005346:	4b28      	ldr	r3, [pc, #160]	; (80053e8 <ADC_Enable+0xc0>)
 8005348:	4013      	ands	r3, r2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00d      	beq.n	800536a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005352:	f043 0210 	orr.w	r2, r3, #16
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800535e:	f043 0201 	orr.w	r2, r3, #1
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e039      	b.n	80053de <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4618      	mov	r0, r3
 8005370:	f7ff f884 	bl	800447c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005374:	f7fe fe94 	bl	80040a0 <HAL_GetTick>
 8005378:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800537a:	e028      	b.n	80053ce <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4618      	mov	r0, r3
 8005382:	f7ff f88f 	bl	80044a4 <LL_ADC_IsEnabled>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d104      	bne.n	8005396 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4618      	mov	r0, r3
 8005392:	f7ff f873 	bl	800447c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005396:	f7fe fe83 	bl	80040a0 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d914      	bls.n	80053ce <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d00d      	beq.n	80053ce <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053b6:	f043 0210 	orr.w	r2, r3, #16
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053c2:	f043 0201 	orr.w	r2, r3, #1
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e007      	b.n	80053de <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0301 	and.w	r3, r3, #1
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d1cf      	bne.n	800537c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	8000003f 	.word	0x8000003f

080053ec <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053fe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005402:	2b00      	cmp	r3, #0
 8005404:	d14b      	bne.n	800549e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800540a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0308 	and.w	r3, r3, #8
 800541c:	2b00      	cmp	r3, #0
 800541e:	d021      	beq.n	8005464 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4618      	mov	r0, r3
 8005426:	f7fe ff3b 	bl	80042a0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d032      	beq.n	8005496 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d12b      	bne.n	8005496 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005442:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800544e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d11f      	bne.n	8005496 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800545a:	f043 0201 	orr.w	r2, r3, #1
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	65da      	str	r2, [r3, #92]	; 0x5c
 8005462:	e018      	b.n	8005496 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	f003 0302 	and.w	r3, r3, #2
 800546e:	2b00      	cmp	r3, #0
 8005470:	d111      	bne.n	8005496 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005476:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005482:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d105      	bne.n	8005496 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800548e:	f043 0201 	orr.w	r2, r3, #1
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f7ff fae8 	bl	8004a6c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800549c:	e00e      	b.n	80054bc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054a2:	f003 0310 	and.w	r3, r3, #16
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	f7ff faf2 	bl	8004a94 <HAL_ADC_ErrorCallback>
}
 80054b0:	e004      	b.n	80054bc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	4798      	blx	r3
}
 80054bc:	bf00      	nop
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f7ff fad4 	bl	8004a80 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80054d8:	bf00      	nop
 80054da:	3710      	adds	r7, #16
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ec:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054fe:	f043 0204 	orr.w	r2, r3, #4
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f7ff fac4 	bl	8004a94 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800550c:	bf00      	nop
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f003 0307 	and.w	r3, r3, #7
 8005522:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005524:	4b0c      	ldr	r3, [pc, #48]	; (8005558 <__NVIC_SetPriorityGrouping+0x44>)
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005530:	4013      	ands	r3, r2
 8005532:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800553c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005546:	4a04      	ldr	r2, [pc, #16]	; (8005558 <__NVIC_SetPriorityGrouping+0x44>)
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	60d3      	str	r3, [r2, #12]
}
 800554c:	bf00      	nop
 800554e:	3714      	adds	r7, #20
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr
 8005558:	e000ed00 	.word	0xe000ed00

0800555c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800555c:	b480      	push	{r7}
 800555e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005560:	4b04      	ldr	r3, [pc, #16]	; (8005574 <__NVIC_GetPriorityGrouping+0x18>)
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	0a1b      	lsrs	r3, r3, #8
 8005566:	f003 0307 	and.w	r3, r3, #7
}
 800556a:	4618      	mov	r0, r3
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr
 8005574:	e000ed00 	.word	0xe000ed00

08005578 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	4603      	mov	r3, r0
 8005580:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005586:	2b00      	cmp	r3, #0
 8005588:	db0b      	blt.n	80055a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800558a:	79fb      	ldrb	r3, [r7, #7]
 800558c:	f003 021f 	and.w	r2, r3, #31
 8005590:	4907      	ldr	r1, [pc, #28]	; (80055b0 <__NVIC_EnableIRQ+0x38>)
 8005592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005596:	095b      	lsrs	r3, r3, #5
 8005598:	2001      	movs	r0, #1
 800559a:	fa00 f202 	lsl.w	r2, r0, r2
 800559e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80055a2:	bf00      	nop
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	e000e100 	.word	0xe000e100

080055b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	4603      	mov	r3, r0
 80055bc:	6039      	str	r1, [r7, #0]
 80055be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	db0a      	blt.n	80055de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	b2da      	uxtb	r2, r3
 80055cc:	490c      	ldr	r1, [pc, #48]	; (8005600 <__NVIC_SetPriority+0x4c>)
 80055ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055d2:	0112      	lsls	r2, r2, #4
 80055d4:	b2d2      	uxtb	r2, r2
 80055d6:	440b      	add	r3, r1
 80055d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80055dc:	e00a      	b.n	80055f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	b2da      	uxtb	r2, r3
 80055e2:	4908      	ldr	r1, [pc, #32]	; (8005604 <__NVIC_SetPriority+0x50>)
 80055e4:	79fb      	ldrb	r3, [r7, #7]
 80055e6:	f003 030f 	and.w	r3, r3, #15
 80055ea:	3b04      	subs	r3, #4
 80055ec:	0112      	lsls	r2, r2, #4
 80055ee:	b2d2      	uxtb	r2, r2
 80055f0:	440b      	add	r3, r1
 80055f2:	761a      	strb	r2, [r3, #24]
}
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr
 8005600:	e000e100 	.word	0xe000e100
 8005604:	e000ed00 	.word	0xe000ed00

08005608 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005608:	b480      	push	{r7}
 800560a:	b089      	sub	sp, #36	; 0x24
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f003 0307 	and.w	r3, r3, #7
 800561a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	f1c3 0307 	rsb	r3, r3, #7
 8005622:	2b04      	cmp	r3, #4
 8005624:	bf28      	it	cs
 8005626:	2304      	movcs	r3, #4
 8005628:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	3304      	adds	r3, #4
 800562e:	2b06      	cmp	r3, #6
 8005630:	d902      	bls.n	8005638 <NVIC_EncodePriority+0x30>
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	3b03      	subs	r3, #3
 8005636:	e000      	b.n	800563a <NVIC_EncodePriority+0x32>
 8005638:	2300      	movs	r3, #0
 800563a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800563c:	f04f 32ff 	mov.w	r2, #4294967295
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	fa02 f303 	lsl.w	r3, r2, r3
 8005646:	43da      	mvns	r2, r3
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	401a      	ands	r2, r3
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005650:	f04f 31ff 	mov.w	r1, #4294967295
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	fa01 f303 	lsl.w	r3, r1, r3
 800565a:	43d9      	mvns	r1, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005660:	4313      	orrs	r3, r2
         );
}
 8005662:	4618      	mov	r0, r3
 8005664:	3724      	adds	r7, #36	; 0x24
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800566e:	b580      	push	{r7, lr}
 8005670:	b082      	sub	sp, #8
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f7ff ff4c 	bl	8005514 <__NVIC_SetPriorityGrouping>
}
 800567c:	bf00      	nop
 800567e:	3708      	adds	r7, #8
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af00      	add	r7, sp, #0
 800568a:	4603      	mov	r3, r0
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]
 8005690:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005692:	f7ff ff63 	bl	800555c <__NVIC_GetPriorityGrouping>
 8005696:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	68b9      	ldr	r1, [r7, #8]
 800569c:	6978      	ldr	r0, [r7, #20]
 800569e:	f7ff ffb3 	bl	8005608 <NVIC_EncodePriority>
 80056a2:	4602      	mov	r2, r0
 80056a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056a8:	4611      	mov	r1, r2
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7ff ff82 	bl	80055b4 <__NVIC_SetPriority>
}
 80056b0:	bf00      	nop
 80056b2:	3718      	adds	r7, #24
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	4603      	mov	r3, r0
 80056c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80056c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7ff ff56 	bl	8005578 <__NVIC_EnableIRQ>
}
 80056cc:	bf00      	nop
 80056ce:	3708      	adds	r7, #8
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d101      	bne.n	80056e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e08d      	b.n	8005802 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	461a      	mov	r2, r3
 80056ec:	4b47      	ldr	r3, [pc, #284]	; (800580c <HAL_DMA_Init+0x138>)
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d80f      	bhi.n	8005712 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	461a      	mov	r2, r3
 80056f8:	4b45      	ldr	r3, [pc, #276]	; (8005810 <HAL_DMA_Init+0x13c>)
 80056fa:	4413      	add	r3, r2
 80056fc:	4a45      	ldr	r2, [pc, #276]	; (8005814 <HAL_DMA_Init+0x140>)
 80056fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005702:	091b      	lsrs	r3, r3, #4
 8005704:	009a      	lsls	r2, r3, #2
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a42      	ldr	r2, [pc, #264]	; (8005818 <HAL_DMA_Init+0x144>)
 800570e:	641a      	str	r2, [r3, #64]	; 0x40
 8005710:	e00e      	b.n	8005730 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	461a      	mov	r2, r3
 8005718:	4b40      	ldr	r3, [pc, #256]	; (800581c <HAL_DMA_Init+0x148>)
 800571a:	4413      	add	r3, r2
 800571c:	4a3d      	ldr	r2, [pc, #244]	; (8005814 <HAL_DMA_Init+0x140>)
 800571e:	fba2 2303 	umull	r2, r3, r2, r3
 8005722:	091b      	lsrs	r3, r3, #4
 8005724:	009a      	lsls	r2, r3, #2
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a3c      	ldr	r2, [pc, #240]	; (8005820 <HAL_DMA_Init+0x14c>)
 800572e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2202      	movs	r2, #2
 8005734:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800574a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005754:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005760:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800576c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	4313      	orrs	r3, r2
 8005778:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 fa76 	bl	8005c74 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005790:	d102      	bne.n	8005798 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057a0:	b2d2      	uxtb	r2, r2
 80057a2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80057ac:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d010      	beq.n	80057d8 <HAL_DMA_Init+0x104>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	2b04      	cmp	r3, #4
 80057bc:	d80c      	bhi.n	80057d8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 fa96 	bl	8005cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c8:	2200      	movs	r2, #0
 80057ca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80057d4:	605a      	str	r2, [r3, #4]
 80057d6:	e008      	b.n	80057ea <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	40020407 	.word	0x40020407
 8005810:	bffdfff8 	.word	0xbffdfff8
 8005814:	cccccccd 	.word	0xcccccccd
 8005818:	40020000 	.word	0x40020000
 800581c:	bffdfbf8 	.word	0xbffdfbf8
 8005820:	40020400 	.word	0x40020400

08005824 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	607a      	str	r2, [r7, #4]
 8005830:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005832:	2300      	movs	r3, #0
 8005834:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800583c:	2b01      	cmp	r3, #1
 800583e:	d101      	bne.n	8005844 <HAL_DMA_Start_IT+0x20>
 8005840:	2302      	movs	r3, #2
 8005842:	e066      	b.n	8005912 <HAL_DMA_Start_IT+0xee>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005852:	b2db      	uxtb	r3, r3
 8005854:	2b01      	cmp	r3, #1
 8005856:	d155      	bne.n	8005904 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2202      	movs	r2, #2
 800585c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f022 0201 	bic.w	r2, r2, #1
 8005874:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	68b9      	ldr	r1, [r7, #8]
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f000 f9bb 	bl	8005bf8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005886:	2b00      	cmp	r3, #0
 8005888:	d008      	beq.n	800589c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f042 020e 	orr.w	r2, r2, #14
 8005898:	601a      	str	r2, [r3, #0]
 800589a:	e00f      	b.n	80058bc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f022 0204 	bic.w	r2, r2, #4
 80058aa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f042 020a 	orr.w	r2, r2, #10
 80058ba:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d007      	beq.n	80058da <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058d8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d007      	beq.n	80058f2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058f0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f042 0201 	orr.w	r2, r2, #1
 8005900:	601a      	str	r2, [r3, #0]
 8005902:	e005      	b.n	8005910 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800590c:	2302      	movs	r3, #2
 800590e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005910:	7dfb      	ldrb	r3, [r7, #23]
}
 8005912:	4618      	mov	r0, r3
 8005914:	3718      	adds	r7, #24
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800591a:	b480      	push	{r7}
 800591c:	b085      	sub	sp, #20
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005922:	2300      	movs	r3, #0
 8005924:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b02      	cmp	r3, #2
 8005930:	d005      	beq.n	800593e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2204      	movs	r2, #4
 8005936:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	73fb      	strb	r3, [r7, #15]
 800593c:	e037      	b.n	80059ae <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f022 020e 	bic.w	r2, r2, #14
 800594c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005958:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800595c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f022 0201 	bic.w	r2, r2, #1
 800596c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005972:	f003 021f 	and.w	r2, r3, #31
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597a:	2101      	movs	r1, #1
 800597c:	fa01 f202 	lsl.w	r2, r1, r2
 8005980:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800598a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00c      	beq.n	80059ae <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800599e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059a2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80059ac:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80059be:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3714      	adds	r7, #20
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059d4:	2300      	movs	r3, #0
 80059d6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d00d      	beq.n	8005a00 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2204      	movs	r2, #4
 80059e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2201      	movs	r2, #1
 80059ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	73fb      	strb	r3, [r7, #15]
 80059fe:	e047      	b.n	8005a90 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f022 020e 	bic.w	r2, r2, #14
 8005a0e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f022 0201 	bic.w	r2, r2, #1
 8005a1e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a34:	f003 021f 	and.w	r2, r3, #31
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3c:	2101      	movs	r1, #1
 8005a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8005a42:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005a4c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00c      	beq.n	8005a70 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a64:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005a6e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d003      	beq.n	8005a90 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	4798      	blx	r3
    }
  }
  return status;
 8005a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b084      	sub	sp, #16
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ab6:	f003 031f 	and.w	r3, r3, #31
 8005aba:	2204      	movs	r2, #4
 8005abc:	409a      	lsls	r2, r3
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d026      	beq.n	8005b14 <HAL_DMA_IRQHandler+0x7a>
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	f003 0304 	and.w	r3, r3, #4
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d021      	beq.n	8005b14 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0320 	and.w	r3, r3, #32
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d107      	bne.n	8005aee <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f022 0204 	bic.w	r2, r2, #4
 8005aec:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af2:	f003 021f 	and.w	r2, r3, #31
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afa:	2104      	movs	r1, #4
 8005afc:	fa01 f202 	lsl.w	r2, r1, r2
 8005b00:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d071      	beq.n	8005bee <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005b12:	e06c      	b.n	8005bee <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b18:	f003 031f 	and.w	r3, r3, #31
 8005b1c:	2202      	movs	r2, #2
 8005b1e:	409a      	lsls	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	4013      	ands	r3, r2
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d02e      	beq.n	8005b86 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d029      	beq.n	8005b86 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0320 	and.w	r3, r3, #32
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d10b      	bne.n	8005b58 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f022 020a 	bic.w	r2, r2, #10
 8005b4e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b5c:	f003 021f 	and.w	r2, r3, #31
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b64:	2102      	movs	r1, #2
 8005b66:	fa01 f202 	lsl.w	r2, r1, r2
 8005b6a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d038      	beq.n	8005bee <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005b84:	e033      	b.n	8005bee <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b8a:	f003 031f 	and.w	r3, r3, #31
 8005b8e:	2208      	movs	r2, #8
 8005b90:	409a      	lsls	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	4013      	ands	r3, r2
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d02a      	beq.n	8005bf0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	f003 0308 	and.w	r3, r3, #8
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d025      	beq.n	8005bf0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f022 020e 	bic.w	r2, r2, #14
 8005bb2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bb8:	f003 021f 	and.w	r2, r3, #31
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc0:	2101      	movs	r1, #1
 8005bc2:	fa01 f202 	lsl.w	r2, r1, r2
 8005bc6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d004      	beq.n	8005bf0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005bee:	bf00      	nop
 8005bf0:	bf00      	nop
}
 8005bf2:	3710      	adds	r7, #16
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
 8005c04:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005c0e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d004      	beq.n	8005c22 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005c20:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c26:	f003 021f 	and.w	r2, r3, #31
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2e:	2101      	movs	r1, #1
 8005c30:	fa01 f202 	lsl.w	r2, r1, r2
 8005c34:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	683a      	ldr	r2, [r7, #0]
 8005c3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	2b10      	cmp	r3, #16
 8005c44:	d108      	bne.n	8005c58 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005c56:	e007      	b.n	8005c68 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	60da      	str	r2, [r3, #12]
}
 8005c68:	bf00      	nop
 8005c6a:	3714      	adds	r7, #20
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b087      	sub	sp, #28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	461a      	mov	r2, r3
 8005c82:	4b16      	ldr	r3, [pc, #88]	; (8005cdc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d802      	bhi.n	8005c8e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005c88:	4b15      	ldr	r3, [pc, #84]	; (8005ce0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005c8a:	617b      	str	r3, [r7, #20]
 8005c8c:	e001      	b.n	8005c92 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005c8e:	4b15      	ldr	r3, [pc, #84]	; (8005ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005c90:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	3b08      	subs	r3, #8
 8005c9e:	4a12      	ldr	r2, [pc, #72]	; (8005ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca4:	091b      	lsrs	r3, r3, #4
 8005ca6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cac:	089b      	lsrs	r3, r3, #2
 8005cae:	009a      	lsls	r2, r3, #2
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a0b      	ldr	r2, [pc, #44]	; (8005cec <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005cbe:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f003 031f 	and.w	r3, r3, #31
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	409a      	lsls	r2, r3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005cce:	bf00      	nop
 8005cd0:	371c      	adds	r7, #28
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	40020407 	.word	0x40020407
 8005ce0:	40020800 	.word	0x40020800
 8005ce4:	40020820 	.word	0x40020820
 8005ce8:	cccccccd 	.word	0xcccccccd
 8005cec:	40020880 	.word	0x40020880

08005cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	4b0b      	ldr	r3, [pc, #44]	; (8005d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005d04:	4413      	add	r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	461a      	mov	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a08      	ldr	r2, [pc, #32]	; (8005d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005d12:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	3b01      	subs	r3, #1
 8005d18:	f003 031f 	and.w	r3, r3, #31
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	409a      	lsls	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005d24:	bf00      	nop
 8005d26:	3714      	adds	r7, #20
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr
 8005d30:	1000823f 	.word	0x1000823f
 8005d34:	40020940 	.word	0x40020940

08005d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b087      	sub	sp, #28
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005d42:	2300      	movs	r3, #0
 8005d44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005d46:	e15a      	b.n	8005ffe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	2101      	movs	r1, #1
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	fa01 f303 	lsl.w	r3, r1, r3
 8005d54:	4013      	ands	r3, r2
 8005d56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	f000 814c 	beq.w	8005ff8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f003 0303 	and.w	r3, r3, #3
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d005      	beq.n	8005d78 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d130      	bne.n	8005dda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	005b      	lsls	r3, r3, #1
 8005d82:	2203      	movs	r2, #3
 8005d84:	fa02 f303 	lsl.w	r3, r2, r3
 8005d88:	43db      	mvns	r3, r3
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	68da      	ldr	r2, [r3, #12]
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	005b      	lsls	r3, r3, #1
 8005d98:	fa02 f303 	lsl.w	r3, r2, r3
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005dae:	2201      	movs	r2, #1
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	fa02 f303 	lsl.w	r3, r2, r3
 8005db6:	43db      	mvns	r3, r3
 8005db8:	693a      	ldr	r2, [r7, #16]
 8005dba:	4013      	ands	r3, r2
 8005dbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	091b      	lsrs	r3, r3, #4
 8005dc4:	f003 0201 	and.w	r2, r3, #1
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	fa02 f303 	lsl.w	r3, r2, r3
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f003 0303 	and.w	r3, r3, #3
 8005de2:	2b03      	cmp	r3, #3
 8005de4:	d017      	beq.n	8005e16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	005b      	lsls	r3, r3, #1
 8005df0:	2203      	movs	r2, #3
 8005df2:	fa02 f303 	lsl.w	r3, r2, r3
 8005df6:	43db      	mvns	r3, r3
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	689a      	ldr	r2, [r3, #8]
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	005b      	lsls	r3, r3, #1
 8005e06:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f003 0303 	and.w	r3, r3, #3
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d123      	bne.n	8005e6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	08da      	lsrs	r2, r3, #3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	3208      	adds	r2, #8
 8005e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	f003 0307 	and.w	r3, r3, #7
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	220f      	movs	r2, #15
 8005e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3e:	43db      	mvns	r3, r3
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	4013      	ands	r3, r2
 8005e44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	691a      	ldr	r2, [r3, #16]
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	f003 0307 	and.w	r3, r3, #7
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	fa02 f303 	lsl.w	r3, r2, r3
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	08da      	lsrs	r2, r3, #3
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	3208      	adds	r2, #8
 8005e64:	6939      	ldr	r1, [r7, #16]
 8005e66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	005b      	lsls	r3, r3, #1
 8005e74:	2203      	movs	r2, #3
 8005e76:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7a:	43db      	mvns	r3, r3
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	4013      	ands	r3, r2
 8005e80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f003 0203 	and.w	r2, r3, #3
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	005b      	lsls	r3, r3, #1
 8005e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	f000 80a6 	beq.w	8005ff8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005eac:	4b5b      	ldr	r3, [pc, #364]	; (800601c <HAL_GPIO_Init+0x2e4>)
 8005eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eb0:	4a5a      	ldr	r2, [pc, #360]	; (800601c <HAL_GPIO_Init+0x2e4>)
 8005eb2:	f043 0301 	orr.w	r3, r3, #1
 8005eb6:	6613      	str	r3, [r2, #96]	; 0x60
 8005eb8:	4b58      	ldr	r3, [pc, #352]	; (800601c <HAL_GPIO_Init+0x2e4>)
 8005eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ebc:	f003 0301 	and.w	r3, r3, #1
 8005ec0:	60bb      	str	r3, [r7, #8]
 8005ec2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ec4:	4a56      	ldr	r2, [pc, #344]	; (8006020 <HAL_GPIO_Init+0x2e8>)
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	089b      	lsrs	r3, r3, #2
 8005eca:	3302      	adds	r3, #2
 8005ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f003 0303 	and.w	r3, r3, #3
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	220f      	movs	r2, #15
 8005edc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee0:	43db      	mvns	r3, r3
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005eee:	d01f      	beq.n	8005f30 <HAL_GPIO_Init+0x1f8>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a4c      	ldr	r2, [pc, #304]	; (8006024 <HAL_GPIO_Init+0x2ec>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d019      	beq.n	8005f2c <HAL_GPIO_Init+0x1f4>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a4b      	ldr	r2, [pc, #300]	; (8006028 <HAL_GPIO_Init+0x2f0>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d013      	beq.n	8005f28 <HAL_GPIO_Init+0x1f0>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a4a      	ldr	r2, [pc, #296]	; (800602c <HAL_GPIO_Init+0x2f4>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d00d      	beq.n	8005f24 <HAL_GPIO_Init+0x1ec>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a49      	ldr	r2, [pc, #292]	; (8006030 <HAL_GPIO_Init+0x2f8>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d007      	beq.n	8005f20 <HAL_GPIO_Init+0x1e8>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a48      	ldr	r2, [pc, #288]	; (8006034 <HAL_GPIO_Init+0x2fc>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d101      	bne.n	8005f1c <HAL_GPIO_Init+0x1e4>
 8005f18:	2305      	movs	r3, #5
 8005f1a:	e00a      	b.n	8005f32 <HAL_GPIO_Init+0x1fa>
 8005f1c:	2306      	movs	r3, #6
 8005f1e:	e008      	b.n	8005f32 <HAL_GPIO_Init+0x1fa>
 8005f20:	2304      	movs	r3, #4
 8005f22:	e006      	b.n	8005f32 <HAL_GPIO_Init+0x1fa>
 8005f24:	2303      	movs	r3, #3
 8005f26:	e004      	b.n	8005f32 <HAL_GPIO_Init+0x1fa>
 8005f28:	2302      	movs	r3, #2
 8005f2a:	e002      	b.n	8005f32 <HAL_GPIO_Init+0x1fa>
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e000      	b.n	8005f32 <HAL_GPIO_Init+0x1fa>
 8005f30:	2300      	movs	r3, #0
 8005f32:	697a      	ldr	r2, [r7, #20]
 8005f34:	f002 0203 	and.w	r2, r2, #3
 8005f38:	0092      	lsls	r2, r2, #2
 8005f3a:	4093      	lsls	r3, r2
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f42:	4937      	ldr	r1, [pc, #220]	; (8006020 <HAL_GPIO_Init+0x2e8>)
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	089b      	lsrs	r3, r3, #2
 8005f48:	3302      	adds	r3, #2
 8005f4a:	693a      	ldr	r2, [r7, #16]
 8005f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f50:	4b39      	ldr	r3, [pc, #228]	; (8006038 <HAL_GPIO_Init+0x300>)
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	43db      	mvns	r3, r3
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d003      	beq.n	8005f74 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005f6c:	693a      	ldr	r2, [r7, #16]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005f74:	4a30      	ldr	r2, [pc, #192]	; (8006038 <HAL_GPIO_Init+0x300>)
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005f7a:	4b2f      	ldr	r3, [pc, #188]	; (8006038 <HAL_GPIO_Init+0x300>)
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	43db      	mvns	r3, r3
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	4013      	ands	r3, r2
 8005f88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d003      	beq.n	8005f9e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005f9e:	4a26      	ldr	r2, [pc, #152]	; (8006038 <HAL_GPIO_Init+0x300>)
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005fa4:	4b24      	ldr	r3, [pc, #144]	; (8006038 <HAL_GPIO_Init+0x300>)
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	43db      	mvns	r3, r3
 8005fae:	693a      	ldr	r2, [r7, #16]
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d003      	beq.n	8005fc8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005fc8:	4a1b      	ldr	r2, [pc, #108]	; (8006038 <HAL_GPIO_Init+0x300>)
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005fce:	4b1a      	ldr	r3, [pc, #104]	; (8006038 <HAL_GPIO_Init+0x300>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	43db      	mvns	r3, r3
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	4013      	ands	r3, r2
 8005fdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d003      	beq.n	8005ff2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005ff2:	4a11      	ldr	r2, [pc, #68]	; (8006038 <HAL_GPIO_Init+0x300>)
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	fa22 f303 	lsr.w	r3, r2, r3
 8006008:	2b00      	cmp	r3, #0
 800600a:	f47f ae9d 	bne.w	8005d48 <HAL_GPIO_Init+0x10>
  }
}
 800600e:	bf00      	nop
 8006010:	bf00      	nop
 8006012:	371c      	adds	r7, #28
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr
 800601c:	40021000 	.word	0x40021000
 8006020:	40010000 	.word	0x40010000
 8006024:	48000400 	.word	0x48000400
 8006028:	48000800 	.word	0x48000800
 800602c:	48000c00 	.word	0x48000c00
 8006030:	48001000 	.word	0x48001000
 8006034:	48001400 	.word	0x48001400
 8006038:	40010400 	.word	0x40010400

0800603c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	460b      	mov	r3, r1
 8006046:	807b      	strh	r3, [r7, #2]
 8006048:	4613      	mov	r3, r2
 800604a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800604c:	787b      	ldrb	r3, [r7, #1]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d003      	beq.n	800605a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006052:	887a      	ldrh	r2, [r7, #2]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006058:	e002      	b.n	8006060 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800605a:	887a      	ldrh	r2, [r7, #2]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	460b      	mov	r3, r1
 8006076:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	695b      	ldr	r3, [r3, #20]
 800607c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800607e:	887a      	ldrh	r2, [r7, #2]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	4013      	ands	r3, r2
 8006084:	041a      	lsls	r2, r3, #16
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	43d9      	mvns	r1, r3
 800608a:	887b      	ldrh	r3, [r7, #2]
 800608c:	400b      	ands	r3, r1
 800608e:	431a      	orrs	r2, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	619a      	str	r2, [r3, #24]
}
 8006094:	bf00      	nop
 8006096:	3714      	adds	r7, #20
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b082      	sub	sp, #8
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	4603      	mov	r3, r0
 80060a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80060aa:	4b08      	ldr	r3, [pc, #32]	; (80060cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80060ac:	695a      	ldr	r2, [r3, #20]
 80060ae:	88fb      	ldrh	r3, [r7, #6]
 80060b0:	4013      	ands	r3, r2
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d006      	beq.n	80060c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80060b6:	4a05      	ldr	r2, [pc, #20]	; (80060cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80060b8:	88fb      	ldrh	r3, [r7, #6]
 80060ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80060bc:	88fb      	ldrh	r3, [r7, #6]
 80060be:	4618      	mov	r0, r3
 80060c0:	f000 f806 	bl	80060d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80060c4:	bf00      	nop
 80060c6:	3708      	adds	r7, #8
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	40010400 	.word	0x40010400

080060d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	4603      	mov	r3, r0
 80060d8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80060da:	bf00      	nop
 80060dc:	370c      	adds	r7, #12
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr

080060e6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b082      	sub	sp, #8
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d101      	bne.n	80060f8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e081      	b.n	80061fc <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	2b00      	cmp	r3, #0
 8006102:	d106      	bne.n	8006112 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f7fc fb89 	bl	8002824 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2224      	movs	r2, #36	; 0x24
 8006116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f022 0201 	bic.w	r2, r2, #1
 8006128:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685a      	ldr	r2, [r3, #4]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006136:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689a      	ldr	r2, [r3, #8]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006146:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	2b01      	cmp	r3, #1
 800614e:	d107      	bne.n	8006160 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	689a      	ldr	r2, [r3, #8]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800615c:	609a      	str	r2, [r3, #8]
 800615e:	e006      	b.n	800616e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	689a      	ldr	r2, [r3, #8]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800616c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	2b02      	cmp	r3, #2
 8006174:	d104      	bne.n	8006180 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800617e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	6812      	ldr	r2, [r2, #0]
 800618a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800618e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006192:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68da      	ldr	r2, [r3, #12]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061a2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	691a      	ldr	r2, [r3, #16]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	695b      	ldr	r3, [r3, #20]
 80061ac:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	699b      	ldr	r3, [r3, #24]
 80061b4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	430a      	orrs	r2, r1
 80061bc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	69d9      	ldr	r1, [r3, #28]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a1a      	ldr	r2, [r3, #32]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	430a      	orrs	r2, r1
 80061cc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f042 0201 	orr.w	r2, r2, #1
 80061dc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2220      	movs	r2, #32
 80061e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3708      	adds	r7, #8
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b088      	sub	sp, #32
 8006208:	af02      	add	r7, sp, #8
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	4608      	mov	r0, r1
 800620e:	4611      	mov	r1, r2
 8006210:	461a      	mov	r2, r3
 8006212:	4603      	mov	r3, r0
 8006214:	817b      	strh	r3, [r7, #10]
 8006216:	460b      	mov	r3, r1
 8006218:	813b      	strh	r3, [r7, #8]
 800621a:	4613      	mov	r3, r2
 800621c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b20      	cmp	r3, #32
 8006228:	f040 80f9 	bne.w	800641e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d002      	beq.n	8006238 <HAL_I2C_Mem_Write+0x34>
 8006232:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006234:	2b00      	cmp	r3, #0
 8006236:	d105      	bne.n	8006244 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800623e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e0ed      	b.n	8006420 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800624a:	2b01      	cmp	r3, #1
 800624c:	d101      	bne.n	8006252 <HAL_I2C_Mem_Write+0x4e>
 800624e:	2302      	movs	r3, #2
 8006250:	e0e6      	b.n	8006420 <HAL_I2C_Mem_Write+0x21c>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2201      	movs	r2, #1
 8006256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800625a:	f7fd ff21 	bl	80040a0 <HAL_GetTick>
 800625e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	9300      	str	r3, [sp, #0]
 8006264:	2319      	movs	r3, #25
 8006266:	2201      	movs	r2, #1
 8006268:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800626c:	68f8      	ldr	r0, [r7, #12]
 800626e:	f000 fac3 	bl	80067f8 <I2C_WaitOnFlagUntilTimeout>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d001      	beq.n	800627c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e0d1      	b.n	8006420 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2221      	movs	r2, #33	; 0x21
 8006280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2240      	movs	r2, #64	; 0x40
 8006288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6a3a      	ldr	r2, [r7, #32]
 8006296:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800629c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80062a4:	88f8      	ldrh	r0, [r7, #6]
 80062a6:	893a      	ldrh	r2, [r7, #8]
 80062a8:	8979      	ldrh	r1, [r7, #10]
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	9301      	str	r3, [sp, #4]
 80062ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b0:	9300      	str	r3, [sp, #0]
 80062b2:	4603      	mov	r3, r0
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	f000 f9d3 	bl	8006660 <I2C_RequestMemoryWrite>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d005      	beq.n	80062cc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e0a9      	b.n	8006420 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	2bff      	cmp	r3, #255	; 0xff
 80062d4:	d90e      	bls.n	80062f4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	22ff      	movs	r2, #255	; 0xff
 80062da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062e0:	b2da      	uxtb	r2, r3
 80062e2:	8979      	ldrh	r1, [r7, #10]
 80062e4:	2300      	movs	r3, #0
 80062e6:	9300      	str	r3, [sp, #0]
 80062e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f000 fc2b 	bl	8006b48 <I2C_TransferConfig>
 80062f2:	e00f      	b.n	8006314 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006302:	b2da      	uxtb	r2, r3
 8006304:	8979      	ldrh	r1, [r7, #10]
 8006306:	2300      	movs	r3, #0
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f000 fc1a 	bl	8006b48 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006314:	697a      	ldr	r2, [r7, #20]
 8006316:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	f000 faad 	bl	8006878 <I2C_WaitOnTXISFlagUntilTimeout>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d001      	beq.n	8006328 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e07b      	b.n	8006420 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632c:	781a      	ldrb	r2, [r3, #0]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006338:	1c5a      	adds	r2, r3, #1
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006342:	b29b      	uxth	r3, r3
 8006344:	3b01      	subs	r3, #1
 8006346:	b29a      	uxth	r2, r3
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006350:	3b01      	subs	r3, #1
 8006352:	b29a      	uxth	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800635c:	b29b      	uxth	r3, r3
 800635e:	2b00      	cmp	r3, #0
 8006360:	d034      	beq.n	80063cc <HAL_I2C_Mem_Write+0x1c8>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006366:	2b00      	cmp	r3, #0
 8006368:	d130      	bne.n	80063cc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	9300      	str	r3, [sp, #0]
 800636e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006370:	2200      	movs	r2, #0
 8006372:	2180      	movs	r1, #128	; 0x80
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f000 fa3f 	bl	80067f8 <I2C_WaitOnFlagUntilTimeout>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d001      	beq.n	8006384 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e04d      	b.n	8006420 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006388:	b29b      	uxth	r3, r3
 800638a:	2bff      	cmp	r3, #255	; 0xff
 800638c:	d90e      	bls.n	80063ac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	22ff      	movs	r2, #255	; 0xff
 8006392:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006398:	b2da      	uxtb	r2, r3
 800639a:	8979      	ldrh	r1, [r7, #10]
 800639c:	2300      	movs	r3, #0
 800639e:	9300      	str	r3, [sp, #0]
 80063a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f000 fbcf 	bl	8006b48 <I2C_TransferConfig>
 80063aa:	e00f      	b.n	80063cc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ba:	b2da      	uxtb	r2, r3
 80063bc:	8979      	ldrh	r1, [r7, #10]
 80063be:	2300      	movs	r3, #0
 80063c0:	9300      	str	r3, [sp, #0]
 80063c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f000 fbbe 	bl	8006b48 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d19e      	bne.n	8006314 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	f000 fa8c 	bl	80068f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d001      	beq.n	80063ea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e01a      	b.n	8006420 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2220      	movs	r2, #32
 80063f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	6859      	ldr	r1, [r3, #4]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	4b0a      	ldr	r3, [pc, #40]	; (8006428 <HAL_I2C_Mem_Write+0x224>)
 80063fe:	400b      	ands	r3, r1
 8006400:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2220      	movs	r2, #32
 8006406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800641a:	2300      	movs	r3, #0
 800641c:	e000      	b.n	8006420 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800641e:	2302      	movs	r3, #2
  }
}
 8006420:	4618      	mov	r0, r3
 8006422:	3718      	adds	r7, #24
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	fe00e800 	.word	0xfe00e800

0800642c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b088      	sub	sp, #32
 8006430:	af02      	add	r7, sp, #8
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	4608      	mov	r0, r1
 8006436:	4611      	mov	r1, r2
 8006438:	461a      	mov	r2, r3
 800643a:	4603      	mov	r3, r0
 800643c:	817b      	strh	r3, [r7, #10]
 800643e:	460b      	mov	r3, r1
 8006440:	813b      	strh	r3, [r7, #8]
 8006442:	4613      	mov	r3, r2
 8006444:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b20      	cmp	r3, #32
 8006450:	f040 80fd 	bne.w	800664e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006454:	6a3b      	ldr	r3, [r7, #32]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d002      	beq.n	8006460 <HAL_I2C_Mem_Read+0x34>
 800645a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800645c:	2b00      	cmp	r3, #0
 800645e:	d105      	bne.n	800646c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006466:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e0f1      	b.n	8006650 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006472:	2b01      	cmp	r3, #1
 8006474:	d101      	bne.n	800647a <HAL_I2C_Mem_Read+0x4e>
 8006476:	2302      	movs	r3, #2
 8006478:	e0ea      	b.n	8006650 <HAL_I2C_Mem_Read+0x224>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2201      	movs	r2, #1
 800647e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006482:	f7fd fe0d 	bl	80040a0 <HAL_GetTick>
 8006486:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	9300      	str	r3, [sp, #0]
 800648c:	2319      	movs	r3, #25
 800648e:	2201      	movs	r2, #1
 8006490:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006494:	68f8      	ldr	r0, [r7, #12]
 8006496:	f000 f9af 	bl	80067f8 <I2C_WaitOnFlagUntilTimeout>
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d001      	beq.n	80064a4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e0d5      	b.n	8006650 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2222      	movs	r2, #34	; 0x22
 80064a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2240      	movs	r2, #64	; 0x40
 80064b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2200      	movs	r2, #0
 80064b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6a3a      	ldr	r2, [r7, #32]
 80064be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80064c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80064cc:	88f8      	ldrh	r0, [r7, #6]
 80064ce:	893a      	ldrh	r2, [r7, #8]
 80064d0:	8979      	ldrh	r1, [r7, #10]
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	9301      	str	r3, [sp, #4]
 80064d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d8:	9300      	str	r3, [sp, #0]
 80064da:	4603      	mov	r3, r0
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f000 f913 	bl	8006708 <I2C_RequestMemoryRead>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d005      	beq.n	80064f4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e0ad      	b.n	8006650 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	2bff      	cmp	r3, #255	; 0xff
 80064fc:	d90e      	bls.n	800651c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	22ff      	movs	r2, #255	; 0xff
 8006502:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006508:	b2da      	uxtb	r2, r3
 800650a:	8979      	ldrh	r1, [r7, #10]
 800650c:	4b52      	ldr	r3, [pc, #328]	; (8006658 <HAL_I2C_Mem_Read+0x22c>)
 800650e:	9300      	str	r3, [sp, #0]
 8006510:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006514:	68f8      	ldr	r0, [r7, #12]
 8006516:	f000 fb17 	bl	8006b48 <I2C_TransferConfig>
 800651a:	e00f      	b.n	800653c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006520:	b29a      	uxth	r2, r3
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800652a:	b2da      	uxtb	r2, r3
 800652c:	8979      	ldrh	r1, [r7, #10]
 800652e:	4b4a      	ldr	r3, [pc, #296]	; (8006658 <HAL_I2C_Mem_Read+0x22c>)
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006536:	68f8      	ldr	r0, [r7, #12]
 8006538:	f000 fb06 	bl	8006b48 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	9300      	str	r3, [sp, #0]
 8006540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006542:	2200      	movs	r2, #0
 8006544:	2104      	movs	r1, #4
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f000 f956 	bl	80067f8 <I2C_WaitOnFlagUntilTimeout>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d001      	beq.n	8006556 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e07c      	b.n	8006650 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006560:	b2d2      	uxtb	r2, r2
 8006562:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006568:	1c5a      	adds	r2, r3, #1
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006572:	3b01      	subs	r3, #1
 8006574:	b29a      	uxth	r2, r3
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800657e:	b29b      	uxth	r3, r3
 8006580:	3b01      	subs	r3, #1
 8006582:	b29a      	uxth	r2, r3
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800658c:	b29b      	uxth	r3, r3
 800658e:	2b00      	cmp	r3, #0
 8006590:	d034      	beq.n	80065fc <HAL_I2C_Mem_Read+0x1d0>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006596:	2b00      	cmp	r3, #0
 8006598:	d130      	bne.n	80065fc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	9300      	str	r3, [sp, #0]
 800659e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a0:	2200      	movs	r2, #0
 80065a2:	2180      	movs	r1, #128	; 0x80
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f000 f927 	bl	80067f8 <I2C_WaitOnFlagUntilTimeout>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d001      	beq.n	80065b4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e04d      	b.n	8006650 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	2bff      	cmp	r3, #255	; 0xff
 80065bc:	d90e      	bls.n	80065dc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	22ff      	movs	r2, #255	; 0xff
 80065c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065c8:	b2da      	uxtb	r2, r3
 80065ca:	8979      	ldrh	r1, [r7, #10]
 80065cc:	2300      	movs	r3, #0
 80065ce:	9300      	str	r3, [sp, #0]
 80065d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	f000 fab7 	bl	8006b48 <I2C_TransferConfig>
 80065da:	e00f      	b.n	80065fc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065e0:	b29a      	uxth	r2, r3
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ea:	b2da      	uxtb	r2, r3
 80065ec:	8979      	ldrh	r1, [r7, #10]
 80065ee:	2300      	movs	r3, #0
 80065f0:	9300      	str	r3, [sp, #0]
 80065f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f000 faa6 	bl	8006b48 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006600:	b29b      	uxth	r3, r3
 8006602:	2b00      	cmp	r3, #0
 8006604:	d19a      	bne.n	800653c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006606:	697a      	ldr	r2, [r7, #20]
 8006608:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f000 f974 	bl	80068f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d001      	beq.n	800661a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e01a      	b.n	8006650 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2220      	movs	r2, #32
 8006620:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	6859      	ldr	r1, [r3, #4]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	4b0b      	ldr	r3, [pc, #44]	; (800665c <HAL_I2C_Mem_Read+0x230>)
 800662e:	400b      	ands	r3, r1
 8006630:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2220      	movs	r2, #32
 8006636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800664a:	2300      	movs	r3, #0
 800664c:	e000      	b.n	8006650 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800664e:	2302      	movs	r3, #2
  }
}
 8006650:	4618      	mov	r0, r3
 8006652:	3718      	adds	r7, #24
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	80002400 	.word	0x80002400
 800665c:	fe00e800 	.word	0xfe00e800

08006660 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b086      	sub	sp, #24
 8006664:	af02      	add	r7, sp, #8
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	4608      	mov	r0, r1
 800666a:	4611      	mov	r1, r2
 800666c:	461a      	mov	r2, r3
 800666e:	4603      	mov	r3, r0
 8006670:	817b      	strh	r3, [r7, #10]
 8006672:	460b      	mov	r3, r1
 8006674:	813b      	strh	r3, [r7, #8]
 8006676:	4613      	mov	r3, r2
 8006678:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800667a:	88fb      	ldrh	r3, [r7, #6]
 800667c:	b2da      	uxtb	r2, r3
 800667e:	8979      	ldrh	r1, [r7, #10]
 8006680:	4b20      	ldr	r3, [pc, #128]	; (8006704 <I2C_RequestMemoryWrite+0xa4>)
 8006682:	9300      	str	r3, [sp, #0]
 8006684:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f000 fa5d 	bl	8006b48 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800668e:	69fa      	ldr	r2, [r7, #28]
 8006690:	69b9      	ldr	r1, [r7, #24]
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	f000 f8f0 	bl	8006878 <I2C_WaitOnTXISFlagUntilTimeout>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d001      	beq.n	80066a2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e02c      	b.n	80066fc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80066a2:	88fb      	ldrh	r3, [r7, #6]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d105      	bne.n	80066b4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80066a8:	893b      	ldrh	r3, [r7, #8]
 80066aa:	b2da      	uxtb	r2, r3
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	629a      	str	r2, [r3, #40]	; 0x28
 80066b2:	e015      	b.n	80066e0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80066b4:	893b      	ldrh	r3, [r7, #8]
 80066b6:	0a1b      	lsrs	r3, r3, #8
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	b2da      	uxtb	r2, r3
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066c2:	69fa      	ldr	r2, [r7, #28]
 80066c4:	69b9      	ldr	r1, [r7, #24]
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	f000 f8d6 	bl	8006878 <I2C_WaitOnTXISFlagUntilTimeout>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d001      	beq.n	80066d6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e012      	b.n	80066fc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80066d6:	893b      	ldrh	r3, [r7, #8]
 80066d8:	b2da      	uxtb	r2, r3
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	2200      	movs	r2, #0
 80066e8:	2180      	movs	r1, #128	; 0x80
 80066ea:	68f8      	ldr	r0, [r7, #12]
 80066ec:	f000 f884 	bl	80067f8 <I2C_WaitOnFlagUntilTimeout>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d001      	beq.n	80066fa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e000      	b.n	80066fc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3710      	adds	r7, #16
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	80002000 	.word	0x80002000

08006708 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b086      	sub	sp, #24
 800670c:	af02      	add	r7, sp, #8
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	4608      	mov	r0, r1
 8006712:	4611      	mov	r1, r2
 8006714:	461a      	mov	r2, r3
 8006716:	4603      	mov	r3, r0
 8006718:	817b      	strh	r3, [r7, #10]
 800671a:	460b      	mov	r3, r1
 800671c:	813b      	strh	r3, [r7, #8]
 800671e:	4613      	mov	r3, r2
 8006720:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006722:	88fb      	ldrh	r3, [r7, #6]
 8006724:	b2da      	uxtb	r2, r3
 8006726:	8979      	ldrh	r1, [r7, #10]
 8006728:	4b20      	ldr	r3, [pc, #128]	; (80067ac <I2C_RequestMemoryRead+0xa4>)
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	2300      	movs	r3, #0
 800672e:	68f8      	ldr	r0, [r7, #12]
 8006730:	f000 fa0a 	bl	8006b48 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006734:	69fa      	ldr	r2, [r7, #28]
 8006736:	69b9      	ldr	r1, [r7, #24]
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f000 f89d 	bl	8006878 <I2C_WaitOnTXISFlagUntilTimeout>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d001      	beq.n	8006748 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	e02c      	b.n	80067a2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006748:	88fb      	ldrh	r3, [r7, #6]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d105      	bne.n	800675a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800674e:	893b      	ldrh	r3, [r7, #8]
 8006750:	b2da      	uxtb	r2, r3
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	629a      	str	r2, [r3, #40]	; 0x28
 8006758:	e015      	b.n	8006786 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800675a:	893b      	ldrh	r3, [r7, #8]
 800675c:	0a1b      	lsrs	r3, r3, #8
 800675e:	b29b      	uxth	r3, r3
 8006760:	b2da      	uxtb	r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006768:	69fa      	ldr	r2, [r7, #28]
 800676a:	69b9      	ldr	r1, [r7, #24]
 800676c:	68f8      	ldr	r0, [r7, #12]
 800676e:	f000 f883 	bl	8006878 <I2C_WaitOnTXISFlagUntilTimeout>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d001      	beq.n	800677c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e012      	b.n	80067a2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800677c:	893b      	ldrh	r3, [r7, #8]
 800677e:	b2da      	uxtb	r2, r3
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	9300      	str	r3, [sp, #0]
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	2200      	movs	r2, #0
 800678e:	2140      	movs	r1, #64	; 0x40
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f000 f831 	bl	80067f8 <I2C_WaitOnFlagUntilTimeout>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d001      	beq.n	80067a0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	e000      	b.n	80067a2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3710      	adds	r7, #16
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	80002000 	.word	0x80002000

080067b0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	699b      	ldr	r3, [r3, #24]
 80067be:	f003 0302 	and.w	r3, r3, #2
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	d103      	bne.n	80067ce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2200      	movs	r2, #0
 80067cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	699b      	ldr	r3, [r3, #24]
 80067d4:	f003 0301 	and.w	r3, r3, #1
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d007      	beq.n	80067ec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	699a      	ldr	r2, [r3, #24]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f042 0201 	orr.w	r2, r2, #1
 80067ea:	619a      	str	r2, [r3, #24]
  }
}
 80067ec:	bf00      	nop
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	603b      	str	r3, [r7, #0]
 8006804:	4613      	mov	r3, r2
 8006806:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006808:	e022      	b.n	8006850 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006810:	d01e      	beq.n	8006850 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006812:	f7fd fc45 	bl	80040a0 <HAL_GetTick>
 8006816:	4602      	mov	r2, r0
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	683a      	ldr	r2, [r7, #0]
 800681e:	429a      	cmp	r2, r3
 8006820:	d302      	bcc.n	8006828 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d113      	bne.n	8006850 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800682c:	f043 0220 	orr.w	r2, r3, #32
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2220      	movs	r2, #32
 8006838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e00f      	b.n	8006870 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	699a      	ldr	r2, [r3, #24]
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	4013      	ands	r3, r2
 800685a:	68ba      	ldr	r2, [r7, #8]
 800685c:	429a      	cmp	r2, r3
 800685e:	bf0c      	ite	eq
 8006860:	2301      	moveq	r3, #1
 8006862:	2300      	movne	r3, #0
 8006864:	b2db      	uxtb	r3, r3
 8006866:	461a      	mov	r2, r3
 8006868:	79fb      	ldrb	r3, [r7, #7]
 800686a:	429a      	cmp	r2, r3
 800686c:	d0cd      	beq.n	800680a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006884:	e02c      	b.n	80068e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	68b9      	ldr	r1, [r7, #8]
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	f000 f870 	bl	8006970 <I2C_IsErrorOccurred>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d001      	beq.n	800689a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e02a      	b.n	80068f0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a0:	d01e      	beq.n	80068e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068a2:	f7fd fbfd 	bl	80040a0 <HAL_GetTick>
 80068a6:	4602      	mov	r2, r0
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	68ba      	ldr	r2, [r7, #8]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d302      	bcc.n	80068b8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d113      	bne.n	80068e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068bc:	f043 0220 	orr.w	r2, r3, #32
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2220      	movs	r2, #32
 80068c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e007      	b.n	80068f0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	f003 0302 	and.w	r3, r3, #2
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d1cb      	bne.n	8006886 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006904:	e028      	b.n	8006958 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	68b9      	ldr	r1, [r7, #8]
 800690a:	68f8      	ldr	r0, [r7, #12]
 800690c:	f000 f830 	bl	8006970 <I2C_IsErrorOccurred>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d001      	beq.n	800691a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e026      	b.n	8006968 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800691a:	f7fd fbc1 	bl	80040a0 <HAL_GetTick>
 800691e:	4602      	mov	r2, r0
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	68ba      	ldr	r2, [r7, #8]
 8006926:	429a      	cmp	r2, r3
 8006928:	d302      	bcc.n	8006930 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d113      	bne.n	8006958 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006934:	f043 0220 	orr.w	r2, r3, #32
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2220      	movs	r2, #32
 8006940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2200      	movs	r2, #0
 8006948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e007      	b.n	8006968 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	f003 0320 	and.w	r3, r3, #32
 8006962:	2b20      	cmp	r3, #32
 8006964:	d1cf      	bne.n	8006906 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	3710      	adds	r7, #16
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b08a      	sub	sp, #40	; 0x28
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800697c:	2300      	movs	r3, #0
 800697e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800698a:	2300      	movs	r3, #0
 800698c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	f003 0310 	and.w	r3, r3, #16
 8006998:	2b00      	cmp	r3, #0
 800699a:	d075      	beq.n	8006a88 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2210      	movs	r2, #16
 80069a2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80069a4:	e056      	b.n	8006a54 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ac:	d052      	beq.n	8006a54 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80069ae:	f7fd fb77 	bl	80040a0 <HAL_GetTick>
 80069b2:	4602      	mov	r2, r0
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	68ba      	ldr	r2, [r7, #8]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d302      	bcc.n	80069c4 <I2C_IsErrorOccurred+0x54>
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d147      	bne.n	8006a54 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069ce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80069d6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	699b      	ldr	r3, [r3, #24]
 80069de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069e6:	d12e      	bne.n	8006a46 <I2C_IsErrorOccurred+0xd6>
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069ee:	d02a      	beq.n	8006a46 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80069f0:	7cfb      	ldrb	r3, [r7, #19]
 80069f2:	2b20      	cmp	r3, #32
 80069f4:	d027      	beq.n	8006a46 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	685a      	ldr	r2, [r3, #4]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a04:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006a06:	f7fd fb4b 	bl	80040a0 <HAL_GetTick>
 8006a0a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a0c:	e01b      	b.n	8006a46 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006a0e:	f7fd fb47 	bl	80040a0 <HAL_GetTick>
 8006a12:	4602      	mov	r2, r0
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	2b19      	cmp	r3, #25
 8006a1a:	d914      	bls.n	8006a46 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a20:	f043 0220 	orr.w	r2, r3, #32
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2220      	movs	r2, #32
 8006a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	699b      	ldr	r3, [r3, #24]
 8006a4c:	f003 0320 	and.w	r3, r3, #32
 8006a50:	2b20      	cmp	r3, #32
 8006a52:	d1dc      	bne.n	8006a0e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	699b      	ldr	r3, [r3, #24]
 8006a5a:	f003 0320 	and.w	r3, r3, #32
 8006a5e:	2b20      	cmp	r3, #32
 8006a60:	d003      	beq.n	8006a6a <I2C_IsErrorOccurred+0xfa>
 8006a62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d09d      	beq.n	80069a6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006a6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d103      	bne.n	8006a7a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2220      	movs	r2, #32
 8006a78:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006a7a:	6a3b      	ldr	r3, [r7, #32]
 8006a7c:	f043 0304 	orr.w	r3, r3, #4
 8006a80:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	699b      	ldr	r3, [r3, #24]
 8006a8e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00b      	beq.n	8006ab2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006a9a:	6a3b      	ldr	r3, [r7, #32]
 8006a9c:	f043 0301 	orr.w	r3, r3, #1
 8006aa0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006aaa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00b      	beq.n	8006ad4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006abc:	6a3b      	ldr	r3, [r7, #32]
 8006abe:	f043 0308 	orr.w	r3, r3, #8
 8006ac2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006acc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00b      	beq.n	8006af6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006ade:	6a3b      	ldr	r3, [r7, #32]
 8006ae0:	f043 0302 	orr.w	r3, r3, #2
 8006ae4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006aee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006af6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d01c      	beq.n	8006b38 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	f7ff fe56 	bl	80067b0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	6859      	ldr	r1, [r3, #4]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	4b0d      	ldr	r3, [pc, #52]	; (8006b44 <I2C_IsErrorOccurred+0x1d4>)
 8006b10:	400b      	ands	r3, r1
 8006b12:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b18:	6a3b      	ldr	r3, [r7, #32]
 8006b1a:	431a      	orrs	r2, r3
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2220      	movs	r2, #32
 8006b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006b38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3728      	adds	r7, #40	; 0x28
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	fe00e800 	.word	0xfe00e800

08006b48 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b087      	sub	sp, #28
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	607b      	str	r3, [r7, #4]
 8006b52:	460b      	mov	r3, r1
 8006b54:	817b      	strh	r3, [r7, #10]
 8006b56:	4613      	mov	r3, r2
 8006b58:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b5a:	897b      	ldrh	r3, [r7, #10]
 8006b5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b60:	7a7b      	ldrb	r3, [r7, #9]
 8006b62:	041b      	lsls	r3, r3, #16
 8006b64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b68:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b6e:	6a3b      	ldr	r3, [r7, #32]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b76:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	685a      	ldr	r2, [r3, #4]
 8006b7e:	6a3b      	ldr	r3, [r7, #32]
 8006b80:	0d5b      	lsrs	r3, r3, #21
 8006b82:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006b86:	4b08      	ldr	r3, [pc, #32]	; (8006ba8 <I2C_TransferConfig+0x60>)
 8006b88:	430b      	orrs	r3, r1
 8006b8a:	43db      	mvns	r3, r3
 8006b8c:	ea02 0103 	and.w	r1, r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	697a      	ldr	r2, [r7, #20]
 8006b96:	430a      	orrs	r2, r1
 8006b98:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006b9a:	bf00      	nop
 8006b9c:	371c      	adds	r7, #28
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	03ff63ff 	.word	0x03ff63ff

08006bac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b20      	cmp	r3, #32
 8006bc0:	d138      	bne.n	8006c34 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d101      	bne.n	8006bd0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006bcc:	2302      	movs	r3, #2
 8006bce:	e032      	b.n	8006c36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2224      	movs	r2, #36	; 0x24
 8006bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f022 0201 	bic.w	r2, r2, #1
 8006bee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006bfe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	6819      	ldr	r1, [r3, #0]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	683a      	ldr	r2, [r7, #0]
 8006c0c:	430a      	orrs	r2, r1
 8006c0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f042 0201 	orr.w	r2, r2, #1
 8006c1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2220      	movs	r2, #32
 8006c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c30:	2300      	movs	r3, #0
 8006c32:	e000      	b.n	8006c36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006c34:	2302      	movs	r3, #2
  }
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	370c      	adds	r7, #12
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr

08006c42 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006c42:	b480      	push	{r7}
 8006c44:	b085      	sub	sp, #20
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
 8006c4a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	2b20      	cmp	r3, #32
 8006c56:	d139      	bne.n	8006ccc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d101      	bne.n	8006c66 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006c62:	2302      	movs	r3, #2
 8006c64:	e033      	b.n	8006cce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2224      	movs	r2, #36	; 0x24
 8006c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f022 0201 	bic.w	r2, r2, #1
 8006c84:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006c94:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	021b      	lsls	r3, r3, #8
 8006c9a:	68fa      	ldr	r2, [r7, #12]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f042 0201 	orr.w	r2, r2, #1
 8006cb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2220      	movs	r2, #32
 8006cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	e000      	b.n	8006cce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006ccc:	2302      	movs	r3, #2
  }
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3714      	adds	r7, #20
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr

08006cda <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006cda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cdc:	b08b      	sub	sp, #44	; 0x2c
 8006cde:	af06      	add	r7, sp, #24
 8006ce0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d101      	bne.n	8006cec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e0d7      	b.n	8006e9c <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d106      	bne.n	8006d06 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f00c f913 	bl	8012f2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2203      	movs	r2, #3
 8006d0a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4618      	mov	r0, r3
 8006d14:	f005 ff41 	bl	800cb9a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d18:	2300      	movs	r3, #0
 8006d1a:	73fb      	strb	r3, [r7, #15]
 8006d1c:	e04c      	b.n	8006db8 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006d1e:	7bfb      	ldrb	r3, [r7, #15]
 8006d20:	6879      	ldr	r1, [r7, #4]
 8006d22:	1c5a      	adds	r2, r3, #1
 8006d24:	4613      	mov	r3, r2
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4413      	add	r3, r2
 8006d2a:	00db      	lsls	r3, r3, #3
 8006d2c:	440b      	add	r3, r1
 8006d2e:	3301      	adds	r3, #1
 8006d30:	2201      	movs	r2, #1
 8006d32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006d34:	7bfb      	ldrb	r3, [r7, #15]
 8006d36:	6879      	ldr	r1, [r7, #4]
 8006d38:	1c5a      	adds	r2, r3, #1
 8006d3a:	4613      	mov	r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	4413      	add	r3, r2
 8006d40:	00db      	lsls	r3, r3, #3
 8006d42:	440b      	add	r3, r1
 8006d44:	7bfa      	ldrb	r2, [r7, #15]
 8006d46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006d48:	7bfa      	ldrb	r2, [r7, #15]
 8006d4a:	7bfb      	ldrb	r3, [r7, #15]
 8006d4c:	b298      	uxth	r0, r3
 8006d4e:	6879      	ldr	r1, [r7, #4]
 8006d50:	4613      	mov	r3, r2
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	4413      	add	r3, r2
 8006d56:	00db      	lsls	r3, r3, #3
 8006d58:	440b      	add	r3, r1
 8006d5a:	3336      	adds	r3, #54	; 0x36
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006d60:	7bfb      	ldrb	r3, [r7, #15]
 8006d62:	6879      	ldr	r1, [r7, #4]
 8006d64:	1c5a      	adds	r2, r3, #1
 8006d66:	4613      	mov	r3, r2
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4413      	add	r3, r2
 8006d6c:	00db      	lsls	r3, r3, #3
 8006d6e:	440b      	add	r3, r1
 8006d70:	3303      	adds	r3, #3
 8006d72:	2200      	movs	r2, #0
 8006d74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006d76:	7bfa      	ldrb	r2, [r7, #15]
 8006d78:	6879      	ldr	r1, [r7, #4]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	4413      	add	r3, r2
 8006d80:	00db      	lsls	r3, r3, #3
 8006d82:	440b      	add	r3, r1
 8006d84:	3338      	adds	r3, #56	; 0x38
 8006d86:	2200      	movs	r2, #0
 8006d88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006d8a:	7bfa      	ldrb	r2, [r7, #15]
 8006d8c:	6879      	ldr	r1, [r7, #4]
 8006d8e:	4613      	mov	r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	4413      	add	r3, r2
 8006d94:	00db      	lsls	r3, r3, #3
 8006d96:	440b      	add	r3, r1
 8006d98:	333c      	adds	r3, #60	; 0x3c
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006d9e:	7bfa      	ldrb	r2, [r7, #15]
 8006da0:	6879      	ldr	r1, [r7, #4]
 8006da2:	4613      	mov	r3, r2
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	4413      	add	r3, r2
 8006da8:	00db      	lsls	r3, r3, #3
 8006daa:	440b      	add	r3, r1
 8006dac:	3340      	adds	r3, #64	; 0x40
 8006dae:	2200      	movs	r2, #0
 8006db0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006db2:	7bfb      	ldrb	r3, [r7, #15]
 8006db4:	3301      	adds	r3, #1
 8006db6:	73fb      	strb	r3, [r7, #15]
 8006db8:	7bfa      	ldrb	r2, [r7, #15]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d3ad      	bcc.n	8006d1e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	73fb      	strb	r3, [r7, #15]
 8006dc6:	e044      	b.n	8006e52 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006dc8:	7bfa      	ldrb	r2, [r7, #15]
 8006dca:	6879      	ldr	r1, [r7, #4]
 8006dcc:	4613      	mov	r3, r2
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	4413      	add	r3, r2
 8006dd2:	00db      	lsls	r3, r3, #3
 8006dd4:	440b      	add	r3, r1
 8006dd6:	f203 1369 	addw	r3, r3, #361	; 0x169
 8006dda:	2200      	movs	r2, #0
 8006ddc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006dde:	7bfa      	ldrb	r2, [r7, #15]
 8006de0:	6879      	ldr	r1, [r7, #4]
 8006de2:	4613      	mov	r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	4413      	add	r3, r2
 8006de8:	00db      	lsls	r3, r3, #3
 8006dea:	440b      	add	r3, r1
 8006dec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006df0:	7bfa      	ldrb	r2, [r7, #15]
 8006df2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006df4:	7bfa      	ldrb	r2, [r7, #15]
 8006df6:	6879      	ldr	r1, [r7, #4]
 8006df8:	4613      	mov	r3, r2
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	4413      	add	r3, r2
 8006dfe:	00db      	lsls	r3, r3, #3
 8006e00:	440b      	add	r3, r1
 8006e02:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8006e06:	2200      	movs	r2, #0
 8006e08:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006e0a:	7bfa      	ldrb	r2, [r7, #15]
 8006e0c:	6879      	ldr	r1, [r7, #4]
 8006e0e:	4613      	mov	r3, r2
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	4413      	add	r3, r2
 8006e14:	00db      	lsls	r3, r3, #3
 8006e16:	440b      	add	r3, r1
 8006e18:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006e20:	7bfa      	ldrb	r2, [r7, #15]
 8006e22:	6879      	ldr	r1, [r7, #4]
 8006e24:	4613      	mov	r3, r2
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	4413      	add	r3, r2
 8006e2a:	00db      	lsls	r3, r3, #3
 8006e2c:	440b      	add	r3, r1
 8006e2e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8006e32:	2200      	movs	r2, #0
 8006e34:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006e36:	7bfa      	ldrb	r2, [r7, #15]
 8006e38:	6879      	ldr	r1, [r7, #4]
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	4413      	add	r3, r2
 8006e40:	00db      	lsls	r3, r3, #3
 8006e42:	440b      	add	r3, r1
 8006e44:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006e48:	2200      	movs	r2, #0
 8006e4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e4c:	7bfb      	ldrb	r3, [r7, #15]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	73fb      	strb	r3, [r7, #15]
 8006e52:	7bfa      	ldrb	r2, [r7, #15]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d3b5      	bcc.n	8006dc8 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	603b      	str	r3, [r7, #0]
 8006e62:	687e      	ldr	r6, [r7, #4]
 8006e64:	466d      	mov	r5, sp
 8006e66:	f106 0410 	add.w	r4, r6, #16
 8006e6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006e6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006e6e:	6823      	ldr	r3, [r4, #0]
 8006e70:	602b      	str	r3, [r5, #0]
 8006e72:	1d33      	adds	r3, r6, #4
 8006e74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e76:	6838      	ldr	r0, [r7, #0]
 8006e78:	f005 feaa 	bl	800cbd0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	69db      	ldr	r3, [r3, #28]
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d102      	bne.n	8006e9a <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f001 fc29 	bl	80086ec <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3714      	adds	r7, #20
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006ea4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d101      	bne.n	8006eba <HAL_PCD_Start+0x16>
 8006eb6:	2302      	movs	r3, #2
 8006eb8:	e012      	b.n	8006ee0 <HAL_PCD_Start+0x3c>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f005 fe50 	bl	800cb6c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f008 f869 	bl	800efa8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3708      	adds	r7, #8
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f008 f86e 	bl	800efd6 <USB_ReadInterrupts>
 8006efa:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d003      	beq.n	8006f0e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 fb26 	bl	8007558 <PCD_EP_ISR_Handler>

    return;
 8006f0c:	e110      	b.n	8007130 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d013      	beq.n	8006f40 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006f20:	b29a      	uxth	r2, r3
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f2a:	b292      	uxth	r2, r2
 8006f2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f00c f88c 	bl	801304e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006f36:	2100      	movs	r1, #0
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 f8fc 	bl	8007136 <HAL_PCD_SetAddress>

    return;
 8006f3e:	e0f7      	b.n	8007130 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d00c      	beq.n	8006f64 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006f5c:	b292      	uxth	r2, r2
 8006f5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006f62:	e0e5      	b.n	8007130 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00c      	beq.n	8006f88 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006f76:	b29a      	uxth	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f80:	b292      	uxth	r2, r2
 8006f82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006f86:	e0d3      	b.n	8007130 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d034      	beq.n	8006ffc <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f022 0204 	bic.w	r2, r2, #4
 8006fa4:	b292      	uxth	r2, r2
 8006fa6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f022 0208 	bic.w	r2, r2, #8
 8006fbc:	b292      	uxth	r2, r2
 8006fbe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d107      	bne.n	8006fdc <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006fd4:	2100      	movs	r1, #0
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f00c fa2e 	bl	8013438 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f00c f86f 	bl	80130c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006fea:	b29a      	uxth	r2, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006ff4:	b292      	uxth	r2, r2
 8006ff6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006ffa:	e099      	b.n	8007130 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007002:	2b00      	cmp	r3, #0
 8007004:	d027      	beq.n	8007056 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800700e:	b29a      	uxth	r2, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f042 0208 	orr.w	r2, r2, #8
 8007018:	b292      	uxth	r2, r2
 800701a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007026:	b29a      	uxth	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007030:	b292      	uxth	r2, r2
 8007032:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800703e:	b29a      	uxth	r2, r3
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f042 0204 	orr.w	r2, r2, #4
 8007048:	b292      	uxth	r2, r2
 800704a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f00c f81c 	bl	801308c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8007054:	e06c      	b.n	8007130 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800705c:	2b00      	cmp	r3, #0
 800705e:	d040      	beq.n	80070e2 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007068:	b29a      	uxth	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007072:	b292      	uxth	r2, r2
 8007074:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d12b      	bne.n	80070da <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800708a:	b29a      	uxth	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f042 0204 	orr.w	r2, r2, #4
 8007094:	b292      	uxth	r2, r2
 8007096:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80070a2:	b29a      	uxth	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f042 0208 	orr.w	r2, r2, #8
 80070ac:	b292      	uxth	r2, r2
 80070ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2201      	movs	r2, #1
 80070b6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	089b      	lsrs	r3, r3, #2
 80070c6:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80070d0:	2101      	movs	r1, #1
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f00c f9b0 	bl	8013438 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80070d8:	e02a      	b.n	8007130 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f00b ffd6 	bl	801308c <HAL_PCD_SuspendCallback>
    return;
 80070e0:	e026      	b.n	8007130 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00f      	beq.n	800710c <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80070f4:	b29a      	uxth	r2, r3
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80070fe:	b292      	uxth	r2, r2
 8007100:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f00b ff94 	bl	8013032 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800710a:	e011      	b.n	8007130 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00c      	beq.n	8007130 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800711e:	b29a      	uxth	r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007128:	b292      	uxth	r2, r2
 800712a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800712e:	bf00      	nop
  }
}
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b082      	sub	sp, #8
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
 800713e:	460b      	mov	r3, r1
 8007140:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007148:	2b01      	cmp	r3, #1
 800714a:	d101      	bne.n	8007150 <HAL_PCD_SetAddress+0x1a>
 800714c:	2302      	movs	r3, #2
 800714e:	e013      	b.n	8007178 <HAL_PCD_SetAddress+0x42>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	78fa      	ldrb	r2, [r7, #3]
 800715c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	78fa      	ldrb	r2, [r7, #3]
 8007166:	4611      	mov	r1, r2
 8007168:	4618      	mov	r0, r3
 800716a:	f007 ff09 	bl	800ef80 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8007176:	2300      	movs	r3, #0
}
 8007178:	4618      	mov	r0, r3
 800717a:	3708      	adds	r7, #8
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	4608      	mov	r0, r1
 800718a:	4611      	mov	r1, r2
 800718c:	461a      	mov	r2, r3
 800718e:	4603      	mov	r3, r0
 8007190:	70fb      	strb	r3, [r7, #3]
 8007192:	460b      	mov	r3, r1
 8007194:	803b      	strh	r3, [r7, #0]
 8007196:	4613      	mov	r3, r2
 8007198:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800719a:	2300      	movs	r3, #0
 800719c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800719e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	da0e      	bge.n	80071c4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80071a6:	78fb      	ldrb	r3, [r7, #3]
 80071a8:	f003 0307 	and.w	r3, r3, #7
 80071ac:	1c5a      	adds	r2, r3, #1
 80071ae:	4613      	mov	r3, r2
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	4413      	add	r3, r2
 80071b4:	00db      	lsls	r3, r3, #3
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	4413      	add	r3, r2
 80071ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2201      	movs	r2, #1
 80071c0:	705a      	strb	r2, [r3, #1]
 80071c2:	e00e      	b.n	80071e2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80071c4:	78fb      	ldrb	r3, [r7, #3]
 80071c6:	f003 0207 	and.w	r2, r3, #7
 80071ca:	4613      	mov	r3, r2
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	4413      	add	r3, r2
 80071d0:	00db      	lsls	r3, r3, #3
 80071d2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	4413      	add	r3, r2
 80071da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2200      	movs	r2, #0
 80071e0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80071e2:	78fb      	ldrb	r3, [r7, #3]
 80071e4:	f003 0307 	and.w	r3, r3, #7
 80071e8:	b2da      	uxtb	r2, r3
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80071ee:	883a      	ldrh	r2, [r7, #0]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	78ba      	ldrb	r2, [r7, #2]
 80071f8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	785b      	ldrb	r3, [r3, #1]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d004      	beq.n	800720c <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	b29a      	uxth	r2, r3
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800720c:	78bb      	ldrb	r3, [r7, #2]
 800720e:	2b02      	cmp	r3, #2
 8007210:	d102      	bne.n	8007218 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2200      	movs	r2, #0
 8007216:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800721e:	2b01      	cmp	r3, #1
 8007220:	d101      	bne.n	8007226 <HAL_PCD_EP_Open+0xa6>
 8007222:	2302      	movs	r3, #2
 8007224:	e00e      	b.n	8007244 <HAL_PCD_EP_Open+0xc4>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2201      	movs	r2, #1
 800722a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68f9      	ldr	r1, [r7, #12]
 8007234:	4618      	mov	r0, r3
 8007236:	f005 fced 	bl	800cc14 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8007242:	7afb      	ldrb	r3, [r7, #11]
}
 8007244:	4618      	mov	r0, r3
 8007246:	3710      	adds	r7, #16
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	460b      	mov	r3, r1
 8007256:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007258:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800725c:	2b00      	cmp	r3, #0
 800725e:	da0e      	bge.n	800727e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007260:	78fb      	ldrb	r3, [r7, #3]
 8007262:	f003 0307 	and.w	r3, r3, #7
 8007266:	1c5a      	adds	r2, r3, #1
 8007268:	4613      	mov	r3, r2
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	4413      	add	r3, r2
 800726e:	00db      	lsls	r3, r3, #3
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	4413      	add	r3, r2
 8007274:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2201      	movs	r2, #1
 800727a:	705a      	strb	r2, [r3, #1]
 800727c:	e00e      	b.n	800729c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800727e:	78fb      	ldrb	r3, [r7, #3]
 8007280:	f003 0207 	and.w	r2, r3, #7
 8007284:	4613      	mov	r3, r2
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	4413      	add	r3, r2
 800728a:	00db      	lsls	r3, r3, #3
 800728c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	4413      	add	r3, r2
 8007294:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2200      	movs	r2, #0
 800729a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800729c:	78fb      	ldrb	r3, [r7, #3]
 800729e:	f003 0307 	and.w	r3, r3, #7
 80072a2:	b2da      	uxtb	r2, r3
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d101      	bne.n	80072b6 <HAL_PCD_EP_Close+0x6a>
 80072b2:	2302      	movs	r3, #2
 80072b4:	e00e      	b.n	80072d4 <HAL_PCD_EP_Close+0x88>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2201      	movs	r2, #1
 80072ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	68f9      	ldr	r1, [r7, #12]
 80072c4:	4618      	mov	r0, r3
 80072c6:	f006 f839 	bl	800d33c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b086      	sub	sp, #24
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	607a      	str	r2, [r7, #4]
 80072e6:	603b      	str	r3, [r7, #0]
 80072e8:	460b      	mov	r3, r1
 80072ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80072ec:	7afb      	ldrb	r3, [r7, #11]
 80072ee:	f003 0207 	and.w	r2, r3, #7
 80072f2:	4613      	mov	r3, r2
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	4413      	add	r3, r2
 80072f8:	00db      	lsls	r3, r3, #3
 80072fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80072fe:	68fa      	ldr	r2, [r7, #12]
 8007300:	4413      	add	r3, r2
 8007302:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	683a      	ldr	r2, [r7, #0]
 800730e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	2200      	movs	r2, #0
 8007314:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	2200      	movs	r2, #0
 800731a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800731c:	7afb      	ldrb	r3, [r7, #11]
 800731e:	f003 0307 	and.w	r3, r3, #7
 8007322:	b2da      	uxtb	r2, r3
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007328:	7afb      	ldrb	r3, [r7, #11]
 800732a:	f003 0307 	and.w	r3, r3, #7
 800732e:	2b00      	cmp	r3, #0
 8007330:	d106      	bne.n	8007340 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	6979      	ldr	r1, [r7, #20]
 8007338:	4618      	mov	r0, r3
 800733a:	f006 f9ec 	bl	800d716 <USB_EPStartXfer>
 800733e:	e005      	b.n	800734c <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	6979      	ldr	r1, [r7, #20]
 8007346:	4618      	mov	r0, r3
 8007348:	f006 f9e5 	bl	800d716 <USB_EPStartXfer>
  }

  return HAL_OK;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3718      	adds	r7, #24
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007356:	b480      	push	{r7}
 8007358:	b083      	sub	sp, #12
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
 800735e:	460b      	mov	r3, r1
 8007360:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007362:	78fb      	ldrb	r3, [r7, #3]
 8007364:	f003 0207 	and.w	r2, r3, #7
 8007368:	6879      	ldr	r1, [r7, #4]
 800736a:	4613      	mov	r3, r2
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	4413      	add	r3, r2
 8007370:	00db      	lsls	r3, r3, #3
 8007372:	440b      	add	r3, r1
 8007374:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8007378:	681b      	ldr	r3, [r3, #0]
}
 800737a:	4618      	mov	r0, r3
 800737c:	370c      	adds	r7, #12
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr

08007386 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b086      	sub	sp, #24
 800738a:	af00      	add	r7, sp, #0
 800738c:	60f8      	str	r0, [r7, #12]
 800738e:	607a      	str	r2, [r7, #4]
 8007390:	603b      	str	r3, [r7, #0]
 8007392:	460b      	mov	r3, r1
 8007394:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007396:	7afb      	ldrb	r3, [r7, #11]
 8007398:	f003 0307 	and.w	r3, r3, #7
 800739c:	1c5a      	adds	r2, r3, #1
 800739e:	4613      	mov	r3, r2
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	4413      	add	r3, r2
 80073a4:	00db      	lsls	r3, r3, #3
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	4413      	add	r3, r2
 80073aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	683a      	ldr	r2, [r7, #0]
 80073b6:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	683a      	ldr	r2, [r7, #0]
 80073c4:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	2200      	movs	r2, #0
 80073ca:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	2201      	movs	r2, #1
 80073d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80073d2:	7afb      	ldrb	r3, [r7, #11]
 80073d4:	f003 0307 	and.w	r3, r3, #7
 80073d8:	b2da      	uxtb	r2, r3
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80073de:	7afb      	ldrb	r3, [r7, #11]
 80073e0:	f003 0307 	and.w	r3, r3, #7
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d106      	bne.n	80073f6 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	6979      	ldr	r1, [r7, #20]
 80073ee:	4618      	mov	r0, r3
 80073f0:	f006 f991 	bl	800d716 <USB_EPStartXfer>
 80073f4:	e005      	b.n	8007402 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	6979      	ldr	r1, [r7, #20]
 80073fc:	4618      	mov	r0, r3
 80073fe:	f006 f98a 	bl	800d716 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007402:	2300      	movs	r3, #0
}
 8007404:	4618      	mov	r0, r3
 8007406:	3718      	adds	r7, #24
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	460b      	mov	r3, r1
 8007416:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007418:	78fb      	ldrb	r3, [r7, #3]
 800741a:	f003 0207 	and.w	r2, r3, #7
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	429a      	cmp	r2, r3
 8007424:	d901      	bls.n	800742a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	e03e      	b.n	80074a8 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800742a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800742e:	2b00      	cmp	r3, #0
 8007430:	da0e      	bge.n	8007450 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007432:	78fb      	ldrb	r3, [r7, #3]
 8007434:	f003 0307 	and.w	r3, r3, #7
 8007438:	1c5a      	adds	r2, r3, #1
 800743a:	4613      	mov	r3, r2
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	4413      	add	r3, r2
 8007440:	00db      	lsls	r3, r3, #3
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	4413      	add	r3, r2
 8007446:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2201      	movs	r2, #1
 800744c:	705a      	strb	r2, [r3, #1]
 800744e:	e00c      	b.n	800746a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007450:	78fa      	ldrb	r2, [r7, #3]
 8007452:	4613      	mov	r3, r2
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	4413      	add	r3, r2
 8007458:	00db      	lsls	r3, r3, #3
 800745a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	4413      	add	r3, r2
 8007462:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2200      	movs	r2, #0
 8007468:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2201      	movs	r2, #1
 800746e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007470:	78fb      	ldrb	r3, [r7, #3]
 8007472:	f003 0307 	and.w	r3, r3, #7
 8007476:	b2da      	uxtb	r2, r3
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007482:	2b01      	cmp	r3, #1
 8007484:	d101      	bne.n	800748a <HAL_PCD_EP_SetStall+0x7e>
 8007486:	2302      	movs	r3, #2
 8007488:	e00e      	b.n	80074a8 <HAL_PCD_EP_SetStall+0x9c>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2201      	movs	r2, #1
 800748e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	68f9      	ldr	r1, [r7, #12]
 8007498:	4618      	mov	r0, r3
 800749a:	f007 fc72 	bl	800ed82 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3710      	adds	r7, #16
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	460b      	mov	r3, r1
 80074ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80074bc:	78fb      	ldrb	r3, [r7, #3]
 80074be:	f003 020f 	and.w	r2, r3, #15
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d901      	bls.n	80074ce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e040      	b.n	8007550 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80074ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	da0e      	bge.n	80074f4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80074d6:	78fb      	ldrb	r3, [r7, #3]
 80074d8:	f003 0307 	and.w	r3, r3, #7
 80074dc:	1c5a      	adds	r2, r3, #1
 80074de:	4613      	mov	r3, r2
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	4413      	add	r3, r2
 80074e4:	00db      	lsls	r3, r3, #3
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	4413      	add	r3, r2
 80074ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2201      	movs	r2, #1
 80074f0:	705a      	strb	r2, [r3, #1]
 80074f2:	e00e      	b.n	8007512 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80074f4:	78fb      	ldrb	r3, [r7, #3]
 80074f6:	f003 0207 	and.w	r2, r3, #7
 80074fa:	4613      	mov	r3, r2
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	4413      	add	r3, r2
 8007500:	00db      	lsls	r3, r3, #3
 8007502:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	4413      	add	r3, r2
 800750a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2200      	movs	r2, #0
 8007510:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2200      	movs	r2, #0
 8007516:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007518:	78fb      	ldrb	r3, [r7, #3]
 800751a:	f003 0307 	and.w	r3, r3, #7
 800751e:	b2da      	uxtb	r2, r3
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800752a:	2b01      	cmp	r3, #1
 800752c:	d101      	bne.n	8007532 <HAL_PCD_EP_ClrStall+0x82>
 800752e:	2302      	movs	r3, #2
 8007530:	e00e      	b.n	8007550 <HAL_PCD_EP_ClrStall+0xa0>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2201      	movs	r2, #1
 8007536:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	68f9      	ldr	r1, [r7, #12]
 8007540:	4618      	mov	r0, r3
 8007542:	f007 fc6f 	bl	800ee24 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3710      	adds	r7, #16
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b096      	sub	sp, #88	; 0x58
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007560:	e39c      	b.n	8007c9c <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800756a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800756e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007572:	b2db      	uxtb	r3, r3
 8007574:	f003 030f 	and.w	r3, r3, #15
 8007578:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 800757c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8007580:	2b00      	cmp	r3, #0
 8007582:	f040 815e 	bne.w	8007842 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8007586:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800758a:	f003 0310 	and.w	r3, r3, #16
 800758e:	2b00      	cmp	r3, #0
 8007590:	d150      	bne.n	8007634 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	881b      	ldrh	r3, [r3, #0]
 8007598:	b29b      	uxth	r3, r3
 800759a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800759e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075a2:	81fb      	strh	r3, [r7, #14]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	89fb      	ldrh	r3, [r7, #14]
 80075aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	3328      	adds	r3, #40	; 0x28
 80075ba:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	461a      	mov	r2, r3
 80075c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	00db      	lsls	r3, r3, #3
 80075ce:	4413      	add	r3, r2
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	6812      	ldr	r2, [r2, #0]
 80075d4:	4413      	add	r3, r2
 80075d6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80075da:	881b      	ldrh	r3, [r3, #0]
 80075dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80075e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075e2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80075e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075e6:	695a      	ldr	r2, [r3, #20]
 80075e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075ea:	69db      	ldr	r3, [r3, #28]
 80075ec:	441a      	add	r2, r3
 80075ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075f0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80075f2:	2100      	movs	r1, #0
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f00b fd02 	bl	8012ffe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007600:	b2db      	uxtb	r3, r3
 8007602:	2b00      	cmp	r3, #0
 8007604:	f000 834a 	beq.w	8007c9c <PCD_EP_ISR_Handler+0x744>
 8007608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800760a:	699b      	ldr	r3, [r3, #24]
 800760c:	2b00      	cmp	r3, #0
 800760e:	f040 8345 	bne.w	8007c9c <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007618:	b2db      	uxtb	r3, r3
 800761a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800761e:	b2da      	uxtb	r2, r3
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	b292      	uxth	r2, r2
 8007626:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007632:	e333      	b.n	8007c9c <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800763a:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	881b      	ldrh	r3, [r3, #0]
 8007642:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8007646:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800764a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800764e:	2b00      	cmp	r3, #0
 8007650:	d032      	beq.n	80076b8 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800765a:	b29b      	uxth	r3, r3
 800765c:	461a      	mov	r2, r3
 800765e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	00db      	lsls	r3, r3, #3
 8007664:	4413      	add	r3, r2
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	6812      	ldr	r2, [r2, #0]
 800766a:	4413      	add	r3, r2
 800766c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007670:	881b      	ldrh	r3, [r3, #0]
 8007672:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007678:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6818      	ldr	r0, [r3, #0]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8007684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007686:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8007688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800768a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800768c:	b29b      	uxth	r3, r3
 800768e:	f007 fcf4 	bl	800f07a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	881b      	ldrh	r3, [r3, #0]
 8007698:	b29a      	uxth	r2, r3
 800769a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800769e:	4013      	ands	r3, r2
 80076a0:	823b      	strh	r3, [r7, #16]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	8a3a      	ldrh	r2, [r7, #16]
 80076a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80076ac:	b292      	uxth	r2, r2
 80076ae:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f00b fc77 	bl	8012fa4 <HAL_PCD_SetupStageCallback>
 80076b6:	e2f1      	b.n	8007c9c <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80076b8:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80076bc:	2b00      	cmp	r3, #0
 80076be:	f280 82ed 	bge.w	8007c9c <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	881b      	ldrh	r3, [r3, #0]
 80076c8:	b29a      	uxth	r2, r3
 80076ca:	f640 738f 	movw	r3, #3983	; 0xf8f
 80076ce:	4013      	ands	r3, r2
 80076d0:	83fb      	strh	r3, [r7, #30]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	8bfa      	ldrh	r2, [r7, #30]
 80076d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80076dc:	b292      	uxth	r2, r2
 80076de:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	461a      	mov	r2, r3
 80076ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	00db      	lsls	r3, r3, #3
 80076f2:	4413      	add	r3, r2
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	6812      	ldr	r2, [r2, #0]
 80076f8:	4413      	add	r3, r2
 80076fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80076fe:	881b      	ldrh	r3, [r3, #0]
 8007700:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007706:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8007708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800770a:	69db      	ldr	r3, [r3, #28]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d019      	beq.n	8007744 <PCD_EP_ISR_Handler+0x1ec>
 8007710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007712:	695b      	ldr	r3, [r3, #20]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d015      	beq.n	8007744 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6818      	ldr	r0, [r3, #0]
 800771c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800771e:	6959      	ldr	r1, [r3, #20]
 8007720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007722:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8007724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007726:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007728:	b29b      	uxth	r3, r3
 800772a:	f007 fca6 	bl	800f07a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800772e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007730:	695a      	ldr	r2, [r3, #20]
 8007732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007734:	69db      	ldr	r3, [r3, #28]
 8007736:	441a      	add	r2, r3
 8007738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800773a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800773c:	2100      	movs	r1, #0
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f00b fc42 	bl	8012fc8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	881b      	ldrh	r3, [r3, #0]
 800774a:	b29b      	uxth	r3, r3
 800774c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007750:	2b00      	cmp	r3, #0
 8007752:	f040 82a3 	bne.w	8007c9c <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	61bb      	str	r3, [r7, #24]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007764:	b29b      	uxth	r3, r3
 8007766:	461a      	mov	r2, r3
 8007768:	69bb      	ldr	r3, [r7, #24]
 800776a:	4413      	add	r3, r2
 800776c:	61bb      	str	r3, [r7, #24]
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007774:	617b      	str	r3, [r7, #20]
 8007776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	2b3e      	cmp	r3, #62	; 0x3e
 800777c:	d918      	bls.n	80077b0 <PCD_EP_ISR_Handler+0x258>
 800777e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	095b      	lsrs	r3, r3, #5
 8007784:	647b      	str	r3, [r7, #68]	; 0x44
 8007786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	f003 031f 	and.w	r3, r3, #31
 800778e:	2b00      	cmp	r3, #0
 8007790:	d102      	bne.n	8007798 <PCD_EP_ISR_Handler+0x240>
 8007792:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007794:	3b01      	subs	r3, #1
 8007796:	647b      	str	r3, [r7, #68]	; 0x44
 8007798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800779a:	b29b      	uxth	r3, r3
 800779c:	029b      	lsls	r3, r3, #10
 800779e:	b29b      	uxth	r3, r3
 80077a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077a8:	b29a      	uxth	r2, r3
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	801a      	strh	r2, [r3, #0]
 80077ae:	e029      	b.n	8007804 <PCD_EP_ISR_Handler+0x2ac>
 80077b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077b2:	691b      	ldr	r3, [r3, #16]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d112      	bne.n	80077de <PCD_EP_ISR_Handler+0x286>
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	881b      	ldrh	r3, [r3, #0]
 80077bc:	b29b      	uxth	r3, r3
 80077be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	801a      	strh	r2, [r3, #0]
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	881b      	ldrh	r3, [r3, #0]
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077d6:	b29a      	uxth	r2, r3
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	801a      	strh	r2, [r3, #0]
 80077dc:	e012      	b.n	8007804 <PCD_EP_ISR_Handler+0x2ac>
 80077de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	085b      	lsrs	r3, r3, #1
 80077e4:	647b      	str	r3, [r7, #68]	; 0x44
 80077e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	f003 0301 	and.w	r3, r3, #1
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d002      	beq.n	80077f8 <PCD_EP_ISR_Handler+0x2a0>
 80077f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077f4:	3301      	adds	r3, #1
 80077f6:	647b      	str	r3, [r7, #68]	; 0x44
 80077f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	029b      	lsls	r3, r3, #10
 80077fe:	b29a      	uxth	r2, r3
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	881b      	ldrh	r3, [r3, #0]
 800780a:	b29b      	uxth	r3, r3
 800780c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007814:	827b      	strh	r3, [r7, #18]
 8007816:	8a7b      	ldrh	r3, [r7, #18]
 8007818:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800781c:	827b      	strh	r3, [r7, #18]
 800781e:	8a7b      	ldrh	r3, [r7, #18]
 8007820:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007824:	827b      	strh	r3, [r7, #18]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	8a7b      	ldrh	r3, [r7, #18]
 800782c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007830:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007834:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800783c:	b29b      	uxth	r3, r3
 800783e:	8013      	strh	r3, [r2, #0]
 8007840:	e22c      	b.n	8007c9c <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	461a      	mov	r2, r3
 8007848:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	4413      	add	r3, r2
 8007850:	881b      	ldrh	r3, [r3, #0]
 8007852:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007856:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800785a:	2b00      	cmp	r3, #0
 800785c:	f280 80f6 	bge.w	8007a4c <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	461a      	mov	r2, r3
 8007866:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	4413      	add	r3, r2
 800786e:	881b      	ldrh	r3, [r3, #0]
 8007870:	b29a      	uxth	r2, r3
 8007872:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007876:	4013      	ands	r3, r2
 8007878:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	461a      	mov	r2, r3
 8007882:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	4413      	add	r3, r2
 800788a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800788e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007892:	b292      	uxth	r2, r2
 8007894:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8007896:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800789a:	4613      	mov	r3, r2
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	4413      	add	r3, r2
 80078a0:	00db      	lsls	r3, r3, #3
 80078a2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	4413      	add	r3, r2
 80078aa:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80078ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078ae:	7b1b      	ldrb	r3, [r3, #12]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d123      	bne.n	80078fc <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078bc:	b29b      	uxth	r3, r3
 80078be:	461a      	mov	r2, r3
 80078c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	00db      	lsls	r3, r3, #3
 80078c6:	4413      	add	r3, r2
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	6812      	ldr	r2, [r2, #0]
 80078cc:	4413      	add	r3, r2
 80078ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80078d2:	881b      	ldrh	r3, [r3, #0]
 80078d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078d8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80078dc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	f000 808e 	beq.w	8007a02 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6818      	ldr	r0, [r3, #0]
 80078ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078ec:	6959      	ldr	r1, [r3, #20]
 80078ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078f0:	88da      	ldrh	r2, [r3, #6]
 80078f2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80078f6:	f007 fbc0 	bl	800f07a <USB_ReadPMA>
 80078fa:	e082      	b.n	8007a02 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80078fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078fe:	78db      	ldrb	r3, [r3, #3]
 8007900:	2b02      	cmp	r3, #2
 8007902:	d10a      	bne.n	800791a <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8007904:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007908:	461a      	mov	r2, r3
 800790a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 f9d3 	bl	8007cb8 <HAL_PCD_EP_DB_Receive>
 8007912:	4603      	mov	r3, r0
 8007914:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007918:	e073      	b.n	8007a02 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	461a      	mov	r2, r3
 8007920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	4413      	add	r3, r2
 8007928:	881b      	ldrh	r3, [r3, #0]
 800792a:	b29b      	uxth	r3, r3
 800792c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007934:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	461a      	mov	r2, r3
 800793e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	441a      	add	r2, r3
 8007946:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800794a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800794e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007956:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800795a:	b29b      	uxth	r3, r3
 800795c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	461a      	mov	r2, r3
 8007964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	4413      	add	r3, r2
 800796c:	881b      	ldrh	r3, [r3, #0]
 800796e:	b29b      	uxth	r3, r3
 8007970:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007974:	2b00      	cmp	r3, #0
 8007976:	d022      	beq.n	80079be <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007980:	b29b      	uxth	r3, r3
 8007982:	461a      	mov	r2, r3
 8007984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	00db      	lsls	r3, r3, #3
 800798a:	4413      	add	r3, r2
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	6812      	ldr	r2, [r2, #0]
 8007990:	4413      	add	r3, r2
 8007992:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007996:	881b      	ldrh	r3, [r3, #0]
 8007998:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800799c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80079a0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d02c      	beq.n	8007a02 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6818      	ldr	r0, [r3, #0]
 80079ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079ae:	6959      	ldr	r1, [r3, #20]
 80079b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079b2:	891a      	ldrh	r2, [r3, #8]
 80079b4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80079b8:	f007 fb5f 	bl	800f07a <USB_ReadPMA>
 80079bc:	e021      	b.n	8007a02 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	461a      	mov	r2, r3
 80079ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	00db      	lsls	r3, r3, #3
 80079d0:	4413      	add	r3, r2
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	6812      	ldr	r2, [r2, #0]
 80079d6:	4413      	add	r3, r2
 80079d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80079dc:	881b      	ldrh	r3, [r3, #0]
 80079de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079e2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80079e6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d009      	beq.n	8007a02 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6818      	ldr	r0, [r3, #0]
 80079f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079f4:	6959      	ldr	r1, [r3, #20]
 80079f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079f8:	895a      	ldrh	r2, [r3, #10]
 80079fa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80079fe:	f007 fb3c 	bl	800f07a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8007a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a04:	69da      	ldr	r2, [r3, #28]
 8007a06:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007a0a:	441a      	add	r2, r3
 8007a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a0e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8007a10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a12:	695a      	ldr	r2, [r3, #20]
 8007a14:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007a18:	441a      	add	r2, r3
 8007a1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a1c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a20:	699b      	ldr	r3, [r3, #24]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d005      	beq.n	8007a32 <PCD_EP_ISR_Handler+0x4da>
 8007a26:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8007a2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a2c:	691b      	ldr	r3, [r3, #16]
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d206      	bcs.n	8007a40 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8007a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	4619      	mov	r1, r3
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f00b fac5 	bl	8012fc8 <HAL_PCD_DataOutStageCallback>
 8007a3e:	e005      	b.n	8007a4c <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007a46:	4618      	mov	r0, r3
 8007a48:	f005 fe65 	bl	800d716 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8007a4c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	f000 8121 	beq.w	8007c9c <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8007a5a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8007a5e:	1c5a      	adds	r2, r3, #1
 8007a60:	4613      	mov	r3, r2
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	4413      	add	r3, r2
 8007a66:	00db      	lsls	r3, r3, #3
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	461a      	mov	r2, r3
 8007a74:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	4413      	add	r3, r2
 8007a7c:	881b      	ldrh	r3, [r3, #0]
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8007a84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a88:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	461a      	mov	r2, r3
 8007a92:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	441a      	add	r2, r3
 8007a9a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007a9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007aa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8007aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007aac:	78db      	ldrb	r3, [r3, #3]
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	f000 80a2 	beq.w	8007bf8 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8007ab4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8007aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007abc:	7b1b      	ldrb	r3, [r3, #12]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f000 8093 	beq.w	8007bea <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007ac4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d046      	beq.n	8007b5e <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ad2:	785b      	ldrb	r3, [r3, #1]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d126      	bne.n	8007b26 <PCD_EP_ISR_Handler+0x5ce>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	627b      	str	r3, [r7, #36]	; 0x24
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	461a      	mov	r2, r3
 8007aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aec:	4413      	add	r3, r2
 8007aee:	627b      	str	r3, [r7, #36]	; 0x24
 8007af0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	00da      	lsls	r2, r3, #3
 8007af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af8:	4413      	add	r3, r2
 8007afa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007afe:	623b      	str	r3, [r7, #32]
 8007b00:	6a3b      	ldr	r3, [r7, #32]
 8007b02:	881b      	ldrh	r3, [r3, #0]
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b0a:	b29a      	uxth	r2, r3
 8007b0c:	6a3b      	ldr	r3, [r7, #32]
 8007b0e:	801a      	strh	r2, [r3, #0]
 8007b10:	6a3b      	ldr	r3, [r7, #32]
 8007b12:	881b      	ldrh	r3, [r3, #0]
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b1e:	b29a      	uxth	r2, r3
 8007b20:	6a3b      	ldr	r3, [r7, #32]
 8007b22:	801a      	strh	r2, [r3, #0]
 8007b24:	e061      	b.n	8007bea <PCD_EP_ISR_Handler+0x692>
 8007b26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b28:	785b      	ldrb	r3, [r3, #1]
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d15d      	bne.n	8007bea <PCD_EP_ISR_Handler+0x692>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	461a      	mov	r2, r3
 8007b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b42:	4413      	add	r3, r2
 8007b44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	00da      	lsls	r2, r3, #3
 8007b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b4e:	4413      	add	r3, r2
 8007b50:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007b54:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b58:	2200      	movs	r2, #0
 8007b5a:	801a      	strh	r2, [r3, #0]
 8007b5c:	e045      	b.n	8007bea <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b66:	785b      	ldrb	r3, [r3, #1]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d126      	bne.n	8007bba <PCD_EP_ISR_Handler+0x662>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	637b      	str	r3, [r7, #52]	; 0x34
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b80:	4413      	add	r3, r2
 8007b82:	637b      	str	r3, [r7, #52]	; 0x34
 8007b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	00da      	lsls	r2, r3, #3
 8007b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b8c:	4413      	add	r3, r2
 8007b8e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007b92:	633b      	str	r3, [r7, #48]	; 0x30
 8007b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b96:	881b      	ldrh	r3, [r3, #0]
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b9e:	b29a      	uxth	r2, r3
 8007ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba2:	801a      	strh	r2, [r3, #0]
 8007ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba6:	881b      	ldrh	r3, [r3, #0]
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bb2:	b29a      	uxth	r2, r3
 8007bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb6:	801a      	strh	r2, [r3, #0]
 8007bb8:	e017      	b.n	8007bea <PCD_EP_ISR_Handler+0x692>
 8007bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bbc:	785b      	ldrb	r3, [r3, #1]
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d113      	bne.n	8007bea <PCD_EP_ISR_Handler+0x692>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	461a      	mov	r2, r3
 8007bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bd0:	4413      	add	r3, r2
 8007bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	00da      	lsls	r2, r3, #3
 8007bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bdc:	4413      	add	r3, r2
 8007bde:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007be2:	63bb      	str	r3, [r7, #56]	; 0x38
 8007be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be6:	2200      	movs	r2, #0
 8007be8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	4619      	mov	r1, r3
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f00b fa04 	bl	8012ffe <HAL_PCD_DataInStageCallback>
 8007bf6:	e051      	b.n	8007c9c <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8007bf8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d144      	bne.n	8007c8e <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	461a      	mov	r2, r3
 8007c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	00db      	lsls	r3, r3, #3
 8007c16:	4413      	add	r3, r2
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	6812      	ldr	r2, [r2, #0]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007c22:	881b      	ldrh	r3, [r3, #0]
 8007c24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c28:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8007c2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c2e:	699a      	ldr	r2, [r3, #24]
 8007c30:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d907      	bls.n	8007c48 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8007c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c3a:	699a      	ldr	r2, [r3, #24]
 8007c3c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007c40:	1ad2      	subs	r2, r2, r3
 8007c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c44:	619a      	str	r2, [r3, #24]
 8007c46:	e002      	b.n	8007c4e <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8007c48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8007c4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c50:	699b      	ldr	r3, [r3, #24]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d106      	bne.n	8007c64 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f00b f9ce 	bl	8012ffe <HAL_PCD_DataInStageCallback>
 8007c62:	e01b      	b.n	8007c9c <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8007c64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c66:	695a      	ldr	r2, [r3, #20]
 8007c68:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007c6c:	441a      	add	r2, r3
 8007c6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c70:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8007c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c74:	69da      	ldr	r2, [r3, #28]
 8007c76:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007c7a:	441a      	add	r2, r3
 8007c7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c7e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007c86:	4618      	mov	r0, r3
 8007c88:	f005 fd45 	bl	800d716 <USB_EPStartXfer>
 8007c8c:	e006      	b.n	8007c9c <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8007c8e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007c92:	461a      	mov	r2, r3
 8007c94:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 f917 	bl	8007eca <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	b21b      	sxth	r3, r3
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	f6ff ac5a 	blt.w	8007562 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3758      	adds	r7, #88	; 0x58
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b088      	sub	sp, #32
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007cc6:	88fb      	ldrh	r3, [r7, #6]
 8007cc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d07c      	beq.n	8007dca <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	461a      	mov	r2, r3
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	00db      	lsls	r3, r3, #3
 8007ce2:	4413      	add	r3, r2
 8007ce4:	68fa      	ldr	r2, [r7, #12]
 8007ce6:	6812      	ldr	r2, [r2, #0]
 8007ce8:	4413      	add	r3, r2
 8007cea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007cee:	881b      	ldrh	r3, [r3, #0]
 8007cf0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cf4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	699a      	ldr	r2, [r3, #24]
 8007cfa:	8b7b      	ldrh	r3, [r7, #26]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d306      	bcc.n	8007d0e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	699a      	ldr	r2, [r3, #24]
 8007d04:	8b7b      	ldrh	r3, [r7, #26]
 8007d06:	1ad2      	subs	r2, r2, r3
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	619a      	str	r2, [r3, #24]
 8007d0c:	e002      	b.n	8007d14 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	2200      	movs	r2, #0
 8007d12:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	699b      	ldr	r3, [r3, #24]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d123      	bne.n	8007d64 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	461a      	mov	r2, r3
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	4413      	add	r3, r2
 8007d2a:	881b      	ldrh	r3, [r3, #0]
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d36:	833b      	strh	r3, [r7, #24]
 8007d38:	8b3b      	ldrh	r3, [r7, #24]
 8007d3a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007d3e:	833b      	strh	r3, [r7, #24]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	461a      	mov	r2, r3
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	441a      	add	r2, r3
 8007d4e:	8b3b      	ldrh	r3, [r7, #24]
 8007d50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007d64:	88fb      	ldrh	r3, [r7, #6]
 8007d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d01f      	beq.n	8007dae <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	461a      	mov	r2, r3
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	4413      	add	r3, r2
 8007d7c:	881b      	ldrh	r3, [r3, #0]
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d88:	82fb      	strh	r3, [r7, #22]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	461a      	mov	r2, r3
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	441a      	add	r2, r3
 8007d98:	8afb      	ldrh	r3, [r7, #22]
 8007d9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007da6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007dae:	8b7b      	ldrh	r3, [r7, #26]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f000 8085 	beq.w	8007ec0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	6818      	ldr	r0, [r3, #0]
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	6959      	ldr	r1, [r3, #20]
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	891a      	ldrh	r2, [r3, #8]
 8007dc2:	8b7b      	ldrh	r3, [r7, #26]
 8007dc4:	f007 f959 	bl	800f07a <USB_ReadPMA>
 8007dc8:	e07a      	b.n	8007ec0 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	00db      	lsls	r3, r3, #3
 8007ddc:	4413      	add	r3, r2
 8007dde:	68fa      	ldr	r2, [r7, #12]
 8007de0:	6812      	ldr	r2, [r2, #0]
 8007de2:	4413      	add	r3, r2
 8007de4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007de8:	881b      	ldrh	r3, [r3, #0]
 8007dea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007dee:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	699a      	ldr	r2, [r3, #24]
 8007df4:	8b7b      	ldrh	r3, [r7, #26]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d306      	bcc.n	8007e08 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	699a      	ldr	r2, [r3, #24]
 8007dfe:	8b7b      	ldrh	r3, [r7, #26]
 8007e00:	1ad2      	subs	r2, r2, r3
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	619a      	str	r2, [r3, #24]
 8007e06:	e002      	b.n	8007e0e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	699b      	ldr	r3, [r3, #24]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d123      	bne.n	8007e5e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	4413      	add	r3, r2
 8007e24:	881b      	ldrh	r3, [r3, #0]
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e30:	83fb      	strh	r3, [r7, #30]
 8007e32:	8bfb      	ldrh	r3, [r7, #30]
 8007e34:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007e38:	83fb      	strh	r3, [r7, #30]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	461a      	mov	r2, r3
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	441a      	add	r2, r3
 8007e48:	8bfb      	ldrh	r3, [r7, #30]
 8007e4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007e5e:	88fb      	ldrh	r3, [r7, #6]
 8007e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d11f      	bne.n	8007ea8 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	4413      	add	r3, r2
 8007e76:	881b      	ldrh	r3, [r3, #0]
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e82:	83bb      	strh	r3, [r7, #28]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	461a      	mov	r2, r3
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	441a      	add	r2, r3
 8007e92:	8bbb      	ldrh	r3, [r7, #28]
 8007e94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ea0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007ea8:	8b7b      	ldrh	r3, [r7, #26]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d008      	beq.n	8007ec0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	6818      	ldr	r0, [r3, #0]
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	6959      	ldr	r1, [r3, #20]
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	895a      	ldrh	r2, [r3, #10]
 8007eba:	8b7b      	ldrh	r3, [r7, #26]
 8007ebc:	f007 f8dd 	bl	800f07a <USB_ReadPMA>
    }
  }

  return count;
 8007ec0:	8b7b      	ldrh	r3, [r7, #26]
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3720      	adds	r7, #32
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b0a2      	sub	sp, #136	; 0x88
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	60f8      	str	r0, [r7, #12]
 8007ed2:	60b9      	str	r1, [r7, #8]
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007ed8:	88fb      	ldrh	r3, [r7, #6]
 8007eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	f000 81c5 	beq.w	800826e <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	461a      	mov	r2, r3
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	00db      	lsls	r3, r3, #3
 8007ef6:	4413      	add	r3, r2
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	6812      	ldr	r2, [r2, #0]
 8007efc:	4413      	add	r3, r2
 8007efe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007f02:	881b      	ldrh	r3, [r3, #0]
 8007f04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f08:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	699a      	ldr	r2, [r3, #24]
 8007f10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d907      	bls.n	8007f28 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	699a      	ldr	r2, [r3, #24]
 8007f1c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007f20:	1ad2      	subs	r2, r2, r3
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	619a      	str	r2, [r3, #24]
 8007f26:	e002      	b.n	8007f2e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	699b      	ldr	r3, [r3, #24]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	f040 80b9 	bne.w	80080aa <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	785b      	ldrb	r3, [r3, #1]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d126      	bne.n	8007f8e <HAL_PCD_EP_DB_Transmit+0xc4>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	461a      	mov	r2, r3
 8007f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f54:	4413      	add	r3, r2
 8007f56:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	00da      	lsls	r2, r3, #3
 8007f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f60:	4413      	add	r3, r2
 8007f62:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007f66:	627b      	str	r3, [r7, #36]	; 0x24
 8007f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6a:	881b      	ldrh	r3, [r3, #0]
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f72:	b29a      	uxth	r2, r3
 8007f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f76:	801a      	strh	r2, [r3, #0]
 8007f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7a:	881b      	ldrh	r3, [r3, #0]
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f86:	b29a      	uxth	r2, r3
 8007f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8a:	801a      	strh	r2, [r3, #0]
 8007f8c:	e01a      	b.n	8007fc4 <HAL_PCD_EP_DB_Transmit+0xfa>
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	785b      	ldrb	r3, [r3, #1]
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d116      	bne.n	8007fc4 <HAL_PCD_EP_DB_Transmit+0xfa>
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	633b      	str	r3, [r7, #48]	; 0x30
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007faa:	4413      	add	r3, r2
 8007fac:	633b      	str	r3, [r7, #48]	; 0x30
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	00da      	lsls	r2, r3, #3
 8007fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb6:	4413      	add	r3, r2
 8007fb8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	623b      	str	r3, [r7, #32]
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	785b      	ldrb	r3, [r3, #1]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d126      	bne.n	8008020 <HAL_PCD_EP_DB_Transmit+0x156>
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	61bb      	str	r3, [r7, #24]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	4413      	add	r3, r2
 8007fe8:	61bb      	str	r3, [r7, #24]
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	00da      	lsls	r2, r3, #3
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	4413      	add	r3, r2
 8007ff4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007ff8:	617b      	str	r3, [r7, #20]
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	881b      	ldrh	r3, [r3, #0]
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008004:	b29a      	uxth	r2, r3
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	801a      	strh	r2, [r3, #0]
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	881b      	ldrh	r3, [r3, #0]
 800800e:	b29b      	uxth	r3, r3
 8008010:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008014:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008018:	b29a      	uxth	r2, r3
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	801a      	strh	r2, [r3, #0]
 800801e:	e017      	b.n	8008050 <HAL_PCD_EP_DB_Transmit+0x186>
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	785b      	ldrb	r3, [r3, #1]
 8008024:	2b01      	cmp	r3, #1
 8008026:	d113      	bne.n	8008050 <HAL_PCD_EP_DB_Transmit+0x186>
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008030:	b29b      	uxth	r3, r3
 8008032:	461a      	mov	r2, r3
 8008034:	6a3b      	ldr	r3, [r7, #32]
 8008036:	4413      	add	r3, r2
 8008038:	623b      	str	r3, [r7, #32]
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	00da      	lsls	r2, r3, #3
 8008040:	6a3b      	ldr	r3, [r7, #32]
 8008042:	4413      	add	r3, r2
 8008044:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008048:	61fb      	str	r3, [r7, #28]
 800804a:	69fb      	ldr	r3, [r7, #28]
 800804c:	2200      	movs	r2, #0
 800804e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	4619      	mov	r1, r3
 8008056:	68f8      	ldr	r0, [r7, #12]
 8008058:	f00a ffd1 	bl	8012ffe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800805c:	88fb      	ldrh	r3, [r7, #6]
 800805e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008062:	2b00      	cmp	r3, #0
 8008064:	f000 82d2 	beq.w	800860c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	461a      	mov	r2, r3
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	4413      	add	r3, r2
 8008076:	881b      	ldrh	r3, [r3, #0]
 8008078:	b29b      	uxth	r3, r3
 800807a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800807e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008082:	827b      	strh	r3, [r7, #18]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	461a      	mov	r2, r3
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	441a      	add	r2, r3
 8008092:	8a7b      	ldrh	r3, [r7, #18]
 8008094:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008098:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800809c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80080a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	8013      	strh	r3, [r2, #0]
 80080a8:	e2b0      	b.n	800860c <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80080aa:	88fb      	ldrh	r3, [r7, #6]
 80080ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d021      	beq.n	80080f8 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	461a      	mov	r2, r3
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	4413      	add	r3, r2
 80080c2:	881b      	ldrh	r3, [r3, #0]
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080ce:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	461a      	mov	r2, r3
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	441a      	add	r2, r3
 80080e0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80080e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80080f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80080fe:	2b01      	cmp	r3, #1
 8008100:	f040 8284 	bne.w	800860c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	695a      	ldr	r2, [r3, #20]
 8008108:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800810c:	441a      	add	r2, r3
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	69da      	ldr	r2, [r3, #28]
 8008116:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800811a:	441a      	add	r2, r3
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	6a1a      	ldr	r2, [r3, #32]
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	691b      	ldr	r3, [r3, #16]
 8008128:	429a      	cmp	r2, r3
 800812a:	d309      	bcc.n	8008140 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	691b      	ldr	r3, [r3, #16]
 8008130:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	6a1a      	ldr	r2, [r3, #32]
 8008136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008138:	1ad2      	subs	r2, r2, r3
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	621a      	str	r2, [r3, #32]
 800813e:	e015      	b.n	800816c <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	6a1b      	ldr	r3, [r3, #32]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d107      	bne.n	8008158 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8008148:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800814c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	2200      	movs	r2, #0
 8008152:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8008156:	e009      	b.n	800816c <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	2200      	movs	r2, #0
 800815c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	6a1b      	ldr	r3, [r3, #32]
 8008164:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	2200      	movs	r2, #0
 800816a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	785b      	ldrb	r3, [r3, #1]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d155      	bne.n	8008220 <HAL_PCD_EP_DB_Transmit+0x356>
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	63bb      	str	r3, [r7, #56]	; 0x38
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008182:	b29b      	uxth	r3, r3
 8008184:	461a      	mov	r2, r3
 8008186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008188:	4413      	add	r3, r2
 800818a:	63bb      	str	r3, [r7, #56]	; 0x38
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	00da      	lsls	r2, r3, #3
 8008192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008194:	4413      	add	r3, r2
 8008196:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800819a:	637b      	str	r3, [r7, #52]	; 0x34
 800819c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800819e:	2b3e      	cmp	r3, #62	; 0x3e
 80081a0:	d916      	bls.n	80081d0 <HAL_PCD_EP_DB_Transmit+0x306>
 80081a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081a4:	095b      	lsrs	r3, r3, #5
 80081a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80081a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081aa:	f003 031f 	and.w	r3, r3, #31
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d102      	bne.n	80081b8 <HAL_PCD_EP_DB_Transmit+0x2ee>
 80081b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081b4:	3b01      	subs	r3, #1
 80081b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80081b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	029b      	lsls	r3, r3, #10
 80081be:	b29b      	uxth	r3, r3
 80081c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081c8:	b29a      	uxth	r2, r3
 80081ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081cc:	801a      	strh	r2, [r3, #0]
 80081ce:	e043      	b.n	8008258 <HAL_PCD_EP_DB_Transmit+0x38e>
 80081d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d112      	bne.n	80081fc <HAL_PCD_EP_DB_Transmit+0x332>
 80081d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081d8:	881b      	ldrh	r3, [r3, #0]
 80081da:	b29b      	uxth	r3, r3
 80081dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80081e0:	b29a      	uxth	r2, r3
 80081e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081e4:	801a      	strh	r2, [r3, #0]
 80081e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081e8:	881b      	ldrh	r3, [r3, #0]
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081f4:	b29a      	uxth	r2, r3
 80081f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081f8:	801a      	strh	r2, [r3, #0]
 80081fa:	e02d      	b.n	8008258 <HAL_PCD_EP_DB_Transmit+0x38e>
 80081fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081fe:	085b      	lsrs	r3, r3, #1
 8008200:	64bb      	str	r3, [r7, #72]	; 0x48
 8008202:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008204:	f003 0301 	and.w	r3, r3, #1
 8008208:	2b00      	cmp	r3, #0
 800820a:	d002      	beq.n	8008212 <HAL_PCD_EP_DB_Transmit+0x348>
 800820c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800820e:	3301      	adds	r3, #1
 8008210:	64bb      	str	r3, [r7, #72]	; 0x48
 8008212:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008214:	b29b      	uxth	r3, r3
 8008216:	029b      	lsls	r3, r3, #10
 8008218:	b29a      	uxth	r2, r3
 800821a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800821c:	801a      	strh	r2, [r3, #0]
 800821e:	e01b      	b.n	8008258 <HAL_PCD_EP_DB_Transmit+0x38e>
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	785b      	ldrb	r3, [r3, #1]
 8008224:	2b01      	cmp	r3, #1
 8008226:	d117      	bne.n	8008258 <HAL_PCD_EP_DB_Transmit+0x38e>
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	643b      	str	r3, [r7, #64]	; 0x40
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008236:	b29b      	uxth	r3, r3
 8008238:	461a      	mov	r2, r3
 800823a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800823c:	4413      	add	r3, r2
 800823e:	643b      	str	r3, [r7, #64]	; 0x40
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	00da      	lsls	r2, r3, #3
 8008246:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008248:	4413      	add	r3, r2
 800824a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800824e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008250:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008252:	b29a      	uxth	r2, r3
 8008254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008256:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6818      	ldr	r0, [r3, #0]
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	6959      	ldr	r1, [r3, #20]
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	891a      	ldrh	r2, [r3, #8]
 8008264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008266:	b29b      	uxth	r3, r3
 8008268:	f006 fec5 	bl	800eff6 <USB_WritePMA>
 800826c:	e1ce      	b.n	800860c <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008276:	b29b      	uxth	r3, r3
 8008278:	461a      	mov	r2, r3
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	00db      	lsls	r3, r3, #3
 8008280:	4413      	add	r3, r2
 8008282:	68fa      	ldr	r2, [r7, #12]
 8008284:	6812      	ldr	r2, [r2, #0]
 8008286:	4413      	add	r3, r2
 8008288:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800828c:	881b      	ldrh	r3, [r3, #0]
 800828e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008292:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	699a      	ldr	r2, [r3, #24]
 800829a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800829e:	429a      	cmp	r2, r3
 80082a0:	d307      	bcc.n	80082b2 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	699a      	ldr	r2, [r3, #24]
 80082a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80082aa:	1ad2      	subs	r2, r2, r3
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	619a      	str	r2, [r3, #24]
 80082b0:	e002      	b.n	80082b8 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	2200      	movs	r2, #0
 80082b6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	699b      	ldr	r3, [r3, #24]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f040 80c4 	bne.w	800844a <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	785b      	ldrb	r3, [r3, #1]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d126      	bne.n	8008318 <HAL_PCD_EP_DB_Transmit+0x44e>
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082d8:	b29b      	uxth	r3, r3
 80082da:	461a      	mov	r2, r3
 80082dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80082de:	4413      	add	r3, r2
 80082e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	00da      	lsls	r2, r3, #3
 80082e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80082ea:	4413      	add	r3, r2
 80082ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80082f0:	667b      	str	r3, [r7, #100]	; 0x64
 80082f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082f4:	881b      	ldrh	r3, [r3, #0]
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80082fc:	b29a      	uxth	r2, r3
 80082fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008300:	801a      	strh	r2, [r3, #0]
 8008302:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008304:	881b      	ldrh	r3, [r3, #0]
 8008306:	b29b      	uxth	r3, r3
 8008308:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800830c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008310:	b29a      	uxth	r2, r3
 8008312:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008314:	801a      	strh	r2, [r3, #0]
 8008316:	e01a      	b.n	800834e <HAL_PCD_EP_DB_Transmit+0x484>
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	785b      	ldrb	r3, [r3, #1]
 800831c:	2b01      	cmp	r3, #1
 800831e:	d116      	bne.n	800834e <HAL_PCD_EP_DB_Transmit+0x484>
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	673b      	str	r3, [r7, #112]	; 0x70
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800832e:	b29b      	uxth	r3, r3
 8008330:	461a      	mov	r2, r3
 8008332:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008334:	4413      	add	r3, r2
 8008336:	673b      	str	r3, [r7, #112]	; 0x70
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	00da      	lsls	r2, r3, #3
 800833e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008340:	4413      	add	r3, r2
 8008342:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008346:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800834a:	2200      	movs	r2, #0
 800834c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	785b      	ldrb	r3, [r3, #1]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d12f      	bne.n	80083bc <HAL_PCD_EP_DB_Transmit+0x4f2>
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800836c:	b29b      	uxth	r3, r3
 800836e:	461a      	mov	r2, r3
 8008370:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008374:	4413      	add	r3, r2
 8008376:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	00da      	lsls	r2, r3, #3
 8008380:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008384:	4413      	add	r3, r2
 8008386:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800838a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800838e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008392:	881b      	ldrh	r3, [r3, #0]
 8008394:	b29b      	uxth	r3, r3
 8008396:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800839a:	b29a      	uxth	r2, r3
 800839c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80083a0:	801a      	strh	r2, [r3, #0]
 80083a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80083a6:	881b      	ldrh	r3, [r3, #0]
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80083b8:	801a      	strh	r2, [r3, #0]
 80083ba:	e017      	b.n	80083ec <HAL_PCD_EP_DB_Transmit+0x522>
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	785b      	ldrb	r3, [r3, #1]
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d113      	bne.n	80083ec <HAL_PCD_EP_DB_Transmit+0x522>
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	461a      	mov	r2, r3
 80083d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80083d2:	4413      	add	r3, r2
 80083d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	00da      	lsls	r2, r3, #3
 80083dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80083de:	4413      	add	r3, r2
 80083e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80083e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80083e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083e8:	2200      	movs	r2, #0
 80083ea:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	4619      	mov	r1, r3
 80083f2:	68f8      	ldr	r0, [r7, #12]
 80083f4:	f00a fe03 	bl	8012ffe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80083f8:	88fb      	ldrh	r3, [r7, #6]
 80083fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083fe:	2b00      	cmp	r3, #0
 8008400:	f040 8104 	bne.w	800860c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	461a      	mov	r2, r3
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	4413      	add	r3, r2
 8008412:	881b      	ldrh	r3, [r3, #0]
 8008414:	b29b      	uxth	r3, r3
 8008416:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800841a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800841e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	461a      	mov	r2, r3
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	441a      	add	r2, r3
 8008430:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008434:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008438:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800843c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008444:	b29b      	uxth	r3, r3
 8008446:	8013      	strh	r3, [r2, #0]
 8008448:	e0e0      	b.n	800860c <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800844a:	88fb      	ldrh	r3, [r7, #6]
 800844c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008450:	2b00      	cmp	r3, #0
 8008452:	d121      	bne.n	8008498 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	461a      	mov	r2, r3
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	4413      	add	r3, r2
 8008462:	881b      	ldrh	r3, [r3, #0]
 8008464:	b29b      	uxth	r3, r3
 8008466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800846a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800846e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	461a      	mov	r2, r3
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	441a      	add	r2, r3
 8008480:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008484:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008488:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800848c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008494:	b29b      	uxth	r3, r3
 8008496:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800849e:	2b01      	cmp	r3, #1
 80084a0:	f040 80b4 	bne.w	800860c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	695a      	ldr	r2, [r3, #20]
 80084a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80084ac:	441a      	add	r2, r3
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	69da      	ldr	r2, [r3, #28]
 80084b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80084ba:	441a      	add	r2, r3
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	6a1a      	ldr	r2, [r3, #32]
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	691b      	ldr	r3, [r3, #16]
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d309      	bcc.n	80084e0 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	6a1a      	ldr	r2, [r3, #32]
 80084d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084d8:	1ad2      	subs	r2, r2, r3
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	621a      	str	r2, [r3, #32]
 80084de:	e015      	b.n	800850c <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	6a1b      	ldr	r3, [r3, #32]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d107      	bne.n	80084f8 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 80084e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80084ec:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	2200      	movs	r2, #0
 80084f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80084f6:	e009      	b.n	800850c <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	6a1b      	ldr	r3, [r3, #32]
 80084fc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	2200      	movs	r2, #0
 8008502:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	2200      	movs	r2, #0
 8008508:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	663b      	str	r3, [r7, #96]	; 0x60
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	785b      	ldrb	r3, [r3, #1]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d155      	bne.n	80085c6 <HAL_PCD_EP_DB_Transmit+0x6fc>
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008528:	b29b      	uxth	r3, r3
 800852a:	461a      	mov	r2, r3
 800852c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800852e:	4413      	add	r3, r2
 8008530:	65bb      	str	r3, [r7, #88]	; 0x58
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	00da      	lsls	r2, r3, #3
 8008538:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800853a:	4413      	add	r3, r2
 800853c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008540:	657b      	str	r3, [r7, #84]	; 0x54
 8008542:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008544:	2b3e      	cmp	r3, #62	; 0x3e
 8008546:	d916      	bls.n	8008576 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8008548:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800854a:	095b      	lsrs	r3, r3, #5
 800854c:	677b      	str	r3, [r7, #116]	; 0x74
 800854e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008550:	f003 031f 	and.w	r3, r3, #31
 8008554:	2b00      	cmp	r3, #0
 8008556:	d102      	bne.n	800855e <HAL_PCD_EP_DB_Transmit+0x694>
 8008558:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800855a:	3b01      	subs	r3, #1
 800855c:	677b      	str	r3, [r7, #116]	; 0x74
 800855e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008560:	b29b      	uxth	r3, r3
 8008562:	029b      	lsls	r3, r3, #10
 8008564:	b29b      	uxth	r3, r3
 8008566:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800856a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800856e:	b29a      	uxth	r2, r3
 8008570:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008572:	801a      	strh	r2, [r3, #0]
 8008574:	e040      	b.n	80085f8 <HAL_PCD_EP_DB_Transmit+0x72e>
 8008576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008578:	2b00      	cmp	r3, #0
 800857a:	d112      	bne.n	80085a2 <HAL_PCD_EP_DB_Transmit+0x6d8>
 800857c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800857e:	881b      	ldrh	r3, [r3, #0]
 8008580:	b29b      	uxth	r3, r3
 8008582:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008586:	b29a      	uxth	r2, r3
 8008588:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800858a:	801a      	strh	r2, [r3, #0]
 800858c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800858e:	881b      	ldrh	r3, [r3, #0]
 8008590:	b29b      	uxth	r3, r3
 8008592:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008596:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800859a:	b29a      	uxth	r2, r3
 800859c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800859e:	801a      	strh	r2, [r3, #0]
 80085a0:	e02a      	b.n	80085f8 <HAL_PCD_EP_DB_Transmit+0x72e>
 80085a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085a4:	085b      	lsrs	r3, r3, #1
 80085a6:	677b      	str	r3, [r7, #116]	; 0x74
 80085a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085aa:	f003 0301 	and.w	r3, r3, #1
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d002      	beq.n	80085b8 <HAL_PCD_EP_DB_Transmit+0x6ee>
 80085b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085b4:	3301      	adds	r3, #1
 80085b6:	677b      	str	r3, [r7, #116]	; 0x74
 80085b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	029b      	lsls	r3, r3, #10
 80085be:	b29a      	uxth	r2, r3
 80085c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085c2:	801a      	strh	r2, [r3, #0]
 80085c4:	e018      	b.n	80085f8 <HAL_PCD_EP_DB_Transmit+0x72e>
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	785b      	ldrb	r3, [r3, #1]
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d114      	bne.n	80085f8 <HAL_PCD_EP_DB_Transmit+0x72e>
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	461a      	mov	r2, r3
 80085da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085dc:	4413      	add	r3, r2
 80085de:	663b      	str	r3, [r7, #96]	; 0x60
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	00da      	lsls	r2, r3, #3
 80085e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085e8:	4413      	add	r3, r2
 80085ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80085ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085f2:	b29a      	uxth	r2, r3
 80085f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085f6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6818      	ldr	r0, [r3, #0]
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	6959      	ldr	r1, [r3, #20]
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	895a      	ldrh	r2, [r3, #10]
 8008604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008606:	b29b      	uxth	r3, r3
 8008608:	f006 fcf5 	bl	800eff6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	461a      	mov	r2, r3
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	009b      	lsls	r3, r3, #2
 8008618:	4413      	add	r3, r2
 800861a:	881b      	ldrh	r3, [r3, #0]
 800861c:	b29b      	uxth	r3, r3
 800861e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008622:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008626:	823b      	strh	r3, [r7, #16]
 8008628:	8a3b      	ldrh	r3, [r7, #16]
 800862a:	f083 0310 	eor.w	r3, r3, #16
 800862e:	823b      	strh	r3, [r7, #16]
 8008630:	8a3b      	ldrh	r3, [r7, #16]
 8008632:	f083 0320 	eor.w	r3, r3, #32
 8008636:	823b      	strh	r3, [r7, #16]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	461a      	mov	r2, r3
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	441a      	add	r2, r3
 8008646:	8a3b      	ldrh	r3, [r7, #16]
 8008648:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800864c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008650:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008658:	b29b      	uxth	r3, r3
 800865a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3788      	adds	r7, #136	; 0x88
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}

08008666 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8008666:	b480      	push	{r7}
 8008668:	b087      	sub	sp, #28
 800866a:	af00      	add	r7, sp, #0
 800866c:	60f8      	str	r0, [r7, #12]
 800866e:	607b      	str	r3, [r7, #4]
 8008670:	460b      	mov	r3, r1
 8008672:	817b      	strh	r3, [r7, #10]
 8008674:	4613      	mov	r3, r2
 8008676:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8008678:	897b      	ldrh	r3, [r7, #10]
 800867a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800867e:	b29b      	uxth	r3, r3
 8008680:	2b00      	cmp	r3, #0
 8008682:	d00b      	beq.n	800869c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008684:	897b      	ldrh	r3, [r7, #10]
 8008686:	f003 0307 	and.w	r3, r3, #7
 800868a:	1c5a      	adds	r2, r3, #1
 800868c:	4613      	mov	r3, r2
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	4413      	add	r3, r2
 8008692:	00db      	lsls	r3, r3, #3
 8008694:	68fa      	ldr	r2, [r7, #12]
 8008696:	4413      	add	r3, r2
 8008698:	617b      	str	r3, [r7, #20]
 800869a:	e009      	b.n	80086b0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800869c:	897a      	ldrh	r2, [r7, #10]
 800869e:	4613      	mov	r3, r2
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	4413      	add	r3, r2
 80086a4:	00db      	lsls	r3, r3, #3
 80086a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80086aa:	68fa      	ldr	r2, [r7, #12]
 80086ac:	4413      	add	r3, r2
 80086ae:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80086b0:	893b      	ldrh	r3, [r7, #8]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d107      	bne.n	80086c6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	2200      	movs	r2, #0
 80086ba:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	b29a      	uxth	r2, r3
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	80da      	strh	r2, [r3, #6]
 80086c4:	e00b      	b.n	80086de <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	2201      	movs	r2, #1
 80086ca:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	b29a      	uxth	r2, r3
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	0c1b      	lsrs	r3, r3, #16
 80086d8:	b29a      	uxth	r2, r3
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	371c      	adds	r7, #28
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b085      	sub	sp, #20
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2201      	movs	r2, #1
 80086fe:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008710:	b29b      	uxth	r3, r3
 8008712:	f043 0301 	orr.w	r3, r3, #1
 8008716:	b29a      	uxth	r2, r3
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008724:	b29b      	uxth	r3, r3
 8008726:	f043 0302 	orr.w	r3, r3, #2
 800872a:	b29a      	uxth	r2, r3
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8008732:	2300      	movs	r3, #0
}
 8008734:	4618      	mov	r0, r3
 8008736:	3714      	adds	r7, #20
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008740:	b480      	push	{r7}
 8008742:	b085      	sub	sp, #20
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d141      	bne.n	80087d2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800874e:	4b4b      	ldr	r3, [pc, #300]	; (800887c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800875a:	d131      	bne.n	80087c0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800875c:	4b47      	ldr	r3, [pc, #284]	; (800887c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800875e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008762:	4a46      	ldr	r2, [pc, #280]	; (800887c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008764:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008768:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800876c:	4b43      	ldr	r3, [pc, #268]	; (800887c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008774:	4a41      	ldr	r2, [pc, #260]	; (800887c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008776:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800877a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800877c:	4b40      	ldr	r3, [pc, #256]	; (8008880 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2232      	movs	r2, #50	; 0x32
 8008782:	fb02 f303 	mul.w	r3, r2, r3
 8008786:	4a3f      	ldr	r2, [pc, #252]	; (8008884 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008788:	fba2 2303 	umull	r2, r3, r2, r3
 800878c:	0c9b      	lsrs	r3, r3, #18
 800878e:	3301      	adds	r3, #1
 8008790:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008792:	e002      	b.n	800879a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	3b01      	subs	r3, #1
 8008798:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800879a:	4b38      	ldr	r3, [pc, #224]	; (800887c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800879c:	695b      	ldr	r3, [r3, #20]
 800879e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087a6:	d102      	bne.n	80087ae <HAL_PWREx_ControlVoltageScaling+0x6e>
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d1f2      	bne.n	8008794 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80087ae:	4b33      	ldr	r3, [pc, #204]	; (800887c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087b0:	695b      	ldr	r3, [r3, #20]
 80087b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087ba:	d158      	bne.n	800886e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80087bc:	2303      	movs	r3, #3
 80087be:	e057      	b.n	8008870 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80087c0:	4b2e      	ldr	r3, [pc, #184]	; (800887c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087c6:	4a2d      	ldr	r2, [pc, #180]	; (800887c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80087d0:	e04d      	b.n	800886e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087d8:	d141      	bne.n	800885e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80087da:	4b28      	ldr	r3, [pc, #160]	; (800887c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80087e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087e6:	d131      	bne.n	800884c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80087e8:	4b24      	ldr	r3, [pc, #144]	; (800887c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087ee:	4a23      	ldr	r2, [pc, #140]	; (800887c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80087f8:	4b20      	ldr	r3, [pc, #128]	; (800887c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008800:	4a1e      	ldr	r2, [pc, #120]	; (800887c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008802:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008806:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008808:	4b1d      	ldr	r3, [pc, #116]	; (8008880 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2232      	movs	r2, #50	; 0x32
 800880e:	fb02 f303 	mul.w	r3, r2, r3
 8008812:	4a1c      	ldr	r2, [pc, #112]	; (8008884 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008814:	fba2 2303 	umull	r2, r3, r2, r3
 8008818:	0c9b      	lsrs	r3, r3, #18
 800881a:	3301      	adds	r3, #1
 800881c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800881e:	e002      	b.n	8008826 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	3b01      	subs	r3, #1
 8008824:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008826:	4b15      	ldr	r3, [pc, #84]	; (800887c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008828:	695b      	ldr	r3, [r3, #20]
 800882a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800882e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008832:	d102      	bne.n	800883a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d1f2      	bne.n	8008820 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800883a:	4b10      	ldr	r3, [pc, #64]	; (800887c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800883c:	695b      	ldr	r3, [r3, #20]
 800883e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008846:	d112      	bne.n	800886e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008848:	2303      	movs	r3, #3
 800884a:	e011      	b.n	8008870 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800884c:	4b0b      	ldr	r3, [pc, #44]	; (800887c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800884e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008852:	4a0a      	ldr	r2, [pc, #40]	; (800887c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008858:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800885c:	e007      	b.n	800886e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800885e:	4b07      	ldr	r3, [pc, #28]	; (800887c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008866:	4a05      	ldr	r2, [pc, #20]	; (800887c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008868:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800886c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800886e:	2300      	movs	r3, #0
}
 8008870:	4618      	mov	r0, r3
 8008872:	3714      	adds	r7, #20
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr
 800887c:	40007000 	.word	0x40007000
 8008880:	20000004 	.word	0x20000004
 8008884:	431bde83 	.word	0x431bde83

08008888 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b088      	sub	sp, #32
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d101      	bne.n	800889a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	e306      	b.n	8008ea8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f003 0301 	and.w	r3, r3, #1
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d075      	beq.n	8008992 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80088a6:	4b97      	ldr	r3, [pc, #604]	; (8008b04 <HAL_RCC_OscConfig+0x27c>)
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	f003 030c 	and.w	r3, r3, #12
 80088ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80088b0:	4b94      	ldr	r3, [pc, #592]	; (8008b04 <HAL_RCC_OscConfig+0x27c>)
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	f003 0303 	and.w	r3, r3, #3
 80088b8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80088ba:	69bb      	ldr	r3, [r7, #24]
 80088bc:	2b0c      	cmp	r3, #12
 80088be:	d102      	bne.n	80088c6 <HAL_RCC_OscConfig+0x3e>
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	2b03      	cmp	r3, #3
 80088c4:	d002      	beq.n	80088cc <HAL_RCC_OscConfig+0x44>
 80088c6:	69bb      	ldr	r3, [r7, #24]
 80088c8:	2b08      	cmp	r3, #8
 80088ca:	d10b      	bne.n	80088e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088cc:	4b8d      	ldr	r3, [pc, #564]	; (8008b04 <HAL_RCC_OscConfig+0x27c>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d05b      	beq.n	8008990 <HAL_RCC_OscConfig+0x108>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d157      	bne.n	8008990 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80088e0:	2301      	movs	r3, #1
 80088e2:	e2e1      	b.n	8008ea8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088ec:	d106      	bne.n	80088fc <HAL_RCC_OscConfig+0x74>
 80088ee:	4b85      	ldr	r3, [pc, #532]	; (8008b04 <HAL_RCC_OscConfig+0x27c>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a84      	ldr	r2, [pc, #528]	; (8008b04 <HAL_RCC_OscConfig+0x27c>)
 80088f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088f8:	6013      	str	r3, [r2, #0]
 80088fa:	e01d      	b.n	8008938 <HAL_RCC_OscConfig+0xb0>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008904:	d10c      	bne.n	8008920 <HAL_RCC_OscConfig+0x98>
 8008906:	4b7f      	ldr	r3, [pc, #508]	; (8008b04 <HAL_RCC_OscConfig+0x27c>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a7e      	ldr	r2, [pc, #504]	; (8008b04 <HAL_RCC_OscConfig+0x27c>)
 800890c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008910:	6013      	str	r3, [r2, #0]
 8008912:	4b7c      	ldr	r3, [pc, #496]	; (8008b04 <HAL_RCC_OscConfig+0x27c>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4a7b      	ldr	r2, [pc, #492]	; (8008b04 <HAL_RCC_OscConfig+0x27c>)
 8008918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800891c:	6013      	str	r3, [r2, #0]
 800891e:	e00b      	b.n	8008938 <HAL_RCC_OscConfig+0xb0>
 8008920:	4b78      	ldr	r3, [pc, #480]	; (8008b04 <HAL_RCC_OscConfig+0x27c>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a77      	ldr	r2, [pc, #476]	; (8008b04 <HAL_RCC_OscConfig+0x27c>)
 8008926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800892a:	6013      	str	r3, [r2, #0]
 800892c:	4b75      	ldr	r3, [pc, #468]	; (8008b04 <HAL_RCC_OscConfig+0x27c>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a74      	ldr	r2, [pc, #464]	; (8008b04 <HAL_RCC_OscConfig+0x27c>)
 8008932:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008936:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d013      	beq.n	8008968 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008940:	f7fb fbae 	bl	80040a0 <HAL_GetTick>
 8008944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008946:	e008      	b.n	800895a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008948:	f7fb fbaa 	bl	80040a0 <HAL_GetTick>
 800894c:	4602      	mov	r2, r0
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	1ad3      	subs	r3, r2, r3
 8008952:	2b64      	cmp	r3, #100	; 0x64
 8008954:	d901      	bls.n	800895a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008956:	2303      	movs	r3, #3
 8008958:	e2a6      	b.n	8008ea8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800895a:	4b6a      	ldr	r3, [pc, #424]	; (8008b04 <HAL_RCC_OscConfig+0x27c>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008962:	2b00      	cmp	r3, #0
 8008964:	d0f0      	beq.n	8008948 <HAL_RCC_OscConfig+0xc0>
 8008966:	e014      	b.n	8008992 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008968:	f7fb fb9a 	bl	80040a0 <HAL_GetTick>
 800896c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800896e:	e008      	b.n	8008982 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008970:	f7fb fb96 	bl	80040a0 <HAL_GetTick>
 8008974:	4602      	mov	r2, r0
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	1ad3      	subs	r3, r2, r3
 800897a:	2b64      	cmp	r3, #100	; 0x64
 800897c:	d901      	bls.n	8008982 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800897e:	2303      	movs	r3, #3
 8008980:	e292      	b.n	8008ea8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008982:	4b60      	ldr	r3, [pc, #384]	; (8008b04 <HAL_RCC_OscConfig+0x27c>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1f0      	bne.n	8008970 <HAL_RCC_OscConfig+0xe8>
 800898e:	e000      	b.n	8008992 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008990:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f003 0302 	and.w	r3, r3, #2
 800899a:	2b00      	cmp	r3, #0
 800899c:	d075      	beq.n	8008a8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800899e:	4b59      	ldr	r3, [pc, #356]	; (8008b04 <HAL_RCC_OscConfig+0x27c>)
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	f003 030c 	and.w	r3, r3, #12
 80089a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80089a8:	4b56      	ldr	r3, [pc, #344]	; (8008b04 <HAL_RCC_OscConfig+0x27c>)
 80089aa:	68db      	ldr	r3, [r3, #12]
 80089ac:	f003 0303 	and.w	r3, r3, #3
 80089b0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80089b2:	69bb      	ldr	r3, [r7, #24]
 80089b4:	2b0c      	cmp	r3, #12
 80089b6:	d102      	bne.n	80089be <HAL_RCC_OscConfig+0x136>
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	2b02      	cmp	r3, #2
 80089bc:	d002      	beq.n	80089c4 <HAL_RCC_OscConfig+0x13c>
 80089be:	69bb      	ldr	r3, [r7, #24]
 80089c0:	2b04      	cmp	r3, #4
 80089c2:	d11f      	bne.n	8008a04 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80089c4:	4b4f      	ldr	r3, [pc, #316]	; (8008b04 <HAL_RCC_OscConfig+0x27c>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d005      	beq.n	80089dc <HAL_RCC_OscConfig+0x154>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	68db      	ldr	r3, [r3, #12]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d101      	bne.n	80089dc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80089d8:	2301      	movs	r3, #1
 80089da:	e265      	b.n	8008ea8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089dc:	4b49      	ldr	r3, [pc, #292]	; (8008b04 <HAL_RCC_OscConfig+0x27c>)
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	691b      	ldr	r3, [r3, #16]
 80089e8:	061b      	lsls	r3, r3, #24
 80089ea:	4946      	ldr	r1, [pc, #280]	; (8008b04 <HAL_RCC_OscConfig+0x27c>)
 80089ec:	4313      	orrs	r3, r2
 80089ee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80089f0:	4b45      	ldr	r3, [pc, #276]	; (8008b08 <HAL_RCC_OscConfig+0x280>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4618      	mov	r0, r3
 80089f6:	f7fa fee9 	bl	80037cc <HAL_InitTick>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d043      	beq.n	8008a88 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	e251      	b.n	8008ea8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d023      	beq.n	8008a54 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008a0c:	4b3d      	ldr	r3, [pc, #244]	; (8008b04 <HAL_RCC_OscConfig+0x27c>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a3c      	ldr	r2, [pc, #240]	; (8008b04 <HAL_RCC_OscConfig+0x27c>)
 8008a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a18:	f7fb fb42 	bl	80040a0 <HAL_GetTick>
 8008a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008a1e:	e008      	b.n	8008a32 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a20:	f7fb fb3e 	bl	80040a0 <HAL_GetTick>
 8008a24:	4602      	mov	r2, r0
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	1ad3      	subs	r3, r2, r3
 8008a2a:	2b02      	cmp	r3, #2
 8008a2c:	d901      	bls.n	8008a32 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008a2e:	2303      	movs	r3, #3
 8008a30:	e23a      	b.n	8008ea8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008a32:	4b34      	ldr	r3, [pc, #208]	; (8008b04 <HAL_RCC_OscConfig+0x27c>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d0f0      	beq.n	8008a20 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a3e:	4b31      	ldr	r3, [pc, #196]	; (8008b04 <HAL_RCC_OscConfig+0x27c>)
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	691b      	ldr	r3, [r3, #16]
 8008a4a:	061b      	lsls	r3, r3, #24
 8008a4c:	492d      	ldr	r1, [pc, #180]	; (8008b04 <HAL_RCC_OscConfig+0x27c>)
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	604b      	str	r3, [r1, #4]
 8008a52:	e01a      	b.n	8008a8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008a54:	4b2b      	ldr	r3, [pc, #172]	; (8008b04 <HAL_RCC_OscConfig+0x27c>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a2a      	ldr	r2, [pc, #168]	; (8008b04 <HAL_RCC_OscConfig+0x27c>)
 8008a5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a60:	f7fb fb1e 	bl	80040a0 <HAL_GetTick>
 8008a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008a66:	e008      	b.n	8008a7a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a68:	f7fb fb1a 	bl	80040a0 <HAL_GetTick>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	1ad3      	subs	r3, r2, r3
 8008a72:	2b02      	cmp	r3, #2
 8008a74:	d901      	bls.n	8008a7a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008a76:	2303      	movs	r3, #3
 8008a78:	e216      	b.n	8008ea8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008a7a:	4b22      	ldr	r3, [pc, #136]	; (8008b04 <HAL_RCC_OscConfig+0x27c>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d1f0      	bne.n	8008a68 <HAL_RCC_OscConfig+0x1e0>
 8008a86:	e000      	b.n	8008a8a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a88:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f003 0308 	and.w	r3, r3, #8
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d041      	beq.n	8008b1a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	695b      	ldr	r3, [r3, #20]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d01c      	beq.n	8008ad8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a9e:	4b19      	ldr	r3, [pc, #100]	; (8008b04 <HAL_RCC_OscConfig+0x27c>)
 8008aa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008aa4:	4a17      	ldr	r2, [pc, #92]	; (8008b04 <HAL_RCC_OscConfig+0x27c>)
 8008aa6:	f043 0301 	orr.w	r3, r3, #1
 8008aaa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008aae:	f7fb faf7 	bl	80040a0 <HAL_GetTick>
 8008ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008ab4:	e008      	b.n	8008ac8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ab6:	f7fb faf3 	bl	80040a0 <HAL_GetTick>
 8008aba:	4602      	mov	r2, r0
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	1ad3      	subs	r3, r2, r3
 8008ac0:	2b02      	cmp	r3, #2
 8008ac2:	d901      	bls.n	8008ac8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008ac4:	2303      	movs	r3, #3
 8008ac6:	e1ef      	b.n	8008ea8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008ac8:	4b0e      	ldr	r3, [pc, #56]	; (8008b04 <HAL_RCC_OscConfig+0x27c>)
 8008aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ace:	f003 0302 	and.w	r3, r3, #2
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d0ef      	beq.n	8008ab6 <HAL_RCC_OscConfig+0x22e>
 8008ad6:	e020      	b.n	8008b1a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008ad8:	4b0a      	ldr	r3, [pc, #40]	; (8008b04 <HAL_RCC_OscConfig+0x27c>)
 8008ada:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ade:	4a09      	ldr	r2, [pc, #36]	; (8008b04 <HAL_RCC_OscConfig+0x27c>)
 8008ae0:	f023 0301 	bic.w	r3, r3, #1
 8008ae4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ae8:	f7fb fada 	bl	80040a0 <HAL_GetTick>
 8008aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008aee:	e00d      	b.n	8008b0c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008af0:	f7fb fad6 	bl	80040a0 <HAL_GetTick>
 8008af4:	4602      	mov	r2, r0
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	1ad3      	subs	r3, r2, r3
 8008afa:	2b02      	cmp	r3, #2
 8008afc:	d906      	bls.n	8008b0c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008afe:	2303      	movs	r3, #3
 8008b00:	e1d2      	b.n	8008ea8 <HAL_RCC_OscConfig+0x620>
 8008b02:	bf00      	nop
 8008b04:	40021000 	.word	0x40021000
 8008b08:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008b0c:	4b8c      	ldr	r3, [pc, #560]	; (8008d40 <HAL_RCC_OscConfig+0x4b8>)
 8008b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b12:	f003 0302 	and.w	r3, r3, #2
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d1ea      	bne.n	8008af0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f003 0304 	and.w	r3, r3, #4
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	f000 80a6 	beq.w	8008c74 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008b2c:	4b84      	ldr	r3, [pc, #528]	; (8008d40 <HAL_RCC_OscConfig+0x4b8>)
 8008b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d101      	bne.n	8008b3c <HAL_RCC_OscConfig+0x2b4>
 8008b38:	2301      	movs	r3, #1
 8008b3a:	e000      	b.n	8008b3e <HAL_RCC_OscConfig+0x2b6>
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d00d      	beq.n	8008b5e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008b42:	4b7f      	ldr	r3, [pc, #508]	; (8008d40 <HAL_RCC_OscConfig+0x4b8>)
 8008b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b46:	4a7e      	ldr	r2, [pc, #504]	; (8008d40 <HAL_RCC_OscConfig+0x4b8>)
 8008b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b4c:	6593      	str	r3, [r2, #88]	; 0x58
 8008b4e:	4b7c      	ldr	r3, [pc, #496]	; (8008d40 <HAL_RCC_OscConfig+0x4b8>)
 8008b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b56:	60fb      	str	r3, [r7, #12]
 8008b58:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b5e:	4b79      	ldr	r3, [pc, #484]	; (8008d44 <HAL_RCC_OscConfig+0x4bc>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d118      	bne.n	8008b9c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008b6a:	4b76      	ldr	r3, [pc, #472]	; (8008d44 <HAL_RCC_OscConfig+0x4bc>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a75      	ldr	r2, [pc, #468]	; (8008d44 <HAL_RCC_OscConfig+0x4bc>)
 8008b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008b76:	f7fb fa93 	bl	80040a0 <HAL_GetTick>
 8008b7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b7c:	e008      	b.n	8008b90 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b7e:	f7fb fa8f 	bl	80040a0 <HAL_GetTick>
 8008b82:	4602      	mov	r2, r0
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	1ad3      	subs	r3, r2, r3
 8008b88:	2b02      	cmp	r3, #2
 8008b8a:	d901      	bls.n	8008b90 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008b8c:	2303      	movs	r3, #3
 8008b8e:	e18b      	b.n	8008ea8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b90:	4b6c      	ldr	r3, [pc, #432]	; (8008d44 <HAL_RCC_OscConfig+0x4bc>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d0f0      	beq.n	8008b7e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d108      	bne.n	8008bb6 <HAL_RCC_OscConfig+0x32e>
 8008ba4:	4b66      	ldr	r3, [pc, #408]	; (8008d40 <HAL_RCC_OscConfig+0x4b8>)
 8008ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008baa:	4a65      	ldr	r2, [pc, #404]	; (8008d40 <HAL_RCC_OscConfig+0x4b8>)
 8008bac:	f043 0301 	orr.w	r3, r3, #1
 8008bb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008bb4:	e024      	b.n	8008c00 <HAL_RCC_OscConfig+0x378>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	2b05      	cmp	r3, #5
 8008bbc:	d110      	bne.n	8008be0 <HAL_RCC_OscConfig+0x358>
 8008bbe:	4b60      	ldr	r3, [pc, #384]	; (8008d40 <HAL_RCC_OscConfig+0x4b8>)
 8008bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bc4:	4a5e      	ldr	r2, [pc, #376]	; (8008d40 <HAL_RCC_OscConfig+0x4b8>)
 8008bc6:	f043 0304 	orr.w	r3, r3, #4
 8008bca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008bce:	4b5c      	ldr	r3, [pc, #368]	; (8008d40 <HAL_RCC_OscConfig+0x4b8>)
 8008bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bd4:	4a5a      	ldr	r2, [pc, #360]	; (8008d40 <HAL_RCC_OscConfig+0x4b8>)
 8008bd6:	f043 0301 	orr.w	r3, r3, #1
 8008bda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008bde:	e00f      	b.n	8008c00 <HAL_RCC_OscConfig+0x378>
 8008be0:	4b57      	ldr	r3, [pc, #348]	; (8008d40 <HAL_RCC_OscConfig+0x4b8>)
 8008be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008be6:	4a56      	ldr	r2, [pc, #344]	; (8008d40 <HAL_RCC_OscConfig+0x4b8>)
 8008be8:	f023 0301 	bic.w	r3, r3, #1
 8008bec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008bf0:	4b53      	ldr	r3, [pc, #332]	; (8008d40 <HAL_RCC_OscConfig+0x4b8>)
 8008bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bf6:	4a52      	ldr	r2, [pc, #328]	; (8008d40 <HAL_RCC_OscConfig+0x4b8>)
 8008bf8:	f023 0304 	bic.w	r3, r3, #4
 8008bfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d016      	beq.n	8008c36 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c08:	f7fb fa4a 	bl	80040a0 <HAL_GetTick>
 8008c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008c0e:	e00a      	b.n	8008c26 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c10:	f7fb fa46 	bl	80040a0 <HAL_GetTick>
 8008c14:	4602      	mov	r2, r0
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	1ad3      	subs	r3, r2, r3
 8008c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d901      	bls.n	8008c26 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008c22:	2303      	movs	r3, #3
 8008c24:	e140      	b.n	8008ea8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008c26:	4b46      	ldr	r3, [pc, #280]	; (8008d40 <HAL_RCC_OscConfig+0x4b8>)
 8008c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c2c:	f003 0302 	and.w	r3, r3, #2
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d0ed      	beq.n	8008c10 <HAL_RCC_OscConfig+0x388>
 8008c34:	e015      	b.n	8008c62 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c36:	f7fb fa33 	bl	80040a0 <HAL_GetTick>
 8008c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008c3c:	e00a      	b.n	8008c54 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c3e:	f7fb fa2f 	bl	80040a0 <HAL_GetTick>
 8008c42:	4602      	mov	r2, r0
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	1ad3      	subs	r3, r2, r3
 8008c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d901      	bls.n	8008c54 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008c50:	2303      	movs	r3, #3
 8008c52:	e129      	b.n	8008ea8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008c54:	4b3a      	ldr	r3, [pc, #232]	; (8008d40 <HAL_RCC_OscConfig+0x4b8>)
 8008c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c5a:	f003 0302 	and.w	r3, r3, #2
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d1ed      	bne.n	8008c3e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008c62:	7ffb      	ldrb	r3, [r7, #31]
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d105      	bne.n	8008c74 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c68:	4b35      	ldr	r3, [pc, #212]	; (8008d40 <HAL_RCC_OscConfig+0x4b8>)
 8008c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c6c:	4a34      	ldr	r2, [pc, #208]	; (8008d40 <HAL_RCC_OscConfig+0x4b8>)
 8008c6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c72:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f003 0320 	and.w	r3, r3, #32
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d03c      	beq.n	8008cfa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	699b      	ldr	r3, [r3, #24]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d01c      	beq.n	8008cc2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008c88:	4b2d      	ldr	r3, [pc, #180]	; (8008d40 <HAL_RCC_OscConfig+0x4b8>)
 8008c8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008c8e:	4a2c      	ldr	r2, [pc, #176]	; (8008d40 <HAL_RCC_OscConfig+0x4b8>)
 8008c90:	f043 0301 	orr.w	r3, r3, #1
 8008c94:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c98:	f7fb fa02 	bl	80040a0 <HAL_GetTick>
 8008c9c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008c9e:	e008      	b.n	8008cb2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008ca0:	f7fb f9fe 	bl	80040a0 <HAL_GetTick>
 8008ca4:	4602      	mov	r2, r0
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	1ad3      	subs	r3, r2, r3
 8008caa:	2b02      	cmp	r3, #2
 8008cac:	d901      	bls.n	8008cb2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008cae:	2303      	movs	r3, #3
 8008cb0:	e0fa      	b.n	8008ea8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008cb2:	4b23      	ldr	r3, [pc, #140]	; (8008d40 <HAL_RCC_OscConfig+0x4b8>)
 8008cb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008cb8:	f003 0302 	and.w	r3, r3, #2
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d0ef      	beq.n	8008ca0 <HAL_RCC_OscConfig+0x418>
 8008cc0:	e01b      	b.n	8008cfa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008cc2:	4b1f      	ldr	r3, [pc, #124]	; (8008d40 <HAL_RCC_OscConfig+0x4b8>)
 8008cc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008cc8:	4a1d      	ldr	r2, [pc, #116]	; (8008d40 <HAL_RCC_OscConfig+0x4b8>)
 8008cca:	f023 0301 	bic.w	r3, r3, #1
 8008cce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cd2:	f7fb f9e5 	bl	80040a0 <HAL_GetTick>
 8008cd6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008cd8:	e008      	b.n	8008cec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008cda:	f7fb f9e1 	bl	80040a0 <HAL_GetTick>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	1ad3      	subs	r3, r2, r3
 8008ce4:	2b02      	cmp	r3, #2
 8008ce6:	d901      	bls.n	8008cec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008ce8:	2303      	movs	r3, #3
 8008cea:	e0dd      	b.n	8008ea8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008cec:	4b14      	ldr	r3, [pc, #80]	; (8008d40 <HAL_RCC_OscConfig+0x4b8>)
 8008cee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008cf2:	f003 0302 	and.w	r3, r3, #2
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d1ef      	bne.n	8008cda <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	69db      	ldr	r3, [r3, #28]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	f000 80d1 	beq.w	8008ea6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008d04:	4b0e      	ldr	r3, [pc, #56]	; (8008d40 <HAL_RCC_OscConfig+0x4b8>)
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	f003 030c 	and.w	r3, r3, #12
 8008d0c:	2b0c      	cmp	r3, #12
 8008d0e:	f000 808b 	beq.w	8008e28 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	69db      	ldr	r3, [r3, #28]
 8008d16:	2b02      	cmp	r3, #2
 8008d18:	d15e      	bne.n	8008dd8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d1a:	4b09      	ldr	r3, [pc, #36]	; (8008d40 <HAL_RCC_OscConfig+0x4b8>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4a08      	ldr	r2, [pc, #32]	; (8008d40 <HAL_RCC_OscConfig+0x4b8>)
 8008d20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d26:	f7fb f9bb 	bl	80040a0 <HAL_GetTick>
 8008d2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d2c:	e00c      	b.n	8008d48 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d2e:	f7fb f9b7 	bl	80040a0 <HAL_GetTick>
 8008d32:	4602      	mov	r2, r0
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	1ad3      	subs	r3, r2, r3
 8008d38:	2b02      	cmp	r3, #2
 8008d3a:	d905      	bls.n	8008d48 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008d3c:	2303      	movs	r3, #3
 8008d3e:	e0b3      	b.n	8008ea8 <HAL_RCC_OscConfig+0x620>
 8008d40:	40021000 	.word	0x40021000
 8008d44:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d48:	4b59      	ldr	r3, [pc, #356]	; (8008eb0 <HAL_RCC_OscConfig+0x628>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d1ec      	bne.n	8008d2e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008d54:	4b56      	ldr	r3, [pc, #344]	; (8008eb0 <HAL_RCC_OscConfig+0x628>)
 8008d56:	68da      	ldr	r2, [r3, #12]
 8008d58:	4b56      	ldr	r3, [pc, #344]	; (8008eb4 <HAL_RCC_OscConfig+0x62c>)
 8008d5a:	4013      	ands	r3, r2
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	6a11      	ldr	r1, [r2, #32]
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008d64:	3a01      	subs	r2, #1
 8008d66:	0112      	lsls	r2, r2, #4
 8008d68:	4311      	orrs	r1, r2
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008d6e:	0212      	lsls	r2, r2, #8
 8008d70:	4311      	orrs	r1, r2
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008d76:	0852      	lsrs	r2, r2, #1
 8008d78:	3a01      	subs	r2, #1
 8008d7a:	0552      	lsls	r2, r2, #21
 8008d7c:	4311      	orrs	r1, r2
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008d82:	0852      	lsrs	r2, r2, #1
 8008d84:	3a01      	subs	r2, #1
 8008d86:	0652      	lsls	r2, r2, #25
 8008d88:	4311      	orrs	r1, r2
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008d8e:	06d2      	lsls	r2, r2, #27
 8008d90:	430a      	orrs	r2, r1
 8008d92:	4947      	ldr	r1, [pc, #284]	; (8008eb0 <HAL_RCC_OscConfig+0x628>)
 8008d94:	4313      	orrs	r3, r2
 8008d96:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d98:	4b45      	ldr	r3, [pc, #276]	; (8008eb0 <HAL_RCC_OscConfig+0x628>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a44      	ldr	r2, [pc, #272]	; (8008eb0 <HAL_RCC_OscConfig+0x628>)
 8008d9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008da2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008da4:	4b42      	ldr	r3, [pc, #264]	; (8008eb0 <HAL_RCC_OscConfig+0x628>)
 8008da6:	68db      	ldr	r3, [r3, #12]
 8008da8:	4a41      	ldr	r2, [pc, #260]	; (8008eb0 <HAL_RCC_OscConfig+0x628>)
 8008daa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008dae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008db0:	f7fb f976 	bl	80040a0 <HAL_GetTick>
 8008db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008db6:	e008      	b.n	8008dca <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008db8:	f7fb f972 	bl	80040a0 <HAL_GetTick>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	1ad3      	subs	r3, r2, r3
 8008dc2:	2b02      	cmp	r3, #2
 8008dc4:	d901      	bls.n	8008dca <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008dc6:	2303      	movs	r3, #3
 8008dc8:	e06e      	b.n	8008ea8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008dca:	4b39      	ldr	r3, [pc, #228]	; (8008eb0 <HAL_RCC_OscConfig+0x628>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d0f0      	beq.n	8008db8 <HAL_RCC_OscConfig+0x530>
 8008dd6:	e066      	b.n	8008ea6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008dd8:	4b35      	ldr	r3, [pc, #212]	; (8008eb0 <HAL_RCC_OscConfig+0x628>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a34      	ldr	r2, [pc, #208]	; (8008eb0 <HAL_RCC_OscConfig+0x628>)
 8008dde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008de2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8008de4:	4b32      	ldr	r3, [pc, #200]	; (8008eb0 <HAL_RCC_OscConfig+0x628>)
 8008de6:	68db      	ldr	r3, [r3, #12]
 8008de8:	4a31      	ldr	r2, [pc, #196]	; (8008eb0 <HAL_RCC_OscConfig+0x628>)
 8008dea:	f023 0303 	bic.w	r3, r3, #3
 8008dee:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008df0:	4b2f      	ldr	r3, [pc, #188]	; (8008eb0 <HAL_RCC_OscConfig+0x628>)
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	4a2e      	ldr	r2, [pc, #184]	; (8008eb0 <HAL_RCC_OscConfig+0x628>)
 8008df6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8008dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008dfe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e00:	f7fb f94e 	bl	80040a0 <HAL_GetTick>
 8008e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008e06:	e008      	b.n	8008e1a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e08:	f7fb f94a 	bl	80040a0 <HAL_GetTick>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	1ad3      	subs	r3, r2, r3
 8008e12:	2b02      	cmp	r3, #2
 8008e14:	d901      	bls.n	8008e1a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8008e16:	2303      	movs	r3, #3
 8008e18:	e046      	b.n	8008ea8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008e1a:	4b25      	ldr	r3, [pc, #148]	; (8008eb0 <HAL_RCC_OscConfig+0x628>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d1f0      	bne.n	8008e08 <HAL_RCC_OscConfig+0x580>
 8008e26:	e03e      	b.n	8008ea6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	69db      	ldr	r3, [r3, #28]
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d101      	bne.n	8008e34 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8008e30:	2301      	movs	r3, #1
 8008e32:	e039      	b.n	8008ea8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008e34:	4b1e      	ldr	r3, [pc, #120]	; (8008eb0 <HAL_RCC_OscConfig+0x628>)
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	f003 0203 	and.w	r2, r3, #3
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6a1b      	ldr	r3, [r3, #32]
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d12c      	bne.n	8008ea2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e52:	3b01      	subs	r3, #1
 8008e54:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d123      	bne.n	8008ea2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e64:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d11b      	bne.n	8008ea2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e74:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d113      	bne.n	8008ea2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e84:	085b      	lsrs	r3, r3, #1
 8008e86:	3b01      	subs	r3, #1
 8008e88:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d109      	bne.n	8008ea2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e98:	085b      	lsrs	r3, r3, #1
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d001      	beq.n	8008ea6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e000      	b.n	8008ea8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8008ea6:	2300      	movs	r3, #0
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3720      	adds	r7, #32
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}
 8008eb0:	40021000 	.word	0x40021000
 8008eb4:	019f800c 	.word	0x019f800c

08008eb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b086      	sub	sp, #24
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d101      	bne.n	8008ed0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	e11e      	b.n	800910e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008ed0:	4b91      	ldr	r3, [pc, #580]	; (8009118 <HAL_RCC_ClockConfig+0x260>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f003 030f 	and.w	r3, r3, #15
 8008ed8:	683a      	ldr	r2, [r7, #0]
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d910      	bls.n	8008f00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ede:	4b8e      	ldr	r3, [pc, #568]	; (8009118 <HAL_RCC_ClockConfig+0x260>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f023 020f 	bic.w	r2, r3, #15
 8008ee6:	498c      	ldr	r1, [pc, #560]	; (8009118 <HAL_RCC_ClockConfig+0x260>)
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	4313      	orrs	r3, r2
 8008eec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008eee:	4b8a      	ldr	r3, [pc, #552]	; (8009118 <HAL_RCC_ClockConfig+0x260>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f003 030f 	and.w	r3, r3, #15
 8008ef6:	683a      	ldr	r2, [r7, #0]
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d001      	beq.n	8008f00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008efc:	2301      	movs	r3, #1
 8008efe:	e106      	b.n	800910e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f003 0301 	and.w	r3, r3, #1
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d073      	beq.n	8008ff4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	2b03      	cmp	r3, #3
 8008f12:	d129      	bne.n	8008f68 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008f14:	4b81      	ldr	r3, [pc, #516]	; (800911c <HAL_RCC_ClockConfig+0x264>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d101      	bne.n	8008f24 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008f20:	2301      	movs	r3, #1
 8008f22:	e0f4      	b.n	800910e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008f24:	f000 f9d0 	bl	80092c8 <RCC_GetSysClockFreqFromPLLSource>
 8008f28:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	4a7c      	ldr	r2, [pc, #496]	; (8009120 <HAL_RCC_ClockConfig+0x268>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d93f      	bls.n	8008fb2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008f32:	4b7a      	ldr	r3, [pc, #488]	; (800911c <HAL_RCC_ClockConfig+0x264>)
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d009      	beq.n	8008f52 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d033      	beq.n	8008fb2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d12f      	bne.n	8008fb2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008f52:	4b72      	ldr	r3, [pc, #456]	; (800911c <HAL_RCC_ClockConfig+0x264>)
 8008f54:	689b      	ldr	r3, [r3, #8]
 8008f56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f5a:	4a70      	ldr	r2, [pc, #448]	; (800911c <HAL_RCC_ClockConfig+0x264>)
 8008f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f60:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008f62:	2380      	movs	r3, #128	; 0x80
 8008f64:	617b      	str	r3, [r7, #20]
 8008f66:	e024      	b.n	8008fb2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	2b02      	cmp	r3, #2
 8008f6e:	d107      	bne.n	8008f80 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008f70:	4b6a      	ldr	r3, [pc, #424]	; (800911c <HAL_RCC_ClockConfig+0x264>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d109      	bne.n	8008f90 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	e0c6      	b.n	800910e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008f80:	4b66      	ldr	r3, [pc, #408]	; (800911c <HAL_RCC_ClockConfig+0x264>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d101      	bne.n	8008f90 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	e0be      	b.n	800910e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008f90:	f000 f8ce 	bl	8009130 <HAL_RCC_GetSysClockFreq>
 8008f94:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	4a61      	ldr	r2, [pc, #388]	; (8009120 <HAL_RCC_ClockConfig+0x268>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d909      	bls.n	8008fb2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008f9e:	4b5f      	ldr	r3, [pc, #380]	; (800911c <HAL_RCC_ClockConfig+0x264>)
 8008fa0:	689b      	ldr	r3, [r3, #8]
 8008fa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008fa6:	4a5d      	ldr	r2, [pc, #372]	; (800911c <HAL_RCC_ClockConfig+0x264>)
 8008fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008fae:	2380      	movs	r3, #128	; 0x80
 8008fb0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008fb2:	4b5a      	ldr	r3, [pc, #360]	; (800911c <HAL_RCC_ClockConfig+0x264>)
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	f023 0203 	bic.w	r2, r3, #3
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	4957      	ldr	r1, [pc, #348]	; (800911c <HAL_RCC_ClockConfig+0x264>)
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fc4:	f7fb f86c 	bl	80040a0 <HAL_GetTick>
 8008fc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008fca:	e00a      	b.n	8008fe2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008fcc:	f7fb f868 	bl	80040a0 <HAL_GetTick>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	1ad3      	subs	r3, r2, r3
 8008fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d901      	bls.n	8008fe2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008fde:	2303      	movs	r3, #3
 8008fe0:	e095      	b.n	800910e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008fe2:	4b4e      	ldr	r3, [pc, #312]	; (800911c <HAL_RCC_ClockConfig+0x264>)
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	f003 020c 	and.w	r2, r3, #12
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d1eb      	bne.n	8008fcc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f003 0302 	and.w	r3, r3, #2
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d023      	beq.n	8009048 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f003 0304 	and.w	r3, r3, #4
 8009008:	2b00      	cmp	r3, #0
 800900a:	d005      	beq.n	8009018 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800900c:	4b43      	ldr	r3, [pc, #268]	; (800911c <HAL_RCC_ClockConfig+0x264>)
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	4a42      	ldr	r2, [pc, #264]	; (800911c <HAL_RCC_ClockConfig+0x264>)
 8009012:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009016:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f003 0308 	and.w	r3, r3, #8
 8009020:	2b00      	cmp	r3, #0
 8009022:	d007      	beq.n	8009034 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009024:	4b3d      	ldr	r3, [pc, #244]	; (800911c <HAL_RCC_ClockConfig+0x264>)
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800902c:	4a3b      	ldr	r2, [pc, #236]	; (800911c <HAL_RCC_ClockConfig+0x264>)
 800902e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009032:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009034:	4b39      	ldr	r3, [pc, #228]	; (800911c <HAL_RCC_ClockConfig+0x264>)
 8009036:	689b      	ldr	r3, [r3, #8]
 8009038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	4936      	ldr	r1, [pc, #216]	; (800911c <HAL_RCC_ClockConfig+0x264>)
 8009042:	4313      	orrs	r3, r2
 8009044:	608b      	str	r3, [r1, #8]
 8009046:	e008      	b.n	800905a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	2b80      	cmp	r3, #128	; 0x80
 800904c:	d105      	bne.n	800905a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800904e:	4b33      	ldr	r3, [pc, #204]	; (800911c <HAL_RCC_ClockConfig+0x264>)
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	4a32      	ldr	r2, [pc, #200]	; (800911c <HAL_RCC_ClockConfig+0x264>)
 8009054:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009058:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800905a:	4b2f      	ldr	r3, [pc, #188]	; (8009118 <HAL_RCC_ClockConfig+0x260>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f003 030f 	and.w	r3, r3, #15
 8009062:	683a      	ldr	r2, [r7, #0]
 8009064:	429a      	cmp	r2, r3
 8009066:	d21d      	bcs.n	80090a4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009068:	4b2b      	ldr	r3, [pc, #172]	; (8009118 <HAL_RCC_ClockConfig+0x260>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f023 020f 	bic.w	r2, r3, #15
 8009070:	4929      	ldr	r1, [pc, #164]	; (8009118 <HAL_RCC_ClockConfig+0x260>)
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	4313      	orrs	r3, r2
 8009076:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009078:	f7fb f812 	bl	80040a0 <HAL_GetTick>
 800907c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800907e:	e00a      	b.n	8009096 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009080:	f7fb f80e 	bl	80040a0 <HAL_GetTick>
 8009084:	4602      	mov	r2, r0
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	1ad3      	subs	r3, r2, r3
 800908a:	f241 3288 	movw	r2, #5000	; 0x1388
 800908e:	4293      	cmp	r3, r2
 8009090:	d901      	bls.n	8009096 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009092:	2303      	movs	r3, #3
 8009094:	e03b      	b.n	800910e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009096:	4b20      	ldr	r3, [pc, #128]	; (8009118 <HAL_RCC_ClockConfig+0x260>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f003 030f 	and.w	r3, r3, #15
 800909e:	683a      	ldr	r2, [r7, #0]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d1ed      	bne.n	8009080 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f003 0304 	and.w	r3, r3, #4
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d008      	beq.n	80090c2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80090b0:	4b1a      	ldr	r3, [pc, #104]	; (800911c <HAL_RCC_ClockConfig+0x264>)
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	4917      	ldr	r1, [pc, #92]	; (800911c <HAL_RCC_ClockConfig+0x264>)
 80090be:	4313      	orrs	r3, r2
 80090c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f003 0308 	and.w	r3, r3, #8
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d009      	beq.n	80090e2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80090ce:	4b13      	ldr	r3, [pc, #76]	; (800911c <HAL_RCC_ClockConfig+0x264>)
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	691b      	ldr	r3, [r3, #16]
 80090da:	00db      	lsls	r3, r3, #3
 80090dc:	490f      	ldr	r1, [pc, #60]	; (800911c <HAL_RCC_ClockConfig+0x264>)
 80090de:	4313      	orrs	r3, r2
 80090e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80090e2:	f000 f825 	bl	8009130 <HAL_RCC_GetSysClockFreq>
 80090e6:	4602      	mov	r2, r0
 80090e8:	4b0c      	ldr	r3, [pc, #48]	; (800911c <HAL_RCC_ClockConfig+0x264>)
 80090ea:	689b      	ldr	r3, [r3, #8]
 80090ec:	091b      	lsrs	r3, r3, #4
 80090ee:	f003 030f 	and.w	r3, r3, #15
 80090f2:	490c      	ldr	r1, [pc, #48]	; (8009124 <HAL_RCC_ClockConfig+0x26c>)
 80090f4:	5ccb      	ldrb	r3, [r1, r3]
 80090f6:	f003 031f 	and.w	r3, r3, #31
 80090fa:	fa22 f303 	lsr.w	r3, r2, r3
 80090fe:	4a0a      	ldr	r2, [pc, #40]	; (8009128 <HAL_RCC_ClockConfig+0x270>)
 8009100:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009102:	4b0a      	ldr	r3, [pc, #40]	; (800912c <HAL_RCC_ClockConfig+0x274>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4618      	mov	r0, r3
 8009108:	f7fa fb60 	bl	80037cc <HAL_InitTick>
 800910c:	4603      	mov	r3, r0
}
 800910e:	4618      	mov	r0, r3
 8009110:	3718      	adds	r7, #24
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop
 8009118:	40022000 	.word	0x40022000
 800911c:	40021000 	.word	0x40021000
 8009120:	04c4b400 	.word	0x04c4b400
 8009124:	08014730 	.word	0x08014730
 8009128:	20000004 	.word	0x20000004
 800912c:	20000008 	.word	0x20000008

08009130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009130:	b480      	push	{r7}
 8009132:	b087      	sub	sp, #28
 8009134:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009136:	4b2c      	ldr	r3, [pc, #176]	; (80091e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	f003 030c 	and.w	r3, r3, #12
 800913e:	2b04      	cmp	r3, #4
 8009140:	d102      	bne.n	8009148 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009142:	4b2a      	ldr	r3, [pc, #168]	; (80091ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8009144:	613b      	str	r3, [r7, #16]
 8009146:	e047      	b.n	80091d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009148:	4b27      	ldr	r3, [pc, #156]	; (80091e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	f003 030c 	and.w	r3, r3, #12
 8009150:	2b08      	cmp	r3, #8
 8009152:	d102      	bne.n	800915a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009154:	4b26      	ldr	r3, [pc, #152]	; (80091f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8009156:	613b      	str	r3, [r7, #16]
 8009158:	e03e      	b.n	80091d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800915a:	4b23      	ldr	r3, [pc, #140]	; (80091e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	f003 030c 	and.w	r3, r3, #12
 8009162:	2b0c      	cmp	r3, #12
 8009164:	d136      	bne.n	80091d4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009166:	4b20      	ldr	r3, [pc, #128]	; (80091e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	f003 0303 	and.w	r3, r3, #3
 800916e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009170:	4b1d      	ldr	r3, [pc, #116]	; (80091e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009172:	68db      	ldr	r3, [r3, #12]
 8009174:	091b      	lsrs	r3, r3, #4
 8009176:	f003 030f 	and.w	r3, r3, #15
 800917a:	3301      	adds	r3, #1
 800917c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2b03      	cmp	r3, #3
 8009182:	d10c      	bne.n	800919e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009184:	4a1a      	ldr	r2, [pc, #104]	; (80091f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	fbb2 f3f3 	udiv	r3, r2, r3
 800918c:	4a16      	ldr	r2, [pc, #88]	; (80091e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800918e:	68d2      	ldr	r2, [r2, #12]
 8009190:	0a12      	lsrs	r2, r2, #8
 8009192:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009196:	fb02 f303 	mul.w	r3, r2, r3
 800919a:	617b      	str	r3, [r7, #20]
      break;
 800919c:	e00c      	b.n	80091b8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800919e:	4a13      	ldr	r2, [pc, #76]	; (80091ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80091a6:	4a10      	ldr	r2, [pc, #64]	; (80091e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80091a8:	68d2      	ldr	r2, [r2, #12]
 80091aa:	0a12      	lsrs	r2, r2, #8
 80091ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80091b0:	fb02 f303 	mul.w	r3, r2, r3
 80091b4:	617b      	str	r3, [r7, #20]
      break;
 80091b6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80091b8:	4b0b      	ldr	r3, [pc, #44]	; (80091e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80091ba:	68db      	ldr	r3, [r3, #12]
 80091bc:	0e5b      	lsrs	r3, r3, #25
 80091be:	f003 0303 	and.w	r3, r3, #3
 80091c2:	3301      	adds	r3, #1
 80091c4:	005b      	lsls	r3, r3, #1
 80091c6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80091c8:	697a      	ldr	r2, [r7, #20]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80091d0:	613b      	str	r3, [r7, #16]
 80091d2:	e001      	b.n	80091d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80091d4:	2300      	movs	r3, #0
 80091d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80091d8:	693b      	ldr	r3, [r7, #16]
}
 80091da:	4618      	mov	r0, r3
 80091dc:	371c      	adds	r7, #28
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr
 80091e6:	bf00      	nop
 80091e8:	40021000 	.word	0x40021000
 80091ec:	00f42400 	.word	0x00f42400
 80091f0:	007a1200 	.word	0x007a1200

080091f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80091f4:	b480      	push	{r7}
 80091f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80091f8:	4b03      	ldr	r3, [pc, #12]	; (8009208 <HAL_RCC_GetHCLKFreq+0x14>)
 80091fa:	681b      	ldr	r3, [r3, #0]
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr
 8009206:	bf00      	nop
 8009208:	20000004 	.word	0x20000004

0800920c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009210:	f7ff fff0 	bl	80091f4 <HAL_RCC_GetHCLKFreq>
 8009214:	4602      	mov	r2, r0
 8009216:	4b06      	ldr	r3, [pc, #24]	; (8009230 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009218:	689b      	ldr	r3, [r3, #8]
 800921a:	0a1b      	lsrs	r3, r3, #8
 800921c:	f003 0307 	and.w	r3, r3, #7
 8009220:	4904      	ldr	r1, [pc, #16]	; (8009234 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009222:	5ccb      	ldrb	r3, [r1, r3]
 8009224:	f003 031f 	and.w	r3, r3, #31
 8009228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800922c:	4618      	mov	r0, r3
 800922e:	bd80      	pop	{r7, pc}
 8009230:	40021000 	.word	0x40021000
 8009234:	08014740 	.word	0x08014740

08009238 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800923c:	f7ff ffda 	bl	80091f4 <HAL_RCC_GetHCLKFreq>
 8009240:	4602      	mov	r2, r0
 8009242:	4b06      	ldr	r3, [pc, #24]	; (800925c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	0adb      	lsrs	r3, r3, #11
 8009248:	f003 0307 	and.w	r3, r3, #7
 800924c:	4904      	ldr	r1, [pc, #16]	; (8009260 <HAL_RCC_GetPCLK2Freq+0x28>)
 800924e:	5ccb      	ldrb	r3, [r1, r3]
 8009250:	f003 031f 	and.w	r3, r3, #31
 8009254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009258:	4618      	mov	r0, r3
 800925a:	bd80      	pop	{r7, pc}
 800925c:	40021000 	.word	0x40021000
 8009260:	08014740 	.word	0x08014740

08009264 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	220f      	movs	r2, #15
 8009272:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8009274:	4b12      	ldr	r3, [pc, #72]	; (80092c0 <HAL_RCC_GetClockConfig+0x5c>)
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	f003 0203 	and.w	r2, r3, #3
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8009280:	4b0f      	ldr	r3, [pc, #60]	; (80092c0 <HAL_RCC_GetClockConfig+0x5c>)
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800928c:	4b0c      	ldr	r3, [pc, #48]	; (80092c0 <HAL_RCC_GetClockConfig+0x5c>)
 800928e:	689b      	ldr	r3, [r3, #8]
 8009290:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8009298:	4b09      	ldr	r3, [pc, #36]	; (80092c0 <HAL_RCC_GetClockConfig+0x5c>)
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	08db      	lsrs	r3, r3, #3
 800929e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80092a6:	4b07      	ldr	r3, [pc, #28]	; (80092c4 <HAL_RCC_GetClockConfig+0x60>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f003 020f 	and.w	r2, r3, #15
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	601a      	str	r2, [r3, #0]
}
 80092b2:	bf00      	nop
 80092b4:	370c      	adds	r7, #12
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr
 80092be:	bf00      	nop
 80092c0:	40021000 	.word	0x40021000
 80092c4:	40022000 	.word	0x40022000

080092c8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b087      	sub	sp, #28
 80092cc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80092ce:	4b1e      	ldr	r3, [pc, #120]	; (8009348 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80092d0:	68db      	ldr	r3, [r3, #12]
 80092d2:	f003 0303 	and.w	r3, r3, #3
 80092d6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80092d8:	4b1b      	ldr	r3, [pc, #108]	; (8009348 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80092da:	68db      	ldr	r3, [r3, #12]
 80092dc:	091b      	lsrs	r3, r3, #4
 80092de:	f003 030f 	and.w	r3, r3, #15
 80092e2:	3301      	adds	r3, #1
 80092e4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	2b03      	cmp	r3, #3
 80092ea:	d10c      	bne.n	8009306 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80092ec:	4a17      	ldr	r2, [pc, #92]	; (800934c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80092f4:	4a14      	ldr	r2, [pc, #80]	; (8009348 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80092f6:	68d2      	ldr	r2, [r2, #12]
 80092f8:	0a12      	lsrs	r2, r2, #8
 80092fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80092fe:	fb02 f303 	mul.w	r3, r2, r3
 8009302:	617b      	str	r3, [r7, #20]
    break;
 8009304:	e00c      	b.n	8009320 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009306:	4a12      	ldr	r2, [pc, #72]	; (8009350 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	fbb2 f3f3 	udiv	r3, r2, r3
 800930e:	4a0e      	ldr	r2, [pc, #56]	; (8009348 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009310:	68d2      	ldr	r2, [r2, #12]
 8009312:	0a12      	lsrs	r2, r2, #8
 8009314:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009318:	fb02 f303 	mul.w	r3, r2, r3
 800931c:	617b      	str	r3, [r7, #20]
    break;
 800931e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009320:	4b09      	ldr	r3, [pc, #36]	; (8009348 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009322:	68db      	ldr	r3, [r3, #12]
 8009324:	0e5b      	lsrs	r3, r3, #25
 8009326:	f003 0303 	and.w	r3, r3, #3
 800932a:	3301      	adds	r3, #1
 800932c:	005b      	lsls	r3, r3, #1
 800932e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009330:	697a      	ldr	r2, [r7, #20]
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	fbb2 f3f3 	udiv	r3, r2, r3
 8009338:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800933a:	687b      	ldr	r3, [r7, #4]
}
 800933c:	4618      	mov	r0, r3
 800933e:	371c      	adds	r7, #28
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr
 8009348:	40021000 	.word	0x40021000
 800934c:	007a1200 	.word	0x007a1200
 8009350:	00f42400 	.word	0x00f42400

08009354 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b086      	sub	sp, #24
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800935c:	2300      	movs	r3, #0
 800935e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009360:	2300      	movs	r3, #0
 8009362:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800936c:	2b00      	cmp	r3, #0
 800936e:	f000 8098 	beq.w	80094a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009372:	2300      	movs	r3, #0
 8009374:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009376:	4b43      	ldr	r3, [pc, #268]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800937a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800937e:	2b00      	cmp	r3, #0
 8009380:	d10d      	bne.n	800939e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009382:	4b40      	ldr	r3, [pc, #256]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009386:	4a3f      	ldr	r2, [pc, #252]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800938c:	6593      	str	r3, [r2, #88]	; 0x58
 800938e:	4b3d      	ldr	r3, [pc, #244]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009396:	60bb      	str	r3, [r7, #8]
 8009398:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800939a:	2301      	movs	r3, #1
 800939c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800939e:	4b3a      	ldr	r3, [pc, #232]	; (8009488 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4a39      	ldr	r2, [pc, #228]	; (8009488 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80093a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80093aa:	f7fa fe79 	bl	80040a0 <HAL_GetTick>
 80093ae:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80093b0:	e009      	b.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80093b2:	f7fa fe75 	bl	80040a0 <HAL_GetTick>
 80093b6:	4602      	mov	r2, r0
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	1ad3      	subs	r3, r2, r3
 80093bc:	2b02      	cmp	r3, #2
 80093be:	d902      	bls.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80093c0:	2303      	movs	r3, #3
 80093c2:	74fb      	strb	r3, [r7, #19]
        break;
 80093c4:	e005      	b.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80093c6:	4b30      	ldr	r3, [pc, #192]	; (8009488 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d0ef      	beq.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80093d2:	7cfb      	ldrb	r3, [r7, #19]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d159      	bne.n	800948c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80093d8:	4b2a      	ldr	r3, [pc, #168]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093e2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d01e      	beq.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093ee:	697a      	ldr	r2, [r7, #20]
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d019      	beq.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80093f4:	4b23      	ldr	r3, [pc, #140]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009400:	4b20      	ldr	r3, [pc, #128]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009406:	4a1f      	ldr	r2, [pc, #124]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800940c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009410:	4b1c      	ldr	r3, [pc, #112]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009416:	4a1b      	ldr	r2, [pc, #108]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009418:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800941c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009420:	4a18      	ldr	r2, [pc, #96]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	f003 0301 	and.w	r3, r3, #1
 800942e:	2b00      	cmp	r3, #0
 8009430:	d016      	beq.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009432:	f7fa fe35 	bl	80040a0 <HAL_GetTick>
 8009436:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009438:	e00b      	b.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800943a:	f7fa fe31 	bl	80040a0 <HAL_GetTick>
 800943e:	4602      	mov	r2, r0
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	1ad3      	subs	r3, r2, r3
 8009444:	f241 3288 	movw	r2, #5000	; 0x1388
 8009448:	4293      	cmp	r3, r2
 800944a:	d902      	bls.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800944c:	2303      	movs	r3, #3
 800944e:	74fb      	strb	r3, [r7, #19]
            break;
 8009450:	e006      	b.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009452:	4b0c      	ldr	r3, [pc, #48]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009458:	f003 0302 	and.w	r3, r3, #2
 800945c:	2b00      	cmp	r3, #0
 800945e:	d0ec      	beq.n	800943a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009460:	7cfb      	ldrb	r3, [r7, #19]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d10b      	bne.n	800947e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009466:	4b07      	ldr	r3, [pc, #28]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800946c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009474:	4903      	ldr	r1, [pc, #12]	; (8009484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009476:	4313      	orrs	r3, r2
 8009478:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800947c:	e008      	b.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800947e:	7cfb      	ldrb	r3, [r7, #19]
 8009480:	74bb      	strb	r3, [r7, #18]
 8009482:	e005      	b.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009484:	40021000 	.word	0x40021000
 8009488:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800948c:	7cfb      	ldrb	r3, [r7, #19]
 800948e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009490:	7c7b      	ldrb	r3, [r7, #17]
 8009492:	2b01      	cmp	r3, #1
 8009494:	d105      	bne.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009496:	4ba7      	ldr	r3, [pc, #668]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800949a:	4aa6      	ldr	r2, [pc, #664]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800949c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80094a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f003 0301 	and.w	r3, r3, #1
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d00a      	beq.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80094ae:	4ba1      	ldr	r3, [pc, #644]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094b4:	f023 0203 	bic.w	r2, r3, #3
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	499d      	ldr	r1, [pc, #628]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094be:	4313      	orrs	r3, r2
 80094c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f003 0302 	and.w	r3, r3, #2
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d00a      	beq.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80094d0:	4b98      	ldr	r3, [pc, #608]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094d6:	f023 020c 	bic.w	r2, r3, #12
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	689b      	ldr	r3, [r3, #8]
 80094de:	4995      	ldr	r1, [pc, #596]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094e0:	4313      	orrs	r3, r2
 80094e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f003 0304 	and.w	r3, r3, #4
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d00a      	beq.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80094f2:	4b90      	ldr	r3, [pc, #576]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	68db      	ldr	r3, [r3, #12]
 8009500:	498c      	ldr	r1, [pc, #560]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009502:	4313      	orrs	r3, r2
 8009504:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f003 0308 	and.w	r3, r3, #8
 8009510:	2b00      	cmp	r3, #0
 8009512:	d00a      	beq.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009514:	4b87      	ldr	r3, [pc, #540]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800951a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	691b      	ldr	r3, [r3, #16]
 8009522:	4984      	ldr	r1, [pc, #528]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009524:	4313      	orrs	r3, r2
 8009526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f003 0310 	and.w	r3, r3, #16
 8009532:	2b00      	cmp	r3, #0
 8009534:	d00a      	beq.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009536:	4b7f      	ldr	r3, [pc, #508]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800953c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	695b      	ldr	r3, [r3, #20]
 8009544:	497b      	ldr	r1, [pc, #492]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009546:	4313      	orrs	r3, r2
 8009548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f003 0320 	and.w	r3, r3, #32
 8009554:	2b00      	cmp	r3, #0
 8009556:	d00a      	beq.n	800956e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009558:	4b76      	ldr	r3, [pc, #472]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800955a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800955e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	699b      	ldr	r3, [r3, #24]
 8009566:	4973      	ldr	r1, [pc, #460]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009568:	4313      	orrs	r3, r2
 800956a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009576:	2b00      	cmp	r3, #0
 8009578:	d00a      	beq.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800957a:	4b6e      	ldr	r3, [pc, #440]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800957c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009580:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	69db      	ldr	r3, [r3, #28]
 8009588:	496a      	ldr	r1, [pc, #424]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800958a:	4313      	orrs	r3, r2
 800958c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009598:	2b00      	cmp	r3, #0
 800959a:	d00a      	beq.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800959c:	4b65      	ldr	r3, [pc, #404]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800959e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6a1b      	ldr	r3, [r3, #32]
 80095aa:	4962      	ldr	r1, [pc, #392]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095ac:	4313      	orrs	r3, r2
 80095ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d00a      	beq.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80095be:	4b5d      	ldr	r3, [pc, #372]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095cc:	4959      	ldr	r1, [pc, #356]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095ce:	4313      	orrs	r3, r2
 80095d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d00a      	beq.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80095e0:	4b54      	ldr	r3, [pc, #336]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80095e6:	f023 0203 	bic.w	r2, r3, #3
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ee:	4951      	ldr	r1, [pc, #324]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095f0:	4313      	orrs	r3, r2
 80095f2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d00a      	beq.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009602:	4b4c      	ldr	r3, [pc, #304]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009608:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009610:	4948      	ldr	r1, [pc, #288]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009612:	4313      	orrs	r3, r2
 8009614:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009620:	2b00      	cmp	r3, #0
 8009622:	d015      	beq.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009624:	4b43      	ldr	r3, [pc, #268]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800962a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009632:	4940      	ldr	r1, [pc, #256]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009634:	4313      	orrs	r3, r2
 8009636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800963e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009642:	d105      	bne.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009644:	4b3b      	ldr	r3, [pc, #236]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	4a3a      	ldr	r2, [pc, #232]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800964a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800964e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009658:	2b00      	cmp	r3, #0
 800965a:	d015      	beq.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800965c:	4b35      	ldr	r3, [pc, #212]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800965e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009662:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800966a:	4932      	ldr	r1, [pc, #200]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800966c:	4313      	orrs	r3, r2
 800966e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009676:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800967a:	d105      	bne.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800967c:	4b2d      	ldr	r3, [pc, #180]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800967e:	68db      	ldr	r3, [r3, #12]
 8009680:	4a2c      	ldr	r2, [pc, #176]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009682:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009686:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009690:	2b00      	cmp	r3, #0
 8009692:	d015      	beq.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009694:	4b27      	ldr	r3, [pc, #156]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800969a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096a2:	4924      	ldr	r1, [pc, #144]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096a4:	4313      	orrs	r3, r2
 80096a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80096b2:	d105      	bne.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80096b4:	4b1f      	ldr	r3, [pc, #124]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	4a1e      	ldr	r2, [pc, #120]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80096be:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d015      	beq.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80096cc:	4b19      	ldr	r3, [pc, #100]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096da:	4916      	ldr	r1, [pc, #88]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096dc:	4313      	orrs	r3, r2
 80096de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80096ea:	d105      	bne.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80096ec:	4b11      	ldr	r3, [pc, #68]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096ee:	68db      	ldr	r3, [r3, #12]
 80096f0:	4a10      	ldr	r2, [pc, #64]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80096f6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009700:	2b00      	cmp	r3, #0
 8009702:	d019      	beq.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009704:	4b0b      	ldr	r3, [pc, #44]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800970a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009712:	4908      	ldr	r1, [pc, #32]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009714:	4313      	orrs	r3, r2
 8009716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800971e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009722:	d109      	bne.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009724:	4b03      	ldr	r3, [pc, #12]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009726:	68db      	ldr	r3, [r3, #12]
 8009728:	4a02      	ldr	r2, [pc, #8]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800972a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800972e:	60d3      	str	r3, [r2, #12]
 8009730:	e002      	b.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009732:	bf00      	nop
 8009734:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009740:	2b00      	cmp	r3, #0
 8009742:	d015      	beq.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009744:	4b29      	ldr	r3, [pc, #164]	; (80097ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800974a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009752:	4926      	ldr	r1, [pc, #152]	; (80097ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009754:	4313      	orrs	r3, r2
 8009756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800975e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009762:	d105      	bne.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009764:	4b21      	ldr	r3, [pc, #132]	; (80097ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009766:	68db      	ldr	r3, [r3, #12]
 8009768:	4a20      	ldr	r2, [pc, #128]	; (80097ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800976a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800976e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009778:	2b00      	cmp	r3, #0
 800977a:	d015      	beq.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800977c:	4b1b      	ldr	r3, [pc, #108]	; (80097ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800977e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009782:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800978a:	4918      	ldr	r1, [pc, #96]	; (80097ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800978c:	4313      	orrs	r3, r2
 800978e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800979a:	d105      	bne.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800979c:	4b13      	ldr	r3, [pc, #76]	; (80097ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800979e:	68db      	ldr	r3, [r3, #12]
 80097a0:	4a12      	ldr	r2, [pc, #72]	; (80097ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80097a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097a6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d015      	beq.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80097b4:	4b0d      	ldr	r3, [pc, #52]	; (80097ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80097b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80097ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097c2:	490a      	ldr	r1, [pc, #40]	; (80097ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80097c4:	4313      	orrs	r3, r2
 80097c6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80097d2:	d105      	bne.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80097d4:	4b05      	ldr	r3, [pc, #20]	; (80097ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80097d6:	68db      	ldr	r3, [r3, #12]
 80097d8:	4a04      	ldr	r2, [pc, #16]	; (80097ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80097da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80097de:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80097e0:	7cbb      	ldrb	r3, [r7, #18]
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3718      	adds	r7, #24
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
 80097ea:	bf00      	nop
 80097ec:	40021000 	.word	0x40021000

080097f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d101      	bne.n	8009802 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80097fe:	2301      	movs	r3, #1
 8009800:	e049      	b.n	8009896 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009808:	b2db      	uxtb	r3, r3
 800980a:	2b00      	cmp	r3, #0
 800980c:	d106      	bne.n	800981c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2200      	movs	r2, #0
 8009812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 f841 	bl	800989e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2202      	movs	r2, #2
 8009820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681a      	ldr	r2, [r3, #0]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	3304      	adds	r3, #4
 800982c:	4619      	mov	r1, r3
 800982e:	4610      	mov	r0, r2
 8009830:	f000 fcde 	bl	800a1f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2201      	movs	r2, #1
 8009838:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2201      	movs	r2, #1
 8009840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2201      	movs	r2, #1
 8009848:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2201      	movs	r2, #1
 8009850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2201      	movs	r2, #1
 8009858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2201      	movs	r2, #1
 8009860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2201      	movs	r2, #1
 8009868:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2201      	movs	r2, #1
 8009870:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2201      	movs	r2, #1
 8009878:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2201      	movs	r2, #1
 8009880:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2201      	movs	r2, #1
 8009888:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2201      	movs	r2, #1
 8009890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009894:	2300      	movs	r3, #0
}
 8009896:	4618      	mov	r0, r3
 8009898:	3708      	adds	r7, #8
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800989e:	b480      	push	{r7}
 80098a0:	b083      	sub	sp, #12
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80098a6:	bf00      	nop
 80098a8:	370c      	adds	r7, #12
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr
	...

080098b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b085      	sub	sp, #20
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	2b01      	cmp	r3, #1
 80098c6:	d001      	beq.n	80098cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80098c8:	2301      	movs	r3, #1
 80098ca:	e054      	b.n	8009976 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2202      	movs	r2, #2
 80098d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	68da      	ldr	r2, [r3, #12]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f042 0201 	orr.w	r2, r2, #1
 80098e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4a26      	ldr	r2, [pc, #152]	; (8009984 <HAL_TIM_Base_Start_IT+0xd0>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d022      	beq.n	8009934 <HAL_TIM_Base_Start_IT+0x80>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098f6:	d01d      	beq.n	8009934 <HAL_TIM_Base_Start_IT+0x80>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a22      	ldr	r2, [pc, #136]	; (8009988 <HAL_TIM_Base_Start_IT+0xd4>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d018      	beq.n	8009934 <HAL_TIM_Base_Start_IT+0x80>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4a21      	ldr	r2, [pc, #132]	; (800998c <HAL_TIM_Base_Start_IT+0xd8>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d013      	beq.n	8009934 <HAL_TIM_Base_Start_IT+0x80>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4a1f      	ldr	r2, [pc, #124]	; (8009990 <HAL_TIM_Base_Start_IT+0xdc>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d00e      	beq.n	8009934 <HAL_TIM_Base_Start_IT+0x80>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4a1e      	ldr	r2, [pc, #120]	; (8009994 <HAL_TIM_Base_Start_IT+0xe0>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d009      	beq.n	8009934 <HAL_TIM_Base_Start_IT+0x80>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a1c      	ldr	r2, [pc, #112]	; (8009998 <HAL_TIM_Base_Start_IT+0xe4>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d004      	beq.n	8009934 <HAL_TIM_Base_Start_IT+0x80>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4a1b      	ldr	r2, [pc, #108]	; (800999c <HAL_TIM_Base_Start_IT+0xe8>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d115      	bne.n	8009960 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	689a      	ldr	r2, [r3, #8]
 800993a:	4b19      	ldr	r3, [pc, #100]	; (80099a0 <HAL_TIM_Base_Start_IT+0xec>)
 800993c:	4013      	ands	r3, r2
 800993e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2b06      	cmp	r3, #6
 8009944:	d015      	beq.n	8009972 <HAL_TIM_Base_Start_IT+0xbe>
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800994c:	d011      	beq.n	8009972 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	681a      	ldr	r2, [r3, #0]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f042 0201 	orr.w	r2, r2, #1
 800995c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800995e:	e008      	b.n	8009972 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	681a      	ldr	r2, [r3, #0]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f042 0201 	orr.w	r2, r2, #1
 800996e:	601a      	str	r2, [r3, #0]
 8009970:	e000      	b.n	8009974 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009972:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009974:	2300      	movs	r3, #0
}
 8009976:	4618      	mov	r0, r3
 8009978:	3714      	adds	r7, #20
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr
 8009982:	bf00      	nop
 8009984:	40012c00 	.word	0x40012c00
 8009988:	40000400 	.word	0x40000400
 800998c:	40000800 	.word	0x40000800
 8009990:	40000c00 	.word	0x40000c00
 8009994:	40013400 	.word	0x40013400
 8009998:	40014000 	.word	0x40014000
 800999c:	40015000 	.word	0x40015000
 80099a0:	00010007 	.word	0x00010007

080099a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b082      	sub	sp, #8
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d101      	bne.n	80099b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80099b2:	2301      	movs	r3, #1
 80099b4:	e049      	b.n	8009a4a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099bc:	b2db      	uxtb	r3, r3
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d106      	bne.n	80099d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2200      	movs	r2, #0
 80099c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f7fa f90c 	bl	8003be8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2202      	movs	r2, #2
 80099d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681a      	ldr	r2, [r3, #0]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	3304      	adds	r3, #4
 80099e0:	4619      	mov	r1, r3
 80099e2:	4610      	mov	r0, r2
 80099e4:	f000 fc04 	bl	800a1f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2201      	movs	r2, #1
 80099ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2201      	movs	r2, #1
 80099f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2201      	movs	r2, #1
 80099fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2201      	movs	r2, #1
 8009a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2201      	movs	r2, #1
 8009a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2201      	movs	r2, #1
 8009a24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2201      	movs	r2, #1
 8009a34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2201      	movs	r2, #1
 8009a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009a48:	2300      	movs	r3, #0
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3708      	adds	r7, #8
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}
	...

08009a54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b084      	sub	sp, #16
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d109      	bne.n	8009a78 <HAL_TIM_PWM_Start+0x24>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	bf14      	ite	ne
 8009a70:	2301      	movne	r3, #1
 8009a72:	2300      	moveq	r3, #0
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	e03c      	b.n	8009af2 <HAL_TIM_PWM_Start+0x9e>
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	2b04      	cmp	r3, #4
 8009a7c:	d109      	bne.n	8009a92 <HAL_TIM_PWM_Start+0x3e>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009a84:	b2db      	uxtb	r3, r3
 8009a86:	2b01      	cmp	r3, #1
 8009a88:	bf14      	ite	ne
 8009a8a:	2301      	movne	r3, #1
 8009a8c:	2300      	moveq	r3, #0
 8009a8e:	b2db      	uxtb	r3, r3
 8009a90:	e02f      	b.n	8009af2 <HAL_TIM_PWM_Start+0x9e>
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	2b08      	cmp	r3, #8
 8009a96:	d109      	bne.n	8009aac <HAL_TIM_PWM_Start+0x58>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a9e:	b2db      	uxtb	r3, r3
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	bf14      	ite	ne
 8009aa4:	2301      	movne	r3, #1
 8009aa6:	2300      	moveq	r3, #0
 8009aa8:	b2db      	uxtb	r3, r3
 8009aaa:	e022      	b.n	8009af2 <HAL_TIM_PWM_Start+0x9e>
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	2b0c      	cmp	r3, #12
 8009ab0:	d109      	bne.n	8009ac6 <HAL_TIM_PWM_Start+0x72>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ab8:	b2db      	uxtb	r3, r3
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	bf14      	ite	ne
 8009abe:	2301      	movne	r3, #1
 8009ac0:	2300      	moveq	r3, #0
 8009ac2:	b2db      	uxtb	r3, r3
 8009ac4:	e015      	b.n	8009af2 <HAL_TIM_PWM_Start+0x9e>
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	2b10      	cmp	r3, #16
 8009aca:	d109      	bne.n	8009ae0 <HAL_TIM_PWM_Start+0x8c>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	bf14      	ite	ne
 8009ad8:	2301      	movne	r3, #1
 8009ada:	2300      	moveq	r3, #0
 8009adc:	b2db      	uxtb	r3, r3
 8009ade:	e008      	b.n	8009af2 <HAL_TIM_PWM_Start+0x9e>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009ae6:	b2db      	uxtb	r3, r3
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	bf14      	ite	ne
 8009aec:	2301      	movne	r3, #1
 8009aee:	2300      	moveq	r3, #0
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d001      	beq.n	8009afa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009af6:	2301      	movs	r3, #1
 8009af8:	e0a6      	b.n	8009c48 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d104      	bne.n	8009b0a <HAL_TIM_PWM_Start+0xb6>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2202      	movs	r2, #2
 8009b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b08:	e023      	b.n	8009b52 <HAL_TIM_PWM_Start+0xfe>
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	2b04      	cmp	r3, #4
 8009b0e:	d104      	bne.n	8009b1a <HAL_TIM_PWM_Start+0xc6>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2202      	movs	r2, #2
 8009b14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b18:	e01b      	b.n	8009b52 <HAL_TIM_PWM_Start+0xfe>
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	2b08      	cmp	r3, #8
 8009b1e:	d104      	bne.n	8009b2a <HAL_TIM_PWM_Start+0xd6>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2202      	movs	r2, #2
 8009b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b28:	e013      	b.n	8009b52 <HAL_TIM_PWM_Start+0xfe>
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	2b0c      	cmp	r3, #12
 8009b2e:	d104      	bne.n	8009b3a <HAL_TIM_PWM_Start+0xe6>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2202      	movs	r2, #2
 8009b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009b38:	e00b      	b.n	8009b52 <HAL_TIM_PWM_Start+0xfe>
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	2b10      	cmp	r3, #16
 8009b3e:	d104      	bne.n	8009b4a <HAL_TIM_PWM_Start+0xf6>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2202      	movs	r2, #2
 8009b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b48:	e003      	b.n	8009b52 <HAL_TIM_PWM_Start+0xfe>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2202      	movs	r2, #2
 8009b4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	2201      	movs	r2, #1
 8009b58:	6839      	ldr	r1, [r7, #0]
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f000 ff1a 	bl	800a994 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a3a      	ldr	r2, [pc, #232]	; (8009c50 <HAL_TIM_PWM_Start+0x1fc>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d018      	beq.n	8009b9c <HAL_TIM_PWM_Start+0x148>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4a39      	ldr	r2, [pc, #228]	; (8009c54 <HAL_TIM_PWM_Start+0x200>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d013      	beq.n	8009b9c <HAL_TIM_PWM_Start+0x148>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4a37      	ldr	r2, [pc, #220]	; (8009c58 <HAL_TIM_PWM_Start+0x204>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d00e      	beq.n	8009b9c <HAL_TIM_PWM_Start+0x148>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4a36      	ldr	r2, [pc, #216]	; (8009c5c <HAL_TIM_PWM_Start+0x208>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d009      	beq.n	8009b9c <HAL_TIM_PWM_Start+0x148>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a34      	ldr	r2, [pc, #208]	; (8009c60 <HAL_TIM_PWM_Start+0x20c>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d004      	beq.n	8009b9c <HAL_TIM_PWM_Start+0x148>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4a33      	ldr	r2, [pc, #204]	; (8009c64 <HAL_TIM_PWM_Start+0x210>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d101      	bne.n	8009ba0 <HAL_TIM_PWM_Start+0x14c>
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	e000      	b.n	8009ba2 <HAL_TIM_PWM_Start+0x14e>
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d007      	beq.n	8009bb6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009bb4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4a25      	ldr	r2, [pc, #148]	; (8009c50 <HAL_TIM_PWM_Start+0x1fc>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d022      	beq.n	8009c06 <HAL_TIM_PWM_Start+0x1b2>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bc8:	d01d      	beq.n	8009c06 <HAL_TIM_PWM_Start+0x1b2>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	4a26      	ldr	r2, [pc, #152]	; (8009c68 <HAL_TIM_PWM_Start+0x214>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d018      	beq.n	8009c06 <HAL_TIM_PWM_Start+0x1b2>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a24      	ldr	r2, [pc, #144]	; (8009c6c <HAL_TIM_PWM_Start+0x218>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d013      	beq.n	8009c06 <HAL_TIM_PWM_Start+0x1b2>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4a23      	ldr	r2, [pc, #140]	; (8009c70 <HAL_TIM_PWM_Start+0x21c>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d00e      	beq.n	8009c06 <HAL_TIM_PWM_Start+0x1b2>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4a19      	ldr	r2, [pc, #100]	; (8009c54 <HAL_TIM_PWM_Start+0x200>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d009      	beq.n	8009c06 <HAL_TIM_PWM_Start+0x1b2>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4a18      	ldr	r2, [pc, #96]	; (8009c58 <HAL_TIM_PWM_Start+0x204>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d004      	beq.n	8009c06 <HAL_TIM_PWM_Start+0x1b2>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a18      	ldr	r2, [pc, #96]	; (8009c64 <HAL_TIM_PWM_Start+0x210>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d115      	bne.n	8009c32 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	689a      	ldr	r2, [r3, #8]
 8009c0c:	4b19      	ldr	r3, [pc, #100]	; (8009c74 <HAL_TIM_PWM_Start+0x220>)
 8009c0e:	4013      	ands	r3, r2
 8009c10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2b06      	cmp	r3, #6
 8009c16:	d015      	beq.n	8009c44 <HAL_TIM_PWM_Start+0x1f0>
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c1e:	d011      	beq.n	8009c44 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f042 0201 	orr.w	r2, r2, #1
 8009c2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c30:	e008      	b.n	8009c44 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f042 0201 	orr.w	r2, r2, #1
 8009c40:	601a      	str	r2, [r3, #0]
 8009c42:	e000      	b.n	8009c46 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c44:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009c46:	2300      	movs	r3, #0
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3710      	adds	r7, #16
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}
 8009c50:	40012c00 	.word	0x40012c00
 8009c54:	40013400 	.word	0x40013400
 8009c58:	40014000 	.word	0x40014000
 8009c5c:	40014400 	.word	0x40014400
 8009c60:	40014800 	.word	0x40014800
 8009c64:	40015000 	.word	0x40015000
 8009c68:	40000400 	.word	0x40000400
 8009c6c:	40000800 	.word	0x40000800
 8009c70:	40000c00 	.word	0x40000c00
 8009c74:	00010007 	.word	0x00010007

08009c78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b082      	sub	sp, #8
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	691b      	ldr	r3, [r3, #16]
 8009c86:	f003 0302 	and.w	r3, r3, #2
 8009c8a:	2b02      	cmp	r3, #2
 8009c8c:	d122      	bne.n	8009cd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	68db      	ldr	r3, [r3, #12]
 8009c94:	f003 0302 	and.w	r3, r3, #2
 8009c98:	2b02      	cmp	r3, #2
 8009c9a:	d11b      	bne.n	8009cd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f06f 0202 	mvn.w	r2, #2
 8009ca4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2201      	movs	r2, #1
 8009caa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	699b      	ldr	r3, [r3, #24]
 8009cb2:	f003 0303 	and.w	r3, r3, #3
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d003      	beq.n	8009cc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 fa7a 	bl	800a1b4 <HAL_TIM_IC_CaptureCallback>
 8009cc0:	e005      	b.n	8009cce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 fa6c 	bl	800a1a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f000 fa7d 	bl	800a1c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	691b      	ldr	r3, [r3, #16]
 8009cda:	f003 0304 	and.w	r3, r3, #4
 8009cde:	2b04      	cmp	r3, #4
 8009ce0:	d122      	bne.n	8009d28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	68db      	ldr	r3, [r3, #12]
 8009ce8:	f003 0304 	and.w	r3, r3, #4
 8009cec:	2b04      	cmp	r3, #4
 8009cee:	d11b      	bne.n	8009d28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f06f 0204 	mvn.w	r2, #4
 8009cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2202      	movs	r2, #2
 8009cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	699b      	ldr	r3, [r3, #24]
 8009d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d003      	beq.n	8009d16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 fa50 	bl	800a1b4 <HAL_TIM_IC_CaptureCallback>
 8009d14:	e005      	b.n	8009d22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 fa42 	bl	800a1a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f000 fa53 	bl	800a1c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2200      	movs	r2, #0
 8009d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	691b      	ldr	r3, [r3, #16]
 8009d2e:	f003 0308 	and.w	r3, r3, #8
 8009d32:	2b08      	cmp	r3, #8
 8009d34:	d122      	bne.n	8009d7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	68db      	ldr	r3, [r3, #12]
 8009d3c:	f003 0308 	and.w	r3, r3, #8
 8009d40:	2b08      	cmp	r3, #8
 8009d42:	d11b      	bne.n	8009d7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f06f 0208 	mvn.w	r2, #8
 8009d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2204      	movs	r2, #4
 8009d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	69db      	ldr	r3, [r3, #28]
 8009d5a:	f003 0303 	and.w	r3, r3, #3
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d003      	beq.n	8009d6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 fa26 	bl	800a1b4 <HAL_TIM_IC_CaptureCallback>
 8009d68:	e005      	b.n	8009d76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 fa18 	bl	800a1a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f000 fa29 	bl	800a1c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	691b      	ldr	r3, [r3, #16]
 8009d82:	f003 0310 	and.w	r3, r3, #16
 8009d86:	2b10      	cmp	r3, #16
 8009d88:	d122      	bne.n	8009dd0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	68db      	ldr	r3, [r3, #12]
 8009d90:	f003 0310 	and.w	r3, r3, #16
 8009d94:	2b10      	cmp	r3, #16
 8009d96:	d11b      	bne.n	8009dd0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f06f 0210 	mvn.w	r2, #16
 8009da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2208      	movs	r2, #8
 8009da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	69db      	ldr	r3, [r3, #28]
 8009dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d003      	beq.n	8009dbe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 f9fc 	bl	800a1b4 <HAL_TIM_IC_CaptureCallback>
 8009dbc:	e005      	b.n	8009dca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f000 f9ee 	bl	800a1a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f000 f9ff 	bl	800a1c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	691b      	ldr	r3, [r3, #16]
 8009dd6:	f003 0301 	and.w	r3, r3, #1
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d10e      	bne.n	8009dfc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	68db      	ldr	r3, [r3, #12]
 8009de4:	f003 0301 	and.w	r3, r3, #1
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	d107      	bne.n	8009dfc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f06f 0201 	mvn.w	r2, #1
 8009df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f7f9 f9d6 	bl	80031a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	691b      	ldr	r3, [r3, #16]
 8009e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e06:	2b80      	cmp	r3, #128	; 0x80
 8009e08:	d10e      	bne.n	8009e28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	68db      	ldr	r3, [r3, #12]
 8009e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e14:	2b80      	cmp	r3, #128	; 0x80
 8009e16:	d107      	bne.n	8009e28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f000 fe7c 	bl	800ab20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	691b      	ldr	r3, [r3, #16]
 8009e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e36:	d10e      	bne.n	8009e56 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	68db      	ldr	r3, [r3, #12]
 8009e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e42:	2b80      	cmp	r3, #128	; 0x80
 8009e44:	d107      	bne.n	8009e56 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009e4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f000 fe6f 	bl	800ab34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	691b      	ldr	r3, [r3, #16]
 8009e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e60:	2b40      	cmp	r3, #64	; 0x40
 8009e62:	d10e      	bne.n	8009e82 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	68db      	ldr	r3, [r3, #12]
 8009e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e6e:	2b40      	cmp	r3, #64	; 0x40
 8009e70:	d107      	bne.n	8009e82 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009e7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f000 f9ad 	bl	800a1dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	691b      	ldr	r3, [r3, #16]
 8009e88:	f003 0320 	and.w	r3, r3, #32
 8009e8c:	2b20      	cmp	r3, #32
 8009e8e:	d10e      	bne.n	8009eae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	68db      	ldr	r3, [r3, #12]
 8009e96:	f003 0320 	and.w	r3, r3, #32
 8009e9a:	2b20      	cmp	r3, #32
 8009e9c:	d107      	bne.n	8009eae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f06f 0220 	mvn.w	r2, #32
 8009ea6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f000 fe2f 	bl	800ab0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	691b      	ldr	r3, [r3, #16]
 8009eb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009eb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ebc:	d10f      	bne.n	8009ede <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	68db      	ldr	r3, [r3, #12]
 8009ec4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009ec8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ecc:	d107      	bne.n	8009ede <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8009ed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f000 fe35 	bl	800ab48 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	691b      	ldr	r3, [r3, #16]
 8009ee4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009ee8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009eec:	d10f      	bne.n	8009f0e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	68db      	ldr	r3, [r3, #12]
 8009ef4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009ef8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009efc:	d107      	bne.n	8009f0e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8009f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f000 fe27 	bl	800ab5c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	691b      	ldr	r3, [r3, #16]
 8009f14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009f1c:	d10f      	bne.n	8009f3e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	68db      	ldr	r3, [r3, #12]
 8009f24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009f2c:	d107      	bne.n	8009f3e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8009f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 fe19 	bl	800ab70 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	691b      	ldr	r3, [r3, #16]
 8009f44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009f4c:	d10f      	bne.n	8009f6e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	68db      	ldr	r3, [r3, #12]
 8009f54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009f5c:	d107      	bne.n	8009f6e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8009f66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f000 fe0b 	bl	800ab84 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009f6e:	bf00      	nop
 8009f70:	3708      	adds	r7, #8
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}
	...

08009f78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b086      	sub	sp, #24
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	60f8      	str	r0, [r7, #12]
 8009f80:	60b9      	str	r1, [r7, #8]
 8009f82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f84:	2300      	movs	r3, #0
 8009f86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f8e:	2b01      	cmp	r3, #1
 8009f90:	d101      	bne.n	8009f96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009f92:	2302      	movs	r3, #2
 8009f94:	e0ff      	b.n	800a196 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2201      	movs	r2, #1
 8009f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2b14      	cmp	r3, #20
 8009fa2:	f200 80f0 	bhi.w	800a186 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009fa6:	a201      	add	r2, pc, #4	; (adr r2, 8009fac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fac:	0800a001 	.word	0x0800a001
 8009fb0:	0800a187 	.word	0x0800a187
 8009fb4:	0800a187 	.word	0x0800a187
 8009fb8:	0800a187 	.word	0x0800a187
 8009fbc:	0800a041 	.word	0x0800a041
 8009fc0:	0800a187 	.word	0x0800a187
 8009fc4:	0800a187 	.word	0x0800a187
 8009fc8:	0800a187 	.word	0x0800a187
 8009fcc:	0800a083 	.word	0x0800a083
 8009fd0:	0800a187 	.word	0x0800a187
 8009fd4:	0800a187 	.word	0x0800a187
 8009fd8:	0800a187 	.word	0x0800a187
 8009fdc:	0800a0c3 	.word	0x0800a0c3
 8009fe0:	0800a187 	.word	0x0800a187
 8009fe4:	0800a187 	.word	0x0800a187
 8009fe8:	0800a187 	.word	0x0800a187
 8009fec:	0800a105 	.word	0x0800a105
 8009ff0:	0800a187 	.word	0x0800a187
 8009ff4:	0800a187 	.word	0x0800a187
 8009ff8:	0800a187 	.word	0x0800a187
 8009ffc:	0800a145 	.word	0x0800a145
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	68b9      	ldr	r1, [r7, #8]
 800a006:	4618      	mov	r0, r3
 800a008:	f000 f99a 	bl	800a340 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	699a      	ldr	r2, [r3, #24]
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f042 0208 	orr.w	r2, r2, #8
 800a01a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	699a      	ldr	r2, [r3, #24]
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f022 0204 	bic.w	r2, r2, #4
 800a02a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	6999      	ldr	r1, [r3, #24]
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	691a      	ldr	r2, [r3, #16]
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	430a      	orrs	r2, r1
 800a03c:	619a      	str	r2, [r3, #24]
      break;
 800a03e:	e0a5      	b.n	800a18c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	68b9      	ldr	r1, [r7, #8]
 800a046:	4618      	mov	r0, r3
 800a048:	f000 fa14 	bl	800a474 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	699a      	ldr	r2, [r3, #24]
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a05a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	699a      	ldr	r2, [r3, #24]
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a06a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	6999      	ldr	r1, [r3, #24]
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	691b      	ldr	r3, [r3, #16]
 800a076:	021a      	lsls	r2, r3, #8
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	430a      	orrs	r2, r1
 800a07e:	619a      	str	r2, [r3, #24]
      break;
 800a080:	e084      	b.n	800a18c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	68b9      	ldr	r1, [r7, #8]
 800a088:	4618      	mov	r0, r3
 800a08a:	f000 fa87 	bl	800a59c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	69da      	ldr	r2, [r3, #28]
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f042 0208 	orr.w	r2, r2, #8
 800a09c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	69da      	ldr	r2, [r3, #28]
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f022 0204 	bic.w	r2, r2, #4
 800a0ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	69d9      	ldr	r1, [r3, #28]
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	691a      	ldr	r2, [r3, #16]
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	430a      	orrs	r2, r1
 800a0be:	61da      	str	r2, [r3, #28]
      break;
 800a0c0:	e064      	b.n	800a18c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	68b9      	ldr	r1, [r7, #8]
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f000 faf9 	bl	800a6c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	69da      	ldr	r2, [r3, #28]
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a0dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	69da      	ldr	r2, [r3, #28]
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a0ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	69d9      	ldr	r1, [r3, #28]
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	691b      	ldr	r3, [r3, #16]
 800a0f8:	021a      	lsls	r2, r3, #8
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	430a      	orrs	r2, r1
 800a100:	61da      	str	r2, [r3, #28]
      break;
 800a102:	e043      	b.n	800a18c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	68b9      	ldr	r1, [r7, #8]
 800a10a:	4618      	mov	r0, r3
 800a10c:	f000 fb6c 	bl	800a7e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f042 0208 	orr.w	r2, r2, #8
 800a11e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f022 0204 	bic.w	r2, r2, #4
 800a12e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	691a      	ldr	r2, [r3, #16]
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	430a      	orrs	r2, r1
 800a140:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800a142:	e023      	b.n	800a18c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	68b9      	ldr	r1, [r7, #8]
 800a14a:	4618      	mov	r0, r3
 800a14c:	f000 fbb6 	bl	800a8bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a15e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a16e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	691b      	ldr	r3, [r3, #16]
 800a17a:	021a      	lsls	r2, r3, #8
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	430a      	orrs	r2, r1
 800a182:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800a184:	e002      	b.n	800a18c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a186:	2301      	movs	r3, #1
 800a188:	75fb      	strb	r3, [r7, #23]
      break;
 800a18a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2200      	movs	r2, #0
 800a190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a194:	7dfb      	ldrb	r3, [r7, #23]
}
 800a196:	4618      	mov	r0, r3
 800a198:	3718      	adds	r7, #24
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}
 800a19e:	bf00      	nop

0800a1a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b083      	sub	sp, #12
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a1a8:	bf00      	nop
 800a1aa:	370c      	adds	r7, #12
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b2:	4770      	bx	lr

0800a1b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b083      	sub	sp, #12
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a1bc:	bf00      	nop
 800a1be:	370c      	adds	r7, #12
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr

0800a1c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b083      	sub	sp, #12
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a1d0:	bf00      	nop
 800a1d2:	370c      	adds	r7, #12
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr

0800a1dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b083      	sub	sp, #12
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a1e4:	bf00      	nop
 800a1e6:	370c      	adds	r7, #12
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ee:	4770      	bx	lr

0800a1f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b085      	sub	sp, #20
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	4a46      	ldr	r2, [pc, #280]	; (800a31c <TIM_Base_SetConfig+0x12c>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d017      	beq.n	800a238 <TIM_Base_SetConfig+0x48>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a20e:	d013      	beq.n	800a238 <TIM_Base_SetConfig+0x48>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	4a43      	ldr	r2, [pc, #268]	; (800a320 <TIM_Base_SetConfig+0x130>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d00f      	beq.n	800a238 <TIM_Base_SetConfig+0x48>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	4a42      	ldr	r2, [pc, #264]	; (800a324 <TIM_Base_SetConfig+0x134>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d00b      	beq.n	800a238 <TIM_Base_SetConfig+0x48>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	4a41      	ldr	r2, [pc, #260]	; (800a328 <TIM_Base_SetConfig+0x138>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d007      	beq.n	800a238 <TIM_Base_SetConfig+0x48>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	4a40      	ldr	r2, [pc, #256]	; (800a32c <TIM_Base_SetConfig+0x13c>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d003      	beq.n	800a238 <TIM_Base_SetConfig+0x48>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	4a3f      	ldr	r2, [pc, #252]	; (800a330 <TIM_Base_SetConfig+0x140>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d108      	bne.n	800a24a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a23e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	685b      	ldr	r3, [r3, #4]
 800a244:	68fa      	ldr	r2, [r7, #12]
 800a246:	4313      	orrs	r3, r2
 800a248:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	4a33      	ldr	r2, [pc, #204]	; (800a31c <TIM_Base_SetConfig+0x12c>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d023      	beq.n	800a29a <TIM_Base_SetConfig+0xaa>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a258:	d01f      	beq.n	800a29a <TIM_Base_SetConfig+0xaa>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	4a30      	ldr	r2, [pc, #192]	; (800a320 <TIM_Base_SetConfig+0x130>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d01b      	beq.n	800a29a <TIM_Base_SetConfig+0xaa>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	4a2f      	ldr	r2, [pc, #188]	; (800a324 <TIM_Base_SetConfig+0x134>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d017      	beq.n	800a29a <TIM_Base_SetConfig+0xaa>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	4a2e      	ldr	r2, [pc, #184]	; (800a328 <TIM_Base_SetConfig+0x138>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d013      	beq.n	800a29a <TIM_Base_SetConfig+0xaa>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	4a2d      	ldr	r2, [pc, #180]	; (800a32c <TIM_Base_SetConfig+0x13c>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d00f      	beq.n	800a29a <TIM_Base_SetConfig+0xaa>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	4a2d      	ldr	r2, [pc, #180]	; (800a334 <TIM_Base_SetConfig+0x144>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d00b      	beq.n	800a29a <TIM_Base_SetConfig+0xaa>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	4a2c      	ldr	r2, [pc, #176]	; (800a338 <TIM_Base_SetConfig+0x148>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d007      	beq.n	800a29a <TIM_Base_SetConfig+0xaa>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	4a2b      	ldr	r2, [pc, #172]	; (800a33c <TIM_Base_SetConfig+0x14c>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d003      	beq.n	800a29a <TIM_Base_SetConfig+0xaa>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	4a26      	ldr	r2, [pc, #152]	; (800a330 <TIM_Base_SetConfig+0x140>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d108      	bne.n	800a2ac <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	68db      	ldr	r3, [r3, #12]
 800a2a6:	68fa      	ldr	r2, [r7, #12]
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	695b      	ldr	r3, [r3, #20]
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	68fa      	ldr	r2, [r7, #12]
 800a2be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	689a      	ldr	r2, [r3, #8]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	4a12      	ldr	r2, [pc, #72]	; (800a31c <TIM_Base_SetConfig+0x12c>)
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d013      	beq.n	800a300 <TIM_Base_SetConfig+0x110>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	4a14      	ldr	r2, [pc, #80]	; (800a32c <TIM_Base_SetConfig+0x13c>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d00f      	beq.n	800a300 <TIM_Base_SetConfig+0x110>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	4a14      	ldr	r2, [pc, #80]	; (800a334 <TIM_Base_SetConfig+0x144>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d00b      	beq.n	800a300 <TIM_Base_SetConfig+0x110>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	4a13      	ldr	r2, [pc, #76]	; (800a338 <TIM_Base_SetConfig+0x148>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d007      	beq.n	800a300 <TIM_Base_SetConfig+0x110>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	4a12      	ldr	r2, [pc, #72]	; (800a33c <TIM_Base_SetConfig+0x14c>)
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	d003      	beq.n	800a300 <TIM_Base_SetConfig+0x110>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	4a0d      	ldr	r2, [pc, #52]	; (800a330 <TIM_Base_SetConfig+0x140>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d103      	bne.n	800a308 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	691a      	ldr	r2, [r3, #16]
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2201      	movs	r2, #1
 800a30c:	615a      	str	r2, [r3, #20]
}
 800a30e:	bf00      	nop
 800a310:	3714      	adds	r7, #20
 800a312:	46bd      	mov	sp, r7
 800a314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a318:	4770      	bx	lr
 800a31a:	bf00      	nop
 800a31c:	40012c00 	.word	0x40012c00
 800a320:	40000400 	.word	0x40000400
 800a324:	40000800 	.word	0x40000800
 800a328:	40000c00 	.word	0x40000c00
 800a32c:	40013400 	.word	0x40013400
 800a330:	40015000 	.word	0x40015000
 800a334:	40014000 	.word	0x40014000
 800a338:	40014400 	.word	0x40014400
 800a33c:	40014800 	.word	0x40014800

0800a340 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a340:	b480      	push	{r7}
 800a342:	b087      	sub	sp, #28
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6a1b      	ldr	r3, [r3, #32]
 800a34e:	f023 0201 	bic.w	r2, r3, #1
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6a1b      	ldr	r3, [r3, #32]
 800a35a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	699b      	ldr	r3, [r3, #24]
 800a366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a36e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f023 0303 	bic.w	r3, r3, #3
 800a37a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	68fa      	ldr	r2, [r7, #12]
 800a382:	4313      	orrs	r3, r2
 800a384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	f023 0302 	bic.w	r3, r3, #2
 800a38c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	689b      	ldr	r3, [r3, #8]
 800a392:	697a      	ldr	r2, [r7, #20]
 800a394:	4313      	orrs	r3, r2
 800a396:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	4a30      	ldr	r2, [pc, #192]	; (800a45c <TIM_OC1_SetConfig+0x11c>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d013      	beq.n	800a3c8 <TIM_OC1_SetConfig+0x88>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	4a2f      	ldr	r2, [pc, #188]	; (800a460 <TIM_OC1_SetConfig+0x120>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d00f      	beq.n	800a3c8 <TIM_OC1_SetConfig+0x88>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	4a2e      	ldr	r2, [pc, #184]	; (800a464 <TIM_OC1_SetConfig+0x124>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d00b      	beq.n	800a3c8 <TIM_OC1_SetConfig+0x88>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	4a2d      	ldr	r2, [pc, #180]	; (800a468 <TIM_OC1_SetConfig+0x128>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d007      	beq.n	800a3c8 <TIM_OC1_SetConfig+0x88>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	4a2c      	ldr	r2, [pc, #176]	; (800a46c <TIM_OC1_SetConfig+0x12c>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d003      	beq.n	800a3c8 <TIM_OC1_SetConfig+0x88>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	4a2b      	ldr	r2, [pc, #172]	; (800a470 <TIM_OC1_SetConfig+0x130>)
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	d10c      	bne.n	800a3e2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	f023 0308 	bic.w	r3, r3, #8
 800a3ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	68db      	ldr	r3, [r3, #12]
 800a3d4:	697a      	ldr	r2, [r7, #20]
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	f023 0304 	bic.w	r3, r3, #4
 800a3e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	4a1d      	ldr	r2, [pc, #116]	; (800a45c <TIM_OC1_SetConfig+0x11c>)
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d013      	beq.n	800a412 <TIM_OC1_SetConfig+0xd2>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	4a1c      	ldr	r2, [pc, #112]	; (800a460 <TIM_OC1_SetConfig+0x120>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d00f      	beq.n	800a412 <TIM_OC1_SetConfig+0xd2>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	4a1b      	ldr	r2, [pc, #108]	; (800a464 <TIM_OC1_SetConfig+0x124>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d00b      	beq.n	800a412 <TIM_OC1_SetConfig+0xd2>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	4a1a      	ldr	r2, [pc, #104]	; (800a468 <TIM_OC1_SetConfig+0x128>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d007      	beq.n	800a412 <TIM_OC1_SetConfig+0xd2>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	4a19      	ldr	r2, [pc, #100]	; (800a46c <TIM_OC1_SetConfig+0x12c>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d003      	beq.n	800a412 <TIM_OC1_SetConfig+0xd2>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	4a18      	ldr	r2, [pc, #96]	; (800a470 <TIM_OC1_SetConfig+0x130>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d111      	bne.n	800a436 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a418:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a420:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	695b      	ldr	r3, [r3, #20]
 800a426:	693a      	ldr	r2, [r7, #16]
 800a428:	4313      	orrs	r3, r2
 800a42a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	699b      	ldr	r3, [r3, #24]
 800a430:	693a      	ldr	r2, [r7, #16]
 800a432:	4313      	orrs	r3, r2
 800a434:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	693a      	ldr	r2, [r7, #16]
 800a43a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	68fa      	ldr	r2, [r7, #12]
 800a440:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	685a      	ldr	r2, [r3, #4]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	697a      	ldr	r2, [r7, #20]
 800a44e:	621a      	str	r2, [r3, #32]
}
 800a450:	bf00      	nop
 800a452:	371c      	adds	r7, #28
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr
 800a45c:	40012c00 	.word	0x40012c00
 800a460:	40013400 	.word	0x40013400
 800a464:	40014000 	.word	0x40014000
 800a468:	40014400 	.word	0x40014400
 800a46c:	40014800 	.word	0x40014800
 800a470:	40015000 	.word	0x40015000

0800a474 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a474:	b480      	push	{r7}
 800a476:	b087      	sub	sp, #28
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6a1b      	ldr	r3, [r3, #32]
 800a482:	f023 0210 	bic.w	r2, r3, #16
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6a1b      	ldr	r3, [r3, #32]
 800a48e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	699b      	ldr	r3, [r3, #24]
 800a49a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a4a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	021b      	lsls	r3, r3, #8
 800a4b6:	68fa      	ldr	r2, [r7, #12]
 800a4b8:	4313      	orrs	r3, r2
 800a4ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	f023 0320 	bic.w	r3, r3, #32
 800a4c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	689b      	ldr	r3, [r3, #8]
 800a4c8:	011b      	lsls	r3, r3, #4
 800a4ca:	697a      	ldr	r2, [r7, #20]
 800a4cc:	4313      	orrs	r3, r2
 800a4ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	4a2c      	ldr	r2, [pc, #176]	; (800a584 <TIM_OC2_SetConfig+0x110>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d007      	beq.n	800a4e8 <TIM_OC2_SetConfig+0x74>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	4a2b      	ldr	r2, [pc, #172]	; (800a588 <TIM_OC2_SetConfig+0x114>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d003      	beq.n	800a4e8 <TIM_OC2_SetConfig+0x74>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	4a2a      	ldr	r2, [pc, #168]	; (800a58c <TIM_OC2_SetConfig+0x118>)
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d10d      	bne.n	800a504 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a4ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	68db      	ldr	r3, [r3, #12]
 800a4f4:	011b      	lsls	r3, r3, #4
 800a4f6:	697a      	ldr	r2, [r7, #20]
 800a4f8:	4313      	orrs	r3, r2
 800a4fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a502:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	4a1f      	ldr	r2, [pc, #124]	; (800a584 <TIM_OC2_SetConfig+0x110>)
 800a508:	4293      	cmp	r3, r2
 800a50a:	d013      	beq.n	800a534 <TIM_OC2_SetConfig+0xc0>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	4a1e      	ldr	r2, [pc, #120]	; (800a588 <TIM_OC2_SetConfig+0x114>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d00f      	beq.n	800a534 <TIM_OC2_SetConfig+0xc0>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	4a1e      	ldr	r2, [pc, #120]	; (800a590 <TIM_OC2_SetConfig+0x11c>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d00b      	beq.n	800a534 <TIM_OC2_SetConfig+0xc0>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	4a1d      	ldr	r2, [pc, #116]	; (800a594 <TIM_OC2_SetConfig+0x120>)
 800a520:	4293      	cmp	r3, r2
 800a522:	d007      	beq.n	800a534 <TIM_OC2_SetConfig+0xc0>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	4a1c      	ldr	r2, [pc, #112]	; (800a598 <TIM_OC2_SetConfig+0x124>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d003      	beq.n	800a534 <TIM_OC2_SetConfig+0xc0>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	4a17      	ldr	r2, [pc, #92]	; (800a58c <TIM_OC2_SetConfig+0x118>)
 800a530:	4293      	cmp	r3, r2
 800a532:	d113      	bne.n	800a55c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a53a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a542:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	695b      	ldr	r3, [r3, #20]
 800a548:	009b      	lsls	r3, r3, #2
 800a54a:	693a      	ldr	r2, [r7, #16]
 800a54c:	4313      	orrs	r3, r2
 800a54e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	699b      	ldr	r3, [r3, #24]
 800a554:	009b      	lsls	r3, r3, #2
 800a556:	693a      	ldr	r2, [r7, #16]
 800a558:	4313      	orrs	r3, r2
 800a55a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	693a      	ldr	r2, [r7, #16]
 800a560:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	68fa      	ldr	r2, [r7, #12]
 800a566:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	685a      	ldr	r2, [r3, #4]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	697a      	ldr	r2, [r7, #20]
 800a574:	621a      	str	r2, [r3, #32]
}
 800a576:	bf00      	nop
 800a578:	371c      	adds	r7, #28
 800a57a:	46bd      	mov	sp, r7
 800a57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a580:	4770      	bx	lr
 800a582:	bf00      	nop
 800a584:	40012c00 	.word	0x40012c00
 800a588:	40013400 	.word	0x40013400
 800a58c:	40015000 	.word	0x40015000
 800a590:	40014000 	.word	0x40014000
 800a594:	40014400 	.word	0x40014400
 800a598:	40014800 	.word	0x40014800

0800a59c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b087      	sub	sp, #28
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
 800a5a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6a1b      	ldr	r3, [r3, #32]
 800a5aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6a1b      	ldr	r3, [r3, #32]
 800a5b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	69db      	ldr	r3, [r3, #28]
 800a5c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a5ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	f023 0303 	bic.w	r3, r3, #3
 800a5d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	68fa      	ldr	r2, [r7, #12]
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a5e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	689b      	ldr	r3, [r3, #8]
 800a5ee:	021b      	lsls	r3, r3, #8
 800a5f0:	697a      	ldr	r2, [r7, #20]
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	4a2b      	ldr	r2, [pc, #172]	; (800a6a8 <TIM_OC3_SetConfig+0x10c>)
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d007      	beq.n	800a60e <TIM_OC3_SetConfig+0x72>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	4a2a      	ldr	r2, [pc, #168]	; (800a6ac <TIM_OC3_SetConfig+0x110>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d003      	beq.n	800a60e <TIM_OC3_SetConfig+0x72>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	4a29      	ldr	r2, [pc, #164]	; (800a6b0 <TIM_OC3_SetConfig+0x114>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d10d      	bne.n	800a62a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a614:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	68db      	ldr	r3, [r3, #12]
 800a61a:	021b      	lsls	r3, r3, #8
 800a61c:	697a      	ldr	r2, [r7, #20]
 800a61e:	4313      	orrs	r3, r2
 800a620:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a628:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	4a1e      	ldr	r2, [pc, #120]	; (800a6a8 <TIM_OC3_SetConfig+0x10c>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d013      	beq.n	800a65a <TIM_OC3_SetConfig+0xbe>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	4a1d      	ldr	r2, [pc, #116]	; (800a6ac <TIM_OC3_SetConfig+0x110>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d00f      	beq.n	800a65a <TIM_OC3_SetConfig+0xbe>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	4a1d      	ldr	r2, [pc, #116]	; (800a6b4 <TIM_OC3_SetConfig+0x118>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d00b      	beq.n	800a65a <TIM_OC3_SetConfig+0xbe>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	4a1c      	ldr	r2, [pc, #112]	; (800a6b8 <TIM_OC3_SetConfig+0x11c>)
 800a646:	4293      	cmp	r3, r2
 800a648:	d007      	beq.n	800a65a <TIM_OC3_SetConfig+0xbe>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	4a1b      	ldr	r2, [pc, #108]	; (800a6bc <TIM_OC3_SetConfig+0x120>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d003      	beq.n	800a65a <TIM_OC3_SetConfig+0xbe>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	4a16      	ldr	r2, [pc, #88]	; (800a6b0 <TIM_OC3_SetConfig+0x114>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d113      	bne.n	800a682 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a660:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a668:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	695b      	ldr	r3, [r3, #20]
 800a66e:	011b      	lsls	r3, r3, #4
 800a670:	693a      	ldr	r2, [r7, #16]
 800a672:	4313      	orrs	r3, r2
 800a674:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	699b      	ldr	r3, [r3, #24]
 800a67a:	011b      	lsls	r3, r3, #4
 800a67c:	693a      	ldr	r2, [r7, #16]
 800a67e:	4313      	orrs	r3, r2
 800a680:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	693a      	ldr	r2, [r7, #16]
 800a686:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	68fa      	ldr	r2, [r7, #12]
 800a68c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	685a      	ldr	r2, [r3, #4]
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	697a      	ldr	r2, [r7, #20]
 800a69a:	621a      	str	r2, [r3, #32]
}
 800a69c:	bf00      	nop
 800a69e:	371c      	adds	r7, #28
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr
 800a6a8:	40012c00 	.word	0x40012c00
 800a6ac:	40013400 	.word	0x40013400
 800a6b0:	40015000 	.word	0x40015000
 800a6b4:	40014000 	.word	0x40014000
 800a6b8:	40014400 	.word	0x40014400
 800a6bc:	40014800 	.word	0x40014800

0800a6c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b087      	sub	sp, #28
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6a1b      	ldr	r3, [r3, #32]
 800a6ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6a1b      	ldr	r3, [r3, #32]
 800a6da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	685b      	ldr	r3, [r3, #4]
 800a6e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	69db      	ldr	r3, [r3, #28]
 800a6e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a6ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	021b      	lsls	r3, r3, #8
 800a702:	68fa      	ldr	r2, [r7, #12]
 800a704:	4313      	orrs	r3, r2
 800a706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a70e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	689b      	ldr	r3, [r3, #8]
 800a714:	031b      	lsls	r3, r3, #12
 800a716:	697a      	ldr	r2, [r7, #20]
 800a718:	4313      	orrs	r3, r2
 800a71a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	4a2c      	ldr	r2, [pc, #176]	; (800a7d0 <TIM_OC4_SetConfig+0x110>)
 800a720:	4293      	cmp	r3, r2
 800a722:	d007      	beq.n	800a734 <TIM_OC4_SetConfig+0x74>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	4a2b      	ldr	r2, [pc, #172]	; (800a7d4 <TIM_OC4_SetConfig+0x114>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	d003      	beq.n	800a734 <TIM_OC4_SetConfig+0x74>
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	4a2a      	ldr	r2, [pc, #168]	; (800a7d8 <TIM_OC4_SetConfig+0x118>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d10d      	bne.n	800a750 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a73a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	68db      	ldr	r3, [r3, #12]
 800a740:	031b      	lsls	r3, r3, #12
 800a742:	697a      	ldr	r2, [r7, #20]
 800a744:	4313      	orrs	r3, r2
 800a746:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a74e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	4a1f      	ldr	r2, [pc, #124]	; (800a7d0 <TIM_OC4_SetConfig+0x110>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d013      	beq.n	800a780 <TIM_OC4_SetConfig+0xc0>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	4a1e      	ldr	r2, [pc, #120]	; (800a7d4 <TIM_OC4_SetConfig+0x114>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d00f      	beq.n	800a780 <TIM_OC4_SetConfig+0xc0>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	4a1e      	ldr	r2, [pc, #120]	; (800a7dc <TIM_OC4_SetConfig+0x11c>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d00b      	beq.n	800a780 <TIM_OC4_SetConfig+0xc0>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	4a1d      	ldr	r2, [pc, #116]	; (800a7e0 <TIM_OC4_SetConfig+0x120>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d007      	beq.n	800a780 <TIM_OC4_SetConfig+0xc0>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	4a1c      	ldr	r2, [pc, #112]	; (800a7e4 <TIM_OC4_SetConfig+0x124>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d003      	beq.n	800a780 <TIM_OC4_SetConfig+0xc0>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	4a17      	ldr	r2, [pc, #92]	; (800a7d8 <TIM_OC4_SetConfig+0x118>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d113      	bne.n	800a7a8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a786:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a78e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	695b      	ldr	r3, [r3, #20]
 800a794:	019b      	lsls	r3, r3, #6
 800a796:	693a      	ldr	r2, [r7, #16]
 800a798:	4313      	orrs	r3, r2
 800a79a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	699b      	ldr	r3, [r3, #24]
 800a7a0:	019b      	lsls	r3, r3, #6
 800a7a2:	693a      	ldr	r2, [r7, #16]
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	693a      	ldr	r2, [r7, #16]
 800a7ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	68fa      	ldr	r2, [r7, #12]
 800a7b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	685a      	ldr	r2, [r3, #4]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	697a      	ldr	r2, [r7, #20]
 800a7c0:	621a      	str	r2, [r3, #32]
}
 800a7c2:	bf00      	nop
 800a7c4:	371c      	adds	r7, #28
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr
 800a7ce:	bf00      	nop
 800a7d0:	40012c00 	.word	0x40012c00
 800a7d4:	40013400 	.word	0x40013400
 800a7d8:	40015000 	.word	0x40015000
 800a7dc:	40014000 	.word	0x40014000
 800a7e0:	40014400 	.word	0x40014400
 800a7e4:	40014800 	.word	0x40014800

0800a7e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b087      	sub	sp, #28
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6a1b      	ldr	r3, [r3, #32]
 800a7f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6a1b      	ldr	r3, [r3, #32]
 800a802:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a80e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a81a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	68fa      	ldr	r2, [r7, #12]
 800a822:	4313      	orrs	r3, r2
 800a824:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a82c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	689b      	ldr	r3, [r3, #8]
 800a832:	041b      	lsls	r3, r3, #16
 800a834:	693a      	ldr	r2, [r7, #16]
 800a836:	4313      	orrs	r3, r2
 800a838:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	4a19      	ldr	r2, [pc, #100]	; (800a8a4 <TIM_OC5_SetConfig+0xbc>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d013      	beq.n	800a86a <TIM_OC5_SetConfig+0x82>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	4a18      	ldr	r2, [pc, #96]	; (800a8a8 <TIM_OC5_SetConfig+0xc0>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d00f      	beq.n	800a86a <TIM_OC5_SetConfig+0x82>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	4a17      	ldr	r2, [pc, #92]	; (800a8ac <TIM_OC5_SetConfig+0xc4>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d00b      	beq.n	800a86a <TIM_OC5_SetConfig+0x82>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	4a16      	ldr	r2, [pc, #88]	; (800a8b0 <TIM_OC5_SetConfig+0xc8>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d007      	beq.n	800a86a <TIM_OC5_SetConfig+0x82>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	4a15      	ldr	r2, [pc, #84]	; (800a8b4 <TIM_OC5_SetConfig+0xcc>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d003      	beq.n	800a86a <TIM_OC5_SetConfig+0x82>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	4a14      	ldr	r2, [pc, #80]	; (800a8b8 <TIM_OC5_SetConfig+0xd0>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d109      	bne.n	800a87e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a870:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	695b      	ldr	r3, [r3, #20]
 800a876:	021b      	lsls	r3, r3, #8
 800a878:	697a      	ldr	r2, [r7, #20]
 800a87a:	4313      	orrs	r3, r2
 800a87c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	697a      	ldr	r2, [r7, #20]
 800a882:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	68fa      	ldr	r2, [r7, #12]
 800a888:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	685a      	ldr	r2, [r3, #4]
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	693a      	ldr	r2, [r7, #16]
 800a896:	621a      	str	r2, [r3, #32]
}
 800a898:	bf00      	nop
 800a89a:	371c      	adds	r7, #28
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr
 800a8a4:	40012c00 	.word	0x40012c00
 800a8a8:	40013400 	.word	0x40013400
 800a8ac:	40014000 	.word	0x40014000
 800a8b0:	40014400 	.word	0x40014400
 800a8b4:	40014800 	.word	0x40014800
 800a8b8:	40015000 	.word	0x40015000

0800a8bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b087      	sub	sp, #28
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6a1b      	ldr	r3, [r3, #32]
 800a8ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6a1b      	ldr	r3, [r3, #32]
 800a8d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a8ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	021b      	lsls	r3, r3, #8
 800a8f6:	68fa      	ldr	r2, [r7, #12]
 800a8f8:	4313      	orrs	r3, r2
 800a8fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a902:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	689b      	ldr	r3, [r3, #8]
 800a908:	051b      	lsls	r3, r3, #20
 800a90a:	693a      	ldr	r2, [r7, #16]
 800a90c:	4313      	orrs	r3, r2
 800a90e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	4a1a      	ldr	r2, [pc, #104]	; (800a97c <TIM_OC6_SetConfig+0xc0>)
 800a914:	4293      	cmp	r3, r2
 800a916:	d013      	beq.n	800a940 <TIM_OC6_SetConfig+0x84>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	4a19      	ldr	r2, [pc, #100]	; (800a980 <TIM_OC6_SetConfig+0xc4>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d00f      	beq.n	800a940 <TIM_OC6_SetConfig+0x84>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	4a18      	ldr	r2, [pc, #96]	; (800a984 <TIM_OC6_SetConfig+0xc8>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d00b      	beq.n	800a940 <TIM_OC6_SetConfig+0x84>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	4a17      	ldr	r2, [pc, #92]	; (800a988 <TIM_OC6_SetConfig+0xcc>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d007      	beq.n	800a940 <TIM_OC6_SetConfig+0x84>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	4a16      	ldr	r2, [pc, #88]	; (800a98c <TIM_OC6_SetConfig+0xd0>)
 800a934:	4293      	cmp	r3, r2
 800a936:	d003      	beq.n	800a940 <TIM_OC6_SetConfig+0x84>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	4a15      	ldr	r2, [pc, #84]	; (800a990 <TIM_OC6_SetConfig+0xd4>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d109      	bne.n	800a954 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a946:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	695b      	ldr	r3, [r3, #20]
 800a94c:	029b      	lsls	r3, r3, #10
 800a94e:	697a      	ldr	r2, [r7, #20]
 800a950:	4313      	orrs	r3, r2
 800a952:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	697a      	ldr	r2, [r7, #20]
 800a958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	68fa      	ldr	r2, [r7, #12]
 800a95e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	685a      	ldr	r2, [r3, #4]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	693a      	ldr	r2, [r7, #16]
 800a96c:	621a      	str	r2, [r3, #32]
}
 800a96e:	bf00      	nop
 800a970:	371c      	adds	r7, #28
 800a972:	46bd      	mov	sp, r7
 800a974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a978:	4770      	bx	lr
 800a97a:	bf00      	nop
 800a97c:	40012c00 	.word	0x40012c00
 800a980:	40013400 	.word	0x40013400
 800a984:	40014000 	.word	0x40014000
 800a988:	40014400 	.word	0x40014400
 800a98c:	40014800 	.word	0x40014800
 800a990:	40015000 	.word	0x40015000

0800a994 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a994:	b480      	push	{r7}
 800a996:	b087      	sub	sp, #28
 800a998:	af00      	add	r7, sp, #0
 800a99a:	60f8      	str	r0, [r7, #12]
 800a99c:	60b9      	str	r1, [r7, #8]
 800a99e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	f003 031f 	and.w	r3, r3, #31
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a9ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	6a1a      	ldr	r2, [r3, #32]
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	43db      	mvns	r3, r3
 800a9b6:	401a      	ands	r2, r3
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	6a1a      	ldr	r2, [r3, #32]
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	f003 031f 	and.w	r3, r3, #31
 800a9c6:	6879      	ldr	r1, [r7, #4]
 800a9c8:	fa01 f303 	lsl.w	r3, r1, r3
 800a9cc:	431a      	orrs	r2, r3
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	621a      	str	r2, [r3, #32]
}
 800a9d2:	bf00      	nop
 800a9d4:	371c      	adds	r7, #28
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9dc:	4770      	bx	lr
	...

0800a9e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b085      	sub	sp, #20
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	d101      	bne.n	800a9f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a9f4:	2302      	movs	r3, #2
 800a9f6:	e074      	b.n	800aae2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2202      	movs	r2, #2
 800aa04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	689b      	ldr	r3, [r3, #8]
 800aa16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4a34      	ldr	r2, [pc, #208]	; (800aaf0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d009      	beq.n	800aa36 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	4a33      	ldr	r2, [pc, #204]	; (800aaf4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d004      	beq.n	800aa36 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	4a31      	ldr	r2, [pc, #196]	; (800aaf8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d108      	bne.n	800aa48 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800aa3c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	68fa      	ldr	r2, [r7, #12]
 800aa44:	4313      	orrs	r3, r2
 800aa46:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800aa4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	68fa      	ldr	r2, [r7, #12]
 800aa5a:	4313      	orrs	r3, r2
 800aa5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	68fa      	ldr	r2, [r7, #12]
 800aa64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4a21      	ldr	r2, [pc, #132]	; (800aaf0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d022      	beq.n	800aab6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa78:	d01d      	beq.n	800aab6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	4a1f      	ldr	r2, [pc, #124]	; (800aafc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d018      	beq.n	800aab6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	4a1d      	ldr	r2, [pc, #116]	; (800ab00 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d013      	beq.n	800aab6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	4a1c      	ldr	r2, [pc, #112]	; (800ab04 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d00e      	beq.n	800aab6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	4a15      	ldr	r2, [pc, #84]	; (800aaf4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d009      	beq.n	800aab6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	4a18      	ldr	r2, [pc, #96]	; (800ab08 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d004      	beq.n	800aab6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	4a11      	ldr	r2, [pc, #68]	; (800aaf8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d10c      	bne.n	800aad0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aabc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	689b      	ldr	r3, [r3, #8]
 800aac2:	68ba      	ldr	r2, [r7, #8]
 800aac4:	4313      	orrs	r3, r2
 800aac6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	68ba      	ldr	r2, [r7, #8]
 800aace:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2201      	movs	r2, #1
 800aad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2200      	movs	r2, #0
 800aadc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aae0:	2300      	movs	r3, #0
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3714      	adds	r7, #20
 800aae6:	46bd      	mov	sp, r7
 800aae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaec:	4770      	bx	lr
 800aaee:	bf00      	nop
 800aaf0:	40012c00 	.word	0x40012c00
 800aaf4:	40013400 	.word	0x40013400
 800aaf8:	40015000 	.word	0x40015000
 800aafc:	40000400 	.word	0x40000400
 800ab00:	40000800 	.word	0x40000800
 800ab04:	40000c00 	.word	0x40000c00
 800ab08:	40014000 	.word	0x40014000

0800ab0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b083      	sub	sp, #12
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ab14:	bf00      	nop
 800ab16:	370c      	adds	r7, #12
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b083      	sub	sp, #12
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ab28:	bf00      	nop
 800ab2a:	370c      	adds	r7, #12
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr

0800ab34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b083      	sub	sp, #12
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ab3c:	bf00      	nop
 800ab3e:	370c      	adds	r7, #12
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr

0800ab48 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b083      	sub	sp, #12
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800ab50:	bf00      	nop
 800ab52:	370c      	adds	r7, #12
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr

0800ab5c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b083      	sub	sp, #12
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800ab64:	bf00      	nop
 800ab66:	370c      	adds	r7, #12
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6e:	4770      	bx	lr

0800ab70 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b083      	sub	sp, #12
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800ab78:	bf00      	nop
 800ab7a:	370c      	adds	r7, #12
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr

0800ab84 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b083      	sub	sp, #12
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ab8c:	bf00      	nop
 800ab8e:	370c      	adds	r7, #12
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr

0800ab98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b082      	sub	sp, #8
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d101      	bne.n	800abaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aba6:	2301      	movs	r3, #1
 800aba8:	e042      	b.n	800ac30 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d106      	bne.n	800abc2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2200      	movs	r2, #0
 800abb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f7f9 f94f 	bl	8003e60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2224      	movs	r2, #36	; 0x24
 800abc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	681a      	ldr	r2, [r3, #0]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f022 0201 	bic.w	r2, r2, #1
 800abd8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f000 fbc4 	bl	800b368 <UART_SetConfig>
 800abe0:	4603      	mov	r3, r0
 800abe2:	2b01      	cmp	r3, #1
 800abe4:	d101      	bne.n	800abea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800abe6:	2301      	movs	r3, #1
 800abe8:	e022      	b.n	800ac30 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d002      	beq.n	800abf8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f000 feb4 	bl	800b960 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	685a      	ldr	r2, [r3, #4]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ac06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	689a      	ldr	r2, [r3, #8]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ac16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	681a      	ldr	r2, [r3, #0]
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f042 0201 	orr.w	r2, r2, #1
 800ac26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f000 ff3b 	bl	800baa4 <UART_CheckIdleState>
 800ac2e:	4603      	mov	r3, r0
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	3708      	adds	r7, #8
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}

0800ac38 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b08a      	sub	sp, #40	; 0x28
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	60f8      	str	r0, [r7, #12]
 800ac40:	60b9      	str	r1, [r7, #8]
 800ac42:	4613      	mov	r3, r2
 800ac44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac4c:	2b20      	cmp	r3, #32
 800ac4e:	d142      	bne.n	800acd6 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d002      	beq.n	800ac5c <HAL_UART_Receive_IT+0x24>
 800ac56:	88fb      	ldrh	r3, [r7, #6]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d101      	bne.n	800ac60 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	e03b      	b.n	800acd8 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ac66:	2b01      	cmp	r3, #1
 800ac68:	d101      	bne.n	800ac6e <HAL_UART_Receive_IT+0x36>
 800ac6a:	2302      	movs	r3, #2
 800ac6c:	e034      	b.n	800acd8 <HAL_UART_Receive_IT+0xa0>
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	2201      	movs	r2, #1
 800ac72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4a17      	ldr	r2, [pc, #92]	; (800ace0 <HAL_UART_Receive_IT+0xa8>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d01f      	beq.n	800acc6 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	685b      	ldr	r3, [r3, #4]
 800ac8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d018      	beq.n	800acc6 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	e853 3f00 	ldrex	r3, [r3]
 800aca0:	613b      	str	r3, [r7, #16]
   return(result);
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800aca8:	627b      	str	r3, [r7, #36]	; 0x24
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	461a      	mov	r2, r3
 800acb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb2:	623b      	str	r3, [r7, #32]
 800acb4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acb6:	69f9      	ldr	r1, [r7, #28]
 800acb8:	6a3a      	ldr	r2, [r7, #32]
 800acba:	e841 2300 	strex	r3, r2, [r1]
 800acbe:	61bb      	str	r3, [r7, #24]
   return(result);
 800acc0:	69bb      	ldr	r3, [r7, #24]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d1e6      	bne.n	800ac94 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800acc6:	88fb      	ldrh	r3, [r7, #6]
 800acc8:	461a      	mov	r2, r3
 800acca:	68b9      	ldr	r1, [r7, #8]
 800accc:	68f8      	ldr	r0, [r7, #12]
 800acce:	f000 fffd 	bl	800bccc <UART_Start_Receive_IT>
 800acd2:	4603      	mov	r3, r0
 800acd4:	e000      	b.n	800acd8 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800acd6:	2302      	movs	r3, #2
  }
}
 800acd8:	4618      	mov	r0, r3
 800acda:	3728      	adds	r7, #40	; 0x28
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}
 800ace0:	40008000 	.word	0x40008000

0800ace4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b0ba      	sub	sp, #232	; 0xe8
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	69db      	ldr	r3, [r3, #28]
 800acf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	689b      	ldr	r3, [r3, #8]
 800ad06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ad0a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ad0e:	f640 030f 	movw	r3, #2063	; 0x80f
 800ad12:	4013      	ands	r3, r2
 800ad14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ad18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d11b      	bne.n	800ad58 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ad20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad24:	f003 0320 	and.w	r3, r3, #32
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d015      	beq.n	800ad58 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ad2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad30:	f003 0320 	and.w	r3, r3, #32
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d105      	bne.n	800ad44 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ad38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d009      	beq.n	800ad58 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	f000 82d6 	beq.w	800b2fa <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	4798      	blx	r3
      }
      return;
 800ad56:	e2d0      	b.n	800b2fa <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ad58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	f000 811f 	beq.w	800afa0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ad62:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ad66:	4b8b      	ldr	r3, [pc, #556]	; (800af94 <HAL_UART_IRQHandler+0x2b0>)
 800ad68:	4013      	ands	r3, r2
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d106      	bne.n	800ad7c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ad6e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ad72:	4b89      	ldr	r3, [pc, #548]	; (800af98 <HAL_UART_IRQHandler+0x2b4>)
 800ad74:	4013      	ands	r3, r2
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	f000 8112 	beq.w	800afa0 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ad7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad80:	f003 0301 	and.w	r3, r3, #1
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d011      	beq.n	800adac <HAL_UART_IRQHandler+0xc8>
 800ad88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d00b      	beq.n	800adac <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	2201      	movs	r2, #1
 800ad9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ada2:	f043 0201 	orr.w	r2, r3, #1
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800adac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adb0:	f003 0302 	and.w	r3, r3, #2
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d011      	beq.n	800addc <HAL_UART_IRQHandler+0xf8>
 800adb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800adbc:	f003 0301 	and.w	r3, r3, #1
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d00b      	beq.n	800addc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	2202      	movs	r2, #2
 800adca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800add2:	f043 0204 	orr.w	r2, r3, #4
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800addc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ade0:	f003 0304 	and.w	r3, r3, #4
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d011      	beq.n	800ae0c <HAL_UART_IRQHandler+0x128>
 800ade8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800adec:	f003 0301 	and.w	r3, r3, #1
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d00b      	beq.n	800ae0c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	2204      	movs	r2, #4
 800adfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae02:	f043 0202 	orr.w	r2, r3, #2
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ae0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae10:	f003 0308 	and.w	r3, r3, #8
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d017      	beq.n	800ae48 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ae18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae1c:	f003 0320 	and.w	r3, r3, #32
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d105      	bne.n	800ae30 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ae24:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ae28:	4b5a      	ldr	r3, [pc, #360]	; (800af94 <HAL_UART_IRQHandler+0x2b0>)
 800ae2a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d00b      	beq.n	800ae48 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	2208      	movs	r2, #8
 800ae36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae3e:	f043 0208 	orr.w	r2, r3, #8
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ae48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d012      	beq.n	800ae7a <HAL_UART_IRQHandler+0x196>
 800ae54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d00c      	beq.n	800ae7a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ae68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae70:	f043 0220 	orr.w	r2, r3, #32
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	f000 823c 	beq.w	800b2fe <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ae86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae8a:	f003 0320 	and.w	r3, r3, #32
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d013      	beq.n	800aeba <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ae92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae96:	f003 0320 	and.w	r3, r3, #32
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d105      	bne.n	800aeaa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ae9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d007      	beq.n	800aeba <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d003      	beq.n	800aeba <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aec0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	689b      	ldr	r3, [r3, #8]
 800aeca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aece:	2b40      	cmp	r3, #64	; 0x40
 800aed0:	d005      	beq.n	800aede <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800aed2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aed6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d04f      	beq.n	800af7e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f001 f81e 	bl	800bf20 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	689b      	ldr	r3, [r3, #8]
 800aeea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aeee:	2b40      	cmp	r3, #64	; 0x40
 800aef0:	d141      	bne.n	800af76 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	3308      	adds	r3, #8
 800aef8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aefc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800af00:	e853 3f00 	ldrex	r3, [r3]
 800af04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800af08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800af0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	3308      	adds	r3, #8
 800af1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800af1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800af22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800af2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800af2e:	e841 2300 	strex	r3, r2, [r1]
 800af32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800af36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d1d9      	bne.n	800aef2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af42:	2b00      	cmp	r3, #0
 800af44:	d013      	beq.n	800af6e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af4a:	4a14      	ldr	r2, [pc, #80]	; (800af9c <HAL_UART_IRQHandler+0x2b8>)
 800af4c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af52:	4618      	mov	r0, r3
 800af54:	f7fa fd3a 	bl	80059cc <HAL_DMA_Abort_IT>
 800af58:	4603      	mov	r3, r0
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d017      	beq.n	800af8e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af64:	687a      	ldr	r2, [r7, #4]
 800af66:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800af68:	4610      	mov	r0, r2
 800af6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af6c:	e00f      	b.n	800af8e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 f9e4 	bl	800b33c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af74:	e00b      	b.n	800af8e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f000 f9e0 	bl	800b33c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af7c:	e007      	b.n	800af8e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f000 f9dc 	bl	800b33c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2200      	movs	r2, #0
 800af88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800af8c:	e1b7      	b.n	800b2fe <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af8e:	bf00      	nop
    return;
 800af90:	e1b5      	b.n	800b2fe <HAL_UART_IRQHandler+0x61a>
 800af92:	bf00      	nop
 800af94:	10000001 	.word	0x10000001
 800af98:	04000120 	.word	0x04000120
 800af9c:	0800bfed 	.word	0x0800bfed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afa4:	2b01      	cmp	r3, #1
 800afa6:	f040 814a 	bne.w	800b23e <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800afaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afae:	f003 0310 	and.w	r3, r3, #16
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	f000 8143 	beq.w	800b23e <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800afb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800afbc:	f003 0310 	and.w	r3, r3, #16
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	f000 813c 	beq.w	800b23e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	2210      	movs	r2, #16
 800afcc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	689b      	ldr	r3, [r3, #8]
 800afd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afd8:	2b40      	cmp	r3, #64	; 0x40
 800afda:	f040 80b5 	bne.w	800b148 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	685b      	ldr	r3, [r3, #4]
 800afe6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800afea:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800afee:	2b00      	cmp	r3, #0
 800aff0:	f000 8187 	beq.w	800b302 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800affa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800affe:	429a      	cmp	r2, r3
 800b000:	f080 817f 	bcs.w	800b302 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b00a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f003 0320 	and.w	r3, r3, #32
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	f040 8086 	bne.w	800b12c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b028:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b02c:	e853 3f00 	ldrex	r3, [r3]
 800b030:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b034:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b038:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b03c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	461a      	mov	r2, r3
 800b046:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b04a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b04e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b052:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b056:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b05a:	e841 2300 	strex	r3, r2, [r1]
 800b05e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b062:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b066:	2b00      	cmp	r3, #0
 800b068:	d1da      	bne.n	800b020 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	3308      	adds	r3, #8
 800b070:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b072:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b074:	e853 3f00 	ldrex	r3, [r3]
 800b078:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b07a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b07c:	f023 0301 	bic.w	r3, r3, #1
 800b080:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	3308      	adds	r3, #8
 800b08a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b08e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b092:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b094:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b096:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b09a:	e841 2300 	strex	r3, r2, [r1]
 800b09e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b0a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d1e1      	bne.n	800b06a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	3308      	adds	r3, #8
 800b0ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b0b0:	e853 3f00 	ldrex	r3, [r3]
 800b0b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b0b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b0b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	3308      	adds	r3, #8
 800b0c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b0ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b0cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b0d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b0d2:	e841 2300 	strex	r3, r2, [r1]
 800b0d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b0d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d1e3      	bne.n	800b0a6 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2220      	movs	r2, #32
 800b0e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0f4:	e853 3f00 	ldrex	r3, [r3]
 800b0f8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b0fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0fc:	f023 0310 	bic.w	r3, r3, #16
 800b100:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	461a      	mov	r2, r3
 800b10a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b10e:	65bb      	str	r3, [r7, #88]	; 0x58
 800b110:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b112:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b114:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b116:	e841 2300 	strex	r3, r2, [r1]
 800b11a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b11c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d1e4      	bne.n	800b0ec <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b126:	4618      	mov	r0, r3
 800b128:	f7fa fbf7 	bl	800591a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b138:	b29b      	uxth	r3, r3
 800b13a:	1ad3      	subs	r3, r2, r3
 800b13c:	b29b      	uxth	r3, r3
 800b13e:	4619      	mov	r1, r3
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f000 f905 	bl	800b350 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b146:	e0dc      	b.n	800b302 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b154:	b29b      	uxth	r3, r3
 800b156:	1ad3      	subs	r3, r2, r3
 800b158:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b162:	b29b      	uxth	r3, r3
 800b164:	2b00      	cmp	r3, #0
 800b166:	f000 80ce 	beq.w	800b306 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800b16a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b16e:	2b00      	cmp	r3, #0
 800b170:	f000 80c9 	beq.w	800b306 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b17c:	e853 3f00 	ldrex	r3, [r3]
 800b180:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b184:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b188:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	461a      	mov	r2, r3
 800b192:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b196:	647b      	str	r3, [r7, #68]	; 0x44
 800b198:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b19a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b19c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b19e:	e841 2300 	strex	r3, r2, [r1]
 800b1a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b1a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d1e4      	bne.n	800b174 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	3308      	adds	r3, #8
 800b1b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b4:	e853 3f00 	ldrex	r3, [r3]
 800b1b8:	623b      	str	r3, [r7, #32]
   return(result);
 800b1ba:	6a3b      	ldr	r3, [r7, #32]
 800b1bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b1c0:	f023 0301 	bic.w	r3, r3, #1
 800b1c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	3308      	adds	r3, #8
 800b1ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b1d2:	633a      	str	r2, [r7, #48]	; 0x30
 800b1d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b1d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1da:	e841 2300 	strex	r3, r2, [r1]
 800b1de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d1e1      	bne.n	800b1aa <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2220      	movs	r2, #32
 800b1ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	e853 3f00 	ldrex	r3, [r3]
 800b206:	60fb      	str	r3, [r7, #12]
   return(result);
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	f023 0310 	bic.w	r3, r3, #16
 800b20e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	461a      	mov	r2, r3
 800b218:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b21c:	61fb      	str	r3, [r7, #28]
 800b21e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b220:	69b9      	ldr	r1, [r7, #24]
 800b222:	69fa      	ldr	r2, [r7, #28]
 800b224:	e841 2300 	strex	r3, r2, [r1]
 800b228:	617b      	str	r3, [r7, #20]
   return(result);
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d1e4      	bne.n	800b1fa <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b230:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b234:	4619      	mov	r1, r3
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f000 f88a 	bl	800b350 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b23c:	e063      	b.n	800b306 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b23e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b242:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b246:	2b00      	cmp	r3, #0
 800b248:	d00e      	beq.n	800b268 <HAL_UART_IRQHandler+0x584>
 800b24a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b24e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b252:	2b00      	cmp	r3, #0
 800b254:	d008      	beq.n	800b268 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b25e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f001 fb61 	bl	800c928 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b266:	e051      	b.n	800b30c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b26c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b270:	2b00      	cmp	r3, #0
 800b272:	d014      	beq.n	800b29e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d105      	bne.n	800b28c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b280:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b284:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d008      	beq.n	800b29e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b290:	2b00      	cmp	r3, #0
 800b292:	d03a      	beq.n	800b30a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	4798      	blx	r3
    }
    return;
 800b29c:	e035      	b.n	800b30a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b29e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d009      	beq.n	800b2be <HAL_UART_IRQHandler+0x5da>
 800b2aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d003      	beq.n	800b2be <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f000 feae 	bl	800c018 <UART_EndTransmit_IT>
    return;
 800b2bc:	e026      	b.n	800b30c <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b2be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d009      	beq.n	800b2de <HAL_UART_IRQHandler+0x5fa>
 800b2ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2ce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d003      	beq.n	800b2de <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f001 fb3a 	bl	800c950 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b2dc:	e016      	b.n	800b30c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b2de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d010      	beq.n	800b30c <HAL_UART_IRQHandler+0x628>
 800b2ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	da0c      	bge.n	800b30c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f001 fb22 	bl	800c93c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b2f8:	e008      	b.n	800b30c <HAL_UART_IRQHandler+0x628>
      return;
 800b2fa:	bf00      	nop
 800b2fc:	e006      	b.n	800b30c <HAL_UART_IRQHandler+0x628>
    return;
 800b2fe:	bf00      	nop
 800b300:	e004      	b.n	800b30c <HAL_UART_IRQHandler+0x628>
      return;
 800b302:	bf00      	nop
 800b304:	e002      	b.n	800b30c <HAL_UART_IRQHandler+0x628>
      return;
 800b306:	bf00      	nop
 800b308:	e000      	b.n	800b30c <HAL_UART_IRQHandler+0x628>
    return;
 800b30a:	bf00      	nop
  }
}
 800b30c:	37e8      	adds	r7, #232	; 0xe8
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}
 800b312:	bf00      	nop

0800b314 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b314:	b480      	push	{r7}
 800b316:	b083      	sub	sp, #12
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b31c:	bf00      	nop
 800b31e:	370c      	adds	r7, #12
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr

0800b328 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b328:	b480      	push	{r7}
 800b32a:	b083      	sub	sp, #12
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800b330:	bf00      	nop
 800b332:	370c      	adds	r7, #12
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr

0800b33c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b33c:	b480      	push	{r7}
 800b33e:	b083      	sub	sp, #12
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b344:	bf00      	nop
 800b346:	370c      	adds	r7, #12
 800b348:	46bd      	mov	sp, r7
 800b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34e:	4770      	bx	lr

0800b350 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b350:	b480      	push	{r7}
 800b352:	b083      	sub	sp, #12
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	460b      	mov	r3, r1
 800b35a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b35c:	bf00      	nop
 800b35e:	370c      	adds	r7, #12
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr

0800b368 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b368:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b36c:	b08c      	sub	sp, #48	; 0x30
 800b36e:	af00      	add	r7, sp, #0
 800b370:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b372:	2300      	movs	r3, #0
 800b374:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	689a      	ldr	r2, [r3, #8]
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	691b      	ldr	r3, [r3, #16]
 800b380:	431a      	orrs	r2, r3
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	695b      	ldr	r3, [r3, #20]
 800b386:	431a      	orrs	r2, r3
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	69db      	ldr	r3, [r3, #28]
 800b38c:	4313      	orrs	r3, r2
 800b38e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	681a      	ldr	r2, [r3, #0]
 800b396:	4baa      	ldr	r3, [pc, #680]	; (800b640 <UART_SetConfig+0x2d8>)
 800b398:	4013      	ands	r3, r2
 800b39a:	697a      	ldr	r2, [r7, #20]
 800b39c:	6812      	ldr	r2, [r2, #0]
 800b39e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b3a0:	430b      	orrs	r3, r1
 800b3a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	685b      	ldr	r3, [r3, #4]
 800b3aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b3ae:	697b      	ldr	r3, [r7, #20]
 800b3b0:	68da      	ldr	r2, [r3, #12]
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	430a      	orrs	r2, r1
 800b3b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	699b      	ldr	r3, [r3, #24]
 800b3be:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	4a9f      	ldr	r2, [pc, #636]	; (800b644 <UART_SetConfig+0x2dc>)
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	d004      	beq.n	800b3d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	6a1b      	ldr	r3, [r3, #32]
 800b3ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3d0:	4313      	orrs	r3, r2
 800b3d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	689b      	ldr	r3, [r3, #8]
 800b3da:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800b3de:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800b3e2:	697a      	ldr	r2, [r7, #20]
 800b3e4:	6812      	ldr	r2, [r2, #0]
 800b3e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b3e8:	430b      	orrs	r3, r1
 800b3ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3f2:	f023 010f 	bic.w	r1, r3, #15
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	430a      	orrs	r2, r1
 800b400:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	4a90      	ldr	r2, [pc, #576]	; (800b648 <UART_SetConfig+0x2e0>)
 800b408:	4293      	cmp	r3, r2
 800b40a:	d125      	bne.n	800b458 <UART_SetConfig+0xf0>
 800b40c:	4b8f      	ldr	r3, [pc, #572]	; (800b64c <UART_SetConfig+0x2e4>)
 800b40e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b412:	f003 0303 	and.w	r3, r3, #3
 800b416:	2b03      	cmp	r3, #3
 800b418:	d81a      	bhi.n	800b450 <UART_SetConfig+0xe8>
 800b41a:	a201      	add	r2, pc, #4	; (adr r2, 800b420 <UART_SetConfig+0xb8>)
 800b41c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b420:	0800b431 	.word	0x0800b431
 800b424:	0800b441 	.word	0x0800b441
 800b428:	0800b439 	.word	0x0800b439
 800b42c:	0800b449 	.word	0x0800b449
 800b430:	2301      	movs	r3, #1
 800b432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b436:	e116      	b.n	800b666 <UART_SetConfig+0x2fe>
 800b438:	2302      	movs	r3, #2
 800b43a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b43e:	e112      	b.n	800b666 <UART_SetConfig+0x2fe>
 800b440:	2304      	movs	r3, #4
 800b442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b446:	e10e      	b.n	800b666 <UART_SetConfig+0x2fe>
 800b448:	2308      	movs	r3, #8
 800b44a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b44e:	e10a      	b.n	800b666 <UART_SetConfig+0x2fe>
 800b450:	2310      	movs	r3, #16
 800b452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b456:	e106      	b.n	800b666 <UART_SetConfig+0x2fe>
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	4a7c      	ldr	r2, [pc, #496]	; (800b650 <UART_SetConfig+0x2e8>)
 800b45e:	4293      	cmp	r3, r2
 800b460:	d138      	bne.n	800b4d4 <UART_SetConfig+0x16c>
 800b462:	4b7a      	ldr	r3, [pc, #488]	; (800b64c <UART_SetConfig+0x2e4>)
 800b464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b468:	f003 030c 	and.w	r3, r3, #12
 800b46c:	2b0c      	cmp	r3, #12
 800b46e:	d82d      	bhi.n	800b4cc <UART_SetConfig+0x164>
 800b470:	a201      	add	r2, pc, #4	; (adr r2, 800b478 <UART_SetConfig+0x110>)
 800b472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b476:	bf00      	nop
 800b478:	0800b4ad 	.word	0x0800b4ad
 800b47c:	0800b4cd 	.word	0x0800b4cd
 800b480:	0800b4cd 	.word	0x0800b4cd
 800b484:	0800b4cd 	.word	0x0800b4cd
 800b488:	0800b4bd 	.word	0x0800b4bd
 800b48c:	0800b4cd 	.word	0x0800b4cd
 800b490:	0800b4cd 	.word	0x0800b4cd
 800b494:	0800b4cd 	.word	0x0800b4cd
 800b498:	0800b4b5 	.word	0x0800b4b5
 800b49c:	0800b4cd 	.word	0x0800b4cd
 800b4a0:	0800b4cd 	.word	0x0800b4cd
 800b4a4:	0800b4cd 	.word	0x0800b4cd
 800b4a8:	0800b4c5 	.word	0x0800b4c5
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4b2:	e0d8      	b.n	800b666 <UART_SetConfig+0x2fe>
 800b4b4:	2302      	movs	r3, #2
 800b4b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4ba:	e0d4      	b.n	800b666 <UART_SetConfig+0x2fe>
 800b4bc:	2304      	movs	r3, #4
 800b4be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4c2:	e0d0      	b.n	800b666 <UART_SetConfig+0x2fe>
 800b4c4:	2308      	movs	r3, #8
 800b4c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4ca:	e0cc      	b.n	800b666 <UART_SetConfig+0x2fe>
 800b4cc:	2310      	movs	r3, #16
 800b4ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4d2:	e0c8      	b.n	800b666 <UART_SetConfig+0x2fe>
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	4a5e      	ldr	r2, [pc, #376]	; (800b654 <UART_SetConfig+0x2ec>)
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d125      	bne.n	800b52a <UART_SetConfig+0x1c2>
 800b4de:	4b5b      	ldr	r3, [pc, #364]	; (800b64c <UART_SetConfig+0x2e4>)
 800b4e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4e4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b4e8:	2b30      	cmp	r3, #48	; 0x30
 800b4ea:	d016      	beq.n	800b51a <UART_SetConfig+0x1b2>
 800b4ec:	2b30      	cmp	r3, #48	; 0x30
 800b4ee:	d818      	bhi.n	800b522 <UART_SetConfig+0x1ba>
 800b4f0:	2b20      	cmp	r3, #32
 800b4f2:	d00a      	beq.n	800b50a <UART_SetConfig+0x1a2>
 800b4f4:	2b20      	cmp	r3, #32
 800b4f6:	d814      	bhi.n	800b522 <UART_SetConfig+0x1ba>
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d002      	beq.n	800b502 <UART_SetConfig+0x19a>
 800b4fc:	2b10      	cmp	r3, #16
 800b4fe:	d008      	beq.n	800b512 <UART_SetConfig+0x1aa>
 800b500:	e00f      	b.n	800b522 <UART_SetConfig+0x1ba>
 800b502:	2300      	movs	r3, #0
 800b504:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b508:	e0ad      	b.n	800b666 <UART_SetConfig+0x2fe>
 800b50a:	2302      	movs	r3, #2
 800b50c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b510:	e0a9      	b.n	800b666 <UART_SetConfig+0x2fe>
 800b512:	2304      	movs	r3, #4
 800b514:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b518:	e0a5      	b.n	800b666 <UART_SetConfig+0x2fe>
 800b51a:	2308      	movs	r3, #8
 800b51c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b520:	e0a1      	b.n	800b666 <UART_SetConfig+0x2fe>
 800b522:	2310      	movs	r3, #16
 800b524:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b528:	e09d      	b.n	800b666 <UART_SetConfig+0x2fe>
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	4a4a      	ldr	r2, [pc, #296]	; (800b658 <UART_SetConfig+0x2f0>)
 800b530:	4293      	cmp	r3, r2
 800b532:	d125      	bne.n	800b580 <UART_SetConfig+0x218>
 800b534:	4b45      	ldr	r3, [pc, #276]	; (800b64c <UART_SetConfig+0x2e4>)
 800b536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b53a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b53e:	2bc0      	cmp	r3, #192	; 0xc0
 800b540:	d016      	beq.n	800b570 <UART_SetConfig+0x208>
 800b542:	2bc0      	cmp	r3, #192	; 0xc0
 800b544:	d818      	bhi.n	800b578 <UART_SetConfig+0x210>
 800b546:	2b80      	cmp	r3, #128	; 0x80
 800b548:	d00a      	beq.n	800b560 <UART_SetConfig+0x1f8>
 800b54a:	2b80      	cmp	r3, #128	; 0x80
 800b54c:	d814      	bhi.n	800b578 <UART_SetConfig+0x210>
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d002      	beq.n	800b558 <UART_SetConfig+0x1f0>
 800b552:	2b40      	cmp	r3, #64	; 0x40
 800b554:	d008      	beq.n	800b568 <UART_SetConfig+0x200>
 800b556:	e00f      	b.n	800b578 <UART_SetConfig+0x210>
 800b558:	2300      	movs	r3, #0
 800b55a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b55e:	e082      	b.n	800b666 <UART_SetConfig+0x2fe>
 800b560:	2302      	movs	r3, #2
 800b562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b566:	e07e      	b.n	800b666 <UART_SetConfig+0x2fe>
 800b568:	2304      	movs	r3, #4
 800b56a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b56e:	e07a      	b.n	800b666 <UART_SetConfig+0x2fe>
 800b570:	2308      	movs	r3, #8
 800b572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b576:	e076      	b.n	800b666 <UART_SetConfig+0x2fe>
 800b578:	2310      	movs	r3, #16
 800b57a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b57e:	e072      	b.n	800b666 <UART_SetConfig+0x2fe>
 800b580:	697b      	ldr	r3, [r7, #20]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	4a35      	ldr	r2, [pc, #212]	; (800b65c <UART_SetConfig+0x2f4>)
 800b586:	4293      	cmp	r3, r2
 800b588:	d12a      	bne.n	800b5e0 <UART_SetConfig+0x278>
 800b58a:	4b30      	ldr	r3, [pc, #192]	; (800b64c <UART_SetConfig+0x2e4>)
 800b58c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b590:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b594:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b598:	d01a      	beq.n	800b5d0 <UART_SetConfig+0x268>
 800b59a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b59e:	d81b      	bhi.n	800b5d8 <UART_SetConfig+0x270>
 800b5a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5a4:	d00c      	beq.n	800b5c0 <UART_SetConfig+0x258>
 800b5a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5aa:	d815      	bhi.n	800b5d8 <UART_SetConfig+0x270>
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d003      	beq.n	800b5b8 <UART_SetConfig+0x250>
 800b5b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5b4:	d008      	beq.n	800b5c8 <UART_SetConfig+0x260>
 800b5b6:	e00f      	b.n	800b5d8 <UART_SetConfig+0x270>
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5be:	e052      	b.n	800b666 <UART_SetConfig+0x2fe>
 800b5c0:	2302      	movs	r3, #2
 800b5c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5c6:	e04e      	b.n	800b666 <UART_SetConfig+0x2fe>
 800b5c8:	2304      	movs	r3, #4
 800b5ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5ce:	e04a      	b.n	800b666 <UART_SetConfig+0x2fe>
 800b5d0:	2308      	movs	r3, #8
 800b5d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5d6:	e046      	b.n	800b666 <UART_SetConfig+0x2fe>
 800b5d8:	2310      	movs	r3, #16
 800b5da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5de:	e042      	b.n	800b666 <UART_SetConfig+0x2fe>
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	4a17      	ldr	r2, [pc, #92]	; (800b644 <UART_SetConfig+0x2dc>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d13a      	bne.n	800b660 <UART_SetConfig+0x2f8>
 800b5ea:	4b18      	ldr	r3, [pc, #96]	; (800b64c <UART_SetConfig+0x2e4>)
 800b5ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b5f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b5f8:	d01a      	beq.n	800b630 <UART_SetConfig+0x2c8>
 800b5fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b5fe:	d81b      	bhi.n	800b638 <UART_SetConfig+0x2d0>
 800b600:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b604:	d00c      	beq.n	800b620 <UART_SetConfig+0x2b8>
 800b606:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b60a:	d815      	bhi.n	800b638 <UART_SetConfig+0x2d0>
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d003      	beq.n	800b618 <UART_SetConfig+0x2b0>
 800b610:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b614:	d008      	beq.n	800b628 <UART_SetConfig+0x2c0>
 800b616:	e00f      	b.n	800b638 <UART_SetConfig+0x2d0>
 800b618:	2300      	movs	r3, #0
 800b61a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b61e:	e022      	b.n	800b666 <UART_SetConfig+0x2fe>
 800b620:	2302      	movs	r3, #2
 800b622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b626:	e01e      	b.n	800b666 <UART_SetConfig+0x2fe>
 800b628:	2304      	movs	r3, #4
 800b62a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b62e:	e01a      	b.n	800b666 <UART_SetConfig+0x2fe>
 800b630:	2308      	movs	r3, #8
 800b632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b636:	e016      	b.n	800b666 <UART_SetConfig+0x2fe>
 800b638:	2310      	movs	r3, #16
 800b63a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b63e:	e012      	b.n	800b666 <UART_SetConfig+0x2fe>
 800b640:	cfff69f3 	.word	0xcfff69f3
 800b644:	40008000 	.word	0x40008000
 800b648:	40013800 	.word	0x40013800
 800b64c:	40021000 	.word	0x40021000
 800b650:	40004400 	.word	0x40004400
 800b654:	40004800 	.word	0x40004800
 800b658:	40004c00 	.word	0x40004c00
 800b65c:	40005000 	.word	0x40005000
 800b660:	2310      	movs	r3, #16
 800b662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	4aae      	ldr	r2, [pc, #696]	; (800b924 <UART_SetConfig+0x5bc>)
 800b66c:	4293      	cmp	r3, r2
 800b66e:	f040 8097 	bne.w	800b7a0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b672:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b676:	2b08      	cmp	r3, #8
 800b678:	d823      	bhi.n	800b6c2 <UART_SetConfig+0x35a>
 800b67a:	a201      	add	r2, pc, #4	; (adr r2, 800b680 <UART_SetConfig+0x318>)
 800b67c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b680:	0800b6a5 	.word	0x0800b6a5
 800b684:	0800b6c3 	.word	0x0800b6c3
 800b688:	0800b6ad 	.word	0x0800b6ad
 800b68c:	0800b6c3 	.word	0x0800b6c3
 800b690:	0800b6b3 	.word	0x0800b6b3
 800b694:	0800b6c3 	.word	0x0800b6c3
 800b698:	0800b6c3 	.word	0x0800b6c3
 800b69c:	0800b6c3 	.word	0x0800b6c3
 800b6a0:	0800b6bb 	.word	0x0800b6bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b6a4:	f7fd fdb2 	bl	800920c <HAL_RCC_GetPCLK1Freq>
 800b6a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b6aa:	e010      	b.n	800b6ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b6ac:	4b9e      	ldr	r3, [pc, #632]	; (800b928 <UART_SetConfig+0x5c0>)
 800b6ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b6b0:	e00d      	b.n	800b6ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b6b2:	f7fd fd3d 	bl	8009130 <HAL_RCC_GetSysClockFreq>
 800b6b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b6b8:	e009      	b.n	800b6ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b6ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b6c0:	e005      	b.n	800b6ce <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b6cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	f000 8130 	beq.w	800b936 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6da:	4a94      	ldr	r2, [pc, #592]	; (800b92c <UART_SetConfig+0x5c4>)
 800b6dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6e0:	461a      	mov	r2, r3
 800b6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b6e8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	685a      	ldr	r2, [r3, #4]
 800b6ee:	4613      	mov	r3, r2
 800b6f0:	005b      	lsls	r3, r3, #1
 800b6f2:	4413      	add	r3, r2
 800b6f4:	69ba      	ldr	r2, [r7, #24]
 800b6f6:	429a      	cmp	r2, r3
 800b6f8:	d305      	bcc.n	800b706 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	685b      	ldr	r3, [r3, #4]
 800b6fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b700:	69ba      	ldr	r2, [r7, #24]
 800b702:	429a      	cmp	r2, r3
 800b704:	d903      	bls.n	800b70e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b706:	2301      	movs	r3, #1
 800b708:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b70c:	e113      	b.n	800b936 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b710:	2200      	movs	r2, #0
 800b712:	60bb      	str	r3, [r7, #8]
 800b714:	60fa      	str	r2, [r7, #12]
 800b716:	697b      	ldr	r3, [r7, #20]
 800b718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b71a:	4a84      	ldr	r2, [pc, #528]	; (800b92c <UART_SetConfig+0x5c4>)
 800b71c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b720:	b29b      	uxth	r3, r3
 800b722:	2200      	movs	r2, #0
 800b724:	603b      	str	r3, [r7, #0]
 800b726:	607a      	str	r2, [r7, #4]
 800b728:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b72c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b730:	f7f5 fa3c 	bl	8000bac <__aeabi_uldivmod>
 800b734:	4602      	mov	r2, r0
 800b736:	460b      	mov	r3, r1
 800b738:	4610      	mov	r0, r2
 800b73a:	4619      	mov	r1, r3
 800b73c:	f04f 0200 	mov.w	r2, #0
 800b740:	f04f 0300 	mov.w	r3, #0
 800b744:	020b      	lsls	r3, r1, #8
 800b746:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b74a:	0202      	lsls	r2, r0, #8
 800b74c:	6979      	ldr	r1, [r7, #20]
 800b74e:	6849      	ldr	r1, [r1, #4]
 800b750:	0849      	lsrs	r1, r1, #1
 800b752:	2000      	movs	r0, #0
 800b754:	460c      	mov	r4, r1
 800b756:	4605      	mov	r5, r0
 800b758:	eb12 0804 	adds.w	r8, r2, r4
 800b75c:	eb43 0905 	adc.w	r9, r3, r5
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	685b      	ldr	r3, [r3, #4]
 800b764:	2200      	movs	r2, #0
 800b766:	469a      	mov	sl, r3
 800b768:	4693      	mov	fp, r2
 800b76a:	4652      	mov	r2, sl
 800b76c:	465b      	mov	r3, fp
 800b76e:	4640      	mov	r0, r8
 800b770:	4649      	mov	r1, r9
 800b772:	f7f5 fa1b 	bl	8000bac <__aeabi_uldivmod>
 800b776:	4602      	mov	r2, r0
 800b778:	460b      	mov	r3, r1
 800b77a:	4613      	mov	r3, r2
 800b77c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b77e:	6a3b      	ldr	r3, [r7, #32]
 800b780:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b784:	d308      	bcc.n	800b798 <UART_SetConfig+0x430>
 800b786:	6a3b      	ldr	r3, [r7, #32]
 800b788:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b78c:	d204      	bcs.n	800b798 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b78e:	697b      	ldr	r3, [r7, #20]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	6a3a      	ldr	r2, [r7, #32]
 800b794:	60da      	str	r2, [r3, #12]
 800b796:	e0ce      	b.n	800b936 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b798:	2301      	movs	r3, #1
 800b79a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b79e:	e0ca      	b.n	800b936 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	69db      	ldr	r3, [r3, #28]
 800b7a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7a8:	d166      	bne.n	800b878 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b7aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b7ae:	2b08      	cmp	r3, #8
 800b7b0:	d827      	bhi.n	800b802 <UART_SetConfig+0x49a>
 800b7b2:	a201      	add	r2, pc, #4	; (adr r2, 800b7b8 <UART_SetConfig+0x450>)
 800b7b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7b8:	0800b7dd 	.word	0x0800b7dd
 800b7bc:	0800b7e5 	.word	0x0800b7e5
 800b7c0:	0800b7ed 	.word	0x0800b7ed
 800b7c4:	0800b803 	.word	0x0800b803
 800b7c8:	0800b7f3 	.word	0x0800b7f3
 800b7cc:	0800b803 	.word	0x0800b803
 800b7d0:	0800b803 	.word	0x0800b803
 800b7d4:	0800b803 	.word	0x0800b803
 800b7d8:	0800b7fb 	.word	0x0800b7fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b7dc:	f7fd fd16 	bl	800920c <HAL_RCC_GetPCLK1Freq>
 800b7e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b7e2:	e014      	b.n	800b80e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b7e4:	f7fd fd28 	bl	8009238 <HAL_RCC_GetPCLK2Freq>
 800b7e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b7ea:	e010      	b.n	800b80e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b7ec:	4b4e      	ldr	r3, [pc, #312]	; (800b928 <UART_SetConfig+0x5c0>)
 800b7ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b7f0:	e00d      	b.n	800b80e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b7f2:	f7fd fc9d 	bl	8009130 <HAL_RCC_GetSysClockFreq>
 800b7f6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b7f8:	e009      	b.n	800b80e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b7fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b7fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b800:	e005      	b.n	800b80e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b802:	2300      	movs	r3, #0
 800b804:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b806:	2301      	movs	r3, #1
 800b808:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b80c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b810:	2b00      	cmp	r3, #0
 800b812:	f000 8090 	beq.w	800b936 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b81a:	4a44      	ldr	r2, [pc, #272]	; (800b92c <UART_SetConfig+0x5c4>)
 800b81c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b820:	461a      	mov	r2, r3
 800b822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b824:	fbb3 f3f2 	udiv	r3, r3, r2
 800b828:	005a      	lsls	r2, r3, #1
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	685b      	ldr	r3, [r3, #4]
 800b82e:	085b      	lsrs	r3, r3, #1
 800b830:	441a      	add	r2, r3
 800b832:	697b      	ldr	r3, [r7, #20]
 800b834:	685b      	ldr	r3, [r3, #4]
 800b836:	fbb2 f3f3 	udiv	r3, r2, r3
 800b83a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b83c:	6a3b      	ldr	r3, [r7, #32]
 800b83e:	2b0f      	cmp	r3, #15
 800b840:	d916      	bls.n	800b870 <UART_SetConfig+0x508>
 800b842:	6a3b      	ldr	r3, [r7, #32]
 800b844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b848:	d212      	bcs.n	800b870 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b84a:	6a3b      	ldr	r3, [r7, #32]
 800b84c:	b29b      	uxth	r3, r3
 800b84e:	f023 030f 	bic.w	r3, r3, #15
 800b852:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b854:	6a3b      	ldr	r3, [r7, #32]
 800b856:	085b      	lsrs	r3, r3, #1
 800b858:	b29b      	uxth	r3, r3
 800b85a:	f003 0307 	and.w	r3, r3, #7
 800b85e:	b29a      	uxth	r2, r3
 800b860:	8bfb      	ldrh	r3, [r7, #30]
 800b862:	4313      	orrs	r3, r2
 800b864:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	8bfa      	ldrh	r2, [r7, #30]
 800b86c:	60da      	str	r2, [r3, #12]
 800b86e:	e062      	b.n	800b936 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b870:	2301      	movs	r3, #1
 800b872:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b876:	e05e      	b.n	800b936 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b878:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b87c:	2b08      	cmp	r3, #8
 800b87e:	d828      	bhi.n	800b8d2 <UART_SetConfig+0x56a>
 800b880:	a201      	add	r2, pc, #4	; (adr r2, 800b888 <UART_SetConfig+0x520>)
 800b882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b886:	bf00      	nop
 800b888:	0800b8ad 	.word	0x0800b8ad
 800b88c:	0800b8b5 	.word	0x0800b8b5
 800b890:	0800b8bd 	.word	0x0800b8bd
 800b894:	0800b8d3 	.word	0x0800b8d3
 800b898:	0800b8c3 	.word	0x0800b8c3
 800b89c:	0800b8d3 	.word	0x0800b8d3
 800b8a0:	0800b8d3 	.word	0x0800b8d3
 800b8a4:	0800b8d3 	.word	0x0800b8d3
 800b8a8:	0800b8cb 	.word	0x0800b8cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b8ac:	f7fd fcae 	bl	800920c <HAL_RCC_GetPCLK1Freq>
 800b8b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b8b2:	e014      	b.n	800b8de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b8b4:	f7fd fcc0 	bl	8009238 <HAL_RCC_GetPCLK2Freq>
 800b8b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b8ba:	e010      	b.n	800b8de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b8bc:	4b1a      	ldr	r3, [pc, #104]	; (800b928 <UART_SetConfig+0x5c0>)
 800b8be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b8c0:	e00d      	b.n	800b8de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b8c2:	f7fd fc35 	bl	8009130 <HAL_RCC_GetSysClockFreq>
 800b8c6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b8c8:	e009      	b.n	800b8de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b8ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b8ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b8d0:	e005      	b.n	800b8de <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b8dc:	bf00      	nop
    }

    if (pclk != 0U)
 800b8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d028      	beq.n	800b936 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b8e4:	697b      	ldr	r3, [r7, #20]
 800b8e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8e8:	4a10      	ldr	r2, [pc, #64]	; (800b92c <UART_SetConfig+0x5c4>)
 800b8ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b8ee:	461a      	mov	r2, r3
 800b8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f2:	fbb3 f2f2 	udiv	r2, r3, r2
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	685b      	ldr	r3, [r3, #4]
 800b8fa:	085b      	lsrs	r3, r3, #1
 800b8fc:	441a      	add	r2, r3
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	685b      	ldr	r3, [r3, #4]
 800b902:	fbb2 f3f3 	udiv	r3, r2, r3
 800b906:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b908:	6a3b      	ldr	r3, [r7, #32]
 800b90a:	2b0f      	cmp	r3, #15
 800b90c:	d910      	bls.n	800b930 <UART_SetConfig+0x5c8>
 800b90e:	6a3b      	ldr	r3, [r7, #32]
 800b910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b914:	d20c      	bcs.n	800b930 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b916:	6a3b      	ldr	r3, [r7, #32]
 800b918:	b29a      	uxth	r2, r3
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	60da      	str	r2, [r3, #12]
 800b920:	e009      	b.n	800b936 <UART_SetConfig+0x5ce>
 800b922:	bf00      	nop
 800b924:	40008000 	.word	0x40008000
 800b928:	00f42400 	.word	0x00f42400
 800b92c:	08014748 	.word	0x08014748
      }
      else
      {
        ret = HAL_ERROR;
 800b930:	2301      	movs	r3, #1
 800b932:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	2201      	movs	r2, #1
 800b93a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	2201      	movs	r2, #1
 800b942:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	2200      	movs	r2, #0
 800b94a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b94c:	697b      	ldr	r3, [r7, #20]
 800b94e:	2200      	movs	r2, #0
 800b950:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b952:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800b956:	4618      	mov	r0, r3
 800b958:	3730      	adds	r7, #48	; 0x30
 800b95a:	46bd      	mov	sp, r7
 800b95c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b960 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b960:	b480      	push	{r7}
 800b962:	b083      	sub	sp, #12
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b96c:	f003 0301 	and.w	r3, r3, #1
 800b970:	2b00      	cmp	r3, #0
 800b972:	d00a      	beq.n	800b98a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	685b      	ldr	r3, [r3, #4]
 800b97a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	430a      	orrs	r2, r1
 800b988:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b98e:	f003 0302 	and.w	r3, r3, #2
 800b992:	2b00      	cmp	r3, #0
 800b994:	d00a      	beq.n	800b9ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	685b      	ldr	r3, [r3, #4]
 800b99c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	430a      	orrs	r2, r1
 800b9aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9b0:	f003 0304 	and.w	r3, r3, #4
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d00a      	beq.n	800b9ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	685b      	ldr	r3, [r3, #4]
 800b9be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	430a      	orrs	r2, r1
 800b9cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9d2:	f003 0308 	and.w	r3, r3, #8
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d00a      	beq.n	800b9f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	685b      	ldr	r3, [r3, #4]
 800b9e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	430a      	orrs	r2, r1
 800b9ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9f4:	f003 0310 	and.w	r3, r3, #16
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d00a      	beq.n	800ba12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	689b      	ldr	r3, [r3, #8]
 800ba02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	430a      	orrs	r2, r1
 800ba10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba16:	f003 0320 	and.w	r3, r3, #32
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d00a      	beq.n	800ba34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	689b      	ldr	r3, [r3, #8]
 800ba24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	430a      	orrs	r2, r1
 800ba32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d01a      	beq.n	800ba76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	685b      	ldr	r3, [r3, #4]
 800ba46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	430a      	orrs	r2, r1
 800ba54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba5e:	d10a      	bne.n	800ba76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	685b      	ldr	r3, [r3, #4]
 800ba66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	430a      	orrs	r2, r1
 800ba74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d00a      	beq.n	800ba98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	685b      	ldr	r3, [r3, #4]
 800ba88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	430a      	orrs	r2, r1
 800ba96:	605a      	str	r2, [r3, #4]
  }
}
 800ba98:	bf00      	nop
 800ba9a:	370c      	adds	r7, #12
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa2:	4770      	bx	lr

0800baa4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b086      	sub	sp, #24
 800baa8:	af02      	add	r7, sp, #8
 800baaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2200      	movs	r2, #0
 800bab0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bab4:	f7f8 faf4 	bl	80040a0 <HAL_GetTick>
 800bab8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	f003 0308 	and.w	r3, r3, #8
 800bac4:	2b08      	cmp	r3, #8
 800bac6:	d10e      	bne.n	800bae6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bac8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bacc:	9300      	str	r3, [sp, #0]
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	2200      	movs	r2, #0
 800bad2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f000 f82f 	bl	800bb3a <UART_WaitOnFlagUntilTimeout>
 800badc:	4603      	mov	r3, r0
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d001      	beq.n	800bae6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bae2:	2303      	movs	r3, #3
 800bae4:	e025      	b.n	800bb32 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f003 0304 	and.w	r3, r3, #4
 800baf0:	2b04      	cmp	r3, #4
 800baf2:	d10e      	bne.n	800bb12 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800baf4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800baf8:	9300      	str	r3, [sp, #0]
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	2200      	movs	r2, #0
 800bafe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f000 f819 	bl	800bb3a <UART_WaitOnFlagUntilTimeout>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d001      	beq.n	800bb12 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bb0e:	2303      	movs	r3, #3
 800bb10:	e00f      	b.n	800bb32 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2220      	movs	r2, #32
 800bb16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2220      	movs	r2, #32
 800bb1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2200      	movs	r2, #0
 800bb26:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bb30:	2300      	movs	r3, #0
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3710      	adds	r7, #16
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}

0800bb3a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bb3a:	b580      	push	{r7, lr}
 800bb3c:	b09c      	sub	sp, #112	; 0x70
 800bb3e:	af00      	add	r7, sp, #0
 800bb40:	60f8      	str	r0, [r7, #12]
 800bb42:	60b9      	str	r1, [r7, #8]
 800bb44:	603b      	str	r3, [r7, #0]
 800bb46:	4613      	mov	r3, r2
 800bb48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb4a:	e0a9      	b.n	800bca0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb52:	f000 80a5 	beq.w	800bca0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb56:	f7f8 faa3 	bl	80040a0 <HAL_GetTick>
 800bb5a:	4602      	mov	r2, r0
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	1ad3      	subs	r3, r2, r3
 800bb60:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bb62:	429a      	cmp	r2, r3
 800bb64:	d302      	bcc.n	800bb6c <UART_WaitOnFlagUntilTimeout+0x32>
 800bb66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d140      	bne.n	800bbee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb74:	e853 3f00 	ldrex	r3, [r3]
 800bb78:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bb7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bb80:	667b      	str	r3, [r7, #100]	; 0x64
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	461a      	mov	r2, r3
 800bb88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bb8c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb8e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bb90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bb92:	e841 2300 	strex	r3, r2, [r1]
 800bb96:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bb98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d1e6      	bne.n	800bb6c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	3308      	adds	r3, #8
 800bba4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bba8:	e853 3f00 	ldrex	r3, [r3]
 800bbac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bbae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbb0:	f023 0301 	bic.w	r3, r3, #1
 800bbb4:	663b      	str	r3, [r7, #96]	; 0x60
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	3308      	adds	r3, #8
 800bbbc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bbbe:	64ba      	str	r2, [r7, #72]	; 0x48
 800bbc0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbc2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bbc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bbc6:	e841 2300 	strex	r3, r2, [r1]
 800bbca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bbcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d1e5      	bne.n	800bb9e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	2220      	movs	r2, #32
 800bbd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	2220      	movs	r2, #32
 800bbde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800bbea:	2303      	movs	r3, #3
 800bbec:	e069      	b.n	800bcc2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f003 0304 	and.w	r3, r3, #4
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d051      	beq.n	800bca0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	69db      	ldr	r3, [r3, #28]
 800bc02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bc06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc0a:	d149      	bne.n	800bca0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bc14:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc1e:	e853 3f00 	ldrex	r3, [r3]
 800bc22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc26:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bc2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	461a      	mov	r2, r3
 800bc32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc34:	637b      	str	r3, [r7, #52]	; 0x34
 800bc36:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bc3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc3c:	e841 2300 	strex	r3, r2, [r1]
 800bc40:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bc42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d1e6      	bne.n	800bc16 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	3308      	adds	r3, #8
 800bc4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc50:	697b      	ldr	r3, [r7, #20]
 800bc52:	e853 3f00 	ldrex	r3, [r3]
 800bc56:	613b      	str	r3, [r7, #16]
   return(result);
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	f023 0301 	bic.w	r3, r3, #1
 800bc5e:	66bb      	str	r3, [r7, #104]	; 0x68
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	3308      	adds	r3, #8
 800bc66:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bc68:	623a      	str	r2, [r7, #32]
 800bc6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc6c:	69f9      	ldr	r1, [r7, #28]
 800bc6e:	6a3a      	ldr	r2, [r7, #32]
 800bc70:	e841 2300 	strex	r3, r2, [r1]
 800bc74:	61bb      	str	r3, [r7, #24]
   return(result);
 800bc76:	69bb      	ldr	r3, [r7, #24]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d1e5      	bne.n	800bc48 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	2220      	movs	r2, #32
 800bc80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	2220      	movs	r2, #32
 800bc88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	2220      	movs	r2, #32
 800bc90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	2200      	movs	r2, #0
 800bc98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800bc9c:	2303      	movs	r3, #3
 800bc9e:	e010      	b.n	800bcc2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	69da      	ldr	r2, [r3, #28]
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	4013      	ands	r3, r2
 800bcaa:	68ba      	ldr	r2, [r7, #8]
 800bcac:	429a      	cmp	r2, r3
 800bcae:	bf0c      	ite	eq
 800bcb0:	2301      	moveq	r3, #1
 800bcb2:	2300      	movne	r3, #0
 800bcb4:	b2db      	uxtb	r3, r3
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	79fb      	ldrb	r3, [r7, #7]
 800bcba:	429a      	cmp	r2, r3
 800bcbc:	f43f af46 	beq.w	800bb4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bcc0:	2300      	movs	r3, #0
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3770      	adds	r7, #112	; 0x70
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}
	...

0800bccc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bccc:	b480      	push	{r7}
 800bcce:	b0a3      	sub	sp, #140	; 0x8c
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	60f8      	str	r0, [r7, #12]
 800bcd4:	60b9      	str	r1, [r7, #8]
 800bcd6:	4613      	mov	r3, r2
 800bcd8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	68ba      	ldr	r2, [r7, #8]
 800bcde:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	88fa      	ldrh	r2, [r7, #6]
 800bce4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	88fa      	ldrh	r2, [r7, #6]
 800bcec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	689b      	ldr	r3, [r3, #8]
 800bcfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcfe:	d10e      	bne.n	800bd1e <UART_Start_Receive_IT+0x52>
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	691b      	ldr	r3, [r3, #16]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d105      	bne.n	800bd14 <UART_Start_Receive_IT+0x48>
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800bd0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bd12:	e02d      	b.n	800bd70 <UART_Start_Receive_IT+0xa4>
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	22ff      	movs	r2, #255	; 0xff
 800bd18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bd1c:	e028      	b.n	800bd70 <UART_Start_Receive_IT+0xa4>
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	689b      	ldr	r3, [r3, #8]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d10d      	bne.n	800bd42 <UART_Start_Receive_IT+0x76>
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	691b      	ldr	r3, [r3, #16]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d104      	bne.n	800bd38 <UART_Start_Receive_IT+0x6c>
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	22ff      	movs	r2, #255	; 0xff
 800bd32:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bd36:	e01b      	b.n	800bd70 <UART_Start_Receive_IT+0xa4>
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	227f      	movs	r2, #127	; 0x7f
 800bd3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bd40:	e016      	b.n	800bd70 <UART_Start_Receive_IT+0xa4>
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	689b      	ldr	r3, [r3, #8]
 800bd46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd4a:	d10d      	bne.n	800bd68 <UART_Start_Receive_IT+0x9c>
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	691b      	ldr	r3, [r3, #16]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d104      	bne.n	800bd5e <UART_Start_Receive_IT+0x92>
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	227f      	movs	r2, #127	; 0x7f
 800bd58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bd5c:	e008      	b.n	800bd70 <UART_Start_Receive_IT+0xa4>
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	223f      	movs	r2, #63	; 0x3f
 800bd62:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bd66:	e003      	b.n	800bd70 <UART_Start_Receive_IT+0xa4>
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	2200      	movs	r2, #0
 800bd74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	2222      	movs	r2, #34	; 0x22
 800bd7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	3308      	adds	r3, #8
 800bd86:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd8a:	e853 3f00 	ldrex	r3, [r3]
 800bd8e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800bd90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd92:	f043 0301 	orr.w	r3, r3, #1
 800bd96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	3308      	adds	r3, #8
 800bda0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800bda4:	673a      	str	r2, [r7, #112]	; 0x70
 800bda6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bda8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800bdaa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800bdac:	e841 2300 	strex	r3, r2, [r1]
 800bdb0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800bdb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d1e3      	bne.n	800bd80 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bdbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bdc0:	d153      	bne.n	800be6a <UART_Start_Receive_IT+0x19e>
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bdc8:	88fa      	ldrh	r2, [r7, #6]
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d34d      	bcc.n	800be6a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	689b      	ldr	r3, [r3, #8]
 800bdd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdd6:	d107      	bne.n	800bde8 <UART_Start_Receive_IT+0x11c>
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	691b      	ldr	r3, [r3, #16]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d103      	bne.n	800bde8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	4a4b      	ldr	r2, [pc, #300]	; (800bf10 <UART_Start_Receive_IT+0x244>)
 800bde4:	671a      	str	r2, [r3, #112]	; 0x70
 800bde6:	e002      	b.n	800bdee <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	4a4a      	ldr	r2, [pc, #296]	; (800bf14 <UART_Start_Receive_IT+0x248>)
 800bdec:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	691b      	ldr	r3, [r3, #16]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d01a      	beq.n	800be34 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be06:	e853 3f00 	ldrex	r3, [r3]
 800be0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800be0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	461a      	mov	r2, r3
 800be1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800be20:	65fb      	str	r3, [r7, #92]	; 0x5c
 800be22:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be24:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800be26:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800be28:	e841 2300 	strex	r3, r2, [r1]
 800be2c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800be2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be30:	2b00      	cmp	r3, #0
 800be32:	d1e4      	bne.n	800bdfe <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	3308      	adds	r3, #8
 800be3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be3e:	e853 3f00 	ldrex	r3, [r3]
 800be42:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800be44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be4a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	3308      	adds	r3, #8
 800be52:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800be54:	64ba      	str	r2, [r7, #72]	; 0x48
 800be56:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be58:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800be5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800be5c:	e841 2300 	strex	r3, r2, [r1]
 800be60:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800be62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be64:	2b00      	cmp	r3, #0
 800be66:	d1e5      	bne.n	800be34 <UART_Start_Receive_IT+0x168>
 800be68:	e04a      	b.n	800bf00 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	689b      	ldr	r3, [r3, #8]
 800be6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be72:	d107      	bne.n	800be84 <UART_Start_Receive_IT+0x1b8>
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	691b      	ldr	r3, [r3, #16]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d103      	bne.n	800be84 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	4a26      	ldr	r2, [pc, #152]	; (800bf18 <UART_Start_Receive_IT+0x24c>)
 800be80:	671a      	str	r2, [r3, #112]	; 0x70
 800be82:	e002      	b.n	800be8a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	4a25      	ldr	r2, [pc, #148]	; (800bf1c <UART_Start_Receive_IT+0x250>)
 800be88:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	2200      	movs	r2, #0
 800be8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	691b      	ldr	r3, [r3, #16]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d019      	beq.n	800bece <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea2:	e853 3f00 	ldrex	r3, [r3]
 800bea6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beaa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800beae:	677b      	str	r3, [r7, #116]	; 0x74
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	461a      	mov	r2, r3
 800beb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800beb8:	637b      	str	r3, [r7, #52]	; 0x34
 800beba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bebc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bebe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bec0:	e841 2300 	strex	r3, r2, [r1]
 800bec4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d1e6      	bne.n	800be9a <UART_Start_Receive_IT+0x1ce>
 800becc:	e018      	b.n	800bf00 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bed4:	697b      	ldr	r3, [r7, #20]
 800bed6:	e853 3f00 	ldrex	r3, [r3]
 800beda:	613b      	str	r3, [r7, #16]
   return(result);
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	f043 0320 	orr.w	r3, r3, #32
 800bee2:	67bb      	str	r3, [r7, #120]	; 0x78
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	461a      	mov	r2, r3
 800beea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800beec:	623b      	str	r3, [r7, #32]
 800beee:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bef0:	69f9      	ldr	r1, [r7, #28]
 800bef2:	6a3a      	ldr	r2, [r7, #32]
 800bef4:	e841 2300 	strex	r3, r2, [r1]
 800bef8:	61bb      	str	r3, [r7, #24]
   return(result);
 800befa:	69bb      	ldr	r3, [r7, #24]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d1e6      	bne.n	800bece <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 800bf00:	2300      	movs	r3, #0
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	378c      	adds	r7, #140	; 0x8c
 800bf06:	46bd      	mov	sp, r7
 800bf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0c:	4770      	bx	lr
 800bf0e:	bf00      	nop
 800bf10:	0800c629 	.word	0x0800c629
 800bf14:	0800c331 	.word	0x0800c331
 800bf18:	0800c1cf 	.word	0x0800c1cf
 800bf1c:	0800c06f 	.word	0x0800c06f

0800bf20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bf20:	b480      	push	{r7}
 800bf22:	b095      	sub	sp, #84	; 0x54
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf30:	e853 3f00 	ldrex	r3, [r3]
 800bf34:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bf36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	461a      	mov	r2, r3
 800bf44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf46:	643b      	str	r3, [r7, #64]	; 0x40
 800bf48:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bf4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bf4e:	e841 2300 	strex	r3, r2, [r1]
 800bf52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bf54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d1e6      	bne.n	800bf28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	3308      	adds	r3, #8
 800bf60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf62:	6a3b      	ldr	r3, [r7, #32]
 800bf64:	e853 3f00 	ldrex	r3, [r3]
 800bf68:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf6a:	69fb      	ldr	r3, [r7, #28]
 800bf6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bf70:	f023 0301 	bic.w	r3, r3, #1
 800bf74:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	3308      	adds	r3, #8
 800bf7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bf80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf86:	e841 2300 	strex	r3, r2, [r1]
 800bf8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d1e3      	bne.n	800bf5a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf96:	2b01      	cmp	r3, #1
 800bf98:	d118      	bne.n	800bfcc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	e853 3f00 	ldrex	r3, [r3]
 800bfa6:	60bb      	str	r3, [r7, #8]
   return(result);
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	f023 0310 	bic.w	r3, r3, #16
 800bfae:	647b      	str	r3, [r7, #68]	; 0x44
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	461a      	mov	r2, r3
 800bfb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bfb8:	61bb      	str	r3, [r7, #24]
 800bfba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfbc:	6979      	ldr	r1, [r7, #20]
 800bfbe:	69ba      	ldr	r2, [r7, #24]
 800bfc0:	e841 2300 	strex	r3, r2, [r1]
 800bfc4:	613b      	str	r3, [r7, #16]
   return(result);
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d1e6      	bne.n	800bf9a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2220      	movs	r2, #32
 800bfd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2200      	movs	r2, #0
 800bfde:	671a      	str	r2, [r3, #112]	; 0x70
}
 800bfe0:	bf00      	nop
 800bfe2:	3754      	adds	r7, #84	; 0x54
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfea:	4770      	bx	lr

0800bfec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b084      	sub	sp, #16
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bff8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	2200      	movs	r2, #0
 800bffe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	2200      	movs	r2, #0
 800c006:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c00a:	68f8      	ldr	r0, [r7, #12]
 800c00c:	f7ff f996 	bl	800b33c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c010:	bf00      	nop
 800c012:	3710      	adds	r7, #16
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}

0800c018 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b088      	sub	sp, #32
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	e853 3f00 	ldrex	r3, [r3]
 800c02c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c034:	61fb      	str	r3, [r7, #28]
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	461a      	mov	r2, r3
 800c03c:	69fb      	ldr	r3, [r7, #28]
 800c03e:	61bb      	str	r3, [r7, #24]
 800c040:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c042:	6979      	ldr	r1, [r7, #20]
 800c044:	69ba      	ldr	r2, [r7, #24]
 800c046:	e841 2300 	strex	r3, r2, [r1]
 800c04a:	613b      	str	r3, [r7, #16]
   return(result);
 800c04c:	693b      	ldr	r3, [r7, #16]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d1e6      	bne.n	800c020 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2220      	movs	r2, #32
 800c056:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2200      	movs	r2, #0
 800c05e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f7ff f957 	bl	800b314 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c066:	bf00      	nop
 800c068:	3720      	adds	r7, #32
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}

0800c06e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c06e:	b580      	push	{r7, lr}
 800c070:	b096      	sub	sp, #88	; 0x58
 800c072:	af00      	add	r7, sp, #0
 800c074:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c07c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c086:	2b22      	cmp	r3, #34	; 0x22
 800c088:	f040 8095 	bne.w	800c1b6 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c092:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c096:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800c09a:	b2d9      	uxtb	r1, r3
 800c09c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c0a0:	b2da      	uxtb	r2, r3
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0a6:	400a      	ands	r2, r1
 800c0a8:	b2d2      	uxtb	r2, r2
 800c0aa:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0b0:	1c5a      	adds	r2, r3, #1
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c0bc:	b29b      	uxth	r3, r3
 800c0be:	3b01      	subs	r3, #1
 800c0c0:	b29a      	uxth	r2, r3
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c0ce:	b29b      	uxth	r3, r3
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d178      	bne.n	800c1c6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0dc:	e853 3f00 	ldrex	r3, [r3]
 800c0e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c0e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c0e8:	653b      	str	r3, [r7, #80]	; 0x50
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	461a      	mov	r2, r3
 800c0f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0f2:	647b      	str	r3, [r7, #68]	; 0x44
 800c0f4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c0f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c0fa:	e841 2300 	strex	r3, r2, [r1]
 800c0fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c102:	2b00      	cmp	r3, #0
 800c104:	d1e6      	bne.n	800c0d4 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	3308      	adds	r3, #8
 800c10c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c110:	e853 3f00 	ldrex	r3, [r3]
 800c114:	623b      	str	r3, [r7, #32]
   return(result);
 800c116:	6a3b      	ldr	r3, [r7, #32]
 800c118:	f023 0301 	bic.w	r3, r3, #1
 800c11c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	3308      	adds	r3, #8
 800c124:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c126:	633a      	str	r2, [r7, #48]	; 0x30
 800c128:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c12a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c12c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c12e:	e841 2300 	strex	r3, r2, [r1]
 800c132:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c136:	2b00      	cmp	r3, #0
 800c138:	d1e5      	bne.n	800c106 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2220      	movs	r2, #32
 800c13e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	2200      	movs	r2, #0
 800c146:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c14c:	2b01      	cmp	r3, #1
 800c14e:	d12e      	bne.n	800c1ae <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2200      	movs	r2, #0
 800c154:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c15c:	693b      	ldr	r3, [r7, #16]
 800c15e:	e853 3f00 	ldrex	r3, [r3]
 800c162:	60fb      	str	r3, [r7, #12]
   return(result);
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	f023 0310 	bic.w	r3, r3, #16
 800c16a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	461a      	mov	r2, r3
 800c172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c174:	61fb      	str	r3, [r7, #28]
 800c176:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c178:	69b9      	ldr	r1, [r7, #24]
 800c17a:	69fa      	ldr	r2, [r7, #28]
 800c17c:	e841 2300 	strex	r3, r2, [r1]
 800c180:	617b      	str	r3, [r7, #20]
   return(result);
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d1e6      	bne.n	800c156 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	69db      	ldr	r3, [r3, #28]
 800c18e:	f003 0310 	and.w	r3, r3, #16
 800c192:	2b10      	cmp	r3, #16
 800c194:	d103      	bne.n	800c19e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	2210      	movs	r2, #16
 800c19c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c1a4:	4619      	mov	r1, r3
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f7ff f8d2 	bl	800b350 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c1ac:	e00b      	b.n	800c1c6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f7ff f8ba 	bl	800b328 <HAL_UART_RxCpltCallback>
}
 800c1b4:	e007      	b.n	800c1c6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	699a      	ldr	r2, [r3, #24]
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	f042 0208 	orr.w	r2, r2, #8
 800c1c4:	619a      	str	r2, [r3, #24]
}
 800c1c6:	bf00      	nop
 800c1c8:	3758      	adds	r7, #88	; 0x58
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}

0800c1ce <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c1ce:	b580      	push	{r7, lr}
 800c1d0:	b096      	sub	sp, #88	; 0x58
 800c1d2:	af00      	add	r7, sp, #0
 800c1d4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c1dc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1e6:	2b22      	cmp	r3, #34	; 0x22
 800c1e8:	f040 8095 	bne.w	800c316 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1f2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1fa:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800c1fc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800c200:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c204:	4013      	ands	r3, r2
 800c206:	b29a      	uxth	r2, r3
 800c208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c20a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c210:	1c9a      	adds	r2, r3, #2
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c21c:	b29b      	uxth	r3, r3
 800c21e:	3b01      	subs	r3, #1
 800c220:	b29a      	uxth	r2, r3
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c22e:	b29b      	uxth	r3, r3
 800c230:	2b00      	cmp	r3, #0
 800c232:	d178      	bne.n	800c326 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c23a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c23c:	e853 3f00 	ldrex	r3, [r3]
 800c240:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c244:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c248:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	461a      	mov	r2, r3
 800c250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c252:	643b      	str	r3, [r7, #64]	; 0x40
 800c254:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c256:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c258:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c25a:	e841 2300 	strex	r3, r2, [r1]
 800c25e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c262:	2b00      	cmp	r3, #0
 800c264:	d1e6      	bne.n	800c234 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	3308      	adds	r3, #8
 800c26c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c26e:	6a3b      	ldr	r3, [r7, #32]
 800c270:	e853 3f00 	ldrex	r3, [r3]
 800c274:	61fb      	str	r3, [r7, #28]
   return(result);
 800c276:	69fb      	ldr	r3, [r7, #28]
 800c278:	f023 0301 	bic.w	r3, r3, #1
 800c27c:	64bb      	str	r3, [r7, #72]	; 0x48
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	3308      	adds	r3, #8
 800c284:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c286:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c288:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c28a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c28c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c28e:	e841 2300 	strex	r3, r2, [r1]
 800c292:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c296:	2b00      	cmp	r3, #0
 800c298:	d1e5      	bne.n	800c266 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2220      	movs	r2, #32
 800c29e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2ac:	2b01      	cmp	r3, #1
 800c2ae:	d12e      	bne.n	800c30e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	e853 3f00 	ldrex	r3, [r3]
 800c2c2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	f023 0310 	bic.w	r3, r3, #16
 800c2ca:	647b      	str	r3, [r7, #68]	; 0x44
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	461a      	mov	r2, r3
 800c2d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2d4:	61bb      	str	r3, [r7, #24]
 800c2d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2d8:	6979      	ldr	r1, [r7, #20]
 800c2da:	69ba      	ldr	r2, [r7, #24]
 800c2dc:	e841 2300 	strex	r3, r2, [r1]
 800c2e0:	613b      	str	r3, [r7, #16]
   return(result);
 800c2e2:	693b      	ldr	r3, [r7, #16]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d1e6      	bne.n	800c2b6 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	69db      	ldr	r3, [r3, #28]
 800c2ee:	f003 0310 	and.w	r3, r3, #16
 800c2f2:	2b10      	cmp	r3, #16
 800c2f4:	d103      	bne.n	800c2fe <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	2210      	movs	r2, #16
 800c2fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c304:	4619      	mov	r1, r3
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f7ff f822 	bl	800b350 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c30c:	e00b      	b.n	800c326 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f7ff f80a 	bl	800b328 <HAL_UART_RxCpltCallback>
}
 800c314:	e007      	b.n	800c326 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	699a      	ldr	r2, [r3, #24]
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	f042 0208 	orr.w	r2, r2, #8
 800c324:	619a      	str	r2, [r3, #24]
}
 800c326:	bf00      	nop
 800c328:	3758      	adds	r7, #88	; 0x58
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}
	...

0800c330 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b0a6      	sub	sp, #152	; 0x98
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c33e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	69db      	ldr	r3, [r3, #28]
 800c348:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	689b      	ldr	r3, [r3, #8]
 800c35c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c366:	2b22      	cmp	r3, #34	; 0x22
 800c368:	f040 814f 	bne.w	800c60a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c372:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c376:	e0f6      	b.n	800c566 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c37e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c382:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800c386:	b2d9      	uxtb	r1, r3
 800c388:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800c38c:	b2da      	uxtb	r2, r3
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c392:	400a      	ands	r2, r1
 800c394:	b2d2      	uxtb	r2, r2
 800c396:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c39c:	1c5a      	adds	r2, r3, #1
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c3a8:	b29b      	uxth	r3, r3
 800c3aa:	3b01      	subs	r3, #1
 800c3ac:	b29a      	uxth	r2, r3
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	69db      	ldr	r3, [r3, #28]
 800c3ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c3be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c3c2:	f003 0307 	and.w	r3, r3, #7
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d053      	beq.n	800c472 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c3ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c3ce:	f003 0301 	and.w	r3, r3, #1
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d011      	beq.n	800c3fa <UART_RxISR_8BIT_FIFOEN+0xca>
 800c3d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c3da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d00b      	beq.n	800c3fa <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	2201      	movs	r2, #1
 800c3e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3f0:	f043 0201 	orr.w	r2, r3, #1
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c3fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c3fe:	f003 0302 	and.w	r3, r3, #2
 800c402:	2b00      	cmp	r3, #0
 800c404:	d011      	beq.n	800c42a <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c406:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c40a:	f003 0301 	and.w	r3, r3, #1
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d00b      	beq.n	800c42a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	2202      	movs	r2, #2
 800c418:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c420:	f043 0204 	orr.w	r2, r3, #4
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c42a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c42e:	f003 0304 	and.w	r3, r3, #4
 800c432:	2b00      	cmp	r3, #0
 800c434:	d011      	beq.n	800c45a <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c436:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c43a:	f003 0301 	and.w	r3, r3, #1
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d00b      	beq.n	800c45a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	2204      	movs	r2, #4
 800c448:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c450:	f043 0202 	orr.w	r2, r3, #2
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c460:	2b00      	cmp	r3, #0
 800c462:	d006      	beq.n	800c472 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f7fe ff69 	bl	800b33c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2200      	movs	r2, #0
 800c46e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c478:	b29b      	uxth	r3, r3
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d173      	bne.n	800c566 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c484:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c486:	e853 3f00 	ldrex	r3, [r3]
 800c48a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800c48c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c48e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c492:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	461a      	mov	r2, r3
 800c49c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c4a0:	66bb      	str	r3, [r7, #104]	; 0x68
 800c4a2:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4a4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c4a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c4a8:	e841 2300 	strex	r3, r2, [r1]
 800c4ac:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c4ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d1e4      	bne.n	800c47e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	3308      	adds	r3, #8
 800c4ba:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4be:	e853 3f00 	ldrex	r3, [r3]
 800c4c2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c4c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c4c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c4ca:	f023 0301 	bic.w	r3, r3, #1
 800c4ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	3308      	adds	r3, #8
 800c4d6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c4d8:	657a      	str	r2, [r7, #84]	; 0x54
 800c4da:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4dc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c4de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c4e0:	e841 2300 	strex	r3, r2, [r1]
 800c4e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c4e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d1e3      	bne.n	800c4b4 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2220      	movs	r2, #32
 800c4f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4fe:	2b01      	cmp	r3, #1
 800c500:	d12e      	bne.n	800c560 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2200      	movs	r2, #0
 800c506:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c50e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c510:	e853 3f00 	ldrex	r3, [r3]
 800c514:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c518:	f023 0310 	bic.w	r3, r3, #16
 800c51c:	67bb      	str	r3, [r7, #120]	; 0x78
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	461a      	mov	r2, r3
 800c524:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c526:	643b      	str	r3, [r7, #64]	; 0x40
 800c528:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c52a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c52c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c52e:	e841 2300 	strex	r3, r2, [r1]
 800c532:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c536:	2b00      	cmp	r3, #0
 800c538:	d1e6      	bne.n	800c508 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	69db      	ldr	r3, [r3, #28]
 800c540:	f003 0310 	and.w	r3, r3, #16
 800c544:	2b10      	cmp	r3, #16
 800c546:	d103      	bne.n	800c550 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	2210      	movs	r2, #16
 800c54e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c556:	4619      	mov	r1, r3
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f7fe fef9 	bl	800b350 <HAL_UARTEx_RxEventCallback>
 800c55e:	e002      	b.n	800c566 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c560:	6878      	ldr	r0, [r7, #4]
 800c562:	f7fe fee1 	bl	800b328 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c566:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d006      	beq.n	800c57c <UART_RxISR_8BIT_FIFOEN+0x24c>
 800c56e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c572:	f003 0320 	and.w	r3, r3, #32
 800c576:	2b00      	cmp	r3, #0
 800c578:	f47f aefe 	bne.w	800c378 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c582:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c586:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d045      	beq.n	800c61a <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c594:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c598:	429a      	cmp	r2, r3
 800c59a:	d23e      	bcs.n	800c61a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	3308      	adds	r3, #8
 800c5a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5a4:	6a3b      	ldr	r3, [r7, #32]
 800c5a6:	e853 3f00 	ldrex	r3, [r3]
 800c5aa:	61fb      	str	r3, [r7, #28]
   return(result);
 800c5ac:	69fb      	ldr	r3, [r7, #28]
 800c5ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c5b2:	673b      	str	r3, [r7, #112]	; 0x70
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	3308      	adds	r3, #8
 800c5ba:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c5bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c5be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c5c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c5c4:	e841 2300 	strex	r3, r2, [r1]
 800c5c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d1e5      	bne.n	800c59c <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	4a14      	ldr	r2, [pc, #80]	; (800c624 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800c5d4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	e853 3f00 	ldrex	r3, [r3]
 800c5e2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	f043 0320 	orr.w	r3, r3, #32
 800c5ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	461a      	mov	r2, r3
 800c5f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5f4:	61bb      	str	r3, [r7, #24]
 800c5f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5f8:	6979      	ldr	r1, [r7, #20]
 800c5fa:	69ba      	ldr	r2, [r7, #24]
 800c5fc:	e841 2300 	strex	r3, r2, [r1]
 800c600:	613b      	str	r3, [r7, #16]
   return(result);
 800c602:	693b      	ldr	r3, [r7, #16]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d1e6      	bne.n	800c5d6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c608:	e007      	b.n	800c61a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	699a      	ldr	r2, [r3, #24]
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	f042 0208 	orr.w	r2, r2, #8
 800c618:	619a      	str	r2, [r3, #24]
}
 800c61a:	bf00      	nop
 800c61c:	3798      	adds	r7, #152	; 0x98
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}
 800c622:	bf00      	nop
 800c624:	0800c06f 	.word	0x0800c06f

0800c628 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b0a8      	sub	sp, #160	; 0xa0
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c636:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	69db      	ldr	r3, [r3, #28]
 800c640:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	689b      	ldr	r3, [r3, #8]
 800c654:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c65e:	2b22      	cmp	r3, #34	; 0x22
 800c660:	f040 8153 	bne.w	800c90a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c66a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c66e:	e0fa      	b.n	800c866 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c676:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c67e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800c682:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800c686:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800c68a:	4013      	ands	r3, r2
 800c68c:	b29a      	uxth	r2, r3
 800c68e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c692:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c698:	1c9a      	adds	r2, r3, #2
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c6a4:	b29b      	uxth	r3, r3
 800c6a6:	3b01      	subs	r3, #1
 800c6a8:	b29a      	uxth	r2, r3
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	69db      	ldr	r3, [r3, #28]
 800c6b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c6ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c6be:	f003 0307 	and.w	r3, r3, #7
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d053      	beq.n	800c76e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c6c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c6ca:	f003 0301 	and.w	r3, r3, #1
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d011      	beq.n	800c6f6 <UART_RxISR_16BIT_FIFOEN+0xce>
 800c6d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c6d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d00b      	beq.n	800c6f6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	2201      	movs	r2, #1
 800c6e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c6ec:	f043 0201 	orr.w	r2, r3, #1
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c6f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c6fa:	f003 0302 	and.w	r3, r3, #2
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d011      	beq.n	800c726 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c702:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c706:	f003 0301 	and.w	r3, r3, #1
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d00b      	beq.n	800c726 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	2202      	movs	r2, #2
 800c714:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c71c:	f043 0204 	orr.w	r2, r3, #4
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c726:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c72a:	f003 0304 	and.w	r3, r3, #4
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d011      	beq.n	800c756 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c732:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c736:	f003 0301 	and.w	r3, r3, #1
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d00b      	beq.n	800c756 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	2204      	movs	r2, #4
 800c744:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c74c:	f043 0202 	orr.w	r2, r3, #2
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d006      	beq.n	800c76e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c760:	6878      	ldr	r0, [r7, #4]
 800c762:	f7fe fdeb 	bl	800b33c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2200      	movs	r2, #0
 800c76a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c774:	b29b      	uxth	r3, r3
 800c776:	2b00      	cmp	r3, #0
 800c778:	d175      	bne.n	800c866 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c780:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c782:	e853 3f00 	ldrex	r3, [r3]
 800c786:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c788:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c78a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c78e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	461a      	mov	r2, r3
 800c798:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c79c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c79e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7a0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c7a2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c7a4:	e841 2300 	strex	r3, r2, [r1]
 800c7a8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c7aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d1e4      	bne.n	800c77a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	3308      	adds	r3, #8
 800c7b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7ba:	e853 3f00 	ldrex	r3, [r3]
 800c7be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c7c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c7c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c7c6:	f023 0301 	bic.w	r3, r3, #1
 800c7ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	3308      	adds	r3, #8
 800c7d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c7d8:	65ba      	str	r2, [r7, #88]	; 0x58
 800c7da:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c7de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c7e0:	e841 2300 	strex	r3, r2, [r1]
 800c7e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c7e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d1e1      	bne.n	800c7b0 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2220      	movs	r2, #32
 800c7f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7fe:	2b01      	cmp	r3, #1
 800c800:	d12e      	bne.n	800c860 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2200      	movs	r2, #0
 800c806:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c810:	e853 3f00 	ldrex	r3, [r3]
 800c814:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c818:	f023 0310 	bic.w	r3, r3, #16
 800c81c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	461a      	mov	r2, r3
 800c824:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c826:	647b      	str	r3, [r7, #68]	; 0x44
 800c828:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c82a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c82c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c82e:	e841 2300 	strex	r3, r2, [r1]
 800c832:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c836:	2b00      	cmp	r3, #0
 800c838:	d1e6      	bne.n	800c808 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	69db      	ldr	r3, [r3, #28]
 800c840:	f003 0310 	and.w	r3, r3, #16
 800c844:	2b10      	cmp	r3, #16
 800c846:	d103      	bne.n	800c850 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	2210      	movs	r2, #16
 800c84e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c856:	4619      	mov	r1, r3
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f7fe fd79 	bl	800b350 <HAL_UARTEx_RxEventCallback>
 800c85e:	e002      	b.n	800c866 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c860:	6878      	ldr	r0, [r7, #4]
 800c862:	f7fe fd61 	bl	800b328 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c866:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d006      	beq.n	800c87c <UART_RxISR_16BIT_FIFOEN+0x254>
 800c86e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c872:	f003 0320 	and.w	r3, r3, #32
 800c876:	2b00      	cmp	r3, #0
 800c878:	f47f aefa 	bne.w	800c670 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c882:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c886:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d045      	beq.n	800c91a <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c894:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800c898:	429a      	cmp	r2, r3
 800c89a:	d23e      	bcs.n	800c91a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	3308      	adds	r3, #8
 800c8a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a6:	e853 3f00 	ldrex	r3, [r3]
 800c8aa:	623b      	str	r3, [r7, #32]
   return(result);
 800c8ac:	6a3b      	ldr	r3, [r7, #32]
 800c8ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c8b2:	677b      	str	r3, [r7, #116]	; 0x74
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	3308      	adds	r3, #8
 800c8ba:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c8bc:	633a      	str	r2, [r7, #48]	; 0x30
 800c8be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c8c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8c4:	e841 2300 	strex	r3, r2, [r1]
 800c8c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d1e5      	bne.n	800c89c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	4a14      	ldr	r2, [pc, #80]	; (800c924 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800c8d4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8dc:	693b      	ldr	r3, [r7, #16]
 800c8de:	e853 3f00 	ldrex	r3, [r3]
 800c8e2:	60fb      	str	r3, [r7, #12]
   return(result);
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	f043 0320 	orr.w	r3, r3, #32
 800c8ea:	673b      	str	r3, [r7, #112]	; 0x70
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	461a      	mov	r2, r3
 800c8f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c8f4:	61fb      	str	r3, [r7, #28]
 800c8f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8f8:	69b9      	ldr	r1, [r7, #24]
 800c8fa:	69fa      	ldr	r2, [r7, #28]
 800c8fc:	e841 2300 	strex	r3, r2, [r1]
 800c900:	617b      	str	r3, [r7, #20]
   return(result);
 800c902:	697b      	ldr	r3, [r7, #20]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d1e6      	bne.n	800c8d6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c908:	e007      	b.n	800c91a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	699a      	ldr	r2, [r3, #24]
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	f042 0208 	orr.w	r2, r2, #8
 800c918:	619a      	str	r2, [r3, #24]
}
 800c91a:	bf00      	nop
 800c91c:	37a0      	adds	r7, #160	; 0xa0
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}
 800c922:	bf00      	nop
 800c924:	0800c1cf 	.word	0x0800c1cf

0800c928 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c928:	b480      	push	{r7}
 800c92a:	b083      	sub	sp, #12
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c930:	bf00      	nop
 800c932:	370c      	adds	r7, #12
 800c934:	46bd      	mov	sp, r7
 800c936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93a:	4770      	bx	lr

0800c93c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c93c:	b480      	push	{r7}
 800c93e:	b083      	sub	sp, #12
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c944:	bf00      	nop
 800c946:	370c      	adds	r7, #12
 800c948:	46bd      	mov	sp, r7
 800c94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94e:	4770      	bx	lr

0800c950 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c950:	b480      	push	{r7}
 800c952:	b083      	sub	sp, #12
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c958:	bf00      	nop
 800c95a:	370c      	adds	r7, #12
 800c95c:	46bd      	mov	sp, r7
 800c95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c962:	4770      	bx	lr

0800c964 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c964:	b480      	push	{r7}
 800c966:	b085      	sub	sp, #20
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c972:	2b01      	cmp	r3, #1
 800c974:	d101      	bne.n	800c97a <HAL_UARTEx_DisableFifoMode+0x16>
 800c976:	2302      	movs	r3, #2
 800c978:	e027      	b.n	800c9ca <HAL_UARTEx_DisableFifoMode+0x66>
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2201      	movs	r2, #1
 800c97e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2224      	movs	r2, #36	; 0x24
 800c986:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	681a      	ldr	r2, [r3, #0]
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f022 0201 	bic.w	r2, r2, #1
 800c9a0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c9a8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	68fa      	ldr	r2, [r7, #12]
 800c9b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2220      	movs	r2, #32
 800c9bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c9c8:	2300      	movs	r3, #0
}
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	3714      	adds	r7, #20
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d4:	4770      	bx	lr

0800c9d6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c9d6:	b580      	push	{r7, lr}
 800c9d8:	b084      	sub	sp, #16
 800c9da:	af00      	add	r7, sp, #0
 800c9dc:	6078      	str	r0, [r7, #4]
 800c9de:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c9e6:	2b01      	cmp	r3, #1
 800c9e8:	d101      	bne.n	800c9ee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c9ea:	2302      	movs	r3, #2
 800c9ec:	e02d      	b.n	800ca4a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2201      	movs	r2, #1
 800c9f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2224      	movs	r2, #36	; 0x24
 800c9fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	681a      	ldr	r2, [r3, #0]
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	f022 0201 	bic.w	r2, r2, #1
 800ca14:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	689b      	ldr	r3, [r3, #8]
 800ca1c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	683a      	ldr	r2, [r7, #0]
 800ca26:	430a      	orrs	r2, r1
 800ca28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ca2a:	6878      	ldr	r0, [r7, #4]
 800ca2c:	f000 f850 	bl	800cad0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	68fa      	ldr	r2, [r7, #12]
 800ca36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2220      	movs	r2, #32
 800ca3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2200      	movs	r2, #0
 800ca44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ca48:	2300      	movs	r3, #0
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	3710      	adds	r7, #16
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}

0800ca52 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ca52:	b580      	push	{r7, lr}
 800ca54:	b084      	sub	sp, #16
 800ca56:	af00      	add	r7, sp, #0
 800ca58:	6078      	str	r0, [r7, #4]
 800ca5a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ca62:	2b01      	cmp	r3, #1
 800ca64:	d101      	bne.n	800ca6a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ca66:	2302      	movs	r3, #2
 800ca68:	e02d      	b.n	800cac6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2201      	movs	r2, #1
 800ca6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	2224      	movs	r2, #36	; 0x24
 800ca76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	681a      	ldr	r2, [r3, #0]
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	f022 0201 	bic.w	r2, r2, #1
 800ca90:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	689b      	ldr	r3, [r3, #8]
 800ca98:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	683a      	ldr	r2, [r7, #0]
 800caa2:	430a      	orrs	r2, r1
 800caa4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f000 f812 	bl	800cad0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	68fa      	ldr	r2, [r7, #12]
 800cab2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2220      	movs	r2, #32
 800cab8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2200      	movs	r2, #0
 800cac0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cac4:	2300      	movs	r3, #0
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	3710      	adds	r7, #16
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}
	...

0800cad0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cad0:	b480      	push	{r7}
 800cad2:	b085      	sub	sp, #20
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d108      	bne.n	800caf2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2201      	movs	r2, #1
 800cae4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2201      	movs	r2, #1
 800caec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800caf0:	e031      	b.n	800cb56 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800caf2:	2308      	movs	r3, #8
 800caf4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800caf6:	2308      	movs	r3, #8
 800caf8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	689b      	ldr	r3, [r3, #8]
 800cb00:	0e5b      	lsrs	r3, r3, #25
 800cb02:	b2db      	uxtb	r3, r3
 800cb04:	f003 0307 	and.w	r3, r3, #7
 800cb08:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	689b      	ldr	r3, [r3, #8]
 800cb10:	0f5b      	lsrs	r3, r3, #29
 800cb12:	b2db      	uxtb	r3, r3
 800cb14:	f003 0307 	and.w	r3, r3, #7
 800cb18:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cb1a:	7bbb      	ldrb	r3, [r7, #14]
 800cb1c:	7b3a      	ldrb	r2, [r7, #12]
 800cb1e:	4911      	ldr	r1, [pc, #68]	; (800cb64 <UARTEx_SetNbDataToProcess+0x94>)
 800cb20:	5c8a      	ldrb	r2, [r1, r2]
 800cb22:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cb26:	7b3a      	ldrb	r2, [r7, #12]
 800cb28:	490f      	ldr	r1, [pc, #60]	; (800cb68 <UARTEx_SetNbDataToProcess+0x98>)
 800cb2a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cb2c:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb30:	b29a      	uxth	r2, r3
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cb38:	7bfb      	ldrb	r3, [r7, #15]
 800cb3a:	7b7a      	ldrb	r2, [r7, #13]
 800cb3c:	4909      	ldr	r1, [pc, #36]	; (800cb64 <UARTEx_SetNbDataToProcess+0x94>)
 800cb3e:	5c8a      	ldrb	r2, [r1, r2]
 800cb40:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cb44:	7b7a      	ldrb	r2, [r7, #13]
 800cb46:	4908      	ldr	r1, [pc, #32]	; (800cb68 <UARTEx_SetNbDataToProcess+0x98>)
 800cb48:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cb4a:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb4e:	b29a      	uxth	r2, r3
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cb56:	bf00      	nop
 800cb58:	3714      	adds	r7, #20
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb60:	4770      	bx	lr
 800cb62:	bf00      	nop
 800cb64:	08014760 	.word	0x08014760
 800cb68:	08014768 	.word	0x08014768

0800cb6c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800cb6c:	b480      	push	{r7}
 800cb6e:	b085      	sub	sp, #20
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2200      	movs	r2, #0
 800cb78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800cb7c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800cb80:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	b29a      	uxth	r2, r3
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800cb8c:	2300      	movs	r3, #0
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	3714      	adds	r7, #20
 800cb92:	46bd      	mov	sp, r7
 800cb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb98:	4770      	bx	lr

0800cb9a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800cb9a:	b480      	push	{r7}
 800cb9c:	b085      	sub	sp, #20
 800cb9e:	af00      	add	r7, sp, #0
 800cba0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800cba2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800cba6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800cbae:	b29a      	uxth	r2, r3
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	b29b      	uxth	r3, r3
 800cbb4:	43db      	mvns	r3, r3
 800cbb6:	b29b      	uxth	r3, r3
 800cbb8:	4013      	ands	r3, r2
 800cbba:	b29a      	uxth	r2, r3
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800cbc2:	2300      	movs	r3, #0
}
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	3714      	adds	r7, #20
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbce:	4770      	bx	lr

0800cbd0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800cbd0:	b084      	sub	sp, #16
 800cbd2:	b480      	push	{r7}
 800cbd4:	b083      	sub	sp, #12
 800cbd6:	af00      	add	r7, sp, #0
 800cbd8:	6078      	str	r0, [r7, #4]
 800cbda:	f107 0014 	add.w	r0, r7, #20
 800cbde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2201      	movs	r2, #1
 800cbe6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2200      	movs	r2, #0
 800cbee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800cc02:	2300      	movs	r3, #0
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	370c      	adds	r7, #12
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0e:	b004      	add	sp, #16
 800cc10:	4770      	bx	lr
	...

0800cc14 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cc14:	b480      	push	{r7}
 800cc16:	b09d      	sub	sp, #116	; 0x74
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
 800cc1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800cc1e:	2300      	movs	r3, #0
 800cc20:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800cc24:	687a      	ldr	r2, [r7, #4]
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	781b      	ldrb	r3, [r3, #0]
 800cc2a:	009b      	lsls	r3, r3, #2
 800cc2c:	4413      	add	r3, r2
 800cc2e:	881b      	ldrh	r3, [r3, #0]
 800cc30:	b29b      	uxth	r3, r3
 800cc32:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800cc36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc3a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	78db      	ldrb	r3, [r3, #3]
 800cc42:	2b03      	cmp	r3, #3
 800cc44:	d81f      	bhi.n	800cc86 <USB_ActivateEndpoint+0x72>
 800cc46:	a201      	add	r2, pc, #4	; (adr r2, 800cc4c <USB_ActivateEndpoint+0x38>)
 800cc48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc4c:	0800cc5d 	.word	0x0800cc5d
 800cc50:	0800cc79 	.word	0x0800cc79
 800cc54:	0800cc8f 	.word	0x0800cc8f
 800cc58:	0800cc6b 	.word	0x0800cc6b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800cc5c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800cc60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cc64:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800cc68:	e012      	b.n	800cc90 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800cc6a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800cc6e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800cc72:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800cc76:	e00b      	b.n	800cc90 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800cc78:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800cc7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800cc80:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800cc84:	e004      	b.n	800cc90 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800cc86:	2301      	movs	r3, #1
 800cc88:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800cc8c:	e000      	b.n	800cc90 <USB_ActivateEndpoint+0x7c>
      break;
 800cc8e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800cc90:	687a      	ldr	r2, [r7, #4]
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	781b      	ldrb	r3, [r3, #0]
 800cc96:	009b      	lsls	r3, r3, #2
 800cc98:	441a      	add	r2, r3
 800cc9a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800cc9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cca2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cca6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ccaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ccae:	b29b      	uxth	r3, r3
 800ccb0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800ccb2:	687a      	ldr	r2, [r7, #4]
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	781b      	ldrb	r3, [r3, #0]
 800ccb8:	009b      	lsls	r3, r3, #2
 800ccba:	4413      	add	r3, r2
 800ccbc:	881b      	ldrh	r3, [r3, #0]
 800ccbe:	b29b      	uxth	r3, r3
 800ccc0:	b21b      	sxth	r3, r3
 800ccc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ccc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ccca:	b21a      	sxth	r2, r3
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	781b      	ldrb	r3, [r3, #0]
 800ccd0:	b21b      	sxth	r3, r3
 800ccd2:	4313      	orrs	r3, r2
 800ccd4:	b21b      	sxth	r3, r3
 800ccd6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800ccda:	687a      	ldr	r2, [r7, #4]
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	781b      	ldrb	r3, [r3, #0]
 800cce0:	009b      	lsls	r3, r3, #2
 800cce2:	441a      	add	r2, r3
 800cce4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800cce8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ccec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ccf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ccf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ccf8:	b29b      	uxth	r3, r3
 800ccfa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	7b1b      	ldrb	r3, [r3, #12]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	f040 8149 	bne.w	800cf98 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	785b      	ldrb	r3, [r3, #1]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	f000 8084 	beq.w	800ce18 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	61bb      	str	r3, [r7, #24]
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cd1a:	b29b      	uxth	r3, r3
 800cd1c:	461a      	mov	r2, r3
 800cd1e:	69bb      	ldr	r3, [r7, #24]
 800cd20:	4413      	add	r3, r2
 800cd22:	61bb      	str	r3, [r7, #24]
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	781b      	ldrb	r3, [r3, #0]
 800cd28:	00da      	lsls	r2, r3, #3
 800cd2a:	69bb      	ldr	r3, [r7, #24]
 800cd2c:	4413      	add	r3, r2
 800cd2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cd32:	617b      	str	r3, [r7, #20]
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	88db      	ldrh	r3, [r3, #6]
 800cd38:	085b      	lsrs	r3, r3, #1
 800cd3a:	b29b      	uxth	r3, r3
 800cd3c:	005b      	lsls	r3, r3, #1
 800cd3e:	b29a      	uxth	r2, r3
 800cd40:	697b      	ldr	r3, [r7, #20]
 800cd42:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cd44:	687a      	ldr	r2, [r7, #4]
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	781b      	ldrb	r3, [r3, #0]
 800cd4a:	009b      	lsls	r3, r3, #2
 800cd4c:	4413      	add	r3, r2
 800cd4e:	881b      	ldrh	r3, [r3, #0]
 800cd50:	827b      	strh	r3, [r7, #18]
 800cd52:	8a7b      	ldrh	r3, [r7, #18]
 800cd54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d01b      	beq.n	800cd94 <USB_ActivateEndpoint+0x180>
 800cd5c:	687a      	ldr	r2, [r7, #4]
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	781b      	ldrb	r3, [r3, #0]
 800cd62:	009b      	lsls	r3, r3, #2
 800cd64:	4413      	add	r3, r2
 800cd66:	881b      	ldrh	r3, [r3, #0]
 800cd68:	b29b      	uxth	r3, r3
 800cd6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd72:	823b      	strh	r3, [r7, #16]
 800cd74:	687a      	ldr	r2, [r7, #4]
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	781b      	ldrb	r3, [r3, #0]
 800cd7a:	009b      	lsls	r3, r3, #2
 800cd7c:	441a      	add	r2, r3
 800cd7e:	8a3b      	ldrh	r3, [r7, #16]
 800cd80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cd84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cd88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cd8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cd90:	b29b      	uxth	r3, r3
 800cd92:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	78db      	ldrb	r3, [r3, #3]
 800cd98:	2b01      	cmp	r3, #1
 800cd9a:	d020      	beq.n	800cdde <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cd9c:	687a      	ldr	r2, [r7, #4]
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	781b      	ldrb	r3, [r3, #0]
 800cda2:	009b      	lsls	r3, r3, #2
 800cda4:	4413      	add	r3, r2
 800cda6:	881b      	ldrh	r3, [r3, #0]
 800cda8:	b29b      	uxth	r3, r3
 800cdaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cdae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cdb2:	81bb      	strh	r3, [r7, #12]
 800cdb4:	89bb      	ldrh	r3, [r7, #12]
 800cdb6:	f083 0320 	eor.w	r3, r3, #32
 800cdba:	81bb      	strh	r3, [r7, #12]
 800cdbc:	687a      	ldr	r2, [r7, #4]
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	781b      	ldrb	r3, [r3, #0]
 800cdc2:	009b      	lsls	r3, r3, #2
 800cdc4:	441a      	add	r2, r3
 800cdc6:	89bb      	ldrh	r3, [r7, #12]
 800cdc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cdcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cdd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cdd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdd8:	b29b      	uxth	r3, r3
 800cdda:	8013      	strh	r3, [r2, #0]
 800cddc:	e2a6      	b.n	800d32c <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cdde:	687a      	ldr	r2, [r7, #4]
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	781b      	ldrb	r3, [r3, #0]
 800cde4:	009b      	lsls	r3, r3, #2
 800cde6:	4413      	add	r3, r2
 800cde8:	881b      	ldrh	r3, [r3, #0]
 800cdea:	b29b      	uxth	r3, r3
 800cdec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cdf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cdf4:	81fb      	strh	r3, [r7, #14]
 800cdf6:	687a      	ldr	r2, [r7, #4]
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	781b      	ldrb	r3, [r3, #0]
 800cdfc:	009b      	lsls	r3, r3, #2
 800cdfe:	441a      	add	r2, r3
 800ce00:	89fb      	ldrh	r3, [r7, #14]
 800ce02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ce06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ce0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ce0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce12:	b29b      	uxth	r3, r3
 800ce14:	8013      	strh	r3, [r2, #0]
 800ce16:	e289      	b.n	800d32c <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	633b      	str	r3, [r7, #48]	; 0x30
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ce22:	b29b      	uxth	r3, r3
 800ce24:	461a      	mov	r2, r3
 800ce26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce28:	4413      	add	r3, r2
 800ce2a:	633b      	str	r3, [r7, #48]	; 0x30
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	781b      	ldrb	r3, [r3, #0]
 800ce30:	00da      	lsls	r2, r3, #3
 800ce32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce34:	4413      	add	r3, r2
 800ce36:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ce3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	88db      	ldrh	r3, [r3, #6]
 800ce40:	085b      	lsrs	r3, r3, #1
 800ce42:	b29b      	uxth	r3, r3
 800ce44:	005b      	lsls	r3, r3, #1
 800ce46:	b29a      	uxth	r2, r3
 800ce48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce4a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ce56:	b29b      	uxth	r3, r3
 800ce58:	461a      	mov	r2, r3
 800ce5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce5c:	4413      	add	r3, r2
 800ce5e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	781b      	ldrb	r3, [r3, #0]
 800ce64:	00da      	lsls	r2, r3, #3
 800ce66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce68:	4413      	add	r3, r2
 800ce6a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ce6e:	627b      	str	r3, [r7, #36]	; 0x24
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	691b      	ldr	r3, [r3, #16]
 800ce74:	2b3e      	cmp	r3, #62	; 0x3e
 800ce76:	d918      	bls.n	800ceaa <USB_ActivateEndpoint+0x296>
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	691b      	ldr	r3, [r3, #16]
 800ce7c:	095b      	lsrs	r3, r3, #5
 800ce7e:	66bb      	str	r3, [r7, #104]	; 0x68
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	691b      	ldr	r3, [r3, #16]
 800ce84:	f003 031f 	and.w	r3, r3, #31
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d102      	bne.n	800ce92 <USB_ActivateEndpoint+0x27e>
 800ce8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ce8e:	3b01      	subs	r3, #1
 800ce90:	66bb      	str	r3, [r7, #104]	; 0x68
 800ce92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ce94:	b29b      	uxth	r3, r3
 800ce96:	029b      	lsls	r3, r3, #10
 800ce98:	b29b      	uxth	r3, r3
 800ce9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ce9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cea2:	b29a      	uxth	r2, r3
 800cea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea6:	801a      	strh	r2, [r3, #0]
 800cea8:	e029      	b.n	800cefe <USB_ActivateEndpoint+0x2ea>
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	691b      	ldr	r3, [r3, #16]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d112      	bne.n	800ced8 <USB_ActivateEndpoint+0x2c4>
 800ceb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb4:	881b      	ldrh	r3, [r3, #0]
 800ceb6:	b29b      	uxth	r3, r3
 800ceb8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800cebc:	b29a      	uxth	r2, r3
 800cebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cec0:	801a      	strh	r2, [r3, #0]
 800cec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cec4:	881b      	ldrh	r3, [r3, #0]
 800cec6:	b29b      	uxth	r3, r3
 800cec8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cecc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ced0:	b29a      	uxth	r2, r3
 800ced2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced4:	801a      	strh	r2, [r3, #0]
 800ced6:	e012      	b.n	800cefe <USB_ActivateEndpoint+0x2ea>
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	691b      	ldr	r3, [r3, #16]
 800cedc:	085b      	lsrs	r3, r3, #1
 800cede:	66bb      	str	r3, [r7, #104]	; 0x68
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	691b      	ldr	r3, [r3, #16]
 800cee4:	f003 0301 	and.w	r3, r3, #1
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d002      	beq.n	800cef2 <USB_ActivateEndpoint+0x2de>
 800ceec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ceee:	3301      	adds	r3, #1
 800cef0:	66bb      	str	r3, [r7, #104]	; 0x68
 800cef2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cef4:	b29b      	uxth	r3, r3
 800cef6:	029b      	lsls	r3, r3, #10
 800cef8:	b29a      	uxth	r2, r3
 800cefa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cefc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cefe:	687a      	ldr	r2, [r7, #4]
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	781b      	ldrb	r3, [r3, #0]
 800cf04:	009b      	lsls	r3, r3, #2
 800cf06:	4413      	add	r3, r2
 800cf08:	881b      	ldrh	r3, [r3, #0]
 800cf0a:	847b      	strh	r3, [r7, #34]	; 0x22
 800cf0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cf0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d01b      	beq.n	800cf4e <USB_ActivateEndpoint+0x33a>
 800cf16:	687a      	ldr	r2, [r7, #4]
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	781b      	ldrb	r3, [r3, #0]
 800cf1c:	009b      	lsls	r3, r3, #2
 800cf1e:	4413      	add	r3, r2
 800cf20:	881b      	ldrh	r3, [r3, #0]
 800cf22:	b29b      	uxth	r3, r3
 800cf24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cf28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf2c:	843b      	strh	r3, [r7, #32]
 800cf2e:	687a      	ldr	r2, [r7, #4]
 800cf30:	683b      	ldr	r3, [r7, #0]
 800cf32:	781b      	ldrb	r3, [r3, #0]
 800cf34:	009b      	lsls	r3, r3, #2
 800cf36:	441a      	add	r2, r3
 800cf38:	8c3b      	ldrh	r3, [r7, #32]
 800cf3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cf3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cf42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cf46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf4a:	b29b      	uxth	r3, r3
 800cf4c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cf4e:	687a      	ldr	r2, [r7, #4]
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	781b      	ldrb	r3, [r3, #0]
 800cf54:	009b      	lsls	r3, r3, #2
 800cf56:	4413      	add	r3, r2
 800cf58:	881b      	ldrh	r3, [r3, #0]
 800cf5a:	b29b      	uxth	r3, r3
 800cf5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cf60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf64:	83fb      	strh	r3, [r7, #30]
 800cf66:	8bfb      	ldrh	r3, [r7, #30]
 800cf68:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cf6c:	83fb      	strh	r3, [r7, #30]
 800cf6e:	8bfb      	ldrh	r3, [r7, #30]
 800cf70:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800cf74:	83fb      	strh	r3, [r7, #30]
 800cf76:	687a      	ldr	r2, [r7, #4]
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	781b      	ldrb	r3, [r3, #0]
 800cf7c:	009b      	lsls	r3, r3, #2
 800cf7e:	441a      	add	r2, r3
 800cf80:	8bfb      	ldrh	r3, [r7, #30]
 800cf82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cf86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cf8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cf8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf92:	b29b      	uxth	r3, r3
 800cf94:	8013      	strh	r3, [r2, #0]
 800cf96:	e1c9      	b.n	800d32c <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	78db      	ldrb	r3, [r3, #3]
 800cf9c:	2b02      	cmp	r3, #2
 800cf9e:	d11e      	bne.n	800cfde <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800cfa0:	687a      	ldr	r2, [r7, #4]
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	781b      	ldrb	r3, [r3, #0]
 800cfa6:	009b      	lsls	r3, r3, #2
 800cfa8:	4413      	add	r3, r2
 800cfaa:	881b      	ldrh	r3, [r3, #0]
 800cfac:	b29b      	uxth	r3, r3
 800cfae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cfb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cfb6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800cfba:	687a      	ldr	r2, [r7, #4]
 800cfbc:	683b      	ldr	r3, [r7, #0]
 800cfbe:	781b      	ldrb	r3, [r3, #0]
 800cfc0:	009b      	lsls	r3, r3, #2
 800cfc2:	441a      	add	r2, r3
 800cfc4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800cfc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cfcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cfd0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800cfd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfd8:	b29b      	uxth	r3, r3
 800cfda:	8013      	strh	r3, [r2, #0]
 800cfdc:	e01d      	b.n	800d01a <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800cfde:	687a      	ldr	r2, [r7, #4]
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	781b      	ldrb	r3, [r3, #0]
 800cfe4:	009b      	lsls	r3, r3, #2
 800cfe6:	4413      	add	r3, r2
 800cfe8:	881b      	ldrh	r3, [r3, #0]
 800cfea:	b29b      	uxth	r3, r3
 800cfec:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800cff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cff4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800cff8:	687a      	ldr	r2, [r7, #4]
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	781b      	ldrb	r3, [r3, #0]
 800cffe:	009b      	lsls	r3, r3, #2
 800d000:	441a      	add	r2, r3
 800d002:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800d006:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d00a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d00e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d016:	b29b      	uxth	r3, r3
 800d018:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d024:	b29b      	uxth	r3, r3
 800d026:	461a      	mov	r2, r3
 800d028:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d02a:	4413      	add	r3, r2
 800d02c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	781b      	ldrb	r3, [r3, #0]
 800d032:	00da      	lsls	r2, r3, #3
 800d034:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d036:	4413      	add	r3, r2
 800d038:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d03c:	65bb      	str	r3, [r7, #88]	; 0x58
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	891b      	ldrh	r3, [r3, #8]
 800d042:	085b      	lsrs	r3, r3, #1
 800d044:	b29b      	uxth	r3, r3
 800d046:	005b      	lsls	r3, r3, #1
 800d048:	b29a      	uxth	r2, r3
 800d04a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d04c:	801a      	strh	r2, [r3, #0]
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	657b      	str	r3, [r7, #84]	; 0x54
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d058:	b29b      	uxth	r3, r3
 800d05a:	461a      	mov	r2, r3
 800d05c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d05e:	4413      	add	r3, r2
 800d060:	657b      	str	r3, [r7, #84]	; 0x54
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	781b      	ldrb	r3, [r3, #0]
 800d066:	00da      	lsls	r2, r3, #3
 800d068:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d06a:	4413      	add	r3, r2
 800d06c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d070:	653b      	str	r3, [r7, #80]	; 0x50
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	895b      	ldrh	r3, [r3, #10]
 800d076:	085b      	lsrs	r3, r3, #1
 800d078:	b29b      	uxth	r3, r3
 800d07a:	005b      	lsls	r3, r3, #1
 800d07c:	b29a      	uxth	r2, r3
 800d07e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d080:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	785b      	ldrb	r3, [r3, #1]
 800d086:	2b00      	cmp	r3, #0
 800d088:	f040 8093 	bne.w	800d1b2 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d08c:	687a      	ldr	r2, [r7, #4]
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	781b      	ldrb	r3, [r3, #0]
 800d092:	009b      	lsls	r3, r3, #2
 800d094:	4413      	add	r3, r2
 800d096:	881b      	ldrh	r3, [r3, #0]
 800d098:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800d09c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d0a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d01b      	beq.n	800d0e0 <USB_ActivateEndpoint+0x4cc>
 800d0a8:	687a      	ldr	r2, [r7, #4]
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	781b      	ldrb	r3, [r3, #0]
 800d0ae:	009b      	lsls	r3, r3, #2
 800d0b0:	4413      	add	r3, r2
 800d0b2:	881b      	ldrh	r3, [r3, #0]
 800d0b4:	b29b      	uxth	r3, r3
 800d0b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d0ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d0be:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800d0c0:	687a      	ldr	r2, [r7, #4]
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	781b      	ldrb	r3, [r3, #0]
 800d0c6:	009b      	lsls	r3, r3, #2
 800d0c8:	441a      	add	r2, r3
 800d0ca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d0cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d0d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d0d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d0d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0dc:	b29b      	uxth	r3, r3
 800d0de:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d0e0:	687a      	ldr	r2, [r7, #4]
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	781b      	ldrb	r3, [r3, #0]
 800d0e6:	009b      	lsls	r3, r3, #2
 800d0e8:	4413      	add	r3, r2
 800d0ea:	881b      	ldrh	r3, [r3, #0]
 800d0ec:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800d0ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d0f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d01b      	beq.n	800d130 <USB_ActivateEndpoint+0x51c>
 800d0f8:	687a      	ldr	r2, [r7, #4]
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	781b      	ldrb	r3, [r3, #0]
 800d0fe:	009b      	lsls	r3, r3, #2
 800d100:	4413      	add	r3, r2
 800d102:	881b      	ldrh	r3, [r3, #0]
 800d104:	b29b      	uxth	r3, r3
 800d106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d10a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d10e:	877b      	strh	r3, [r7, #58]	; 0x3a
 800d110:	687a      	ldr	r2, [r7, #4]
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	781b      	ldrb	r3, [r3, #0]
 800d116:	009b      	lsls	r3, r3, #2
 800d118:	441a      	add	r2, r3
 800d11a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d11c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d120:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d124:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d128:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d12c:	b29b      	uxth	r3, r3
 800d12e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d130:	687a      	ldr	r2, [r7, #4]
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	781b      	ldrb	r3, [r3, #0]
 800d136:	009b      	lsls	r3, r3, #2
 800d138:	4413      	add	r3, r2
 800d13a:	881b      	ldrh	r3, [r3, #0]
 800d13c:	b29b      	uxth	r3, r3
 800d13e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d146:	873b      	strh	r3, [r7, #56]	; 0x38
 800d148:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800d14a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d14e:	873b      	strh	r3, [r7, #56]	; 0x38
 800d150:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800d152:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d156:	873b      	strh	r3, [r7, #56]	; 0x38
 800d158:	687a      	ldr	r2, [r7, #4]
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	781b      	ldrb	r3, [r3, #0]
 800d15e:	009b      	lsls	r3, r3, #2
 800d160:	441a      	add	r2, r3
 800d162:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800d164:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d168:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d16c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d174:	b29b      	uxth	r3, r3
 800d176:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d178:	687a      	ldr	r2, [r7, #4]
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	781b      	ldrb	r3, [r3, #0]
 800d17e:	009b      	lsls	r3, r3, #2
 800d180:	4413      	add	r3, r2
 800d182:	881b      	ldrh	r3, [r3, #0]
 800d184:	b29b      	uxth	r3, r3
 800d186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d18a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d18e:	86fb      	strh	r3, [r7, #54]	; 0x36
 800d190:	687a      	ldr	r2, [r7, #4]
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	781b      	ldrb	r3, [r3, #0]
 800d196:	009b      	lsls	r3, r3, #2
 800d198:	441a      	add	r2, r3
 800d19a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d19c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d1a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d1a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d1a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1ac:	b29b      	uxth	r3, r3
 800d1ae:	8013      	strh	r3, [r2, #0]
 800d1b0:	e0bc      	b.n	800d32c <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d1b2:	687a      	ldr	r2, [r7, #4]
 800d1b4:	683b      	ldr	r3, [r7, #0]
 800d1b6:	781b      	ldrb	r3, [r3, #0]
 800d1b8:	009b      	lsls	r3, r3, #2
 800d1ba:	4413      	add	r3, r2
 800d1bc:	881b      	ldrh	r3, [r3, #0]
 800d1be:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800d1c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d1c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d01d      	beq.n	800d20a <USB_ActivateEndpoint+0x5f6>
 800d1ce:	687a      	ldr	r2, [r7, #4]
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	781b      	ldrb	r3, [r3, #0]
 800d1d4:	009b      	lsls	r3, r3, #2
 800d1d6:	4413      	add	r3, r2
 800d1d8:	881b      	ldrh	r3, [r3, #0]
 800d1da:	b29b      	uxth	r3, r3
 800d1dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d1e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d1e4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800d1e8:	687a      	ldr	r2, [r7, #4]
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	781b      	ldrb	r3, [r3, #0]
 800d1ee:	009b      	lsls	r3, r3, #2
 800d1f0:	441a      	add	r2, r3
 800d1f2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800d1f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d1fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d1fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d206:	b29b      	uxth	r3, r3
 800d208:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d20a:	687a      	ldr	r2, [r7, #4]
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	781b      	ldrb	r3, [r3, #0]
 800d210:	009b      	lsls	r3, r3, #2
 800d212:	4413      	add	r3, r2
 800d214:	881b      	ldrh	r3, [r3, #0]
 800d216:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800d21a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800d21e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d222:	2b00      	cmp	r3, #0
 800d224:	d01d      	beq.n	800d262 <USB_ActivateEndpoint+0x64e>
 800d226:	687a      	ldr	r2, [r7, #4]
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	781b      	ldrb	r3, [r3, #0]
 800d22c:	009b      	lsls	r3, r3, #2
 800d22e:	4413      	add	r3, r2
 800d230:	881b      	ldrh	r3, [r3, #0]
 800d232:	b29b      	uxth	r3, r3
 800d234:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d23c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800d240:	687a      	ldr	r2, [r7, #4]
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	781b      	ldrb	r3, [r3, #0]
 800d246:	009b      	lsls	r3, r3, #2
 800d248:	441a      	add	r2, r3
 800d24a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d24e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d252:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d25a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d25e:	b29b      	uxth	r3, r3
 800d260:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	78db      	ldrb	r3, [r3, #3]
 800d266:	2b01      	cmp	r3, #1
 800d268:	d024      	beq.n	800d2b4 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d26a:	687a      	ldr	r2, [r7, #4]
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	781b      	ldrb	r3, [r3, #0]
 800d270:	009b      	lsls	r3, r3, #2
 800d272:	4413      	add	r3, r2
 800d274:	881b      	ldrh	r3, [r3, #0]
 800d276:	b29b      	uxth	r3, r3
 800d278:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d27c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d280:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800d284:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d288:	f083 0320 	eor.w	r3, r3, #32
 800d28c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800d290:	687a      	ldr	r2, [r7, #4]
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	781b      	ldrb	r3, [r3, #0]
 800d296:	009b      	lsls	r3, r3, #2
 800d298:	441a      	add	r2, r3
 800d29a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d29e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d2a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d2a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d2aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2ae:	b29b      	uxth	r3, r3
 800d2b0:	8013      	strh	r3, [r2, #0]
 800d2b2:	e01d      	b.n	800d2f0 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d2b4:	687a      	ldr	r2, [r7, #4]
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	781b      	ldrb	r3, [r3, #0]
 800d2ba:	009b      	lsls	r3, r3, #2
 800d2bc:	4413      	add	r3, r2
 800d2be:	881b      	ldrh	r3, [r3, #0]
 800d2c0:	b29b      	uxth	r3, r3
 800d2c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d2c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d2ca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800d2ce:	687a      	ldr	r2, [r7, #4]
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	781b      	ldrb	r3, [r3, #0]
 800d2d4:	009b      	lsls	r3, r3, #2
 800d2d6:	441a      	add	r2, r3
 800d2d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d2dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d2e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d2e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d2e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2ec:	b29b      	uxth	r3, r3
 800d2ee:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d2f0:	687a      	ldr	r2, [r7, #4]
 800d2f2:	683b      	ldr	r3, [r7, #0]
 800d2f4:	781b      	ldrb	r3, [r3, #0]
 800d2f6:	009b      	lsls	r3, r3, #2
 800d2f8:	4413      	add	r3, r2
 800d2fa:	881b      	ldrh	r3, [r3, #0]
 800d2fc:	b29b      	uxth	r3, r3
 800d2fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d306:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800d30a:	687a      	ldr	r2, [r7, #4]
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	781b      	ldrb	r3, [r3, #0]
 800d310:	009b      	lsls	r3, r3, #2
 800d312:	441a      	add	r2, r3
 800d314:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d318:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d31c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d320:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d328:	b29b      	uxth	r3, r3
 800d32a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800d32c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800d330:	4618      	mov	r0, r3
 800d332:	3774      	adds	r7, #116	; 0x74
 800d334:	46bd      	mov	sp, r7
 800d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33a:	4770      	bx	lr

0800d33c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d33c:	b480      	push	{r7}
 800d33e:	b08d      	sub	sp, #52	; 0x34
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
 800d344:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	7b1b      	ldrb	r3, [r3, #12]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	f040 808e 	bne.w	800d46c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	785b      	ldrb	r3, [r3, #1]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d044      	beq.n	800d3e2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d358:	687a      	ldr	r2, [r7, #4]
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	781b      	ldrb	r3, [r3, #0]
 800d35e:	009b      	lsls	r3, r3, #2
 800d360:	4413      	add	r3, r2
 800d362:	881b      	ldrh	r3, [r3, #0]
 800d364:	81bb      	strh	r3, [r7, #12]
 800d366:	89bb      	ldrh	r3, [r7, #12]
 800d368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d01b      	beq.n	800d3a8 <USB_DeactivateEndpoint+0x6c>
 800d370:	687a      	ldr	r2, [r7, #4]
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	781b      	ldrb	r3, [r3, #0]
 800d376:	009b      	lsls	r3, r3, #2
 800d378:	4413      	add	r3, r2
 800d37a:	881b      	ldrh	r3, [r3, #0]
 800d37c:	b29b      	uxth	r3, r3
 800d37e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d386:	817b      	strh	r3, [r7, #10]
 800d388:	687a      	ldr	r2, [r7, #4]
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	781b      	ldrb	r3, [r3, #0]
 800d38e:	009b      	lsls	r3, r3, #2
 800d390:	441a      	add	r2, r3
 800d392:	897b      	ldrh	r3, [r7, #10]
 800d394:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d398:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d39c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d3a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d3a4:	b29b      	uxth	r3, r3
 800d3a6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d3a8:	687a      	ldr	r2, [r7, #4]
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	781b      	ldrb	r3, [r3, #0]
 800d3ae:	009b      	lsls	r3, r3, #2
 800d3b0:	4413      	add	r3, r2
 800d3b2:	881b      	ldrh	r3, [r3, #0]
 800d3b4:	b29b      	uxth	r3, r3
 800d3b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d3ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d3be:	813b      	strh	r3, [r7, #8]
 800d3c0:	687a      	ldr	r2, [r7, #4]
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	781b      	ldrb	r3, [r3, #0]
 800d3c6:	009b      	lsls	r3, r3, #2
 800d3c8:	441a      	add	r2, r3
 800d3ca:	893b      	ldrh	r3, [r7, #8]
 800d3cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d3d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d3d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d3d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3dc:	b29b      	uxth	r3, r3
 800d3de:	8013      	strh	r3, [r2, #0]
 800d3e0:	e192      	b.n	800d708 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d3e2:	687a      	ldr	r2, [r7, #4]
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	781b      	ldrb	r3, [r3, #0]
 800d3e8:	009b      	lsls	r3, r3, #2
 800d3ea:	4413      	add	r3, r2
 800d3ec:	881b      	ldrh	r3, [r3, #0]
 800d3ee:	827b      	strh	r3, [r7, #18]
 800d3f0:	8a7b      	ldrh	r3, [r7, #18]
 800d3f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d01b      	beq.n	800d432 <USB_DeactivateEndpoint+0xf6>
 800d3fa:	687a      	ldr	r2, [r7, #4]
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	781b      	ldrb	r3, [r3, #0]
 800d400:	009b      	lsls	r3, r3, #2
 800d402:	4413      	add	r3, r2
 800d404:	881b      	ldrh	r3, [r3, #0]
 800d406:	b29b      	uxth	r3, r3
 800d408:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d40c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d410:	823b      	strh	r3, [r7, #16]
 800d412:	687a      	ldr	r2, [r7, #4]
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	781b      	ldrb	r3, [r3, #0]
 800d418:	009b      	lsls	r3, r3, #2
 800d41a:	441a      	add	r2, r3
 800d41c:	8a3b      	ldrh	r3, [r7, #16]
 800d41e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d422:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d426:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d42a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d42e:	b29b      	uxth	r3, r3
 800d430:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d432:	687a      	ldr	r2, [r7, #4]
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	781b      	ldrb	r3, [r3, #0]
 800d438:	009b      	lsls	r3, r3, #2
 800d43a:	4413      	add	r3, r2
 800d43c:	881b      	ldrh	r3, [r3, #0]
 800d43e:	b29b      	uxth	r3, r3
 800d440:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d448:	81fb      	strh	r3, [r7, #14]
 800d44a:	687a      	ldr	r2, [r7, #4]
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	781b      	ldrb	r3, [r3, #0]
 800d450:	009b      	lsls	r3, r3, #2
 800d452:	441a      	add	r2, r3
 800d454:	89fb      	ldrh	r3, [r7, #14]
 800d456:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d45a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d45e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d466:	b29b      	uxth	r3, r3
 800d468:	8013      	strh	r3, [r2, #0]
 800d46a:	e14d      	b.n	800d708 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	785b      	ldrb	r3, [r3, #1]
 800d470:	2b00      	cmp	r3, #0
 800d472:	f040 80a5 	bne.w	800d5c0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d476:	687a      	ldr	r2, [r7, #4]
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	781b      	ldrb	r3, [r3, #0]
 800d47c:	009b      	lsls	r3, r3, #2
 800d47e:	4413      	add	r3, r2
 800d480:	881b      	ldrh	r3, [r3, #0]
 800d482:	843b      	strh	r3, [r7, #32]
 800d484:	8c3b      	ldrh	r3, [r7, #32]
 800d486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d01b      	beq.n	800d4c6 <USB_DeactivateEndpoint+0x18a>
 800d48e:	687a      	ldr	r2, [r7, #4]
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	781b      	ldrb	r3, [r3, #0]
 800d494:	009b      	lsls	r3, r3, #2
 800d496:	4413      	add	r3, r2
 800d498:	881b      	ldrh	r3, [r3, #0]
 800d49a:	b29b      	uxth	r3, r3
 800d49c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d4a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d4a4:	83fb      	strh	r3, [r7, #30]
 800d4a6:	687a      	ldr	r2, [r7, #4]
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	781b      	ldrb	r3, [r3, #0]
 800d4ac:	009b      	lsls	r3, r3, #2
 800d4ae:	441a      	add	r2, r3
 800d4b0:	8bfb      	ldrh	r3, [r7, #30]
 800d4b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d4b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d4ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d4be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4c2:	b29b      	uxth	r3, r3
 800d4c4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d4c6:	687a      	ldr	r2, [r7, #4]
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	781b      	ldrb	r3, [r3, #0]
 800d4cc:	009b      	lsls	r3, r3, #2
 800d4ce:	4413      	add	r3, r2
 800d4d0:	881b      	ldrh	r3, [r3, #0]
 800d4d2:	83bb      	strh	r3, [r7, #28]
 800d4d4:	8bbb      	ldrh	r3, [r7, #28]
 800d4d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d01b      	beq.n	800d516 <USB_DeactivateEndpoint+0x1da>
 800d4de:	687a      	ldr	r2, [r7, #4]
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	781b      	ldrb	r3, [r3, #0]
 800d4e4:	009b      	lsls	r3, r3, #2
 800d4e6:	4413      	add	r3, r2
 800d4e8:	881b      	ldrh	r3, [r3, #0]
 800d4ea:	b29b      	uxth	r3, r3
 800d4ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d4f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d4f4:	837b      	strh	r3, [r7, #26]
 800d4f6:	687a      	ldr	r2, [r7, #4]
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	781b      	ldrb	r3, [r3, #0]
 800d4fc:	009b      	lsls	r3, r3, #2
 800d4fe:	441a      	add	r2, r3
 800d500:	8b7b      	ldrh	r3, [r7, #26]
 800d502:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d506:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d50a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d50e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d512:	b29b      	uxth	r3, r3
 800d514:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800d516:	687a      	ldr	r2, [r7, #4]
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	781b      	ldrb	r3, [r3, #0]
 800d51c:	009b      	lsls	r3, r3, #2
 800d51e:	4413      	add	r3, r2
 800d520:	881b      	ldrh	r3, [r3, #0]
 800d522:	b29b      	uxth	r3, r3
 800d524:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d52c:	833b      	strh	r3, [r7, #24]
 800d52e:	687a      	ldr	r2, [r7, #4]
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	781b      	ldrb	r3, [r3, #0]
 800d534:	009b      	lsls	r3, r3, #2
 800d536:	441a      	add	r2, r3
 800d538:	8b3b      	ldrh	r3, [r7, #24]
 800d53a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d53e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d546:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d54a:	b29b      	uxth	r3, r3
 800d54c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d54e:	687a      	ldr	r2, [r7, #4]
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	781b      	ldrb	r3, [r3, #0]
 800d554:	009b      	lsls	r3, r3, #2
 800d556:	4413      	add	r3, r2
 800d558:	881b      	ldrh	r3, [r3, #0]
 800d55a:	b29b      	uxth	r3, r3
 800d55c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d564:	82fb      	strh	r3, [r7, #22]
 800d566:	687a      	ldr	r2, [r7, #4]
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	781b      	ldrb	r3, [r3, #0]
 800d56c:	009b      	lsls	r3, r3, #2
 800d56e:	441a      	add	r2, r3
 800d570:	8afb      	ldrh	r3, [r7, #22]
 800d572:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d576:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d57a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d57e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d582:	b29b      	uxth	r3, r3
 800d584:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d586:	687a      	ldr	r2, [r7, #4]
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	781b      	ldrb	r3, [r3, #0]
 800d58c:	009b      	lsls	r3, r3, #2
 800d58e:	4413      	add	r3, r2
 800d590:	881b      	ldrh	r3, [r3, #0]
 800d592:	b29b      	uxth	r3, r3
 800d594:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d598:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d59c:	82bb      	strh	r3, [r7, #20]
 800d59e:	687a      	ldr	r2, [r7, #4]
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	781b      	ldrb	r3, [r3, #0]
 800d5a4:	009b      	lsls	r3, r3, #2
 800d5a6:	441a      	add	r2, r3
 800d5a8:	8abb      	ldrh	r3, [r7, #20]
 800d5aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d5ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d5b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d5b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5ba:	b29b      	uxth	r3, r3
 800d5bc:	8013      	strh	r3, [r2, #0]
 800d5be:	e0a3      	b.n	800d708 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d5c0:	687a      	ldr	r2, [r7, #4]
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	781b      	ldrb	r3, [r3, #0]
 800d5c6:	009b      	lsls	r3, r3, #2
 800d5c8:	4413      	add	r3, r2
 800d5ca:	881b      	ldrh	r3, [r3, #0]
 800d5cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d5ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d5d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d01b      	beq.n	800d610 <USB_DeactivateEndpoint+0x2d4>
 800d5d8:	687a      	ldr	r2, [r7, #4]
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	781b      	ldrb	r3, [r3, #0]
 800d5de:	009b      	lsls	r3, r3, #2
 800d5e0:	4413      	add	r3, r2
 800d5e2:	881b      	ldrh	r3, [r3, #0]
 800d5e4:	b29b      	uxth	r3, r3
 800d5e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d5ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d5ee:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800d5f0:	687a      	ldr	r2, [r7, #4]
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	781b      	ldrb	r3, [r3, #0]
 800d5f6:	009b      	lsls	r3, r3, #2
 800d5f8:	441a      	add	r2, r3
 800d5fa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d5fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d600:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d604:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d60c:	b29b      	uxth	r3, r3
 800d60e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d610:	687a      	ldr	r2, [r7, #4]
 800d612:	683b      	ldr	r3, [r7, #0]
 800d614:	781b      	ldrb	r3, [r3, #0]
 800d616:	009b      	lsls	r3, r3, #2
 800d618:	4413      	add	r3, r2
 800d61a:	881b      	ldrh	r3, [r3, #0]
 800d61c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800d61e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d624:	2b00      	cmp	r3, #0
 800d626:	d01b      	beq.n	800d660 <USB_DeactivateEndpoint+0x324>
 800d628:	687a      	ldr	r2, [r7, #4]
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	781b      	ldrb	r3, [r3, #0]
 800d62e:	009b      	lsls	r3, r3, #2
 800d630:	4413      	add	r3, r2
 800d632:	881b      	ldrh	r3, [r3, #0]
 800d634:	b29b      	uxth	r3, r3
 800d636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d63a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d63e:	853b      	strh	r3, [r7, #40]	; 0x28
 800d640:	687a      	ldr	r2, [r7, #4]
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	781b      	ldrb	r3, [r3, #0]
 800d646:	009b      	lsls	r3, r3, #2
 800d648:	441a      	add	r2, r3
 800d64a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d64c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d650:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d654:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d658:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d65c:	b29b      	uxth	r3, r3
 800d65e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800d660:	687a      	ldr	r2, [r7, #4]
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	781b      	ldrb	r3, [r3, #0]
 800d666:	009b      	lsls	r3, r3, #2
 800d668:	4413      	add	r3, r2
 800d66a:	881b      	ldrh	r3, [r3, #0]
 800d66c:	b29b      	uxth	r3, r3
 800d66e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d676:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d678:	687a      	ldr	r2, [r7, #4]
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	781b      	ldrb	r3, [r3, #0]
 800d67e:	009b      	lsls	r3, r3, #2
 800d680:	441a      	add	r2, r3
 800d682:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d684:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d688:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d68c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d694:	b29b      	uxth	r3, r3
 800d696:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d698:	687a      	ldr	r2, [r7, #4]
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	781b      	ldrb	r3, [r3, #0]
 800d69e:	009b      	lsls	r3, r3, #2
 800d6a0:	4413      	add	r3, r2
 800d6a2:	881b      	ldrh	r3, [r3, #0]
 800d6a4:	b29b      	uxth	r3, r3
 800d6a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d6aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d6ae:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d6b0:	687a      	ldr	r2, [r7, #4]
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	781b      	ldrb	r3, [r3, #0]
 800d6b6:	009b      	lsls	r3, r3, #2
 800d6b8:	441a      	add	r2, r3
 800d6ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d6bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d6c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d6c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d6c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6cc:	b29b      	uxth	r3, r3
 800d6ce:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d6d0:	687a      	ldr	r2, [r7, #4]
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	781b      	ldrb	r3, [r3, #0]
 800d6d6:	009b      	lsls	r3, r3, #2
 800d6d8:	4413      	add	r3, r2
 800d6da:	881b      	ldrh	r3, [r3, #0]
 800d6dc:	b29b      	uxth	r3, r3
 800d6de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d6e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d6e6:	847b      	strh	r3, [r7, #34]	; 0x22
 800d6e8:	687a      	ldr	r2, [r7, #4]
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	781b      	ldrb	r3, [r3, #0]
 800d6ee:	009b      	lsls	r3, r3, #2
 800d6f0:	441a      	add	r2, r3
 800d6f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d6f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d6f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d6fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d704:	b29b      	uxth	r3, r3
 800d706:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800d708:	2300      	movs	r3, #0
}
 800d70a:	4618      	mov	r0, r3
 800d70c:	3734      	adds	r7, #52	; 0x34
 800d70e:	46bd      	mov	sp, r7
 800d710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d714:	4770      	bx	lr

0800d716 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d716:	b580      	push	{r7, lr}
 800d718:	b0c2      	sub	sp, #264	; 0x108
 800d71a:	af00      	add	r7, sp, #0
 800d71c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d720:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d724:	6018      	str	r0, [r3, #0]
 800d726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d72a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d72e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d730:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d734:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	785b      	ldrb	r3, [r3, #1]
 800d73c:	2b01      	cmp	r3, #1
 800d73e:	f040 867b 	bne.w	800e438 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800d742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	699a      	ldr	r2, [r3, #24]
 800d74e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d752:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	691b      	ldr	r3, [r3, #16]
 800d75a:	429a      	cmp	r2, r3
 800d75c:	d908      	bls.n	800d770 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800d75e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d762:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	691b      	ldr	r3, [r3, #16]
 800d76a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800d76e:	e007      	b.n	800d780 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800d770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d774:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	699b      	ldr	r3, [r3, #24]
 800d77c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800d780:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d784:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	7b1b      	ldrb	r3, [r3, #12]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d13a      	bne.n	800d806 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800d790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d794:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	6959      	ldr	r1, [r3, #20]
 800d79c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	88da      	ldrh	r2, [r3, #6]
 800d7a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d7ac:	b29b      	uxth	r3, r3
 800d7ae:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d7b2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d7b6:	6800      	ldr	r0, [r0, #0]
 800d7b8:	f001 fc1d 	bl	800eff6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d7bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	613b      	str	r3, [r7, #16]
 800d7c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d7d6:	b29b      	uxth	r3, r3
 800d7d8:	461a      	mov	r2, r3
 800d7da:	693b      	ldr	r3, [r7, #16]
 800d7dc:	4413      	add	r3, r2
 800d7de:	613b      	str	r3, [r7, #16]
 800d7e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	781b      	ldrb	r3, [r3, #0]
 800d7ec:	00da      	lsls	r2, r3, #3
 800d7ee:	693b      	ldr	r3, [r7, #16]
 800d7f0:	4413      	add	r3, r2
 800d7f2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d7f6:	60fb      	str	r3, [r7, #12]
 800d7f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d7fc:	b29a      	uxth	r2, r3
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	801a      	strh	r2, [r3, #0]
 800d802:	f000 bde3 	b.w	800e3cc <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800d806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d80a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	78db      	ldrb	r3, [r3, #3]
 800d812:	2b02      	cmp	r3, #2
 800d814:	f040 843a 	bne.w	800e08c <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800d818:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d81c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	6a1a      	ldr	r2, [r3, #32]
 800d824:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d828:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	691b      	ldr	r3, [r3, #16]
 800d830:	429a      	cmp	r2, r3
 800d832:	f240 83b7 	bls.w	800dfa4 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d836:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d83a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d83e:	681a      	ldr	r2, [r3, #0]
 800d840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d844:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	781b      	ldrb	r3, [r3, #0]
 800d84c:	009b      	lsls	r3, r3, #2
 800d84e:	4413      	add	r3, r2
 800d850:	881b      	ldrh	r3, [r3, #0]
 800d852:	b29b      	uxth	r3, r3
 800d854:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d858:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d85c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800d860:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d864:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d868:	681a      	ldr	r2, [r3, #0]
 800d86a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d86e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	781b      	ldrb	r3, [r3, #0]
 800d876:	009b      	lsls	r3, r3, #2
 800d878:	441a      	add	r2, r3
 800d87a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800d87e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d886:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800d88a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d88e:	b29b      	uxth	r3, r3
 800d890:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800d892:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d896:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	6a1a      	ldr	r2, [r3, #32]
 800d89e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d8a2:	1ad2      	subs	r2, r2, r3
 800d8a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d8b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d8b8:	681a      	ldr	r2, [r3, #0]
 800d8ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	781b      	ldrb	r3, [r3, #0]
 800d8c6:	009b      	lsls	r3, r3, #2
 800d8c8:	4413      	add	r3, r2
 800d8ca:	881b      	ldrh	r3, [r3, #0]
 800d8cc:	b29b      	uxth	r3, r3
 800d8ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	f000 81b3 	beq.w	800dc3e <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d8d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	633b      	str	r3, [r7, #48]	; 0x30
 800d8e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	785b      	ldrb	r3, [r3, #1]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d16d      	bne.n	800d9d0 <USB_EPStartXfer+0x2ba>
 800d8f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	62bb      	str	r3, [r7, #40]	; 0x28
 800d900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d904:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d90e:	b29b      	uxth	r3, r3
 800d910:	461a      	mov	r2, r3
 800d912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d914:	4413      	add	r3, r2
 800d916:	62bb      	str	r3, [r7, #40]	; 0x28
 800d918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d91c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	781b      	ldrb	r3, [r3, #0]
 800d924:	00da      	lsls	r2, r3, #3
 800d926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d928:	4413      	add	r3, r2
 800d92a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d92e:	627b      	str	r3, [r7, #36]	; 0x24
 800d930:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d934:	2b3e      	cmp	r3, #62	; 0x3e
 800d936:	d91c      	bls.n	800d972 <USB_EPStartXfer+0x25c>
 800d938:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d93c:	095b      	lsrs	r3, r3, #5
 800d93e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d942:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d946:	f003 031f 	and.w	r3, r3, #31
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d104      	bne.n	800d958 <USB_EPStartXfer+0x242>
 800d94e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d952:	3b01      	subs	r3, #1
 800d954:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d958:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d95c:	b29b      	uxth	r3, r3
 800d95e:	029b      	lsls	r3, r3, #10
 800d960:	b29b      	uxth	r3, r3
 800d962:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d966:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d96a:	b29a      	uxth	r2, r3
 800d96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d96e:	801a      	strh	r2, [r3, #0]
 800d970:	e053      	b.n	800da1a <USB_EPStartXfer+0x304>
 800d972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d976:	2b00      	cmp	r3, #0
 800d978:	d112      	bne.n	800d9a0 <USB_EPStartXfer+0x28a>
 800d97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d97c:	881b      	ldrh	r3, [r3, #0]
 800d97e:	b29b      	uxth	r3, r3
 800d980:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d984:	b29a      	uxth	r2, r3
 800d986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d988:	801a      	strh	r2, [r3, #0]
 800d98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d98c:	881b      	ldrh	r3, [r3, #0]
 800d98e:	b29b      	uxth	r3, r3
 800d990:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d994:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d998:	b29a      	uxth	r2, r3
 800d99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d99c:	801a      	strh	r2, [r3, #0]
 800d99e:	e03c      	b.n	800da1a <USB_EPStartXfer+0x304>
 800d9a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d9a4:	085b      	lsrs	r3, r3, #1
 800d9a6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d9aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d9ae:	f003 0301 	and.w	r3, r3, #1
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d004      	beq.n	800d9c0 <USB_EPStartXfer+0x2aa>
 800d9b6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d9ba:	3301      	adds	r3, #1
 800d9bc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d9c0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d9c4:	b29b      	uxth	r3, r3
 800d9c6:	029b      	lsls	r3, r3, #10
 800d9c8:	b29a      	uxth	r2, r3
 800d9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9cc:	801a      	strh	r2, [r3, #0]
 800d9ce:	e024      	b.n	800da1a <USB_EPStartXfer+0x304>
 800d9d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d9d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	785b      	ldrb	r3, [r3, #1]
 800d9dc:	2b01      	cmp	r3, #1
 800d9de:	d11c      	bne.n	800da1a <USB_EPStartXfer+0x304>
 800d9e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d9e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d9ee:	b29b      	uxth	r3, r3
 800d9f0:	461a      	mov	r2, r3
 800d9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f4:	4413      	add	r3, r2
 800d9f6:	633b      	str	r3, [r7, #48]	; 0x30
 800d9f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d9fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	781b      	ldrb	r3, [r3, #0]
 800da04:	00da      	lsls	r2, r3, #3
 800da06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da08:	4413      	add	r3, r2
 800da0a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800da0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da14:	b29a      	uxth	r2, r3
 800da16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da18:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800da1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	895b      	ldrh	r3, [r3, #10]
 800da26:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800da2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	6959      	ldr	r1, [r3, #20]
 800da36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da3a:	b29b      	uxth	r3, r3
 800da3c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800da40:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800da44:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800da48:	6800      	ldr	r0, [r0, #0]
 800da4a:	f001 fad4 	bl	800eff6 <USB_WritePMA>
            ep->xfer_buff += len;
 800da4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	695a      	ldr	r2, [r3, #20]
 800da5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da5e:	441a      	add	r2, r3
 800da60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800da6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	6a1a      	ldr	r2, [r3, #32]
 800da78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	691b      	ldr	r3, [r3, #16]
 800da84:	429a      	cmp	r2, r3
 800da86:	d90f      	bls.n	800daa8 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800da88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	6a1a      	ldr	r2, [r3, #32]
 800da94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da98:	1ad2      	subs	r2, r2, r3
 800da9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	621a      	str	r2, [r3, #32]
 800daa6:	e00e      	b.n	800dac6 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800daa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800daac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	6a1b      	ldr	r3, [r3, #32]
 800dab4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800dab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dabc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	2200      	movs	r2, #0
 800dac4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800dac6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800daca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	785b      	ldrb	r3, [r3, #1]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d16d      	bne.n	800dbb2 <USB_EPStartXfer+0x49c>
 800dad6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dada:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	61bb      	str	r3, [r7, #24]
 800dae2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dae6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800daf0:	b29b      	uxth	r3, r3
 800daf2:	461a      	mov	r2, r3
 800daf4:	69bb      	ldr	r3, [r7, #24]
 800daf6:	4413      	add	r3, r2
 800daf8:	61bb      	str	r3, [r7, #24]
 800dafa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dafe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	781b      	ldrb	r3, [r3, #0]
 800db06:	00da      	lsls	r2, r3, #3
 800db08:	69bb      	ldr	r3, [r7, #24]
 800db0a:	4413      	add	r3, r2
 800db0c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800db10:	617b      	str	r3, [r7, #20]
 800db12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db16:	2b3e      	cmp	r3, #62	; 0x3e
 800db18:	d91c      	bls.n	800db54 <USB_EPStartXfer+0x43e>
 800db1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db1e:	095b      	lsrs	r3, r3, #5
 800db20:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800db24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db28:	f003 031f 	and.w	r3, r3, #31
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d104      	bne.n	800db3a <USB_EPStartXfer+0x424>
 800db30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800db34:	3b01      	subs	r3, #1
 800db36:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800db3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800db3e:	b29b      	uxth	r3, r3
 800db40:	029b      	lsls	r3, r3, #10
 800db42:	b29b      	uxth	r3, r3
 800db44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800db48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800db4c:	b29a      	uxth	r2, r3
 800db4e:	697b      	ldr	r3, [r7, #20]
 800db50:	801a      	strh	r2, [r3, #0]
 800db52:	e059      	b.n	800dc08 <USB_EPStartXfer+0x4f2>
 800db54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d112      	bne.n	800db82 <USB_EPStartXfer+0x46c>
 800db5c:	697b      	ldr	r3, [r7, #20]
 800db5e:	881b      	ldrh	r3, [r3, #0]
 800db60:	b29b      	uxth	r3, r3
 800db62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800db66:	b29a      	uxth	r2, r3
 800db68:	697b      	ldr	r3, [r7, #20]
 800db6a:	801a      	strh	r2, [r3, #0]
 800db6c:	697b      	ldr	r3, [r7, #20]
 800db6e:	881b      	ldrh	r3, [r3, #0]
 800db70:	b29b      	uxth	r3, r3
 800db72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800db76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800db7a:	b29a      	uxth	r2, r3
 800db7c:	697b      	ldr	r3, [r7, #20]
 800db7e:	801a      	strh	r2, [r3, #0]
 800db80:	e042      	b.n	800dc08 <USB_EPStartXfer+0x4f2>
 800db82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db86:	085b      	lsrs	r3, r3, #1
 800db88:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800db8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db90:	f003 0301 	and.w	r3, r3, #1
 800db94:	2b00      	cmp	r3, #0
 800db96:	d004      	beq.n	800dba2 <USB_EPStartXfer+0x48c>
 800db98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800db9c:	3301      	adds	r3, #1
 800db9e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800dba2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dba6:	b29b      	uxth	r3, r3
 800dba8:	029b      	lsls	r3, r3, #10
 800dbaa:	b29a      	uxth	r2, r3
 800dbac:	697b      	ldr	r3, [r7, #20]
 800dbae:	801a      	strh	r2, [r3, #0]
 800dbb0:	e02a      	b.n	800dc08 <USB_EPStartXfer+0x4f2>
 800dbb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	785b      	ldrb	r3, [r3, #1]
 800dbbe:	2b01      	cmp	r3, #1
 800dbc0:	d122      	bne.n	800dc08 <USB_EPStartXfer+0x4f2>
 800dbc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	623b      	str	r3, [r7, #32]
 800dbce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dbdc:	b29b      	uxth	r3, r3
 800dbde:	461a      	mov	r2, r3
 800dbe0:	6a3b      	ldr	r3, [r7, #32]
 800dbe2:	4413      	add	r3, r2
 800dbe4:	623b      	str	r3, [r7, #32]
 800dbe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	781b      	ldrb	r3, [r3, #0]
 800dbf2:	00da      	lsls	r2, r3, #3
 800dbf4:	6a3b      	ldr	r3, [r7, #32]
 800dbf6:	4413      	add	r3, r2
 800dbf8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800dbfc:	61fb      	str	r3, [r7, #28]
 800dbfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc02:	b29a      	uxth	r2, r3
 800dc04:	69fb      	ldr	r3, [r7, #28]
 800dc06:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800dc08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	891b      	ldrh	r3, [r3, #8]
 800dc14:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dc18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	6959      	ldr	r1, [r3, #20]
 800dc24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc28:	b29b      	uxth	r3, r3
 800dc2a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800dc2e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800dc32:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800dc36:	6800      	ldr	r0, [r0, #0]
 800dc38:	f001 f9dd 	bl	800eff6 <USB_WritePMA>
 800dc3c:	e3c6      	b.n	800e3cc <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800dc3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	785b      	ldrb	r3, [r3, #1]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d16d      	bne.n	800dd2a <USB_EPStartXfer+0x614>
 800dc4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	64bb      	str	r3, [r7, #72]	; 0x48
 800dc5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dc68:	b29b      	uxth	r3, r3
 800dc6a:	461a      	mov	r2, r3
 800dc6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc6e:	4413      	add	r3, r2
 800dc70:	64bb      	str	r3, [r7, #72]	; 0x48
 800dc72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	781b      	ldrb	r3, [r3, #0]
 800dc7e:	00da      	lsls	r2, r3, #3
 800dc80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc82:	4413      	add	r3, r2
 800dc84:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800dc88:	647b      	str	r3, [r7, #68]	; 0x44
 800dc8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc8e:	2b3e      	cmp	r3, #62	; 0x3e
 800dc90:	d91c      	bls.n	800dccc <USB_EPStartXfer+0x5b6>
 800dc92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc96:	095b      	lsrs	r3, r3, #5
 800dc98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800dc9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dca0:	f003 031f 	and.w	r3, r3, #31
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d104      	bne.n	800dcb2 <USB_EPStartXfer+0x59c>
 800dca8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800dcac:	3b01      	subs	r3, #1
 800dcae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800dcb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800dcb6:	b29b      	uxth	r3, r3
 800dcb8:	029b      	lsls	r3, r3, #10
 800dcba:	b29b      	uxth	r3, r3
 800dcbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dcc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dcc4:	b29a      	uxth	r2, r3
 800dcc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dcc8:	801a      	strh	r2, [r3, #0]
 800dcca:	e059      	b.n	800dd80 <USB_EPStartXfer+0x66a>
 800dccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d112      	bne.n	800dcfa <USB_EPStartXfer+0x5e4>
 800dcd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dcd6:	881b      	ldrh	r3, [r3, #0]
 800dcd8:	b29b      	uxth	r3, r3
 800dcda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800dcde:	b29a      	uxth	r2, r3
 800dce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dce2:	801a      	strh	r2, [r3, #0]
 800dce4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dce6:	881b      	ldrh	r3, [r3, #0]
 800dce8:	b29b      	uxth	r3, r3
 800dcea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dcee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dcf2:	b29a      	uxth	r2, r3
 800dcf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dcf6:	801a      	strh	r2, [r3, #0]
 800dcf8:	e042      	b.n	800dd80 <USB_EPStartXfer+0x66a>
 800dcfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dcfe:	085b      	lsrs	r3, r3, #1
 800dd00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800dd04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dd08:	f003 0301 	and.w	r3, r3, #1
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d004      	beq.n	800dd1a <USB_EPStartXfer+0x604>
 800dd10:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800dd14:	3301      	adds	r3, #1
 800dd16:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800dd1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800dd1e:	b29b      	uxth	r3, r3
 800dd20:	029b      	lsls	r3, r3, #10
 800dd22:	b29a      	uxth	r2, r3
 800dd24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd26:	801a      	strh	r2, [r3, #0]
 800dd28:	e02a      	b.n	800dd80 <USB_EPStartXfer+0x66a>
 800dd2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	785b      	ldrb	r3, [r3, #1]
 800dd36:	2b01      	cmp	r3, #1
 800dd38:	d122      	bne.n	800dd80 <USB_EPStartXfer+0x66a>
 800dd3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	653b      	str	r3, [r7, #80]	; 0x50
 800dd46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dd54:	b29b      	uxth	r3, r3
 800dd56:	461a      	mov	r2, r3
 800dd58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd5a:	4413      	add	r3, r2
 800dd5c:	653b      	str	r3, [r7, #80]	; 0x50
 800dd5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	781b      	ldrb	r3, [r3, #0]
 800dd6a:	00da      	lsls	r2, r3, #3
 800dd6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd6e:	4413      	add	r3, r2
 800dd70:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800dd74:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dd76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dd7a:	b29a      	uxth	r2, r3
 800dd7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd7e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800dd80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	891b      	ldrh	r3, [r3, #8]
 800dd8c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dd90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	6959      	ldr	r1, [r3, #20]
 800dd9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dda0:	b29b      	uxth	r3, r3
 800dda2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800dda6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ddaa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ddae:	6800      	ldr	r0, [r0, #0]
 800ddb0:	f001 f921 	bl	800eff6 <USB_WritePMA>
            ep->xfer_buff += len;
 800ddb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ddb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	695a      	ldr	r2, [r3, #20]
 800ddc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ddc4:	441a      	add	r2, r3
 800ddc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ddca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ddd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ddd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	6a1a      	ldr	r2, [r3, #32]
 800ddde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dde2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	691b      	ldr	r3, [r3, #16]
 800ddea:	429a      	cmp	r2, r3
 800ddec:	d90f      	bls.n	800de0e <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800ddee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ddf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	6a1a      	ldr	r2, [r3, #32]
 800ddfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ddfe:	1ad2      	subs	r2, r2, r3
 800de00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	621a      	str	r2, [r3, #32]
 800de0c:	e00e      	b.n	800de2c <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800de0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	6a1b      	ldr	r3, [r3, #32]
 800de1a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800de1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	2200      	movs	r2, #0
 800de2a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800de2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	643b      	str	r3, [r7, #64]	; 0x40
 800de38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	785b      	ldrb	r3, [r3, #1]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d16d      	bne.n	800df24 <USB_EPStartXfer+0x80e>
 800de48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	63bb      	str	r3, [r7, #56]	; 0x38
 800de54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800de62:	b29b      	uxth	r3, r3
 800de64:	461a      	mov	r2, r3
 800de66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de68:	4413      	add	r3, r2
 800de6a:	63bb      	str	r3, [r7, #56]	; 0x38
 800de6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	781b      	ldrb	r3, [r3, #0]
 800de78:	00da      	lsls	r2, r3, #3
 800de7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de7c:	4413      	add	r3, r2
 800de7e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800de82:	637b      	str	r3, [r7, #52]	; 0x34
 800de84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800de88:	2b3e      	cmp	r3, #62	; 0x3e
 800de8a:	d91c      	bls.n	800dec6 <USB_EPStartXfer+0x7b0>
 800de8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800de90:	095b      	lsrs	r3, r3, #5
 800de92:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800de96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800de9a:	f003 031f 	and.w	r3, r3, #31
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d104      	bne.n	800deac <USB_EPStartXfer+0x796>
 800dea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dea6:	3b01      	subs	r3, #1
 800dea8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800deac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800deb0:	b29b      	uxth	r3, r3
 800deb2:	029b      	lsls	r3, r3, #10
 800deb4:	b29b      	uxth	r3, r3
 800deb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800deba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800debe:	b29a      	uxth	r2, r3
 800dec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dec2:	801a      	strh	r2, [r3, #0]
 800dec4:	e053      	b.n	800df6e <USB_EPStartXfer+0x858>
 800dec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800deca:	2b00      	cmp	r3, #0
 800decc:	d112      	bne.n	800def4 <USB_EPStartXfer+0x7de>
 800dece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ded0:	881b      	ldrh	r3, [r3, #0]
 800ded2:	b29b      	uxth	r3, r3
 800ded4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ded8:	b29a      	uxth	r2, r3
 800deda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dedc:	801a      	strh	r2, [r3, #0]
 800dede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dee0:	881b      	ldrh	r3, [r3, #0]
 800dee2:	b29b      	uxth	r3, r3
 800dee4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dee8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800deec:	b29a      	uxth	r2, r3
 800deee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800def0:	801a      	strh	r2, [r3, #0]
 800def2:	e03c      	b.n	800df6e <USB_EPStartXfer+0x858>
 800def4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800def8:	085b      	lsrs	r3, r3, #1
 800defa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800defe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800df02:	f003 0301 	and.w	r3, r3, #1
 800df06:	2b00      	cmp	r3, #0
 800df08:	d004      	beq.n	800df14 <USB_EPStartXfer+0x7fe>
 800df0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800df0e:	3301      	adds	r3, #1
 800df10:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800df14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800df18:	b29b      	uxth	r3, r3
 800df1a:	029b      	lsls	r3, r3, #10
 800df1c:	b29a      	uxth	r2, r3
 800df1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df20:	801a      	strh	r2, [r3, #0]
 800df22:	e024      	b.n	800df6e <USB_EPStartXfer+0x858>
 800df24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	785b      	ldrb	r3, [r3, #1]
 800df30:	2b01      	cmp	r3, #1
 800df32:	d11c      	bne.n	800df6e <USB_EPStartXfer+0x858>
 800df34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800df42:	b29b      	uxth	r3, r3
 800df44:	461a      	mov	r2, r3
 800df46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df48:	4413      	add	r3, r2
 800df4a:	643b      	str	r3, [r7, #64]	; 0x40
 800df4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	781b      	ldrb	r3, [r3, #0]
 800df58:	00da      	lsls	r2, r3, #3
 800df5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df5c:	4413      	add	r3, r2
 800df5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800df62:	63fb      	str	r3, [r7, #60]	; 0x3c
 800df64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800df68:	b29a      	uxth	r2, r3
 800df6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df6c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800df6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	895b      	ldrh	r3, [r3, #10]
 800df7a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800df7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	6959      	ldr	r1, [r3, #20]
 800df8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800df8e:	b29b      	uxth	r3, r3
 800df90:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800df94:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800df98:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800df9c:	6800      	ldr	r0, [r0, #0]
 800df9e:	f001 f82a 	bl	800eff6 <USB_WritePMA>
 800dfa2:	e213      	b.n	800e3cc <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800dfa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dfa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	6a1b      	ldr	r3, [r3, #32]
 800dfb0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800dfb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dfb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dfbc:	681a      	ldr	r2, [r3, #0]
 800dfbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dfc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	781b      	ldrb	r3, [r3, #0]
 800dfca:	009b      	lsls	r3, r3, #2
 800dfcc:	4413      	add	r3, r2
 800dfce:	881b      	ldrh	r3, [r3, #0]
 800dfd0:	b29b      	uxth	r3, r3
 800dfd2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800dfd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dfda:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800dfde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dfe2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dfe6:	681a      	ldr	r2, [r3, #0]
 800dfe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dfec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	781b      	ldrb	r3, [r3, #0]
 800dff4:	009b      	lsls	r3, r3, #2
 800dff6:	441a      	add	r2, r3
 800dff8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800dffc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e000:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e004:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e00c:	b29b      	uxth	r3, r3
 800e00e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e010:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e014:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e01c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e020:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e02a:	b29b      	uxth	r3, r3
 800e02c:	461a      	mov	r2, r3
 800e02e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e030:	4413      	add	r3, r2
 800e032:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e034:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e038:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	781b      	ldrb	r3, [r3, #0]
 800e040:	00da      	lsls	r2, r3, #3
 800e042:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e044:	4413      	add	r3, r2
 800e046:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e04a:	65bb      	str	r3, [r7, #88]	; 0x58
 800e04c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e050:	b29a      	uxth	r2, r3
 800e052:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e054:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800e056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e05a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	891b      	ldrh	r3, [r3, #8]
 800e062:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e066:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e06a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	6959      	ldr	r1, [r3, #20]
 800e072:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e076:	b29b      	uxth	r3, r3
 800e078:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e07c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e080:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e084:	6800      	ldr	r0, [r0, #0]
 800e086:	f000 ffb6 	bl	800eff6 <USB_WritePMA>
 800e08a:	e19f      	b.n	800e3cc <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800e08c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e090:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	6a1a      	ldr	r2, [r3, #32]
 800e098:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e09c:	1ad2      	subs	r2, r2, r3
 800e09e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e0aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e0b2:	681a      	ldr	r2, [r3, #0]
 800e0b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	781b      	ldrb	r3, [r3, #0]
 800e0c0:	009b      	lsls	r3, r3, #2
 800e0c2:	4413      	add	r3, r2
 800e0c4:	881b      	ldrh	r3, [r3, #0]
 800e0c6:	b29b      	uxth	r3, r3
 800e0c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	f000 80bc 	beq.w	800e24a <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e0d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	673b      	str	r3, [r7, #112]	; 0x70
 800e0de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	785b      	ldrb	r3, [r3, #1]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d16d      	bne.n	800e1ca <USB_EPStartXfer+0xab4>
 800e0ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	66bb      	str	r3, [r7, #104]	; 0x68
 800e0fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e108:	b29b      	uxth	r3, r3
 800e10a:	461a      	mov	r2, r3
 800e10c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e10e:	4413      	add	r3, r2
 800e110:	66bb      	str	r3, [r7, #104]	; 0x68
 800e112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e116:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	781b      	ldrb	r3, [r3, #0]
 800e11e:	00da      	lsls	r2, r3, #3
 800e120:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e122:	4413      	add	r3, r2
 800e124:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e128:	667b      	str	r3, [r7, #100]	; 0x64
 800e12a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e12e:	2b3e      	cmp	r3, #62	; 0x3e
 800e130:	d91c      	bls.n	800e16c <USB_EPStartXfer+0xa56>
 800e132:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e136:	095b      	lsrs	r3, r3, #5
 800e138:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800e13c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e140:	f003 031f 	and.w	r3, r3, #31
 800e144:	2b00      	cmp	r3, #0
 800e146:	d104      	bne.n	800e152 <USB_EPStartXfer+0xa3c>
 800e148:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e14c:	3b01      	subs	r3, #1
 800e14e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800e152:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e156:	b29b      	uxth	r3, r3
 800e158:	029b      	lsls	r3, r3, #10
 800e15a:	b29b      	uxth	r3, r3
 800e15c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e160:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e164:	b29a      	uxth	r2, r3
 800e166:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e168:	801a      	strh	r2, [r3, #0]
 800e16a:	e053      	b.n	800e214 <USB_EPStartXfer+0xafe>
 800e16c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e170:	2b00      	cmp	r3, #0
 800e172:	d112      	bne.n	800e19a <USB_EPStartXfer+0xa84>
 800e174:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e176:	881b      	ldrh	r3, [r3, #0]
 800e178:	b29b      	uxth	r3, r3
 800e17a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e17e:	b29a      	uxth	r2, r3
 800e180:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e182:	801a      	strh	r2, [r3, #0]
 800e184:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e186:	881b      	ldrh	r3, [r3, #0]
 800e188:	b29b      	uxth	r3, r3
 800e18a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e18e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e192:	b29a      	uxth	r2, r3
 800e194:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e196:	801a      	strh	r2, [r3, #0]
 800e198:	e03c      	b.n	800e214 <USB_EPStartXfer+0xafe>
 800e19a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e19e:	085b      	lsrs	r3, r3, #1
 800e1a0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800e1a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e1a8:	f003 0301 	and.w	r3, r3, #1
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d004      	beq.n	800e1ba <USB_EPStartXfer+0xaa4>
 800e1b0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e1b4:	3301      	adds	r3, #1
 800e1b6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800e1ba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e1be:	b29b      	uxth	r3, r3
 800e1c0:	029b      	lsls	r3, r3, #10
 800e1c2:	b29a      	uxth	r2, r3
 800e1c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e1c6:	801a      	strh	r2, [r3, #0]
 800e1c8:	e024      	b.n	800e214 <USB_EPStartXfer+0xafe>
 800e1ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	785b      	ldrb	r3, [r3, #1]
 800e1d6:	2b01      	cmp	r3, #1
 800e1d8:	d11c      	bne.n	800e214 <USB_EPStartXfer+0xafe>
 800e1da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e1e8:	b29b      	uxth	r3, r3
 800e1ea:	461a      	mov	r2, r3
 800e1ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e1ee:	4413      	add	r3, r2
 800e1f0:	673b      	str	r3, [r7, #112]	; 0x70
 800e1f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	781b      	ldrb	r3, [r3, #0]
 800e1fe:	00da      	lsls	r2, r3, #3
 800e200:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e202:	4413      	add	r3, r2
 800e204:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e208:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e20a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e20e:	b29a      	uxth	r2, r3
 800e210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e212:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800e214:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e218:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	895b      	ldrh	r3, [r3, #10]
 800e220:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e224:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e228:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	6959      	ldr	r1, [r3, #20]
 800e230:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e234:	b29b      	uxth	r3, r3
 800e236:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e23a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e23e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e242:	6800      	ldr	r0, [r0, #0]
 800e244:	f000 fed7 	bl	800eff6 <USB_WritePMA>
 800e248:	e0c0      	b.n	800e3cc <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e24a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e24e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	785b      	ldrb	r3, [r3, #1]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d16d      	bne.n	800e336 <USB_EPStartXfer+0xc20>
 800e25a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e25e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e266:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e26a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e274:	b29b      	uxth	r3, r3
 800e276:	461a      	mov	r2, r3
 800e278:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e27a:	4413      	add	r3, r2
 800e27c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e27e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e282:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	781b      	ldrb	r3, [r3, #0]
 800e28a:	00da      	lsls	r2, r3, #3
 800e28c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e28e:	4413      	add	r3, r2
 800e290:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e294:	67bb      	str	r3, [r7, #120]	; 0x78
 800e296:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e29a:	2b3e      	cmp	r3, #62	; 0x3e
 800e29c:	d91c      	bls.n	800e2d8 <USB_EPStartXfer+0xbc2>
 800e29e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e2a2:	095b      	lsrs	r3, r3, #5
 800e2a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e2a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e2ac:	f003 031f 	and.w	r3, r3, #31
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d104      	bne.n	800e2be <USB_EPStartXfer+0xba8>
 800e2b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e2b8:	3b01      	subs	r3, #1
 800e2ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e2be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e2c2:	b29b      	uxth	r3, r3
 800e2c4:	029b      	lsls	r3, r3, #10
 800e2c6:	b29b      	uxth	r3, r3
 800e2c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e2cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e2d0:	b29a      	uxth	r2, r3
 800e2d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e2d4:	801a      	strh	r2, [r3, #0]
 800e2d6:	e05f      	b.n	800e398 <USB_EPStartXfer+0xc82>
 800e2d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d112      	bne.n	800e306 <USB_EPStartXfer+0xbf0>
 800e2e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e2e2:	881b      	ldrh	r3, [r3, #0]
 800e2e4:	b29b      	uxth	r3, r3
 800e2e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e2ea:	b29a      	uxth	r2, r3
 800e2ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e2ee:	801a      	strh	r2, [r3, #0]
 800e2f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e2f2:	881b      	ldrh	r3, [r3, #0]
 800e2f4:	b29b      	uxth	r3, r3
 800e2f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e2fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e2fe:	b29a      	uxth	r2, r3
 800e300:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e302:	801a      	strh	r2, [r3, #0]
 800e304:	e048      	b.n	800e398 <USB_EPStartXfer+0xc82>
 800e306:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e30a:	085b      	lsrs	r3, r3, #1
 800e30c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e310:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e314:	f003 0301 	and.w	r3, r3, #1
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d004      	beq.n	800e326 <USB_EPStartXfer+0xc10>
 800e31c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e320:	3301      	adds	r3, #1
 800e322:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e326:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e32a:	b29b      	uxth	r3, r3
 800e32c:	029b      	lsls	r3, r3, #10
 800e32e:	b29a      	uxth	r2, r3
 800e330:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e332:	801a      	strh	r2, [r3, #0]
 800e334:	e030      	b.n	800e398 <USB_EPStartXfer+0xc82>
 800e336:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e33a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	785b      	ldrb	r3, [r3, #1]
 800e342:	2b01      	cmp	r3, #1
 800e344:	d128      	bne.n	800e398 <USB_EPStartXfer+0xc82>
 800e346:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e34a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e358:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e362:	b29b      	uxth	r3, r3
 800e364:	461a      	mov	r2, r3
 800e366:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e36a:	4413      	add	r3, r2
 800e36c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e370:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e374:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	781b      	ldrb	r3, [r3, #0]
 800e37c:	00da      	lsls	r2, r3, #3
 800e37e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e382:	4413      	add	r3, r2
 800e384:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e388:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e38c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e390:	b29a      	uxth	r2, r3
 800e392:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e396:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800e398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e39c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	891b      	ldrh	r3, [r3, #8]
 800e3a4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e3a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	6959      	ldr	r1, [r3, #20]
 800e3b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e3b8:	b29b      	uxth	r3, r3
 800e3ba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e3be:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e3c2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e3c6:	6800      	ldr	r0, [r0, #0]
 800e3c8:	f000 fe15 	bl	800eff6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800e3cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e3d4:	681a      	ldr	r2, [r3, #0]
 800e3d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	781b      	ldrb	r3, [r3, #0]
 800e3e2:	009b      	lsls	r3, r3, #2
 800e3e4:	4413      	add	r3, r2
 800e3e6:	881b      	ldrh	r3, [r3, #0]
 800e3e8:	b29b      	uxth	r3, r3
 800e3ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e3ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e3f2:	817b      	strh	r3, [r7, #10]
 800e3f4:	897b      	ldrh	r3, [r7, #10]
 800e3f6:	f083 0310 	eor.w	r3, r3, #16
 800e3fa:	817b      	strh	r3, [r7, #10]
 800e3fc:	897b      	ldrh	r3, [r7, #10]
 800e3fe:	f083 0320 	eor.w	r3, r3, #32
 800e402:	817b      	strh	r3, [r7, #10]
 800e404:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e408:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e40c:	681a      	ldr	r2, [r3, #0]
 800e40e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e412:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	781b      	ldrb	r3, [r3, #0]
 800e41a:	009b      	lsls	r3, r3, #2
 800e41c:	441a      	add	r2, r3
 800e41e:	897b      	ldrh	r3, [r7, #10]
 800e420:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e424:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e428:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e42c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e430:	b29b      	uxth	r3, r3
 800e432:	8013      	strh	r3, [r2, #0]
 800e434:	f000 bc9f 	b.w	800ed76 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800e438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e43c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	7b1b      	ldrb	r3, [r3, #12]
 800e444:	2b00      	cmp	r3, #0
 800e446:	f040 80ae 	bne.w	800e5a6 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800e44a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e44e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	699a      	ldr	r2, [r3, #24]
 800e456:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e45a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	691b      	ldr	r3, [r3, #16]
 800e462:	429a      	cmp	r2, r3
 800e464:	d917      	bls.n	800e496 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800e466:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e46a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	691b      	ldr	r3, [r3, #16]
 800e472:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800e476:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e47a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	699a      	ldr	r2, [r3, #24]
 800e482:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e486:	1ad2      	subs	r2, r2, r3
 800e488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e48c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	619a      	str	r2, [r3, #24]
 800e494:	e00e      	b.n	800e4b4 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800e496:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e49a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	699b      	ldr	r3, [r3, #24]
 800e4a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800e4a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800e4b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e4c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e4d0:	b29b      	uxth	r3, r3
 800e4d2:	461a      	mov	r2, r3
 800e4d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e4d8:	4413      	add	r3, r2
 800e4da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e4de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	781b      	ldrb	r3, [r3, #0]
 800e4ea:	00da      	lsls	r2, r3, #3
 800e4ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e4f0:	4413      	add	r3, r2
 800e4f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e4f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e4fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e4fe:	2b3e      	cmp	r3, #62	; 0x3e
 800e500:	d91d      	bls.n	800e53e <USB_EPStartXfer+0xe28>
 800e502:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e506:	095b      	lsrs	r3, r3, #5
 800e508:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e50c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e510:	f003 031f 	and.w	r3, r3, #31
 800e514:	2b00      	cmp	r3, #0
 800e516:	d104      	bne.n	800e522 <USB_EPStartXfer+0xe0c>
 800e518:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e51c:	3b01      	subs	r3, #1
 800e51e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e522:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e526:	b29b      	uxth	r3, r3
 800e528:	029b      	lsls	r3, r3, #10
 800e52a:	b29b      	uxth	r3, r3
 800e52c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e530:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e534:	b29a      	uxth	r2, r3
 800e536:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e53a:	801a      	strh	r2, [r3, #0]
 800e53c:	e3e1      	b.n	800ed02 <USB_EPStartXfer+0x15ec>
 800e53e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e542:	2b00      	cmp	r3, #0
 800e544:	d116      	bne.n	800e574 <USB_EPStartXfer+0xe5e>
 800e546:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e54a:	881b      	ldrh	r3, [r3, #0]
 800e54c:	b29b      	uxth	r3, r3
 800e54e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e552:	b29a      	uxth	r2, r3
 800e554:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e558:	801a      	strh	r2, [r3, #0]
 800e55a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e55e:	881b      	ldrh	r3, [r3, #0]
 800e560:	b29b      	uxth	r3, r3
 800e562:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e566:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e56a:	b29a      	uxth	r2, r3
 800e56c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e570:	801a      	strh	r2, [r3, #0]
 800e572:	e3c6      	b.n	800ed02 <USB_EPStartXfer+0x15ec>
 800e574:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e578:	085b      	lsrs	r3, r3, #1
 800e57a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e57e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e582:	f003 0301 	and.w	r3, r3, #1
 800e586:	2b00      	cmp	r3, #0
 800e588:	d004      	beq.n	800e594 <USB_EPStartXfer+0xe7e>
 800e58a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e58e:	3301      	adds	r3, #1
 800e590:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e594:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e598:	b29b      	uxth	r3, r3
 800e59a:	029b      	lsls	r3, r3, #10
 800e59c:	b29a      	uxth	r2, r3
 800e59e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e5a2:	801a      	strh	r2, [r3, #0]
 800e5a4:	e3ad      	b.n	800ed02 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800e5a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	78db      	ldrb	r3, [r3, #3]
 800e5b2:	2b02      	cmp	r3, #2
 800e5b4:	f040 8200 	bne.w	800e9b8 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800e5b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	785b      	ldrb	r3, [r3, #1]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	f040 8091 	bne.w	800e6ec <USB_EPStartXfer+0xfd6>
 800e5ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e5d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e5e6:	b29b      	uxth	r3, r3
 800e5e8:	461a      	mov	r2, r3
 800e5ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e5ee:	4413      	add	r3, r2
 800e5f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e5f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	781b      	ldrb	r3, [r3, #0]
 800e600:	00da      	lsls	r2, r3, #3
 800e602:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e606:	4413      	add	r3, r2
 800e608:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e60c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800e610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e614:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	691b      	ldr	r3, [r3, #16]
 800e61c:	2b3e      	cmp	r3, #62	; 0x3e
 800e61e:	d925      	bls.n	800e66c <USB_EPStartXfer+0xf56>
 800e620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e624:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	691b      	ldr	r3, [r3, #16]
 800e62c:	095b      	lsrs	r3, r3, #5
 800e62e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e632:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e636:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	691b      	ldr	r3, [r3, #16]
 800e63e:	f003 031f 	and.w	r3, r3, #31
 800e642:	2b00      	cmp	r3, #0
 800e644:	d104      	bne.n	800e650 <USB_EPStartXfer+0xf3a>
 800e646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e64a:	3b01      	subs	r3, #1
 800e64c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e654:	b29b      	uxth	r3, r3
 800e656:	029b      	lsls	r3, r3, #10
 800e658:	b29b      	uxth	r3, r3
 800e65a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e65e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e662:	b29a      	uxth	r2, r3
 800e664:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e668:	801a      	strh	r2, [r3, #0]
 800e66a:	e074      	b.n	800e756 <USB_EPStartXfer+0x1040>
 800e66c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e670:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	691b      	ldr	r3, [r3, #16]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d116      	bne.n	800e6aa <USB_EPStartXfer+0xf94>
 800e67c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e680:	881b      	ldrh	r3, [r3, #0]
 800e682:	b29b      	uxth	r3, r3
 800e684:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e688:	b29a      	uxth	r2, r3
 800e68a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e68e:	801a      	strh	r2, [r3, #0]
 800e690:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e694:	881b      	ldrh	r3, [r3, #0]
 800e696:	b29b      	uxth	r3, r3
 800e698:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e69c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e6a0:	b29a      	uxth	r2, r3
 800e6a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e6a6:	801a      	strh	r2, [r3, #0]
 800e6a8:	e055      	b.n	800e756 <USB_EPStartXfer+0x1040>
 800e6aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	691b      	ldr	r3, [r3, #16]
 800e6b6:	085b      	lsrs	r3, r3, #1
 800e6b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e6bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	691b      	ldr	r3, [r3, #16]
 800e6c8:	f003 0301 	and.w	r3, r3, #1
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d004      	beq.n	800e6da <USB_EPStartXfer+0xfc4>
 800e6d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6d4:	3301      	adds	r3, #1
 800e6d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e6da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6de:	b29b      	uxth	r3, r3
 800e6e0:	029b      	lsls	r3, r3, #10
 800e6e2:	b29a      	uxth	r2, r3
 800e6e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e6e8:	801a      	strh	r2, [r3, #0]
 800e6ea:	e034      	b.n	800e756 <USB_EPStartXfer+0x1040>
 800e6ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	785b      	ldrb	r3, [r3, #1]
 800e6f8:	2b01      	cmp	r3, #1
 800e6fa:	d12c      	bne.n	800e756 <USB_EPStartXfer+0x1040>
 800e6fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e700:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e70a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e70e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e718:	b29b      	uxth	r3, r3
 800e71a:	461a      	mov	r2, r3
 800e71c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e720:	4413      	add	r3, r2
 800e722:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e72a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	781b      	ldrb	r3, [r3, #0]
 800e732:	00da      	lsls	r2, r3, #3
 800e734:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e738:	4413      	add	r3, r2
 800e73a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e73e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	691b      	ldr	r3, [r3, #16]
 800e74e:	b29a      	uxth	r2, r3
 800e750:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e754:	801a      	strh	r2, [r3, #0]
 800e756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e75a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800e764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e768:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	785b      	ldrb	r3, [r3, #1]
 800e770:	2b00      	cmp	r3, #0
 800e772:	f040 8091 	bne.w	800e898 <USB_EPStartXfer+0x1182>
 800e776:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e77a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e788:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e792:	b29b      	uxth	r3, r3
 800e794:	461a      	mov	r2, r3
 800e796:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e79a:	4413      	add	r3, r2
 800e79c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e7a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	781b      	ldrb	r3, [r3, #0]
 800e7ac:	00da      	lsls	r2, r3, #3
 800e7ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e7b2:	4413      	add	r3, r2
 800e7b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e7b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e7bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	691b      	ldr	r3, [r3, #16]
 800e7c8:	2b3e      	cmp	r3, #62	; 0x3e
 800e7ca:	d925      	bls.n	800e818 <USB_EPStartXfer+0x1102>
 800e7cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	691b      	ldr	r3, [r3, #16]
 800e7d8:	095b      	lsrs	r3, r3, #5
 800e7da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e7de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	691b      	ldr	r3, [r3, #16]
 800e7ea:	f003 031f 	and.w	r3, r3, #31
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d104      	bne.n	800e7fc <USB_EPStartXfer+0x10e6>
 800e7f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e7f6:	3b01      	subs	r3, #1
 800e7f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e7fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e800:	b29b      	uxth	r3, r3
 800e802:	029b      	lsls	r3, r3, #10
 800e804:	b29b      	uxth	r3, r3
 800e806:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e80a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e80e:	b29a      	uxth	r2, r3
 800e810:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e814:	801a      	strh	r2, [r3, #0]
 800e816:	e06d      	b.n	800e8f4 <USB_EPStartXfer+0x11de>
 800e818:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e81c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	691b      	ldr	r3, [r3, #16]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d116      	bne.n	800e856 <USB_EPStartXfer+0x1140>
 800e828:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e82c:	881b      	ldrh	r3, [r3, #0]
 800e82e:	b29b      	uxth	r3, r3
 800e830:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e834:	b29a      	uxth	r2, r3
 800e836:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e83a:	801a      	strh	r2, [r3, #0]
 800e83c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e840:	881b      	ldrh	r3, [r3, #0]
 800e842:	b29b      	uxth	r3, r3
 800e844:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e848:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e84c:	b29a      	uxth	r2, r3
 800e84e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e852:	801a      	strh	r2, [r3, #0]
 800e854:	e04e      	b.n	800e8f4 <USB_EPStartXfer+0x11de>
 800e856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e85a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	691b      	ldr	r3, [r3, #16]
 800e862:	085b      	lsrs	r3, r3, #1
 800e864:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e868:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e86c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	691b      	ldr	r3, [r3, #16]
 800e874:	f003 0301 	and.w	r3, r3, #1
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d004      	beq.n	800e886 <USB_EPStartXfer+0x1170>
 800e87c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e880:	3301      	adds	r3, #1
 800e882:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e886:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e88a:	b29b      	uxth	r3, r3
 800e88c:	029b      	lsls	r3, r3, #10
 800e88e:	b29a      	uxth	r2, r3
 800e890:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e894:	801a      	strh	r2, [r3, #0]
 800e896:	e02d      	b.n	800e8f4 <USB_EPStartXfer+0x11de>
 800e898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e89c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	785b      	ldrb	r3, [r3, #1]
 800e8a4:	2b01      	cmp	r3, #1
 800e8a6:	d125      	bne.n	800e8f4 <USB_EPStartXfer+0x11de>
 800e8a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e8b6:	b29b      	uxth	r3, r3
 800e8b8:	461a      	mov	r2, r3
 800e8ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e8be:	4413      	add	r3, r2
 800e8c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800e8c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	781b      	ldrb	r3, [r3, #0]
 800e8d0:	00da      	lsls	r2, r3, #3
 800e8d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e8d6:	4413      	add	r3, r2
 800e8d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e8dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e8e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	691b      	ldr	r3, [r3, #16]
 800e8ec:	b29a      	uxth	r2, r3
 800e8ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e8f2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800e8f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	69db      	ldr	r3, [r3, #28]
 800e900:	2b00      	cmp	r3, #0
 800e902:	f000 81fe 	beq.w	800ed02 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800e906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e90a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e90e:	681a      	ldr	r2, [r3, #0]
 800e910:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e914:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	781b      	ldrb	r3, [r3, #0]
 800e91c:	009b      	lsls	r3, r3, #2
 800e91e:	4413      	add	r3, r2
 800e920:	881b      	ldrh	r3, [r3, #0]
 800e922:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e926:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800e92a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d005      	beq.n	800e93e <USB_EPStartXfer+0x1228>
 800e932:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800e936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d10d      	bne.n	800e95a <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e93e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800e942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e946:	2b00      	cmp	r3, #0
 800e948:	f040 81db 	bne.w	800ed02 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e94c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800e950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e954:	2b00      	cmp	r3, #0
 800e956:	f040 81d4 	bne.w	800ed02 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800e95a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e95e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e962:	681a      	ldr	r2, [r3, #0]
 800e964:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e968:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	781b      	ldrb	r3, [r3, #0]
 800e970:	009b      	lsls	r3, r3, #2
 800e972:	4413      	add	r3, r2
 800e974:	881b      	ldrh	r3, [r3, #0]
 800e976:	b29b      	uxth	r3, r3
 800e978:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e97c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e980:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800e984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e988:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e98c:	681a      	ldr	r2, [r3, #0]
 800e98e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e992:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	781b      	ldrb	r3, [r3, #0]
 800e99a:	009b      	lsls	r3, r3, #2
 800e99c:	441a      	add	r2, r3
 800e99e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800e9a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e9a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e9aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e9ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e9b2:	b29b      	uxth	r3, r3
 800e9b4:	8013      	strh	r3, [r2, #0]
 800e9b6:	e1a4      	b.n	800ed02 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800e9b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	78db      	ldrb	r3, [r3, #3]
 800e9c4:	2b01      	cmp	r3, #1
 800e9c6:	f040 819a 	bne.w	800ecfe <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800e9ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	699a      	ldr	r2, [r3, #24]
 800e9d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	691b      	ldr	r3, [r3, #16]
 800e9e2:	429a      	cmp	r2, r3
 800e9e4:	d917      	bls.n	800ea16 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800e9e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	691b      	ldr	r3, [r3, #16]
 800e9f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800e9f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	699a      	ldr	r2, [r3, #24]
 800ea02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ea06:	1ad2      	subs	r2, r2, r3
 800ea08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	619a      	str	r2, [r3, #24]
 800ea14:	e00e      	b.n	800ea34 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800ea16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	699b      	ldr	r3, [r3, #24]
 800ea22:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800ea26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	2200      	movs	r2, #0
 800ea32:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800ea34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	785b      	ldrb	r3, [r3, #1]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d178      	bne.n	800eb36 <USB_EPStartXfer+0x1420>
 800ea44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ea52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ea60:	b29b      	uxth	r3, r3
 800ea62:	461a      	mov	r2, r3
 800ea64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ea68:	4413      	add	r3, r2
 800ea6a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ea6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	781b      	ldrb	r3, [r3, #0]
 800ea7a:	00da      	lsls	r2, r3, #3
 800ea7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ea80:	4413      	add	r3, r2
 800ea82:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ea86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ea8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ea8e:	2b3e      	cmp	r3, #62	; 0x3e
 800ea90:	d91d      	bls.n	800eace <USB_EPStartXfer+0x13b8>
 800ea92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ea96:	095b      	lsrs	r3, r3, #5
 800ea98:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ea9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eaa0:	f003 031f 	and.w	r3, r3, #31
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d104      	bne.n	800eab2 <USB_EPStartXfer+0x139c>
 800eaa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eaac:	3b01      	subs	r3, #1
 800eaae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800eab2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eab6:	b29b      	uxth	r3, r3
 800eab8:	029b      	lsls	r3, r3, #10
 800eaba:	b29b      	uxth	r3, r3
 800eabc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eac0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eac4:	b29a      	uxth	r2, r3
 800eac6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800eaca:	801a      	strh	r2, [r3, #0]
 800eacc:	e064      	b.n	800eb98 <USB_EPStartXfer+0x1482>
 800eace:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d116      	bne.n	800eb04 <USB_EPStartXfer+0x13ee>
 800ead6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800eada:	881b      	ldrh	r3, [r3, #0]
 800eadc:	b29b      	uxth	r3, r3
 800eade:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800eae2:	b29a      	uxth	r2, r3
 800eae4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800eae8:	801a      	strh	r2, [r3, #0]
 800eaea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800eaee:	881b      	ldrh	r3, [r3, #0]
 800eaf0:	b29b      	uxth	r3, r3
 800eaf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eaf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eafa:	b29a      	uxth	r2, r3
 800eafc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800eb00:	801a      	strh	r2, [r3, #0]
 800eb02:	e049      	b.n	800eb98 <USB_EPStartXfer+0x1482>
 800eb04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eb08:	085b      	lsrs	r3, r3, #1
 800eb0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800eb0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eb12:	f003 0301 	and.w	r3, r3, #1
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d004      	beq.n	800eb24 <USB_EPStartXfer+0x140e>
 800eb1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eb1e:	3301      	adds	r3, #1
 800eb20:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800eb24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eb28:	b29b      	uxth	r3, r3
 800eb2a:	029b      	lsls	r3, r3, #10
 800eb2c:	b29a      	uxth	r2, r3
 800eb2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800eb32:	801a      	strh	r2, [r3, #0]
 800eb34:	e030      	b.n	800eb98 <USB_EPStartXfer+0x1482>
 800eb36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	785b      	ldrb	r3, [r3, #1]
 800eb42:	2b01      	cmp	r3, #1
 800eb44:	d128      	bne.n	800eb98 <USB_EPStartXfer+0x1482>
 800eb46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800eb54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eb62:	b29b      	uxth	r3, r3
 800eb64:	461a      	mov	r2, r3
 800eb66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800eb6a:	4413      	add	r3, r2
 800eb6c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800eb70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	781b      	ldrb	r3, [r3, #0]
 800eb7c:	00da      	lsls	r2, r3, #3
 800eb7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800eb82:	4413      	add	r3, r2
 800eb84:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800eb88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800eb8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eb90:	b29a      	uxth	r2, r3
 800eb92:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800eb96:	801a      	strh	r2, [r3, #0]
 800eb98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800eba6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ebaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	785b      	ldrb	r3, [r3, #1]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d178      	bne.n	800eca8 <USB_EPStartXfer+0x1592>
 800ebb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ebba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ebc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ebc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ebd2:	b29b      	uxth	r3, r3
 800ebd4:	461a      	mov	r2, r3
 800ebd6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ebda:	4413      	add	r3, r2
 800ebdc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ebe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ebe4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	781b      	ldrb	r3, [r3, #0]
 800ebec:	00da      	lsls	r2, r3, #3
 800ebee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ebf2:	4413      	add	r3, r2
 800ebf4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ebf8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ebfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec00:	2b3e      	cmp	r3, #62	; 0x3e
 800ec02:	d91d      	bls.n	800ec40 <USB_EPStartXfer+0x152a>
 800ec04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec08:	095b      	lsrs	r3, r3, #5
 800ec0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ec0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec12:	f003 031f 	and.w	r3, r3, #31
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d104      	bne.n	800ec24 <USB_EPStartXfer+0x150e>
 800ec1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ec1e:	3b01      	subs	r3, #1
 800ec20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ec24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ec28:	b29b      	uxth	r3, r3
 800ec2a:	029b      	lsls	r3, r3, #10
 800ec2c:	b29b      	uxth	r3, r3
 800ec2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ec32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ec36:	b29a      	uxth	r2, r3
 800ec38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ec3c:	801a      	strh	r2, [r3, #0]
 800ec3e:	e060      	b.n	800ed02 <USB_EPStartXfer+0x15ec>
 800ec40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d116      	bne.n	800ec76 <USB_EPStartXfer+0x1560>
 800ec48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ec4c:	881b      	ldrh	r3, [r3, #0]
 800ec4e:	b29b      	uxth	r3, r3
 800ec50:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ec54:	b29a      	uxth	r2, r3
 800ec56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ec5a:	801a      	strh	r2, [r3, #0]
 800ec5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ec60:	881b      	ldrh	r3, [r3, #0]
 800ec62:	b29b      	uxth	r3, r3
 800ec64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ec68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ec6c:	b29a      	uxth	r2, r3
 800ec6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ec72:	801a      	strh	r2, [r3, #0]
 800ec74:	e045      	b.n	800ed02 <USB_EPStartXfer+0x15ec>
 800ec76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec7a:	085b      	lsrs	r3, r3, #1
 800ec7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ec80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec84:	f003 0301 	and.w	r3, r3, #1
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d004      	beq.n	800ec96 <USB_EPStartXfer+0x1580>
 800ec8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ec90:	3301      	adds	r3, #1
 800ec92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ec96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ec9a:	b29b      	uxth	r3, r3
 800ec9c:	029b      	lsls	r3, r3, #10
 800ec9e:	b29a      	uxth	r2, r3
 800eca0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800eca4:	801a      	strh	r2, [r3, #0]
 800eca6:	e02c      	b.n	800ed02 <USB_EPStartXfer+0x15ec>
 800eca8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ecac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	785b      	ldrb	r3, [r3, #1]
 800ecb4:	2b01      	cmp	r3, #1
 800ecb6:	d124      	bne.n	800ed02 <USB_EPStartXfer+0x15ec>
 800ecb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ecbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ecc6:	b29b      	uxth	r3, r3
 800ecc8:	461a      	mov	r2, r3
 800ecca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ecce:	4413      	add	r3, r2
 800ecd0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ecd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ecd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	781b      	ldrb	r3, [r3, #0]
 800ece0:	00da      	lsls	r2, r3, #3
 800ece2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ece6:	4413      	add	r3, r2
 800ece8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ecec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ecf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ecf4:	b29a      	uxth	r2, r3
 800ecf6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ecfa:	801a      	strh	r2, [r3, #0]
 800ecfc:	e001      	b.n	800ed02 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800ecfe:	2301      	movs	r3, #1
 800ed00:	e03a      	b.n	800ed78 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ed02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ed0a:	681a      	ldr	r2, [r3, #0]
 800ed0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	781b      	ldrb	r3, [r3, #0]
 800ed18:	009b      	lsls	r3, r3, #2
 800ed1a:	4413      	add	r3, r2
 800ed1c:	881b      	ldrh	r3, [r3, #0]
 800ed1e:	b29b      	uxth	r3, r3
 800ed20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ed24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed28:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ed2c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ed30:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ed34:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ed38:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ed3c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ed40:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ed44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ed4c:	681a      	ldr	r2, [r3, #0]
 800ed4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	781b      	ldrb	r3, [r3, #0]
 800ed5a:	009b      	lsls	r3, r3, #2
 800ed5c:	441a      	add	r2, r3
 800ed5e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ed62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ed66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ed6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ed6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed72:	b29b      	uxth	r3, r3
 800ed74:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ed76:	2300      	movs	r3, #0
}
 800ed78:	4618      	mov	r0, r3
 800ed7a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800ed7e:	46bd      	mov	sp, r7
 800ed80:	bd80      	pop	{r7, pc}

0800ed82 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ed82:	b480      	push	{r7}
 800ed84:	b085      	sub	sp, #20
 800ed86:	af00      	add	r7, sp, #0
 800ed88:	6078      	str	r0, [r7, #4]
 800ed8a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	785b      	ldrb	r3, [r3, #1]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d020      	beq.n	800edd6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ed94:	687a      	ldr	r2, [r7, #4]
 800ed96:	683b      	ldr	r3, [r7, #0]
 800ed98:	781b      	ldrb	r3, [r3, #0]
 800ed9a:	009b      	lsls	r3, r3, #2
 800ed9c:	4413      	add	r3, r2
 800ed9e:	881b      	ldrh	r3, [r3, #0]
 800eda0:	b29b      	uxth	r3, r3
 800eda2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eda6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800edaa:	81bb      	strh	r3, [r7, #12]
 800edac:	89bb      	ldrh	r3, [r7, #12]
 800edae:	f083 0310 	eor.w	r3, r3, #16
 800edb2:	81bb      	strh	r3, [r7, #12]
 800edb4:	687a      	ldr	r2, [r7, #4]
 800edb6:	683b      	ldr	r3, [r7, #0]
 800edb8:	781b      	ldrb	r3, [r3, #0]
 800edba:	009b      	lsls	r3, r3, #2
 800edbc:	441a      	add	r2, r3
 800edbe:	89bb      	ldrh	r3, [r7, #12]
 800edc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800edc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800edc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800edcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800edd0:	b29b      	uxth	r3, r3
 800edd2:	8013      	strh	r3, [r2, #0]
 800edd4:	e01f      	b.n	800ee16 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800edd6:	687a      	ldr	r2, [r7, #4]
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	781b      	ldrb	r3, [r3, #0]
 800eddc:	009b      	lsls	r3, r3, #2
 800edde:	4413      	add	r3, r2
 800ede0:	881b      	ldrh	r3, [r3, #0]
 800ede2:	b29b      	uxth	r3, r3
 800ede4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ede8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800edec:	81fb      	strh	r3, [r7, #14]
 800edee:	89fb      	ldrh	r3, [r7, #14]
 800edf0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800edf4:	81fb      	strh	r3, [r7, #14]
 800edf6:	687a      	ldr	r2, [r7, #4]
 800edf8:	683b      	ldr	r3, [r7, #0]
 800edfa:	781b      	ldrb	r3, [r3, #0]
 800edfc:	009b      	lsls	r3, r3, #2
 800edfe:	441a      	add	r2, r3
 800ee00:	89fb      	ldrh	r3, [r7, #14]
 800ee02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ee06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ee0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ee0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee12:	b29b      	uxth	r3, r3
 800ee14:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ee16:	2300      	movs	r3, #0
}
 800ee18:	4618      	mov	r0, r3
 800ee1a:	3714      	adds	r7, #20
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee22:	4770      	bx	lr

0800ee24 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ee24:	b480      	push	{r7}
 800ee26:	b087      	sub	sp, #28
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
 800ee2c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ee2e:	683b      	ldr	r3, [r7, #0]
 800ee30:	7b1b      	ldrb	r3, [r3, #12]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	f040 809d 	bne.w	800ef72 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800ee38:	683b      	ldr	r3, [r7, #0]
 800ee3a:	785b      	ldrb	r3, [r3, #1]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d04c      	beq.n	800eeda <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ee40:	687a      	ldr	r2, [r7, #4]
 800ee42:	683b      	ldr	r3, [r7, #0]
 800ee44:	781b      	ldrb	r3, [r3, #0]
 800ee46:	009b      	lsls	r3, r3, #2
 800ee48:	4413      	add	r3, r2
 800ee4a:	881b      	ldrh	r3, [r3, #0]
 800ee4c:	823b      	strh	r3, [r7, #16]
 800ee4e:	8a3b      	ldrh	r3, [r7, #16]
 800ee50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d01b      	beq.n	800ee90 <USB_EPClearStall+0x6c>
 800ee58:	687a      	ldr	r2, [r7, #4]
 800ee5a:	683b      	ldr	r3, [r7, #0]
 800ee5c:	781b      	ldrb	r3, [r3, #0]
 800ee5e:	009b      	lsls	r3, r3, #2
 800ee60:	4413      	add	r3, r2
 800ee62:	881b      	ldrh	r3, [r3, #0]
 800ee64:	b29b      	uxth	r3, r3
 800ee66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ee6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee6e:	81fb      	strh	r3, [r7, #14]
 800ee70:	687a      	ldr	r2, [r7, #4]
 800ee72:	683b      	ldr	r3, [r7, #0]
 800ee74:	781b      	ldrb	r3, [r3, #0]
 800ee76:	009b      	lsls	r3, r3, #2
 800ee78:	441a      	add	r2, r3
 800ee7a:	89fb      	ldrh	r3, [r7, #14]
 800ee7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ee80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ee84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ee88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ee8c:	b29b      	uxth	r3, r3
 800ee8e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ee90:	683b      	ldr	r3, [r7, #0]
 800ee92:	78db      	ldrb	r3, [r3, #3]
 800ee94:	2b01      	cmp	r3, #1
 800ee96:	d06c      	beq.n	800ef72 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ee98:	687a      	ldr	r2, [r7, #4]
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	781b      	ldrb	r3, [r3, #0]
 800ee9e:	009b      	lsls	r3, r3, #2
 800eea0:	4413      	add	r3, r2
 800eea2:	881b      	ldrh	r3, [r3, #0]
 800eea4:	b29b      	uxth	r3, r3
 800eea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eeaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eeae:	81bb      	strh	r3, [r7, #12]
 800eeb0:	89bb      	ldrh	r3, [r7, #12]
 800eeb2:	f083 0320 	eor.w	r3, r3, #32
 800eeb6:	81bb      	strh	r3, [r7, #12]
 800eeb8:	687a      	ldr	r2, [r7, #4]
 800eeba:	683b      	ldr	r3, [r7, #0]
 800eebc:	781b      	ldrb	r3, [r3, #0]
 800eebe:	009b      	lsls	r3, r3, #2
 800eec0:	441a      	add	r2, r3
 800eec2:	89bb      	ldrh	r3, [r7, #12]
 800eec4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eec8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eecc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800eed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eed4:	b29b      	uxth	r3, r3
 800eed6:	8013      	strh	r3, [r2, #0]
 800eed8:	e04b      	b.n	800ef72 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800eeda:	687a      	ldr	r2, [r7, #4]
 800eedc:	683b      	ldr	r3, [r7, #0]
 800eede:	781b      	ldrb	r3, [r3, #0]
 800eee0:	009b      	lsls	r3, r3, #2
 800eee2:	4413      	add	r3, r2
 800eee4:	881b      	ldrh	r3, [r3, #0]
 800eee6:	82fb      	strh	r3, [r7, #22]
 800eee8:	8afb      	ldrh	r3, [r7, #22]
 800eeea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d01b      	beq.n	800ef2a <USB_EPClearStall+0x106>
 800eef2:	687a      	ldr	r2, [r7, #4]
 800eef4:	683b      	ldr	r3, [r7, #0]
 800eef6:	781b      	ldrb	r3, [r3, #0]
 800eef8:	009b      	lsls	r3, r3, #2
 800eefa:	4413      	add	r3, r2
 800eefc:	881b      	ldrh	r3, [r3, #0]
 800eefe:	b29b      	uxth	r3, r3
 800ef00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ef04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef08:	82bb      	strh	r3, [r7, #20]
 800ef0a:	687a      	ldr	r2, [r7, #4]
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	781b      	ldrb	r3, [r3, #0]
 800ef10:	009b      	lsls	r3, r3, #2
 800ef12:	441a      	add	r2, r3
 800ef14:	8abb      	ldrh	r3, [r7, #20]
 800ef16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ef1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ef1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ef22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef26:	b29b      	uxth	r3, r3
 800ef28:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ef2a:	687a      	ldr	r2, [r7, #4]
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	781b      	ldrb	r3, [r3, #0]
 800ef30:	009b      	lsls	r3, r3, #2
 800ef32:	4413      	add	r3, r2
 800ef34:	881b      	ldrh	r3, [r3, #0]
 800ef36:	b29b      	uxth	r3, r3
 800ef38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ef3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef40:	827b      	strh	r3, [r7, #18]
 800ef42:	8a7b      	ldrh	r3, [r7, #18]
 800ef44:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ef48:	827b      	strh	r3, [r7, #18]
 800ef4a:	8a7b      	ldrh	r3, [r7, #18]
 800ef4c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ef50:	827b      	strh	r3, [r7, #18]
 800ef52:	687a      	ldr	r2, [r7, #4]
 800ef54:	683b      	ldr	r3, [r7, #0]
 800ef56:	781b      	ldrb	r3, [r3, #0]
 800ef58:	009b      	lsls	r3, r3, #2
 800ef5a:	441a      	add	r2, r3
 800ef5c:	8a7b      	ldrh	r3, [r7, #18]
 800ef5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ef62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ef66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ef6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef6e:	b29b      	uxth	r3, r3
 800ef70:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800ef72:	2300      	movs	r3, #0
}
 800ef74:	4618      	mov	r0, r3
 800ef76:	371c      	adds	r7, #28
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7e:	4770      	bx	lr

0800ef80 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800ef80:	b480      	push	{r7}
 800ef82:	b083      	sub	sp, #12
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]
 800ef88:	460b      	mov	r3, r1
 800ef8a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800ef8c:	78fb      	ldrb	r3, [r7, #3]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d103      	bne.n	800ef9a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	2280      	movs	r2, #128	; 0x80
 800ef96:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800ef9a:	2300      	movs	r3, #0
}
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	370c      	adds	r7, #12
 800efa0:	46bd      	mov	sp, r7
 800efa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa6:	4770      	bx	lr

0800efa8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800efa8:	b480      	push	{r7}
 800efaa:	b083      	sub	sp, #12
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800efb6:	b29b      	uxth	r3, r3
 800efb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800efbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800efc0:	b29a      	uxth	r2, r3
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800efc8:	2300      	movs	r3, #0
}
 800efca:	4618      	mov	r0, r3
 800efcc:	370c      	adds	r7, #12
 800efce:	46bd      	mov	sp, r7
 800efd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd4:	4770      	bx	lr

0800efd6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800efd6:	b480      	push	{r7}
 800efd8:	b085      	sub	sp, #20
 800efda:	af00      	add	r7, sp, #0
 800efdc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800efe4:	b29b      	uxth	r3, r3
 800efe6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800efe8:	68fb      	ldr	r3, [r7, #12]
}
 800efea:	4618      	mov	r0, r3
 800efec:	3714      	adds	r7, #20
 800efee:	46bd      	mov	sp, r7
 800eff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff4:	4770      	bx	lr

0800eff6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800eff6:	b480      	push	{r7}
 800eff8:	b08d      	sub	sp, #52	; 0x34
 800effa:	af00      	add	r7, sp, #0
 800effc:	60f8      	str	r0, [r7, #12]
 800effe:	60b9      	str	r1, [r7, #8]
 800f000:	4611      	mov	r1, r2
 800f002:	461a      	mov	r2, r3
 800f004:	460b      	mov	r3, r1
 800f006:	80fb      	strh	r3, [r7, #6]
 800f008:	4613      	mov	r3, r2
 800f00a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800f00c:	88bb      	ldrh	r3, [r7, #4]
 800f00e:	3301      	adds	r3, #1
 800f010:	085b      	lsrs	r3, r3, #1
 800f012:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800f018:	68bb      	ldr	r3, [r7, #8]
 800f01a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f01c:	88fa      	ldrh	r2, [r7, #6]
 800f01e:	69fb      	ldr	r3, [r7, #28]
 800f020:	4413      	add	r3, r2
 800f022:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f026:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800f028:	6a3b      	ldr	r3, [r7, #32]
 800f02a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f02c:	e01b      	b.n	800f066 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800f02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f030:	781b      	ldrb	r3, [r3, #0]
 800f032:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800f034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f036:	3301      	adds	r3, #1
 800f038:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800f03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f03c:	781b      	ldrb	r3, [r3, #0]
 800f03e:	b29b      	uxth	r3, r3
 800f040:	021b      	lsls	r3, r3, #8
 800f042:	b29b      	uxth	r3, r3
 800f044:	461a      	mov	r2, r3
 800f046:	69bb      	ldr	r3, [r7, #24]
 800f048:	4313      	orrs	r3, r2
 800f04a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800f04c:	697b      	ldr	r3, [r7, #20]
 800f04e:	b29a      	uxth	r2, r3
 800f050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f052:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800f054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f056:	3302      	adds	r3, #2
 800f058:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800f05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f05c:	3301      	adds	r3, #1
 800f05e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800f060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f062:	3b01      	subs	r3, #1
 800f064:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d1e0      	bne.n	800f02e <USB_WritePMA+0x38>
  }
}
 800f06c:	bf00      	nop
 800f06e:	bf00      	nop
 800f070:	3734      	adds	r7, #52	; 0x34
 800f072:	46bd      	mov	sp, r7
 800f074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f078:	4770      	bx	lr

0800f07a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800f07a:	b480      	push	{r7}
 800f07c:	b08b      	sub	sp, #44	; 0x2c
 800f07e:	af00      	add	r7, sp, #0
 800f080:	60f8      	str	r0, [r7, #12]
 800f082:	60b9      	str	r1, [r7, #8]
 800f084:	4611      	mov	r1, r2
 800f086:	461a      	mov	r2, r3
 800f088:	460b      	mov	r3, r1
 800f08a:	80fb      	strh	r3, [r7, #6]
 800f08c:	4613      	mov	r3, r2
 800f08e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800f090:	88bb      	ldrh	r3, [r7, #4]
 800f092:	085b      	lsrs	r3, r3, #1
 800f094:	b29b      	uxth	r3, r3
 800f096:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800f09c:	68bb      	ldr	r3, [r7, #8]
 800f09e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f0a0:	88fa      	ldrh	r2, [r7, #6]
 800f0a2:	697b      	ldr	r3, [r7, #20]
 800f0a4:	4413      	add	r3, r2
 800f0a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f0aa:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800f0ac:	69bb      	ldr	r3, [r7, #24]
 800f0ae:	627b      	str	r3, [r7, #36]	; 0x24
 800f0b0:	e018      	b.n	800f0e4 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800f0b2:	6a3b      	ldr	r3, [r7, #32]
 800f0b4:	881b      	ldrh	r3, [r3, #0]
 800f0b6:	b29b      	uxth	r3, r3
 800f0b8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800f0ba:	6a3b      	ldr	r3, [r7, #32]
 800f0bc:	3302      	adds	r3, #2
 800f0be:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800f0c0:	693b      	ldr	r3, [r7, #16]
 800f0c2:	b2da      	uxtb	r2, r3
 800f0c4:	69fb      	ldr	r3, [r7, #28]
 800f0c6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800f0c8:	69fb      	ldr	r3, [r7, #28]
 800f0ca:	3301      	adds	r3, #1
 800f0cc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800f0ce:	693b      	ldr	r3, [r7, #16]
 800f0d0:	0a1b      	lsrs	r3, r3, #8
 800f0d2:	b2da      	uxtb	r2, r3
 800f0d4:	69fb      	ldr	r3, [r7, #28]
 800f0d6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800f0d8:	69fb      	ldr	r3, [r7, #28]
 800f0da:	3301      	adds	r3, #1
 800f0dc:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800f0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0e0:	3b01      	subs	r3, #1
 800f0e2:	627b      	str	r3, [r7, #36]	; 0x24
 800f0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d1e3      	bne.n	800f0b2 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800f0ea:	88bb      	ldrh	r3, [r7, #4]
 800f0ec:	f003 0301 	and.w	r3, r3, #1
 800f0f0:	b29b      	uxth	r3, r3
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d007      	beq.n	800f106 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800f0f6:	6a3b      	ldr	r3, [r7, #32]
 800f0f8:	881b      	ldrh	r3, [r3, #0]
 800f0fa:	b29b      	uxth	r3, r3
 800f0fc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800f0fe:	693b      	ldr	r3, [r7, #16]
 800f100:	b2da      	uxtb	r2, r3
 800f102:	69fb      	ldr	r3, [r7, #28]
 800f104:	701a      	strb	r2, [r3, #0]
  }
}
 800f106:	bf00      	nop
 800f108:	372c      	adds	r7, #44	; 0x2c
 800f10a:	46bd      	mov	sp, r7
 800f10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f110:	4770      	bx	lr

0800f112 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f112:	b580      	push	{r7, lr}
 800f114:	b084      	sub	sp, #16
 800f116:	af00      	add	r7, sp, #0
 800f118:	6078      	str	r0, [r7, #4]
 800f11a:	460b      	mov	r3, r1
 800f11c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f11e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800f122:	f004 f9bf 	bl	80134a4 <USBD_static_malloc>
 800f126:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d105      	bne.n	800f13a <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	2200      	movs	r2, #0
 800f132:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800f136:	2302      	movs	r3, #2
 800f138:	e066      	b.n	800f208 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	68fa      	ldr	r2, [r7, #12]
 800f13e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	7c1b      	ldrb	r3, [r3, #16]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d119      	bne.n	800f17e <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f14a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f14e:	2202      	movs	r2, #2
 800f150:	2181      	movs	r1, #129	; 0x81
 800f152:	6878      	ldr	r0, [r7, #4]
 800f154:	f004 f84b 	bl	80131ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	2201      	movs	r2, #1
 800f15c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f15e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f162:	2202      	movs	r2, #2
 800f164:	2101      	movs	r1, #1
 800f166:	6878      	ldr	r0, [r7, #4]
 800f168:	f004 f841 	bl	80131ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	2201      	movs	r2, #1
 800f170:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	2210      	movs	r2, #16
 800f178:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800f17c:	e016      	b.n	800f1ac <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f17e:	2340      	movs	r3, #64	; 0x40
 800f180:	2202      	movs	r2, #2
 800f182:	2181      	movs	r1, #129	; 0x81
 800f184:	6878      	ldr	r0, [r7, #4]
 800f186:	f004 f832 	bl	80131ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	2201      	movs	r2, #1
 800f18e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f190:	2340      	movs	r3, #64	; 0x40
 800f192:	2202      	movs	r2, #2
 800f194:	2101      	movs	r1, #1
 800f196:	6878      	ldr	r0, [r7, #4]
 800f198:	f004 f829 	bl	80131ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	2201      	movs	r2, #1
 800f1a0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	2210      	movs	r2, #16
 800f1a8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f1ac:	2308      	movs	r3, #8
 800f1ae:	2203      	movs	r2, #3
 800f1b0:	2182      	movs	r1, #130	; 0x82
 800f1b2:	6878      	ldr	r0, [r7, #4]
 800f1b4:	f004 f81b 	bl	80131ee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	2201      	movs	r2, #1
 800f1bc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	7c1b      	ldrb	r3, [r3, #16]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d109      	bne.n	800f1f6 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f1e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f1ec:	2101      	movs	r1, #1
 800f1ee:	6878      	ldr	r0, [r7, #4]
 800f1f0:	f004 f8ed 	bl	80133ce <USBD_LL_PrepareReceive>
 800f1f4:	e007      	b.n	800f206 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f1fc:	2340      	movs	r3, #64	; 0x40
 800f1fe:	2101      	movs	r1, #1
 800f200:	6878      	ldr	r0, [r7, #4]
 800f202:	f004 f8e4 	bl	80133ce <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f206:	2300      	movs	r3, #0
}
 800f208:	4618      	mov	r0, r3
 800f20a:	3710      	adds	r7, #16
 800f20c:	46bd      	mov	sp, r7
 800f20e:	bd80      	pop	{r7, pc}

0800f210 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f210:	b580      	push	{r7, lr}
 800f212:	b082      	sub	sp, #8
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
 800f218:	460b      	mov	r3, r1
 800f21a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800f21c:	2181      	movs	r1, #129	; 0x81
 800f21e:	6878      	ldr	r0, [r7, #4]
 800f220:	f004 f80b 	bl	801323a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	2200      	movs	r2, #0
 800f228:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800f22a:	2101      	movs	r1, #1
 800f22c:	6878      	ldr	r0, [r7, #4]
 800f22e:	f004 f804 	bl	801323a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	2200      	movs	r2, #0
 800f236:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800f23a:	2182      	movs	r1, #130	; 0x82
 800f23c:	6878      	ldr	r0, [r7, #4]
 800f23e:	f003 fffc 	bl	801323a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	2200      	movs	r2, #0
 800f246:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	2200      	movs	r2, #0
 800f24e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d00e      	beq.n	800f27a <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f262:	685b      	ldr	r3, [r3, #4]
 800f264:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f26c:	4618      	mov	r0, r3
 800f26e:	f004 f927 	bl	80134c0 <USBD_static_free>
    pdev->pClassData = NULL;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	2200      	movs	r2, #0
 800f276:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f27a:	2300      	movs	r3, #0
}
 800f27c:	4618      	mov	r0, r3
 800f27e:	3708      	adds	r7, #8
 800f280:	46bd      	mov	sp, r7
 800f282:	bd80      	pop	{r7, pc}

0800f284 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b086      	sub	sp, #24
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]
 800f28c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f294:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800f296:	2300      	movs	r3, #0
 800f298:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800f29a:	2300      	movs	r3, #0
 800f29c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800f29e:	2300      	movs	r3, #0
 800f2a0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800f2a2:	693b      	ldr	r3, [r7, #16]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d101      	bne.n	800f2ac <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800f2a8:	2303      	movs	r3, #3
 800f2aa:	e0af      	b.n	800f40c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f2ac:	683b      	ldr	r3, [r7, #0]
 800f2ae:	781b      	ldrb	r3, [r3, #0]
 800f2b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d03f      	beq.n	800f338 <USBD_CDC_Setup+0xb4>
 800f2b8:	2b20      	cmp	r3, #32
 800f2ba:	f040 809f 	bne.w	800f3fc <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800f2be:	683b      	ldr	r3, [r7, #0]
 800f2c0:	88db      	ldrh	r3, [r3, #6]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d02e      	beq.n	800f324 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800f2c6:	683b      	ldr	r3, [r7, #0]
 800f2c8:	781b      	ldrb	r3, [r3, #0]
 800f2ca:	b25b      	sxtb	r3, r3
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	da16      	bge.n	800f2fe <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f2d6:	689b      	ldr	r3, [r3, #8]
 800f2d8:	683a      	ldr	r2, [r7, #0]
 800f2da:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800f2dc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f2de:	683a      	ldr	r2, [r7, #0]
 800f2e0:	88d2      	ldrh	r2, [r2, #6]
 800f2e2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	88db      	ldrh	r3, [r3, #6]
 800f2e8:	2b07      	cmp	r3, #7
 800f2ea:	bf28      	it	cs
 800f2ec:	2307      	movcs	r3, #7
 800f2ee:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f2f0:	693b      	ldr	r3, [r7, #16]
 800f2f2:	89fa      	ldrh	r2, [r7, #14]
 800f2f4:	4619      	mov	r1, r3
 800f2f6:	6878      	ldr	r0, [r7, #4]
 800f2f8:	f001 fa9f 	bl	801083a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800f2fc:	e085      	b.n	800f40a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800f2fe:	683b      	ldr	r3, [r7, #0]
 800f300:	785a      	ldrb	r2, [r3, #1]
 800f302:	693b      	ldr	r3, [r7, #16]
 800f304:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	88db      	ldrh	r3, [r3, #6]
 800f30c:	b2da      	uxtb	r2, r3
 800f30e:	693b      	ldr	r3, [r7, #16]
 800f310:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800f314:	6939      	ldr	r1, [r7, #16]
 800f316:	683b      	ldr	r3, [r7, #0]
 800f318:	88db      	ldrh	r3, [r3, #6]
 800f31a:	461a      	mov	r2, r3
 800f31c:	6878      	ldr	r0, [r7, #4]
 800f31e:	f001 fab8 	bl	8010892 <USBD_CtlPrepareRx>
      break;
 800f322:	e072      	b.n	800f40a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f32a:	689b      	ldr	r3, [r3, #8]
 800f32c:	683a      	ldr	r2, [r7, #0]
 800f32e:	7850      	ldrb	r0, [r2, #1]
 800f330:	2200      	movs	r2, #0
 800f332:	6839      	ldr	r1, [r7, #0]
 800f334:	4798      	blx	r3
      break;
 800f336:	e068      	b.n	800f40a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f338:	683b      	ldr	r3, [r7, #0]
 800f33a:	785b      	ldrb	r3, [r3, #1]
 800f33c:	2b0b      	cmp	r3, #11
 800f33e:	d852      	bhi.n	800f3e6 <USBD_CDC_Setup+0x162>
 800f340:	a201      	add	r2, pc, #4	; (adr r2, 800f348 <USBD_CDC_Setup+0xc4>)
 800f342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f346:	bf00      	nop
 800f348:	0800f379 	.word	0x0800f379
 800f34c:	0800f3f5 	.word	0x0800f3f5
 800f350:	0800f3e7 	.word	0x0800f3e7
 800f354:	0800f3e7 	.word	0x0800f3e7
 800f358:	0800f3e7 	.word	0x0800f3e7
 800f35c:	0800f3e7 	.word	0x0800f3e7
 800f360:	0800f3e7 	.word	0x0800f3e7
 800f364:	0800f3e7 	.word	0x0800f3e7
 800f368:	0800f3e7 	.word	0x0800f3e7
 800f36c:	0800f3e7 	.word	0x0800f3e7
 800f370:	0800f3a3 	.word	0x0800f3a3
 800f374:	0800f3cd 	.word	0x0800f3cd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f37e:	b2db      	uxtb	r3, r3
 800f380:	2b03      	cmp	r3, #3
 800f382:	d107      	bne.n	800f394 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f384:	f107 030a 	add.w	r3, r7, #10
 800f388:	2202      	movs	r2, #2
 800f38a:	4619      	mov	r1, r3
 800f38c:	6878      	ldr	r0, [r7, #4]
 800f38e:	f001 fa54 	bl	801083a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f392:	e032      	b.n	800f3fa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800f394:	6839      	ldr	r1, [r7, #0]
 800f396:	6878      	ldr	r0, [r7, #4]
 800f398:	f001 f9de 	bl	8010758 <USBD_CtlError>
            ret = USBD_FAIL;
 800f39c:	2303      	movs	r3, #3
 800f39e:	75fb      	strb	r3, [r7, #23]
          break;
 800f3a0:	e02b      	b.n	800f3fa <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f3a8:	b2db      	uxtb	r3, r3
 800f3aa:	2b03      	cmp	r3, #3
 800f3ac:	d107      	bne.n	800f3be <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f3ae:	f107 030d 	add.w	r3, r7, #13
 800f3b2:	2201      	movs	r2, #1
 800f3b4:	4619      	mov	r1, r3
 800f3b6:	6878      	ldr	r0, [r7, #4]
 800f3b8:	f001 fa3f 	bl	801083a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f3bc:	e01d      	b.n	800f3fa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800f3be:	6839      	ldr	r1, [r7, #0]
 800f3c0:	6878      	ldr	r0, [r7, #4]
 800f3c2:	f001 f9c9 	bl	8010758 <USBD_CtlError>
            ret = USBD_FAIL;
 800f3c6:	2303      	movs	r3, #3
 800f3c8:	75fb      	strb	r3, [r7, #23]
          break;
 800f3ca:	e016      	b.n	800f3fa <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f3d2:	b2db      	uxtb	r3, r3
 800f3d4:	2b03      	cmp	r3, #3
 800f3d6:	d00f      	beq.n	800f3f8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800f3d8:	6839      	ldr	r1, [r7, #0]
 800f3da:	6878      	ldr	r0, [r7, #4]
 800f3dc:	f001 f9bc 	bl	8010758 <USBD_CtlError>
            ret = USBD_FAIL;
 800f3e0:	2303      	movs	r3, #3
 800f3e2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800f3e4:	e008      	b.n	800f3f8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800f3e6:	6839      	ldr	r1, [r7, #0]
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	f001 f9b5 	bl	8010758 <USBD_CtlError>
          ret = USBD_FAIL;
 800f3ee:	2303      	movs	r3, #3
 800f3f0:	75fb      	strb	r3, [r7, #23]
          break;
 800f3f2:	e002      	b.n	800f3fa <USBD_CDC_Setup+0x176>
          break;
 800f3f4:	bf00      	nop
 800f3f6:	e008      	b.n	800f40a <USBD_CDC_Setup+0x186>
          break;
 800f3f8:	bf00      	nop
      }
      break;
 800f3fa:	e006      	b.n	800f40a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800f3fc:	6839      	ldr	r1, [r7, #0]
 800f3fe:	6878      	ldr	r0, [r7, #4]
 800f400:	f001 f9aa 	bl	8010758 <USBD_CtlError>
      ret = USBD_FAIL;
 800f404:	2303      	movs	r3, #3
 800f406:	75fb      	strb	r3, [r7, #23]
      break;
 800f408:	bf00      	nop
  }

  return (uint8_t)ret;
 800f40a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f40c:	4618      	mov	r0, r3
 800f40e:	3718      	adds	r7, #24
 800f410:	46bd      	mov	sp, r7
 800f412:	bd80      	pop	{r7, pc}

0800f414 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b084      	sub	sp, #16
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
 800f41c:	460b      	mov	r3, r1
 800f41e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f426:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d101      	bne.n	800f436 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f432:	2303      	movs	r3, #3
 800f434:	e04f      	b.n	800f4d6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f43c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f43e:	78fa      	ldrb	r2, [r7, #3]
 800f440:	6879      	ldr	r1, [r7, #4]
 800f442:	4613      	mov	r3, r2
 800f444:	009b      	lsls	r3, r3, #2
 800f446:	4413      	add	r3, r2
 800f448:	009b      	lsls	r3, r3, #2
 800f44a:	440b      	add	r3, r1
 800f44c:	3318      	adds	r3, #24
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d029      	beq.n	800f4a8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800f454:	78fa      	ldrb	r2, [r7, #3]
 800f456:	6879      	ldr	r1, [r7, #4]
 800f458:	4613      	mov	r3, r2
 800f45a:	009b      	lsls	r3, r3, #2
 800f45c:	4413      	add	r3, r2
 800f45e:	009b      	lsls	r3, r3, #2
 800f460:	440b      	add	r3, r1
 800f462:	3318      	adds	r3, #24
 800f464:	681a      	ldr	r2, [r3, #0]
 800f466:	78f9      	ldrb	r1, [r7, #3]
 800f468:	68f8      	ldr	r0, [r7, #12]
 800f46a:	460b      	mov	r3, r1
 800f46c:	009b      	lsls	r3, r3, #2
 800f46e:	440b      	add	r3, r1
 800f470:	00db      	lsls	r3, r3, #3
 800f472:	4403      	add	r3, r0
 800f474:	3338      	adds	r3, #56	; 0x38
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	fbb2 f1f3 	udiv	r1, r2, r3
 800f47c:	fb01 f303 	mul.w	r3, r1, r3
 800f480:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f482:	2b00      	cmp	r3, #0
 800f484:	d110      	bne.n	800f4a8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800f486:	78fa      	ldrb	r2, [r7, #3]
 800f488:	6879      	ldr	r1, [r7, #4]
 800f48a:	4613      	mov	r3, r2
 800f48c:	009b      	lsls	r3, r3, #2
 800f48e:	4413      	add	r3, r2
 800f490:	009b      	lsls	r3, r3, #2
 800f492:	440b      	add	r3, r1
 800f494:	3318      	adds	r3, #24
 800f496:	2200      	movs	r2, #0
 800f498:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f49a:	78f9      	ldrb	r1, [r7, #3]
 800f49c:	2300      	movs	r3, #0
 800f49e:	2200      	movs	r2, #0
 800f4a0:	6878      	ldr	r0, [r7, #4]
 800f4a2:	f003 ff73 	bl	801338c <USBD_LL_Transmit>
 800f4a6:	e015      	b.n	800f4d4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800f4a8:	68bb      	ldr	r3, [r7, #8]
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f4b6:	691b      	ldr	r3, [r3, #16]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d00b      	beq.n	800f4d4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f4c2:	691b      	ldr	r3, [r3, #16]
 800f4c4:	68ba      	ldr	r2, [r7, #8]
 800f4c6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800f4ca:	68ba      	ldr	r2, [r7, #8]
 800f4cc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800f4d0:	78fa      	ldrb	r2, [r7, #3]
 800f4d2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800f4d4:	2300      	movs	r3, #0
}
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	3710      	adds	r7, #16
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	bd80      	pop	{r7, pc}

0800f4de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f4de:	b580      	push	{r7, lr}
 800f4e0:	b084      	sub	sp, #16
 800f4e2:	af00      	add	r7, sp, #0
 800f4e4:	6078      	str	r0, [r7, #4]
 800f4e6:	460b      	mov	r3, r1
 800f4e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f4f0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d101      	bne.n	800f500 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f4fc:	2303      	movs	r3, #3
 800f4fe:	e015      	b.n	800f52c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f500:	78fb      	ldrb	r3, [r7, #3]
 800f502:	4619      	mov	r1, r3
 800f504:	6878      	ldr	r0, [r7, #4]
 800f506:	f003 ff83 	bl	8013410 <USBD_LL_GetRxDataSize>
 800f50a:	4602      	mov	r2, r0
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f518:	68db      	ldr	r3, [r3, #12]
 800f51a:	68fa      	ldr	r2, [r7, #12]
 800f51c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800f520:	68fa      	ldr	r2, [r7, #12]
 800f522:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800f526:	4611      	mov	r1, r2
 800f528:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800f52a:	2300      	movs	r3, #0
}
 800f52c:	4618      	mov	r0, r3
 800f52e:	3710      	adds	r7, #16
 800f530:	46bd      	mov	sp, r7
 800f532:	bd80      	pop	{r7, pc}

0800f534 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f534:	b580      	push	{r7, lr}
 800f536:	b084      	sub	sp, #16
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f542:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d101      	bne.n	800f54e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800f54a:	2303      	movs	r3, #3
 800f54c:	e01b      	b.n	800f586 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f554:	2b00      	cmp	r3, #0
 800f556:	d015      	beq.n	800f584 <USBD_CDC_EP0_RxReady+0x50>
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800f55e:	2bff      	cmp	r3, #255	; 0xff
 800f560:	d010      	beq.n	800f584 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f568:	689b      	ldr	r3, [r3, #8]
 800f56a:	68fa      	ldr	r2, [r7, #12]
 800f56c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800f570:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800f572:	68fa      	ldr	r2, [r7, #12]
 800f574:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f578:	b292      	uxth	r2, r2
 800f57a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	22ff      	movs	r2, #255	; 0xff
 800f580:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800f584:	2300      	movs	r3, #0
}
 800f586:	4618      	mov	r0, r3
 800f588:	3710      	adds	r7, #16
 800f58a:	46bd      	mov	sp, r7
 800f58c:	bd80      	pop	{r7, pc}
	...

0800f590 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800f590:	b480      	push	{r7}
 800f592:	b083      	sub	sp, #12
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	2243      	movs	r2, #67	; 0x43
 800f59c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800f59e:	4b03      	ldr	r3, [pc, #12]	; (800f5ac <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	370c      	adds	r7, #12
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5aa:	4770      	bx	lr
 800f5ac:	20000098 	.word	0x20000098

0800f5b0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f5b0:	b480      	push	{r7}
 800f5b2:	b083      	sub	sp, #12
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	2243      	movs	r2, #67	; 0x43
 800f5bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800f5be:	4b03      	ldr	r3, [pc, #12]	; (800f5cc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	370c      	adds	r7, #12
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ca:	4770      	bx	lr
 800f5cc:	20000054 	.word	0x20000054

0800f5d0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f5d0:	b480      	push	{r7}
 800f5d2:	b083      	sub	sp, #12
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	2243      	movs	r2, #67	; 0x43
 800f5dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800f5de:	4b03      	ldr	r3, [pc, #12]	; (800f5ec <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	370c      	adds	r7, #12
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ea:	4770      	bx	lr
 800f5ec:	200000dc 	.word	0x200000dc

0800f5f0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f5f0:	b480      	push	{r7}
 800f5f2:	b083      	sub	sp, #12
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	220a      	movs	r2, #10
 800f5fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800f5fe:	4b03      	ldr	r3, [pc, #12]	; (800f60c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f600:	4618      	mov	r0, r3
 800f602:	370c      	adds	r7, #12
 800f604:	46bd      	mov	sp, r7
 800f606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60a:	4770      	bx	lr
 800f60c:	20000010 	.word	0x20000010

0800f610 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800f610:	b480      	push	{r7}
 800f612:	b083      	sub	sp, #12
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
 800f618:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f61a:	683b      	ldr	r3, [r7, #0]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d101      	bne.n	800f624 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f620:	2303      	movs	r3, #3
 800f622:	e004      	b.n	800f62e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	683a      	ldr	r2, [r7, #0]
 800f628:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800f62c:	2300      	movs	r3, #0
}
 800f62e:	4618      	mov	r0, r3
 800f630:	370c      	adds	r7, #12
 800f632:	46bd      	mov	sp, r7
 800f634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f638:	4770      	bx	lr

0800f63a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800f63a:	b480      	push	{r7}
 800f63c:	b087      	sub	sp, #28
 800f63e:	af00      	add	r7, sp, #0
 800f640:	60f8      	str	r0, [r7, #12]
 800f642:	60b9      	str	r1, [r7, #8]
 800f644:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f64c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800f64e:	697b      	ldr	r3, [r7, #20]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d101      	bne.n	800f658 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f654:	2303      	movs	r3, #3
 800f656:	e008      	b.n	800f66a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800f658:	697b      	ldr	r3, [r7, #20]
 800f65a:	68ba      	ldr	r2, [r7, #8]
 800f65c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800f660:	697b      	ldr	r3, [r7, #20]
 800f662:	687a      	ldr	r2, [r7, #4]
 800f664:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800f668:	2300      	movs	r3, #0
}
 800f66a:	4618      	mov	r0, r3
 800f66c:	371c      	adds	r7, #28
 800f66e:	46bd      	mov	sp, r7
 800f670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f674:	4770      	bx	lr

0800f676 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800f676:	b480      	push	{r7}
 800f678:	b085      	sub	sp, #20
 800f67a:	af00      	add	r7, sp, #0
 800f67c:	6078      	str	r0, [r7, #4]
 800f67e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f686:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d101      	bne.n	800f692 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800f68e:	2303      	movs	r3, #3
 800f690:	e004      	b.n	800f69c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	683a      	ldr	r2, [r7, #0]
 800f696:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800f69a:	2300      	movs	r3, #0
}
 800f69c:	4618      	mov	r0, r3
 800f69e:	3714      	adds	r7, #20
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a6:	4770      	bx	lr

0800f6a8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b084      	sub	sp, #16
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f6b6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d101      	bne.n	800f6c6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f6c2:	2303      	movs	r3, #3
 800f6c4:	e016      	b.n	800f6f4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	7c1b      	ldrb	r3, [r3, #16]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d109      	bne.n	800f6e2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f6d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f6d8:	2101      	movs	r1, #1
 800f6da:	6878      	ldr	r0, [r7, #4]
 800f6dc:	f003 fe77 	bl	80133ce <USBD_LL_PrepareReceive>
 800f6e0:	e007      	b.n	800f6f2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f6e8:	2340      	movs	r3, #64	; 0x40
 800f6ea:	2101      	movs	r1, #1
 800f6ec:	6878      	ldr	r0, [r7, #4]
 800f6ee:	f003 fe6e 	bl	80133ce <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f6f2:	2300      	movs	r3, #0
}
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	3710      	adds	r7, #16
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	bd80      	pop	{r7, pc}

0800f6fc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b086      	sub	sp, #24
 800f700:	af00      	add	r7, sp, #0
 800f702:	60f8      	str	r0, [r7, #12]
 800f704:	60b9      	str	r1, [r7, #8]
 800f706:	4613      	mov	r3, r2
 800f708:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d101      	bne.n	800f714 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f710:	2303      	movs	r3, #3
 800f712:	e01f      	b.n	800f754 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	2200      	movs	r2, #0
 800f718:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	2200      	movs	r2, #0
 800f720:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	2200      	movs	r2, #0
 800f728:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f72c:	68bb      	ldr	r3, [r7, #8]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d003      	beq.n	800f73a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	68ba      	ldr	r2, [r7, #8]
 800f736:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	2201      	movs	r2, #1
 800f73e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	79fa      	ldrb	r2, [r7, #7]
 800f746:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f748:	68f8      	ldr	r0, [r7, #12]
 800f74a:	f003 fcd5 	bl	80130f8 <USBD_LL_Init>
 800f74e:	4603      	mov	r3, r0
 800f750:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f752:	7dfb      	ldrb	r3, [r7, #23]
}
 800f754:	4618      	mov	r0, r3
 800f756:	3718      	adds	r7, #24
 800f758:	46bd      	mov	sp, r7
 800f75a:	bd80      	pop	{r7, pc}

0800f75c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b084      	sub	sp, #16
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
 800f764:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f766:	2300      	movs	r3, #0
 800f768:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f76a:	683b      	ldr	r3, [r7, #0]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d101      	bne.n	800f774 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800f770:	2303      	movs	r3, #3
 800f772:	e016      	b.n	800f7a2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	683a      	ldr	r2, [r7, #0]
 800f778:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f784:	2b00      	cmp	r3, #0
 800f786:	d00b      	beq.n	800f7a0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f78e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f790:	f107 020e 	add.w	r2, r7, #14
 800f794:	4610      	mov	r0, r2
 800f796:	4798      	blx	r3
 800f798:	4602      	mov	r2, r0
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800f7a0:	2300      	movs	r3, #0
}
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	3710      	adds	r7, #16
 800f7a6:	46bd      	mov	sp, r7
 800f7a8:	bd80      	pop	{r7, pc}

0800f7aa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f7aa:	b580      	push	{r7, lr}
 800f7ac:	b082      	sub	sp, #8
 800f7ae:	af00      	add	r7, sp, #0
 800f7b0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f7b2:	6878      	ldr	r0, [r7, #4]
 800f7b4:	f003 fd00 	bl	80131b8 <USBD_LL_Start>
 800f7b8:	4603      	mov	r3, r0
}
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	3708      	adds	r7, #8
 800f7be:	46bd      	mov	sp, r7
 800f7c0:	bd80      	pop	{r7, pc}

0800f7c2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f7c2:	b480      	push	{r7}
 800f7c4:	b083      	sub	sp, #12
 800f7c6:	af00      	add	r7, sp, #0
 800f7c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f7ca:	2300      	movs	r3, #0
}
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	370c      	adds	r7, #12
 800f7d0:	46bd      	mov	sp, r7
 800f7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d6:	4770      	bx	lr

0800f7d8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b084      	sub	sp, #16
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
 800f7e0:	460b      	mov	r3, r1
 800f7e2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f7e4:	2303      	movs	r3, #3
 800f7e6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d009      	beq.n	800f806 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	78fa      	ldrb	r2, [r7, #3]
 800f7fc:	4611      	mov	r1, r2
 800f7fe:	6878      	ldr	r0, [r7, #4]
 800f800:	4798      	blx	r3
 800f802:	4603      	mov	r3, r0
 800f804:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f806:	7bfb      	ldrb	r3, [r7, #15]
}
 800f808:	4618      	mov	r0, r3
 800f80a:	3710      	adds	r7, #16
 800f80c:	46bd      	mov	sp, r7
 800f80e:	bd80      	pop	{r7, pc}

0800f810 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b082      	sub	sp, #8
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
 800f818:	460b      	mov	r3, r1
 800f81a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f822:	2b00      	cmp	r3, #0
 800f824:	d007      	beq.n	800f836 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f82c:	685b      	ldr	r3, [r3, #4]
 800f82e:	78fa      	ldrb	r2, [r7, #3]
 800f830:	4611      	mov	r1, r2
 800f832:	6878      	ldr	r0, [r7, #4]
 800f834:	4798      	blx	r3
  }

  return USBD_OK;
 800f836:	2300      	movs	r3, #0
}
 800f838:	4618      	mov	r0, r3
 800f83a:	3708      	adds	r7, #8
 800f83c:	46bd      	mov	sp, r7
 800f83e:	bd80      	pop	{r7, pc}

0800f840 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f840:	b580      	push	{r7, lr}
 800f842:	b084      	sub	sp, #16
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
 800f848:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f850:	6839      	ldr	r1, [r7, #0]
 800f852:	4618      	mov	r0, r3
 800f854:	f000 ff46 	bl	80106e4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	2201      	movs	r2, #1
 800f85c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800f866:	461a      	mov	r2, r3
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f874:	f003 031f 	and.w	r3, r3, #31
 800f878:	2b02      	cmp	r3, #2
 800f87a:	d01a      	beq.n	800f8b2 <USBD_LL_SetupStage+0x72>
 800f87c:	2b02      	cmp	r3, #2
 800f87e:	d822      	bhi.n	800f8c6 <USBD_LL_SetupStage+0x86>
 800f880:	2b00      	cmp	r3, #0
 800f882:	d002      	beq.n	800f88a <USBD_LL_SetupStage+0x4a>
 800f884:	2b01      	cmp	r3, #1
 800f886:	d00a      	beq.n	800f89e <USBD_LL_SetupStage+0x5e>
 800f888:	e01d      	b.n	800f8c6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f890:	4619      	mov	r1, r3
 800f892:	6878      	ldr	r0, [r7, #4]
 800f894:	f000 f9ee 	bl	800fc74 <USBD_StdDevReq>
 800f898:	4603      	mov	r3, r0
 800f89a:	73fb      	strb	r3, [r7, #15]
      break;
 800f89c:	e020      	b.n	800f8e0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f8a4:	4619      	mov	r1, r3
 800f8a6:	6878      	ldr	r0, [r7, #4]
 800f8a8:	f000 fa52 	bl	800fd50 <USBD_StdItfReq>
 800f8ac:	4603      	mov	r3, r0
 800f8ae:	73fb      	strb	r3, [r7, #15]
      break;
 800f8b0:	e016      	b.n	800f8e0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f8b8:	4619      	mov	r1, r3
 800f8ba:	6878      	ldr	r0, [r7, #4]
 800f8bc:	f000 fa91 	bl	800fde2 <USBD_StdEPReq>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	73fb      	strb	r3, [r7, #15]
      break;
 800f8c4:	e00c      	b.n	800f8e0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f8cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f8d0:	b2db      	uxtb	r3, r3
 800f8d2:	4619      	mov	r1, r3
 800f8d4:	6878      	ldr	r0, [r7, #4]
 800f8d6:	f003 fccf 	bl	8013278 <USBD_LL_StallEP>
 800f8da:	4603      	mov	r3, r0
 800f8dc:	73fb      	strb	r3, [r7, #15]
      break;
 800f8de:	bf00      	nop
  }

  return ret;
 800f8e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	3710      	adds	r7, #16
 800f8e6:	46bd      	mov	sp, r7
 800f8e8:	bd80      	pop	{r7, pc}

0800f8ea <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f8ea:	b580      	push	{r7, lr}
 800f8ec:	b086      	sub	sp, #24
 800f8ee:	af00      	add	r7, sp, #0
 800f8f0:	60f8      	str	r0, [r7, #12]
 800f8f2:	460b      	mov	r3, r1
 800f8f4:	607a      	str	r2, [r7, #4]
 800f8f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f8f8:	7afb      	ldrb	r3, [r7, #11]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d138      	bne.n	800f970 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f904:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f90c:	2b03      	cmp	r3, #3
 800f90e:	d14a      	bne.n	800f9a6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800f910:	693b      	ldr	r3, [r7, #16]
 800f912:	689a      	ldr	r2, [r3, #8]
 800f914:	693b      	ldr	r3, [r7, #16]
 800f916:	68db      	ldr	r3, [r3, #12]
 800f918:	429a      	cmp	r2, r3
 800f91a:	d913      	bls.n	800f944 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f91c:	693b      	ldr	r3, [r7, #16]
 800f91e:	689a      	ldr	r2, [r3, #8]
 800f920:	693b      	ldr	r3, [r7, #16]
 800f922:	68db      	ldr	r3, [r3, #12]
 800f924:	1ad2      	subs	r2, r2, r3
 800f926:	693b      	ldr	r3, [r7, #16]
 800f928:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f92a:	693b      	ldr	r3, [r7, #16]
 800f92c:	68da      	ldr	r2, [r3, #12]
 800f92e:	693b      	ldr	r3, [r7, #16]
 800f930:	689b      	ldr	r3, [r3, #8]
 800f932:	4293      	cmp	r3, r2
 800f934:	bf28      	it	cs
 800f936:	4613      	movcs	r3, r2
 800f938:	461a      	mov	r2, r3
 800f93a:	6879      	ldr	r1, [r7, #4]
 800f93c:	68f8      	ldr	r0, [r7, #12]
 800f93e:	f000 ffc5 	bl	80108cc <USBD_CtlContinueRx>
 800f942:	e030      	b.n	800f9a6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f94a:	b2db      	uxtb	r3, r3
 800f94c:	2b03      	cmp	r3, #3
 800f94e:	d10b      	bne.n	800f968 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f956:	691b      	ldr	r3, [r3, #16]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d005      	beq.n	800f968 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f962:	691b      	ldr	r3, [r3, #16]
 800f964:	68f8      	ldr	r0, [r7, #12]
 800f966:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f968:	68f8      	ldr	r0, [r7, #12]
 800f96a:	f000 ffc0 	bl	80108ee <USBD_CtlSendStatus>
 800f96e:	e01a      	b.n	800f9a6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f976:	b2db      	uxtb	r3, r3
 800f978:	2b03      	cmp	r3, #3
 800f97a:	d114      	bne.n	800f9a6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f982:	699b      	ldr	r3, [r3, #24]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d00e      	beq.n	800f9a6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f98e:	699b      	ldr	r3, [r3, #24]
 800f990:	7afa      	ldrb	r2, [r7, #11]
 800f992:	4611      	mov	r1, r2
 800f994:	68f8      	ldr	r0, [r7, #12]
 800f996:	4798      	blx	r3
 800f998:	4603      	mov	r3, r0
 800f99a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f99c:	7dfb      	ldrb	r3, [r7, #23]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d001      	beq.n	800f9a6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800f9a2:	7dfb      	ldrb	r3, [r7, #23]
 800f9a4:	e000      	b.n	800f9a8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800f9a6:	2300      	movs	r3, #0
}
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	3718      	adds	r7, #24
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	bd80      	pop	{r7, pc}

0800f9b0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b086      	sub	sp, #24
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	60f8      	str	r0, [r7, #12]
 800f9b8:	460b      	mov	r3, r1
 800f9ba:	607a      	str	r2, [r7, #4]
 800f9bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f9be:	7afb      	ldrb	r3, [r7, #11]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d16b      	bne.n	800fa9c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	3314      	adds	r3, #20
 800f9c8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f9d0:	2b02      	cmp	r3, #2
 800f9d2:	d156      	bne.n	800fa82 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800f9d4:	693b      	ldr	r3, [r7, #16]
 800f9d6:	689a      	ldr	r2, [r3, #8]
 800f9d8:	693b      	ldr	r3, [r7, #16]
 800f9da:	68db      	ldr	r3, [r3, #12]
 800f9dc:	429a      	cmp	r2, r3
 800f9de:	d914      	bls.n	800fa0a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f9e0:	693b      	ldr	r3, [r7, #16]
 800f9e2:	689a      	ldr	r2, [r3, #8]
 800f9e4:	693b      	ldr	r3, [r7, #16]
 800f9e6:	68db      	ldr	r3, [r3, #12]
 800f9e8:	1ad2      	subs	r2, r2, r3
 800f9ea:	693b      	ldr	r3, [r7, #16]
 800f9ec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f9ee:	693b      	ldr	r3, [r7, #16]
 800f9f0:	689b      	ldr	r3, [r3, #8]
 800f9f2:	461a      	mov	r2, r3
 800f9f4:	6879      	ldr	r1, [r7, #4]
 800f9f6:	68f8      	ldr	r0, [r7, #12]
 800f9f8:	f000 ff3a 	bl	8010870 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	2200      	movs	r2, #0
 800fa00:	2100      	movs	r1, #0
 800fa02:	68f8      	ldr	r0, [r7, #12]
 800fa04:	f003 fce3 	bl	80133ce <USBD_LL_PrepareReceive>
 800fa08:	e03b      	b.n	800fa82 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800fa0a:	693b      	ldr	r3, [r7, #16]
 800fa0c:	68da      	ldr	r2, [r3, #12]
 800fa0e:	693b      	ldr	r3, [r7, #16]
 800fa10:	689b      	ldr	r3, [r3, #8]
 800fa12:	429a      	cmp	r2, r3
 800fa14:	d11c      	bne.n	800fa50 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800fa16:	693b      	ldr	r3, [r7, #16]
 800fa18:	685a      	ldr	r2, [r3, #4]
 800fa1a:	693b      	ldr	r3, [r7, #16]
 800fa1c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800fa1e:	429a      	cmp	r2, r3
 800fa20:	d316      	bcc.n	800fa50 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800fa22:	693b      	ldr	r3, [r7, #16]
 800fa24:	685a      	ldr	r2, [r3, #4]
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800fa2c:	429a      	cmp	r2, r3
 800fa2e:	d20f      	bcs.n	800fa50 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800fa30:	2200      	movs	r2, #0
 800fa32:	2100      	movs	r1, #0
 800fa34:	68f8      	ldr	r0, [r7, #12]
 800fa36:	f000 ff1b 	bl	8010870 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	2200      	movs	r2, #0
 800fa3e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fa42:	2300      	movs	r3, #0
 800fa44:	2200      	movs	r2, #0
 800fa46:	2100      	movs	r1, #0
 800fa48:	68f8      	ldr	r0, [r7, #12]
 800fa4a:	f003 fcc0 	bl	80133ce <USBD_LL_PrepareReceive>
 800fa4e:	e018      	b.n	800fa82 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa56:	b2db      	uxtb	r3, r3
 800fa58:	2b03      	cmp	r3, #3
 800fa5a:	d10b      	bne.n	800fa74 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa62:	68db      	ldr	r3, [r3, #12]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d005      	beq.n	800fa74 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa6e:	68db      	ldr	r3, [r3, #12]
 800fa70:	68f8      	ldr	r0, [r7, #12]
 800fa72:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800fa74:	2180      	movs	r1, #128	; 0x80
 800fa76:	68f8      	ldr	r0, [r7, #12]
 800fa78:	f003 fbfe 	bl	8013278 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800fa7c:	68f8      	ldr	r0, [r7, #12]
 800fa7e:	f000 ff49 	bl	8010914 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800fa88:	2b01      	cmp	r3, #1
 800fa8a:	d122      	bne.n	800fad2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800fa8c:	68f8      	ldr	r0, [r7, #12]
 800fa8e:	f7ff fe98 	bl	800f7c2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	2200      	movs	r2, #0
 800fa96:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800fa9a:	e01a      	b.n	800fad2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800faa2:	b2db      	uxtb	r3, r3
 800faa4:	2b03      	cmp	r3, #3
 800faa6:	d114      	bne.n	800fad2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800faae:	695b      	ldr	r3, [r3, #20]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d00e      	beq.n	800fad2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800faba:	695b      	ldr	r3, [r3, #20]
 800fabc:	7afa      	ldrb	r2, [r7, #11]
 800fabe:	4611      	mov	r1, r2
 800fac0:	68f8      	ldr	r0, [r7, #12]
 800fac2:	4798      	blx	r3
 800fac4:	4603      	mov	r3, r0
 800fac6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800fac8:	7dfb      	ldrb	r3, [r7, #23]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d001      	beq.n	800fad2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800face:	7dfb      	ldrb	r3, [r7, #23]
 800fad0:	e000      	b.n	800fad4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800fad2:	2300      	movs	r3, #0
}
 800fad4:	4618      	mov	r0, r3
 800fad6:	3718      	adds	r7, #24
 800fad8:	46bd      	mov	sp, r7
 800fada:	bd80      	pop	{r7, pc}

0800fadc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	b082      	sub	sp, #8
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	2201      	movs	r2, #1
 800fae8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	2200      	movs	r2, #0
 800faf0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	2200      	movs	r2, #0
 800faf8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	2200      	movs	r2, #0
 800fafe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d101      	bne.n	800fb10 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800fb0c:	2303      	movs	r3, #3
 800fb0e:	e02f      	b.n	800fb70 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d00f      	beq.n	800fb3a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb20:	685b      	ldr	r3, [r3, #4]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d009      	beq.n	800fb3a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb2c:	685b      	ldr	r3, [r3, #4]
 800fb2e:	687a      	ldr	r2, [r7, #4]
 800fb30:	6852      	ldr	r2, [r2, #4]
 800fb32:	b2d2      	uxtb	r2, r2
 800fb34:	4611      	mov	r1, r2
 800fb36:	6878      	ldr	r0, [r7, #4]
 800fb38:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fb3a:	2340      	movs	r3, #64	; 0x40
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	2100      	movs	r1, #0
 800fb40:	6878      	ldr	r0, [r7, #4]
 800fb42:	f003 fb54 	bl	80131ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	2201      	movs	r2, #1
 800fb4a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	2240      	movs	r2, #64	; 0x40
 800fb52:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fb56:	2340      	movs	r3, #64	; 0x40
 800fb58:	2200      	movs	r2, #0
 800fb5a:	2180      	movs	r1, #128	; 0x80
 800fb5c:	6878      	ldr	r0, [r7, #4]
 800fb5e:	f003 fb46 	bl	80131ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	2201      	movs	r2, #1
 800fb66:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	2240      	movs	r2, #64	; 0x40
 800fb6c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800fb6e:	2300      	movs	r3, #0
}
 800fb70:	4618      	mov	r0, r3
 800fb72:	3708      	adds	r7, #8
 800fb74:	46bd      	mov	sp, r7
 800fb76:	bd80      	pop	{r7, pc}

0800fb78 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800fb78:	b480      	push	{r7}
 800fb7a:	b083      	sub	sp, #12
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
 800fb80:	460b      	mov	r3, r1
 800fb82:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	78fa      	ldrb	r2, [r7, #3]
 800fb88:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800fb8a:	2300      	movs	r3, #0
}
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	370c      	adds	r7, #12
 800fb90:	46bd      	mov	sp, r7
 800fb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb96:	4770      	bx	lr

0800fb98 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800fb98:	b480      	push	{r7}
 800fb9a:	b083      	sub	sp, #12
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fba6:	b2da      	uxtb	r2, r3
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	2204      	movs	r2, #4
 800fbb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800fbb6:	2300      	movs	r3, #0
}
 800fbb8:	4618      	mov	r0, r3
 800fbba:	370c      	adds	r7, #12
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc2:	4770      	bx	lr

0800fbc4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800fbc4:	b480      	push	{r7}
 800fbc6:	b083      	sub	sp, #12
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fbd2:	b2db      	uxtb	r3, r3
 800fbd4:	2b04      	cmp	r3, #4
 800fbd6:	d106      	bne.n	800fbe6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800fbde:	b2da      	uxtb	r2, r3
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800fbe6:	2300      	movs	r3, #0
}
 800fbe8:	4618      	mov	r0, r3
 800fbea:	370c      	adds	r7, #12
 800fbec:	46bd      	mov	sp, r7
 800fbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf2:	4770      	bx	lr

0800fbf4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b082      	sub	sp, #8
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d101      	bne.n	800fc0a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800fc06:	2303      	movs	r3, #3
 800fc08:	e012      	b.n	800fc30 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fc10:	b2db      	uxtb	r3, r3
 800fc12:	2b03      	cmp	r3, #3
 800fc14:	d10b      	bne.n	800fc2e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc1c:	69db      	ldr	r3, [r3, #28]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d005      	beq.n	800fc2e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc28:	69db      	ldr	r3, [r3, #28]
 800fc2a:	6878      	ldr	r0, [r7, #4]
 800fc2c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fc2e:	2300      	movs	r3, #0
}
 800fc30:	4618      	mov	r0, r3
 800fc32:	3708      	adds	r7, #8
 800fc34:	46bd      	mov	sp, r7
 800fc36:	bd80      	pop	{r7, pc}

0800fc38 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800fc38:	b480      	push	{r7}
 800fc3a:	b087      	sub	sp, #28
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800fc44:	697b      	ldr	r3, [r7, #20]
 800fc46:	781b      	ldrb	r3, [r3, #0]
 800fc48:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800fc4a:	697b      	ldr	r3, [r7, #20]
 800fc4c:	3301      	adds	r3, #1
 800fc4e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800fc50:	697b      	ldr	r3, [r7, #20]
 800fc52:	781b      	ldrb	r3, [r3, #0]
 800fc54:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800fc56:	8a3b      	ldrh	r3, [r7, #16]
 800fc58:	021b      	lsls	r3, r3, #8
 800fc5a:	b21a      	sxth	r2, r3
 800fc5c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fc60:	4313      	orrs	r3, r2
 800fc62:	b21b      	sxth	r3, r3
 800fc64:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800fc66:	89fb      	ldrh	r3, [r7, #14]
}
 800fc68:	4618      	mov	r0, r3
 800fc6a:	371c      	adds	r7, #28
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc72:	4770      	bx	lr

0800fc74 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b084      	sub	sp, #16
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]
 800fc7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fc7e:	2300      	movs	r3, #0
 800fc80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fc82:	683b      	ldr	r3, [r7, #0]
 800fc84:	781b      	ldrb	r3, [r3, #0]
 800fc86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fc8a:	2b40      	cmp	r3, #64	; 0x40
 800fc8c:	d005      	beq.n	800fc9a <USBD_StdDevReq+0x26>
 800fc8e:	2b40      	cmp	r3, #64	; 0x40
 800fc90:	d853      	bhi.n	800fd3a <USBD_StdDevReq+0xc6>
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d00b      	beq.n	800fcae <USBD_StdDevReq+0x3a>
 800fc96:	2b20      	cmp	r3, #32
 800fc98:	d14f      	bne.n	800fd3a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fca0:	689b      	ldr	r3, [r3, #8]
 800fca2:	6839      	ldr	r1, [r7, #0]
 800fca4:	6878      	ldr	r0, [r7, #4]
 800fca6:	4798      	blx	r3
 800fca8:	4603      	mov	r3, r0
 800fcaa:	73fb      	strb	r3, [r7, #15]
      break;
 800fcac:	e04a      	b.n	800fd44 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fcae:	683b      	ldr	r3, [r7, #0]
 800fcb0:	785b      	ldrb	r3, [r3, #1]
 800fcb2:	2b09      	cmp	r3, #9
 800fcb4:	d83b      	bhi.n	800fd2e <USBD_StdDevReq+0xba>
 800fcb6:	a201      	add	r2, pc, #4	; (adr r2, 800fcbc <USBD_StdDevReq+0x48>)
 800fcb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcbc:	0800fd11 	.word	0x0800fd11
 800fcc0:	0800fd25 	.word	0x0800fd25
 800fcc4:	0800fd2f 	.word	0x0800fd2f
 800fcc8:	0800fd1b 	.word	0x0800fd1b
 800fccc:	0800fd2f 	.word	0x0800fd2f
 800fcd0:	0800fcef 	.word	0x0800fcef
 800fcd4:	0800fce5 	.word	0x0800fce5
 800fcd8:	0800fd2f 	.word	0x0800fd2f
 800fcdc:	0800fd07 	.word	0x0800fd07
 800fce0:	0800fcf9 	.word	0x0800fcf9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800fce4:	6839      	ldr	r1, [r7, #0]
 800fce6:	6878      	ldr	r0, [r7, #4]
 800fce8:	f000 f9de 	bl	80100a8 <USBD_GetDescriptor>
          break;
 800fcec:	e024      	b.n	800fd38 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800fcee:	6839      	ldr	r1, [r7, #0]
 800fcf0:	6878      	ldr	r0, [r7, #4]
 800fcf2:	f000 fb6d 	bl	80103d0 <USBD_SetAddress>
          break;
 800fcf6:	e01f      	b.n	800fd38 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800fcf8:	6839      	ldr	r1, [r7, #0]
 800fcfa:	6878      	ldr	r0, [r7, #4]
 800fcfc:	f000 fbac 	bl	8010458 <USBD_SetConfig>
 800fd00:	4603      	mov	r3, r0
 800fd02:	73fb      	strb	r3, [r7, #15]
          break;
 800fd04:	e018      	b.n	800fd38 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800fd06:	6839      	ldr	r1, [r7, #0]
 800fd08:	6878      	ldr	r0, [r7, #4]
 800fd0a:	f000 fc4b 	bl	80105a4 <USBD_GetConfig>
          break;
 800fd0e:	e013      	b.n	800fd38 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800fd10:	6839      	ldr	r1, [r7, #0]
 800fd12:	6878      	ldr	r0, [r7, #4]
 800fd14:	f000 fc7c 	bl	8010610 <USBD_GetStatus>
          break;
 800fd18:	e00e      	b.n	800fd38 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800fd1a:	6839      	ldr	r1, [r7, #0]
 800fd1c:	6878      	ldr	r0, [r7, #4]
 800fd1e:	f000 fcab 	bl	8010678 <USBD_SetFeature>
          break;
 800fd22:	e009      	b.n	800fd38 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800fd24:	6839      	ldr	r1, [r7, #0]
 800fd26:	6878      	ldr	r0, [r7, #4]
 800fd28:	f000 fcba 	bl	80106a0 <USBD_ClrFeature>
          break;
 800fd2c:	e004      	b.n	800fd38 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800fd2e:	6839      	ldr	r1, [r7, #0]
 800fd30:	6878      	ldr	r0, [r7, #4]
 800fd32:	f000 fd11 	bl	8010758 <USBD_CtlError>
          break;
 800fd36:	bf00      	nop
      }
      break;
 800fd38:	e004      	b.n	800fd44 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800fd3a:	6839      	ldr	r1, [r7, #0]
 800fd3c:	6878      	ldr	r0, [r7, #4]
 800fd3e:	f000 fd0b 	bl	8010758 <USBD_CtlError>
      break;
 800fd42:	bf00      	nop
  }

  return ret;
 800fd44:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd46:	4618      	mov	r0, r3
 800fd48:	3710      	adds	r7, #16
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	bd80      	pop	{r7, pc}
 800fd4e:	bf00      	nop

0800fd50 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b084      	sub	sp, #16
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
 800fd58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fd5e:	683b      	ldr	r3, [r7, #0]
 800fd60:	781b      	ldrb	r3, [r3, #0]
 800fd62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fd66:	2b40      	cmp	r3, #64	; 0x40
 800fd68:	d005      	beq.n	800fd76 <USBD_StdItfReq+0x26>
 800fd6a:	2b40      	cmp	r3, #64	; 0x40
 800fd6c:	d82f      	bhi.n	800fdce <USBD_StdItfReq+0x7e>
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d001      	beq.n	800fd76 <USBD_StdItfReq+0x26>
 800fd72:	2b20      	cmp	r3, #32
 800fd74:	d12b      	bne.n	800fdce <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd7c:	b2db      	uxtb	r3, r3
 800fd7e:	3b01      	subs	r3, #1
 800fd80:	2b02      	cmp	r3, #2
 800fd82:	d81d      	bhi.n	800fdc0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800fd84:	683b      	ldr	r3, [r7, #0]
 800fd86:	889b      	ldrh	r3, [r3, #4]
 800fd88:	b2db      	uxtb	r3, r3
 800fd8a:	2b01      	cmp	r3, #1
 800fd8c:	d813      	bhi.n	800fdb6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd94:	689b      	ldr	r3, [r3, #8]
 800fd96:	6839      	ldr	r1, [r7, #0]
 800fd98:	6878      	ldr	r0, [r7, #4]
 800fd9a:	4798      	blx	r3
 800fd9c:	4603      	mov	r3, r0
 800fd9e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800fda0:	683b      	ldr	r3, [r7, #0]
 800fda2:	88db      	ldrh	r3, [r3, #6]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d110      	bne.n	800fdca <USBD_StdItfReq+0x7a>
 800fda8:	7bfb      	ldrb	r3, [r7, #15]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d10d      	bne.n	800fdca <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800fdae:	6878      	ldr	r0, [r7, #4]
 800fdb0:	f000 fd9d 	bl	80108ee <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800fdb4:	e009      	b.n	800fdca <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800fdb6:	6839      	ldr	r1, [r7, #0]
 800fdb8:	6878      	ldr	r0, [r7, #4]
 800fdba:	f000 fccd 	bl	8010758 <USBD_CtlError>
          break;
 800fdbe:	e004      	b.n	800fdca <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800fdc0:	6839      	ldr	r1, [r7, #0]
 800fdc2:	6878      	ldr	r0, [r7, #4]
 800fdc4:	f000 fcc8 	bl	8010758 <USBD_CtlError>
          break;
 800fdc8:	e000      	b.n	800fdcc <USBD_StdItfReq+0x7c>
          break;
 800fdca:	bf00      	nop
      }
      break;
 800fdcc:	e004      	b.n	800fdd8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800fdce:	6839      	ldr	r1, [r7, #0]
 800fdd0:	6878      	ldr	r0, [r7, #4]
 800fdd2:	f000 fcc1 	bl	8010758 <USBD_CtlError>
      break;
 800fdd6:	bf00      	nop
  }

  return ret;
 800fdd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdda:	4618      	mov	r0, r3
 800fddc:	3710      	adds	r7, #16
 800fdde:	46bd      	mov	sp, r7
 800fde0:	bd80      	pop	{r7, pc}

0800fde2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fde2:	b580      	push	{r7, lr}
 800fde4:	b084      	sub	sp, #16
 800fde6:	af00      	add	r7, sp, #0
 800fde8:	6078      	str	r0, [r7, #4]
 800fdea:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800fdec:	2300      	movs	r3, #0
 800fdee:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800fdf0:	683b      	ldr	r3, [r7, #0]
 800fdf2:	889b      	ldrh	r3, [r3, #4]
 800fdf4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fdf6:	683b      	ldr	r3, [r7, #0]
 800fdf8:	781b      	ldrb	r3, [r3, #0]
 800fdfa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fdfe:	2b40      	cmp	r3, #64	; 0x40
 800fe00:	d007      	beq.n	800fe12 <USBD_StdEPReq+0x30>
 800fe02:	2b40      	cmp	r3, #64	; 0x40
 800fe04:	f200 8145 	bhi.w	8010092 <USBD_StdEPReq+0x2b0>
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d00c      	beq.n	800fe26 <USBD_StdEPReq+0x44>
 800fe0c:	2b20      	cmp	r3, #32
 800fe0e:	f040 8140 	bne.w	8010092 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fe18:	689b      	ldr	r3, [r3, #8]
 800fe1a:	6839      	ldr	r1, [r7, #0]
 800fe1c:	6878      	ldr	r0, [r7, #4]
 800fe1e:	4798      	blx	r3
 800fe20:	4603      	mov	r3, r0
 800fe22:	73fb      	strb	r3, [r7, #15]
      break;
 800fe24:	e13a      	b.n	801009c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fe26:	683b      	ldr	r3, [r7, #0]
 800fe28:	785b      	ldrb	r3, [r3, #1]
 800fe2a:	2b03      	cmp	r3, #3
 800fe2c:	d007      	beq.n	800fe3e <USBD_StdEPReq+0x5c>
 800fe2e:	2b03      	cmp	r3, #3
 800fe30:	f300 8129 	bgt.w	8010086 <USBD_StdEPReq+0x2a4>
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d07f      	beq.n	800ff38 <USBD_StdEPReq+0x156>
 800fe38:	2b01      	cmp	r3, #1
 800fe3a:	d03c      	beq.n	800feb6 <USBD_StdEPReq+0xd4>
 800fe3c:	e123      	b.n	8010086 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fe44:	b2db      	uxtb	r3, r3
 800fe46:	2b02      	cmp	r3, #2
 800fe48:	d002      	beq.n	800fe50 <USBD_StdEPReq+0x6e>
 800fe4a:	2b03      	cmp	r3, #3
 800fe4c:	d016      	beq.n	800fe7c <USBD_StdEPReq+0x9a>
 800fe4e:	e02c      	b.n	800feaa <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fe50:	7bbb      	ldrb	r3, [r7, #14]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d00d      	beq.n	800fe72 <USBD_StdEPReq+0x90>
 800fe56:	7bbb      	ldrb	r3, [r7, #14]
 800fe58:	2b80      	cmp	r3, #128	; 0x80
 800fe5a:	d00a      	beq.n	800fe72 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fe5c:	7bbb      	ldrb	r3, [r7, #14]
 800fe5e:	4619      	mov	r1, r3
 800fe60:	6878      	ldr	r0, [r7, #4]
 800fe62:	f003 fa09 	bl	8013278 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fe66:	2180      	movs	r1, #128	; 0x80
 800fe68:	6878      	ldr	r0, [r7, #4]
 800fe6a:	f003 fa05 	bl	8013278 <USBD_LL_StallEP>
 800fe6e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fe70:	e020      	b.n	800feb4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800fe72:	6839      	ldr	r1, [r7, #0]
 800fe74:	6878      	ldr	r0, [r7, #4]
 800fe76:	f000 fc6f 	bl	8010758 <USBD_CtlError>
              break;
 800fe7a:	e01b      	b.n	800feb4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fe7c:	683b      	ldr	r3, [r7, #0]
 800fe7e:	885b      	ldrh	r3, [r3, #2]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d10e      	bne.n	800fea2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800fe84:	7bbb      	ldrb	r3, [r7, #14]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d00b      	beq.n	800fea2 <USBD_StdEPReq+0xc0>
 800fe8a:	7bbb      	ldrb	r3, [r7, #14]
 800fe8c:	2b80      	cmp	r3, #128	; 0x80
 800fe8e:	d008      	beq.n	800fea2 <USBD_StdEPReq+0xc0>
 800fe90:	683b      	ldr	r3, [r7, #0]
 800fe92:	88db      	ldrh	r3, [r3, #6]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d104      	bne.n	800fea2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800fe98:	7bbb      	ldrb	r3, [r7, #14]
 800fe9a:	4619      	mov	r1, r3
 800fe9c:	6878      	ldr	r0, [r7, #4]
 800fe9e:	f003 f9eb 	bl	8013278 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800fea2:	6878      	ldr	r0, [r7, #4]
 800fea4:	f000 fd23 	bl	80108ee <USBD_CtlSendStatus>

              break;
 800fea8:	e004      	b.n	800feb4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800feaa:	6839      	ldr	r1, [r7, #0]
 800feac:	6878      	ldr	r0, [r7, #4]
 800feae:	f000 fc53 	bl	8010758 <USBD_CtlError>
              break;
 800feb2:	bf00      	nop
          }
          break;
 800feb4:	e0ec      	b.n	8010090 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800febc:	b2db      	uxtb	r3, r3
 800febe:	2b02      	cmp	r3, #2
 800fec0:	d002      	beq.n	800fec8 <USBD_StdEPReq+0xe6>
 800fec2:	2b03      	cmp	r3, #3
 800fec4:	d016      	beq.n	800fef4 <USBD_StdEPReq+0x112>
 800fec6:	e030      	b.n	800ff2a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fec8:	7bbb      	ldrb	r3, [r7, #14]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d00d      	beq.n	800feea <USBD_StdEPReq+0x108>
 800fece:	7bbb      	ldrb	r3, [r7, #14]
 800fed0:	2b80      	cmp	r3, #128	; 0x80
 800fed2:	d00a      	beq.n	800feea <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fed4:	7bbb      	ldrb	r3, [r7, #14]
 800fed6:	4619      	mov	r1, r3
 800fed8:	6878      	ldr	r0, [r7, #4]
 800feda:	f003 f9cd 	bl	8013278 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fede:	2180      	movs	r1, #128	; 0x80
 800fee0:	6878      	ldr	r0, [r7, #4]
 800fee2:	f003 f9c9 	bl	8013278 <USBD_LL_StallEP>
 800fee6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fee8:	e025      	b.n	800ff36 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800feea:	6839      	ldr	r1, [r7, #0]
 800feec:	6878      	ldr	r0, [r7, #4]
 800feee:	f000 fc33 	bl	8010758 <USBD_CtlError>
              break;
 800fef2:	e020      	b.n	800ff36 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fef4:	683b      	ldr	r3, [r7, #0]
 800fef6:	885b      	ldrh	r3, [r3, #2]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d11b      	bne.n	800ff34 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800fefc:	7bbb      	ldrb	r3, [r7, #14]
 800fefe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d004      	beq.n	800ff10 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ff06:	7bbb      	ldrb	r3, [r7, #14]
 800ff08:	4619      	mov	r1, r3
 800ff0a:	6878      	ldr	r0, [r7, #4]
 800ff0c:	f003 f9d3 	bl	80132b6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ff10:	6878      	ldr	r0, [r7, #4]
 800ff12:	f000 fcec 	bl	80108ee <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff1c:	689b      	ldr	r3, [r3, #8]
 800ff1e:	6839      	ldr	r1, [r7, #0]
 800ff20:	6878      	ldr	r0, [r7, #4]
 800ff22:	4798      	blx	r3
 800ff24:	4603      	mov	r3, r0
 800ff26:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800ff28:	e004      	b.n	800ff34 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ff2a:	6839      	ldr	r1, [r7, #0]
 800ff2c:	6878      	ldr	r0, [r7, #4]
 800ff2e:	f000 fc13 	bl	8010758 <USBD_CtlError>
              break;
 800ff32:	e000      	b.n	800ff36 <USBD_StdEPReq+0x154>
              break;
 800ff34:	bf00      	nop
          }
          break;
 800ff36:	e0ab      	b.n	8010090 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff3e:	b2db      	uxtb	r3, r3
 800ff40:	2b02      	cmp	r3, #2
 800ff42:	d002      	beq.n	800ff4a <USBD_StdEPReq+0x168>
 800ff44:	2b03      	cmp	r3, #3
 800ff46:	d032      	beq.n	800ffae <USBD_StdEPReq+0x1cc>
 800ff48:	e097      	b.n	801007a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ff4a:	7bbb      	ldrb	r3, [r7, #14]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d007      	beq.n	800ff60 <USBD_StdEPReq+0x17e>
 800ff50:	7bbb      	ldrb	r3, [r7, #14]
 800ff52:	2b80      	cmp	r3, #128	; 0x80
 800ff54:	d004      	beq.n	800ff60 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ff56:	6839      	ldr	r1, [r7, #0]
 800ff58:	6878      	ldr	r0, [r7, #4]
 800ff5a:	f000 fbfd 	bl	8010758 <USBD_CtlError>
                break;
 800ff5e:	e091      	b.n	8010084 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ff60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	da0b      	bge.n	800ff80 <USBD_StdEPReq+0x19e>
 800ff68:	7bbb      	ldrb	r3, [r7, #14]
 800ff6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ff6e:	4613      	mov	r3, r2
 800ff70:	009b      	lsls	r3, r3, #2
 800ff72:	4413      	add	r3, r2
 800ff74:	009b      	lsls	r3, r3, #2
 800ff76:	3310      	adds	r3, #16
 800ff78:	687a      	ldr	r2, [r7, #4]
 800ff7a:	4413      	add	r3, r2
 800ff7c:	3304      	adds	r3, #4
 800ff7e:	e00b      	b.n	800ff98 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ff80:	7bbb      	ldrb	r3, [r7, #14]
 800ff82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ff86:	4613      	mov	r3, r2
 800ff88:	009b      	lsls	r3, r3, #2
 800ff8a:	4413      	add	r3, r2
 800ff8c:	009b      	lsls	r3, r3, #2
 800ff8e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ff92:	687a      	ldr	r2, [r7, #4]
 800ff94:	4413      	add	r3, r2
 800ff96:	3304      	adds	r3, #4
 800ff98:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ff9a:	68bb      	ldr	r3, [r7, #8]
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ffa0:	68bb      	ldr	r3, [r7, #8]
 800ffa2:	2202      	movs	r2, #2
 800ffa4:	4619      	mov	r1, r3
 800ffa6:	6878      	ldr	r0, [r7, #4]
 800ffa8:	f000 fc47 	bl	801083a <USBD_CtlSendData>
              break;
 800ffac:	e06a      	b.n	8010084 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ffae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	da11      	bge.n	800ffda <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ffb6:	7bbb      	ldrb	r3, [r7, #14]
 800ffb8:	f003 020f 	and.w	r2, r3, #15
 800ffbc:	6879      	ldr	r1, [r7, #4]
 800ffbe:	4613      	mov	r3, r2
 800ffc0:	009b      	lsls	r3, r3, #2
 800ffc2:	4413      	add	r3, r2
 800ffc4:	009b      	lsls	r3, r3, #2
 800ffc6:	440b      	add	r3, r1
 800ffc8:	3324      	adds	r3, #36	; 0x24
 800ffca:	881b      	ldrh	r3, [r3, #0]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d117      	bne.n	8010000 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ffd0:	6839      	ldr	r1, [r7, #0]
 800ffd2:	6878      	ldr	r0, [r7, #4]
 800ffd4:	f000 fbc0 	bl	8010758 <USBD_CtlError>
                  break;
 800ffd8:	e054      	b.n	8010084 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ffda:	7bbb      	ldrb	r3, [r7, #14]
 800ffdc:	f003 020f 	and.w	r2, r3, #15
 800ffe0:	6879      	ldr	r1, [r7, #4]
 800ffe2:	4613      	mov	r3, r2
 800ffe4:	009b      	lsls	r3, r3, #2
 800ffe6:	4413      	add	r3, r2
 800ffe8:	009b      	lsls	r3, r3, #2
 800ffea:	440b      	add	r3, r1
 800ffec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800fff0:	881b      	ldrh	r3, [r3, #0]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d104      	bne.n	8010000 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800fff6:	6839      	ldr	r1, [r7, #0]
 800fff8:	6878      	ldr	r0, [r7, #4]
 800fffa:	f000 fbad 	bl	8010758 <USBD_CtlError>
                  break;
 800fffe:	e041      	b.n	8010084 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010000:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010004:	2b00      	cmp	r3, #0
 8010006:	da0b      	bge.n	8010020 <USBD_StdEPReq+0x23e>
 8010008:	7bbb      	ldrb	r3, [r7, #14]
 801000a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801000e:	4613      	mov	r3, r2
 8010010:	009b      	lsls	r3, r3, #2
 8010012:	4413      	add	r3, r2
 8010014:	009b      	lsls	r3, r3, #2
 8010016:	3310      	adds	r3, #16
 8010018:	687a      	ldr	r2, [r7, #4]
 801001a:	4413      	add	r3, r2
 801001c:	3304      	adds	r3, #4
 801001e:	e00b      	b.n	8010038 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010020:	7bbb      	ldrb	r3, [r7, #14]
 8010022:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010026:	4613      	mov	r3, r2
 8010028:	009b      	lsls	r3, r3, #2
 801002a:	4413      	add	r3, r2
 801002c:	009b      	lsls	r3, r3, #2
 801002e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010032:	687a      	ldr	r2, [r7, #4]
 8010034:	4413      	add	r3, r2
 8010036:	3304      	adds	r3, #4
 8010038:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801003a:	7bbb      	ldrb	r3, [r7, #14]
 801003c:	2b00      	cmp	r3, #0
 801003e:	d002      	beq.n	8010046 <USBD_StdEPReq+0x264>
 8010040:	7bbb      	ldrb	r3, [r7, #14]
 8010042:	2b80      	cmp	r3, #128	; 0x80
 8010044:	d103      	bne.n	801004e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8010046:	68bb      	ldr	r3, [r7, #8]
 8010048:	2200      	movs	r2, #0
 801004a:	601a      	str	r2, [r3, #0]
 801004c:	e00e      	b.n	801006c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801004e:	7bbb      	ldrb	r3, [r7, #14]
 8010050:	4619      	mov	r1, r3
 8010052:	6878      	ldr	r0, [r7, #4]
 8010054:	f003 f94e 	bl	80132f4 <USBD_LL_IsStallEP>
 8010058:	4603      	mov	r3, r0
 801005a:	2b00      	cmp	r3, #0
 801005c:	d003      	beq.n	8010066 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 801005e:	68bb      	ldr	r3, [r7, #8]
 8010060:	2201      	movs	r2, #1
 8010062:	601a      	str	r2, [r3, #0]
 8010064:	e002      	b.n	801006c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8010066:	68bb      	ldr	r3, [r7, #8]
 8010068:	2200      	movs	r2, #0
 801006a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801006c:	68bb      	ldr	r3, [r7, #8]
 801006e:	2202      	movs	r2, #2
 8010070:	4619      	mov	r1, r3
 8010072:	6878      	ldr	r0, [r7, #4]
 8010074:	f000 fbe1 	bl	801083a <USBD_CtlSendData>
              break;
 8010078:	e004      	b.n	8010084 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 801007a:	6839      	ldr	r1, [r7, #0]
 801007c:	6878      	ldr	r0, [r7, #4]
 801007e:	f000 fb6b 	bl	8010758 <USBD_CtlError>
              break;
 8010082:	bf00      	nop
          }
          break;
 8010084:	e004      	b.n	8010090 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8010086:	6839      	ldr	r1, [r7, #0]
 8010088:	6878      	ldr	r0, [r7, #4]
 801008a:	f000 fb65 	bl	8010758 <USBD_CtlError>
          break;
 801008e:	bf00      	nop
      }
      break;
 8010090:	e004      	b.n	801009c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8010092:	6839      	ldr	r1, [r7, #0]
 8010094:	6878      	ldr	r0, [r7, #4]
 8010096:	f000 fb5f 	bl	8010758 <USBD_CtlError>
      break;
 801009a:	bf00      	nop
  }

  return ret;
 801009c:	7bfb      	ldrb	r3, [r7, #15]
}
 801009e:	4618      	mov	r0, r3
 80100a0:	3710      	adds	r7, #16
 80100a2:	46bd      	mov	sp, r7
 80100a4:	bd80      	pop	{r7, pc}
	...

080100a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b084      	sub	sp, #16
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
 80100b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80100b2:	2300      	movs	r3, #0
 80100b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80100b6:	2300      	movs	r3, #0
 80100b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80100ba:	2300      	movs	r3, #0
 80100bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80100be:	683b      	ldr	r3, [r7, #0]
 80100c0:	885b      	ldrh	r3, [r3, #2]
 80100c2:	0a1b      	lsrs	r3, r3, #8
 80100c4:	b29b      	uxth	r3, r3
 80100c6:	3b01      	subs	r3, #1
 80100c8:	2b0e      	cmp	r3, #14
 80100ca:	f200 8152 	bhi.w	8010372 <USBD_GetDescriptor+0x2ca>
 80100ce:	a201      	add	r2, pc, #4	; (adr r2, 80100d4 <USBD_GetDescriptor+0x2c>)
 80100d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100d4:	08010145 	.word	0x08010145
 80100d8:	0801015d 	.word	0x0801015d
 80100dc:	0801019d 	.word	0x0801019d
 80100e0:	08010373 	.word	0x08010373
 80100e4:	08010373 	.word	0x08010373
 80100e8:	08010313 	.word	0x08010313
 80100ec:	0801033f 	.word	0x0801033f
 80100f0:	08010373 	.word	0x08010373
 80100f4:	08010373 	.word	0x08010373
 80100f8:	08010373 	.word	0x08010373
 80100fc:	08010373 	.word	0x08010373
 8010100:	08010373 	.word	0x08010373
 8010104:	08010373 	.word	0x08010373
 8010108:	08010373 	.word	0x08010373
 801010c:	08010111 	.word	0x08010111
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010116:	69db      	ldr	r3, [r3, #28]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d00b      	beq.n	8010134 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010122:	69db      	ldr	r3, [r3, #28]
 8010124:	687a      	ldr	r2, [r7, #4]
 8010126:	7c12      	ldrb	r2, [r2, #16]
 8010128:	f107 0108 	add.w	r1, r7, #8
 801012c:	4610      	mov	r0, r2
 801012e:	4798      	blx	r3
 8010130:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010132:	e126      	b.n	8010382 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010134:	6839      	ldr	r1, [r7, #0]
 8010136:	6878      	ldr	r0, [r7, #4]
 8010138:	f000 fb0e 	bl	8010758 <USBD_CtlError>
        err++;
 801013c:	7afb      	ldrb	r3, [r7, #11]
 801013e:	3301      	adds	r3, #1
 8010140:	72fb      	strb	r3, [r7, #11]
      break;
 8010142:	e11e      	b.n	8010382 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	687a      	ldr	r2, [r7, #4]
 801014e:	7c12      	ldrb	r2, [r2, #16]
 8010150:	f107 0108 	add.w	r1, r7, #8
 8010154:	4610      	mov	r0, r2
 8010156:	4798      	blx	r3
 8010158:	60f8      	str	r0, [r7, #12]
      break;
 801015a:	e112      	b.n	8010382 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	7c1b      	ldrb	r3, [r3, #16]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d10d      	bne.n	8010180 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801016a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801016c:	f107 0208 	add.w	r2, r7, #8
 8010170:	4610      	mov	r0, r2
 8010172:	4798      	blx	r3
 8010174:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	3301      	adds	r3, #1
 801017a:	2202      	movs	r2, #2
 801017c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801017e:	e100      	b.n	8010382 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010188:	f107 0208 	add.w	r2, r7, #8
 801018c:	4610      	mov	r0, r2
 801018e:	4798      	blx	r3
 8010190:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	3301      	adds	r3, #1
 8010196:	2202      	movs	r2, #2
 8010198:	701a      	strb	r2, [r3, #0]
      break;
 801019a:	e0f2      	b.n	8010382 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801019c:	683b      	ldr	r3, [r7, #0]
 801019e:	885b      	ldrh	r3, [r3, #2]
 80101a0:	b2db      	uxtb	r3, r3
 80101a2:	2b05      	cmp	r3, #5
 80101a4:	f200 80ac 	bhi.w	8010300 <USBD_GetDescriptor+0x258>
 80101a8:	a201      	add	r2, pc, #4	; (adr r2, 80101b0 <USBD_GetDescriptor+0x108>)
 80101aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101ae:	bf00      	nop
 80101b0:	080101c9 	.word	0x080101c9
 80101b4:	080101fd 	.word	0x080101fd
 80101b8:	08010231 	.word	0x08010231
 80101bc:	08010265 	.word	0x08010265
 80101c0:	08010299 	.word	0x08010299
 80101c4:	080102cd 	.word	0x080102cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80101ce:	685b      	ldr	r3, [r3, #4]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d00b      	beq.n	80101ec <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80101da:	685b      	ldr	r3, [r3, #4]
 80101dc:	687a      	ldr	r2, [r7, #4]
 80101de:	7c12      	ldrb	r2, [r2, #16]
 80101e0:	f107 0108 	add.w	r1, r7, #8
 80101e4:	4610      	mov	r0, r2
 80101e6:	4798      	blx	r3
 80101e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80101ea:	e091      	b.n	8010310 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80101ec:	6839      	ldr	r1, [r7, #0]
 80101ee:	6878      	ldr	r0, [r7, #4]
 80101f0:	f000 fab2 	bl	8010758 <USBD_CtlError>
            err++;
 80101f4:	7afb      	ldrb	r3, [r7, #11]
 80101f6:	3301      	adds	r3, #1
 80101f8:	72fb      	strb	r3, [r7, #11]
          break;
 80101fa:	e089      	b.n	8010310 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010202:	689b      	ldr	r3, [r3, #8]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d00b      	beq.n	8010220 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801020e:	689b      	ldr	r3, [r3, #8]
 8010210:	687a      	ldr	r2, [r7, #4]
 8010212:	7c12      	ldrb	r2, [r2, #16]
 8010214:	f107 0108 	add.w	r1, r7, #8
 8010218:	4610      	mov	r0, r2
 801021a:	4798      	blx	r3
 801021c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801021e:	e077      	b.n	8010310 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010220:	6839      	ldr	r1, [r7, #0]
 8010222:	6878      	ldr	r0, [r7, #4]
 8010224:	f000 fa98 	bl	8010758 <USBD_CtlError>
            err++;
 8010228:	7afb      	ldrb	r3, [r7, #11]
 801022a:	3301      	adds	r3, #1
 801022c:	72fb      	strb	r3, [r7, #11]
          break;
 801022e:	e06f      	b.n	8010310 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010236:	68db      	ldr	r3, [r3, #12]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d00b      	beq.n	8010254 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010242:	68db      	ldr	r3, [r3, #12]
 8010244:	687a      	ldr	r2, [r7, #4]
 8010246:	7c12      	ldrb	r2, [r2, #16]
 8010248:	f107 0108 	add.w	r1, r7, #8
 801024c:	4610      	mov	r0, r2
 801024e:	4798      	blx	r3
 8010250:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010252:	e05d      	b.n	8010310 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010254:	6839      	ldr	r1, [r7, #0]
 8010256:	6878      	ldr	r0, [r7, #4]
 8010258:	f000 fa7e 	bl	8010758 <USBD_CtlError>
            err++;
 801025c:	7afb      	ldrb	r3, [r7, #11]
 801025e:	3301      	adds	r3, #1
 8010260:	72fb      	strb	r3, [r7, #11]
          break;
 8010262:	e055      	b.n	8010310 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801026a:	691b      	ldr	r3, [r3, #16]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d00b      	beq.n	8010288 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010276:	691b      	ldr	r3, [r3, #16]
 8010278:	687a      	ldr	r2, [r7, #4]
 801027a:	7c12      	ldrb	r2, [r2, #16]
 801027c:	f107 0108 	add.w	r1, r7, #8
 8010280:	4610      	mov	r0, r2
 8010282:	4798      	blx	r3
 8010284:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010286:	e043      	b.n	8010310 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010288:	6839      	ldr	r1, [r7, #0]
 801028a:	6878      	ldr	r0, [r7, #4]
 801028c:	f000 fa64 	bl	8010758 <USBD_CtlError>
            err++;
 8010290:	7afb      	ldrb	r3, [r7, #11]
 8010292:	3301      	adds	r3, #1
 8010294:	72fb      	strb	r3, [r7, #11]
          break;
 8010296:	e03b      	b.n	8010310 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801029e:	695b      	ldr	r3, [r3, #20]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d00b      	beq.n	80102bc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80102aa:	695b      	ldr	r3, [r3, #20]
 80102ac:	687a      	ldr	r2, [r7, #4]
 80102ae:	7c12      	ldrb	r2, [r2, #16]
 80102b0:	f107 0108 	add.w	r1, r7, #8
 80102b4:	4610      	mov	r0, r2
 80102b6:	4798      	blx	r3
 80102b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80102ba:	e029      	b.n	8010310 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80102bc:	6839      	ldr	r1, [r7, #0]
 80102be:	6878      	ldr	r0, [r7, #4]
 80102c0:	f000 fa4a 	bl	8010758 <USBD_CtlError>
            err++;
 80102c4:	7afb      	ldrb	r3, [r7, #11]
 80102c6:	3301      	adds	r3, #1
 80102c8:	72fb      	strb	r3, [r7, #11]
          break;
 80102ca:	e021      	b.n	8010310 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80102d2:	699b      	ldr	r3, [r3, #24]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d00b      	beq.n	80102f0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80102de:	699b      	ldr	r3, [r3, #24]
 80102e0:	687a      	ldr	r2, [r7, #4]
 80102e2:	7c12      	ldrb	r2, [r2, #16]
 80102e4:	f107 0108 	add.w	r1, r7, #8
 80102e8:	4610      	mov	r0, r2
 80102ea:	4798      	blx	r3
 80102ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80102ee:	e00f      	b.n	8010310 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80102f0:	6839      	ldr	r1, [r7, #0]
 80102f2:	6878      	ldr	r0, [r7, #4]
 80102f4:	f000 fa30 	bl	8010758 <USBD_CtlError>
            err++;
 80102f8:	7afb      	ldrb	r3, [r7, #11]
 80102fa:	3301      	adds	r3, #1
 80102fc:	72fb      	strb	r3, [r7, #11]
          break;
 80102fe:	e007      	b.n	8010310 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8010300:	6839      	ldr	r1, [r7, #0]
 8010302:	6878      	ldr	r0, [r7, #4]
 8010304:	f000 fa28 	bl	8010758 <USBD_CtlError>
          err++;
 8010308:	7afb      	ldrb	r3, [r7, #11]
 801030a:	3301      	adds	r3, #1
 801030c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 801030e:	bf00      	nop
      }
      break;
 8010310:	e037      	b.n	8010382 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	7c1b      	ldrb	r3, [r3, #16]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d109      	bne.n	801032e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010322:	f107 0208 	add.w	r2, r7, #8
 8010326:	4610      	mov	r0, r2
 8010328:	4798      	blx	r3
 801032a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801032c:	e029      	b.n	8010382 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801032e:	6839      	ldr	r1, [r7, #0]
 8010330:	6878      	ldr	r0, [r7, #4]
 8010332:	f000 fa11 	bl	8010758 <USBD_CtlError>
        err++;
 8010336:	7afb      	ldrb	r3, [r7, #11]
 8010338:	3301      	adds	r3, #1
 801033a:	72fb      	strb	r3, [r7, #11]
      break;
 801033c:	e021      	b.n	8010382 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	7c1b      	ldrb	r3, [r3, #16]
 8010342:	2b00      	cmp	r3, #0
 8010344:	d10d      	bne.n	8010362 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801034c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801034e:	f107 0208 	add.w	r2, r7, #8
 8010352:	4610      	mov	r0, r2
 8010354:	4798      	blx	r3
 8010356:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	3301      	adds	r3, #1
 801035c:	2207      	movs	r2, #7
 801035e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010360:	e00f      	b.n	8010382 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010362:	6839      	ldr	r1, [r7, #0]
 8010364:	6878      	ldr	r0, [r7, #4]
 8010366:	f000 f9f7 	bl	8010758 <USBD_CtlError>
        err++;
 801036a:	7afb      	ldrb	r3, [r7, #11]
 801036c:	3301      	adds	r3, #1
 801036e:	72fb      	strb	r3, [r7, #11]
      break;
 8010370:	e007      	b.n	8010382 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8010372:	6839      	ldr	r1, [r7, #0]
 8010374:	6878      	ldr	r0, [r7, #4]
 8010376:	f000 f9ef 	bl	8010758 <USBD_CtlError>
      err++;
 801037a:	7afb      	ldrb	r3, [r7, #11]
 801037c:	3301      	adds	r3, #1
 801037e:	72fb      	strb	r3, [r7, #11]
      break;
 8010380:	bf00      	nop
  }

  if (err != 0U)
 8010382:	7afb      	ldrb	r3, [r7, #11]
 8010384:	2b00      	cmp	r3, #0
 8010386:	d11e      	bne.n	80103c6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8010388:	683b      	ldr	r3, [r7, #0]
 801038a:	88db      	ldrh	r3, [r3, #6]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d016      	beq.n	80103be <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8010390:	893b      	ldrh	r3, [r7, #8]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d00e      	beq.n	80103b4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8010396:	683b      	ldr	r3, [r7, #0]
 8010398:	88da      	ldrh	r2, [r3, #6]
 801039a:	893b      	ldrh	r3, [r7, #8]
 801039c:	4293      	cmp	r3, r2
 801039e:	bf28      	it	cs
 80103a0:	4613      	movcs	r3, r2
 80103a2:	b29b      	uxth	r3, r3
 80103a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80103a6:	893b      	ldrh	r3, [r7, #8]
 80103a8:	461a      	mov	r2, r3
 80103aa:	68f9      	ldr	r1, [r7, #12]
 80103ac:	6878      	ldr	r0, [r7, #4]
 80103ae:	f000 fa44 	bl	801083a <USBD_CtlSendData>
 80103b2:	e009      	b.n	80103c8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80103b4:	6839      	ldr	r1, [r7, #0]
 80103b6:	6878      	ldr	r0, [r7, #4]
 80103b8:	f000 f9ce 	bl	8010758 <USBD_CtlError>
 80103bc:	e004      	b.n	80103c8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80103be:	6878      	ldr	r0, [r7, #4]
 80103c0:	f000 fa95 	bl	80108ee <USBD_CtlSendStatus>
 80103c4:	e000      	b.n	80103c8 <USBD_GetDescriptor+0x320>
    return;
 80103c6:	bf00      	nop
  }
}
 80103c8:	3710      	adds	r7, #16
 80103ca:	46bd      	mov	sp, r7
 80103cc:	bd80      	pop	{r7, pc}
 80103ce:	bf00      	nop

080103d0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80103d0:	b580      	push	{r7, lr}
 80103d2:	b084      	sub	sp, #16
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	6078      	str	r0, [r7, #4]
 80103d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80103da:	683b      	ldr	r3, [r7, #0]
 80103dc:	889b      	ldrh	r3, [r3, #4]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d131      	bne.n	8010446 <USBD_SetAddress+0x76>
 80103e2:	683b      	ldr	r3, [r7, #0]
 80103e4:	88db      	ldrh	r3, [r3, #6]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d12d      	bne.n	8010446 <USBD_SetAddress+0x76>
 80103ea:	683b      	ldr	r3, [r7, #0]
 80103ec:	885b      	ldrh	r3, [r3, #2]
 80103ee:	2b7f      	cmp	r3, #127	; 0x7f
 80103f0:	d829      	bhi.n	8010446 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80103f2:	683b      	ldr	r3, [r7, #0]
 80103f4:	885b      	ldrh	r3, [r3, #2]
 80103f6:	b2db      	uxtb	r3, r3
 80103f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80103fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010404:	b2db      	uxtb	r3, r3
 8010406:	2b03      	cmp	r3, #3
 8010408:	d104      	bne.n	8010414 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801040a:	6839      	ldr	r1, [r7, #0]
 801040c:	6878      	ldr	r0, [r7, #4]
 801040e:	f000 f9a3 	bl	8010758 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010412:	e01d      	b.n	8010450 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	7bfa      	ldrb	r2, [r7, #15]
 8010418:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801041c:	7bfb      	ldrb	r3, [r7, #15]
 801041e:	4619      	mov	r1, r3
 8010420:	6878      	ldr	r0, [r7, #4]
 8010422:	f002 ff94 	bl	801334e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010426:	6878      	ldr	r0, [r7, #4]
 8010428:	f000 fa61 	bl	80108ee <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801042c:	7bfb      	ldrb	r3, [r7, #15]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d004      	beq.n	801043c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	2202      	movs	r2, #2
 8010436:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801043a:	e009      	b.n	8010450 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	2201      	movs	r2, #1
 8010440:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010444:	e004      	b.n	8010450 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010446:	6839      	ldr	r1, [r7, #0]
 8010448:	6878      	ldr	r0, [r7, #4]
 801044a:	f000 f985 	bl	8010758 <USBD_CtlError>
  }
}
 801044e:	bf00      	nop
 8010450:	bf00      	nop
 8010452:	3710      	adds	r7, #16
 8010454:	46bd      	mov	sp, r7
 8010456:	bd80      	pop	{r7, pc}

08010458 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010458:	b580      	push	{r7, lr}
 801045a:	b084      	sub	sp, #16
 801045c:	af00      	add	r7, sp, #0
 801045e:	6078      	str	r0, [r7, #4]
 8010460:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010462:	2300      	movs	r3, #0
 8010464:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010466:	683b      	ldr	r3, [r7, #0]
 8010468:	885b      	ldrh	r3, [r3, #2]
 801046a:	b2da      	uxtb	r2, r3
 801046c:	4b4c      	ldr	r3, [pc, #304]	; (80105a0 <USBD_SetConfig+0x148>)
 801046e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010470:	4b4b      	ldr	r3, [pc, #300]	; (80105a0 <USBD_SetConfig+0x148>)
 8010472:	781b      	ldrb	r3, [r3, #0]
 8010474:	2b01      	cmp	r3, #1
 8010476:	d905      	bls.n	8010484 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010478:	6839      	ldr	r1, [r7, #0]
 801047a:	6878      	ldr	r0, [r7, #4]
 801047c:	f000 f96c 	bl	8010758 <USBD_CtlError>
    return USBD_FAIL;
 8010480:	2303      	movs	r3, #3
 8010482:	e088      	b.n	8010596 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801048a:	b2db      	uxtb	r3, r3
 801048c:	2b02      	cmp	r3, #2
 801048e:	d002      	beq.n	8010496 <USBD_SetConfig+0x3e>
 8010490:	2b03      	cmp	r3, #3
 8010492:	d025      	beq.n	80104e0 <USBD_SetConfig+0x88>
 8010494:	e071      	b.n	801057a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8010496:	4b42      	ldr	r3, [pc, #264]	; (80105a0 <USBD_SetConfig+0x148>)
 8010498:	781b      	ldrb	r3, [r3, #0]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d01c      	beq.n	80104d8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 801049e:	4b40      	ldr	r3, [pc, #256]	; (80105a0 <USBD_SetConfig+0x148>)
 80104a0:	781b      	ldrb	r3, [r3, #0]
 80104a2:	461a      	mov	r2, r3
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80104a8:	4b3d      	ldr	r3, [pc, #244]	; (80105a0 <USBD_SetConfig+0x148>)
 80104aa:	781b      	ldrb	r3, [r3, #0]
 80104ac:	4619      	mov	r1, r3
 80104ae:	6878      	ldr	r0, [r7, #4]
 80104b0:	f7ff f992 	bl	800f7d8 <USBD_SetClassConfig>
 80104b4:	4603      	mov	r3, r0
 80104b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80104b8:	7bfb      	ldrb	r3, [r7, #15]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d004      	beq.n	80104c8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80104be:	6839      	ldr	r1, [r7, #0]
 80104c0:	6878      	ldr	r0, [r7, #4]
 80104c2:	f000 f949 	bl	8010758 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80104c6:	e065      	b.n	8010594 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80104c8:	6878      	ldr	r0, [r7, #4]
 80104ca:	f000 fa10 	bl	80108ee <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	2203      	movs	r2, #3
 80104d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80104d6:	e05d      	b.n	8010594 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80104d8:	6878      	ldr	r0, [r7, #4]
 80104da:	f000 fa08 	bl	80108ee <USBD_CtlSendStatus>
      break;
 80104de:	e059      	b.n	8010594 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80104e0:	4b2f      	ldr	r3, [pc, #188]	; (80105a0 <USBD_SetConfig+0x148>)
 80104e2:	781b      	ldrb	r3, [r3, #0]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d112      	bne.n	801050e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	2202      	movs	r2, #2
 80104ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80104f0:	4b2b      	ldr	r3, [pc, #172]	; (80105a0 <USBD_SetConfig+0x148>)
 80104f2:	781b      	ldrb	r3, [r3, #0]
 80104f4:	461a      	mov	r2, r3
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80104fa:	4b29      	ldr	r3, [pc, #164]	; (80105a0 <USBD_SetConfig+0x148>)
 80104fc:	781b      	ldrb	r3, [r3, #0]
 80104fe:	4619      	mov	r1, r3
 8010500:	6878      	ldr	r0, [r7, #4]
 8010502:	f7ff f985 	bl	800f810 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8010506:	6878      	ldr	r0, [r7, #4]
 8010508:	f000 f9f1 	bl	80108ee <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801050c:	e042      	b.n	8010594 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 801050e:	4b24      	ldr	r3, [pc, #144]	; (80105a0 <USBD_SetConfig+0x148>)
 8010510:	781b      	ldrb	r3, [r3, #0]
 8010512:	461a      	mov	r2, r3
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	685b      	ldr	r3, [r3, #4]
 8010518:	429a      	cmp	r2, r3
 801051a:	d02a      	beq.n	8010572 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	685b      	ldr	r3, [r3, #4]
 8010520:	b2db      	uxtb	r3, r3
 8010522:	4619      	mov	r1, r3
 8010524:	6878      	ldr	r0, [r7, #4]
 8010526:	f7ff f973 	bl	800f810 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801052a:	4b1d      	ldr	r3, [pc, #116]	; (80105a0 <USBD_SetConfig+0x148>)
 801052c:	781b      	ldrb	r3, [r3, #0]
 801052e:	461a      	mov	r2, r3
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010534:	4b1a      	ldr	r3, [pc, #104]	; (80105a0 <USBD_SetConfig+0x148>)
 8010536:	781b      	ldrb	r3, [r3, #0]
 8010538:	4619      	mov	r1, r3
 801053a:	6878      	ldr	r0, [r7, #4]
 801053c:	f7ff f94c 	bl	800f7d8 <USBD_SetClassConfig>
 8010540:	4603      	mov	r3, r0
 8010542:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010544:	7bfb      	ldrb	r3, [r7, #15]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d00f      	beq.n	801056a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 801054a:	6839      	ldr	r1, [r7, #0]
 801054c:	6878      	ldr	r0, [r7, #4]
 801054e:	f000 f903 	bl	8010758 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	685b      	ldr	r3, [r3, #4]
 8010556:	b2db      	uxtb	r3, r3
 8010558:	4619      	mov	r1, r3
 801055a:	6878      	ldr	r0, [r7, #4]
 801055c:	f7ff f958 	bl	800f810 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	2202      	movs	r2, #2
 8010564:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8010568:	e014      	b.n	8010594 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801056a:	6878      	ldr	r0, [r7, #4]
 801056c:	f000 f9bf 	bl	80108ee <USBD_CtlSendStatus>
      break;
 8010570:	e010      	b.n	8010594 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8010572:	6878      	ldr	r0, [r7, #4]
 8010574:	f000 f9bb 	bl	80108ee <USBD_CtlSendStatus>
      break;
 8010578:	e00c      	b.n	8010594 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 801057a:	6839      	ldr	r1, [r7, #0]
 801057c:	6878      	ldr	r0, [r7, #4]
 801057e:	f000 f8eb 	bl	8010758 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010582:	4b07      	ldr	r3, [pc, #28]	; (80105a0 <USBD_SetConfig+0x148>)
 8010584:	781b      	ldrb	r3, [r3, #0]
 8010586:	4619      	mov	r1, r3
 8010588:	6878      	ldr	r0, [r7, #4]
 801058a:	f7ff f941 	bl	800f810 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801058e:	2303      	movs	r3, #3
 8010590:	73fb      	strb	r3, [r7, #15]
      break;
 8010592:	bf00      	nop
  }

  return ret;
 8010594:	7bfb      	ldrb	r3, [r7, #15]
}
 8010596:	4618      	mov	r0, r3
 8010598:	3710      	adds	r7, #16
 801059a:	46bd      	mov	sp, r7
 801059c:	bd80      	pop	{r7, pc}
 801059e:	bf00      	nop
 80105a0:	20000aec 	.word	0x20000aec

080105a4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b082      	sub	sp, #8
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]
 80105ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80105ae:	683b      	ldr	r3, [r7, #0]
 80105b0:	88db      	ldrh	r3, [r3, #6]
 80105b2:	2b01      	cmp	r3, #1
 80105b4:	d004      	beq.n	80105c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80105b6:	6839      	ldr	r1, [r7, #0]
 80105b8:	6878      	ldr	r0, [r7, #4]
 80105ba:	f000 f8cd 	bl	8010758 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80105be:	e023      	b.n	8010608 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80105c6:	b2db      	uxtb	r3, r3
 80105c8:	2b02      	cmp	r3, #2
 80105ca:	dc02      	bgt.n	80105d2 <USBD_GetConfig+0x2e>
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	dc03      	bgt.n	80105d8 <USBD_GetConfig+0x34>
 80105d0:	e015      	b.n	80105fe <USBD_GetConfig+0x5a>
 80105d2:	2b03      	cmp	r3, #3
 80105d4:	d00b      	beq.n	80105ee <USBD_GetConfig+0x4a>
 80105d6:	e012      	b.n	80105fe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	2200      	movs	r2, #0
 80105dc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	3308      	adds	r3, #8
 80105e2:	2201      	movs	r2, #1
 80105e4:	4619      	mov	r1, r3
 80105e6:	6878      	ldr	r0, [r7, #4]
 80105e8:	f000 f927 	bl	801083a <USBD_CtlSendData>
        break;
 80105ec:	e00c      	b.n	8010608 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	3304      	adds	r3, #4
 80105f2:	2201      	movs	r2, #1
 80105f4:	4619      	mov	r1, r3
 80105f6:	6878      	ldr	r0, [r7, #4]
 80105f8:	f000 f91f 	bl	801083a <USBD_CtlSendData>
        break;
 80105fc:	e004      	b.n	8010608 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80105fe:	6839      	ldr	r1, [r7, #0]
 8010600:	6878      	ldr	r0, [r7, #4]
 8010602:	f000 f8a9 	bl	8010758 <USBD_CtlError>
        break;
 8010606:	bf00      	nop
}
 8010608:	bf00      	nop
 801060a:	3708      	adds	r7, #8
 801060c:	46bd      	mov	sp, r7
 801060e:	bd80      	pop	{r7, pc}

08010610 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010610:	b580      	push	{r7, lr}
 8010612:	b082      	sub	sp, #8
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
 8010618:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010620:	b2db      	uxtb	r3, r3
 8010622:	3b01      	subs	r3, #1
 8010624:	2b02      	cmp	r3, #2
 8010626:	d81e      	bhi.n	8010666 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010628:	683b      	ldr	r3, [r7, #0]
 801062a:	88db      	ldrh	r3, [r3, #6]
 801062c:	2b02      	cmp	r3, #2
 801062e:	d004      	beq.n	801063a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010630:	6839      	ldr	r1, [r7, #0]
 8010632:	6878      	ldr	r0, [r7, #4]
 8010634:	f000 f890 	bl	8010758 <USBD_CtlError>
        break;
 8010638:	e01a      	b.n	8010670 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	2201      	movs	r2, #1
 801063e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8010646:	2b00      	cmp	r3, #0
 8010648:	d005      	beq.n	8010656 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	68db      	ldr	r3, [r3, #12]
 801064e:	f043 0202 	orr.w	r2, r3, #2
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	330c      	adds	r3, #12
 801065a:	2202      	movs	r2, #2
 801065c:	4619      	mov	r1, r3
 801065e:	6878      	ldr	r0, [r7, #4]
 8010660:	f000 f8eb 	bl	801083a <USBD_CtlSendData>
      break;
 8010664:	e004      	b.n	8010670 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010666:	6839      	ldr	r1, [r7, #0]
 8010668:	6878      	ldr	r0, [r7, #4]
 801066a:	f000 f875 	bl	8010758 <USBD_CtlError>
      break;
 801066e:	bf00      	nop
  }
}
 8010670:	bf00      	nop
 8010672:	3708      	adds	r7, #8
 8010674:	46bd      	mov	sp, r7
 8010676:	bd80      	pop	{r7, pc}

08010678 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010678:	b580      	push	{r7, lr}
 801067a:	b082      	sub	sp, #8
 801067c:	af00      	add	r7, sp, #0
 801067e:	6078      	str	r0, [r7, #4]
 8010680:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010682:	683b      	ldr	r3, [r7, #0]
 8010684:	885b      	ldrh	r3, [r3, #2]
 8010686:	2b01      	cmp	r3, #1
 8010688:	d106      	bne.n	8010698 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	2201      	movs	r2, #1
 801068e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010692:	6878      	ldr	r0, [r7, #4]
 8010694:	f000 f92b 	bl	80108ee <USBD_CtlSendStatus>
  }
}
 8010698:	bf00      	nop
 801069a:	3708      	adds	r7, #8
 801069c:	46bd      	mov	sp, r7
 801069e:	bd80      	pop	{r7, pc}

080106a0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80106a0:	b580      	push	{r7, lr}
 80106a2:	b082      	sub	sp, #8
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	6078      	str	r0, [r7, #4]
 80106a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80106b0:	b2db      	uxtb	r3, r3
 80106b2:	3b01      	subs	r3, #1
 80106b4:	2b02      	cmp	r3, #2
 80106b6:	d80b      	bhi.n	80106d0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80106b8:	683b      	ldr	r3, [r7, #0]
 80106ba:	885b      	ldrh	r3, [r3, #2]
 80106bc:	2b01      	cmp	r3, #1
 80106be:	d10c      	bne.n	80106da <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	2200      	movs	r2, #0
 80106c4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80106c8:	6878      	ldr	r0, [r7, #4]
 80106ca:	f000 f910 	bl	80108ee <USBD_CtlSendStatus>
      }
      break;
 80106ce:	e004      	b.n	80106da <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80106d0:	6839      	ldr	r1, [r7, #0]
 80106d2:	6878      	ldr	r0, [r7, #4]
 80106d4:	f000 f840 	bl	8010758 <USBD_CtlError>
      break;
 80106d8:	e000      	b.n	80106dc <USBD_ClrFeature+0x3c>
      break;
 80106da:	bf00      	nop
  }
}
 80106dc:	bf00      	nop
 80106de:	3708      	adds	r7, #8
 80106e0:	46bd      	mov	sp, r7
 80106e2:	bd80      	pop	{r7, pc}

080106e4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80106e4:	b580      	push	{r7, lr}
 80106e6:	b084      	sub	sp, #16
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	6078      	str	r0, [r7, #4]
 80106ec:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80106ee:	683b      	ldr	r3, [r7, #0]
 80106f0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	781a      	ldrb	r2, [r3, #0]
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	3301      	adds	r3, #1
 80106fe:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	781a      	ldrb	r2, [r3, #0]
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	3301      	adds	r3, #1
 801070c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801070e:	68f8      	ldr	r0, [r7, #12]
 8010710:	f7ff fa92 	bl	800fc38 <SWAPBYTE>
 8010714:	4603      	mov	r3, r0
 8010716:	461a      	mov	r2, r3
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	3301      	adds	r3, #1
 8010720:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	3301      	adds	r3, #1
 8010726:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010728:	68f8      	ldr	r0, [r7, #12]
 801072a:	f7ff fa85 	bl	800fc38 <SWAPBYTE>
 801072e:	4603      	mov	r3, r0
 8010730:	461a      	mov	r2, r3
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	3301      	adds	r3, #1
 801073a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	3301      	adds	r3, #1
 8010740:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010742:	68f8      	ldr	r0, [r7, #12]
 8010744:	f7ff fa78 	bl	800fc38 <SWAPBYTE>
 8010748:	4603      	mov	r3, r0
 801074a:	461a      	mov	r2, r3
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	80da      	strh	r2, [r3, #6]
}
 8010750:	bf00      	nop
 8010752:	3710      	adds	r7, #16
 8010754:	46bd      	mov	sp, r7
 8010756:	bd80      	pop	{r7, pc}

08010758 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b082      	sub	sp, #8
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
 8010760:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010762:	2180      	movs	r1, #128	; 0x80
 8010764:	6878      	ldr	r0, [r7, #4]
 8010766:	f002 fd87 	bl	8013278 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801076a:	2100      	movs	r1, #0
 801076c:	6878      	ldr	r0, [r7, #4]
 801076e:	f002 fd83 	bl	8013278 <USBD_LL_StallEP>
}
 8010772:	bf00      	nop
 8010774:	3708      	adds	r7, #8
 8010776:	46bd      	mov	sp, r7
 8010778:	bd80      	pop	{r7, pc}

0801077a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801077a:	b580      	push	{r7, lr}
 801077c:	b086      	sub	sp, #24
 801077e:	af00      	add	r7, sp, #0
 8010780:	60f8      	str	r0, [r7, #12]
 8010782:	60b9      	str	r1, [r7, #8]
 8010784:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010786:	2300      	movs	r3, #0
 8010788:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	2b00      	cmp	r3, #0
 801078e:	d036      	beq.n	80107fe <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010794:	6938      	ldr	r0, [r7, #16]
 8010796:	f000 f836 	bl	8010806 <USBD_GetLen>
 801079a:	4603      	mov	r3, r0
 801079c:	3301      	adds	r3, #1
 801079e:	b29b      	uxth	r3, r3
 80107a0:	005b      	lsls	r3, r3, #1
 80107a2:	b29a      	uxth	r2, r3
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80107a8:	7dfb      	ldrb	r3, [r7, #23]
 80107aa:	68ba      	ldr	r2, [r7, #8]
 80107ac:	4413      	add	r3, r2
 80107ae:	687a      	ldr	r2, [r7, #4]
 80107b0:	7812      	ldrb	r2, [r2, #0]
 80107b2:	701a      	strb	r2, [r3, #0]
  idx++;
 80107b4:	7dfb      	ldrb	r3, [r7, #23]
 80107b6:	3301      	adds	r3, #1
 80107b8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80107ba:	7dfb      	ldrb	r3, [r7, #23]
 80107bc:	68ba      	ldr	r2, [r7, #8]
 80107be:	4413      	add	r3, r2
 80107c0:	2203      	movs	r2, #3
 80107c2:	701a      	strb	r2, [r3, #0]
  idx++;
 80107c4:	7dfb      	ldrb	r3, [r7, #23]
 80107c6:	3301      	adds	r3, #1
 80107c8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80107ca:	e013      	b.n	80107f4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80107cc:	7dfb      	ldrb	r3, [r7, #23]
 80107ce:	68ba      	ldr	r2, [r7, #8]
 80107d0:	4413      	add	r3, r2
 80107d2:	693a      	ldr	r2, [r7, #16]
 80107d4:	7812      	ldrb	r2, [r2, #0]
 80107d6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80107d8:	693b      	ldr	r3, [r7, #16]
 80107da:	3301      	adds	r3, #1
 80107dc:	613b      	str	r3, [r7, #16]
    idx++;
 80107de:	7dfb      	ldrb	r3, [r7, #23]
 80107e0:	3301      	adds	r3, #1
 80107e2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80107e4:	7dfb      	ldrb	r3, [r7, #23]
 80107e6:	68ba      	ldr	r2, [r7, #8]
 80107e8:	4413      	add	r3, r2
 80107ea:	2200      	movs	r2, #0
 80107ec:	701a      	strb	r2, [r3, #0]
    idx++;
 80107ee:	7dfb      	ldrb	r3, [r7, #23]
 80107f0:	3301      	adds	r3, #1
 80107f2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80107f4:	693b      	ldr	r3, [r7, #16]
 80107f6:	781b      	ldrb	r3, [r3, #0]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d1e7      	bne.n	80107cc <USBD_GetString+0x52>
 80107fc:	e000      	b.n	8010800 <USBD_GetString+0x86>
    return;
 80107fe:	bf00      	nop
  }
}
 8010800:	3718      	adds	r7, #24
 8010802:	46bd      	mov	sp, r7
 8010804:	bd80      	pop	{r7, pc}

08010806 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010806:	b480      	push	{r7}
 8010808:	b085      	sub	sp, #20
 801080a:	af00      	add	r7, sp, #0
 801080c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801080e:	2300      	movs	r3, #0
 8010810:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010816:	e005      	b.n	8010824 <USBD_GetLen+0x1e>
  {
    len++;
 8010818:	7bfb      	ldrb	r3, [r7, #15]
 801081a:	3301      	adds	r3, #1
 801081c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801081e:	68bb      	ldr	r3, [r7, #8]
 8010820:	3301      	adds	r3, #1
 8010822:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010824:	68bb      	ldr	r3, [r7, #8]
 8010826:	781b      	ldrb	r3, [r3, #0]
 8010828:	2b00      	cmp	r3, #0
 801082a:	d1f5      	bne.n	8010818 <USBD_GetLen+0x12>
  }

  return len;
 801082c:	7bfb      	ldrb	r3, [r7, #15]
}
 801082e:	4618      	mov	r0, r3
 8010830:	3714      	adds	r7, #20
 8010832:	46bd      	mov	sp, r7
 8010834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010838:	4770      	bx	lr

0801083a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801083a:	b580      	push	{r7, lr}
 801083c:	b084      	sub	sp, #16
 801083e:	af00      	add	r7, sp, #0
 8010840:	60f8      	str	r0, [r7, #12]
 8010842:	60b9      	str	r1, [r7, #8]
 8010844:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	2202      	movs	r2, #2
 801084a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	687a      	ldr	r2, [r7, #4]
 8010852:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	687a      	ldr	r2, [r7, #4]
 8010858:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	68ba      	ldr	r2, [r7, #8]
 801085e:	2100      	movs	r1, #0
 8010860:	68f8      	ldr	r0, [r7, #12]
 8010862:	f002 fd93 	bl	801338c <USBD_LL_Transmit>

  return USBD_OK;
 8010866:	2300      	movs	r3, #0
}
 8010868:	4618      	mov	r0, r3
 801086a:	3710      	adds	r7, #16
 801086c:	46bd      	mov	sp, r7
 801086e:	bd80      	pop	{r7, pc}

08010870 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010870:	b580      	push	{r7, lr}
 8010872:	b084      	sub	sp, #16
 8010874:	af00      	add	r7, sp, #0
 8010876:	60f8      	str	r0, [r7, #12]
 8010878:	60b9      	str	r1, [r7, #8]
 801087a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	68ba      	ldr	r2, [r7, #8]
 8010880:	2100      	movs	r1, #0
 8010882:	68f8      	ldr	r0, [r7, #12]
 8010884:	f002 fd82 	bl	801338c <USBD_LL_Transmit>

  return USBD_OK;
 8010888:	2300      	movs	r3, #0
}
 801088a:	4618      	mov	r0, r3
 801088c:	3710      	adds	r7, #16
 801088e:	46bd      	mov	sp, r7
 8010890:	bd80      	pop	{r7, pc}

08010892 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010892:	b580      	push	{r7, lr}
 8010894:	b084      	sub	sp, #16
 8010896:	af00      	add	r7, sp, #0
 8010898:	60f8      	str	r0, [r7, #12]
 801089a:	60b9      	str	r1, [r7, #8]
 801089c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	2203      	movs	r2, #3
 80108a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	687a      	ldr	r2, [r7, #4]
 80108aa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	687a      	ldr	r2, [r7, #4]
 80108b2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	68ba      	ldr	r2, [r7, #8]
 80108ba:	2100      	movs	r1, #0
 80108bc:	68f8      	ldr	r0, [r7, #12]
 80108be:	f002 fd86 	bl	80133ce <USBD_LL_PrepareReceive>

  return USBD_OK;
 80108c2:	2300      	movs	r3, #0
}
 80108c4:	4618      	mov	r0, r3
 80108c6:	3710      	adds	r7, #16
 80108c8:	46bd      	mov	sp, r7
 80108ca:	bd80      	pop	{r7, pc}

080108cc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b084      	sub	sp, #16
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	60f8      	str	r0, [r7, #12]
 80108d4:	60b9      	str	r1, [r7, #8]
 80108d6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	68ba      	ldr	r2, [r7, #8]
 80108dc:	2100      	movs	r1, #0
 80108de:	68f8      	ldr	r0, [r7, #12]
 80108e0:	f002 fd75 	bl	80133ce <USBD_LL_PrepareReceive>

  return USBD_OK;
 80108e4:	2300      	movs	r3, #0
}
 80108e6:	4618      	mov	r0, r3
 80108e8:	3710      	adds	r7, #16
 80108ea:	46bd      	mov	sp, r7
 80108ec:	bd80      	pop	{r7, pc}

080108ee <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80108ee:	b580      	push	{r7, lr}
 80108f0:	b082      	sub	sp, #8
 80108f2:	af00      	add	r7, sp, #0
 80108f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	2204      	movs	r2, #4
 80108fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80108fe:	2300      	movs	r3, #0
 8010900:	2200      	movs	r2, #0
 8010902:	2100      	movs	r1, #0
 8010904:	6878      	ldr	r0, [r7, #4]
 8010906:	f002 fd41 	bl	801338c <USBD_LL_Transmit>

  return USBD_OK;
 801090a:	2300      	movs	r3, #0
}
 801090c:	4618      	mov	r0, r3
 801090e:	3708      	adds	r7, #8
 8010910:	46bd      	mov	sp, r7
 8010912:	bd80      	pop	{r7, pc}

08010914 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010914:	b580      	push	{r7, lr}
 8010916:	b082      	sub	sp, #8
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	2205      	movs	r2, #5
 8010920:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010924:	2300      	movs	r3, #0
 8010926:	2200      	movs	r2, #0
 8010928:	2100      	movs	r1, #0
 801092a:	6878      	ldr	r0, [r7, #4]
 801092c:	f002 fd4f 	bl	80133ce <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010930:	2300      	movs	r3, #0
}
 8010932:	4618      	mov	r0, r3
 8010934:	3708      	adds	r7, #8
 8010936:	46bd      	mov	sp, r7
 8010938:	bd80      	pop	{r7, pc}

0801093a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801093a:	b480      	push	{r7}
 801093c:	b085      	sub	sp, #20
 801093e:	af00      	add	r7, sp, #0
 8010940:	4603      	mov	r3, r0
 8010942:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8010944:	2300      	movs	r3, #0
 8010946:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8010948:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801094c:	2b84      	cmp	r3, #132	; 0x84
 801094e:	d005      	beq.n	801095c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8010950:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	4413      	add	r3, r2
 8010958:	3303      	adds	r3, #3
 801095a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 801095c:	68fb      	ldr	r3, [r7, #12]
}
 801095e:	4618      	mov	r0, r3
 8010960:	3714      	adds	r7, #20
 8010962:	46bd      	mov	sp, r7
 8010964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010968:	4770      	bx	lr

0801096a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801096a:	b580      	push	{r7, lr}
 801096c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801096e:	f000 fee9 	bl	8011744 <vTaskStartScheduler>
  
  return osOK;
 8010972:	2300      	movs	r3, #0
}
 8010974:	4618      	mov	r0, r3
 8010976:	bd80      	pop	{r7, pc}

08010978 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8010978:	b5f0      	push	{r4, r5, r6, r7, lr}
 801097a:	b087      	sub	sp, #28
 801097c:	af02      	add	r7, sp, #8
 801097e:	6078      	str	r0, [r7, #4]
 8010980:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	685c      	ldr	r4, [r3, #4]
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801098e:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010996:	4618      	mov	r0, r3
 8010998:	f7ff ffcf 	bl	801093a <makeFreeRtosPriority>
 801099c:	4602      	mov	r2, r0
 801099e:	f107 030c 	add.w	r3, r7, #12
 80109a2:	9301      	str	r3, [sp, #4]
 80109a4:	9200      	str	r2, [sp, #0]
 80109a6:	683b      	ldr	r3, [r7, #0]
 80109a8:	4632      	mov	r2, r6
 80109aa:	4629      	mov	r1, r5
 80109ac:	4620      	mov	r0, r4
 80109ae:	f000 fd55 	bl	801145c <xTaskCreate>
 80109b2:	4603      	mov	r3, r0
 80109b4:	2b01      	cmp	r3, #1
 80109b6:	d001      	beq.n	80109bc <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80109b8:	2300      	movs	r3, #0
 80109ba:	e000      	b.n	80109be <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80109bc:	68fb      	ldr	r3, [r7, #12]
}
 80109be:	4618      	mov	r0, r3
 80109c0:	3714      	adds	r7, #20
 80109c2:	46bd      	mov	sp, r7
 80109c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080109c6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80109c6:	b580      	push	{r7, lr}
 80109c8:	b084      	sub	sp, #16
 80109ca:	af00      	add	r7, sp, #0
 80109cc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d001      	beq.n	80109dc <osDelay+0x16>
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	e000      	b.n	80109de <osDelay+0x18>
 80109dc:	2301      	movs	r3, #1
 80109de:	4618      	mov	r0, r3
 80109e0:	f000 fe7c 	bl	80116dc <vTaskDelay>
  
  return osOK;
 80109e4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80109e6:	4618      	mov	r0, r3
 80109e8:	3710      	adds	r7, #16
 80109ea:	46bd      	mov	sp, r7
 80109ec:	bd80      	pop	{r7, pc}

080109ee <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80109ee:	b580      	push	{r7, lr}
 80109f0:	b082      	sub	sp, #8
 80109f2:	af00      	add	r7, sp, #0
 80109f4:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 80109f6:	2001      	movs	r0, #1
 80109f8:	f000 f9a1 	bl	8010d3e <xQueueCreateMutex>
 80109fc:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 80109fe:	4618      	mov	r0, r3
 8010a00:	3708      	adds	r7, #8
 8010a02:	46bd      	mov	sp, r7
 8010a04:	bd80      	pop	{r7, pc}

08010a06 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8010a06:	b580      	push	{r7, lr}
 8010a08:	b084      	sub	sp, #16
 8010a0a:	af00      	add	r7, sp, #0
 8010a0c:	6078      	str	r0, [r7, #4]
 8010a0e:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8010a10:	683b      	ldr	r3, [r7, #0]
 8010a12:	2b01      	cmp	r3, #1
 8010a14:	d110      	bne.n	8010a38 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8010a16:	2203      	movs	r2, #3
 8010a18:	2100      	movs	r1, #0
 8010a1a:	2001      	movs	r0, #1
 8010a1c:	f000 f920 	bl	8010c60 <xQueueGenericCreate>
 8010a20:	60f8      	str	r0, [r7, #12]
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d005      	beq.n	8010a34 <osSemaphoreCreate+0x2e>
 8010a28:	2300      	movs	r3, #0
 8010a2a:	2200      	movs	r2, #0
 8010a2c:	2100      	movs	r1, #0
 8010a2e:	68f8      	ldr	r0, [r7, #12]
 8010a30:	f000 f99e 	bl	8010d70 <xQueueGenericSend>
    return sema;
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	e000      	b.n	8010a3a <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 8010a38:	2300      	movs	r3, #0
#endif
  }
#endif
}
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	3710      	adds	r7, #16
 8010a3e:	46bd      	mov	sp, r7
 8010a40:	bd80      	pop	{r7, pc}

08010a42 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010a42:	b480      	push	{r7}
 8010a44:	b083      	sub	sp, #12
 8010a46:	af00      	add	r7, sp, #0
 8010a48:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	f103 0208 	add.w	r2, r3, #8
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	f04f 32ff 	mov.w	r2, #4294967295
 8010a5a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	f103 0208 	add.w	r2, r3, #8
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	f103 0208 	add.w	r2, r3, #8
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	2200      	movs	r2, #0
 8010a74:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010a76:	bf00      	nop
 8010a78:	370c      	adds	r7, #12
 8010a7a:	46bd      	mov	sp, r7
 8010a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a80:	4770      	bx	lr

08010a82 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010a82:	b480      	push	{r7}
 8010a84:	b083      	sub	sp, #12
 8010a86:	af00      	add	r7, sp, #0
 8010a88:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	2200      	movs	r2, #0
 8010a8e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010a90:	bf00      	nop
 8010a92:	370c      	adds	r7, #12
 8010a94:	46bd      	mov	sp, r7
 8010a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9a:	4770      	bx	lr

08010a9c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010a9c:	b480      	push	{r7}
 8010a9e:	b085      	sub	sp, #20
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	6078      	str	r0, [r7, #4]
 8010aa4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	685b      	ldr	r3, [r3, #4]
 8010aaa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010aac:	683b      	ldr	r3, [r7, #0]
 8010aae:	68fa      	ldr	r2, [r7, #12]
 8010ab0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	689a      	ldr	r2, [r3, #8]
 8010ab6:	683b      	ldr	r3, [r7, #0]
 8010ab8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	689b      	ldr	r3, [r3, #8]
 8010abe:	683a      	ldr	r2, [r7, #0]
 8010ac0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	683a      	ldr	r2, [r7, #0]
 8010ac6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010ac8:	683b      	ldr	r3, [r7, #0]
 8010aca:	687a      	ldr	r2, [r7, #4]
 8010acc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	1c5a      	adds	r2, r3, #1
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	601a      	str	r2, [r3, #0]
}
 8010ad8:	bf00      	nop
 8010ada:	3714      	adds	r7, #20
 8010adc:	46bd      	mov	sp, r7
 8010ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae2:	4770      	bx	lr

08010ae4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010ae4:	b480      	push	{r7}
 8010ae6:	b085      	sub	sp, #20
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	6078      	str	r0, [r7, #4]
 8010aec:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010aee:	683b      	ldr	r3, [r7, #0]
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010af4:	68bb      	ldr	r3, [r7, #8]
 8010af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010afa:	d103      	bne.n	8010b04 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	691b      	ldr	r3, [r3, #16]
 8010b00:	60fb      	str	r3, [r7, #12]
 8010b02:	e00c      	b.n	8010b1e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	3308      	adds	r3, #8
 8010b08:	60fb      	str	r3, [r7, #12]
 8010b0a:	e002      	b.n	8010b12 <vListInsert+0x2e>
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	685b      	ldr	r3, [r3, #4]
 8010b10:	60fb      	str	r3, [r7, #12]
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	685b      	ldr	r3, [r3, #4]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	68ba      	ldr	r2, [r7, #8]
 8010b1a:	429a      	cmp	r2, r3
 8010b1c:	d2f6      	bcs.n	8010b0c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	685a      	ldr	r2, [r3, #4]
 8010b22:	683b      	ldr	r3, [r7, #0]
 8010b24:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010b26:	683b      	ldr	r3, [r7, #0]
 8010b28:	685b      	ldr	r3, [r3, #4]
 8010b2a:	683a      	ldr	r2, [r7, #0]
 8010b2c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010b2e:	683b      	ldr	r3, [r7, #0]
 8010b30:	68fa      	ldr	r2, [r7, #12]
 8010b32:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	683a      	ldr	r2, [r7, #0]
 8010b38:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010b3a:	683b      	ldr	r3, [r7, #0]
 8010b3c:	687a      	ldr	r2, [r7, #4]
 8010b3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	1c5a      	adds	r2, r3, #1
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	601a      	str	r2, [r3, #0]
}
 8010b4a:	bf00      	nop
 8010b4c:	3714      	adds	r7, #20
 8010b4e:	46bd      	mov	sp, r7
 8010b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b54:	4770      	bx	lr

08010b56 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010b56:	b480      	push	{r7}
 8010b58:	b085      	sub	sp, #20
 8010b5a:	af00      	add	r7, sp, #0
 8010b5c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	691b      	ldr	r3, [r3, #16]
 8010b62:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	685b      	ldr	r3, [r3, #4]
 8010b68:	687a      	ldr	r2, [r7, #4]
 8010b6a:	6892      	ldr	r2, [r2, #8]
 8010b6c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	689b      	ldr	r3, [r3, #8]
 8010b72:	687a      	ldr	r2, [r7, #4]
 8010b74:	6852      	ldr	r2, [r2, #4]
 8010b76:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	685b      	ldr	r3, [r3, #4]
 8010b7c:	687a      	ldr	r2, [r7, #4]
 8010b7e:	429a      	cmp	r2, r3
 8010b80:	d103      	bne.n	8010b8a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	689a      	ldr	r2, [r3, #8]
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	2200      	movs	r2, #0
 8010b8e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	1e5a      	subs	r2, r3, #1
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	681b      	ldr	r3, [r3, #0]
}
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	3714      	adds	r7, #20
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba8:	4770      	bx	lr

08010baa <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010baa:	b580      	push	{r7, lr}
 8010bac:	b084      	sub	sp, #16
 8010bae:	af00      	add	r7, sp, #0
 8010bb0:	6078      	str	r0, [r7, #4]
 8010bb2:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d10a      	bne.n	8010bd4 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bc2:	f383 8811 	msr	BASEPRI, r3
 8010bc6:	f3bf 8f6f 	isb	sy
 8010bca:	f3bf 8f4f 	dsb	sy
 8010bce:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8010bd0:	bf00      	nop
 8010bd2:	e7fe      	b.n	8010bd2 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8010bd4:	f001 fcbe 	bl	8012554 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	681a      	ldr	r2, [r3, #0]
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010be0:	68f9      	ldr	r1, [r7, #12]
 8010be2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010be4:	fb01 f303 	mul.w	r3, r1, r3
 8010be8:	441a      	add	r2, r3
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	2200      	movs	r2, #0
 8010bf2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	681a      	ldr	r2, [r3, #0]
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	681a      	ldr	r2, [r3, #0]
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c04:	3b01      	subs	r3, #1
 8010c06:	68f9      	ldr	r1, [r7, #12]
 8010c08:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010c0a:	fb01 f303 	mul.w	r3, r1, r3
 8010c0e:	441a      	add	r2, r3
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	22ff      	movs	r2, #255	; 0xff
 8010c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	22ff      	movs	r2, #255	; 0xff
 8010c20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010c24:	683b      	ldr	r3, [r7, #0]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d109      	bne.n	8010c3e <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	691b      	ldr	r3, [r3, #16]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d00f      	beq.n	8010c52 <xQueueGenericReset+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	3310      	adds	r3, #16
 8010c36:	4618      	mov	r0, r3
 8010c38:	f000 ff8c 	bl	8011b54 <xTaskRemoveFromEventList>
 8010c3c:	e009      	b.n	8010c52 <xQueueGenericReset+0xa8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	3310      	adds	r3, #16
 8010c42:	4618      	mov	r0, r3
 8010c44:	f7ff fefd 	bl	8010a42 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	3324      	adds	r3, #36	; 0x24
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	f7ff fef8 	bl	8010a42 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010c52:	f001 fcaf 	bl	80125b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010c56:	2301      	movs	r3, #1
}
 8010c58:	4618      	mov	r0, r3
 8010c5a:	3710      	adds	r7, #16
 8010c5c:	46bd      	mov	sp, r7
 8010c5e:	bd80      	pop	{r7, pc}

08010c60 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010c60:	b580      	push	{r7, lr}
 8010c62:	b08a      	sub	sp, #40	; 0x28
 8010c64:	af02      	add	r7, sp, #8
 8010c66:	60f8      	str	r0, [r7, #12]
 8010c68:	60b9      	str	r1, [r7, #8]
 8010c6a:	4613      	mov	r3, r2
 8010c6c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d10a      	bne.n	8010c8a <xQueueGenericCreate+0x2a>
	__asm volatile
 8010c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c78:	f383 8811 	msr	BASEPRI, r3
 8010c7c:	f3bf 8f6f 	isb	sy
 8010c80:	f3bf 8f4f 	dsb	sy
 8010c84:	613b      	str	r3, [r7, #16]
}
 8010c86:	bf00      	nop
 8010c88:	e7fe      	b.n	8010c88 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	68ba      	ldr	r2, [r7, #8]
 8010c8e:	fb02 f303 	mul.w	r3, r2, r3
 8010c92:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010c94:	69fb      	ldr	r3, [r7, #28]
 8010c96:	3348      	adds	r3, #72	; 0x48
 8010c98:	4618      	mov	r0, r3
 8010c9a:	f001 fd7d 	bl	8012798 <pvPortMalloc>
 8010c9e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010ca0:	69bb      	ldr	r3, [r7, #24]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d00d      	beq.n	8010cc2 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010ca6:	69bb      	ldr	r3, [r7, #24]
 8010ca8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010caa:	697b      	ldr	r3, [r7, #20]
 8010cac:	3348      	adds	r3, #72	; 0x48
 8010cae:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010cb0:	79fa      	ldrb	r2, [r7, #7]
 8010cb2:	69bb      	ldr	r3, [r7, #24]
 8010cb4:	9300      	str	r3, [sp, #0]
 8010cb6:	4613      	mov	r3, r2
 8010cb8:	697a      	ldr	r2, [r7, #20]
 8010cba:	68b9      	ldr	r1, [r7, #8]
 8010cbc:	68f8      	ldr	r0, [r7, #12]
 8010cbe:	f000 f805 	bl	8010ccc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010cc2:	69bb      	ldr	r3, [r7, #24]
	}
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	3720      	adds	r7, #32
 8010cc8:	46bd      	mov	sp, r7
 8010cca:	bd80      	pop	{r7, pc}

08010ccc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010ccc:	b580      	push	{r7, lr}
 8010cce:	b084      	sub	sp, #16
 8010cd0:	af00      	add	r7, sp, #0
 8010cd2:	60f8      	str	r0, [r7, #12]
 8010cd4:	60b9      	str	r1, [r7, #8]
 8010cd6:	607a      	str	r2, [r7, #4]
 8010cd8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010cda:	68bb      	ldr	r3, [r7, #8]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d103      	bne.n	8010ce8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010ce0:	69bb      	ldr	r3, [r7, #24]
 8010ce2:	69ba      	ldr	r2, [r7, #24]
 8010ce4:	601a      	str	r2, [r3, #0]
 8010ce6:	e002      	b.n	8010cee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010ce8:	69bb      	ldr	r3, [r7, #24]
 8010cea:	687a      	ldr	r2, [r7, #4]
 8010cec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010cee:	69bb      	ldr	r3, [r7, #24]
 8010cf0:	68fa      	ldr	r2, [r7, #12]
 8010cf2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010cf4:	69bb      	ldr	r3, [r7, #24]
 8010cf6:	68ba      	ldr	r2, [r7, #8]
 8010cf8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010cfa:	2101      	movs	r1, #1
 8010cfc:	69b8      	ldr	r0, [r7, #24]
 8010cfe:	f7ff ff54 	bl	8010baa <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010d02:	bf00      	nop
 8010d04:	3710      	adds	r7, #16
 8010d06:	46bd      	mov	sp, r7
 8010d08:	bd80      	pop	{r7, pc}

08010d0a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8010d0a:	b580      	push	{r7, lr}
 8010d0c:	b082      	sub	sp, #8
 8010d0e:	af00      	add	r7, sp, #0
 8010d10:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d00e      	beq.n	8010d36 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	2200      	movs	r2, #0
 8010d1c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	2200      	movs	r2, #0
 8010d22:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	2200      	movs	r2, #0
 8010d28:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	2200      	movs	r2, #0
 8010d2e:	2100      	movs	r1, #0
 8010d30:	6878      	ldr	r0, [r7, #4]
 8010d32:	f000 f81d 	bl	8010d70 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8010d36:	bf00      	nop
 8010d38:	3708      	adds	r7, #8
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	bd80      	pop	{r7, pc}

08010d3e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8010d3e:	b580      	push	{r7, lr}
 8010d40:	b086      	sub	sp, #24
 8010d42:	af00      	add	r7, sp, #0
 8010d44:	4603      	mov	r3, r0
 8010d46:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8010d48:	2301      	movs	r3, #1
 8010d4a:	617b      	str	r3, [r7, #20]
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8010d50:	79fb      	ldrb	r3, [r7, #7]
 8010d52:	461a      	mov	r2, r3
 8010d54:	6939      	ldr	r1, [r7, #16]
 8010d56:	6978      	ldr	r0, [r7, #20]
 8010d58:	f7ff ff82 	bl	8010c60 <xQueueGenericCreate>
 8010d5c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8010d5e:	68f8      	ldr	r0, [r7, #12]
 8010d60:	f7ff ffd3 	bl	8010d0a <prvInitialiseMutex>

		return xNewQueue;
 8010d64:	68fb      	ldr	r3, [r7, #12]
	}
 8010d66:	4618      	mov	r0, r3
 8010d68:	3718      	adds	r7, #24
 8010d6a:	46bd      	mov	sp, r7
 8010d6c:	bd80      	pop	{r7, pc}
	...

08010d70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010d70:	b580      	push	{r7, lr}
 8010d72:	b08e      	sub	sp, #56	; 0x38
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	60f8      	str	r0, [r7, #12]
 8010d78:	60b9      	str	r1, [r7, #8]
 8010d7a:	607a      	str	r2, [r7, #4]
 8010d7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010d7e:	2300      	movs	r3, #0
 8010d80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d10a      	bne.n	8010da2 <xQueueGenericSend+0x32>
	__asm volatile
 8010d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d90:	f383 8811 	msr	BASEPRI, r3
 8010d94:	f3bf 8f6f 	isb	sy
 8010d98:	f3bf 8f4f 	dsb	sy
 8010d9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010d9e:	bf00      	nop
 8010da0:	e7fe      	b.n	8010da0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010da2:	68bb      	ldr	r3, [r7, #8]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d103      	bne.n	8010db0 <xQueueGenericSend+0x40>
 8010da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d101      	bne.n	8010db4 <xQueueGenericSend+0x44>
 8010db0:	2301      	movs	r3, #1
 8010db2:	e000      	b.n	8010db6 <xQueueGenericSend+0x46>
 8010db4:	2300      	movs	r3, #0
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d10a      	bne.n	8010dd0 <xQueueGenericSend+0x60>
	__asm volatile
 8010dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dbe:	f383 8811 	msr	BASEPRI, r3
 8010dc2:	f3bf 8f6f 	isb	sy
 8010dc6:	f3bf 8f4f 	dsb	sy
 8010dca:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010dcc:	bf00      	nop
 8010dce:	e7fe      	b.n	8010dce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010dd0:	683b      	ldr	r3, [r7, #0]
 8010dd2:	2b02      	cmp	r3, #2
 8010dd4:	d103      	bne.n	8010dde <xQueueGenericSend+0x6e>
 8010dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010dda:	2b01      	cmp	r3, #1
 8010ddc:	d101      	bne.n	8010de2 <xQueueGenericSend+0x72>
 8010dde:	2301      	movs	r3, #1
 8010de0:	e000      	b.n	8010de4 <xQueueGenericSend+0x74>
 8010de2:	2300      	movs	r3, #0
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d10a      	bne.n	8010dfe <xQueueGenericSend+0x8e>
	__asm volatile
 8010de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dec:	f383 8811 	msr	BASEPRI, r3
 8010df0:	f3bf 8f6f 	isb	sy
 8010df4:	f3bf 8f4f 	dsb	sy
 8010df8:	623b      	str	r3, [r7, #32]
}
 8010dfa:	bf00      	nop
 8010dfc:	e7fe      	b.n	8010dfc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010dfe:	f001 f855 	bl	8011eac <xTaskGetSchedulerState>
 8010e02:	4603      	mov	r3, r0
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d102      	bne.n	8010e0e <xQueueGenericSend+0x9e>
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d101      	bne.n	8010e12 <xQueueGenericSend+0xa2>
 8010e0e:	2301      	movs	r3, #1
 8010e10:	e000      	b.n	8010e14 <xQueueGenericSend+0xa4>
 8010e12:	2300      	movs	r3, #0
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d10a      	bne.n	8010e2e <xQueueGenericSend+0xbe>
	__asm volatile
 8010e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e1c:	f383 8811 	msr	BASEPRI, r3
 8010e20:	f3bf 8f6f 	isb	sy
 8010e24:	f3bf 8f4f 	dsb	sy
 8010e28:	61fb      	str	r3, [r7, #28]
}
 8010e2a:	bf00      	nop
 8010e2c:	e7fe      	b.n	8010e2c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010e2e:	f001 fb91 	bl	8012554 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e3a:	429a      	cmp	r2, r3
 8010e3c:	d302      	bcc.n	8010e44 <xQueueGenericSend+0xd4>
 8010e3e:	683b      	ldr	r3, [r7, #0]
 8010e40:	2b02      	cmp	r3, #2
 8010e42:	d112      	bne.n	8010e6a <xQueueGenericSend+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010e44:	683a      	ldr	r2, [r7, #0]
 8010e46:	68b9      	ldr	r1, [r7, #8]
 8010e48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010e4a:	f000 fa1d 	bl	8011288 <prvCopyDataToQueue>
 8010e4e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d004      	beq.n	8010e62 <xQueueGenericSend+0xf2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e5a:	3324      	adds	r3, #36	; 0x24
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	f000 fe79 	bl	8011b54 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010e62:	f001 fba7 	bl	80125b4 <vPortExitCritical>
				return pdPASS;
 8010e66:	2301      	movs	r3, #1
 8010e68:	e062      	b.n	8010f30 <xQueueGenericSend+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d103      	bne.n	8010e78 <xQueueGenericSend+0x108>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010e70:	f001 fba0 	bl	80125b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010e74:	2300      	movs	r3, #0
 8010e76:	e05b      	b.n	8010f30 <xQueueGenericSend+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d106      	bne.n	8010e8c <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010e7e:	f107 0314 	add.w	r3, r7, #20
 8010e82:	4618      	mov	r0, r3
 8010e84:	f000 fec8 	bl	8011c18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010e88:	2301      	movs	r3, #1
 8010e8a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010e8c:	f001 fb92 	bl	80125b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010e90:	f000 fca8 	bl	80117e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010e94:	f001 fb5e 	bl	8012554 <vPortEnterCritical>
 8010e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010e9e:	b25b      	sxtb	r3, r3
 8010ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ea4:	d103      	bne.n	8010eae <xQueueGenericSend+0x13e>
 8010ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ea8:	2200      	movs	r2, #0
 8010eaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010eb4:	b25b      	sxtb	r3, r3
 8010eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010eba:	d103      	bne.n	8010ec4 <xQueueGenericSend+0x154>
 8010ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010ec4:	f001 fb76 	bl	80125b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010ec8:	1d3a      	adds	r2, r7, #4
 8010eca:	f107 0314 	add.w	r3, r7, #20
 8010ece:	4611      	mov	r1, r2
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	f000 feb7 	bl	8011c44 <xTaskCheckForTimeOut>
 8010ed6:	4603      	mov	r3, r0
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d123      	bne.n	8010f24 <xQueueGenericSend+0x1b4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010edc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ede:	f000 faa5 	bl	801142c <prvIsQueueFull>
 8010ee2:	4603      	mov	r3, r0
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d017      	beq.n	8010f18 <xQueueGenericSend+0x1a8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eea:	3310      	adds	r3, #16
 8010eec:	687a      	ldr	r2, [r7, #4]
 8010eee:	4611      	mov	r1, r2
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	f000 fe0b 	bl	8011b0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010ef6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ef8:	f000 fa30 	bl	801135c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010efc:	f000 fc80 	bl	8011800 <xTaskResumeAll>
 8010f00:	4603      	mov	r3, r0
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d193      	bne.n	8010e2e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8010f06:	4b0c      	ldr	r3, [pc, #48]	; (8010f38 <xQueueGenericSend+0x1c8>)
 8010f08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f0c:	601a      	str	r2, [r3, #0]
 8010f0e:	f3bf 8f4f 	dsb	sy
 8010f12:	f3bf 8f6f 	isb	sy
 8010f16:	e78a      	b.n	8010e2e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010f18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f1a:	f000 fa1f 	bl	801135c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010f1e:	f000 fc6f 	bl	8011800 <xTaskResumeAll>
 8010f22:	e784      	b.n	8010e2e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010f24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f26:	f000 fa19 	bl	801135c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010f2a:	f000 fc69 	bl	8011800 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010f2e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010f30:	4618      	mov	r0, r3
 8010f32:	3738      	adds	r7, #56	; 0x38
 8010f34:	46bd      	mov	sp, r7
 8010f36:	bd80      	pop	{r7, pc}
 8010f38:	e000ed04 	.word	0xe000ed04

08010f3c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010f3c:	b580      	push	{r7, lr}
 8010f3e:	b08e      	sub	sp, #56	; 0x38
 8010f40:	af00      	add	r7, sp, #0
 8010f42:	6078      	str	r0, [r7, #4]
 8010f44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d10a      	bne.n	8010f66 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8010f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f54:	f383 8811 	msr	BASEPRI, r3
 8010f58:	f3bf 8f6f 	isb	sy
 8010f5c:	f3bf 8f4f 	dsb	sy
 8010f60:	623b      	str	r3, [r7, #32]
}
 8010f62:	bf00      	nop
 8010f64:	e7fe      	b.n	8010f64 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d00a      	beq.n	8010f84 <xQueueGiveFromISR+0x48>
	__asm volatile
 8010f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f72:	f383 8811 	msr	BASEPRI, r3
 8010f76:	f3bf 8f6f 	isb	sy
 8010f7a:	f3bf 8f4f 	dsb	sy
 8010f7e:	61fb      	str	r3, [r7, #28]
}
 8010f80:	bf00      	nop
 8010f82:	e7fe      	b.n	8010f82 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d103      	bne.n	8010f94 <xQueueGiveFromISR+0x58>
 8010f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f8e:	689b      	ldr	r3, [r3, #8]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d101      	bne.n	8010f98 <xQueueGiveFromISR+0x5c>
 8010f94:	2301      	movs	r3, #1
 8010f96:	e000      	b.n	8010f9a <xQueueGiveFromISR+0x5e>
 8010f98:	2300      	movs	r3, #0
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d10a      	bne.n	8010fb4 <xQueueGiveFromISR+0x78>
	__asm volatile
 8010f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fa2:	f383 8811 	msr	BASEPRI, r3
 8010fa6:	f3bf 8f6f 	isb	sy
 8010faa:	f3bf 8f4f 	dsb	sy
 8010fae:	61bb      	str	r3, [r7, #24]
}
 8010fb0:	bf00      	nop
 8010fb2:	e7fe      	b.n	8010fb2 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010fb4:	f001 fbb0 	bl	8012718 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010fb8:	f3ef 8211 	mrs	r2, BASEPRI
 8010fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fc0:	f383 8811 	msr	BASEPRI, r3
 8010fc4:	f3bf 8f6f 	isb	sy
 8010fc8:	f3bf 8f4f 	dsb	sy
 8010fcc:	617a      	str	r2, [r7, #20]
 8010fce:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010fd0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fd8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010fde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010fe0:	429a      	cmp	r2, r3
 8010fe2:	d22b      	bcs.n	801103c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fe6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010fea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ff0:	1c5a      	adds	r2, r3, #1
 8010ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ff4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010ff6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ffe:	d112      	bne.n	8011026 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011004:	2b00      	cmp	r3, #0
 8011006:	d016      	beq.n	8011036 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801100a:	3324      	adds	r3, #36	; 0x24
 801100c:	4618      	mov	r0, r3
 801100e:	f000 fda1 	bl	8011b54 <xTaskRemoveFromEventList>
 8011012:	4603      	mov	r3, r0
 8011014:	2b00      	cmp	r3, #0
 8011016:	d00e      	beq.n	8011036 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011018:	683b      	ldr	r3, [r7, #0]
 801101a:	2b00      	cmp	r3, #0
 801101c:	d00b      	beq.n	8011036 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801101e:	683b      	ldr	r3, [r7, #0]
 8011020:	2201      	movs	r2, #1
 8011022:	601a      	str	r2, [r3, #0]
 8011024:	e007      	b.n	8011036 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011026:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801102a:	3301      	adds	r3, #1
 801102c:	b2db      	uxtb	r3, r3
 801102e:	b25a      	sxtb	r2, r3
 8011030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011032:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011036:	2301      	movs	r3, #1
 8011038:	637b      	str	r3, [r7, #52]	; 0x34
 801103a:	e001      	b.n	8011040 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801103c:	2300      	movs	r3, #0
 801103e:	637b      	str	r3, [r7, #52]	; 0x34
 8011040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011042:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801104a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801104c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801104e:	4618      	mov	r0, r3
 8011050:	3738      	adds	r7, #56	; 0x38
 8011052:	46bd      	mov	sp, r7
 8011054:	bd80      	pop	{r7, pc}
	...

08011058 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011058:	b580      	push	{r7, lr}
 801105a:	b08e      	sub	sp, #56	; 0x38
 801105c:	af00      	add	r7, sp, #0
 801105e:	6078      	str	r0, [r7, #4]
 8011060:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8011062:	2300      	movs	r3, #0
 8011064:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801106a:	2300      	movs	r3, #0
 801106c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801106e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011070:	2b00      	cmp	r3, #0
 8011072:	d10a      	bne.n	801108a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8011074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011078:	f383 8811 	msr	BASEPRI, r3
 801107c:	f3bf 8f6f 	isb	sy
 8011080:	f3bf 8f4f 	dsb	sy
 8011084:	623b      	str	r3, [r7, #32]
}
 8011086:	bf00      	nop
 8011088:	e7fe      	b.n	8011088 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801108a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801108e:	2b00      	cmp	r3, #0
 8011090:	d00a      	beq.n	80110a8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8011092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011096:	f383 8811 	msr	BASEPRI, r3
 801109a:	f3bf 8f6f 	isb	sy
 801109e:	f3bf 8f4f 	dsb	sy
 80110a2:	61fb      	str	r3, [r7, #28]
}
 80110a4:	bf00      	nop
 80110a6:	e7fe      	b.n	80110a6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80110a8:	f000 ff00 	bl	8011eac <xTaskGetSchedulerState>
 80110ac:	4603      	mov	r3, r0
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d102      	bne.n	80110b8 <xQueueSemaphoreTake+0x60>
 80110b2:	683b      	ldr	r3, [r7, #0]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d101      	bne.n	80110bc <xQueueSemaphoreTake+0x64>
 80110b8:	2301      	movs	r3, #1
 80110ba:	e000      	b.n	80110be <xQueueSemaphoreTake+0x66>
 80110bc:	2300      	movs	r3, #0
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d10a      	bne.n	80110d8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80110c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110c6:	f383 8811 	msr	BASEPRI, r3
 80110ca:	f3bf 8f6f 	isb	sy
 80110ce:	f3bf 8f4f 	dsb	sy
 80110d2:	61bb      	str	r3, [r7, #24]
}
 80110d4:	bf00      	nop
 80110d6:	e7fe      	b.n	80110d6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80110d8:	f001 fa3c 	bl	8012554 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80110dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110e0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80110e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d019      	beq.n	801111c <xQueueSemaphoreTake+0xc4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80110e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110ea:	1e5a      	subs	r2, r3, #1
 80110ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ee:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80110f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d104      	bne.n	8011102 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80110f8:	f001 f880 	bl	80121fc <pvTaskIncrementMutexHeldCount>
 80110fc:	4602      	mov	r2, r0
 80110fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011100:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011104:	691b      	ldr	r3, [r3, #16]
 8011106:	2b00      	cmp	r3, #0
 8011108:	d004      	beq.n	8011114 <xQueueSemaphoreTake+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801110a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801110c:	3310      	adds	r3, #16
 801110e:	4618      	mov	r0, r3
 8011110:	f000 fd20 	bl	8011b54 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011114:	f001 fa4e 	bl	80125b4 <vPortExitCritical>
				return pdPASS;
 8011118:	2301      	movs	r3, #1
 801111a:	e097      	b.n	801124c <xQueueSemaphoreTake+0x1f4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801111c:	683b      	ldr	r3, [r7, #0]
 801111e:	2b00      	cmp	r3, #0
 8011120:	d111      	bne.n	8011146 <xQueueSemaphoreTake+0xee>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011124:	2b00      	cmp	r3, #0
 8011126:	d00a      	beq.n	801113e <xQueueSemaphoreTake+0xe6>
	__asm volatile
 8011128:	f04f 0350 	mov.w	r3, #80	; 0x50
 801112c:	f383 8811 	msr	BASEPRI, r3
 8011130:	f3bf 8f6f 	isb	sy
 8011134:	f3bf 8f4f 	dsb	sy
 8011138:	617b      	str	r3, [r7, #20]
}
 801113a:	bf00      	nop
 801113c:	e7fe      	b.n	801113c <xQueueSemaphoreTake+0xe4>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801113e:	f001 fa39 	bl	80125b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011142:	2300      	movs	r3, #0
 8011144:	e082      	b.n	801124c <xQueueSemaphoreTake+0x1f4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011148:	2b00      	cmp	r3, #0
 801114a:	d106      	bne.n	801115a <xQueueSemaphoreTake+0x102>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801114c:	f107 030c 	add.w	r3, r7, #12
 8011150:	4618      	mov	r0, r3
 8011152:	f000 fd61 	bl	8011c18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011156:	2301      	movs	r3, #1
 8011158:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801115a:	f001 fa2b 	bl	80125b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801115e:	f000 fb41 	bl	80117e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011162:	f001 f9f7 	bl	8012554 <vPortEnterCritical>
 8011166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011168:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801116c:	b25b      	sxtb	r3, r3
 801116e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011172:	d103      	bne.n	801117c <xQueueSemaphoreTake+0x124>
 8011174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011176:	2200      	movs	r2, #0
 8011178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801117c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801117e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011182:	b25b      	sxtb	r3, r3
 8011184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011188:	d103      	bne.n	8011192 <xQueueSemaphoreTake+0x13a>
 801118a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801118c:	2200      	movs	r2, #0
 801118e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011192:	f001 fa0f 	bl	80125b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011196:	463a      	mov	r2, r7
 8011198:	f107 030c 	add.w	r3, r7, #12
 801119c:	4611      	mov	r1, r2
 801119e:	4618      	mov	r0, r3
 80111a0:	f000 fd50 	bl	8011c44 <xTaskCheckForTimeOut>
 80111a4:	4603      	mov	r3, r0
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d132      	bne.n	8011210 <xQueueSemaphoreTake+0x1b8>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80111aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80111ac:	f000 f928 	bl	8011400 <prvIsQueueEmpty>
 80111b0:	4603      	mov	r3, r0
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d026      	beq.n	8011204 <xQueueSemaphoreTake+0x1ac>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80111b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d109      	bne.n	80111d2 <xQueueSemaphoreTake+0x17a>
					{
						taskENTER_CRITICAL();
 80111be:	f001 f9c9 	bl	8012554 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80111c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111c4:	689b      	ldr	r3, [r3, #8]
 80111c6:	4618      	mov	r0, r3
 80111c8:	f000 fe8e 	bl	8011ee8 <xTaskPriorityInherit>
 80111cc:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80111ce:	f001 f9f1 	bl	80125b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80111d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111d4:	3324      	adds	r3, #36	; 0x24
 80111d6:	683a      	ldr	r2, [r7, #0]
 80111d8:	4611      	mov	r1, r2
 80111da:	4618      	mov	r0, r3
 80111dc:	f000 fc96 	bl	8011b0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80111e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80111e2:	f000 f8bb 	bl	801135c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80111e6:	f000 fb0b 	bl	8011800 <xTaskResumeAll>
 80111ea:	4603      	mov	r3, r0
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	f47f af73 	bne.w	80110d8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80111f2:	4b18      	ldr	r3, [pc, #96]	; (8011254 <xQueueSemaphoreTake+0x1fc>)
 80111f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111f8:	601a      	str	r2, [r3, #0]
 80111fa:	f3bf 8f4f 	dsb	sy
 80111fe:	f3bf 8f6f 	isb	sy
 8011202:	e769      	b.n	80110d8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011204:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011206:	f000 f8a9 	bl	801135c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801120a:	f000 faf9 	bl	8011800 <xTaskResumeAll>
 801120e:	e763      	b.n	80110d8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011210:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011212:	f000 f8a3 	bl	801135c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011216:	f000 faf3 	bl	8011800 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801121a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801121c:	f000 f8f0 	bl	8011400 <prvIsQueueEmpty>
 8011220:	4603      	mov	r3, r0
 8011222:	2b00      	cmp	r3, #0
 8011224:	f43f af58 	beq.w	80110d8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8011228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801122a:	2b00      	cmp	r3, #0
 801122c:	d00d      	beq.n	801124a <xQueueSemaphoreTake+0x1f2>
					{
						taskENTER_CRITICAL();
 801122e:	f001 f991 	bl	8012554 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011232:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011234:	f000 f810 	bl	8011258 <prvGetDisinheritPriorityAfterTimeout>
 8011238:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801123a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801123c:	689b      	ldr	r3, [r3, #8]
 801123e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011240:	4618      	mov	r0, r3
 8011242:	f000 ff4d 	bl	80120e0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011246:	f001 f9b5 	bl	80125b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801124a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801124c:	4618      	mov	r0, r3
 801124e:	3738      	adds	r7, #56	; 0x38
 8011250:	46bd      	mov	sp, r7
 8011252:	bd80      	pop	{r7, pc}
 8011254:	e000ed04 	.word	0xe000ed04

08011258 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011258:	b480      	push	{r7}
 801125a:	b085      	sub	sp, #20
 801125c:	af00      	add	r7, sp, #0
 801125e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011264:	2b00      	cmp	r3, #0
 8011266:	d006      	beq.n	8011276 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	f1c3 0307 	rsb	r3, r3, #7
 8011272:	60fb      	str	r3, [r7, #12]
 8011274:	e001      	b.n	801127a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8011276:	2300      	movs	r3, #0
 8011278:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801127a:	68fb      	ldr	r3, [r7, #12]
	}
 801127c:	4618      	mov	r0, r3
 801127e:	3714      	adds	r7, #20
 8011280:	46bd      	mov	sp, r7
 8011282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011286:	4770      	bx	lr

08011288 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011288:	b580      	push	{r7, lr}
 801128a:	b086      	sub	sp, #24
 801128c:	af00      	add	r7, sp, #0
 801128e:	60f8      	str	r0, [r7, #12]
 8011290:	60b9      	str	r1, [r7, #8]
 8011292:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011294:	2300      	movs	r3, #0
 8011296:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801129c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d10d      	bne.n	80112c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d14d      	bne.n	801134a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	689b      	ldr	r3, [r3, #8]
 80112b2:	4618      	mov	r0, r3
 80112b4:	f000 fe8e 	bl	8011fd4 <xTaskPriorityDisinherit>
 80112b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	2200      	movs	r2, #0
 80112be:	609a      	str	r2, [r3, #8]
 80112c0:	e043      	b.n	801134a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d119      	bne.n	80112fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	6858      	ldr	r0, [r3, #4]
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112d0:	461a      	mov	r2, r3
 80112d2:	68b9      	ldr	r1, [r7, #8]
 80112d4:	f002 f9d8 	bl	8013688 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	685a      	ldr	r2, [r3, #4]
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112e0:	441a      	add	r2, r3
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	685a      	ldr	r2, [r3, #4]
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	689b      	ldr	r3, [r3, #8]
 80112ee:	429a      	cmp	r2, r3
 80112f0:	d32b      	bcc.n	801134a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	681a      	ldr	r2, [r3, #0]
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	605a      	str	r2, [r3, #4]
 80112fa:	e026      	b.n	801134a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	68d8      	ldr	r0, [r3, #12]
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011304:	461a      	mov	r2, r3
 8011306:	68b9      	ldr	r1, [r7, #8]
 8011308:	f002 f9be 	bl	8013688 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	68da      	ldr	r2, [r3, #12]
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011314:	425b      	negs	r3, r3
 8011316:	441a      	add	r2, r3
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	68da      	ldr	r2, [r3, #12]
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	429a      	cmp	r2, r3
 8011326:	d207      	bcs.n	8011338 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	689a      	ldr	r2, [r3, #8]
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011330:	425b      	negs	r3, r3
 8011332:	441a      	add	r2, r3
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	2b02      	cmp	r3, #2
 801133c:	d105      	bne.n	801134a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801133e:	693b      	ldr	r3, [r7, #16]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d002      	beq.n	801134a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011344:	693b      	ldr	r3, [r7, #16]
 8011346:	3b01      	subs	r3, #1
 8011348:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801134a:	693b      	ldr	r3, [r7, #16]
 801134c:	1c5a      	adds	r2, r3, #1
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011352:	697b      	ldr	r3, [r7, #20]
}
 8011354:	4618      	mov	r0, r3
 8011356:	3718      	adds	r7, #24
 8011358:	46bd      	mov	sp, r7
 801135a:	bd80      	pop	{r7, pc}

0801135c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801135c:	b580      	push	{r7, lr}
 801135e:	b084      	sub	sp, #16
 8011360:	af00      	add	r7, sp, #0
 8011362:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011364:	f001 f8f6 	bl	8012554 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801136e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011370:	e011      	b.n	8011396 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011376:	2b00      	cmp	r3, #0
 8011378:	d012      	beq.n	80113a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	3324      	adds	r3, #36	; 0x24
 801137e:	4618      	mov	r0, r3
 8011380:	f000 fbe8 	bl	8011b54 <xTaskRemoveFromEventList>
 8011384:	4603      	mov	r3, r0
 8011386:	2b00      	cmp	r3, #0
 8011388:	d001      	beq.n	801138e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801138a:	f000 fccd 	bl	8011d28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801138e:	7bfb      	ldrb	r3, [r7, #15]
 8011390:	3b01      	subs	r3, #1
 8011392:	b2db      	uxtb	r3, r3
 8011394:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801139a:	2b00      	cmp	r3, #0
 801139c:	dce9      	bgt.n	8011372 <prvUnlockQueue+0x16>
 801139e:	e000      	b.n	80113a2 <prvUnlockQueue+0x46>
					break;
 80113a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	22ff      	movs	r2, #255	; 0xff
 80113a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80113aa:	f001 f903 	bl	80125b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80113ae:	f001 f8d1 	bl	8012554 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80113b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80113ba:	e011      	b.n	80113e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	691b      	ldr	r3, [r3, #16]
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d012      	beq.n	80113ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	3310      	adds	r3, #16
 80113c8:	4618      	mov	r0, r3
 80113ca:	f000 fbc3 	bl	8011b54 <xTaskRemoveFromEventList>
 80113ce:	4603      	mov	r3, r0
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d001      	beq.n	80113d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80113d4:	f000 fca8 	bl	8011d28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80113d8:	7bbb      	ldrb	r3, [r7, #14]
 80113da:	3b01      	subs	r3, #1
 80113dc:	b2db      	uxtb	r3, r3
 80113de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80113e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	dce9      	bgt.n	80113bc <prvUnlockQueue+0x60>
 80113e8:	e000      	b.n	80113ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80113ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	22ff      	movs	r2, #255	; 0xff
 80113f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80113f4:	f001 f8de 	bl	80125b4 <vPortExitCritical>
}
 80113f8:	bf00      	nop
 80113fa:	3710      	adds	r7, #16
 80113fc:	46bd      	mov	sp, r7
 80113fe:	bd80      	pop	{r7, pc}

08011400 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011400:	b580      	push	{r7, lr}
 8011402:	b084      	sub	sp, #16
 8011404:	af00      	add	r7, sp, #0
 8011406:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011408:	f001 f8a4 	bl	8012554 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011410:	2b00      	cmp	r3, #0
 8011412:	d102      	bne.n	801141a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011414:	2301      	movs	r3, #1
 8011416:	60fb      	str	r3, [r7, #12]
 8011418:	e001      	b.n	801141e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801141a:	2300      	movs	r3, #0
 801141c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801141e:	f001 f8c9 	bl	80125b4 <vPortExitCritical>

	return xReturn;
 8011422:	68fb      	ldr	r3, [r7, #12]
}
 8011424:	4618      	mov	r0, r3
 8011426:	3710      	adds	r7, #16
 8011428:	46bd      	mov	sp, r7
 801142a:	bd80      	pop	{r7, pc}

0801142c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801142c:	b580      	push	{r7, lr}
 801142e:	b084      	sub	sp, #16
 8011430:	af00      	add	r7, sp, #0
 8011432:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011434:	f001 f88e 	bl	8012554 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011440:	429a      	cmp	r2, r3
 8011442:	d102      	bne.n	801144a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011444:	2301      	movs	r3, #1
 8011446:	60fb      	str	r3, [r7, #12]
 8011448:	e001      	b.n	801144e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801144a:	2300      	movs	r3, #0
 801144c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801144e:	f001 f8b1 	bl	80125b4 <vPortExitCritical>

	return xReturn;
 8011452:	68fb      	ldr	r3, [r7, #12]
}
 8011454:	4618      	mov	r0, r3
 8011456:	3710      	adds	r7, #16
 8011458:	46bd      	mov	sp, r7
 801145a:	bd80      	pop	{r7, pc}

0801145c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801145c:	b580      	push	{r7, lr}
 801145e:	b08c      	sub	sp, #48	; 0x30
 8011460:	af04      	add	r7, sp, #16
 8011462:	60f8      	str	r0, [r7, #12]
 8011464:	60b9      	str	r1, [r7, #8]
 8011466:	603b      	str	r3, [r7, #0]
 8011468:	4613      	mov	r3, r2
 801146a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801146c:	88fb      	ldrh	r3, [r7, #6]
 801146e:	009b      	lsls	r3, r3, #2
 8011470:	4618      	mov	r0, r3
 8011472:	f001 f991 	bl	8012798 <pvPortMalloc>
 8011476:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011478:	697b      	ldr	r3, [r7, #20]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d00e      	beq.n	801149c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801147e:	20a0      	movs	r0, #160	; 0xa0
 8011480:	f001 f98a 	bl	8012798 <pvPortMalloc>
 8011484:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011486:	69fb      	ldr	r3, [r7, #28]
 8011488:	2b00      	cmp	r3, #0
 801148a:	d003      	beq.n	8011494 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801148c:	69fb      	ldr	r3, [r7, #28]
 801148e:	697a      	ldr	r2, [r7, #20]
 8011490:	631a      	str	r2, [r3, #48]	; 0x30
 8011492:	e005      	b.n	80114a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011494:	6978      	ldr	r0, [r7, #20]
 8011496:	f001 fa4b 	bl	8012930 <vPortFree>
 801149a:	e001      	b.n	80114a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801149c:	2300      	movs	r3, #0
 801149e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80114a0:	69fb      	ldr	r3, [r7, #28]
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d013      	beq.n	80114ce <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80114a6:	88fa      	ldrh	r2, [r7, #6]
 80114a8:	2300      	movs	r3, #0
 80114aa:	9303      	str	r3, [sp, #12]
 80114ac:	69fb      	ldr	r3, [r7, #28]
 80114ae:	9302      	str	r3, [sp, #8]
 80114b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114b2:	9301      	str	r3, [sp, #4]
 80114b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114b6:	9300      	str	r3, [sp, #0]
 80114b8:	683b      	ldr	r3, [r7, #0]
 80114ba:	68b9      	ldr	r1, [r7, #8]
 80114bc:	68f8      	ldr	r0, [r7, #12]
 80114be:	f000 f80f 	bl	80114e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80114c2:	69f8      	ldr	r0, [r7, #28]
 80114c4:	f000 f8ae 	bl	8011624 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80114c8:	2301      	movs	r3, #1
 80114ca:	61bb      	str	r3, [r7, #24]
 80114cc:	e002      	b.n	80114d4 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80114ce:	f04f 33ff 	mov.w	r3, #4294967295
 80114d2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80114d4:	69bb      	ldr	r3, [r7, #24]
	}
 80114d6:	4618      	mov	r0, r3
 80114d8:	3720      	adds	r7, #32
 80114da:	46bd      	mov	sp, r7
 80114dc:	bd80      	pop	{r7, pc}
	...

080114e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b088      	sub	sp, #32
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	60f8      	str	r0, [r7, #12]
 80114e8:	60b9      	str	r1, [r7, #8]
 80114ea:	607a      	str	r2, [r7, #4]
 80114ec:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80114ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80114f8:	3b01      	subs	r3, #1
 80114fa:	009b      	lsls	r3, r3, #2
 80114fc:	4413      	add	r3, r2
 80114fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011500:	69bb      	ldr	r3, [r7, #24]
 8011502:	f023 0307 	bic.w	r3, r3, #7
 8011506:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011508:	69bb      	ldr	r3, [r7, #24]
 801150a:	f003 0307 	and.w	r3, r3, #7
 801150e:	2b00      	cmp	r3, #0
 8011510:	d00a      	beq.n	8011528 <prvInitialiseNewTask+0x48>
	__asm volatile
 8011512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011516:	f383 8811 	msr	BASEPRI, r3
 801151a:	f3bf 8f6f 	isb	sy
 801151e:	f3bf 8f4f 	dsb	sy
 8011522:	617b      	str	r3, [r7, #20]
}
 8011524:	bf00      	nop
 8011526:	e7fe      	b.n	8011526 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011528:	68bb      	ldr	r3, [r7, #8]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d01f      	beq.n	801156e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801152e:	2300      	movs	r3, #0
 8011530:	61fb      	str	r3, [r7, #28]
 8011532:	e012      	b.n	801155a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011534:	68ba      	ldr	r2, [r7, #8]
 8011536:	69fb      	ldr	r3, [r7, #28]
 8011538:	4413      	add	r3, r2
 801153a:	7819      	ldrb	r1, [r3, #0]
 801153c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801153e:	69fb      	ldr	r3, [r7, #28]
 8011540:	4413      	add	r3, r2
 8011542:	3334      	adds	r3, #52	; 0x34
 8011544:	460a      	mov	r2, r1
 8011546:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011548:	68ba      	ldr	r2, [r7, #8]
 801154a:	69fb      	ldr	r3, [r7, #28]
 801154c:	4413      	add	r3, r2
 801154e:	781b      	ldrb	r3, [r3, #0]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d006      	beq.n	8011562 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011554:	69fb      	ldr	r3, [r7, #28]
 8011556:	3301      	adds	r3, #1
 8011558:	61fb      	str	r3, [r7, #28]
 801155a:	69fb      	ldr	r3, [r7, #28]
 801155c:	2b0f      	cmp	r3, #15
 801155e:	d9e9      	bls.n	8011534 <prvInitialiseNewTask+0x54>
 8011560:	e000      	b.n	8011564 <prvInitialiseNewTask+0x84>
			{
				break;
 8011562:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011566:	2200      	movs	r2, #0
 8011568:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801156c:	e003      	b.n	8011576 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801156e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011570:	2200      	movs	r2, #0
 8011572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011578:	2b06      	cmp	r3, #6
 801157a:	d901      	bls.n	8011580 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801157c:	2306      	movs	r3, #6
 801157e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011584:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011588:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801158a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801158c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801158e:	2200      	movs	r2, #0
 8011590:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011594:	3304      	adds	r3, #4
 8011596:	4618      	mov	r0, r3
 8011598:	f7ff fa73 	bl	8010a82 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801159c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801159e:	3318      	adds	r3, #24
 80115a0:	4618      	mov	r0, r3
 80115a2:	f7ff fa6e 	bl	8010a82 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80115a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80115aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80115ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ae:	f1c3 0207 	rsb	r2, r3, #7
 80115b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80115b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80115ba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80115bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115be:	2200      	movs	r2, #0
 80115c0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80115c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115c6:	2200      	movs	r2, #0
 80115c8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80115cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115ce:	334c      	adds	r3, #76	; 0x4c
 80115d0:	224c      	movs	r2, #76	; 0x4c
 80115d2:	2100      	movs	r1, #0
 80115d4:	4618      	mov	r0, r3
 80115d6:	f001 ffcd 	bl	8013574 <memset>
 80115da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115dc:	4a0e      	ldr	r2, [pc, #56]	; (8011618 <prvInitialiseNewTask+0x138>)
 80115de:	651a      	str	r2, [r3, #80]	; 0x50
 80115e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115e2:	4a0e      	ldr	r2, [pc, #56]	; (801161c <prvInitialiseNewTask+0x13c>)
 80115e4:	655a      	str	r2, [r3, #84]	; 0x54
 80115e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115e8:	4a0d      	ldr	r2, [pc, #52]	; (8011620 <prvInitialiseNewTask+0x140>)
 80115ea:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 80115ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115ee:	2200      	movs	r2, #0
 80115f0:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80115f4:	683a      	ldr	r2, [r7, #0]
 80115f6:	68f9      	ldr	r1, [r7, #12]
 80115f8:	69b8      	ldr	r0, [r7, #24]
 80115fa:	f000 fe7d 	bl	80122f8 <pxPortInitialiseStack>
 80115fe:	4602      	mov	r2, r0
 8011600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011602:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011606:	2b00      	cmp	r3, #0
 8011608:	d002      	beq.n	8011610 <prvInitialiseNewTask+0x130>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801160a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801160c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801160e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011610:	bf00      	nop
 8011612:	3720      	adds	r7, #32
 8011614:	46bd      	mov	sp, r7
 8011616:	bd80      	pop	{r7, pc}
 8011618:	20005628 	.word	0x20005628
 801161c:	20005690 	.word	0x20005690
 8011620:	200056f8 	.word	0x200056f8

08011624 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011624:	b580      	push	{r7, lr}
 8011626:	b082      	sub	sp, #8
 8011628:	af00      	add	r7, sp, #0
 801162a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801162c:	f000 ff92 	bl	8012554 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011630:	4b24      	ldr	r3, [pc, #144]	; (80116c4 <prvAddNewTaskToReadyList+0xa0>)
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	3301      	adds	r3, #1
 8011636:	4a23      	ldr	r2, [pc, #140]	; (80116c4 <prvAddNewTaskToReadyList+0xa0>)
 8011638:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801163a:	4b23      	ldr	r3, [pc, #140]	; (80116c8 <prvAddNewTaskToReadyList+0xa4>)
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	2b00      	cmp	r3, #0
 8011640:	d109      	bne.n	8011656 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011642:	4a21      	ldr	r2, [pc, #132]	; (80116c8 <prvAddNewTaskToReadyList+0xa4>)
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011648:	4b1e      	ldr	r3, [pc, #120]	; (80116c4 <prvAddNewTaskToReadyList+0xa0>)
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	2b01      	cmp	r3, #1
 801164e:	d110      	bne.n	8011672 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011650:	f000 fb88 	bl	8011d64 <prvInitialiseTaskLists>
 8011654:	e00d      	b.n	8011672 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011656:	4b1d      	ldr	r3, [pc, #116]	; (80116cc <prvAddNewTaskToReadyList+0xa8>)
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	2b00      	cmp	r3, #0
 801165c:	d109      	bne.n	8011672 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801165e:	4b1a      	ldr	r3, [pc, #104]	; (80116c8 <prvAddNewTaskToReadyList+0xa4>)
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011668:	429a      	cmp	r2, r3
 801166a:	d802      	bhi.n	8011672 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801166c:	4a16      	ldr	r2, [pc, #88]	; (80116c8 <prvAddNewTaskToReadyList+0xa4>)
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011672:	4b17      	ldr	r3, [pc, #92]	; (80116d0 <prvAddNewTaskToReadyList+0xac>)
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	3301      	adds	r3, #1
 8011678:	4a15      	ldr	r2, [pc, #84]	; (80116d0 <prvAddNewTaskToReadyList+0xac>)
 801167a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011680:	2201      	movs	r2, #1
 8011682:	409a      	lsls	r2, r3
 8011684:	4b13      	ldr	r3, [pc, #76]	; (80116d4 <prvAddNewTaskToReadyList+0xb0>)
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	4313      	orrs	r3, r2
 801168a:	4a12      	ldr	r2, [pc, #72]	; (80116d4 <prvAddNewTaskToReadyList+0xb0>)
 801168c:	6013      	str	r3, [r2, #0]
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011692:	4613      	mov	r3, r2
 8011694:	009b      	lsls	r3, r3, #2
 8011696:	4413      	add	r3, r2
 8011698:	009b      	lsls	r3, r3, #2
 801169a:	4a0f      	ldr	r2, [pc, #60]	; (80116d8 <prvAddNewTaskToReadyList+0xb4>)
 801169c:	441a      	add	r2, r3
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	3304      	adds	r3, #4
 80116a2:	4619      	mov	r1, r3
 80116a4:	4610      	mov	r0, r2
 80116a6:	f7ff f9f9 	bl	8010a9c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80116aa:	f000 ff83 	bl	80125b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80116ae:	4b07      	ldr	r3, [pc, #28]	; (80116cc <prvAddNewTaskToReadyList+0xa8>)
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d001      	beq.n	80116ba <prvAddNewTaskToReadyList+0x96>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80116b6:	4b04      	ldr	r3, [pc, #16]	; (80116c8 <prvAddNewTaskToReadyList+0xa4>)
 80116b8:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80116ba:	bf00      	nop
 80116bc:	3708      	adds	r7, #8
 80116be:	46bd      	mov	sp, r7
 80116c0:	bd80      	pop	{r7, pc}
 80116c2:	bf00      	nop
 80116c4:	20000bf0 	.word	0x20000bf0
 80116c8:	20000af0 	.word	0x20000af0
 80116cc:	20000bfc 	.word	0x20000bfc
 80116d0:	20000c0c 	.word	0x20000c0c
 80116d4:	20000bf8 	.word	0x20000bf8
 80116d8:	20000af4 	.word	0x20000af4

080116dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80116dc:	b580      	push	{r7, lr}
 80116de:	b084      	sub	sp, #16
 80116e0:	af00      	add	r7, sp, #0
 80116e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80116e4:	2300      	movs	r3, #0
 80116e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d017      	beq.n	801171e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80116ee:	4b13      	ldr	r3, [pc, #76]	; (801173c <vTaskDelay+0x60>)
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d00a      	beq.n	801170c <vTaskDelay+0x30>
	__asm volatile
 80116f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116fa:	f383 8811 	msr	BASEPRI, r3
 80116fe:	f3bf 8f6f 	isb	sy
 8011702:	f3bf 8f4f 	dsb	sy
 8011706:	60bb      	str	r3, [r7, #8]
}
 8011708:	bf00      	nop
 801170a:	e7fe      	b.n	801170a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801170c:	f000 f86a 	bl	80117e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011710:	2100      	movs	r1, #0
 8011712:	6878      	ldr	r0, [r7, #4]
 8011714:	f000 fd86 	bl	8012224 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011718:	f000 f872 	bl	8011800 <xTaskResumeAll>
 801171c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d107      	bne.n	8011734 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8011724:	4b06      	ldr	r3, [pc, #24]	; (8011740 <vTaskDelay+0x64>)
 8011726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801172a:	601a      	str	r2, [r3, #0]
 801172c:	f3bf 8f4f 	dsb	sy
 8011730:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011734:	bf00      	nop
 8011736:	3710      	adds	r7, #16
 8011738:	46bd      	mov	sp, r7
 801173a:	bd80      	pop	{r7, pc}
 801173c:	20000c18 	.word	0x20000c18
 8011740:	e000ed04 	.word	0xe000ed04

08011744 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011744:	b580      	push	{r7, lr}
 8011746:	b086      	sub	sp, #24
 8011748:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 801174a:	4b1e      	ldr	r3, [pc, #120]	; (80117c4 <vTaskStartScheduler+0x80>)
 801174c:	9301      	str	r3, [sp, #4]
 801174e:	2300      	movs	r3, #0
 8011750:	9300      	str	r3, [sp, #0]
 8011752:	2300      	movs	r3, #0
 8011754:	2280      	movs	r2, #128	; 0x80
 8011756:	491c      	ldr	r1, [pc, #112]	; (80117c8 <vTaskStartScheduler+0x84>)
 8011758:	481c      	ldr	r0, [pc, #112]	; (80117cc <vTaskStartScheduler+0x88>)
 801175a:	f7ff fe7f 	bl	801145c <xTaskCreate>
 801175e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	2b01      	cmp	r3, #1
 8011764:	d11b      	bne.n	801179e <vTaskStartScheduler+0x5a>
	__asm volatile
 8011766:	f04f 0350 	mov.w	r3, #80	; 0x50
 801176a:	f383 8811 	msr	BASEPRI, r3
 801176e:	f3bf 8f6f 	isb	sy
 8011772:	f3bf 8f4f 	dsb	sy
 8011776:	60bb      	str	r3, [r7, #8]
}
 8011778:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801177a:	4b15      	ldr	r3, [pc, #84]	; (80117d0 <vTaskStartScheduler+0x8c>)
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	334c      	adds	r3, #76	; 0x4c
 8011780:	4a14      	ldr	r2, [pc, #80]	; (80117d4 <vTaskStartScheduler+0x90>)
 8011782:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011784:	4b14      	ldr	r3, [pc, #80]	; (80117d8 <vTaskStartScheduler+0x94>)
 8011786:	f04f 32ff 	mov.w	r2, #4294967295
 801178a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801178c:	4b13      	ldr	r3, [pc, #76]	; (80117dc <vTaskStartScheduler+0x98>)
 801178e:	2201      	movs	r2, #1
 8011790:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011792:	4b13      	ldr	r3, [pc, #76]	; (80117e0 <vTaskStartScheduler+0x9c>)
 8011794:	2200      	movs	r2, #0
 8011796:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011798:	f000 fe3a 	bl	8012410 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801179c:	e00e      	b.n	80117bc <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117a4:	d10a      	bne.n	80117bc <vTaskStartScheduler+0x78>
	__asm volatile
 80117a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117aa:	f383 8811 	msr	BASEPRI, r3
 80117ae:	f3bf 8f6f 	isb	sy
 80117b2:	f3bf 8f4f 	dsb	sy
 80117b6:	607b      	str	r3, [r7, #4]
}
 80117b8:	bf00      	nop
 80117ba:	e7fe      	b.n	80117ba <vTaskStartScheduler+0x76>
}
 80117bc:	bf00      	nop
 80117be:	3710      	adds	r7, #16
 80117c0:	46bd      	mov	sp, r7
 80117c2:	bd80      	pop	{r7, pc}
 80117c4:	20000c14 	.word	0x20000c14
 80117c8:	080146e0 	.word	0x080146e0
 80117cc:	08011d41 	.word	0x08011d41
 80117d0:	20000af0 	.word	0x20000af0
 80117d4:	200001d8 	.word	0x200001d8
 80117d8:	20000c10 	.word	0x20000c10
 80117dc:	20000bfc 	.word	0x20000bfc
 80117e0:	20000bf4 	.word	0x20000bf4

080117e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80117e4:	b480      	push	{r7}
 80117e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80117e8:	4b04      	ldr	r3, [pc, #16]	; (80117fc <vTaskSuspendAll+0x18>)
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	3301      	adds	r3, #1
 80117ee:	4a03      	ldr	r2, [pc, #12]	; (80117fc <vTaskSuspendAll+0x18>)
 80117f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80117f2:	bf00      	nop
 80117f4:	46bd      	mov	sp, r7
 80117f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117fa:	4770      	bx	lr
 80117fc:	20000c18 	.word	0x20000c18

08011800 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011800:	b580      	push	{r7, lr}
 8011802:	b084      	sub	sp, #16
 8011804:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011806:	2300      	movs	r3, #0
 8011808:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801180a:	2300      	movs	r3, #0
 801180c:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801180e:	4b3b      	ldr	r3, [pc, #236]	; (80118fc <xTaskResumeAll+0xfc>)
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	2b00      	cmp	r3, #0
 8011814:	d10a      	bne.n	801182c <xTaskResumeAll+0x2c>
	__asm volatile
 8011816:	f04f 0350 	mov.w	r3, #80	; 0x50
 801181a:	f383 8811 	msr	BASEPRI, r3
 801181e:	f3bf 8f6f 	isb	sy
 8011822:	f3bf 8f4f 	dsb	sy
 8011826:	603b      	str	r3, [r7, #0]
}
 8011828:	bf00      	nop
 801182a:	e7fe      	b.n	801182a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801182c:	f000 fe92 	bl	8012554 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011830:	4b32      	ldr	r3, [pc, #200]	; (80118fc <xTaskResumeAll+0xfc>)
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	3b01      	subs	r3, #1
 8011836:	4a31      	ldr	r2, [pc, #196]	; (80118fc <xTaskResumeAll+0xfc>)
 8011838:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801183a:	4b30      	ldr	r3, [pc, #192]	; (80118fc <xTaskResumeAll+0xfc>)
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	2b00      	cmp	r3, #0
 8011840:	d155      	bne.n	80118ee <xTaskResumeAll+0xee>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011842:	4b2f      	ldr	r3, [pc, #188]	; (8011900 <xTaskResumeAll+0x100>)
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	2b00      	cmp	r3, #0
 8011848:	d051      	beq.n	80118ee <xTaskResumeAll+0xee>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801184a:	e02e      	b.n	80118aa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801184c:	4b2d      	ldr	r3, [pc, #180]	; (8011904 <xTaskResumeAll+0x104>)
 801184e:	68db      	ldr	r3, [r3, #12]
 8011850:	68db      	ldr	r3, [r3, #12]
 8011852:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	3318      	adds	r3, #24
 8011858:	4618      	mov	r0, r3
 801185a:	f7ff f97c 	bl	8010b56 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	3304      	adds	r3, #4
 8011862:	4618      	mov	r0, r3
 8011864:	f7ff f977 	bl	8010b56 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801186c:	2201      	movs	r2, #1
 801186e:	409a      	lsls	r2, r3
 8011870:	4b25      	ldr	r3, [pc, #148]	; (8011908 <xTaskResumeAll+0x108>)
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	4313      	orrs	r3, r2
 8011876:	4a24      	ldr	r2, [pc, #144]	; (8011908 <xTaskResumeAll+0x108>)
 8011878:	6013      	str	r3, [r2, #0]
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801187e:	4613      	mov	r3, r2
 8011880:	009b      	lsls	r3, r3, #2
 8011882:	4413      	add	r3, r2
 8011884:	009b      	lsls	r3, r3, #2
 8011886:	4a21      	ldr	r2, [pc, #132]	; (801190c <xTaskResumeAll+0x10c>)
 8011888:	441a      	add	r2, r3
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	3304      	adds	r3, #4
 801188e:	4619      	mov	r1, r3
 8011890:	4610      	mov	r0, r2
 8011892:	f7ff f903 	bl	8010a9c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801189a:	4b1d      	ldr	r3, [pc, #116]	; (8011910 <xTaskResumeAll+0x110>)
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118a0:	429a      	cmp	r2, r3
 80118a2:	d302      	bcc.n	80118aa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80118a4:	4b1b      	ldr	r3, [pc, #108]	; (8011914 <xTaskResumeAll+0x114>)
 80118a6:	2201      	movs	r2, #1
 80118a8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80118aa:	4b16      	ldr	r3, [pc, #88]	; (8011904 <xTaskResumeAll+0x104>)
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d1cc      	bne.n	801184c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d001      	beq.n	80118bc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80118b8:	f000 fad8 	bl	8011e6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80118bc:	4b16      	ldr	r3, [pc, #88]	; (8011918 <xTaskResumeAll+0x118>)
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 80118c2:	68bb      	ldr	r3, [r7, #8]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d010      	beq.n	80118ea <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80118c8:	f000 f828 	bl	801191c <xTaskIncrementTick>
 80118cc:	4603      	mov	r3, r0
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d002      	beq.n	80118d8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80118d2:	4b10      	ldr	r3, [pc, #64]	; (8011914 <xTaskResumeAll+0x114>)
 80118d4:	2201      	movs	r2, #1
 80118d6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80118d8:	68bb      	ldr	r3, [r7, #8]
 80118da:	3b01      	subs	r3, #1
 80118dc:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80118de:	68bb      	ldr	r3, [r7, #8]
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d1f1      	bne.n	80118c8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80118e4:	4b0c      	ldr	r3, [pc, #48]	; (8011918 <xTaskResumeAll+0x118>)
 80118e6:	2200      	movs	r2, #0
 80118e8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80118ea:	4b0a      	ldr	r3, [pc, #40]	; (8011914 <xTaskResumeAll+0x114>)
 80118ec:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80118ee:	f000 fe61 	bl	80125b4 <vPortExitCritical>

	return xAlreadyYielded;
 80118f2:	687b      	ldr	r3, [r7, #4]
}
 80118f4:	4618      	mov	r0, r3
 80118f6:	3710      	adds	r7, #16
 80118f8:	46bd      	mov	sp, r7
 80118fa:	bd80      	pop	{r7, pc}
 80118fc:	20000c18 	.word	0x20000c18
 8011900:	20000bf0 	.word	0x20000bf0
 8011904:	20000bb0 	.word	0x20000bb0
 8011908:	20000bf8 	.word	0x20000bf8
 801190c:	20000af4 	.word	0x20000af4
 8011910:	20000af0 	.word	0x20000af0
 8011914:	20000c04 	.word	0x20000c04
 8011918:	20000c00 	.word	0x20000c00

0801191c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801191c:	b580      	push	{r7, lr}
 801191e:	b086      	sub	sp, #24
 8011920:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011922:	2300      	movs	r3, #0
 8011924:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011926:	4b3f      	ldr	r3, [pc, #252]	; (8011a24 <xTaskIncrementTick+0x108>)
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	2b00      	cmp	r3, #0
 801192c:	d16f      	bne.n	8011a0e <xTaskIncrementTick+0xf2>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801192e:	4b3e      	ldr	r3, [pc, #248]	; (8011a28 <xTaskIncrementTick+0x10c>)
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	3301      	adds	r3, #1
 8011934:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011936:	4a3c      	ldr	r2, [pc, #240]	; (8011a28 <xTaskIncrementTick+0x10c>)
 8011938:	693b      	ldr	r3, [r7, #16]
 801193a:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801193c:	693b      	ldr	r3, [r7, #16]
 801193e:	2b00      	cmp	r3, #0
 8011940:	d120      	bne.n	8011984 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8011942:	4b3a      	ldr	r3, [pc, #232]	; (8011a2c <xTaskIncrementTick+0x110>)
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	2b00      	cmp	r3, #0
 801194a:	d00a      	beq.n	8011962 <xTaskIncrementTick+0x46>
	__asm volatile
 801194c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011950:	f383 8811 	msr	BASEPRI, r3
 8011954:	f3bf 8f6f 	isb	sy
 8011958:	f3bf 8f4f 	dsb	sy
 801195c:	603b      	str	r3, [r7, #0]
}
 801195e:	bf00      	nop
 8011960:	e7fe      	b.n	8011960 <xTaskIncrementTick+0x44>
 8011962:	4b32      	ldr	r3, [pc, #200]	; (8011a2c <xTaskIncrementTick+0x110>)
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	60fb      	str	r3, [r7, #12]
 8011968:	4b31      	ldr	r3, [pc, #196]	; (8011a30 <xTaskIncrementTick+0x114>)
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	4a2f      	ldr	r2, [pc, #188]	; (8011a2c <xTaskIncrementTick+0x110>)
 801196e:	6013      	str	r3, [r2, #0]
 8011970:	4a2f      	ldr	r2, [pc, #188]	; (8011a30 <xTaskIncrementTick+0x114>)
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	6013      	str	r3, [r2, #0]
 8011976:	4b2f      	ldr	r3, [pc, #188]	; (8011a34 <xTaskIncrementTick+0x118>)
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	3301      	adds	r3, #1
 801197c:	4a2d      	ldr	r2, [pc, #180]	; (8011a34 <xTaskIncrementTick+0x118>)
 801197e:	6013      	str	r3, [r2, #0]
 8011980:	f000 fa74 	bl	8011e6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011984:	4b2c      	ldr	r3, [pc, #176]	; (8011a38 <xTaskIncrementTick+0x11c>)
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	693a      	ldr	r2, [r7, #16]
 801198a:	429a      	cmp	r2, r3
 801198c:	d344      	bcc.n	8011a18 <xTaskIncrementTick+0xfc>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801198e:	4b27      	ldr	r3, [pc, #156]	; (8011a2c <xTaskIncrementTick+0x110>)
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	2b00      	cmp	r3, #0
 8011996:	d104      	bne.n	80119a2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011998:	4b27      	ldr	r3, [pc, #156]	; (8011a38 <xTaskIncrementTick+0x11c>)
 801199a:	f04f 32ff 	mov.w	r2, #4294967295
 801199e:	601a      	str	r2, [r3, #0]
					break;
 80119a0:	e03a      	b.n	8011a18 <xTaskIncrementTick+0xfc>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80119a2:	4b22      	ldr	r3, [pc, #136]	; (8011a2c <xTaskIncrementTick+0x110>)
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	68db      	ldr	r3, [r3, #12]
 80119a8:	68db      	ldr	r3, [r3, #12]
 80119aa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80119ac:	68bb      	ldr	r3, [r7, #8]
 80119ae:	685b      	ldr	r3, [r3, #4]
 80119b0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80119b2:	693a      	ldr	r2, [r7, #16]
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	429a      	cmp	r2, r3
 80119b8:	d203      	bcs.n	80119c2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80119ba:	4a1f      	ldr	r2, [pc, #124]	; (8011a38 <xTaskIncrementTick+0x11c>)
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80119c0:	e02a      	b.n	8011a18 <xTaskIncrementTick+0xfc>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80119c2:	68bb      	ldr	r3, [r7, #8]
 80119c4:	3304      	adds	r3, #4
 80119c6:	4618      	mov	r0, r3
 80119c8:	f7ff f8c5 	bl	8010b56 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80119cc:	68bb      	ldr	r3, [r7, #8]
 80119ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d004      	beq.n	80119de <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80119d4:	68bb      	ldr	r3, [r7, #8]
 80119d6:	3318      	adds	r3, #24
 80119d8:	4618      	mov	r0, r3
 80119da:	f7ff f8bc 	bl	8010b56 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80119de:	68bb      	ldr	r3, [r7, #8]
 80119e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119e2:	2201      	movs	r2, #1
 80119e4:	409a      	lsls	r2, r3
 80119e6:	4b15      	ldr	r3, [pc, #84]	; (8011a3c <xTaskIncrementTick+0x120>)
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	4313      	orrs	r3, r2
 80119ec:	4a13      	ldr	r2, [pc, #76]	; (8011a3c <xTaskIncrementTick+0x120>)
 80119ee:	6013      	str	r3, [r2, #0]
 80119f0:	68bb      	ldr	r3, [r7, #8]
 80119f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119f4:	4613      	mov	r3, r2
 80119f6:	009b      	lsls	r3, r3, #2
 80119f8:	4413      	add	r3, r2
 80119fa:	009b      	lsls	r3, r3, #2
 80119fc:	4a10      	ldr	r2, [pc, #64]	; (8011a40 <xTaskIncrementTick+0x124>)
 80119fe:	441a      	add	r2, r3
 8011a00:	68bb      	ldr	r3, [r7, #8]
 8011a02:	3304      	adds	r3, #4
 8011a04:	4619      	mov	r1, r3
 8011a06:	4610      	mov	r0, r2
 8011a08:	f7ff f848 	bl	8010a9c <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011a0c:	e7bf      	b.n	801198e <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8011a0e:	4b0d      	ldr	r3, [pc, #52]	; (8011a44 <xTaskIncrementTick+0x128>)
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	3301      	adds	r3, #1
 8011a14:	4a0b      	ldr	r2, [pc, #44]	; (8011a44 <xTaskIncrementTick+0x128>)
 8011a16:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011a18:	697b      	ldr	r3, [r7, #20]
}
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	3718      	adds	r7, #24
 8011a1e:	46bd      	mov	sp, r7
 8011a20:	bd80      	pop	{r7, pc}
 8011a22:	bf00      	nop
 8011a24:	20000c18 	.word	0x20000c18
 8011a28:	20000bf4 	.word	0x20000bf4
 8011a2c:	20000ba8 	.word	0x20000ba8
 8011a30:	20000bac 	.word	0x20000bac
 8011a34:	20000c08 	.word	0x20000c08
 8011a38:	20000c10 	.word	0x20000c10
 8011a3c:	20000bf8 	.word	0x20000bf8
 8011a40:	20000af4 	.word	0x20000af4
 8011a44:	20000c00 	.word	0x20000c00

08011a48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011a48:	b480      	push	{r7}
 8011a4a:	b087      	sub	sp, #28
 8011a4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011a4e:	4b29      	ldr	r3, [pc, #164]	; (8011af4 <vTaskSwitchContext+0xac>)
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d003      	beq.n	8011a5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011a56:	4b28      	ldr	r3, [pc, #160]	; (8011af8 <vTaskSwitchContext+0xb0>)
 8011a58:	2201      	movs	r2, #1
 8011a5a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011a5c:	e044      	b.n	8011ae8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8011a5e:	4b26      	ldr	r3, [pc, #152]	; (8011af8 <vTaskSwitchContext+0xb0>)
 8011a60:	2200      	movs	r2, #0
 8011a62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011a64:	4b25      	ldr	r3, [pc, #148]	; (8011afc <vTaskSwitchContext+0xb4>)
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	fab3 f383 	clz	r3, r3
 8011a70:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8011a72:	7afb      	ldrb	r3, [r7, #11]
 8011a74:	f1c3 031f 	rsb	r3, r3, #31
 8011a78:	617b      	str	r3, [r7, #20]
 8011a7a:	4921      	ldr	r1, [pc, #132]	; (8011b00 <vTaskSwitchContext+0xb8>)
 8011a7c:	697a      	ldr	r2, [r7, #20]
 8011a7e:	4613      	mov	r3, r2
 8011a80:	009b      	lsls	r3, r3, #2
 8011a82:	4413      	add	r3, r2
 8011a84:	009b      	lsls	r3, r3, #2
 8011a86:	440b      	add	r3, r1
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d10a      	bne.n	8011aa4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8011a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a92:	f383 8811 	msr	BASEPRI, r3
 8011a96:	f3bf 8f6f 	isb	sy
 8011a9a:	f3bf 8f4f 	dsb	sy
 8011a9e:	607b      	str	r3, [r7, #4]
}
 8011aa0:	bf00      	nop
 8011aa2:	e7fe      	b.n	8011aa2 <vTaskSwitchContext+0x5a>
 8011aa4:	697a      	ldr	r2, [r7, #20]
 8011aa6:	4613      	mov	r3, r2
 8011aa8:	009b      	lsls	r3, r3, #2
 8011aaa:	4413      	add	r3, r2
 8011aac:	009b      	lsls	r3, r3, #2
 8011aae:	4a14      	ldr	r2, [pc, #80]	; (8011b00 <vTaskSwitchContext+0xb8>)
 8011ab0:	4413      	add	r3, r2
 8011ab2:	613b      	str	r3, [r7, #16]
 8011ab4:	693b      	ldr	r3, [r7, #16]
 8011ab6:	685b      	ldr	r3, [r3, #4]
 8011ab8:	685a      	ldr	r2, [r3, #4]
 8011aba:	693b      	ldr	r3, [r7, #16]
 8011abc:	605a      	str	r2, [r3, #4]
 8011abe:	693b      	ldr	r3, [r7, #16]
 8011ac0:	685a      	ldr	r2, [r3, #4]
 8011ac2:	693b      	ldr	r3, [r7, #16]
 8011ac4:	3308      	adds	r3, #8
 8011ac6:	429a      	cmp	r2, r3
 8011ac8:	d104      	bne.n	8011ad4 <vTaskSwitchContext+0x8c>
 8011aca:	693b      	ldr	r3, [r7, #16]
 8011acc:	685b      	ldr	r3, [r3, #4]
 8011ace:	685a      	ldr	r2, [r3, #4]
 8011ad0:	693b      	ldr	r3, [r7, #16]
 8011ad2:	605a      	str	r2, [r3, #4]
 8011ad4:	693b      	ldr	r3, [r7, #16]
 8011ad6:	685b      	ldr	r3, [r3, #4]
 8011ad8:	68db      	ldr	r3, [r3, #12]
 8011ada:	4a0a      	ldr	r2, [pc, #40]	; (8011b04 <vTaskSwitchContext+0xbc>)
 8011adc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011ade:	4b09      	ldr	r3, [pc, #36]	; (8011b04 <vTaskSwitchContext+0xbc>)
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	334c      	adds	r3, #76	; 0x4c
 8011ae4:	4a08      	ldr	r2, [pc, #32]	; (8011b08 <vTaskSwitchContext+0xc0>)
 8011ae6:	6013      	str	r3, [r2, #0]
}
 8011ae8:	bf00      	nop
 8011aea:	371c      	adds	r7, #28
 8011aec:	46bd      	mov	sp, r7
 8011aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af2:	4770      	bx	lr
 8011af4:	20000c18 	.word	0x20000c18
 8011af8:	20000c04 	.word	0x20000c04
 8011afc:	20000bf8 	.word	0x20000bf8
 8011b00:	20000af4 	.word	0x20000af4
 8011b04:	20000af0 	.word	0x20000af0
 8011b08:	200001d8 	.word	0x200001d8

08011b0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011b0c:	b580      	push	{r7, lr}
 8011b0e:	b084      	sub	sp, #16
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	6078      	str	r0, [r7, #4]
 8011b14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d10a      	bne.n	8011b32 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8011b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b20:	f383 8811 	msr	BASEPRI, r3
 8011b24:	f3bf 8f6f 	isb	sy
 8011b28:	f3bf 8f4f 	dsb	sy
 8011b2c:	60fb      	str	r3, [r7, #12]
}
 8011b2e:	bf00      	nop
 8011b30:	e7fe      	b.n	8011b30 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011b32:	4b07      	ldr	r3, [pc, #28]	; (8011b50 <vTaskPlaceOnEventList+0x44>)
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	3318      	adds	r3, #24
 8011b38:	4619      	mov	r1, r3
 8011b3a:	6878      	ldr	r0, [r7, #4]
 8011b3c:	f7fe ffd2 	bl	8010ae4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011b40:	2101      	movs	r1, #1
 8011b42:	6838      	ldr	r0, [r7, #0]
 8011b44:	f000 fb6e 	bl	8012224 <prvAddCurrentTaskToDelayedList>
}
 8011b48:	bf00      	nop
 8011b4a:	3710      	adds	r7, #16
 8011b4c:	46bd      	mov	sp, r7
 8011b4e:	bd80      	pop	{r7, pc}
 8011b50:	20000af0 	.word	0x20000af0

08011b54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011b54:	b580      	push	{r7, lr}
 8011b56:	b086      	sub	sp, #24
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	68db      	ldr	r3, [r3, #12]
 8011b60:	68db      	ldr	r3, [r3, #12]
 8011b62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011b64:	693b      	ldr	r3, [r7, #16]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d10a      	bne.n	8011b80 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8011b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b6e:	f383 8811 	msr	BASEPRI, r3
 8011b72:	f3bf 8f6f 	isb	sy
 8011b76:	f3bf 8f4f 	dsb	sy
 8011b7a:	60fb      	str	r3, [r7, #12]
}
 8011b7c:	bf00      	nop
 8011b7e:	e7fe      	b.n	8011b7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011b80:	693b      	ldr	r3, [r7, #16]
 8011b82:	3318      	adds	r3, #24
 8011b84:	4618      	mov	r0, r3
 8011b86:	f7fe ffe6 	bl	8010b56 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011b8a:	4b1d      	ldr	r3, [pc, #116]	; (8011c00 <xTaskRemoveFromEventList+0xac>)
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d11c      	bne.n	8011bcc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011b92:	693b      	ldr	r3, [r7, #16]
 8011b94:	3304      	adds	r3, #4
 8011b96:	4618      	mov	r0, r3
 8011b98:	f7fe ffdd 	bl	8010b56 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011b9c:	693b      	ldr	r3, [r7, #16]
 8011b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ba0:	2201      	movs	r2, #1
 8011ba2:	409a      	lsls	r2, r3
 8011ba4:	4b17      	ldr	r3, [pc, #92]	; (8011c04 <xTaskRemoveFromEventList+0xb0>)
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	4313      	orrs	r3, r2
 8011baa:	4a16      	ldr	r2, [pc, #88]	; (8011c04 <xTaskRemoveFromEventList+0xb0>)
 8011bac:	6013      	str	r3, [r2, #0]
 8011bae:	693b      	ldr	r3, [r7, #16]
 8011bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bb2:	4613      	mov	r3, r2
 8011bb4:	009b      	lsls	r3, r3, #2
 8011bb6:	4413      	add	r3, r2
 8011bb8:	009b      	lsls	r3, r3, #2
 8011bba:	4a13      	ldr	r2, [pc, #76]	; (8011c08 <xTaskRemoveFromEventList+0xb4>)
 8011bbc:	441a      	add	r2, r3
 8011bbe:	693b      	ldr	r3, [r7, #16]
 8011bc0:	3304      	adds	r3, #4
 8011bc2:	4619      	mov	r1, r3
 8011bc4:	4610      	mov	r0, r2
 8011bc6:	f7fe ff69 	bl	8010a9c <vListInsertEnd>
 8011bca:	e005      	b.n	8011bd8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011bcc:	693b      	ldr	r3, [r7, #16]
 8011bce:	3318      	adds	r3, #24
 8011bd0:	4619      	mov	r1, r3
 8011bd2:	480e      	ldr	r0, [pc, #56]	; (8011c0c <xTaskRemoveFromEventList+0xb8>)
 8011bd4:	f7fe ff62 	bl	8010a9c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011bd8:	693b      	ldr	r3, [r7, #16]
 8011bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bdc:	4b0c      	ldr	r3, [pc, #48]	; (8011c10 <xTaskRemoveFromEventList+0xbc>)
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011be2:	429a      	cmp	r2, r3
 8011be4:	d905      	bls.n	8011bf2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011be6:	2301      	movs	r3, #1
 8011be8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011bea:	4b0a      	ldr	r3, [pc, #40]	; (8011c14 <xTaskRemoveFromEventList+0xc0>)
 8011bec:	2201      	movs	r2, #1
 8011bee:	601a      	str	r2, [r3, #0]
 8011bf0:	e001      	b.n	8011bf6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8011bf2:	2300      	movs	r3, #0
 8011bf4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011bf6:	697b      	ldr	r3, [r7, #20]
}
 8011bf8:	4618      	mov	r0, r3
 8011bfa:	3718      	adds	r7, #24
 8011bfc:	46bd      	mov	sp, r7
 8011bfe:	bd80      	pop	{r7, pc}
 8011c00:	20000c18 	.word	0x20000c18
 8011c04:	20000bf8 	.word	0x20000bf8
 8011c08:	20000af4 	.word	0x20000af4
 8011c0c:	20000bb0 	.word	0x20000bb0
 8011c10:	20000af0 	.word	0x20000af0
 8011c14:	20000c04 	.word	0x20000c04

08011c18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011c18:	b480      	push	{r7}
 8011c1a:	b083      	sub	sp, #12
 8011c1c:	af00      	add	r7, sp, #0
 8011c1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011c20:	4b06      	ldr	r3, [pc, #24]	; (8011c3c <vTaskInternalSetTimeOutState+0x24>)
 8011c22:	681a      	ldr	r2, [r3, #0]
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011c28:	4b05      	ldr	r3, [pc, #20]	; (8011c40 <vTaskInternalSetTimeOutState+0x28>)
 8011c2a:	681a      	ldr	r2, [r3, #0]
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	605a      	str	r2, [r3, #4]
}
 8011c30:	bf00      	nop
 8011c32:	370c      	adds	r7, #12
 8011c34:	46bd      	mov	sp, r7
 8011c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c3a:	4770      	bx	lr
 8011c3c:	20000c08 	.word	0x20000c08
 8011c40:	20000bf4 	.word	0x20000bf4

08011c44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011c44:	b580      	push	{r7, lr}
 8011c46:	b088      	sub	sp, #32
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	6078      	str	r0, [r7, #4]
 8011c4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d10a      	bne.n	8011c6a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8011c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c58:	f383 8811 	msr	BASEPRI, r3
 8011c5c:	f3bf 8f6f 	isb	sy
 8011c60:	f3bf 8f4f 	dsb	sy
 8011c64:	613b      	str	r3, [r7, #16]
}
 8011c66:	bf00      	nop
 8011c68:	e7fe      	b.n	8011c68 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011c6a:	683b      	ldr	r3, [r7, #0]
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d10a      	bne.n	8011c86 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c74:	f383 8811 	msr	BASEPRI, r3
 8011c78:	f3bf 8f6f 	isb	sy
 8011c7c:	f3bf 8f4f 	dsb	sy
 8011c80:	60fb      	str	r3, [r7, #12]
}
 8011c82:	bf00      	nop
 8011c84:	e7fe      	b.n	8011c84 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8011c86:	f000 fc65 	bl	8012554 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011c8a:	4b24      	ldr	r3, [pc, #144]	; (8011d1c <xTaskCheckForTimeOut+0xd8>)
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	685b      	ldr	r3, [r3, #4]
 8011c94:	69ba      	ldr	r2, [r7, #24]
 8011c96:	1ad3      	subs	r3, r2, r3
 8011c98:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 8011c9a:	4b21      	ldr	r3, [pc, #132]	; (8011d20 <xTaskCheckForTimeOut+0xdc>)
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d007      	beq.n	8011cb6 <xTaskCheckForTimeOut+0x72>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 8011ca6:	4b1e      	ldr	r3, [pc, #120]	; (8011d20 <xTaskCheckForTimeOut+0xdc>)
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	2200      	movs	r2, #0
 8011cac:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
				xReturn = pdTRUE;
 8011cb0:	2301      	movs	r3, #1
 8011cb2:	61fb      	str	r3, [r7, #28]
 8011cb4:	e02b      	b.n	8011d0e <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011cb6:	683b      	ldr	r3, [r7, #0]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cbe:	d102      	bne.n	8011cc6 <xTaskCheckForTimeOut+0x82>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	61fb      	str	r3, [r7, #28]
 8011cc4:	e023      	b.n	8011d0e <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	681a      	ldr	r2, [r3, #0]
 8011cca:	4b16      	ldr	r3, [pc, #88]	; (8011d24 <xTaskCheckForTimeOut+0xe0>)
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	429a      	cmp	r2, r3
 8011cd0:	d007      	beq.n	8011ce2 <xTaskCheckForTimeOut+0x9e>
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	685b      	ldr	r3, [r3, #4]
 8011cd6:	69ba      	ldr	r2, [r7, #24]
 8011cd8:	429a      	cmp	r2, r3
 8011cda:	d302      	bcc.n	8011ce2 <xTaskCheckForTimeOut+0x9e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011cdc:	2301      	movs	r3, #1
 8011cde:	61fb      	str	r3, [r7, #28]
 8011ce0:	e015      	b.n	8011d0e <xTaskCheckForTimeOut+0xca>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011ce2:	683b      	ldr	r3, [r7, #0]
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	697a      	ldr	r2, [r7, #20]
 8011ce8:	429a      	cmp	r2, r3
 8011cea:	d20b      	bcs.n	8011d04 <xTaskCheckForTimeOut+0xc0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011cec:	683b      	ldr	r3, [r7, #0]
 8011cee:	681a      	ldr	r2, [r3, #0]
 8011cf0:	697b      	ldr	r3, [r7, #20]
 8011cf2:	1ad2      	subs	r2, r2, r3
 8011cf4:	683b      	ldr	r3, [r7, #0]
 8011cf6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011cf8:	6878      	ldr	r0, [r7, #4]
 8011cfa:	f7ff ff8d 	bl	8011c18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011cfe:	2300      	movs	r3, #0
 8011d00:	61fb      	str	r3, [r7, #28]
 8011d02:	e004      	b.n	8011d0e <xTaskCheckForTimeOut+0xca>
		}
		else
		{
			*pxTicksToWait = 0;
 8011d04:	683b      	ldr	r3, [r7, #0]
 8011d06:	2200      	movs	r2, #0
 8011d08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011d0a:	2301      	movs	r3, #1
 8011d0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011d0e:	f000 fc51 	bl	80125b4 <vPortExitCritical>

	return xReturn;
 8011d12:	69fb      	ldr	r3, [r7, #28]
}
 8011d14:	4618      	mov	r0, r3
 8011d16:	3720      	adds	r7, #32
 8011d18:	46bd      	mov	sp, r7
 8011d1a:	bd80      	pop	{r7, pc}
 8011d1c:	20000bf4 	.word	0x20000bf4
 8011d20:	20000af0 	.word	0x20000af0
 8011d24:	20000c08 	.word	0x20000c08

08011d28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011d28:	b480      	push	{r7}
 8011d2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011d2c:	4b03      	ldr	r3, [pc, #12]	; (8011d3c <vTaskMissedYield+0x14>)
 8011d2e:	2201      	movs	r2, #1
 8011d30:	601a      	str	r2, [r3, #0]
}
 8011d32:	bf00      	nop
 8011d34:	46bd      	mov	sp, r7
 8011d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d3a:	4770      	bx	lr
 8011d3c:	20000c04 	.word	0x20000c04

08011d40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011d40:	b580      	push	{r7, lr}
 8011d42:	b082      	sub	sp, #8
 8011d44:	af00      	add	r7, sp, #0
 8011d46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011d48:	f000 f84c 	bl	8011de4 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8011d4c:	4b04      	ldr	r3, [pc, #16]	; (8011d60 <prvIdleTask+0x20>)
 8011d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d52:	601a      	str	r2, [r3, #0]
 8011d54:	f3bf 8f4f 	dsb	sy
 8011d58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011d5c:	e7f4      	b.n	8011d48 <prvIdleTask+0x8>
 8011d5e:	bf00      	nop
 8011d60:	e000ed04 	.word	0xe000ed04

08011d64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011d64:	b580      	push	{r7, lr}
 8011d66:	b082      	sub	sp, #8
 8011d68:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011d6a:	2300      	movs	r3, #0
 8011d6c:	607b      	str	r3, [r7, #4]
 8011d6e:	e00c      	b.n	8011d8a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011d70:	687a      	ldr	r2, [r7, #4]
 8011d72:	4613      	mov	r3, r2
 8011d74:	009b      	lsls	r3, r3, #2
 8011d76:	4413      	add	r3, r2
 8011d78:	009b      	lsls	r3, r3, #2
 8011d7a:	4a12      	ldr	r2, [pc, #72]	; (8011dc4 <prvInitialiseTaskLists+0x60>)
 8011d7c:	4413      	add	r3, r2
 8011d7e:	4618      	mov	r0, r3
 8011d80:	f7fe fe5f 	bl	8010a42 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	3301      	adds	r3, #1
 8011d88:	607b      	str	r3, [r7, #4]
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	2b06      	cmp	r3, #6
 8011d8e:	d9ef      	bls.n	8011d70 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011d90:	480d      	ldr	r0, [pc, #52]	; (8011dc8 <prvInitialiseTaskLists+0x64>)
 8011d92:	f7fe fe56 	bl	8010a42 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011d96:	480d      	ldr	r0, [pc, #52]	; (8011dcc <prvInitialiseTaskLists+0x68>)
 8011d98:	f7fe fe53 	bl	8010a42 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011d9c:	480c      	ldr	r0, [pc, #48]	; (8011dd0 <prvInitialiseTaskLists+0x6c>)
 8011d9e:	f7fe fe50 	bl	8010a42 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011da2:	480c      	ldr	r0, [pc, #48]	; (8011dd4 <prvInitialiseTaskLists+0x70>)
 8011da4:	f7fe fe4d 	bl	8010a42 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011da8:	480b      	ldr	r0, [pc, #44]	; (8011dd8 <prvInitialiseTaskLists+0x74>)
 8011daa:	f7fe fe4a 	bl	8010a42 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011dae:	4b0b      	ldr	r3, [pc, #44]	; (8011ddc <prvInitialiseTaskLists+0x78>)
 8011db0:	4a05      	ldr	r2, [pc, #20]	; (8011dc8 <prvInitialiseTaskLists+0x64>)
 8011db2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011db4:	4b0a      	ldr	r3, [pc, #40]	; (8011de0 <prvInitialiseTaskLists+0x7c>)
 8011db6:	4a05      	ldr	r2, [pc, #20]	; (8011dcc <prvInitialiseTaskLists+0x68>)
 8011db8:	601a      	str	r2, [r3, #0]
}
 8011dba:	bf00      	nop
 8011dbc:	3708      	adds	r7, #8
 8011dbe:	46bd      	mov	sp, r7
 8011dc0:	bd80      	pop	{r7, pc}
 8011dc2:	bf00      	nop
 8011dc4:	20000af4 	.word	0x20000af4
 8011dc8:	20000b80 	.word	0x20000b80
 8011dcc:	20000b94 	.word	0x20000b94
 8011dd0:	20000bb0 	.word	0x20000bb0
 8011dd4:	20000bc4 	.word	0x20000bc4
 8011dd8:	20000bdc 	.word	0x20000bdc
 8011ddc:	20000ba8 	.word	0x20000ba8
 8011de0:	20000bac 	.word	0x20000bac

08011de4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011de4:	b580      	push	{r7, lr}
 8011de6:	b082      	sub	sp, #8
 8011de8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011dea:	e019      	b.n	8011e20 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011dec:	f000 fbb2 	bl	8012554 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011df0:	4b10      	ldr	r3, [pc, #64]	; (8011e34 <prvCheckTasksWaitingTermination+0x50>)
 8011df2:	68db      	ldr	r3, [r3, #12]
 8011df4:	68db      	ldr	r3, [r3, #12]
 8011df6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	3304      	adds	r3, #4
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	f7fe feaa 	bl	8010b56 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011e02:	4b0d      	ldr	r3, [pc, #52]	; (8011e38 <prvCheckTasksWaitingTermination+0x54>)
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	3b01      	subs	r3, #1
 8011e08:	4a0b      	ldr	r2, [pc, #44]	; (8011e38 <prvCheckTasksWaitingTermination+0x54>)
 8011e0a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011e0c:	4b0b      	ldr	r3, [pc, #44]	; (8011e3c <prvCheckTasksWaitingTermination+0x58>)
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	3b01      	subs	r3, #1
 8011e12:	4a0a      	ldr	r2, [pc, #40]	; (8011e3c <prvCheckTasksWaitingTermination+0x58>)
 8011e14:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011e16:	f000 fbcd 	bl	80125b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011e1a:	6878      	ldr	r0, [r7, #4]
 8011e1c:	f000 f810 	bl	8011e40 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011e20:	4b06      	ldr	r3, [pc, #24]	; (8011e3c <prvCheckTasksWaitingTermination+0x58>)
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d1e1      	bne.n	8011dec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011e28:	bf00      	nop
 8011e2a:	bf00      	nop
 8011e2c:	3708      	adds	r7, #8
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	bd80      	pop	{r7, pc}
 8011e32:	bf00      	nop
 8011e34:	20000bc4 	.word	0x20000bc4
 8011e38:	20000bf0 	.word	0x20000bf0
 8011e3c:	20000bd8 	.word	0x20000bd8

08011e40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011e40:	b580      	push	{r7, lr}
 8011e42:	b082      	sub	sp, #8
 8011e44:	af00      	add	r7, sp, #0
 8011e46:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	334c      	adds	r3, #76	; 0x4c
 8011e4c:	4618      	mov	r0, r3
 8011e4e:	f001 fb99 	bl	8013584 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e56:	4618      	mov	r0, r3
 8011e58:	f000 fd6a 	bl	8012930 <vPortFree>
			vPortFree( pxTCB );
 8011e5c:	6878      	ldr	r0, [r7, #4]
 8011e5e:	f000 fd67 	bl	8012930 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011e62:	bf00      	nop
 8011e64:	3708      	adds	r7, #8
 8011e66:	46bd      	mov	sp, r7
 8011e68:	bd80      	pop	{r7, pc}
	...

08011e6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011e6c:	b480      	push	{r7}
 8011e6e:	b083      	sub	sp, #12
 8011e70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011e72:	4b0c      	ldr	r3, [pc, #48]	; (8011ea4 <prvResetNextTaskUnblockTime+0x38>)
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d104      	bne.n	8011e86 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011e7c:	4b0a      	ldr	r3, [pc, #40]	; (8011ea8 <prvResetNextTaskUnblockTime+0x3c>)
 8011e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8011e82:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011e84:	e008      	b.n	8011e98 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011e86:	4b07      	ldr	r3, [pc, #28]	; (8011ea4 <prvResetNextTaskUnblockTime+0x38>)
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	68db      	ldr	r3, [r3, #12]
 8011e8c:	68db      	ldr	r3, [r3, #12]
 8011e8e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	685b      	ldr	r3, [r3, #4]
 8011e94:	4a04      	ldr	r2, [pc, #16]	; (8011ea8 <prvResetNextTaskUnblockTime+0x3c>)
 8011e96:	6013      	str	r3, [r2, #0]
}
 8011e98:	bf00      	nop
 8011e9a:	370c      	adds	r7, #12
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea2:	4770      	bx	lr
 8011ea4:	20000ba8 	.word	0x20000ba8
 8011ea8:	20000c10 	.word	0x20000c10

08011eac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011eac:	b480      	push	{r7}
 8011eae:	b083      	sub	sp, #12
 8011eb0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011eb2:	4b0b      	ldr	r3, [pc, #44]	; (8011ee0 <xTaskGetSchedulerState+0x34>)
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d102      	bne.n	8011ec0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011eba:	2301      	movs	r3, #1
 8011ebc:	607b      	str	r3, [r7, #4]
 8011ebe:	e008      	b.n	8011ed2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011ec0:	4b08      	ldr	r3, [pc, #32]	; (8011ee4 <xTaskGetSchedulerState+0x38>)
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d102      	bne.n	8011ece <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011ec8:	2302      	movs	r3, #2
 8011eca:	607b      	str	r3, [r7, #4]
 8011ecc:	e001      	b.n	8011ed2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011ece:	2300      	movs	r3, #0
 8011ed0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011ed2:	687b      	ldr	r3, [r7, #4]
	}
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	370c      	adds	r7, #12
 8011ed8:	46bd      	mov	sp, r7
 8011eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ede:	4770      	bx	lr
 8011ee0:	20000bfc 	.word	0x20000bfc
 8011ee4:	20000c18 	.word	0x20000c18

08011ee8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011ee8:	b580      	push	{r7, lr}
 8011eea:	b084      	sub	sp, #16
 8011eec:	af00      	add	r7, sp, #0
 8011eee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011ef4:	2300      	movs	r3, #0
 8011ef6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d05e      	beq.n	8011fbc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011efe:	68bb      	ldr	r3, [r7, #8]
 8011f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f02:	4b31      	ldr	r3, [pc, #196]	; (8011fc8 <xTaskPriorityInherit+0xe0>)
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f08:	429a      	cmp	r2, r3
 8011f0a:	d24e      	bcs.n	8011faa <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011f0c:	68bb      	ldr	r3, [r7, #8]
 8011f0e:	699b      	ldr	r3, [r3, #24]
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	db06      	blt.n	8011f22 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011f14:	4b2c      	ldr	r3, [pc, #176]	; (8011fc8 <xTaskPriorityInherit+0xe0>)
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f1a:	f1c3 0207 	rsb	r2, r3, #7
 8011f1e:	68bb      	ldr	r3, [r7, #8]
 8011f20:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011f22:	68bb      	ldr	r3, [r7, #8]
 8011f24:	6959      	ldr	r1, [r3, #20]
 8011f26:	68bb      	ldr	r3, [r7, #8]
 8011f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f2a:	4613      	mov	r3, r2
 8011f2c:	009b      	lsls	r3, r3, #2
 8011f2e:	4413      	add	r3, r2
 8011f30:	009b      	lsls	r3, r3, #2
 8011f32:	4a26      	ldr	r2, [pc, #152]	; (8011fcc <xTaskPriorityInherit+0xe4>)
 8011f34:	4413      	add	r3, r2
 8011f36:	4299      	cmp	r1, r3
 8011f38:	d12f      	bne.n	8011f9a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011f3a:	68bb      	ldr	r3, [r7, #8]
 8011f3c:	3304      	adds	r3, #4
 8011f3e:	4618      	mov	r0, r3
 8011f40:	f7fe fe09 	bl	8010b56 <uxListRemove>
 8011f44:	4603      	mov	r3, r0
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d10a      	bne.n	8011f60 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8011f4a:	68bb      	ldr	r3, [r7, #8]
 8011f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f4e:	2201      	movs	r2, #1
 8011f50:	fa02 f303 	lsl.w	r3, r2, r3
 8011f54:	43da      	mvns	r2, r3
 8011f56:	4b1e      	ldr	r3, [pc, #120]	; (8011fd0 <xTaskPriorityInherit+0xe8>)
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	4013      	ands	r3, r2
 8011f5c:	4a1c      	ldr	r2, [pc, #112]	; (8011fd0 <xTaskPriorityInherit+0xe8>)
 8011f5e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011f60:	4b19      	ldr	r3, [pc, #100]	; (8011fc8 <xTaskPriorityInherit+0xe0>)
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f66:	68bb      	ldr	r3, [r7, #8]
 8011f68:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011f6a:	68bb      	ldr	r3, [r7, #8]
 8011f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f6e:	2201      	movs	r2, #1
 8011f70:	409a      	lsls	r2, r3
 8011f72:	4b17      	ldr	r3, [pc, #92]	; (8011fd0 <xTaskPriorityInherit+0xe8>)
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	4313      	orrs	r3, r2
 8011f78:	4a15      	ldr	r2, [pc, #84]	; (8011fd0 <xTaskPriorityInherit+0xe8>)
 8011f7a:	6013      	str	r3, [r2, #0]
 8011f7c:	68bb      	ldr	r3, [r7, #8]
 8011f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f80:	4613      	mov	r3, r2
 8011f82:	009b      	lsls	r3, r3, #2
 8011f84:	4413      	add	r3, r2
 8011f86:	009b      	lsls	r3, r3, #2
 8011f88:	4a10      	ldr	r2, [pc, #64]	; (8011fcc <xTaskPriorityInherit+0xe4>)
 8011f8a:	441a      	add	r2, r3
 8011f8c:	68bb      	ldr	r3, [r7, #8]
 8011f8e:	3304      	adds	r3, #4
 8011f90:	4619      	mov	r1, r3
 8011f92:	4610      	mov	r0, r2
 8011f94:	f7fe fd82 	bl	8010a9c <vListInsertEnd>
 8011f98:	e004      	b.n	8011fa4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011f9a:	4b0b      	ldr	r3, [pc, #44]	; (8011fc8 <xTaskPriorityInherit+0xe0>)
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011fa0:	68bb      	ldr	r3, [r7, #8]
 8011fa2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011fa4:	2301      	movs	r3, #1
 8011fa6:	60fb      	str	r3, [r7, #12]
 8011fa8:	e008      	b.n	8011fbc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011faa:	68bb      	ldr	r3, [r7, #8]
 8011fac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011fae:	4b06      	ldr	r3, [pc, #24]	; (8011fc8 <xTaskPriorityInherit+0xe0>)
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fb4:	429a      	cmp	r2, r3
 8011fb6:	d201      	bcs.n	8011fbc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011fb8:	2301      	movs	r3, #1
 8011fba:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011fbc:	68fb      	ldr	r3, [r7, #12]
	}
 8011fbe:	4618      	mov	r0, r3
 8011fc0:	3710      	adds	r7, #16
 8011fc2:	46bd      	mov	sp, r7
 8011fc4:	bd80      	pop	{r7, pc}
 8011fc6:	bf00      	nop
 8011fc8:	20000af0 	.word	0x20000af0
 8011fcc:	20000af4 	.word	0x20000af4
 8011fd0:	20000bf8 	.word	0x20000bf8

08011fd4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011fd4:	b580      	push	{r7, lr}
 8011fd6:	b086      	sub	sp, #24
 8011fd8:	af00      	add	r7, sp, #0
 8011fda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011fe0:	2300      	movs	r3, #0
 8011fe2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d06e      	beq.n	80120c8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011fea:	4b3a      	ldr	r3, [pc, #232]	; (80120d4 <xTaskPriorityDisinherit+0x100>)
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	693a      	ldr	r2, [r7, #16]
 8011ff0:	429a      	cmp	r2, r3
 8011ff2:	d00a      	beq.n	801200a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ff8:	f383 8811 	msr	BASEPRI, r3
 8011ffc:	f3bf 8f6f 	isb	sy
 8012000:	f3bf 8f4f 	dsb	sy
 8012004:	60fb      	str	r3, [r7, #12]
}
 8012006:	bf00      	nop
 8012008:	e7fe      	b.n	8012008 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801200a:	693b      	ldr	r3, [r7, #16]
 801200c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801200e:	2b00      	cmp	r3, #0
 8012010:	d10a      	bne.n	8012028 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8012012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012016:	f383 8811 	msr	BASEPRI, r3
 801201a:	f3bf 8f6f 	isb	sy
 801201e:	f3bf 8f4f 	dsb	sy
 8012022:	60bb      	str	r3, [r7, #8]
}
 8012024:	bf00      	nop
 8012026:	e7fe      	b.n	8012026 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8012028:	693b      	ldr	r3, [r7, #16]
 801202a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801202c:	1e5a      	subs	r2, r3, #1
 801202e:	693b      	ldr	r3, [r7, #16]
 8012030:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012032:	693b      	ldr	r3, [r7, #16]
 8012034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012036:	693b      	ldr	r3, [r7, #16]
 8012038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801203a:	429a      	cmp	r2, r3
 801203c:	d044      	beq.n	80120c8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801203e:	693b      	ldr	r3, [r7, #16]
 8012040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012042:	2b00      	cmp	r3, #0
 8012044:	d140      	bne.n	80120c8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012046:	693b      	ldr	r3, [r7, #16]
 8012048:	3304      	adds	r3, #4
 801204a:	4618      	mov	r0, r3
 801204c:	f7fe fd83 	bl	8010b56 <uxListRemove>
 8012050:	4603      	mov	r3, r0
 8012052:	2b00      	cmp	r3, #0
 8012054:	d115      	bne.n	8012082 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012056:	693b      	ldr	r3, [r7, #16]
 8012058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801205a:	491f      	ldr	r1, [pc, #124]	; (80120d8 <xTaskPriorityDisinherit+0x104>)
 801205c:	4613      	mov	r3, r2
 801205e:	009b      	lsls	r3, r3, #2
 8012060:	4413      	add	r3, r2
 8012062:	009b      	lsls	r3, r3, #2
 8012064:	440b      	add	r3, r1
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	2b00      	cmp	r3, #0
 801206a:	d10a      	bne.n	8012082 <xTaskPriorityDisinherit+0xae>
 801206c:	693b      	ldr	r3, [r7, #16]
 801206e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012070:	2201      	movs	r2, #1
 8012072:	fa02 f303 	lsl.w	r3, r2, r3
 8012076:	43da      	mvns	r2, r3
 8012078:	4b18      	ldr	r3, [pc, #96]	; (80120dc <xTaskPriorityDisinherit+0x108>)
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	4013      	ands	r3, r2
 801207e:	4a17      	ldr	r2, [pc, #92]	; (80120dc <xTaskPriorityDisinherit+0x108>)
 8012080:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012082:	693b      	ldr	r3, [r7, #16]
 8012084:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012086:	693b      	ldr	r3, [r7, #16]
 8012088:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801208a:	693b      	ldr	r3, [r7, #16]
 801208c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801208e:	f1c3 0207 	rsb	r2, r3, #7
 8012092:	693b      	ldr	r3, [r7, #16]
 8012094:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012096:	693b      	ldr	r3, [r7, #16]
 8012098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801209a:	2201      	movs	r2, #1
 801209c:	409a      	lsls	r2, r3
 801209e:	4b0f      	ldr	r3, [pc, #60]	; (80120dc <xTaskPriorityDisinherit+0x108>)
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	4313      	orrs	r3, r2
 80120a4:	4a0d      	ldr	r2, [pc, #52]	; (80120dc <xTaskPriorityDisinherit+0x108>)
 80120a6:	6013      	str	r3, [r2, #0]
 80120a8:	693b      	ldr	r3, [r7, #16]
 80120aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120ac:	4613      	mov	r3, r2
 80120ae:	009b      	lsls	r3, r3, #2
 80120b0:	4413      	add	r3, r2
 80120b2:	009b      	lsls	r3, r3, #2
 80120b4:	4a08      	ldr	r2, [pc, #32]	; (80120d8 <xTaskPriorityDisinherit+0x104>)
 80120b6:	441a      	add	r2, r3
 80120b8:	693b      	ldr	r3, [r7, #16]
 80120ba:	3304      	adds	r3, #4
 80120bc:	4619      	mov	r1, r3
 80120be:	4610      	mov	r0, r2
 80120c0:	f7fe fcec 	bl	8010a9c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80120c4:	2301      	movs	r3, #1
 80120c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80120c8:	697b      	ldr	r3, [r7, #20]
	}
 80120ca:	4618      	mov	r0, r3
 80120cc:	3718      	adds	r7, #24
 80120ce:	46bd      	mov	sp, r7
 80120d0:	bd80      	pop	{r7, pc}
 80120d2:	bf00      	nop
 80120d4:	20000af0 	.word	0x20000af0
 80120d8:	20000af4 	.word	0x20000af4
 80120dc:	20000bf8 	.word	0x20000bf8

080120e0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80120e0:	b580      	push	{r7, lr}
 80120e2:	b088      	sub	sp, #32
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	6078      	str	r0, [r7, #4]
 80120e8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80120ee:	2301      	movs	r3, #1
 80120f0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d077      	beq.n	80121e8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80120f8:	69bb      	ldr	r3, [r7, #24]
 80120fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d10a      	bne.n	8012116 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8012100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012104:	f383 8811 	msr	BASEPRI, r3
 8012108:	f3bf 8f6f 	isb	sy
 801210c:	f3bf 8f4f 	dsb	sy
 8012110:	60fb      	str	r3, [r7, #12]
}
 8012112:	bf00      	nop
 8012114:	e7fe      	b.n	8012114 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012116:	69bb      	ldr	r3, [r7, #24]
 8012118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801211a:	683a      	ldr	r2, [r7, #0]
 801211c:	429a      	cmp	r2, r3
 801211e:	d902      	bls.n	8012126 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012120:	683b      	ldr	r3, [r7, #0]
 8012122:	61fb      	str	r3, [r7, #28]
 8012124:	e002      	b.n	801212c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012126:	69bb      	ldr	r3, [r7, #24]
 8012128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801212a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801212c:	69bb      	ldr	r3, [r7, #24]
 801212e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012130:	69fa      	ldr	r2, [r7, #28]
 8012132:	429a      	cmp	r2, r3
 8012134:	d058      	beq.n	80121e8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012136:	69bb      	ldr	r3, [r7, #24]
 8012138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801213a:	697a      	ldr	r2, [r7, #20]
 801213c:	429a      	cmp	r2, r3
 801213e:	d153      	bne.n	80121e8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012140:	4b2b      	ldr	r3, [pc, #172]	; (80121f0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	69ba      	ldr	r2, [r7, #24]
 8012146:	429a      	cmp	r2, r3
 8012148:	d10a      	bne.n	8012160 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801214a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801214e:	f383 8811 	msr	BASEPRI, r3
 8012152:	f3bf 8f6f 	isb	sy
 8012156:	f3bf 8f4f 	dsb	sy
 801215a:	60bb      	str	r3, [r7, #8]
}
 801215c:	bf00      	nop
 801215e:	e7fe      	b.n	801215e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012160:	69bb      	ldr	r3, [r7, #24]
 8012162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012164:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012166:	69bb      	ldr	r3, [r7, #24]
 8012168:	69fa      	ldr	r2, [r7, #28]
 801216a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801216c:	69bb      	ldr	r3, [r7, #24]
 801216e:	699b      	ldr	r3, [r3, #24]
 8012170:	2b00      	cmp	r3, #0
 8012172:	db04      	blt.n	801217e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012174:	69fb      	ldr	r3, [r7, #28]
 8012176:	f1c3 0207 	rsb	r2, r3, #7
 801217a:	69bb      	ldr	r3, [r7, #24]
 801217c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801217e:	69bb      	ldr	r3, [r7, #24]
 8012180:	6959      	ldr	r1, [r3, #20]
 8012182:	693a      	ldr	r2, [r7, #16]
 8012184:	4613      	mov	r3, r2
 8012186:	009b      	lsls	r3, r3, #2
 8012188:	4413      	add	r3, r2
 801218a:	009b      	lsls	r3, r3, #2
 801218c:	4a19      	ldr	r2, [pc, #100]	; (80121f4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801218e:	4413      	add	r3, r2
 8012190:	4299      	cmp	r1, r3
 8012192:	d129      	bne.n	80121e8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012194:	69bb      	ldr	r3, [r7, #24]
 8012196:	3304      	adds	r3, #4
 8012198:	4618      	mov	r0, r3
 801219a:	f7fe fcdc 	bl	8010b56 <uxListRemove>
 801219e:	4603      	mov	r3, r0
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d10a      	bne.n	80121ba <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80121a4:	69bb      	ldr	r3, [r7, #24]
 80121a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121a8:	2201      	movs	r2, #1
 80121aa:	fa02 f303 	lsl.w	r3, r2, r3
 80121ae:	43da      	mvns	r2, r3
 80121b0:	4b11      	ldr	r3, [pc, #68]	; (80121f8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	4013      	ands	r3, r2
 80121b6:	4a10      	ldr	r2, [pc, #64]	; (80121f8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80121b8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80121ba:	69bb      	ldr	r3, [r7, #24]
 80121bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121be:	2201      	movs	r2, #1
 80121c0:	409a      	lsls	r2, r3
 80121c2:	4b0d      	ldr	r3, [pc, #52]	; (80121f8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	4313      	orrs	r3, r2
 80121c8:	4a0b      	ldr	r2, [pc, #44]	; (80121f8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80121ca:	6013      	str	r3, [r2, #0]
 80121cc:	69bb      	ldr	r3, [r7, #24]
 80121ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121d0:	4613      	mov	r3, r2
 80121d2:	009b      	lsls	r3, r3, #2
 80121d4:	4413      	add	r3, r2
 80121d6:	009b      	lsls	r3, r3, #2
 80121d8:	4a06      	ldr	r2, [pc, #24]	; (80121f4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80121da:	441a      	add	r2, r3
 80121dc:	69bb      	ldr	r3, [r7, #24]
 80121de:	3304      	adds	r3, #4
 80121e0:	4619      	mov	r1, r3
 80121e2:	4610      	mov	r0, r2
 80121e4:	f7fe fc5a 	bl	8010a9c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80121e8:	bf00      	nop
 80121ea:	3720      	adds	r7, #32
 80121ec:	46bd      	mov	sp, r7
 80121ee:	bd80      	pop	{r7, pc}
 80121f0:	20000af0 	.word	0x20000af0
 80121f4:	20000af4 	.word	0x20000af4
 80121f8:	20000bf8 	.word	0x20000bf8

080121fc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80121fc:	b480      	push	{r7}
 80121fe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012200:	4b07      	ldr	r3, [pc, #28]	; (8012220 <pvTaskIncrementMutexHeldCount+0x24>)
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d004      	beq.n	8012212 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012208:	4b05      	ldr	r3, [pc, #20]	; (8012220 <pvTaskIncrementMutexHeldCount+0x24>)
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801220e:	3201      	adds	r2, #1
 8012210:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8012212:	4b03      	ldr	r3, [pc, #12]	; (8012220 <pvTaskIncrementMutexHeldCount+0x24>)
 8012214:	681b      	ldr	r3, [r3, #0]
	}
 8012216:	4618      	mov	r0, r3
 8012218:	46bd      	mov	sp, r7
 801221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221e:	4770      	bx	lr
 8012220:	20000af0 	.word	0x20000af0

08012224 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012224:	b580      	push	{r7, lr}
 8012226:	b084      	sub	sp, #16
 8012228:	af00      	add	r7, sp, #0
 801222a:	6078      	str	r0, [r7, #4]
 801222c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801222e:	4b2b      	ldr	r3, [pc, #172]	; (80122dc <prvAddCurrentTaskToDelayedList+0xb8>)
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8012234:	4b2a      	ldr	r3, [pc, #168]	; (80122e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	2200      	movs	r2, #0
 801223a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801223e:	4b28      	ldr	r3, [pc, #160]	; (80122e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	3304      	adds	r3, #4
 8012244:	4618      	mov	r0, r3
 8012246:	f7fe fc86 	bl	8010b56 <uxListRemove>
 801224a:	4603      	mov	r3, r0
 801224c:	2b00      	cmp	r3, #0
 801224e:	d10b      	bne.n	8012268 <prvAddCurrentTaskToDelayedList+0x44>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8012250:	4b23      	ldr	r3, [pc, #140]	; (80122e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012256:	2201      	movs	r2, #1
 8012258:	fa02 f303 	lsl.w	r3, r2, r3
 801225c:	43da      	mvns	r2, r3
 801225e:	4b21      	ldr	r3, [pc, #132]	; (80122e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	4013      	ands	r3, r2
 8012264:	4a1f      	ldr	r2, [pc, #124]	; (80122e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8012266:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801226e:	d10a      	bne.n	8012286 <prvAddCurrentTaskToDelayedList+0x62>
 8012270:	683b      	ldr	r3, [r7, #0]
 8012272:	2b00      	cmp	r3, #0
 8012274:	d007      	beq.n	8012286 <prvAddCurrentTaskToDelayedList+0x62>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012276:	4b1a      	ldr	r3, [pc, #104]	; (80122e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	3304      	adds	r3, #4
 801227c:	4619      	mov	r1, r3
 801227e:	481a      	ldr	r0, [pc, #104]	; (80122e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8012280:	f7fe fc0c 	bl	8010a9c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012284:	e026      	b.n	80122d4 <prvAddCurrentTaskToDelayedList+0xb0>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012286:	68fa      	ldr	r2, [r7, #12]
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	4413      	add	r3, r2
 801228c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801228e:	4b14      	ldr	r3, [pc, #80]	; (80122e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	68ba      	ldr	r2, [r7, #8]
 8012294:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012296:	68ba      	ldr	r2, [r7, #8]
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	429a      	cmp	r2, r3
 801229c:	d209      	bcs.n	80122b2 <prvAddCurrentTaskToDelayedList+0x8e>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801229e:	4b13      	ldr	r3, [pc, #76]	; (80122ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80122a0:	681a      	ldr	r2, [r3, #0]
 80122a2:	4b0f      	ldr	r3, [pc, #60]	; (80122e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	3304      	adds	r3, #4
 80122a8:	4619      	mov	r1, r3
 80122aa:	4610      	mov	r0, r2
 80122ac:	f7fe fc1a 	bl	8010ae4 <vListInsert>
}
 80122b0:	e010      	b.n	80122d4 <prvAddCurrentTaskToDelayedList+0xb0>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80122b2:	4b0f      	ldr	r3, [pc, #60]	; (80122f0 <prvAddCurrentTaskToDelayedList+0xcc>)
 80122b4:	681a      	ldr	r2, [r3, #0]
 80122b6:	4b0a      	ldr	r3, [pc, #40]	; (80122e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	3304      	adds	r3, #4
 80122bc:	4619      	mov	r1, r3
 80122be:	4610      	mov	r0, r2
 80122c0:	f7fe fc10 	bl	8010ae4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80122c4:	4b0b      	ldr	r3, [pc, #44]	; (80122f4 <prvAddCurrentTaskToDelayedList+0xd0>)
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	68ba      	ldr	r2, [r7, #8]
 80122ca:	429a      	cmp	r2, r3
 80122cc:	d202      	bcs.n	80122d4 <prvAddCurrentTaskToDelayedList+0xb0>
					xNextTaskUnblockTime = xTimeToWake;
 80122ce:	4a09      	ldr	r2, [pc, #36]	; (80122f4 <prvAddCurrentTaskToDelayedList+0xd0>)
 80122d0:	68bb      	ldr	r3, [r7, #8]
 80122d2:	6013      	str	r3, [r2, #0]
}
 80122d4:	bf00      	nop
 80122d6:	3710      	adds	r7, #16
 80122d8:	46bd      	mov	sp, r7
 80122da:	bd80      	pop	{r7, pc}
 80122dc:	20000bf4 	.word	0x20000bf4
 80122e0:	20000af0 	.word	0x20000af0
 80122e4:	20000bf8 	.word	0x20000bf8
 80122e8:	20000bdc 	.word	0x20000bdc
 80122ec:	20000bac 	.word	0x20000bac
 80122f0:	20000ba8 	.word	0x20000ba8
 80122f4:	20000c10 	.word	0x20000c10

080122f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80122f8:	b480      	push	{r7}
 80122fa:	b085      	sub	sp, #20
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	60f8      	str	r0, [r7, #12]
 8012300:	60b9      	str	r1, [r7, #8]
 8012302:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	3b04      	subs	r3, #4
 8012308:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012310:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	3b04      	subs	r3, #4
 8012316:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012318:	68bb      	ldr	r3, [r7, #8]
 801231a:	f023 0201 	bic.w	r2, r3, #1
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	3b04      	subs	r3, #4
 8012326:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012328:	4a0c      	ldr	r2, [pc, #48]	; (801235c <pxPortInitialiseStack+0x64>)
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	3b14      	subs	r3, #20
 8012332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012334:	687a      	ldr	r2, [r7, #4]
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	3b04      	subs	r3, #4
 801233e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	f06f 0202 	mvn.w	r2, #2
 8012346:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	3b20      	subs	r3, #32
 801234c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801234e:	68fb      	ldr	r3, [r7, #12]
}
 8012350:	4618      	mov	r0, r3
 8012352:	3714      	adds	r7, #20
 8012354:	46bd      	mov	sp, r7
 8012356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801235a:	4770      	bx	lr
 801235c:	08012361 	.word	0x08012361

08012360 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012360:	b480      	push	{r7}
 8012362:	b085      	sub	sp, #20
 8012364:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012366:	2300      	movs	r3, #0
 8012368:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801236a:	4b12      	ldr	r3, [pc, #72]	; (80123b4 <prvTaskExitError+0x54>)
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012372:	d00a      	beq.n	801238a <prvTaskExitError+0x2a>
	__asm volatile
 8012374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012378:	f383 8811 	msr	BASEPRI, r3
 801237c:	f3bf 8f6f 	isb	sy
 8012380:	f3bf 8f4f 	dsb	sy
 8012384:	60fb      	str	r3, [r7, #12]
}
 8012386:	bf00      	nop
 8012388:	e7fe      	b.n	8012388 <prvTaskExitError+0x28>
	__asm volatile
 801238a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801238e:	f383 8811 	msr	BASEPRI, r3
 8012392:	f3bf 8f6f 	isb	sy
 8012396:	f3bf 8f4f 	dsb	sy
 801239a:	60bb      	str	r3, [r7, #8]
}
 801239c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801239e:	bf00      	nop
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d0fc      	beq.n	80123a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80123a6:	bf00      	nop
 80123a8:	bf00      	nop
 80123aa:	3714      	adds	r7, #20
 80123ac:	46bd      	mov	sp, r7
 80123ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b2:	4770      	bx	lr
 80123b4:	20000120 	.word	0x20000120
	...

080123c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80123c0:	4b07      	ldr	r3, [pc, #28]	; (80123e0 <pxCurrentTCBConst2>)
 80123c2:	6819      	ldr	r1, [r3, #0]
 80123c4:	6808      	ldr	r0, [r1, #0]
 80123c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123ca:	f380 8809 	msr	PSP, r0
 80123ce:	f3bf 8f6f 	isb	sy
 80123d2:	f04f 0000 	mov.w	r0, #0
 80123d6:	f380 8811 	msr	BASEPRI, r0
 80123da:	4770      	bx	lr
 80123dc:	f3af 8000 	nop.w

080123e0 <pxCurrentTCBConst2>:
 80123e0:	20000af0 	.word	0x20000af0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80123e4:	bf00      	nop
 80123e6:	bf00      	nop

080123e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80123e8:	4808      	ldr	r0, [pc, #32]	; (801240c <prvPortStartFirstTask+0x24>)
 80123ea:	6800      	ldr	r0, [r0, #0]
 80123ec:	6800      	ldr	r0, [r0, #0]
 80123ee:	f380 8808 	msr	MSP, r0
 80123f2:	f04f 0000 	mov.w	r0, #0
 80123f6:	f380 8814 	msr	CONTROL, r0
 80123fa:	b662      	cpsie	i
 80123fc:	b661      	cpsie	f
 80123fe:	f3bf 8f4f 	dsb	sy
 8012402:	f3bf 8f6f 	isb	sy
 8012406:	df00      	svc	0
 8012408:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801240a:	bf00      	nop
 801240c:	e000ed08 	.word	0xe000ed08

08012410 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012410:	b580      	push	{r7, lr}
 8012412:	b086      	sub	sp, #24
 8012414:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012416:	4b46      	ldr	r3, [pc, #280]	; (8012530 <xPortStartScheduler+0x120>)
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	4a46      	ldr	r2, [pc, #280]	; (8012534 <xPortStartScheduler+0x124>)
 801241c:	4293      	cmp	r3, r2
 801241e:	d10a      	bne.n	8012436 <xPortStartScheduler+0x26>
	__asm volatile
 8012420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012424:	f383 8811 	msr	BASEPRI, r3
 8012428:	f3bf 8f6f 	isb	sy
 801242c:	f3bf 8f4f 	dsb	sy
 8012430:	613b      	str	r3, [r7, #16]
}
 8012432:	bf00      	nop
 8012434:	e7fe      	b.n	8012434 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012436:	4b3e      	ldr	r3, [pc, #248]	; (8012530 <xPortStartScheduler+0x120>)
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	4a3f      	ldr	r2, [pc, #252]	; (8012538 <xPortStartScheduler+0x128>)
 801243c:	4293      	cmp	r3, r2
 801243e:	d10a      	bne.n	8012456 <xPortStartScheduler+0x46>
	__asm volatile
 8012440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012444:	f383 8811 	msr	BASEPRI, r3
 8012448:	f3bf 8f6f 	isb	sy
 801244c:	f3bf 8f4f 	dsb	sy
 8012450:	60fb      	str	r3, [r7, #12]
}
 8012452:	bf00      	nop
 8012454:	e7fe      	b.n	8012454 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012456:	4b39      	ldr	r3, [pc, #228]	; (801253c <xPortStartScheduler+0x12c>)
 8012458:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801245a:	697b      	ldr	r3, [r7, #20]
 801245c:	781b      	ldrb	r3, [r3, #0]
 801245e:	b2db      	uxtb	r3, r3
 8012460:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012462:	697b      	ldr	r3, [r7, #20]
 8012464:	22ff      	movs	r2, #255	; 0xff
 8012466:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012468:	697b      	ldr	r3, [r7, #20]
 801246a:	781b      	ldrb	r3, [r3, #0]
 801246c:	b2db      	uxtb	r3, r3
 801246e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012470:	78fb      	ldrb	r3, [r7, #3]
 8012472:	b2db      	uxtb	r3, r3
 8012474:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012478:	b2da      	uxtb	r2, r3
 801247a:	4b31      	ldr	r3, [pc, #196]	; (8012540 <xPortStartScheduler+0x130>)
 801247c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801247e:	4b31      	ldr	r3, [pc, #196]	; (8012544 <xPortStartScheduler+0x134>)
 8012480:	2207      	movs	r2, #7
 8012482:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012484:	e009      	b.n	801249a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8012486:	4b2f      	ldr	r3, [pc, #188]	; (8012544 <xPortStartScheduler+0x134>)
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	3b01      	subs	r3, #1
 801248c:	4a2d      	ldr	r2, [pc, #180]	; (8012544 <xPortStartScheduler+0x134>)
 801248e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012490:	78fb      	ldrb	r3, [r7, #3]
 8012492:	b2db      	uxtb	r3, r3
 8012494:	005b      	lsls	r3, r3, #1
 8012496:	b2db      	uxtb	r3, r3
 8012498:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801249a:	78fb      	ldrb	r3, [r7, #3]
 801249c:	b2db      	uxtb	r3, r3
 801249e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80124a2:	2b80      	cmp	r3, #128	; 0x80
 80124a4:	d0ef      	beq.n	8012486 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80124a6:	4b27      	ldr	r3, [pc, #156]	; (8012544 <xPortStartScheduler+0x134>)
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	f1c3 0307 	rsb	r3, r3, #7
 80124ae:	2b04      	cmp	r3, #4
 80124b0:	d00a      	beq.n	80124c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80124b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124b6:	f383 8811 	msr	BASEPRI, r3
 80124ba:	f3bf 8f6f 	isb	sy
 80124be:	f3bf 8f4f 	dsb	sy
 80124c2:	60bb      	str	r3, [r7, #8]
}
 80124c4:	bf00      	nop
 80124c6:	e7fe      	b.n	80124c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80124c8:	4b1e      	ldr	r3, [pc, #120]	; (8012544 <xPortStartScheduler+0x134>)
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	021b      	lsls	r3, r3, #8
 80124ce:	4a1d      	ldr	r2, [pc, #116]	; (8012544 <xPortStartScheduler+0x134>)
 80124d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80124d2:	4b1c      	ldr	r3, [pc, #112]	; (8012544 <xPortStartScheduler+0x134>)
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80124da:	4a1a      	ldr	r2, [pc, #104]	; (8012544 <xPortStartScheduler+0x134>)
 80124dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	b2da      	uxtb	r2, r3
 80124e2:	697b      	ldr	r3, [r7, #20]
 80124e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80124e6:	4b18      	ldr	r3, [pc, #96]	; (8012548 <xPortStartScheduler+0x138>)
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	4a17      	ldr	r2, [pc, #92]	; (8012548 <xPortStartScheduler+0x138>)
 80124ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80124f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80124f2:	4b15      	ldr	r3, [pc, #84]	; (8012548 <xPortStartScheduler+0x138>)
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	4a14      	ldr	r2, [pc, #80]	; (8012548 <xPortStartScheduler+0x138>)
 80124f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80124fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80124fe:	f000 f8dd 	bl	80126bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012502:	4b12      	ldr	r3, [pc, #72]	; (801254c <xPortStartScheduler+0x13c>)
 8012504:	2200      	movs	r2, #0
 8012506:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012508:	f000 f8fc 	bl	8012704 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801250c:	4b10      	ldr	r3, [pc, #64]	; (8012550 <xPortStartScheduler+0x140>)
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	4a0f      	ldr	r2, [pc, #60]	; (8012550 <xPortStartScheduler+0x140>)
 8012512:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012516:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012518:	f7ff ff66 	bl	80123e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801251c:	f7ff fa94 	bl	8011a48 <vTaskSwitchContext>
	prvTaskExitError();
 8012520:	f7ff ff1e 	bl	8012360 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012524:	2300      	movs	r3, #0
}
 8012526:	4618      	mov	r0, r3
 8012528:	3718      	adds	r7, #24
 801252a:	46bd      	mov	sp, r7
 801252c:	bd80      	pop	{r7, pc}
 801252e:	bf00      	nop
 8012530:	e000ed00 	.word	0xe000ed00
 8012534:	410fc271 	.word	0x410fc271
 8012538:	410fc270 	.word	0x410fc270
 801253c:	e000e400 	.word	0xe000e400
 8012540:	20000c1c 	.word	0x20000c1c
 8012544:	20000c20 	.word	0x20000c20
 8012548:	e000ed20 	.word	0xe000ed20
 801254c:	20000120 	.word	0x20000120
 8012550:	e000ef34 	.word	0xe000ef34

08012554 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012554:	b480      	push	{r7}
 8012556:	b083      	sub	sp, #12
 8012558:	af00      	add	r7, sp, #0
	__asm volatile
 801255a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801255e:	f383 8811 	msr	BASEPRI, r3
 8012562:	f3bf 8f6f 	isb	sy
 8012566:	f3bf 8f4f 	dsb	sy
 801256a:	607b      	str	r3, [r7, #4]
}
 801256c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801256e:	4b0f      	ldr	r3, [pc, #60]	; (80125ac <vPortEnterCritical+0x58>)
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	3301      	adds	r3, #1
 8012574:	4a0d      	ldr	r2, [pc, #52]	; (80125ac <vPortEnterCritical+0x58>)
 8012576:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012578:	4b0c      	ldr	r3, [pc, #48]	; (80125ac <vPortEnterCritical+0x58>)
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	2b01      	cmp	r3, #1
 801257e:	d10f      	bne.n	80125a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012580:	4b0b      	ldr	r3, [pc, #44]	; (80125b0 <vPortEnterCritical+0x5c>)
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	b2db      	uxtb	r3, r3
 8012586:	2b00      	cmp	r3, #0
 8012588:	d00a      	beq.n	80125a0 <vPortEnterCritical+0x4c>
	__asm volatile
 801258a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801258e:	f383 8811 	msr	BASEPRI, r3
 8012592:	f3bf 8f6f 	isb	sy
 8012596:	f3bf 8f4f 	dsb	sy
 801259a:	603b      	str	r3, [r7, #0]
}
 801259c:	bf00      	nop
 801259e:	e7fe      	b.n	801259e <vPortEnterCritical+0x4a>
	}
}
 80125a0:	bf00      	nop
 80125a2:	370c      	adds	r7, #12
 80125a4:	46bd      	mov	sp, r7
 80125a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125aa:	4770      	bx	lr
 80125ac:	20000120 	.word	0x20000120
 80125b0:	e000ed04 	.word	0xe000ed04

080125b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80125b4:	b480      	push	{r7}
 80125b6:	b083      	sub	sp, #12
 80125b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80125ba:	4b12      	ldr	r3, [pc, #72]	; (8012604 <vPortExitCritical+0x50>)
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d10a      	bne.n	80125d8 <vPortExitCritical+0x24>
	__asm volatile
 80125c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125c6:	f383 8811 	msr	BASEPRI, r3
 80125ca:	f3bf 8f6f 	isb	sy
 80125ce:	f3bf 8f4f 	dsb	sy
 80125d2:	607b      	str	r3, [r7, #4]
}
 80125d4:	bf00      	nop
 80125d6:	e7fe      	b.n	80125d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80125d8:	4b0a      	ldr	r3, [pc, #40]	; (8012604 <vPortExitCritical+0x50>)
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	3b01      	subs	r3, #1
 80125de:	4a09      	ldr	r2, [pc, #36]	; (8012604 <vPortExitCritical+0x50>)
 80125e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80125e2:	4b08      	ldr	r3, [pc, #32]	; (8012604 <vPortExitCritical+0x50>)
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d105      	bne.n	80125f6 <vPortExitCritical+0x42>
 80125ea:	2300      	movs	r3, #0
 80125ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80125ee:	683b      	ldr	r3, [r7, #0]
 80125f0:	f383 8811 	msr	BASEPRI, r3
}
 80125f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80125f6:	bf00      	nop
 80125f8:	370c      	adds	r7, #12
 80125fa:	46bd      	mov	sp, r7
 80125fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012600:	4770      	bx	lr
 8012602:	bf00      	nop
 8012604:	20000120 	.word	0x20000120
	...

08012610 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012610:	f3ef 8009 	mrs	r0, PSP
 8012614:	f3bf 8f6f 	isb	sy
 8012618:	4b15      	ldr	r3, [pc, #84]	; (8012670 <pxCurrentTCBConst>)
 801261a:	681a      	ldr	r2, [r3, #0]
 801261c:	f01e 0f10 	tst.w	lr, #16
 8012620:	bf08      	it	eq
 8012622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801262a:	6010      	str	r0, [r2, #0]
 801262c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012630:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012634:	f380 8811 	msr	BASEPRI, r0
 8012638:	f3bf 8f4f 	dsb	sy
 801263c:	f3bf 8f6f 	isb	sy
 8012640:	f7ff fa02 	bl	8011a48 <vTaskSwitchContext>
 8012644:	f04f 0000 	mov.w	r0, #0
 8012648:	f380 8811 	msr	BASEPRI, r0
 801264c:	bc09      	pop	{r0, r3}
 801264e:	6819      	ldr	r1, [r3, #0]
 8012650:	6808      	ldr	r0, [r1, #0]
 8012652:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012656:	f01e 0f10 	tst.w	lr, #16
 801265a:	bf08      	it	eq
 801265c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012660:	f380 8809 	msr	PSP, r0
 8012664:	f3bf 8f6f 	isb	sy
 8012668:	4770      	bx	lr
 801266a:	bf00      	nop
 801266c:	f3af 8000 	nop.w

08012670 <pxCurrentTCBConst>:
 8012670:	20000af0 	.word	0x20000af0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012674:	bf00      	nop
 8012676:	bf00      	nop

08012678 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012678:	b580      	push	{r7, lr}
 801267a:	b082      	sub	sp, #8
 801267c:	af00      	add	r7, sp, #0
	__asm volatile
 801267e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012682:	f383 8811 	msr	BASEPRI, r3
 8012686:	f3bf 8f6f 	isb	sy
 801268a:	f3bf 8f4f 	dsb	sy
 801268e:	607b      	str	r3, [r7, #4]
}
 8012690:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012692:	f7ff f943 	bl	801191c <xTaskIncrementTick>
 8012696:	4603      	mov	r3, r0
 8012698:	2b00      	cmp	r3, #0
 801269a:	d003      	beq.n	80126a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801269c:	4b06      	ldr	r3, [pc, #24]	; (80126b8 <SysTick_Handler+0x40>)
 801269e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80126a2:	601a      	str	r2, [r3, #0]
 80126a4:	2300      	movs	r3, #0
 80126a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80126a8:	683b      	ldr	r3, [r7, #0]
 80126aa:	f383 8811 	msr	BASEPRI, r3
}
 80126ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80126b0:	bf00      	nop
 80126b2:	3708      	adds	r7, #8
 80126b4:	46bd      	mov	sp, r7
 80126b6:	bd80      	pop	{r7, pc}
 80126b8:	e000ed04 	.word	0xe000ed04

080126bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80126bc:	b480      	push	{r7}
 80126be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80126c0:	4b0b      	ldr	r3, [pc, #44]	; (80126f0 <vPortSetupTimerInterrupt+0x34>)
 80126c2:	2200      	movs	r2, #0
 80126c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80126c6:	4b0b      	ldr	r3, [pc, #44]	; (80126f4 <vPortSetupTimerInterrupt+0x38>)
 80126c8:	2200      	movs	r2, #0
 80126ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80126cc:	4b0a      	ldr	r3, [pc, #40]	; (80126f8 <vPortSetupTimerInterrupt+0x3c>)
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	4a0a      	ldr	r2, [pc, #40]	; (80126fc <vPortSetupTimerInterrupt+0x40>)
 80126d2:	fba2 2303 	umull	r2, r3, r2, r3
 80126d6:	099b      	lsrs	r3, r3, #6
 80126d8:	4a09      	ldr	r2, [pc, #36]	; (8012700 <vPortSetupTimerInterrupt+0x44>)
 80126da:	3b01      	subs	r3, #1
 80126dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80126de:	4b04      	ldr	r3, [pc, #16]	; (80126f0 <vPortSetupTimerInterrupt+0x34>)
 80126e0:	2207      	movs	r2, #7
 80126e2:	601a      	str	r2, [r3, #0]
}
 80126e4:	bf00      	nop
 80126e6:	46bd      	mov	sp, r7
 80126e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ec:	4770      	bx	lr
 80126ee:	bf00      	nop
 80126f0:	e000e010 	.word	0xe000e010
 80126f4:	e000e018 	.word	0xe000e018
 80126f8:	20000004 	.word	0x20000004
 80126fc:	10624dd3 	.word	0x10624dd3
 8012700:	e000e014 	.word	0xe000e014

08012704 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012704:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012714 <vPortEnableVFP+0x10>
 8012708:	6801      	ldr	r1, [r0, #0]
 801270a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801270e:	6001      	str	r1, [r0, #0]
 8012710:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012712:	bf00      	nop
 8012714:	e000ed88 	.word	0xe000ed88

08012718 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012718:	b480      	push	{r7}
 801271a:	b085      	sub	sp, #20
 801271c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801271e:	f3ef 8305 	mrs	r3, IPSR
 8012722:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	2b0f      	cmp	r3, #15
 8012728:	d914      	bls.n	8012754 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801272a:	4a17      	ldr	r2, [pc, #92]	; (8012788 <vPortValidateInterruptPriority+0x70>)
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	4413      	add	r3, r2
 8012730:	781b      	ldrb	r3, [r3, #0]
 8012732:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012734:	4b15      	ldr	r3, [pc, #84]	; (801278c <vPortValidateInterruptPriority+0x74>)
 8012736:	781b      	ldrb	r3, [r3, #0]
 8012738:	7afa      	ldrb	r2, [r7, #11]
 801273a:	429a      	cmp	r2, r3
 801273c:	d20a      	bcs.n	8012754 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801273e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012742:	f383 8811 	msr	BASEPRI, r3
 8012746:	f3bf 8f6f 	isb	sy
 801274a:	f3bf 8f4f 	dsb	sy
 801274e:	607b      	str	r3, [r7, #4]
}
 8012750:	bf00      	nop
 8012752:	e7fe      	b.n	8012752 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012754:	4b0e      	ldr	r3, [pc, #56]	; (8012790 <vPortValidateInterruptPriority+0x78>)
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801275c:	4b0d      	ldr	r3, [pc, #52]	; (8012794 <vPortValidateInterruptPriority+0x7c>)
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	429a      	cmp	r2, r3
 8012762:	d90a      	bls.n	801277a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012768:	f383 8811 	msr	BASEPRI, r3
 801276c:	f3bf 8f6f 	isb	sy
 8012770:	f3bf 8f4f 	dsb	sy
 8012774:	603b      	str	r3, [r7, #0]
}
 8012776:	bf00      	nop
 8012778:	e7fe      	b.n	8012778 <vPortValidateInterruptPriority+0x60>
	}
 801277a:	bf00      	nop
 801277c:	3714      	adds	r7, #20
 801277e:	46bd      	mov	sp, r7
 8012780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012784:	4770      	bx	lr
 8012786:	bf00      	nop
 8012788:	e000e3f0 	.word	0xe000e3f0
 801278c:	20000c1c 	.word	0x20000c1c
 8012790:	e000ed0c 	.word	0xe000ed0c
 8012794:	20000c20 	.word	0x20000c20

08012798 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012798:	b580      	push	{r7, lr}
 801279a:	b08a      	sub	sp, #40	; 0x28
 801279c:	af00      	add	r7, sp, #0
 801279e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80127a0:	2300      	movs	r3, #0
 80127a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80127a4:	f7ff f81e 	bl	80117e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80127a8:	4b5b      	ldr	r3, [pc, #364]	; (8012918 <pvPortMalloc+0x180>)
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d101      	bne.n	80127b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80127b0:	f000 f920 	bl	80129f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80127b4:	4b59      	ldr	r3, [pc, #356]	; (801291c <pvPortMalloc+0x184>)
 80127b6:	681a      	ldr	r2, [r3, #0]
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	4013      	ands	r3, r2
 80127bc:	2b00      	cmp	r3, #0
 80127be:	f040 8093 	bne.w	80128e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d01d      	beq.n	8012804 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80127c8:	2208      	movs	r2, #8
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	4413      	add	r3, r2
 80127ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	f003 0307 	and.w	r3, r3, #7
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d014      	beq.n	8012804 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	f023 0307 	bic.w	r3, r3, #7
 80127e0:	3308      	adds	r3, #8
 80127e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	f003 0307 	and.w	r3, r3, #7
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d00a      	beq.n	8012804 <pvPortMalloc+0x6c>
	__asm volatile
 80127ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127f2:	f383 8811 	msr	BASEPRI, r3
 80127f6:	f3bf 8f6f 	isb	sy
 80127fa:	f3bf 8f4f 	dsb	sy
 80127fe:	617b      	str	r3, [r7, #20]
}
 8012800:	bf00      	nop
 8012802:	e7fe      	b.n	8012802 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	2b00      	cmp	r3, #0
 8012808:	d06e      	beq.n	80128e8 <pvPortMalloc+0x150>
 801280a:	4b45      	ldr	r3, [pc, #276]	; (8012920 <pvPortMalloc+0x188>)
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	687a      	ldr	r2, [r7, #4]
 8012810:	429a      	cmp	r2, r3
 8012812:	d869      	bhi.n	80128e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012814:	4b43      	ldr	r3, [pc, #268]	; (8012924 <pvPortMalloc+0x18c>)
 8012816:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012818:	4b42      	ldr	r3, [pc, #264]	; (8012924 <pvPortMalloc+0x18c>)
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801281e:	e004      	b.n	801282a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8012820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012822:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801282c:	685b      	ldr	r3, [r3, #4]
 801282e:	687a      	ldr	r2, [r7, #4]
 8012830:	429a      	cmp	r2, r3
 8012832:	d903      	bls.n	801283c <pvPortMalloc+0xa4>
 8012834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	2b00      	cmp	r3, #0
 801283a:	d1f1      	bne.n	8012820 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801283c:	4b36      	ldr	r3, [pc, #216]	; (8012918 <pvPortMalloc+0x180>)
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012842:	429a      	cmp	r2, r3
 8012844:	d050      	beq.n	80128e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012846:	6a3b      	ldr	r3, [r7, #32]
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	2208      	movs	r2, #8
 801284c:	4413      	add	r3, r2
 801284e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012852:	681a      	ldr	r2, [r3, #0]
 8012854:	6a3b      	ldr	r3, [r7, #32]
 8012856:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801285a:	685a      	ldr	r2, [r3, #4]
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	1ad2      	subs	r2, r2, r3
 8012860:	2308      	movs	r3, #8
 8012862:	005b      	lsls	r3, r3, #1
 8012864:	429a      	cmp	r2, r3
 8012866:	d91f      	bls.n	80128a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	4413      	add	r3, r2
 801286e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012870:	69bb      	ldr	r3, [r7, #24]
 8012872:	f003 0307 	and.w	r3, r3, #7
 8012876:	2b00      	cmp	r3, #0
 8012878:	d00a      	beq.n	8012890 <pvPortMalloc+0xf8>
	__asm volatile
 801287a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801287e:	f383 8811 	msr	BASEPRI, r3
 8012882:	f3bf 8f6f 	isb	sy
 8012886:	f3bf 8f4f 	dsb	sy
 801288a:	613b      	str	r3, [r7, #16]
}
 801288c:	bf00      	nop
 801288e:	e7fe      	b.n	801288e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012892:	685a      	ldr	r2, [r3, #4]
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	1ad2      	subs	r2, r2, r3
 8012898:	69bb      	ldr	r3, [r7, #24]
 801289a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801289e:	687a      	ldr	r2, [r7, #4]
 80128a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80128a2:	69b8      	ldr	r0, [r7, #24]
 80128a4:	f000 f908 	bl	8012ab8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80128a8:	4b1d      	ldr	r3, [pc, #116]	; (8012920 <pvPortMalloc+0x188>)
 80128aa:	681a      	ldr	r2, [r3, #0]
 80128ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128ae:	685b      	ldr	r3, [r3, #4]
 80128b0:	1ad3      	subs	r3, r2, r3
 80128b2:	4a1b      	ldr	r2, [pc, #108]	; (8012920 <pvPortMalloc+0x188>)
 80128b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80128b6:	4b1a      	ldr	r3, [pc, #104]	; (8012920 <pvPortMalloc+0x188>)
 80128b8:	681a      	ldr	r2, [r3, #0]
 80128ba:	4b1b      	ldr	r3, [pc, #108]	; (8012928 <pvPortMalloc+0x190>)
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	429a      	cmp	r2, r3
 80128c0:	d203      	bcs.n	80128ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80128c2:	4b17      	ldr	r3, [pc, #92]	; (8012920 <pvPortMalloc+0x188>)
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	4a18      	ldr	r2, [pc, #96]	; (8012928 <pvPortMalloc+0x190>)
 80128c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80128ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128cc:	685a      	ldr	r2, [r3, #4]
 80128ce:	4b13      	ldr	r3, [pc, #76]	; (801291c <pvPortMalloc+0x184>)
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	431a      	orrs	r2, r3
 80128d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80128d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128da:	2200      	movs	r2, #0
 80128dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80128de:	4b13      	ldr	r3, [pc, #76]	; (801292c <pvPortMalloc+0x194>)
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	3301      	adds	r3, #1
 80128e4:	4a11      	ldr	r2, [pc, #68]	; (801292c <pvPortMalloc+0x194>)
 80128e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80128e8:	f7fe ff8a 	bl	8011800 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80128ec:	69fb      	ldr	r3, [r7, #28]
 80128ee:	f003 0307 	and.w	r3, r3, #7
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d00a      	beq.n	801290c <pvPortMalloc+0x174>
	__asm volatile
 80128f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128fa:	f383 8811 	msr	BASEPRI, r3
 80128fe:	f3bf 8f6f 	isb	sy
 8012902:	f3bf 8f4f 	dsb	sy
 8012906:	60fb      	str	r3, [r7, #12]
}
 8012908:	bf00      	nop
 801290a:	e7fe      	b.n	801290a <pvPortMalloc+0x172>
	return pvReturn;
 801290c:	69fb      	ldr	r3, [r7, #28]
}
 801290e:	4618      	mov	r0, r3
 8012910:	3728      	adds	r7, #40	; 0x28
 8012912:	46bd      	mov	sp, r7
 8012914:	bd80      	pop	{r7, pc}
 8012916:	bf00      	nop
 8012918:	20003c2c 	.word	0x20003c2c
 801291c:	20003c40 	.word	0x20003c40
 8012920:	20003c30 	.word	0x20003c30
 8012924:	20003c24 	.word	0x20003c24
 8012928:	20003c34 	.word	0x20003c34
 801292c:	20003c38 	.word	0x20003c38

08012930 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012930:	b580      	push	{r7, lr}
 8012932:	b086      	sub	sp, #24
 8012934:	af00      	add	r7, sp, #0
 8012936:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	2b00      	cmp	r3, #0
 8012940:	d04d      	beq.n	80129de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012942:	2308      	movs	r3, #8
 8012944:	425b      	negs	r3, r3
 8012946:	697a      	ldr	r2, [r7, #20]
 8012948:	4413      	add	r3, r2
 801294a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801294c:	697b      	ldr	r3, [r7, #20]
 801294e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012950:	693b      	ldr	r3, [r7, #16]
 8012952:	685a      	ldr	r2, [r3, #4]
 8012954:	4b24      	ldr	r3, [pc, #144]	; (80129e8 <vPortFree+0xb8>)
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	4013      	ands	r3, r2
 801295a:	2b00      	cmp	r3, #0
 801295c:	d10a      	bne.n	8012974 <vPortFree+0x44>
	__asm volatile
 801295e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012962:	f383 8811 	msr	BASEPRI, r3
 8012966:	f3bf 8f6f 	isb	sy
 801296a:	f3bf 8f4f 	dsb	sy
 801296e:	60fb      	str	r3, [r7, #12]
}
 8012970:	bf00      	nop
 8012972:	e7fe      	b.n	8012972 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012974:	693b      	ldr	r3, [r7, #16]
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	2b00      	cmp	r3, #0
 801297a:	d00a      	beq.n	8012992 <vPortFree+0x62>
	__asm volatile
 801297c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012980:	f383 8811 	msr	BASEPRI, r3
 8012984:	f3bf 8f6f 	isb	sy
 8012988:	f3bf 8f4f 	dsb	sy
 801298c:	60bb      	str	r3, [r7, #8]
}
 801298e:	bf00      	nop
 8012990:	e7fe      	b.n	8012990 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012992:	693b      	ldr	r3, [r7, #16]
 8012994:	685a      	ldr	r2, [r3, #4]
 8012996:	4b14      	ldr	r3, [pc, #80]	; (80129e8 <vPortFree+0xb8>)
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	4013      	ands	r3, r2
 801299c:	2b00      	cmp	r3, #0
 801299e:	d01e      	beq.n	80129de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80129a0:	693b      	ldr	r3, [r7, #16]
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d11a      	bne.n	80129de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80129a8:	693b      	ldr	r3, [r7, #16]
 80129aa:	685a      	ldr	r2, [r3, #4]
 80129ac:	4b0e      	ldr	r3, [pc, #56]	; (80129e8 <vPortFree+0xb8>)
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	43db      	mvns	r3, r3
 80129b2:	401a      	ands	r2, r3
 80129b4:	693b      	ldr	r3, [r7, #16]
 80129b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80129b8:	f7fe ff14 	bl	80117e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80129bc:	693b      	ldr	r3, [r7, #16]
 80129be:	685a      	ldr	r2, [r3, #4]
 80129c0:	4b0a      	ldr	r3, [pc, #40]	; (80129ec <vPortFree+0xbc>)
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	4413      	add	r3, r2
 80129c6:	4a09      	ldr	r2, [pc, #36]	; (80129ec <vPortFree+0xbc>)
 80129c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80129ca:	6938      	ldr	r0, [r7, #16]
 80129cc:	f000 f874 	bl	8012ab8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80129d0:	4b07      	ldr	r3, [pc, #28]	; (80129f0 <vPortFree+0xc0>)
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	3301      	adds	r3, #1
 80129d6:	4a06      	ldr	r2, [pc, #24]	; (80129f0 <vPortFree+0xc0>)
 80129d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80129da:	f7fe ff11 	bl	8011800 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80129de:	bf00      	nop
 80129e0:	3718      	adds	r7, #24
 80129e2:	46bd      	mov	sp, r7
 80129e4:	bd80      	pop	{r7, pc}
 80129e6:	bf00      	nop
 80129e8:	20003c40 	.word	0x20003c40
 80129ec:	20003c30 	.word	0x20003c30
 80129f0:	20003c3c 	.word	0x20003c3c

080129f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80129f4:	b480      	push	{r7}
 80129f6:	b085      	sub	sp, #20
 80129f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80129fa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80129fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012a00:	4b27      	ldr	r3, [pc, #156]	; (8012aa0 <prvHeapInit+0xac>)
 8012a02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012a04:	68fb      	ldr	r3, [r7, #12]
 8012a06:	f003 0307 	and.w	r3, r3, #7
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d00c      	beq.n	8012a28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	3307      	adds	r3, #7
 8012a12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	f023 0307 	bic.w	r3, r3, #7
 8012a1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012a1c:	68ba      	ldr	r2, [r7, #8]
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	1ad3      	subs	r3, r2, r3
 8012a22:	4a1f      	ldr	r2, [pc, #124]	; (8012aa0 <prvHeapInit+0xac>)
 8012a24:	4413      	add	r3, r2
 8012a26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012a2c:	4a1d      	ldr	r2, [pc, #116]	; (8012aa4 <prvHeapInit+0xb0>)
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012a32:	4b1c      	ldr	r3, [pc, #112]	; (8012aa4 <prvHeapInit+0xb0>)
 8012a34:	2200      	movs	r2, #0
 8012a36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	68ba      	ldr	r2, [r7, #8]
 8012a3c:	4413      	add	r3, r2
 8012a3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012a40:	2208      	movs	r2, #8
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	1a9b      	subs	r3, r3, r2
 8012a46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	f023 0307 	bic.w	r3, r3, #7
 8012a4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	4a15      	ldr	r2, [pc, #84]	; (8012aa8 <prvHeapInit+0xb4>)
 8012a54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012a56:	4b14      	ldr	r3, [pc, #80]	; (8012aa8 <prvHeapInit+0xb4>)
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	2200      	movs	r2, #0
 8012a5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012a5e:	4b12      	ldr	r3, [pc, #72]	; (8012aa8 <prvHeapInit+0xb4>)
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	2200      	movs	r2, #0
 8012a64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012a6a:	683b      	ldr	r3, [r7, #0]
 8012a6c:	68fa      	ldr	r2, [r7, #12]
 8012a6e:	1ad2      	subs	r2, r2, r3
 8012a70:	683b      	ldr	r3, [r7, #0]
 8012a72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012a74:	4b0c      	ldr	r3, [pc, #48]	; (8012aa8 <prvHeapInit+0xb4>)
 8012a76:	681a      	ldr	r2, [r3, #0]
 8012a78:	683b      	ldr	r3, [r7, #0]
 8012a7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012a7c:	683b      	ldr	r3, [r7, #0]
 8012a7e:	685b      	ldr	r3, [r3, #4]
 8012a80:	4a0a      	ldr	r2, [pc, #40]	; (8012aac <prvHeapInit+0xb8>)
 8012a82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012a84:	683b      	ldr	r3, [r7, #0]
 8012a86:	685b      	ldr	r3, [r3, #4]
 8012a88:	4a09      	ldr	r2, [pc, #36]	; (8012ab0 <prvHeapInit+0xbc>)
 8012a8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012a8c:	4b09      	ldr	r3, [pc, #36]	; (8012ab4 <prvHeapInit+0xc0>)
 8012a8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012a92:	601a      	str	r2, [r3, #0]
}
 8012a94:	bf00      	nop
 8012a96:	3714      	adds	r7, #20
 8012a98:	46bd      	mov	sp, r7
 8012a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a9e:	4770      	bx	lr
 8012aa0:	20000c24 	.word	0x20000c24
 8012aa4:	20003c24 	.word	0x20003c24
 8012aa8:	20003c2c 	.word	0x20003c2c
 8012aac:	20003c34 	.word	0x20003c34
 8012ab0:	20003c30 	.word	0x20003c30
 8012ab4:	20003c40 	.word	0x20003c40

08012ab8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012ab8:	b480      	push	{r7}
 8012aba:	b085      	sub	sp, #20
 8012abc:	af00      	add	r7, sp, #0
 8012abe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012ac0:	4b28      	ldr	r3, [pc, #160]	; (8012b64 <prvInsertBlockIntoFreeList+0xac>)
 8012ac2:	60fb      	str	r3, [r7, #12]
 8012ac4:	e002      	b.n	8012acc <prvInsertBlockIntoFreeList+0x14>
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	60fb      	str	r3, [r7, #12]
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	687a      	ldr	r2, [r7, #4]
 8012ad2:	429a      	cmp	r2, r3
 8012ad4:	d8f7      	bhi.n	8012ac6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	685b      	ldr	r3, [r3, #4]
 8012ade:	68ba      	ldr	r2, [r7, #8]
 8012ae0:	4413      	add	r3, r2
 8012ae2:	687a      	ldr	r2, [r7, #4]
 8012ae4:	429a      	cmp	r2, r3
 8012ae6:	d108      	bne.n	8012afa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	685a      	ldr	r2, [r3, #4]
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	685b      	ldr	r3, [r3, #4]
 8012af0:	441a      	add	r2, r3
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	685b      	ldr	r3, [r3, #4]
 8012b02:	68ba      	ldr	r2, [r7, #8]
 8012b04:	441a      	add	r2, r3
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	429a      	cmp	r2, r3
 8012b0c:	d118      	bne.n	8012b40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	681a      	ldr	r2, [r3, #0]
 8012b12:	4b15      	ldr	r3, [pc, #84]	; (8012b68 <prvInsertBlockIntoFreeList+0xb0>)
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	429a      	cmp	r2, r3
 8012b18:	d00d      	beq.n	8012b36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	685a      	ldr	r2, [r3, #4]
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	685b      	ldr	r3, [r3, #4]
 8012b24:	441a      	add	r2, r3
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	681a      	ldr	r2, [r3, #0]
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	601a      	str	r2, [r3, #0]
 8012b34:	e008      	b.n	8012b48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012b36:	4b0c      	ldr	r3, [pc, #48]	; (8012b68 <prvInsertBlockIntoFreeList+0xb0>)
 8012b38:	681a      	ldr	r2, [r3, #0]
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	601a      	str	r2, [r3, #0]
 8012b3e:	e003      	b.n	8012b48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	681a      	ldr	r2, [r3, #0]
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012b48:	68fa      	ldr	r2, [r7, #12]
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	429a      	cmp	r2, r3
 8012b4e:	d002      	beq.n	8012b56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	687a      	ldr	r2, [r7, #4]
 8012b54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012b56:	bf00      	nop
 8012b58:	3714      	adds	r7, #20
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b60:	4770      	bx	lr
 8012b62:	bf00      	nop
 8012b64:	20003c24 	.word	0x20003c24
 8012b68:	20003c2c 	.word	0x20003c2c

08012b6c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8012b6c:	b580      	push	{r7, lr}
 8012b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8012b70:	2200      	movs	r2, #0
 8012b72:	4912      	ldr	r1, [pc, #72]	; (8012bbc <MX_USB_Device_Init+0x50>)
 8012b74:	4812      	ldr	r0, [pc, #72]	; (8012bc0 <MX_USB_Device_Init+0x54>)
 8012b76:	f7fc fdc1 	bl	800f6fc <USBD_Init>
 8012b7a:	4603      	mov	r3, r0
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d001      	beq.n	8012b84 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8012b80:	f7f0 fb24 	bl	80031cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8012b84:	490f      	ldr	r1, [pc, #60]	; (8012bc4 <MX_USB_Device_Init+0x58>)
 8012b86:	480e      	ldr	r0, [pc, #56]	; (8012bc0 <MX_USB_Device_Init+0x54>)
 8012b88:	f7fc fde8 	bl	800f75c <USBD_RegisterClass>
 8012b8c:	4603      	mov	r3, r0
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d001      	beq.n	8012b96 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8012b92:	f7f0 fb1b 	bl	80031cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8012b96:	490c      	ldr	r1, [pc, #48]	; (8012bc8 <MX_USB_Device_Init+0x5c>)
 8012b98:	4809      	ldr	r0, [pc, #36]	; (8012bc0 <MX_USB_Device_Init+0x54>)
 8012b9a:	f7fc fd39 	bl	800f610 <USBD_CDC_RegisterInterface>
 8012b9e:	4603      	mov	r3, r0
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d001      	beq.n	8012ba8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8012ba4:	f7f0 fb12 	bl	80031cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8012ba8:	4805      	ldr	r0, [pc, #20]	; (8012bc0 <MX_USB_Device_Init+0x54>)
 8012baa:	f7fc fdfe 	bl	800f7aa <USBD_Start>
 8012bae:	4603      	mov	r3, r0
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d001      	beq.n	8012bb8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8012bb4:	f7f0 fb0a 	bl	80031cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8012bb8:	bf00      	nop
 8012bba:	bd80      	pop	{r7, pc}
 8012bbc:	20000138 	.word	0x20000138
 8012bc0:	20003c44 	.word	0x20003c44
 8012bc4:	2000001c 	.word	0x2000001c
 8012bc8:	20000124 	.word	0x20000124

08012bcc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012bcc:	b580      	push	{r7, lr}
 8012bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012bd0:	2200      	movs	r2, #0
 8012bd2:	4905      	ldr	r1, [pc, #20]	; (8012be8 <CDC_Init_FS+0x1c>)
 8012bd4:	4805      	ldr	r0, [pc, #20]	; (8012bec <CDC_Init_FS+0x20>)
 8012bd6:	f7fc fd30 	bl	800f63a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012bda:	4905      	ldr	r1, [pc, #20]	; (8012bf0 <CDC_Init_FS+0x24>)
 8012bdc:	4803      	ldr	r0, [pc, #12]	; (8012bec <CDC_Init_FS+0x20>)
 8012bde:	f7fc fd4a 	bl	800f676 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012be2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012be4:	4618      	mov	r0, r3
 8012be6:	bd80      	pop	{r7, pc}
 8012be8:	20004714 	.word	0x20004714
 8012bec:	20003c44 	.word	0x20003c44
 8012bf0:	20003f14 	.word	0x20003f14

08012bf4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012bf4:	b480      	push	{r7}
 8012bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012bf8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	46bd      	mov	sp, r7
 8012bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c02:	4770      	bx	lr

08012c04 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012c04:	b480      	push	{r7}
 8012c06:	b083      	sub	sp, #12
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	4603      	mov	r3, r0
 8012c0c:	6039      	str	r1, [r7, #0]
 8012c0e:	71fb      	strb	r3, [r7, #7]
 8012c10:	4613      	mov	r3, r2
 8012c12:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012c14:	79fb      	ldrb	r3, [r7, #7]
 8012c16:	2b23      	cmp	r3, #35	; 0x23
 8012c18:	d84a      	bhi.n	8012cb0 <CDC_Control_FS+0xac>
 8012c1a:	a201      	add	r2, pc, #4	; (adr r2, 8012c20 <CDC_Control_FS+0x1c>)
 8012c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c20:	08012cb1 	.word	0x08012cb1
 8012c24:	08012cb1 	.word	0x08012cb1
 8012c28:	08012cb1 	.word	0x08012cb1
 8012c2c:	08012cb1 	.word	0x08012cb1
 8012c30:	08012cb1 	.word	0x08012cb1
 8012c34:	08012cb1 	.word	0x08012cb1
 8012c38:	08012cb1 	.word	0x08012cb1
 8012c3c:	08012cb1 	.word	0x08012cb1
 8012c40:	08012cb1 	.word	0x08012cb1
 8012c44:	08012cb1 	.word	0x08012cb1
 8012c48:	08012cb1 	.word	0x08012cb1
 8012c4c:	08012cb1 	.word	0x08012cb1
 8012c50:	08012cb1 	.word	0x08012cb1
 8012c54:	08012cb1 	.word	0x08012cb1
 8012c58:	08012cb1 	.word	0x08012cb1
 8012c5c:	08012cb1 	.word	0x08012cb1
 8012c60:	08012cb1 	.word	0x08012cb1
 8012c64:	08012cb1 	.word	0x08012cb1
 8012c68:	08012cb1 	.word	0x08012cb1
 8012c6c:	08012cb1 	.word	0x08012cb1
 8012c70:	08012cb1 	.word	0x08012cb1
 8012c74:	08012cb1 	.word	0x08012cb1
 8012c78:	08012cb1 	.word	0x08012cb1
 8012c7c:	08012cb1 	.word	0x08012cb1
 8012c80:	08012cb1 	.word	0x08012cb1
 8012c84:	08012cb1 	.word	0x08012cb1
 8012c88:	08012cb1 	.word	0x08012cb1
 8012c8c:	08012cb1 	.word	0x08012cb1
 8012c90:	08012cb1 	.word	0x08012cb1
 8012c94:	08012cb1 	.word	0x08012cb1
 8012c98:	08012cb1 	.word	0x08012cb1
 8012c9c:	08012cb1 	.word	0x08012cb1
 8012ca0:	08012cb1 	.word	0x08012cb1
 8012ca4:	08012cb1 	.word	0x08012cb1
 8012ca8:	08012cb1 	.word	0x08012cb1
 8012cac:	08012cb1 	.word	0x08012cb1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012cb0:	bf00      	nop
  }

  return (USBD_OK);
 8012cb2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	370c      	adds	r7, #12
 8012cb8:	46bd      	mov	sp, r7
 8012cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cbe:	4770      	bx	lr

08012cc0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012cc0:	b580      	push	{r7, lr}
 8012cc2:	b082      	sub	sp, #8
 8012cc4:	af00      	add	r7, sp, #0
 8012cc6:	6078      	str	r0, [r7, #4]
 8012cc8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012cca:	6879      	ldr	r1, [r7, #4]
 8012ccc:	4805      	ldr	r0, [pc, #20]	; (8012ce4 <CDC_Receive_FS+0x24>)
 8012cce:	f7fc fcd2 	bl	800f676 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012cd2:	4804      	ldr	r0, [pc, #16]	; (8012ce4 <CDC_Receive_FS+0x24>)
 8012cd4:	f7fc fce8 	bl	800f6a8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012cd8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012cda:	4618      	mov	r0, r3
 8012cdc:	3708      	adds	r7, #8
 8012cde:	46bd      	mov	sp, r7
 8012ce0:	bd80      	pop	{r7, pc}
 8012ce2:	bf00      	nop
 8012ce4:	20003c44 	.word	0x20003c44

08012ce8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012ce8:	b480      	push	{r7}
 8012cea:	b087      	sub	sp, #28
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	60f8      	str	r0, [r7, #12]
 8012cf0:	60b9      	str	r1, [r7, #8]
 8012cf2:	4613      	mov	r3, r2
 8012cf4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8012cf6:	2300      	movs	r3, #0
 8012cf8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8012cfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012cfe:	4618      	mov	r0, r3
 8012d00:	371c      	adds	r7, #28
 8012d02:	46bd      	mov	sp, r7
 8012d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d08:	4770      	bx	lr
	...

08012d0c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012d0c:	b480      	push	{r7}
 8012d0e:	b083      	sub	sp, #12
 8012d10:	af00      	add	r7, sp, #0
 8012d12:	4603      	mov	r3, r0
 8012d14:	6039      	str	r1, [r7, #0]
 8012d16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8012d18:	683b      	ldr	r3, [r7, #0]
 8012d1a:	2212      	movs	r2, #18
 8012d1c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8012d1e:	4b03      	ldr	r3, [pc, #12]	; (8012d2c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8012d20:	4618      	mov	r0, r3
 8012d22:	370c      	adds	r7, #12
 8012d24:	46bd      	mov	sp, r7
 8012d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d2a:	4770      	bx	lr
 8012d2c:	20000158 	.word	0x20000158

08012d30 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012d30:	b480      	push	{r7}
 8012d32:	b083      	sub	sp, #12
 8012d34:	af00      	add	r7, sp, #0
 8012d36:	4603      	mov	r3, r0
 8012d38:	6039      	str	r1, [r7, #0]
 8012d3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012d3c:	683b      	ldr	r3, [r7, #0]
 8012d3e:	2204      	movs	r2, #4
 8012d40:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012d42:	4b03      	ldr	r3, [pc, #12]	; (8012d50 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8012d44:	4618      	mov	r0, r3
 8012d46:	370c      	adds	r7, #12
 8012d48:	46bd      	mov	sp, r7
 8012d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d4e:	4770      	bx	lr
 8012d50:	2000016c 	.word	0x2000016c

08012d54 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012d54:	b580      	push	{r7, lr}
 8012d56:	b082      	sub	sp, #8
 8012d58:	af00      	add	r7, sp, #0
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	6039      	str	r1, [r7, #0]
 8012d5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012d60:	79fb      	ldrb	r3, [r7, #7]
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d105      	bne.n	8012d72 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8012d66:	683a      	ldr	r2, [r7, #0]
 8012d68:	4907      	ldr	r1, [pc, #28]	; (8012d88 <USBD_CDC_ProductStrDescriptor+0x34>)
 8012d6a:	4808      	ldr	r0, [pc, #32]	; (8012d8c <USBD_CDC_ProductStrDescriptor+0x38>)
 8012d6c:	f7fd fd05 	bl	801077a <USBD_GetString>
 8012d70:	e004      	b.n	8012d7c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8012d72:	683a      	ldr	r2, [r7, #0]
 8012d74:	4904      	ldr	r1, [pc, #16]	; (8012d88 <USBD_CDC_ProductStrDescriptor+0x34>)
 8012d76:	4805      	ldr	r0, [pc, #20]	; (8012d8c <USBD_CDC_ProductStrDescriptor+0x38>)
 8012d78:	f7fd fcff 	bl	801077a <USBD_GetString>
  }
  return USBD_StrDesc;
 8012d7c:	4b02      	ldr	r3, [pc, #8]	; (8012d88 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8012d7e:	4618      	mov	r0, r3
 8012d80:	3708      	adds	r7, #8
 8012d82:	46bd      	mov	sp, r7
 8012d84:	bd80      	pop	{r7, pc}
 8012d86:	bf00      	nop
 8012d88:	20004f14 	.word	0x20004f14
 8012d8c:	080146e8 	.word	0x080146e8

08012d90 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012d90:	b580      	push	{r7, lr}
 8012d92:	b082      	sub	sp, #8
 8012d94:	af00      	add	r7, sp, #0
 8012d96:	4603      	mov	r3, r0
 8012d98:	6039      	str	r1, [r7, #0]
 8012d9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012d9c:	683a      	ldr	r2, [r7, #0]
 8012d9e:	4904      	ldr	r1, [pc, #16]	; (8012db0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8012da0:	4804      	ldr	r0, [pc, #16]	; (8012db4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8012da2:	f7fd fcea 	bl	801077a <USBD_GetString>
  return USBD_StrDesc;
 8012da6:	4b02      	ldr	r3, [pc, #8]	; (8012db0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8012da8:	4618      	mov	r0, r3
 8012daa:	3708      	adds	r7, #8
 8012dac:	46bd      	mov	sp, r7
 8012dae:	bd80      	pop	{r7, pc}
 8012db0:	20004f14 	.word	0x20004f14
 8012db4:	08014700 	.word	0x08014700

08012db8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012db8:	b580      	push	{r7, lr}
 8012dba:	b082      	sub	sp, #8
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	4603      	mov	r3, r0
 8012dc0:	6039      	str	r1, [r7, #0]
 8012dc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012dc4:	683b      	ldr	r3, [r7, #0]
 8012dc6:	221a      	movs	r2, #26
 8012dc8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012dca:	f000 f843 	bl	8012e54 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8012dce:	4b02      	ldr	r3, [pc, #8]	; (8012dd8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	3708      	adds	r7, #8
 8012dd4:	46bd      	mov	sp, r7
 8012dd6:	bd80      	pop	{r7, pc}
 8012dd8:	20000170 	.word	0x20000170

08012ddc <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012ddc:	b580      	push	{r7, lr}
 8012dde:	b082      	sub	sp, #8
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	4603      	mov	r3, r0
 8012de4:	6039      	str	r1, [r7, #0]
 8012de6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012de8:	79fb      	ldrb	r3, [r7, #7]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d105      	bne.n	8012dfa <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8012dee:	683a      	ldr	r2, [r7, #0]
 8012df0:	4907      	ldr	r1, [pc, #28]	; (8012e10 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8012df2:	4808      	ldr	r0, [pc, #32]	; (8012e14 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8012df4:	f7fd fcc1 	bl	801077a <USBD_GetString>
 8012df8:	e004      	b.n	8012e04 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8012dfa:	683a      	ldr	r2, [r7, #0]
 8012dfc:	4904      	ldr	r1, [pc, #16]	; (8012e10 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8012dfe:	4805      	ldr	r0, [pc, #20]	; (8012e14 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8012e00:	f7fd fcbb 	bl	801077a <USBD_GetString>
  }
  return USBD_StrDesc;
 8012e04:	4b02      	ldr	r3, [pc, #8]	; (8012e10 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8012e06:	4618      	mov	r0, r3
 8012e08:	3708      	adds	r7, #8
 8012e0a:	46bd      	mov	sp, r7
 8012e0c:	bd80      	pop	{r7, pc}
 8012e0e:	bf00      	nop
 8012e10:	20004f14 	.word	0x20004f14
 8012e14:	08014714 	.word	0x08014714

08012e18 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012e18:	b580      	push	{r7, lr}
 8012e1a:	b082      	sub	sp, #8
 8012e1c:	af00      	add	r7, sp, #0
 8012e1e:	4603      	mov	r3, r0
 8012e20:	6039      	str	r1, [r7, #0]
 8012e22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012e24:	79fb      	ldrb	r3, [r7, #7]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d105      	bne.n	8012e36 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8012e2a:	683a      	ldr	r2, [r7, #0]
 8012e2c:	4907      	ldr	r1, [pc, #28]	; (8012e4c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8012e2e:	4808      	ldr	r0, [pc, #32]	; (8012e50 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8012e30:	f7fd fca3 	bl	801077a <USBD_GetString>
 8012e34:	e004      	b.n	8012e40 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8012e36:	683a      	ldr	r2, [r7, #0]
 8012e38:	4904      	ldr	r1, [pc, #16]	; (8012e4c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8012e3a:	4805      	ldr	r0, [pc, #20]	; (8012e50 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8012e3c:	f7fd fc9d 	bl	801077a <USBD_GetString>
  }
  return USBD_StrDesc;
 8012e40:	4b02      	ldr	r3, [pc, #8]	; (8012e4c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8012e42:	4618      	mov	r0, r3
 8012e44:	3708      	adds	r7, #8
 8012e46:	46bd      	mov	sp, r7
 8012e48:	bd80      	pop	{r7, pc}
 8012e4a:	bf00      	nop
 8012e4c:	20004f14 	.word	0x20004f14
 8012e50:	08014720 	.word	0x08014720

08012e54 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012e54:	b580      	push	{r7, lr}
 8012e56:	b084      	sub	sp, #16
 8012e58:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012e5a:	4b0f      	ldr	r3, [pc, #60]	; (8012e98 <Get_SerialNum+0x44>)
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012e60:	4b0e      	ldr	r3, [pc, #56]	; (8012e9c <Get_SerialNum+0x48>)
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012e66:	4b0e      	ldr	r3, [pc, #56]	; (8012ea0 <Get_SerialNum+0x4c>)
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012e6c:	68fa      	ldr	r2, [r7, #12]
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	4413      	add	r3, r2
 8012e72:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d009      	beq.n	8012e8e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012e7a:	2208      	movs	r2, #8
 8012e7c:	4909      	ldr	r1, [pc, #36]	; (8012ea4 <Get_SerialNum+0x50>)
 8012e7e:	68f8      	ldr	r0, [r7, #12]
 8012e80:	f000 f814 	bl	8012eac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012e84:	2204      	movs	r2, #4
 8012e86:	4908      	ldr	r1, [pc, #32]	; (8012ea8 <Get_SerialNum+0x54>)
 8012e88:	68b8      	ldr	r0, [r7, #8]
 8012e8a:	f000 f80f 	bl	8012eac <IntToUnicode>
  }
}
 8012e8e:	bf00      	nop
 8012e90:	3710      	adds	r7, #16
 8012e92:	46bd      	mov	sp, r7
 8012e94:	bd80      	pop	{r7, pc}
 8012e96:	bf00      	nop
 8012e98:	1fff7590 	.word	0x1fff7590
 8012e9c:	1fff7594 	.word	0x1fff7594
 8012ea0:	1fff7598 	.word	0x1fff7598
 8012ea4:	20000172 	.word	0x20000172
 8012ea8:	20000182 	.word	0x20000182

08012eac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012eac:	b480      	push	{r7}
 8012eae:	b087      	sub	sp, #28
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	60f8      	str	r0, [r7, #12]
 8012eb4:	60b9      	str	r1, [r7, #8]
 8012eb6:	4613      	mov	r3, r2
 8012eb8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012eba:	2300      	movs	r3, #0
 8012ebc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012ebe:	2300      	movs	r3, #0
 8012ec0:	75fb      	strb	r3, [r7, #23]
 8012ec2:	e027      	b.n	8012f14 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	0f1b      	lsrs	r3, r3, #28
 8012ec8:	2b09      	cmp	r3, #9
 8012eca:	d80b      	bhi.n	8012ee4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	0f1b      	lsrs	r3, r3, #28
 8012ed0:	b2da      	uxtb	r2, r3
 8012ed2:	7dfb      	ldrb	r3, [r7, #23]
 8012ed4:	005b      	lsls	r3, r3, #1
 8012ed6:	4619      	mov	r1, r3
 8012ed8:	68bb      	ldr	r3, [r7, #8]
 8012eda:	440b      	add	r3, r1
 8012edc:	3230      	adds	r2, #48	; 0x30
 8012ede:	b2d2      	uxtb	r2, r2
 8012ee0:	701a      	strb	r2, [r3, #0]
 8012ee2:	e00a      	b.n	8012efa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	0f1b      	lsrs	r3, r3, #28
 8012ee8:	b2da      	uxtb	r2, r3
 8012eea:	7dfb      	ldrb	r3, [r7, #23]
 8012eec:	005b      	lsls	r3, r3, #1
 8012eee:	4619      	mov	r1, r3
 8012ef0:	68bb      	ldr	r3, [r7, #8]
 8012ef2:	440b      	add	r3, r1
 8012ef4:	3237      	adds	r2, #55	; 0x37
 8012ef6:	b2d2      	uxtb	r2, r2
 8012ef8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	011b      	lsls	r3, r3, #4
 8012efe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012f00:	7dfb      	ldrb	r3, [r7, #23]
 8012f02:	005b      	lsls	r3, r3, #1
 8012f04:	3301      	adds	r3, #1
 8012f06:	68ba      	ldr	r2, [r7, #8]
 8012f08:	4413      	add	r3, r2
 8012f0a:	2200      	movs	r2, #0
 8012f0c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012f0e:	7dfb      	ldrb	r3, [r7, #23]
 8012f10:	3301      	adds	r3, #1
 8012f12:	75fb      	strb	r3, [r7, #23]
 8012f14:	7dfa      	ldrb	r2, [r7, #23]
 8012f16:	79fb      	ldrb	r3, [r7, #7]
 8012f18:	429a      	cmp	r2, r3
 8012f1a:	d3d3      	bcc.n	8012ec4 <IntToUnicode+0x18>
  }
}
 8012f1c:	bf00      	nop
 8012f1e:	bf00      	nop
 8012f20:	371c      	adds	r7, #28
 8012f22:	46bd      	mov	sp, r7
 8012f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f28:	4770      	bx	lr
	...

08012f2c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012f2c:	b580      	push	{r7, lr}
 8012f2e:	b098      	sub	sp, #96	; 0x60
 8012f30:	af00      	add	r7, sp, #0
 8012f32:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8012f34:	f107 030c 	add.w	r3, r7, #12
 8012f38:	2254      	movs	r2, #84	; 0x54
 8012f3a:	2100      	movs	r1, #0
 8012f3c:	4618      	mov	r0, r3
 8012f3e:	f000 fb19 	bl	8013574 <memset>
  if(pcdHandle->Instance==USB)
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	4a15      	ldr	r2, [pc, #84]	; (8012f9c <HAL_PCD_MspInit+0x70>)
 8012f48:	4293      	cmp	r3, r2
 8012f4a:	d122      	bne.n	8012f92 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8012f4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012f50:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8012f52:	2300      	movs	r3, #0
 8012f54:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8012f56:	f107 030c 	add.w	r3, r7, #12
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	f7f6 f9fa 	bl	8009354 <HAL_RCCEx_PeriphCLKConfig>
 8012f60:	4603      	mov	r3, r0
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d001      	beq.n	8012f6a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8012f66:	f7f0 f931 	bl	80031cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8012f6a:	4b0d      	ldr	r3, [pc, #52]	; (8012fa0 <HAL_PCD_MspInit+0x74>)
 8012f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012f6e:	4a0c      	ldr	r2, [pc, #48]	; (8012fa0 <HAL_PCD_MspInit+0x74>)
 8012f70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8012f74:	6593      	str	r3, [r2, #88]	; 0x58
 8012f76:	4b0a      	ldr	r3, [pc, #40]	; (8012fa0 <HAL_PCD_MspInit+0x74>)
 8012f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012f7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012f7e:	60bb      	str	r3, [r7, #8]
 8012f80:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 8012f82:	2200      	movs	r2, #0
 8012f84:	2105      	movs	r1, #5
 8012f86:	2014      	movs	r0, #20
 8012f88:	f7f2 fb7c 	bl	8005684 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8012f8c:	2014      	movs	r0, #20
 8012f8e:	f7f2 fb93 	bl	80056b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8012f92:	bf00      	nop
 8012f94:	3760      	adds	r7, #96	; 0x60
 8012f96:	46bd      	mov	sp, r7
 8012f98:	bd80      	pop	{r7, pc}
 8012f9a:	bf00      	nop
 8012f9c:	40005c00 	.word	0x40005c00
 8012fa0:	40021000 	.word	0x40021000

08012fa4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012fa4:	b580      	push	{r7, lr}
 8012fa6:	b082      	sub	sp, #8
 8012fa8:	af00      	add	r7, sp, #0
 8012faa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8012fb8:	4619      	mov	r1, r3
 8012fba:	4610      	mov	r0, r2
 8012fbc:	f7fc fc40 	bl	800f840 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8012fc0:	bf00      	nop
 8012fc2:	3708      	adds	r7, #8
 8012fc4:	46bd      	mov	sp, r7
 8012fc6:	bd80      	pop	{r7, pc}

08012fc8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012fc8:	b580      	push	{r7, lr}
 8012fca:	b082      	sub	sp, #8
 8012fcc:	af00      	add	r7, sp, #0
 8012fce:	6078      	str	r0, [r7, #4]
 8012fd0:	460b      	mov	r3, r1
 8012fd2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8012fda:	78fa      	ldrb	r2, [r7, #3]
 8012fdc:	6879      	ldr	r1, [r7, #4]
 8012fde:	4613      	mov	r3, r2
 8012fe0:	009b      	lsls	r3, r3, #2
 8012fe2:	4413      	add	r3, r2
 8012fe4:	00db      	lsls	r3, r3, #3
 8012fe6:	440b      	add	r3, r1
 8012fe8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8012fec:	681a      	ldr	r2, [r3, #0]
 8012fee:	78fb      	ldrb	r3, [r7, #3]
 8012ff0:	4619      	mov	r1, r3
 8012ff2:	f7fc fc7a 	bl	800f8ea <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8012ff6:	bf00      	nop
 8012ff8:	3708      	adds	r7, #8
 8012ffa:	46bd      	mov	sp, r7
 8012ffc:	bd80      	pop	{r7, pc}

08012ffe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012ffe:	b580      	push	{r7, lr}
 8013000:	b082      	sub	sp, #8
 8013002:	af00      	add	r7, sp, #0
 8013004:	6078      	str	r0, [r7, #4]
 8013006:	460b      	mov	r3, r1
 8013008:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8013010:	78fa      	ldrb	r2, [r7, #3]
 8013012:	6879      	ldr	r1, [r7, #4]
 8013014:	4613      	mov	r3, r2
 8013016:	009b      	lsls	r3, r3, #2
 8013018:	4413      	add	r3, r2
 801301a:	00db      	lsls	r3, r3, #3
 801301c:	440b      	add	r3, r1
 801301e:	333c      	adds	r3, #60	; 0x3c
 8013020:	681a      	ldr	r2, [r3, #0]
 8013022:	78fb      	ldrb	r3, [r7, #3]
 8013024:	4619      	mov	r1, r3
 8013026:	f7fc fcc3 	bl	800f9b0 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 801302a:	bf00      	nop
 801302c:	3708      	adds	r7, #8
 801302e:	46bd      	mov	sp, r7
 8013030:	bd80      	pop	{r7, pc}

08013032 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013032:	b580      	push	{r7, lr}
 8013034:	b082      	sub	sp, #8
 8013036:	af00      	add	r7, sp, #0
 8013038:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8013040:	4618      	mov	r0, r3
 8013042:	f7fc fdd7 	bl	800fbf4 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8013046:	bf00      	nop
 8013048:	3708      	adds	r7, #8
 801304a:	46bd      	mov	sp, r7
 801304c:	bd80      	pop	{r7, pc}

0801304e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801304e:	b580      	push	{r7, lr}
 8013050:	b084      	sub	sp, #16
 8013052:	af00      	add	r7, sp, #0
 8013054:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8013056:	2301      	movs	r3, #1
 8013058:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	689b      	ldr	r3, [r3, #8]
 801305e:	2b02      	cmp	r3, #2
 8013060:	d001      	beq.n	8013066 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8013062:	f7f0 f8b3 	bl	80031cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801306c:	7bfa      	ldrb	r2, [r7, #15]
 801306e:	4611      	mov	r1, r2
 8013070:	4618      	mov	r0, r3
 8013072:	f7fc fd81 	bl	800fb78 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801307c:	4618      	mov	r0, r3
 801307e:	f7fc fd2d 	bl	800fadc <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8013082:	bf00      	nop
 8013084:	3710      	adds	r7, #16
 8013086:	46bd      	mov	sp, r7
 8013088:	bd80      	pop	{r7, pc}
	...

0801308c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801308c:	b580      	push	{r7, lr}
 801308e:	b082      	sub	sp, #8
 8013090:	af00      	add	r7, sp, #0
 8013092:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801309a:	4618      	mov	r0, r3
 801309c:	f7fc fd7c 	bl	800fb98 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	699b      	ldr	r3, [r3, #24]
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d005      	beq.n	80130b4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80130a8:	4b04      	ldr	r3, [pc, #16]	; (80130bc <HAL_PCD_SuspendCallback+0x30>)
 80130aa:	691b      	ldr	r3, [r3, #16]
 80130ac:	4a03      	ldr	r2, [pc, #12]	; (80130bc <HAL_PCD_SuspendCallback+0x30>)
 80130ae:	f043 0306 	orr.w	r3, r3, #6
 80130b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80130b4:	bf00      	nop
 80130b6:	3708      	adds	r7, #8
 80130b8:	46bd      	mov	sp, r7
 80130ba:	bd80      	pop	{r7, pc}
 80130bc:	e000ed00 	.word	0xe000ed00

080130c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80130c0:	b580      	push	{r7, lr}
 80130c2:	b082      	sub	sp, #8
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	699b      	ldr	r3, [r3, #24]
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d007      	beq.n	80130e0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80130d0:	4b08      	ldr	r3, [pc, #32]	; (80130f4 <HAL_PCD_ResumeCallback+0x34>)
 80130d2:	691b      	ldr	r3, [r3, #16]
 80130d4:	4a07      	ldr	r2, [pc, #28]	; (80130f4 <HAL_PCD_ResumeCallback+0x34>)
 80130d6:	f023 0306 	bic.w	r3, r3, #6
 80130da:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80130dc:	f000 f9fa 	bl	80134d4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80130e6:	4618      	mov	r0, r3
 80130e8:	f7fc fd6c 	bl	800fbc4 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80130ec:	bf00      	nop
 80130ee:	3708      	adds	r7, #8
 80130f0:	46bd      	mov	sp, r7
 80130f2:	bd80      	pop	{r7, pc}
 80130f4:	e000ed00 	.word	0xe000ed00

080130f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80130f8:	b580      	push	{r7, lr}
 80130fa:	b082      	sub	sp, #8
 80130fc:	af00      	add	r7, sp, #0
 80130fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8013100:	4a2b      	ldr	r2, [pc, #172]	; (80131b0 <USBD_LL_Init+0xb8>)
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	4a29      	ldr	r2, [pc, #164]	; (80131b0 <USBD_LL_Init+0xb8>)
 801310c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8013110:	4b27      	ldr	r3, [pc, #156]	; (80131b0 <USBD_LL_Init+0xb8>)
 8013112:	4a28      	ldr	r2, [pc, #160]	; (80131b4 <USBD_LL_Init+0xbc>)
 8013114:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8013116:	4b26      	ldr	r3, [pc, #152]	; (80131b0 <USBD_LL_Init+0xb8>)
 8013118:	2208      	movs	r2, #8
 801311a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801311c:	4b24      	ldr	r3, [pc, #144]	; (80131b0 <USBD_LL_Init+0xb8>)
 801311e:	2202      	movs	r2, #2
 8013120:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8013122:	4b23      	ldr	r3, [pc, #140]	; (80131b0 <USBD_LL_Init+0xb8>)
 8013124:	2202      	movs	r2, #2
 8013126:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8013128:	4b21      	ldr	r3, [pc, #132]	; (80131b0 <USBD_LL_Init+0xb8>)
 801312a:	2200      	movs	r2, #0
 801312c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801312e:	4b20      	ldr	r3, [pc, #128]	; (80131b0 <USBD_LL_Init+0xb8>)
 8013130:	2200      	movs	r2, #0
 8013132:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8013134:	4b1e      	ldr	r3, [pc, #120]	; (80131b0 <USBD_LL_Init+0xb8>)
 8013136:	2200      	movs	r2, #0
 8013138:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801313a:	4b1d      	ldr	r3, [pc, #116]	; (80131b0 <USBD_LL_Init+0xb8>)
 801313c:	2200      	movs	r2, #0
 801313e:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8013140:	481b      	ldr	r0, [pc, #108]	; (80131b0 <USBD_LL_Init+0xb8>)
 8013142:	f7f3 fdca 	bl	8006cda <HAL_PCD_Init>
 8013146:	4603      	mov	r3, r0
 8013148:	2b00      	cmp	r3, #0
 801314a:	d001      	beq.n	8013150 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 801314c:	f7f0 f83e 	bl	80031cc <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013156:	2318      	movs	r3, #24
 8013158:	2200      	movs	r2, #0
 801315a:	2100      	movs	r1, #0
 801315c:	f7f5 fa83 	bl	8008666 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013166:	2358      	movs	r3, #88	; 0x58
 8013168:	2200      	movs	r2, #0
 801316a:	2180      	movs	r1, #128	; 0x80
 801316c:	f7f5 fa7b 	bl	8008666 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013176:	23c0      	movs	r3, #192	; 0xc0
 8013178:	2200      	movs	r2, #0
 801317a:	2181      	movs	r1, #129	; 0x81
 801317c:	f7f5 fa73 	bl	8008666 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013186:	f44f 7388 	mov.w	r3, #272	; 0x110
 801318a:	2200      	movs	r2, #0
 801318c:	2101      	movs	r1, #1
 801318e:	f7f5 fa6a 	bl	8008666 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013198:	f44f 7380 	mov.w	r3, #256	; 0x100
 801319c:	2200      	movs	r2, #0
 801319e:	2182      	movs	r1, #130	; 0x82
 80131a0:	f7f5 fa61 	bl	8008666 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80131a4:	2300      	movs	r3, #0
}
 80131a6:	4618      	mov	r0, r3
 80131a8:	3708      	adds	r7, #8
 80131aa:	46bd      	mov	sp, r7
 80131ac:	bd80      	pop	{r7, pc}
 80131ae:	bf00      	nop
 80131b0:	20005114 	.word	0x20005114
 80131b4:	40005c00 	.word	0x40005c00

080131b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80131b8:	b580      	push	{r7, lr}
 80131ba:	b084      	sub	sp, #16
 80131bc:	af00      	add	r7, sp, #0
 80131be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80131c0:	2300      	movs	r3, #0
 80131c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80131c4:	2300      	movs	r3, #0
 80131c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80131ce:	4618      	mov	r0, r3
 80131d0:	f7f3 fe68 	bl	8006ea4 <HAL_PCD_Start>
 80131d4:	4603      	mov	r3, r0
 80131d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80131d8:	7bfb      	ldrb	r3, [r7, #15]
 80131da:	4618      	mov	r0, r3
 80131dc:	f000 f980 	bl	80134e0 <USBD_Get_USB_Status>
 80131e0:	4603      	mov	r3, r0
 80131e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80131e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80131e6:	4618      	mov	r0, r3
 80131e8:	3710      	adds	r7, #16
 80131ea:	46bd      	mov	sp, r7
 80131ec:	bd80      	pop	{r7, pc}

080131ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80131ee:	b580      	push	{r7, lr}
 80131f0:	b084      	sub	sp, #16
 80131f2:	af00      	add	r7, sp, #0
 80131f4:	6078      	str	r0, [r7, #4]
 80131f6:	4608      	mov	r0, r1
 80131f8:	4611      	mov	r1, r2
 80131fa:	461a      	mov	r2, r3
 80131fc:	4603      	mov	r3, r0
 80131fe:	70fb      	strb	r3, [r7, #3]
 8013200:	460b      	mov	r3, r1
 8013202:	70bb      	strb	r3, [r7, #2]
 8013204:	4613      	mov	r3, r2
 8013206:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013208:	2300      	movs	r3, #0
 801320a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801320c:	2300      	movs	r3, #0
 801320e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013216:	78bb      	ldrb	r3, [r7, #2]
 8013218:	883a      	ldrh	r2, [r7, #0]
 801321a:	78f9      	ldrb	r1, [r7, #3]
 801321c:	f7f3 ffb0 	bl	8007180 <HAL_PCD_EP_Open>
 8013220:	4603      	mov	r3, r0
 8013222:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013224:	7bfb      	ldrb	r3, [r7, #15]
 8013226:	4618      	mov	r0, r3
 8013228:	f000 f95a 	bl	80134e0 <USBD_Get_USB_Status>
 801322c:	4603      	mov	r3, r0
 801322e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013230:	7bbb      	ldrb	r3, [r7, #14]
}
 8013232:	4618      	mov	r0, r3
 8013234:	3710      	adds	r7, #16
 8013236:	46bd      	mov	sp, r7
 8013238:	bd80      	pop	{r7, pc}

0801323a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801323a:	b580      	push	{r7, lr}
 801323c:	b084      	sub	sp, #16
 801323e:	af00      	add	r7, sp, #0
 8013240:	6078      	str	r0, [r7, #4]
 8013242:	460b      	mov	r3, r1
 8013244:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013246:	2300      	movs	r3, #0
 8013248:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801324a:	2300      	movs	r3, #0
 801324c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013254:	78fa      	ldrb	r2, [r7, #3]
 8013256:	4611      	mov	r1, r2
 8013258:	4618      	mov	r0, r3
 801325a:	f7f3 fff7 	bl	800724c <HAL_PCD_EP_Close>
 801325e:	4603      	mov	r3, r0
 8013260:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013262:	7bfb      	ldrb	r3, [r7, #15]
 8013264:	4618      	mov	r0, r3
 8013266:	f000 f93b 	bl	80134e0 <USBD_Get_USB_Status>
 801326a:	4603      	mov	r3, r0
 801326c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801326e:	7bbb      	ldrb	r3, [r7, #14]
}
 8013270:	4618      	mov	r0, r3
 8013272:	3710      	adds	r7, #16
 8013274:	46bd      	mov	sp, r7
 8013276:	bd80      	pop	{r7, pc}

08013278 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013278:	b580      	push	{r7, lr}
 801327a:	b084      	sub	sp, #16
 801327c:	af00      	add	r7, sp, #0
 801327e:	6078      	str	r0, [r7, #4]
 8013280:	460b      	mov	r3, r1
 8013282:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013284:	2300      	movs	r3, #0
 8013286:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013288:	2300      	movs	r3, #0
 801328a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013292:	78fa      	ldrb	r2, [r7, #3]
 8013294:	4611      	mov	r1, r2
 8013296:	4618      	mov	r0, r3
 8013298:	f7f4 f8b8 	bl	800740c <HAL_PCD_EP_SetStall>
 801329c:	4603      	mov	r3, r0
 801329e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80132a0:	7bfb      	ldrb	r3, [r7, #15]
 80132a2:	4618      	mov	r0, r3
 80132a4:	f000 f91c 	bl	80134e0 <USBD_Get_USB_Status>
 80132a8:	4603      	mov	r3, r0
 80132aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80132ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80132ae:	4618      	mov	r0, r3
 80132b0:	3710      	adds	r7, #16
 80132b2:	46bd      	mov	sp, r7
 80132b4:	bd80      	pop	{r7, pc}

080132b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80132b6:	b580      	push	{r7, lr}
 80132b8:	b084      	sub	sp, #16
 80132ba:	af00      	add	r7, sp, #0
 80132bc:	6078      	str	r0, [r7, #4]
 80132be:	460b      	mov	r3, r1
 80132c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80132c2:	2300      	movs	r3, #0
 80132c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80132c6:	2300      	movs	r3, #0
 80132c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80132d0:	78fa      	ldrb	r2, [r7, #3]
 80132d2:	4611      	mov	r1, r2
 80132d4:	4618      	mov	r0, r3
 80132d6:	f7f4 f8eb 	bl	80074b0 <HAL_PCD_EP_ClrStall>
 80132da:	4603      	mov	r3, r0
 80132dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80132de:	7bfb      	ldrb	r3, [r7, #15]
 80132e0:	4618      	mov	r0, r3
 80132e2:	f000 f8fd 	bl	80134e0 <USBD_Get_USB_Status>
 80132e6:	4603      	mov	r3, r0
 80132e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80132ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80132ec:	4618      	mov	r0, r3
 80132ee:	3710      	adds	r7, #16
 80132f0:	46bd      	mov	sp, r7
 80132f2:	bd80      	pop	{r7, pc}

080132f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80132f4:	b480      	push	{r7}
 80132f6:	b085      	sub	sp, #20
 80132f8:	af00      	add	r7, sp, #0
 80132fa:	6078      	str	r0, [r7, #4]
 80132fc:	460b      	mov	r3, r1
 80132fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013306:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013308:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801330c:	2b00      	cmp	r3, #0
 801330e:	da0c      	bge.n	801332a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013310:	78fb      	ldrb	r3, [r7, #3]
 8013312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013316:	68f9      	ldr	r1, [r7, #12]
 8013318:	1c5a      	adds	r2, r3, #1
 801331a:	4613      	mov	r3, r2
 801331c:	009b      	lsls	r3, r3, #2
 801331e:	4413      	add	r3, r2
 8013320:	00db      	lsls	r3, r3, #3
 8013322:	440b      	add	r3, r1
 8013324:	3302      	adds	r3, #2
 8013326:	781b      	ldrb	r3, [r3, #0]
 8013328:	e00b      	b.n	8013342 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801332a:	78fb      	ldrb	r3, [r7, #3]
 801332c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013330:	68f9      	ldr	r1, [r7, #12]
 8013332:	4613      	mov	r3, r2
 8013334:	009b      	lsls	r3, r3, #2
 8013336:	4413      	add	r3, r2
 8013338:	00db      	lsls	r3, r3, #3
 801333a:	440b      	add	r3, r1
 801333c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8013340:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013342:	4618      	mov	r0, r3
 8013344:	3714      	adds	r7, #20
 8013346:	46bd      	mov	sp, r7
 8013348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801334c:	4770      	bx	lr

0801334e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801334e:	b580      	push	{r7, lr}
 8013350:	b084      	sub	sp, #16
 8013352:	af00      	add	r7, sp, #0
 8013354:	6078      	str	r0, [r7, #4]
 8013356:	460b      	mov	r3, r1
 8013358:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801335a:	2300      	movs	r3, #0
 801335c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801335e:	2300      	movs	r3, #0
 8013360:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013368:	78fa      	ldrb	r2, [r7, #3]
 801336a:	4611      	mov	r1, r2
 801336c:	4618      	mov	r0, r3
 801336e:	f7f3 fee2 	bl	8007136 <HAL_PCD_SetAddress>
 8013372:	4603      	mov	r3, r0
 8013374:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013376:	7bfb      	ldrb	r3, [r7, #15]
 8013378:	4618      	mov	r0, r3
 801337a:	f000 f8b1 	bl	80134e0 <USBD_Get_USB_Status>
 801337e:	4603      	mov	r3, r0
 8013380:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013382:	7bbb      	ldrb	r3, [r7, #14]
}
 8013384:	4618      	mov	r0, r3
 8013386:	3710      	adds	r7, #16
 8013388:	46bd      	mov	sp, r7
 801338a:	bd80      	pop	{r7, pc}

0801338c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801338c:	b580      	push	{r7, lr}
 801338e:	b086      	sub	sp, #24
 8013390:	af00      	add	r7, sp, #0
 8013392:	60f8      	str	r0, [r7, #12]
 8013394:	607a      	str	r2, [r7, #4]
 8013396:	603b      	str	r3, [r7, #0]
 8013398:	460b      	mov	r3, r1
 801339a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801339c:	2300      	movs	r3, #0
 801339e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80133a0:	2300      	movs	r3, #0
 80133a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80133aa:	7af9      	ldrb	r1, [r7, #11]
 80133ac:	683b      	ldr	r3, [r7, #0]
 80133ae:	687a      	ldr	r2, [r7, #4]
 80133b0:	f7f3 ffe9 	bl	8007386 <HAL_PCD_EP_Transmit>
 80133b4:	4603      	mov	r3, r0
 80133b6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80133b8:	7dfb      	ldrb	r3, [r7, #23]
 80133ba:	4618      	mov	r0, r3
 80133bc:	f000 f890 	bl	80134e0 <USBD_Get_USB_Status>
 80133c0:	4603      	mov	r3, r0
 80133c2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80133c4:	7dbb      	ldrb	r3, [r7, #22]
}
 80133c6:	4618      	mov	r0, r3
 80133c8:	3718      	adds	r7, #24
 80133ca:	46bd      	mov	sp, r7
 80133cc:	bd80      	pop	{r7, pc}

080133ce <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80133ce:	b580      	push	{r7, lr}
 80133d0:	b086      	sub	sp, #24
 80133d2:	af00      	add	r7, sp, #0
 80133d4:	60f8      	str	r0, [r7, #12]
 80133d6:	607a      	str	r2, [r7, #4]
 80133d8:	603b      	str	r3, [r7, #0]
 80133da:	460b      	mov	r3, r1
 80133dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80133de:	2300      	movs	r3, #0
 80133e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80133e2:	2300      	movs	r3, #0
 80133e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80133ec:	7af9      	ldrb	r1, [r7, #11]
 80133ee:	683b      	ldr	r3, [r7, #0]
 80133f0:	687a      	ldr	r2, [r7, #4]
 80133f2:	f7f3 ff73 	bl	80072dc <HAL_PCD_EP_Receive>
 80133f6:	4603      	mov	r3, r0
 80133f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80133fa:	7dfb      	ldrb	r3, [r7, #23]
 80133fc:	4618      	mov	r0, r3
 80133fe:	f000 f86f 	bl	80134e0 <USBD_Get_USB_Status>
 8013402:	4603      	mov	r3, r0
 8013404:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013406:	7dbb      	ldrb	r3, [r7, #22]
}
 8013408:	4618      	mov	r0, r3
 801340a:	3718      	adds	r7, #24
 801340c:	46bd      	mov	sp, r7
 801340e:	bd80      	pop	{r7, pc}

08013410 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013410:	b580      	push	{r7, lr}
 8013412:	b082      	sub	sp, #8
 8013414:	af00      	add	r7, sp, #0
 8013416:	6078      	str	r0, [r7, #4]
 8013418:	460b      	mov	r3, r1
 801341a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013422:	78fa      	ldrb	r2, [r7, #3]
 8013424:	4611      	mov	r1, r2
 8013426:	4618      	mov	r0, r3
 8013428:	f7f3 ff95 	bl	8007356 <HAL_PCD_EP_GetRxCount>
 801342c:	4603      	mov	r3, r0
}
 801342e:	4618      	mov	r0, r3
 8013430:	3708      	adds	r7, #8
 8013432:	46bd      	mov	sp, r7
 8013434:	bd80      	pop	{r7, pc}
	...

08013438 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013438:	b580      	push	{r7, lr}
 801343a:	b082      	sub	sp, #8
 801343c:	af00      	add	r7, sp, #0
 801343e:	6078      	str	r0, [r7, #4]
 8013440:	460b      	mov	r3, r1
 8013442:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8013444:	78fb      	ldrb	r3, [r7, #3]
 8013446:	2b00      	cmp	r3, #0
 8013448:	d002      	beq.n	8013450 <HAL_PCDEx_LPM_Callback+0x18>
 801344a:	2b01      	cmp	r3, #1
 801344c:	d013      	beq.n	8013476 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 801344e:	e023      	b.n	8013498 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	699b      	ldr	r3, [r3, #24]
 8013454:	2b00      	cmp	r3, #0
 8013456:	d007      	beq.n	8013468 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8013458:	f000 f83c 	bl	80134d4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801345c:	4b10      	ldr	r3, [pc, #64]	; (80134a0 <HAL_PCDEx_LPM_Callback+0x68>)
 801345e:	691b      	ldr	r3, [r3, #16]
 8013460:	4a0f      	ldr	r2, [pc, #60]	; (80134a0 <HAL_PCDEx_LPM_Callback+0x68>)
 8013462:	f023 0306 	bic.w	r3, r3, #6
 8013466:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801346e:	4618      	mov	r0, r3
 8013470:	f7fc fba8 	bl	800fbc4 <USBD_LL_Resume>
    break;
 8013474:	e010      	b.n	8013498 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801347c:	4618      	mov	r0, r3
 801347e:	f7fc fb8b 	bl	800fb98 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	699b      	ldr	r3, [r3, #24]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d005      	beq.n	8013496 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801348a:	4b05      	ldr	r3, [pc, #20]	; (80134a0 <HAL_PCDEx_LPM_Callback+0x68>)
 801348c:	691b      	ldr	r3, [r3, #16]
 801348e:	4a04      	ldr	r2, [pc, #16]	; (80134a0 <HAL_PCDEx_LPM_Callback+0x68>)
 8013490:	f043 0306 	orr.w	r3, r3, #6
 8013494:	6113      	str	r3, [r2, #16]
    break;
 8013496:	bf00      	nop
}
 8013498:	bf00      	nop
 801349a:	3708      	adds	r7, #8
 801349c:	46bd      	mov	sp, r7
 801349e:	bd80      	pop	{r7, pc}
 80134a0:	e000ed00 	.word	0xe000ed00

080134a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80134a4:	b480      	push	{r7}
 80134a6:	b083      	sub	sp, #12
 80134a8:	af00      	add	r7, sp, #0
 80134aa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80134ac:	4b03      	ldr	r3, [pc, #12]	; (80134bc <USBD_static_malloc+0x18>)
}
 80134ae:	4618      	mov	r0, r3
 80134b0:	370c      	adds	r7, #12
 80134b2:	46bd      	mov	sp, r7
 80134b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134b8:	4770      	bx	lr
 80134ba:	bf00      	nop
 80134bc:	20005408 	.word	0x20005408

080134c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80134c0:	b480      	push	{r7}
 80134c2:	b083      	sub	sp, #12
 80134c4:	af00      	add	r7, sp, #0
 80134c6:	6078      	str	r0, [r7, #4]

}
 80134c8:	bf00      	nop
 80134ca:	370c      	adds	r7, #12
 80134cc:	46bd      	mov	sp, r7
 80134ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d2:	4770      	bx	lr

080134d4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80134d4:	b580      	push	{r7, lr}
 80134d6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80134d8:	f7ef fe18 	bl	800310c <SystemClock_Config>
}
 80134dc:	bf00      	nop
 80134de:	bd80      	pop	{r7, pc}

080134e0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80134e0:	b480      	push	{r7}
 80134e2:	b085      	sub	sp, #20
 80134e4:	af00      	add	r7, sp, #0
 80134e6:	4603      	mov	r3, r0
 80134e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80134ea:	2300      	movs	r3, #0
 80134ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80134ee:	79fb      	ldrb	r3, [r7, #7]
 80134f0:	2b03      	cmp	r3, #3
 80134f2:	d817      	bhi.n	8013524 <USBD_Get_USB_Status+0x44>
 80134f4:	a201      	add	r2, pc, #4	; (adr r2, 80134fc <USBD_Get_USB_Status+0x1c>)
 80134f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134fa:	bf00      	nop
 80134fc:	0801350d 	.word	0x0801350d
 8013500:	08013513 	.word	0x08013513
 8013504:	08013519 	.word	0x08013519
 8013508:	0801351f 	.word	0x0801351f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801350c:	2300      	movs	r3, #0
 801350e:	73fb      	strb	r3, [r7, #15]
    break;
 8013510:	e00b      	b.n	801352a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013512:	2303      	movs	r3, #3
 8013514:	73fb      	strb	r3, [r7, #15]
    break;
 8013516:	e008      	b.n	801352a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013518:	2301      	movs	r3, #1
 801351a:	73fb      	strb	r3, [r7, #15]
    break;
 801351c:	e005      	b.n	801352a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801351e:	2303      	movs	r3, #3
 8013520:	73fb      	strb	r3, [r7, #15]
    break;
 8013522:	e002      	b.n	801352a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013524:	2303      	movs	r3, #3
 8013526:	73fb      	strb	r3, [r7, #15]
    break;
 8013528:	bf00      	nop
  }
  return usb_status;
 801352a:	7bfb      	ldrb	r3, [r7, #15]
}
 801352c:	4618      	mov	r0, r3
 801352e:	3714      	adds	r7, #20
 8013530:	46bd      	mov	sp, r7
 8013532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013536:	4770      	bx	lr

08013538 <arm_pid_init_f32>:
 8013538:	edd0 6a08 	vldr	s13, [r0, #32]
 801353c:	edd0 7a06 	vldr	s15, [r0, #24]
 8013540:	ed90 7a07 	vldr	s14, [r0, #28]
 8013544:	edc0 6a02 	vstr	s13, [r0, #8]
 8013548:	ee37 7a87 	vadd.f32	s14, s15, s14
 801354c:	ee36 6aa6 	vadd.f32	s12, s13, s13
 8013550:	eef1 7a67 	vneg.f32	s15, s15
 8013554:	ee37 7a26 	vadd.f32	s14, s14, s13
 8013558:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801355c:	ed80 7a00 	vstr	s14, [r0]
 8013560:	edc0 7a01 	vstr	s15, [r0, #4]
 8013564:	b901      	cbnz	r1, 8013568 <arm_pid_init_f32+0x30>
 8013566:	4770      	bx	lr
 8013568:	2300      	movs	r3, #0
 801356a:	60c3      	str	r3, [r0, #12]
 801356c:	6103      	str	r3, [r0, #16]
 801356e:	6143      	str	r3, [r0, #20]
 8013570:	4770      	bx	lr
 8013572:	bf00      	nop

08013574 <memset>:
 8013574:	4402      	add	r2, r0
 8013576:	4603      	mov	r3, r0
 8013578:	4293      	cmp	r3, r2
 801357a:	d100      	bne.n	801357e <memset+0xa>
 801357c:	4770      	bx	lr
 801357e:	f803 1b01 	strb.w	r1, [r3], #1
 8013582:	e7f9      	b.n	8013578 <memset+0x4>

08013584 <_reclaim_reent>:
 8013584:	4b29      	ldr	r3, [pc, #164]	; (801362c <_reclaim_reent+0xa8>)
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	4283      	cmp	r3, r0
 801358a:	b570      	push	{r4, r5, r6, lr}
 801358c:	4604      	mov	r4, r0
 801358e:	d04b      	beq.n	8013628 <_reclaim_reent+0xa4>
 8013590:	69c3      	ldr	r3, [r0, #28]
 8013592:	b143      	cbz	r3, 80135a6 <_reclaim_reent+0x22>
 8013594:	68db      	ldr	r3, [r3, #12]
 8013596:	2b00      	cmp	r3, #0
 8013598:	d144      	bne.n	8013624 <_reclaim_reent+0xa0>
 801359a:	69e3      	ldr	r3, [r4, #28]
 801359c:	6819      	ldr	r1, [r3, #0]
 801359e:	b111      	cbz	r1, 80135a6 <_reclaim_reent+0x22>
 80135a0:	4620      	mov	r0, r4
 80135a2:	f000 f87f 	bl	80136a4 <_free_r>
 80135a6:	6961      	ldr	r1, [r4, #20]
 80135a8:	b111      	cbz	r1, 80135b0 <_reclaim_reent+0x2c>
 80135aa:	4620      	mov	r0, r4
 80135ac:	f000 f87a 	bl	80136a4 <_free_r>
 80135b0:	69e1      	ldr	r1, [r4, #28]
 80135b2:	b111      	cbz	r1, 80135ba <_reclaim_reent+0x36>
 80135b4:	4620      	mov	r0, r4
 80135b6:	f000 f875 	bl	80136a4 <_free_r>
 80135ba:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80135bc:	b111      	cbz	r1, 80135c4 <_reclaim_reent+0x40>
 80135be:	4620      	mov	r0, r4
 80135c0:	f000 f870 	bl	80136a4 <_free_r>
 80135c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80135c6:	b111      	cbz	r1, 80135ce <_reclaim_reent+0x4a>
 80135c8:	4620      	mov	r0, r4
 80135ca:	f000 f86b 	bl	80136a4 <_free_r>
 80135ce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80135d0:	b111      	cbz	r1, 80135d8 <_reclaim_reent+0x54>
 80135d2:	4620      	mov	r0, r4
 80135d4:	f000 f866 	bl	80136a4 <_free_r>
 80135d8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80135da:	b111      	cbz	r1, 80135e2 <_reclaim_reent+0x5e>
 80135dc:	4620      	mov	r0, r4
 80135de:	f000 f861 	bl	80136a4 <_free_r>
 80135e2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80135e4:	b111      	cbz	r1, 80135ec <_reclaim_reent+0x68>
 80135e6:	4620      	mov	r0, r4
 80135e8:	f000 f85c 	bl	80136a4 <_free_r>
 80135ec:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80135ee:	b111      	cbz	r1, 80135f6 <_reclaim_reent+0x72>
 80135f0:	4620      	mov	r0, r4
 80135f2:	f000 f857 	bl	80136a4 <_free_r>
 80135f6:	6a23      	ldr	r3, [r4, #32]
 80135f8:	b1b3      	cbz	r3, 8013628 <_reclaim_reent+0xa4>
 80135fa:	4620      	mov	r0, r4
 80135fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013600:	4718      	bx	r3
 8013602:	5949      	ldr	r1, [r1, r5]
 8013604:	b941      	cbnz	r1, 8013618 <_reclaim_reent+0x94>
 8013606:	3504      	adds	r5, #4
 8013608:	69e3      	ldr	r3, [r4, #28]
 801360a:	2d80      	cmp	r5, #128	; 0x80
 801360c:	68d9      	ldr	r1, [r3, #12]
 801360e:	d1f8      	bne.n	8013602 <_reclaim_reent+0x7e>
 8013610:	4620      	mov	r0, r4
 8013612:	f000 f847 	bl	80136a4 <_free_r>
 8013616:	e7c0      	b.n	801359a <_reclaim_reent+0x16>
 8013618:	680e      	ldr	r6, [r1, #0]
 801361a:	4620      	mov	r0, r4
 801361c:	f000 f842 	bl	80136a4 <_free_r>
 8013620:	4631      	mov	r1, r6
 8013622:	e7ef      	b.n	8013604 <_reclaim_reent+0x80>
 8013624:	2500      	movs	r5, #0
 8013626:	e7ef      	b.n	8013608 <_reclaim_reent+0x84>
 8013628:	bd70      	pop	{r4, r5, r6, pc}
 801362a:	bf00      	nop
 801362c:	200001d8 	.word	0x200001d8

08013630 <__errno>:
 8013630:	4b01      	ldr	r3, [pc, #4]	; (8013638 <__errno+0x8>)
 8013632:	6818      	ldr	r0, [r3, #0]
 8013634:	4770      	bx	lr
 8013636:	bf00      	nop
 8013638:	200001d8 	.word	0x200001d8

0801363c <__libc_init_array>:
 801363c:	b570      	push	{r4, r5, r6, lr}
 801363e:	4d0d      	ldr	r5, [pc, #52]	; (8013674 <__libc_init_array+0x38>)
 8013640:	4c0d      	ldr	r4, [pc, #52]	; (8013678 <__libc_init_array+0x3c>)
 8013642:	1b64      	subs	r4, r4, r5
 8013644:	10a4      	asrs	r4, r4, #2
 8013646:	2600      	movs	r6, #0
 8013648:	42a6      	cmp	r6, r4
 801364a:	d109      	bne.n	8013660 <__libc_init_array+0x24>
 801364c:	4d0b      	ldr	r5, [pc, #44]	; (801367c <__libc_init_array+0x40>)
 801364e:	4c0c      	ldr	r4, [pc, #48]	; (8013680 <__libc_init_array+0x44>)
 8013650:	f000 ffba 	bl	80145c8 <_init>
 8013654:	1b64      	subs	r4, r4, r5
 8013656:	10a4      	asrs	r4, r4, #2
 8013658:	2600      	movs	r6, #0
 801365a:	42a6      	cmp	r6, r4
 801365c:	d105      	bne.n	801366a <__libc_init_array+0x2e>
 801365e:	bd70      	pop	{r4, r5, r6, pc}
 8013660:	f855 3b04 	ldr.w	r3, [r5], #4
 8013664:	4798      	blx	r3
 8013666:	3601      	adds	r6, #1
 8013668:	e7ee      	b.n	8013648 <__libc_init_array+0xc>
 801366a:	f855 3b04 	ldr.w	r3, [r5], #4
 801366e:	4798      	blx	r3
 8013670:	3601      	adds	r6, #1
 8013672:	e7f2      	b.n	801365a <__libc_init_array+0x1e>
 8013674:	080147a8 	.word	0x080147a8
 8013678:	080147a8 	.word	0x080147a8
 801367c:	080147a8 	.word	0x080147a8
 8013680:	080147ac 	.word	0x080147ac

08013684 <__retarget_lock_acquire_recursive>:
 8013684:	4770      	bx	lr

08013686 <__retarget_lock_release_recursive>:
 8013686:	4770      	bx	lr

08013688 <memcpy>:
 8013688:	440a      	add	r2, r1
 801368a:	4291      	cmp	r1, r2
 801368c:	f100 33ff 	add.w	r3, r0, #4294967295
 8013690:	d100      	bne.n	8013694 <memcpy+0xc>
 8013692:	4770      	bx	lr
 8013694:	b510      	push	{r4, lr}
 8013696:	f811 4b01 	ldrb.w	r4, [r1], #1
 801369a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801369e:	4291      	cmp	r1, r2
 80136a0:	d1f9      	bne.n	8013696 <memcpy+0xe>
 80136a2:	bd10      	pop	{r4, pc}

080136a4 <_free_r>:
 80136a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80136a6:	2900      	cmp	r1, #0
 80136a8:	d044      	beq.n	8013734 <_free_r+0x90>
 80136aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80136ae:	9001      	str	r0, [sp, #4]
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	f1a1 0404 	sub.w	r4, r1, #4
 80136b6:	bfb8      	it	lt
 80136b8:	18e4      	addlt	r4, r4, r3
 80136ba:	f000 f83f 	bl	801373c <__malloc_lock>
 80136be:	4a1e      	ldr	r2, [pc, #120]	; (8013738 <_free_r+0x94>)
 80136c0:	9801      	ldr	r0, [sp, #4]
 80136c2:	6813      	ldr	r3, [r2, #0]
 80136c4:	b933      	cbnz	r3, 80136d4 <_free_r+0x30>
 80136c6:	6063      	str	r3, [r4, #4]
 80136c8:	6014      	str	r4, [r2, #0]
 80136ca:	b003      	add	sp, #12
 80136cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80136d0:	f000 b83a 	b.w	8013748 <__malloc_unlock>
 80136d4:	42a3      	cmp	r3, r4
 80136d6:	d908      	bls.n	80136ea <_free_r+0x46>
 80136d8:	6825      	ldr	r5, [r4, #0]
 80136da:	1961      	adds	r1, r4, r5
 80136dc:	428b      	cmp	r3, r1
 80136de:	bf01      	itttt	eq
 80136e0:	6819      	ldreq	r1, [r3, #0]
 80136e2:	685b      	ldreq	r3, [r3, #4]
 80136e4:	1949      	addeq	r1, r1, r5
 80136e6:	6021      	streq	r1, [r4, #0]
 80136e8:	e7ed      	b.n	80136c6 <_free_r+0x22>
 80136ea:	461a      	mov	r2, r3
 80136ec:	685b      	ldr	r3, [r3, #4]
 80136ee:	b10b      	cbz	r3, 80136f4 <_free_r+0x50>
 80136f0:	42a3      	cmp	r3, r4
 80136f2:	d9fa      	bls.n	80136ea <_free_r+0x46>
 80136f4:	6811      	ldr	r1, [r2, #0]
 80136f6:	1855      	adds	r5, r2, r1
 80136f8:	42a5      	cmp	r5, r4
 80136fa:	d10b      	bne.n	8013714 <_free_r+0x70>
 80136fc:	6824      	ldr	r4, [r4, #0]
 80136fe:	4421      	add	r1, r4
 8013700:	1854      	adds	r4, r2, r1
 8013702:	42a3      	cmp	r3, r4
 8013704:	6011      	str	r1, [r2, #0]
 8013706:	d1e0      	bne.n	80136ca <_free_r+0x26>
 8013708:	681c      	ldr	r4, [r3, #0]
 801370a:	685b      	ldr	r3, [r3, #4]
 801370c:	6053      	str	r3, [r2, #4]
 801370e:	440c      	add	r4, r1
 8013710:	6014      	str	r4, [r2, #0]
 8013712:	e7da      	b.n	80136ca <_free_r+0x26>
 8013714:	d902      	bls.n	801371c <_free_r+0x78>
 8013716:	230c      	movs	r3, #12
 8013718:	6003      	str	r3, [r0, #0]
 801371a:	e7d6      	b.n	80136ca <_free_r+0x26>
 801371c:	6825      	ldr	r5, [r4, #0]
 801371e:	1961      	adds	r1, r4, r5
 8013720:	428b      	cmp	r3, r1
 8013722:	bf04      	itt	eq
 8013724:	6819      	ldreq	r1, [r3, #0]
 8013726:	685b      	ldreq	r3, [r3, #4]
 8013728:	6063      	str	r3, [r4, #4]
 801372a:	bf04      	itt	eq
 801372c:	1949      	addeq	r1, r1, r5
 801372e:	6021      	streq	r1, [r4, #0]
 8013730:	6054      	str	r4, [r2, #4]
 8013732:	e7ca      	b.n	80136ca <_free_r+0x26>
 8013734:	b003      	add	sp, #12
 8013736:	bd30      	pop	{r4, r5, pc}
 8013738:	20005764 	.word	0x20005764

0801373c <__malloc_lock>:
 801373c:	4801      	ldr	r0, [pc, #4]	; (8013744 <__malloc_lock+0x8>)
 801373e:	f7ff bfa1 	b.w	8013684 <__retarget_lock_acquire_recursive>
 8013742:	bf00      	nop
 8013744:	20005760 	.word	0x20005760

08013748 <__malloc_unlock>:
 8013748:	4801      	ldr	r0, [pc, #4]	; (8013750 <__malloc_unlock+0x8>)
 801374a:	f7ff bf9c 	b.w	8013686 <__retarget_lock_release_recursive>
 801374e:	bf00      	nop
 8013750:	20005760 	.word	0x20005760

08013754 <pow>:
 8013754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013756:	ed2d 8b02 	vpush	{d8}
 801375a:	eeb0 8a40 	vmov.f32	s16, s0
 801375e:	eef0 8a60 	vmov.f32	s17, s1
 8013762:	ec55 4b11 	vmov	r4, r5, d1
 8013766:	f000 f873 	bl	8013850 <__ieee754_pow>
 801376a:	4622      	mov	r2, r4
 801376c:	462b      	mov	r3, r5
 801376e:	4620      	mov	r0, r4
 8013770:	4629      	mov	r1, r5
 8013772:	ec57 6b10 	vmov	r6, r7, d0
 8013776:	f7ed f9b3 	bl	8000ae0 <__aeabi_dcmpun>
 801377a:	2800      	cmp	r0, #0
 801377c:	d13b      	bne.n	80137f6 <pow+0xa2>
 801377e:	ec51 0b18 	vmov	r0, r1, d8
 8013782:	2200      	movs	r2, #0
 8013784:	2300      	movs	r3, #0
 8013786:	f7ed f979 	bl	8000a7c <__aeabi_dcmpeq>
 801378a:	b1b8      	cbz	r0, 80137bc <pow+0x68>
 801378c:	2200      	movs	r2, #0
 801378e:	2300      	movs	r3, #0
 8013790:	4620      	mov	r0, r4
 8013792:	4629      	mov	r1, r5
 8013794:	f7ed f972 	bl	8000a7c <__aeabi_dcmpeq>
 8013798:	2800      	cmp	r0, #0
 801379a:	d146      	bne.n	801382a <pow+0xd6>
 801379c:	ec45 4b10 	vmov	d0, r4, r5
 80137a0:	f000 f848 	bl	8013834 <finite>
 80137a4:	b338      	cbz	r0, 80137f6 <pow+0xa2>
 80137a6:	2200      	movs	r2, #0
 80137a8:	2300      	movs	r3, #0
 80137aa:	4620      	mov	r0, r4
 80137ac:	4629      	mov	r1, r5
 80137ae:	f7ed f96f 	bl	8000a90 <__aeabi_dcmplt>
 80137b2:	b300      	cbz	r0, 80137f6 <pow+0xa2>
 80137b4:	f7ff ff3c 	bl	8013630 <__errno>
 80137b8:	2322      	movs	r3, #34	; 0x22
 80137ba:	e01b      	b.n	80137f4 <pow+0xa0>
 80137bc:	ec47 6b10 	vmov	d0, r6, r7
 80137c0:	f000 f838 	bl	8013834 <finite>
 80137c4:	b9e0      	cbnz	r0, 8013800 <pow+0xac>
 80137c6:	eeb0 0a48 	vmov.f32	s0, s16
 80137ca:	eef0 0a68 	vmov.f32	s1, s17
 80137ce:	f000 f831 	bl	8013834 <finite>
 80137d2:	b1a8      	cbz	r0, 8013800 <pow+0xac>
 80137d4:	ec45 4b10 	vmov	d0, r4, r5
 80137d8:	f000 f82c 	bl	8013834 <finite>
 80137dc:	b180      	cbz	r0, 8013800 <pow+0xac>
 80137de:	4632      	mov	r2, r6
 80137e0:	463b      	mov	r3, r7
 80137e2:	4630      	mov	r0, r6
 80137e4:	4639      	mov	r1, r7
 80137e6:	f7ed f97b 	bl	8000ae0 <__aeabi_dcmpun>
 80137ea:	2800      	cmp	r0, #0
 80137ec:	d0e2      	beq.n	80137b4 <pow+0x60>
 80137ee:	f7ff ff1f 	bl	8013630 <__errno>
 80137f2:	2321      	movs	r3, #33	; 0x21
 80137f4:	6003      	str	r3, [r0, #0]
 80137f6:	ecbd 8b02 	vpop	{d8}
 80137fa:	ec47 6b10 	vmov	d0, r6, r7
 80137fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013800:	2200      	movs	r2, #0
 8013802:	2300      	movs	r3, #0
 8013804:	4630      	mov	r0, r6
 8013806:	4639      	mov	r1, r7
 8013808:	f7ed f938 	bl	8000a7c <__aeabi_dcmpeq>
 801380c:	2800      	cmp	r0, #0
 801380e:	d0f2      	beq.n	80137f6 <pow+0xa2>
 8013810:	eeb0 0a48 	vmov.f32	s0, s16
 8013814:	eef0 0a68 	vmov.f32	s1, s17
 8013818:	f000 f80c 	bl	8013834 <finite>
 801381c:	2800      	cmp	r0, #0
 801381e:	d0ea      	beq.n	80137f6 <pow+0xa2>
 8013820:	ec45 4b10 	vmov	d0, r4, r5
 8013824:	f000 f806 	bl	8013834 <finite>
 8013828:	e7c3      	b.n	80137b2 <pow+0x5e>
 801382a:	4f01      	ldr	r7, [pc, #4]	; (8013830 <pow+0xdc>)
 801382c:	2600      	movs	r6, #0
 801382e:	e7e2      	b.n	80137f6 <pow+0xa2>
 8013830:	3ff00000 	.word	0x3ff00000

08013834 <finite>:
 8013834:	b082      	sub	sp, #8
 8013836:	ed8d 0b00 	vstr	d0, [sp]
 801383a:	9801      	ldr	r0, [sp, #4]
 801383c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8013840:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8013844:	0fc0      	lsrs	r0, r0, #31
 8013846:	b002      	add	sp, #8
 8013848:	4770      	bx	lr
 801384a:	0000      	movs	r0, r0
 801384c:	0000      	movs	r0, r0
	...

08013850 <__ieee754_pow>:
 8013850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013854:	ed2d 8b06 	vpush	{d8-d10}
 8013858:	b089      	sub	sp, #36	; 0x24
 801385a:	ed8d 1b00 	vstr	d1, [sp]
 801385e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8013862:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8013866:	ea58 0102 	orrs.w	r1, r8, r2
 801386a:	ec57 6b10 	vmov	r6, r7, d0
 801386e:	d115      	bne.n	801389c <__ieee754_pow+0x4c>
 8013870:	19b3      	adds	r3, r6, r6
 8013872:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8013876:	4152      	adcs	r2, r2
 8013878:	4299      	cmp	r1, r3
 801387a:	4b89      	ldr	r3, [pc, #548]	; (8013aa0 <__ieee754_pow+0x250>)
 801387c:	4193      	sbcs	r3, r2
 801387e:	f080 84d1 	bcs.w	8014224 <__ieee754_pow+0x9d4>
 8013882:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013886:	4630      	mov	r0, r6
 8013888:	4639      	mov	r1, r7
 801388a:	f7ec fcd9 	bl	8000240 <__adddf3>
 801388e:	ec41 0b10 	vmov	d0, r0, r1
 8013892:	b009      	add	sp, #36	; 0x24
 8013894:	ecbd 8b06 	vpop	{d8-d10}
 8013898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801389c:	4b81      	ldr	r3, [pc, #516]	; (8013aa4 <__ieee754_pow+0x254>)
 801389e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80138a2:	429c      	cmp	r4, r3
 80138a4:	ee10 aa10 	vmov	sl, s0
 80138a8:	463d      	mov	r5, r7
 80138aa:	dc06      	bgt.n	80138ba <__ieee754_pow+0x6a>
 80138ac:	d101      	bne.n	80138b2 <__ieee754_pow+0x62>
 80138ae:	2e00      	cmp	r6, #0
 80138b0:	d1e7      	bne.n	8013882 <__ieee754_pow+0x32>
 80138b2:	4598      	cmp	r8, r3
 80138b4:	dc01      	bgt.n	80138ba <__ieee754_pow+0x6a>
 80138b6:	d10f      	bne.n	80138d8 <__ieee754_pow+0x88>
 80138b8:	b172      	cbz	r2, 80138d8 <__ieee754_pow+0x88>
 80138ba:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80138be:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80138c2:	ea55 050a 	orrs.w	r5, r5, sl
 80138c6:	d1dc      	bne.n	8013882 <__ieee754_pow+0x32>
 80138c8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80138cc:	18db      	adds	r3, r3, r3
 80138ce:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80138d2:	4152      	adcs	r2, r2
 80138d4:	429d      	cmp	r5, r3
 80138d6:	e7d0      	b.n	801387a <__ieee754_pow+0x2a>
 80138d8:	2d00      	cmp	r5, #0
 80138da:	da3b      	bge.n	8013954 <__ieee754_pow+0x104>
 80138dc:	4b72      	ldr	r3, [pc, #456]	; (8013aa8 <__ieee754_pow+0x258>)
 80138de:	4598      	cmp	r8, r3
 80138e0:	dc51      	bgt.n	8013986 <__ieee754_pow+0x136>
 80138e2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80138e6:	4598      	cmp	r8, r3
 80138e8:	f340 84ab 	ble.w	8014242 <__ieee754_pow+0x9f2>
 80138ec:	ea4f 5328 	mov.w	r3, r8, asr #20
 80138f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80138f4:	2b14      	cmp	r3, #20
 80138f6:	dd0f      	ble.n	8013918 <__ieee754_pow+0xc8>
 80138f8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80138fc:	fa22 f103 	lsr.w	r1, r2, r3
 8013900:	fa01 f303 	lsl.w	r3, r1, r3
 8013904:	4293      	cmp	r3, r2
 8013906:	f040 849c 	bne.w	8014242 <__ieee754_pow+0x9f2>
 801390a:	f001 0101 	and.w	r1, r1, #1
 801390e:	f1c1 0302 	rsb	r3, r1, #2
 8013912:	9304      	str	r3, [sp, #16]
 8013914:	b182      	cbz	r2, 8013938 <__ieee754_pow+0xe8>
 8013916:	e05f      	b.n	80139d8 <__ieee754_pow+0x188>
 8013918:	2a00      	cmp	r2, #0
 801391a:	d15b      	bne.n	80139d4 <__ieee754_pow+0x184>
 801391c:	f1c3 0314 	rsb	r3, r3, #20
 8013920:	fa48 f103 	asr.w	r1, r8, r3
 8013924:	fa01 f303 	lsl.w	r3, r1, r3
 8013928:	4543      	cmp	r3, r8
 801392a:	f040 8487 	bne.w	801423c <__ieee754_pow+0x9ec>
 801392e:	f001 0101 	and.w	r1, r1, #1
 8013932:	f1c1 0302 	rsb	r3, r1, #2
 8013936:	9304      	str	r3, [sp, #16]
 8013938:	4b5c      	ldr	r3, [pc, #368]	; (8013aac <__ieee754_pow+0x25c>)
 801393a:	4598      	cmp	r8, r3
 801393c:	d132      	bne.n	80139a4 <__ieee754_pow+0x154>
 801393e:	f1b9 0f00 	cmp.w	r9, #0
 8013942:	f280 8477 	bge.w	8014234 <__ieee754_pow+0x9e4>
 8013946:	4959      	ldr	r1, [pc, #356]	; (8013aac <__ieee754_pow+0x25c>)
 8013948:	4632      	mov	r2, r6
 801394a:	463b      	mov	r3, r7
 801394c:	2000      	movs	r0, #0
 801394e:	f7ec ff57 	bl	8000800 <__aeabi_ddiv>
 8013952:	e79c      	b.n	801388e <__ieee754_pow+0x3e>
 8013954:	2300      	movs	r3, #0
 8013956:	9304      	str	r3, [sp, #16]
 8013958:	2a00      	cmp	r2, #0
 801395a:	d13d      	bne.n	80139d8 <__ieee754_pow+0x188>
 801395c:	4b51      	ldr	r3, [pc, #324]	; (8013aa4 <__ieee754_pow+0x254>)
 801395e:	4598      	cmp	r8, r3
 8013960:	d1ea      	bne.n	8013938 <__ieee754_pow+0xe8>
 8013962:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8013966:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801396a:	ea53 030a 	orrs.w	r3, r3, sl
 801396e:	f000 8459 	beq.w	8014224 <__ieee754_pow+0x9d4>
 8013972:	4b4f      	ldr	r3, [pc, #316]	; (8013ab0 <__ieee754_pow+0x260>)
 8013974:	429c      	cmp	r4, r3
 8013976:	dd08      	ble.n	801398a <__ieee754_pow+0x13a>
 8013978:	f1b9 0f00 	cmp.w	r9, #0
 801397c:	f2c0 8456 	blt.w	801422c <__ieee754_pow+0x9dc>
 8013980:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013984:	e783      	b.n	801388e <__ieee754_pow+0x3e>
 8013986:	2302      	movs	r3, #2
 8013988:	e7e5      	b.n	8013956 <__ieee754_pow+0x106>
 801398a:	f1b9 0f00 	cmp.w	r9, #0
 801398e:	f04f 0000 	mov.w	r0, #0
 8013992:	f04f 0100 	mov.w	r1, #0
 8013996:	f6bf af7a 	bge.w	801388e <__ieee754_pow+0x3e>
 801399a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801399e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80139a2:	e774      	b.n	801388e <__ieee754_pow+0x3e>
 80139a4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80139a8:	d106      	bne.n	80139b8 <__ieee754_pow+0x168>
 80139aa:	4632      	mov	r2, r6
 80139ac:	463b      	mov	r3, r7
 80139ae:	4630      	mov	r0, r6
 80139b0:	4639      	mov	r1, r7
 80139b2:	f7ec fdfb 	bl	80005ac <__aeabi_dmul>
 80139b6:	e76a      	b.n	801388e <__ieee754_pow+0x3e>
 80139b8:	4b3e      	ldr	r3, [pc, #248]	; (8013ab4 <__ieee754_pow+0x264>)
 80139ba:	4599      	cmp	r9, r3
 80139bc:	d10c      	bne.n	80139d8 <__ieee754_pow+0x188>
 80139be:	2d00      	cmp	r5, #0
 80139c0:	db0a      	blt.n	80139d8 <__ieee754_pow+0x188>
 80139c2:	ec47 6b10 	vmov	d0, r6, r7
 80139c6:	b009      	add	sp, #36	; 0x24
 80139c8:	ecbd 8b06 	vpop	{d8-d10}
 80139cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139d0:	f000 bd20 	b.w	8014414 <__ieee754_sqrt>
 80139d4:	2300      	movs	r3, #0
 80139d6:	9304      	str	r3, [sp, #16]
 80139d8:	ec47 6b10 	vmov	d0, r6, r7
 80139dc:	f000 fc62 	bl	80142a4 <fabs>
 80139e0:	ec51 0b10 	vmov	r0, r1, d0
 80139e4:	f1ba 0f00 	cmp.w	sl, #0
 80139e8:	d129      	bne.n	8013a3e <__ieee754_pow+0x1ee>
 80139ea:	b124      	cbz	r4, 80139f6 <__ieee754_pow+0x1a6>
 80139ec:	4b2f      	ldr	r3, [pc, #188]	; (8013aac <__ieee754_pow+0x25c>)
 80139ee:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80139f2:	429a      	cmp	r2, r3
 80139f4:	d123      	bne.n	8013a3e <__ieee754_pow+0x1ee>
 80139f6:	f1b9 0f00 	cmp.w	r9, #0
 80139fa:	da05      	bge.n	8013a08 <__ieee754_pow+0x1b8>
 80139fc:	4602      	mov	r2, r0
 80139fe:	460b      	mov	r3, r1
 8013a00:	2000      	movs	r0, #0
 8013a02:	492a      	ldr	r1, [pc, #168]	; (8013aac <__ieee754_pow+0x25c>)
 8013a04:	f7ec fefc 	bl	8000800 <__aeabi_ddiv>
 8013a08:	2d00      	cmp	r5, #0
 8013a0a:	f6bf af40 	bge.w	801388e <__ieee754_pow+0x3e>
 8013a0e:	9b04      	ldr	r3, [sp, #16]
 8013a10:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013a14:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013a18:	431c      	orrs	r4, r3
 8013a1a:	d108      	bne.n	8013a2e <__ieee754_pow+0x1de>
 8013a1c:	4602      	mov	r2, r0
 8013a1e:	460b      	mov	r3, r1
 8013a20:	4610      	mov	r0, r2
 8013a22:	4619      	mov	r1, r3
 8013a24:	f7ec fc0a 	bl	800023c <__aeabi_dsub>
 8013a28:	4602      	mov	r2, r0
 8013a2a:	460b      	mov	r3, r1
 8013a2c:	e78f      	b.n	801394e <__ieee754_pow+0xfe>
 8013a2e:	9b04      	ldr	r3, [sp, #16]
 8013a30:	2b01      	cmp	r3, #1
 8013a32:	f47f af2c 	bne.w	801388e <__ieee754_pow+0x3e>
 8013a36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013a3a:	4619      	mov	r1, r3
 8013a3c:	e727      	b.n	801388e <__ieee754_pow+0x3e>
 8013a3e:	0feb      	lsrs	r3, r5, #31
 8013a40:	3b01      	subs	r3, #1
 8013a42:	9306      	str	r3, [sp, #24]
 8013a44:	9a06      	ldr	r2, [sp, #24]
 8013a46:	9b04      	ldr	r3, [sp, #16]
 8013a48:	4313      	orrs	r3, r2
 8013a4a:	d102      	bne.n	8013a52 <__ieee754_pow+0x202>
 8013a4c:	4632      	mov	r2, r6
 8013a4e:	463b      	mov	r3, r7
 8013a50:	e7e6      	b.n	8013a20 <__ieee754_pow+0x1d0>
 8013a52:	4b19      	ldr	r3, [pc, #100]	; (8013ab8 <__ieee754_pow+0x268>)
 8013a54:	4598      	cmp	r8, r3
 8013a56:	f340 80fb 	ble.w	8013c50 <__ieee754_pow+0x400>
 8013a5a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8013a5e:	4598      	cmp	r8, r3
 8013a60:	4b13      	ldr	r3, [pc, #76]	; (8013ab0 <__ieee754_pow+0x260>)
 8013a62:	dd0c      	ble.n	8013a7e <__ieee754_pow+0x22e>
 8013a64:	429c      	cmp	r4, r3
 8013a66:	dc0f      	bgt.n	8013a88 <__ieee754_pow+0x238>
 8013a68:	f1b9 0f00 	cmp.w	r9, #0
 8013a6c:	da0f      	bge.n	8013a8e <__ieee754_pow+0x23e>
 8013a6e:	2000      	movs	r0, #0
 8013a70:	b009      	add	sp, #36	; 0x24
 8013a72:	ecbd 8b06 	vpop	{d8-d10}
 8013a76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a7a:	f000 bcc2 	b.w	8014402 <__math_oflow>
 8013a7e:	429c      	cmp	r4, r3
 8013a80:	dbf2      	blt.n	8013a68 <__ieee754_pow+0x218>
 8013a82:	4b0a      	ldr	r3, [pc, #40]	; (8013aac <__ieee754_pow+0x25c>)
 8013a84:	429c      	cmp	r4, r3
 8013a86:	dd19      	ble.n	8013abc <__ieee754_pow+0x26c>
 8013a88:	f1b9 0f00 	cmp.w	r9, #0
 8013a8c:	dcef      	bgt.n	8013a6e <__ieee754_pow+0x21e>
 8013a8e:	2000      	movs	r0, #0
 8013a90:	b009      	add	sp, #36	; 0x24
 8013a92:	ecbd 8b06 	vpop	{d8-d10}
 8013a96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a9a:	f000 bca9 	b.w	80143f0 <__math_uflow>
 8013a9e:	bf00      	nop
 8013aa0:	fff00000 	.word	0xfff00000
 8013aa4:	7ff00000 	.word	0x7ff00000
 8013aa8:	433fffff 	.word	0x433fffff
 8013aac:	3ff00000 	.word	0x3ff00000
 8013ab0:	3fefffff 	.word	0x3fefffff
 8013ab4:	3fe00000 	.word	0x3fe00000
 8013ab8:	41e00000 	.word	0x41e00000
 8013abc:	4b60      	ldr	r3, [pc, #384]	; (8013c40 <__ieee754_pow+0x3f0>)
 8013abe:	2200      	movs	r2, #0
 8013ac0:	f7ec fbbc 	bl	800023c <__aeabi_dsub>
 8013ac4:	a354      	add	r3, pc, #336	; (adr r3, 8013c18 <__ieee754_pow+0x3c8>)
 8013ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013aca:	4604      	mov	r4, r0
 8013acc:	460d      	mov	r5, r1
 8013ace:	f7ec fd6d 	bl	80005ac <__aeabi_dmul>
 8013ad2:	a353      	add	r3, pc, #332	; (adr r3, 8013c20 <__ieee754_pow+0x3d0>)
 8013ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ad8:	4606      	mov	r6, r0
 8013ada:	460f      	mov	r7, r1
 8013adc:	4620      	mov	r0, r4
 8013ade:	4629      	mov	r1, r5
 8013ae0:	f7ec fd64 	bl	80005ac <__aeabi_dmul>
 8013ae4:	4b57      	ldr	r3, [pc, #348]	; (8013c44 <__ieee754_pow+0x3f4>)
 8013ae6:	4682      	mov	sl, r0
 8013ae8:	468b      	mov	fp, r1
 8013aea:	2200      	movs	r2, #0
 8013aec:	4620      	mov	r0, r4
 8013aee:	4629      	mov	r1, r5
 8013af0:	f7ec fd5c 	bl	80005ac <__aeabi_dmul>
 8013af4:	4602      	mov	r2, r0
 8013af6:	460b      	mov	r3, r1
 8013af8:	a14b      	add	r1, pc, #300	; (adr r1, 8013c28 <__ieee754_pow+0x3d8>)
 8013afa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013afe:	f7ec fb9d 	bl	800023c <__aeabi_dsub>
 8013b02:	4622      	mov	r2, r4
 8013b04:	462b      	mov	r3, r5
 8013b06:	f7ec fd51 	bl	80005ac <__aeabi_dmul>
 8013b0a:	4602      	mov	r2, r0
 8013b0c:	460b      	mov	r3, r1
 8013b0e:	2000      	movs	r0, #0
 8013b10:	494d      	ldr	r1, [pc, #308]	; (8013c48 <__ieee754_pow+0x3f8>)
 8013b12:	f7ec fb93 	bl	800023c <__aeabi_dsub>
 8013b16:	4622      	mov	r2, r4
 8013b18:	4680      	mov	r8, r0
 8013b1a:	4689      	mov	r9, r1
 8013b1c:	462b      	mov	r3, r5
 8013b1e:	4620      	mov	r0, r4
 8013b20:	4629      	mov	r1, r5
 8013b22:	f7ec fd43 	bl	80005ac <__aeabi_dmul>
 8013b26:	4602      	mov	r2, r0
 8013b28:	460b      	mov	r3, r1
 8013b2a:	4640      	mov	r0, r8
 8013b2c:	4649      	mov	r1, r9
 8013b2e:	f7ec fd3d 	bl	80005ac <__aeabi_dmul>
 8013b32:	a33f      	add	r3, pc, #252	; (adr r3, 8013c30 <__ieee754_pow+0x3e0>)
 8013b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b38:	f7ec fd38 	bl	80005ac <__aeabi_dmul>
 8013b3c:	4602      	mov	r2, r0
 8013b3e:	460b      	mov	r3, r1
 8013b40:	4650      	mov	r0, sl
 8013b42:	4659      	mov	r1, fp
 8013b44:	f7ec fb7a 	bl	800023c <__aeabi_dsub>
 8013b48:	4602      	mov	r2, r0
 8013b4a:	460b      	mov	r3, r1
 8013b4c:	4680      	mov	r8, r0
 8013b4e:	4689      	mov	r9, r1
 8013b50:	4630      	mov	r0, r6
 8013b52:	4639      	mov	r1, r7
 8013b54:	f7ec fb74 	bl	8000240 <__adddf3>
 8013b58:	2000      	movs	r0, #0
 8013b5a:	4632      	mov	r2, r6
 8013b5c:	463b      	mov	r3, r7
 8013b5e:	4604      	mov	r4, r0
 8013b60:	460d      	mov	r5, r1
 8013b62:	f7ec fb6b 	bl	800023c <__aeabi_dsub>
 8013b66:	4602      	mov	r2, r0
 8013b68:	460b      	mov	r3, r1
 8013b6a:	4640      	mov	r0, r8
 8013b6c:	4649      	mov	r1, r9
 8013b6e:	f7ec fb65 	bl	800023c <__aeabi_dsub>
 8013b72:	9b04      	ldr	r3, [sp, #16]
 8013b74:	9a06      	ldr	r2, [sp, #24]
 8013b76:	3b01      	subs	r3, #1
 8013b78:	4313      	orrs	r3, r2
 8013b7a:	4682      	mov	sl, r0
 8013b7c:	468b      	mov	fp, r1
 8013b7e:	f040 81e7 	bne.w	8013f50 <__ieee754_pow+0x700>
 8013b82:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8013c38 <__ieee754_pow+0x3e8>
 8013b86:	eeb0 8a47 	vmov.f32	s16, s14
 8013b8a:	eef0 8a67 	vmov.f32	s17, s15
 8013b8e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8013b92:	2600      	movs	r6, #0
 8013b94:	4632      	mov	r2, r6
 8013b96:	463b      	mov	r3, r7
 8013b98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013b9c:	f7ec fb4e 	bl	800023c <__aeabi_dsub>
 8013ba0:	4622      	mov	r2, r4
 8013ba2:	462b      	mov	r3, r5
 8013ba4:	f7ec fd02 	bl	80005ac <__aeabi_dmul>
 8013ba8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013bac:	4680      	mov	r8, r0
 8013bae:	4689      	mov	r9, r1
 8013bb0:	4650      	mov	r0, sl
 8013bb2:	4659      	mov	r1, fp
 8013bb4:	f7ec fcfa 	bl	80005ac <__aeabi_dmul>
 8013bb8:	4602      	mov	r2, r0
 8013bba:	460b      	mov	r3, r1
 8013bbc:	4640      	mov	r0, r8
 8013bbe:	4649      	mov	r1, r9
 8013bc0:	f7ec fb3e 	bl	8000240 <__adddf3>
 8013bc4:	4632      	mov	r2, r6
 8013bc6:	463b      	mov	r3, r7
 8013bc8:	4680      	mov	r8, r0
 8013bca:	4689      	mov	r9, r1
 8013bcc:	4620      	mov	r0, r4
 8013bce:	4629      	mov	r1, r5
 8013bd0:	f7ec fcec 	bl	80005ac <__aeabi_dmul>
 8013bd4:	460b      	mov	r3, r1
 8013bd6:	4604      	mov	r4, r0
 8013bd8:	460d      	mov	r5, r1
 8013bda:	4602      	mov	r2, r0
 8013bdc:	4649      	mov	r1, r9
 8013bde:	4640      	mov	r0, r8
 8013be0:	f7ec fb2e 	bl	8000240 <__adddf3>
 8013be4:	4b19      	ldr	r3, [pc, #100]	; (8013c4c <__ieee754_pow+0x3fc>)
 8013be6:	4299      	cmp	r1, r3
 8013be8:	ec45 4b19 	vmov	d9, r4, r5
 8013bec:	4606      	mov	r6, r0
 8013bee:	460f      	mov	r7, r1
 8013bf0:	468b      	mov	fp, r1
 8013bf2:	f340 82f0 	ble.w	80141d6 <__ieee754_pow+0x986>
 8013bf6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8013bfa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8013bfe:	4303      	orrs	r3, r0
 8013c00:	f000 81e4 	beq.w	8013fcc <__ieee754_pow+0x77c>
 8013c04:	ec51 0b18 	vmov	r0, r1, d8
 8013c08:	2200      	movs	r2, #0
 8013c0a:	2300      	movs	r3, #0
 8013c0c:	f7ec ff40 	bl	8000a90 <__aeabi_dcmplt>
 8013c10:	3800      	subs	r0, #0
 8013c12:	bf18      	it	ne
 8013c14:	2001      	movne	r0, #1
 8013c16:	e72b      	b.n	8013a70 <__ieee754_pow+0x220>
 8013c18:	60000000 	.word	0x60000000
 8013c1c:	3ff71547 	.word	0x3ff71547
 8013c20:	f85ddf44 	.word	0xf85ddf44
 8013c24:	3e54ae0b 	.word	0x3e54ae0b
 8013c28:	55555555 	.word	0x55555555
 8013c2c:	3fd55555 	.word	0x3fd55555
 8013c30:	652b82fe 	.word	0x652b82fe
 8013c34:	3ff71547 	.word	0x3ff71547
 8013c38:	00000000 	.word	0x00000000
 8013c3c:	bff00000 	.word	0xbff00000
 8013c40:	3ff00000 	.word	0x3ff00000
 8013c44:	3fd00000 	.word	0x3fd00000
 8013c48:	3fe00000 	.word	0x3fe00000
 8013c4c:	408fffff 	.word	0x408fffff
 8013c50:	4bd5      	ldr	r3, [pc, #852]	; (8013fa8 <__ieee754_pow+0x758>)
 8013c52:	402b      	ands	r3, r5
 8013c54:	2200      	movs	r2, #0
 8013c56:	b92b      	cbnz	r3, 8013c64 <__ieee754_pow+0x414>
 8013c58:	4bd4      	ldr	r3, [pc, #848]	; (8013fac <__ieee754_pow+0x75c>)
 8013c5a:	f7ec fca7 	bl	80005ac <__aeabi_dmul>
 8013c5e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8013c62:	460c      	mov	r4, r1
 8013c64:	1523      	asrs	r3, r4, #20
 8013c66:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013c6a:	4413      	add	r3, r2
 8013c6c:	9305      	str	r3, [sp, #20]
 8013c6e:	4bd0      	ldr	r3, [pc, #832]	; (8013fb0 <__ieee754_pow+0x760>)
 8013c70:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8013c74:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8013c78:	429c      	cmp	r4, r3
 8013c7a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8013c7e:	dd08      	ble.n	8013c92 <__ieee754_pow+0x442>
 8013c80:	4bcc      	ldr	r3, [pc, #816]	; (8013fb4 <__ieee754_pow+0x764>)
 8013c82:	429c      	cmp	r4, r3
 8013c84:	f340 8162 	ble.w	8013f4c <__ieee754_pow+0x6fc>
 8013c88:	9b05      	ldr	r3, [sp, #20]
 8013c8a:	3301      	adds	r3, #1
 8013c8c:	9305      	str	r3, [sp, #20]
 8013c8e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8013c92:	2400      	movs	r4, #0
 8013c94:	00e3      	lsls	r3, r4, #3
 8013c96:	9307      	str	r3, [sp, #28]
 8013c98:	4bc7      	ldr	r3, [pc, #796]	; (8013fb8 <__ieee754_pow+0x768>)
 8013c9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013c9e:	ed93 7b00 	vldr	d7, [r3]
 8013ca2:	4629      	mov	r1, r5
 8013ca4:	ec53 2b17 	vmov	r2, r3, d7
 8013ca8:	eeb0 9a47 	vmov.f32	s18, s14
 8013cac:	eef0 9a67 	vmov.f32	s19, s15
 8013cb0:	4682      	mov	sl, r0
 8013cb2:	f7ec fac3 	bl	800023c <__aeabi_dsub>
 8013cb6:	4652      	mov	r2, sl
 8013cb8:	4606      	mov	r6, r0
 8013cba:	460f      	mov	r7, r1
 8013cbc:	462b      	mov	r3, r5
 8013cbe:	ec51 0b19 	vmov	r0, r1, d9
 8013cc2:	f7ec fabd 	bl	8000240 <__adddf3>
 8013cc6:	4602      	mov	r2, r0
 8013cc8:	460b      	mov	r3, r1
 8013cca:	2000      	movs	r0, #0
 8013ccc:	49bb      	ldr	r1, [pc, #748]	; (8013fbc <__ieee754_pow+0x76c>)
 8013cce:	f7ec fd97 	bl	8000800 <__aeabi_ddiv>
 8013cd2:	ec41 0b1a 	vmov	d10, r0, r1
 8013cd6:	4602      	mov	r2, r0
 8013cd8:	460b      	mov	r3, r1
 8013cda:	4630      	mov	r0, r6
 8013cdc:	4639      	mov	r1, r7
 8013cde:	f7ec fc65 	bl	80005ac <__aeabi_dmul>
 8013ce2:	2300      	movs	r3, #0
 8013ce4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013ce8:	9302      	str	r3, [sp, #8]
 8013cea:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8013cee:	46ab      	mov	fp, r5
 8013cf0:	106d      	asrs	r5, r5, #1
 8013cf2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8013cf6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8013cfa:	ec41 0b18 	vmov	d8, r0, r1
 8013cfe:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8013d02:	2200      	movs	r2, #0
 8013d04:	4640      	mov	r0, r8
 8013d06:	4649      	mov	r1, r9
 8013d08:	4614      	mov	r4, r2
 8013d0a:	461d      	mov	r5, r3
 8013d0c:	f7ec fc4e 	bl	80005ac <__aeabi_dmul>
 8013d10:	4602      	mov	r2, r0
 8013d12:	460b      	mov	r3, r1
 8013d14:	4630      	mov	r0, r6
 8013d16:	4639      	mov	r1, r7
 8013d18:	f7ec fa90 	bl	800023c <__aeabi_dsub>
 8013d1c:	ec53 2b19 	vmov	r2, r3, d9
 8013d20:	4606      	mov	r6, r0
 8013d22:	460f      	mov	r7, r1
 8013d24:	4620      	mov	r0, r4
 8013d26:	4629      	mov	r1, r5
 8013d28:	f7ec fa88 	bl	800023c <__aeabi_dsub>
 8013d2c:	4602      	mov	r2, r0
 8013d2e:	460b      	mov	r3, r1
 8013d30:	4650      	mov	r0, sl
 8013d32:	4659      	mov	r1, fp
 8013d34:	f7ec fa82 	bl	800023c <__aeabi_dsub>
 8013d38:	4642      	mov	r2, r8
 8013d3a:	464b      	mov	r3, r9
 8013d3c:	f7ec fc36 	bl	80005ac <__aeabi_dmul>
 8013d40:	4602      	mov	r2, r0
 8013d42:	460b      	mov	r3, r1
 8013d44:	4630      	mov	r0, r6
 8013d46:	4639      	mov	r1, r7
 8013d48:	f7ec fa78 	bl	800023c <__aeabi_dsub>
 8013d4c:	ec53 2b1a 	vmov	r2, r3, d10
 8013d50:	f7ec fc2c 	bl	80005ac <__aeabi_dmul>
 8013d54:	ec53 2b18 	vmov	r2, r3, d8
 8013d58:	ec41 0b19 	vmov	d9, r0, r1
 8013d5c:	ec51 0b18 	vmov	r0, r1, d8
 8013d60:	f7ec fc24 	bl	80005ac <__aeabi_dmul>
 8013d64:	a37c      	add	r3, pc, #496	; (adr r3, 8013f58 <__ieee754_pow+0x708>)
 8013d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d6a:	4604      	mov	r4, r0
 8013d6c:	460d      	mov	r5, r1
 8013d6e:	f7ec fc1d 	bl	80005ac <__aeabi_dmul>
 8013d72:	a37b      	add	r3, pc, #492	; (adr r3, 8013f60 <__ieee754_pow+0x710>)
 8013d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d78:	f7ec fa62 	bl	8000240 <__adddf3>
 8013d7c:	4622      	mov	r2, r4
 8013d7e:	462b      	mov	r3, r5
 8013d80:	f7ec fc14 	bl	80005ac <__aeabi_dmul>
 8013d84:	a378      	add	r3, pc, #480	; (adr r3, 8013f68 <__ieee754_pow+0x718>)
 8013d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d8a:	f7ec fa59 	bl	8000240 <__adddf3>
 8013d8e:	4622      	mov	r2, r4
 8013d90:	462b      	mov	r3, r5
 8013d92:	f7ec fc0b 	bl	80005ac <__aeabi_dmul>
 8013d96:	a376      	add	r3, pc, #472	; (adr r3, 8013f70 <__ieee754_pow+0x720>)
 8013d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d9c:	f7ec fa50 	bl	8000240 <__adddf3>
 8013da0:	4622      	mov	r2, r4
 8013da2:	462b      	mov	r3, r5
 8013da4:	f7ec fc02 	bl	80005ac <__aeabi_dmul>
 8013da8:	a373      	add	r3, pc, #460	; (adr r3, 8013f78 <__ieee754_pow+0x728>)
 8013daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dae:	f7ec fa47 	bl	8000240 <__adddf3>
 8013db2:	4622      	mov	r2, r4
 8013db4:	462b      	mov	r3, r5
 8013db6:	f7ec fbf9 	bl	80005ac <__aeabi_dmul>
 8013dba:	a371      	add	r3, pc, #452	; (adr r3, 8013f80 <__ieee754_pow+0x730>)
 8013dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dc0:	f7ec fa3e 	bl	8000240 <__adddf3>
 8013dc4:	4622      	mov	r2, r4
 8013dc6:	4606      	mov	r6, r0
 8013dc8:	460f      	mov	r7, r1
 8013dca:	462b      	mov	r3, r5
 8013dcc:	4620      	mov	r0, r4
 8013dce:	4629      	mov	r1, r5
 8013dd0:	f7ec fbec 	bl	80005ac <__aeabi_dmul>
 8013dd4:	4602      	mov	r2, r0
 8013dd6:	460b      	mov	r3, r1
 8013dd8:	4630      	mov	r0, r6
 8013dda:	4639      	mov	r1, r7
 8013ddc:	f7ec fbe6 	bl	80005ac <__aeabi_dmul>
 8013de0:	4642      	mov	r2, r8
 8013de2:	4604      	mov	r4, r0
 8013de4:	460d      	mov	r5, r1
 8013de6:	464b      	mov	r3, r9
 8013de8:	ec51 0b18 	vmov	r0, r1, d8
 8013dec:	f7ec fa28 	bl	8000240 <__adddf3>
 8013df0:	ec53 2b19 	vmov	r2, r3, d9
 8013df4:	f7ec fbda 	bl	80005ac <__aeabi_dmul>
 8013df8:	4622      	mov	r2, r4
 8013dfa:	462b      	mov	r3, r5
 8013dfc:	f7ec fa20 	bl	8000240 <__adddf3>
 8013e00:	4642      	mov	r2, r8
 8013e02:	4682      	mov	sl, r0
 8013e04:	468b      	mov	fp, r1
 8013e06:	464b      	mov	r3, r9
 8013e08:	4640      	mov	r0, r8
 8013e0a:	4649      	mov	r1, r9
 8013e0c:	f7ec fbce 	bl	80005ac <__aeabi_dmul>
 8013e10:	4b6b      	ldr	r3, [pc, #428]	; (8013fc0 <__ieee754_pow+0x770>)
 8013e12:	2200      	movs	r2, #0
 8013e14:	4606      	mov	r6, r0
 8013e16:	460f      	mov	r7, r1
 8013e18:	f7ec fa12 	bl	8000240 <__adddf3>
 8013e1c:	4652      	mov	r2, sl
 8013e1e:	465b      	mov	r3, fp
 8013e20:	f7ec fa0e 	bl	8000240 <__adddf3>
 8013e24:	2000      	movs	r0, #0
 8013e26:	4604      	mov	r4, r0
 8013e28:	460d      	mov	r5, r1
 8013e2a:	4602      	mov	r2, r0
 8013e2c:	460b      	mov	r3, r1
 8013e2e:	4640      	mov	r0, r8
 8013e30:	4649      	mov	r1, r9
 8013e32:	f7ec fbbb 	bl	80005ac <__aeabi_dmul>
 8013e36:	4b62      	ldr	r3, [pc, #392]	; (8013fc0 <__ieee754_pow+0x770>)
 8013e38:	4680      	mov	r8, r0
 8013e3a:	4689      	mov	r9, r1
 8013e3c:	2200      	movs	r2, #0
 8013e3e:	4620      	mov	r0, r4
 8013e40:	4629      	mov	r1, r5
 8013e42:	f7ec f9fb 	bl	800023c <__aeabi_dsub>
 8013e46:	4632      	mov	r2, r6
 8013e48:	463b      	mov	r3, r7
 8013e4a:	f7ec f9f7 	bl	800023c <__aeabi_dsub>
 8013e4e:	4602      	mov	r2, r0
 8013e50:	460b      	mov	r3, r1
 8013e52:	4650      	mov	r0, sl
 8013e54:	4659      	mov	r1, fp
 8013e56:	f7ec f9f1 	bl	800023c <__aeabi_dsub>
 8013e5a:	ec53 2b18 	vmov	r2, r3, d8
 8013e5e:	f7ec fba5 	bl	80005ac <__aeabi_dmul>
 8013e62:	4622      	mov	r2, r4
 8013e64:	4606      	mov	r6, r0
 8013e66:	460f      	mov	r7, r1
 8013e68:	462b      	mov	r3, r5
 8013e6a:	ec51 0b19 	vmov	r0, r1, d9
 8013e6e:	f7ec fb9d 	bl	80005ac <__aeabi_dmul>
 8013e72:	4602      	mov	r2, r0
 8013e74:	460b      	mov	r3, r1
 8013e76:	4630      	mov	r0, r6
 8013e78:	4639      	mov	r1, r7
 8013e7a:	f7ec f9e1 	bl	8000240 <__adddf3>
 8013e7e:	4606      	mov	r6, r0
 8013e80:	460f      	mov	r7, r1
 8013e82:	4602      	mov	r2, r0
 8013e84:	460b      	mov	r3, r1
 8013e86:	4640      	mov	r0, r8
 8013e88:	4649      	mov	r1, r9
 8013e8a:	f7ec f9d9 	bl	8000240 <__adddf3>
 8013e8e:	a33e      	add	r3, pc, #248	; (adr r3, 8013f88 <__ieee754_pow+0x738>)
 8013e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e94:	2000      	movs	r0, #0
 8013e96:	4604      	mov	r4, r0
 8013e98:	460d      	mov	r5, r1
 8013e9a:	f7ec fb87 	bl	80005ac <__aeabi_dmul>
 8013e9e:	4642      	mov	r2, r8
 8013ea0:	ec41 0b18 	vmov	d8, r0, r1
 8013ea4:	464b      	mov	r3, r9
 8013ea6:	4620      	mov	r0, r4
 8013ea8:	4629      	mov	r1, r5
 8013eaa:	f7ec f9c7 	bl	800023c <__aeabi_dsub>
 8013eae:	4602      	mov	r2, r0
 8013eb0:	460b      	mov	r3, r1
 8013eb2:	4630      	mov	r0, r6
 8013eb4:	4639      	mov	r1, r7
 8013eb6:	f7ec f9c1 	bl	800023c <__aeabi_dsub>
 8013eba:	a335      	add	r3, pc, #212	; (adr r3, 8013f90 <__ieee754_pow+0x740>)
 8013ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ec0:	f7ec fb74 	bl	80005ac <__aeabi_dmul>
 8013ec4:	a334      	add	r3, pc, #208	; (adr r3, 8013f98 <__ieee754_pow+0x748>)
 8013ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013eca:	4606      	mov	r6, r0
 8013ecc:	460f      	mov	r7, r1
 8013ece:	4620      	mov	r0, r4
 8013ed0:	4629      	mov	r1, r5
 8013ed2:	f7ec fb6b 	bl	80005ac <__aeabi_dmul>
 8013ed6:	4602      	mov	r2, r0
 8013ed8:	460b      	mov	r3, r1
 8013eda:	4630      	mov	r0, r6
 8013edc:	4639      	mov	r1, r7
 8013ede:	f7ec f9af 	bl	8000240 <__adddf3>
 8013ee2:	9a07      	ldr	r2, [sp, #28]
 8013ee4:	4b37      	ldr	r3, [pc, #220]	; (8013fc4 <__ieee754_pow+0x774>)
 8013ee6:	4413      	add	r3, r2
 8013ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013eec:	f7ec f9a8 	bl	8000240 <__adddf3>
 8013ef0:	4682      	mov	sl, r0
 8013ef2:	9805      	ldr	r0, [sp, #20]
 8013ef4:	468b      	mov	fp, r1
 8013ef6:	f7ec faef 	bl	80004d8 <__aeabi_i2d>
 8013efa:	9a07      	ldr	r2, [sp, #28]
 8013efc:	4b32      	ldr	r3, [pc, #200]	; (8013fc8 <__ieee754_pow+0x778>)
 8013efe:	4413      	add	r3, r2
 8013f00:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013f04:	4606      	mov	r6, r0
 8013f06:	460f      	mov	r7, r1
 8013f08:	4652      	mov	r2, sl
 8013f0a:	465b      	mov	r3, fp
 8013f0c:	ec51 0b18 	vmov	r0, r1, d8
 8013f10:	f7ec f996 	bl	8000240 <__adddf3>
 8013f14:	4642      	mov	r2, r8
 8013f16:	464b      	mov	r3, r9
 8013f18:	f7ec f992 	bl	8000240 <__adddf3>
 8013f1c:	4632      	mov	r2, r6
 8013f1e:	463b      	mov	r3, r7
 8013f20:	f7ec f98e 	bl	8000240 <__adddf3>
 8013f24:	2000      	movs	r0, #0
 8013f26:	4632      	mov	r2, r6
 8013f28:	463b      	mov	r3, r7
 8013f2a:	4604      	mov	r4, r0
 8013f2c:	460d      	mov	r5, r1
 8013f2e:	f7ec f985 	bl	800023c <__aeabi_dsub>
 8013f32:	4642      	mov	r2, r8
 8013f34:	464b      	mov	r3, r9
 8013f36:	f7ec f981 	bl	800023c <__aeabi_dsub>
 8013f3a:	ec53 2b18 	vmov	r2, r3, d8
 8013f3e:	f7ec f97d 	bl	800023c <__aeabi_dsub>
 8013f42:	4602      	mov	r2, r0
 8013f44:	460b      	mov	r3, r1
 8013f46:	4650      	mov	r0, sl
 8013f48:	4659      	mov	r1, fp
 8013f4a:	e610      	b.n	8013b6e <__ieee754_pow+0x31e>
 8013f4c:	2401      	movs	r4, #1
 8013f4e:	e6a1      	b.n	8013c94 <__ieee754_pow+0x444>
 8013f50:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8013fa0 <__ieee754_pow+0x750>
 8013f54:	e617      	b.n	8013b86 <__ieee754_pow+0x336>
 8013f56:	bf00      	nop
 8013f58:	4a454eef 	.word	0x4a454eef
 8013f5c:	3fca7e28 	.word	0x3fca7e28
 8013f60:	93c9db65 	.word	0x93c9db65
 8013f64:	3fcd864a 	.word	0x3fcd864a
 8013f68:	a91d4101 	.word	0xa91d4101
 8013f6c:	3fd17460 	.word	0x3fd17460
 8013f70:	518f264d 	.word	0x518f264d
 8013f74:	3fd55555 	.word	0x3fd55555
 8013f78:	db6fabff 	.word	0xdb6fabff
 8013f7c:	3fdb6db6 	.word	0x3fdb6db6
 8013f80:	33333303 	.word	0x33333303
 8013f84:	3fe33333 	.word	0x3fe33333
 8013f88:	e0000000 	.word	0xe0000000
 8013f8c:	3feec709 	.word	0x3feec709
 8013f90:	dc3a03fd 	.word	0xdc3a03fd
 8013f94:	3feec709 	.word	0x3feec709
 8013f98:	145b01f5 	.word	0x145b01f5
 8013f9c:	be3e2fe0 	.word	0xbe3e2fe0
 8013fa0:	00000000 	.word	0x00000000
 8013fa4:	3ff00000 	.word	0x3ff00000
 8013fa8:	7ff00000 	.word	0x7ff00000
 8013fac:	43400000 	.word	0x43400000
 8013fb0:	0003988e 	.word	0x0003988e
 8013fb4:	000bb679 	.word	0x000bb679
 8013fb8:	08014770 	.word	0x08014770
 8013fbc:	3ff00000 	.word	0x3ff00000
 8013fc0:	40080000 	.word	0x40080000
 8013fc4:	08014790 	.word	0x08014790
 8013fc8:	08014780 	.word	0x08014780
 8013fcc:	a3b3      	add	r3, pc, #716	; (adr r3, 801429c <__ieee754_pow+0xa4c>)
 8013fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fd2:	4640      	mov	r0, r8
 8013fd4:	4649      	mov	r1, r9
 8013fd6:	f7ec f933 	bl	8000240 <__adddf3>
 8013fda:	4622      	mov	r2, r4
 8013fdc:	ec41 0b1a 	vmov	d10, r0, r1
 8013fe0:	462b      	mov	r3, r5
 8013fe2:	4630      	mov	r0, r6
 8013fe4:	4639      	mov	r1, r7
 8013fe6:	f7ec f929 	bl	800023c <__aeabi_dsub>
 8013fea:	4602      	mov	r2, r0
 8013fec:	460b      	mov	r3, r1
 8013fee:	ec51 0b1a 	vmov	r0, r1, d10
 8013ff2:	f7ec fd6b 	bl	8000acc <__aeabi_dcmpgt>
 8013ff6:	2800      	cmp	r0, #0
 8013ff8:	f47f ae04 	bne.w	8013c04 <__ieee754_pow+0x3b4>
 8013ffc:	4aa2      	ldr	r2, [pc, #648]	; (8014288 <__ieee754_pow+0xa38>)
 8013ffe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014002:	4293      	cmp	r3, r2
 8014004:	f340 8107 	ble.w	8014216 <__ieee754_pow+0x9c6>
 8014008:	151b      	asrs	r3, r3, #20
 801400a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801400e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8014012:	fa4a fa03 	asr.w	sl, sl, r3
 8014016:	44da      	add	sl, fp
 8014018:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801401c:	489b      	ldr	r0, [pc, #620]	; (801428c <__ieee754_pow+0xa3c>)
 801401e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8014022:	4108      	asrs	r0, r1
 8014024:	ea00 030a 	and.w	r3, r0, sl
 8014028:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801402c:	f1c1 0114 	rsb	r1, r1, #20
 8014030:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8014034:	fa4a fa01 	asr.w	sl, sl, r1
 8014038:	f1bb 0f00 	cmp.w	fp, #0
 801403c:	f04f 0200 	mov.w	r2, #0
 8014040:	4620      	mov	r0, r4
 8014042:	4629      	mov	r1, r5
 8014044:	bfb8      	it	lt
 8014046:	f1ca 0a00 	rsblt	sl, sl, #0
 801404a:	f7ec f8f7 	bl	800023c <__aeabi_dsub>
 801404e:	ec41 0b19 	vmov	d9, r0, r1
 8014052:	4642      	mov	r2, r8
 8014054:	464b      	mov	r3, r9
 8014056:	ec51 0b19 	vmov	r0, r1, d9
 801405a:	f7ec f8f1 	bl	8000240 <__adddf3>
 801405e:	a37a      	add	r3, pc, #488	; (adr r3, 8014248 <__ieee754_pow+0x9f8>)
 8014060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014064:	2000      	movs	r0, #0
 8014066:	4604      	mov	r4, r0
 8014068:	460d      	mov	r5, r1
 801406a:	f7ec fa9f 	bl	80005ac <__aeabi_dmul>
 801406e:	ec53 2b19 	vmov	r2, r3, d9
 8014072:	4606      	mov	r6, r0
 8014074:	460f      	mov	r7, r1
 8014076:	4620      	mov	r0, r4
 8014078:	4629      	mov	r1, r5
 801407a:	f7ec f8df 	bl	800023c <__aeabi_dsub>
 801407e:	4602      	mov	r2, r0
 8014080:	460b      	mov	r3, r1
 8014082:	4640      	mov	r0, r8
 8014084:	4649      	mov	r1, r9
 8014086:	f7ec f8d9 	bl	800023c <__aeabi_dsub>
 801408a:	a371      	add	r3, pc, #452	; (adr r3, 8014250 <__ieee754_pow+0xa00>)
 801408c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014090:	f7ec fa8c 	bl	80005ac <__aeabi_dmul>
 8014094:	a370      	add	r3, pc, #448	; (adr r3, 8014258 <__ieee754_pow+0xa08>)
 8014096:	e9d3 2300 	ldrd	r2, r3, [r3]
 801409a:	4680      	mov	r8, r0
 801409c:	4689      	mov	r9, r1
 801409e:	4620      	mov	r0, r4
 80140a0:	4629      	mov	r1, r5
 80140a2:	f7ec fa83 	bl	80005ac <__aeabi_dmul>
 80140a6:	4602      	mov	r2, r0
 80140a8:	460b      	mov	r3, r1
 80140aa:	4640      	mov	r0, r8
 80140ac:	4649      	mov	r1, r9
 80140ae:	f7ec f8c7 	bl	8000240 <__adddf3>
 80140b2:	4604      	mov	r4, r0
 80140b4:	460d      	mov	r5, r1
 80140b6:	4602      	mov	r2, r0
 80140b8:	460b      	mov	r3, r1
 80140ba:	4630      	mov	r0, r6
 80140bc:	4639      	mov	r1, r7
 80140be:	f7ec f8bf 	bl	8000240 <__adddf3>
 80140c2:	4632      	mov	r2, r6
 80140c4:	463b      	mov	r3, r7
 80140c6:	4680      	mov	r8, r0
 80140c8:	4689      	mov	r9, r1
 80140ca:	f7ec f8b7 	bl	800023c <__aeabi_dsub>
 80140ce:	4602      	mov	r2, r0
 80140d0:	460b      	mov	r3, r1
 80140d2:	4620      	mov	r0, r4
 80140d4:	4629      	mov	r1, r5
 80140d6:	f7ec f8b1 	bl	800023c <__aeabi_dsub>
 80140da:	4642      	mov	r2, r8
 80140dc:	4606      	mov	r6, r0
 80140de:	460f      	mov	r7, r1
 80140e0:	464b      	mov	r3, r9
 80140e2:	4640      	mov	r0, r8
 80140e4:	4649      	mov	r1, r9
 80140e6:	f7ec fa61 	bl	80005ac <__aeabi_dmul>
 80140ea:	a35d      	add	r3, pc, #372	; (adr r3, 8014260 <__ieee754_pow+0xa10>)
 80140ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140f0:	4604      	mov	r4, r0
 80140f2:	460d      	mov	r5, r1
 80140f4:	f7ec fa5a 	bl	80005ac <__aeabi_dmul>
 80140f8:	a35b      	add	r3, pc, #364	; (adr r3, 8014268 <__ieee754_pow+0xa18>)
 80140fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140fe:	f7ec f89d 	bl	800023c <__aeabi_dsub>
 8014102:	4622      	mov	r2, r4
 8014104:	462b      	mov	r3, r5
 8014106:	f7ec fa51 	bl	80005ac <__aeabi_dmul>
 801410a:	a359      	add	r3, pc, #356	; (adr r3, 8014270 <__ieee754_pow+0xa20>)
 801410c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014110:	f7ec f896 	bl	8000240 <__adddf3>
 8014114:	4622      	mov	r2, r4
 8014116:	462b      	mov	r3, r5
 8014118:	f7ec fa48 	bl	80005ac <__aeabi_dmul>
 801411c:	a356      	add	r3, pc, #344	; (adr r3, 8014278 <__ieee754_pow+0xa28>)
 801411e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014122:	f7ec f88b 	bl	800023c <__aeabi_dsub>
 8014126:	4622      	mov	r2, r4
 8014128:	462b      	mov	r3, r5
 801412a:	f7ec fa3f 	bl	80005ac <__aeabi_dmul>
 801412e:	a354      	add	r3, pc, #336	; (adr r3, 8014280 <__ieee754_pow+0xa30>)
 8014130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014134:	f7ec f884 	bl	8000240 <__adddf3>
 8014138:	4622      	mov	r2, r4
 801413a:	462b      	mov	r3, r5
 801413c:	f7ec fa36 	bl	80005ac <__aeabi_dmul>
 8014140:	4602      	mov	r2, r0
 8014142:	460b      	mov	r3, r1
 8014144:	4640      	mov	r0, r8
 8014146:	4649      	mov	r1, r9
 8014148:	f7ec f878 	bl	800023c <__aeabi_dsub>
 801414c:	4604      	mov	r4, r0
 801414e:	460d      	mov	r5, r1
 8014150:	4602      	mov	r2, r0
 8014152:	460b      	mov	r3, r1
 8014154:	4640      	mov	r0, r8
 8014156:	4649      	mov	r1, r9
 8014158:	f7ec fa28 	bl	80005ac <__aeabi_dmul>
 801415c:	2200      	movs	r2, #0
 801415e:	ec41 0b19 	vmov	d9, r0, r1
 8014162:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014166:	4620      	mov	r0, r4
 8014168:	4629      	mov	r1, r5
 801416a:	f7ec f867 	bl	800023c <__aeabi_dsub>
 801416e:	4602      	mov	r2, r0
 8014170:	460b      	mov	r3, r1
 8014172:	ec51 0b19 	vmov	r0, r1, d9
 8014176:	f7ec fb43 	bl	8000800 <__aeabi_ddiv>
 801417a:	4632      	mov	r2, r6
 801417c:	4604      	mov	r4, r0
 801417e:	460d      	mov	r5, r1
 8014180:	463b      	mov	r3, r7
 8014182:	4640      	mov	r0, r8
 8014184:	4649      	mov	r1, r9
 8014186:	f7ec fa11 	bl	80005ac <__aeabi_dmul>
 801418a:	4632      	mov	r2, r6
 801418c:	463b      	mov	r3, r7
 801418e:	f7ec f857 	bl	8000240 <__adddf3>
 8014192:	4602      	mov	r2, r0
 8014194:	460b      	mov	r3, r1
 8014196:	4620      	mov	r0, r4
 8014198:	4629      	mov	r1, r5
 801419a:	f7ec f84f 	bl	800023c <__aeabi_dsub>
 801419e:	4642      	mov	r2, r8
 80141a0:	464b      	mov	r3, r9
 80141a2:	f7ec f84b 	bl	800023c <__aeabi_dsub>
 80141a6:	460b      	mov	r3, r1
 80141a8:	4602      	mov	r2, r0
 80141aa:	4939      	ldr	r1, [pc, #228]	; (8014290 <__ieee754_pow+0xa40>)
 80141ac:	2000      	movs	r0, #0
 80141ae:	f7ec f845 	bl	800023c <__aeabi_dsub>
 80141b2:	ec41 0b10 	vmov	d0, r0, r1
 80141b6:	ee10 3a90 	vmov	r3, s1
 80141ba:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80141be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80141c2:	da2b      	bge.n	801421c <__ieee754_pow+0x9cc>
 80141c4:	4650      	mov	r0, sl
 80141c6:	f000 f877 	bl	80142b8 <scalbn>
 80141ca:	ec51 0b10 	vmov	r0, r1, d0
 80141ce:	ec53 2b18 	vmov	r2, r3, d8
 80141d2:	f7ff bbee 	b.w	80139b2 <__ieee754_pow+0x162>
 80141d6:	4b2f      	ldr	r3, [pc, #188]	; (8014294 <__ieee754_pow+0xa44>)
 80141d8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80141dc:	429e      	cmp	r6, r3
 80141de:	f77f af0d 	ble.w	8013ffc <__ieee754_pow+0x7ac>
 80141e2:	4b2d      	ldr	r3, [pc, #180]	; (8014298 <__ieee754_pow+0xa48>)
 80141e4:	440b      	add	r3, r1
 80141e6:	4303      	orrs	r3, r0
 80141e8:	d009      	beq.n	80141fe <__ieee754_pow+0x9ae>
 80141ea:	ec51 0b18 	vmov	r0, r1, d8
 80141ee:	2200      	movs	r2, #0
 80141f0:	2300      	movs	r3, #0
 80141f2:	f7ec fc4d 	bl	8000a90 <__aeabi_dcmplt>
 80141f6:	3800      	subs	r0, #0
 80141f8:	bf18      	it	ne
 80141fa:	2001      	movne	r0, #1
 80141fc:	e448      	b.n	8013a90 <__ieee754_pow+0x240>
 80141fe:	4622      	mov	r2, r4
 8014200:	462b      	mov	r3, r5
 8014202:	f7ec f81b 	bl	800023c <__aeabi_dsub>
 8014206:	4642      	mov	r2, r8
 8014208:	464b      	mov	r3, r9
 801420a:	f7ec fc55 	bl	8000ab8 <__aeabi_dcmpge>
 801420e:	2800      	cmp	r0, #0
 8014210:	f43f aef4 	beq.w	8013ffc <__ieee754_pow+0x7ac>
 8014214:	e7e9      	b.n	80141ea <__ieee754_pow+0x99a>
 8014216:	f04f 0a00 	mov.w	sl, #0
 801421a:	e71a      	b.n	8014052 <__ieee754_pow+0x802>
 801421c:	ec51 0b10 	vmov	r0, r1, d0
 8014220:	4619      	mov	r1, r3
 8014222:	e7d4      	b.n	80141ce <__ieee754_pow+0x97e>
 8014224:	491a      	ldr	r1, [pc, #104]	; (8014290 <__ieee754_pow+0xa40>)
 8014226:	2000      	movs	r0, #0
 8014228:	f7ff bb31 	b.w	801388e <__ieee754_pow+0x3e>
 801422c:	2000      	movs	r0, #0
 801422e:	2100      	movs	r1, #0
 8014230:	f7ff bb2d 	b.w	801388e <__ieee754_pow+0x3e>
 8014234:	4630      	mov	r0, r6
 8014236:	4639      	mov	r1, r7
 8014238:	f7ff bb29 	b.w	801388e <__ieee754_pow+0x3e>
 801423c:	9204      	str	r2, [sp, #16]
 801423e:	f7ff bb7b 	b.w	8013938 <__ieee754_pow+0xe8>
 8014242:	2300      	movs	r3, #0
 8014244:	f7ff bb65 	b.w	8013912 <__ieee754_pow+0xc2>
 8014248:	00000000 	.word	0x00000000
 801424c:	3fe62e43 	.word	0x3fe62e43
 8014250:	fefa39ef 	.word	0xfefa39ef
 8014254:	3fe62e42 	.word	0x3fe62e42
 8014258:	0ca86c39 	.word	0x0ca86c39
 801425c:	be205c61 	.word	0xbe205c61
 8014260:	72bea4d0 	.word	0x72bea4d0
 8014264:	3e663769 	.word	0x3e663769
 8014268:	c5d26bf1 	.word	0xc5d26bf1
 801426c:	3ebbbd41 	.word	0x3ebbbd41
 8014270:	af25de2c 	.word	0xaf25de2c
 8014274:	3f11566a 	.word	0x3f11566a
 8014278:	16bebd93 	.word	0x16bebd93
 801427c:	3f66c16c 	.word	0x3f66c16c
 8014280:	5555553e 	.word	0x5555553e
 8014284:	3fc55555 	.word	0x3fc55555
 8014288:	3fe00000 	.word	0x3fe00000
 801428c:	fff00000 	.word	0xfff00000
 8014290:	3ff00000 	.word	0x3ff00000
 8014294:	4090cbff 	.word	0x4090cbff
 8014298:	3f6f3400 	.word	0x3f6f3400
 801429c:	652b82fe 	.word	0x652b82fe
 80142a0:	3c971547 	.word	0x3c971547

080142a4 <fabs>:
 80142a4:	ec51 0b10 	vmov	r0, r1, d0
 80142a8:	ee10 2a10 	vmov	r2, s0
 80142ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80142b0:	ec43 2b10 	vmov	d0, r2, r3
 80142b4:	4770      	bx	lr
	...

080142b8 <scalbn>:
 80142b8:	b570      	push	{r4, r5, r6, lr}
 80142ba:	ec55 4b10 	vmov	r4, r5, d0
 80142be:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80142c2:	4606      	mov	r6, r0
 80142c4:	462b      	mov	r3, r5
 80142c6:	b999      	cbnz	r1, 80142f0 <scalbn+0x38>
 80142c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80142cc:	4323      	orrs	r3, r4
 80142ce:	d03f      	beq.n	8014350 <scalbn+0x98>
 80142d0:	4b35      	ldr	r3, [pc, #212]	; (80143a8 <scalbn+0xf0>)
 80142d2:	4629      	mov	r1, r5
 80142d4:	ee10 0a10 	vmov	r0, s0
 80142d8:	2200      	movs	r2, #0
 80142da:	f7ec f967 	bl	80005ac <__aeabi_dmul>
 80142de:	4b33      	ldr	r3, [pc, #204]	; (80143ac <scalbn+0xf4>)
 80142e0:	429e      	cmp	r6, r3
 80142e2:	4604      	mov	r4, r0
 80142e4:	460d      	mov	r5, r1
 80142e6:	da10      	bge.n	801430a <scalbn+0x52>
 80142e8:	a327      	add	r3, pc, #156	; (adr r3, 8014388 <scalbn+0xd0>)
 80142ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142ee:	e01f      	b.n	8014330 <scalbn+0x78>
 80142f0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80142f4:	4291      	cmp	r1, r2
 80142f6:	d10c      	bne.n	8014312 <scalbn+0x5a>
 80142f8:	ee10 2a10 	vmov	r2, s0
 80142fc:	4620      	mov	r0, r4
 80142fe:	4629      	mov	r1, r5
 8014300:	f7eb ff9e 	bl	8000240 <__adddf3>
 8014304:	4604      	mov	r4, r0
 8014306:	460d      	mov	r5, r1
 8014308:	e022      	b.n	8014350 <scalbn+0x98>
 801430a:	460b      	mov	r3, r1
 801430c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8014310:	3936      	subs	r1, #54	; 0x36
 8014312:	f24c 3250 	movw	r2, #50000	; 0xc350
 8014316:	4296      	cmp	r6, r2
 8014318:	dd0d      	ble.n	8014336 <scalbn+0x7e>
 801431a:	2d00      	cmp	r5, #0
 801431c:	a11c      	add	r1, pc, #112	; (adr r1, 8014390 <scalbn+0xd8>)
 801431e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014322:	da02      	bge.n	801432a <scalbn+0x72>
 8014324:	a11c      	add	r1, pc, #112	; (adr r1, 8014398 <scalbn+0xe0>)
 8014326:	e9d1 0100 	ldrd	r0, r1, [r1]
 801432a:	a319      	add	r3, pc, #100	; (adr r3, 8014390 <scalbn+0xd8>)
 801432c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014330:	f7ec f93c 	bl	80005ac <__aeabi_dmul>
 8014334:	e7e6      	b.n	8014304 <scalbn+0x4c>
 8014336:	1872      	adds	r2, r6, r1
 8014338:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801433c:	428a      	cmp	r2, r1
 801433e:	dcec      	bgt.n	801431a <scalbn+0x62>
 8014340:	2a00      	cmp	r2, #0
 8014342:	dd08      	ble.n	8014356 <scalbn+0x9e>
 8014344:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014348:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801434c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014350:	ec45 4b10 	vmov	d0, r4, r5
 8014354:	bd70      	pop	{r4, r5, r6, pc}
 8014356:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801435a:	da08      	bge.n	801436e <scalbn+0xb6>
 801435c:	2d00      	cmp	r5, #0
 801435e:	a10a      	add	r1, pc, #40	; (adr r1, 8014388 <scalbn+0xd0>)
 8014360:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014364:	dac0      	bge.n	80142e8 <scalbn+0x30>
 8014366:	a10e      	add	r1, pc, #56	; (adr r1, 80143a0 <scalbn+0xe8>)
 8014368:	e9d1 0100 	ldrd	r0, r1, [r1]
 801436c:	e7bc      	b.n	80142e8 <scalbn+0x30>
 801436e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014372:	3236      	adds	r2, #54	; 0x36
 8014374:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014378:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801437c:	4620      	mov	r0, r4
 801437e:	4b0c      	ldr	r3, [pc, #48]	; (80143b0 <scalbn+0xf8>)
 8014380:	2200      	movs	r2, #0
 8014382:	e7d5      	b.n	8014330 <scalbn+0x78>
 8014384:	f3af 8000 	nop.w
 8014388:	c2f8f359 	.word	0xc2f8f359
 801438c:	01a56e1f 	.word	0x01a56e1f
 8014390:	8800759c 	.word	0x8800759c
 8014394:	7e37e43c 	.word	0x7e37e43c
 8014398:	8800759c 	.word	0x8800759c
 801439c:	fe37e43c 	.word	0xfe37e43c
 80143a0:	c2f8f359 	.word	0xc2f8f359
 80143a4:	81a56e1f 	.word	0x81a56e1f
 80143a8:	43500000 	.word	0x43500000
 80143ac:	ffff3cb0 	.word	0xffff3cb0
 80143b0:	3c900000 	.word	0x3c900000

080143b4 <with_errno>:
 80143b4:	b570      	push	{r4, r5, r6, lr}
 80143b6:	4604      	mov	r4, r0
 80143b8:	460d      	mov	r5, r1
 80143ba:	4616      	mov	r6, r2
 80143bc:	f7ff f938 	bl	8013630 <__errno>
 80143c0:	4629      	mov	r1, r5
 80143c2:	6006      	str	r6, [r0, #0]
 80143c4:	4620      	mov	r0, r4
 80143c6:	bd70      	pop	{r4, r5, r6, pc}

080143c8 <xflow>:
 80143c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80143ca:	4614      	mov	r4, r2
 80143cc:	461d      	mov	r5, r3
 80143ce:	b108      	cbz	r0, 80143d4 <xflow+0xc>
 80143d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80143d4:	e9cd 2300 	strd	r2, r3, [sp]
 80143d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80143dc:	4620      	mov	r0, r4
 80143de:	4629      	mov	r1, r5
 80143e0:	f7ec f8e4 	bl	80005ac <__aeabi_dmul>
 80143e4:	2222      	movs	r2, #34	; 0x22
 80143e6:	b003      	add	sp, #12
 80143e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80143ec:	f7ff bfe2 	b.w	80143b4 <with_errno>

080143f0 <__math_uflow>:
 80143f0:	b508      	push	{r3, lr}
 80143f2:	2200      	movs	r2, #0
 80143f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80143f8:	f7ff ffe6 	bl	80143c8 <xflow>
 80143fc:	ec41 0b10 	vmov	d0, r0, r1
 8014400:	bd08      	pop	{r3, pc}

08014402 <__math_oflow>:
 8014402:	b508      	push	{r3, lr}
 8014404:	2200      	movs	r2, #0
 8014406:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801440a:	f7ff ffdd 	bl	80143c8 <xflow>
 801440e:	ec41 0b10 	vmov	d0, r0, r1
 8014412:	bd08      	pop	{r3, pc}

08014414 <__ieee754_sqrt>:
 8014414:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014418:	ec55 4b10 	vmov	r4, r5, d0
 801441c:	4e67      	ldr	r6, [pc, #412]	; (80145bc <__ieee754_sqrt+0x1a8>)
 801441e:	43ae      	bics	r6, r5
 8014420:	ee10 0a10 	vmov	r0, s0
 8014424:	ee10 2a10 	vmov	r2, s0
 8014428:	4629      	mov	r1, r5
 801442a:	462b      	mov	r3, r5
 801442c:	d10d      	bne.n	801444a <__ieee754_sqrt+0x36>
 801442e:	f7ec f8bd 	bl	80005ac <__aeabi_dmul>
 8014432:	4602      	mov	r2, r0
 8014434:	460b      	mov	r3, r1
 8014436:	4620      	mov	r0, r4
 8014438:	4629      	mov	r1, r5
 801443a:	f7eb ff01 	bl	8000240 <__adddf3>
 801443e:	4604      	mov	r4, r0
 8014440:	460d      	mov	r5, r1
 8014442:	ec45 4b10 	vmov	d0, r4, r5
 8014446:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801444a:	2d00      	cmp	r5, #0
 801444c:	dc0b      	bgt.n	8014466 <__ieee754_sqrt+0x52>
 801444e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014452:	4326      	orrs	r6, r4
 8014454:	d0f5      	beq.n	8014442 <__ieee754_sqrt+0x2e>
 8014456:	b135      	cbz	r5, 8014466 <__ieee754_sqrt+0x52>
 8014458:	f7eb fef0 	bl	800023c <__aeabi_dsub>
 801445c:	4602      	mov	r2, r0
 801445e:	460b      	mov	r3, r1
 8014460:	f7ec f9ce 	bl	8000800 <__aeabi_ddiv>
 8014464:	e7eb      	b.n	801443e <__ieee754_sqrt+0x2a>
 8014466:	1509      	asrs	r1, r1, #20
 8014468:	f000 808d 	beq.w	8014586 <__ieee754_sqrt+0x172>
 801446c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014470:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8014474:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014478:	07c9      	lsls	r1, r1, #31
 801447a:	bf5c      	itt	pl
 801447c:	005b      	lslpl	r3, r3, #1
 801447e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8014482:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014486:	bf58      	it	pl
 8014488:	0052      	lslpl	r2, r2, #1
 801448a:	2500      	movs	r5, #0
 801448c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8014490:	1076      	asrs	r6, r6, #1
 8014492:	0052      	lsls	r2, r2, #1
 8014494:	f04f 0e16 	mov.w	lr, #22
 8014498:	46ac      	mov	ip, r5
 801449a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801449e:	eb0c 0001 	add.w	r0, ip, r1
 80144a2:	4298      	cmp	r0, r3
 80144a4:	bfde      	ittt	le
 80144a6:	1a1b      	suble	r3, r3, r0
 80144a8:	eb00 0c01 	addle.w	ip, r0, r1
 80144ac:	186d      	addle	r5, r5, r1
 80144ae:	005b      	lsls	r3, r3, #1
 80144b0:	f1be 0e01 	subs.w	lr, lr, #1
 80144b4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80144b8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80144bc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80144c0:	d1ed      	bne.n	801449e <__ieee754_sqrt+0x8a>
 80144c2:	4674      	mov	r4, lr
 80144c4:	2720      	movs	r7, #32
 80144c6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80144ca:	4563      	cmp	r3, ip
 80144cc:	eb01 000e 	add.w	r0, r1, lr
 80144d0:	dc02      	bgt.n	80144d8 <__ieee754_sqrt+0xc4>
 80144d2:	d113      	bne.n	80144fc <__ieee754_sqrt+0xe8>
 80144d4:	4290      	cmp	r0, r2
 80144d6:	d811      	bhi.n	80144fc <__ieee754_sqrt+0xe8>
 80144d8:	2800      	cmp	r0, #0
 80144da:	eb00 0e01 	add.w	lr, r0, r1
 80144de:	da57      	bge.n	8014590 <__ieee754_sqrt+0x17c>
 80144e0:	f1be 0f00 	cmp.w	lr, #0
 80144e4:	db54      	blt.n	8014590 <__ieee754_sqrt+0x17c>
 80144e6:	f10c 0801 	add.w	r8, ip, #1
 80144ea:	eba3 030c 	sub.w	r3, r3, ip
 80144ee:	4290      	cmp	r0, r2
 80144f0:	bf88      	it	hi
 80144f2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80144f6:	1a12      	subs	r2, r2, r0
 80144f8:	440c      	add	r4, r1
 80144fa:	46c4      	mov	ip, r8
 80144fc:	005b      	lsls	r3, r3, #1
 80144fe:	3f01      	subs	r7, #1
 8014500:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8014504:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8014508:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801450c:	d1dd      	bne.n	80144ca <__ieee754_sqrt+0xb6>
 801450e:	4313      	orrs	r3, r2
 8014510:	d01b      	beq.n	801454a <__ieee754_sqrt+0x136>
 8014512:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80145c0 <__ieee754_sqrt+0x1ac>
 8014516:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80145c4 <__ieee754_sqrt+0x1b0>
 801451a:	e9da 0100 	ldrd	r0, r1, [sl]
 801451e:	e9db 2300 	ldrd	r2, r3, [fp]
 8014522:	f7eb fe8b 	bl	800023c <__aeabi_dsub>
 8014526:	e9da 8900 	ldrd	r8, r9, [sl]
 801452a:	4602      	mov	r2, r0
 801452c:	460b      	mov	r3, r1
 801452e:	4640      	mov	r0, r8
 8014530:	4649      	mov	r1, r9
 8014532:	f7ec fab7 	bl	8000aa4 <__aeabi_dcmple>
 8014536:	b140      	cbz	r0, 801454a <__ieee754_sqrt+0x136>
 8014538:	f1b4 3fff 	cmp.w	r4, #4294967295
 801453c:	e9da 0100 	ldrd	r0, r1, [sl]
 8014540:	e9db 2300 	ldrd	r2, r3, [fp]
 8014544:	d126      	bne.n	8014594 <__ieee754_sqrt+0x180>
 8014546:	3501      	adds	r5, #1
 8014548:	463c      	mov	r4, r7
 801454a:	106a      	asrs	r2, r5, #1
 801454c:	0863      	lsrs	r3, r4, #1
 801454e:	07e9      	lsls	r1, r5, #31
 8014550:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8014554:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8014558:	bf48      	it	mi
 801455a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801455e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8014562:	461c      	mov	r4, r3
 8014564:	e76d      	b.n	8014442 <__ieee754_sqrt+0x2e>
 8014566:	0ad3      	lsrs	r3, r2, #11
 8014568:	3815      	subs	r0, #21
 801456a:	0552      	lsls	r2, r2, #21
 801456c:	2b00      	cmp	r3, #0
 801456e:	d0fa      	beq.n	8014566 <__ieee754_sqrt+0x152>
 8014570:	02dc      	lsls	r4, r3, #11
 8014572:	d50a      	bpl.n	801458a <__ieee754_sqrt+0x176>
 8014574:	f1c1 0420 	rsb	r4, r1, #32
 8014578:	fa22 f404 	lsr.w	r4, r2, r4
 801457c:	1e4d      	subs	r5, r1, #1
 801457e:	408a      	lsls	r2, r1
 8014580:	4323      	orrs	r3, r4
 8014582:	1b41      	subs	r1, r0, r5
 8014584:	e772      	b.n	801446c <__ieee754_sqrt+0x58>
 8014586:	4608      	mov	r0, r1
 8014588:	e7f0      	b.n	801456c <__ieee754_sqrt+0x158>
 801458a:	005b      	lsls	r3, r3, #1
 801458c:	3101      	adds	r1, #1
 801458e:	e7ef      	b.n	8014570 <__ieee754_sqrt+0x15c>
 8014590:	46e0      	mov	r8, ip
 8014592:	e7aa      	b.n	80144ea <__ieee754_sqrt+0xd6>
 8014594:	f7eb fe54 	bl	8000240 <__adddf3>
 8014598:	e9da 8900 	ldrd	r8, r9, [sl]
 801459c:	4602      	mov	r2, r0
 801459e:	460b      	mov	r3, r1
 80145a0:	4640      	mov	r0, r8
 80145a2:	4649      	mov	r1, r9
 80145a4:	f7ec fa74 	bl	8000a90 <__aeabi_dcmplt>
 80145a8:	b120      	cbz	r0, 80145b4 <__ieee754_sqrt+0x1a0>
 80145aa:	1ca0      	adds	r0, r4, #2
 80145ac:	bf08      	it	eq
 80145ae:	3501      	addeq	r5, #1
 80145b0:	3402      	adds	r4, #2
 80145b2:	e7ca      	b.n	801454a <__ieee754_sqrt+0x136>
 80145b4:	3401      	adds	r4, #1
 80145b6:	f024 0401 	bic.w	r4, r4, #1
 80145ba:	e7c6      	b.n	801454a <__ieee754_sqrt+0x136>
 80145bc:	7ff00000 	.word	0x7ff00000
 80145c0:	200001e0 	.word	0x200001e0
 80145c4:	200001e8 	.word	0x200001e8

080145c8 <_init>:
 80145c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145ca:	bf00      	nop
 80145cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80145ce:	bc08      	pop	{r3}
 80145d0:	469e      	mov	lr, r3
 80145d2:	4770      	bx	lr

080145d4 <_fini>:
 80145d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145d6:	bf00      	nop
 80145d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80145da:	bc08      	pop	{r3}
 80145dc:	469e      	mov	lr, r3
 80145de:	4770      	bx	lr
