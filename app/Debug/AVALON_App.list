
AVALON_App.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014870  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08014a50  08014a50  00024a50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014c68  08014c68  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  08014c68  08014c68  00024c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014c70  08014c70  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014c70  08014c70  00024c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014c74  08014c74  00024c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08014c78  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005624  200001f0  08014e68  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005814  08014e68  00035814  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003508d  00000000  00000000  000302d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000076d6  00000000  00000000  00065365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000027e8  00000000  00000000  0006ca40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001e8f  00000000  00000000  0006f228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00032ef9  00000000  00000000  000710b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00038d7d  00000000  00000000  000a3fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00128432  00000000  00000000  000dcd2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000ada4  00000000  00000000  00205160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0020ff04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00000010  00000000  00000000  0020ff76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08014a38 	.word	0x08014a38

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	08014a38 	.word	0x08014a38

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr

08000244 <__aeabi_drsub>:
 8000244:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000248:	e002      	b.n	8000250 <__adddf3>
 800024a:	bf00      	nop

0800024c <__aeabi_dsub>:
 800024c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000250 <__adddf3>:
 8000250:	b530      	push	{r4, r5, lr}
 8000252:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000256:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800025a:	ea94 0f05 	teq	r4, r5
 800025e:	bf08      	it	eq
 8000260:	ea90 0f02 	teqeq	r0, r2
 8000264:	bf1f      	itttt	ne
 8000266:	ea54 0c00 	orrsne.w	ip, r4, r0
 800026a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000272:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000276:	f000 80e2 	beq.w	800043e <__adddf3+0x1ee>
 800027a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000282:	bfb8      	it	lt
 8000284:	426d      	neglt	r5, r5
 8000286:	dd0c      	ble.n	80002a2 <__adddf3+0x52>
 8000288:	442c      	add	r4, r5
 800028a:	ea80 0202 	eor.w	r2, r0, r2
 800028e:	ea81 0303 	eor.w	r3, r1, r3
 8000292:	ea82 0000 	eor.w	r0, r2, r0
 8000296:	ea83 0101 	eor.w	r1, r3, r1
 800029a:	ea80 0202 	eor.w	r2, r0, r2
 800029e:	ea81 0303 	eor.w	r3, r1, r3
 80002a2:	2d36      	cmp	r5, #54	; 0x36
 80002a4:	bf88      	it	hi
 80002a6:	bd30      	pophi	{r4, r5, pc}
 80002a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x70>
 80002ba:	4240      	negs	r0, r0
 80002bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002cc:	d002      	beq.n	80002d4 <__adddf3+0x84>
 80002ce:	4252      	negs	r2, r2
 80002d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d4:	ea94 0f05 	teq	r4, r5
 80002d8:	f000 80a7 	beq.w	800042a <__adddf3+0x1da>
 80002dc:	f1a4 0401 	sub.w	r4, r4, #1
 80002e0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e4:	db0d      	blt.n	8000302 <__adddf3+0xb2>
 80002e6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ea:	fa22 f205 	lsr.w	r2, r2, r5
 80002ee:	1880      	adds	r0, r0, r2
 80002f0:	f141 0100 	adc.w	r1, r1, #0
 80002f4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f8:	1880      	adds	r0, r0, r2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	4159      	adcs	r1, r3
 8000300:	e00e      	b.n	8000320 <__adddf3+0xd0>
 8000302:	f1a5 0520 	sub.w	r5, r5, #32
 8000306:	f10e 0e20 	add.w	lr, lr, #32
 800030a:	2a01      	cmp	r2, #1
 800030c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000310:	bf28      	it	cs
 8000312:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000316:	fa43 f305 	asr.w	r3, r3, r5
 800031a:	18c0      	adds	r0, r0, r3
 800031c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000324:	d507      	bpl.n	8000336 <__adddf3+0xe6>
 8000326:	f04f 0e00 	mov.w	lr, #0
 800032a:	f1dc 0c00 	rsbs	ip, ip, #0
 800032e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000332:	eb6e 0101 	sbc.w	r1, lr, r1
 8000336:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800033a:	d31b      	bcc.n	8000374 <__adddf3+0x124>
 800033c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000340:	d30c      	bcc.n	800035c <__adddf3+0x10c>
 8000342:	0849      	lsrs	r1, r1, #1
 8000344:	ea5f 0030 	movs.w	r0, r0, rrx
 8000348:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800034c:	f104 0401 	add.w	r4, r4, #1
 8000350:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000354:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000358:	f080 809a 	bcs.w	8000490 <__adddf3+0x240>
 800035c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000360:	bf08      	it	eq
 8000362:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000366:	f150 0000 	adcs.w	r0, r0, #0
 800036a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036e:	ea41 0105 	orr.w	r1, r1, r5
 8000372:	bd30      	pop	{r4, r5, pc}
 8000374:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000378:	4140      	adcs	r0, r0
 800037a:	eb41 0101 	adc.w	r1, r1, r1
 800037e:	3c01      	subs	r4, #1
 8000380:	bf28      	it	cs
 8000382:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000386:	d2e9      	bcs.n	800035c <__adddf3+0x10c>
 8000388:	f091 0f00 	teq	r1, #0
 800038c:	bf04      	itt	eq
 800038e:	4601      	moveq	r1, r0
 8000390:	2000      	moveq	r0, #0
 8000392:	fab1 f381 	clz	r3, r1
 8000396:	bf08      	it	eq
 8000398:	3320      	addeq	r3, #32
 800039a:	f1a3 030b 	sub.w	r3, r3, #11
 800039e:	f1b3 0220 	subs.w	r2, r3, #32
 80003a2:	da0c      	bge.n	80003be <__adddf3+0x16e>
 80003a4:	320c      	adds	r2, #12
 80003a6:	dd08      	ble.n	80003ba <__adddf3+0x16a>
 80003a8:	f102 0c14 	add.w	ip, r2, #20
 80003ac:	f1c2 020c 	rsb	r2, r2, #12
 80003b0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b4:	fa21 f102 	lsr.w	r1, r1, r2
 80003b8:	e00c      	b.n	80003d4 <__adddf3+0x184>
 80003ba:	f102 0214 	add.w	r2, r2, #20
 80003be:	bfd8      	it	le
 80003c0:	f1c2 0c20 	rsble	ip, r2, #32
 80003c4:	fa01 f102 	lsl.w	r1, r1, r2
 80003c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003cc:	bfdc      	itt	le
 80003ce:	ea41 010c 	orrle.w	r1, r1, ip
 80003d2:	4090      	lslle	r0, r2
 80003d4:	1ae4      	subs	r4, r4, r3
 80003d6:	bfa2      	ittt	ge
 80003d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003dc:	4329      	orrge	r1, r5
 80003de:	bd30      	popge	{r4, r5, pc}
 80003e0:	ea6f 0404 	mvn.w	r4, r4
 80003e4:	3c1f      	subs	r4, #31
 80003e6:	da1c      	bge.n	8000422 <__adddf3+0x1d2>
 80003e8:	340c      	adds	r4, #12
 80003ea:	dc0e      	bgt.n	800040a <__adddf3+0x1ba>
 80003ec:	f104 0414 	add.w	r4, r4, #20
 80003f0:	f1c4 0220 	rsb	r2, r4, #32
 80003f4:	fa20 f004 	lsr.w	r0, r0, r4
 80003f8:	fa01 f302 	lsl.w	r3, r1, r2
 80003fc:	ea40 0003 	orr.w	r0, r0, r3
 8000400:	fa21 f304 	lsr.w	r3, r1, r4
 8000404:	ea45 0103 	orr.w	r1, r5, r3
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	f1c4 040c 	rsb	r4, r4, #12
 800040e:	f1c4 0220 	rsb	r2, r4, #32
 8000412:	fa20 f002 	lsr.w	r0, r0, r2
 8000416:	fa01 f304 	lsl.w	r3, r1, r4
 800041a:	ea40 0003 	orr.w	r0, r0, r3
 800041e:	4629      	mov	r1, r5
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	fa21 f004 	lsr.w	r0, r1, r4
 8000426:	4629      	mov	r1, r5
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	f094 0f00 	teq	r4, #0
 800042e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000432:	bf06      	itte	eq
 8000434:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000438:	3401      	addeq	r4, #1
 800043a:	3d01      	subne	r5, #1
 800043c:	e74e      	b.n	80002dc <__adddf3+0x8c>
 800043e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000442:	bf18      	it	ne
 8000444:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000448:	d029      	beq.n	800049e <__adddf3+0x24e>
 800044a:	ea94 0f05 	teq	r4, r5
 800044e:	bf08      	it	eq
 8000450:	ea90 0f02 	teqeq	r0, r2
 8000454:	d005      	beq.n	8000462 <__adddf3+0x212>
 8000456:	ea54 0c00 	orrs.w	ip, r4, r0
 800045a:	bf04      	itt	eq
 800045c:	4619      	moveq	r1, r3
 800045e:	4610      	moveq	r0, r2
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea91 0f03 	teq	r1, r3
 8000466:	bf1e      	ittt	ne
 8000468:	2100      	movne	r1, #0
 800046a:	2000      	movne	r0, #0
 800046c:	bd30      	popne	{r4, r5, pc}
 800046e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000472:	d105      	bne.n	8000480 <__adddf3+0x230>
 8000474:	0040      	lsls	r0, r0, #1
 8000476:	4149      	adcs	r1, r1
 8000478:	bf28      	it	cs
 800047a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047e:	bd30      	pop	{r4, r5, pc}
 8000480:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000484:	bf3c      	itt	cc
 8000486:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800048a:	bd30      	popcc	{r4, r5, pc}
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000494:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000498:	f04f 0000 	mov.w	r0, #0
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a2:	bf1a      	itte	ne
 80004a4:	4619      	movne	r1, r3
 80004a6:	4610      	movne	r0, r2
 80004a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004ac:	bf1c      	itt	ne
 80004ae:	460b      	movne	r3, r1
 80004b0:	4602      	movne	r2, r0
 80004b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b6:	bf06      	itte	eq
 80004b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004bc:	ea91 0f03 	teqeq	r1, r3
 80004c0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	bf00      	nop

080004c8 <__aeabi_ui2d>:
 80004c8:	f090 0f00 	teq	r0, #0
 80004cc:	bf04      	itt	eq
 80004ce:	2100      	moveq	r1, #0
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004dc:	f04f 0500 	mov.w	r5, #0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e750      	b.n	8000388 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_i2d>:
 80004e8:	f090 0f00 	teq	r0, #0
 80004ec:	bf04      	itt	eq
 80004ee:	2100      	moveq	r1, #0
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000500:	bf48      	it	mi
 8000502:	4240      	negmi	r0, r0
 8000504:	f04f 0100 	mov.w	r1, #0
 8000508:	e73e      	b.n	8000388 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_f2d>:
 800050c:	0042      	lsls	r2, r0, #1
 800050e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000512:	ea4f 0131 	mov.w	r1, r1, rrx
 8000516:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800051a:	bf1f      	itttt	ne
 800051c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000520:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000524:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000528:	4770      	bxne	lr
 800052a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052e:	bf08      	it	eq
 8000530:	4770      	bxeq	lr
 8000532:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000536:	bf04      	itt	eq
 8000538:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000544:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000548:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800054c:	e71c      	b.n	8000388 <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_ul2d>:
 8000550:	ea50 0201 	orrs.w	r2, r0, r1
 8000554:	bf08      	it	eq
 8000556:	4770      	bxeq	lr
 8000558:	b530      	push	{r4, r5, lr}
 800055a:	f04f 0500 	mov.w	r5, #0
 800055e:	e00a      	b.n	8000576 <__aeabi_l2d+0x16>

08000560 <__aeabi_l2d>:
 8000560:	ea50 0201 	orrs.w	r2, r0, r1
 8000564:	bf08      	it	eq
 8000566:	4770      	bxeq	lr
 8000568:	b530      	push	{r4, r5, lr}
 800056a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056e:	d502      	bpl.n	8000576 <__aeabi_l2d+0x16>
 8000570:	4240      	negs	r0, r0
 8000572:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000576:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000582:	f43f aed8 	beq.w	8000336 <__adddf3+0xe6>
 8000586:	f04f 0203 	mov.w	r2, #3
 800058a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058e:	bf18      	it	ne
 8000590:	3203      	addne	r2, #3
 8000592:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000596:	bf18      	it	ne
 8000598:	3203      	addne	r2, #3
 800059a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059e:	f1c2 0320 	rsb	r3, r2, #32
 80005a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a6:	fa20 f002 	lsr.w	r0, r0, r2
 80005aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ae:	ea40 000e 	orr.w	r0, r0, lr
 80005b2:	fa21 f102 	lsr.w	r1, r1, r2
 80005b6:	4414      	add	r4, r2
 80005b8:	e6bd      	b.n	8000336 <__adddf3+0xe6>
 80005ba:	bf00      	nop

080005bc <__aeabi_dmul>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ca:	bf1d      	ittte	ne
 80005cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d0:	ea94 0f0c 	teqne	r4, ip
 80005d4:	ea95 0f0c 	teqne	r5, ip
 80005d8:	f000 f8de 	bleq	8000798 <__aeabi_dmul+0x1dc>
 80005dc:	442c      	add	r4, r5
 80005de:	ea81 0603 	eor.w	r6, r1, r3
 80005e2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ee:	bf18      	it	ne
 80005f0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005fc:	d038      	beq.n	8000670 <__aeabi_dmul+0xb4>
 80005fe:	fba0 ce02 	umull	ip, lr, r0, r2
 8000602:	f04f 0500 	mov.w	r5, #0
 8000606:	fbe1 e502 	umlal	lr, r5, r1, r2
 800060a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000612:	f04f 0600 	mov.w	r6, #0
 8000616:	fbe1 5603 	umlal	r5, r6, r1, r3
 800061a:	f09c 0f00 	teq	ip, #0
 800061e:	bf18      	it	ne
 8000620:	f04e 0e01 	orrne.w	lr, lr, #1
 8000624:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000628:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800062c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000630:	d204      	bcs.n	800063c <__aeabi_dmul+0x80>
 8000632:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000636:	416d      	adcs	r5, r5
 8000638:	eb46 0606 	adc.w	r6, r6, r6
 800063c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000640:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000644:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000648:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800064c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000650:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000654:	bf88      	it	hi
 8000656:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800065a:	d81e      	bhi.n	800069a <__aeabi_dmul+0xde>
 800065c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000660:	bf08      	it	eq
 8000662:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000666:	f150 0000 	adcs.w	r0, r0, #0
 800066a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000674:	ea46 0101 	orr.w	r1, r6, r1
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	ea81 0103 	eor.w	r1, r1, r3
 8000680:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000684:	bfc2      	ittt	gt
 8000686:	ebd4 050c 	rsbsgt	r5, r4, ip
 800068a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068e:	bd70      	popgt	{r4, r5, r6, pc}
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f04f 0e00 	mov.w	lr, #0
 8000698:	3c01      	subs	r4, #1
 800069a:	f300 80ab 	bgt.w	80007f4 <__aeabi_dmul+0x238>
 800069e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006a2:	bfde      	ittt	le
 80006a4:	2000      	movle	r0, #0
 80006a6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006aa:	bd70      	pople	{r4, r5, r6, pc}
 80006ac:	f1c4 0400 	rsb	r4, r4, #0
 80006b0:	3c20      	subs	r4, #32
 80006b2:	da35      	bge.n	8000720 <__aeabi_dmul+0x164>
 80006b4:	340c      	adds	r4, #12
 80006b6:	dc1b      	bgt.n	80006f0 <__aeabi_dmul+0x134>
 80006b8:	f104 0414 	add.w	r4, r4, #20
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f305 	lsl.w	r3, r0, r5
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f205 	lsl.w	r2, r1, r5
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	fa21 f604 	lsr.w	r6, r1, r4
 80006e0:	eb42 0106 	adc.w	r1, r2, r6
 80006e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e8:	bf08      	it	eq
 80006ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	f1c4 040c 	rsb	r4, r4, #12
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f304 	lsl.w	r3, r0, r4
 80006fc:	fa20 f005 	lsr.w	r0, r0, r5
 8000700:	fa01 f204 	lsl.w	r2, r1, r4
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	f141 0100 	adc.w	r1, r1, #0
 8000714:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000718:	bf08      	it	eq
 800071a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071e:	bd70      	pop	{r4, r5, r6, pc}
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f205 	lsl.w	r2, r0, r5
 8000728:	ea4e 0e02 	orr.w	lr, lr, r2
 800072c:	fa20 f304 	lsr.w	r3, r0, r4
 8000730:	fa01 f205 	lsl.w	r2, r1, r5
 8000734:	ea43 0302 	orr.w	r3, r3, r2
 8000738:	fa21 f004 	lsr.w	r0, r1, r4
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	fa21 f204 	lsr.w	r2, r1, r4
 8000744:	ea20 0002 	bic.w	r0, r0, r2
 8000748:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800074c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000750:	bf08      	it	eq
 8000752:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000756:	bd70      	pop	{r4, r5, r6, pc}
 8000758:	f094 0f00 	teq	r4, #0
 800075c:	d10f      	bne.n	800077e <__aeabi_dmul+0x1c2>
 800075e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000762:	0040      	lsls	r0, r0, #1
 8000764:	eb41 0101 	adc.w	r1, r1, r1
 8000768:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800076c:	bf08      	it	eq
 800076e:	3c01      	subeq	r4, #1
 8000770:	d0f7      	beq.n	8000762 <__aeabi_dmul+0x1a6>
 8000772:	ea41 0106 	orr.w	r1, r1, r6
 8000776:	f095 0f00 	teq	r5, #0
 800077a:	bf18      	it	ne
 800077c:	4770      	bxne	lr
 800077e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000782:	0052      	lsls	r2, r2, #1
 8000784:	eb43 0303 	adc.w	r3, r3, r3
 8000788:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800078c:	bf08      	it	eq
 800078e:	3d01      	subeq	r5, #1
 8000790:	d0f7      	beq.n	8000782 <__aeabi_dmul+0x1c6>
 8000792:	ea43 0306 	orr.w	r3, r3, r6
 8000796:	4770      	bx	lr
 8000798:	ea94 0f0c 	teq	r4, ip
 800079c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a0:	bf18      	it	ne
 80007a2:	ea95 0f0c 	teqne	r5, ip
 80007a6:	d00c      	beq.n	80007c2 <__aeabi_dmul+0x206>
 80007a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ac:	bf18      	it	ne
 80007ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b2:	d1d1      	bne.n	8000758 <__aeabi_dmul+0x19c>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c6:	bf06      	itte	eq
 80007c8:	4610      	moveq	r0, r2
 80007ca:	4619      	moveq	r1, r3
 80007cc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d0:	d019      	beq.n	8000806 <__aeabi_dmul+0x24a>
 80007d2:	ea94 0f0c 	teq	r4, ip
 80007d6:	d102      	bne.n	80007de <__aeabi_dmul+0x222>
 80007d8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007dc:	d113      	bne.n	8000806 <__aeabi_dmul+0x24a>
 80007de:	ea95 0f0c 	teq	r5, ip
 80007e2:	d105      	bne.n	80007f0 <__aeabi_dmul+0x234>
 80007e4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e8:	bf1c      	itt	ne
 80007ea:	4610      	movne	r0, r2
 80007ec:	4619      	movne	r1, r3
 80007ee:	d10a      	bne.n	8000806 <__aeabi_dmul+0x24a>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800080a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080e:	bd70      	pop	{r4, r5, r6, pc}

08000810 <__aeabi_ddiv>:
 8000810:	b570      	push	{r4, r5, r6, lr}
 8000812:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000816:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800081a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081e:	bf1d      	ittte	ne
 8000820:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000824:	ea94 0f0c 	teqne	r4, ip
 8000828:	ea95 0f0c 	teqne	r5, ip
 800082c:	f000 f8a7 	bleq	800097e <__aeabi_ddiv+0x16e>
 8000830:	eba4 0405 	sub.w	r4, r4, r5
 8000834:	ea81 0e03 	eor.w	lr, r1, r3
 8000838:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800083c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000840:	f000 8088 	beq.w	8000954 <__aeabi_ddiv+0x144>
 8000844:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000848:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800084c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000850:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000854:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000858:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800085c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000860:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000864:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000868:	429d      	cmp	r5, r3
 800086a:	bf08      	it	eq
 800086c:	4296      	cmpeq	r6, r2
 800086e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000872:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000876:	d202      	bcs.n	800087e <__aeabi_ddiv+0x6e>
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	1ab6      	subs	r6, r6, r2
 8000880:	eb65 0503 	sbc.w	r5, r5, r3
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000892:	ebb6 0e02 	subs.w	lr, r6, r2
 8000896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089a:	bf22      	ittt	cs
 800089c:	1ab6      	subcs	r6, r6, r2
 800089e:	4675      	movcs	r5, lr
 80008a0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b2:	bf22      	ittt	cs
 80008b4:	1ab6      	subcs	r6, r6, r2
 80008b6:	4675      	movcs	r5, lr
 80008b8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ca:	bf22      	ittt	cs
 80008cc:	1ab6      	subcs	r6, r6, r2
 80008ce:	4675      	movcs	r5, lr
 80008d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	ebb6 0e02 	subs.w	lr, r6, r2
 80008de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e2:	bf22      	ittt	cs
 80008e4:	1ab6      	subcs	r6, r6, r2
 80008e6:	4675      	movcs	r5, lr
 80008e8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008ec:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f0:	d018      	beq.n	8000924 <__aeabi_ddiv+0x114>
 80008f2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008fa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000902:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000906:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800090a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090e:	d1c0      	bne.n	8000892 <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	d10b      	bne.n	800092e <__aeabi_ddiv+0x11e>
 8000916:	ea41 0100 	orr.w	r1, r1, r0
 800091a:	f04f 0000 	mov.w	r0, #0
 800091e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000922:	e7b6      	b.n	8000892 <__aeabi_ddiv+0x82>
 8000924:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000928:	bf04      	itt	eq
 800092a:	4301      	orreq	r1, r0
 800092c:	2000      	moveq	r0, #0
 800092e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000932:	bf88      	it	hi
 8000934:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000938:	f63f aeaf 	bhi.w	800069a <__aeabi_dmul+0xde>
 800093c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000940:	bf04      	itt	eq
 8000942:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000946:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800094a:	f150 0000 	adcs.w	r0, r0, #0
 800094e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000952:	bd70      	pop	{r4, r5, r6, pc}
 8000954:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000958:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800095c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000960:	bfc2      	ittt	gt
 8000962:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000966:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800096a:	bd70      	popgt	{r4, r5, r6, pc}
 800096c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000970:	f04f 0e00 	mov.w	lr, #0
 8000974:	3c01      	subs	r4, #1
 8000976:	e690      	b.n	800069a <__aeabi_dmul+0xde>
 8000978:	ea45 0e06 	orr.w	lr, r5, r6
 800097c:	e68d      	b.n	800069a <__aeabi_dmul+0xde>
 800097e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000982:	ea94 0f0c 	teq	r4, ip
 8000986:	bf08      	it	eq
 8000988:	ea95 0f0c 	teqeq	r5, ip
 800098c:	f43f af3b 	beq.w	8000806 <__aeabi_dmul+0x24a>
 8000990:	ea94 0f0c 	teq	r4, ip
 8000994:	d10a      	bne.n	80009ac <__aeabi_ddiv+0x19c>
 8000996:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800099a:	f47f af34 	bne.w	8000806 <__aeabi_dmul+0x24a>
 800099e:	ea95 0f0c 	teq	r5, ip
 80009a2:	f47f af25 	bne.w	80007f0 <__aeabi_dmul+0x234>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e72c      	b.n	8000806 <__aeabi_dmul+0x24a>
 80009ac:	ea95 0f0c 	teq	r5, ip
 80009b0:	d106      	bne.n	80009c0 <__aeabi_ddiv+0x1b0>
 80009b2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b6:	f43f aefd 	beq.w	80007b4 <__aeabi_dmul+0x1f8>
 80009ba:	4610      	mov	r0, r2
 80009bc:	4619      	mov	r1, r3
 80009be:	e722      	b.n	8000806 <__aeabi_dmul+0x24a>
 80009c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c4:	bf18      	it	ne
 80009c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ca:	f47f aec5 	bne.w	8000758 <__aeabi_dmul+0x19c>
 80009ce:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009d2:	f47f af0d 	bne.w	80007f0 <__aeabi_dmul+0x234>
 80009d6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009da:	f47f aeeb 	bne.w	80007b4 <__aeabi_dmul+0x1f8>
 80009de:	e712      	b.n	8000806 <__aeabi_dmul+0x24a>

080009e0 <__gedf2>:
 80009e0:	f04f 3cff 	mov.w	ip, #4294967295
 80009e4:	e006      	b.n	80009f4 <__cmpdf2+0x4>
 80009e6:	bf00      	nop

080009e8 <__ledf2>:
 80009e8:	f04f 0c01 	mov.w	ip, #1
 80009ec:	e002      	b.n	80009f4 <__cmpdf2+0x4>
 80009ee:	bf00      	nop

080009f0 <__cmpdf2>:
 80009f0:	f04f 0c01 	mov.w	ip, #1
 80009f4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	bf18      	it	ne
 8000a06:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a0a:	d01b      	beq.n	8000a44 <__cmpdf2+0x54>
 8000a0c:	b001      	add	sp, #4
 8000a0e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a12:	bf0c      	ite	eq
 8000a14:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a18:	ea91 0f03 	teqne	r1, r3
 8000a1c:	bf02      	ittt	eq
 8000a1e:	ea90 0f02 	teqeq	r0, r2
 8000a22:	2000      	moveq	r0, #0
 8000a24:	4770      	bxeq	lr
 8000a26:	f110 0f00 	cmn.w	r0, #0
 8000a2a:	ea91 0f03 	teq	r1, r3
 8000a2e:	bf58      	it	pl
 8000a30:	4299      	cmppl	r1, r3
 8000a32:	bf08      	it	eq
 8000a34:	4290      	cmpeq	r0, r2
 8000a36:	bf2c      	ite	cs
 8000a38:	17d8      	asrcs	r0, r3, #31
 8000a3a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3e:	f040 0001 	orr.w	r0, r0, #1
 8000a42:	4770      	bx	lr
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	d102      	bne.n	8000a54 <__cmpdf2+0x64>
 8000a4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a52:	d107      	bne.n	8000a64 <__cmpdf2+0x74>
 8000a54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	d1d6      	bne.n	8000a0c <__cmpdf2+0x1c>
 8000a5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a62:	d0d3      	beq.n	8000a0c <__cmpdf2+0x1c>
 8000a64:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_cdrcmple>:
 8000a6c:	4684      	mov	ip, r0
 8000a6e:	4610      	mov	r0, r2
 8000a70:	4662      	mov	r2, ip
 8000a72:	468c      	mov	ip, r1
 8000a74:	4619      	mov	r1, r3
 8000a76:	4663      	mov	r3, ip
 8000a78:	e000      	b.n	8000a7c <__aeabi_cdcmpeq>
 8000a7a:	bf00      	nop

08000a7c <__aeabi_cdcmpeq>:
 8000a7c:	b501      	push	{r0, lr}
 8000a7e:	f7ff ffb7 	bl	80009f0 <__cmpdf2>
 8000a82:	2800      	cmp	r0, #0
 8000a84:	bf48      	it	mi
 8000a86:	f110 0f00 	cmnmi.w	r0, #0
 8000a8a:	bd01      	pop	{r0, pc}

08000a8c <__aeabi_dcmpeq>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff fff4 	bl	8000a7c <__aeabi_cdcmpeq>
 8000a94:	bf0c      	ite	eq
 8000a96:	2001      	moveq	r0, #1
 8000a98:	2000      	movne	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmplt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffea 	bl	8000a7c <__aeabi_cdcmpeq>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmple>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffe0 	bl	8000a7c <__aeabi_cdcmpeq>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpge>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffce 	bl	8000a6c <__aeabi_cdrcmple>
 8000ad0:	bf94      	ite	ls
 8000ad2:	2001      	movls	r0, #1
 8000ad4:	2000      	movhi	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpgt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffc4 	bl	8000a6c <__aeabi_cdrcmple>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmpun>:
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__aeabi_dcmpun+0x10>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d10a      	bne.n	8000b16 <__aeabi_dcmpun+0x26>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d102      	bne.n	8000b10 <__aeabi_dcmpun+0x20>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d102      	bne.n	8000b16 <__aeabi_dcmpun+0x26>
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	f04f 0001 	mov.w	r0, #1
 8000b1a:	4770      	bx	lr

08000b1c <__aeabi_d2f>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b24:	bf24      	itt	cs
 8000b26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_d2f+0x30>
 8000b30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b44:	bf08      	it	eq
 8000b46:	f020 0001 	biceq.w	r0, r0, #1
 8000b4a:	4770      	bx	lr
 8000b4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b50:	d121      	bne.n	8000b96 <__aeabi_d2f+0x7a>
 8000b52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b56:	bfbc      	itt	lt
 8000b58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	4770      	bxlt	lr
 8000b5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b66:	f1c2 0218 	rsb	r2, r2, #24
 8000b6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b72:	fa20 f002 	lsr.w	r0, r0, r2
 8000b76:	bf18      	it	ne
 8000b78:	f040 0001 	orrne.w	r0, r0, #1
 8000b7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b88:	ea40 000c 	orr.w	r0, r0, ip
 8000b8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b94:	e7cc      	b.n	8000b30 <__aeabi_d2f+0x14>
 8000b96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b9a:	d107      	bne.n	8000bac <__aeabi_d2f+0x90>
 8000b9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba0:	bf1e      	ittt	ne
 8000ba2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ba6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000baa:	4770      	bxne	lr
 8000bac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd0:	f000 b970 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9e08      	ldr	r6, [sp, #32]
 8000bf2:	460d      	mov	r5, r1
 8000bf4:	4604      	mov	r4, r0
 8000bf6:	460f      	mov	r7, r1
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d14a      	bne.n	8000c92 <__udivmoddi4+0xa6>
 8000bfc:	428a      	cmp	r2, r1
 8000bfe:	4694      	mov	ip, r2
 8000c00:	d965      	bls.n	8000cce <__udivmoddi4+0xe2>
 8000c02:	fab2 f382 	clz	r3, r2
 8000c06:	b143      	cbz	r3, 8000c1a <__udivmoddi4+0x2e>
 8000c08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c0c:	f1c3 0220 	rsb	r2, r3, #32
 8000c10:	409f      	lsls	r7, r3
 8000c12:	fa20 f202 	lsr.w	r2, r0, r2
 8000c16:	4317      	orrs	r7, r2
 8000c18:	409c      	lsls	r4, r3
 8000c1a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1e:	fa1f f58c 	uxth.w	r5, ip
 8000c22:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c26:	0c22      	lsrs	r2, r4, #16
 8000c28:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c2c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c30:	fb01 f005 	mul.w	r0, r1, r5
 8000c34:	4290      	cmp	r0, r2
 8000c36:	d90a      	bls.n	8000c4e <__udivmoddi4+0x62>
 8000c38:	eb1c 0202 	adds.w	r2, ip, r2
 8000c3c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c40:	f080 811c 	bcs.w	8000e7c <__udivmoddi4+0x290>
 8000c44:	4290      	cmp	r0, r2
 8000c46:	f240 8119 	bls.w	8000e7c <__udivmoddi4+0x290>
 8000c4a:	3902      	subs	r1, #2
 8000c4c:	4462      	add	r2, ip
 8000c4e:	1a12      	subs	r2, r2, r0
 8000c50:	b2a4      	uxth	r4, r4
 8000c52:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c56:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c5a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5e:	fb00 f505 	mul.w	r5, r0, r5
 8000c62:	42a5      	cmp	r5, r4
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x90>
 8000c66:	eb1c 0404 	adds.w	r4, ip, r4
 8000c6a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6e:	f080 8107 	bcs.w	8000e80 <__udivmoddi4+0x294>
 8000c72:	42a5      	cmp	r5, r4
 8000c74:	f240 8104 	bls.w	8000e80 <__udivmoddi4+0x294>
 8000c78:	4464      	add	r4, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c80:	1b64      	subs	r4, r4, r5
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11e      	cbz	r6, 8000c8e <__udivmoddi4+0xa2>
 8000c86:	40dc      	lsrs	r4, r3
 8000c88:	2300      	movs	r3, #0
 8000c8a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d908      	bls.n	8000ca8 <__udivmoddi4+0xbc>
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	f000 80ed 	beq.w	8000e76 <__udivmoddi4+0x28a>
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	e9c6 0500 	strd	r0, r5, [r6]
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca8:	fab3 f183 	clz	r1, r3
 8000cac:	2900      	cmp	r1, #0
 8000cae:	d149      	bne.n	8000d44 <__udivmoddi4+0x158>
 8000cb0:	42ab      	cmp	r3, r5
 8000cb2:	d302      	bcc.n	8000cba <__udivmoddi4+0xce>
 8000cb4:	4282      	cmp	r2, r0
 8000cb6:	f200 80f8 	bhi.w	8000eaa <__udivmoddi4+0x2be>
 8000cba:	1a84      	subs	r4, r0, r2
 8000cbc:	eb65 0203 	sbc.w	r2, r5, r3
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	4617      	mov	r7, r2
 8000cc4:	2e00      	cmp	r6, #0
 8000cc6:	d0e2      	beq.n	8000c8e <__udivmoddi4+0xa2>
 8000cc8:	e9c6 4700 	strd	r4, r7, [r6]
 8000ccc:	e7df      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xe6>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f382 	clz	r3, r2
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	f040 8090 	bne.w	8000dfc <__udivmoddi4+0x210>
 8000cdc:	1a8a      	subs	r2, r1, r2
 8000cde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce2:	fa1f fe8c 	uxth.w	lr, ip
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cec:	fb07 2015 	mls	r0, r7, r5, r2
 8000cf0:	0c22      	lsrs	r2, r4, #16
 8000cf2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf6:	fb0e f005 	mul.w	r0, lr, r5
 8000cfa:	4290      	cmp	r0, r2
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x124>
 8000cfe:	eb1c 0202 	adds.w	r2, ip, r2
 8000d02:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0x122>
 8000d08:	4290      	cmp	r0, r2
 8000d0a:	f200 80cb 	bhi.w	8000ea4 <__udivmoddi4+0x2b8>
 8000d0e:	4645      	mov	r5, r8
 8000d10:	1a12      	subs	r2, r2, r0
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d18:	fb07 2210 	mls	r2, r7, r0, r2
 8000d1c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d20:	fb0e fe00 	mul.w	lr, lr, r0
 8000d24:	45a6      	cmp	lr, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x14e>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d30:	d202      	bcs.n	8000d38 <__udivmoddi4+0x14c>
 8000d32:	45a6      	cmp	lr, r4
 8000d34:	f200 80bb 	bhi.w	8000eae <__udivmoddi4+0x2c2>
 8000d38:	4610      	mov	r0, r2
 8000d3a:	eba4 040e 	sub.w	r4, r4, lr
 8000d3e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d42:	e79f      	b.n	8000c84 <__udivmoddi4+0x98>
 8000d44:	f1c1 0720 	rsb	r7, r1, #32
 8000d48:	408b      	lsls	r3, r1
 8000d4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d52:	fa05 f401 	lsl.w	r4, r5, r1
 8000d56:	fa20 f307 	lsr.w	r3, r0, r7
 8000d5a:	40fd      	lsrs	r5, r7
 8000d5c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d60:	4323      	orrs	r3, r4
 8000d62:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d66:	fa1f fe8c 	uxth.w	lr, ip
 8000d6a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6e:	0c1c      	lsrs	r4, r3, #16
 8000d70:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d74:	fb08 f50e 	mul.w	r5, r8, lr
 8000d78:	42a5      	cmp	r5, r4
 8000d7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d82:	d90b      	bls.n	8000d9c <__udivmoddi4+0x1b0>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d8c:	f080 8088 	bcs.w	8000ea0 <__udivmoddi4+0x2b4>
 8000d90:	42a5      	cmp	r5, r4
 8000d92:	f240 8085 	bls.w	8000ea0 <__udivmoddi4+0x2b4>
 8000d96:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9a:	4464      	add	r4, ip
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	b29d      	uxth	r5, r3
 8000da0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da4:	fb09 4413 	mls	r4, r9, r3, r4
 8000da8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dac:	fb03 fe0e 	mul.w	lr, r3, lr
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x1da>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dbc:	d26c      	bcs.n	8000e98 <__udivmoddi4+0x2ac>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	d96a      	bls.n	8000e98 <__udivmoddi4+0x2ac>
 8000dc2:	3b02      	subs	r3, #2
 8000dc4:	4464      	add	r4, ip
 8000dc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dca:	fba3 9502 	umull	r9, r5, r3, r2
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	42ac      	cmp	r4, r5
 8000dd4:	46c8      	mov	r8, r9
 8000dd6:	46ae      	mov	lr, r5
 8000dd8:	d356      	bcc.n	8000e88 <__udivmoddi4+0x29c>
 8000dda:	d053      	beq.n	8000e84 <__udivmoddi4+0x298>
 8000ddc:	b156      	cbz	r6, 8000df4 <__udivmoddi4+0x208>
 8000dde:	ebb0 0208 	subs.w	r2, r0, r8
 8000de2:	eb64 040e 	sbc.w	r4, r4, lr
 8000de6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dea:	40ca      	lsrs	r2, r1
 8000dec:	40cc      	lsrs	r4, r1
 8000dee:	4317      	orrs	r7, r2
 8000df0:	e9c6 7400 	strd	r7, r4, [r6]
 8000df4:	4618      	mov	r0, r3
 8000df6:	2100      	movs	r1, #0
 8000df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfc:	f1c3 0120 	rsb	r1, r3, #32
 8000e00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e04:	fa20 f201 	lsr.w	r2, r0, r1
 8000e08:	fa25 f101 	lsr.w	r1, r5, r1
 8000e0c:	409d      	lsls	r5, r3
 8000e0e:	432a      	orrs	r2, r5
 8000e10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e14:	fa1f fe8c 	uxth.w	lr, ip
 8000e18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e1c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e20:	0c11      	lsrs	r1, r2, #16
 8000e22:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e26:	fb00 f50e 	mul.w	r5, r0, lr
 8000e2a:	428d      	cmp	r5, r1
 8000e2c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x258>
 8000e32:	eb1c 0101 	adds.w	r1, ip, r1
 8000e36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3a:	d22f      	bcs.n	8000e9c <__udivmoddi4+0x2b0>
 8000e3c:	428d      	cmp	r5, r1
 8000e3e:	d92d      	bls.n	8000e9c <__udivmoddi4+0x2b0>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4461      	add	r1, ip
 8000e44:	1b49      	subs	r1, r1, r5
 8000e46:	b292      	uxth	r2, r2
 8000e48:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e4c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e54:	fb05 f10e 	mul.w	r1, r5, lr
 8000e58:	4291      	cmp	r1, r2
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x282>
 8000e5c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e60:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e64:	d216      	bcs.n	8000e94 <__udivmoddi4+0x2a8>
 8000e66:	4291      	cmp	r1, r2
 8000e68:	d914      	bls.n	8000e94 <__udivmoddi4+0x2a8>
 8000e6a:	3d02      	subs	r5, #2
 8000e6c:	4462      	add	r2, ip
 8000e6e:	1a52      	subs	r2, r2, r1
 8000e70:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e74:	e738      	b.n	8000ce8 <__udivmoddi4+0xfc>
 8000e76:	4631      	mov	r1, r6
 8000e78:	4630      	mov	r0, r6
 8000e7a:	e708      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000e7c:	4639      	mov	r1, r7
 8000e7e:	e6e6      	b.n	8000c4e <__udivmoddi4+0x62>
 8000e80:	4610      	mov	r0, r2
 8000e82:	e6fb      	b.n	8000c7c <__udivmoddi4+0x90>
 8000e84:	4548      	cmp	r0, r9
 8000e86:	d2a9      	bcs.n	8000ddc <__udivmoddi4+0x1f0>
 8000e88:	ebb9 0802 	subs.w	r8, r9, r2
 8000e8c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e90:	3b01      	subs	r3, #1
 8000e92:	e7a3      	b.n	8000ddc <__udivmoddi4+0x1f0>
 8000e94:	4645      	mov	r5, r8
 8000e96:	e7ea      	b.n	8000e6e <__udivmoddi4+0x282>
 8000e98:	462b      	mov	r3, r5
 8000e9a:	e794      	b.n	8000dc6 <__udivmoddi4+0x1da>
 8000e9c:	4640      	mov	r0, r8
 8000e9e:	e7d1      	b.n	8000e44 <__udivmoddi4+0x258>
 8000ea0:	46d0      	mov	r8, sl
 8000ea2:	e77b      	b.n	8000d9c <__udivmoddi4+0x1b0>
 8000ea4:	3d02      	subs	r5, #2
 8000ea6:	4462      	add	r2, ip
 8000ea8:	e732      	b.n	8000d10 <__udivmoddi4+0x124>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e70a      	b.n	8000cc4 <__udivmoddi4+0xd8>
 8000eae:	4464      	add	r4, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e742      	b.n	8000d3a <__udivmoddi4+0x14e>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ebe:	463b      	mov	r3, r7
 8000ec0:	2220      	movs	r2, #32
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f012 fd8d 	bl	80139e4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000eca:	4b3a      	ldr	r3, [pc, #232]	; (8000fb4 <MX_ADC2_Init+0xfc>)
 8000ecc:	4a3a      	ldr	r2, [pc, #232]	; (8000fb8 <MX_ADC2_Init+0x100>)
 8000ece:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV128;
 8000ed0:	4b38      	ldr	r3, [pc, #224]	; (8000fb4 <MX_ADC2_Init+0xfc>)
 8000ed2:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
 8000ed6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000ed8:	4b36      	ldr	r3, [pc, #216]	; (8000fb4 <MX_ADC2_Init+0xfc>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ede:	4b35      	ldr	r3, [pc, #212]	; (8000fb4 <MX_ADC2_Init+0xfc>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000ee4:	4b33      	ldr	r3, [pc, #204]	; (8000fb4 <MX_ADC2_Init+0xfc>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000eea:	4b32      	ldr	r3, [pc, #200]	; (8000fb4 <MX_ADC2_Init+0xfc>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ef0:	4b30      	ldr	r3, [pc, #192]	; (8000fb4 <MX_ADC2_Init+0xfc>)
 8000ef2:	2204      	movs	r2, #4
 8000ef4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000ef6:	4b2f      	ldr	r3, [pc, #188]	; (8000fb4 <MX_ADC2_Init+0xfc>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000efc:	4b2d      	ldr	r3, [pc, #180]	; (8000fb4 <MX_ADC2_Init+0xfc>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 3;
 8000f02:	4b2c      	ldr	r3, [pc, #176]	; (8000fb4 <MX_ADC2_Init+0xfc>)
 8000f04:	2203      	movs	r2, #3
 8000f06:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f08:	4b2a      	ldr	r3, [pc, #168]	; (8000fb4 <MX_ADC2_Init+0xfc>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f10:	4b28      	ldr	r3, [pc, #160]	; (8000fb4 <MX_ADC2_Init+0xfc>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f16:	4b27      	ldr	r3, [pc, #156]	; (8000fb4 <MX_ADC2_Init+0xfc>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000f1c:	4b25      	ldr	r3, [pc, #148]	; (8000fb4 <MX_ADC2_Init+0xfc>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f24:	4b23      	ldr	r3, [pc, #140]	; (8000fb4 <MX_ADC2_Init+0xfc>)
 8000f26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f2a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000f2c:	4b21      	ldr	r3, [pc, #132]	; (8000fb4 <MX_ADC2_Init+0xfc>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f34:	481f      	ldr	r0, [pc, #124]	; (8000fb4 <MX_ADC2_Init+0xfc>)
 8000f36:	f003 fb27 	bl	8004588 <HAL_ADC_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 8000f40:	f002 f8fa 	bl	8003138 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f44:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <MX_ADC2_Init+0x104>)
 8000f46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f48:	2306      	movs	r3, #6
 8000f4a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000f50:	4b1b      	ldr	r3, [pc, #108]	; (8000fc0 <MX_ADC2_Init+0x108>)
 8000f52:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f54:	2304      	movs	r3, #4
 8000f56:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4814      	ldr	r0, [pc, #80]	; (8000fb4 <MX_ADC2_Init+0xfc>)
 8000f62:	f003 fdc5 	bl	8004af0 <HAL_ADC_ConfigChannel>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8000f6c:	f002 f8e4 	bl	8003138 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f70:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <MX_ADC2_Init+0x10c>)
 8000f72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f74:	230c      	movs	r3, #12
 8000f76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f78:	463b      	mov	r3, r7
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <MX_ADC2_Init+0xfc>)
 8000f7e:	f003 fdb7 	bl	8004af0 <HAL_ADC_ConfigChannel>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_ADC2_Init+0xd4>
  {
    Error_Handler();
 8000f88:	f002 f8d6 	bl	8003138 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <MX_ADC2_Init+0x110>)
 8000f8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f90:	2312      	movs	r3, #18
 8000f92:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f94:	237f      	movs	r3, #127	; 0x7f
 8000f96:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f98:	463b      	mov	r3, r7
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <MX_ADC2_Init+0xfc>)
 8000f9e:	f003 fda7 	bl	8004af0 <HAL_ADC_ConfigChannel>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_ADC2_Init+0xf4>
  {
    Error_Handler();
 8000fa8:	f002 f8c6 	bl	8003138 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000fac:	bf00      	nop
 8000fae:	3720      	adds	r7, #32
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	2000020c 	.word	0x2000020c
 8000fb8:	50000100 	.word	0x50000100
 8000fbc:	04300002 	.word	0x04300002
 8000fc0:	407f0000 	.word	0x407f0000
 8000fc4:	19200040 	.word	0x19200040
 8000fc8:	2a000400 	.word	0x2a000400

08000fcc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b0a0      	sub	sp, #128	; 0x80
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe4:	f107 0318 	add.w	r3, r7, #24
 8000fe8:	2254      	movs	r2, #84	; 0x54
 8000fea:	2100      	movs	r1, #0
 8000fec:	4618      	mov	r0, r3
 8000fee:	f012 fcf9 	bl	80139e4 <memset>
  if(adcHandle->Instance==ADC2)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a4c      	ldr	r2, [pc, #304]	; (8001128 <HAL_ADC_MspInit+0x15c>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	f040 8090 	bne.w	800111e <HAL_ADC_MspInit+0x152>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000ffe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001002:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001004:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001008:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800100a:	f107 0318 	add.w	r3, r7, #24
 800100e:	4618      	mov	r0, r3
 8001010:	f008 f9c4 	bl	800939c <HAL_RCCEx_PeriphCLKConfig>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800101a:	f002 f88d 	bl	8003138 <Error_Handler>
    }

    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800101e:	4b43      	ldr	r3, [pc, #268]	; (800112c <HAL_ADC_MspInit+0x160>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001022:	4a42      	ldr	r2, [pc, #264]	; (800112c <HAL_ADC_MspInit+0x160>)
 8001024:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001028:	64d3      	str	r3, [r2, #76]	; 0x4c
 800102a:	4b40      	ldr	r3, [pc, #256]	; (800112c <HAL_ADC_MspInit+0x160>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001032:	617b      	str	r3, [r7, #20]
 8001034:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001036:	4b3d      	ldr	r3, [pc, #244]	; (800112c <HAL_ADC_MspInit+0x160>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103a:	4a3c      	ldr	r2, [pc, #240]	; (800112c <HAL_ADC_MspInit+0x160>)
 800103c:	f043 0320 	orr.w	r3, r3, #32
 8001040:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001042:	4b3a      	ldr	r3, [pc, #232]	; (800112c <HAL_ADC_MspInit+0x160>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001046:	f003 0320 	and.w	r3, r3, #32
 800104a:	613b      	str	r3, [r7, #16]
 800104c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800104e:	4b37      	ldr	r3, [pc, #220]	; (800112c <HAL_ADC_MspInit+0x160>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001052:	4a36      	ldr	r2, [pc, #216]	; (800112c <HAL_ADC_MspInit+0x160>)
 8001054:	f043 0304 	orr.w	r3, r3, #4
 8001058:	64d3      	str	r3, [r2, #76]	; 0x4c
 800105a:	4b34      	ldr	r3, [pc, #208]	; (800112c <HAL_ADC_MspInit+0x160>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105e:	f003 0304 	and.w	r3, r3, #4
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	4b31      	ldr	r3, [pc, #196]	; (800112c <HAL_ADC_MspInit+0x160>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106a:	4a30      	ldr	r2, [pc, #192]	; (800112c <HAL_ADC_MspInit+0x160>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001072:	4b2e      	ldr	r3, [pc, #184]	; (800112c <HAL_ADC_MspInit+0x160>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC2_IN6
    PC1     ------> ADC2_IN7
    PA0     ------> ADC2_IN1
    PA1     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800107e:	2302      	movs	r3, #2
 8001080:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001082:	2303      	movs	r3, #3
 8001084:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800108a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800108e:	4619      	mov	r1, r3
 8001090:	4827      	ldr	r0, [pc, #156]	; (8001130 <HAL_ADC_MspInit+0x164>)
 8001092:	f004 fe75 	bl	8005d80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001096:	2303      	movs	r3, #3
 8001098:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800109a:	2303      	movs	r3, #3
 800109c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010a6:	4619      	mov	r1, r3
 80010a8:	4822      	ldr	r0, [pc, #136]	; (8001134 <HAL_ADC_MspInit+0x168>)
 80010aa:	f004 fe69 	bl	8005d80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010ae:	2303      	movs	r3, #3
 80010b0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010b2:	2303      	movs	r3, #3
 80010b4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ba:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010be:	4619      	mov	r1, r3
 80010c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c4:	f004 fe5c 	bl	8005d80 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 80010c8:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <HAL_ADC_MspInit+0x16c>)
 80010ca:	4a1c      	ldr	r2, [pc, #112]	; (800113c <HAL_ADC_MspInit+0x170>)
 80010cc:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80010ce:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <HAL_ADC_MspInit+0x16c>)
 80010d0:	2224      	movs	r2, #36	; 0x24
 80010d2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010d4:	4b18      	ldr	r3, [pc, #96]	; (8001138 <HAL_ADC_MspInit+0x16c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80010da:	4b17      	ldr	r3, [pc, #92]	; (8001138 <HAL_ADC_MspInit+0x16c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80010e0:	4b15      	ldr	r3, [pc, #84]	; (8001138 <HAL_ADC_MspInit+0x16c>)
 80010e2:	2280      	movs	r2, #128	; 0x80
 80010e4:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010e6:	4b14      	ldr	r3, [pc, #80]	; (8001138 <HAL_ADC_MspInit+0x16c>)
 80010e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010ec:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010ee:	4b12      	ldr	r3, [pc, #72]	; (8001138 <HAL_ADC_MspInit+0x16c>)
 80010f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010f4:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <HAL_ADC_MspInit+0x16c>)
 80010f8:	2220      	movs	r2, #32
 80010fa:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80010fc:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <HAL_ADC_MspInit+0x16c>)
 80010fe:	2200      	movs	r2, #0
 8001100:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001102:	480d      	ldr	r0, [pc, #52]	; (8001138 <HAL_ADC_MspInit+0x16c>)
 8001104:	f004 fb0a 	bl	800571c <HAL_DMA_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <HAL_ADC_MspInit+0x146>
    {
      Error_Handler();
 800110e:	f002 f813 	bl	8003138 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a08      	ldr	r2, [pc, #32]	; (8001138 <HAL_ADC_MspInit+0x16c>)
 8001116:	655a      	str	r2, [r3, #84]	; 0x54
 8001118:	4a07      	ldr	r2, [pc, #28]	; (8001138 <HAL_ADC_MspInit+0x16c>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800111e:	bf00      	nop
 8001120:	3780      	adds	r7, #128	; 0x80
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	50000100 	.word	0x50000100
 800112c:	40021000 	.word	0x40021000
 8001130:	48001400 	.word	0x48001400
 8001134:	48000800 	.word	0x48000800
 8001138:	20000278 	.word	0x20000278
 800113c:	40020008 	.word	0x40020008

08001140 <Battery_ReadBatteryVoltage>:

#include "adc_voltage_current_measurement.h"



void Battery_ReadBatteryVoltage(Battery_t * battery_struct,uint16_t BatteryMonitoringData[]){
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
	battery_struct->BatteryVoltage = (BatteryMonitoringData[BATTERY_VOLTAGE_RANK]*ADC_VOLTAGE_REF)/ADC_BIT_VALUE;
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	3304      	adds	r3, #4
 800114e:	881b      	ldrh	r3, [r3, #0]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff f9c9 	bl	80004e8 <__aeabi_i2d>
 8001156:	a30f      	add	r3, pc, #60	; (adr r3, 8001194 <Battery_ReadBatteryVoltage+0x54>)
 8001158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115c:	f7ff fa2e 	bl	80005bc <__aeabi_dmul>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4610      	mov	r0, r2
 8001166:	4619      	mov	r1, r3
 8001168:	f04f 0200 	mov.w	r2, #0
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <Battery_ReadBatteryVoltage+0x50>)
 800116e:	f7ff fb4f 	bl	8000810 <__aeabi_ddiv>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	4610      	mov	r0, r2
 8001178:	4619      	mov	r1, r3
 800117a:	f7ff fccf 	bl	8000b1c <__aeabi_d2f>
 800117e:	4602      	mov	r2, r0
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	601a      	str	r2, [r3, #0]
}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	f3af 8000 	nop.w
 8001190:	40b00000 	.word	0x40b00000
 8001194:	66666666 	.word	0x66666666
 8001198:	400a6666 	.word	0x400a6666
 800119c:	00000000 	.word	0x00000000

080011a0 <Battery_ReadCurrent3V3>:

void Battery_ReadCurrent3V3(Battery_t * battery_struct,uint16_t BatteryMonitoringData[]){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
	float32_t shunt_resistor_voltage = (BatteryMonitoringData[BATTERY_3V3CURR_RANK]*ADC_VOLTAGE_REF)/ADC_BIT_VALUE;
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	3302      	adds	r3, #2
 80011ae:	881b      	ldrh	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff f999 	bl	80004e8 <__aeabi_i2d>
 80011b6:	a319      	add	r3, pc, #100	; (adr r3, 800121c <Battery_ReadCurrent3V3+0x7c>)
 80011b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011bc:	f7ff f9fe 	bl	80005bc <__aeabi_dmul>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4610      	mov	r0, r2
 80011c6:	4619      	mov	r1, r3
 80011c8:	f04f 0200 	mov.w	r2, #0
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <Battery_ReadCurrent3V3+0x78>)
 80011ce:	f7ff fb1f 	bl	8000810 <__aeabi_ddiv>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4610      	mov	r0, r2
 80011d8:	4619      	mov	r1, r3
 80011da:	f7ff fc9f 	bl	8000b1c <__aeabi_d2f>
 80011de:	4603      	mov	r3, r0
 80011e0:	60fb      	str	r3, [r7, #12]
	battery_struct->CurrentConsumption3V3 = shunt_resistor_voltage/SHUNT_RESISTOR_VALUE;
 80011e2:	68f8      	ldr	r0, [r7, #12]
 80011e4:	f7ff f992 	bl	800050c <__aeabi_f2d>
 80011e8:	a309      	add	r3, pc, #36	; (adr r3, 8001210 <Battery_ReadCurrent3V3+0x70>)
 80011ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ee:	f7ff fb0f 	bl	8000810 <__aeabi_ddiv>
 80011f2:	4602      	mov	r2, r0
 80011f4:	460b      	mov	r3, r1
 80011f6:	4610      	mov	r0, r2
 80011f8:	4619      	mov	r1, r3
 80011fa:	f7ff fc8f 	bl	8000b1c <__aeabi_d2f>
 80011fe:	4602      	mov	r2, r0
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	605a      	str	r2, [r3, #4]
}
 8001204:	bf00      	nop
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	f3af 8000 	nop.w
 8001210:	d2f1a9fc 	.word	0xd2f1a9fc
 8001214:	3f60624d 	.word	0x3f60624d
 8001218:	40b00000 	.word	0x40b00000
 800121c:	66666666 	.word	0x66666666
 8001220:	400a6666 	.word	0x400a6666
 8001224:	00000000 	.word	0x00000000

08001228 <Battery_ReadCurrent5V>:

void Battery_ReadCurrent5V(Battery_t * battery_struct,uint16_t BatteryMonitoringData[]){
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
	float32_t shunt_resistor_voltage = (BatteryMonitoringData[BATTERY_5VCURR_RANK]*ADC_VOLTAGE_REF)/ADC_BIT_VALUE;
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	881b      	ldrh	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f956 	bl	80004e8 <__aeabi_i2d>
 800123c:	a319      	add	r3, pc, #100	; (adr r3, 80012a4 <Battery_ReadCurrent5V+0x7c>)
 800123e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001242:	f7ff f9bb 	bl	80005bc <__aeabi_dmul>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	f04f 0200 	mov.w	r2, #0
 8001252:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <Battery_ReadCurrent5V+0x78>)
 8001254:	f7ff fadc 	bl	8000810 <__aeabi_ddiv>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4610      	mov	r0, r2
 800125e:	4619      	mov	r1, r3
 8001260:	f7ff fc5c 	bl	8000b1c <__aeabi_d2f>
 8001264:	4603      	mov	r3, r0
 8001266:	60fb      	str	r3, [r7, #12]
	battery_struct->CurrentConsumption5V = shunt_resistor_voltage/SHUNT_RESISTOR_VALUE;
 8001268:	68f8      	ldr	r0, [r7, #12]
 800126a:	f7ff f94f 	bl	800050c <__aeabi_f2d>
 800126e:	a30a      	add	r3, pc, #40	; (adr r3, 8001298 <Battery_ReadCurrent5V+0x70>)
 8001270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001274:	f7ff facc 	bl	8000810 <__aeabi_ddiv>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	4610      	mov	r0, r2
 800127e:	4619      	mov	r1, r3
 8001280:	f7ff fc4c 	bl	8000b1c <__aeabi_d2f>
 8001284:	4602      	mov	r2, r0
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	609a      	str	r2, [r3, #8]
}
 800128a:	bf00      	nop
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	f3af 8000 	nop.w
 8001298:	d2f1a9fc 	.word	0xd2f1a9fc
 800129c:	3f60624d 	.word	0x3f60624d
 80012a0:	40b00000 	.word	0x40b00000
 80012a4:	66666666 	.word	0x66666666
 80012a8:	400a6666 	.word	0x400a6666
 80012ac:	00000000 	.word	0x00000000

080012b0 <Battery_RemaningTime>:

void Battery_RemaningTime(Battery_t * battery_struct){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]

	float32_t current_average = battery_struct->CurrentConsumption3V3 + battery_struct->CurrentConsumption5V;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	ed93 7a01 	vldr	s14, [r3, #4]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80012c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012c8:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t battery_remaining_hour = BATTERRY_CAPACITY/current_average;
 80012cc:	68f8      	ldr	r0, [r7, #12]
 80012ce:	f7ff f91d 	bl	800050c <__aeabi_f2d>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	a10f      	add	r1, pc, #60	; (adr r1, 8001314 <Battery_RemaningTime+0x64>)
 80012d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012dc:	f7ff fa98 	bl	8000810 <__aeabi_ddiv>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4610      	mov	r0, r2
 80012e6:	4619      	mov	r1, r3
 80012e8:	f7ff fc18 	bl	8000b1c <__aeabi_d2f>
 80012ec:	4603      	mov	r3, r0
 80012ee:	60bb      	str	r3, [r7, #8]
	battery_struct->battery_left_ms = (battery_remaining_hour*3600000);
 80012f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80012f4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001310 <Battery_RemaningTime+0x60>
 80012f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001300:	ee17 2a90 	vmov	r2, s15
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	60da      	str	r2, [r3, #12]
}
 8001308:	bf00      	nop
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	4a5bba00 	.word	0x4a5bba00
 8001314:	9999999a 	.word	0x9999999a
 8001318:	40019999 	.word	0x40019999

0800131c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800131c:	b5b0      	push	{r4, r5, r7, lr}
 800131e:	b0b8      	sub	sp, #224	; 0xe0
 8001320:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN Init */

	/*Configure output for timer*/
	PropulsionAndControl_Init(&HDW_CONTROLLER_struct, ESC_GPIO_PIN, ESC_GPIO_PORT, SERVO_LEFT_GPIO_PIN, SERVO_LEFT_GPIO_PORT, SERVO_RIGHT_GPIO_PIN, SERVO_RIGHT_GPIO_PORT, ESC_TIMER_CHANNEL_NBR, SERVO_LEFT_TIMER_CHANNEL_NBR, SERVO_RIGHT_TIMER_CHANNEL_NBR, &htim4);
 8001322:	4b6b      	ldr	r3, [pc, #428]	; (80014d0 <MX_FREERTOS_Init+0x1b4>)
 8001324:	9306      	str	r3, [sp, #24]
 8001326:	2302      	movs	r3, #2
 8001328:	9305      	str	r3, [sp, #20]
 800132a:	2301      	movs	r3, #1
 800132c:	9304      	str	r3, [sp, #16]
 800132e:	2304      	movs	r3, #4
 8001330:	9303      	str	r3, [sp, #12]
 8001332:	4b68      	ldr	r3, [pc, #416]	; (80014d4 <MX_FREERTOS_Init+0x1b8>)
 8001334:	9302      	str	r3, [sp, #8]
 8001336:	2380      	movs	r3, #128	; 0x80
 8001338:	9301      	str	r3, [sp, #4]
 800133a:	4b66      	ldr	r3, [pc, #408]	; (80014d4 <MX_FREERTOS_Init+0x1b8>)
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	2340      	movs	r3, #64	; 0x40
 8001340:	4a64      	ldr	r2, [pc, #400]	; (80014d4 <MX_FREERTOS_Init+0x1b8>)
 8001342:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001346:	4864      	ldr	r0, [pc, #400]	; (80014d8 <MX_FREERTOS_Init+0x1bc>)
 8001348:	f002 f96c 	bl	8003624 <PropulsionAndControl_Init>

	/*Init for IMU sensors*/
	BNO055_Init(&hi2c2, &IMU_BNO055_struct);
 800134c:	4963      	ldr	r1, [pc, #396]	; (80014dc <MX_FREERTOS_Init+0x1c0>)
 800134e:	4864      	ldr	r0, [pc, #400]	; (80014e0 <MX_FREERTOS_Init+0x1c4>)
 8001350:	f000 fe2d 	bl	8001fae <BNO055_Init>


  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of I2C_Controller */
  osMutexDef(I2C_Controller);
 8001354:	2300      	movs	r3, #0
 8001356:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  I2C_ControllerHandle = osMutexCreate(osMutex(I2C_Controller));
 800135a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800135e:	4618      	mov	r0, r3
 8001360:	f00f fd7d 	bl	8010e5e <osMutexCreate>
 8001364:	4603      	mov	r3, r0
 8001366:	4a5f      	ldr	r2, [pc, #380]	; (80014e4 <MX_FREERTOS_Init+0x1c8>)
 8001368:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of GPS_UART_Semaphore */
  osSemaphoreDef(GPS_UART_Semaphore);
 800136a:	2300      	movs	r3, #0
 800136c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  GPS_UART_SemaphoreHandle = osSemaphoreCreate(osSemaphore(GPS_UART_Semaphore), 1);
 8001370:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001374:	2101      	movs	r1, #1
 8001376:	4618      	mov	r0, r3
 8001378:	f00f fd7d 	bl	8010e76 <osSemaphoreCreate>
 800137c:	4603      	mov	r3, r0
 800137e:	4a5a      	ldr	r2, [pc, #360]	; (80014e8 <MX_FREERTOS_Init+0x1cc>)
 8001380:	6013      	str	r3, [r2, #0]

  /* definition and creation of HG_PROTECTION_SEM */
  osSemaphoreDef(HG_PROTECTION_SEM);
 8001382:	2300      	movs	r3, #0
 8001384:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  HG_PROTECTION_SEMHandle = osSemaphoreCreate(osSemaphore(HG_PROTECTION_SEM), 1);
 8001388:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800138c:	2101      	movs	r1, #1
 800138e:	4618      	mov	r0, r3
 8001390:	f00f fd71 	bl	8010e76 <osSemaphoreCreate>
 8001394:	4603      	mov	r3, r0
 8001396:	4a55      	ldr	r2, [pc, #340]	; (80014ec <MX_FREERTOS_Init+0x1d0>)
 8001398:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of LedTask */
  osThreadDef(LedTask, StartLedTask, osPriorityNormal, 0, 128);
 800139a:	4b55      	ldr	r3, [pc, #340]	; (80014f0 <MX_FREERTOS_Init+0x1d4>)
 800139c:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 80013a0:	461d      	mov	r5, r3
 80013a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013a6:	682b      	ldr	r3, [r5, #0]
 80013a8:	6023      	str	r3, [r4, #0]
  LedTaskHandle = osThreadCreate(osThread(LedTask), NULL);
 80013aa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80013ae:	2100      	movs	r1, #0
 80013b0:	4618      	mov	r0, r3
 80013b2:	f00f fd19 	bl	8010de8 <osThreadCreate>
 80013b6:	4603      	mov	r3, r0
 80013b8:	4a4e      	ldr	r2, [pc, #312]	; (80014f4 <MX_FREERTOS_Init+0x1d8>)
 80013ba:	6013      	str	r3, [r2, #0]

  /* definition and creation of Roll_PID */
  osThreadDef(Roll_PID, StartRoll_PID, osPriorityLow, 0, 128);
 80013bc:	4b4e      	ldr	r3, [pc, #312]	; (80014f8 <MX_FREERTOS_Init+0x1dc>)
 80013be:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80013c2:	461d      	mov	r5, r3
 80013c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013c8:	682b      	ldr	r3, [r5, #0]
 80013ca:	6023      	str	r3, [r4, #0]
  Roll_PIDHandle = osThreadCreate(osThread(Roll_PID), NULL);
 80013cc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80013d0:	2100      	movs	r1, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f00f fd08 	bl	8010de8 <osThreadCreate>
 80013d8:	4603      	mov	r3, r0
 80013da:	4a48      	ldr	r2, [pc, #288]	; (80014fc <MX_FREERTOS_Init+0x1e0>)
 80013dc:	6013      	str	r3, [r2, #0]

  /* definition and creation of Pitch_PID */
  osThreadDef(Pitch_PID, StartPitch_PID, osPriorityLow, 0, 128);
 80013de:	4b48      	ldr	r3, [pc, #288]	; (8001500 <MX_FREERTOS_Init+0x1e4>)
 80013e0:	f107 0478 	add.w	r4, r7, #120	; 0x78
 80013e4:	461d      	mov	r5, r3
 80013e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ea:	682b      	ldr	r3, [r5, #0]
 80013ec:	6023      	str	r3, [r4, #0]
  Pitch_PIDHandle = osThreadCreate(osThread(Pitch_PID), NULL);
 80013ee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80013f2:	2100      	movs	r1, #0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f00f fcf7 	bl	8010de8 <osThreadCreate>
 80013fa:	4603      	mov	r3, r0
 80013fc:	4a41      	ldr	r2, [pc, #260]	; (8001504 <MX_FREERTOS_Init+0x1e8>)
 80013fe:	6013      	str	r3, [r2, #0]

  /* definition and creation of Yaw_PID */
  osThreadDef(Yaw_PID, StartYaw_PID, osPriorityLow, 0, 128);
 8001400:	4b41      	ldr	r3, [pc, #260]	; (8001508 <MX_FREERTOS_Init+0x1ec>)
 8001402:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8001406:	461d      	mov	r5, r3
 8001408:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800140a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800140c:	682b      	ldr	r3, [r5, #0]
 800140e:	6023      	str	r3, [r4, #0]
  Yaw_PIDHandle = osThreadCreate(osThread(Yaw_PID), NULL);
 8001410:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001414:	2100      	movs	r1, #0
 8001416:	4618      	mov	r0, r3
 8001418:	f00f fce6 	bl	8010de8 <osThreadCreate>
 800141c:	4603      	mov	r3, r0
 800141e:	4a3b      	ldr	r2, [pc, #236]	; (800150c <MX_FREERTOS_Init+0x1f0>)
 8001420:	6013      	str	r3, [r2, #0]

  /* definition and creation of PressureMonitor */
  osThreadDef(PressureMonitor, StartPressureMonitor, osPriorityLow, 0, 128);
 8001422:	4b3b      	ldr	r3, [pc, #236]	; (8001510 <MX_FREERTOS_Init+0x1f4>)
 8001424:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8001428:	461d      	mov	r5, r3
 800142a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800142c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800142e:	682b      	ldr	r3, [r5, #0]
 8001430:	6023      	str	r3, [r4, #0]
  PressureMonitorHandle = osThreadCreate(osThread(PressureMonitor), NULL);
 8001432:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001436:	2100      	movs	r1, #0
 8001438:	4618      	mov	r0, r3
 800143a:	f00f fcd5 	bl	8010de8 <osThreadCreate>
 800143e:	4603      	mov	r3, r0
 8001440:	4a34      	ldr	r2, [pc, #208]	; (8001514 <MX_FREERTOS_Init+0x1f8>)
 8001442:	6013      	str	r3, [r2, #0]

  /* definition and creation of GPS */
  osThreadDef(GPS, StartGPS, osPriorityLow, 0, 128);
 8001444:	4b34      	ldr	r3, [pc, #208]	; (8001518 <MX_FREERTOS_Init+0x1fc>)
 8001446:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800144a:	461d      	mov	r5, r3
 800144c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800144e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001450:	682b      	ldr	r3, [r5, #0]
 8001452:	6023      	str	r3, [r4, #0]
  GPSHandle = osThreadCreate(osThread(GPS), NULL);
 8001454:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001458:	2100      	movs	r1, #0
 800145a:	4618      	mov	r0, r3
 800145c:	f00f fcc4 	bl	8010de8 <osThreadCreate>
 8001460:	4603      	mov	r3, r0
 8001462:	4a2e      	ldr	r2, [pc, #184]	; (800151c <MX_FREERTOS_Init+0x200>)
 8001464:	6013      	str	r3, [r2, #0]

  /* definition and creation of MainTask */
  osThreadDef(MainTask, StartMainTask, osPriorityLow, 0, 256);
 8001466:	4b2e      	ldr	r3, [pc, #184]	; (8001520 <MX_FREERTOS_Init+0x204>)
 8001468:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800146c:	461d      	mov	r5, r3
 800146e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001470:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001472:	682b      	ldr	r3, [r5, #0]
 8001474:	6023      	str	r3, [r4, #0]
  MainTaskHandle = osThreadCreate(osThread(MainTask), NULL);
 8001476:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800147a:	2100      	movs	r1, #0
 800147c:	4618      	mov	r0, r3
 800147e:	f00f fcb3 	bl	8010de8 <osThreadCreate>
 8001482:	4603      	mov	r3, r0
 8001484:	4a27      	ldr	r2, [pc, #156]	; (8001524 <MX_FREERTOS_Init+0x208>)
 8001486:	6013      	str	r3, [r2, #0]

  /* definition and creation of BatteryMonitori */
  osThreadDef(BatteryMonitori, StartBatteryMonitoring, osPriorityLow, 0, 128);
 8001488:	4b27      	ldr	r3, [pc, #156]	; (8001528 <MX_FREERTOS_Init+0x20c>)
 800148a:	f107 0414 	add.w	r4, r7, #20
 800148e:	461d      	mov	r5, r3
 8001490:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001492:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001494:	682b      	ldr	r3, [r5, #0]
 8001496:	6023      	str	r3, [r4, #0]
  BatteryMonitoriHandle = osThreadCreate(osThread(BatteryMonitori), NULL);
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	2100      	movs	r1, #0
 800149e:	4618      	mov	r0, r3
 80014a0:	f00f fca2 	bl	8010de8 <osThreadCreate>
 80014a4:	4603      	mov	r3, r0
 80014a6:	4a21      	ldr	r2, [pc, #132]	; (800152c <MX_FREERTOS_Init+0x210>)
 80014a8:	6013      	str	r3, [r2, #0]

  /* definition and creation of Telemetry */
  osThreadDef(Telemetry, StartTelemetry, osPriorityIdle, 0, 256);
 80014aa:	4b21      	ldr	r3, [pc, #132]	; (8001530 <MX_FREERTOS_Init+0x214>)
 80014ac:	463c      	mov	r4, r7
 80014ae:	461d      	mov	r5, r3
 80014b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014b4:	682b      	ldr	r3, [r5, #0]
 80014b6:	6023      	str	r3, [r4, #0]
  TelemetryHandle = osThreadCreate(osThread(Telemetry), NULL);
 80014b8:	463b      	mov	r3, r7
 80014ba:	2100      	movs	r1, #0
 80014bc:	4618      	mov	r0, r3
 80014be:	f00f fc93 	bl	8010de8 <osThreadCreate>
 80014c2:	4603      	mov	r3, r0
 80014c4:	4a1b      	ldr	r2, [pc, #108]	; (8001534 <MX_FREERTOS_Init+0x218>)
 80014c6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80014c8:	bf00      	nop
 80014ca:	37c0      	adds	r7, #192	; 0xc0
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bdb0      	pop	{r4, r5, r7, pc}
 80014d0:	20000a28 	.word	0x20000a28
 80014d4:	48000400 	.word	0x48000400
 80014d8:	2000047c 	.word	0x2000047c
 80014dc:	200003c0 	.word	0x200003c0
 80014e0:	20000374 	.word	0x20000374
 80014e4:	20000368 	.word	0x20000368
 80014e8:	2000036c 	.word	0x2000036c
 80014ec:	20000370 	.word	0x20000370
 80014f0:	08014a58 	.word	0x08014a58
 80014f4:	20000344 	.word	0x20000344
 80014f8:	08014a78 	.word	0x08014a78
 80014fc:	20000348 	.word	0x20000348
 8001500:	08014a98 	.word	0x08014a98
 8001504:	2000034c 	.word	0x2000034c
 8001508:	08014ab4 	.word	0x08014ab4
 800150c:	20000350 	.word	0x20000350
 8001510:	08014ad8 	.word	0x08014ad8
 8001514:	20000354 	.word	0x20000354
 8001518:	08014af0 	.word	0x08014af0
 800151c:	20000358 	.word	0x20000358
 8001520:	08014b10 	.word	0x08014b10
 8001524:	2000035c 	.word	0x2000035c
 8001528:	08014b34 	.word	0x08014b34
 800152c:	20000360 	.word	0x20000360
 8001530:	08014b54 	.word	0x08014b54
 8001534:	20000364 	.word	0x20000364

08001538 <StartLedTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLedTask */
void StartLedTask(void const * argument)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	/*htim3.Instance->CCR1 = 1000;
	vTaskDelay(100);
	htim3.Instance->CCR1 = 0;*/
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001540:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001544:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001548:	f004 fdb4 	bl	80060b4 <HAL_GPIO_TogglePin>
    vTaskDelay(5000);
 800154c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001550:	f010 fafc 	bl	8011b4c <vTaskDelay>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001554:	e7f4      	b.n	8001540 <StartLedTask+0x8>
	...

08001558 <StartRoll_PID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRoll_PID */
void StartRoll_PID(void const * argument)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRoll_PID */


	/*PID factor init*/
	Pid_Init(&hpid_roll, PID_KP_ROLL, PID_KI_ROLL, PID_KD_ROLL);
 8001560:	ed9f 1a11 	vldr	s2, [pc, #68]	; 80015a8 <StartRoll_PID+0x50>
 8001564:	eddf 0a11 	vldr	s1, [pc, #68]	; 80015ac <StartRoll_PID+0x54>
 8001568:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80015b0 <StartRoll_PID+0x58>
 800156c:	4811      	ldr	r0, [pc, #68]	; (80015b4 <StartRoll_PID+0x5c>)
 800156e:	f001 fe33 	bl	80031d8 <Pid_Init>

  /* Infinite loop */
	for(;;)
	{	/*Read roll axis data*/
		xSemaphoreTake(I2C_ControllerHandle,25);
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <StartRoll_PID+0x60>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2119      	movs	r1, #25
 8001578:	4618      	mov	r0, r3
 800157a:	f00f ffa5 	bl	80114c8 <xQueueSemaphoreTake>
		BNO055_ReadEuler_Roll(&hi2c2, &IMU_BNO055_struct);
 800157e:	490f      	ldr	r1, [pc, #60]	; (80015bc <StartRoll_PID+0x64>)
 8001580:	480f      	ldr	r0, [pc, #60]	; (80015c0 <StartRoll_PID+0x68>)
 8001582:	f000 fe8f 	bl	80022a4 <BNO055_ReadEuler_Roll>
		xSemaphoreGive(I2C_ControllerHandle);
 8001586:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <StartRoll_PID+0x60>)
 8001588:	6818      	ldr	r0, [r3, #0]
 800158a:	2300      	movs	r3, #0
 800158c:	2200      	movs	r2, #0
 800158e:	2100      	movs	r1, #0
 8001590:	f00f fe26 	bl	80111e0 <xQueueGenericSend>

		/*Compensate PID*/
		Pid_CompensateRoll(&hpid_roll, &COMMAND_struct, &IMU_BNO055_struct, &HDW_CONTROLLER_struct);
 8001594:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <StartRoll_PID+0x6c>)
 8001596:	4a09      	ldr	r2, [pc, #36]	; (80015bc <StartRoll_PID+0x64>)
 8001598:	490b      	ldr	r1, [pc, #44]	; (80015c8 <StartRoll_PID+0x70>)
 800159a:	4806      	ldr	r0, [pc, #24]	; (80015b4 <StartRoll_PID+0x5c>)
 800159c:	f001 fe7a 	bl	8003294 <Pid_CompensateRoll>
		vTaskDelay(150);
 80015a0:	2096      	movs	r0, #150	; 0x96
 80015a2:	f010 fad3 	bl	8011b4c <vTaskDelay>
		xSemaphoreTake(I2C_ControllerHandle,25);
 80015a6:	e7e4      	b.n	8001572 <StartRoll_PID+0x1a>
 80015a8:	bdb15662 	.word	0xbdb15662
 80015ac:	bce59984 	.word	0xbce59984
 80015b0:	be07bf5a 	.word	0xbe07bf5a
 80015b4:	20000320 	.word	0x20000320
 80015b8:	20000368 	.word	0x20000368
 80015bc:	200003c0 	.word	0x200003c0
 80015c0:	20000374 	.word	0x20000374
 80015c4:	2000047c 	.word	0x2000047c
 80015c8:	20000468 	.word	0x20000468

080015cc <StartPitch_PID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPitch_PID */
void StartPitch_PID(void const * argument)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPitch_PID */
	Pid_Init(&hpid_pitch, PID_KP_PITCH, PID_KI_PITCH, PID_KD_PITCH);
 80015d4:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 80015d8:	eddf 0a10 	vldr	s1, [pc, #64]	; 800161c <StartPitch_PID+0x50>
 80015dc:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8001620 <StartPitch_PID+0x54>
 80015e0:	4810      	ldr	r0, [pc, #64]	; (8001624 <StartPitch_PID+0x58>)
 80015e2:	f001 fdf9 	bl	80031d8 <Pid_Init>
  /* Infinite loop */
  for(;;)
  {
	  	/*Read pitch axis data*/
		xSemaphoreTake(I2C_ControllerHandle,25);
 80015e6:	4b10      	ldr	r3, [pc, #64]	; (8001628 <StartPitch_PID+0x5c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2119      	movs	r1, #25
 80015ec:	4618      	mov	r0, r3
 80015ee:	f00f ff6b 	bl	80114c8 <xQueueSemaphoreTake>
		BNO055_ReadEuler_Pitch(&hi2c2, &IMU_BNO055_struct);
 80015f2:	490e      	ldr	r1, [pc, #56]	; (800162c <StartPitch_PID+0x60>)
 80015f4:	480e      	ldr	r0, [pc, #56]	; (8001630 <StartPitch_PID+0x64>)
 80015f6:	f000 fea7 	bl	8002348 <BNO055_ReadEuler_Pitch>
		xSemaphoreGive(I2C_ControllerHandle);
 80015fa:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <StartPitch_PID+0x5c>)
 80015fc:	6818      	ldr	r0, [r3, #0]
 80015fe:	2300      	movs	r3, #0
 8001600:	2200      	movs	r2, #0
 8001602:	2100      	movs	r1, #0
 8001604:	f00f fdec 	bl	80111e0 <xQueueGenericSend>

		/*Compensate PID */
		Pid_CompensatePitch(&hpid_pitch, &COMMAND_struct, &IMU_BNO055_struct, &HDW_CONTROLLER_struct);
 8001608:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <StartPitch_PID+0x68>)
 800160a:	4a08      	ldr	r2, [pc, #32]	; (800162c <StartPitch_PID+0x60>)
 800160c:	490a      	ldr	r1, [pc, #40]	; (8001638 <StartPitch_PID+0x6c>)
 800160e:	4805      	ldr	r0, [pc, #20]	; (8001624 <StartPitch_PID+0x58>)
 8001610:	f001 ff06 	bl	8003420 <Pid_CompensatePitch>
		vTaskDelay(150);
 8001614:	2096      	movs	r0, #150	; 0x96
 8001616:	f010 fa99 	bl	8011b4c <vTaskDelay>
		xSemaphoreTake(I2C_ControllerHandle,25);
 800161a:	e7e4      	b.n	80015e6 <StartPitch_PID+0x1a>
 800161c:	3ccccccd 	.word	0x3ccccccd
 8001620:	42c80000 	.word	0x42c80000
 8001624:	200002d8 	.word	0x200002d8
 8001628:	20000368 	.word	0x20000368
 800162c:	200003c0 	.word	0x200003c0
 8001630:	20000374 	.word	0x20000374
 8001634:	2000047c 	.word	0x2000047c
 8001638:	20000468 	.word	0x20000468

0800163c <StartYaw_PID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartYaw_PID */
void StartYaw_PID(void const * argument)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartYaw_PID */
	Pid_Init(&hpid_yaw, PID_KP_YAW, PID_KI_YAW, PID_KD_YAW);
 8001644:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 8001648:	eddf 0a10 	vldr	s1, [pc, #64]	; 800168c <StartYaw_PID+0x50>
 800164c:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8001690 <StartYaw_PID+0x54>
 8001650:	4810      	ldr	r0, [pc, #64]	; (8001694 <StartYaw_PID+0x58>)
 8001652:	f001 fdc1 	bl	80031d8 <Pid_Init>
  /* Infinite loop */
  for(;;)
  {
	  	/*Read yaw axis data*/
		xSemaphoreTake(I2C_ControllerHandle,25);
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <StartYaw_PID+0x5c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2119      	movs	r1, #25
 800165c:	4618      	mov	r0, r3
 800165e:	f00f ff33 	bl	80114c8 <xQueueSemaphoreTake>
		BNO055_ReadEuler_Yaw(&hi2c2, &IMU_BNO055_struct);
 8001662:	490e      	ldr	r1, [pc, #56]	; (800169c <StartYaw_PID+0x60>)
 8001664:	480e      	ldr	r0, [pc, #56]	; (80016a0 <StartYaw_PID+0x64>)
 8001666:	f000 fec1 	bl	80023ec <BNO055_ReadEuler_Yaw>
		xSemaphoreGive(I2C_ControllerHandle);
 800166a:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <StartYaw_PID+0x5c>)
 800166c:	6818      	ldr	r0, [r3, #0]
 800166e:	2300      	movs	r3, #0
 8001670:	2200      	movs	r2, #0
 8001672:	2100      	movs	r1, #0
 8001674:	f00f fdb4 	bl	80111e0 <xQueueGenericSend>

		/*Compensate PID step 1 - error calculation */
		Pid_CompensateYaw(&hpid_yaw, &COMMAND_struct, &IMU_BNO055_struct, &HDW_CONTROLLER_struct);
 8001678:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <StartYaw_PID+0x68>)
 800167a:	4a08      	ldr	r2, [pc, #32]	; (800169c <StartYaw_PID+0x60>)
 800167c:	490a      	ldr	r1, [pc, #40]	; (80016a8 <StartYaw_PID+0x6c>)
 800167e:	4805      	ldr	r0, [pc, #20]	; (8001694 <StartYaw_PID+0x58>)
 8001680:	f001 fdc5 	bl	800320e <Pid_CompensateYaw>
		vTaskDelay(150);
 8001684:	2096      	movs	r0, #150	; 0x96
 8001686:	f010 fa61 	bl	8011b4c <vTaskDelay>
		xSemaphoreTake(I2C_ControllerHandle,25);
 800168a:	e7e4      	b.n	8001656 <StartYaw_PID+0x1a>
 800168c:	3ccccccd 	.word	0x3ccccccd
 8001690:	42c80000 	.word	0x42c80000
 8001694:	200002fc 	.word	0x200002fc
 8001698:	20000368 	.word	0x20000368
 800169c:	200003c0 	.word	0x200003c0
 80016a0:	20000374 	.word	0x20000374
 80016a4:	2000047c 	.word	0x2000047c
 80016a8:	20000468 	.word	0x20000468

080016ac <StartPressureMonitor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPressureMonitor */
void StartPressureMonitor(void const * argument)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPressureMonitor */
	BMP390_Init(&hi2c2);
 80016b4:	480f      	ldr	r0, [pc, #60]	; (80016f4 <StartPressureMonitor+0x48>)
 80016b6:	f000 f9ed 	bl	8001a94 <BMP390_Init>

	/*Barometer calibration*/
	BMP390_GetP0Pressure(&hi2c2, &ALTIMETER_struct, I2C_ControllerHandle);
 80016ba:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <StartPressureMonitor+0x4c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	461a      	mov	r2, r3
 80016c0:	490e      	ldr	r1, [pc, #56]	; (80016fc <StartPressureMonitor+0x50>)
 80016c2:	480c      	ldr	r0, [pc, #48]	; (80016f4 <StartPressureMonitor+0x48>)
 80016c4:	f000 fa30 	bl	8001b28 <BMP390_GetP0Pressure>

  /* Infinite loop */
  for(;;)
  {
	  BMP390_ReadPress(&hi2c2,&ALTIMETER_struct, I2C_ControllerHandle);
 80016c8:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <StartPressureMonitor+0x4c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	461a      	mov	r2, r3
 80016ce:	490b      	ldr	r1, [pc, #44]	; (80016fc <StartPressureMonitor+0x50>)
 80016d0:	4808      	ldr	r0, [pc, #32]	; (80016f4 <StartPressureMonitor+0x48>)
 80016d2:	f000 f979 	bl	80019c8 <BMP390_ReadPress>
	  BMP390_ReadTemp(&hi2c2, &ALTIMETER_struct, I2C_ControllerHandle);
 80016d6:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <StartPressureMonitor+0x4c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	461a      	mov	r2, r3
 80016dc:	4907      	ldr	r1, [pc, #28]	; (80016fc <StartPressureMonitor+0x50>)
 80016de:	4805      	ldr	r0, [pc, #20]	; (80016f4 <StartPressureMonitor+0x48>)
 80016e0:	f000 f91c 	bl	800191c <BMP390_ReadTemp>
	  BMP390_GetRelativeAltitude(&ALTIMETER_struct);
 80016e4:	4805      	ldr	r0, [pc, #20]	; (80016fc <StartPressureMonitor+0x50>)
 80016e6:	f000 fa4b 	bl	8001b80 <BMP390_GetRelativeAltitude>
	  /*Recalibrate sensor if gps data move too much*/
	  vTaskDelay(500);
 80016ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016ee:	f010 fa2d 	bl	8011b4c <vTaskDelay>
	  BMP390_ReadPress(&hi2c2,&ALTIMETER_struct, I2C_ControllerHandle);
 80016f2:	e7e9      	b.n	80016c8 <StartPressureMonitor+0x1c>
 80016f4:	20000374 	.word	0x20000374
 80016f8:	20000368 	.word	0x20000368
 80016fc:	200004ac 	.word	0x200004ac

08001700 <StartGPS>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGPS */
void StartGPS(void const * argument)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  /*TO BE DONE marche pas trop */
	  /*When UART IT then block task until IT*/
	  HAL_UART_Receive_IT(&huart4, &gps_receive_rx, BUFFER_SIZE_NMEA);
 8001708:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800170c:	4909      	ldr	r1, [pc, #36]	; (8001734 <StartGPS+0x34>)
 800170e:	480a      	ldr	r0, [pc, #40]	; (8001738 <StartGPS+0x38>)
 8001710:	f009 fcca 	bl	800b0a8 <HAL_UART_Receive_IT>
	  xSemaphoreTake(GPS_UART_SemaphoreHandle,100000);
 8001714:	4b09      	ldr	r3, [pc, #36]	; (800173c <StartGPS+0x3c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4909      	ldr	r1, [pc, #36]	; (8001740 <StartGPS+0x40>)
 800171a:	4618      	mov	r0, r3
 800171c:	f00f fed4 	bl	80114c8 <xQueueSemaphoreTake>
	  gps_ReadNMEA(gps_receive_rx,&GPS_struct);
 8001720:	4908      	ldr	r1, [pc, #32]	; (8001744 <StartGPS+0x44>)
 8001722:	4804      	ldr	r0, [pc, #16]	; (8001734 <StartGPS+0x34>)
 8001724:	f001 f82a 	bl	800277c <gps_ReadNMEA>
	  vTaskDelay(1000);
 8001728:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800172c:	f010 fa0e 	bl	8011b4c <vTaskDelay>
	  HAL_UART_Receive_IT(&huart4, &gps_receive_rx, BUFFER_SIZE_NMEA);
 8001730:	e7ea      	b.n	8001708 <StartGPS+0x8>
 8001732:	bf00      	nop
 8001734:	200004f0 	.word	0x200004f0
 8001738:	20000a74 	.word	0x20000a74
 800173c:	2000036c 	.word	0x2000036c
 8001740:	000186a0 	.word	0x000186a0
 8001744:	200004c0 	.word	0x200004c0

08001748 <StartMainTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMainTask */
void StartMainTask(void const * argument)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b09c      	sub	sp, #112	; 0x70
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMainTask */
	  xSemaphoreTake(HG_PROTECTION_SEMHandle,9999999999999999);
 8001750:	4b19      	ldr	r3, [pc, #100]	; (80017b8 <StartMainTask+0x70>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4919      	ldr	r1, [pc, #100]	; (80017bc <StartMainTask+0x74>)
 8001756:	4618      	mov	r0, r3
 8001758:	f00f feb6 	bl	80114c8 <xQueueSemaphoreTake>
	  xSemaphoreTake(HG_PROTECTION_SEMHandle,9999999999999999);
 800175c:	4b16      	ldr	r3, [pc, #88]	; (80017b8 <StartMainTask+0x70>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4916      	ldr	r1, [pc, #88]	; (80017bc <StartMainTask+0x74>)
 8001762:	4618      	mov	r0, r3
 8001764:	f00f feb0 	bl	80114c8 <xQueueSemaphoreTake>
	for(int i=0;i<5;i++){
 8001768:	2300      	movs	r3, #0
 800176a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800176c:	e011      	b.n	8001792 <StartMainTask+0x4a>
		htim3.Instance->CCR1 = 1000;
 800176e:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <StartMainTask+0x78>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001776:	635a      	str	r2, [r3, #52]	; 0x34
		vTaskDelay(100);
 8001778:	2064      	movs	r0, #100	; 0x64
 800177a:	f010 f9e7 	bl	8011b4c <vTaskDelay>
		htim3.Instance->CCR1 = 0;
 800177e:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <StartMainTask+0x78>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2200      	movs	r2, #0
 8001784:	635a      	str	r2, [r3, #52]	; 0x34
		vTaskDelay(100);
 8001786:	2064      	movs	r0, #100	; 0x64
 8001788:	f010 f9e0 	bl	8011b4c <vTaskDelay>
	for(int i=0;i<5;i++){
 800178c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800178e:	3301      	adds	r3, #1
 8001790:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001794:	2b04      	cmp	r3, #4
 8001796:	ddea      	ble.n	800176e <StartMainTask+0x26>
  /* Infinite loop */
  for(;;)
  {

//	  BNO055_ReadLina(&hi2c2, &IMU_BNO055_struct, I2C_ControllerHandle);
	  BNO055_ReadAccel(&hi2c2, &IMU_BNO055_struct, I2C_ControllerHandle);
 8001798:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <StartMainTask+0x7c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	461a      	mov	r2, r3
 800179e:	490a      	ldr	r1, [pc, #40]	; (80017c8 <StartMainTask+0x80>)
 80017a0:	480a      	ldr	r0, [pc, #40]	; (80017cc <StartMainTask+0x84>)
 80017a2:	f000 fc61 	bl	8002068 <BNO055_ReadAccel>
	  BNO055_ComputeSpeed(&hi2c2, &IMU_BNO055_struct);
 80017a6:	4908      	ldr	r1, [pc, #32]	; (80017c8 <StartMainTask+0x80>)
 80017a8:	4808      	ldr	r0, [pc, #32]	; (80017cc <StartMainTask+0x84>)
 80017aa:	f000 fe59 	bl	8002460 <BNO055_ComputeSpeed>


	  vTaskDelay(500);
 80017ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017b2:	f010 f9cb 	bl	8011b4c <vTaskDelay>
	  BNO055_ReadAccel(&hi2c2, &IMU_BNO055_struct, I2C_ControllerHandle);
 80017b6:	e7ef      	b.n	8001798 <StartMainTask+0x50>
 80017b8:	20000370 	.word	0x20000370
 80017bc:	6fc0ffff 	.word	0x6fc0ffff
 80017c0:	200009dc 	.word	0x200009dc
 80017c4:	20000368 	.word	0x20000368
 80017c8:	200003c0 	.word	0x200003c0
 80017cc:	20000374 	.word	0x20000374

080017d0 <StartBatteryMonitoring>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBatteryMonitoring */
void StartBatteryMonitoring(void const * argument)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBatteryMonitoring */
  /* Infinite loop */
  for(;;)
  {
	Battery_ReadBatteryVoltage(&BATTERY_Struct,BatteryMonitoringData);
 80017d8:	4909      	ldr	r1, [pc, #36]	; (8001800 <StartBatteryMonitoring+0x30>)
 80017da:	480a      	ldr	r0, [pc, #40]	; (8001804 <StartBatteryMonitoring+0x34>)
 80017dc:	f7ff fcb0 	bl	8001140 <Battery_ReadBatteryVoltage>
	Battery_ReadCurrent5V(&BATTERY_Struct, BatteryMonitoringData);
 80017e0:	4907      	ldr	r1, [pc, #28]	; (8001800 <StartBatteryMonitoring+0x30>)
 80017e2:	4808      	ldr	r0, [pc, #32]	; (8001804 <StartBatteryMonitoring+0x34>)
 80017e4:	f7ff fd20 	bl	8001228 <Battery_ReadCurrent5V>
	Battery_ReadCurrent3V3(&BATTERY_Struct, BatteryMonitoringData);
 80017e8:	4905      	ldr	r1, [pc, #20]	; (8001800 <StartBatteryMonitoring+0x30>)
 80017ea:	4806      	ldr	r0, [pc, #24]	; (8001804 <StartBatteryMonitoring+0x34>)
 80017ec:	f7ff fcd8 	bl	80011a0 <Battery_ReadCurrent3V3>
	Battery_RemaningTime(&BATTERY_Struct);
 80017f0:	4804      	ldr	r0, [pc, #16]	; (8001804 <StartBatteryMonitoring+0x34>)
 80017f2:	f7ff fd5d 	bl	80012b0 <Battery_RemaningTime>
    vTaskDelay(5000);
 80017f6:	f241 3088 	movw	r0, #5000	; 0x1388
 80017fa:	f010 f9a7 	bl	8011b4c <vTaskDelay>
	Battery_ReadBatteryVoltage(&BATTERY_Struct,BatteryMonitoringData);
 80017fe:	e7eb      	b.n	80017d8 <StartBatteryMonitoring+0x8>
 8001800:	200008d8 	.word	0x200008d8
 8001804:	200004e0 	.word	0x200004e0

08001808 <StartTelemetry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetry */
void StartTelemetry(void const * argument)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTelemetry */
	WIOE5_Init(&huart5);
 8001810:	4803      	ldr	r0, [pc, #12]	; (8001820 <StartTelemetry+0x18>)
 8001812:	f001 fb71 	bl	8002ef8 <WIOE5_Init>
  /* Infinite loop */
  for(;;)
  {
	  vTaskDelay(1000);
 8001816:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800181a:	f010 f997 	bl	8011b4c <vTaskDelay>
 800181e:	e7fa      	b.n	8001816 <StartTelemetry+0xe>
 8001820:	20000b04 	.word	0x20000b04

08001824 <BMP390_EnablePressureSensor>:
	//Clearing the register is done by reading it
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, STATUS_REG, 1, &data, 1, 10);
}

void BMP390_EnablePressureSensor(I2C_HandleTypeDef *I2C){
 8001824:	b580      	push	{r7, lr}
 8001826:	b088      	sub	sp, #32
 8001828:	af04      	add	r7, sp, #16
 800182a:	6078      	str	r0, [r7, #4]
	uint8_t reg_value;
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
 800182c:	230a      	movs	r3, #10
 800182e:	9302      	str	r3, [sp, #8]
 8001830:	2301      	movs	r3, #1
 8001832:	9301      	str	r3, [sp, #4]
 8001834:	f107 030f 	add.w	r3, r7, #15
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	2301      	movs	r3, #1
 800183c:	221b      	movs	r2, #27
 800183e:	21ec      	movs	r1, #236	; 0xec
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f004 fe17 	bl	8006474 <HAL_I2C_Mem_Read>
	data = (reg_value&0x32) + 0x01;
 8001846:	7bfb      	ldrb	r3, [r7, #15]
 8001848:	f003 0332 	and.w	r3, r3, #50	; 0x32
 800184c:	b2db      	uxtb	r3, r3
 800184e:	3301      	adds	r3, #1
 8001850:	b2db      	uxtb	r3, r3
 8001852:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
 8001854:	230a      	movs	r3, #10
 8001856:	9302      	str	r3, [sp, #8]
 8001858:	2301      	movs	r3, #1
 800185a:	9301      	str	r3, [sp, #4]
 800185c:	f107 030e 	add.w	r3, r7, #14
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	2301      	movs	r3, #1
 8001864:	221b      	movs	r2, #27
 8001866:	21ec      	movs	r1, #236	; 0xec
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f004 fcef 	bl	800624c <HAL_I2C_Mem_Write>
}
 800186e:	bf00      	nop
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <BMP390_EnableTempSensor>:
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
	data = (reg_value&0x31);
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
}

void BMP390_EnableTempSensor(I2C_HandleTypeDef *I2C){
 8001876:	b580      	push	{r7, lr}
 8001878:	b088      	sub	sp, #32
 800187a:	af04      	add	r7, sp, #16
 800187c:	6078      	str	r0, [r7, #4]
	uint8_t reg_value;
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
 800187e:	230a      	movs	r3, #10
 8001880:	9302      	str	r3, [sp, #8]
 8001882:	2301      	movs	r3, #1
 8001884:	9301      	str	r3, [sp, #4]
 8001886:	f107 030f 	add.w	r3, r7, #15
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	2301      	movs	r3, #1
 800188e:	221b      	movs	r2, #27
 8001890:	21ec      	movs	r1, #236	; 0xec
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f004 fdee 	bl	8006474 <HAL_I2C_Mem_Read>
	data = (reg_value&0x31) + 0x01;
 8001898:	7bfb      	ldrb	r3, [r7, #15]
 800189a:	f003 0331 	and.w	r3, r3, #49	; 0x31
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	3301      	adds	r3, #1
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
 80018a6:	230a      	movs	r3, #10
 80018a8:	9302      	str	r3, [sp, #8]
 80018aa:	2301      	movs	r3, #1
 80018ac:	9301      	str	r3, [sp, #4]
 80018ae:	f107 030e 	add.w	r3, r7, #14
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	2301      	movs	r3, #1
 80018b6:	221b      	movs	r2, #27
 80018b8:	21ec      	movs	r1, #236	; 0xec
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f004 fcc6 	bl	800624c <HAL_I2C_Mem_Write>
}
 80018c0:	bf00      	nop
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <BMP390_WakeUp>:
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
	data = (reg_value&0x03);
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
}

void BMP390_WakeUp(I2C_HandleTypeDef *I2C){
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b088      	sub	sp, #32
 80018cc:	af04      	add	r7, sp, #16
 80018ce:	6078      	str	r0, [r7, #4]
	uint8_t reg_value;
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
 80018d0:	230a      	movs	r3, #10
 80018d2:	9302      	str	r3, [sp, #8]
 80018d4:	2301      	movs	r3, #1
 80018d6:	9301      	str	r3, [sp, #4]
 80018d8:	f107 030f 	add.w	r3, r7, #15
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	2301      	movs	r3, #1
 80018e0:	221b      	movs	r2, #27
 80018e2:	21ec      	movs	r1, #236	; 0xec
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f004 fdc5 	bl	8006474 <HAL_I2C_Mem_Read>
	data = (reg_value&0x03) + 0x30;
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
 80018ec:	f003 0303 	and.w	r3, r3, #3
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	3330      	adds	r3, #48	; 0x30
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
 80018f8:	230a      	movs	r3, #10
 80018fa:	9302      	str	r3, [sp, #8]
 80018fc:	2301      	movs	r3, #1
 80018fe:	9301      	str	r3, [sp, #4]
 8001900:	f107 030e 	add.w	r3, r7, #14
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	2301      	movs	r3, #1
 8001908:	221b      	movs	r2, #27
 800190a:	21ec      	movs	r1, #236	; 0xec
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f004 fc9d 	bl	800624c <HAL_I2C_Mem_Write>
}
 8001912:	bf00      	nop
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <BMP390_ReadTemp>:
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, CONFIG_REG, 1, &reg_value, 1, 10);
	data = (reg_value&0x01) + (value<<1);
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, OSR_REG, 1, &data, 1, 10);
}

void BMP390_ReadTemp(I2C_HandleTypeDef *I2C,ALTIMETER_t *altimeter,osMutexId I2CControllerProtect){
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	; 0x28
 8001920:	af04      	add	r7, sp, #16
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
	uint8_t XLSB;
	uint8_t LSB;
	uint8_t MSB;
	uint32_t temp;

	xSemaphoreTake(I2CControllerProtect, 35);
 8001928:	2123      	movs	r1, #35	; 0x23
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f00f fdcc 	bl	80114c8 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, TEMP_XLSB_REG, 1, &XLSB, 1, 10);
 8001930:	230a      	movs	r3, #10
 8001932:	9302      	str	r3, [sp, #8]
 8001934:	2301      	movs	r3, #1
 8001936:	9301      	str	r3, [sp, #4]
 8001938:	f107 0313 	add.w	r3, r7, #19
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	2301      	movs	r3, #1
 8001940:	2207      	movs	r2, #7
 8001942:	21ec      	movs	r1, #236	; 0xec
 8001944:	68f8      	ldr	r0, [r7, #12]
 8001946:	f004 fd95 	bl	8006474 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, TEMP_LSB_REG, 1, &LSB, 1, 10);
 800194a:	230a      	movs	r3, #10
 800194c:	9302      	str	r3, [sp, #8]
 800194e:	2301      	movs	r3, #1
 8001950:	9301      	str	r3, [sp, #4]
 8001952:	f107 0312 	add.w	r3, r7, #18
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	2301      	movs	r3, #1
 800195a:	2208      	movs	r2, #8
 800195c:	21ec      	movs	r1, #236	; 0xec
 800195e:	68f8      	ldr	r0, [r7, #12]
 8001960:	f004 fd88 	bl	8006474 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, TEMP_MSB_REG, 1, &MSB, 1, 10);
 8001964:	230a      	movs	r3, #10
 8001966:	9302      	str	r3, [sp, #8]
 8001968:	2301      	movs	r3, #1
 800196a:	9301      	str	r3, [sp, #4]
 800196c:	f107 0311 	add.w	r3, r7, #17
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	2301      	movs	r3, #1
 8001974:	2209      	movs	r2, #9
 8001976:	21ec      	movs	r1, #236	; 0xec
 8001978:	68f8      	ldr	r0, [r7, #12]
 800197a:	f004 fd7b 	bl	8006474 <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 800197e:	2300      	movs	r3, #0
 8001980:	2200      	movs	r2, #0
 8001982:	2100      	movs	r1, #0
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f00f fc2b 	bl	80111e0 <xQueueGenericSend>
	temp = XLSB + (LSB<<8) + (MSB<<16);
 800198a:	7cfb      	ldrb	r3, [r7, #19]
 800198c:	461a      	mov	r2, r3
 800198e:	7cbb      	ldrb	r3, [r7, #18]
 8001990:	021b      	lsls	r3, r3, #8
 8001992:	441a      	add	r2, r3
 8001994:	7c7b      	ldrb	r3, [r7, #17]
 8001996:	041b      	lsls	r3, r3, #16
 8001998:	4413      	add	r3, r2
 800199a:	617b      	str	r3, [r7, #20]
	altimeter->temp_data = (temp/258111);
 800199c:	697a      	ldr	r2, [r7, #20]
 800199e:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <BMP390_ReadTemp+0xa8>)
 80019a0:	fba3 1302 	umull	r1, r3, r3, r2
 80019a4:	1ad2      	subs	r2, r2, r3
 80019a6:	0852      	lsrs	r2, r2, #1
 80019a8:	4413      	add	r3, r2
 80019aa:	0c5b      	lsrs	r3, r3, #17
 80019ac:	ee07 3a90 	vmov	s15, r3
 80019b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80019ba:	bf00      	nop
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	04000105 	.word	0x04000105

080019c8 <BMP390_ReadPress>:

void BMP390_ReadPress(I2C_HandleTypeDef *I2C,ALTIMETER_t *altimeter,osMutexId I2CControllerProtect){
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08a      	sub	sp, #40	; 0x28
 80019cc:	af04      	add	r7, sp, #16
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
	uint8_t XLSB;
	uint8_t LSB;
	uint8_t MSB;
	uint32_t press;

	xSemaphoreTake(I2CControllerProtect, 35);
 80019d4:	2123      	movs	r1, #35	; 0x23
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f00f fd76 	bl	80114c8 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PRESS_XLSB_REG, 1, &XLSB, 1, 10);
 80019dc:	230a      	movs	r3, #10
 80019de:	9302      	str	r3, [sp, #8]
 80019e0:	2301      	movs	r3, #1
 80019e2:	9301      	str	r3, [sp, #4]
 80019e4:	f107 0313 	add.w	r3, r7, #19
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	2301      	movs	r3, #1
 80019ec:	2204      	movs	r2, #4
 80019ee:	21ec      	movs	r1, #236	; 0xec
 80019f0:	68f8      	ldr	r0, [r7, #12]
 80019f2:	f004 fd3f 	bl	8006474 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PRESS_LSB_REG, 1, &LSB, 1, 10);
 80019f6:	230a      	movs	r3, #10
 80019f8:	9302      	str	r3, [sp, #8]
 80019fa:	2301      	movs	r3, #1
 80019fc:	9301      	str	r3, [sp, #4]
 80019fe:	f107 0312 	add.w	r3, r7, #18
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	2301      	movs	r3, #1
 8001a06:	2205      	movs	r2, #5
 8001a08:	21ec      	movs	r1, #236	; 0xec
 8001a0a:	68f8      	ldr	r0, [r7, #12]
 8001a0c:	f004 fd32 	bl	8006474 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PRESS_MSB_REG, 1, &MSB, 1, 10);
 8001a10:	230a      	movs	r3, #10
 8001a12:	9302      	str	r3, [sp, #8]
 8001a14:	2301      	movs	r3, #1
 8001a16:	9301      	str	r3, [sp, #4]
 8001a18:	f107 0311 	add.w	r3, r7, #17
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	2301      	movs	r3, #1
 8001a20:	2206      	movs	r2, #6
 8001a22:	21ec      	movs	r1, #236	; 0xec
 8001a24:	68f8      	ldr	r0, [r7, #12]
 8001a26:	f004 fd25 	bl	8006474 <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2100      	movs	r1, #0
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f00f fbd5 	bl	80111e0 <xQueueGenericSend>
	press = XLSB + (LSB<<8) + (MSB<<16);
 8001a36:	7cfb      	ldrb	r3, [r7, #19]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	7cbb      	ldrb	r3, [r7, #18]
 8001a3c:	021b      	lsls	r3, r3, #8
 8001a3e:	441a      	add	r2, r3
 8001a40:	7c7b      	ldrb	r3, [r7, #17]
 8001a42:	041b      	lsls	r3, r3, #16
 8001a44:	4413      	add	r3, r2
 8001a46:	617b      	str	r3, [r7, #20]
	altimeter->pressure_hpa = (press*PRESS_STEP)+300;
 8001a48:	6978      	ldr	r0, [r7, #20]
 8001a4a:	f7fe fd3d 	bl	80004c8 <__aeabi_ui2d>
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <BMP390_ReadPress+0xc8>)
 8001a54:	f7fe fdb2 	bl	80005bc <__aeabi_dmul>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4610      	mov	r0, r2
 8001a5e:	4619      	mov	r1, r3
 8001a60:	a309      	add	r3, pc, #36	; (adr r3, 8001a88 <BMP390_ReadPress+0xc0>)
 8001a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a66:	f7fe fbf3 	bl	8000250 <__adddf3>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	4610      	mov	r0, r2
 8001a70:	4619      	mov	r1, r3
 8001a72:	f7ff f853 	bl	8000b1c <__aeabi_d2f>
 8001a76:	4602      	mov	r2, r0
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	601a      	str	r2, [r3, #0]

}
 8001a7c:	bf00      	nop
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	f3af 8000 	nop.w
 8001a88:	00000000 	.word	0x00000000
 8001a8c:	4072c000 	.word	0x4072c000
 8001a90:	3f0db000 	.word	0x3f0db000

08001a94 <BMP390_Init>:
	xSemaphoreGive(I2CControllerProtect);
	time = XLSB + (LSB<<8) + (MSB<<16);
	altimeter->time_data = time;
}

uint8_t BMP390_Init(I2C_HandleTypeDef *I2C){
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b088      	sub	sp, #32
 8001a98:	af04      	add	r7, sp, #16
 8001a9a:	6078      	str	r0, [r7, #4]

	uint8_t data;
	uint8_t res = 0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	73fb      	strb	r3, [r7, #15]

	//Start by checking dev ID and REV iD
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, CHIP_ID_REG, 1, &data, 1, 10);
 8001aa0:	230a      	movs	r3, #10
 8001aa2:	9302      	str	r3, [sp, #8]
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	9301      	str	r3, [sp, #4]
 8001aa8:	f107 030e 	add.w	r3, r7, #14
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	2301      	movs	r3, #1
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	21ec      	movs	r1, #236	; 0xec
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f004 fcdd 	bl	8006474 <HAL_I2C_Mem_Read>
	if(data!=0x60){
 8001aba:	7bbb      	ldrb	r3, [r7, #14]
 8001abc:	2b60      	cmp	r3, #96	; 0x60
 8001abe:	d001      	beq.n	8001ac4 <BMP390_Init+0x30>
		res = 1;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	73fb      	strb	r3, [r7, #15]
	}
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, REV_ID_REG, 1, &data, 1, 10);
 8001ac4:	230a      	movs	r3, #10
 8001ac6:	9302      	str	r3, [sp, #8]
 8001ac8:	2301      	movs	r3, #1
 8001aca:	9301      	str	r3, [sp, #4]
 8001acc:	f107 030e 	add.w	r3, r7, #14
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	21ec      	movs	r1, #236	; 0xec
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f004 fccb 	bl	8006474 <HAL_I2C_Mem_Read>
	if(data!=0x01){
 8001ade:	7bbb      	ldrb	r3, [r7, #14]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d001      	beq.n	8001ae8 <BMP390_Init+0x54>
		res = 1;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	73fb      	strb	r3, [r7, #15]
	}

	//Enable all sensors
	BMP390_EnableTempSensor(I2C);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7ff fec4 	bl	8001876 <BMP390_EnableTempSensor>
	BMP390_EnablePressureSensor(I2C);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff fe98 	bl	8001824 <BMP390_EnablePressureSensor>

	BMP390_WakeUp(I2C);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff fee7 	bl	80018c8 <BMP390_WakeUp>
	/*Wait until sensor wake up */
	HAL_Delay(5);
 8001afa:	2005      	movs	r0, #5
 8001afc:	f002 fb00 	bl	8004100 <HAL_Delay>

	//Set the IT pin on high level and enable with pressure/temp sensor
	data = 0x42;
 8001b00:	2342      	movs	r3, #66	; 0x42
 8001b02:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, INT_CTRL_REG, 1, &data, 1, 10);
 8001b04:	230a      	movs	r3, #10
 8001b06:	9302      	str	r3, [sp, #8]
 8001b08:	2301      	movs	r3, #1
 8001b0a:	9301      	str	r3, [sp, #4]
 8001b0c:	f107 030e 	add.w	r3, r7, #14
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	2301      	movs	r3, #1
 8001b14:	2219      	movs	r2, #25
 8001b16:	21ec      	movs	r1, #236	; 0xec
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f004 fb97 	bl	800624c <HAL_I2C_Mem_Write>

	//Set Filter value
	//BMP390_SetFilter(I2C, 0x02);


	return res;
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <BMP390_GetP0Pressure>:

void BMP390_GetP0Pressure(I2C_HandleTypeDef *I2C,ALTIMETER_t *altimeter,osMutexId I2CControllerProtect){
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
	float P0;
	for(int i=0;i<STARTUP_PRESSURE_AVERAGE_COUNT;i++){
 8001b34:	2300      	movs	r3, #0
 8001b36:	613b      	str	r3, [r7, #16]
 8001b38:	e010      	b.n	8001b5c <BMP390_GetP0Pressure+0x34>
		BMP390_ReadPress(I2C, altimeter, I2CControllerProtect);
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	68b9      	ldr	r1, [r7, #8]
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f7ff ff42 	bl	80019c8 <BMP390_ReadPress>
		P0 += altimeter->pressure_hpa;
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	edd3 7a00 	vldr	s15, [r3]
 8001b4a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b52:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i=0;i<STARTUP_PRESSURE_AVERAGE_COUNT;i++){
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	613b      	str	r3, [r7, #16]
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	2b09      	cmp	r3, #9
 8001b60:	ddeb      	ble.n	8001b3a <BMP390_GetP0Pressure+0x12>
	}
	altimeter->calibration_pressure = (P0/STARTUP_PRESSURE_AVERAGE_COUNT);
 8001b62:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b66:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001b6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001b74:	bf00      	nop
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	0000      	movs	r0, r0
	...

08001b80 <BMP390_GetRelativeAltitude>:

/*Function use to calculate relative altitude. In order to work properly it should'nt be call before a calibration*/
void BMP390_GetRelativeAltitude(ALTIMETER_t *altimeter){
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
	altimeter->differential_altitude = 44330.0 * (1.0 - pow(altimeter->pressure_hpa / altimeter->calibration_pressure, 0.1903));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	ed93 7a00 	vldr	s14, [r3]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b94:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001b98:	ee16 0a90 	vmov	r0, s13
 8001b9c:	f7fe fcb6 	bl	800050c <__aeabi_f2d>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8001bf0 <BMP390_GetRelativeAltitude+0x70>
 8001ba8:	ec43 2b10 	vmov	d0, r2, r3
 8001bac:	f012 f80a 	bl	8013bc4 <pow>
 8001bb0:	ec53 2b10 	vmov	r2, r3, d0
 8001bb4:	f04f 0000 	mov.w	r0, #0
 8001bb8:	4911      	ldr	r1, [pc, #68]	; (8001c00 <BMP390_GetRelativeAltitude+0x80>)
 8001bba:	f7fe fb47 	bl	800024c <__aeabi_dsub>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	4610      	mov	r0, r2
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	a30c      	add	r3, pc, #48	; (adr r3, 8001bf8 <BMP390_GetRelativeAltitude+0x78>)
 8001bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bcc:	f7fe fcf6 	bl	80005bc <__aeabi_dmul>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4610      	mov	r0, r2
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	f7fe ffa0 	bl	8000b1c <__aeabi_d2f>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	611a      	str	r2, [r3, #16]
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	f3af 8000 	nop.w
 8001bf0:	1a36e2eb 	.word	0x1a36e2eb
 8001bf4:	3fc85bc0 	.word	0x3fc85bc0
 8001bf8:	00000000 	.word	0x00000000
 8001bfc:	40e5a540 	.word	0x40e5a540
 8001c00:	3ff00000 	.word	0x3ff00000

08001c04 <BNO055_SetPage>:
 * Method use to switch page in IMU memory
 * param: I2C --> pointer on I2C handle struct
 * param: page --> integer value range 0 to 1 include
 * note: If a page value is bigger than 1 then no error will be raise so be carefull
 */
void BNO055_SetPage(I2C_HandleTypeDef *I2C,uint8_t page){
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af04      	add	r7, sp, #16
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_PAGE_ID, 1, &page, 1, 10);
 8001c10:	230a      	movs	r3, #10
 8001c12:	9302      	str	r3, [sp, #8]
 8001c14:	2301      	movs	r3, #1
 8001c16:	9301      	str	r3, [sp, #4]
 8001c18:	1cfb      	adds	r3, r7, #3
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	2207      	movs	r2, #7
 8001c20:	2150      	movs	r1, #80	; 0x50
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f004 fb12 	bl	800624c <HAL_I2C_Mem_Write>
}
 8001c28:	bf00      	nop
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <BNO055_SetOperationMode>:
 * Method use to switch operation mode of IMU
 * param: I2C --> pointer on I2C handle struct
 * param: BNO055 --> pointer on IMU struct
 * param: mode --> operation mode already define in <bno055.h>
 */
void BNO055_SetOperationMode(I2C_HandleTypeDef *I2C,bno055_opmode_t mode,BNO055_t *BNO055){
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b088      	sub	sp, #32
 8001c34:	af04      	add	r7, sp, #16
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	607a      	str	r2, [r7, #4]
 8001c3c:	72fb      	strb	r3, [r7, #11]
	BNO055->operational_mode = mode;
 8001c3e:	7afa      	ldrb	r2, [r7, #11]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_OPR_MODE, 1, &mode, 1, 10);
 8001c46:	230a      	movs	r3, #10
 8001c48:	9302      	str	r3, [sp, #8]
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	9301      	str	r3, [sp, #4]
 8001c4e:	f107 030b 	add.w	r3, r7, #11
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	2301      	movs	r3, #1
 8001c56:	223d      	movs	r2, #61	; 0x3d
 8001c58:	2150      	movs	r1, #80	; 0x50
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f004 faf6 	bl	800624c <HAL_I2C_Mem_Write>
}
 8001c60:	bf00      	nop
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <BNO055_ReadSystemReg>:

/*
 * Function use read the system register
 * param: I2C --> pointer on I2C handle struct
 */
uint8_t BNO055_ReadSystemReg(I2C_HandleTypeDef *I2C){
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af04      	add	r7, sp, #16
 8001c6e:	6078      	str	r0, [r7, #4]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &system_reg, 1, 100);
 8001c70:	2364      	movs	r3, #100	; 0x64
 8001c72:	9302      	str	r3, [sp, #8]
 8001c74:	2301      	movs	r3, #1
 8001c76:	9301      	str	r3, [sp, #4]
 8001c78:	f107 030f 	add.w	r3, r7, #15
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	2301      	movs	r3, #1
 8001c80:	223f      	movs	r2, #63	; 0x3f
 8001c82:	2150      	movs	r1, #80	; 0x50
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f004 fbf5 	bl	8006474 <HAL_I2C_Mem_Read>
	return system_reg;
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <BNO055_ReadITStatus>:

/*
 * Function use to read interrupt register
 * param: I2C --> pointer on I2C handle struct
 */
uint8_t BNO055_ReadITStatus(I2C_HandleTypeDef * I2C){
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b088      	sub	sp, #32
 8001c98:	af04      	add	r7, sp, #16
 8001c9a:	6078      	str	r0, [r7, #4]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_INT_STATUS, 1, &system_reg, 1, 100);
 8001c9c:	2364      	movs	r3, #100	; 0x64
 8001c9e:	9302      	str	r3, [sp, #8]
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	9301      	str	r3, [sp, #4]
 8001ca4:	f107 030f 	add.w	r3, r7, #15
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	2301      	movs	r3, #1
 8001cac:	2237      	movs	r2, #55	; 0x37
 8001cae:	2150      	movs	r1, #80	; 0x50
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f004 fbdf 	bl	8006474 <HAL_I2C_Mem_Read>
	return system_reg;
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <BNO055_EnableAccHighG>:
/*
 * Method use to set high G acceleration interrupt
 * param: I2C --> pointer on I2C handle struct
 * note: This method should only be call after a SetPage(1)
 */
void BNO055_EnableAccHighG(I2C_HandleTypeDef *I2C){
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b088      	sub	sp, #32
 8001cc4:	af04      	add	r7, sp, #16
 8001cc6:	6078      	str	r0, [r7, #4]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_INT_EN, 1, &system_reg, 1, 100);
 8001cc8:	2364      	movs	r3, #100	; 0x64
 8001cca:	9302      	str	r3, [sp, #8]
 8001ccc:	2301      	movs	r3, #1
 8001cce:	9301      	str	r3, [sp, #4]
 8001cd0:	f107 030f 	add.w	r3, r7, #15
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	2210      	movs	r2, #16
 8001cda:	2150      	movs	r1, #80	; 0x50
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f004 fbc9 	bl	8006474 <HAL_I2C_Mem_Read>
	system_reg|=1<<5;
 8001ce2:	7bfb      	ldrb	r3, [r7, #15]
 8001ce4:	f043 0320 	orr.w	r3, r3, #32
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_INT_EN, 1, &system_reg, 1, 10);
 8001cec:	230a      	movs	r3, #10
 8001cee:	9302      	str	r3, [sp, #8]
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	9301      	str	r3, [sp, #4]
 8001cf4:	f107 030f 	add.w	r3, r7, #15
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	2210      	movs	r2, #16
 8001cfe:	2150      	movs	r1, #80	; 0x50
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f004 faa3 	bl	800624c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_INT_MSK, 1, &system_reg, 1, 100);
 8001d06:	2364      	movs	r3, #100	; 0x64
 8001d08:	9302      	str	r3, [sp, #8]
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	9301      	str	r3, [sp, #4]
 8001d0e:	f107 030f 	add.w	r3, r7, #15
 8001d12:	9300      	str	r3, [sp, #0]
 8001d14:	2301      	movs	r3, #1
 8001d16:	220f      	movs	r2, #15
 8001d18:	2150      	movs	r1, #80	; 0x50
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f004 fbaa 	bl	8006474 <HAL_I2C_Mem_Read>
	system_reg|=1<<5;
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
 8001d22:	f043 0320 	orr.w	r3, r3, #32
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_INT_MSK, 1, &system_reg, 1, 10);
 8001d2a:	230a      	movs	r3, #10
 8001d2c:	9302      	str	r3, [sp, #8]
 8001d2e:	2301      	movs	r3, #1
 8001d30:	9301      	str	r3, [sp, #4]
 8001d32:	f107 030f 	add.w	r3, r7, #15
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	2301      	movs	r3, #1
 8001d3a:	220f      	movs	r2, #15
 8001d3c:	2150      	movs	r1, #80	; 0x50
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f004 fa84 	bl	800624c <HAL_I2C_Mem_Write>
}
 8001d44:	bf00      	nop
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <BNO055_EnableHighGAcc>:
/*
 * Method use to set high G acceleration interrupt for each axis
 * param: I2C --> pointer on I2C handle struct
 * axis: --> char use to define an axis Eg: 'X' or 'Y' or 'Z'
 */
void BNO055_EnableHighGAcc(I2C_HandleTypeDef *I2C,char axis){
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b088      	sub	sp, #32
 8001d50:	af04      	add	r7, sp, #16
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	460b      	mov	r3, r1
 8001d56:	70fb      	strb	r3, [r7, #3]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_INT_SETTINGS, 1, &system_reg, 1, 100);
 8001d58:	2364      	movs	r3, #100	; 0x64
 8001d5a:	9302      	str	r3, [sp, #8]
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	9301      	str	r3, [sp, #4]
 8001d60:	f107 030f 	add.w	r3, r7, #15
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	2301      	movs	r3, #1
 8001d68:	2212      	movs	r2, #18
 8001d6a:	2150      	movs	r1, #80	; 0x50
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f004 fb81 	bl	8006474 <HAL_I2C_Mem_Read>
	switch (axis) {
 8001d72:	78fb      	ldrb	r3, [r7, #3]
 8001d74:	2b5a      	cmp	r3, #90	; 0x5a
 8001d76:	d012      	beq.n	8001d9e <BNO055_EnableHighGAcc+0x52>
 8001d78:	2b5a      	cmp	r3, #90	; 0x5a
 8001d7a:	dc16      	bgt.n	8001daa <BNO055_EnableHighGAcc+0x5e>
 8001d7c:	2b58      	cmp	r3, #88	; 0x58
 8001d7e:	d002      	beq.n	8001d86 <BNO055_EnableHighGAcc+0x3a>
 8001d80:	2b59      	cmp	r3, #89	; 0x59
 8001d82:	d006      	beq.n	8001d92 <BNO055_EnableHighGAcc+0x46>
 8001d84:	e011      	b.n	8001daa <BNO055_EnableHighGAcc+0x5e>
		case 'X':
			system_reg|=1<<5;
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
 8001d88:	f043 0320 	orr.w	r3, r3, #32
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	73fb      	strb	r3, [r7, #15]
			break;
 8001d90:	e00b      	b.n	8001daa <BNO055_EnableHighGAcc+0x5e>
		case 'Y':
			system_reg|=1<<6;
 8001d92:	7bfb      	ldrb	r3, [r7, #15]
 8001d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	73fb      	strb	r3, [r7, #15]
			break;
 8001d9c:	e005      	b.n	8001daa <BNO055_EnableHighGAcc+0x5e>
		case 'Z':
			system_reg|=1<<7;
 8001d9e:	7bfb      	ldrb	r3, [r7, #15]
 8001da0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	73fb      	strb	r3, [r7, #15]
			break;
 8001da8:	bf00      	nop
	}
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_ACC_INT_SETTINGS, 1, &system_reg, 1, 10);
 8001daa:	230a      	movs	r3, #10
 8001dac:	9302      	str	r3, [sp, #8]
 8001dae:	2301      	movs	r3, #1
 8001db0:	9301      	str	r3, [sp, #4]
 8001db2:	f107 030f 	add.w	r3, r7, #15
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	2301      	movs	r3, #1
 8001dba:	2212      	movs	r2, #18
 8001dbc:	2150      	movs	r1, #80	; 0x50
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f004 fa44 	bl	800624c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_INT_SETTINGS, 1, &system_reg, 1, 100);
 8001dc4:	2364      	movs	r3, #100	; 0x64
 8001dc6:	9302      	str	r3, [sp, #8]
 8001dc8:	2301      	movs	r3, #1
 8001dca:	9301      	str	r3, [sp, #4]
 8001dcc:	f107 030f 	add.w	r3, r7, #15
 8001dd0:	9300      	str	r3, [sp, #0]
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	2212      	movs	r2, #18
 8001dd6:	2150      	movs	r1, #80	; 0x50
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f004 fb4b 	bl	8006474 <HAL_I2C_Mem_Read>
}
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <BNO055_ClearIntFlag>:
/*
 * Method use to clear interrupt flag set by hardware
 * param: I2C --> pointer on I2C handle struct
 * note: if call in interrupt, you can find SPI pointer in IMU struct
 */
void BNO055_ClearIntFlag(I2C_HandleTypeDef *I2C){
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b088      	sub	sp, #32
 8001dea:	af04      	add	r7, sp, #16
 8001dec:	6078      	str	r0, [r7, #4]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &system_reg, 1, 100);
 8001dee:	2364      	movs	r3, #100	; 0x64
 8001df0:	9302      	str	r3, [sp, #8]
 8001df2:	2301      	movs	r3, #1
 8001df4:	9301      	str	r3, [sp, #4]
 8001df6:	f107 030f 	add.w	r3, r7, #15
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	223f      	movs	r2, #63	; 0x3f
 8001e00:	2150      	movs	r1, #80	; 0x50
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f004 fb36 	bl	8006474 <HAL_I2C_Mem_Read>
	system_reg|=1<<6;
 8001e08:	7bfb      	ldrb	r3, [r7, #15]
 8001e0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &system_reg, 1, 10);
 8001e12:	230a      	movs	r3, #10
 8001e14:	9302      	str	r3, [sp, #8]
 8001e16:	2301      	movs	r3, #1
 8001e18:	9301      	str	r3, [sp, #4]
 8001e1a:	f107 030f 	add.w	r3, r7, #15
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	2301      	movs	r3, #1
 8001e22:	223f      	movs	r2, #63	; 0x3f
 8001e24:	2150      	movs	r1, #80	; 0x50
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f004 fa10 	bl	800624c <HAL_I2C_Mem_Write>
	BNO055_ReadITStatus(I2C);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7ff ff31 	bl	8001c94 <BNO055_ReadITStatus>
}
 8001e32:	bf00      	nop
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <BNO055_EnableExtClock>:
/*
 * Method use to enable external clock for IMU
 * param: I2C --> pointer on I2C handle struct
 * note: If not clock selected then work with LSI else LSE
 */
void BNO055_EnableExtClock(I2C_HandleTypeDef *I2C){
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b088      	sub	sp, #32
 8001e3e:	af04      	add	r7, sp, #16
 8001e40:	6078      	str	r0, [r7, #4]
	uint8_t actual_reg_value = BNO055_ReadSystemReg(I2C);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff ff10 	bl	8001c68 <BNO055_ReadSystemReg>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	73fb      	strb	r3, [r7, #15]
	//Change the 7th bit of this reg --> activate external clock
	uint8_t sys_reg_value = (actual_reg_value&0x7F) + (0x01<<7);
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
 8001e4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	3b80      	subs	r3, #128	; 0x80
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &sys_reg_value, 1, 10);
 8001e5a:	230a      	movs	r3, #10
 8001e5c:	9302      	str	r3, [sp, #8]
 8001e5e:	2301      	movs	r3, #1
 8001e60:	9301      	str	r3, [sp, #4]
 8001e62:	f107 030e 	add.w	r3, r7, #14
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	2301      	movs	r3, #1
 8001e6a:	223f      	movs	r2, #63	; 0x3f
 8001e6c:	2150      	movs	r1, #80	; 0x50
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f004 f9ec 	bl	800624c <HAL_I2C_Mem_Write>
}
 8001e74:	bf00      	nop
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <BNO055_TriggerSelfTest>:

/*
 * Method use to start a self test
 * param: I2C --> pointer on I2C handle struct
 */
void BNO055_TriggerSelfTest(I2C_HandleTypeDef *I2C){
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b088      	sub	sp, #32
 8001e80:	af04      	add	r7, sp, #16
 8001e82:	6078      	str	r0, [r7, #4]
	uint8_t actual_reg_value = BNO055_ReadSystemReg(I2C);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f7ff feef 	bl	8001c68 <BNO055_ReadSystemReg>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	73fb      	strb	r3, [r7, #15]
	//Change the 7th bit of this reg --> activate external clock
	uint8_t sys_reg_value = (actual_reg_value&0xFE) + 0x01;
 8001e8e:	7bfb      	ldrb	r3, [r7, #15]
 8001e90:	f023 0301 	bic.w	r3, r3, #1
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	3301      	adds	r3, #1
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &sys_reg_value, 1, 10);
 8001e9c:	230a      	movs	r3, #10
 8001e9e:	9302      	str	r3, [sp, #8]
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	9301      	str	r3, [sp, #4]
 8001ea4:	f107 030e 	add.w	r3, r7, #14
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	2301      	movs	r3, #1
 8001eac:	223f      	movs	r2, #63	; 0x3f
 8001eae:	2150      	movs	r1, #80	; 0x50
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f004 f9cb 	bl	800624c <HAL_I2C_Mem_Write>
}
 8001eb6:	bf00      	nop
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <BNO055_CheckSelfTestResult>:
/*
 * Method use to check self test result
 * param: I2C --> pointer on I2C handle struct
 * param: BNO055 --> pointer on IMU struct
 */
uint8_t BNO055_CheckSelfTestResult(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b088      	sub	sp, #32
 8001ec2:	af04      	add	r7, sp, #16
 8001ec4:	6078      	str	r0, [r7, #4]
 8001ec6:	6039      	str	r1, [r7, #0]
	uint8_t res = 0;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_value;
	//Checking all self power on test result
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ST_RESULT, 1, &reg_value, 1, 10);
 8001ecc:	230a      	movs	r3, #10
 8001ece:	9302      	str	r3, [sp, #8]
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	9301      	str	r3, [sp, #4]
 8001ed4:	f107 030e 	add.w	r3, r7, #14
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	2301      	movs	r3, #1
 8001edc:	2236      	movs	r2, #54	; 0x36
 8001ede:	2150      	movs	r1, #80	; 0x50
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f004 fac7 	bl	8006474 <HAL_I2C_Mem_Read>
	if((reg_value&0x0F)!=0x0F){
 8001ee6:	7bbb      	ldrb	r3, [r7, #14]
 8001ee8:	f003 030f 	and.w	r3, r3, #15
 8001eec:	2b0f      	cmp	r3, #15
 8001eee:	d001      	beq.n	8001ef4 <BNO055_CheckSelfTestResult+0x36>
		res = 1;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	73fb      	strb	r3, [r7, #15]
	}
	//Trigger a test to ensure sensor is working properly
	BNO055_TriggerSelfTest(I2C);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff ffc1 	bl	8001e7c <BNO055_TriggerSelfTest>
	//Wait some time to ensure test is done (made with hal delay because task hasn't started yet)
	osDelay(500);
 8001efa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001efe:	f00e ff9a 	bl	8010e36 <osDelay>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_ERR, 1, &reg_value, 1, 10);
 8001f02:	230a      	movs	r3, #10
 8001f04:	9302      	str	r3, [sp, #8]
 8001f06:	2301      	movs	r3, #1
 8001f08:	9301      	str	r3, [sp, #4]
 8001f0a:	f107 030e 	add.w	r3, r7, #14
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	2301      	movs	r3, #1
 8001f12:	223a      	movs	r2, #58	; 0x3a
 8001f14:	2150      	movs	r1, #80	; 0x50
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f004 faac 	bl	8006474 <HAL_I2C_Mem_Read>
	if(reg_value!=0x00){
 8001f1c:	7bbb      	ldrb	r3, [r7, #14]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <BNO055_CheckSelfTestResult+0x68>
		res = 1;
 8001f22:	2301      	movs	r3, #1
 8001f24:	73fb      	strb	r3, [r7, #15]
	}
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_STATUS, 1, &reg_value, 1, 10);
 8001f26:	230a      	movs	r3, #10
 8001f28:	9302      	str	r3, [sp, #8]
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	9301      	str	r3, [sp, #4]
 8001f2e:	f107 030e 	add.w	r3, r7, #14
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	2301      	movs	r3, #1
 8001f36:	2239      	movs	r2, #57	; 0x39
 8001f38:	2150      	movs	r1, #80	; 0x50
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f004 fa9a 	bl	8006474 <HAL_I2C_Mem_Read>

	return res;
 8001f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <BNO055_SetHighGThreshold>:
 * Method use to set the high g interrupt threshold
 * param: I2C --> pointer on I2C handle struct
 * param: threshold --> threshold in LSB (15.81mg = 1LSB)
 *  * note: need to be call after page(1)
 */
void BNO055_SetHighGThreshold(I2C_HandleTypeDef *I2C,uint8_t threshold){
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b088      	sub	sp, #32
 8001f4e:	af04      	add	r7, sp, #16
 8001f50:	6078      	str	r0, [r7, #4]
 8001f52:	460b      	mov	r3, r1
 8001f54:	70fb      	strb	r3, [r7, #3]
	uint8_t system_reg;
	system_reg = threshold;
 8001f56:	78fb      	ldrb	r3, [r7, #3]
 8001f58:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_ACC_HG_THRESH, 1, &system_reg, 1, 10);
 8001f5a:	230a      	movs	r3, #10
 8001f5c:	9302      	str	r3, [sp, #8]
 8001f5e:	2301      	movs	r3, #1
 8001f60:	9301      	str	r3, [sp, #4]
 8001f62:	f107 030f 	add.w	r3, r7, #15
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	2301      	movs	r3, #1
 8001f6a:	2214      	movs	r2, #20
 8001f6c:	2150      	movs	r1, #80	; 0x50
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f004 f96c 	bl	800624c <HAL_I2C_Mem_Write>
}
 8001f74:	bf00      	nop
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <BNO055_SetHighGDuration>:
 * Method use to set the high g interrupt duration
 * param: I2C --> pointer on I2C handle struct
 * param: duration --> duration in ms (1LSB = 2ms)
 *  * note: need to be call after page(1)
 */
void BNO055_SetHighGDuration(I2C_HandleTypeDef *I2C,uint8_t duration){
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b088      	sub	sp, #32
 8001f80:	af04      	add	r7, sp, #16
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	70fb      	strb	r3, [r7, #3]
	uint8_t system_reg;
	system_reg = duration;
 8001f88:	78fb      	ldrb	r3, [r7, #3]
 8001f8a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_ACC_HG_DURATION, 1, &system_reg, 1, 10);
 8001f8c:	230a      	movs	r3, #10
 8001f8e:	9302      	str	r3, [sp, #8]
 8001f90:	2301      	movs	r3, #1
 8001f92:	9301      	str	r3, [sp, #4]
 8001f94:	f107 030f 	add.w	r3, r7, #15
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	2213      	movs	r2, #19
 8001f9e:	2150      	movs	r1, #80	; 0x50
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f004 f953 	bl	800624c <HAL_I2C_Mem_Write>
}
 8001fa6:	bf00      	nop
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <BNO055_Init>:
/*
 * Init function for IMU, it enable it run self test
 * param: I2C --> pointer on I2C handle struct
 * param: BNO055 --> pointer on IMU struct
 */
uint8_t BNO055_Init(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b088      	sub	sp, #32
 8001fb2:	af04      	add	r7, sp, #16
 8001fb4:	6078      	str	r0, [r7, #4]
 8001fb6:	6039      	str	r1, [r7, #0]

	uint8_t res = 0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	73fb      	strb	r3, [r7, #15]
	uint8_t reg;

	//Reset the IMU error counter
	BNO055->self_test_error = 0;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

	//Add pointer into IMU struct
	BNO055->I2C_pt = I2C;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	//We need to select the page 1
	BNO055_SetPage(I2C,1);
 8001fcc:	2101      	movs	r1, #1
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7ff fe18 	bl	8001c04 <BNO055_SetPage>

	//Enable High G accelerometer interrupt
	BNO055_EnableAccHighG(I2C);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7ff fe73 	bl	8001cc0 <BNO055_EnableAccHighG>

	//Enable HIGH G for axis X/Y/Z
	BNO055_EnableHighGAcc(I2C, 'X');
 8001fda:	2158      	movs	r1, #88	; 0x58
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f7ff feb5 	bl	8001d4c <BNO055_EnableHighGAcc>
	BNO055_EnableHighGAcc(I2C, 'Y');
 8001fe2:	2159      	movs	r1, #89	; 0x59
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff feb1 	bl	8001d4c <BNO055_EnableHighGAcc>
	BNO055_EnableHighGAcc(I2C, 'Z');
 8001fea:	215a      	movs	r1, #90	; 0x5a
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff fead 	bl	8001d4c <BNO055_EnableHighGAcc>

	//Set threshold
	BNO055_SetHighGThreshold(I2C, BNO055_HG_THRESHOLD);
 8001ff2:	2150      	movs	r1, #80	; 0x50
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f7ff ffa8 	bl	8001f4a <BNO055_SetHighGThreshold>

	//Set the duration
	BNO055_SetHighGDuration(I2C, BNO055_HG_DURATION);
 8001ffa:	2140      	movs	r1, #64	; 0x40
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff ffbd 	bl	8001f7c <BNO055_SetHighGDuration>

	//We need to select the page 0
	BNO055_SetPage(I2C,0);
 8002002:	2100      	movs	r1, #0
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f7ff fdfd 	bl	8001c04 <BNO055_SetPage>

	//As the board have external 32.756 khz clock we use it
	BNO055_EnableExtClock(I2C);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff ff15 	bl	8001e3a <BNO055_EnableExtClock>
	/*Make BIST and power up test*/
	osDelay(200);
 8002010:	20c8      	movs	r0, #200	; 0xc8
 8002012:	f00e ff10 	bl	8010e36 <osDelay>
	reg = BNO055_CheckSelfTestResult(I2C, BNO055);
 8002016:	6839      	ldr	r1, [r7, #0]
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff ff50 	bl	8001ebe <BNO055_CheckSelfTestResult>
 800201e:	4603      	mov	r3, r0
 8002020:	73bb      	strb	r3, [r7, #14]
	if(reg != 0x00){
 8002022:	7bbb      	ldrb	r3, [r7, #14]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <BNO055_Init+0x7e>
		res = 1;
 8002028:	2301      	movs	r3, #1
 800202a:	73fb      	strb	r3, [r7, #15]
	}

	//Select the operation mode (the NDOF use all 3 sensor and will calculate data using absolute orientation (USE BNO055_OPERATION_MODE_IMU if you want to have relative orientation)
	BNO055_SetOperationMode(I2C, BNO055_OPERATION_MODE_NDOF, BNO055);
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	210c      	movs	r1, #12
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7ff fdfd 	bl	8001c30 <BNO055_SetOperationMode>

	/*Check for writing problem of OPR_MODE_REG*/
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_OPR_MODE, 1, &reg, 1, 10);
 8002036:	230a      	movs	r3, #10
 8002038:	9302      	str	r3, [sp, #8]
 800203a:	2301      	movs	r3, #1
 800203c:	9301      	str	r3, [sp, #4]
 800203e:	f107 030e 	add.w	r3, r7, #14
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	2301      	movs	r3, #1
 8002046:	223d      	movs	r2, #61	; 0x3d
 8002048:	2150      	movs	r1, #80	; 0x50
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f004 fa12 	bl	8006474 <HAL_I2C_Mem_Read>
	if( reg != BNO055_OPERATION_MODE_NDOF){
 8002050:	7bbb      	ldrb	r3, [r7, #14]
 8002052:	2b0c      	cmp	r3, #12
 8002054:	d001      	beq.n	800205a <BNO055_Init+0xac>
		res = 1;
 8002056:	2301      	movs	r3, #1
 8002058:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800205a:	7bfb      	ldrb	r3, [r7, #15]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	0000      	movs	r0, r0
	...

08002068 <BNO055_ReadAccel>:
 * Function use to read accelerometer data from IMU
 * param: I2C --> pointer on I2C handle struct
 * param: BNO055 --> pointer on IMU struct
 * param: I2CControllerProtect --> Semaphore use to protect I2C hardware from being modified by more than one task at the same time
 */
void BNO055_ReadAccel(I2C_HandleTypeDef *I2C,BNO055_t *BNO055,osMutexId I2CControllerProtect){
 8002068:	b580      	push	{r7, lr}
 800206a:	b08a      	sub	sp, #40	; 0x28
 800206c:	af04      	add	r7, sp, #16
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
	//Read gyroscope value
	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;


	xSemaphoreTake(I2CControllerProtect,25);
 8002074:	2119      	movs	r1, #25
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f00f fa26 	bl	80114c8 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_X_LSB, 1, &reg_value_lsb, 1, 10);
 800207c:	230a      	movs	r3, #10
 800207e:	9302      	str	r3, [sp, #8]
 8002080:	2301      	movs	r3, #1
 8002082:	9301      	str	r3, [sp, #4]
 8002084:	f107 0317 	add.w	r3, r7, #23
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	2301      	movs	r3, #1
 800208c:	2208      	movs	r2, #8
 800208e:	2150      	movs	r1, #80	; 0x50
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f004 f9ef 	bl	8006474 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_X_MSB, 1, &reg_value_msb, 1, 10);
 8002096:	230a      	movs	r3, #10
 8002098:	9302      	str	r3, [sp, #8]
 800209a:	2301      	movs	r3, #1
 800209c:	9301      	str	r3, [sp, #4]
 800209e:	f107 0316 	add.w	r3, r7, #22
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	2301      	movs	r3, #1
 80020a6:	2209      	movs	r2, #9
 80020a8:	2150      	movs	r1, #80	; 0x50
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f004 f9e2 	bl	8006474 <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 80020b0:	2300      	movs	r3, #0
 80020b2:	2200      	movs	r2, #0
 80020b4:	2100      	movs	r1, #0
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f00f f892 	bl	80111e0 <xQueueGenericSend>
	BNO055->raw_data.accelerometer.x = ((float)(reg_value_lsb + (reg_value_msb<<8))/ (float) accelScale);	//The minus sign is only use to sync axis value to board schematic
 80020bc:	7dfb      	ldrb	r3, [r7, #23]
 80020be:	461a      	mov	r2, r3
 80020c0:	7dbb      	ldrb	r3, [r7, #22]
 80020c2:	021b      	lsls	r3, r3, #8
 80020c4:	4413      	add	r3, r2
 80020c6:	ee07 3a90 	vmov	s15, r3
 80020ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80020ce:	4b74      	ldr	r3, [pc, #464]	; (80022a0 <BNO055_ReadAccel+0x238>)
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	ee07 3a90 	vmov	s15, r3
 80020d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	edc3 7a03 	vstr	s15, [r3, #12]

	/*In order to scale the acceleration correclty on -327m/s^2 to +327m/s^2*/
	if(BNO055->raw_data.accelerometer.x > 327.68){
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7fe fa0f 	bl	800050c <__aeabi_f2d>
 80020ee:	a368      	add	r3, pc, #416	; (adr r3, 8002290 <BNO055_ReadAccel+0x228>)
 80020f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f4:	f7fe fcf2 	bl	8000adc <__aeabi_dcmpgt>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d012      	beq.n	8002124 <BNO055_ReadAccel+0xbc>
		BNO055->raw_data.accelerometer.x = BNO055->raw_data.accelerometer.x - 655.36;
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe fa02 	bl	800050c <__aeabi_f2d>
 8002108:	a363      	add	r3, pc, #396	; (adr r3, 8002298 <BNO055_ReadAccel+0x230>)
 800210a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210e:	f7fe f89d 	bl	800024c <__aeabi_dsub>
 8002112:	4602      	mov	r2, r0
 8002114:	460b      	mov	r3, r1
 8002116:	4610      	mov	r0, r2
 8002118:	4619      	mov	r1, r3
 800211a:	f7fe fcff 	bl	8000b1c <__aeabi_d2f>
 800211e:	4602      	mov	r2, r0
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	60da      	str	r2, [r3, #12]
	}

	xSemaphoreTake(I2CControllerProtect,25);
 8002124:	2119      	movs	r1, #25
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f00f f9ce 	bl	80114c8 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_Y_LSB, 1, &reg_value_lsb, 1, 10);
 800212c:	230a      	movs	r3, #10
 800212e:	9302      	str	r3, [sp, #8]
 8002130:	2301      	movs	r3, #1
 8002132:	9301      	str	r3, [sp, #4]
 8002134:	f107 0317 	add.w	r3, r7, #23
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	2301      	movs	r3, #1
 800213c:	220a      	movs	r2, #10
 800213e:	2150      	movs	r1, #80	; 0x50
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f004 f997 	bl	8006474 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_Y_MSB, 1, &reg_value_msb, 1, 10);
 8002146:	230a      	movs	r3, #10
 8002148:	9302      	str	r3, [sp, #8]
 800214a:	2301      	movs	r3, #1
 800214c:	9301      	str	r3, [sp, #4]
 800214e:	f107 0316 	add.w	r3, r7, #22
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	2301      	movs	r3, #1
 8002156:	220b      	movs	r2, #11
 8002158:	2150      	movs	r1, #80	; 0x50
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f004 f98a 	bl	8006474 <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 8002160:	2300      	movs	r3, #0
 8002162:	2200      	movs	r2, #0
 8002164:	2100      	movs	r1, #0
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f00f f83a 	bl	80111e0 <xQueueGenericSend>
	BNO055->raw_data.accelerometer.y = ((float)(reg_value_lsb + (reg_value_msb<<8))/ (float) accelScale);
 800216c:	7dfb      	ldrb	r3, [r7, #23]
 800216e:	461a      	mov	r2, r3
 8002170:	7dbb      	ldrb	r3, [r7, #22]
 8002172:	021b      	lsls	r3, r3, #8
 8002174:	4413      	add	r3, r2
 8002176:	ee07 3a90 	vmov	s15, r3
 800217a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800217e:	4b48      	ldr	r3, [pc, #288]	; (80022a0 <BNO055_ReadAccel+0x238>)
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	ee07 3a90 	vmov	s15, r3
 8002186:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800218a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	edc3 7a04 	vstr	s15, [r3, #16]

	if(BNO055->raw_data.accelerometer.y > 327.68){
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	4618      	mov	r0, r3
 800219a:	f7fe f9b7 	bl	800050c <__aeabi_f2d>
 800219e:	a33c      	add	r3, pc, #240	; (adr r3, 8002290 <BNO055_ReadAccel+0x228>)
 80021a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a4:	f7fe fc9a 	bl	8000adc <__aeabi_dcmpgt>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d012      	beq.n	80021d4 <BNO055_ReadAccel+0x16c>
		BNO055->raw_data.accelerometer.y = BNO055->raw_data.accelerometer.y - 655.36;
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe f9aa 	bl	800050c <__aeabi_f2d>
 80021b8:	a337      	add	r3, pc, #220	; (adr r3, 8002298 <BNO055_ReadAccel+0x230>)
 80021ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021be:	f7fe f845 	bl	800024c <__aeabi_dsub>
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	4610      	mov	r0, r2
 80021c8:	4619      	mov	r1, r3
 80021ca:	f7fe fca7 	bl	8000b1c <__aeabi_d2f>
 80021ce:	4602      	mov	r2, r0
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	611a      	str	r2, [r3, #16]
	}


	xSemaphoreTake(I2CControllerProtect,25);
 80021d4:	2119      	movs	r1, #25
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f00f f976 	bl	80114c8 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_Z_LSB, 1, &reg_value_lsb, 1, 10);
 80021dc:	230a      	movs	r3, #10
 80021de:	9302      	str	r3, [sp, #8]
 80021e0:	2301      	movs	r3, #1
 80021e2:	9301      	str	r3, [sp, #4]
 80021e4:	f107 0317 	add.w	r3, r7, #23
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	2301      	movs	r3, #1
 80021ec:	220c      	movs	r2, #12
 80021ee:	2150      	movs	r1, #80	; 0x50
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f004 f93f 	bl	8006474 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_Z_MSB, 1, &reg_value_msb, 1, 10);
 80021f6:	230a      	movs	r3, #10
 80021f8:	9302      	str	r3, [sp, #8]
 80021fa:	2301      	movs	r3, #1
 80021fc:	9301      	str	r3, [sp, #4]
 80021fe:	f107 0316 	add.w	r3, r7, #22
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	2301      	movs	r3, #1
 8002206:	220d      	movs	r2, #13
 8002208:	2150      	movs	r1, #80	; 0x50
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f004 f932 	bl	8006474 <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 8002210:	2300      	movs	r3, #0
 8002212:	2200      	movs	r2, #0
 8002214:	2100      	movs	r1, #0
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f00e ffe2 	bl	80111e0 <xQueueGenericSend>
	BNO055->raw_data.accelerometer.z = ((float)(reg_value_lsb + (reg_value_msb<<8))/ (float) accelScale);
 800221c:	7dfb      	ldrb	r3, [r7, #23]
 800221e:	461a      	mov	r2, r3
 8002220:	7dbb      	ldrb	r3, [r7, #22]
 8002222:	021b      	lsls	r3, r3, #8
 8002224:	4413      	add	r3, r2
 8002226:	ee07 3a90 	vmov	s15, r3
 800222a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800222e:	4b1c      	ldr	r3, [pc, #112]	; (80022a0 <BNO055_ReadAccel+0x238>)
 8002230:	881b      	ldrh	r3, [r3, #0]
 8002232:	ee07 3a90 	vmov	s15, r3
 8002236:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800223a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	edc3 7a05 	vstr	s15, [r3, #20]

	if(BNO055->raw_data.accelerometer.z > 327.68){
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	4618      	mov	r0, r3
 800224a:	f7fe f95f 	bl	800050c <__aeabi_f2d>
 800224e:	a310      	add	r3, pc, #64	; (adr r3, 8002290 <BNO055_ReadAccel+0x228>)
 8002250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002254:	f7fe fc42 	bl	8000adc <__aeabi_dcmpgt>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d100      	bne.n	8002260 <BNO055_ReadAccel+0x1f8>
		BNO055->raw_data.accelerometer.z = BNO055->raw_data.accelerometer.z - 655.36;
	}
}
 800225e:	e012      	b.n	8002286 <BNO055_ReadAccel+0x21e>
		BNO055->raw_data.accelerometer.z = BNO055->raw_data.accelerometer.z - 655.36;
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	4618      	mov	r0, r3
 8002266:	f7fe f951 	bl	800050c <__aeabi_f2d>
 800226a:	a30b      	add	r3, pc, #44	; (adr r3, 8002298 <BNO055_ReadAccel+0x230>)
 800226c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002270:	f7fd ffec 	bl	800024c <__aeabi_dsub>
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	4610      	mov	r0, r2
 800227a:	4619      	mov	r1, r3
 800227c:	f7fe fc4e 	bl	8000b1c <__aeabi_d2f>
 8002280:	4602      	mov	r2, r0
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	615a      	str	r2, [r3, #20]
}
 8002286:	bf00      	nop
 8002288:	3718      	adds	r7, #24
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	47ae147b 	.word	0x47ae147b
 8002294:	40747ae1 	.word	0x40747ae1
 8002298:	47ae147b 	.word	0x47ae147b
 800229c:	40847ae1 	.word	0x40847ae1
 80022a0:	20000000 	.word	0x20000000

080022a4 <BNO055_ReadEuler_Roll>:
 * @INPUT - I2C interface struct
 * @INPUT - IMU struc
 * @OUTPUT - None
 * @INFORMATIONS - If use with freertos or other reeltime os please use a semaphore/mutex to protect I2C interface
 */
void BNO055_ReadEuler_Roll(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b088      	sub	sp, #32
 80022a8:	af04      	add	r7, sp, #16
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]

	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;

	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_ROLL_LSB, 1, &reg_value_lsb, 1, 10);
 80022ae:	230a      	movs	r3, #10
 80022b0:	9302      	str	r3, [sp, #8]
 80022b2:	2301      	movs	r3, #1
 80022b4:	9301      	str	r3, [sp, #4]
 80022b6:	f107 030f 	add.w	r3, r7, #15
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	2301      	movs	r3, #1
 80022be:	221c      	movs	r2, #28
 80022c0:	2150      	movs	r1, #80	; 0x50
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f004 f8d6 	bl	8006474 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_ROLL_MSB, 1, &reg_value_msb, 1, 10);
 80022c8:	230a      	movs	r3, #10
 80022ca:	9302      	str	r3, [sp, #8]
 80022cc:	2301      	movs	r3, #1
 80022ce:	9301      	str	r3, [sp, #4]
 80022d0:	f107 030e 	add.w	r3, r7, #14
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	2301      	movs	r3, #1
 80022d8:	221d      	movs	r2, #29
 80022da:	2150      	movs	r1, #80	; 0x50
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f004 f8c9 	bl	8006474 <HAL_I2C_Mem_Read>
	BNO055->processed_data.euler_angles.y = (float) ((reg_value_lsb + (reg_value_msb<<8))/ (float) eulerScale);
 80022e2:	7bfb      	ldrb	r3, [r7, #15]
 80022e4:	461a      	mov	r2, r3
 80022e6:	7bbb      	ldrb	r3, [r7, #14]
 80022e8:	021b      	lsls	r3, r3, #8
 80022ea:	4413      	add	r3, r2
 80022ec:	ee07 3a90 	vmov	s15, r3
 80022f0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80022f4:	4b11      	ldr	r3, [pc, #68]	; (800233c <BNO055_ReadEuler_Roll+0x98>)
 80022f6:	881b      	ldrh	r3, [r3, #0]
 80022f8:	ee07 3a90 	vmov	s15, r3
 80022fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002300:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	/*Make sure the data are rotating clockwise*/
	if(BNO055->processed_data.euler_angles.y > 2000){
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002310:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002340 <BNO055_ReadEuler_Roll+0x9c>
 8002314:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800231c:	dc00      	bgt.n	8002320 <BNO055_ReadEuler_Roll+0x7c>
		BNO055->processed_data.euler_angles.y = BNO055->processed_data.euler_angles.y - 4096;
	}
}
 800231e:	e009      	b.n	8002334 <BNO055_ReadEuler_Roll+0x90>
		BNO055->processed_data.euler_angles.y = BNO055->processed_data.euler_angles.y - 4096;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002326:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002344 <BNO055_ReadEuler_Roll+0xa0>
 800232a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 8002334:	bf00      	nop
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	20000002 	.word	0x20000002
 8002340:	44fa0000 	.word	0x44fa0000
 8002344:	45800000 	.word	0x45800000

08002348 <BNO055_ReadEuler_Pitch>:
 * @INPUT - I2C interface struct
 * @INPUT - IMU struc
 * @OUTPUT - None
 * @INFORMATIONS - If use with freertos or other reeltime os please use a semaphore/mutex to protect I2C interface
 */
void BNO055_ReadEuler_Pitch(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8002348:	b580      	push	{r7, lr}
 800234a:	b088      	sub	sp, #32
 800234c:	af04      	add	r7, sp, #16
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]

	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;

	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_PITCH_LSB, 1, &reg_value_lsb, 1, 10);
 8002352:	230a      	movs	r3, #10
 8002354:	9302      	str	r3, [sp, #8]
 8002356:	2301      	movs	r3, #1
 8002358:	9301      	str	r3, [sp, #4]
 800235a:	f107 030f 	add.w	r3, r7, #15
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	2301      	movs	r3, #1
 8002362:	221e      	movs	r2, #30
 8002364:	2150      	movs	r1, #80	; 0x50
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f004 f884 	bl	8006474 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_PITCH_MSB, 1, &reg_value_msb, 1, 10);
 800236c:	230a      	movs	r3, #10
 800236e:	9302      	str	r3, [sp, #8]
 8002370:	2301      	movs	r3, #1
 8002372:	9301      	str	r3, [sp, #4]
 8002374:	f107 030e 	add.w	r3, r7, #14
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	2301      	movs	r3, #1
 800237c:	221f      	movs	r2, #31
 800237e:	2150      	movs	r1, #80	; 0x50
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f004 f877 	bl	8006474 <HAL_I2C_Mem_Read>
	BNO055->processed_data.euler_angles.x = (float) ((reg_value_lsb + (reg_value_msb<<8))/(float) eulerScale);
 8002386:	7bfb      	ldrb	r3, [r7, #15]
 8002388:	461a      	mov	r2, r3
 800238a:	7bbb      	ldrb	r3, [r7, #14]
 800238c:	021b      	lsls	r3, r3, #8
 800238e:	4413      	add	r3, r2
 8002390:	ee07 3a90 	vmov	s15, r3
 8002394:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002398:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <BNO055_ReadEuler_Pitch+0x98>)
 800239a:	881b      	ldrh	r3, [r3, #0]
 800239c:	ee07 3a90 	vmov	s15, r3
 80023a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	/*Make sure the data are rotating clockwise*/
	if(BNO055->processed_data.euler_angles.x > 2000){
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80023b4:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80023e4 <BNO055_ReadEuler_Pitch+0x9c>
 80023b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c0:	dc00      	bgt.n	80023c4 <BNO055_ReadEuler_Pitch+0x7c>
		BNO055->processed_data.euler_angles.x = BNO055->processed_data.euler_angles.x - 4096;
	}
}
 80023c2:	e009      	b.n	80023d8 <BNO055_ReadEuler_Pitch+0x90>
		BNO055->processed_data.euler_angles.x = BNO055->processed_data.euler_angles.x - 4096;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80023ca:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80023e8 <BNO055_ReadEuler_Pitch+0xa0>
 80023ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 80023d8:	bf00      	nop
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	20000002 	.word	0x20000002
 80023e4:	44fa0000 	.word	0x44fa0000
 80023e8:	45800000 	.word	0x45800000

080023ec <BNO055_ReadEuler_Yaw>:
 * @INPUT - I2C interface struct
 * @INPUT - IMU struct
 * @OUTPUT - None
 * @INFORMATIONS - If use with freertos or other reeltime os please use a semaphore/mutex to protect I2C interface
 */
void BNO055_ReadEuler_Yaw(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b088      	sub	sp, #32
 80023f0:	af04      	add	r7, sp, #16
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]

	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;

	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_HEADING_LSB, 1, &reg_value_lsb, 1, 10);
 80023f6:	230a      	movs	r3, #10
 80023f8:	9302      	str	r3, [sp, #8]
 80023fa:	2301      	movs	r3, #1
 80023fc:	9301      	str	r3, [sp, #4]
 80023fe:	f107 030f 	add.w	r3, r7, #15
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	2301      	movs	r3, #1
 8002406:	221a      	movs	r2, #26
 8002408:	2150      	movs	r1, #80	; 0x50
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f004 f832 	bl	8006474 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_HEADING_MSB, 1, &reg_value_msb, 1, 10);
 8002410:	230a      	movs	r3, #10
 8002412:	9302      	str	r3, [sp, #8]
 8002414:	2301      	movs	r3, #1
 8002416:	9301      	str	r3, [sp, #4]
 8002418:	f107 030e 	add.w	r3, r7, #14
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	2301      	movs	r3, #1
 8002420:	221b      	movs	r2, #27
 8002422:	2150      	movs	r1, #80	; 0x50
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f004 f825 	bl	8006474 <HAL_I2C_Mem_Read>
	BNO055->processed_data.euler_angles.z = (float) ((reg_value_lsb + (reg_value_msb<<8))/ (float) eulerScale);
 800242a:	7bfb      	ldrb	r3, [r7, #15]
 800242c:	461a      	mov	r2, r3
 800242e:	7bbb      	ldrb	r3, [r7, #14]
 8002430:	021b      	lsls	r3, r3, #8
 8002432:	4413      	add	r3, r2
 8002434:	ee07 3a90 	vmov	s15, r3
 8002438:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800243c:	4b07      	ldr	r3, [pc, #28]	; (800245c <BNO055_ReadEuler_Yaw+0x70>)
 800243e:	881b      	ldrh	r3, [r3, #0]
 8002440:	ee07 3a90 	vmov	s15, r3
 8002444:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002448:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 8002452:	bf00      	nop
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	20000002 	.word	0x20000002

08002460 <BNO055_ComputeSpeed>:
 * @INPUT - I2C interface struct
 * @INPUT - IMU struct
 * @INFORMATIONS - Need to be call after a ReadAccel function in order to work correctly
 * Tick should be increment every ms in order to gather correct data
 */
void BNO055_ComputeSpeed(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8002460:	b580      	push	{r7, lr}
 8002462:	b088      	sub	sp, #32
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]

	float speed_vector_x;
	float current_acceleration =BNO055->raw_data.accelerometer.x;
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	61fb      	str	r3, [r7, #28]
	uint32_t current_tick = HAL_GetTick();
 8002470:	f001 fe3a 	bl	80040e8 <HAL_GetTick>
 8002474:	61b8      	str	r0, [r7, #24]
	float delta_acceleration = (current_acceleration - BNO055->reserved_for_operation.previous_acceleration.x);
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800247c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002484:	edc7 7a05 	vstr	s15, [r7, #20]
	uint32_t delta_tick = (current_tick - BNO055->reserved_for_operation.last_call_tick.x);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	613b      	str	r3, [r7, #16]


	speed_vector_x = (float)(delta_tick/1000)*current_acceleration;
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	4a0a      	ldr	r2, [pc, #40]	; (80024c0 <BNO055_ComputeSpeed+0x60>)
 8002498:	fba2 2303 	umull	r2, r3, r2, r3
 800249c:	099b      	lsrs	r3, r3, #6
 800249e:	ee07 3a90 	vmov	s15, r3
 80024a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024a6:	ed97 7a07 	vldr	s14, [r7, #28]
 80024aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ae:	edc7 7a03 	vstr	s15, [r7, #12]
	BNO055->processed_data.speed_vector.x = speed_vector_x;
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80024b8:	bf00      	nop
 80024ba:	3720      	adds	r7, #32
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	10624dd3 	.word	0x10624dd3

080024c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80024ca:	4b12      	ldr	r3, [pc, #72]	; (8002514 <MX_DMA_Init+0x50>)
 80024cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ce:	4a11      	ldr	r2, [pc, #68]	; (8002514 <MX_DMA_Init+0x50>)
 80024d0:	f043 0304 	orr.w	r3, r3, #4
 80024d4:	6493      	str	r3, [r2, #72]	; 0x48
 80024d6:	4b0f      	ldr	r3, [pc, #60]	; (8002514 <MX_DMA_Init+0x50>)
 80024d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024da:	f003 0304 	and.w	r3, r3, #4
 80024de:	607b      	str	r3, [r7, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024e2:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <MX_DMA_Init+0x50>)
 80024e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024e6:	4a0b      	ldr	r2, [pc, #44]	; (8002514 <MX_DMA_Init+0x50>)
 80024e8:	f043 0301 	orr.w	r3, r3, #1
 80024ec:	6493      	str	r3, [r2, #72]	; 0x48
 80024ee:	4b09      	ldr	r3, [pc, #36]	; (8002514 <MX_DMA_Init+0x50>)
 80024f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	603b      	str	r3, [r7, #0]
 80024f8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80024fa:	2200      	movs	r2, #0
 80024fc:	2105      	movs	r1, #5
 80024fe:	200b      	movs	r0, #11
 8002500:	f003 f8e4 	bl	80056cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002504:	200b      	movs	r0, #11
 8002506:	f003 f8fb 	bl	8005700 <HAL_NVIC_EnableIRQ>

}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40021000 	.word	0x40021000

08002518 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b08a      	sub	sp, #40	; 0x28
 800251c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251e:	f107 0314 	add.w	r3, r7, #20
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	605a      	str	r2, [r3, #4]
 8002528:	609a      	str	r2, [r3, #8]
 800252a:	60da      	str	r2, [r3, #12]
 800252c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800252e:	4b37      	ldr	r3, [pc, #220]	; (800260c <MX_GPIO_Init+0xf4>)
 8002530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002532:	4a36      	ldr	r2, [pc, #216]	; (800260c <MX_GPIO_Init+0xf4>)
 8002534:	f043 0320 	orr.w	r3, r3, #32
 8002538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800253a:	4b34      	ldr	r3, [pc, #208]	; (800260c <MX_GPIO_Init+0xf4>)
 800253c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800253e:	f003 0320 	and.w	r3, r3, #32
 8002542:	613b      	str	r3, [r7, #16]
 8002544:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002546:	4b31      	ldr	r3, [pc, #196]	; (800260c <MX_GPIO_Init+0xf4>)
 8002548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800254a:	4a30      	ldr	r2, [pc, #192]	; (800260c <MX_GPIO_Init+0xf4>)
 800254c:	f043 0304 	orr.w	r3, r3, #4
 8002550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002552:	4b2e      	ldr	r3, [pc, #184]	; (800260c <MX_GPIO_Init+0xf4>)
 8002554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002556:	f003 0304 	and.w	r3, r3, #4
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800255e:	4b2b      	ldr	r3, [pc, #172]	; (800260c <MX_GPIO_Init+0xf4>)
 8002560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002562:	4a2a      	ldr	r2, [pc, #168]	; (800260c <MX_GPIO_Init+0xf4>)
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	64d3      	str	r3, [r2, #76]	; 0x4c
 800256a:	4b28      	ldr	r3, [pc, #160]	; (800260c <MX_GPIO_Init+0xf4>)
 800256c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	60bb      	str	r3, [r7, #8]
 8002574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002576:	4b25      	ldr	r3, [pc, #148]	; (800260c <MX_GPIO_Init+0xf4>)
 8002578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800257a:	4a24      	ldr	r2, [pc, #144]	; (800260c <MX_GPIO_Init+0xf4>)
 800257c:	f043 0308 	orr.w	r3, r3, #8
 8002580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002582:	4b22      	ldr	r3, [pc, #136]	; (800260c <MX_GPIO_Init+0xf4>)
 8002584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	607b      	str	r3, [r7, #4]
 800258c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800258e:	4b1f      	ldr	r3, [pc, #124]	; (800260c <MX_GPIO_Init+0xf4>)
 8002590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002592:	4a1e      	ldr	r2, [pc, #120]	; (800260c <MX_GPIO_Init+0xf4>)
 8002594:	f043 0302 	orr.w	r3, r3, #2
 8002598:	64d3      	str	r3, [r2, #76]	; 0x4c
 800259a:	4b1c      	ldr	r3, [pc, #112]	; (800260c <MX_GPIO_Init+0xf4>)
 800259c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	603b      	str	r3, [r7, #0]
 80025a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80025a6:	2200      	movs	r2, #0
 80025a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025b0:	f003 fd68 	bl	8006084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80025b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ba:	2301      	movs	r3, #1
 80025bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025be:	2300      	movs	r3, #0
 80025c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c2:	2300      	movs	r3, #0
 80025c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80025c6:	f107 0314 	add.w	r3, r7, #20
 80025ca:	4619      	mov	r1, r3
 80025cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025d0:	f003 fbd6 	bl	8005d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_IT_Pin;
 80025d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80025de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_IT_GPIO_Port, &GPIO_InitStruct);
 80025e4:	f107 0314 	add.w	r3, r7, #20
 80025e8:	4619      	mov	r1, r3
 80025ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025ee:	f003 fbc7 	bl	8005d80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80025f2:	2200      	movs	r2, #0
 80025f4:	2105      	movs	r1, #5
 80025f6:	2028      	movs	r0, #40	; 0x28
 80025f8:	f003 f868 	bl	80056cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80025fc:	2028      	movs	r0, #40	; 0x28
 80025fe:	f003 f87f 	bl	8005700 <HAL_NVIC_EnableIRQ>

}
 8002602:	bf00      	nop
 8002604:	3728      	adds	r7, #40	; 0x28
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40021000 	.word	0x40021000

08002610 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002614:	4b1b      	ldr	r3, [pc, #108]	; (8002684 <MX_I2C2_Init+0x74>)
 8002616:	4a1c      	ldr	r2, [pc, #112]	; (8002688 <MX_I2C2_Init+0x78>)
 8002618:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20C0EDFF;
 800261a:	4b1a      	ldr	r3, [pc, #104]	; (8002684 <MX_I2C2_Init+0x74>)
 800261c:	4a1b      	ldr	r2, [pc, #108]	; (800268c <MX_I2C2_Init+0x7c>)
 800261e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002620:	4b18      	ldr	r3, [pc, #96]	; (8002684 <MX_I2C2_Init+0x74>)
 8002622:	2200      	movs	r2, #0
 8002624:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002626:	4b17      	ldr	r3, [pc, #92]	; (8002684 <MX_I2C2_Init+0x74>)
 8002628:	2201      	movs	r2, #1
 800262a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800262c:	4b15      	ldr	r3, [pc, #84]	; (8002684 <MX_I2C2_Init+0x74>)
 800262e:	2200      	movs	r2, #0
 8002630:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002632:	4b14      	ldr	r3, [pc, #80]	; (8002684 <MX_I2C2_Init+0x74>)
 8002634:	2200      	movs	r2, #0
 8002636:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002638:	4b12      	ldr	r3, [pc, #72]	; (8002684 <MX_I2C2_Init+0x74>)
 800263a:	2200      	movs	r2, #0
 800263c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800263e:	4b11      	ldr	r3, [pc, #68]	; (8002684 <MX_I2C2_Init+0x74>)
 8002640:	2200      	movs	r2, #0
 8002642:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002644:	4b0f      	ldr	r3, [pc, #60]	; (8002684 <MX_I2C2_Init+0x74>)
 8002646:	2200      	movs	r2, #0
 8002648:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800264a:	480e      	ldr	r0, [pc, #56]	; (8002684 <MX_I2C2_Init+0x74>)
 800264c:	f003 fd6f 	bl	800612e <HAL_I2C_Init>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002656:	f000 fd6f 	bl	8003138 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800265a:	2100      	movs	r1, #0
 800265c:	4809      	ldr	r0, [pc, #36]	; (8002684 <MX_I2C2_Init+0x74>)
 800265e:	f004 fac9 	bl	8006bf4 <HAL_I2CEx_ConfigAnalogFilter>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002668:	f000 fd66 	bl	8003138 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800266c:	2100      	movs	r1, #0
 800266e:	4805      	ldr	r0, [pc, #20]	; (8002684 <MX_I2C2_Init+0x74>)
 8002670:	f004 fb0b 	bl	8006c8a <HAL_I2CEx_ConfigDigitalFilter>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800267a:	f000 fd5d 	bl	8003138 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	20000374 	.word	0x20000374
 8002688:	40005800 	.word	0x40005800
 800268c:	20c0edff 	.word	0x20c0edff

08002690 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b0a0      	sub	sp, #128	; 0x80
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002698:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	605a      	str	r2, [r3, #4]
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	60da      	str	r2, [r3, #12]
 80026a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026a8:	f107 0318 	add.w	r3, r7, #24
 80026ac:	2254      	movs	r2, #84	; 0x54
 80026ae:	2100      	movs	r1, #0
 80026b0:	4618      	mov	r0, r3
 80026b2:	f011 f997 	bl	80139e4 <memset>
  if(i2cHandle->Instance==I2C2)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a2c      	ldr	r2, [pc, #176]	; (800276c <HAL_I2C_MspInit+0xdc>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d151      	bne.n	8002764 <HAL_I2C_MspInit+0xd4>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80026c0:	2380      	movs	r3, #128	; 0x80
 80026c2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80026c4:	2300      	movs	r3, #0
 80026c6:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026c8:	f107 0318 	add.w	r3, r7, #24
 80026cc:	4618      	mov	r0, r3
 80026ce:	f006 fe65 	bl	800939c <HAL_RCCEx_PeriphCLKConfig>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80026d8:	f000 fd2e 	bl	8003138 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80026dc:	4b24      	ldr	r3, [pc, #144]	; (8002770 <HAL_I2C_MspInit+0xe0>)
 80026de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e0:	4a23      	ldr	r2, [pc, #140]	; (8002770 <HAL_I2C_MspInit+0xe0>)
 80026e2:	f043 0320 	orr.w	r3, r3, #32
 80026e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026e8:	4b21      	ldr	r3, [pc, #132]	; (8002770 <HAL_I2C_MspInit+0xe0>)
 80026ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ec:	f003 0320 	and.w	r3, r3, #32
 80026f0:	617b      	str	r3, [r7, #20]
 80026f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026f4:	4b1e      	ldr	r3, [pc, #120]	; (8002770 <HAL_I2C_MspInit+0xe0>)
 80026f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f8:	4a1d      	ldr	r2, [pc, #116]	; (8002770 <HAL_I2C_MspInit+0xe0>)
 80026fa:	f043 0304 	orr.w	r3, r3, #4
 80026fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002700:	4b1b      	ldr	r3, [pc, #108]	; (8002770 <HAL_I2C_MspInit+0xe0>)
 8002702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	613b      	str	r3, [r7, #16]
 800270a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0-OSC_IN     ------> I2C2_SDA
    PC4     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800270c:	2301      	movs	r3, #1
 800270e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002710:	2312      	movs	r3, #18
 8002712:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002714:	2300      	movs	r3, #0
 8002716:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002718:	2300      	movs	r3, #0
 800271a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800271c:	2304      	movs	r3, #4
 800271e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002720:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002724:	4619      	mov	r1, r3
 8002726:	4813      	ldr	r0, [pc, #76]	; (8002774 <HAL_I2C_MspInit+0xe4>)
 8002728:	f003 fb2a 	bl	8005d80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800272c:	2310      	movs	r3, #16
 800272e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002730:	2312      	movs	r3, #18
 8002732:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002734:	2300      	movs	r3, #0
 8002736:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002738:	2300      	movs	r3, #0
 800273a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800273c:	2304      	movs	r3, #4
 800273e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002740:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002744:	4619      	mov	r1, r3
 8002746:	480c      	ldr	r0, [pc, #48]	; (8002778 <HAL_I2C_MspInit+0xe8>)
 8002748:	f003 fb1a 	bl	8005d80 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800274c:	4b08      	ldr	r3, [pc, #32]	; (8002770 <HAL_I2C_MspInit+0xe0>)
 800274e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002750:	4a07      	ldr	r2, [pc, #28]	; (8002770 <HAL_I2C_MspInit+0xe0>)
 8002752:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002756:	6593      	str	r3, [r2, #88]	; 0x58
 8002758:	4b05      	ldr	r3, [pc, #20]	; (8002770 <HAL_I2C_MspInit+0xe0>)
 800275a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002764:	bf00      	nop
 8002766:	3780      	adds	r7, #128	; 0x80
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40005800 	.word	0x40005800
 8002770:	40021000 	.word	0x40021000
 8002774:	48001400 	.word	0x48001400
 8002778:	48000800 	.word	0x48000800

0800277c <gps_ReadNMEA>:
 */

#include "l80-m39.h"


void gps_ReadNMEA(uint8_t nmea_data[],GPS_t *gps_struct){
 800277c:	b580      	push	{r7, lr}
 800277e:	b08e      	sub	sp, #56	; 0x38
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]

	uint8_t string_nmea[6];
	uint8_t gpgga_nmea[6] = "GPGGA\0";
 8002786:	4a70      	ldr	r2, [pc, #448]	; (8002948 <gps_ReadNMEA+0x1cc>)
 8002788:	f107 0318 	add.w	r3, r7, #24
 800278c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002790:	6018      	str	r0, [r3, #0]
 8002792:	3304      	adds	r3, #4
 8002794:	8019      	strh	r1, [r3, #0]
	uint8_t readed_data[12];
	uint8_t delta;
	uint8_t begin_offset;
	uint8_t processing_offset = 0;
 8002796:	2300      	movs	r3, #0
 8002798:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	//Loop for all the nmea data
	for(int i=0;i<BUFFER_SIZE_NMEA;i++){
 800279c:	2300      	movs	r3, #0
 800279e:	633b      	str	r3, [r7, #48]	; 0x30
 80027a0:	e0c8      	b.n	8002934 <gps_ReadNMEA+0x1b8>
		/*only look for a data beginin symbol = $ */
		if(nmea_data[i] == '$'){
 80027a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	4413      	add	r3, r2
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	2b24      	cmp	r3, #36	; 0x24
 80027ac:	f040 80bf 	bne.w	800292e <gps_ReadNMEA+0x1b2>
			/*Check if we have $GPGGA*/
			for(int j=0;j<5;j++){
 80027b0:	2300      	movs	r3, #0
 80027b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027b4:	e00f      	b.n	80027d6 <gps_ReadNMEA+0x5a>
				string_nmea[j] = nmea_data[(i+j+1)];
 80027b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ba:	4413      	add	r3, r2
 80027bc:	3301      	adds	r3, #1
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	4413      	add	r3, r2
 80027c2:	7819      	ldrb	r1, [r3, #0]
 80027c4:	f107 0220 	add.w	r2, r7, #32
 80027c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ca:	4413      	add	r3, r2
 80027cc:	460a      	mov	r2, r1
 80027ce:	701a      	strb	r2, [r3, #0]
			for(int j=0;j<5;j++){
 80027d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d2:	3301      	adds	r3, #1
 80027d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d8:	2b04      	cmp	r3, #4
 80027da:	ddec      	ble.n	80027b6 <gps_ReadNMEA+0x3a>
			}
			string_nmea[5] = 0;
 80027dc:	2300      	movs	r3, #0
 80027de:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			/*Be aware that input string of strcmp need to end on \0 If not the result will probably be random value*/
			if(strcmp(string_nmea,gpgga_nmea) == 0){
 80027e2:	f107 0218 	add.w	r2, r7, #24
 80027e6:	f107 0320 	add.w	r3, r7, #32
 80027ea:	4611      	mov	r1, r2
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7fd fd17 	bl	8000220 <strcmp>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f040 809a 	bne.w	800292e <gps_ReadNMEA+0x1b2>
				i+=6;	/*Skip GPGGA,*/
 80027fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027fc:	3306      	adds	r3, #6
 80027fe:	633b      	str	r3, [r7, #48]	; 0x30
				for(int k=0;k<12;k++){
 8002800:	2300      	movs	r3, #0
 8002802:	62bb      	str	r3, [r7, #40]	; 0x28
 8002804:	e08e      	b.n	8002924 <gps_ReadNMEA+0x1a8>

					/*Read a part of the incomming data*/
					i++;	/*skip ','*/
 8002806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002808:	3301      	adds	r3, #1
 800280a:	633b      	str	r3, [r7, #48]	; 0x30
					begin_offset = i;
 800280c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800280e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					delta = 0;
 8002812:	2300      	movs	r3, #0
 8002814:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

					while((nmea_data[i] !='\0' )&&( nmea_data[i] != ',')){
 8002818:	e013      	b.n	8002842 <gps_ReadNMEA+0xc6>
						readed_data[delta] = nmea_data[i];
 800281a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	441a      	add	r2, r3
 8002820:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002824:	7812      	ldrb	r2, [r2, #0]
 8002826:	3338      	adds	r3, #56	; 0x38
 8002828:	443b      	add	r3, r7
 800282a:	f803 2c2c 	strb.w	r2, [r3, #-44]
						i++;
 800282e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002830:	3301      	adds	r3, #1
 8002832:	633b      	str	r3, [r7, #48]	; 0x30
						delta = i - begin_offset;
 8002834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002836:	b2da      	uxtb	r2, r3
 8002838:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					while((nmea_data[i] !='\0' )&&( nmea_data[i] != ',')){
 8002842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	4413      	add	r3, r2
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d005      	beq.n	800285a <gps_ReadNMEA+0xde>
 800284e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	4413      	add	r3, r2
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	2b2c      	cmp	r3, #44	; 0x2c
 8002858:	d1df      	bne.n	800281a <gps_ReadNMEA+0x9e>
					}
					processing_offset++;
 800285a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800285e:	3301      	adds	r3, #1
 8002860:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					/*Process incomming data*/
					switch (processing_offset) {
 8002864:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002868:	3b01      	subs	r3, #1
 800286a:	2b0a      	cmp	r3, #10
 800286c:	d857      	bhi.n	800291e <gps_ReadNMEA+0x1a2>
 800286e:	a201      	add	r2, pc, #4	; (adr r2, 8002874 <gps_ReadNMEA+0xf8>)
 8002870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002874:	080028a1 	.word	0x080028a1
 8002878:	080028af 	.word	0x080028af
 800287c:	080028bd 	.word	0x080028bd
 8002880:	080028cb 	.word	0x080028cb
 8002884:	080028d9 	.word	0x080028d9
 8002888:	080028e7 	.word	0x080028e7
 800288c:	080028f5 	.word	0x080028f5
 8002890:	0800291f 	.word	0x0800291f
 8002894:	08002903 	.word	0x08002903
 8002898:	0800291f 	.word	0x0800291f
 800289c:	08002911 	.word	0x08002911
						/*UTC*/
						case 1:
							gps_ProcessUTC(readed_data, gps_struct);
 80028a0:	f107 030c 	add.w	r3, r7, #12
 80028a4:	6839      	ldr	r1, [r7, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 f850 	bl	800294c <gps_ProcessUTC>
							break;
 80028ac:	e037      	b.n	800291e <gps_ReadNMEA+0x1a2>

						/*LATITUDE*/
						case 2:
							gps_ProcessLatitude(readed_data, gps_struct);
 80028ae:	f107 030c 	add.w	r3, r7, #12
 80028b2:	6839      	ldr	r1, [r7, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f000 f887 	bl	80029c8 <gps_ProcessLatitude>
							break;
 80028ba:	e030      	b.n	800291e <gps_ReadNMEA+0x1a2>

						/*NORTH - SOUTH*/
						case 3:
							gps_ProcessNorthSouth(readed_data, gps_struct);
 80028bc:	f107 030c 	add.w	r3, r7, #12
 80028c0:	6839      	ldr	r1, [r7, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f000 f9fa 	bl	8002cbc <gps_ProcessNorthSouth>
							break;
 80028c8:	e029      	b.n	800291e <gps_ReadNMEA+0x1a2>

						/*LONGITUDE*/
						case 4:
							gps_ProcessLongitude(readed_data, gps_struct);
 80028ca:	f107 030c 	add.w	r3, r7, #12
 80028ce:	6839      	ldr	r1, [r7, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f000 f935 	bl	8002b40 <gps_ProcessLongitude>
							break;
 80028d6:	e022      	b.n	800291e <gps_ReadNMEA+0x1a2>

						/*EAST - WEST*/
						case 5:
							gps_ProcessEastWest(readed_data,gps_struct);
 80028d8:	f107 030c 	add.w	r3, r7, #12
 80028dc:	6839      	ldr	r1, [r7, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 fa02 	bl	8002ce8 <gps_ProcessEastWest>
							break;
 80028e4:	e01b      	b.n	800291e <gps_ReadNMEA+0x1a2>

						/*FIX QUALIFICATION*/
						case 6:
							gps_ProcessFix(readed_data, gps_struct);
 80028e6:	f107 030c 	add.w	r3, r7, #12
 80028ea:	6839      	ldr	r1, [r7, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f000 fa11 	bl	8002d14 <gps_ProcessFix>
							break;
 80028f2:	e014      	b.n	800291e <gps_ReadNMEA+0x1a2>

						/*SATELLITES COUNT */
						case 7:
							gps_ProcessSatelliteCount(readed_data, gps_struct);
 80028f4:	f107 030c 	add.w	r3, r7, #12
 80028f8:	6839      	ldr	r1, [r7, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 fa28 	bl	8002d50 <gps_ProcessSatelliteCount>
							break;
 8002900:	e00d      	b.n	800291e <gps_ReadNMEA+0x1a2>

						/*MSL ALTITUDE*/
						case 9:
							gps_ProcessAltitude(readed_data, gps_struct);
 8002902:	f107 030c 	add.w	r3, r7, #12
 8002906:	6839      	ldr	r1, [r7, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f000 fa3d 	bl	8002d88 <gps_ProcessAltitude>
							break;
 800290e:	e006      	b.n	800291e <gps_ReadNMEA+0x1a2>

						/*ELLIPTICAL CORRECTION */
						case 11:
							gps_ProcessAltitudeCorre(readed_data, gps_struct);	//Can be use to process altitude correction as well
 8002910:	f107 030c 	add.w	r3, r7, #12
 8002914:	6839      	ldr	r1, [r7, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f000 fa92 	bl	8002e40 <gps_ProcessAltitudeCorre>
							break;
 800291c:	bf00      	nop
				for(int k=0;k<12;k++){
 800291e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002920:	3301      	adds	r3, #1
 8002922:	62bb      	str	r3, [r7, #40]	; 0x28
 8002924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002926:	2b0b      	cmp	r3, #11
 8002928:	f77f af6d 	ble.w	8002806 <gps_ReadNMEA+0x8a>
					}
				}
				/*After the first $GPGGA read we need to quit the current reading process*/
				break;
 800292c:	e008      	b.n	8002940 <gps_ReadNMEA+0x1c4>
	for(int i=0;i<BUFFER_SIZE_NMEA;i++){
 800292e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002930:	3301      	adds	r3, #1
 8002932:	633b      	str	r3, [r7, #48]	; 0x30
 8002934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002936:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800293a:	f6ff af32 	blt.w	80027a2 <gps_ReadNMEA+0x26>

			}
		}
	}
}
 800293e:	bf00      	nop
 8002940:	bf00      	nop
 8002942:	3738      	adds	r7, #56	; 0x38
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	08014b68 	.word	0x08014b68

0800294c <gps_ProcessUTC>:

void gps_ProcessUTC(uint8_t utc_incomming[],GPS_t *gps_struct){
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
	gps_struct->utc_time.hour = ((utc_incomming[0] - '0')*10) + (utc_incomming[1] - '0');
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	461a      	mov	r2, r3
 800295c:	0092      	lsls	r2, r2, #2
 800295e:	4413      	add	r3, r2
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	b2da      	uxtb	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3301      	adds	r3, #1
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	4413      	add	r3, r2
 800296c:	b2db      	uxtb	r3, r3
 800296e:	3b10      	subs	r3, #16
 8002970:	b2da      	uxtb	r2, r3
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	761a      	strb	r2, [r3, #24]
	gps_struct->utc_time.minute = ((utc_incomming[2] - '0')*10) + (utc_incomming[3] - '0');
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	3302      	adds	r3, #2
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	461a      	mov	r2, r3
 800297e:	0092      	lsls	r2, r2, #2
 8002980:	4413      	add	r3, r2
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	b2da      	uxtb	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	3303      	adds	r3, #3
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	4413      	add	r3, r2
 800298e:	b2db      	uxtb	r3, r3
 8002990:	3b10      	subs	r3, #16
 8002992:	b2da      	uxtb	r2, r3
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	765a      	strb	r2, [r3, #25]
	gps_struct->utc_time.second = ((utc_incomming[4] - '0')*10) + (utc_incomming[5] - '0');
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3304      	adds	r3, #4
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	461a      	mov	r2, r3
 80029a0:	0092      	lsls	r2, r2, #2
 80029a2:	4413      	add	r3, r2
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3305      	adds	r3, #5
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	4413      	add	r3, r2
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	3b10      	subs	r3, #16
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	769a      	strb	r2, [r3, #26]
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
	...

080029c8 <gps_ProcessLatitude>:

void gps_ProcessLatitude(uint8_t utc_incomming[],GPS_t *gps_struct){
 80029c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80029cc:	b084      	sub	sp, #16
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
 80029d2:	6039      	str	r1, [r7, #0]

	int8_t degree_DMm = 0;
 80029d4:	2300      	movs	r3, #0
 80029d6:	73fb      	strb	r3, [r7, #15]
	float minute_DMm = 0;
 80029d8:	f04f 0300 	mov.w	r3, #0
 80029dc:	60bb      	str	r3, [r7, #8]

	/*Add reader degree*/
	degree_DMm = ((utc_incomming[0] - '0')*10) + (utc_incomming[1] - '0');
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	3b30      	subs	r3, #48	; 0x30
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	461a      	mov	r2, r3
 80029e8:	0092      	lsls	r2, r2, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3301      	adds	r3, #1
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	4413      	add	r3, r2
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	3b30      	subs	r3, #48	; 0x30
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	73fb      	strb	r3, [r7, #15]
	/*Add first part of minutes*/
	minute_DMm = ((utc_incomming[2] - '0')*10) + (utc_incomming[3] - '0');
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3302      	adds	r3, #2
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4413      	add	r3, r2
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	461a      	mov	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3303      	adds	r3, #3
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	3b30      	subs	r3, #48	; 0x30
 8002a1c:	4413      	add	r3, r2
 8002a1e:	ee07 3a90 	vmov	s15, r3
 8002a22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a26:	edc7 7a02 	vstr	s15, [r7, #8]
	minute_DMm += ((utc_incomming[5] - '0')*0.1) + ((utc_incomming[6] - '0')*0.01) + ((utc_incomming[7] - '0')*0.001) + ((utc_incomming[8] - '0')*0.0001);
 8002a2a:	68b8      	ldr	r0, [r7, #8]
 8002a2c:	f7fd fd6e 	bl	800050c <__aeabi_f2d>
 8002a30:	4604      	mov	r4, r0
 8002a32:	460d      	mov	r5, r1
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3305      	adds	r3, #5
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	3b30      	subs	r3, #48	; 0x30
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7fd fd53 	bl	80004e8 <__aeabi_i2d>
 8002a42:	a336      	add	r3, pc, #216	; (adr r3, 8002b1c <gps_ProcessLatitude+0x154>)
 8002a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a48:	f7fd fdb8 	bl	80005bc <__aeabi_dmul>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4690      	mov	r8, r2
 8002a52:	4699      	mov	r9, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3306      	adds	r3, #6
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	3b30      	subs	r3, #48	; 0x30
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7fd fd43 	bl	80004e8 <__aeabi_i2d>
 8002a62:	a330      	add	r3, pc, #192	; (adr r3, 8002b24 <gps_ProcessLatitude+0x15c>)
 8002a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a68:	f7fd fda8 	bl	80005bc <__aeabi_dmul>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4640      	mov	r0, r8
 8002a72:	4649      	mov	r1, r9
 8002a74:	f7fd fbec 	bl	8000250 <__adddf3>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4690      	mov	r8, r2
 8002a7e:	4699      	mov	r9, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3307      	adds	r3, #7
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	3b30      	subs	r3, #48	; 0x30
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7fd fd2d 	bl	80004e8 <__aeabi_i2d>
 8002a8e:	a327      	add	r3, pc, #156	; (adr r3, 8002b2c <gps_ProcessLatitude+0x164>)
 8002a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a94:	f7fd fd92 	bl	80005bc <__aeabi_dmul>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	4640      	mov	r0, r8
 8002a9e:	4649      	mov	r1, r9
 8002aa0:	f7fd fbd6 	bl	8000250 <__adddf3>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	4690      	mov	r8, r2
 8002aaa:	4699      	mov	r9, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	3308      	adds	r3, #8
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	3b30      	subs	r3, #48	; 0x30
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7fd fd17 	bl	80004e8 <__aeabi_i2d>
 8002aba:	a31e      	add	r3, pc, #120	; (adr r3, 8002b34 <gps_ProcessLatitude+0x16c>)
 8002abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac0:	f7fd fd7c 	bl	80005bc <__aeabi_dmul>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4640      	mov	r0, r8
 8002aca:	4649      	mov	r1, r9
 8002acc:	f7fd fbc0 	bl	8000250 <__adddf3>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	4620      	mov	r0, r4
 8002ad6:	4629      	mov	r1, r5
 8002ad8:	f7fd fbba 	bl	8000250 <__adddf3>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4610      	mov	r0, r2
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	f7fe f81a 	bl	8000b1c <__aeabi_d2f>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	60bb      	str	r3, [r7, #8]

	gps_struct->latitude_deg_s = (degree_DMm + (minute_DMm/60));
 8002aec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002af0:	ee07 3a90 	vmov	s15, r3
 8002af4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002af8:	edd7 6a02 	vldr	s13, [r7, #8]
 8002afc:	ed9f 6a06 	vldr	s12, [pc, #24]	; 8002b18 <gps_ProcessLatitude+0x150>
 8002b00:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002b04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	edc3 7a00 	vstr	s15, [r3]
}
 8002b0e:	bf00      	nop
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b18:	42700000 	.word	0x42700000
 8002b1c:	9999999a 	.word	0x9999999a
 8002b20:	3fb99999 	.word	0x3fb99999
 8002b24:	47ae147b 	.word	0x47ae147b
 8002b28:	3f847ae1 	.word	0x3f847ae1
 8002b2c:	d2f1a9fc 	.word	0xd2f1a9fc
 8002b30:	3f50624d 	.word	0x3f50624d
 8002b34:	eb1c432d 	.word	0xeb1c432d
 8002b38:	3f1a36e2 	.word	0x3f1a36e2
 8002b3c:	00000000 	.word	0x00000000

08002b40 <gps_ProcessLongitude>:

void gps_ProcessLongitude(uint8_t utc_incomming[],GPS_t *gps_struct){
 8002b40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b44:	b084      	sub	sp, #16
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
 8002b4a:	6039      	str	r1, [r7, #0]

	int8_t degree_DMm = 0;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	73fb      	strb	r3, [r7, #15]
	float minute_DMm = 0;
 8002b50:	f04f 0300 	mov.w	r3, #0
 8002b54:	60bb      	str	r3, [r7, #8]

	/*Add reader degree*/
	degree_DMm = ((utc_incomming[1] - '0')*10) + (utc_incomming[2] - '0');
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	3b30      	subs	r3, #48	; 0x30
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	461a      	mov	r2, r3
 8002b62:	0092      	lsls	r2, r2, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	b2da      	uxtb	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	3302      	adds	r3, #2
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	4413      	add	r3, r2
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	3b30      	subs	r3, #48	; 0x30
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	73fb      	strb	r3, [r7, #15]
	/*Add first part of minutes*/
	minute_DMm = ((utc_incomming[3] - '0')*10) + (utc_incomming[4] - '0');
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	3303      	adds	r3, #3
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002b84:	4613      	mov	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	3304      	adds	r3, #4
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	3b30      	subs	r3, #48	; 0x30
 8002b96:	4413      	add	r3, r2
 8002b98:	ee07 3a90 	vmov	s15, r3
 8002b9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ba0:	edc7 7a02 	vstr	s15, [r7, #8]
	minute_DMm += ((utc_incomming[5] - '0')*0.1) + ((utc_incomming[6] - '0')*0.01) + ((utc_incomming[7] - '0')*0.001) + ((utc_incomming[8] - '0')*0.0001);
 8002ba4:	68b8      	ldr	r0, [r7, #8]
 8002ba6:	f7fd fcb1 	bl	800050c <__aeabi_f2d>
 8002baa:	4604      	mov	r4, r0
 8002bac:	460d      	mov	r5, r1
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	3305      	adds	r3, #5
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	3b30      	subs	r3, #48	; 0x30
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fd fc96 	bl	80004e8 <__aeabi_i2d>
 8002bbc:	a337      	add	r3, pc, #220	; (adr r3, 8002c9c <gps_ProcessLongitude+0x15c>)
 8002bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc2:	f7fd fcfb 	bl	80005bc <__aeabi_dmul>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4690      	mov	r8, r2
 8002bcc:	4699      	mov	r9, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	3306      	adds	r3, #6
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	3b30      	subs	r3, #48	; 0x30
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fd fc86 	bl	80004e8 <__aeabi_i2d>
 8002bdc:	a331      	add	r3, pc, #196	; (adr r3, 8002ca4 <gps_ProcessLongitude+0x164>)
 8002bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be2:	f7fd fceb 	bl	80005bc <__aeabi_dmul>
 8002be6:	4602      	mov	r2, r0
 8002be8:	460b      	mov	r3, r1
 8002bea:	4640      	mov	r0, r8
 8002bec:	4649      	mov	r1, r9
 8002bee:	f7fd fb2f 	bl	8000250 <__adddf3>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	4690      	mov	r8, r2
 8002bf8:	4699      	mov	r9, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	3307      	adds	r3, #7
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	3b30      	subs	r3, #48	; 0x30
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fd fc70 	bl	80004e8 <__aeabi_i2d>
 8002c08:	a328      	add	r3, pc, #160	; (adr r3, 8002cac <gps_ProcessLongitude+0x16c>)
 8002c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c0e:	f7fd fcd5 	bl	80005bc <__aeabi_dmul>
 8002c12:	4602      	mov	r2, r0
 8002c14:	460b      	mov	r3, r1
 8002c16:	4640      	mov	r0, r8
 8002c18:	4649      	mov	r1, r9
 8002c1a:	f7fd fb19 	bl	8000250 <__adddf3>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	460b      	mov	r3, r1
 8002c22:	4690      	mov	r8, r2
 8002c24:	4699      	mov	r9, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	3308      	adds	r3, #8
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	3b30      	subs	r3, #48	; 0x30
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fd fc5a 	bl	80004e8 <__aeabi_i2d>
 8002c34:	a31f      	add	r3, pc, #124	; (adr r3, 8002cb4 <gps_ProcessLongitude+0x174>)
 8002c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c3a:	f7fd fcbf 	bl	80005bc <__aeabi_dmul>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	460b      	mov	r3, r1
 8002c42:	4640      	mov	r0, r8
 8002c44:	4649      	mov	r1, r9
 8002c46:	f7fd fb03 	bl	8000250 <__adddf3>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	4620      	mov	r0, r4
 8002c50:	4629      	mov	r1, r5
 8002c52:	f7fd fafd 	bl	8000250 <__adddf3>
 8002c56:	4602      	mov	r2, r0
 8002c58:	460b      	mov	r3, r1
 8002c5a:	4610      	mov	r0, r2
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	f7fd ff5d 	bl	8000b1c <__aeabi_d2f>
 8002c62:	4603      	mov	r3, r0
 8002c64:	60bb      	str	r3, [r7, #8]

	gps_struct->longitude_deg_s = (degree_DMm + (minute_DMm/60));
 8002c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c6a:	ee07 3a90 	vmov	s15, r3
 8002c6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c72:	edd7 6a02 	vldr	s13, [r7, #8]
 8002c76:	ed9f 6a08 	vldr	s12, [pc, #32]	; 8002c98 <gps_ProcessLongitude+0x158>
 8002c7a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002c7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8002c88:	bf00      	nop
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c92:	bf00      	nop
 8002c94:	f3af 8000 	nop.w
 8002c98:	42700000 	.word	0x42700000
 8002c9c:	9999999a 	.word	0x9999999a
 8002ca0:	3fb99999 	.word	0x3fb99999
 8002ca4:	47ae147b 	.word	0x47ae147b
 8002ca8:	3f847ae1 	.word	0x3f847ae1
 8002cac:	d2f1a9fc 	.word	0xd2f1a9fc
 8002cb0:	3f50624d 	.word	0x3f50624d
 8002cb4:	eb1c432d 	.word	0xeb1c432d
 8002cb8:	3f1a36e2 	.word	0x3f1a36e2

08002cbc <gps_ProcessNorthSouth>:

void gps_ProcessNorthSouth(uint8_t utc_incomming[],GPS_t *gps_struct){
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]

	if(utc_incomming[0] == 'N'){
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	2b4e      	cmp	r3, #78	; 0x4e
 8002ccc:	d103      	bne.n	8002cd6 <gps_ProcessNorthSouth+0x1a>
		gps_struct->north_south = north;
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	741a      	strb	r2, [r3, #16]
	}
	else{
		gps_struct->north_south = south;
	}
}
 8002cd4:	e002      	b.n	8002cdc <gps_ProcessNorthSouth+0x20>
		gps_struct->north_south = south;
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	741a      	strb	r2, [r3, #16]
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <gps_ProcessEastWest>:

void gps_ProcessEastWest(uint8_t utc_incomming[],GPS_t *gps_struct){
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]

	if(utc_incomming[0] == 'E'){
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b45      	cmp	r3, #69	; 0x45
 8002cf8:	d103      	bne.n	8002d02 <gps_ProcessEastWest+0x1a>
		gps_struct->east_west = east;
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	745a      	strb	r2, [r3, #17]
	}
	else{
		gps_struct->east_west = west;
	}
}
 8002d00:	e002      	b.n	8002d08 <gps_ProcessEastWest+0x20>
		gps_struct->east_west = west;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	2203      	movs	r2, #3
 8002d06:	745a      	strb	r2, [r3, #17]
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <gps_ProcessFix>:

void gps_ProcessFix(uint8_t utc_incomming[],GPS_t *gps_struct){
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]

	if(utc_incomming[0] == '1'){
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b31      	cmp	r3, #49	; 0x31
 8002d24:	d103      	bne.n	8002d2e <gps_ProcessFix+0x1a>
		gps_struct->qualification = fix_gps;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	771a      	strb	r2, [r3, #28]
		}
		else{
			gps_struct->qualification = unvalid;
		}
	}
}
 8002d2c:	e00a      	b.n	8002d44 <gps_ProcessFix+0x30>
		if(utc_incomming[0] == '2'){
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	2b32      	cmp	r3, #50	; 0x32
 8002d34:	d103      	bne.n	8002d3e <gps_ProcessFix+0x2a>
			gps_struct->qualification = fix_dgps;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	2202      	movs	r2, #2
 8002d3a:	771a      	strb	r2, [r3, #28]
}
 8002d3c:	e002      	b.n	8002d44 <gps_ProcessFix+0x30>
			gps_struct->qualification = unvalid;
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	2200      	movs	r2, #0
 8002d42:	771a      	strb	r2, [r3, #28]
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <gps_ProcessSatelliteCount>:

void gps_ProcessSatelliteCount(uint8_t utc_incomming[],GPS_t *gps_struct){
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]

	gps_struct->satelite_number = ((utc_incomming[0] - '0')*10) + (utc_incomming[1] - '0');
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	0092      	lsls	r2, r2, #2
 8002d62:	4413      	add	r3, r2
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	b2da      	uxtb	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	4413      	add	r3, r2
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	3b10      	subs	r3, #16
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	76da      	strb	r2, [r3, #27]
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
	...

08002d88 <gps_ProcessAltitude>:

void gps_ProcessAltitude(uint8_t utc_incomming[],GPS_t *gps_struct){
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]

	float altitude = 0;
 8002d92:	f04f 0300 	mov.w	r3, #0
 8002d96:	617b      	str	r3, [r7, #20]
	uint8_t dot_find = 0;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	74fb      	strb	r3, [r7, #19]
	for(int i=0;i<sizeof(utc_incomming);i++){
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	e03f      	b.n	8002e22 <gps_ProcessAltitude+0x9a>

		if(utc_incomming[i] == '.'){
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	4413      	add	r3, r2
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	2b2e      	cmp	r3, #46	; 0x2e
 8002dac:	d104      	bne.n	8002db8 <gps_ProcessAltitude+0x30>
			dot_find = 1;
 8002dae:	2301      	movs	r3, #1
 8002db0:	74fb      	strb	r3, [r7, #19]
			i++;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	3301      	adds	r3, #1
 8002db6:	60fb      	str	r3, [r7, #12]
		}

		if(dot_find){
 8002db8:	7cfb      	ldrb	r3, [r7, #19]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d01b      	beq.n	8002df6 <gps_ProcessAltitude+0x6e>
			altitude +=  (float)((utc_incomming[i] - '0')*0.1);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	3b30      	subs	r3, #48	; 0x30
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7fd fb8d 	bl	80004e8 <__aeabi_i2d>
 8002dce:	a31a      	add	r3, pc, #104	; (adr r3, 8002e38 <gps_ProcessAltitude+0xb0>)
 8002dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd4:	f7fd fbf2 	bl	80005bc <__aeabi_dmul>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4610      	mov	r0, r2
 8002dde:	4619      	mov	r1, r3
 8002de0:	f7fd fe9c 	bl	8000b1c <__aeabi_d2f>
 8002de4:	ee07 0a10 	vmov	s14, r0
 8002de8:	edd7 7a05 	vldr	s15, [r7, #20]
 8002dec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002df0:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8002df4:	e018      	b.n	8002e28 <gps_ProcessAltitude+0xa0>

		}
		else{
			altitude = (altitude*10) + (utc_incomming[i] - '0');
 8002df6:	edd7 7a05 	vldr	s15, [r7, #20]
 8002dfa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002dfe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	4413      	add	r3, r2
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	3b30      	subs	r3, #48	; 0x30
 8002e0c:	ee07 3a90 	vmov	s15, r3
 8002e10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e18:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i=0;i<sizeof(utc_incomming);i++){
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2b03      	cmp	r3, #3
 8002e26:	d9bc      	bls.n	8002da2 <gps_ProcessAltitude+0x1a>
		}

	}
	gps_struct->altitude_deg_s = altitude;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	609a      	str	r2, [r3, #8]
}
 8002e2e:	bf00      	nop
 8002e30:	3718      	adds	r7, #24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	9999999a 	.word	0x9999999a
 8002e3c:	3fb99999 	.word	0x3fb99999

08002e40 <gps_ProcessAltitudeCorre>:

void gps_ProcessAltitudeCorre(uint8_t utc_incomming[],GPS_t *gps_struct){
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]

	float altitude = 0;
 8002e4a:	f04f 0300 	mov.w	r3, #0
 8002e4e:	617b      	str	r3, [r7, #20]
	uint8_t dot_find = 0;
 8002e50:	2300      	movs	r3, #0
 8002e52:	74fb      	strb	r3, [r7, #19]
	for(int i=0;i<sizeof(utc_incomming);i++){
 8002e54:	2300      	movs	r3, #0
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	e03f      	b.n	8002eda <gps_ProcessAltitudeCorre+0x9a>

		if(utc_incomming[i] == '.'){
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	4413      	add	r3, r2
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b2e      	cmp	r3, #46	; 0x2e
 8002e64:	d104      	bne.n	8002e70 <gps_ProcessAltitudeCorre+0x30>
			dot_find = 1;
 8002e66:	2301      	movs	r3, #1
 8002e68:	74fb      	strb	r3, [r7, #19]
			i++;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	60fb      	str	r3, [r7, #12]
		}

		if(dot_find){
 8002e70:	7cfb      	ldrb	r3, [r7, #19]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d01b      	beq.n	8002eae <gps_ProcessAltitudeCorre+0x6e>
			altitude +=  (float)((utc_incomming[i] - '0')*0.1);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	3b30      	subs	r3, #48	; 0x30
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7fd fb31 	bl	80004e8 <__aeabi_i2d>
 8002e86:	a31a      	add	r3, pc, #104	; (adr r3, 8002ef0 <gps_ProcessAltitudeCorre+0xb0>)
 8002e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8c:	f7fd fb96 	bl	80005bc <__aeabi_dmul>
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	4610      	mov	r0, r2
 8002e96:	4619      	mov	r1, r3
 8002e98:	f7fd fe40 	bl	8000b1c <__aeabi_d2f>
 8002e9c:	ee07 0a10 	vmov	s14, r0
 8002ea0:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ea4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ea8:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8002eac:	e018      	b.n	8002ee0 <gps_ProcessAltitudeCorre+0xa0>

		}
		else{
			altitude = (altitude*10) + (utc_incomming[i] - '0');
 8002eae:	edd7 7a05 	vldr	s15, [r7, #20]
 8002eb2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002eb6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	3b30      	subs	r3, #48	; 0x30
 8002ec4:	ee07 3a90 	vmov	s15, r3
 8002ec8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ecc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ed0:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i=0;i<sizeof(utc_incomming);i++){
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2b03      	cmp	r3, #3
 8002ede:	d9bc      	bls.n	8002e5a <gps_ProcessAltitudeCorre+0x1a>
		}

	}
	gps_struct->altitude_correction = altitude;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	60da      	str	r2, [r3, #12]
}
 8002ee6:	bf00      	nop
 8002ee8:	3718      	adds	r7, #24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	9999999a 	.word	0x9999999a
 8002ef4:	3fb99999 	.word	0x3fb99999

08002ef8 <WIOE5_Init>:
 *    @huart is a pointer on uart handdle
 *
 * OUTPUT:
 * 	  @res is an integer use to count the number of error reported during initialisation
 * */
uint8_t WIOE5_Init(UART_HandleTypeDef *huart){
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b09c      	sub	sp, #112	; 0x70
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]

	uint8_t res = 0;
 8002f00:	2300      	movs	r3, #0
 8002f02:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint8_t string[100] = {0};
 8002f06:	2300      	movs	r3, #0
 8002f08:	60bb      	str	r3, [r7, #8]
 8002f0a:	f107 030c 	add.w	r3, r7, #12
 8002f0e:	2260      	movs	r2, #96	; 0x60
 8002f10:	2100      	movs	r1, #0
 8002f12:	4618      	mov	r0, r3
 8002f14:	f010 fd66 	bl	80139e4 <memset>

	/*Check for correct wiring*/
	HAL_UART_Transmit(huart, "AT\r\n", 8, 100);
 8002f18:	2364      	movs	r3, #100	; 0x64
 8002f1a:	2208      	movs	r2, #8
 8002f1c:	4911      	ldr	r1, [pc, #68]	; (8002f64 <WIOE5_Init+0x6c>)
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f007 ff58 	bl	800add4 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, string, 100,1000);
 8002f24:	f107 0108 	add.w	r1, r7, #8
 8002f28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f2c:	2264      	movs	r2, #100	; 0x64
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f007 ffe6 	bl	800af00 <HAL_UART_Receive>
	if(strcmp(string,"+AT: OK\r\n") != 0x0){
 8002f34:	f107 0308 	add.w	r3, r7, #8
 8002f38:	490b      	ldr	r1, [pc, #44]	; (8002f68 <WIOE5_Init+0x70>)
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fd f970 	bl	8000220 <strcmp>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d004      	beq.n	8002f50 <WIOE5_Init+0x58>
		res++;
 8002f46:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	WIOE5_ChannelSwitch(2,huart);
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	2002      	movs	r0, #2
 8002f54:	f000 f80a 	bl	8002f6c <WIOE5_ChannelSwitch>

	return res;
 8002f58:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3770      	adds	r7, #112	; 0x70
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	08014b70 	.word	0x08014b70
 8002f68:	08014b78 	.word	0x08014b78

08002f6c <WIOE5_ChannelSwitch>:
 *    @channel is an integer that define the channel number (Should be between 0 and 2 for EU868 Mhz version
 *	  @huart is a pointer on uart handdle
 * OUTPUT:
 * 	  @res is an integer use to check error
 * */
uint8_t WIOE5_ChannelSwitch(uint8_t channel,UART_HandleTypeDef *huart){
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b0a2      	sub	sp, #136	; 0x88
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	4603      	mov	r3, r0
 8002f74:	6039      	str	r1, [r7, #0]
 8002f76:	71fb      	strb	r3, [r7, #7]

	uint8_t querry[25] = "AT+CH=";
 8002f78:	4a1d      	ldr	r2, [pc, #116]	; (8002ff0 <WIOE5_ChannelSwitch+0x84>)
 8002f7a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002f7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f82:	6018      	str	r0, [r3, #0]
 8002f84:	3304      	adds	r3, #4
 8002f86:	8019      	strh	r1, [r3, #0]
 8002f88:	3302      	adds	r3, #2
 8002f8a:	0c0a      	lsrs	r2, r1, #16
 8002f8c:	701a      	strb	r2, [r3, #0]
 8002f8e:	f107 0373 	add.w	r3, r7, #115	; 0x73
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	605a      	str	r2, [r3, #4]
 8002f98:	609a      	str	r2, [r3, #8]
 8002f9a:	60da      	str	r2, [r3, #12]
 8002f9c:	821a      	strh	r2, [r3, #16]
	querry[6] =  (channel+'0');
 8002f9e:	79fb      	ldrb	r3, [r7, #7]
 8002fa0:	3330      	adds	r3, #48	; 0x30
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
	uint8_t string[100];
	strcat(querry, "\r\n");
 8002fa8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7fd f941 	bl	8000234 <strlen>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002fba:	4413      	add	r3, r2
 8002fbc:	4a0d      	ldr	r2, [pc, #52]	; (8002ff4 <WIOE5_ChannelSwitch+0x88>)
 8002fbe:	8811      	ldrh	r1, [r2, #0]
 8002fc0:	7892      	ldrb	r2, [r2, #2]
 8002fc2:	8019      	strh	r1, [r3, #0]
 8002fc4:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(huart, querry, sizeof(querry), 100);
 8002fc6:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8002fca:	2364      	movs	r3, #100	; 0x64
 8002fcc:	2219      	movs	r2, #25
 8002fce:	6838      	ldr	r0, [r7, #0]
 8002fd0:	f007 ff00 	bl	800add4 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, string, 100,1000);
 8002fd4:	f107 0108 	add.w	r1, r7, #8
 8002fd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fdc:	2264      	movs	r2, #100	; 0x64
 8002fde:	6838      	ldr	r0, [r7, #0]
 8002fe0:	f007 ff8e 	bl	800af00 <HAL_UART_Receive>

}
 8002fe4:	bf00      	nop
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3788      	adds	r7, #136	; 0x88
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	08014b88 	.word	0x08014b88
 8002ff4:	08014b84 	.word	0x08014b84

08002ff8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8002ffc:	b662      	cpsie	i
}
 8002ffe:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003000:	f001 f847 	bl	8004092 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003004:	f000 f838 	bl	8003078 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003008:	f7ff fa86 	bl	8002518 <MX_GPIO_Init>
  MX_DMA_Init();
 800300c:	f7ff fa5a 	bl	80024c4 <MX_DMA_Init>
  MX_I2C2_Init();
 8003010:	f7ff fafe 	bl	8002610 <MX_I2C2_Init>
  MX_TIM2_Init();
 8003014:	f000 fcee 	bl	80039f4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003018:	f000 fd44 	bl	8003aa4 <MX_TIM3_Init>
  MX_TIM4_Init();
 800301c:	f000 fd9c 	bl	8003b58 <MX_TIM4_Init>
  MX_UART4_Init();
 8003020:	f000 feb2 	bl	8003d88 <MX_UART4_Init>
  MX_UART5_Init();
 8003024:	f000 fefc 	bl	8003e20 <MX_UART5_Init>
  MX_ADC2_Init();
 8003028:	f7fd ff46 	bl	8000eb8 <MX_ADC2_Init>
  MX_USB_Device_Init();
 800302c:	f00f ffd6 	bl	8012fdc <MX_USB_Device_Init>
  MX_SPI1_Init();
 8003030:	f000 fb5a 	bl	80036e8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  /*Timer start flaps and throttle + buzzer*/
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003034:	2100      	movs	r1, #0
 8003036:	480c      	ldr	r0, [pc, #48]	; (8003068 <main+0x70>)
 8003038:	f006 fdda 	bl	8009bf0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800303c:	2100      	movs	r1, #0
 800303e:	480b      	ldr	r0, [pc, #44]	; (800306c <main+0x74>)
 8003040:	f006 fdd6 	bl	8009bf0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8003044:	2104      	movs	r1, #4
 8003046:	4809      	ldr	r0, [pc, #36]	; (800306c <main+0x74>)
 8003048:	f006 fdd2 	bl	8009bf0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800304c:	210c      	movs	r1, #12
 800304e:	4807      	ldr	r0, [pc, #28]	; (800306c <main+0x74>)
 8003050:	f006 fdce 	bl	8009bf0 <HAL_TIM_PWM_Start>

  /*Start ADC conversion with DMA request*/
  HAL_ADC_Start_DMA(&hadc2, &BatteryMonitoringData, CONVERSION_COUNT);
 8003054:	2203      	movs	r2, #3
 8003056:	4906      	ldr	r1, [pc, #24]	; (8003070 <main+0x78>)
 8003058:	4806      	ldr	r0, [pc, #24]	; (8003074 <main+0x7c>)
 800305a:	f001 fc57 	bl	800490c <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800305e:	f7fe f95d 	bl	800131c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003062:	f00d feba 	bl	8010dda <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003066:	e7fe      	b.n	8003066 <main+0x6e>
 8003068:	200009dc 	.word	0x200009dc
 800306c:	20000a28 	.word	0x20000a28
 8003070:	200008d8 	.word	0x200008d8
 8003074:	2000020c 	.word	0x2000020c

08003078 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b094      	sub	sp, #80	; 0x50
 800307c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800307e:	f107 0318 	add.w	r3, r7, #24
 8003082:	2238      	movs	r2, #56	; 0x38
 8003084:	2100      	movs	r1, #0
 8003086:	4618      	mov	r0, r3
 8003088:	f010 fcac 	bl	80139e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800308c:	1d3b      	adds	r3, r7, #4
 800308e:	2200      	movs	r2, #0
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	605a      	str	r2, [r3, #4]
 8003094:	609a      	str	r2, [r3, #8]
 8003096:	60da      	str	r2, [r3, #12]
 8003098:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800309a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800309e:	f005 fb73 	bl	8008788 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80030a2:	2322      	movs	r3, #34	; 0x22
 80030a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030aa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80030ac:	2340      	movs	r3, #64	; 0x40
 80030ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80030b0:	2301      	movs	r3, #1
 80030b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030b4:	2302      	movs	r3, #2
 80030b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80030b8:	2302      	movs	r3, #2
 80030ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80030bc:	2304      	movs	r3, #4
 80030be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 80030c0:	234b      	movs	r3, #75	; 0x4b
 80030c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80030c4:	2302      	movs	r3, #2
 80030c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80030c8:	2302      	movs	r3, #2
 80030ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80030cc:	2302      	movs	r3, #2
 80030ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030d0:	f107 0318 	add.w	r3, r7, #24
 80030d4:	4618      	mov	r0, r3
 80030d6:	f005 fbfb 	bl	80088d0 <HAL_RCC_OscConfig>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80030e0:	f000 f82a 	bl	8003138 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030e4:	230f      	movs	r3, #15
 80030e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030e8:	2303      	movs	r3, #3
 80030ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030ec:	2300      	movs	r3, #0
 80030ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80030f0:	2300      	movs	r3, #0
 80030f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80030f4:	2300      	movs	r3, #0
 80030f6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80030f8:	1d3b      	adds	r3, r7, #4
 80030fa:	2104      	movs	r1, #4
 80030fc:	4618      	mov	r0, r3
 80030fe:	f005 feff 	bl	8008f00 <HAL_RCC_ClockConfig>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003108:	f000 f816 	bl	8003138 <Error_Handler>
  }
}
 800310c:	bf00      	nop
 800310e:	3750      	adds	r7, #80	; 0x50
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a04      	ldr	r2, [pc, #16]	; (8003134 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d101      	bne.n	800312a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003126:	f000 ffcd 	bl	80040c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800312a:	bf00      	nop
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40012c00 	.word	0x40012c00

08003138 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800313c:	b672      	cpsid	i
}
 800313e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003140:	e7fe      	b.n	8003140 <Error_Handler+0x8>

08003142 <Pid_CalculatePitchError>:
DESCRIPTION - Basic driver for the mpu6050 accelerometer.
*******************************************************)*/
#include "main.h"

//As the gyro got the front at x axis then rotation on X mean roll / rotation on Y mean pitch and rotation on Z mean yaw
float32_t Pid_CalculatePitchError(COMMAND_t *command,BNO055_t *Accelerometer){
 8003142:	b480      	push	{r7}
 8003144:	b085      	sub	sp, #20
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
 800314a:	6039      	str	r1, [r7, #0]
	float32_t res = (Accelerometer->processed_data.euler_angles.x)-(command->pitch_angle);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	edd3 7a02 	vldr	s15, [r3, #8]
 8003158:	ee77 7a67 	vsub.f32	s15, s14, s15
 800315c:	edc7 7a03 	vstr	s15, [r7, #12]
	return res;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	ee07 3a90 	vmov	s15, r3
}
 8003166:	eeb0 0a67 	vmov.f32	s0, s15
 800316a:	3714      	adds	r7, #20
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <Pid_CalculateYawError>:

float32_t Pid_CalculateYawError(COMMAND_t *command,BNO055_t *Accelerometer){
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
	float32_t res = (Accelerometer->processed_data.euler_angles.z)-(command->yaw_angle);
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	edd3 7a03 	vldr	s15, [r3, #12]
 800318a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800318e:	edc7 7a03 	vstr	s15, [r7, #12]
	return res;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	ee07 3a90 	vmov	s15, r3
}
 8003198:	eeb0 0a67 	vmov.f32	s0, s15
 800319c:	3714      	adds	r7, #20
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <Pid_CalculateRollError>:

float32_t Pid_CalculateRollError(COMMAND_t *command,BNO055_t *Accelerometer){
 80031a6:	b480      	push	{r7}
 80031a8:	b085      	sub	sp, #20
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
 80031ae:	6039      	str	r1, [r7, #0]
	float32_t res = (Accelerometer->processed_data.euler_angles.y)-(command->roll_angle);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	edd3 7a04 	vldr	s15, [r3, #16]
 80031bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031c0:	edc7 7a03 	vstr	s15, [r7, #12]
	return res;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	ee07 3a90 	vmov	s15, r3
}
 80031ca:	eeb0 0a67 	vmov.f32	s0, s15
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <Pid_Init>:

void Pid_Init(arm_pid_instance_f32 *PID,float32_t KP,float32_t KI,float32_t KD){
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	ed87 0a02 	vstr	s0, [r7, #8]
 80031e4:	edc7 0a01 	vstr	s1, [r7, #4]
 80031e8:	ed87 1a00 	vstr	s2, [r7]

	//Set PID gain
	PID->Kp = KP;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	619a      	str	r2, [r3, #24]
	PID->Ki = KI;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	61da      	str	r2, [r3, #28]
	PID->Kd = KD;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	621a      	str	r2, [r3, #32]

	//Set the PID
	arm_pid_init_f32(PID, 1);
 80031fe:	2101      	movs	r1, #1
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f010 fbd1 	bl	80139a8 <arm_pid_init_f32>

}
 8003206:	bf00      	nop
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <Pid_CompensateYaw>:

//Function use to compensate a roatation on yaw axis --> make sure to update accelerometer before reading and compensate
void Pid_CompensateYaw(arm_pid_instance_f32 *PID,COMMAND_t *command,BNO055_t *Accelerometer,PROPULSION_t *propulsion){
 800320e:	b580      	push	{r7, lr}
 8003210:	b08a      	sub	sp, #40	; 0x28
 8003212:	af00      	add	r7, sp, #0
 8003214:	60f8      	str	r0, [r7, #12]
 8003216:	60b9      	str	r1, [r7, #8]
 8003218:	607a      	str	r2, [r7, #4]
 800321a:	603b      	str	r3, [r7, #0]
	float32_t error;
	float32_t pid_value;
	//Calculate the erro in °/s around yaw/z axis
	error = Pid_CalculateYawError(command, Accelerometer);
 800321c:	6879      	ldr	r1, [r7, #4]
 800321e:	68b8      	ldr	r0, [r7, #8]
 8003220:	f7ff ffa8 	bl	8003174 <Pid_CalculateYawError>
 8003224:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	61fb      	str	r3, [r7, #28]
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	61bb      	str	r3, [r7, #24]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	ed93 7a00 	vldr	s14, [r3]
 8003236:	edd7 7a06 	vldr	s15, [r7, #24]
 800323a:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	edd3 6a01 	vldr	s13, [r3, #4]
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	edd3 7a03 	vldr	s15, [r3, #12]
 800324a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 800324e:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	edd3 6a02 	vldr	s13, [r3, #8]
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	edd3 7a04 	vldr	s15, [r3, #16]
 800325e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003262:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800326c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003270:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Update state */
    S->state[1] = S->state[0];
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	68da      	ldr	r2, [r3, #12]
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	697a      	ldr	r2, [r7, #20]
 8003286:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8003288:	697b      	ldr	r3, [r7, #20]
	//calculate the amount of mouve needed to force back the plane
	pid_value = arm_pid_f32(PID, error);
 800328a:	623b      	str	r3, [r7, #32]

	//Ase the plane is a fixed wing we can't compensate move on yaw axis ...
	//If you have different plane make sure to create a thing to do here
}
 800328c:	bf00      	nop
 800328e:	3728      	adds	r7, #40	; 0x28
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <Pid_CompensateRoll>:

//Function use to compensate a roatation on Roll axis --> make sure to update accelerometer before reading and compensate
void Pid_CompensateRoll(arm_pid_instance_f32 *PID,COMMAND_t *command,BNO055_t *Accelerometer,PROPULSION_t *propulsion){
 8003294:	b580      	push	{r7, lr}
 8003296:	b08a      	sub	sp, #40	; 0x28
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
 80032a0:	603b      	str	r3, [r7, #0]

	float32_t error;
	float32_t pid_value;
	//Calculate the erro in °/s around yaw/z axis
	error = Pid_CalculateRollError(command, Accelerometer);
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	68b8      	ldr	r0, [r7, #8]
 80032a6:	f7ff ff7e 	bl	80031a6 <Pid_CalculateRollError>
 80032aa:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	61fb      	str	r3, [r7, #28]
 80032b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b4:	61bb      	str	r3, [r7, #24]
    out = (S->A0 * in) +
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	ed93 7a00 	vldr	s14, [r3]
 80032bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80032c0:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	edd3 6a01 	vldr	s13, [r3, #4]
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80032d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80032d4:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	edd3 6a02 	vldr	s13, [r3, #8]
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	edd3 7a04 	vldr	s15, [r3, #16]
 80032e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80032f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032f6:	edc7 7a05 	vstr	s15, [r7, #20]
    S->state[1] = S->state[0];
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	68da      	ldr	r2, [r3, #12]
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	615a      	str	r2, [r3, #20]
    return (out);
 800330e:	697b      	ldr	r3, [r7, #20]
	//calculate the amount of mouve needed to force back the plane
	pid_value = arm_pid_f32(PID, error);
 8003310:	623b      	str	r3, [r7, #32]

	/*Left flaps up and right flaps down*/


#ifndef SERVO_LEFT_REVERSED
	if((propulsion->servo_left_timer_val + pid_value)>MAX_LEFT_EXTENSION){
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	ee07 3a90 	vmov	s15, r3
 800331a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800331e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003322:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003326:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8003418 <Pid_CompensateRoll+0x184>
 800332a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800332e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003332:	dd04      	ble.n	800333e <Pid_CompensateRoll+0xaa>
		propulsion->servo_left_timer_val = MAX_LEFT_EXTENSION;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	f640 52ac 	movw	r2, #3500	; 0xdac
 800333a:	625a      	str	r2, [r3, #36]	; 0x24
 800333c:	e025      	b.n	800338a <Pid_CompensateRoll+0xf6>
	}
	else{
		if((propulsion->servo_left_timer_val + pid_value)<MIN_LEFT_EXTENSION){
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003342:	ee07 3a90 	vmov	s15, r3
 8003346:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800334a:	edd7 7a08 	vldr	s15, [r7, #32]
 800334e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003352:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800341c <Pid_CompensateRoll+0x188>
 8003356:	eef4 7ac7 	vcmpe.f32	s15, s14
 800335a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800335e:	d504      	bpl.n	800336a <Pid_CompensateRoll+0xd6>
			propulsion->servo_left_timer_val = MIN_LEFT_EXTENSION;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	f240 5214 	movw	r2, #1300	; 0x514
 8003366:	625a      	str	r2, [r3, #36]	; 0x24
 8003368:	e00f      	b.n	800338a <Pid_CompensateRoll+0xf6>
		}
		else{
			propulsion->servo_left_timer_val += pid_value;
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	ee07 3a90 	vmov	s15, r3
 8003372:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003376:	edd7 7a08 	vldr	s15, [r7, #32]
 800337a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800337e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003382:	ee17 2a90 	vmov	r2, s15
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	625a      	str	r2, [r3, #36]	; 0x24
			propulsion->servo_right_timer_val -= pid_value;
		}
	}
#endif
#ifdef SERVO_RIGHT_REVERSED
	if((propulsion->servo_right_timer_val + pid_value)>MIN_RIGHT_EXTENSION){
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338e:	ee07 3a90 	vmov	s15, r3
 8003392:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003396:	edd7 7a08 	vldr	s15, [r7, #32]
 800339a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800339e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003418 <Pid_CompensateRoll+0x184>
 80033a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033aa:	dd04      	ble.n	80033b6 <Pid_CompensateRoll+0x122>
		propulsion->servo_right_timer_val = MIN_RIGHT_EXTENSION;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	f640 52ac 	movw	r2, #3500	; 0xdac
 80033b2:	629a      	str	r2, [r3, #40]	; 0x28
 80033b4:	e025      	b.n	8003402 <Pid_CompensateRoll+0x16e>
	}
	else{
		if((propulsion->servo_right_timer_val + pid_value)<MAX_RIGHT_EXTENSION){
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ba:	ee07 3a90 	vmov	s15, r3
 80033be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033c2:	edd7 7a08 	vldr	s15, [r7, #32]
 80033c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ca:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800341c <Pid_CompensateRoll+0x188>
 80033ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d6:	d504      	bpl.n	80033e2 <Pid_CompensateRoll+0x14e>
			propulsion->servo_right_timer_val = MAX_RIGHT_EXTENSION;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	f240 5214 	movw	r2, #1300	; 0x514
 80033de:	629a      	str	r2, [r3, #40]	; 0x28
 80033e0:	e00f      	b.n	8003402 <Pid_CompensateRoll+0x16e>
		}
		else{
			propulsion->servo_right_timer_val += pid_value;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e6:	ee07 3a90 	vmov	s15, r3
 80033ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033ee:	edd7 7a08 	vldr	s15, [r7, #32]
 80033f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033fa:	ee17 2a90 	vmov	r2, s15
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	629a      	str	r2, [r3, #40]	; 0x28
			propulsion->servo_left_timer_val -= pid_value;
		}
	}
#endif

	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 8003402:	6838      	ldr	r0, [r7, #0]
 8003404:	f000 f8d2 	bl	80035ac <PropulsionAndControl_UpdateLeftFlaps>
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8003408:	6838      	ldr	r0, [r7, #0]
 800340a:	f000 f8ed 	bl	80035e8 <PropulsionAndControl_UpdateRightFlaps>

}
 800340e:	bf00      	nop
 8003410:	3728      	adds	r7, #40	; 0x28
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	455ac000 	.word	0x455ac000
 800341c:	44a28000 	.word	0x44a28000

08003420 <Pid_CompensatePitch>:
//Function use to compensate a roatation on Pitch axis --> make sure to update accelerometer before reading and compensate
void Pid_CompensatePitch(arm_pid_instance_f32 *PID,COMMAND_t *command,BNO055_t *Accelerometer,PROPULSION_t *propulsion){
 8003420:	b580      	push	{r7, lr}
 8003422:	b08a      	sub	sp, #40	; 0x28
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
 800342c:	603b      	str	r3, [r7, #0]

	float32_t error;
	float32_t pid_value;
	//Calculate the erro in °/s around yaw/z axis
	error = Pid_CalculatePitchError(command, Accelerometer);
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	68b8      	ldr	r0, [r7, #8]
 8003432:	f7ff fe86 	bl	8003142 <Pid_CalculatePitchError>
 8003436:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	61fb      	str	r3, [r7, #28]
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	61bb      	str	r3, [r7, #24]
    out = (S->A0 * in) +
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	ed93 7a00 	vldr	s14, [r3]
 8003448:	edd7 7a06 	vldr	s15, [r7, #24]
 800344c:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	edd3 6a01 	vldr	s13, [r3, #4]
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	edd3 7a03 	vldr	s15, [r3, #12]
 800345c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8003460:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	edd3 6a02 	vldr	s13, [r3, #8]
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	edd3 7a04 	vldr	s15, [r3, #16]
 8003470:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003474:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800347e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003482:	edc7 7a05 	vstr	s15, [r7, #20]
    S->state[1] = S->state[0];
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	615a      	str	r2, [r3, #20]
    return (out);
 800349a:	697b      	ldr	r3, [r7, #20]
	//calculate the amount of mouve needed to force back the plane
	pid_value = arm_pid_f32(PID, error);
 800349c:	623b      	str	r3, [r7, #32]


#ifndef SERVO_LEFT_REVERSED
	if((propulsion->servo_left_timer_val + pid_value)>MAX_LEFT_EXTENSION){
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	ee07 3a90 	vmov	s15, r3
 80034a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034aa:	edd7 7a08 	vldr	s15, [r7, #32]
 80034ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034b2:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80035a4 <Pid_CompensatePitch+0x184>
 80034b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034be:	dd04      	ble.n	80034ca <Pid_CompensatePitch+0xaa>
		propulsion->servo_left_timer_val = MAX_LEFT_EXTENSION;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	f640 52ac 	movw	r2, #3500	; 0xdac
 80034c6:	625a      	str	r2, [r3, #36]	; 0x24
 80034c8:	e025      	b.n	8003516 <Pid_CompensatePitch+0xf6>
	}
	else{
		if((propulsion->servo_left_timer_val + pid_value)<MIN_LEFT_EXTENSION){
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	ee07 3a90 	vmov	s15, r3
 80034d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034d6:	edd7 7a08 	vldr	s15, [r7, #32]
 80034da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034de:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80035a8 <Pid_CompensatePitch+0x188>
 80034e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ea:	d504      	bpl.n	80034f6 <Pid_CompensatePitch+0xd6>
			propulsion->servo_left_timer_val = MIN_LEFT_EXTENSION;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	f240 5214 	movw	r2, #1300	; 0x514
 80034f2:	625a      	str	r2, [r3, #36]	; 0x24
 80034f4:	e00f      	b.n	8003516 <Pid_CompensatePitch+0xf6>
		}
		else{
			propulsion->servo_left_timer_val += pid_value;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fa:	ee07 3a90 	vmov	s15, r3
 80034fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003502:	edd7 7a08 	vldr	s15, [r7, #32]
 8003506:	ee77 7a27 	vadd.f32	s15, s14, s15
 800350a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800350e:	ee17 2a90 	vmov	r2, s15
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	625a      	str	r2, [r3, #36]	; 0x24
			propulsion->servo_right_timer_val += pid_value;
		}
	}
#endif
#ifdef SERVO_RIGHT_REVERSED
	if((propulsion->servo_right_timer_val - pid_value)>MIN_RIGHT_EXTENSION){
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351a:	ee07 3a90 	vmov	s15, r3
 800351e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003522:	edd7 7a08 	vldr	s15, [r7, #32]
 8003526:	ee77 7a67 	vsub.f32	s15, s14, s15
 800352a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80035a4 <Pid_CompensatePitch+0x184>
 800352e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003536:	dd04      	ble.n	8003542 <Pid_CompensatePitch+0x122>
		propulsion->servo_right_timer_val = MIN_RIGHT_EXTENSION;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	f640 52ac 	movw	r2, #3500	; 0xdac
 800353e:	629a      	str	r2, [r3, #40]	; 0x28
 8003540:	e025      	b.n	800358e <Pid_CompensatePitch+0x16e>
	}
	else{
		if((propulsion->servo_right_timer_val - pid_value)<MAX_RIGHT_EXTENSION){
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003546:	ee07 3a90 	vmov	s15, r3
 800354a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800354e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003552:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003556:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80035a8 <Pid_CompensatePitch+0x188>
 800355a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800355e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003562:	d504      	bpl.n	800356e <Pid_CompensatePitch+0x14e>
			propulsion->servo_right_timer_val = MAX_RIGHT_EXTENSION;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	f240 5214 	movw	r2, #1300	; 0x514
 800356a:	629a      	str	r2, [r3, #40]	; 0x28
 800356c:	e00f      	b.n	800358e <Pid_CompensatePitch+0x16e>
		}
		else{
			propulsion->servo_right_timer_val -= pid_value;
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003572:	ee07 3a90 	vmov	s15, r3
 8003576:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800357a:	edd7 7a08 	vldr	s15, [r7, #32]
 800357e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003582:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003586:	ee17 2a90 	vmov	r2, s15
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	629a      	str	r2, [r3, #40]	; 0x28
		}
	}
#endif


	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 800358e:	6838      	ldr	r0, [r7, #0]
 8003590:	f000 f80c 	bl	80035ac <PropulsionAndControl_UpdateLeftFlaps>
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8003594:	6838      	ldr	r0, [r7, #0]
 8003596:	f000 f827 	bl	80035e8 <PropulsionAndControl_UpdateRightFlaps>

}
 800359a:	bf00      	nop
 800359c:	3728      	adds	r7, #40	; 0x28
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	455ac000 	.word	0x455ac000
 80035a8:	44a28000 	.word	0x44a28000

080035ac <PropulsionAndControl_UpdateLeftFlaps>:
void PropulsionAndControl_UpdateESC(PROPULSION_t *propulsion){
	uint32_t * timer_base_addr_ptr = &(propulsion->timer->Instance->CCR1);
	*(timer_base_addr_ptr + ((propulsion->esc_timer_channel-1))) = propulsion->esc_timer_val;
	propulsion->update_timer = 0x01;
}
void PropulsionAndControl_UpdateLeftFlaps(PROPULSION_t *propulsion){
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
	uint32_t * timer_base_addr_ptr = &(propulsion->timer->Instance->CCR1);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	3334      	adds	r3, #52	; 0x34
 80035bc:	60fb      	str	r3, [r7, #12]
	*(timer_base_addr_ptr + ((propulsion->servo_left_timer_channel-1))) = propulsion->servo_left_timer_val;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	7f5b      	ldrb	r3, [r3, #29]
 80035c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80035c6:	3b01      	subs	r3, #1
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	4413      	add	r3, r2
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035d2:	601a      	str	r2, [r3, #0]
	propulsion->update_timer = 0x01;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 80035dc:	bf00      	nop
 80035de:	3714      	adds	r7, #20
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <PropulsionAndControl_UpdateRightFlaps>:
void PropulsionAndControl_UpdateRightFlaps(PROPULSION_t *propulsion){
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
	uint32_t * timer_base_addr_ptr = &(propulsion->timer->Instance->CCR1);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	3334      	adds	r3, #52	; 0x34
 80035f8:	60fb      	str	r3, [r7, #12]
	*(timer_base_addr_ptr + ((propulsion->servo_right_timer_channel-1))) = propulsion->servo_right_timer_val;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	7f9b      	ldrb	r3, [r3, #30]
 80035fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003602:	3b01      	subs	r3, #1
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	4413      	add	r3, r2
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800360e:	601a      	str	r2, [r3, #0]
	propulsion->update_timer = 0x01;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8003618:	bf00      	nop
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <PropulsionAndControl_Init>:

void PropulsionAndControl_Init(PROPULSION_t *propulsion,uint32_t esc_pin,GPIO_TypeDef *esc_port,uint32_t servo_left_pin,GPIO_TypeDef *servo_left_port,uint32_t servo_right_pin,GPIO_TypeDef *servo_right_port,uint32_t esc_channel,uint32_t servo_left_channel,uint32_t servo_right_channel,TIM_HandleTypeDef *timer_entity){
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
 8003630:	603b      	str	r3, [r7, #0]

	//Store all pins into the struct
	propulsion->esc_pin = esc_pin;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	68ba      	ldr	r2, [r7, #8]
 8003636:	611a      	str	r2, [r3, #16]
	propulsion->esc_port = esc_port;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	615a      	str	r2, [r3, #20]
	propulsion->esc_timer_channel = esc_channel;
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	b2da      	uxtb	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	771a      	strb	r2, [r3, #28]

	propulsion->servo_left_pin = servo_left_pin;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	601a      	str	r2, [r3, #0]
	propulsion->servo_left_port = servo_left_port;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	605a      	str	r2, [r3, #4]
	propulsion->servo_left_timer_channel = servo_left_channel;
 8003652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003654:	b2da      	uxtb	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	775a      	strb	r2, [r3, #29]

	propulsion->servo_right_pin = servo_right_pin;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	69fa      	ldr	r2, [r7, #28]
 800365e:	609a      	str	r2, [r3, #8]
	propulsion->servo_right_port = servo_right_port;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6a3a      	ldr	r2, [r7, #32]
 8003664:	60da      	str	r2, [r3, #12]
	propulsion->servo_right_timer_channel = servo_right_channel;
 8003666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003668:	b2da      	uxtb	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	779a      	strb	r2, [r3, #30]

	propulsion->timer = timer_entity;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003672:	619a      	str	r2, [r3, #24]

	//put the flaps at minimum
	HAL_Delay(20);
 8003674:	2014      	movs	r0, #20
 8003676:	f000 fd43 	bl	8004100 <HAL_Delay>
	propulsion->servo_left_timer_val = MIN_LEFT_EXTENSION;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f240 5214 	movw	r2, #1300	; 0x514
 8003680:	625a      	str	r2, [r3, #36]	; 0x24
	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f7ff ff92 	bl	80035ac <PropulsionAndControl_UpdateLeftFlaps>

	//put the flaps at minimum
	propulsion->servo_right_timer_val = MIN_RIGHT_EXTENSION;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f640 52ac 	movw	r2, #3500	; 0xdac
 800368e:	629a      	str	r2, [r3, #40]	; 0x28
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f7ff ffa9 	bl	80035e8 <PropulsionAndControl_UpdateRightFlaps>

	//put the flaps at maximum
	HAL_Delay(1500);
 8003696:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800369a:	f000 fd31 	bl	8004100 <HAL_Delay>
	propulsion->servo_left_timer_val = MAX_LEFT_EXTENSION;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f640 52ac 	movw	r2, #3500	; 0xdac
 80036a4:	625a      	str	r2, [r3, #36]	; 0x24
	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f7ff ff80 	bl	80035ac <PropulsionAndControl_UpdateLeftFlaps>

	//put the flaps at maximum
	propulsion->servo_right_timer_val = MAX_RIGHT_EXTENSION;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f240 5214 	movw	r2, #1300	; 0x514
 80036b2:	629a      	str	r2, [r3, #40]	; 0x28
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f7ff ff97 	bl	80035e8 <PropulsionAndControl_UpdateRightFlaps>

	HAL_Delay(1500);
 80036ba:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80036be:	f000 fd1f 	bl	8004100 <HAL_Delay>
	propulsion->servo_left_timer_val = (MAX_LEFT_EXTENSION+MIN_LEFT_EXTENSION)/2;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f44f 6216 	mov.w	r2, #2400	; 0x960
 80036c8:	625a      	str	r2, [r3, #36]	; 0x24
	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f7ff ff6e 	bl	80035ac <PropulsionAndControl_UpdateLeftFlaps>

	//put the flaps at minimum
	propulsion->servo_right_timer_val = (MAX_RIGHT_EXTENSION+MIN_RIGHT_EXTENSION)/2;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f44f 6216 	mov.w	r2, #2400	; 0x960
 80036d6:	629a      	str	r2, [r3, #40]	; 0x28
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f7ff ff85 	bl	80035e8 <PropulsionAndControl_UpdateRightFlaps>
}
 80036de:	bf00      	nop
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
	...

080036e8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80036ec:	4b1b      	ldr	r3, [pc, #108]	; (800375c <MX_SPI1_Init+0x74>)
 80036ee:	4a1c      	ldr	r2, [pc, #112]	; (8003760 <MX_SPI1_Init+0x78>)
 80036f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80036f2:	4b1a      	ldr	r3, [pc, #104]	; (800375c <MX_SPI1_Init+0x74>)
 80036f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80036f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80036fa:	4b18      	ldr	r3, [pc, #96]	; (800375c <MX_SPI1_Init+0x74>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003700:	4b16      	ldr	r3, [pc, #88]	; (800375c <MX_SPI1_Init+0x74>)
 8003702:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003706:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003708:	4b14      	ldr	r3, [pc, #80]	; (800375c <MX_SPI1_Init+0x74>)
 800370a:	2200      	movs	r2, #0
 800370c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800370e:	4b13      	ldr	r3, [pc, #76]	; (800375c <MX_SPI1_Init+0x74>)
 8003710:	2201      	movs	r2, #1
 8003712:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003714:	4b11      	ldr	r3, [pc, #68]	; (800375c <MX_SPI1_Init+0x74>)
 8003716:	f44f 7200 	mov.w	r2, #512	; 0x200
 800371a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800371c:	4b0f      	ldr	r3, [pc, #60]	; (800375c <MX_SPI1_Init+0x74>)
 800371e:	2228      	movs	r2, #40	; 0x28
 8003720:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003722:	4b0e      	ldr	r3, [pc, #56]	; (800375c <MX_SPI1_Init+0x74>)
 8003724:	2200      	movs	r2, #0
 8003726:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003728:	4b0c      	ldr	r3, [pc, #48]	; (800375c <MX_SPI1_Init+0x74>)
 800372a:	2200      	movs	r2, #0
 800372c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800372e:	4b0b      	ldr	r3, [pc, #44]	; (800375c <MX_SPI1_Init+0x74>)
 8003730:	2200      	movs	r2, #0
 8003732:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003734:	4b09      	ldr	r3, [pc, #36]	; (800375c <MX_SPI1_Init+0x74>)
 8003736:	2207      	movs	r2, #7
 8003738:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800373a:	4b08      	ldr	r3, [pc, #32]	; (800375c <MX_SPI1_Init+0x74>)
 800373c:	2200      	movs	r2, #0
 800373e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003740:	4b06      	ldr	r3, [pc, #24]	; (800375c <MX_SPI1_Init+0x74>)
 8003742:	2200      	movs	r2, #0
 8003744:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003746:	4805      	ldr	r0, [pc, #20]	; (800375c <MX_SPI1_Init+0x74>)
 8003748:	f006 f876 	bl	8009838 <HAL_SPI_Init>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003752:	f7ff fcf1 	bl	8003138 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003756:	bf00      	nop
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	200008e0 	.word	0x200008e0
 8003760:	40013000 	.word	0x40013000

08003764 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b08a      	sub	sp, #40	; 0x28
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800376c:	f107 0314 	add.w	r3, r7, #20
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	605a      	str	r2, [r3, #4]
 8003776:	609a      	str	r2, [r3, #8]
 8003778:	60da      	str	r2, [r3, #12]
 800377a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a17      	ldr	r2, [pc, #92]	; (80037e0 <HAL_SPI_MspInit+0x7c>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d128      	bne.n	80037d8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003786:	4b17      	ldr	r3, [pc, #92]	; (80037e4 <HAL_SPI_MspInit+0x80>)
 8003788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800378a:	4a16      	ldr	r2, [pc, #88]	; (80037e4 <HAL_SPI_MspInit+0x80>)
 800378c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003790:	6613      	str	r3, [r2, #96]	; 0x60
 8003792:	4b14      	ldr	r3, [pc, #80]	; (80037e4 <HAL_SPI_MspInit+0x80>)
 8003794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003796:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800379a:	613b      	str	r3, [r7, #16]
 800379c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800379e:	4b11      	ldr	r3, [pc, #68]	; (80037e4 <HAL_SPI_MspInit+0x80>)
 80037a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037a2:	4a10      	ldr	r2, [pc, #64]	; (80037e4 <HAL_SPI_MspInit+0x80>)
 80037a4:	f043 0301 	orr.w	r3, r3, #1
 80037a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037aa:	4b0e      	ldr	r3, [pc, #56]	; (80037e4 <HAL_SPI_MspInit+0x80>)
 80037ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80037b6:	23e0      	movs	r3, #224	; 0xe0
 80037b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ba:	2302      	movs	r3, #2
 80037bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037be:	2300      	movs	r3, #0
 80037c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c2:	2300      	movs	r3, #0
 80037c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80037c6:	2305      	movs	r3, #5
 80037c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037ca:	f107 0314 	add.w	r3, r7, #20
 80037ce:	4619      	mov	r1, r3
 80037d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037d4:	f002 fad4 	bl	8005d80 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80037d8:	bf00      	nop
 80037da:	3728      	adds	r7, #40	; 0x28
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40013000 	.word	0x40013000
 80037e4:	40021000 	.word	0x40021000

080037e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ee:	4b11      	ldr	r3, [pc, #68]	; (8003834 <HAL_MspInit+0x4c>)
 80037f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037f2:	4a10      	ldr	r2, [pc, #64]	; (8003834 <HAL_MspInit+0x4c>)
 80037f4:	f043 0301 	orr.w	r3, r3, #1
 80037f8:	6613      	str	r3, [r2, #96]	; 0x60
 80037fa:	4b0e      	ldr	r3, [pc, #56]	; (8003834 <HAL_MspInit+0x4c>)
 80037fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	607b      	str	r3, [r7, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003806:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <HAL_MspInit+0x4c>)
 8003808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380a:	4a0a      	ldr	r2, [pc, #40]	; (8003834 <HAL_MspInit+0x4c>)
 800380c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003810:	6593      	str	r3, [r2, #88]	; 0x58
 8003812:	4b08      	ldr	r3, [pc, #32]	; (8003834 <HAL_MspInit+0x4c>)
 8003814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800381a:	603b      	str	r3, [r7, #0]
 800381c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800381e:	2200      	movs	r2, #0
 8003820:	210f      	movs	r1, #15
 8003822:	f06f 0001 	mvn.w	r0, #1
 8003826:	f001 ff51 	bl	80056cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800382a:	bf00      	nop
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	40021000 	.word	0x40021000

08003838 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08c      	sub	sp, #48	; 0x30
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003840:	2300      	movs	r3, #0
 8003842:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8003844:	2300      	movs	r3, #0
 8003846:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003848:	4b2c      	ldr	r3, [pc, #176]	; (80038fc <HAL_InitTick+0xc4>)
 800384a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800384c:	4a2b      	ldr	r2, [pc, #172]	; (80038fc <HAL_InitTick+0xc4>)
 800384e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003852:	6613      	str	r3, [r2, #96]	; 0x60
 8003854:	4b29      	ldr	r3, [pc, #164]	; (80038fc <HAL_InitTick+0xc4>)
 8003856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003858:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800385c:	60bb      	str	r3, [r7, #8]
 800385e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003860:	f107 020c 	add.w	r2, r7, #12
 8003864:	f107 0310 	add.w	r3, r7, #16
 8003868:	4611      	mov	r1, r2
 800386a:	4618      	mov	r0, r3
 800386c:	f005 fd1e 	bl	80092ac <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003870:	f005 fd06 	bl	8009280 <HAL_RCC_GetPCLK2Freq>
 8003874:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003878:	4a21      	ldr	r2, [pc, #132]	; (8003900 <HAL_InitTick+0xc8>)
 800387a:	fba2 2303 	umull	r2, r3, r2, r3
 800387e:	0c9b      	lsrs	r3, r3, #18
 8003880:	3b01      	subs	r3, #1
 8003882:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003884:	4b1f      	ldr	r3, [pc, #124]	; (8003904 <HAL_InitTick+0xcc>)
 8003886:	4a20      	ldr	r2, [pc, #128]	; (8003908 <HAL_InitTick+0xd0>)
 8003888:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800388a:	4b1e      	ldr	r3, [pc, #120]	; (8003904 <HAL_InitTick+0xcc>)
 800388c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003890:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003892:	4a1c      	ldr	r2, [pc, #112]	; (8003904 <HAL_InitTick+0xcc>)
 8003894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003896:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003898:	4b1a      	ldr	r3, [pc, #104]	; (8003904 <HAL_InitTick+0xcc>)
 800389a:	2200      	movs	r2, #0
 800389c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800389e:	4b19      	ldr	r3, [pc, #100]	; (8003904 <HAL_InitTick+0xcc>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 80038a4:	4817      	ldr	r0, [pc, #92]	; (8003904 <HAL_InitTick+0xcc>)
 80038a6:	f006 f872 	bl	800998e <HAL_TIM_Base_Init>
 80038aa:	4603      	mov	r3, r0
 80038ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80038b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d11b      	bne.n	80038f0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80038b8:	4812      	ldr	r0, [pc, #72]	; (8003904 <HAL_InitTick+0xcc>)
 80038ba:	f006 f8c9 	bl	8009a50 <HAL_TIM_Base_Start_IT>
 80038be:	4603      	mov	r3, r0
 80038c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80038c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d111      	bne.n	80038f0 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80038cc:	2019      	movs	r0, #25
 80038ce:	f001 ff17 	bl	8005700 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b0f      	cmp	r3, #15
 80038d6:	d808      	bhi.n	80038ea <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80038d8:	2200      	movs	r2, #0
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	2019      	movs	r0, #25
 80038de:	f001 fef5 	bl	80056cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80038e2:	4a0a      	ldr	r2, [pc, #40]	; (800390c <HAL_InitTick+0xd4>)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6013      	str	r3, [r2, #0]
 80038e8:	e002      	b.n	80038f0 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80038f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3730      	adds	r7, #48	; 0x30
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40021000 	.word	0x40021000
 8003900:	431bde83 	.word	0x431bde83
 8003904:	20000944 	.word	0x20000944
 8003908:	40012c00 	.word	0x40012c00
 800390c:	20000008 	.word	0x20000008

08003910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003914:	e7fe      	b.n	8003914 <NMI_Handler+0x4>

08003916 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003916:	b480      	push	{r7}
 8003918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800391a:	e7fe      	b.n	800391a <HardFault_Handler+0x4>

0800391c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003920:	e7fe      	b.n	8003920 <MemManage_Handler+0x4>

08003922 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003922:	b480      	push	{r7}
 8003924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003926:	e7fe      	b.n	8003926 <BusFault_Handler+0x4>

08003928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800392c:	e7fe      	b.n	800392c <UsageFault_Handler+0x4>

0800392e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800392e:	b480      	push	{r7}
 8003930:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003932:	bf00      	nop
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003940:	4802      	ldr	r0, [pc, #8]	; (800394c <DMA1_Channel1_IRQHandler+0x10>)
 8003942:	f002 f8ce 	bl	8005ae2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003946:	bf00      	nop
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	20000278 	.word	0x20000278

08003950 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003954:	4802      	ldr	r0, [pc, #8]	; (8003960 <USB_LP_IRQHandler+0x10>)
 8003956:	f003 faeb 	bl	8006f30 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800395a:	bf00      	nop
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	200051c0 	.word	0x200051c0

08003964 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003968:	4802      	ldr	r0, [pc, #8]	; (8003974 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800396a:	f006 fa53 	bl	8009e14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800396e:	bf00      	nop
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	20000944 	.word	0x20000944

08003978 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_IT_Pin);
 800397c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003980:	f002 fbb2 	bl	80060e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  BNO055_ClearIntFlag(&hi2c2);
 8003984:	4805      	ldr	r0, [pc, #20]	; (800399c <EXTI15_10_IRQHandler+0x24>)
 8003986:	f7fe fa2e 	bl	8001de6 <BNO055_ClearIntFlag>
  xSemaphoreGiveFromISR(HG_PROTECTION_SEMHandle,1);
 800398a:	4b05      	ldr	r3, [pc, #20]	; (80039a0 <EXTI15_10_IRQHandler+0x28>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2101      	movs	r1, #1
 8003990:	4618      	mov	r0, r3
 8003992:	f00d fd0b 	bl	80113ac <xQueueGiveFromISR>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003996:	bf00      	nop
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	20000374 	.word	0x20000374
 80039a0:	20000370 	.word	0x20000370

080039a4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80039a8:	4805      	ldr	r0, [pc, #20]	; (80039c0 <UART4_IRQHandler+0x1c>)
 80039aa:	f007 fbd3 	bl	800b154 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  xSemaphoreGiveFromISR(GPS_UART_SemaphoreHandle,pdFALSE);
 80039ae:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <UART4_IRQHandler+0x20>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2100      	movs	r1, #0
 80039b4:	4618      	mov	r0, r3
 80039b6:	f00d fcf9 	bl	80113ac <xQueueGiveFromISR>

  /* USER CODE END UART4_IRQn 1 */
}
 80039ba:	bf00      	nop
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	20000a74 	.word	0x20000a74
 80039c4:	2000036c 	.word	0x2000036c

080039c8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80039cc:	4b08      	ldr	r3, [pc, #32]	; (80039f0 <SystemInit+0x28>)
 80039ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d2:	4a07      	ldr	r2, [pc, #28]	; (80039f0 <SystemInit+0x28>)
 80039d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80039d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 80039dc:	4b04      	ldr	r3, [pc, #16]	; (80039f0 <SystemInit+0x28>)
 80039de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80039e2:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039e4:	bf00      	nop
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	e000ed00 	.word	0xe000ed00

080039f4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b08a      	sub	sp, #40	; 0x28
 80039f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039fa:	f107 031c 	add.w	r3, r7, #28
 80039fe:	2200      	movs	r2, #0
 8003a00:	601a      	str	r2, [r3, #0]
 8003a02:	605a      	str	r2, [r3, #4]
 8003a04:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a06:	463b      	mov	r3, r7
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]
 8003a0c:	605a      	str	r2, [r3, #4]
 8003a0e:	609a      	str	r2, [r3, #8]
 8003a10:	60da      	str	r2, [r3, #12]
 8003a12:	611a      	str	r2, [r3, #16]
 8003a14:	615a      	str	r2, [r3, #20]
 8003a16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003a18:	4b20      	ldr	r3, [pc, #128]	; (8003a9c <MX_TIM2_Init+0xa8>)
 8003a1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003a1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003a20:	4b1e      	ldr	r3, [pc, #120]	; (8003a9c <MX_TIM2_Init+0xa8>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a26:	4b1d      	ldr	r3, [pc, #116]	; (8003a9c <MX_TIM2_Init+0xa8>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1440000;
 8003a2c:	4b1b      	ldr	r3, [pc, #108]	; (8003a9c <MX_TIM2_Init+0xa8>)
 8003a2e:	4a1c      	ldr	r2, [pc, #112]	; (8003aa0 <MX_TIM2_Init+0xac>)
 8003a30:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a32:	4b1a      	ldr	r3, [pc, #104]	; (8003a9c <MX_TIM2_Init+0xa8>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a38:	4b18      	ldr	r3, [pc, #96]	; (8003a9c <MX_TIM2_Init+0xa8>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003a3e:	4817      	ldr	r0, [pc, #92]	; (8003a9c <MX_TIM2_Init+0xa8>)
 8003a40:	f006 f87e 	bl	8009b40 <HAL_TIM_PWM_Init>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8003a4a:	f7ff fb75 	bl	8003138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a52:	2300      	movs	r3, #0
 8003a54:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003a56:	f107 031c 	add.w	r3, r7, #28
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	480f      	ldr	r0, [pc, #60]	; (8003a9c <MX_TIM2_Init+0xa8>)
 8003a5e:	f007 f88d 	bl	800ab7c <HAL_TIMEx_MasterConfigSynchronization>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8003a68:	f7ff fb66 	bl	8003138 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a6c:	2360      	movs	r3, #96	; 0x60
 8003a6e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003a70:	2300      	movs	r3, #0
 8003a72:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a74:	2300      	movs	r3, #0
 8003a76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003a7c:	463b      	mov	r3, r7
 8003a7e:	2208      	movs	r2, #8
 8003a80:	4619      	mov	r1, r3
 8003a82:	4806      	ldr	r0, [pc, #24]	; (8003a9c <MX_TIM2_Init+0xa8>)
 8003a84:	f006 fb46 	bl	800a114 <HAL_TIM_PWM_ConfigChannel>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8003a8e:	f7ff fb53 	bl	8003138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003a92:	bf00      	nop
 8003a94:	3728      	adds	r7, #40	; 0x28
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	20000990 	.word	0x20000990
 8003aa0:	0015f900 	.word	0x0015f900

08003aa4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b08a      	sub	sp, #40	; 0x28
 8003aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003aaa:	f107 031c 	add.w	r3, r7, #28
 8003aae:	2200      	movs	r2, #0
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	605a      	str	r2, [r3, #4]
 8003ab4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ab6:	463b      	mov	r3, r7
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	605a      	str	r2, [r3, #4]
 8003abe:	609a      	str	r2, [r3, #8]
 8003ac0:	60da      	str	r2, [r3, #12]
 8003ac2:	611a      	str	r2, [r3, #16]
 8003ac4:	615a      	str	r2, [r3, #20]
 8003ac6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003ac8:	4b21      	ldr	r3, [pc, #132]	; (8003b50 <MX_TIM3_Init+0xac>)
 8003aca:	4a22      	ldr	r2, [pc, #136]	; (8003b54 <MX_TIM3_Init+0xb0>)
 8003acc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 50;
 8003ace:	4b20      	ldr	r3, [pc, #128]	; (8003b50 <MX_TIM3_Init+0xac>)
 8003ad0:	2232      	movs	r2, #50	; 0x32
 8003ad2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ad4:	4b1e      	ldr	r3, [pc, #120]	; (8003b50 <MX_TIM3_Init+0xac>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7200;
 8003ada:	4b1d      	ldr	r3, [pc, #116]	; (8003b50 <MX_TIM3_Init+0xac>)
 8003adc:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8003ae0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ae2:	4b1b      	ldr	r3, [pc, #108]	; (8003b50 <MX_TIM3_Init+0xac>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ae8:	4b19      	ldr	r3, [pc, #100]	; (8003b50 <MX_TIM3_Init+0xac>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003aee:	4818      	ldr	r0, [pc, #96]	; (8003b50 <MX_TIM3_Init+0xac>)
 8003af0:	f006 f826 	bl	8009b40 <HAL_TIM_PWM_Init>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8003afa:	f7ff fb1d 	bl	8003138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003afe:	2300      	movs	r3, #0
 8003b00:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b02:	2300      	movs	r3, #0
 8003b04:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003b06:	f107 031c 	add.w	r3, r7, #28
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	4810      	ldr	r0, [pc, #64]	; (8003b50 <MX_TIM3_Init+0xac>)
 8003b0e:	f007 f835 	bl	800ab7c <HAL_TIMEx_MasterConfigSynchronization>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8003b18:	f7ff fb0e 	bl	8003138 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b1c:	2360      	movs	r3, #96	; 0x60
 8003b1e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003b20:	2300      	movs	r3, #0
 8003b22:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b24:	2300      	movs	r3, #0
 8003b26:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b2c:	463b      	mov	r3, r7
 8003b2e:	2200      	movs	r2, #0
 8003b30:	4619      	mov	r1, r3
 8003b32:	4807      	ldr	r0, [pc, #28]	; (8003b50 <MX_TIM3_Init+0xac>)
 8003b34:	f006 faee 	bl	800a114 <HAL_TIM_PWM_ConfigChannel>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8003b3e:	f7ff fafb 	bl	8003138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003b42:	4803      	ldr	r0, [pc, #12]	; (8003b50 <MX_TIM3_Init+0xac>)
 8003b44:	f000 f8c2 	bl	8003ccc <HAL_TIM_MspPostInit>

}
 8003b48:	bf00      	nop
 8003b4a:	3728      	adds	r7, #40	; 0x28
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	200009dc 	.word	0x200009dc
 8003b54:	40000400 	.word	0x40000400

08003b58 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b08a      	sub	sp, #40	; 0x28
 8003b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b5e:	f107 031c 	add.w	r3, r7, #28
 8003b62:	2200      	movs	r2, #0
 8003b64:	601a      	str	r2, [r3, #0]
 8003b66:	605a      	str	r2, [r3, #4]
 8003b68:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b6a:	463b      	mov	r3, r7
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	605a      	str	r2, [r3, #4]
 8003b72:	609a      	str	r2, [r3, #8]
 8003b74:	60da      	str	r2, [r3, #12]
 8003b76:	611a      	str	r2, [r3, #16]
 8003b78:	615a      	str	r2, [r3, #20]
 8003b7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003b7c:	4b2e      	ldr	r3, [pc, #184]	; (8003c38 <MX_TIM4_Init+0xe0>)
 8003b7e:	4a2f      	ldr	r2, [pc, #188]	; (8003c3c <MX_TIM4_Init+0xe4>)
 8003b80:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 50;
 8003b82:	4b2d      	ldr	r3, [pc, #180]	; (8003c38 <MX_TIM4_Init+0xe0>)
 8003b84:	2232      	movs	r2, #50	; 0x32
 8003b86:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b88:	4b2b      	ldr	r3, [pc, #172]	; (8003c38 <MX_TIM4_Init+0xe0>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000;
 8003b8e:	4b2a      	ldr	r3, [pc, #168]	; (8003c38 <MX_TIM4_Init+0xe0>)
 8003b90:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003b94:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b96:	4b28      	ldr	r3, [pc, #160]	; (8003c38 <MX_TIM4_Init+0xe0>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b9c:	4b26      	ldr	r3, [pc, #152]	; (8003c38 <MX_TIM4_Init+0xe0>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003ba2:	4825      	ldr	r0, [pc, #148]	; (8003c38 <MX_TIM4_Init+0xe0>)
 8003ba4:	f005 ffcc 	bl	8009b40 <HAL_TIM_PWM_Init>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8003bae:	f7ff fac3 	bl	8003138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003bba:	f107 031c 	add.w	r3, r7, #28
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	481d      	ldr	r0, [pc, #116]	; (8003c38 <MX_TIM4_Init+0xe0>)
 8003bc2:	f006 ffdb 	bl	800ab7c <HAL_TIMEx_MasterConfigSynchronization>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8003bcc:	f7ff fab4 	bl	8003138 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003bd0:	2360      	movs	r3, #96	; 0x60
 8003bd2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2880;
 8003bd4:	f44f 6334 	mov.w	r3, #2880	; 0xb40
 8003bd8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003bde:	2300      	movs	r3, #0
 8003be0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003be2:	463b      	mov	r3, r7
 8003be4:	2200      	movs	r2, #0
 8003be6:	4619      	mov	r1, r3
 8003be8:	4813      	ldr	r0, [pc, #76]	; (8003c38 <MX_TIM4_Init+0xe0>)
 8003bea:	f006 fa93 	bl	800a114 <HAL_TIM_PWM_ConfigChannel>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8003bf4:	f7ff faa0 	bl	8003138 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003bf8:	463b      	mov	r3, r7
 8003bfa:	2204      	movs	r2, #4
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	480e      	ldr	r0, [pc, #56]	; (8003c38 <MX_TIM4_Init+0xe0>)
 8003c00:	f006 fa88 	bl	800a114 <HAL_TIM_PWM_ConfigChannel>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8003c0a:	f7ff fa95 	bl	8003138 <Error_Handler>
  }
  sConfigOC.Pulse = 6000;
 8003c0e:	f241 7370 	movw	r3, #6000	; 0x1770
 8003c12:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003c14:	463b      	mov	r3, r7
 8003c16:	220c      	movs	r2, #12
 8003c18:	4619      	mov	r1, r3
 8003c1a:	4807      	ldr	r0, [pc, #28]	; (8003c38 <MX_TIM4_Init+0xe0>)
 8003c1c:	f006 fa7a 	bl	800a114 <HAL_TIM_PWM_ConfigChannel>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8003c26:	f7ff fa87 	bl	8003138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003c2a:	4803      	ldr	r0, [pc, #12]	; (8003c38 <MX_TIM4_Init+0xe0>)
 8003c2c:	f000 f84e 	bl	8003ccc <HAL_TIM_MspPostInit>

}
 8003c30:	bf00      	nop
 8003c32:	3728      	adds	r7, #40	; 0x28
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	20000a28 	.word	0x20000a28
 8003c3c:	40000800 	.word	0x40000800

08003c40 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b087      	sub	sp, #28
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c50:	d10c      	bne.n	8003c6c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c52:	4b1b      	ldr	r3, [pc, #108]	; (8003cc0 <HAL_TIM_PWM_MspInit+0x80>)
 8003c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c56:	4a1a      	ldr	r2, [pc, #104]	; (8003cc0 <HAL_TIM_PWM_MspInit+0x80>)
 8003c58:	f043 0301 	orr.w	r3, r3, #1
 8003c5c:	6593      	str	r3, [r2, #88]	; 0x58
 8003c5e:	4b18      	ldr	r3, [pc, #96]	; (8003cc0 <HAL_TIM_PWM_MspInit+0x80>)
 8003c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	617b      	str	r3, [r7, #20]
 8003c68:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003c6a:	e022      	b.n	8003cb2 <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM3)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a14      	ldr	r2, [pc, #80]	; (8003cc4 <HAL_TIM_PWM_MspInit+0x84>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d10c      	bne.n	8003c90 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003c76:	4b12      	ldr	r3, [pc, #72]	; (8003cc0 <HAL_TIM_PWM_MspInit+0x80>)
 8003c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c7a:	4a11      	ldr	r2, [pc, #68]	; (8003cc0 <HAL_TIM_PWM_MspInit+0x80>)
 8003c7c:	f043 0302 	orr.w	r3, r3, #2
 8003c80:	6593      	str	r3, [r2, #88]	; 0x58
 8003c82:	4b0f      	ldr	r3, [pc, #60]	; (8003cc0 <HAL_TIM_PWM_MspInit+0x80>)
 8003c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	613b      	str	r3, [r7, #16]
 8003c8c:	693b      	ldr	r3, [r7, #16]
}
 8003c8e:	e010      	b.n	8003cb2 <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM4)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a0c      	ldr	r2, [pc, #48]	; (8003cc8 <HAL_TIM_PWM_MspInit+0x88>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d10b      	bne.n	8003cb2 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003c9a:	4b09      	ldr	r3, [pc, #36]	; (8003cc0 <HAL_TIM_PWM_MspInit+0x80>)
 8003c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9e:	4a08      	ldr	r2, [pc, #32]	; (8003cc0 <HAL_TIM_PWM_MspInit+0x80>)
 8003ca0:	f043 0304 	orr.w	r3, r3, #4
 8003ca4:	6593      	str	r3, [r2, #88]	; 0x58
 8003ca6:	4b06      	ldr	r3, [pc, #24]	; (8003cc0 <HAL_TIM_PWM_MspInit+0x80>)
 8003ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003caa:	f003 0304 	and.w	r3, r3, #4
 8003cae:	60fb      	str	r3, [r7, #12]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
}
 8003cb2:	bf00      	nop
 8003cb4:	371c      	adds	r7, #28
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	40000400 	.word	0x40000400
 8003cc8:	40000800 	.word	0x40000800

08003ccc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b08a      	sub	sp, #40	; 0x28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cd4:	f107 0314 	add.w	r3, r7, #20
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	605a      	str	r2, [r3, #4]
 8003cde:	609a      	str	r2, [r3, #8]
 8003ce0:	60da      	str	r2, [r3, #12]
 8003ce2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a22      	ldr	r2, [pc, #136]	; (8003d74 <HAL_TIM_MspPostInit+0xa8>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d11c      	bne.n	8003d28 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cee:	4b22      	ldr	r3, [pc, #136]	; (8003d78 <HAL_TIM_MspPostInit+0xac>)
 8003cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf2:	4a21      	ldr	r2, [pc, #132]	; (8003d78 <HAL_TIM_MspPostInit+0xac>)
 8003cf4:	f043 0304 	orr.w	r3, r3, #4
 8003cf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cfa:	4b1f      	ldr	r3, [pc, #124]	; (8003d78 <HAL_TIM_MspPostInit+0xac>)
 8003cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cfe:	f003 0304 	and.w	r3, r3, #4
 8003d02:	613b      	str	r3, [r7, #16]
 8003d04:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003d06:	2340      	movs	r3, #64	; 0x40
 8003d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d12:	2300      	movs	r3, #0
 8003d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003d16:	2302      	movs	r3, #2
 8003d18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d1a:	f107 0314 	add.w	r3, r7, #20
 8003d1e:	4619      	mov	r1, r3
 8003d20:	4816      	ldr	r0, [pc, #88]	; (8003d7c <HAL_TIM_MspPostInit+0xb0>)
 8003d22:	f002 f82d 	bl	8005d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003d26:	e021      	b.n	8003d6c <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM4)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a14      	ldr	r2, [pc, #80]	; (8003d80 <HAL_TIM_MspPostInit+0xb4>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d11c      	bne.n	8003d6c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d32:	4b11      	ldr	r3, [pc, #68]	; (8003d78 <HAL_TIM_MspPostInit+0xac>)
 8003d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d36:	4a10      	ldr	r2, [pc, #64]	; (8003d78 <HAL_TIM_MspPostInit+0xac>)
 8003d38:	f043 0302 	orr.w	r3, r3, #2
 8003d3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d3e:	4b0e      	ldr	r3, [pc, #56]	; (8003d78 <HAL_TIM_MspPostInit+0xac>)
 8003d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	60fb      	str	r3, [r7, #12]
 8003d48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8003d4a:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8003d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d50:	2302      	movs	r3, #2
 8003d52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d54:	2300      	movs	r3, #0
 8003d56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d60:	f107 0314 	add.w	r3, r7, #20
 8003d64:	4619      	mov	r1, r3
 8003d66:	4807      	ldr	r0, [pc, #28]	; (8003d84 <HAL_TIM_MspPostInit+0xb8>)
 8003d68:	f002 f80a 	bl	8005d80 <HAL_GPIO_Init>
}
 8003d6c:	bf00      	nop
 8003d6e:	3728      	adds	r7, #40	; 0x28
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	40000400 	.word	0x40000400
 8003d78:	40021000 	.word	0x40021000
 8003d7c:	48000800 	.word	0x48000800
 8003d80:	40000800 	.word	0x40000800
 8003d84:	48000400 	.word	0x48000400

08003d88 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart5;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003d8c:	4b22      	ldr	r3, [pc, #136]	; (8003e18 <MX_UART4_Init+0x90>)
 8003d8e:	4a23      	ldr	r2, [pc, #140]	; (8003e1c <MX_UART4_Init+0x94>)
 8003d90:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8003d92:	4b21      	ldr	r3, [pc, #132]	; (8003e18 <MX_UART4_Init+0x90>)
 8003d94:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003d98:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003d9a:	4b1f      	ldr	r3, [pc, #124]	; (8003e18 <MX_UART4_Init+0x90>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003da0:	4b1d      	ldr	r3, [pc, #116]	; (8003e18 <MX_UART4_Init+0x90>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003da6:	4b1c      	ldr	r3, [pc, #112]	; (8003e18 <MX_UART4_Init+0x90>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003dac:	4b1a      	ldr	r3, [pc, #104]	; (8003e18 <MX_UART4_Init+0x90>)
 8003dae:	220c      	movs	r2, #12
 8003db0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003db2:	4b19      	ldr	r3, [pc, #100]	; (8003e18 <MX_UART4_Init+0x90>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003db8:	4b17      	ldr	r3, [pc, #92]	; (8003e18 <MX_UART4_Init+0x90>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003dbe:	4b16      	ldr	r3, [pc, #88]	; (8003e18 <MX_UART4_Init+0x90>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003dc4:	4b14      	ldr	r3, [pc, #80]	; (8003e18 <MX_UART4_Init+0x90>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003dca:	4b13      	ldr	r3, [pc, #76]	; (8003e18 <MX_UART4_Init+0x90>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003dd0:	4811      	ldr	r0, [pc, #68]	; (8003e18 <MX_UART4_Init+0x90>)
 8003dd2:	f006 ffaf 	bl	800ad34 <HAL_UART_Init>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8003ddc:	f7ff f9ac 	bl	8003138 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003de0:	2100      	movs	r1, #0
 8003de2:	480d      	ldr	r0, [pc, #52]	; (8003e18 <MX_UART4_Init+0x90>)
 8003de4:	f009 f82f 	bl	800ce46 <HAL_UARTEx_SetTxFifoThreshold>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8003dee:	f7ff f9a3 	bl	8003138 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003df2:	2100      	movs	r1, #0
 8003df4:	4808      	ldr	r0, [pc, #32]	; (8003e18 <MX_UART4_Init+0x90>)
 8003df6:	f009 f864 	bl	800cec2 <HAL_UARTEx_SetRxFifoThreshold>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8003e00:	f7ff f99a 	bl	8003138 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8003e04:	4804      	ldr	r0, [pc, #16]	; (8003e18 <MX_UART4_Init+0x90>)
 8003e06:	f008 ffe5 	bl	800cdd4 <HAL_UARTEx_DisableFifoMode>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8003e10:	f7ff f992 	bl	8003138 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003e14:	bf00      	nop
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	20000a74 	.word	0x20000a74
 8003e1c:	40004c00 	.word	0x40004c00

08003e20 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003e24:	4b22      	ldr	r3, [pc, #136]	; (8003eb0 <MX_UART5_Init+0x90>)
 8003e26:	4a23      	ldr	r2, [pc, #140]	; (8003eb4 <MX_UART5_Init+0x94>)
 8003e28:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8003e2a:	4b21      	ldr	r3, [pc, #132]	; (8003eb0 <MX_UART5_Init+0x90>)
 8003e2c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003e30:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003e32:	4b1f      	ldr	r3, [pc, #124]	; (8003eb0 <MX_UART5_Init+0x90>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003e38:	4b1d      	ldr	r3, [pc, #116]	; (8003eb0 <MX_UART5_Init+0x90>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003e3e:	4b1c      	ldr	r3, [pc, #112]	; (8003eb0 <MX_UART5_Init+0x90>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003e44:	4b1a      	ldr	r3, [pc, #104]	; (8003eb0 <MX_UART5_Init+0x90>)
 8003e46:	220c      	movs	r2, #12
 8003e48:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e4a:	4b19      	ldr	r3, [pc, #100]	; (8003eb0 <MX_UART5_Init+0x90>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e50:	4b17      	ldr	r3, [pc, #92]	; (8003eb0 <MX_UART5_Init+0x90>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e56:	4b16      	ldr	r3, [pc, #88]	; (8003eb0 <MX_UART5_Init+0x90>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003e5c:	4b14      	ldr	r3, [pc, #80]	; (8003eb0 <MX_UART5_Init+0x90>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003e62:	4b13      	ldr	r3, [pc, #76]	; (8003eb0 <MX_UART5_Init+0x90>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003e68:	4811      	ldr	r0, [pc, #68]	; (8003eb0 <MX_UART5_Init+0x90>)
 8003e6a:	f006 ff63 	bl	800ad34 <HAL_UART_Init>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8003e74:	f7ff f960 	bl	8003138 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003e78:	2100      	movs	r1, #0
 8003e7a:	480d      	ldr	r0, [pc, #52]	; (8003eb0 <MX_UART5_Init+0x90>)
 8003e7c:	f008 ffe3 	bl	800ce46 <HAL_UARTEx_SetTxFifoThreshold>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8003e86:	f7ff f957 	bl	8003138 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	4808      	ldr	r0, [pc, #32]	; (8003eb0 <MX_UART5_Init+0x90>)
 8003e8e:	f009 f818 	bl	800cec2 <HAL_UARTEx_SetRxFifoThreshold>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8003e98:	f7ff f94e 	bl	8003138 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8003e9c:	4804      	ldr	r0, [pc, #16]	; (8003eb0 <MX_UART5_Init+0x90>)
 8003e9e:	f008 ff99 	bl	800cdd4 <HAL_UARTEx_DisableFifoMode>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8003ea8:	f7ff f946 	bl	8003138 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003eac:	bf00      	nop
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	20000b04 	.word	0x20000b04
 8003eb4:	40005000 	.word	0x40005000

08003eb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b0a2      	sub	sp, #136	; 0x88
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ec0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	605a      	str	r2, [r3, #4]
 8003eca:	609a      	str	r2, [r3, #8]
 8003ecc:	60da      	str	r2, [r3, #12]
 8003ece:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ed0:	f107 0320 	add.w	r3, r7, #32
 8003ed4:	2254      	movs	r2, #84	; 0x54
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f00f fd83 	bl	80139e4 <memset>
  if(uartHandle->Instance==UART4)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a52      	ldr	r2, [pc, #328]	; (800402c <HAL_UART_MspInit+0x174>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d141      	bne.n	8003f6c <HAL_UART_MspInit+0xb4>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003ee8:	2308      	movs	r3, #8
 8003eea:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003eec:	2300      	movs	r3, #0
 8003eee:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ef0:	f107 0320 	add.w	r3, r7, #32
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f005 fa51 	bl	800939c <HAL_RCCEx_PeriphCLKConfig>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003f00:	f7ff f91a 	bl	8003138 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003f04:	4b4a      	ldr	r3, [pc, #296]	; (8004030 <HAL_UART_MspInit+0x178>)
 8003f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f08:	4a49      	ldr	r2, [pc, #292]	; (8004030 <HAL_UART_MspInit+0x178>)
 8003f0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f0e:	6593      	str	r3, [r2, #88]	; 0x58
 8003f10:	4b47      	ldr	r3, [pc, #284]	; (8004030 <HAL_UART_MspInit+0x178>)
 8003f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f18:	61fb      	str	r3, [r7, #28]
 8003f1a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f1c:	4b44      	ldr	r3, [pc, #272]	; (8004030 <HAL_UART_MspInit+0x178>)
 8003f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f20:	4a43      	ldr	r2, [pc, #268]	; (8004030 <HAL_UART_MspInit+0x178>)
 8003f22:	f043 0304 	orr.w	r3, r3, #4
 8003f26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f28:	4b41      	ldr	r3, [pc, #260]	; (8004030 <HAL_UART_MspInit+0x178>)
 8003f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f2c:	f003 0304 	and.w	r3, r3, #4
 8003f30:	61bb      	str	r3, [r7, #24]
 8003f32:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003f34:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003f38:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f42:	2300      	movs	r3, #0
 8003f44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8003f48:	2305      	movs	r3, #5
 8003f4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f4e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003f52:	4619      	mov	r1, r3
 8003f54:	4837      	ldr	r0, [pc, #220]	; (8004034 <HAL_UART_MspInit+0x17c>)
 8003f56:	f001 ff13 	bl	8005d80 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	2105      	movs	r1, #5
 8003f5e:	2034      	movs	r0, #52	; 0x34
 8003f60:	f001 fbb4 	bl	80056cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003f64:	2034      	movs	r0, #52	; 0x34
 8003f66:	f001 fbcb 	bl	8005700 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8003f6a:	e05b      	b.n	8004024 <HAL_UART_MspInit+0x16c>
  else if(uartHandle->Instance==UART5)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a31      	ldr	r2, [pc, #196]	; (8004038 <HAL_UART_MspInit+0x180>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d156      	bne.n	8004024 <HAL_UART_MspInit+0x16c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8003f76:	2310      	movs	r3, #16
 8003f78:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f7e:	f107 0320 	add.w	r3, r7, #32
 8003f82:	4618      	mov	r0, r3
 8003f84:	f005 fa0a 	bl	800939c <HAL_RCCEx_PeriphCLKConfig>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <HAL_UART_MspInit+0xda>
      Error_Handler();
 8003f8e:	f7ff f8d3 	bl	8003138 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003f92:	4b27      	ldr	r3, [pc, #156]	; (8004030 <HAL_UART_MspInit+0x178>)
 8003f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f96:	4a26      	ldr	r2, [pc, #152]	; (8004030 <HAL_UART_MspInit+0x178>)
 8003f98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f9c:	6593      	str	r3, [r2, #88]	; 0x58
 8003f9e:	4b24      	ldr	r3, [pc, #144]	; (8004030 <HAL_UART_MspInit+0x178>)
 8003fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fa6:	617b      	str	r3, [r7, #20]
 8003fa8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003faa:	4b21      	ldr	r3, [pc, #132]	; (8004030 <HAL_UART_MspInit+0x178>)
 8003fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fae:	4a20      	ldr	r2, [pc, #128]	; (8004030 <HAL_UART_MspInit+0x178>)
 8003fb0:	f043 0304 	orr.w	r3, r3, #4
 8003fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fb6:	4b1e      	ldr	r3, [pc, #120]	; (8004030 <HAL_UART_MspInit+0x178>)
 8003fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fba:	f003 0304 	and.w	r3, r3, #4
 8003fbe:	613b      	str	r3, [r7, #16]
 8003fc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003fc2:	4b1b      	ldr	r3, [pc, #108]	; (8004030 <HAL_UART_MspInit+0x178>)
 8003fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc6:	4a1a      	ldr	r2, [pc, #104]	; (8004030 <HAL_UART_MspInit+0x178>)
 8003fc8:	f043 0308 	orr.w	r3, r3, #8
 8003fcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fce:	4b18      	ldr	r3, [pc, #96]	; (8004030 <HAL_UART_MspInit+0x178>)
 8003fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd2:	f003 0308 	and.w	r3, r3, #8
 8003fd6:	60fb      	str	r3, [r7, #12]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003fda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fde:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8003fee:	2305      	movs	r3, #5
 8003ff0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ff4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	480e      	ldr	r0, [pc, #56]	; (8004034 <HAL_UART_MspInit+0x17c>)
 8003ffc:	f001 fec0 	bl	8005d80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004000:	2304      	movs	r3, #4
 8004002:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004004:	2302      	movs	r3, #2
 8004006:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004008:	2300      	movs	r3, #0
 800400a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800400c:	2300      	movs	r3, #0
 800400e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8004012:	2305      	movs	r3, #5
 8004014:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004018:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800401c:	4619      	mov	r1, r3
 800401e:	4807      	ldr	r0, [pc, #28]	; (800403c <HAL_UART_MspInit+0x184>)
 8004020:	f001 feae 	bl	8005d80 <HAL_GPIO_Init>
}
 8004024:	bf00      	nop
 8004026:	3788      	adds	r7, #136	; 0x88
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	40004c00 	.word	0x40004c00
 8004030:	40021000 	.word	0x40021000
 8004034:	48000800 	.word	0x48000800
 8004038:	40005000 	.word	0x40005000
 800403c:	48000c00 	.word	0x48000c00

08004040 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004040:	480d      	ldr	r0, [pc, #52]	; (8004078 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004042:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004044:	480d      	ldr	r0, [pc, #52]	; (800407c <LoopForever+0x6>)
  ldr r1, =_edata
 8004046:	490e      	ldr	r1, [pc, #56]	; (8004080 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004048:	4a0e      	ldr	r2, [pc, #56]	; (8004084 <LoopForever+0xe>)
  movs r3, #0
 800404a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800404c:	e002      	b.n	8004054 <LoopCopyDataInit>

0800404e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800404e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004052:	3304      	adds	r3, #4

08004054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004058:	d3f9      	bcc.n	800404e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800405a:	4a0b      	ldr	r2, [pc, #44]	; (8004088 <LoopForever+0x12>)
  ldr r4, =_ebss
 800405c:	4c0b      	ldr	r4, [pc, #44]	; (800408c <LoopForever+0x16>)
  movs r3, #0
 800405e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004060:	e001      	b.n	8004066 <LoopFillZerobss>

08004062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004064:	3204      	adds	r2, #4

08004066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004068:	d3fb      	bcc.n	8004062 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800406a:	f7ff fcad 	bl	80039c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800406e:	f00f fd1d 	bl	8013aac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004072:	f7fe ffc1 	bl	8002ff8 <main>

08004076 <LoopForever>:

LoopForever:
    b LoopForever
 8004076:	e7fe      	b.n	8004076 <LoopForever>
  ldr   r0, =_estack
 8004078:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800407c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004080:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8004084:	08014c78 	.word	0x08014c78
  ldr r2, =_sbss
 8004088:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 800408c:	20005814 	.word	0x20005814

08004090 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004090:	e7fe      	b.n	8004090 <ADC1_2_IRQHandler>

08004092 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b082      	sub	sp, #8
 8004096:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004098:	2300      	movs	r3, #0
 800409a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800409c:	2003      	movs	r0, #3
 800409e:	f001 fb0a 	bl	80056b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80040a2:	200f      	movs	r0, #15
 80040a4:	f7ff fbc8 	bl	8003838 <HAL_InitTick>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d002      	beq.n	80040b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	71fb      	strb	r3, [r7, #7]
 80040b2:	e001      	b.n	80040b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80040b4:	f7ff fb98 	bl	80037e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80040b8:	79fb      	ldrb	r3, [r7, #7]

}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3708      	adds	r7, #8
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
	...

080040c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040c8:	4b05      	ldr	r3, [pc, #20]	; (80040e0 <HAL_IncTick+0x1c>)
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	4b05      	ldr	r3, [pc, #20]	; (80040e4 <HAL_IncTick+0x20>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4413      	add	r3, r2
 80040d2:	4a03      	ldr	r2, [pc, #12]	; (80040e0 <HAL_IncTick+0x1c>)
 80040d4:	6013      	str	r3, [r2, #0]
}
 80040d6:	bf00      	nop
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	20000b94 	.word	0x20000b94
 80040e4:	2000000c 	.word	0x2000000c

080040e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
  return uwTick;
 80040ec:	4b03      	ldr	r3, [pc, #12]	; (80040fc <HAL_GetTick+0x14>)
 80040ee:	681b      	ldr	r3, [r3, #0]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	20000b94 	.word	0x20000b94

08004100 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004108:	f7ff ffee 	bl	80040e8 <HAL_GetTick>
 800410c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004118:	d004      	beq.n	8004124 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800411a:	4b09      	ldr	r3, [pc, #36]	; (8004140 <HAL_Delay+0x40>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	4413      	add	r3, r2
 8004122:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004124:	bf00      	nop
 8004126:	f7ff ffdf 	bl	80040e8 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	429a      	cmp	r2, r3
 8004134:	d8f7      	bhi.n	8004126 <HAL_Delay+0x26>
  {
  }
}
 8004136:	bf00      	nop
 8004138:	bf00      	nop
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	2000000c 	.word	0x2000000c

08004144 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	431a      	orrs	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	609a      	str	r2, [r3, #8]
}
 800415e:	bf00      	nop
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800416a:	b480      	push	{r7}
 800416c:	b083      	sub	sp, #12
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
 8004172:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	431a      	orrs	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	609a      	str	r2, [r3, #8]
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b087      	sub	sp, #28
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
 80041b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	3360      	adds	r3, #96	; 0x60
 80041be:	461a      	mov	r2, r3
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	4413      	add	r3, r2
 80041c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	4b08      	ldr	r3, [pc, #32]	; (80041f0 <LL_ADC_SetOffset+0x44>)
 80041ce:	4013      	ands	r3, r2
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80041d6:	683a      	ldr	r2, [r7, #0]
 80041d8:	430a      	orrs	r2, r1
 80041da:	4313      	orrs	r3, r2
 80041dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80041e4:	bf00      	nop
 80041e6:	371c      	adds	r7, #28
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr
 80041f0:	03fff000 	.word	0x03fff000

080041f4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	3360      	adds	r3, #96	; 0x60
 8004202:	461a      	mov	r2, r3
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	4413      	add	r3, r2
 800420a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004214:	4618      	mov	r0, r3
 8004216:	3714      	adds	r7, #20
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004220:	b480      	push	{r7}
 8004222:	b087      	sub	sp, #28
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	3360      	adds	r3, #96	; 0x60
 8004230:	461a      	mov	r2, r3
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4413      	add	r3, r2
 8004238:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	431a      	orrs	r2, r3
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800424a:	bf00      	nop
 800424c:	371c      	adds	r7, #28
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004256:	b480      	push	{r7}
 8004258:	b087      	sub	sp, #28
 800425a:	af00      	add	r7, sp, #0
 800425c:	60f8      	str	r0, [r7, #12]
 800425e:	60b9      	str	r1, [r7, #8]
 8004260:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	3360      	adds	r3, #96	; 0x60
 8004266:	461a      	mov	r2, r3
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4413      	add	r3, r2
 800426e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	431a      	orrs	r2, r3
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004280:	bf00      	nop
 8004282:	371c      	adds	r7, #28
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800428c:	b480      	push	{r7}
 800428e:	b087      	sub	sp, #28
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	3360      	adds	r3, #96	; 0x60
 800429c:	461a      	mov	r2, r3
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	4413      	add	r3, r2
 80042a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	431a      	orrs	r2, r3
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80042b6:	bf00      	nop
 80042b8:	371c      	adds	r7, #28
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b083      	sub	sp, #12
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
 80042ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	695b      	ldr	r3, [r3, #20]
 80042d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	431a      	orrs	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	615a      	str	r2, [r3, #20]
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80042fc:	2301      	movs	r3, #1
 80042fe:	e000      	b.n	8004302 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800430e:	b480      	push	{r7}
 8004310:	b087      	sub	sp, #28
 8004312:	af00      	add	r7, sp, #0
 8004314:	60f8      	str	r0, [r7, #12]
 8004316:	60b9      	str	r1, [r7, #8]
 8004318:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	3330      	adds	r3, #48	; 0x30
 800431e:	461a      	mov	r2, r3
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	0a1b      	lsrs	r3, r3, #8
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	f003 030c 	and.w	r3, r3, #12
 800432a:	4413      	add	r3, r2
 800432c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	f003 031f 	and.w	r3, r3, #31
 8004338:	211f      	movs	r1, #31
 800433a:	fa01 f303 	lsl.w	r3, r1, r3
 800433e:	43db      	mvns	r3, r3
 8004340:	401a      	ands	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	0e9b      	lsrs	r3, r3, #26
 8004346:	f003 011f 	and.w	r1, r3, #31
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	f003 031f 	and.w	r3, r3, #31
 8004350:	fa01 f303 	lsl.w	r3, r1, r3
 8004354:	431a      	orrs	r2, r3
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800435a:	bf00      	nop
 800435c:	371c      	adds	r7, #28
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004366:	b480      	push	{r7}
 8004368:	b087      	sub	sp, #28
 800436a:	af00      	add	r7, sp, #0
 800436c:	60f8      	str	r0, [r7, #12]
 800436e:	60b9      	str	r1, [r7, #8]
 8004370:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	3314      	adds	r3, #20
 8004376:	461a      	mov	r2, r3
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	0e5b      	lsrs	r3, r3, #25
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	f003 0304 	and.w	r3, r3, #4
 8004382:	4413      	add	r3, r2
 8004384:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	0d1b      	lsrs	r3, r3, #20
 800438e:	f003 031f 	and.w	r3, r3, #31
 8004392:	2107      	movs	r1, #7
 8004394:	fa01 f303 	lsl.w	r3, r1, r3
 8004398:	43db      	mvns	r3, r3
 800439a:	401a      	ands	r2, r3
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	0d1b      	lsrs	r3, r3, #20
 80043a0:	f003 031f 	and.w	r3, r3, #31
 80043a4:	6879      	ldr	r1, [r7, #4]
 80043a6:	fa01 f303 	lsl.w	r3, r1, r3
 80043aa:	431a      	orrs	r2, r3
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80043b0:	bf00      	nop
 80043b2:	371c      	adds	r7, #28
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a0f      	ldr	r2, [pc, #60]	; (8004408 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d10a      	bne.n	80043e6 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043dc:	431a      	orrs	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80043e4:	e00a      	b.n	80043fc <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043f2:	43db      	mvns	r3, r3
 80043f4:	401a      	ands	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80043fc:	bf00      	nop
 80043fe:	3714      	adds	r7, #20
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	407f0000 	.word	0x407f0000

0800440c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f003 031f 	and.w	r3, r3, #31
}
 800441c:	4618      	mov	r0, r3
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004438:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	6093      	str	r3, [r2, #8]
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800445c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004460:	d101      	bne.n	8004466 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004462:	2301      	movs	r3, #1
 8004464:	e000      	b.n	8004468 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004484:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004488:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044b0:	d101      	bne.n	80044b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80044b2:	2301      	movs	r3, #1
 80044b4:	e000      	b.n	80044b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80044d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80044d8:	f043 0201 	orr.w	r2, r3, #1
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f003 0301 	and.w	r3, r3, #1
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d101      	bne.n	8004504 <LL_ADC_IsEnabled+0x18>
 8004500:	2301      	movs	r3, #1
 8004502:	e000      	b.n	8004506 <LL_ADC_IsEnabled+0x1a>
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr

08004512 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004512:	b480      	push	{r7}
 8004514:	b083      	sub	sp, #12
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004522:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004526:	f043 0204 	orr.w	r2, r3, #4
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800452e:	bf00      	nop
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800453a:	b480      	push	{r7}
 800453c:	b083      	sub	sp, #12
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 0304 	and.w	r3, r3, #4
 800454a:	2b04      	cmp	r3, #4
 800454c:	d101      	bne.n	8004552 <LL_ADC_REG_IsConversionOngoing+0x18>
 800454e:	2301      	movs	r3, #1
 8004550:	e000      	b.n	8004554 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f003 0308 	and.w	r3, r3, #8
 8004570:	2b08      	cmp	r3, #8
 8004572:	d101      	bne.n	8004578 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004574:	2301      	movs	r3, #1
 8004576:	e000      	b.n	800457a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
	...

08004588 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004588:	b590      	push	{r4, r7, lr}
 800458a:	b089      	sub	sp, #36	; 0x24
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004590:	2300      	movs	r3, #0
 8004592:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004594:	2300      	movs	r3, #0
 8004596:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e1af      	b.n	8004902 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d109      	bne.n	80045c4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f7fc fd0b 	bl	8000fcc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7ff ff3f 	bl	800444c <LL_ADC_IsDeepPowerDownEnabled>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d004      	beq.n	80045de <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4618      	mov	r0, r3
 80045da:	f7ff ff25 	bl	8004428 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7ff ff5a 	bl	800449c <LL_ADC_IsInternalRegulatorEnabled>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d115      	bne.n	800461a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff ff3e 	bl	8004474 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045f8:	4b9f      	ldr	r3, [pc, #636]	; (8004878 <HAL_ADC_Init+0x2f0>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	099b      	lsrs	r3, r3, #6
 80045fe:	4a9f      	ldr	r2, [pc, #636]	; (800487c <HAL_ADC_Init+0x2f4>)
 8004600:	fba2 2303 	umull	r2, r3, r2, r3
 8004604:	099b      	lsrs	r3, r3, #6
 8004606:	3301      	adds	r3, #1
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800460c:	e002      	b.n	8004614 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	3b01      	subs	r3, #1
 8004612:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1f9      	bne.n	800460e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4618      	mov	r0, r3
 8004620:	f7ff ff3c 	bl	800449c <LL_ADC_IsInternalRegulatorEnabled>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10d      	bne.n	8004646 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800462e:	f043 0210 	orr.w	r2, r3, #16
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800463a:	f043 0201 	orr.w	r2, r3, #1
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4618      	mov	r0, r3
 800464c:	f7ff ff75 	bl	800453a <LL_ADC_REG_IsConversionOngoing>
 8004650:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004656:	f003 0310 	and.w	r3, r3, #16
 800465a:	2b00      	cmp	r3, #0
 800465c:	f040 8148 	bne.w	80048f0 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	2b00      	cmp	r3, #0
 8004664:	f040 8144 	bne.w	80048f0 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800466c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004670:	f043 0202 	orr.w	r2, r3, #2
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4618      	mov	r0, r3
 800467e:	f7ff ff35 	bl	80044ec <LL_ADC_IsEnabled>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d141      	bne.n	800470c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004690:	d004      	beq.n	800469c <HAL_ADC_Init+0x114>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a7a      	ldr	r2, [pc, #488]	; (8004880 <HAL_ADC_Init+0x2f8>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d10f      	bne.n	80046bc <HAL_ADC_Init+0x134>
 800469c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80046a0:	f7ff ff24 	bl	80044ec <LL_ADC_IsEnabled>
 80046a4:	4604      	mov	r4, r0
 80046a6:	4876      	ldr	r0, [pc, #472]	; (8004880 <HAL_ADC_Init+0x2f8>)
 80046a8:	f7ff ff20 	bl	80044ec <LL_ADC_IsEnabled>
 80046ac:	4603      	mov	r3, r0
 80046ae:	4323      	orrs	r3, r4
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	bf0c      	ite	eq
 80046b4:	2301      	moveq	r3, #1
 80046b6:	2300      	movne	r3, #0
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	e012      	b.n	80046e2 <HAL_ADC_Init+0x15a>
 80046bc:	4871      	ldr	r0, [pc, #452]	; (8004884 <HAL_ADC_Init+0x2fc>)
 80046be:	f7ff ff15 	bl	80044ec <LL_ADC_IsEnabled>
 80046c2:	4604      	mov	r4, r0
 80046c4:	4870      	ldr	r0, [pc, #448]	; (8004888 <HAL_ADC_Init+0x300>)
 80046c6:	f7ff ff11 	bl	80044ec <LL_ADC_IsEnabled>
 80046ca:	4603      	mov	r3, r0
 80046cc:	431c      	orrs	r4, r3
 80046ce:	486f      	ldr	r0, [pc, #444]	; (800488c <HAL_ADC_Init+0x304>)
 80046d0:	f7ff ff0c 	bl	80044ec <LL_ADC_IsEnabled>
 80046d4:	4603      	mov	r3, r0
 80046d6:	4323      	orrs	r3, r4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	bf0c      	ite	eq
 80046dc:	2301      	moveq	r3, #1
 80046de:	2300      	movne	r3, #0
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d012      	beq.n	800470c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046ee:	d004      	beq.n	80046fa <HAL_ADC_Init+0x172>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a62      	ldr	r2, [pc, #392]	; (8004880 <HAL_ADC_Init+0x2f8>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d101      	bne.n	80046fe <HAL_ADC_Init+0x176>
 80046fa:	4a65      	ldr	r2, [pc, #404]	; (8004890 <HAL_ADC_Init+0x308>)
 80046fc:	e000      	b.n	8004700 <HAL_ADC_Init+0x178>
 80046fe:	4a65      	ldr	r2, [pc, #404]	; (8004894 <HAL_ADC_Init+0x30c>)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	4619      	mov	r1, r3
 8004706:	4610      	mov	r0, r2
 8004708:	f7ff fd1c 	bl	8004144 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	7f5b      	ldrb	r3, [r3, #29]
 8004710:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004716:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800471c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004722:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800472a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800472c:	4313      	orrs	r3, r2
 800472e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004736:	2b01      	cmp	r3, #1
 8004738:	d106      	bne.n	8004748 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473e:	3b01      	subs	r3, #1
 8004740:	045b      	lsls	r3, r3, #17
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	4313      	orrs	r3, r2
 8004746:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474c:	2b00      	cmp	r3, #0
 800474e:	d009      	beq.n	8004764 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004754:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	4313      	orrs	r3, r2
 8004762:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68da      	ldr	r2, [r3, #12]
 800476a:	4b4b      	ldr	r3, [pc, #300]	; (8004898 <HAL_ADC_Init+0x310>)
 800476c:	4013      	ands	r3, r2
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	6812      	ldr	r2, [r2, #0]
 8004772:	69b9      	ldr	r1, [r7, #24]
 8004774:	430b      	orrs	r3, r1
 8004776:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4618      	mov	r0, r3
 8004794:	f7ff fed1 	bl	800453a <LL_ADC_REG_IsConversionOngoing>
 8004798:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4618      	mov	r0, r3
 80047a0:	f7ff fede 	bl	8004560 <LL_ADC_INJ_IsConversionOngoing>
 80047a4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d17f      	bne.n	80048ac <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d17c      	bne.n	80048ac <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80047b6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80047be:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80047c0:	4313      	orrs	r3, r2
 80047c2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047ce:	f023 0302 	bic.w	r3, r3, #2
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	6812      	ldr	r2, [r2, #0]
 80047d6:	69b9      	ldr	r1, [r7, #24]
 80047d8:	430b      	orrs	r3, r1
 80047da:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d017      	beq.n	8004814 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	691a      	ldr	r2, [r3, #16]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80047f2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80047fc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004800:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6911      	ldr	r1, [r2, #16]
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	6812      	ldr	r2, [r2, #0]
 800480c:	430b      	orrs	r3, r1
 800480e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8004812:	e013      	b.n	800483c <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	691a      	ldr	r2, [r3, #16]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004822:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	6812      	ldr	r2, [r2, #0]
 8004830:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004834:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004838:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004842:	2b01      	cmp	r3, #1
 8004844:	d12a      	bne.n	800489c <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004850:	f023 0304 	bic.w	r3, r3, #4
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800485c:	4311      	orrs	r1, r2
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004862:	4311      	orrs	r1, r2
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004868:	430a      	orrs	r2, r1
 800486a:	431a      	orrs	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f042 0201 	orr.w	r2, r2, #1
 8004874:	611a      	str	r2, [r3, #16]
 8004876:	e019      	b.n	80048ac <HAL_ADC_Init+0x324>
 8004878:	20000004 	.word	0x20000004
 800487c:	053e2d63 	.word	0x053e2d63
 8004880:	50000100 	.word	0x50000100
 8004884:	50000400 	.word	0x50000400
 8004888:	50000500 	.word	0x50000500
 800488c:	50000600 	.word	0x50000600
 8004890:	50000300 	.word	0x50000300
 8004894:	50000700 	.word	0x50000700
 8004898:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	691a      	ldr	r2, [r3, #16]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 0201 	bic.w	r2, r2, #1
 80048aa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d10c      	bne.n	80048ce <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ba:	f023 010f 	bic.w	r1, r3, #15
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	1e5a      	subs	r2, r3, #1
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	430a      	orrs	r2, r1
 80048ca:	631a      	str	r2, [r3, #48]	; 0x30
 80048cc:	e007      	b.n	80048de <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 020f 	bic.w	r2, r2, #15
 80048dc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e2:	f023 0303 	bic.w	r3, r3, #3
 80048e6:	f043 0201 	orr.w	r2, r3, #1
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80048ee:	e007      	b.n	8004900 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f4:	f043 0210 	orr.w	r2, r3, #16
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004900:	7ffb      	ldrb	r3, [r7, #31]
}
 8004902:	4618      	mov	r0, r3
 8004904:	3724      	adds	r7, #36	; 0x24
 8004906:	46bd      	mov	sp, r7
 8004908:	bd90      	pop	{r4, r7, pc}
 800490a:	bf00      	nop

0800490c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004920:	d004      	beq.n	800492c <HAL_ADC_Start_DMA+0x20>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a5a      	ldr	r2, [pc, #360]	; (8004a90 <HAL_ADC_Start_DMA+0x184>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d101      	bne.n	8004930 <HAL_ADC_Start_DMA+0x24>
 800492c:	4b59      	ldr	r3, [pc, #356]	; (8004a94 <HAL_ADC_Start_DMA+0x188>)
 800492e:	e000      	b.n	8004932 <HAL_ADC_Start_DMA+0x26>
 8004930:	4b59      	ldr	r3, [pc, #356]	; (8004a98 <HAL_ADC_Start_DMA+0x18c>)
 8004932:	4618      	mov	r0, r3
 8004934:	f7ff fd6a 	bl	800440c <LL_ADC_GetMultimode>
 8004938:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4618      	mov	r0, r3
 8004940:	f7ff fdfb 	bl	800453a <LL_ADC_REG_IsConversionOngoing>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	f040 809b 	bne.w	8004a82 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004952:	2b01      	cmp	r3, #1
 8004954:	d101      	bne.n	800495a <HAL_ADC_Start_DMA+0x4e>
 8004956:	2302      	movs	r3, #2
 8004958:	e096      	b.n	8004a88 <HAL_ADC_Start_DMA+0x17c>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a4d      	ldr	r2, [pc, #308]	; (8004a9c <HAL_ADC_Start_DMA+0x190>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d008      	beq.n	800497e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d005      	beq.n	800497e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	2b05      	cmp	r3, #5
 8004976:	d002      	beq.n	800497e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	2b09      	cmp	r3, #9
 800497c:	d17a      	bne.n	8004a74 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f000 fcf6 	bl	8005370 <ADC_Enable>
 8004984:	4603      	mov	r3, r0
 8004986:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004988:	7dfb      	ldrb	r3, [r7, #23]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d16d      	bne.n	8004a6a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004992:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004996:	f023 0301 	bic.w	r3, r3, #1
 800499a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a3a      	ldr	r2, [pc, #232]	; (8004a90 <HAL_ADC_Start_DMA+0x184>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d009      	beq.n	80049c0 <HAL_ADC_Start_DMA+0xb4>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a3b      	ldr	r2, [pc, #236]	; (8004aa0 <HAL_ADC_Start_DMA+0x194>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d002      	beq.n	80049bc <HAL_ADC_Start_DMA+0xb0>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	e003      	b.n	80049c4 <HAL_ADC_Start_DMA+0xb8>
 80049bc:	4b39      	ldr	r3, [pc, #228]	; (8004aa4 <HAL_ADC_Start_DMA+0x198>)
 80049be:	e001      	b.n	80049c4 <HAL_ADC_Start_DMA+0xb8>
 80049c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	6812      	ldr	r2, [r2, #0]
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d002      	beq.n	80049d2 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d105      	bne.n	80049de <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d006      	beq.n	80049f8 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049ee:	f023 0206 	bic.w	r2, r3, #6
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	661a      	str	r2, [r3, #96]	; 0x60
 80049f6:	e002      	b.n	80049fe <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a02:	4a29      	ldr	r2, [pc, #164]	; (8004aa8 <HAL_ADC_Start_DMA+0x19c>)
 8004a04:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a0a:	4a28      	ldr	r2, [pc, #160]	; (8004aac <HAL_ADC_Start_DMA+0x1a0>)
 8004a0c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a12:	4a27      	ldr	r2, [pc, #156]	; (8004ab0 <HAL_ADC_Start_DMA+0x1a4>)
 8004a14:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	221c      	movs	r2, #28
 8004a1c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f042 0210 	orr.w	r2, r2, #16
 8004a34:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68da      	ldr	r2, [r3, #12]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f042 0201 	orr.w	r2, r2, #1
 8004a44:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	3340      	adds	r3, #64	; 0x40
 8004a50:	4619      	mov	r1, r3
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f000 ff09 	bl	800586c <HAL_DMA_Start_IT>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7ff fd55 	bl	8004512 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004a68:	e00d      	b.n	8004a86 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8004a72:	e008      	b.n	8004a86 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8004a80:	e001      	b.n	8004a86 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004a82:	2302      	movs	r3, #2
 8004a84:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004a86:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3718      	adds	r7, #24
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	50000100 	.word	0x50000100
 8004a94:	50000300 	.word	0x50000300
 8004a98:	50000700 	.word	0x50000700
 8004a9c:	50000600 	.word	0x50000600
 8004aa0:	50000500 	.word	0x50000500
 8004aa4:	50000400 	.word	0x50000400
 8004aa8:	08005435 	.word	0x08005435
 8004aac:	0800550d 	.word	0x0800550d
 8004ab0:	08005529 	.word	0x08005529

08004ab4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b0b6      	sub	sp, #216	; 0xd8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004afa:	2300      	movs	r3, #0
 8004afc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004b00:	2300      	movs	r3, #0
 8004b02:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d102      	bne.n	8004b14 <HAL_ADC_ConfigChannel+0x24>
 8004b0e:	2302      	movs	r3, #2
 8004b10:	f000 bc13 	b.w	800533a <HAL_ADC_ConfigChannel+0x84a>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7ff fd0a 	bl	800453a <LL_ADC_REG_IsConversionOngoing>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f040 83f3 	bne.w	8005314 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6818      	ldr	r0, [r3, #0]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	6859      	ldr	r1, [r3, #4]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	f7ff fbe7 	bl	800430e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7ff fcf8 	bl	800453a <LL_ADC_REG_IsConversionOngoing>
 8004b4a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7ff fd04 	bl	8004560 <LL_ADC_INJ_IsConversionOngoing>
 8004b58:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004b5c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f040 81d9 	bne.w	8004f18 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004b66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	f040 81d4 	bne.w	8004f18 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b78:	d10f      	bne.n	8004b9a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6818      	ldr	r0, [r3, #0]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2200      	movs	r2, #0
 8004b84:	4619      	mov	r1, r3
 8004b86:	f7ff fbee 	bl	8004366 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7ff fb95 	bl	80042c2 <LL_ADC_SetSamplingTimeCommonConfig>
 8004b98:	e00e      	b.n	8004bb8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6818      	ldr	r0, [r3, #0]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	6819      	ldr	r1, [r3, #0]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	f7ff fbdd 	bl	8004366 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2100      	movs	r1, #0
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7ff fb85 	bl	80042c2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	695a      	ldr	r2, [r3, #20]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	08db      	lsrs	r3, r3, #3
 8004bc4:	f003 0303 	and.w	r3, r3, #3
 8004bc8:	005b      	lsls	r3, r3, #1
 8004bca:	fa02 f303 	lsl.w	r3, r2, r3
 8004bce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	2b04      	cmp	r3, #4
 8004bd8:	d022      	beq.n	8004c20 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6818      	ldr	r0, [r3, #0]
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	6919      	ldr	r1, [r3, #16]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004bea:	f7ff fadf 	bl	80041ac <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6818      	ldr	r0, [r3, #0]
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	6919      	ldr	r1, [r3, #16]
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	f7ff fb2b 	bl	8004256 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6818      	ldr	r0, [r3, #0]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	6919      	ldr	r1, [r3, #16]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	7f1b      	ldrb	r3, [r3, #28]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d102      	bne.n	8004c16 <HAL_ADC_ConfigChannel+0x126>
 8004c10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c14:	e000      	b.n	8004c18 <HAL_ADC_ConfigChannel+0x128>
 8004c16:	2300      	movs	r3, #0
 8004c18:	461a      	mov	r2, r3
 8004c1a:	f7ff fb37 	bl	800428c <LL_ADC_SetOffsetSaturation>
 8004c1e:	e17b      	b.n	8004f18 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2100      	movs	r1, #0
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7ff fae4 	bl	80041f4 <LL_ADC_GetOffsetChannel>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d10a      	bne.n	8004c4c <HAL_ADC_ConfigChannel+0x15c>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7ff fad9 	bl	80041f4 <LL_ADC_GetOffsetChannel>
 8004c42:	4603      	mov	r3, r0
 8004c44:	0e9b      	lsrs	r3, r3, #26
 8004c46:	f003 021f 	and.w	r2, r3, #31
 8004c4a:	e01e      	b.n	8004c8a <HAL_ADC_ConfigChannel+0x19a>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2100      	movs	r1, #0
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7ff face 	bl	80041f4 <LL_ADC_GetOffsetChannel>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c5e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004c62:	fa93 f3a3 	rbit	r3, r3
 8004c66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004c6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004c72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004c7a:	2320      	movs	r3, #32
 8004c7c:	e004      	b.n	8004c88 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004c7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c82:	fab3 f383 	clz	r3, r3
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d105      	bne.n	8004ca2 <HAL_ADC_ConfigChannel+0x1b2>
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	0e9b      	lsrs	r3, r3, #26
 8004c9c:	f003 031f 	and.w	r3, r3, #31
 8004ca0:	e018      	b.n	8004cd4 <HAL_ADC_ConfigChannel+0x1e4>
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004caa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004cae:	fa93 f3a3 	rbit	r3, r3
 8004cb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004cb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004cba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004cbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004cc6:	2320      	movs	r3, #32
 8004cc8:	e004      	b.n	8004cd4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004cca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004cce:	fab3 f383 	clz	r3, r3
 8004cd2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d106      	bne.n	8004ce6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	2100      	movs	r1, #0
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7ff fa9d 	bl	8004220 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2101      	movs	r1, #1
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7ff fa81 	bl	80041f4 <LL_ADC_GetOffsetChannel>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d10a      	bne.n	8004d12 <HAL_ADC_ConfigChannel+0x222>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2101      	movs	r1, #1
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7ff fa76 	bl	80041f4 <LL_ADC_GetOffsetChannel>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	0e9b      	lsrs	r3, r3, #26
 8004d0c:	f003 021f 	and.w	r2, r3, #31
 8004d10:	e01e      	b.n	8004d50 <HAL_ADC_ConfigChannel+0x260>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2101      	movs	r1, #1
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7ff fa6b 	bl	80041f4 <LL_ADC_GetOffsetChannel>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d24:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004d28:	fa93 f3a3 	rbit	r3, r3
 8004d2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004d30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004d38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d101      	bne.n	8004d44 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004d40:	2320      	movs	r3, #32
 8004d42:	e004      	b.n	8004d4e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004d44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d48:	fab3 f383 	clz	r3, r3
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d105      	bne.n	8004d68 <HAL_ADC_ConfigChannel+0x278>
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	0e9b      	lsrs	r3, r3, #26
 8004d62:	f003 031f 	and.w	r3, r3, #31
 8004d66:	e018      	b.n	8004d9a <HAL_ADC_ConfigChannel+0x2aa>
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d74:	fa93 f3a3 	rbit	r3, r3
 8004d78:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004d7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004d80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004d84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d101      	bne.n	8004d90 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004d8c:	2320      	movs	r3, #32
 8004d8e:	e004      	b.n	8004d9a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004d90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d94:	fab3 f383 	clz	r3, r3
 8004d98:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d106      	bne.n	8004dac <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2200      	movs	r2, #0
 8004da4:	2101      	movs	r1, #1
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7ff fa3a 	bl	8004220 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2102      	movs	r1, #2
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7ff fa1e 	bl	80041f4 <LL_ADC_GetOffsetChannel>
 8004db8:	4603      	mov	r3, r0
 8004dba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10a      	bne.n	8004dd8 <HAL_ADC_ConfigChannel+0x2e8>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2102      	movs	r1, #2
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7ff fa13 	bl	80041f4 <LL_ADC_GetOffsetChannel>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	0e9b      	lsrs	r3, r3, #26
 8004dd2:	f003 021f 	and.w	r2, r3, #31
 8004dd6:	e01e      	b.n	8004e16 <HAL_ADC_ConfigChannel+0x326>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2102      	movs	r1, #2
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7ff fa08 	bl	80041f4 <LL_ADC_GetOffsetChannel>
 8004de4:	4603      	mov	r3, r0
 8004de6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004dee:	fa93 f3a3 	rbit	r3, r3
 8004df2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004df6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004dfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004dfe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004e06:	2320      	movs	r3, #32
 8004e08:	e004      	b.n	8004e14 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004e0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e0e:	fab3 f383 	clz	r3, r3
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d105      	bne.n	8004e2e <HAL_ADC_ConfigChannel+0x33e>
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	0e9b      	lsrs	r3, r3, #26
 8004e28:	f003 031f 	and.w	r3, r3, #31
 8004e2c:	e016      	b.n	8004e5c <HAL_ADC_ConfigChannel+0x36c>
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e36:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e3a:	fa93 f3a3 	rbit	r3, r3
 8004e3e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004e40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004e46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004e4e:	2320      	movs	r3, #32
 8004e50:	e004      	b.n	8004e5c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004e52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e56:	fab3 f383 	clz	r3, r3
 8004e5a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d106      	bne.n	8004e6e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2200      	movs	r2, #0
 8004e66:	2102      	movs	r1, #2
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7ff f9d9 	bl	8004220 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2103      	movs	r1, #3
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7ff f9bd 	bl	80041f4 <LL_ADC_GetOffsetChannel>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d10a      	bne.n	8004e9a <HAL_ADC_ConfigChannel+0x3aa>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2103      	movs	r1, #3
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7ff f9b2 	bl	80041f4 <LL_ADC_GetOffsetChannel>
 8004e90:	4603      	mov	r3, r0
 8004e92:	0e9b      	lsrs	r3, r3, #26
 8004e94:	f003 021f 	and.w	r2, r3, #31
 8004e98:	e017      	b.n	8004eca <HAL_ADC_ConfigChannel+0x3da>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2103      	movs	r1, #3
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7ff f9a7 	bl	80041f4 <LL_ADC_GetOffsetChannel>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004eac:	fa93 f3a3 	rbit	r3, r3
 8004eb0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004eb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004eb4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004eb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d101      	bne.n	8004ec0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004ebc:	2320      	movs	r3, #32
 8004ebe:	e003      	b.n	8004ec8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004ec0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ec2:	fab3 f383 	clz	r3, r3
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d105      	bne.n	8004ee2 <HAL_ADC_ConfigChannel+0x3f2>
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	0e9b      	lsrs	r3, r3, #26
 8004edc:	f003 031f 	and.w	r3, r3, #31
 8004ee0:	e011      	b.n	8004f06 <HAL_ADC_ConfigChannel+0x416>
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004eea:	fa93 f3a3 	rbit	r3, r3
 8004eee:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004ef0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ef2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d101      	bne.n	8004efe <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004efa:	2320      	movs	r3, #32
 8004efc:	e003      	b.n	8004f06 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f00:	fab3 f383 	clz	r3, r3
 8004f04:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d106      	bne.n	8004f18 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	2103      	movs	r1, #3
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7ff f984 	bl	8004220 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7ff fae5 	bl	80044ec <LL_ADC_IsEnabled>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f040 813d 	bne.w	80051a4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6818      	ldr	r0, [r3, #0]
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	6819      	ldr	r1, [r3, #0]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	461a      	mov	r2, r3
 8004f38:	f7ff fa40 	bl	80043bc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	4aa2      	ldr	r2, [pc, #648]	; (80051cc <HAL_ADC_ConfigChannel+0x6dc>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	f040 812e 	bne.w	80051a4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10b      	bne.n	8004f70 <HAL_ADC_ConfigChannel+0x480>
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	0e9b      	lsrs	r3, r3, #26
 8004f5e:	3301      	adds	r3, #1
 8004f60:	f003 031f 	and.w	r3, r3, #31
 8004f64:	2b09      	cmp	r3, #9
 8004f66:	bf94      	ite	ls
 8004f68:	2301      	movls	r3, #1
 8004f6a:	2300      	movhi	r3, #0
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	e019      	b.n	8004fa4 <HAL_ADC_ConfigChannel+0x4b4>
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f78:	fa93 f3a3 	rbit	r3, r3
 8004f7c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004f7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f80:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004f82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d101      	bne.n	8004f8c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004f88:	2320      	movs	r3, #32
 8004f8a:	e003      	b.n	8004f94 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004f8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f8e:	fab3 f383 	clz	r3, r3
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	3301      	adds	r3, #1
 8004f96:	f003 031f 	and.w	r3, r3, #31
 8004f9a:	2b09      	cmp	r3, #9
 8004f9c:	bf94      	ite	ls
 8004f9e:	2301      	movls	r3, #1
 8004fa0:	2300      	movhi	r3, #0
 8004fa2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d079      	beq.n	800509c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d107      	bne.n	8004fc4 <HAL_ADC_ConfigChannel+0x4d4>
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	0e9b      	lsrs	r3, r3, #26
 8004fba:	3301      	adds	r3, #1
 8004fbc:	069b      	lsls	r3, r3, #26
 8004fbe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004fc2:	e015      	b.n	8004ff0 <HAL_ADC_ConfigChannel+0x500>
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fcc:	fa93 f3a3 	rbit	r3, r3
 8004fd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fd4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004fd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d101      	bne.n	8004fe0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004fdc:	2320      	movs	r3, #32
 8004fde:	e003      	b.n	8004fe8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004fe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fe2:	fab3 f383 	clz	r3, r3
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	3301      	adds	r3, #1
 8004fea:	069b      	lsls	r3, r3, #26
 8004fec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d109      	bne.n	8005010 <HAL_ADC_ConfigChannel+0x520>
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	0e9b      	lsrs	r3, r3, #26
 8005002:	3301      	adds	r3, #1
 8005004:	f003 031f 	and.w	r3, r3, #31
 8005008:	2101      	movs	r1, #1
 800500a:	fa01 f303 	lsl.w	r3, r1, r3
 800500e:	e017      	b.n	8005040 <HAL_ADC_ConfigChannel+0x550>
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005016:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005018:	fa93 f3a3 	rbit	r3, r3
 800501c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800501e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005020:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005022:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005024:	2b00      	cmp	r3, #0
 8005026:	d101      	bne.n	800502c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8005028:	2320      	movs	r3, #32
 800502a:	e003      	b.n	8005034 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800502c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800502e:	fab3 f383 	clz	r3, r3
 8005032:	b2db      	uxtb	r3, r3
 8005034:	3301      	adds	r3, #1
 8005036:	f003 031f 	and.w	r3, r3, #31
 800503a:	2101      	movs	r1, #1
 800503c:	fa01 f303 	lsl.w	r3, r1, r3
 8005040:	ea42 0103 	orr.w	r1, r2, r3
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10a      	bne.n	8005066 <HAL_ADC_ConfigChannel+0x576>
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	0e9b      	lsrs	r3, r3, #26
 8005056:	3301      	adds	r3, #1
 8005058:	f003 021f 	and.w	r2, r3, #31
 800505c:	4613      	mov	r3, r2
 800505e:	005b      	lsls	r3, r3, #1
 8005060:	4413      	add	r3, r2
 8005062:	051b      	lsls	r3, r3, #20
 8005064:	e018      	b.n	8005098 <HAL_ADC_ConfigChannel+0x5a8>
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800506c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800506e:	fa93 f3a3 	rbit	r3, r3
 8005072:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005076:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800507e:	2320      	movs	r3, #32
 8005080:	e003      	b.n	800508a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8005082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005084:	fab3 f383 	clz	r3, r3
 8005088:	b2db      	uxtb	r3, r3
 800508a:	3301      	adds	r3, #1
 800508c:	f003 021f 	and.w	r2, r3, #31
 8005090:	4613      	mov	r3, r2
 8005092:	005b      	lsls	r3, r3, #1
 8005094:	4413      	add	r3, r2
 8005096:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005098:	430b      	orrs	r3, r1
 800509a:	e07e      	b.n	800519a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d107      	bne.n	80050b8 <HAL_ADC_ConfigChannel+0x5c8>
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	0e9b      	lsrs	r3, r3, #26
 80050ae:	3301      	adds	r3, #1
 80050b0:	069b      	lsls	r3, r3, #26
 80050b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80050b6:	e015      	b.n	80050e4 <HAL_ADC_ConfigChannel+0x5f4>
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c0:	fa93 f3a3 	rbit	r3, r3
 80050c4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80050c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80050ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d101      	bne.n	80050d4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80050d0:	2320      	movs	r3, #32
 80050d2:	e003      	b.n	80050dc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80050d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d6:	fab3 f383 	clz	r3, r3
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	3301      	adds	r3, #1
 80050de:	069b      	lsls	r3, r3, #26
 80050e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d109      	bne.n	8005104 <HAL_ADC_ConfigChannel+0x614>
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	0e9b      	lsrs	r3, r3, #26
 80050f6:	3301      	adds	r3, #1
 80050f8:	f003 031f 	and.w	r3, r3, #31
 80050fc:	2101      	movs	r1, #1
 80050fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005102:	e017      	b.n	8005134 <HAL_ADC_ConfigChannel+0x644>
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800510a:	6a3b      	ldr	r3, [r7, #32]
 800510c:	fa93 f3a3 	rbit	r3, r3
 8005110:	61fb      	str	r3, [r7, #28]
  return result;
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005118:	2b00      	cmp	r3, #0
 800511a:	d101      	bne.n	8005120 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800511c:	2320      	movs	r3, #32
 800511e:	e003      	b.n	8005128 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005122:	fab3 f383 	clz	r3, r3
 8005126:	b2db      	uxtb	r3, r3
 8005128:	3301      	adds	r3, #1
 800512a:	f003 031f 	and.w	r3, r3, #31
 800512e:	2101      	movs	r1, #1
 8005130:	fa01 f303 	lsl.w	r3, r1, r3
 8005134:	ea42 0103 	orr.w	r1, r2, r3
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005140:	2b00      	cmp	r3, #0
 8005142:	d10d      	bne.n	8005160 <HAL_ADC_ConfigChannel+0x670>
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	0e9b      	lsrs	r3, r3, #26
 800514a:	3301      	adds	r3, #1
 800514c:	f003 021f 	and.w	r2, r3, #31
 8005150:	4613      	mov	r3, r2
 8005152:	005b      	lsls	r3, r3, #1
 8005154:	4413      	add	r3, r2
 8005156:	3b1e      	subs	r3, #30
 8005158:	051b      	lsls	r3, r3, #20
 800515a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800515e:	e01b      	b.n	8005198 <HAL_ADC_ConfigChannel+0x6a8>
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	fa93 f3a3 	rbit	r3, r3
 800516c:	613b      	str	r3, [r7, #16]
  return result;
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d101      	bne.n	800517c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005178:	2320      	movs	r3, #32
 800517a:	e003      	b.n	8005184 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	fab3 f383 	clz	r3, r3
 8005182:	b2db      	uxtb	r3, r3
 8005184:	3301      	adds	r3, #1
 8005186:	f003 021f 	and.w	r2, r3, #31
 800518a:	4613      	mov	r3, r2
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	4413      	add	r3, r2
 8005190:	3b1e      	subs	r3, #30
 8005192:	051b      	lsls	r3, r3, #20
 8005194:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005198:	430b      	orrs	r3, r1
 800519a:	683a      	ldr	r2, [r7, #0]
 800519c:	6892      	ldr	r2, [r2, #8]
 800519e:	4619      	mov	r1, r3
 80051a0:	f7ff f8e1 	bl	8004366 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	4b09      	ldr	r3, [pc, #36]	; (80051d0 <HAL_ADC_ConfigChannel+0x6e0>)
 80051aa:	4013      	ands	r3, r2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 80be 	beq.w	800532e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051ba:	d004      	beq.n	80051c6 <HAL_ADC_ConfigChannel+0x6d6>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a04      	ldr	r2, [pc, #16]	; (80051d4 <HAL_ADC_ConfigChannel+0x6e4>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d10a      	bne.n	80051dc <HAL_ADC_ConfigChannel+0x6ec>
 80051c6:	4b04      	ldr	r3, [pc, #16]	; (80051d8 <HAL_ADC_ConfigChannel+0x6e8>)
 80051c8:	e009      	b.n	80051de <HAL_ADC_ConfigChannel+0x6ee>
 80051ca:	bf00      	nop
 80051cc:	407f0000 	.word	0x407f0000
 80051d0:	80080000 	.word	0x80080000
 80051d4:	50000100 	.word	0x50000100
 80051d8:	50000300 	.word	0x50000300
 80051dc:	4b59      	ldr	r3, [pc, #356]	; (8005344 <HAL_ADC_ConfigChannel+0x854>)
 80051de:	4618      	mov	r0, r3
 80051e0:	f7fe ffd6 	bl	8004190 <LL_ADC_GetCommonPathInternalCh>
 80051e4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a56      	ldr	r2, [pc, #344]	; (8005348 <HAL_ADC_ConfigChannel+0x858>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d004      	beq.n	80051fc <HAL_ADC_ConfigChannel+0x70c>
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a55      	ldr	r2, [pc, #340]	; (800534c <HAL_ADC_ConfigChannel+0x85c>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d13a      	bne.n	8005272 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80051fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005200:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d134      	bne.n	8005272 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005210:	d005      	beq.n	800521e <HAL_ADC_ConfigChannel+0x72e>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a4e      	ldr	r2, [pc, #312]	; (8005350 <HAL_ADC_ConfigChannel+0x860>)
 8005218:	4293      	cmp	r3, r2
 800521a:	f040 8085 	bne.w	8005328 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005226:	d004      	beq.n	8005232 <HAL_ADC_ConfigChannel+0x742>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a49      	ldr	r2, [pc, #292]	; (8005354 <HAL_ADC_ConfigChannel+0x864>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d101      	bne.n	8005236 <HAL_ADC_ConfigChannel+0x746>
 8005232:	4a49      	ldr	r2, [pc, #292]	; (8005358 <HAL_ADC_ConfigChannel+0x868>)
 8005234:	e000      	b.n	8005238 <HAL_ADC_ConfigChannel+0x748>
 8005236:	4a43      	ldr	r2, [pc, #268]	; (8005344 <HAL_ADC_ConfigChannel+0x854>)
 8005238:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800523c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005240:	4619      	mov	r1, r3
 8005242:	4610      	mov	r0, r2
 8005244:	f7fe ff91 	bl	800416a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005248:	4b44      	ldr	r3, [pc, #272]	; (800535c <HAL_ADC_ConfigChannel+0x86c>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	099b      	lsrs	r3, r3, #6
 800524e:	4a44      	ldr	r2, [pc, #272]	; (8005360 <HAL_ADC_ConfigChannel+0x870>)
 8005250:	fba2 2303 	umull	r2, r3, r2, r3
 8005254:	099b      	lsrs	r3, r3, #6
 8005256:	1c5a      	adds	r2, r3, #1
 8005258:	4613      	mov	r3, r2
 800525a:	005b      	lsls	r3, r3, #1
 800525c:	4413      	add	r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005262:	e002      	b.n	800526a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	3b01      	subs	r3, #1
 8005268:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1f9      	bne.n	8005264 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005270:	e05a      	b.n	8005328 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a3b      	ldr	r2, [pc, #236]	; (8005364 <HAL_ADC_ConfigChannel+0x874>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d125      	bne.n	80052c8 <HAL_ADC_ConfigChannel+0x7d8>
 800527c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005280:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d11f      	bne.n	80052c8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a31      	ldr	r2, [pc, #196]	; (8005354 <HAL_ADC_ConfigChannel+0x864>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d104      	bne.n	800529c <HAL_ADC_ConfigChannel+0x7ac>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a34      	ldr	r2, [pc, #208]	; (8005368 <HAL_ADC_ConfigChannel+0x878>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d047      	beq.n	800532c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052a4:	d004      	beq.n	80052b0 <HAL_ADC_ConfigChannel+0x7c0>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a2a      	ldr	r2, [pc, #168]	; (8005354 <HAL_ADC_ConfigChannel+0x864>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d101      	bne.n	80052b4 <HAL_ADC_ConfigChannel+0x7c4>
 80052b0:	4a29      	ldr	r2, [pc, #164]	; (8005358 <HAL_ADC_ConfigChannel+0x868>)
 80052b2:	e000      	b.n	80052b6 <HAL_ADC_ConfigChannel+0x7c6>
 80052b4:	4a23      	ldr	r2, [pc, #140]	; (8005344 <HAL_ADC_ConfigChannel+0x854>)
 80052b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80052ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052be:	4619      	mov	r1, r3
 80052c0:	4610      	mov	r0, r2
 80052c2:	f7fe ff52 	bl	800416a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80052c6:	e031      	b.n	800532c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a27      	ldr	r2, [pc, #156]	; (800536c <HAL_ADC_ConfigChannel+0x87c>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d12d      	bne.n	800532e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80052d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80052d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d127      	bne.n	800532e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a1c      	ldr	r2, [pc, #112]	; (8005354 <HAL_ADC_ConfigChannel+0x864>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d022      	beq.n	800532e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052f0:	d004      	beq.n	80052fc <HAL_ADC_ConfigChannel+0x80c>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a17      	ldr	r2, [pc, #92]	; (8005354 <HAL_ADC_ConfigChannel+0x864>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d101      	bne.n	8005300 <HAL_ADC_ConfigChannel+0x810>
 80052fc:	4a16      	ldr	r2, [pc, #88]	; (8005358 <HAL_ADC_ConfigChannel+0x868>)
 80052fe:	e000      	b.n	8005302 <HAL_ADC_ConfigChannel+0x812>
 8005300:	4a10      	ldr	r2, [pc, #64]	; (8005344 <HAL_ADC_ConfigChannel+0x854>)
 8005302:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005306:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800530a:	4619      	mov	r1, r3
 800530c:	4610      	mov	r0, r2
 800530e:	f7fe ff2c 	bl	800416a <LL_ADC_SetCommonPathInternalCh>
 8005312:	e00c      	b.n	800532e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005318:	f043 0220 	orr.w	r2, r3, #32
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8005326:	e002      	b.n	800532e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005328:	bf00      	nop
 800532a:	e000      	b.n	800532e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800532c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005336:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800533a:	4618      	mov	r0, r3
 800533c:	37d8      	adds	r7, #216	; 0xd8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	50000700 	.word	0x50000700
 8005348:	c3210000 	.word	0xc3210000
 800534c:	90c00010 	.word	0x90c00010
 8005350:	50000600 	.word	0x50000600
 8005354:	50000100 	.word	0x50000100
 8005358:	50000300 	.word	0x50000300
 800535c:	20000004 	.word	0x20000004
 8005360:	053e2d63 	.word	0x053e2d63
 8005364:	c7520000 	.word	0xc7520000
 8005368:	50000500 	.word	0x50000500
 800536c:	cb840000 	.word	0xcb840000

08005370 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4618      	mov	r0, r3
 800537e:	f7ff f8b5 	bl	80044ec <LL_ADC_IsEnabled>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d14d      	bne.n	8005424 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	689a      	ldr	r2, [r3, #8]
 800538e:	4b28      	ldr	r3, [pc, #160]	; (8005430 <ADC_Enable+0xc0>)
 8005390:	4013      	ands	r3, r2
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00d      	beq.n	80053b2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800539a:	f043 0210 	orr.w	r2, r3, #16
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053a6:	f043 0201 	orr.w	r2, r3, #1
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e039      	b.n	8005426 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7ff f884 	bl	80044c4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80053bc:	f7fe fe94 	bl	80040e8 <HAL_GetTick>
 80053c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80053c2:	e028      	b.n	8005416 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7ff f88f 	bl	80044ec <LL_ADC_IsEnabled>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d104      	bne.n	80053de <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4618      	mov	r0, r3
 80053da:	f7ff f873 	bl	80044c4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80053de:	f7fe fe83 	bl	80040e8 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d914      	bls.n	8005416 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d00d      	beq.n	8005416 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053fe:	f043 0210 	orr.w	r2, r3, #16
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800540a:	f043 0201 	orr.w	r2, r3, #1
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e007      	b.n	8005426 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0301 	and.w	r3, r3, #1
 8005420:	2b01      	cmp	r3, #1
 8005422:	d1cf      	bne.n	80053c4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3710      	adds	r7, #16
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	8000003f 	.word	0x8000003f

08005434 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005440:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005446:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800544a:	2b00      	cmp	r3, #0
 800544c:	d14b      	bne.n	80054e6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005452:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0308 	and.w	r3, r3, #8
 8005464:	2b00      	cmp	r3, #0
 8005466:	d021      	beq.n	80054ac <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4618      	mov	r0, r3
 800546e:	f7fe ff3b 	bl	80042e8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d032      	beq.n	80054de <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d12b      	bne.n	80054de <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800548a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005496:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d11f      	bne.n	80054de <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054a2:	f043 0201 	orr.w	r2, r3, #1
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80054aa:	e018      	b.n	80054de <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	f003 0302 	and.w	r3, r3, #2
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d111      	bne.n	80054de <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d105      	bne.n	80054de <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054d6:	f043 0201 	orr.w	r2, r3, #1
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f7ff fae8 	bl	8004ab4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80054e4:	e00e      	b.n	8005504 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ea:	f003 0310 	and.w	r3, r3, #16
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d003      	beq.n	80054fa <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80054f2:	68f8      	ldr	r0, [r7, #12]
 80054f4:	f7ff faf2 	bl	8004adc <HAL_ADC_ErrorCallback>
}
 80054f8:	e004      	b.n	8005504 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	4798      	blx	r3
}
 8005504:	bf00      	nop
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005518:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800551a:	68f8      	ldr	r0, [r7, #12]
 800551c:	f7ff fad4 	bl	8004ac8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005520:	bf00      	nop
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005534:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800553a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005546:	f043 0204 	orr.w	r2, r3, #4
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f7ff fac4 	bl	8004adc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005554:	bf00      	nop
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f003 0307 	and.w	r3, r3, #7
 800556a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800556c:	4b0c      	ldr	r3, [pc, #48]	; (80055a0 <__NVIC_SetPriorityGrouping+0x44>)
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005578:	4013      	ands	r3, r2
 800557a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005584:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800558c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800558e:	4a04      	ldr	r2, [pc, #16]	; (80055a0 <__NVIC_SetPriorityGrouping+0x44>)
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	60d3      	str	r3, [r2, #12]
}
 8005594:	bf00      	nop
 8005596:	3714      	adds	r7, #20
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr
 80055a0:	e000ed00 	.word	0xe000ed00

080055a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80055a4:	b480      	push	{r7}
 80055a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055a8:	4b04      	ldr	r3, [pc, #16]	; (80055bc <__NVIC_GetPriorityGrouping+0x18>)
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	0a1b      	lsrs	r3, r3, #8
 80055ae:	f003 0307 	and.w	r3, r3, #7
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr
 80055bc:	e000ed00 	.word	0xe000ed00

080055c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	4603      	mov	r3, r0
 80055c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	db0b      	blt.n	80055ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055d2:	79fb      	ldrb	r3, [r7, #7]
 80055d4:	f003 021f 	and.w	r2, r3, #31
 80055d8:	4907      	ldr	r1, [pc, #28]	; (80055f8 <__NVIC_EnableIRQ+0x38>)
 80055da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055de:	095b      	lsrs	r3, r3, #5
 80055e0:	2001      	movs	r0, #1
 80055e2:	fa00 f202 	lsl.w	r2, r0, r2
 80055e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80055ea:	bf00      	nop
 80055ec:	370c      	adds	r7, #12
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	e000e100 	.word	0xe000e100

080055fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	4603      	mov	r3, r0
 8005604:	6039      	str	r1, [r7, #0]
 8005606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800560c:	2b00      	cmp	r3, #0
 800560e:	db0a      	blt.n	8005626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	b2da      	uxtb	r2, r3
 8005614:	490c      	ldr	r1, [pc, #48]	; (8005648 <__NVIC_SetPriority+0x4c>)
 8005616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800561a:	0112      	lsls	r2, r2, #4
 800561c:	b2d2      	uxtb	r2, r2
 800561e:	440b      	add	r3, r1
 8005620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005624:	e00a      	b.n	800563c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	b2da      	uxtb	r2, r3
 800562a:	4908      	ldr	r1, [pc, #32]	; (800564c <__NVIC_SetPriority+0x50>)
 800562c:	79fb      	ldrb	r3, [r7, #7]
 800562e:	f003 030f 	and.w	r3, r3, #15
 8005632:	3b04      	subs	r3, #4
 8005634:	0112      	lsls	r2, r2, #4
 8005636:	b2d2      	uxtb	r2, r2
 8005638:	440b      	add	r3, r1
 800563a:	761a      	strb	r2, [r3, #24]
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	e000e100 	.word	0xe000e100
 800564c:	e000ed00 	.word	0xe000ed00

08005650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005650:	b480      	push	{r7}
 8005652:	b089      	sub	sp, #36	; 0x24
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f003 0307 	and.w	r3, r3, #7
 8005662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	f1c3 0307 	rsb	r3, r3, #7
 800566a:	2b04      	cmp	r3, #4
 800566c:	bf28      	it	cs
 800566e:	2304      	movcs	r3, #4
 8005670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	3304      	adds	r3, #4
 8005676:	2b06      	cmp	r3, #6
 8005678:	d902      	bls.n	8005680 <NVIC_EncodePriority+0x30>
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	3b03      	subs	r3, #3
 800567e:	e000      	b.n	8005682 <NVIC_EncodePriority+0x32>
 8005680:	2300      	movs	r3, #0
 8005682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005684:	f04f 32ff 	mov.w	r2, #4294967295
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	fa02 f303 	lsl.w	r3, r2, r3
 800568e:	43da      	mvns	r2, r3
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	401a      	ands	r2, r3
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005698:	f04f 31ff 	mov.w	r1, #4294967295
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	fa01 f303 	lsl.w	r3, r1, r3
 80056a2:	43d9      	mvns	r1, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056a8:	4313      	orrs	r3, r2
         );
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3724      	adds	r7, #36	; 0x24
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b082      	sub	sp, #8
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7ff ff4c 	bl	800555c <__NVIC_SetPriorityGrouping>
}
 80056c4:	bf00      	nop
 80056c6:	3708      	adds	r7, #8
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b086      	sub	sp, #24
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	4603      	mov	r3, r0
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]
 80056d8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80056da:	f7ff ff63 	bl	80055a4 <__NVIC_GetPriorityGrouping>
 80056de:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	68b9      	ldr	r1, [r7, #8]
 80056e4:	6978      	ldr	r0, [r7, #20]
 80056e6:	f7ff ffb3 	bl	8005650 <NVIC_EncodePriority>
 80056ea:	4602      	mov	r2, r0
 80056ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056f0:	4611      	mov	r1, r2
 80056f2:	4618      	mov	r0, r3
 80056f4:	f7ff ff82 	bl	80055fc <__NVIC_SetPriority>
}
 80056f8:	bf00      	nop
 80056fa:	3718      	adds	r7, #24
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	4603      	mov	r3, r0
 8005708:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800570a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800570e:	4618      	mov	r0, r3
 8005710:	f7ff ff56 	bl	80055c0 <__NVIC_EnableIRQ>
}
 8005714:	bf00      	nop
 8005716:	3708      	adds	r7, #8
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e08d      	b.n	800584a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	461a      	mov	r2, r3
 8005734:	4b47      	ldr	r3, [pc, #284]	; (8005854 <HAL_DMA_Init+0x138>)
 8005736:	429a      	cmp	r2, r3
 8005738:	d80f      	bhi.n	800575a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	461a      	mov	r2, r3
 8005740:	4b45      	ldr	r3, [pc, #276]	; (8005858 <HAL_DMA_Init+0x13c>)
 8005742:	4413      	add	r3, r2
 8005744:	4a45      	ldr	r2, [pc, #276]	; (800585c <HAL_DMA_Init+0x140>)
 8005746:	fba2 2303 	umull	r2, r3, r2, r3
 800574a:	091b      	lsrs	r3, r3, #4
 800574c:	009a      	lsls	r2, r3, #2
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a42      	ldr	r2, [pc, #264]	; (8005860 <HAL_DMA_Init+0x144>)
 8005756:	641a      	str	r2, [r3, #64]	; 0x40
 8005758:	e00e      	b.n	8005778 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	461a      	mov	r2, r3
 8005760:	4b40      	ldr	r3, [pc, #256]	; (8005864 <HAL_DMA_Init+0x148>)
 8005762:	4413      	add	r3, r2
 8005764:	4a3d      	ldr	r2, [pc, #244]	; (800585c <HAL_DMA_Init+0x140>)
 8005766:	fba2 2303 	umull	r2, r3, r2, r3
 800576a:	091b      	lsrs	r3, r3, #4
 800576c:	009a      	lsls	r2, r3, #2
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a3c      	ldr	r2, [pc, #240]	; (8005868 <HAL_DMA_Init+0x14c>)
 8005776:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2202      	movs	r2, #2
 800577c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800578e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005792:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800579c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	4313      	orrs	r3, r2
 80057c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 fa76 	bl	8005cbc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057d8:	d102      	bne.n	80057e0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685a      	ldr	r2, [r3, #4]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057e8:	b2d2      	uxtb	r2, r2
 80057ea:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80057f4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d010      	beq.n	8005820 <HAL_DMA_Init+0x104>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	2b04      	cmp	r3, #4
 8005804:	d80c      	bhi.n	8005820 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 fa96 	bl	8005d38 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005810:	2200      	movs	r2, #0
 8005812:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800581c:	605a      	str	r2, [r3, #4]
 800581e:	e008      	b.n	8005832 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3710      	adds	r7, #16
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	40020407 	.word	0x40020407
 8005858:	bffdfff8 	.word	0xbffdfff8
 800585c:	cccccccd 	.word	0xcccccccd
 8005860:	40020000 	.word	0x40020000
 8005864:	bffdfbf8 	.word	0xbffdfbf8
 8005868:	40020400 	.word	0x40020400

0800586c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b086      	sub	sp, #24
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
 8005878:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800587a:	2300      	movs	r3, #0
 800587c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005884:	2b01      	cmp	r3, #1
 8005886:	d101      	bne.n	800588c <HAL_DMA_Start_IT+0x20>
 8005888:	2302      	movs	r3, #2
 800588a:	e066      	b.n	800595a <HAL_DMA_Start_IT+0xee>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800589a:	b2db      	uxtb	r3, r3
 800589c:	2b01      	cmp	r3, #1
 800589e:	d155      	bne.n	800594c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2202      	movs	r2, #2
 80058a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f022 0201 	bic.w	r2, r2, #1
 80058bc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	68b9      	ldr	r1, [r7, #8]
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f000 f9bb 	bl	8005c40 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d008      	beq.n	80058e4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f042 020e 	orr.w	r2, r2, #14
 80058e0:	601a      	str	r2, [r3, #0]
 80058e2:	e00f      	b.n	8005904 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f022 0204 	bic.w	r2, r2, #4
 80058f2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f042 020a 	orr.w	r2, r2, #10
 8005902:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d007      	beq.n	8005922 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800591c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005920:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005926:	2b00      	cmp	r3, #0
 8005928:	d007      	beq.n	800593a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005934:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005938:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f042 0201 	orr.w	r2, r2, #1
 8005948:	601a      	str	r2, [r3, #0]
 800594a:	e005      	b.n	8005958 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005954:	2302      	movs	r3, #2
 8005956:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005958:	7dfb      	ldrb	r3, [r7, #23]
}
 800595a:	4618      	mov	r0, r3
 800595c:	3718      	adds	r7, #24
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}

08005962 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005962:	b480      	push	{r7}
 8005964:	b085      	sub	sp, #20
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800596a:	2300      	movs	r3, #0
 800596c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b02      	cmp	r3, #2
 8005978:	d005      	beq.n	8005986 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2204      	movs	r2, #4
 800597e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	73fb      	strb	r3, [r7, #15]
 8005984:	e037      	b.n	80059f6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f022 020e 	bic.w	r2, r2, #14
 8005994:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059a4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f022 0201 	bic.w	r2, r2, #1
 80059b4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ba:	f003 021f 	and.w	r2, r3, #31
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c2:	2101      	movs	r1, #1
 80059c4:	fa01 f202 	lsl.w	r2, r1, r2
 80059c8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80059d2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00c      	beq.n	80059f6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059ea:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80059f4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8005a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3714      	adds	r7, #20
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d00d      	beq.n	8005a48 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2204      	movs	r2, #4
 8005a30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	73fb      	strb	r3, [r7, #15]
 8005a46:	e047      	b.n	8005ad8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f022 020e 	bic.w	r2, r2, #14
 8005a56:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f022 0201 	bic.w	r2, r2, #1
 8005a66:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a7c:	f003 021f 	and.w	r2, r3, #31
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a84:	2101      	movs	r1, #1
 8005a86:	fa01 f202 	lsl.w	r2, r1, r2
 8005a8a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005a94:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00c      	beq.n	8005ab8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005aac:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005ab6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d003      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	4798      	blx	r3
    }
  }
  return status;
 8005ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b084      	sub	sp, #16
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005afe:	f003 031f 	and.w	r3, r3, #31
 8005b02:	2204      	movs	r2, #4
 8005b04:	409a      	lsls	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	4013      	ands	r3, r2
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d026      	beq.n	8005b5c <HAL_DMA_IRQHandler+0x7a>
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	f003 0304 	and.w	r3, r3, #4
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d021      	beq.n	8005b5c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0320 	and.w	r3, r3, #32
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d107      	bne.n	8005b36 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f022 0204 	bic.w	r2, r2, #4
 8005b34:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b3a:	f003 021f 	and.w	r2, r3, #31
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b42:	2104      	movs	r1, #4
 8005b44:	fa01 f202 	lsl.w	r2, r1, r2
 8005b48:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d071      	beq.n	8005c36 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005b5a:	e06c      	b.n	8005c36 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b60:	f003 031f 	and.w	r3, r3, #31
 8005b64:	2202      	movs	r2, #2
 8005b66:	409a      	lsls	r2, r3
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d02e      	beq.n	8005bce <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	f003 0302 	and.w	r3, r3, #2
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d029      	beq.n	8005bce <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0320 	and.w	r3, r3, #32
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d10b      	bne.n	8005ba0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f022 020a 	bic.w	r2, r2, #10
 8005b96:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ba4:	f003 021f 	and.w	r2, r3, #31
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bac:	2102      	movs	r1, #2
 8005bae:	fa01 f202 	lsl.w	r2, r1, r2
 8005bb2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d038      	beq.n	8005c36 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005bcc:	e033      	b.n	8005c36 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd2:	f003 031f 	and.w	r3, r3, #31
 8005bd6:	2208      	movs	r2, #8
 8005bd8:	409a      	lsls	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	4013      	ands	r3, r2
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d02a      	beq.n	8005c38 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	f003 0308 	and.w	r3, r3, #8
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d025      	beq.n	8005c38 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f022 020e 	bic.w	r2, r2, #14
 8005bfa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c00:	f003 021f 	and.w	r2, r3, #31
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c08:	2101      	movs	r1, #1
 8005c0a:	fa01 f202 	lsl.w	r2, r1, r2
 8005c0e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d004      	beq.n	8005c38 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005c36:	bf00      	nop
 8005c38:	bf00      	nop
}
 8005c3a:	3710      	adds	r7, #16
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	607a      	str	r2, [r7, #4]
 8005c4c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005c56:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d004      	beq.n	8005c6a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005c68:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c6e:	f003 021f 	and.w	r2, r3, #31
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c76:	2101      	movs	r1, #1
 8005c78:	fa01 f202 	lsl.w	r2, r1, r2
 8005c7c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	683a      	ldr	r2, [r7, #0]
 8005c84:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	2b10      	cmp	r3, #16
 8005c8c:	d108      	bne.n	8005ca0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005c9e:	e007      	b.n	8005cb0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68ba      	ldr	r2, [r7, #8]
 8005ca6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	60da      	str	r2, [r3, #12]
}
 8005cb0:	bf00      	nop
 8005cb2:	3714      	adds	r7, #20
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b087      	sub	sp, #28
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	461a      	mov	r2, r3
 8005cca:	4b16      	ldr	r3, [pc, #88]	; (8005d24 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d802      	bhi.n	8005cd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005cd0:	4b15      	ldr	r3, [pc, #84]	; (8005d28 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005cd2:	617b      	str	r3, [r7, #20]
 8005cd4:	e001      	b.n	8005cda <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005cd6:	4b15      	ldr	r3, [pc, #84]	; (8005d2c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005cd8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	3b08      	subs	r3, #8
 8005ce6:	4a12      	ldr	r2, [pc, #72]	; (8005d30 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cec:	091b      	lsrs	r3, r3, #4
 8005cee:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cf4:	089b      	lsrs	r3, r3, #2
 8005cf6:	009a      	lsls	r2, r3, #2
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a0b      	ldr	r2, [pc, #44]	; (8005d34 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005d06:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f003 031f 	and.w	r3, r3, #31
 8005d0e:	2201      	movs	r2, #1
 8005d10:	409a      	lsls	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005d16:	bf00      	nop
 8005d18:	371c      	adds	r7, #28
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	40020407 	.word	0x40020407
 8005d28:	40020800 	.word	0x40020800
 8005d2c:	40020820 	.word	0x40020820
 8005d30:	cccccccd 	.word	0xcccccccd
 8005d34:	40020880 	.word	0x40020880

08005d38 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	4b0b      	ldr	r3, [pc, #44]	; (8005d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005d4c:	4413      	add	r3, r2
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	461a      	mov	r2, r3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a08      	ldr	r2, [pc, #32]	; (8005d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005d5a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	f003 031f 	and.w	r3, r3, #31
 8005d64:	2201      	movs	r2, #1
 8005d66:	409a      	lsls	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005d6c:	bf00      	nop
 8005d6e:	3714      	adds	r7, #20
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr
 8005d78:	1000823f 	.word	0x1000823f
 8005d7c:	40020940 	.word	0x40020940

08005d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b087      	sub	sp, #28
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005d8e:	e15a      	b.n	8006046 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	2101      	movs	r1, #1
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	fa01 f303 	lsl.w	r3, r1, r3
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f000 814c 	beq.w	8006040 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	f003 0303 	and.w	r3, r3, #3
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d005      	beq.n	8005dc0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d130      	bne.n	8005e22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	005b      	lsls	r3, r3, #1
 8005dca:	2203      	movs	r2, #3
 8005dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd0:	43db      	mvns	r3, r3
 8005dd2:	693a      	ldr	r2, [r7, #16]
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	68da      	ldr	r2, [r3, #12]
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	005b      	lsls	r3, r3, #1
 8005de0:	fa02 f303 	lsl.w	r3, r2, r3
 8005de4:	693a      	ldr	r2, [r7, #16]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005df6:	2201      	movs	r2, #1
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfe:	43db      	mvns	r3, r3
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	4013      	ands	r3, r2
 8005e04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	091b      	lsrs	r3, r3, #4
 8005e0c:	f003 0201 	and.w	r2, r3, #1
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	fa02 f303 	lsl.w	r3, r2, r3
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f003 0303 	and.w	r3, r3, #3
 8005e2a:	2b03      	cmp	r3, #3
 8005e2c:	d017      	beq.n	8005e5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	005b      	lsls	r3, r3, #1
 8005e38:	2203      	movs	r2, #3
 8005e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3e:	43db      	mvns	r3, r3
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	4013      	ands	r3, r2
 8005e44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	689a      	ldr	r2, [r3, #8]
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	005b      	lsls	r3, r3, #1
 8005e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e52:	693a      	ldr	r2, [r7, #16]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f003 0303 	and.w	r3, r3, #3
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d123      	bne.n	8005eb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	08da      	lsrs	r2, r3, #3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	3208      	adds	r2, #8
 8005e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	f003 0307 	and.w	r3, r3, #7
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	220f      	movs	r2, #15
 8005e82:	fa02 f303 	lsl.w	r3, r2, r3
 8005e86:	43db      	mvns	r3, r3
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	691a      	ldr	r2, [r3, #16]
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	f003 0307 	and.w	r3, r3, #7
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	08da      	lsrs	r2, r3, #3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	3208      	adds	r2, #8
 8005eac:	6939      	ldr	r1, [r7, #16]
 8005eae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	005b      	lsls	r3, r3, #1
 8005ebc:	2203      	movs	r2, #3
 8005ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec2:	43db      	mvns	r3, r3
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f003 0203 	and.w	r2, r3, #3
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	005b      	lsls	r3, r3, #1
 8005ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f000 80a6 	beq.w	8006040 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ef4:	4b5b      	ldr	r3, [pc, #364]	; (8006064 <HAL_GPIO_Init+0x2e4>)
 8005ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ef8:	4a5a      	ldr	r2, [pc, #360]	; (8006064 <HAL_GPIO_Init+0x2e4>)
 8005efa:	f043 0301 	orr.w	r3, r3, #1
 8005efe:	6613      	str	r3, [r2, #96]	; 0x60
 8005f00:	4b58      	ldr	r3, [pc, #352]	; (8006064 <HAL_GPIO_Init+0x2e4>)
 8005f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	60bb      	str	r3, [r7, #8]
 8005f0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f0c:	4a56      	ldr	r2, [pc, #344]	; (8006068 <HAL_GPIO_Init+0x2e8>)
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	089b      	lsrs	r3, r3, #2
 8005f12:	3302      	adds	r3, #2
 8005f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	f003 0303 	and.w	r3, r3, #3
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	220f      	movs	r2, #15
 8005f24:	fa02 f303 	lsl.w	r3, r2, r3
 8005f28:	43db      	mvns	r3, r3
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005f36:	d01f      	beq.n	8005f78 <HAL_GPIO_Init+0x1f8>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a4c      	ldr	r2, [pc, #304]	; (800606c <HAL_GPIO_Init+0x2ec>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d019      	beq.n	8005f74 <HAL_GPIO_Init+0x1f4>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a4b      	ldr	r2, [pc, #300]	; (8006070 <HAL_GPIO_Init+0x2f0>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d013      	beq.n	8005f70 <HAL_GPIO_Init+0x1f0>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a4a      	ldr	r2, [pc, #296]	; (8006074 <HAL_GPIO_Init+0x2f4>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d00d      	beq.n	8005f6c <HAL_GPIO_Init+0x1ec>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a49      	ldr	r2, [pc, #292]	; (8006078 <HAL_GPIO_Init+0x2f8>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d007      	beq.n	8005f68 <HAL_GPIO_Init+0x1e8>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a48      	ldr	r2, [pc, #288]	; (800607c <HAL_GPIO_Init+0x2fc>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d101      	bne.n	8005f64 <HAL_GPIO_Init+0x1e4>
 8005f60:	2305      	movs	r3, #5
 8005f62:	e00a      	b.n	8005f7a <HAL_GPIO_Init+0x1fa>
 8005f64:	2306      	movs	r3, #6
 8005f66:	e008      	b.n	8005f7a <HAL_GPIO_Init+0x1fa>
 8005f68:	2304      	movs	r3, #4
 8005f6a:	e006      	b.n	8005f7a <HAL_GPIO_Init+0x1fa>
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e004      	b.n	8005f7a <HAL_GPIO_Init+0x1fa>
 8005f70:	2302      	movs	r3, #2
 8005f72:	e002      	b.n	8005f7a <HAL_GPIO_Init+0x1fa>
 8005f74:	2301      	movs	r3, #1
 8005f76:	e000      	b.n	8005f7a <HAL_GPIO_Init+0x1fa>
 8005f78:	2300      	movs	r3, #0
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	f002 0203 	and.w	r2, r2, #3
 8005f80:	0092      	lsls	r2, r2, #2
 8005f82:	4093      	lsls	r3, r2
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f8a:	4937      	ldr	r1, [pc, #220]	; (8006068 <HAL_GPIO_Init+0x2e8>)
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	089b      	lsrs	r3, r3, #2
 8005f90:	3302      	adds	r3, #2
 8005f92:	693a      	ldr	r2, [r7, #16]
 8005f94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f98:	4b39      	ldr	r3, [pc, #228]	; (8006080 <HAL_GPIO_Init+0x300>)
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	43db      	mvns	r3, r3
 8005fa2:	693a      	ldr	r2, [r7, #16]
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d003      	beq.n	8005fbc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005fb4:	693a      	ldr	r2, [r7, #16]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005fbc:	4a30      	ldr	r2, [pc, #192]	; (8006080 <HAL_GPIO_Init+0x300>)
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005fc2:	4b2f      	ldr	r3, [pc, #188]	; (8006080 <HAL_GPIO_Init+0x300>)
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	43db      	mvns	r3, r3
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	4013      	ands	r3, r2
 8005fd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d003      	beq.n	8005fe6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005fe6:	4a26      	ldr	r2, [pc, #152]	; (8006080 <HAL_GPIO_Init+0x300>)
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005fec:	4b24      	ldr	r3, [pc, #144]	; (8006080 <HAL_GPIO_Init+0x300>)
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	43db      	mvns	r3, r3
 8005ff6:	693a      	ldr	r2, [r7, #16]
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d003      	beq.n	8006010 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006008:	693a      	ldr	r2, [r7, #16]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	4313      	orrs	r3, r2
 800600e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006010:	4a1b      	ldr	r2, [pc, #108]	; (8006080 <HAL_GPIO_Init+0x300>)
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006016:	4b1a      	ldr	r3, [pc, #104]	; (8006080 <HAL_GPIO_Init+0x300>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	43db      	mvns	r3, r3
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	4013      	ands	r3, r2
 8006024:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800602e:	2b00      	cmp	r3, #0
 8006030:	d003      	beq.n	800603a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006032:	693a      	ldr	r2, [r7, #16]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	4313      	orrs	r3, r2
 8006038:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800603a:	4a11      	ldr	r2, [pc, #68]	; (8006080 <HAL_GPIO_Init+0x300>)
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	3301      	adds	r3, #1
 8006044:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	fa22 f303 	lsr.w	r3, r2, r3
 8006050:	2b00      	cmp	r3, #0
 8006052:	f47f ae9d 	bne.w	8005d90 <HAL_GPIO_Init+0x10>
  }
}
 8006056:	bf00      	nop
 8006058:	bf00      	nop
 800605a:	371c      	adds	r7, #28
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr
 8006064:	40021000 	.word	0x40021000
 8006068:	40010000 	.word	0x40010000
 800606c:	48000400 	.word	0x48000400
 8006070:	48000800 	.word	0x48000800
 8006074:	48000c00 	.word	0x48000c00
 8006078:	48001000 	.word	0x48001000
 800607c:	48001400 	.word	0x48001400
 8006080:	40010400 	.word	0x40010400

08006084 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	460b      	mov	r3, r1
 800608e:	807b      	strh	r3, [r7, #2]
 8006090:	4613      	mov	r3, r2
 8006092:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006094:	787b      	ldrb	r3, [r7, #1]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d003      	beq.n	80060a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800609a:	887a      	ldrh	r2, [r7, #2]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80060a0:	e002      	b.n	80060a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80060a2:	887a      	ldrh	r2, [r7, #2]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80060a8:	bf00      	nop
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	460b      	mov	r3, r1
 80060be:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	695b      	ldr	r3, [r3, #20]
 80060c4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80060c6:	887a      	ldrh	r2, [r7, #2]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	4013      	ands	r3, r2
 80060cc:	041a      	lsls	r2, r3, #16
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	43d9      	mvns	r1, r3
 80060d2:	887b      	ldrh	r3, [r7, #2]
 80060d4:	400b      	ands	r3, r1
 80060d6:	431a      	orrs	r2, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	619a      	str	r2, [r3, #24]
}
 80060dc:	bf00      	nop
 80060de:	3714      	adds	r7, #20
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	4603      	mov	r3, r0
 80060f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80060f2:	4b08      	ldr	r3, [pc, #32]	; (8006114 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80060f4:	695a      	ldr	r2, [r3, #20]
 80060f6:	88fb      	ldrh	r3, [r7, #6]
 80060f8:	4013      	ands	r3, r2
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d006      	beq.n	800610c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80060fe:	4a05      	ldr	r2, [pc, #20]	; (8006114 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006100:	88fb      	ldrh	r3, [r7, #6]
 8006102:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006104:	88fb      	ldrh	r3, [r7, #6]
 8006106:	4618      	mov	r0, r3
 8006108:	f000 f806 	bl	8006118 <HAL_GPIO_EXTI_Callback>
  }
}
 800610c:	bf00      	nop
 800610e:	3708      	adds	r7, #8
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	40010400 	.word	0x40010400

08006118 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	4603      	mov	r3, r0
 8006120:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006122:	bf00      	nop
 8006124:	370c      	adds	r7, #12
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800612e:	b580      	push	{r7, lr}
 8006130:	b082      	sub	sp, #8
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d101      	bne.n	8006140 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e081      	b.n	8006244 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006146:	b2db      	uxtb	r3, r3
 8006148:	2b00      	cmp	r3, #0
 800614a:	d106      	bne.n	800615a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f7fc fa9b 	bl	8002690 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2224      	movs	r2, #36	; 0x24
 800615e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f022 0201 	bic.w	r2, r2, #1
 8006170:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	685a      	ldr	r2, [r3, #4]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800617e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	689a      	ldr	r2, [r3, #8]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800618e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	2b01      	cmp	r3, #1
 8006196:	d107      	bne.n	80061a8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	689a      	ldr	r2, [r3, #8]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061a4:	609a      	str	r2, [r3, #8]
 80061a6:	e006      	b.n	80061b6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	689a      	ldr	r2, [r3, #8]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80061b4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d104      	bne.n	80061c8 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061c6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	6812      	ldr	r2, [r2, #0]
 80061d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80061d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061da:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68da      	ldr	r2, [r3, #12]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061ea:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	691a      	ldr	r2, [r3, #16]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	695b      	ldr	r3, [r3, #20]
 80061f4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	430a      	orrs	r2, r1
 8006204:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	69d9      	ldr	r1, [r3, #28]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a1a      	ldr	r2, [r3, #32]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	430a      	orrs	r2, r1
 8006214:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f042 0201 	orr.w	r2, r2, #1
 8006224:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2220      	movs	r2, #32
 8006230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3708      	adds	r7, #8
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b088      	sub	sp, #32
 8006250:	af02      	add	r7, sp, #8
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	4608      	mov	r0, r1
 8006256:	4611      	mov	r1, r2
 8006258:	461a      	mov	r2, r3
 800625a:	4603      	mov	r3, r0
 800625c:	817b      	strh	r3, [r7, #10]
 800625e:	460b      	mov	r3, r1
 8006260:	813b      	strh	r3, [r7, #8]
 8006262:	4613      	mov	r3, r2
 8006264:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800626c:	b2db      	uxtb	r3, r3
 800626e:	2b20      	cmp	r3, #32
 8006270:	f040 80f9 	bne.w	8006466 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006274:	6a3b      	ldr	r3, [r7, #32]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d002      	beq.n	8006280 <HAL_I2C_Mem_Write+0x34>
 800627a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800627c:	2b00      	cmp	r3, #0
 800627e:	d105      	bne.n	800628c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006286:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e0ed      	b.n	8006468 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006292:	2b01      	cmp	r3, #1
 8006294:	d101      	bne.n	800629a <HAL_I2C_Mem_Write+0x4e>
 8006296:	2302      	movs	r3, #2
 8006298:	e0e6      	b.n	8006468 <HAL_I2C_Mem_Write+0x21c>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2201      	movs	r2, #1
 800629e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80062a2:	f7fd ff21 	bl	80040e8 <HAL_GetTick>
 80062a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	9300      	str	r3, [sp, #0]
 80062ac:	2319      	movs	r3, #25
 80062ae:	2201      	movs	r2, #1
 80062b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	f000 fac3 	bl	8006840 <I2C_WaitOnFlagUntilTimeout>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d001      	beq.n	80062c4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e0d1      	b.n	8006468 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2221      	movs	r2, #33	; 0x21
 80062c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2240      	movs	r2, #64	; 0x40
 80062d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6a3a      	ldr	r2, [r7, #32]
 80062de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80062e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80062ec:	88f8      	ldrh	r0, [r7, #6]
 80062ee:	893a      	ldrh	r2, [r7, #8]
 80062f0:	8979      	ldrh	r1, [r7, #10]
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	9301      	str	r3, [sp, #4]
 80062f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f8:	9300      	str	r3, [sp, #0]
 80062fa:	4603      	mov	r3, r0
 80062fc:	68f8      	ldr	r0, [r7, #12]
 80062fe:	f000 f9d3 	bl	80066a8 <I2C_RequestMemoryWrite>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d005      	beq.n	8006314 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e0a9      	b.n	8006468 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006318:	b29b      	uxth	r3, r3
 800631a:	2bff      	cmp	r3, #255	; 0xff
 800631c:	d90e      	bls.n	800633c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	22ff      	movs	r2, #255	; 0xff
 8006322:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006328:	b2da      	uxtb	r2, r3
 800632a:	8979      	ldrh	r1, [r7, #10]
 800632c:	2300      	movs	r3, #0
 800632e:	9300      	str	r3, [sp, #0]
 8006330:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f000 fc2b 	bl	8006b90 <I2C_TransferConfig>
 800633a:	e00f      	b.n	800635c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006340:	b29a      	uxth	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800634a:	b2da      	uxtb	r2, r3
 800634c:	8979      	ldrh	r1, [r7, #10]
 800634e:	2300      	movs	r3, #0
 8006350:	9300      	str	r3, [sp, #0]
 8006352:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f000 fc1a 	bl	8006b90 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800635c:	697a      	ldr	r2, [r7, #20]
 800635e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f000 faad 	bl	80068c0 <I2C_WaitOnTXISFlagUntilTimeout>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d001      	beq.n	8006370 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e07b      	b.n	8006468 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006374:	781a      	ldrb	r2, [r3, #0]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006380:	1c5a      	adds	r2, r3, #1
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800638a:	b29b      	uxth	r3, r3
 800638c:	3b01      	subs	r3, #1
 800638e:	b29a      	uxth	r2, r3
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006398:	3b01      	subs	r3, #1
 800639a:	b29a      	uxth	r2, r3
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d034      	beq.n	8006414 <HAL_I2C_Mem_Write+0x1c8>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d130      	bne.n	8006414 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	9300      	str	r3, [sp, #0]
 80063b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b8:	2200      	movs	r2, #0
 80063ba:	2180      	movs	r1, #128	; 0x80
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	f000 fa3f 	bl	8006840 <I2C_WaitOnFlagUntilTimeout>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d001      	beq.n	80063cc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e04d      	b.n	8006468 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	2bff      	cmp	r3, #255	; 0xff
 80063d4:	d90e      	bls.n	80063f4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	22ff      	movs	r2, #255	; 0xff
 80063da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063e0:	b2da      	uxtb	r2, r3
 80063e2:	8979      	ldrh	r1, [r7, #10]
 80063e4:	2300      	movs	r3, #0
 80063e6:	9300      	str	r3, [sp, #0]
 80063e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	f000 fbcf 	bl	8006b90 <I2C_TransferConfig>
 80063f2:	e00f      	b.n	8006414 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006402:	b2da      	uxtb	r2, r3
 8006404:	8979      	ldrh	r1, [r7, #10]
 8006406:	2300      	movs	r3, #0
 8006408:	9300      	str	r3, [sp, #0]
 800640a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f000 fbbe 	bl	8006b90 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006418:	b29b      	uxth	r3, r3
 800641a:	2b00      	cmp	r3, #0
 800641c:	d19e      	bne.n	800635c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006422:	68f8      	ldr	r0, [r7, #12]
 8006424:	f000 fa8c 	bl	8006940 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d001      	beq.n	8006432 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e01a      	b.n	8006468 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2220      	movs	r2, #32
 8006438:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	6859      	ldr	r1, [r3, #4]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	4b0a      	ldr	r3, [pc, #40]	; (8006470 <HAL_I2C_Mem_Write+0x224>)
 8006446:	400b      	ands	r3, r1
 8006448:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2220      	movs	r2, #32
 800644e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006462:	2300      	movs	r3, #0
 8006464:	e000      	b.n	8006468 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006466:	2302      	movs	r3, #2
  }
}
 8006468:	4618      	mov	r0, r3
 800646a:	3718      	adds	r7, #24
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	fe00e800 	.word	0xfe00e800

08006474 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b088      	sub	sp, #32
 8006478:	af02      	add	r7, sp, #8
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	4608      	mov	r0, r1
 800647e:	4611      	mov	r1, r2
 8006480:	461a      	mov	r2, r3
 8006482:	4603      	mov	r3, r0
 8006484:	817b      	strh	r3, [r7, #10]
 8006486:	460b      	mov	r3, r1
 8006488:	813b      	strh	r3, [r7, #8]
 800648a:	4613      	mov	r3, r2
 800648c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006494:	b2db      	uxtb	r3, r3
 8006496:	2b20      	cmp	r3, #32
 8006498:	f040 80fd 	bne.w	8006696 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800649c:	6a3b      	ldr	r3, [r7, #32]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d002      	beq.n	80064a8 <HAL_I2C_Mem_Read+0x34>
 80064a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d105      	bne.n	80064b4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064ae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e0f1      	b.n	8006698 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d101      	bne.n	80064c2 <HAL_I2C_Mem_Read+0x4e>
 80064be:	2302      	movs	r3, #2
 80064c0:	e0ea      	b.n	8006698 <HAL_I2C_Mem_Read+0x224>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80064ca:	f7fd fe0d 	bl	80040e8 <HAL_GetTick>
 80064ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	2319      	movs	r3, #25
 80064d6:	2201      	movs	r2, #1
 80064d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f000 f9af 	bl	8006840 <I2C_WaitOnFlagUntilTimeout>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d001      	beq.n	80064ec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e0d5      	b.n	8006698 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2222      	movs	r2, #34	; 0x22
 80064f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2240      	movs	r2, #64	; 0x40
 80064f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2200      	movs	r2, #0
 8006500:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6a3a      	ldr	r2, [r7, #32]
 8006506:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800650c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2200      	movs	r2, #0
 8006512:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006514:	88f8      	ldrh	r0, [r7, #6]
 8006516:	893a      	ldrh	r2, [r7, #8]
 8006518:	8979      	ldrh	r1, [r7, #10]
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	9301      	str	r3, [sp, #4]
 800651e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006520:	9300      	str	r3, [sp, #0]
 8006522:	4603      	mov	r3, r0
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f000 f913 	bl	8006750 <I2C_RequestMemoryRead>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d005      	beq.n	800653c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2200      	movs	r2, #0
 8006534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	e0ad      	b.n	8006698 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006540:	b29b      	uxth	r3, r3
 8006542:	2bff      	cmp	r3, #255	; 0xff
 8006544:	d90e      	bls.n	8006564 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	22ff      	movs	r2, #255	; 0xff
 800654a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006550:	b2da      	uxtb	r2, r3
 8006552:	8979      	ldrh	r1, [r7, #10]
 8006554:	4b52      	ldr	r3, [pc, #328]	; (80066a0 <HAL_I2C_Mem_Read+0x22c>)
 8006556:	9300      	str	r3, [sp, #0]
 8006558:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f000 fb17 	bl	8006b90 <I2C_TransferConfig>
 8006562:	e00f      	b.n	8006584 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006568:	b29a      	uxth	r2, r3
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006572:	b2da      	uxtb	r2, r3
 8006574:	8979      	ldrh	r1, [r7, #10]
 8006576:	4b4a      	ldr	r3, [pc, #296]	; (80066a0 <HAL_I2C_Mem_Read+0x22c>)
 8006578:	9300      	str	r3, [sp, #0]
 800657a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f000 fb06 	bl	8006b90 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	9300      	str	r3, [sp, #0]
 8006588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658a:	2200      	movs	r2, #0
 800658c:	2104      	movs	r1, #4
 800658e:	68f8      	ldr	r0, [r7, #12]
 8006590:	f000 f956 	bl	8006840 <I2C_WaitOnFlagUntilTimeout>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d001      	beq.n	800659e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e07c      	b.n	8006698 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a8:	b2d2      	uxtb	r2, r2
 80065aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b0:	1c5a      	adds	r2, r3, #1
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ba:	3b01      	subs	r3, #1
 80065bc:	b29a      	uxth	r2, r3
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	3b01      	subs	r3, #1
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d034      	beq.n	8006644 <HAL_I2C_Mem_Read+0x1d0>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d130      	bne.n	8006644 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	9300      	str	r3, [sp, #0]
 80065e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e8:	2200      	movs	r2, #0
 80065ea:	2180      	movs	r1, #128	; 0x80
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f000 f927 	bl	8006840 <I2C_WaitOnFlagUntilTimeout>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d001      	beq.n	80065fc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e04d      	b.n	8006698 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006600:	b29b      	uxth	r3, r3
 8006602:	2bff      	cmp	r3, #255	; 0xff
 8006604:	d90e      	bls.n	8006624 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	22ff      	movs	r2, #255	; 0xff
 800660a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006610:	b2da      	uxtb	r2, r3
 8006612:	8979      	ldrh	r1, [r7, #10]
 8006614:	2300      	movs	r3, #0
 8006616:	9300      	str	r3, [sp, #0]
 8006618:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	f000 fab7 	bl	8006b90 <I2C_TransferConfig>
 8006622:	e00f      	b.n	8006644 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006628:	b29a      	uxth	r2, r3
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006632:	b2da      	uxtb	r2, r3
 8006634:	8979      	ldrh	r1, [r7, #10]
 8006636:	2300      	movs	r3, #0
 8006638:	9300      	str	r3, [sp, #0]
 800663a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800663e:	68f8      	ldr	r0, [r7, #12]
 8006640:	f000 faa6 	bl	8006b90 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006648:	b29b      	uxth	r3, r3
 800664a:	2b00      	cmp	r3, #0
 800664c:	d19a      	bne.n	8006584 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800664e:	697a      	ldr	r2, [r7, #20]
 8006650:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f000 f974 	bl	8006940 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d001      	beq.n	8006662 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e01a      	b.n	8006698 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2220      	movs	r2, #32
 8006668:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	6859      	ldr	r1, [r3, #4]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	4b0b      	ldr	r3, [pc, #44]	; (80066a4 <HAL_I2C_Mem_Read+0x230>)
 8006676:	400b      	ands	r3, r1
 8006678:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2220      	movs	r2, #32
 800667e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006692:	2300      	movs	r3, #0
 8006694:	e000      	b.n	8006698 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006696:	2302      	movs	r3, #2
  }
}
 8006698:	4618      	mov	r0, r3
 800669a:	3718      	adds	r7, #24
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}
 80066a0:	80002400 	.word	0x80002400
 80066a4:	fe00e800 	.word	0xfe00e800

080066a8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b086      	sub	sp, #24
 80066ac:	af02      	add	r7, sp, #8
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	4608      	mov	r0, r1
 80066b2:	4611      	mov	r1, r2
 80066b4:	461a      	mov	r2, r3
 80066b6:	4603      	mov	r3, r0
 80066b8:	817b      	strh	r3, [r7, #10]
 80066ba:	460b      	mov	r3, r1
 80066bc:	813b      	strh	r3, [r7, #8]
 80066be:	4613      	mov	r3, r2
 80066c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80066c2:	88fb      	ldrh	r3, [r7, #6]
 80066c4:	b2da      	uxtb	r2, r3
 80066c6:	8979      	ldrh	r1, [r7, #10]
 80066c8:	4b20      	ldr	r3, [pc, #128]	; (800674c <I2C_RequestMemoryWrite+0xa4>)
 80066ca:	9300      	str	r3, [sp, #0]
 80066cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066d0:	68f8      	ldr	r0, [r7, #12]
 80066d2:	f000 fa5d 	bl	8006b90 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066d6:	69fa      	ldr	r2, [r7, #28]
 80066d8:	69b9      	ldr	r1, [r7, #24]
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f000 f8f0 	bl	80068c0 <I2C_WaitOnTXISFlagUntilTimeout>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d001      	beq.n	80066ea <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e02c      	b.n	8006744 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80066ea:	88fb      	ldrh	r3, [r7, #6]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d105      	bne.n	80066fc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80066f0:	893b      	ldrh	r3, [r7, #8]
 80066f2:	b2da      	uxtb	r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	629a      	str	r2, [r3, #40]	; 0x28
 80066fa:	e015      	b.n	8006728 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80066fc:	893b      	ldrh	r3, [r7, #8]
 80066fe:	0a1b      	lsrs	r3, r3, #8
 8006700:	b29b      	uxth	r3, r3
 8006702:	b2da      	uxtb	r2, r3
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800670a:	69fa      	ldr	r2, [r7, #28]
 800670c:	69b9      	ldr	r1, [r7, #24]
 800670e:	68f8      	ldr	r0, [r7, #12]
 8006710:	f000 f8d6 	bl	80068c0 <I2C_WaitOnTXISFlagUntilTimeout>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e012      	b.n	8006744 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800671e:	893b      	ldrh	r3, [r7, #8]
 8006720:	b2da      	uxtb	r2, r3
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	2200      	movs	r2, #0
 8006730:	2180      	movs	r1, #128	; 0x80
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f000 f884 	bl	8006840 <I2C_WaitOnFlagUntilTimeout>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d001      	beq.n	8006742 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e000      	b.n	8006744 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	80002000 	.word	0x80002000

08006750 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b086      	sub	sp, #24
 8006754:	af02      	add	r7, sp, #8
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	4608      	mov	r0, r1
 800675a:	4611      	mov	r1, r2
 800675c:	461a      	mov	r2, r3
 800675e:	4603      	mov	r3, r0
 8006760:	817b      	strh	r3, [r7, #10]
 8006762:	460b      	mov	r3, r1
 8006764:	813b      	strh	r3, [r7, #8]
 8006766:	4613      	mov	r3, r2
 8006768:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800676a:	88fb      	ldrh	r3, [r7, #6]
 800676c:	b2da      	uxtb	r2, r3
 800676e:	8979      	ldrh	r1, [r7, #10]
 8006770:	4b20      	ldr	r3, [pc, #128]	; (80067f4 <I2C_RequestMemoryRead+0xa4>)
 8006772:	9300      	str	r3, [sp, #0]
 8006774:	2300      	movs	r3, #0
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f000 fa0a 	bl	8006b90 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800677c:	69fa      	ldr	r2, [r7, #28]
 800677e:	69b9      	ldr	r1, [r7, #24]
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	f000 f89d 	bl	80068c0 <I2C_WaitOnTXISFlagUntilTimeout>
 8006786:	4603      	mov	r3, r0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d001      	beq.n	8006790 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e02c      	b.n	80067ea <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006790:	88fb      	ldrh	r3, [r7, #6]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d105      	bne.n	80067a2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006796:	893b      	ldrh	r3, [r7, #8]
 8006798:	b2da      	uxtb	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	629a      	str	r2, [r3, #40]	; 0x28
 80067a0:	e015      	b.n	80067ce <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80067a2:	893b      	ldrh	r3, [r7, #8]
 80067a4:	0a1b      	lsrs	r3, r3, #8
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	b2da      	uxtb	r2, r3
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067b0:	69fa      	ldr	r2, [r7, #28]
 80067b2:	69b9      	ldr	r1, [r7, #24]
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f000 f883 	bl	80068c0 <I2C_WaitOnTXISFlagUntilTimeout>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d001      	beq.n	80067c4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e012      	b.n	80067ea <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80067c4:	893b      	ldrh	r3, [r7, #8]
 80067c6:	b2da      	uxtb	r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	9300      	str	r3, [sp, #0]
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	2200      	movs	r2, #0
 80067d6:	2140      	movs	r1, #64	; 0x40
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f000 f831 	bl	8006840 <I2C_WaitOnFlagUntilTimeout>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d001      	beq.n	80067e8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e000      	b.n	80067ea <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	80002000 	.word	0x80002000

080067f8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	f003 0302 	and.w	r3, r3, #2
 800680a:	2b02      	cmp	r3, #2
 800680c:	d103      	bne.n	8006816 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2200      	movs	r2, #0
 8006814:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	f003 0301 	and.w	r3, r3, #1
 8006820:	2b01      	cmp	r3, #1
 8006822:	d007      	beq.n	8006834 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	699a      	ldr	r2, [r3, #24]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f042 0201 	orr.w	r2, r2, #1
 8006832:	619a      	str	r2, [r3, #24]
  }
}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	603b      	str	r3, [r7, #0]
 800684c:	4613      	mov	r3, r2
 800684e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006850:	e022      	b.n	8006898 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006858:	d01e      	beq.n	8006898 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800685a:	f7fd fc45 	bl	80040e8 <HAL_GetTick>
 800685e:	4602      	mov	r2, r0
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	683a      	ldr	r2, [r7, #0]
 8006866:	429a      	cmp	r2, r3
 8006868:	d302      	bcc.n	8006870 <I2C_WaitOnFlagUntilTimeout+0x30>
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d113      	bne.n	8006898 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006874:	f043 0220 	orr.w	r2, r3, #32
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2220      	movs	r2, #32
 8006880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e00f      	b.n	80068b8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	699a      	ldr	r2, [r3, #24]
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	4013      	ands	r3, r2
 80068a2:	68ba      	ldr	r2, [r7, #8]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	bf0c      	ite	eq
 80068a8:	2301      	moveq	r3, #1
 80068aa:	2300      	movne	r3, #0
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	461a      	mov	r2, r3
 80068b0:	79fb      	ldrb	r3, [r7, #7]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d0cd      	beq.n	8006852 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80068cc:	e02c      	b.n	8006928 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	68b9      	ldr	r1, [r7, #8]
 80068d2:	68f8      	ldr	r0, [r7, #12]
 80068d4:	f000 f870 	bl	80069b8 <I2C_IsErrorOccurred>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d001      	beq.n	80068e2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e02a      	b.n	8006938 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e8:	d01e      	beq.n	8006928 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068ea:	f7fd fbfd 	bl	80040e8 <HAL_GetTick>
 80068ee:	4602      	mov	r2, r0
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	1ad3      	subs	r3, r2, r3
 80068f4:	68ba      	ldr	r2, [r7, #8]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d302      	bcc.n	8006900 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d113      	bne.n	8006928 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006904:	f043 0220 	orr.w	r2, r3, #32
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2220      	movs	r2, #32
 8006910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e007      	b.n	8006938 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	699b      	ldr	r3, [r3, #24]
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	2b02      	cmp	r3, #2
 8006934:	d1cb      	bne.n	80068ce <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	3710      	adds	r7, #16
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800694c:	e028      	b.n	80069a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	68b9      	ldr	r1, [r7, #8]
 8006952:	68f8      	ldr	r0, [r7, #12]
 8006954:	f000 f830 	bl	80069b8 <I2C_IsErrorOccurred>
 8006958:	4603      	mov	r3, r0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d001      	beq.n	8006962 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e026      	b.n	80069b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006962:	f7fd fbc1 	bl	80040e8 <HAL_GetTick>
 8006966:	4602      	mov	r2, r0
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	68ba      	ldr	r2, [r7, #8]
 800696e:	429a      	cmp	r2, r3
 8006970:	d302      	bcc.n	8006978 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d113      	bne.n	80069a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800697c:	f043 0220 	orr.w	r2, r3, #32
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2220      	movs	r2, #32
 8006988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2200      	movs	r2, #0
 8006998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	e007      	b.n	80069b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	699b      	ldr	r3, [r3, #24]
 80069a6:	f003 0320 	and.w	r3, r3, #32
 80069aa:	2b20      	cmp	r3, #32
 80069ac:	d1cf      	bne.n	800694e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3710      	adds	r7, #16
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b08a      	sub	sp, #40	; 0x28
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069c4:	2300      	movs	r3, #0
 80069c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	699b      	ldr	r3, [r3, #24]
 80069d0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80069d2:	2300      	movs	r3, #0
 80069d4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	f003 0310 	and.w	r3, r3, #16
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d075      	beq.n	8006ad0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2210      	movs	r2, #16
 80069ea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80069ec:	e056      	b.n	8006a9c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f4:	d052      	beq.n	8006a9c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80069f6:	f7fd fb77 	bl	80040e8 <HAL_GetTick>
 80069fa:	4602      	mov	r2, r0
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	68ba      	ldr	r2, [r7, #8]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d302      	bcc.n	8006a0c <I2C_IsErrorOccurred+0x54>
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d147      	bne.n	8006a9c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a16:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a1e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a2e:	d12e      	bne.n	8006a8e <I2C_IsErrorOccurred+0xd6>
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a36:	d02a      	beq.n	8006a8e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006a38:	7cfb      	ldrb	r3, [r7, #19]
 8006a3a:	2b20      	cmp	r3, #32
 8006a3c:	d027      	beq.n	8006a8e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	685a      	ldr	r2, [r3, #4]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a4c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006a4e:	f7fd fb4b 	bl	80040e8 <HAL_GetTick>
 8006a52:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a54:	e01b      	b.n	8006a8e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006a56:	f7fd fb47 	bl	80040e8 <HAL_GetTick>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	2b19      	cmp	r3, #25
 8006a62:	d914      	bls.n	8006a8e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a68:	f043 0220 	orr.w	r2, r3, #32
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2220      	movs	r2, #32
 8006a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	699b      	ldr	r3, [r3, #24]
 8006a94:	f003 0320 	and.w	r3, r3, #32
 8006a98:	2b20      	cmp	r3, #32
 8006a9a:	d1dc      	bne.n	8006a56 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	f003 0320 	and.w	r3, r3, #32
 8006aa6:	2b20      	cmp	r3, #32
 8006aa8:	d003      	beq.n	8006ab2 <I2C_IsErrorOccurred+0xfa>
 8006aaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d09d      	beq.n	80069ee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006ab2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d103      	bne.n	8006ac2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2220      	movs	r2, #32
 8006ac0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006ac2:	6a3b      	ldr	r3, [r7, #32]
 8006ac4:	f043 0304 	orr.w	r3, r3, #4
 8006ac8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	699b      	ldr	r3, [r3, #24]
 8006ad6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00b      	beq.n	8006afa <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006ae2:	6a3b      	ldr	r3, [r7, #32]
 8006ae4:	f043 0301 	orr.w	r3, r3, #1
 8006ae8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006af2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00b      	beq.n	8006b1c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006b04:	6a3b      	ldr	r3, [r7, #32]
 8006b06:	f043 0308 	orr.w	r3, r3, #8
 8006b0a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006b14:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00b      	beq.n	8006b3e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006b26:	6a3b      	ldr	r3, [r7, #32]
 8006b28:	f043 0302 	orr.w	r3, r3, #2
 8006b2c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b36:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006b3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d01c      	beq.n	8006b80 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006b46:	68f8      	ldr	r0, [r7, #12]
 8006b48:	f7ff fe56 	bl	80067f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	6859      	ldr	r1, [r3, #4]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	4b0d      	ldr	r3, [pc, #52]	; (8006b8c <I2C_IsErrorOccurred+0x1d4>)
 8006b58:	400b      	ands	r3, r1
 8006b5a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b60:	6a3b      	ldr	r3, [r7, #32]
 8006b62:	431a      	orrs	r2, r3
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2220      	movs	r2, #32
 8006b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006b80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3728      	adds	r7, #40	; 0x28
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	fe00e800 	.word	0xfe00e800

08006b90 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b087      	sub	sp, #28
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	607b      	str	r3, [r7, #4]
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	817b      	strh	r3, [r7, #10]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ba2:	897b      	ldrh	r3, [r7, #10]
 8006ba4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006ba8:	7a7b      	ldrb	r3, [r7, #9]
 8006baa:	041b      	lsls	r3, r3, #16
 8006bac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006bb0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006bb6:	6a3b      	ldr	r3, [r7, #32]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bbe:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	685a      	ldr	r2, [r3, #4]
 8006bc6:	6a3b      	ldr	r3, [r7, #32]
 8006bc8:	0d5b      	lsrs	r3, r3, #21
 8006bca:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006bce:	4b08      	ldr	r3, [pc, #32]	; (8006bf0 <I2C_TransferConfig+0x60>)
 8006bd0:	430b      	orrs	r3, r1
 8006bd2:	43db      	mvns	r3, r3
 8006bd4:	ea02 0103 	and.w	r1, r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	697a      	ldr	r2, [r7, #20]
 8006bde:	430a      	orrs	r2, r1
 8006be0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006be2:	bf00      	nop
 8006be4:	371c      	adds	r7, #28
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr
 8006bee:	bf00      	nop
 8006bf0:	03ff63ff 	.word	0x03ff63ff

08006bf4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	2b20      	cmp	r3, #32
 8006c08:	d138      	bne.n	8006c7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d101      	bne.n	8006c18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006c14:	2302      	movs	r3, #2
 8006c16:	e032      	b.n	8006c7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2224      	movs	r2, #36	; 0x24
 8006c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f022 0201 	bic.w	r2, r2, #1
 8006c36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006c46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	6819      	ldr	r1, [r3, #0]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	683a      	ldr	r2, [r7, #0]
 8006c54:	430a      	orrs	r2, r1
 8006c56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f042 0201 	orr.w	r2, r2, #1
 8006c66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2220      	movs	r2, #32
 8006c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	e000      	b.n	8006c7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006c7c:	2302      	movs	r3, #2
  }
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	370c      	adds	r7, #12
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr

08006c8a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006c8a:	b480      	push	{r7}
 8006c8c:	b085      	sub	sp, #20
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
 8006c92:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	2b20      	cmp	r3, #32
 8006c9e:	d139      	bne.n	8006d14 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d101      	bne.n	8006cae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006caa:	2302      	movs	r3, #2
 8006cac:	e033      	b.n	8006d16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2224      	movs	r2, #36	; 0x24
 8006cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f022 0201 	bic.w	r2, r2, #1
 8006ccc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006cdc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	021b      	lsls	r3, r3, #8
 8006ce2:	68fa      	ldr	r2, [r7, #12]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	68fa      	ldr	r2, [r7, #12]
 8006cee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f042 0201 	orr.w	r2, r2, #1
 8006cfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2220      	movs	r2, #32
 8006d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006d10:	2300      	movs	r3, #0
 8006d12:	e000      	b.n	8006d16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006d14:	2302      	movs	r3, #2
  }
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3714      	adds	r7, #20
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr

08006d22 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006d22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d24:	b08b      	sub	sp, #44	; 0x2c
 8006d26:	af06      	add	r7, sp, #24
 8006d28:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d101      	bne.n	8006d34 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e0d7      	b.n	8006ee4 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d106      	bne.n	8006d4e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f00c fb27 	bl	801339c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2203      	movs	r2, #3
 8006d52:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f006 f955 	bl	800d00a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d60:	2300      	movs	r3, #0
 8006d62:	73fb      	strb	r3, [r7, #15]
 8006d64:	e04c      	b.n	8006e00 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006d66:	7bfb      	ldrb	r3, [r7, #15]
 8006d68:	6879      	ldr	r1, [r7, #4]
 8006d6a:	1c5a      	adds	r2, r3, #1
 8006d6c:	4613      	mov	r3, r2
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	4413      	add	r3, r2
 8006d72:	00db      	lsls	r3, r3, #3
 8006d74:	440b      	add	r3, r1
 8006d76:	3301      	adds	r3, #1
 8006d78:	2201      	movs	r2, #1
 8006d7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006d7c:	7bfb      	ldrb	r3, [r7, #15]
 8006d7e:	6879      	ldr	r1, [r7, #4]
 8006d80:	1c5a      	adds	r2, r3, #1
 8006d82:	4613      	mov	r3, r2
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	4413      	add	r3, r2
 8006d88:	00db      	lsls	r3, r3, #3
 8006d8a:	440b      	add	r3, r1
 8006d8c:	7bfa      	ldrb	r2, [r7, #15]
 8006d8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006d90:	7bfa      	ldrb	r2, [r7, #15]
 8006d92:	7bfb      	ldrb	r3, [r7, #15]
 8006d94:	b298      	uxth	r0, r3
 8006d96:	6879      	ldr	r1, [r7, #4]
 8006d98:	4613      	mov	r3, r2
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	4413      	add	r3, r2
 8006d9e:	00db      	lsls	r3, r3, #3
 8006da0:	440b      	add	r3, r1
 8006da2:	3336      	adds	r3, #54	; 0x36
 8006da4:	4602      	mov	r2, r0
 8006da6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006da8:	7bfb      	ldrb	r3, [r7, #15]
 8006daa:	6879      	ldr	r1, [r7, #4]
 8006dac:	1c5a      	adds	r2, r3, #1
 8006dae:	4613      	mov	r3, r2
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	4413      	add	r3, r2
 8006db4:	00db      	lsls	r3, r3, #3
 8006db6:	440b      	add	r3, r1
 8006db8:	3303      	adds	r3, #3
 8006dba:	2200      	movs	r2, #0
 8006dbc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006dbe:	7bfa      	ldrb	r2, [r7, #15]
 8006dc0:	6879      	ldr	r1, [r7, #4]
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	4413      	add	r3, r2
 8006dc8:	00db      	lsls	r3, r3, #3
 8006dca:	440b      	add	r3, r1
 8006dcc:	3338      	adds	r3, #56	; 0x38
 8006dce:	2200      	movs	r2, #0
 8006dd0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006dd2:	7bfa      	ldrb	r2, [r7, #15]
 8006dd4:	6879      	ldr	r1, [r7, #4]
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	4413      	add	r3, r2
 8006ddc:	00db      	lsls	r3, r3, #3
 8006dde:	440b      	add	r3, r1
 8006de0:	333c      	adds	r3, #60	; 0x3c
 8006de2:	2200      	movs	r2, #0
 8006de4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006de6:	7bfa      	ldrb	r2, [r7, #15]
 8006de8:	6879      	ldr	r1, [r7, #4]
 8006dea:	4613      	mov	r3, r2
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	4413      	add	r3, r2
 8006df0:	00db      	lsls	r3, r3, #3
 8006df2:	440b      	add	r3, r1
 8006df4:	3340      	adds	r3, #64	; 0x40
 8006df6:	2200      	movs	r2, #0
 8006df8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006dfa:	7bfb      	ldrb	r3, [r7, #15]
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	73fb      	strb	r3, [r7, #15]
 8006e00:	7bfa      	ldrb	r2, [r7, #15]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d3ad      	bcc.n	8006d66 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	73fb      	strb	r3, [r7, #15]
 8006e0e:	e044      	b.n	8006e9a <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006e10:	7bfa      	ldrb	r2, [r7, #15]
 8006e12:	6879      	ldr	r1, [r7, #4]
 8006e14:	4613      	mov	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4413      	add	r3, r2
 8006e1a:	00db      	lsls	r3, r3, #3
 8006e1c:	440b      	add	r3, r1
 8006e1e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8006e22:	2200      	movs	r2, #0
 8006e24:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006e26:	7bfa      	ldrb	r2, [r7, #15]
 8006e28:	6879      	ldr	r1, [r7, #4]
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	4413      	add	r3, r2
 8006e30:	00db      	lsls	r3, r3, #3
 8006e32:	440b      	add	r3, r1
 8006e34:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006e38:	7bfa      	ldrb	r2, [r7, #15]
 8006e3a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006e3c:	7bfa      	ldrb	r2, [r7, #15]
 8006e3e:	6879      	ldr	r1, [r7, #4]
 8006e40:	4613      	mov	r3, r2
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	4413      	add	r3, r2
 8006e46:	00db      	lsls	r3, r3, #3
 8006e48:	440b      	add	r3, r1
 8006e4a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8006e4e:	2200      	movs	r2, #0
 8006e50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006e52:	7bfa      	ldrb	r2, [r7, #15]
 8006e54:	6879      	ldr	r1, [r7, #4]
 8006e56:	4613      	mov	r3, r2
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	4413      	add	r3, r2
 8006e5c:	00db      	lsls	r3, r3, #3
 8006e5e:	440b      	add	r3, r1
 8006e60:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8006e64:	2200      	movs	r2, #0
 8006e66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006e68:	7bfa      	ldrb	r2, [r7, #15]
 8006e6a:	6879      	ldr	r1, [r7, #4]
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	4413      	add	r3, r2
 8006e72:	00db      	lsls	r3, r3, #3
 8006e74:	440b      	add	r3, r1
 8006e76:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006e7e:	7bfa      	ldrb	r2, [r7, #15]
 8006e80:	6879      	ldr	r1, [r7, #4]
 8006e82:	4613      	mov	r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	4413      	add	r3, r2
 8006e88:	00db      	lsls	r3, r3, #3
 8006e8a:	440b      	add	r3, r1
 8006e8c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006e90:	2200      	movs	r2, #0
 8006e92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e94:	7bfb      	ldrb	r3, [r7, #15]
 8006e96:	3301      	adds	r3, #1
 8006e98:	73fb      	strb	r3, [r7, #15]
 8006e9a:	7bfa      	ldrb	r2, [r7, #15]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d3b5      	bcc.n	8006e10 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	603b      	str	r3, [r7, #0]
 8006eaa:	687e      	ldr	r6, [r7, #4]
 8006eac:	466d      	mov	r5, sp
 8006eae:	f106 0410 	add.w	r4, r6, #16
 8006eb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006eb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006eb6:	6823      	ldr	r3, [r4, #0]
 8006eb8:	602b      	str	r3, [r5, #0]
 8006eba:	1d33      	adds	r3, r6, #4
 8006ebc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006ebe:	6838      	ldr	r0, [r7, #0]
 8006ec0:	f006 f8be 	bl	800d040 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	69db      	ldr	r3, [r3, #28]
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d102      	bne.n	8006ee2 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f001 fc29 	bl	8008734 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8006ee2:	2300      	movs	r3, #0
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3714      	adds	r7, #20
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006eec <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d101      	bne.n	8006f02 <HAL_PCD_Start+0x16>
 8006efe:	2302      	movs	r3, #2
 8006f00:	e012      	b.n	8006f28 <HAL_PCD_Start+0x3c>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2201      	movs	r2, #1
 8006f06:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f006 f864 	bl	800cfdc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f008 fa7d 	bl	800f418 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3708      	adds	r7, #8
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f008 fa82 	bl	800f446 <USB_ReadInterrupts>
 8006f42:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d003      	beq.n	8006f56 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 fb26 	bl	80075a0 <PCD_EP_ISR_Handler>

    return;
 8006f54:	e110      	b.n	8007178 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d013      	beq.n	8006f88 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006f68:	b29a      	uxth	r2, r3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f72:	b292      	uxth	r2, r2
 8006f74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f00c faa0 	bl	80134be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006f7e:	2100      	movs	r1, #0
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 f8fc 	bl	800717e <HAL_PCD_SetAddress>

    return;
 8006f86:	e0f7      	b.n	8007178 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d00c      	beq.n	8006fac <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006fa4:	b292      	uxth	r2, r2
 8006fa6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006faa:	e0e5      	b.n	8007178 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00c      	beq.n	8006fd0 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006fc8:	b292      	uxth	r2, r2
 8006fca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006fce:	e0d3      	b.n	8007178 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d034      	beq.n	8007044 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006fe2:	b29a      	uxth	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f022 0204 	bic.w	r2, r2, #4
 8006fec:	b292      	uxth	r2, r2
 8006fee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006ffa:	b29a      	uxth	r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f022 0208 	bic.w	r2, r2, #8
 8007004:	b292      	uxth	r2, r2
 8007006:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8007010:	2b01      	cmp	r3, #1
 8007012:	d107      	bne.n	8007024 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800701c:	2100      	movs	r1, #0
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f00c fc42 	bl	80138a8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f00c fa83 	bl	8013530 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007032:	b29a      	uxth	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800703c:	b292      	uxth	r2, r2
 800703e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8007042:	e099      	b.n	8007178 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800704a:	2b00      	cmp	r3, #0
 800704c:	d027      	beq.n	800709e <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007056:	b29a      	uxth	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f042 0208 	orr.w	r2, r2, #8
 8007060:	b292      	uxth	r2, r2
 8007062:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800706e:	b29a      	uxth	r2, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007078:	b292      	uxth	r2, r2
 800707a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007086:	b29a      	uxth	r2, r3
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f042 0204 	orr.w	r2, r2, #4
 8007090:	b292      	uxth	r2, r2
 8007092:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f00c fa30 	bl	80134fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800709c:	e06c      	b.n	8007178 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d040      	beq.n	800712a <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80070b0:	b29a      	uxth	r2, r3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070ba:	b292      	uxth	r2, r2
 80070bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d12b      	bne.n	8007122 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80070d2:	b29a      	uxth	r2, r3
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f042 0204 	orr.w	r2, r2, #4
 80070dc:	b292      	uxth	r2, r2
 80070de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80070ea:	b29a      	uxth	r2, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f042 0208 	orr.w	r2, r2, #8
 80070f4:	b292      	uxth	r2, r2
 80070f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2201      	movs	r2, #1
 80070fe:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800710a:	b29b      	uxth	r3, r3
 800710c:	089b      	lsrs	r3, r3, #2
 800710e:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007118:	2101      	movs	r1, #1
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f00c fbc4 	bl	80138a8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8007120:	e02a      	b.n	8007178 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f00c f9ea 	bl	80134fc <HAL_PCD_SuspendCallback>
    return;
 8007128:	e026      	b.n	8007178 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007130:	2b00      	cmp	r3, #0
 8007132:	d00f      	beq.n	8007154 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800713c:	b29a      	uxth	r2, r3
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007146:	b292      	uxth	r2, r2
 8007148:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f00c f9a8 	bl	80134a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8007152:	e011      	b.n	8007178 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00c      	beq.n	8007178 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007166:	b29a      	uxth	r2, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007170:	b292      	uxth	r2, r2
 8007172:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8007176:	bf00      	nop
  }
}
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b082      	sub	sp, #8
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
 8007186:	460b      	mov	r3, r1
 8007188:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007190:	2b01      	cmp	r3, #1
 8007192:	d101      	bne.n	8007198 <HAL_PCD_SetAddress+0x1a>
 8007194:	2302      	movs	r3, #2
 8007196:	e013      	b.n	80071c0 <HAL_PCD_SetAddress+0x42>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	78fa      	ldrb	r2, [r7, #3]
 80071a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	78fa      	ldrb	r2, [r7, #3]
 80071ae:	4611      	mov	r1, r2
 80071b0:	4618      	mov	r0, r3
 80071b2:	f008 f91d 	bl	800f3f0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80071be:	2300      	movs	r3, #0
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3708      	adds	r7, #8
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	4608      	mov	r0, r1
 80071d2:	4611      	mov	r1, r2
 80071d4:	461a      	mov	r2, r3
 80071d6:	4603      	mov	r3, r0
 80071d8:	70fb      	strb	r3, [r7, #3]
 80071da:	460b      	mov	r3, r1
 80071dc:	803b      	strh	r3, [r7, #0]
 80071de:	4613      	mov	r3, r2
 80071e0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80071e2:	2300      	movs	r3, #0
 80071e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80071e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	da0e      	bge.n	800720c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80071ee:	78fb      	ldrb	r3, [r7, #3]
 80071f0:	f003 0307 	and.w	r3, r3, #7
 80071f4:	1c5a      	adds	r2, r3, #1
 80071f6:	4613      	mov	r3, r2
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	4413      	add	r3, r2
 80071fc:	00db      	lsls	r3, r3, #3
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	4413      	add	r3, r2
 8007202:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2201      	movs	r2, #1
 8007208:	705a      	strb	r2, [r3, #1]
 800720a:	e00e      	b.n	800722a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800720c:	78fb      	ldrb	r3, [r7, #3]
 800720e:	f003 0207 	and.w	r2, r3, #7
 8007212:	4613      	mov	r3, r2
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	4413      	add	r3, r2
 8007218:	00db      	lsls	r3, r3, #3
 800721a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	4413      	add	r3, r2
 8007222:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2200      	movs	r2, #0
 8007228:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800722a:	78fb      	ldrb	r3, [r7, #3]
 800722c:	f003 0307 	and.w	r3, r3, #7
 8007230:	b2da      	uxtb	r2, r3
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007236:	883a      	ldrh	r2, [r7, #0]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	78ba      	ldrb	r2, [r7, #2]
 8007240:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	785b      	ldrb	r3, [r3, #1]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d004      	beq.n	8007254 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	b29a      	uxth	r2, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007254:	78bb      	ldrb	r3, [r7, #2]
 8007256:	2b02      	cmp	r3, #2
 8007258:	d102      	bne.n	8007260 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007266:	2b01      	cmp	r3, #1
 8007268:	d101      	bne.n	800726e <HAL_PCD_EP_Open+0xa6>
 800726a:	2302      	movs	r3, #2
 800726c:	e00e      	b.n	800728c <HAL_PCD_EP_Open+0xc4>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2201      	movs	r2, #1
 8007272:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68f9      	ldr	r1, [r7, #12]
 800727c:	4618      	mov	r0, r3
 800727e:	f005 ff01 	bl	800d084 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800728a:	7afb      	ldrb	r3, [r7, #11]
}
 800728c:	4618      	mov	r0, r3
 800728e:	3710      	adds	r7, #16
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	460b      	mov	r3, r1
 800729e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80072a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	da0e      	bge.n	80072c6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80072a8:	78fb      	ldrb	r3, [r7, #3]
 80072aa:	f003 0307 	and.w	r3, r3, #7
 80072ae:	1c5a      	adds	r2, r3, #1
 80072b0:	4613      	mov	r3, r2
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	4413      	add	r3, r2
 80072b6:	00db      	lsls	r3, r3, #3
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	4413      	add	r3, r2
 80072bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2201      	movs	r2, #1
 80072c2:	705a      	strb	r2, [r3, #1]
 80072c4:	e00e      	b.n	80072e4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80072c6:	78fb      	ldrb	r3, [r7, #3]
 80072c8:	f003 0207 	and.w	r2, r3, #7
 80072cc:	4613      	mov	r3, r2
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	4413      	add	r3, r2
 80072d2:	00db      	lsls	r3, r3, #3
 80072d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	4413      	add	r3, r2
 80072dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2200      	movs	r2, #0
 80072e2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80072e4:	78fb      	ldrb	r3, [r7, #3]
 80072e6:	f003 0307 	and.w	r3, r3, #7
 80072ea:	b2da      	uxtb	r2, r3
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d101      	bne.n	80072fe <HAL_PCD_EP_Close+0x6a>
 80072fa:	2302      	movs	r3, #2
 80072fc:	e00e      	b.n	800731c <HAL_PCD_EP_Close+0x88>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2201      	movs	r2, #1
 8007302:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	68f9      	ldr	r1, [r7, #12]
 800730c:	4618      	mov	r0, r3
 800730e:	f006 fa4d 	bl	800d7ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	3710      	adds	r7, #16
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b086      	sub	sp, #24
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	607a      	str	r2, [r7, #4]
 800732e:	603b      	str	r3, [r7, #0]
 8007330:	460b      	mov	r3, r1
 8007332:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007334:	7afb      	ldrb	r3, [r7, #11]
 8007336:	f003 0207 	and.w	r2, r3, #7
 800733a:	4613      	mov	r3, r2
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	4413      	add	r3, r2
 8007340:	00db      	lsls	r3, r3, #3
 8007342:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007346:	68fa      	ldr	r2, [r7, #12]
 8007348:	4413      	add	r3, r2
 800734a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	683a      	ldr	r2, [r7, #0]
 8007356:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	2200      	movs	r2, #0
 800735c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	2200      	movs	r2, #0
 8007362:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007364:	7afb      	ldrb	r3, [r7, #11]
 8007366:	f003 0307 	and.w	r3, r3, #7
 800736a:	b2da      	uxtb	r2, r3
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007370:	7afb      	ldrb	r3, [r7, #11]
 8007372:	f003 0307 	and.w	r3, r3, #7
 8007376:	2b00      	cmp	r3, #0
 8007378:	d106      	bne.n	8007388 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	6979      	ldr	r1, [r7, #20]
 8007380:	4618      	mov	r0, r3
 8007382:	f006 fc00 	bl	800db86 <USB_EPStartXfer>
 8007386:	e005      	b.n	8007394 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	6979      	ldr	r1, [r7, #20]
 800738e:	4618      	mov	r0, r3
 8007390:	f006 fbf9 	bl	800db86 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3718      	adds	r7, #24
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800739e:	b480      	push	{r7}
 80073a0:	b083      	sub	sp, #12
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
 80073a6:	460b      	mov	r3, r1
 80073a8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80073aa:	78fb      	ldrb	r3, [r7, #3]
 80073ac:	f003 0207 	and.w	r2, r3, #7
 80073b0:	6879      	ldr	r1, [r7, #4]
 80073b2:	4613      	mov	r3, r2
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	4413      	add	r3, r2
 80073b8:	00db      	lsls	r3, r3, #3
 80073ba:	440b      	add	r3, r1
 80073bc:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80073c0:	681b      	ldr	r3, [r3, #0]
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	370c      	adds	r7, #12
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr

080073ce <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b086      	sub	sp, #24
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	60f8      	str	r0, [r7, #12]
 80073d6:	607a      	str	r2, [r7, #4]
 80073d8:	603b      	str	r3, [r7, #0]
 80073da:	460b      	mov	r3, r1
 80073dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80073de:	7afb      	ldrb	r3, [r7, #11]
 80073e0:	f003 0307 	and.w	r3, r3, #7
 80073e4:	1c5a      	adds	r2, r3, #1
 80073e6:	4613      	mov	r3, r2
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	4413      	add	r3, r2
 80073ec:	00db      	lsls	r3, r3, #3
 80073ee:	68fa      	ldr	r2, [r7, #12]
 80073f0:	4413      	add	r3, r2
 80073f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	683a      	ldr	r2, [r7, #0]
 80073fe:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	683a      	ldr	r2, [r7, #0]
 800740c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	2200      	movs	r2, #0
 8007412:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	2201      	movs	r2, #1
 8007418:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800741a:	7afb      	ldrb	r3, [r7, #11]
 800741c:	f003 0307 	and.w	r3, r3, #7
 8007420:	b2da      	uxtb	r2, r3
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007426:	7afb      	ldrb	r3, [r7, #11]
 8007428:	f003 0307 	and.w	r3, r3, #7
 800742c:	2b00      	cmp	r3, #0
 800742e:	d106      	bne.n	800743e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	6979      	ldr	r1, [r7, #20]
 8007436:	4618      	mov	r0, r3
 8007438:	f006 fba5 	bl	800db86 <USB_EPStartXfer>
 800743c:	e005      	b.n	800744a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	6979      	ldr	r1, [r7, #20]
 8007444:	4618      	mov	r0, r3
 8007446:	f006 fb9e 	bl	800db86 <USB_EPStartXfer>
  }

  return HAL_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3718      	adds	r7, #24
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	460b      	mov	r3, r1
 800745e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007460:	78fb      	ldrb	r3, [r7, #3]
 8007462:	f003 0207 	and.w	r2, r3, #7
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	429a      	cmp	r2, r3
 800746c:	d901      	bls.n	8007472 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e03e      	b.n	80074f0 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007472:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007476:	2b00      	cmp	r3, #0
 8007478:	da0e      	bge.n	8007498 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800747a:	78fb      	ldrb	r3, [r7, #3]
 800747c:	f003 0307 	and.w	r3, r3, #7
 8007480:	1c5a      	adds	r2, r3, #1
 8007482:	4613      	mov	r3, r2
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	4413      	add	r3, r2
 8007488:	00db      	lsls	r3, r3, #3
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	4413      	add	r3, r2
 800748e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2201      	movs	r2, #1
 8007494:	705a      	strb	r2, [r3, #1]
 8007496:	e00c      	b.n	80074b2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007498:	78fa      	ldrb	r2, [r7, #3]
 800749a:	4613      	mov	r3, r2
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4413      	add	r3, r2
 80074a0:	00db      	lsls	r3, r3, #3
 80074a2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	4413      	add	r3, r2
 80074aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2200      	movs	r2, #0
 80074b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2201      	movs	r2, #1
 80074b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80074b8:	78fb      	ldrb	r3, [r7, #3]
 80074ba:	f003 0307 	and.w	r3, r3, #7
 80074be:	b2da      	uxtb	r2, r3
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d101      	bne.n	80074d2 <HAL_PCD_EP_SetStall+0x7e>
 80074ce:	2302      	movs	r3, #2
 80074d0:	e00e      	b.n	80074f0 <HAL_PCD_EP_SetStall+0x9c>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	68f9      	ldr	r1, [r7, #12]
 80074e0:	4618      	mov	r0, r3
 80074e2:	f007 fe86 	bl	800f1f2 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	460b      	mov	r3, r1
 8007502:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007504:	78fb      	ldrb	r3, [r7, #3]
 8007506:	f003 020f 	and.w	r2, r3, #15
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	429a      	cmp	r2, r3
 8007510:	d901      	bls.n	8007516 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e040      	b.n	8007598 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007516:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800751a:	2b00      	cmp	r3, #0
 800751c:	da0e      	bge.n	800753c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800751e:	78fb      	ldrb	r3, [r7, #3]
 8007520:	f003 0307 	and.w	r3, r3, #7
 8007524:	1c5a      	adds	r2, r3, #1
 8007526:	4613      	mov	r3, r2
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	4413      	add	r3, r2
 800752c:	00db      	lsls	r3, r3, #3
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	4413      	add	r3, r2
 8007532:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2201      	movs	r2, #1
 8007538:	705a      	strb	r2, [r3, #1]
 800753a:	e00e      	b.n	800755a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800753c:	78fb      	ldrb	r3, [r7, #3]
 800753e:	f003 0207 	and.w	r2, r3, #7
 8007542:	4613      	mov	r3, r2
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	4413      	add	r3, r2
 8007548:	00db      	lsls	r3, r3, #3
 800754a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	4413      	add	r3, r2
 8007552:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2200      	movs	r2, #0
 8007558:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2200      	movs	r2, #0
 800755e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007560:	78fb      	ldrb	r3, [r7, #3]
 8007562:	f003 0307 	and.w	r3, r3, #7
 8007566:	b2da      	uxtb	r2, r3
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007572:	2b01      	cmp	r3, #1
 8007574:	d101      	bne.n	800757a <HAL_PCD_EP_ClrStall+0x82>
 8007576:	2302      	movs	r3, #2
 8007578:	e00e      	b.n	8007598 <HAL_PCD_EP_ClrStall+0xa0>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2201      	movs	r2, #1
 800757e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	68f9      	ldr	r1, [r7, #12]
 8007588:	4618      	mov	r0, r3
 800758a:	f007 fe83 	bl	800f294 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b096      	sub	sp, #88	; 0x58
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80075a8:	e39c      	b.n	8007ce4 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80075b2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80075b6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	f003 030f 	and.w	r3, r3, #15
 80075c0:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 80075c4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	f040 815e 	bne.w	800788a <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80075ce:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80075d2:	f003 0310 	and.w	r3, r3, #16
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d150      	bne.n	800767c <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	881b      	ldrh	r3, [r3, #0]
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80075e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ea:	81fb      	strh	r3, [r7, #14]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	89fb      	ldrh	r3, [r7, #14]
 80075f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	3328      	adds	r3, #40	; 0x28
 8007602:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800760c:	b29b      	uxth	r3, r3
 800760e:	461a      	mov	r2, r3
 8007610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	00db      	lsls	r3, r3, #3
 8007616:	4413      	add	r3, r2
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	6812      	ldr	r2, [r2, #0]
 800761c:	4413      	add	r3, r2
 800761e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007622:	881b      	ldrh	r3, [r3, #0]
 8007624:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800762a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800762c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800762e:	695a      	ldr	r2, [r3, #20]
 8007630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007632:	69db      	ldr	r3, [r3, #28]
 8007634:	441a      	add	r2, r3
 8007636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007638:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800763a:	2100      	movs	r1, #0
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f00b ff16 	bl	801346e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007648:	b2db      	uxtb	r3, r3
 800764a:	2b00      	cmp	r3, #0
 800764c:	f000 834a 	beq.w	8007ce4 <PCD_EP_ISR_Handler+0x744>
 8007650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007652:	699b      	ldr	r3, [r3, #24]
 8007654:	2b00      	cmp	r3, #0
 8007656:	f040 8345 	bne.w	8007ce4 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007660:	b2db      	uxtb	r3, r3
 8007662:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007666:	b2da      	uxtb	r2, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	b292      	uxth	r2, r2
 800766e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800767a:	e333      	b.n	8007ce4 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007682:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	881b      	ldrh	r3, [r3, #0]
 800768a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800768e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007692:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007696:	2b00      	cmp	r3, #0
 8007698:	d032      	beq.n	8007700 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	461a      	mov	r2, r3
 80076a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	00db      	lsls	r3, r3, #3
 80076ac:	4413      	add	r3, r2
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	6812      	ldr	r2, [r2, #0]
 80076b2:	4413      	add	r3, r2
 80076b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80076b8:	881b      	ldrh	r3, [r3, #0]
 80076ba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80076be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076c0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6818      	ldr	r0, [r3, #0]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80076cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076ce:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80076d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076d2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	f007 ff08 	bl	800f4ea <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	881b      	ldrh	r3, [r3, #0]
 80076e0:	b29a      	uxth	r2, r3
 80076e2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80076e6:	4013      	ands	r3, r2
 80076e8:	823b      	strh	r3, [r7, #16]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	8a3a      	ldrh	r2, [r7, #16]
 80076f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80076f4:	b292      	uxth	r2, r2
 80076f6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f00b fe8b 	bl	8013414 <HAL_PCD_SetupStageCallback>
 80076fe:	e2f1      	b.n	8007ce4 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007700:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8007704:	2b00      	cmp	r3, #0
 8007706:	f280 82ed 	bge.w	8007ce4 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	881b      	ldrh	r3, [r3, #0]
 8007710:	b29a      	uxth	r2, r3
 8007712:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007716:	4013      	ands	r3, r2
 8007718:	83fb      	strh	r3, [r7, #30]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	8bfa      	ldrh	r2, [r7, #30]
 8007720:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007724:	b292      	uxth	r2, r2
 8007726:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007730:	b29b      	uxth	r3, r3
 8007732:	461a      	mov	r2, r3
 8007734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	00db      	lsls	r3, r3, #3
 800773a:	4413      	add	r3, r2
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	6812      	ldr	r2, [r2, #0]
 8007740:	4413      	add	r3, r2
 8007742:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007746:	881b      	ldrh	r3, [r3, #0]
 8007748:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800774c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800774e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8007750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007752:	69db      	ldr	r3, [r3, #28]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d019      	beq.n	800778c <PCD_EP_ISR_Handler+0x1ec>
 8007758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800775a:	695b      	ldr	r3, [r3, #20]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d015      	beq.n	800778c <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6818      	ldr	r0, [r3, #0]
 8007764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007766:	6959      	ldr	r1, [r3, #20]
 8007768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800776a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800776c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800776e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007770:	b29b      	uxth	r3, r3
 8007772:	f007 feba 	bl	800f4ea <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8007776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007778:	695a      	ldr	r2, [r3, #20]
 800777a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800777c:	69db      	ldr	r3, [r3, #28]
 800777e:	441a      	add	r2, r3
 8007780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007782:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007784:	2100      	movs	r1, #0
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f00b fe56 	bl	8013438 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	881b      	ldrh	r3, [r3, #0]
 8007792:	b29b      	uxth	r3, r3
 8007794:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007798:	2b00      	cmp	r3, #0
 800779a:	f040 82a3 	bne.w	8007ce4 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	61bb      	str	r3, [r7, #24]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	461a      	mov	r2, r3
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	4413      	add	r3, r2
 80077b4:	61bb      	str	r3, [r7, #24]
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80077bc:	617b      	str	r3, [r7, #20]
 80077be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	2b3e      	cmp	r3, #62	; 0x3e
 80077c4:	d918      	bls.n	80077f8 <PCD_EP_ISR_Handler+0x258>
 80077c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	095b      	lsrs	r3, r3, #5
 80077cc:	647b      	str	r3, [r7, #68]	; 0x44
 80077ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	f003 031f 	and.w	r3, r3, #31
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d102      	bne.n	80077e0 <PCD_EP_ISR_Handler+0x240>
 80077da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077dc:	3b01      	subs	r3, #1
 80077de:	647b      	str	r3, [r7, #68]	; 0x44
 80077e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	029b      	lsls	r3, r3, #10
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077f0:	b29a      	uxth	r2, r3
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	801a      	strh	r2, [r3, #0]
 80077f6:	e029      	b.n	800784c <PCD_EP_ISR_Handler+0x2ac>
 80077f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077fa:	691b      	ldr	r3, [r3, #16]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d112      	bne.n	8007826 <PCD_EP_ISR_Handler+0x286>
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	881b      	ldrh	r3, [r3, #0]
 8007804:	b29b      	uxth	r3, r3
 8007806:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800780a:	b29a      	uxth	r2, r3
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	801a      	strh	r2, [r3, #0]
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	881b      	ldrh	r3, [r3, #0]
 8007814:	b29b      	uxth	r3, r3
 8007816:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800781a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800781e:	b29a      	uxth	r2, r3
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	801a      	strh	r2, [r3, #0]
 8007824:	e012      	b.n	800784c <PCD_EP_ISR_Handler+0x2ac>
 8007826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	085b      	lsrs	r3, r3, #1
 800782c:	647b      	str	r3, [r7, #68]	; 0x44
 800782e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	f003 0301 	and.w	r3, r3, #1
 8007836:	2b00      	cmp	r3, #0
 8007838:	d002      	beq.n	8007840 <PCD_EP_ISR_Handler+0x2a0>
 800783a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800783c:	3301      	adds	r3, #1
 800783e:	647b      	str	r3, [r7, #68]	; 0x44
 8007840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007842:	b29b      	uxth	r3, r3
 8007844:	029b      	lsls	r3, r3, #10
 8007846:	b29a      	uxth	r2, r3
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	881b      	ldrh	r3, [r3, #0]
 8007852:	b29b      	uxth	r3, r3
 8007854:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007858:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800785c:	827b      	strh	r3, [r7, #18]
 800785e:	8a7b      	ldrh	r3, [r7, #18]
 8007860:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007864:	827b      	strh	r3, [r7, #18]
 8007866:	8a7b      	ldrh	r3, [r7, #18]
 8007868:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800786c:	827b      	strh	r3, [r7, #18]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	8a7b      	ldrh	r3, [r7, #18]
 8007874:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007878:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800787c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007884:	b29b      	uxth	r3, r3
 8007886:	8013      	strh	r3, [r2, #0]
 8007888:	e22c      	b.n	8007ce4 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	461a      	mov	r2, r3
 8007890:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	4413      	add	r3, r2
 8007898:	881b      	ldrh	r3, [r3, #0]
 800789a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800789e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	f280 80f6 	bge.w	8007a94 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	461a      	mov	r2, r3
 80078ae:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	4413      	add	r3, r2
 80078b6:	881b      	ldrh	r3, [r3, #0]
 80078b8:	b29a      	uxth	r2, r3
 80078ba:	f640 738f 	movw	r3, #3983	; 0xf8f
 80078be:	4013      	ands	r3, r2
 80078c0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	461a      	mov	r2, r3
 80078ca:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	4413      	add	r3, r2
 80078d2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80078d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80078da:	b292      	uxth	r2, r2
 80078dc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80078de:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80078e2:	4613      	mov	r3, r2
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	4413      	add	r3, r2
 80078e8:	00db      	lsls	r3, r3, #3
 80078ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	4413      	add	r3, r2
 80078f2:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80078f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078f6:	7b1b      	ldrb	r3, [r3, #12]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d123      	bne.n	8007944 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007904:	b29b      	uxth	r3, r3
 8007906:	461a      	mov	r2, r3
 8007908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	00db      	lsls	r3, r3, #3
 800790e:	4413      	add	r3, r2
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	6812      	ldr	r2, [r2, #0]
 8007914:	4413      	add	r3, r2
 8007916:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800791a:	881b      	ldrh	r3, [r3, #0]
 800791c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007920:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8007924:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007928:	2b00      	cmp	r3, #0
 800792a:	f000 808e 	beq.w	8007a4a <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6818      	ldr	r0, [r3, #0]
 8007932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007934:	6959      	ldr	r1, [r3, #20]
 8007936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007938:	88da      	ldrh	r2, [r3, #6]
 800793a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800793e:	f007 fdd4 	bl	800f4ea <USB_ReadPMA>
 8007942:	e082      	b.n	8007a4a <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8007944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007946:	78db      	ldrb	r3, [r3, #3]
 8007948:	2b02      	cmp	r3, #2
 800794a:	d10a      	bne.n	8007962 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800794c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007950:	461a      	mov	r2, r3
 8007952:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 f9d3 	bl	8007d00 <HAL_PCD_EP_DB_Receive>
 800795a:	4603      	mov	r3, r0
 800795c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007960:	e073      	b.n	8007a4a <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	461a      	mov	r2, r3
 8007968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	4413      	add	r3, r2
 8007970:	881b      	ldrh	r3, [r3, #0]
 8007972:	b29b      	uxth	r3, r3
 8007974:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800797c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	461a      	mov	r2, r3
 8007986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	441a      	add	r2, r3
 800798e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007992:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007996:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800799a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800799e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	461a      	mov	r2, r3
 80079ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	4413      	add	r3, r2
 80079b4:	881b      	ldrh	r3, [r3, #0]
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d022      	beq.n	8007a06 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	461a      	mov	r2, r3
 80079cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	00db      	lsls	r3, r3, #3
 80079d2:	4413      	add	r3, r2
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	6812      	ldr	r2, [r2, #0]
 80079d8:	4413      	add	r3, r2
 80079da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80079de:	881b      	ldrh	r3, [r3, #0]
 80079e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079e4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80079e8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d02c      	beq.n	8007a4a <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6818      	ldr	r0, [r3, #0]
 80079f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079f6:	6959      	ldr	r1, [r3, #20]
 80079f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079fa:	891a      	ldrh	r2, [r3, #8]
 80079fc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007a00:	f007 fd73 	bl	800f4ea <USB_ReadPMA>
 8007a04:	e021      	b.n	8007a4a <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	461a      	mov	r2, r3
 8007a12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	00db      	lsls	r3, r3, #3
 8007a18:	4413      	add	r3, r2
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	6812      	ldr	r2, [r2, #0]
 8007a1e:	4413      	add	r3, r2
 8007a20:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a24:	881b      	ldrh	r3, [r3, #0]
 8007a26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a2a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8007a2e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d009      	beq.n	8007a4a <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6818      	ldr	r0, [r3, #0]
 8007a3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a3c:	6959      	ldr	r1, [r3, #20]
 8007a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a40:	895a      	ldrh	r2, [r3, #10]
 8007a42:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007a46:	f007 fd50 	bl	800f4ea <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8007a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a4c:	69da      	ldr	r2, [r3, #28]
 8007a4e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007a52:	441a      	add	r2, r3
 8007a54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a56:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8007a58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a5a:	695a      	ldr	r2, [r3, #20]
 8007a5c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007a60:	441a      	add	r2, r3
 8007a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a64:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007a66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a68:	699b      	ldr	r3, [r3, #24]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d005      	beq.n	8007a7a <PCD_EP_ISR_Handler+0x4da>
 8007a6e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8007a72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d206      	bcs.n	8007a88 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8007a7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	4619      	mov	r1, r3
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f00b fcd9 	bl	8013438 <HAL_PCD_DataOutStageCallback>
 8007a86:	e005      	b.n	8007a94 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f006 f879 	bl	800db86 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8007a94:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f000 8121 	beq.w	8007ce4 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8007aa2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8007aa6:	1c5a      	adds	r2, r3, #1
 8007aa8:	4613      	mov	r3, r2
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	4413      	add	r3, r2
 8007aae:	00db      	lsls	r3, r3, #3
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	461a      	mov	r2, r3
 8007abc:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	4413      	add	r3, r2
 8007ac4:	881b      	ldrh	r3, [r3, #0]
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8007acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ad0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	461a      	mov	r2, r3
 8007ada:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	441a      	add	r2, r3
 8007ae2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007ae6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007aea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8007af2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007af4:	78db      	ldrb	r3, [r3, #3]
 8007af6:	2b02      	cmp	r3, #2
 8007af8:	f000 80a2 	beq.w	8007c40 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8007afc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007afe:	2200      	movs	r2, #0
 8007b00:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8007b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b04:	7b1b      	ldrb	r3, [r3, #12]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f000 8093 	beq.w	8007c32 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007b0c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d046      	beq.n	8007ba6 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007b18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b1a:	785b      	ldrb	r3, [r3, #1]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d126      	bne.n	8007b6e <PCD_EP_ISR_Handler+0x5ce>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	627b      	str	r3, [r7, #36]	; 0x24
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	461a      	mov	r2, r3
 8007b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b34:	4413      	add	r3, r2
 8007b36:	627b      	str	r3, [r7, #36]	; 0x24
 8007b38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	00da      	lsls	r2, r3, #3
 8007b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b40:	4413      	add	r3, r2
 8007b42:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007b46:	623b      	str	r3, [r7, #32]
 8007b48:	6a3b      	ldr	r3, [r7, #32]
 8007b4a:	881b      	ldrh	r3, [r3, #0]
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	6a3b      	ldr	r3, [r7, #32]
 8007b56:	801a      	strh	r2, [r3, #0]
 8007b58:	6a3b      	ldr	r3, [r7, #32]
 8007b5a:	881b      	ldrh	r3, [r3, #0]
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b66:	b29a      	uxth	r2, r3
 8007b68:	6a3b      	ldr	r3, [r7, #32]
 8007b6a:	801a      	strh	r2, [r3, #0]
 8007b6c:	e061      	b.n	8007c32 <PCD_EP_ISR_Handler+0x692>
 8007b6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b70:	785b      	ldrb	r3, [r3, #1]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d15d      	bne.n	8007c32 <PCD_EP_ISR_Handler+0x692>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	461a      	mov	r2, r3
 8007b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b8a:	4413      	add	r3, r2
 8007b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	00da      	lsls	r2, r3, #3
 8007b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b96:	4413      	add	r3, r2
 8007b98:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007b9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	801a      	strh	r2, [r3, #0]
 8007ba4:	e045      	b.n	8007c32 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bae:	785b      	ldrb	r3, [r3, #1]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d126      	bne.n	8007c02 <PCD_EP_ISR_Handler+0x662>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	637b      	str	r3, [r7, #52]	; 0x34
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bc8:	4413      	add	r3, r2
 8007bca:	637b      	str	r3, [r7, #52]	; 0x34
 8007bcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	00da      	lsls	r2, r3, #3
 8007bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bd4:	4413      	add	r3, r2
 8007bd6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007bda:	633b      	str	r3, [r7, #48]	; 0x30
 8007bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bde:	881b      	ldrh	r3, [r3, #0]
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007be6:	b29a      	uxth	r2, r3
 8007be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bea:	801a      	strh	r2, [r3, #0]
 8007bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bee:	881b      	ldrh	r3, [r3, #0]
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfe:	801a      	strh	r2, [r3, #0]
 8007c00:	e017      	b.n	8007c32 <PCD_EP_ISR_Handler+0x692>
 8007c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c04:	785b      	ldrb	r3, [r3, #1]
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d113      	bne.n	8007c32 <PCD_EP_ISR_Handler+0x692>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	461a      	mov	r2, r3
 8007c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c18:	4413      	add	r3, r2
 8007c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	00da      	lsls	r2, r3, #3
 8007c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c24:	4413      	add	r3, r2
 8007c26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007c2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c2e:	2200      	movs	r2, #0
 8007c30:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	4619      	mov	r1, r3
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f00b fc18 	bl	801346e <HAL_PCD_DataInStageCallback>
 8007c3e:	e051      	b.n	8007ce4 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8007c40:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d144      	bne.n	8007cd6 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	461a      	mov	r2, r3
 8007c58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	00db      	lsls	r3, r3, #3
 8007c5e:	4413      	add	r3, r2
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	6812      	ldr	r2, [r2, #0]
 8007c64:	4413      	add	r3, r2
 8007c66:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007c6a:	881b      	ldrh	r3, [r3, #0]
 8007c6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c70:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8007c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c76:	699a      	ldr	r2, [r3, #24]
 8007c78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d907      	bls.n	8007c90 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8007c80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c82:	699a      	ldr	r2, [r3, #24]
 8007c84:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007c88:	1ad2      	subs	r2, r2, r3
 8007c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c8c:	619a      	str	r2, [r3, #24]
 8007c8e:	e002      	b.n	8007c96 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8007c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c92:	2200      	movs	r2, #0
 8007c94:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8007c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c98:	699b      	ldr	r3, [r3, #24]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d106      	bne.n	8007cac <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f00b fbe2 	bl	801346e <HAL_PCD_DataInStageCallback>
 8007caa:	e01b      	b.n	8007ce4 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8007cac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cae:	695a      	ldr	r2, [r3, #20]
 8007cb0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007cb4:	441a      	add	r2, r3
 8007cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cb8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8007cba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cbc:	69da      	ldr	r2, [r3, #28]
 8007cbe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007cc2:	441a      	add	r2, r3
 8007cc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cc6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f005 ff59 	bl	800db86 <USB_EPStartXfer>
 8007cd4:	e006      	b.n	8007ce4 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8007cd6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007cda:	461a      	mov	r2, r3
 8007cdc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 f917 	bl	8007f12 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	b21b      	sxth	r3, r3
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f6ff ac5a 	blt.w	80075aa <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3758      	adds	r7, #88	; 0x58
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b088      	sub	sp, #32
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	60f8      	str	r0, [r7, #12]
 8007d08:	60b9      	str	r1, [r7, #8]
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007d0e:	88fb      	ldrh	r3, [r7, #6]
 8007d10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d07c      	beq.n	8007e12 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	461a      	mov	r2, r3
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	00db      	lsls	r3, r3, #3
 8007d2a:	4413      	add	r3, r2
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	6812      	ldr	r2, [r2, #0]
 8007d30:	4413      	add	r3, r2
 8007d32:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007d36:	881b      	ldrh	r3, [r3, #0]
 8007d38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d3c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	699a      	ldr	r2, [r3, #24]
 8007d42:	8b7b      	ldrh	r3, [r7, #26]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d306      	bcc.n	8007d56 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	699a      	ldr	r2, [r3, #24]
 8007d4c:	8b7b      	ldrh	r3, [r7, #26]
 8007d4e:	1ad2      	subs	r2, r2, r3
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	619a      	str	r2, [r3, #24]
 8007d54:	e002      	b.n	8007d5c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	699b      	ldr	r3, [r3, #24]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d123      	bne.n	8007dac <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	461a      	mov	r2, r3
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	4413      	add	r3, r2
 8007d72:	881b      	ldrh	r3, [r3, #0]
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d7e:	833b      	strh	r3, [r7, #24]
 8007d80:	8b3b      	ldrh	r3, [r7, #24]
 8007d82:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007d86:	833b      	strh	r3, [r7, #24]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	441a      	add	r2, r3
 8007d96:	8b3b      	ldrh	r3, [r7, #24]
 8007d98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007da0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007dac:	88fb      	ldrh	r3, [r7, #6]
 8007dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d01f      	beq.n	8007df6 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	461a      	mov	r2, r3
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	4413      	add	r3, r2
 8007dc4:	881b      	ldrh	r3, [r3, #0]
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dd0:	82fb      	strh	r3, [r7, #22]
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	441a      	add	r2, r3
 8007de0:	8afb      	ldrh	r3, [r7, #22]
 8007de2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007de6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007df6:	8b7b      	ldrh	r3, [r7, #26]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	f000 8085 	beq.w	8007f08 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	6818      	ldr	r0, [r3, #0]
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	6959      	ldr	r1, [r3, #20]
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	891a      	ldrh	r2, [r3, #8]
 8007e0a:	8b7b      	ldrh	r3, [r7, #26]
 8007e0c:	f007 fb6d 	bl	800f4ea <USB_ReadPMA>
 8007e10:	e07a      	b.n	8007f08 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	00db      	lsls	r3, r3, #3
 8007e24:	4413      	add	r3, r2
 8007e26:	68fa      	ldr	r2, [r7, #12]
 8007e28:	6812      	ldr	r2, [r2, #0]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007e30:	881b      	ldrh	r3, [r3, #0]
 8007e32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e36:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	699a      	ldr	r2, [r3, #24]
 8007e3c:	8b7b      	ldrh	r3, [r7, #26]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d306      	bcc.n	8007e50 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	699a      	ldr	r2, [r3, #24]
 8007e46:	8b7b      	ldrh	r3, [r7, #26]
 8007e48:	1ad2      	subs	r2, r2, r3
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	619a      	str	r2, [r3, #24]
 8007e4e:	e002      	b.n	8007e56 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	2200      	movs	r2, #0
 8007e54:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	699b      	ldr	r3, [r3, #24]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d123      	bne.n	8007ea6 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	461a      	mov	r2, r3
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	4413      	add	r3, r2
 8007e6c:	881b      	ldrh	r3, [r3, #0]
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e78:	83fb      	strh	r3, [r7, #30]
 8007e7a:	8bfb      	ldrh	r3, [r7, #30]
 8007e7c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007e80:	83fb      	strh	r3, [r7, #30]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	461a      	mov	r2, r3
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	441a      	add	r2, r3
 8007e90:	8bfb      	ldrh	r3, [r7, #30]
 8007e92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007ea6:	88fb      	ldrh	r3, [r7, #6]
 8007ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d11f      	bne.n	8007ef0 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	4413      	add	r3, r2
 8007ebe:	881b      	ldrh	r3, [r3, #0]
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eca:	83bb      	strh	r3, [r7, #28]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	441a      	add	r2, r3
 8007eda:	8bbb      	ldrh	r3, [r7, #28]
 8007edc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ee0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ee4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ee8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007ef0:	8b7b      	ldrh	r3, [r7, #26]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d008      	beq.n	8007f08 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	6818      	ldr	r0, [r3, #0]
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	6959      	ldr	r1, [r3, #20]
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	895a      	ldrh	r2, [r3, #10]
 8007f02:	8b7b      	ldrh	r3, [r7, #26]
 8007f04:	f007 faf1 	bl	800f4ea <USB_ReadPMA>
    }
  }

  return count;
 8007f08:	8b7b      	ldrh	r3, [r7, #26]
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3720      	adds	r7, #32
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b0a2      	sub	sp, #136	; 0x88
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	60f8      	str	r0, [r7, #12]
 8007f1a:	60b9      	str	r1, [r7, #8]
 8007f1c:	4613      	mov	r3, r2
 8007f1e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007f20:	88fb      	ldrh	r3, [r7, #6]
 8007f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	f000 81c5 	beq.w	80082b6 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	461a      	mov	r2, r3
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	00db      	lsls	r3, r3, #3
 8007f3e:	4413      	add	r3, r2
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	6812      	ldr	r2, [r2, #0]
 8007f44:	4413      	add	r3, r2
 8007f46:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007f4a:	881b      	ldrh	r3, [r3, #0]
 8007f4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f50:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	699a      	ldr	r2, [r3, #24]
 8007f58:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d907      	bls.n	8007f70 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	699a      	ldr	r2, [r3, #24]
 8007f64:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007f68:	1ad2      	subs	r2, r2, r3
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	619a      	str	r2, [r3, #24]
 8007f6e:	e002      	b.n	8007f76 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	2200      	movs	r2, #0
 8007f74:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	699b      	ldr	r3, [r3, #24]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	f040 80b9 	bne.w	80080f2 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	785b      	ldrb	r3, [r3, #1]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d126      	bne.n	8007fd6 <HAL_PCD_EP_DB_Transmit+0xc4>
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	461a      	mov	r2, r3
 8007f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9c:	4413      	add	r3, r2
 8007f9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	00da      	lsls	r2, r3, #3
 8007fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa8:	4413      	add	r3, r2
 8007faa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007fae:	627b      	str	r3, [r7, #36]	; 0x24
 8007fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb2:	881b      	ldrh	r3, [r3, #0]
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007fba:	b29a      	uxth	r2, r3
 8007fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fbe:	801a      	strh	r2, [r3, #0]
 8007fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc2:	881b      	ldrh	r3, [r3, #0]
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fce:	b29a      	uxth	r2, r3
 8007fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd2:	801a      	strh	r2, [r3, #0]
 8007fd4:	e01a      	b.n	800800c <HAL_PCD_EP_DB_Transmit+0xfa>
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	785b      	ldrb	r3, [r3, #1]
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d116      	bne.n	800800c <HAL_PCD_EP_DB_Transmit+0xfa>
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	633b      	str	r3, [r7, #48]	; 0x30
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	461a      	mov	r2, r3
 8007ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff2:	4413      	add	r3, r2
 8007ff4:	633b      	str	r3, [r7, #48]	; 0x30
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	00da      	lsls	r2, r3, #3
 8007ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffe:	4413      	add	r3, r2
 8008000:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008004:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008008:	2200      	movs	r2, #0
 800800a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	623b      	str	r3, [r7, #32]
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	785b      	ldrb	r3, [r3, #1]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d126      	bne.n	8008068 <HAL_PCD_EP_DB_Transmit+0x156>
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	61bb      	str	r3, [r7, #24]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008028:	b29b      	uxth	r3, r3
 800802a:	461a      	mov	r2, r3
 800802c:	69bb      	ldr	r3, [r7, #24]
 800802e:	4413      	add	r3, r2
 8008030:	61bb      	str	r3, [r7, #24]
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	00da      	lsls	r2, r3, #3
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	4413      	add	r3, r2
 800803c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008040:	617b      	str	r3, [r7, #20]
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	881b      	ldrh	r3, [r3, #0]
 8008046:	b29b      	uxth	r3, r3
 8008048:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800804c:	b29a      	uxth	r2, r3
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	801a      	strh	r2, [r3, #0]
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	881b      	ldrh	r3, [r3, #0]
 8008056:	b29b      	uxth	r3, r3
 8008058:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800805c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008060:	b29a      	uxth	r2, r3
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	801a      	strh	r2, [r3, #0]
 8008066:	e017      	b.n	8008098 <HAL_PCD_EP_DB_Transmit+0x186>
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	785b      	ldrb	r3, [r3, #1]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d113      	bne.n	8008098 <HAL_PCD_EP_DB_Transmit+0x186>
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008078:	b29b      	uxth	r3, r3
 800807a:	461a      	mov	r2, r3
 800807c:	6a3b      	ldr	r3, [r7, #32]
 800807e:	4413      	add	r3, r2
 8008080:	623b      	str	r3, [r7, #32]
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	00da      	lsls	r2, r3, #3
 8008088:	6a3b      	ldr	r3, [r7, #32]
 800808a:	4413      	add	r3, r2
 800808c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008090:	61fb      	str	r3, [r7, #28]
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	2200      	movs	r2, #0
 8008096:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	4619      	mov	r1, r3
 800809e:	68f8      	ldr	r0, [r7, #12]
 80080a0:	f00b f9e5 	bl	801346e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80080a4:	88fb      	ldrh	r3, [r7, #6]
 80080a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	f000 82d2 	beq.w	8008654 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	461a      	mov	r2, r3
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	009b      	lsls	r3, r3, #2
 80080bc:	4413      	add	r3, r2
 80080be:	881b      	ldrh	r3, [r3, #0]
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080ca:	827b      	strh	r3, [r7, #18]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	461a      	mov	r2, r3
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	441a      	add	r2, r3
 80080da:	8a7b      	ldrh	r3, [r7, #18]
 80080dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80080e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	8013      	strh	r3, [r2, #0]
 80080f0:	e2b0      	b.n	8008654 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80080f2:	88fb      	ldrh	r3, [r7, #6]
 80080f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d021      	beq.n	8008140 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	461a      	mov	r2, r3
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	4413      	add	r3, r2
 800810a:	881b      	ldrh	r3, [r3, #0]
 800810c:	b29b      	uxth	r3, r3
 800810e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008116:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	461a      	mov	r2, r3
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	441a      	add	r2, r3
 8008128:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800812c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008130:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008134:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800813c:	b29b      	uxth	r3, r3
 800813e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008146:	2b01      	cmp	r3, #1
 8008148:	f040 8284 	bne.w	8008654 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	695a      	ldr	r2, [r3, #20]
 8008150:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008154:	441a      	add	r2, r3
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	69da      	ldr	r2, [r3, #28]
 800815e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008162:	441a      	add	r2, r3
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	6a1a      	ldr	r2, [r3, #32]
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	691b      	ldr	r3, [r3, #16]
 8008170:	429a      	cmp	r2, r3
 8008172:	d309      	bcc.n	8008188 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	691b      	ldr	r3, [r3, #16]
 8008178:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	6a1a      	ldr	r2, [r3, #32]
 800817e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008180:	1ad2      	subs	r2, r2, r3
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	621a      	str	r2, [r3, #32]
 8008186:	e015      	b.n	80081b4 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	6a1b      	ldr	r3, [r3, #32]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d107      	bne.n	80081a0 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8008190:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008194:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	2200      	movs	r2, #0
 800819a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800819e:	e009      	b.n	80081b4 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	6a1b      	ldr	r3, [r3, #32]
 80081ac:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	2200      	movs	r2, #0
 80081b2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	785b      	ldrb	r3, [r3, #1]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d155      	bne.n	8008268 <HAL_PCD_EP_DB_Transmit+0x356>
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	461a      	mov	r2, r3
 80081ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d0:	4413      	add	r3, r2
 80081d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	00da      	lsls	r2, r3, #3
 80081da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081dc:	4413      	add	r3, r2
 80081de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80081e2:	637b      	str	r3, [r7, #52]	; 0x34
 80081e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081e6:	2b3e      	cmp	r3, #62	; 0x3e
 80081e8:	d916      	bls.n	8008218 <HAL_PCD_EP_DB_Transmit+0x306>
 80081ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081ec:	095b      	lsrs	r3, r3, #5
 80081ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80081f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081f2:	f003 031f 	and.w	r3, r3, #31
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d102      	bne.n	8008200 <HAL_PCD_EP_DB_Transmit+0x2ee>
 80081fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081fc:	3b01      	subs	r3, #1
 80081fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8008200:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008202:	b29b      	uxth	r3, r3
 8008204:	029b      	lsls	r3, r3, #10
 8008206:	b29b      	uxth	r3, r3
 8008208:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800820c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008210:	b29a      	uxth	r2, r3
 8008212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008214:	801a      	strh	r2, [r3, #0]
 8008216:	e043      	b.n	80082a0 <HAL_PCD_EP_DB_Transmit+0x38e>
 8008218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800821a:	2b00      	cmp	r3, #0
 800821c:	d112      	bne.n	8008244 <HAL_PCD_EP_DB_Transmit+0x332>
 800821e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008220:	881b      	ldrh	r3, [r3, #0]
 8008222:	b29b      	uxth	r3, r3
 8008224:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008228:	b29a      	uxth	r2, r3
 800822a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800822c:	801a      	strh	r2, [r3, #0]
 800822e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008230:	881b      	ldrh	r3, [r3, #0]
 8008232:	b29b      	uxth	r3, r3
 8008234:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008238:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800823c:	b29a      	uxth	r2, r3
 800823e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008240:	801a      	strh	r2, [r3, #0]
 8008242:	e02d      	b.n	80082a0 <HAL_PCD_EP_DB_Transmit+0x38e>
 8008244:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008246:	085b      	lsrs	r3, r3, #1
 8008248:	64bb      	str	r3, [r7, #72]	; 0x48
 800824a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800824c:	f003 0301 	and.w	r3, r3, #1
 8008250:	2b00      	cmp	r3, #0
 8008252:	d002      	beq.n	800825a <HAL_PCD_EP_DB_Transmit+0x348>
 8008254:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008256:	3301      	adds	r3, #1
 8008258:	64bb      	str	r3, [r7, #72]	; 0x48
 800825a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800825c:	b29b      	uxth	r3, r3
 800825e:	029b      	lsls	r3, r3, #10
 8008260:	b29a      	uxth	r2, r3
 8008262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008264:	801a      	strh	r2, [r3, #0]
 8008266:	e01b      	b.n	80082a0 <HAL_PCD_EP_DB_Transmit+0x38e>
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	785b      	ldrb	r3, [r3, #1]
 800826c:	2b01      	cmp	r3, #1
 800826e:	d117      	bne.n	80082a0 <HAL_PCD_EP_DB_Transmit+0x38e>
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	643b      	str	r3, [r7, #64]	; 0x40
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800827e:	b29b      	uxth	r3, r3
 8008280:	461a      	mov	r2, r3
 8008282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008284:	4413      	add	r3, r2
 8008286:	643b      	str	r3, [r7, #64]	; 0x40
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	00da      	lsls	r2, r3, #3
 800828e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008290:	4413      	add	r3, r2
 8008292:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008296:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800829a:	b29a      	uxth	r2, r3
 800829c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800829e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	6818      	ldr	r0, [r3, #0]
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	6959      	ldr	r1, [r3, #20]
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	891a      	ldrh	r2, [r3, #8]
 80082ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	f007 f8d9 	bl	800f466 <USB_WritePMA>
 80082b4:	e1ce      	b.n	8008654 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082be:	b29b      	uxth	r3, r3
 80082c0:	461a      	mov	r2, r3
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	00db      	lsls	r3, r3, #3
 80082c8:	4413      	add	r3, r2
 80082ca:	68fa      	ldr	r2, [r7, #12]
 80082cc:	6812      	ldr	r2, [r2, #0]
 80082ce:	4413      	add	r3, r2
 80082d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80082d4:	881b      	ldrh	r3, [r3, #0]
 80082d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082da:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	699a      	ldr	r2, [r3, #24]
 80082e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d307      	bcc.n	80082fa <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	699a      	ldr	r2, [r3, #24]
 80082ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80082f2:	1ad2      	subs	r2, r2, r3
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	619a      	str	r2, [r3, #24]
 80082f8:	e002      	b.n	8008300 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	2200      	movs	r2, #0
 80082fe:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	699b      	ldr	r3, [r3, #24]
 8008304:	2b00      	cmp	r3, #0
 8008306:	f040 80c4 	bne.w	8008492 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	785b      	ldrb	r3, [r3, #1]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d126      	bne.n	8008360 <HAL_PCD_EP_DB_Transmit+0x44e>
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	66bb      	str	r3, [r7, #104]	; 0x68
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008320:	b29b      	uxth	r3, r3
 8008322:	461a      	mov	r2, r3
 8008324:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008326:	4413      	add	r3, r2
 8008328:	66bb      	str	r3, [r7, #104]	; 0x68
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	00da      	lsls	r2, r3, #3
 8008330:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008332:	4413      	add	r3, r2
 8008334:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008338:	667b      	str	r3, [r7, #100]	; 0x64
 800833a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800833c:	881b      	ldrh	r3, [r3, #0]
 800833e:	b29b      	uxth	r3, r3
 8008340:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008344:	b29a      	uxth	r2, r3
 8008346:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008348:	801a      	strh	r2, [r3, #0]
 800834a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800834c:	881b      	ldrh	r3, [r3, #0]
 800834e:	b29b      	uxth	r3, r3
 8008350:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008354:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008358:	b29a      	uxth	r2, r3
 800835a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800835c:	801a      	strh	r2, [r3, #0]
 800835e:	e01a      	b.n	8008396 <HAL_PCD_EP_DB_Transmit+0x484>
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	785b      	ldrb	r3, [r3, #1]
 8008364:	2b01      	cmp	r3, #1
 8008366:	d116      	bne.n	8008396 <HAL_PCD_EP_DB_Transmit+0x484>
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	673b      	str	r3, [r7, #112]	; 0x70
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008376:	b29b      	uxth	r3, r3
 8008378:	461a      	mov	r2, r3
 800837a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800837c:	4413      	add	r3, r2
 800837e:	673b      	str	r3, [r7, #112]	; 0x70
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	00da      	lsls	r2, r3, #3
 8008386:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008388:	4413      	add	r3, r2
 800838a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800838e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008392:	2200      	movs	r2, #0
 8008394:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	785b      	ldrb	r3, [r3, #1]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d12f      	bne.n	8008404 <HAL_PCD_EP_DB_Transmit+0x4f2>
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	461a      	mov	r2, r3
 80083b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80083bc:	4413      	add	r3, r2
 80083be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	00da      	lsls	r2, r3, #3
 80083c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80083cc:	4413      	add	r3, r2
 80083ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80083d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80083d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80083da:	881b      	ldrh	r3, [r3, #0]
 80083dc:	b29b      	uxth	r3, r3
 80083de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80083e2:	b29a      	uxth	r2, r3
 80083e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80083e8:	801a      	strh	r2, [r3, #0]
 80083ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80083ee:	881b      	ldrh	r3, [r3, #0]
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083fa:	b29a      	uxth	r2, r3
 80083fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008400:	801a      	strh	r2, [r3, #0]
 8008402:	e017      	b.n	8008434 <HAL_PCD_EP_DB_Transmit+0x522>
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	785b      	ldrb	r3, [r3, #1]
 8008408:	2b01      	cmp	r3, #1
 800840a:	d113      	bne.n	8008434 <HAL_PCD_EP_DB_Transmit+0x522>
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008414:	b29b      	uxth	r3, r3
 8008416:	461a      	mov	r2, r3
 8008418:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800841a:	4413      	add	r3, r2
 800841c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	00da      	lsls	r2, r3, #3
 8008424:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008426:	4413      	add	r3, r2
 8008428:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800842c:	67bb      	str	r3, [r7, #120]	; 0x78
 800842e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008430:	2200      	movs	r2, #0
 8008432:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	4619      	mov	r1, r3
 800843a:	68f8      	ldr	r0, [r7, #12]
 800843c:	f00b f817 	bl	801346e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008440:	88fb      	ldrh	r3, [r7, #6]
 8008442:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008446:	2b00      	cmp	r3, #0
 8008448:	f040 8104 	bne.w	8008654 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	461a      	mov	r2, r3
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	4413      	add	r3, r2
 800845a:	881b      	ldrh	r3, [r3, #0]
 800845c:	b29b      	uxth	r3, r3
 800845e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008466:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	461a      	mov	r2, r3
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	441a      	add	r2, r3
 8008478:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800847c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008480:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008484:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800848c:	b29b      	uxth	r3, r3
 800848e:	8013      	strh	r3, [r2, #0]
 8008490:	e0e0      	b.n	8008654 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008492:	88fb      	ldrh	r3, [r7, #6]
 8008494:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008498:	2b00      	cmp	r3, #0
 800849a:	d121      	bne.n	80084e0 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	461a      	mov	r2, r3
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	4413      	add	r3, r2
 80084aa:	881b      	ldrh	r3, [r3, #0]
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084b6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	461a      	mov	r2, r3
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	441a      	add	r2, r3
 80084c8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80084cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80084d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084dc:	b29b      	uxth	r3, r3
 80084de:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	f040 80b4 	bne.w	8008654 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	695a      	ldr	r2, [r3, #20]
 80084f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80084f4:	441a      	add	r2, r3
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	69da      	ldr	r2, [r3, #28]
 80084fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008502:	441a      	add	r2, r3
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	6a1a      	ldr	r2, [r3, #32]
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	691b      	ldr	r3, [r3, #16]
 8008510:	429a      	cmp	r2, r3
 8008512:	d309      	bcc.n	8008528 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	691b      	ldr	r3, [r3, #16]
 8008518:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	6a1a      	ldr	r2, [r3, #32]
 800851e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008520:	1ad2      	subs	r2, r2, r3
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	621a      	str	r2, [r3, #32]
 8008526:	e015      	b.n	8008554 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	6a1b      	ldr	r3, [r3, #32]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d107      	bne.n	8008540 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8008530:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008534:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	2200      	movs	r2, #0
 800853a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800853e:	e009      	b.n	8008554 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	6a1b      	ldr	r3, [r3, #32]
 8008544:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	2200      	movs	r2, #0
 800854a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	2200      	movs	r2, #0
 8008550:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	663b      	str	r3, [r7, #96]	; 0x60
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	785b      	ldrb	r3, [r3, #1]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d155      	bne.n	800860e <HAL_PCD_EP_DB_Transmit+0x6fc>
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	65bb      	str	r3, [r7, #88]	; 0x58
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008570:	b29b      	uxth	r3, r3
 8008572:	461a      	mov	r2, r3
 8008574:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008576:	4413      	add	r3, r2
 8008578:	65bb      	str	r3, [r7, #88]	; 0x58
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	00da      	lsls	r2, r3, #3
 8008580:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008582:	4413      	add	r3, r2
 8008584:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008588:	657b      	str	r3, [r7, #84]	; 0x54
 800858a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800858c:	2b3e      	cmp	r3, #62	; 0x3e
 800858e:	d916      	bls.n	80085be <HAL_PCD_EP_DB_Transmit+0x6ac>
 8008590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008592:	095b      	lsrs	r3, r3, #5
 8008594:	677b      	str	r3, [r7, #116]	; 0x74
 8008596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008598:	f003 031f 	and.w	r3, r3, #31
 800859c:	2b00      	cmp	r3, #0
 800859e:	d102      	bne.n	80085a6 <HAL_PCD_EP_DB_Transmit+0x694>
 80085a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085a2:	3b01      	subs	r3, #1
 80085a4:	677b      	str	r3, [r7, #116]	; 0x74
 80085a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	029b      	lsls	r3, r3, #10
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085b6:	b29a      	uxth	r2, r3
 80085b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085ba:	801a      	strh	r2, [r3, #0]
 80085bc:	e040      	b.n	8008640 <HAL_PCD_EP_DB_Transmit+0x72e>
 80085be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d112      	bne.n	80085ea <HAL_PCD_EP_DB_Transmit+0x6d8>
 80085c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085c6:	881b      	ldrh	r3, [r3, #0]
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80085ce:	b29a      	uxth	r2, r3
 80085d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085d2:	801a      	strh	r2, [r3, #0]
 80085d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085d6:	881b      	ldrh	r3, [r3, #0]
 80085d8:	b29b      	uxth	r3, r3
 80085da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085e2:	b29a      	uxth	r2, r3
 80085e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085e6:	801a      	strh	r2, [r3, #0]
 80085e8:	e02a      	b.n	8008640 <HAL_PCD_EP_DB_Transmit+0x72e>
 80085ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085ec:	085b      	lsrs	r3, r3, #1
 80085ee:	677b      	str	r3, [r7, #116]	; 0x74
 80085f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085f2:	f003 0301 	and.w	r3, r3, #1
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d002      	beq.n	8008600 <HAL_PCD_EP_DB_Transmit+0x6ee>
 80085fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085fc:	3301      	adds	r3, #1
 80085fe:	677b      	str	r3, [r7, #116]	; 0x74
 8008600:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008602:	b29b      	uxth	r3, r3
 8008604:	029b      	lsls	r3, r3, #10
 8008606:	b29a      	uxth	r2, r3
 8008608:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800860a:	801a      	strh	r2, [r3, #0]
 800860c:	e018      	b.n	8008640 <HAL_PCD_EP_DB_Transmit+0x72e>
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	785b      	ldrb	r3, [r3, #1]
 8008612:	2b01      	cmp	r3, #1
 8008614:	d114      	bne.n	8008640 <HAL_PCD_EP_DB_Transmit+0x72e>
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800861e:	b29b      	uxth	r3, r3
 8008620:	461a      	mov	r2, r3
 8008622:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008624:	4413      	add	r3, r2
 8008626:	663b      	str	r3, [r7, #96]	; 0x60
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	00da      	lsls	r2, r3, #3
 800862e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008630:	4413      	add	r3, r2
 8008632:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008636:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800863a:	b29a      	uxth	r2, r3
 800863c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800863e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	6818      	ldr	r0, [r3, #0]
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	6959      	ldr	r1, [r3, #20]
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	895a      	ldrh	r2, [r3, #10]
 800864c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800864e:	b29b      	uxth	r3, r3
 8008650:	f006 ff09 	bl	800f466 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	461a      	mov	r2, r3
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	4413      	add	r3, r2
 8008662:	881b      	ldrh	r3, [r3, #0]
 8008664:	b29b      	uxth	r3, r3
 8008666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800866a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800866e:	823b      	strh	r3, [r7, #16]
 8008670:	8a3b      	ldrh	r3, [r7, #16]
 8008672:	f083 0310 	eor.w	r3, r3, #16
 8008676:	823b      	strh	r3, [r7, #16]
 8008678:	8a3b      	ldrh	r3, [r7, #16]
 800867a:	f083 0320 	eor.w	r3, r3, #32
 800867e:	823b      	strh	r3, [r7, #16]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	461a      	mov	r2, r3
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	441a      	add	r2, r3
 800868e:	8a3b      	ldrh	r3, [r7, #16]
 8008690:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008694:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008698:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800869c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3788      	adds	r7, #136	; 0x88
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80086ae:	b480      	push	{r7}
 80086b0:	b087      	sub	sp, #28
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	60f8      	str	r0, [r7, #12]
 80086b6:	607b      	str	r3, [r7, #4]
 80086b8:	460b      	mov	r3, r1
 80086ba:	817b      	strh	r3, [r7, #10]
 80086bc:	4613      	mov	r3, r2
 80086be:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80086c0:	897b      	ldrh	r3, [r7, #10]
 80086c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00b      	beq.n	80086e4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80086cc:	897b      	ldrh	r3, [r7, #10]
 80086ce:	f003 0307 	and.w	r3, r3, #7
 80086d2:	1c5a      	adds	r2, r3, #1
 80086d4:	4613      	mov	r3, r2
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	4413      	add	r3, r2
 80086da:	00db      	lsls	r3, r3, #3
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	4413      	add	r3, r2
 80086e0:	617b      	str	r3, [r7, #20]
 80086e2:	e009      	b.n	80086f8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80086e4:	897a      	ldrh	r2, [r7, #10]
 80086e6:	4613      	mov	r3, r2
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	4413      	add	r3, r2
 80086ec:	00db      	lsls	r3, r3, #3
 80086ee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80086f2:	68fa      	ldr	r2, [r7, #12]
 80086f4:	4413      	add	r3, r2
 80086f6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80086f8:	893b      	ldrh	r3, [r7, #8]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d107      	bne.n	800870e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	2200      	movs	r2, #0
 8008702:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	b29a      	uxth	r2, r3
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	80da      	strh	r2, [r3, #6]
 800870c:	e00b      	b.n	8008726 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	2201      	movs	r2, #1
 8008712:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	b29a      	uxth	r2, r3
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	0c1b      	lsrs	r3, r3, #16
 8008720:	b29a      	uxth	r2, r3
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008726:	2300      	movs	r3, #0
}
 8008728:	4618      	mov	r0, r3
 800872a:	371c      	adds	r7, #28
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr

08008734 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008734:	b480      	push	{r7}
 8008736:	b085      	sub	sp, #20
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2201      	movs	r2, #1
 8008746:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2200      	movs	r2, #0
 800874e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008758:	b29b      	uxth	r3, r3
 800875a:	f043 0301 	orr.w	r3, r3, #1
 800875e:	b29a      	uxth	r2, r3
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800876c:	b29b      	uxth	r3, r3
 800876e:	f043 0302 	orr.w	r3, r3, #2
 8008772:	b29a      	uxth	r2, r3
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800877a:	2300      	movs	r3, #0
}
 800877c:	4618      	mov	r0, r3
 800877e:	3714      	adds	r7, #20
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008788:	b480      	push	{r7}
 800878a:	b085      	sub	sp, #20
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d141      	bne.n	800881a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008796:	4b4b      	ldr	r3, [pc, #300]	; (80088c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800879e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087a2:	d131      	bne.n	8008808 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80087a4:	4b47      	ldr	r3, [pc, #284]	; (80088c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087aa:	4a46      	ldr	r2, [pc, #280]	; (80088c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80087b4:	4b43      	ldr	r3, [pc, #268]	; (80088c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80087bc:	4a41      	ldr	r2, [pc, #260]	; (80088c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80087c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80087c4:	4b40      	ldr	r3, [pc, #256]	; (80088c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	2232      	movs	r2, #50	; 0x32
 80087ca:	fb02 f303 	mul.w	r3, r2, r3
 80087ce:	4a3f      	ldr	r2, [pc, #252]	; (80088cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80087d0:	fba2 2303 	umull	r2, r3, r2, r3
 80087d4:	0c9b      	lsrs	r3, r3, #18
 80087d6:	3301      	adds	r3, #1
 80087d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80087da:	e002      	b.n	80087e2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	3b01      	subs	r3, #1
 80087e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80087e2:	4b38      	ldr	r3, [pc, #224]	; (80088c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087e4:	695b      	ldr	r3, [r3, #20]
 80087e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087ee:	d102      	bne.n	80087f6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d1f2      	bne.n	80087dc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80087f6:	4b33      	ldr	r3, [pc, #204]	; (80088c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087f8:	695b      	ldr	r3, [r3, #20]
 80087fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008802:	d158      	bne.n	80088b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008804:	2303      	movs	r3, #3
 8008806:	e057      	b.n	80088b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008808:	4b2e      	ldr	r3, [pc, #184]	; (80088c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800880a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800880e:	4a2d      	ldr	r2, [pc, #180]	; (80088c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008810:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008814:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008818:	e04d      	b.n	80088b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008820:	d141      	bne.n	80088a6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008822:	4b28      	ldr	r3, [pc, #160]	; (80088c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800882a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800882e:	d131      	bne.n	8008894 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008830:	4b24      	ldr	r3, [pc, #144]	; (80088c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008832:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008836:	4a23      	ldr	r2, [pc, #140]	; (80088c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800883c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008840:	4b20      	ldr	r3, [pc, #128]	; (80088c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008848:	4a1e      	ldr	r2, [pc, #120]	; (80088c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800884a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800884e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008850:	4b1d      	ldr	r3, [pc, #116]	; (80088c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	2232      	movs	r2, #50	; 0x32
 8008856:	fb02 f303 	mul.w	r3, r2, r3
 800885a:	4a1c      	ldr	r2, [pc, #112]	; (80088cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800885c:	fba2 2303 	umull	r2, r3, r2, r3
 8008860:	0c9b      	lsrs	r3, r3, #18
 8008862:	3301      	adds	r3, #1
 8008864:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008866:	e002      	b.n	800886e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	3b01      	subs	r3, #1
 800886c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800886e:	4b15      	ldr	r3, [pc, #84]	; (80088c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008870:	695b      	ldr	r3, [r3, #20]
 8008872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008876:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800887a:	d102      	bne.n	8008882 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d1f2      	bne.n	8008868 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008882:	4b10      	ldr	r3, [pc, #64]	; (80088c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008884:	695b      	ldr	r3, [r3, #20]
 8008886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800888a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800888e:	d112      	bne.n	80088b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008890:	2303      	movs	r3, #3
 8008892:	e011      	b.n	80088b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008894:	4b0b      	ldr	r3, [pc, #44]	; (80088c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008896:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800889a:	4a0a      	ldr	r2, [pc, #40]	; (80088c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800889c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80088a4:	e007      	b.n	80088b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80088a6:	4b07      	ldr	r3, [pc, #28]	; (80088c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80088ae:	4a05      	ldr	r2, [pc, #20]	; (80088c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80088b4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80088b6:	2300      	movs	r3, #0
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3714      	adds	r7, #20
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr
 80088c4:	40007000 	.word	0x40007000
 80088c8:	20000004 	.word	0x20000004
 80088cc:	431bde83 	.word	0x431bde83

080088d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b088      	sub	sp, #32
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d101      	bne.n	80088e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80088de:	2301      	movs	r3, #1
 80088e0:	e306      	b.n	8008ef0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f003 0301 	and.w	r3, r3, #1
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d075      	beq.n	80089da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80088ee:	4b97      	ldr	r3, [pc, #604]	; (8008b4c <HAL_RCC_OscConfig+0x27c>)
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	f003 030c 	and.w	r3, r3, #12
 80088f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80088f8:	4b94      	ldr	r3, [pc, #592]	; (8008b4c <HAL_RCC_OscConfig+0x27c>)
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	f003 0303 	and.w	r3, r3, #3
 8008900:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	2b0c      	cmp	r3, #12
 8008906:	d102      	bne.n	800890e <HAL_RCC_OscConfig+0x3e>
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	2b03      	cmp	r3, #3
 800890c:	d002      	beq.n	8008914 <HAL_RCC_OscConfig+0x44>
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	2b08      	cmp	r3, #8
 8008912:	d10b      	bne.n	800892c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008914:	4b8d      	ldr	r3, [pc, #564]	; (8008b4c <HAL_RCC_OscConfig+0x27c>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800891c:	2b00      	cmp	r3, #0
 800891e:	d05b      	beq.n	80089d8 <HAL_RCC_OscConfig+0x108>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d157      	bne.n	80089d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	e2e1      	b.n	8008ef0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008934:	d106      	bne.n	8008944 <HAL_RCC_OscConfig+0x74>
 8008936:	4b85      	ldr	r3, [pc, #532]	; (8008b4c <HAL_RCC_OscConfig+0x27c>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a84      	ldr	r2, [pc, #528]	; (8008b4c <HAL_RCC_OscConfig+0x27c>)
 800893c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008940:	6013      	str	r3, [r2, #0]
 8008942:	e01d      	b.n	8008980 <HAL_RCC_OscConfig+0xb0>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800894c:	d10c      	bne.n	8008968 <HAL_RCC_OscConfig+0x98>
 800894e:	4b7f      	ldr	r3, [pc, #508]	; (8008b4c <HAL_RCC_OscConfig+0x27c>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4a7e      	ldr	r2, [pc, #504]	; (8008b4c <HAL_RCC_OscConfig+0x27c>)
 8008954:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008958:	6013      	str	r3, [r2, #0]
 800895a:	4b7c      	ldr	r3, [pc, #496]	; (8008b4c <HAL_RCC_OscConfig+0x27c>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a7b      	ldr	r2, [pc, #492]	; (8008b4c <HAL_RCC_OscConfig+0x27c>)
 8008960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008964:	6013      	str	r3, [r2, #0]
 8008966:	e00b      	b.n	8008980 <HAL_RCC_OscConfig+0xb0>
 8008968:	4b78      	ldr	r3, [pc, #480]	; (8008b4c <HAL_RCC_OscConfig+0x27c>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a77      	ldr	r2, [pc, #476]	; (8008b4c <HAL_RCC_OscConfig+0x27c>)
 800896e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008972:	6013      	str	r3, [r2, #0]
 8008974:	4b75      	ldr	r3, [pc, #468]	; (8008b4c <HAL_RCC_OscConfig+0x27c>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a74      	ldr	r2, [pc, #464]	; (8008b4c <HAL_RCC_OscConfig+0x27c>)
 800897a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800897e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d013      	beq.n	80089b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008988:	f7fb fbae 	bl	80040e8 <HAL_GetTick>
 800898c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800898e:	e008      	b.n	80089a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008990:	f7fb fbaa 	bl	80040e8 <HAL_GetTick>
 8008994:	4602      	mov	r2, r0
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	1ad3      	subs	r3, r2, r3
 800899a:	2b64      	cmp	r3, #100	; 0x64
 800899c:	d901      	bls.n	80089a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800899e:	2303      	movs	r3, #3
 80089a0:	e2a6      	b.n	8008ef0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80089a2:	4b6a      	ldr	r3, [pc, #424]	; (8008b4c <HAL_RCC_OscConfig+0x27c>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d0f0      	beq.n	8008990 <HAL_RCC_OscConfig+0xc0>
 80089ae:	e014      	b.n	80089da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089b0:	f7fb fb9a 	bl	80040e8 <HAL_GetTick>
 80089b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80089b6:	e008      	b.n	80089ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80089b8:	f7fb fb96 	bl	80040e8 <HAL_GetTick>
 80089bc:	4602      	mov	r2, r0
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	1ad3      	subs	r3, r2, r3
 80089c2:	2b64      	cmp	r3, #100	; 0x64
 80089c4:	d901      	bls.n	80089ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80089c6:	2303      	movs	r3, #3
 80089c8:	e292      	b.n	8008ef0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80089ca:	4b60      	ldr	r3, [pc, #384]	; (8008b4c <HAL_RCC_OscConfig+0x27c>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d1f0      	bne.n	80089b8 <HAL_RCC_OscConfig+0xe8>
 80089d6:	e000      	b.n	80089da <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f003 0302 	and.w	r3, r3, #2
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d075      	beq.n	8008ad2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80089e6:	4b59      	ldr	r3, [pc, #356]	; (8008b4c <HAL_RCC_OscConfig+0x27c>)
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	f003 030c 	and.w	r3, r3, #12
 80089ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80089f0:	4b56      	ldr	r3, [pc, #344]	; (8008b4c <HAL_RCC_OscConfig+0x27c>)
 80089f2:	68db      	ldr	r3, [r3, #12]
 80089f4:	f003 0303 	and.w	r3, r3, #3
 80089f8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80089fa:	69bb      	ldr	r3, [r7, #24]
 80089fc:	2b0c      	cmp	r3, #12
 80089fe:	d102      	bne.n	8008a06 <HAL_RCC_OscConfig+0x136>
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	2b02      	cmp	r3, #2
 8008a04:	d002      	beq.n	8008a0c <HAL_RCC_OscConfig+0x13c>
 8008a06:	69bb      	ldr	r3, [r7, #24]
 8008a08:	2b04      	cmp	r3, #4
 8008a0a:	d11f      	bne.n	8008a4c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a0c:	4b4f      	ldr	r3, [pc, #316]	; (8008b4c <HAL_RCC_OscConfig+0x27c>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d005      	beq.n	8008a24 <HAL_RCC_OscConfig+0x154>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d101      	bne.n	8008a24 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008a20:	2301      	movs	r3, #1
 8008a22:	e265      	b.n	8008ef0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a24:	4b49      	ldr	r3, [pc, #292]	; (8008b4c <HAL_RCC_OscConfig+0x27c>)
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	061b      	lsls	r3, r3, #24
 8008a32:	4946      	ldr	r1, [pc, #280]	; (8008b4c <HAL_RCC_OscConfig+0x27c>)
 8008a34:	4313      	orrs	r3, r2
 8008a36:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008a38:	4b45      	ldr	r3, [pc, #276]	; (8008b50 <HAL_RCC_OscConfig+0x280>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f7fa fefb 	bl	8003838 <HAL_InitTick>
 8008a42:	4603      	mov	r3, r0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d043      	beq.n	8008ad0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	e251      	b.n	8008ef0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d023      	beq.n	8008a9c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008a54:	4b3d      	ldr	r3, [pc, #244]	; (8008b4c <HAL_RCC_OscConfig+0x27c>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a3c      	ldr	r2, [pc, #240]	; (8008b4c <HAL_RCC_OscConfig+0x27c>)
 8008a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a60:	f7fb fb42 	bl	80040e8 <HAL_GetTick>
 8008a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008a66:	e008      	b.n	8008a7a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a68:	f7fb fb3e 	bl	80040e8 <HAL_GetTick>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	1ad3      	subs	r3, r2, r3
 8008a72:	2b02      	cmp	r3, #2
 8008a74:	d901      	bls.n	8008a7a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008a76:	2303      	movs	r3, #3
 8008a78:	e23a      	b.n	8008ef0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008a7a:	4b34      	ldr	r3, [pc, #208]	; (8008b4c <HAL_RCC_OscConfig+0x27c>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d0f0      	beq.n	8008a68 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a86:	4b31      	ldr	r3, [pc, #196]	; (8008b4c <HAL_RCC_OscConfig+0x27c>)
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	691b      	ldr	r3, [r3, #16]
 8008a92:	061b      	lsls	r3, r3, #24
 8008a94:	492d      	ldr	r1, [pc, #180]	; (8008b4c <HAL_RCC_OscConfig+0x27c>)
 8008a96:	4313      	orrs	r3, r2
 8008a98:	604b      	str	r3, [r1, #4]
 8008a9a:	e01a      	b.n	8008ad2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008a9c:	4b2b      	ldr	r3, [pc, #172]	; (8008b4c <HAL_RCC_OscConfig+0x27c>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a2a      	ldr	r2, [pc, #168]	; (8008b4c <HAL_RCC_OscConfig+0x27c>)
 8008aa2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aa8:	f7fb fb1e 	bl	80040e8 <HAL_GetTick>
 8008aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008aae:	e008      	b.n	8008ac2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ab0:	f7fb fb1a 	bl	80040e8 <HAL_GetTick>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	1ad3      	subs	r3, r2, r3
 8008aba:	2b02      	cmp	r3, #2
 8008abc:	d901      	bls.n	8008ac2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008abe:	2303      	movs	r3, #3
 8008ac0:	e216      	b.n	8008ef0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008ac2:	4b22      	ldr	r3, [pc, #136]	; (8008b4c <HAL_RCC_OscConfig+0x27c>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d1f0      	bne.n	8008ab0 <HAL_RCC_OscConfig+0x1e0>
 8008ace:	e000      	b.n	8008ad2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008ad0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f003 0308 	and.w	r3, r3, #8
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d041      	beq.n	8008b62 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	695b      	ldr	r3, [r3, #20]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d01c      	beq.n	8008b20 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008ae6:	4b19      	ldr	r3, [pc, #100]	; (8008b4c <HAL_RCC_OscConfig+0x27c>)
 8008ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008aec:	4a17      	ldr	r2, [pc, #92]	; (8008b4c <HAL_RCC_OscConfig+0x27c>)
 8008aee:	f043 0301 	orr.w	r3, r3, #1
 8008af2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008af6:	f7fb faf7 	bl	80040e8 <HAL_GetTick>
 8008afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008afc:	e008      	b.n	8008b10 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008afe:	f7fb faf3 	bl	80040e8 <HAL_GetTick>
 8008b02:	4602      	mov	r2, r0
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	1ad3      	subs	r3, r2, r3
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	d901      	bls.n	8008b10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008b0c:	2303      	movs	r3, #3
 8008b0e:	e1ef      	b.n	8008ef0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008b10:	4b0e      	ldr	r3, [pc, #56]	; (8008b4c <HAL_RCC_OscConfig+0x27c>)
 8008b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b16:	f003 0302 	and.w	r3, r3, #2
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d0ef      	beq.n	8008afe <HAL_RCC_OscConfig+0x22e>
 8008b1e:	e020      	b.n	8008b62 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b20:	4b0a      	ldr	r3, [pc, #40]	; (8008b4c <HAL_RCC_OscConfig+0x27c>)
 8008b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b26:	4a09      	ldr	r2, [pc, #36]	; (8008b4c <HAL_RCC_OscConfig+0x27c>)
 8008b28:	f023 0301 	bic.w	r3, r3, #1
 8008b2c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b30:	f7fb fada 	bl	80040e8 <HAL_GetTick>
 8008b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008b36:	e00d      	b.n	8008b54 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b38:	f7fb fad6 	bl	80040e8 <HAL_GetTick>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	1ad3      	subs	r3, r2, r3
 8008b42:	2b02      	cmp	r3, #2
 8008b44:	d906      	bls.n	8008b54 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008b46:	2303      	movs	r3, #3
 8008b48:	e1d2      	b.n	8008ef0 <HAL_RCC_OscConfig+0x620>
 8008b4a:	bf00      	nop
 8008b4c:	40021000 	.word	0x40021000
 8008b50:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008b54:	4b8c      	ldr	r3, [pc, #560]	; (8008d88 <HAL_RCC_OscConfig+0x4b8>)
 8008b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b5a:	f003 0302 	and.w	r3, r3, #2
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d1ea      	bne.n	8008b38 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f003 0304 	and.w	r3, r3, #4
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	f000 80a6 	beq.w	8008cbc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008b70:	2300      	movs	r3, #0
 8008b72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008b74:	4b84      	ldr	r3, [pc, #528]	; (8008d88 <HAL_RCC_OscConfig+0x4b8>)
 8008b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d101      	bne.n	8008b84 <HAL_RCC_OscConfig+0x2b4>
 8008b80:	2301      	movs	r3, #1
 8008b82:	e000      	b.n	8008b86 <HAL_RCC_OscConfig+0x2b6>
 8008b84:	2300      	movs	r3, #0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d00d      	beq.n	8008ba6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008b8a:	4b7f      	ldr	r3, [pc, #508]	; (8008d88 <HAL_RCC_OscConfig+0x4b8>)
 8008b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b8e:	4a7e      	ldr	r2, [pc, #504]	; (8008d88 <HAL_RCC_OscConfig+0x4b8>)
 8008b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b94:	6593      	str	r3, [r2, #88]	; 0x58
 8008b96:	4b7c      	ldr	r3, [pc, #496]	; (8008d88 <HAL_RCC_OscConfig+0x4b8>)
 8008b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b9e:	60fb      	str	r3, [r7, #12]
 8008ba0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008ba6:	4b79      	ldr	r3, [pc, #484]	; (8008d8c <HAL_RCC_OscConfig+0x4bc>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d118      	bne.n	8008be4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008bb2:	4b76      	ldr	r3, [pc, #472]	; (8008d8c <HAL_RCC_OscConfig+0x4bc>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a75      	ldr	r2, [pc, #468]	; (8008d8c <HAL_RCC_OscConfig+0x4bc>)
 8008bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008bbe:	f7fb fa93 	bl	80040e8 <HAL_GetTick>
 8008bc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008bc4:	e008      	b.n	8008bd8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008bc6:	f7fb fa8f 	bl	80040e8 <HAL_GetTick>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	1ad3      	subs	r3, r2, r3
 8008bd0:	2b02      	cmp	r3, #2
 8008bd2:	d901      	bls.n	8008bd8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008bd4:	2303      	movs	r3, #3
 8008bd6:	e18b      	b.n	8008ef0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008bd8:	4b6c      	ldr	r3, [pc, #432]	; (8008d8c <HAL_RCC_OscConfig+0x4bc>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d0f0      	beq.n	8008bc6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d108      	bne.n	8008bfe <HAL_RCC_OscConfig+0x32e>
 8008bec:	4b66      	ldr	r3, [pc, #408]	; (8008d88 <HAL_RCC_OscConfig+0x4b8>)
 8008bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bf2:	4a65      	ldr	r2, [pc, #404]	; (8008d88 <HAL_RCC_OscConfig+0x4b8>)
 8008bf4:	f043 0301 	orr.w	r3, r3, #1
 8008bf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008bfc:	e024      	b.n	8008c48 <HAL_RCC_OscConfig+0x378>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	2b05      	cmp	r3, #5
 8008c04:	d110      	bne.n	8008c28 <HAL_RCC_OscConfig+0x358>
 8008c06:	4b60      	ldr	r3, [pc, #384]	; (8008d88 <HAL_RCC_OscConfig+0x4b8>)
 8008c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c0c:	4a5e      	ldr	r2, [pc, #376]	; (8008d88 <HAL_RCC_OscConfig+0x4b8>)
 8008c0e:	f043 0304 	orr.w	r3, r3, #4
 8008c12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008c16:	4b5c      	ldr	r3, [pc, #368]	; (8008d88 <HAL_RCC_OscConfig+0x4b8>)
 8008c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c1c:	4a5a      	ldr	r2, [pc, #360]	; (8008d88 <HAL_RCC_OscConfig+0x4b8>)
 8008c1e:	f043 0301 	orr.w	r3, r3, #1
 8008c22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008c26:	e00f      	b.n	8008c48 <HAL_RCC_OscConfig+0x378>
 8008c28:	4b57      	ldr	r3, [pc, #348]	; (8008d88 <HAL_RCC_OscConfig+0x4b8>)
 8008c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c2e:	4a56      	ldr	r2, [pc, #344]	; (8008d88 <HAL_RCC_OscConfig+0x4b8>)
 8008c30:	f023 0301 	bic.w	r3, r3, #1
 8008c34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008c38:	4b53      	ldr	r3, [pc, #332]	; (8008d88 <HAL_RCC_OscConfig+0x4b8>)
 8008c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c3e:	4a52      	ldr	r2, [pc, #328]	; (8008d88 <HAL_RCC_OscConfig+0x4b8>)
 8008c40:	f023 0304 	bic.w	r3, r3, #4
 8008c44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	689b      	ldr	r3, [r3, #8]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d016      	beq.n	8008c7e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c50:	f7fb fa4a 	bl	80040e8 <HAL_GetTick>
 8008c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008c56:	e00a      	b.n	8008c6e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c58:	f7fb fa46 	bl	80040e8 <HAL_GetTick>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	1ad3      	subs	r3, r2, r3
 8008c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d901      	bls.n	8008c6e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008c6a:	2303      	movs	r3, #3
 8008c6c:	e140      	b.n	8008ef0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008c6e:	4b46      	ldr	r3, [pc, #280]	; (8008d88 <HAL_RCC_OscConfig+0x4b8>)
 8008c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c74:	f003 0302 	and.w	r3, r3, #2
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d0ed      	beq.n	8008c58 <HAL_RCC_OscConfig+0x388>
 8008c7c:	e015      	b.n	8008caa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c7e:	f7fb fa33 	bl	80040e8 <HAL_GetTick>
 8008c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008c84:	e00a      	b.n	8008c9c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c86:	f7fb fa2f 	bl	80040e8 <HAL_GetTick>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	1ad3      	subs	r3, r2, r3
 8008c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d901      	bls.n	8008c9c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008c98:	2303      	movs	r3, #3
 8008c9a:	e129      	b.n	8008ef0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008c9c:	4b3a      	ldr	r3, [pc, #232]	; (8008d88 <HAL_RCC_OscConfig+0x4b8>)
 8008c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ca2:	f003 0302 	and.w	r3, r3, #2
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d1ed      	bne.n	8008c86 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008caa:	7ffb      	ldrb	r3, [r7, #31]
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d105      	bne.n	8008cbc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008cb0:	4b35      	ldr	r3, [pc, #212]	; (8008d88 <HAL_RCC_OscConfig+0x4b8>)
 8008cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cb4:	4a34      	ldr	r2, [pc, #208]	; (8008d88 <HAL_RCC_OscConfig+0x4b8>)
 8008cb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008cba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f003 0320 	and.w	r3, r3, #32
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d03c      	beq.n	8008d42 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	699b      	ldr	r3, [r3, #24]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d01c      	beq.n	8008d0a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008cd0:	4b2d      	ldr	r3, [pc, #180]	; (8008d88 <HAL_RCC_OscConfig+0x4b8>)
 8008cd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008cd6:	4a2c      	ldr	r2, [pc, #176]	; (8008d88 <HAL_RCC_OscConfig+0x4b8>)
 8008cd8:	f043 0301 	orr.w	r3, r3, #1
 8008cdc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ce0:	f7fb fa02 	bl	80040e8 <HAL_GetTick>
 8008ce4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008ce6:	e008      	b.n	8008cfa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008ce8:	f7fb f9fe 	bl	80040e8 <HAL_GetTick>
 8008cec:	4602      	mov	r2, r0
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	1ad3      	subs	r3, r2, r3
 8008cf2:	2b02      	cmp	r3, #2
 8008cf4:	d901      	bls.n	8008cfa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008cf6:	2303      	movs	r3, #3
 8008cf8:	e0fa      	b.n	8008ef0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008cfa:	4b23      	ldr	r3, [pc, #140]	; (8008d88 <HAL_RCC_OscConfig+0x4b8>)
 8008cfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008d00:	f003 0302 	and.w	r3, r3, #2
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d0ef      	beq.n	8008ce8 <HAL_RCC_OscConfig+0x418>
 8008d08:	e01b      	b.n	8008d42 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008d0a:	4b1f      	ldr	r3, [pc, #124]	; (8008d88 <HAL_RCC_OscConfig+0x4b8>)
 8008d0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008d10:	4a1d      	ldr	r2, [pc, #116]	; (8008d88 <HAL_RCC_OscConfig+0x4b8>)
 8008d12:	f023 0301 	bic.w	r3, r3, #1
 8008d16:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d1a:	f7fb f9e5 	bl	80040e8 <HAL_GetTick>
 8008d1e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008d20:	e008      	b.n	8008d34 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008d22:	f7fb f9e1 	bl	80040e8 <HAL_GetTick>
 8008d26:	4602      	mov	r2, r0
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	1ad3      	subs	r3, r2, r3
 8008d2c:	2b02      	cmp	r3, #2
 8008d2e:	d901      	bls.n	8008d34 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008d30:	2303      	movs	r3, #3
 8008d32:	e0dd      	b.n	8008ef0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008d34:	4b14      	ldr	r3, [pc, #80]	; (8008d88 <HAL_RCC_OscConfig+0x4b8>)
 8008d36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008d3a:	f003 0302 	and.w	r3, r3, #2
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d1ef      	bne.n	8008d22 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	69db      	ldr	r3, [r3, #28]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	f000 80d1 	beq.w	8008eee <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008d4c:	4b0e      	ldr	r3, [pc, #56]	; (8008d88 <HAL_RCC_OscConfig+0x4b8>)
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	f003 030c 	and.w	r3, r3, #12
 8008d54:	2b0c      	cmp	r3, #12
 8008d56:	f000 808b 	beq.w	8008e70 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	69db      	ldr	r3, [r3, #28]
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	d15e      	bne.n	8008e20 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d62:	4b09      	ldr	r3, [pc, #36]	; (8008d88 <HAL_RCC_OscConfig+0x4b8>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a08      	ldr	r2, [pc, #32]	; (8008d88 <HAL_RCC_OscConfig+0x4b8>)
 8008d68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d6e:	f7fb f9bb 	bl	80040e8 <HAL_GetTick>
 8008d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d74:	e00c      	b.n	8008d90 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d76:	f7fb f9b7 	bl	80040e8 <HAL_GetTick>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	1ad3      	subs	r3, r2, r3
 8008d80:	2b02      	cmp	r3, #2
 8008d82:	d905      	bls.n	8008d90 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008d84:	2303      	movs	r3, #3
 8008d86:	e0b3      	b.n	8008ef0 <HAL_RCC_OscConfig+0x620>
 8008d88:	40021000 	.word	0x40021000
 8008d8c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d90:	4b59      	ldr	r3, [pc, #356]	; (8008ef8 <HAL_RCC_OscConfig+0x628>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d1ec      	bne.n	8008d76 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008d9c:	4b56      	ldr	r3, [pc, #344]	; (8008ef8 <HAL_RCC_OscConfig+0x628>)
 8008d9e:	68da      	ldr	r2, [r3, #12]
 8008da0:	4b56      	ldr	r3, [pc, #344]	; (8008efc <HAL_RCC_OscConfig+0x62c>)
 8008da2:	4013      	ands	r3, r2
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	6a11      	ldr	r1, [r2, #32]
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008dac:	3a01      	subs	r2, #1
 8008dae:	0112      	lsls	r2, r2, #4
 8008db0:	4311      	orrs	r1, r2
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008db6:	0212      	lsls	r2, r2, #8
 8008db8:	4311      	orrs	r1, r2
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008dbe:	0852      	lsrs	r2, r2, #1
 8008dc0:	3a01      	subs	r2, #1
 8008dc2:	0552      	lsls	r2, r2, #21
 8008dc4:	4311      	orrs	r1, r2
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008dca:	0852      	lsrs	r2, r2, #1
 8008dcc:	3a01      	subs	r2, #1
 8008dce:	0652      	lsls	r2, r2, #25
 8008dd0:	4311      	orrs	r1, r2
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008dd6:	06d2      	lsls	r2, r2, #27
 8008dd8:	430a      	orrs	r2, r1
 8008dda:	4947      	ldr	r1, [pc, #284]	; (8008ef8 <HAL_RCC_OscConfig+0x628>)
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008de0:	4b45      	ldr	r3, [pc, #276]	; (8008ef8 <HAL_RCC_OscConfig+0x628>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a44      	ldr	r2, [pc, #272]	; (8008ef8 <HAL_RCC_OscConfig+0x628>)
 8008de6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008dea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008dec:	4b42      	ldr	r3, [pc, #264]	; (8008ef8 <HAL_RCC_OscConfig+0x628>)
 8008dee:	68db      	ldr	r3, [r3, #12]
 8008df0:	4a41      	ldr	r2, [pc, #260]	; (8008ef8 <HAL_RCC_OscConfig+0x628>)
 8008df2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008df6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008df8:	f7fb f976 	bl	80040e8 <HAL_GetTick>
 8008dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008dfe:	e008      	b.n	8008e12 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e00:	f7fb f972 	bl	80040e8 <HAL_GetTick>
 8008e04:	4602      	mov	r2, r0
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	1ad3      	subs	r3, r2, r3
 8008e0a:	2b02      	cmp	r3, #2
 8008e0c:	d901      	bls.n	8008e12 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008e0e:	2303      	movs	r3, #3
 8008e10:	e06e      	b.n	8008ef0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008e12:	4b39      	ldr	r3, [pc, #228]	; (8008ef8 <HAL_RCC_OscConfig+0x628>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d0f0      	beq.n	8008e00 <HAL_RCC_OscConfig+0x530>
 8008e1e:	e066      	b.n	8008eee <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e20:	4b35      	ldr	r3, [pc, #212]	; (8008ef8 <HAL_RCC_OscConfig+0x628>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a34      	ldr	r2, [pc, #208]	; (8008ef8 <HAL_RCC_OscConfig+0x628>)
 8008e26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e2a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8008e2c:	4b32      	ldr	r3, [pc, #200]	; (8008ef8 <HAL_RCC_OscConfig+0x628>)
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	4a31      	ldr	r2, [pc, #196]	; (8008ef8 <HAL_RCC_OscConfig+0x628>)
 8008e32:	f023 0303 	bic.w	r3, r3, #3
 8008e36:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008e38:	4b2f      	ldr	r3, [pc, #188]	; (8008ef8 <HAL_RCC_OscConfig+0x628>)
 8008e3a:	68db      	ldr	r3, [r3, #12]
 8008e3c:	4a2e      	ldr	r2, [pc, #184]	; (8008ef8 <HAL_RCC_OscConfig+0x628>)
 8008e3e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8008e42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e46:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e48:	f7fb f94e 	bl	80040e8 <HAL_GetTick>
 8008e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008e4e:	e008      	b.n	8008e62 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e50:	f7fb f94a 	bl	80040e8 <HAL_GetTick>
 8008e54:	4602      	mov	r2, r0
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	1ad3      	subs	r3, r2, r3
 8008e5a:	2b02      	cmp	r3, #2
 8008e5c:	d901      	bls.n	8008e62 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8008e5e:	2303      	movs	r3, #3
 8008e60:	e046      	b.n	8008ef0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008e62:	4b25      	ldr	r3, [pc, #148]	; (8008ef8 <HAL_RCC_OscConfig+0x628>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d1f0      	bne.n	8008e50 <HAL_RCC_OscConfig+0x580>
 8008e6e:	e03e      	b.n	8008eee <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	69db      	ldr	r3, [r3, #28]
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d101      	bne.n	8008e7c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	e039      	b.n	8008ef0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008e7c:	4b1e      	ldr	r3, [pc, #120]	; (8008ef8 <HAL_RCC_OscConfig+0x628>)
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	f003 0203 	and.w	r2, r3, #3
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6a1b      	ldr	r3, [r3, #32]
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d12c      	bne.n	8008eea <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d123      	bne.n	8008eea <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eac:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d11b      	bne.n	8008eea <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ebc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d113      	bne.n	8008eea <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ecc:	085b      	lsrs	r3, r3, #1
 8008ece:	3b01      	subs	r3, #1
 8008ed0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d109      	bne.n	8008eea <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ee0:	085b      	lsrs	r3, r3, #1
 8008ee2:	3b01      	subs	r3, #1
 8008ee4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d001      	beq.n	8008eee <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8008eea:	2301      	movs	r3, #1
 8008eec:	e000      	b.n	8008ef0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8008eee:	2300      	movs	r3, #0
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3720      	adds	r7, #32
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}
 8008ef8:	40021000 	.word	0x40021000
 8008efc:	019f800c 	.word	0x019f800c

08008f00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b086      	sub	sp, #24
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d101      	bne.n	8008f18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008f14:	2301      	movs	r3, #1
 8008f16:	e11e      	b.n	8009156 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008f18:	4b91      	ldr	r3, [pc, #580]	; (8009160 <HAL_RCC_ClockConfig+0x260>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f003 030f 	and.w	r3, r3, #15
 8008f20:	683a      	ldr	r2, [r7, #0]
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d910      	bls.n	8008f48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f26:	4b8e      	ldr	r3, [pc, #568]	; (8009160 <HAL_RCC_ClockConfig+0x260>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f023 020f 	bic.w	r2, r3, #15
 8008f2e:	498c      	ldr	r1, [pc, #560]	; (8009160 <HAL_RCC_ClockConfig+0x260>)
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	4313      	orrs	r3, r2
 8008f34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f36:	4b8a      	ldr	r3, [pc, #552]	; (8009160 <HAL_RCC_ClockConfig+0x260>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f003 030f 	and.w	r3, r3, #15
 8008f3e:	683a      	ldr	r2, [r7, #0]
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d001      	beq.n	8008f48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008f44:	2301      	movs	r3, #1
 8008f46:	e106      	b.n	8009156 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f003 0301 	and.w	r3, r3, #1
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d073      	beq.n	800903c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	2b03      	cmp	r3, #3
 8008f5a:	d129      	bne.n	8008fb0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008f5c:	4b81      	ldr	r3, [pc, #516]	; (8009164 <HAL_RCC_ClockConfig+0x264>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d101      	bne.n	8008f6c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e0f4      	b.n	8009156 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008f6c:	f000 f9d0 	bl	8009310 <RCC_GetSysClockFreqFromPLLSource>
 8008f70:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	4a7c      	ldr	r2, [pc, #496]	; (8009168 <HAL_RCC_ClockConfig+0x268>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d93f      	bls.n	8008ffa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008f7a:	4b7a      	ldr	r3, [pc, #488]	; (8009164 <HAL_RCC_ClockConfig+0x264>)
 8008f7c:	689b      	ldr	r3, [r3, #8]
 8008f7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d009      	beq.n	8008f9a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d033      	beq.n	8008ffa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d12f      	bne.n	8008ffa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008f9a:	4b72      	ldr	r3, [pc, #456]	; (8009164 <HAL_RCC_ClockConfig+0x264>)
 8008f9c:	689b      	ldr	r3, [r3, #8]
 8008f9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008fa2:	4a70      	ldr	r2, [pc, #448]	; (8009164 <HAL_RCC_ClockConfig+0x264>)
 8008fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fa8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008faa:	2380      	movs	r3, #128	; 0x80
 8008fac:	617b      	str	r3, [r7, #20]
 8008fae:	e024      	b.n	8008ffa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	2b02      	cmp	r3, #2
 8008fb6:	d107      	bne.n	8008fc8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008fb8:	4b6a      	ldr	r3, [pc, #424]	; (8009164 <HAL_RCC_ClockConfig+0x264>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d109      	bne.n	8008fd8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	e0c6      	b.n	8009156 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008fc8:	4b66      	ldr	r3, [pc, #408]	; (8009164 <HAL_RCC_ClockConfig+0x264>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d101      	bne.n	8008fd8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	e0be      	b.n	8009156 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008fd8:	f000 f8ce 	bl	8009178 <HAL_RCC_GetSysClockFreq>
 8008fdc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	4a61      	ldr	r2, [pc, #388]	; (8009168 <HAL_RCC_ClockConfig+0x268>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d909      	bls.n	8008ffa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008fe6:	4b5f      	ldr	r3, [pc, #380]	; (8009164 <HAL_RCC_ClockConfig+0x264>)
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008fee:	4a5d      	ldr	r2, [pc, #372]	; (8009164 <HAL_RCC_ClockConfig+0x264>)
 8008ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ff4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008ff6:	2380      	movs	r3, #128	; 0x80
 8008ff8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008ffa:	4b5a      	ldr	r3, [pc, #360]	; (8009164 <HAL_RCC_ClockConfig+0x264>)
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	f023 0203 	bic.w	r2, r3, #3
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	4957      	ldr	r1, [pc, #348]	; (8009164 <HAL_RCC_ClockConfig+0x264>)
 8009008:	4313      	orrs	r3, r2
 800900a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800900c:	f7fb f86c 	bl	80040e8 <HAL_GetTick>
 8009010:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009012:	e00a      	b.n	800902a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009014:	f7fb f868 	bl	80040e8 <HAL_GetTick>
 8009018:	4602      	mov	r2, r0
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	1ad3      	subs	r3, r2, r3
 800901e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009022:	4293      	cmp	r3, r2
 8009024:	d901      	bls.n	800902a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8009026:	2303      	movs	r3, #3
 8009028:	e095      	b.n	8009156 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800902a:	4b4e      	ldr	r3, [pc, #312]	; (8009164 <HAL_RCC_ClockConfig+0x264>)
 800902c:	689b      	ldr	r3, [r3, #8]
 800902e:	f003 020c 	and.w	r2, r3, #12
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	429a      	cmp	r2, r3
 800903a:	d1eb      	bne.n	8009014 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f003 0302 	and.w	r3, r3, #2
 8009044:	2b00      	cmp	r3, #0
 8009046:	d023      	beq.n	8009090 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f003 0304 	and.w	r3, r3, #4
 8009050:	2b00      	cmp	r3, #0
 8009052:	d005      	beq.n	8009060 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009054:	4b43      	ldr	r3, [pc, #268]	; (8009164 <HAL_RCC_ClockConfig+0x264>)
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	4a42      	ldr	r2, [pc, #264]	; (8009164 <HAL_RCC_ClockConfig+0x264>)
 800905a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800905e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f003 0308 	and.w	r3, r3, #8
 8009068:	2b00      	cmp	r3, #0
 800906a:	d007      	beq.n	800907c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800906c:	4b3d      	ldr	r3, [pc, #244]	; (8009164 <HAL_RCC_ClockConfig+0x264>)
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009074:	4a3b      	ldr	r2, [pc, #236]	; (8009164 <HAL_RCC_ClockConfig+0x264>)
 8009076:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800907a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800907c:	4b39      	ldr	r3, [pc, #228]	; (8009164 <HAL_RCC_ClockConfig+0x264>)
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	4936      	ldr	r1, [pc, #216]	; (8009164 <HAL_RCC_ClockConfig+0x264>)
 800908a:	4313      	orrs	r3, r2
 800908c:	608b      	str	r3, [r1, #8]
 800908e:	e008      	b.n	80090a2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	2b80      	cmp	r3, #128	; 0x80
 8009094:	d105      	bne.n	80090a2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009096:	4b33      	ldr	r3, [pc, #204]	; (8009164 <HAL_RCC_ClockConfig+0x264>)
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	4a32      	ldr	r2, [pc, #200]	; (8009164 <HAL_RCC_ClockConfig+0x264>)
 800909c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80090a0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80090a2:	4b2f      	ldr	r3, [pc, #188]	; (8009160 <HAL_RCC_ClockConfig+0x260>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f003 030f 	and.w	r3, r3, #15
 80090aa:	683a      	ldr	r2, [r7, #0]
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d21d      	bcs.n	80090ec <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090b0:	4b2b      	ldr	r3, [pc, #172]	; (8009160 <HAL_RCC_ClockConfig+0x260>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f023 020f 	bic.w	r2, r3, #15
 80090b8:	4929      	ldr	r1, [pc, #164]	; (8009160 <HAL_RCC_ClockConfig+0x260>)
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	4313      	orrs	r3, r2
 80090be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80090c0:	f7fb f812 	bl	80040e8 <HAL_GetTick>
 80090c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80090c6:	e00a      	b.n	80090de <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80090c8:	f7fb f80e 	bl	80040e8 <HAL_GetTick>
 80090cc:	4602      	mov	r2, r0
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	1ad3      	subs	r3, r2, r3
 80090d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d901      	bls.n	80090de <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80090da:	2303      	movs	r3, #3
 80090dc:	e03b      	b.n	8009156 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80090de:	4b20      	ldr	r3, [pc, #128]	; (8009160 <HAL_RCC_ClockConfig+0x260>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f003 030f 	and.w	r3, r3, #15
 80090e6:	683a      	ldr	r2, [r7, #0]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d1ed      	bne.n	80090c8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f003 0304 	and.w	r3, r3, #4
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d008      	beq.n	800910a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80090f8:	4b1a      	ldr	r3, [pc, #104]	; (8009164 <HAL_RCC_ClockConfig+0x264>)
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	68db      	ldr	r3, [r3, #12]
 8009104:	4917      	ldr	r1, [pc, #92]	; (8009164 <HAL_RCC_ClockConfig+0x264>)
 8009106:	4313      	orrs	r3, r2
 8009108:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f003 0308 	and.w	r3, r3, #8
 8009112:	2b00      	cmp	r3, #0
 8009114:	d009      	beq.n	800912a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009116:	4b13      	ldr	r3, [pc, #76]	; (8009164 <HAL_RCC_ClockConfig+0x264>)
 8009118:	689b      	ldr	r3, [r3, #8]
 800911a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	691b      	ldr	r3, [r3, #16]
 8009122:	00db      	lsls	r3, r3, #3
 8009124:	490f      	ldr	r1, [pc, #60]	; (8009164 <HAL_RCC_ClockConfig+0x264>)
 8009126:	4313      	orrs	r3, r2
 8009128:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800912a:	f000 f825 	bl	8009178 <HAL_RCC_GetSysClockFreq>
 800912e:	4602      	mov	r2, r0
 8009130:	4b0c      	ldr	r3, [pc, #48]	; (8009164 <HAL_RCC_ClockConfig+0x264>)
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	091b      	lsrs	r3, r3, #4
 8009136:	f003 030f 	and.w	r3, r3, #15
 800913a:	490c      	ldr	r1, [pc, #48]	; (800916c <HAL_RCC_ClockConfig+0x26c>)
 800913c:	5ccb      	ldrb	r3, [r1, r3]
 800913e:	f003 031f 	and.w	r3, r3, #31
 8009142:	fa22 f303 	lsr.w	r3, r2, r3
 8009146:	4a0a      	ldr	r2, [pc, #40]	; (8009170 <HAL_RCC_ClockConfig+0x270>)
 8009148:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800914a:	4b0a      	ldr	r3, [pc, #40]	; (8009174 <HAL_RCC_ClockConfig+0x274>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4618      	mov	r0, r3
 8009150:	f7fa fb72 	bl	8003838 <HAL_InitTick>
 8009154:	4603      	mov	r3, r0
}
 8009156:	4618      	mov	r0, r3
 8009158:	3718      	adds	r7, #24
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
 800915e:	bf00      	nop
 8009160:	40022000 	.word	0x40022000
 8009164:	40021000 	.word	0x40021000
 8009168:	04c4b400 	.word	0x04c4b400
 800916c:	08014bf4 	.word	0x08014bf4
 8009170:	20000004 	.word	0x20000004
 8009174:	20000008 	.word	0x20000008

08009178 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009178:	b480      	push	{r7}
 800917a:	b087      	sub	sp, #28
 800917c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800917e:	4b2c      	ldr	r3, [pc, #176]	; (8009230 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009180:	689b      	ldr	r3, [r3, #8]
 8009182:	f003 030c 	and.w	r3, r3, #12
 8009186:	2b04      	cmp	r3, #4
 8009188:	d102      	bne.n	8009190 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800918a:	4b2a      	ldr	r3, [pc, #168]	; (8009234 <HAL_RCC_GetSysClockFreq+0xbc>)
 800918c:	613b      	str	r3, [r7, #16]
 800918e:	e047      	b.n	8009220 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009190:	4b27      	ldr	r3, [pc, #156]	; (8009230 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	f003 030c 	and.w	r3, r3, #12
 8009198:	2b08      	cmp	r3, #8
 800919a:	d102      	bne.n	80091a2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800919c:	4b26      	ldr	r3, [pc, #152]	; (8009238 <HAL_RCC_GetSysClockFreq+0xc0>)
 800919e:	613b      	str	r3, [r7, #16]
 80091a0:	e03e      	b.n	8009220 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80091a2:	4b23      	ldr	r3, [pc, #140]	; (8009230 <HAL_RCC_GetSysClockFreq+0xb8>)
 80091a4:	689b      	ldr	r3, [r3, #8]
 80091a6:	f003 030c 	and.w	r3, r3, #12
 80091aa:	2b0c      	cmp	r3, #12
 80091ac:	d136      	bne.n	800921c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80091ae:	4b20      	ldr	r3, [pc, #128]	; (8009230 <HAL_RCC_GetSysClockFreq+0xb8>)
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	f003 0303 	and.w	r3, r3, #3
 80091b6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80091b8:	4b1d      	ldr	r3, [pc, #116]	; (8009230 <HAL_RCC_GetSysClockFreq+0xb8>)
 80091ba:	68db      	ldr	r3, [r3, #12]
 80091bc:	091b      	lsrs	r3, r3, #4
 80091be:	f003 030f 	and.w	r3, r3, #15
 80091c2:	3301      	adds	r3, #1
 80091c4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2b03      	cmp	r3, #3
 80091ca:	d10c      	bne.n	80091e6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80091cc:	4a1a      	ldr	r2, [pc, #104]	; (8009238 <HAL_RCC_GetSysClockFreq+0xc0>)
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80091d4:	4a16      	ldr	r2, [pc, #88]	; (8009230 <HAL_RCC_GetSysClockFreq+0xb8>)
 80091d6:	68d2      	ldr	r2, [r2, #12]
 80091d8:	0a12      	lsrs	r2, r2, #8
 80091da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80091de:	fb02 f303 	mul.w	r3, r2, r3
 80091e2:	617b      	str	r3, [r7, #20]
      break;
 80091e4:	e00c      	b.n	8009200 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80091e6:	4a13      	ldr	r2, [pc, #76]	; (8009234 <HAL_RCC_GetSysClockFreq+0xbc>)
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80091ee:	4a10      	ldr	r2, [pc, #64]	; (8009230 <HAL_RCC_GetSysClockFreq+0xb8>)
 80091f0:	68d2      	ldr	r2, [r2, #12]
 80091f2:	0a12      	lsrs	r2, r2, #8
 80091f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80091f8:	fb02 f303 	mul.w	r3, r2, r3
 80091fc:	617b      	str	r3, [r7, #20]
      break;
 80091fe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009200:	4b0b      	ldr	r3, [pc, #44]	; (8009230 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009202:	68db      	ldr	r3, [r3, #12]
 8009204:	0e5b      	lsrs	r3, r3, #25
 8009206:	f003 0303 	and.w	r3, r3, #3
 800920a:	3301      	adds	r3, #1
 800920c:	005b      	lsls	r3, r3, #1
 800920e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8009210:	697a      	ldr	r2, [r7, #20]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	fbb2 f3f3 	udiv	r3, r2, r3
 8009218:	613b      	str	r3, [r7, #16]
 800921a:	e001      	b.n	8009220 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800921c:	2300      	movs	r3, #0
 800921e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009220:	693b      	ldr	r3, [r7, #16]
}
 8009222:	4618      	mov	r0, r3
 8009224:	371c      	adds	r7, #28
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr
 800922e:	bf00      	nop
 8009230:	40021000 	.word	0x40021000
 8009234:	00f42400 	.word	0x00f42400
 8009238:	007a1200 	.word	0x007a1200

0800923c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800923c:	b480      	push	{r7}
 800923e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009240:	4b03      	ldr	r3, [pc, #12]	; (8009250 <HAL_RCC_GetHCLKFreq+0x14>)
 8009242:	681b      	ldr	r3, [r3, #0]
}
 8009244:	4618      	mov	r0, r3
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr
 800924e:	bf00      	nop
 8009250:	20000004 	.word	0x20000004

08009254 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009258:	f7ff fff0 	bl	800923c <HAL_RCC_GetHCLKFreq>
 800925c:	4602      	mov	r2, r0
 800925e:	4b06      	ldr	r3, [pc, #24]	; (8009278 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009260:	689b      	ldr	r3, [r3, #8]
 8009262:	0a1b      	lsrs	r3, r3, #8
 8009264:	f003 0307 	and.w	r3, r3, #7
 8009268:	4904      	ldr	r1, [pc, #16]	; (800927c <HAL_RCC_GetPCLK1Freq+0x28>)
 800926a:	5ccb      	ldrb	r3, [r1, r3]
 800926c:	f003 031f 	and.w	r3, r3, #31
 8009270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009274:	4618      	mov	r0, r3
 8009276:	bd80      	pop	{r7, pc}
 8009278:	40021000 	.word	0x40021000
 800927c:	08014c04 	.word	0x08014c04

08009280 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009284:	f7ff ffda 	bl	800923c <HAL_RCC_GetHCLKFreq>
 8009288:	4602      	mov	r2, r0
 800928a:	4b06      	ldr	r3, [pc, #24]	; (80092a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	0adb      	lsrs	r3, r3, #11
 8009290:	f003 0307 	and.w	r3, r3, #7
 8009294:	4904      	ldr	r1, [pc, #16]	; (80092a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009296:	5ccb      	ldrb	r3, [r1, r3]
 8009298:	f003 031f 	and.w	r3, r3, #31
 800929c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	bd80      	pop	{r7, pc}
 80092a4:	40021000 	.word	0x40021000
 80092a8:	08014c04 	.word	0x08014c04

080092ac <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b083      	sub	sp, #12
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	220f      	movs	r2, #15
 80092ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80092bc:	4b12      	ldr	r3, [pc, #72]	; (8009308 <HAL_RCC_GetClockConfig+0x5c>)
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	f003 0203 	and.w	r2, r3, #3
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80092c8:	4b0f      	ldr	r3, [pc, #60]	; (8009308 <HAL_RCC_GetClockConfig+0x5c>)
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80092d4:	4b0c      	ldr	r3, [pc, #48]	; (8009308 <HAL_RCC_GetClockConfig+0x5c>)
 80092d6:	689b      	ldr	r3, [r3, #8]
 80092d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80092e0:	4b09      	ldr	r3, [pc, #36]	; (8009308 <HAL_RCC_GetClockConfig+0x5c>)
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	08db      	lsrs	r3, r3, #3
 80092e6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80092ee:	4b07      	ldr	r3, [pc, #28]	; (800930c <HAL_RCC_GetClockConfig+0x60>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f003 020f 	and.w	r2, r3, #15
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	601a      	str	r2, [r3, #0]
}
 80092fa:	bf00      	nop
 80092fc:	370c      	adds	r7, #12
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr
 8009306:	bf00      	nop
 8009308:	40021000 	.word	0x40021000
 800930c:	40022000 	.word	0x40022000

08009310 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009310:	b480      	push	{r7}
 8009312:	b087      	sub	sp, #28
 8009314:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009316:	4b1e      	ldr	r3, [pc, #120]	; (8009390 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009318:	68db      	ldr	r3, [r3, #12]
 800931a:	f003 0303 	and.w	r3, r3, #3
 800931e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009320:	4b1b      	ldr	r3, [pc, #108]	; (8009390 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009322:	68db      	ldr	r3, [r3, #12]
 8009324:	091b      	lsrs	r3, r3, #4
 8009326:	f003 030f 	and.w	r3, r3, #15
 800932a:	3301      	adds	r3, #1
 800932c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	2b03      	cmp	r3, #3
 8009332:	d10c      	bne.n	800934e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009334:	4a17      	ldr	r2, [pc, #92]	; (8009394 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	fbb2 f3f3 	udiv	r3, r2, r3
 800933c:	4a14      	ldr	r2, [pc, #80]	; (8009390 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800933e:	68d2      	ldr	r2, [r2, #12]
 8009340:	0a12      	lsrs	r2, r2, #8
 8009342:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009346:	fb02 f303 	mul.w	r3, r2, r3
 800934a:	617b      	str	r3, [r7, #20]
    break;
 800934c:	e00c      	b.n	8009368 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800934e:	4a12      	ldr	r2, [pc, #72]	; (8009398 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	fbb2 f3f3 	udiv	r3, r2, r3
 8009356:	4a0e      	ldr	r2, [pc, #56]	; (8009390 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009358:	68d2      	ldr	r2, [r2, #12]
 800935a:	0a12      	lsrs	r2, r2, #8
 800935c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009360:	fb02 f303 	mul.w	r3, r2, r3
 8009364:	617b      	str	r3, [r7, #20]
    break;
 8009366:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009368:	4b09      	ldr	r3, [pc, #36]	; (8009390 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800936a:	68db      	ldr	r3, [r3, #12]
 800936c:	0e5b      	lsrs	r3, r3, #25
 800936e:	f003 0303 	and.w	r3, r3, #3
 8009372:	3301      	adds	r3, #1
 8009374:	005b      	lsls	r3, r3, #1
 8009376:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009378:	697a      	ldr	r2, [r7, #20]
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009380:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8009382:	687b      	ldr	r3, [r7, #4]
}
 8009384:	4618      	mov	r0, r3
 8009386:	371c      	adds	r7, #28
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr
 8009390:	40021000 	.word	0x40021000
 8009394:	007a1200 	.word	0x007a1200
 8009398:	00f42400 	.word	0x00f42400

0800939c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b086      	sub	sp, #24
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80093a4:	2300      	movs	r3, #0
 80093a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80093a8:	2300      	movs	r3, #0
 80093aa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	f000 8098 	beq.w	80094ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80093ba:	2300      	movs	r3, #0
 80093bc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80093be:	4b43      	ldr	r3, [pc, #268]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d10d      	bne.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80093ca:	4b40      	ldr	r3, [pc, #256]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093ce:	4a3f      	ldr	r2, [pc, #252]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093d4:	6593      	str	r3, [r2, #88]	; 0x58
 80093d6:	4b3d      	ldr	r3, [pc, #244]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093de:	60bb      	str	r3, [r7, #8]
 80093e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80093e2:	2301      	movs	r3, #1
 80093e4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80093e6:	4b3a      	ldr	r3, [pc, #232]	; (80094d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4a39      	ldr	r2, [pc, #228]	; (80094d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80093ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80093f2:	f7fa fe79 	bl	80040e8 <HAL_GetTick>
 80093f6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80093f8:	e009      	b.n	800940e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80093fa:	f7fa fe75 	bl	80040e8 <HAL_GetTick>
 80093fe:	4602      	mov	r2, r0
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	1ad3      	subs	r3, r2, r3
 8009404:	2b02      	cmp	r3, #2
 8009406:	d902      	bls.n	800940e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009408:	2303      	movs	r3, #3
 800940a:	74fb      	strb	r3, [r7, #19]
        break;
 800940c:	e005      	b.n	800941a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800940e:	4b30      	ldr	r3, [pc, #192]	; (80094d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009416:	2b00      	cmp	r3, #0
 8009418:	d0ef      	beq.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800941a:	7cfb      	ldrb	r3, [r7, #19]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d159      	bne.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009420:	4b2a      	ldr	r3, [pc, #168]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800942a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d01e      	beq.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009436:	697a      	ldr	r2, [r7, #20]
 8009438:	429a      	cmp	r2, r3
 800943a:	d019      	beq.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800943c:	4b23      	ldr	r3, [pc, #140]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800943e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009446:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009448:	4b20      	ldr	r3, [pc, #128]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800944a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800944e:	4a1f      	ldr	r2, [pc, #124]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009454:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009458:	4b1c      	ldr	r3, [pc, #112]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800945a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800945e:	4a1b      	ldr	r2, [pc, #108]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009460:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009464:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009468:	4a18      	ldr	r2, [pc, #96]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	f003 0301 	and.w	r3, r3, #1
 8009476:	2b00      	cmp	r3, #0
 8009478:	d016      	beq.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800947a:	f7fa fe35 	bl	80040e8 <HAL_GetTick>
 800947e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009480:	e00b      	b.n	800949a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009482:	f7fa fe31 	bl	80040e8 <HAL_GetTick>
 8009486:	4602      	mov	r2, r0
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	1ad3      	subs	r3, r2, r3
 800948c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009490:	4293      	cmp	r3, r2
 8009492:	d902      	bls.n	800949a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009494:	2303      	movs	r3, #3
 8009496:	74fb      	strb	r3, [r7, #19]
            break;
 8009498:	e006      	b.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800949a:	4b0c      	ldr	r3, [pc, #48]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800949c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094a0:	f003 0302 	and.w	r3, r3, #2
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d0ec      	beq.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80094a8:	7cfb      	ldrb	r3, [r7, #19]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d10b      	bne.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80094ae:	4b07      	ldr	r3, [pc, #28]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80094b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094bc:	4903      	ldr	r1, [pc, #12]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80094be:	4313      	orrs	r3, r2
 80094c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80094c4:	e008      	b.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80094c6:	7cfb      	ldrb	r3, [r7, #19]
 80094c8:	74bb      	strb	r3, [r7, #18]
 80094ca:	e005      	b.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80094cc:	40021000 	.word	0x40021000
 80094d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094d4:	7cfb      	ldrb	r3, [r7, #19]
 80094d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80094d8:	7c7b      	ldrb	r3, [r7, #17]
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d105      	bne.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80094de:	4ba7      	ldr	r3, [pc, #668]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094e2:	4aa6      	ldr	r2, [pc, #664]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80094e8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f003 0301 	and.w	r3, r3, #1
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d00a      	beq.n	800950c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80094f6:	4ba1      	ldr	r3, [pc, #644]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094fc:	f023 0203 	bic.w	r2, r3, #3
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	499d      	ldr	r1, [pc, #628]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009506:	4313      	orrs	r3, r2
 8009508:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f003 0302 	and.w	r3, r3, #2
 8009514:	2b00      	cmp	r3, #0
 8009516:	d00a      	beq.n	800952e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009518:	4b98      	ldr	r3, [pc, #608]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800951a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800951e:	f023 020c 	bic.w	r2, r3, #12
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	4995      	ldr	r1, [pc, #596]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009528:	4313      	orrs	r3, r2
 800952a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f003 0304 	and.w	r3, r3, #4
 8009536:	2b00      	cmp	r3, #0
 8009538:	d00a      	beq.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800953a:	4b90      	ldr	r3, [pc, #576]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800953c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009540:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	498c      	ldr	r1, [pc, #560]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800954a:	4313      	orrs	r3, r2
 800954c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f003 0308 	and.w	r3, r3, #8
 8009558:	2b00      	cmp	r3, #0
 800955a:	d00a      	beq.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800955c:	4b87      	ldr	r3, [pc, #540]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800955e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009562:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	691b      	ldr	r3, [r3, #16]
 800956a:	4984      	ldr	r1, [pc, #528]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800956c:	4313      	orrs	r3, r2
 800956e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f003 0310 	and.w	r3, r3, #16
 800957a:	2b00      	cmp	r3, #0
 800957c:	d00a      	beq.n	8009594 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800957e:	4b7f      	ldr	r3, [pc, #508]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009584:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	695b      	ldr	r3, [r3, #20]
 800958c:	497b      	ldr	r1, [pc, #492]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800958e:	4313      	orrs	r3, r2
 8009590:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f003 0320 	and.w	r3, r3, #32
 800959c:	2b00      	cmp	r3, #0
 800959e:	d00a      	beq.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80095a0:	4b76      	ldr	r3, [pc, #472]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	699b      	ldr	r3, [r3, #24]
 80095ae:	4973      	ldr	r1, [pc, #460]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095b0:	4313      	orrs	r3, r2
 80095b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d00a      	beq.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80095c2:	4b6e      	ldr	r3, [pc, #440]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	69db      	ldr	r3, [r3, #28]
 80095d0:	496a      	ldr	r1, [pc, #424]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095d2:	4313      	orrs	r3, r2
 80095d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d00a      	beq.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80095e4:	4b65      	ldr	r3, [pc, #404]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6a1b      	ldr	r3, [r3, #32]
 80095f2:	4962      	ldr	r1, [pc, #392]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095f4:	4313      	orrs	r3, r2
 80095f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009602:	2b00      	cmp	r3, #0
 8009604:	d00a      	beq.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009606:	4b5d      	ldr	r3, [pc, #372]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800960c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009614:	4959      	ldr	r1, [pc, #356]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009616:	4313      	orrs	r3, r2
 8009618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009624:	2b00      	cmp	r3, #0
 8009626:	d00a      	beq.n	800963e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009628:	4b54      	ldr	r3, [pc, #336]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800962a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800962e:	f023 0203 	bic.w	r2, r3, #3
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009636:	4951      	ldr	r1, [pc, #324]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009638:	4313      	orrs	r3, r2
 800963a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009646:	2b00      	cmp	r3, #0
 8009648:	d00a      	beq.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800964a:	4b4c      	ldr	r3, [pc, #304]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800964c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009650:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009658:	4948      	ldr	r1, [pc, #288]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800965a:	4313      	orrs	r3, r2
 800965c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009668:	2b00      	cmp	r3, #0
 800966a:	d015      	beq.n	8009698 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800966c:	4b43      	ldr	r3, [pc, #268]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800966e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009672:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800967a:	4940      	ldr	r1, [pc, #256]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800967c:	4313      	orrs	r3, r2
 800967e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009686:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800968a:	d105      	bne.n	8009698 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800968c:	4b3b      	ldr	r3, [pc, #236]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800968e:	68db      	ldr	r3, [r3, #12]
 8009690:	4a3a      	ldr	r2, [pc, #232]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009692:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009696:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d015      	beq.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80096a4:	4b35      	ldr	r3, [pc, #212]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096b2:	4932      	ldr	r1, [pc, #200]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096b4:	4313      	orrs	r3, r2
 80096b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80096c2:	d105      	bne.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80096c4:	4b2d      	ldr	r3, [pc, #180]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096c6:	68db      	ldr	r3, [r3, #12]
 80096c8:	4a2c      	ldr	r2, [pc, #176]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80096ce:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d015      	beq.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80096dc:	4b27      	ldr	r3, [pc, #156]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096e2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ea:	4924      	ldr	r1, [pc, #144]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096ec:	4313      	orrs	r3, r2
 80096ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80096fa:	d105      	bne.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80096fc:	4b1f      	ldr	r3, [pc, #124]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096fe:	68db      	ldr	r3, [r3, #12]
 8009700:	4a1e      	ldr	r2, [pc, #120]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009702:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009706:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009710:	2b00      	cmp	r3, #0
 8009712:	d015      	beq.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009714:	4b19      	ldr	r3, [pc, #100]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800971a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009722:	4916      	ldr	r1, [pc, #88]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009724:	4313      	orrs	r3, r2
 8009726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800972e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009732:	d105      	bne.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009734:	4b11      	ldr	r3, [pc, #68]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009736:	68db      	ldr	r3, [r3, #12]
 8009738:	4a10      	ldr	r2, [pc, #64]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800973a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800973e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009748:	2b00      	cmp	r3, #0
 800974a:	d019      	beq.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800974c:	4b0b      	ldr	r3, [pc, #44]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800974e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009752:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800975a:	4908      	ldr	r1, [pc, #32]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800975c:	4313      	orrs	r3, r2
 800975e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009766:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800976a:	d109      	bne.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800976c:	4b03      	ldr	r3, [pc, #12]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	4a02      	ldr	r2, [pc, #8]	; (800977c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009772:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009776:	60d3      	str	r3, [r2, #12]
 8009778:	e002      	b.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800977a:	bf00      	nop
 800977c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009788:	2b00      	cmp	r3, #0
 800978a:	d015      	beq.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800978c:	4b29      	ldr	r3, [pc, #164]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800978e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009792:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800979a:	4926      	ldr	r1, [pc, #152]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800979c:	4313      	orrs	r3, r2
 800979e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097aa:	d105      	bne.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80097ac:	4b21      	ldr	r3, [pc, #132]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80097ae:	68db      	ldr	r3, [r3, #12]
 80097b0:	4a20      	ldr	r2, [pc, #128]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80097b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097b6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d015      	beq.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80097c4:	4b1b      	ldr	r3, [pc, #108]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80097c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097ca:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097d2:	4918      	ldr	r1, [pc, #96]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80097d4:	4313      	orrs	r3, r2
 80097d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097e2:	d105      	bne.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80097e4:	4b13      	ldr	r3, [pc, #76]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80097e6:	68db      	ldr	r3, [r3, #12]
 80097e8:	4a12      	ldr	r2, [pc, #72]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80097ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097ee:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d015      	beq.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80097fc:	4b0d      	ldr	r3, [pc, #52]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80097fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009802:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800980a:	490a      	ldr	r1, [pc, #40]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800980c:	4313      	orrs	r3, r2
 800980e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009816:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800981a:	d105      	bne.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800981c:	4b05      	ldr	r3, [pc, #20]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800981e:	68db      	ldr	r3, [r3, #12]
 8009820:	4a04      	ldr	r2, [pc, #16]	; (8009834 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009822:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009826:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009828:	7cbb      	ldrb	r3, [r7, #18]
}
 800982a:	4618      	mov	r0, r3
 800982c:	3718      	adds	r7, #24
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
 8009832:	bf00      	nop
 8009834:	40021000 	.word	0x40021000

08009838 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b084      	sub	sp, #16
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d101      	bne.n	800984a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009846:	2301      	movs	r3, #1
 8009848:	e09d      	b.n	8009986 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800984e:	2b00      	cmp	r3, #0
 8009850:	d108      	bne.n	8009864 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800985a:	d009      	beq.n	8009870 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2200      	movs	r2, #0
 8009860:	61da      	str	r2, [r3, #28]
 8009862:	e005      	b.n	8009870 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2200      	movs	r2, #0
 8009868:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2200      	movs	r2, #0
 800986e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2200      	movs	r2, #0
 8009874:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800987c:	b2db      	uxtb	r3, r3
 800987e:	2b00      	cmp	r3, #0
 8009880:	d106      	bne.n	8009890 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2200      	movs	r2, #0
 8009886:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f7f9 ff6a 	bl	8003764 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2202      	movs	r2, #2
 8009894:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	68db      	ldr	r3, [r3, #12]
 80098ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80098b0:	d902      	bls.n	80098b8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80098b2:	2300      	movs	r3, #0
 80098b4:	60fb      	str	r3, [r7, #12]
 80098b6:	e002      	b.n	80098be <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80098b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098bc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	68db      	ldr	r3, [r3, #12]
 80098c2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80098c6:	d007      	beq.n	80098d8 <HAL_SPI_Init+0xa0>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	68db      	ldr	r3, [r3, #12]
 80098cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80098d0:	d002      	beq.n	80098d8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2200      	movs	r2, #0
 80098d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	689b      	ldr	r3, [r3, #8]
 80098e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80098e8:	431a      	orrs	r2, r3
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	691b      	ldr	r3, [r3, #16]
 80098ee:	f003 0302 	and.w	r3, r3, #2
 80098f2:	431a      	orrs	r2, r3
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	695b      	ldr	r3, [r3, #20]
 80098f8:	f003 0301 	and.w	r3, r3, #1
 80098fc:	431a      	orrs	r2, r3
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	699b      	ldr	r3, [r3, #24]
 8009902:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009906:	431a      	orrs	r2, r3
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	69db      	ldr	r3, [r3, #28]
 800990c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009910:	431a      	orrs	r2, r3
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6a1b      	ldr	r3, [r3, #32]
 8009916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800991a:	ea42 0103 	orr.w	r1, r2, r3
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009922:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	430a      	orrs	r2, r1
 800992c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	699b      	ldr	r3, [r3, #24]
 8009932:	0c1b      	lsrs	r3, r3, #16
 8009934:	f003 0204 	and.w	r2, r3, #4
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800993c:	f003 0310 	and.w	r3, r3, #16
 8009940:	431a      	orrs	r2, r3
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009946:	f003 0308 	and.w	r3, r3, #8
 800994a:	431a      	orrs	r2, r3
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	68db      	ldr	r3, [r3, #12]
 8009950:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009954:	ea42 0103 	orr.w	r1, r2, r3
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	430a      	orrs	r2, r1
 8009964:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	69da      	ldr	r2, [r3, #28]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009974:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2200      	movs	r2, #0
 800997a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2201      	movs	r2, #1
 8009980:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009984:	2300      	movs	r3, #0
}
 8009986:	4618      	mov	r0, r3
 8009988:	3710      	adds	r7, #16
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}

0800998e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800998e:	b580      	push	{r7, lr}
 8009990:	b082      	sub	sp, #8
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d101      	bne.n	80099a0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800999c:	2301      	movs	r3, #1
 800999e:	e049      	b.n	8009a34 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d106      	bne.n	80099ba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2200      	movs	r2, #0
 80099b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 f841 	bl	8009a3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2202      	movs	r2, #2
 80099be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681a      	ldr	r2, [r3, #0]
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	3304      	adds	r3, #4
 80099ca:	4619      	mov	r1, r3
 80099cc:	4610      	mov	r0, r2
 80099ce:	f000 fcdd 	bl	800a38c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2201      	movs	r2, #1
 80099d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2201      	movs	r2, #1
 80099de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2201      	movs	r2, #1
 80099e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2201      	movs	r2, #1
 80099ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2201      	movs	r2, #1
 80099f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2201      	movs	r2, #1
 80099fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2201      	movs	r2, #1
 8009a06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2201      	movs	r2, #1
 8009a16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2201      	movs	r2, #1
 8009a1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2201      	movs	r2, #1
 8009a26:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009a32:	2300      	movs	r3, #0
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3708      	adds	r7, #8
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009a44:	bf00      	nop
 8009a46:	370c      	adds	r7, #12
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr

08009a50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b085      	sub	sp, #20
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a5e:	b2db      	uxtb	r3, r3
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d001      	beq.n	8009a68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009a64:	2301      	movs	r3, #1
 8009a66:	e054      	b.n	8009b12 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2202      	movs	r2, #2
 8009a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	68da      	ldr	r2, [r3, #12]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f042 0201 	orr.w	r2, r2, #1
 8009a7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a26      	ldr	r2, [pc, #152]	; (8009b20 <HAL_TIM_Base_Start_IT+0xd0>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d022      	beq.n	8009ad0 <HAL_TIM_Base_Start_IT+0x80>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a92:	d01d      	beq.n	8009ad0 <HAL_TIM_Base_Start_IT+0x80>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4a22      	ldr	r2, [pc, #136]	; (8009b24 <HAL_TIM_Base_Start_IT+0xd4>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d018      	beq.n	8009ad0 <HAL_TIM_Base_Start_IT+0x80>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4a21      	ldr	r2, [pc, #132]	; (8009b28 <HAL_TIM_Base_Start_IT+0xd8>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d013      	beq.n	8009ad0 <HAL_TIM_Base_Start_IT+0x80>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a1f      	ldr	r2, [pc, #124]	; (8009b2c <HAL_TIM_Base_Start_IT+0xdc>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d00e      	beq.n	8009ad0 <HAL_TIM_Base_Start_IT+0x80>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4a1e      	ldr	r2, [pc, #120]	; (8009b30 <HAL_TIM_Base_Start_IT+0xe0>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d009      	beq.n	8009ad0 <HAL_TIM_Base_Start_IT+0x80>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a1c      	ldr	r2, [pc, #112]	; (8009b34 <HAL_TIM_Base_Start_IT+0xe4>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d004      	beq.n	8009ad0 <HAL_TIM_Base_Start_IT+0x80>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4a1b      	ldr	r2, [pc, #108]	; (8009b38 <HAL_TIM_Base_Start_IT+0xe8>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d115      	bne.n	8009afc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	689a      	ldr	r2, [r3, #8]
 8009ad6:	4b19      	ldr	r3, [pc, #100]	; (8009b3c <HAL_TIM_Base_Start_IT+0xec>)
 8009ad8:	4013      	ands	r3, r2
 8009ada:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2b06      	cmp	r3, #6
 8009ae0:	d015      	beq.n	8009b0e <HAL_TIM_Base_Start_IT+0xbe>
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ae8:	d011      	beq.n	8009b0e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f042 0201 	orr.w	r2, r2, #1
 8009af8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009afa:	e008      	b.n	8009b0e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	681a      	ldr	r2, [r3, #0]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f042 0201 	orr.w	r2, r2, #1
 8009b0a:	601a      	str	r2, [r3, #0]
 8009b0c:	e000      	b.n	8009b10 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009b10:	2300      	movs	r3, #0
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3714      	adds	r7, #20
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr
 8009b1e:	bf00      	nop
 8009b20:	40012c00 	.word	0x40012c00
 8009b24:	40000400 	.word	0x40000400
 8009b28:	40000800 	.word	0x40000800
 8009b2c:	40000c00 	.word	0x40000c00
 8009b30:	40013400 	.word	0x40013400
 8009b34:	40014000 	.word	0x40014000
 8009b38:	40015000 	.word	0x40015000
 8009b3c:	00010007 	.word	0x00010007

08009b40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b082      	sub	sp, #8
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d101      	bne.n	8009b52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	e049      	b.n	8009be6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b58:	b2db      	uxtb	r3, r3
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d106      	bne.n	8009b6c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2200      	movs	r2, #0
 8009b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f7fa f86a 	bl	8003c40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2202      	movs	r2, #2
 8009b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681a      	ldr	r2, [r3, #0]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	3304      	adds	r3, #4
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	4610      	mov	r0, r2
 8009b80:	f000 fc04 	bl	800a38c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2201      	movs	r2, #1
 8009b88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2201      	movs	r2, #1
 8009b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2201      	movs	r2, #1
 8009b98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2201      	movs	r2, #1
 8009bb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2201      	movs	r2, #1
 8009bd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2201      	movs	r2, #1
 8009be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009be4:	2300      	movs	r3, #0
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3708      	adds	r7, #8
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
	...

08009bf0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b084      	sub	sp, #16
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d109      	bne.n	8009c14 <HAL_TIM_PWM_Start+0x24>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009c06:	b2db      	uxtb	r3, r3
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	bf14      	ite	ne
 8009c0c:	2301      	movne	r3, #1
 8009c0e:	2300      	moveq	r3, #0
 8009c10:	b2db      	uxtb	r3, r3
 8009c12:	e03c      	b.n	8009c8e <HAL_TIM_PWM_Start+0x9e>
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	2b04      	cmp	r3, #4
 8009c18:	d109      	bne.n	8009c2e <HAL_TIM_PWM_Start+0x3e>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009c20:	b2db      	uxtb	r3, r3
 8009c22:	2b01      	cmp	r3, #1
 8009c24:	bf14      	ite	ne
 8009c26:	2301      	movne	r3, #1
 8009c28:	2300      	moveq	r3, #0
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	e02f      	b.n	8009c8e <HAL_TIM_PWM_Start+0x9e>
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	2b08      	cmp	r3, #8
 8009c32:	d109      	bne.n	8009c48 <HAL_TIM_PWM_Start+0x58>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	bf14      	ite	ne
 8009c40:	2301      	movne	r3, #1
 8009c42:	2300      	moveq	r3, #0
 8009c44:	b2db      	uxtb	r3, r3
 8009c46:	e022      	b.n	8009c8e <HAL_TIM_PWM_Start+0x9e>
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	2b0c      	cmp	r3, #12
 8009c4c:	d109      	bne.n	8009c62 <HAL_TIM_PWM_Start+0x72>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c54:	b2db      	uxtb	r3, r3
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	bf14      	ite	ne
 8009c5a:	2301      	movne	r3, #1
 8009c5c:	2300      	moveq	r3, #0
 8009c5e:	b2db      	uxtb	r3, r3
 8009c60:	e015      	b.n	8009c8e <HAL_TIM_PWM_Start+0x9e>
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	2b10      	cmp	r3, #16
 8009c66:	d109      	bne.n	8009c7c <HAL_TIM_PWM_Start+0x8c>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009c6e:	b2db      	uxtb	r3, r3
 8009c70:	2b01      	cmp	r3, #1
 8009c72:	bf14      	ite	ne
 8009c74:	2301      	movne	r3, #1
 8009c76:	2300      	moveq	r3, #0
 8009c78:	b2db      	uxtb	r3, r3
 8009c7a:	e008      	b.n	8009c8e <HAL_TIM_PWM_Start+0x9e>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009c82:	b2db      	uxtb	r3, r3
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	bf14      	ite	ne
 8009c88:	2301      	movne	r3, #1
 8009c8a:	2300      	moveq	r3, #0
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d001      	beq.n	8009c96 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009c92:	2301      	movs	r3, #1
 8009c94:	e0a6      	b.n	8009de4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d104      	bne.n	8009ca6 <HAL_TIM_PWM_Start+0xb6>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2202      	movs	r2, #2
 8009ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ca4:	e023      	b.n	8009cee <HAL_TIM_PWM_Start+0xfe>
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	2b04      	cmp	r3, #4
 8009caa:	d104      	bne.n	8009cb6 <HAL_TIM_PWM_Start+0xc6>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2202      	movs	r2, #2
 8009cb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009cb4:	e01b      	b.n	8009cee <HAL_TIM_PWM_Start+0xfe>
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	2b08      	cmp	r3, #8
 8009cba:	d104      	bne.n	8009cc6 <HAL_TIM_PWM_Start+0xd6>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2202      	movs	r2, #2
 8009cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009cc4:	e013      	b.n	8009cee <HAL_TIM_PWM_Start+0xfe>
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	2b0c      	cmp	r3, #12
 8009cca:	d104      	bne.n	8009cd6 <HAL_TIM_PWM_Start+0xe6>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2202      	movs	r2, #2
 8009cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009cd4:	e00b      	b.n	8009cee <HAL_TIM_PWM_Start+0xfe>
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	2b10      	cmp	r3, #16
 8009cda:	d104      	bne.n	8009ce6 <HAL_TIM_PWM_Start+0xf6>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2202      	movs	r2, #2
 8009ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ce4:	e003      	b.n	8009cee <HAL_TIM_PWM_Start+0xfe>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2202      	movs	r2, #2
 8009cea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	6839      	ldr	r1, [r7, #0]
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f000 ff1a 	bl	800ab30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a3a      	ldr	r2, [pc, #232]	; (8009dec <HAL_TIM_PWM_Start+0x1fc>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d018      	beq.n	8009d38 <HAL_TIM_PWM_Start+0x148>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4a39      	ldr	r2, [pc, #228]	; (8009df0 <HAL_TIM_PWM_Start+0x200>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d013      	beq.n	8009d38 <HAL_TIM_PWM_Start+0x148>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a37      	ldr	r2, [pc, #220]	; (8009df4 <HAL_TIM_PWM_Start+0x204>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d00e      	beq.n	8009d38 <HAL_TIM_PWM_Start+0x148>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a36      	ldr	r2, [pc, #216]	; (8009df8 <HAL_TIM_PWM_Start+0x208>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d009      	beq.n	8009d38 <HAL_TIM_PWM_Start+0x148>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4a34      	ldr	r2, [pc, #208]	; (8009dfc <HAL_TIM_PWM_Start+0x20c>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d004      	beq.n	8009d38 <HAL_TIM_PWM_Start+0x148>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4a33      	ldr	r2, [pc, #204]	; (8009e00 <HAL_TIM_PWM_Start+0x210>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d101      	bne.n	8009d3c <HAL_TIM_PWM_Start+0x14c>
 8009d38:	2301      	movs	r3, #1
 8009d3a:	e000      	b.n	8009d3e <HAL_TIM_PWM_Start+0x14e>
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d007      	beq.n	8009d52 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009d50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4a25      	ldr	r2, [pc, #148]	; (8009dec <HAL_TIM_PWM_Start+0x1fc>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d022      	beq.n	8009da2 <HAL_TIM_PWM_Start+0x1b2>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d64:	d01d      	beq.n	8009da2 <HAL_TIM_PWM_Start+0x1b2>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4a26      	ldr	r2, [pc, #152]	; (8009e04 <HAL_TIM_PWM_Start+0x214>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d018      	beq.n	8009da2 <HAL_TIM_PWM_Start+0x1b2>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a24      	ldr	r2, [pc, #144]	; (8009e08 <HAL_TIM_PWM_Start+0x218>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d013      	beq.n	8009da2 <HAL_TIM_PWM_Start+0x1b2>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4a23      	ldr	r2, [pc, #140]	; (8009e0c <HAL_TIM_PWM_Start+0x21c>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d00e      	beq.n	8009da2 <HAL_TIM_PWM_Start+0x1b2>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a19      	ldr	r2, [pc, #100]	; (8009df0 <HAL_TIM_PWM_Start+0x200>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d009      	beq.n	8009da2 <HAL_TIM_PWM_Start+0x1b2>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a18      	ldr	r2, [pc, #96]	; (8009df4 <HAL_TIM_PWM_Start+0x204>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d004      	beq.n	8009da2 <HAL_TIM_PWM_Start+0x1b2>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a18      	ldr	r2, [pc, #96]	; (8009e00 <HAL_TIM_PWM_Start+0x210>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d115      	bne.n	8009dce <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	689a      	ldr	r2, [r3, #8]
 8009da8:	4b19      	ldr	r3, [pc, #100]	; (8009e10 <HAL_TIM_PWM_Start+0x220>)
 8009daa:	4013      	ands	r3, r2
 8009dac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	2b06      	cmp	r3, #6
 8009db2:	d015      	beq.n	8009de0 <HAL_TIM_PWM_Start+0x1f0>
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009dba:	d011      	beq.n	8009de0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	681a      	ldr	r2, [r3, #0]
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f042 0201 	orr.w	r2, r2, #1
 8009dca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dcc:	e008      	b.n	8009de0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f042 0201 	orr.w	r2, r2, #1
 8009ddc:	601a      	str	r2, [r3, #0]
 8009dde:	e000      	b.n	8009de2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009de0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009de2:	2300      	movs	r3, #0
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3710      	adds	r7, #16
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	40012c00 	.word	0x40012c00
 8009df0:	40013400 	.word	0x40013400
 8009df4:	40014000 	.word	0x40014000
 8009df8:	40014400 	.word	0x40014400
 8009dfc:	40014800 	.word	0x40014800
 8009e00:	40015000 	.word	0x40015000
 8009e04:	40000400 	.word	0x40000400
 8009e08:	40000800 	.word	0x40000800
 8009e0c:	40000c00 	.word	0x40000c00
 8009e10:	00010007 	.word	0x00010007

08009e14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b082      	sub	sp, #8
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	691b      	ldr	r3, [r3, #16]
 8009e22:	f003 0302 	and.w	r3, r3, #2
 8009e26:	2b02      	cmp	r3, #2
 8009e28:	d122      	bne.n	8009e70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	68db      	ldr	r3, [r3, #12]
 8009e30:	f003 0302 	and.w	r3, r3, #2
 8009e34:	2b02      	cmp	r3, #2
 8009e36:	d11b      	bne.n	8009e70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f06f 0202 	mvn.w	r2, #2
 8009e40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2201      	movs	r2, #1
 8009e46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	699b      	ldr	r3, [r3, #24]
 8009e4e:	f003 0303 	and.w	r3, r3, #3
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d003      	beq.n	8009e5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f000 fa7a 	bl	800a350 <HAL_TIM_IC_CaptureCallback>
 8009e5c:	e005      	b.n	8009e6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 fa6c 	bl	800a33c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f000 fa7d 	bl	800a364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	691b      	ldr	r3, [r3, #16]
 8009e76:	f003 0304 	and.w	r3, r3, #4
 8009e7a:	2b04      	cmp	r3, #4
 8009e7c:	d122      	bne.n	8009ec4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	68db      	ldr	r3, [r3, #12]
 8009e84:	f003 0304 	and.w	r3, r3, #4
 8009e88:	2b04      	cmp	r3, #4
 8009e8a:	d11b      	bne.n	8009ec4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f06f 0204 	mvn.w	r2, #4
 8009e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2202      	movs	r2, #2
 8009e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	699b      	ldr	r3, [r3, #24]
 8009ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d003      	beq.n	8009eb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 fa50 	bl	800a350 <HAL_TIM_IC_CaptureCallback>
 8009eb0:	e005      	b.n	8009ebe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 fa42 	bl	800a33c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f000 fa53 	bl	800a364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	691b      	ldr	r3, [r3, #16]
 8009eca:	f003 0308 	and.w	r3, r3, #8
 8009ece:	2b08      	cmp	r3, #8
 8009ed0:	d122      	bne.n	8009f18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	68db      	ldr	r3, [r3, #12]
 8009ed8:	f003 0308 	and.w	r3, r3, #8
 8009edc:	2b08      	cmp	r3, #8
 8009ede:	d11b      	bne.n	8009f18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f06f 0208 	mvn.w	r2, #8
 8009ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2204      	movs	r2, #4
 8009eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	69db      	ldr	r3, [r3, #28]
 8009ef6:	f003 0303 	and.w	r3, r3, #3
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d003      	beq.n	8009f06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 fa26 	bl	800a350 <HAL_TIM_IC_CaptureCallback>
 8009f04:	e005      	b.n	8009f12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 fa18 	bl	800a33c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 fa29 	bl	800a364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2200      	movs	r2, #0
 8009f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	691b      	ldr	r3, [r3, #16]
 8009f1e:	f003 0310 	and.w	r3, r3, #16
 8009f22:	2b10      	cmp	r3, #16
 8009f24:	d122      	bne.n	8009f6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	68db      	ldr	r3, [r3, #12]
 8009f2c:	f003 0310 	and.w	r3, r3, #16
 8009f30:	2b10      	cmp	r3, #16
 8009f32:	d11b      	bne.n	8009f6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f06f 0210 	mvn.w	r2, #16
 8009f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2208      	movs	r2, #8
 8009f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	69db      	ldr	r3, [r3, #28]
 8009f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d003      	beq.n	8009f5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f000 f9fc 	bl	800a350 <HAL_TIM_IC_CaptureCallback>
 8009f58:	e005      	b.n	8009f66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 f9ee 	bl	800a33c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f000 f9ff 	bl	800a364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	691b      	ldr	r3, [r3, #16]
 8009f72:	f003 0301 	and.w	r3, r3, #1
 8009f76:	2b01      	cmp	r3, #1
 8009f78:	d10e      	bne.n	8009f98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	68db      	ldr	r3, [r3, #12]
 8009f80:	f003 0301 	and.w	r3, r3, #1
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	d107      	bne.n	8009f98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f06f 0201 	mvn.w	r2, #1
 8009f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f7f9 f8be 	bl	8003114 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	691b      	ldr	r3, [r3, #16]
 8009f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fa2:	2b80      	cmp	r3, #128	; 0x80
 8009fa4:	d10e      	bne.n	8009fc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	68db      	ldr	r3, [r3, #12]
 8009fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fb0:	2b80      	cmp	r3, #128	; 0x80
 8009fb2:	d107      	bne.n	8009fc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f000 fe7c 	bl	800acbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	691b      	ldr	r3, [r3, #16]
 8009fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fd2:	d10e      	bne.n	8009ff2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	68db      	ldr	r3, [r3, #12]
 8009fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fde:	2b80      	cmp	r3, #128	; 0x80
 8009fe0:	d107      	bne.n	8009ff2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009fea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f000 fe6f 	bl	800acd0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	691b      	ldr	r3, [r3, #16]
 8009ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ffc:	2b40      	cmp	r3, #64	; 0x40
 8009ffe:	d10e      	bne.n	800a01e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	68db      	ldr	r3, [r3, #12]
 800a006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a00a:	2b40      	cmp	r3, #64	; 0x40
 800a00c:	d107      	bne.n	800a01e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a016:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f000 f9ad 	bl	800a378 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	691b      	ldr	r3, [r3, #16]
 800a024:	f003 0320 	and.w	r3, r3, #32
 800a028:	2b20      	cmp	r3, #32
 800a02a:	d10e      	bne.n	800a04a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	68db      	ldr	r3, [r3, #12]
 800a032:	f003 0320 	and.w	r3, r3, #32
 800a036:	2b20      	cmp	r3, #32
 800a038:	d107      	bne.n	800a04a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f06f 0220 	mvn.w	r2, #32
 800a042:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f000 fe2f 	bl	800aca8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	691b      	ldr	r3, [r3, #16]
 800a050:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a054:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a058:	d10f      	bne.n	800a07a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	68db      	ldr	r3, [r3, #12]
 800a060:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a064:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a068:	d107      	bne.n	800a07a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800a072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f000 fe35 	bl	800ace4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	691b      	ldr	r3, [r3, #16]
 800a080:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a084:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a088:	d10f      	bne.n	800a0aa <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	68db      	ldr	r3, [r3, #12]
 800a090:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a094:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a098:	d107      	bne.n	800a0aa <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800a0a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f000 fe27 	bl	800acf8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	691b      	ldr	r3, [r3, #16]
 800a0b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a0b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a0b8:	d10f      	bne.n	800a0da <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a0c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a0c8:	d107      	bne.n	800a0da <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800a0d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f000 fe19 	bl	800ad0c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	691b      	ldr	r3, [r3, #16]
 800a0e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a0e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a0e8:	d10f      	bne.n	800a10a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	68db      	ldr	r3, [r3, #12]
 800a0f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a0f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a0f8:	d107      	bne.n	800a10a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800a102:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 fe0b 	bl	800ad20 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a10a:	bf00      	nop
 800a10c:	3708      	adds	r7, #8
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
	...

0800a114 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b086      	sub	sp, #24
 800a118:	af00      	add	r7, sp, #0
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	60b9      	str	r1, [r7, #8]
 800a11e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a120:	2300      	movs	r3, #0
 800a122:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	d101      	bne.n	800a132 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a12e:	2302      	movs	r3, #2
 800a130:	e0ff      	b.n	800a332 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2201      	movs	r2, #1
 800a136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2b14      	cmp	r3, #20
 800a13e:	f200 80f0 	bhi.w	800a322 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a142:	a201      	add	r2, pc, #4	; (adr r2, 800a148 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a148:	0800a19d 	.word	0x0800a19d
 800a14c:	0800a323 	.word	0x0800a323
 800a150:	0800a323 	.word	0x0800a323
 800a154:	0800a323 	.word	0x0800a323
 800a158:	0800a1dd 	.word	0x0800a1dd
 800a15c:	0800a323 	.word	0x0800a323
 800a160:	0800a323 	.word	0x0800a323
 800a164:	0800a323 	.word	0x0800a323
 800a168:	0800a21f 	.word	0x0800a21f
 800a16c:	0800a323 	.word	0x0800a323
 800a170:	0800a323 	.word	0x0800a323
 800a174:	0800a323 	.word	0x0800a323
 800a178:	0800a25f 	.word	0x0800a25f
 800a17c:	0800a323 	.word	0x0800a323
 800a180:	0800a323 	.word	0x0800a323
 800a184:	0800a323 	.word	0x0800a323
 800a188:	0800a2a1 	.word	0x0800a2a1
 800a18c:	0800a323 	.word	0x0800a323
 800a190:	0800a323 	.word	0x0800a323
 800a194:	0800a323 	.word	0x0800a323
 800a198:	0800a2e1 	.word	0x0800a2e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	68b9      	ldr	r1, [r7, #8]
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f000 f99a 	bl	800a4dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	699a      	ldr	r2, [r3, #24]
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f042 0208 	orr.w	r2, r2, #8
 800a1b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	699a      	ldr	r2, [r3, #24]
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f022 0204 	bic.w	r2, r2, #4
 800a1c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	6999      	ldr	r1, [r3, #24]
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	691a      	ldr	r2, [r3, #16]
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	430a      	orrs	r2, r1
 800a1d8:	619a      	str	r2, [r3, #24]
      break;
 800a1da:	e0a5      	b.n	800a328 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	68b9      	ldr	r1, [r7, #8]
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f000 fa14 	bl	800a610 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	699a      	ldr	r2, [r3, #24]
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a1f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	699a      	ldr	r2, [r3, #24]
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a206:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	6999      	ldr	r1, [r3, #24]
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	691b      	ldr	r3, [r3, #16]
 800a212:	021a      	lsls	r2, r3, #8
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	430a      	orrs	r2, r1
 800a21a:	619a      	str	r2, [r3, #24]
      break;
 800a21c:	e084      	b.n	800a328 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	68b9      	ldr	r1, [r7, #8]
 800a224:	4618      	mov	r0, r3
 800a226:	f000 fa87 	bl	800a738 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	69da      	ldr	r2, [r3, #28]
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f042 0208 	orr.w	r2, r2, #8
 800a238:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	69da      	ldr	r2, [r3, #28]
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f022 0204 	bic.w	r2, r2, #4
 800a248:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	69d9      	ldr	r1, [r3, #28]
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	691a      	ldr	r2, [r3, #16]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	430a      	orrs	r2, r1
 800a25a:	61da      	str	r2, [r3, #28]
      break;
 800a25c:	e064      	b.n	800a328 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	68b9      	ldr	r1, [r7, #8]
 800a264:	4618      	mov	r0, r3
 800a266:	f000 faf9 	bl	800a85c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	69da      	ldr	r2, [r3, #28]
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a278:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	69da      	ldr	r2, [r3, #28]
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a288:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	69d9      	ldr	r1, [r3, #28]
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	691b      	ldr	r3, [r3, #16]
 800a294:	021a      	lsls	r2, r3, #8
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	430a      	orrs	r2, r1
 800a29c:	61da      	str	r2, [r3, #28]
      break;
 800a29e:	e043      	b.n	800a328 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	68b9      	ldr	r1, [r7, #8]
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f000 fb6c 	bl	800a984 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f042 0208 	orr.w	r2, r2, #8
 800a2ba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f022 0204 	bic.w	r2, r2, #4
 800a2ca:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	691a      	ldr	r2, [r3, #16]
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	430a      	orrs	r2, r1
 800a2dc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800a2de:	e023      	b.n	800a328 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	68b9      	ldr	r1, [r7, #8]
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f000 fbb6 	bl	800aa58 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a2fa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a30a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	691b      	ldr	r3, [r3, #16]
 800a316:	021a      	lsls	r2, r3, #8
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	430a      	orrs	r2, r1
 800a31e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800a320:	e002      	b.n	800a328 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a322:	2301      	movs	r3, #1
 800a324:	75fb      	strb	r3, [r7, #23]
      break;
 800a326:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	2200      	movs	r2, #0
 800a32c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a330:	7dfb      	ldrb	r3, [r7, #23]
}
 800a332:	4618      	mov	r0, r3
 800a334:	3718      	adds	r7, #24
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop

0800a33c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b083      	sub	sp, #12
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a344:	bf00      	nop
 800a346:	370c      	adds	r7, #12
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr

0800a350 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a350:	b480      	push	{r7}
 800a352:	b083      	sub	sp, #12
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a358:	bf00      	nop
 800a35a:	370c      	adds	r7, #12
 800a35c:	46bd      	mov	sp, r7
 800a35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a362:	4770      	bx	lr

0800a364 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a364:	b480      	push	{r7}
 800a366:	b083      	sub	sp, #12
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a36c:	bf00      	nop
 800a36e:	370c      	adds	r7, #12
 800a370:	46bd      	mov	sp, r7
 800a372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a376:	4770      	bx	lr

0800a378 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a378:	b480      	push	{r7}
 800a37a:	b083      	sub	sp, #12
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a380:	bf00      	nop
 800a382:	370c      	adds	r7, #12
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr

0800a38c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b085      	sub	sp, #20
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	4a46      	ldr	r2, [pc, #280]	; (800a4b8 <TIM_Base_SetConfig+0x12c>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d017      	beq.n	800a3d4 <TIM_Base_SetConfig+0x48>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3aa:	d013      	beq.n	800a3d4 <TIM_Base_SetConfig+0x48>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	4a43      	ldr	r2, [pc, #268]	; (800a4bc <TIM_Base_SetConfig+0x130>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d00f      	beq.n	800a3d4 <TIM_Base_SetConfig+0x48>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	4a42      	ldr	r2, [pc, #264]	; (800a4c0 <TIM_Base_SetConfig+0x134>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d00b      	beq.n	800a3d4 <TIM_Base_SetConfig+0x48>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	4a41      	ldr	r2, [pc, #260]	; (800a4c4 <TIM_Base_SetConfig+0x138>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d007      	beq.n	800a3d4 <TIM_Base_SetConfig+0x48>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	4a40      	ldr	r2, [pc, #256]	; (800a4c8 <TIM_Base_SetConfig+0x13c>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d003      	beq.n	800a3d4 <TIM_Base_SetConfig+0x48>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	4a3f      	ldr	r2, [pc, #252]	; (800a4cc <TIM_Base_SetConfig+0x140>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d108      	bne.n	800a3e6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	68fa      	ldr	r2, [r7, #12]
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	4a33      	ldr	r2, [pc, #204]	; (800a4b8 <TIM_Base_SetConfig+0x12c>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d023      	beq.n	800a436 <TIM_Base_SetConfig+0xaa>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3f4:	d01f      	beq.n	800a436 <TIM_Base_SetConfig+0xaa>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	4a30      	ldr	r2, [pc, #192]	; (800a4bc <TIM_Base_SetConfig+0x130>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d01b      	beq.n	800a436 <TIM_Base_SetConfig+0xaa>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	4a2f      	ldr	r2, [pc, #188]	; (800a4c0 <TIM_Base_SetConfig+0x134>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d017      	beq.n	800a436 <TIM_Base_SetConfig+0xaa>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	4a2e      	ldr	r2, [pc, #184]	; (800a4c4 <TIM_Base_SetConfig+0x138>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d013      	beq.n	800a436 <TIM_Base_SetConfig+0xaa>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	4a2d      	ldr	r2, [pc, #180]	; (800a4c8 <TIM_Base_SetConfig+0x13c>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d00f      	beq.n	800a436 <TIM_Base_SetConfig+0xaa>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	4a2d      	ldr	r2, [pc, #180]	; (800a4d0 <TIM_Base_SetConfig+0x144>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d00b      	beq.n	800a436 <TIM_Base_SetConfig+0xaa>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	4a2c      	ldr	r2, [pc, #176]	; (800a4d4 <TIM_Base_SetConfig+0x148>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d007      	beq.n	800a436 <TIM_Base_SetConfig+0xaa>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	4a2b      	ldr	r2, [pc, #172]	; (800a4d8 <TIM_Base_SetConfig+0x14c>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d003      	beq.n	800a436 <TIM_Base_SetConfig+0xaa>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	4a26      	ldr	r2, [pc, #152]	; (800a4cc <TIM_Base_SetConfig+0x140>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d108      	bne.n	800a448 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a43c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	68db      	ldr	r3, [r3, #12]
 800a442:	68fa      	ldr	r2, [r7, #12]
 800a444:	4313      	orrs	r3, r2
 800a446:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	695b      	ldr	r3, [r3, #20]
 800a452:	4313      	orrs	r3, r2
 800a454:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	68fa      	ldr	r2, [r7, #12]
 800a45a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	689a      	ldr	r2, [r3, #8]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	681a      	ldr	r2, [r3, #0]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	4a12      	ldr	r2, [pc, #72]	; (800a4b8 <TIM_Base_SetConfig+0x12c>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d013      	beq.n	800a49c <TIM_Base_SetConfig+0x110>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	4a14      	ldr	r2, [pc, #80]	; (800a4c8 <TIM_Base_SetConfig+0x13c>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d00f      	beq.n	800a49c <TIM_Base_SetConfig+0x110>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	4a14      	ldr	r2, [pc, #80]	; (800a4d0 <TIM_Base_SetConfig+0x144>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d00b      	beq.n	800a49c <TIM_Base_SetConfig+0x110>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	4a13      	ldr	r2, [pc, #76]	; (800a4d4 <TIM_Base_SetConfig+0x148>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d007      	beq.n	800a49c <TIM_Base_SetConfig+0x110>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	4a12      	ldr	r2, [pc, #72]	; (800a4d8 <TIM_Base_SetConfig+0x14c>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d003      	beq.n	800a49c <TIM_Base_SetConfig+0x110>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	4a0d      	ldr	r2, [pc, #52]	; (800a4cc <TIM_Base_SetConfig+0x140>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d103      	bne.n	800a4a4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	691a      	ldr	r2, [r3, #16]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	615a      	str	r2, [r3, #20]
}
 800a4aa:	bf00      	nop
 800a4ac:	3714      	adds	r7, #20
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr
 800a4b6:	bf00      	nop
 800a4b8:	40012c00 	.word	0x40012c00
 800a4bc:	40000400 	.word	0x40000400
 800a4c0:	40000800 	.word	0x40000800
 800a4c4:	40000c00 	.word	0x40000c00
 800a4c8:	40013400 	.word	0x40013400
 800a4cc:	40015000 	.word	0x40015000
 800a4d0:	40014000 	.word	0x40014000
 800a4d4:	40014400 	.word	0x40014400
 800a4d8:	40014800 	.word	0x40014800

0800a4dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b087      	sub	sp, #28
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6a1b      	ldr	r3, [r3, #32]
 800a4ea:	f023 0201 	bic.w	r2, r3, #1
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6a1b      	ldr	r3, [r3, #32]
 800a4f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	685b      	ldr	r3, [r3, #4]
 800a4fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	699b      	ldr	r3, [r3, #24]
 800a502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a50a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a50e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	f023 0303 	bic.w	r3, r3, #3
 800a516:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	68fa      	ldr	r2, [r7, #12]
 800a51e:	4313      	orrs	r3, r2
 800a520:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	f023 0302 	bic.w	r3, r3, #2
 800a528:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	689b      	ldr	r3, [r3, #8]
 800a52e:	697a      	ldr	r2, [r7, #20]
 800a530:	4313      	orrs	r3, r2
 800a532:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	4a30      	ldr	r2, [pc, #192]	; (800a5f8 <TIM_OC1_SetConfig+0x11c>)
 800a538:	4293      	cmp	r3, r2
 800a53a:	d013      	beq.n	800a564 <TIM_OC1_SetConfig+0x88>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	4a2f      	ldr	r2, [pc, #188]	; (800a5fc <TIM_OC1_SetConfig+0x120>)
 800a540:	4293      	cmp	r3, r2
 800a542:	d00f      	beq.n	800a564 <TIM_OC1_SetConfig+0x88>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	4a2e      	ldr	r2, [pc, #184]	; (800a600 <TIM_OC1_SetConfig+0x124>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d00b      	beq.n	800a564 <TIM_OC1_SetConfig+0x88>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	4a2d      	ldr	r2, [pc, #180]	; (800a604 <TIM_OC1_SetConfig+0x128>)
 800a550:	4293      	cmp	r3, r2
 800a552:	d007      	beq.n	800a564 <TIM_OC1_SetConfig+0x88>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	4a2c      	ldr	r2, [pc, #176]	; (800a608 <TIM_OC1_SetConfig+0x12c>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d003      	beq.n	800a564 <TIM_OC1_SetConfig+0x88>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	4a2b      	ldr	r2, [pc, #172]	; (800a60c <TIM_OC1_SetConfig+0x130>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d10c      	bne.n	800a57e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	f023 0308 	bic.w	r3, r3, #8
 800a56a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	68db      	ldr	r3, [r3, #12]
 800a570:	697a      	ldr	r2, [r7, #20]
 800a572:	4313      	orrs	r3, r2
 800a574:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	f023 0304 	bic.w	r3, r3, #4
 800a57c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	4a1d      	ldr	r2, [pc, #116]	; (800a5f8 <TIM_OC1_SetConfig+0x11c>)
 800a582:	4293      	cmp	r3, r2
 800a584:	d013      	beq.n	800a5ae <TIM_OC1_SetConfig+0xd2>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	4a1c      	ldr	r2, [pc, #112]	; (800a5fc <TIM_OC1_SetConfig+0x120>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d00f      	beq.n	800a5ae <TIM_OC1_SetConfig+0xd2>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	4a1b      	ldr	r2, [pc, #108]	; (800a600 <TIM_OC1_SetConfig+0x124>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d00b      	beq.n	800a5ae <TIM_OC1_SetConfig+0xd2>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	4a1a      	ldr	r2, [pc, #104]	; (800a604 <TIM_OC1_SetConfig+0x128>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d007      	beq.n	800a5ae <TIM_OC1_SetConfig+0xd2>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	4a19      	ldr	r2, [pc, #100]	; (800a608 <TIM_OC1_SetConfig+0x12c>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d003      	beq.n	800a5ae <TIM_OC1_SetConfig+0xd2>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	4a18      	ldr	r2, [pc, #96]	; (800a60c <TIM_OC1_SetConfig+0x130>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d111      	bne.n	800a5d2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a5b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a5bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	695b      	ldr	r3, [r3, #20]
 800a5c2:	693a      	ldr	r2, [r7, #16]
 800a5c4:	4313      	orrs	r3, r2
 800a5c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	699b      	ldr	r3, [r3, #24]
 800a5cc:	693a      	ldr	r2, [r7, #16]
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	693a      	ldr	r2, [r7, #16]
 800a5d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	68fa      	ldr	r2, [r7, #12]
 800a5dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	685a      	ldr	r2, [r3, #4]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	697a      	ldr	r2, [r7, #20]
 800a5ea:	621a      	str	r2, [r3, #32]
}
 800a5ec:	bf00      	nop
 800a5ee:	371c      	adds	r7, #28
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr
 800a5f8:	40012c00 	.word	0x40012c00
 800a5fc:	40013400 	.word	0x40013400
 800a600:	40014000 	.word	0x40014000
 800a604:	40014400 	.word	0x40014400
 800a608:	40014800 	.word	0x40014800
 800a60c:	40015000 	.word	0x40015000

0800a610 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a610:	b480      	push	{r7}
 800a612:	b087      	sub	sp, #28
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6a1b      	ldr	r3, [r3, #32]
 800a61e:	f023 0210 	bic.w	r2, r3, #16
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6a1b      	ldr	r3, [r3, #32]
 800a62a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	685b      	ldr	r3, [r3, #4]
 800a630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	699b      	ldr	r3, [r3, #24]
 800a636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a63e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a64a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	021b      	lsls	r3, r3, #8
 800a652:	68fa      	ldr	r2, [r7, #12]
 800a654:	4313      	orrs	r3, r2
 800a656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	f023 0320 	bic.w	r3, r3, #32
 800a65e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	689b      	ldr	r3, [r3, #8]
 800a664:	011b      	lsls	r3, r3, #4
 800a666:	697a      	ldr	r2, [r7, #20]
 800a668:	4313      	orrs	r3, r2
 800a66a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	4a2c      	ldr	r2, [pc, #176]	; (800a720 <TIM_OC2_SetConfig+0x110>)
 800a670:	4293      	cmp	r3, r2
 800a672:	d007      	beq.n	800a684 <TIM_OC2_SetConfig+0x74>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	4a2b      	ldr	r2, [pc, #172]	; (800a724 <TIM_OC2_SetConfig+0x114>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d003      	beq.n	800a684 <TIM_OC2_SetConfig+0x74>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	4a2a      	ldr	r2, [pc, #168]	; (800a728 <TIM_OC2_SetConfig+0x118>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d10d      	bne.n	800a6a0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a684:	697b      	ldr	r3, [r7, #20]
 800a686:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a68a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	68db      	ldr	r3, [r3, #12]
 800a690:	011b      	lsls	r3, r3, #4
 800a692:	697a      	ldr	r2, [r7, #20]
 800a694:	4313      	orrs	r3, r2
 800a696:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a69e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	4a1f      	ldr	r2, [pc, #124]	; (800a720 <TIM_OC2_SetConfig+0x110>)
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	d013      	beq.n	800a6d0 <TIM_OC2_SetConfig+0xc0>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	4a1e      	ldr	r2, [pc, #120]	; (800a724 <TIM_OC2_SetConfig+0x114>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d00f      	beq.n	800a6d0 <TIM_OC2_SetConfig+0xc0>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	4a1e      	ldr	r2, [pc, #120]	; (800a72c <TIM_OC2_SetConfig+0x11c>)
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d00b      	beq.n	800a6d0 <TIM_OC2_SetConfig+0xc0>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	4a1d      	ldr	r2, [pc, #116]	; (800a730 <TIM_OC2_SetConfig+0x120>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d007      	beq.n	800a6d0 <TIM_OC2_SetConfig+0xc0>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	4a1c      	ldr	r2, [pc, #112]	; (800a734 <TIM_OC2_SetConfig+0x124>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d003      	beq.n	800a6d0 <TIM_OC2_SetConfig+0xc0>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	4a17      	ldr	r2, [pc, #92]	; (800a728 <TIM_OC2_SetConfig+0x118>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d113      	bne.n	800a6f8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a6d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a6de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	695b      	ldr	r3, [r3, #20]
 800a6e4:	009b      	lsls	r3, r3, #2
 800a6e6:	693a      	ldr	r2, [r7, #16]
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	699b      	ldr	r3, [r3, #24]
 800a6f0:	009b      	lsls	r3, r3, #2
 800a6f2:	693a      	ldr	r2, [r7, #16]
 800a6f4:	4313      	orrs	r3, r2
 800a6f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	693a      	ldr	r2, [r7, #16]
 800a6fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	68fa      	ldr	r2, [r7, #12]
 800a702:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	685a      	ldr	r2, [r3, #4]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	697a      	ldr	r2, [r7, #20]
 800a710:	621a      	str	r2, [r3, #32]
}
 800a712:	bf00      	nop
 800a714:	371c      	adds	r7, #28
 800a716:	46bd      	mov	sp, r7
 800a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71c:	4770      	bx	lr
 800a71e:	bf00      	nop
 800a720:	40012c00 	.word	0x40012c00
 800a724:	40013400 	.word	0x40013400
 800a728:	40015000 	.word	0x40015000
 800a72c:	40014000 	.word	0x40014000
 800a730:	40014400 	.word	0x40014400
 800a734:	40014800 	.word	0x40014800

0800a738 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a738:	b480      	push	{r7}
 800a73a:	b087      	sub	sp, #28
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6a1b      	ldr	r3, [r3, #32]
 800a746:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6a1b      	ldr	r3, [r3, #32]
 800a752:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	69db      	ldr	r3, [r3, #28]
 800a75e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a76a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	f023 0303 	bic.w	r3, r3, #3
 800a772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	68fa      	ldr	r2, [r7, #12]
 800a77a:	4313      	orrs	r3, r2
 800a77c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a784:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	689b      	ldr	r3, [r3, #8]
 800a78a:	021b      	lsls	r3, r3, #8
 800a78c:	697a      	ldr	r2, [r7, #20]
 800a78e:	4313      	orrs	r3, r2
 800a790:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	4a2b      	ldr	r2, [pc, #172]	; (800a844 <TIM_OC3_SetConfig+0x10c>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d007      	beq.n	800a7aa <TIM_OC3_SetConfig+0x72>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	4a2a      	ldr	r2, [pc, #168]	; (800a848 <TIM_OC3_SetConfig+0x110>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d003      	beq.n	800a7aa <TIM_OC3_SetConfig+0x72>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	4a29      	ldr	r2, [pc, #164]	; (800a84c <TIM_OC3_SetConfig+0x114>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d10d      	bne.n	800a7c6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a7b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	68db      	ldr	r3, [r3, #12]
 800a7b6:	021b      	lsls	r3, r3, #8
 800a7b8:	697a      	ldr	r2, [r7, #20]
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a7c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	4a1e      	ldr	r2, [pc, #120]	; (800a844 <TIM_OC3_SetConfig+0x10c>)
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d013      	beq.n	800a7f6 <TIM_OC3_SetConfig+0xbe>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	4a1d      	ldr	r2, [pc, #116]	; (800a848 <TIM_OC3_SetConfig+0x110>)
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d00f      	beq.n	800a7f6 <TIM_OC3_SetConfig+0xbe>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	4a1d      	ldr	r2, [pc, #116]	; (800a850 <TIM_OC3_SetConfig+0x118>)
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d00b      	beq.n	800a7f6 <TIM_OC3_SetConfig+0xbe>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	4a1c      	ldr	r2, [pc, #112]	; (800a854 <TIM_OC3_SetConfig+0x11c>)
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d007      	beq.n	800a7f6 <TIM_OC3_SetConfig+0xbe>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	4a1b      	ldr	r2, [pc, #108]	; (800a858 <TIM_OC3_SetConfig+0x120>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d003      	beq.n	800a7f6 <TIM_OC3_SetConfig+0xbe>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	4a16      	ldr	r2, [pc, #88]	; (800a84c <TIM_OC3_SetConfig+0x114>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d113      	bne.n	800a81e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a7fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a804:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	695b      	ldr	r3, [r3, #20]
 800a80a:	011b      	lsls	r3, r3, #4
 800a80c:	693a      	ldr	r2, [r7, #16]
 800a80e:	4313      	orrs	r3, r2
 800a810:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	699b      	ldr	r3, [r3, #24]
 800a816:	011b      	lsls	r3, r3, #4
 800a818:	693a      	ldr	r2, [r7, #16]
 800a81a:	4313      	orrs	r3, r2
 800a81c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	693a      	ldr	r2, [r7, #16]
 800a822:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	68fa      	ldr	r2, [r7, #12]
 800a828:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	685a      	ldr	r2, [r3, #4]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	697a      	ldr	r2, [r7, #20]
 800a836:	621a      	str	r2, [r3, #32]
}
 800a838:	bf00      	nop
 800a83a:	371c      	adds	r7, #28
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr
 800a844:	40012c00 	.word	0x40012c00
 800a848:	40013400 	.word	0x40013400
 800a84c:	40015000 	.word	0x40015000
 800a850:	40014000 	.word	0x40014000
 800a854:	40014400 	.word	0x40014400
 800a858:	40014800 	.word	0x40014800

0800a85c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b087      	sub	sp, #28
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6a1b      	ldr	r3, [r3, #32]
 800a86a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6a1b      	ldr	r3, [r3, #32]
 800a876:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	69db      	ldr	r3, [r3, #28]
 800a882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a88a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a88e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a896:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	021b      	lsls	r3, r3, #8
 800a89e:	68fa      	ldr	r2, [r7, #12]
 800a8a0:	4313      	orrs	r3, r2
 800a8a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a8aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	689b      	ldr	r3, [r3, #8]
 800a8b0:	031b      	lsls	r3, r3, #12
 800a8b2:	697a      	ldr	r2, [r7, #20]
 800a8b4:	4313      	orrs	r3, r2
 800a8b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	4a2c      	ldr	r2, [pc, #176]	; (800a96c <TIM_OC4_SetConfig+0x110>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d007      	beq.n	800a8d0 <TIM_OC4_SetConfig+0x74>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	4a2b      	ldr	r2, [pc, #172]	; (800a970 <TIM_OC4_SetConfig+0x114>)
 800a8c4:	4293      	cmp	r3, r2
 800a8c6:	d003      	beq.n	800a8d0 <TIM_OC4_SetConfig+0x74>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	4a2a      	ldr	r2, [pc, #168]	; (800a974 <TIM_OC4_SetConfig+0x118>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d10d      	bne.n	800a8ec <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a8d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	68db      	ldr	r3, [r3, #12]
 800a8dc:	031b      	lsls	r3, r3, #12
 800a8de:	697a      	ldr	r2, [r7, #20]
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a8ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	4a1f      	ldr	r2, [pc, #124]	; (800a96c <TIM_OC4_SetConfig+0x110>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d013      	beq.n	800a91c <TIM_OC4_SetConfig+0xc0>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	4a1e      	ldr	r2, [pc, #120]	; (800a970 <TIM_OC4_SetConfig+0x114>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d00f      	beq.n	800a91c <TIM_OC4_SetConfig+0xc0>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	4a1e      	ldr	r2, [pc, #120]	; (800a978 <TIM_OC4_SetConfig+0x11c>)
 800a900:	4293      	cmp	r3, r2
 800a902:	d00b      	beq.n	800a91c <TIM_OC4_SetConfig+0xc0>
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	4a1d      	ldr	r2, [pc, #116]	; (800a97c <TIM_OC4_SetConfig+0x120>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d007      	beq.n	800a91c <TIM_OC4_SetConfig+0xc0>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	4a1c      	ldr	r2, [pc, #112]	; (800a980 <TIM_OC4_SetConfig+0x124>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d003      	beq.n	800a91c <TIM_OC4_SetConfig+0xc0>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	4a17      	ldr	r2, [pc, #92]	; (800a974 <TIM_OC4_SetConfig+0x118>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	d113      	bne.n	800a944 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a922:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a92a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	695b      	ldr	r3, [r3, #20]
 800a930:	019b      	lsls	r3, r3, #6
 800a932:	693a      	ldr	r2, [r7, #16]
 800a934:	4313      	orrs	r3, r2
 800a936:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	699b      	ldr	r3, [r3, #24]
 800a93c:	019b      	lsls	r3, r3, #6
 800a93e:	693a      	ldr	r2, [r7, #16]
 800a940:	4313      	orrs	r3, r2
 800a942:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	693a      	ldr	r2, [r7, #16]
 800a948:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	68fa      	ldr	r2, [r7, #12]
 800a94e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	685a      	ldr	r2, [r3, #4]
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	697a      	ldr	r2, [r7, #20]
 800a95c:	621a      	str	r2, [r3, #32]
}
 800a95e:	bf00      	nop
 800a960:	371c      	adds	r7, #28
 800a962:	46bd      	mov	sp, r7
 800a964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a968:	4770      	bx	lr
 800a96a:	bf00      	nop
 800a96c:	40012c00 	.word	0x40012c00
 800a970:	40013400 	.word	0x40013400
 800a974:	40015000 	.word	0x40015000
 800a978:	40014000 	.word	0x40014000
 800a97c:	40014400 	.word	0x40014400
 800a980:	40014800 	.word	0x40014800

0800a984 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a984:	b480      	push	{r7}
 800a986:	b087      	sub	sp, #28
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6a1b      	ldr	r3, [r3, #32]
 800a992:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6a1b      	ldr	r3, [r3, #32]
 800a99e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	685b      	ldr	r3, [r3, #4]
 800a9a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a9b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	68fa      	ldr	r2, [r7, #12]
 800a9be:	4313      	orrs	r3, r2
 800a9c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a9c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	689b      	ldr	r3, [r3, #8]
 800a9ce:	041b      	lsls	r3, r3, #16
 800a9d0:	693a      	ldr	r2, [r7, #16]
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	4a19      	ldr	r2, [pc, #100]	; (800aa40 <TIM_OC5_SetConfig+0xbc>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d013      	beq.n	800aa06 <TIM_OC5_SetConfig+0x82>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	4a18      	ldr	r2, [pc, #96]	; (800aa44 <TIM_OC5_SetConfig+0xc0>)
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d00f      	beq.n	800aa06 <TIM_OC5_SetConfig+0x82>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	4a17      	ldr	r2, [pc, #92]	; (800aa48 <TIM_OC5_SetConfig+0xc4>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d00b      	beq.n	800aa06 <TIM_OC5_SetConfig+0x82>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	4a16      	ldr	r2, [pc, #88]	; (800aa4c <TIM_OC5_SetConfig+0xc8>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d007      	beq.n	800aa06 <TIM_OC5_SetConfig+0x82>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	4a15      	ldr	r2, [pc, #84]	; (800aa50 <TIM_OC5_SetConfig+0xcc>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d003      	beq.n	800aa06 <TIM_OC5_SetConfig+0x82>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	4a14      	ldr	r2, [pc, #80]	; (800aa54 <TIM_OC5_SetConfig+0xd0>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d109      	bne.n	800aa1a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa0c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	695b      	ldr	r3, [r3, #20]
 800aa12:	021b      	lsls	r3, r3, #8
 800aa14:	697a      	ldr	r2, [r7, #20]
 800aa16:	4313      	orrs	r3, r2
 800aa18:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	697a      	ldr	r2, [r7, #20]
 800aa1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	68fa      	ldr	r2, [r7, #12]
 800aa24:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	685a      	ldr	r2, [r3, #4]
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	693a      	ldr	r2, [r7, #16]
 800aa32:	621a      	str	r2, [r3, #32]
}
 800aa34:	bf00      	nop
 800aa36:	371c      	adds	r7, #28
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr
 800aa40:	40012c00 	.word	0x40012c00
 800aa44:	40013400 	.word	0x40013400
 800aa48:	40014000 	.word	0x40014000
 800aa4c:	40014400 	.word	0x40014400
 800aa50:	40014800 	.word	0x40014800
 800aa54:	40015000 	.word	0x40015000

0800aa58 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b087      	sub	sp, #28
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6a1b      	ldr	r3, [r3, #32]
 800aa66:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6a1b      	ldr	r3, [r3, #32]
 800aa72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aa86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	021b      	lsls	r3, r3, #8
 800aa92:	68fa      	ldr	r2, [r7, #12]
 800aa94:	4313      	orrs	r3, r2
 800aa96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aa9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	689b      	ldr	r3, [r3, #8]
 800aaa4:	051b      	lsls	r3, r3, #20
 800aaa6:	693a      	ldr	r2, [r7, #16]
 800aaa8:	4313      	orrs	r3, r2
 800aaaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	4a1a      	ldr	r2, [pc, #104]	; (800ab18 <TIM_OC6_SetConfig+0xc0>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d013      	beq.n	800aadc <TIM_OC6_SetConfig+0x84>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	4a19      	ldr	r2, [pc, #100]	; (800ab1c <TIM_OC6_SetConfig+0xc4>)
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d00f      	beq.n	800aadc <TIM_OC6_SetConfig+0x84>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	4a18      	ldr	r2, [pc, #96]	; (800ab20 <TIM_OC6_SetConfig+0xc8>)
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d00b      	beq.n	800aadc <TIM_OC6_SetConfig+0x84>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	4a17      	ldr	r2, [pc, #92]	; (800ab24 <TIM_OC6_SetConfig+0xcc>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d007      	beq.n	800aadc <TIM_OC6_SetConfig+0x84>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	4a16      	ldr	r2, [pc, #88]	; (800ab28 <TIM_OC6_SetConfig+0xd0>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d003      	beq.n	800aadc <TIM_OC6_SetConfig+0x84>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	4a15      	ldr	r2, [pc, #84]	; (800ab2c <TIM_OC6_SetConfig+0xd4>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d109      	bne.n	800aaf0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aae2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	695b      	ldr	r3, [r3, #20]
 800aae8:	029b      	lsls	r3, r3, #10
 800aaea:	697a      	ldr	r2, [r7, #20]
 800aaec:	4313      	orrs	r3, r2
 800aaee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	697a      	ldr	r2, [r7, #20]
 800aaf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	68fa      	ldr	r2, [r7, #12]
 800aafa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	685a      	ldr	r2, [r3, #4]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	693a      	ldr	r2, [r7, #16]
 800ab08:	621a      	str	r2, [r3, #32]
}
 800ab0a:	bf00      	nop
 800ab0c:	371c      	adds	r7, #28
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab14:	4770      	bx	lr
 800ab16:	bf00      	nop
 800ab18:	40012c00 	.word	0x40012c00
 800ab1c:	40013400 	.word	0x40013400
 800ab20:	40014000 	.word	0x40014000
 800ab24:	40014400 	.word	0x40014400
 800ab28:	40014800 	.word	0x40014800
 800ab2c:	40015000 	.word	0x40015000

0800ab30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b087      	sub	sp, #28
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	60f8      	str	r0, [r7, #12]
 800ab38:	60b9      	str	r1, [r7, #8]
 800ab3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	f003 031f 	and.w	r3, r3, #31
 800ab42:	2201      	movs	r2, #1
 800ab44:	fa02 f303 	lsl.w	r3, r2, r3
 800ab48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	6a1a      	ldr	r2, [r3, #32]
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	43db      	mvns	r3, r3
 800ab52:	401a      	ands	r2, r3
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	6a1a      	ldr	r2, [r3, #32]
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	f003 031f 	and.w	r3, r3, #31
 800ab62:	6879      	ldr	r1, [r7, #4]
 800ab64:	fa01 f303 	lsl.w	r3, r1, r3
 800ab68:	431a      	orrs	r2, r3
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	621a      	str	r2, [r3, #32]
}
 800ab6e:	bf00      	nop
 800ab70:	371c      	adds	r7, #28
 800ab72:	46bd      	mov	sp, r7
 800ab74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab78:	4770      	bx	lr
	...

0800ab7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b085      	sub	sp, #20
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	d101      	bne.n	800ab94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ab90:	2302      	movs	r3, #2
 800ab92:	e074      	b.n	800ac7e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2201      	movs	r2, #1
 800ab98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2202      	movs	r2, #2
 800aba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	685b      	ldr	r3, [r3, #4]
 800abaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	689b      	ldr	r3, [r3, #8]
 800abb2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4a34      	ldr	r2, [pc, #208]	; (800ac8c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d009      	beq.n	800abd2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	4a33      	ldr	r2, [pc, #204]	; (800ac90 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d004      	beq.n	800abd2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	4a31      	ldr	r2, [pc, #196]	; (800ac94 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d108      	bne.n	800abe4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800abd8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	685b      	ldr	r3, [r3, #4]
 800abde:	68fa      	ldr	r2, [r7, #12]
 800abe0:	4313      	orrs	r3, r2
 800abe2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800abea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	68fa      	ldr	r2, [r7, #12]
 800abf6:	4313      	orrs	r3, r2
 800abf8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	68fa      	ldr	r2, [r7, #12]
 800ac00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	4a21      	ldr	r2, [pc, #132]	; (800ac8c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d022      	beq.n	800ac52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac14:	d01d      	beq.n	800ac52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4a1f      	ldr	r2, [pc, #124]	; (800ac98 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d018      	beq.n	800ac52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4a1d      	ldr	r2, [pc, #116]	; (800ac9c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d013      	beq.n	800ac52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	4a1c      	ldr	r2, [pc, #112]	; (800aca0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d00e      	beq.n	800ac52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	4a15      	ldr	r2, [pc, #84]	; (800ac90 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	d009      	beq.n	800ac52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	4a18      	ldr	r2, [pc, #96]	; (800aca4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d004      	beq.n	800ac52 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	4a11      	ldr	r2, [pc, #68]	; (800ac94 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d10c      	bne.n	800ac6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	689b      	ldr	r3, [r3, #8]
 800ac5e:	68ba      	ldr	r2, [r7, #8]
 800ac60:	4313      	orrs	r3, r2
 800ac62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	68ba      	ldr	r2, [r7, #8]
 800ac6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2201      	movs	r2, #1
 800ac70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2200      	movs	r2, #0
 800ac78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac7c:	2300      	movs	r3, #0
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3714      	adds	r7, #20
 800ac82:	46bd      	mov	sp, r7
 800ac84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac88:	4770      	bx	lr
 800ac8a:	bf00      	nop
 800ac8c:	40012c00 	.word	0x40012c00
 800ac90:	40013400 	.word	0x40013400
 800ac94:	40015000 	.word	0x40015000
 800ac98:	40000400 	.word	0x40000400
 800ac9c:	40000800 	.word	0x40000800
 800aca0:	40000c00 	.word	0x40000c00
 800aca4:	40014000 	.word	0x40014000

0800aca8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b083      	sub	sp, #12
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800acb0:	bf00      	nop
 800acb2:	370c      	adds	r7, #12
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr

0800acbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b083      	sub	sp, #12
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800acc4:	bf00      	nop
 800acc6:	370c      	adds	r7, #12
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr

0800acd0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b083      	sub	sp, #12
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800acd8:	bf00      	nop
 800acda:	370c      	adds	r7, #12
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr

0800ace4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b083      	sub	sp, #12
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800acec:	bf00      	nop
 800acee:	370c      	adds	r7, #12
 800acf0:	46bd      	mov	sp, r7
 800acf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf6:	4770      	bx	lr

0800acf8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b083      	sub	sp, #12
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800ad00:	bf00      	nop
 800ad02:	370c      	adds	r7, #12
 800ad04:	46bd      	mov	sp, r7
 800ad06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0a:	4770      	bx	lr

0800ad0c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b083      	sub	sp, #12
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800ad14:	bf00      	nop
 800ad16:	370c      	adds	r7, #12
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr

0800ad20 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b083      	sub	sp, #12
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ad28:	bf00      	nop
 800ad2a:	370c      	adds	r7, #12
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr

0800ad34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d101      	bne.n	800ad46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad42:	2301      	movs	r3, #1
 800ad44:	e042      	b.n	800adcc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d106      	bne.n	800ad5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2200      	movs	r2, #0
 800ad54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f7f9 f8ad 	bl	8003eb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2224      	movs	r2, #36	; 0x24
 800ad62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	681a      	ldr	r2, [r3, #0]
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f022 0201 	bic.w	r2, r2, #1
 800ad74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f000 fd2e 	bl	800b7d8 <UART_SetConfig>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	2b01      	cmp	r3, #1
 800ad80:	d101      	bne.n	800ad86 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ad82:	2301      	movs	r3, #1
 800ad84:	e022      	b.n	800adcc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d002      	beq.n	800ad94 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f001 f81e 	bl	800bdd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	685a      	ldr	r2, [r3, #4]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ada2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	689a      	ldr	r2, [r3, #8]
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800adb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	681a      	ldr	r2, [r3, #0]
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f042 0201 	orr.w	r2, r2, #1
 800adc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f001 f8a5 	bl	800bf14 <UART_CheckIdleState>
 800adca:	4603      	mov	r3, r0
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3708      	adds	r7, #8
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}

0800add4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b08a      	sub	sp, #40	; 0x28
 800add8:	af02      	add	r7, sp, #8
 800adda:	60f8      	str	r0, [r7, #12]
 800addc:	60b9      	str	r1, [r7, #8]
 800adde:	603b      	str	r3, [r7, #0]
 800ade0:	4613      	mov	r3, r2
 800ade2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800adea:	2b20      	cmp	r3, #32
 800adec:	f040 8083 	bne.w	800aef6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d002      	beq.n	800adfc <HAL_UART_Transmit+0x28>
 800adf6:	88fb      	ldrh	r3, [r7, #6]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d101      	bne.n	800ae00 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800adfc:	2301      	movs	r3, #1
 800adfe:	e07b      	b.n	800aef8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ae06:	2b01      	cmp	r3, #1
 800ae08:	d101      	bne.n	800ae0e <HAL_UART_Transmit+0x3a>
 800ae0a:	2302      	movs	r3, #2
 800ae0c:	e074      	b.n	800aef8 <HAL_UART_Transmit+0x124>
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	2201      	movs	r2, #1
 800ae12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2221      	movs	r2, #33	; 0x21
 800ae22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ae26:	f7f9 f95f 	bl	80040e8 <HAL_GetTick>
 800ae2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	88fa      	ldrh	r2, [r7, #6]
 800ae30:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	88fa      	ldrh	r2, [r7, #6]
 800ae38:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	689b      	ldr	r3, [r3, #8]
 800ae40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae44:	d108      	bne.n	800ae58 <HAL_UART_Transmit+0x84>
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	691b      	ldr	r3, [r3, #16]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d104      	bne.n	800ae58 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	61bb      	str	r3, [r7, #24]
 800ae56:	e003      	b.n	800ae60 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	2200      	movs	r2, #0
 800ae64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800ae68:	e02c      	b.n	800aec4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	9300      	str	r3, [sp, #0]
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	2200      	movs	r2, #0
 800ae72:	2180      	movs	r1, #128	; 0x80
 800ae74:	68f8      	ldr	r0, [r7, #12]
 800ae76:	f001 f898 	bl	800bfaa <UART_WaitOnFlagUntilTimeout>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d001      	beq.n	800ae84 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800ae80:	2303      	movs	r3, #3
 800ae82:	e039      	b.n	800aef8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800ae84:	69fb      	ldr	r3, [r7, #28]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d10b      	bne.n	800aea2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ae8a:	69bb      	ldr	r3, [r7, #24]
 800ae8c:	881b      	ldrh	r3, [r3, #0]
 800ae8e:	461a      	mov	r2, r3
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ae98:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ae9a:	69bb      	ldr	r3, [r7, #24]
 800ae9c:	3302      	adds	r3, #2
 800ae9e:	61bb      	str	r3, [r7, #24]
 800aea0:	e007      	b.n	800aeb2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800aea2:	69fb      	ldr	r3, [r7, #28]
 800aea4:	781a      	ldrb	r2, [r3, #0]
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800aeac:	69fb      	ldr	r3, [r7, #28]
 800aeae:	3301      	adds	r3, #1
 800aeb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800aeb8:	b29b      	uxth	r3, r3
 800aeba:	3b01      	subs	r3, #1
 800aebc:	b29a      	uxth	r2, r3
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800aeca:	b29b      	uxth	r3, r3
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d1cc      	bne.n	800ae6a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	9300      	str	r3, [sp, #0]
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	2200      	movs	r2, #0
 800aed8:	2140      	movs	r1, #64	; 0x40
 800aeda:	68f8      	ldr	r0, [r7, #12]
 800aedc:	f001 f865 	bl	800bfaa <UART_WaitOnFlagUntilTimeout>
 800aee0:	4603      	mov	r3, r0
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d001      	beq.n	800aeea <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800aee6:	2303      	movs	r3, #3
 800aee8:	e006      	b.n	800aef8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2220      	movs	r2, #32
 800aeee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800aef2:	2300      	movs	r3, #0
 800aef4:	e000      	b.n	800aef8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800aef6:	2302      	movs	r3, #2
  }
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3720      	adds	r7, #32
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b08a      	sub	sp, #40	; 0x28
 800af04:	af02      	add	r7, sp, #8
 800af06:	60f8      	str	r0, [r7, #12]
 800af08:	60b9      	str	r1, [r7, #8]
 800af0a:	603b      	str	r3, [r7, #0]
 800af0c:	4613      	mov	r3, r2
 800af0e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af16:	2b20      	cmp	r3, #32
 800af18:	f040 80c0 	bne.w	800b09c <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d002      	beq.n	800af28 <HAL_UART_Receive+0x28>
 800af22:	88fb      	ldrh	r3, [r7, #6]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d101      	bne.n	800af2c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800af28:	2301      	movs	r3, #1
 800af2a:	e0b8      	b.n	800b09e <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800af32:	2b01      	cmp	r3, #1
 800af34:	d101      	bne.n	800af3a <HAL_UART_Receive+0x3a>
 800af36:	2302      	movs	r3, #2
 800af38:	e0b1      	b.n	800b09e <HAL_UART_Receive+0x19e>
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2201      	movs	r2, #1
 800af3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	2200      	movs	r2, #0
 800af46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	2222      	movs	r2, #34	; 0x22
 800af4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	2200      	movs	r2, #0
 800af56:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800af58:	f7f9 f8c6 	bl	80040e8 <HAL_GetTick>
 800af5c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	88fa      	ldrh	r2, [r7, #6]
 800af62:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	88fa      	ldrh	r2, [r7, #6]
 800af6a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	689b      	ldr	r3, [r3, #8]
 800af72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af76:	d10e      	bne.n	800af96 <HAL_UART_Receive+0x96>
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	691b      	ldr	r3, [r3, #16]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d105      	bne.n	800af8c <HAL_UART_Receive+0x8c>
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	f240 12ff 	movw	r2, #511	; 0x1ff
 800af86:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800af8a:	e02d      	b.n	800afe8 <HAL_UART_Receive+0xe8>
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	22ff      	movs	r2, #255	; 0xff
 800af90:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800af94:	e028      	b.n	800afe8 <HAL_UART_Receive+0xe8>
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	689b      	ldr	r3, [r3, #8]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d10d      	bne.n	800afba <HAL_UART_Receive+0xba>
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	691b      	ldr	r3, [r3, #16]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d104      	bne.n	800afb0 <HAL_UART_Receive+0xb0>
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	22ff      	movs	r2, #255	; 0xff
 800afaa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800afae:	e01b      	b.n	800afe8 <HAL_UART_Receive+0xe8>
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	227f      	movs	r2, #127	; 0x7f
 800afb4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800afb8:	e016      	b.n	800afe8 <HAL_UART_Receive+0xe8>
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	689b      	ldr	r3, [r3, #8]
 800afbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800afc2:	d10d      	bne.n	800afe0 <HAL_UART_Receive+0xe0>
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	691b      	ldr	r3, [r3, #16]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d104      	bne.n	800afd6 <HAL_UART_Receive+0xd6>
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	227f      	movs	r2, #127	; 0x7f
 800afd0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800afd4:	e008      	b.n	800afe8 <HAL_UART_Receive+0xe8>
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	223f      	movs	r2, #63	; 0x3f
 800afda:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800afde:	e003      	b.n	800afe8 <HAL_UART_Receive+0xe8>
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2200      	movs	r2, #0
 800afe4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800afee:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	689b      	ldr	r3, [r3, #8]
 800aff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aff8:	d108      	bne.n	800b00c <HAL_UART_Receive+0x10c>
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	691b      	ldr	r3, [r3, #16]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d104      	bne.n	800b00c <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800b002:	2300      	movs	r3, #0
 800b004:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	61bb      	str	r3, [r7, #24]
 800b00a:	e003      	b.n	800b014 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b010:	2300      	movs	r3, #0
 800b012:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2200      	movs	r2, #0
 800b018:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800b01c:	e032      	b.n	800b084 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	9300      	str	r3, [sp, #0]
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	2200      	movs	r2, #0
 800b026:	2120      	movs	r1, #32
 800b028:	68f8      	ldr	r0, [r7, #12]
 800b02a:	f000 ffbe 	bl	800bfaa <UART_WaitOnFlagUntilTimeout>
 800b02e:	4603      	mov	r3, r0
 800b030:	2b00      	cmp	r3, #0
 800b032:	d001      	beq.n	800b038 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800b034:	2303      	movs	r3, #3
 800b036:	e032      	b.n	800b09e <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800b038:	69fb      	ldr	r3, [r7, #28]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d10c      	bne.n	800b058 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b044:	b29a      	uxth	r2, r3
 800b046:	8a7b      	ldrh	r3, [r7, #18]
 800b048:	4013      	ands	r3, r2
 800b04a:	b29a      	uxth	r2, r3
 800b04c:	69bb      	ldr	r3, [r7, #24]
 800b04e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800b050:	69bb      	ldr	r3, [r7, #24]
 800b052:	3302      	adds	r3, #2
 800b054:	61bb      	str	r3, [r7, #24]
 800b056:	e00c      	b.n	800b072 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b05e:	b2da      	uxtb	r2, r3
 800b060:	8a7b      	ldrh	r3, [r7, #18]
 800b062:	b2db      	uxtb	r3, r3
 800b064:	4013      	ands	r3, r2
 800b066:	b2da      	uxtb	r2, r3
 800b068:	69fb      	ldr	r3, [r7, #28]
 800b06a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800b06c:	69fb      	ldr	r3, [r7, #28]
 800b06e:	3301      	adds	r3, #1
 800b070:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b078:	b29b      	uxth	r3, r3
 800b07a:	3b01      	subs	r3, #1
 800b07c:	b29a      	uxth	r2, r3
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b08a:	b29b      	uxth	r3, r3
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d1c6      	bne.n	800b01e <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	2220      	movs	r2, #32
 800b094:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800b098:	2300      	movs	r3, #0
 800b09a:	e000      	b.n	800b09e <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800b09c:	2302      	movs	r3, #2
  }
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3720      	adds	r7, #32
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}
	...

0800b0a8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b08a      	sub	sp, #40	; 0x28
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	60f8      	str	r0, [r7, #12]
 800b0b0:	60b9      	str	r1, [r7, #8]
 800b0b2:	4613      	mov	r3, r2
 800b0b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0bc:	2b20      	cmp	r3, #32
 800b0be:	d142      	bne.n	800b146 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d002      	beq.n	800b0cc <HAL_UART_Receive_IT+0x24>
 800b0c6:	88fb      	ldrh	r3, [r7, #6]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d101      	bne.n	800b0d0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	e03b      	b.n	800b148 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b0d6:	2b01      	cmp	r3, #1
 800b0d8:	d101      	bne.n	800b0de <HAL_UART_Receive_IT+0x36>
 800b0da:	2302      	movs	r3, #2
 800b0dc:	e034      	b.n	800b148 <HAL_UART_Receive_IT+0xa0>
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	2201      	movs	r2, #1
 800b0e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	4a17      	ldr	r2, [pc, #92]	; (800b150 <HAL_UART_Receive_IT+0xa8>)
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	d01f      	beq.n	800b136 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	685b      	ldr	r3, [r3, #4]
 800b0fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b100:	2b00      	cmp	r3, #0
 800b102:	d018      	beq.n	800b136 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	e853 3f00 	ldrex	r3, [r3]
 800b110:	613b      	str	r3, [r7, #16]
   return(result);
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b118:	627b      	str	r3, [r7, #36]	; 0x24
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	461a      	mov	r2, r3
 800b120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b122:	623b      	str	r3, [r7, #32]
 800b124:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b126:	69f9      	ldr	r1, [r7, #28]
 800b128:	6a3a      	ldr	r2, [r7, #32]
 800b12a:	e841 2300 	strex	r3, r2, [r1]
 800b12e:	61bb      	str	r3, [r7, #24]
   return(result);
 800b130:	69bb      	ldr	r3, [r7, #24]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d1e6      	bne.n	800b104 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b136:	88fb      	ldrh	r3, [r7, #6]
 800b138:	461a      	mov	r2, r3
 800b13a:	68b9      	ldr	r1, [r7, #8]
 800b13c:	68f8      	ldr	r0, [r7, #12]
 800b13e:	f000 fffd 	bl	800c13c <UART_Start_Receive_IT>
 800b142:	4603      	mov	r3, r0
 800b144:	e000      	b.n	800b148 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b146:	2302      	movs	r3, #2
  }
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3728      	adds	r7, #40	; 0x28
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}
 800b150:	40008000 	.word	0x40008000

0800b154 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b0ba      	sub	sp, #232	; 0xe8
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	69db      	ldr	r3, [r3, #28]
 800b162:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	689b      	ldr	r3, [r3, #8]
 800b176:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b17a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b17e:	f640 030f 	movw	r3, #2063	; 0x80f
 800b182:	4013      	ands	r3, r2
 800b184:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b188:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d11b      	bne.n	800b1c8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b194:	f003 0320 	and.w	r3, r3, #32
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d015      	beq.n	800b1c8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b19c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1a0:	f003 0320 	and.w	r3, r3, #32
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d105      	bne.n	800b1b4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b1a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b1ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d009      	beq.n	800b1c8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	f000 82d6 	beq.w	800b76a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	4798      	blx	r3
      }
      return;
 800b1c6:	e2d0      	b.n	800b76a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b1c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	f000 811f 	beq.w	800b410 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b1d2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b1d6:	4b8b      	ldr	r3, [pc, #556]	; (800b404 <HAL_UART_IRQHandler+0x2b0>)
 800b1d8:	4013      	ands	r3, r2
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d106      	bne.n	800b1ec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b1de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b1e2:	4b89      	ldr	r3, [pc, #548]	; (800b408 <HAL_UART_IRQHandler+0x2b4>)
 800b1e4:	4013      	ands	r3, r2
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	f000 8112 	beq.w	800b410 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b1ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1f0:	f003 0301 	and.w	r3, r3, #1
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d011      	beq.n	800b21c <HAL_UART_IRQHandler+0xc8>
 800b1f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b200:	2b00      	cmp	r3, #0
 800b202:	d00b      	beq.n	800b21c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	2201      	movs	r2, #1
 800b20a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b212:	f043 0201 	orr.w	r2, r3, #1
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b21c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b220:	f003 0302 	and.w	r3, r3, #2
 800b224:	2b00      	cmp	r3, #0
 800b226:	d011      	beq.n	800b24c <HAL_UART_IRQHandler+0xf8>
 800b228:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b22c:	f003 0301 	and.w	r3, r3, #1
 800b230:	2b00      	cmp	r3, #0
 800b232:	d00b      	beq.n	800b24c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	2202      	movs	r2, #2
 800b23a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b242:	f043 0204 	orr.w	r2, r3, #4
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b24c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b250:	f003 0304 	and.w	r3, r3, #4
 800b254:	2b00      	cmp	r3, #0
 800b256:	d011      	beq.n	800b27c <HAL_UART_IRQHandler+0x128>
 800b258:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b25c:	f003 0301 	and.w	r3, r3, #1
 800b260:	2b00      	cmp	r3, #0
 800b262:	d00b      	beq.n	800b27c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	2204      	movs	r2, #4
 800b26a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b272:	f043 0202 	orr.w	r2, r3, #2
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b27c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b280:	f003 0308 	and.w	r3, r3, #8
 800b284:	2b00      	cmp	r3, #0
 800b286:	d017      	beq.n	800b2b8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b28c:	f003 0320 	and.w	r3, r3, #32
 800b290:	2b00      	cmp	r3, #0
 800b292:	d105      	bne.n	800b2a0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b294:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b298:	4b5a      	ldr	r3, [pc, #360]	; (800b404 <HAL_UART_IRQHandler+0x2b0>)
 800b29a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d00b      	beq.n	800b2b8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	2208      	movs	r2, #8
 800b2a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2ae:	f043 0208 	orr.w	r2, r3, #8
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b2b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d012      	beq.n	800b2ea <HAL_UART_IRQHandler+0x196>
 800b2c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d00c      	beq.n	800b2ea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b2d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2e0:	f043 0220 	orr.w	r2, r3, #32
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	f000 823c 	beq.w	800b76e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b2f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2fa:	f003 0320 	and.w	r3, r3, #32
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d013      	beq.n	800b32a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b306:	f003 0320 	and.w	r3, r3, #32
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d105      	bne.n	800b31a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b30e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b316:	2b00      	cmp	r3, #0
 800b318:	d007      	beq.n	800b32a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d003      	beq.n	800b32a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b330:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	689b      	ldr	r3, [r3, #8]
 800b33a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b33e:	2b40      	cmp	r3, #64	; 0x40
 800b340:	d005      	beq.n	800b34e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b342:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b346:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d04f      	beq.n	800b3ee <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f001 f81e 	bl	800c390 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	689b      	ldr	r3, [r3, #8]
 800b35a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b35e:	2b40      	cmp	r3, #64	; 0x40
 800b360:	d141      	bne.n	800b3e6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	3308      	adds	r3, #8
 800b368:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b36c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b370:	e853 3f00 	ldrex	r3, [r3]
 800b374:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b378:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b37c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b380:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	3308      	adds	r3, #8
 800b38a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b38e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b392:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b396:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b39a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b39e:	e841 2300 	strex	r3, r2, [r1]
 800b3a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b3a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d1d9      	bne.n	800b362 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d013      	beq.n	800b3de <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3ba:	4a14      	ldr	r2, [pc, #80]	; (800b40c <HAL_UART_IRQHandler+0x2b8>)
 800b3bc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f7fa fb26 	bl	8005a14 <HAL_DMA_Abort_IT>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d017      	beq.n	800b3fe <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3d4:	687a      	ldr	r2, [r7, #4]
 800b3d6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800b3d8:	4610      	mov	r0, r2
 800b3da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3dc:	e00f      	b.n	800b3fe <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f000 f9e4 	bl	800b7ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3e4:	e00b      	b.n	800b3fe <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f000 f9e0 	bl	800b7ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3ec:	e007      	b.n	800b3fe <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f000 f9dc 	bl	800b7ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800b3fc:	e1b7      	b.n	800b76e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3fe:	bf00      	nop
    return;
 800b400:	e1b5      	b.n	800b76e <HAL_UART_IRQHandler+0x61a>
 800b402:	bf00      	nop
 800b404:	10000001 	.word	0x10000001
 800b408:	04000120 	.word	0x04000120
 800b40c:	0800c45d 	.word	0x0800c45d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b414:	2b01      	cmp	r3, #1
 800b416:	f040 814a 	bne.w	800b6ae <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b41a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b41e:	f003 0310 	and.w	r3, r3, #16
 800b422:	2b00      	cmp	r3, #0
 800b424:	f000 8143 	beq.w	800b6ae <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b42c:	f003 0310 	and.w	r3, r3, #16
 800b430:	2b00      	cmp	r3, #0
 800b432:	f000 813c 	beq.w	800b6ae <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	2210      	movs	r2, #16
 800b43c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	689b      	ldr	r3, [r3, #8]
 800b444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b448:	2b40      	cmp	r3, #64	; 0x40
 800b44a:	f040 80b5 	bne.w	800b5b8 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	685b      	ldr	r3, [r3, #4]
 800b456:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b45a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b45e:	2b00      	cmp	r3, #0
 800b460:	f000 8187 	beq.w	800b772 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b46a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b46e:	429a      	cmp	r2, r3
 800b470:	f080 817f 	bcs.w	800b772 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b47a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f003 0320 	and.w	r3, r3, #32
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	f040 8086 	bne.w	800b59c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b498:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b49c:	e853 3f00 	ldrex	r3, [r3]
 800b4a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b4a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b4a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b4ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	461a      	mov	r2, r3
 800b4b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b4ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b4be:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b4c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b4ca:	e841 2300 	strex	r3, r2, [r1]
 800b4ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b4d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d1da      	bne.n	800b490 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	3308      	adds	r3, #8
 800b4e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b4e4:	e853 3f00 	ldrex	r3, [r3]
 800b4e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b4ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b4ec:	f023 0301 	bic.w	r3, r3, #1
 800b4f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	3308      	adds	r3, #8
 800b4fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b4fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b502:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b504:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b506:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b50a:	e841 2300 	strex	r3, r2, [r1]
 800b50e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b510:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b512:	2b00      	cmp	r3, #0
 800b514:	d1e1      	bne.n	800b4da <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	3308      	adds	r3, #8
 800b51c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b51e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b520:	e853 3f00 	ldrex	r3, [r3]
 800b524:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b526:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b528:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b52c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	3308      	adds	r3, #8
 800b536:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b53a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b53c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b53e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b540:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b542:	e841 2300 	strex	r3, r2, [r1]
 800b546:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b548:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d1e3      	bne.n	800b516 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2220      	movs	r2, #32
 800b552:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2200      	movs	r2, #0
 800b55a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b564:	e853 3f00 	ldrex	r3, [r3]
 800b568:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b56a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b56c:	f023 0310 	bic.w	r3, r3, #16
 800b570:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	461a      	mov	r2, r3
 800b57a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b57e:	65bb      	str	r3, [r7, #88]	; 0x58
 800b580:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b582:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b584:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b586:	e841 2300 	strex	r3, r2, [r1]
 800b58a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b58c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d1e4      	bne.n	800b55c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b596:	4618      	mov	r0, r3
 800b598:	f7fa f9e3 	bl	8005962 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b5a8:	b29b      	uxth	r3, r3
 800b5aa:	1ad3      	subs	r3, r2, r3
 800b5ac:	b29b      	uxth	r3, r3
 800b5ae:	4619      	mov	r1, r3
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f000 f905 	bl	800b7c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b5b6:	e0dc      	b.n	800b772 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b5c4:	b29b      	uxth	r3, r3
 800b5c6:	1ad3      	subs	r3, r2, r3
 800b5c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b5d2:	b29b      	uxth	r3, r3
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	f000 80ce 	beq.w	800b776 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800b5da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	f000 80c9 	beq.w	800b776 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ec:	e853 3f00 	ldrex	r3, [r3]
 800b5f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b5f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b5f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	461a      	mov	r2, r3
 800b602:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b606:	647b      	str	r3, [r7, #68]	; 0x44
 800b608:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b60a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b60c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b60e:	e841 2300 	strex	r3, r2, [r1]
 800b612:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b616:	2b00      	cmp	r3, #0
 800b618:	d1e4      	bne.n	800b5e4 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	3308      	adds	r3, #8
 800b620:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b624:	e853 3f00 	ldrex	r3, [r3]
 800b628:	623b      	str	r3, [r7, #32]
   return(result);
 800b62a:	6a3b      	ldr	r3, [r7, #32]
 800b62c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b630:	f023 0301 	bic.w	r3, r3, #1
 800b634:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	3308      	adds	r3, #8
 800b63e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b642:	633a      	str	r2, [r7, #48]	; 0x30
 800b644:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b646:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b64a:	e841 2300 	strex	r3, r2, [r1]
 800b64e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b652:	2b00      	cmp	r3, #0
 800b654:	d1e1      	bne.n	800b61a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2220      	movs	r2, #32
 800b65a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2200      	movs	r2, #0
 800b662:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2200      	movs	r2, #0
 800b668:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	e853 3f00 	ldrex	r3, [r3]
 800b676:	60fb      	str	r3, [r7, #12]
   return(result);
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	f023 0310 	bic.w	r3, r3, #16
 800b67e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	461a      	mov	r2, r3
 800b688:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b68c:	61fb      	str	r3, [r7, #28]
 800b68e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b690:	69b9      	ldr	r1, [r7, #24]
 800b692:	69fa      	ldr	r2, [r7, #28]
 800b694:	e841 2300 	strex	r3, r2, [r1]
 800b698:	617b      	str	r3, [r7, #20]
   return(result);
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d1e4      	bne.n	800b66a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b6a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b6a4:	4619      	mov	r1, r3
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f000 f88a 	bl	800b7c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b6ac:	e063      	b.n	800b776 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b6ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d00e      	beq.n	800b6d8 <HAL_UART_IRQHandler+0x584>
 800b6ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b6be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d008      	beq.n	800b6d8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b6ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f001 fb61 	bl	800cd98 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b6d6:	e051      	b.n	800b77c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b6d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d014      	beq.n	800b70e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b6e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d105      	bne.n	800b6fc <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b6f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b6f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d008      	beq.n	800b70e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b700:	2b00      	cmp	r3, #0
 800b702:	d03a      	beq.n	800b77a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	4798      	blx	r3
    }
    return;
 800b70c:	e035      	b.n	800b77a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b70e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b716:	2b00      	cmp	r3, #0
 800b718:	d009      	beq.n	800b72e <HAL_UART_IRQHandler+0x5da>
 800b71a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b71e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b722:	2b00      	cmp	r3, #0
 800b724:	d003      	beq.n	800b72e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f000 feae 	bl	800c488 <UART_EndTransmit_IT>
    return;
 800b72c:	e026      	b.n	800b77c <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b72e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b732:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b736:	2b00      	cmp	r3, #0
 800b738:	d009      	beq.n	800b74e <HAL_UART_IRQHandler+0x5fa>
 800b73a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b73e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b742:	2b00      	cmp	r3, #0
 800b744:	d003      	beq.n	800b74e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f001 fb3a 	bl	800cdc0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b74c:	e016      	b.n	800b77c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b74e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b752:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b756:	2b00      	cmp	r3, #0
 800b758:	d010      	beq.n	800b77c <HAL_UART_IRQHandler+0x628>
 800b75a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b75e:	2b00      	cmp	r3, #0
 800b760:	da0c      	bge.n	800b77c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f001 fb22 	bl	800cdac <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b768:	e008      	b.n	800b77c <HAL_UART_IRQHandler+0x628>
      return;
 800b76a:	bf00      	nop
 800b76c:	e006      	b.n	800b77c <HAL_UART_IRQHandler+0x628>
    return;
 800b76e:	bf00      	nop
 800b770:	e004      	b.n	800b77c <HAL_UART_IRQHandler+0x628>
      return;
 800b772:	bf00      	nop
 800b774:	e002      	b.n	800b77c <HAL_UART_IRQHandler+0x628>
      return;
 800b776:	bf00      	nop
 800b778:	e000      	b.n	800b77c <HAL_UART_IRQHandler+0x628>
    return;
 800b77a:	bf00      	nop
  }
}
 800b77c:	37e8      	adds	r7, #232	; 0xe8
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}
 800b782:	bf00      	nop

0800b784 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b784:	b480      	push	{r7}
 800b786:	b083      	sub	sp, #12
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b78c:	bf00      	nop
 800b78e:	370c      	adds	r7, #12
 800b790:	46bd      	mov	sp, r7
 800b792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b796:	4770      	bx	lr

0800b798 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b798:	b480      	push	{r7}
 800b79a:	b083      	sub	sp, #12
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800b7a0:	bf00      	nop
 800b7a2:	370c      	adds	r7, #12
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7aa:	4770      	bx	lr

0800b7ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	b083      	sub	sp, #12
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b7b4:	bf00      	nop
 800b7b6:	370c      	adds	r7, #12
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7be:	4770      	bx	lr

0800b7c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b083      	sub	sp, #12
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
 800b7c8:	460b      	mov	r3, r1
 800b7ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b7cc:	bf00      	nop
 800b7ce:	370c      	adds	r7, #12
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d6:	4770      	bx	lr

0800b7d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b7d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b7dc:	b08c      	sub	sp, #48	; 0x30
 800b7de:	af00      	add	r7, sp, #0
 800b7e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	689a      	ldr	r2, [r3, #8]
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	691b      	ldr	r3, [r3, #16]
 800b7f0:	431a      	orrs	r2, r3
 800b7f2:	697b      	ldr	r3, [r7, #20]
 800b7f4:	695b      	ldr	r3, [r3, #20]
 800b7f6:	431a      	orrs	r2, r3
 800b7f8:	697b      	ldr	r3, [r7, #20]
 800b7fa:	69db      	ldr	r3, [r3, #28]
 800b7fc:	4313      	orrs	r3, r2
 800b7fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	681a      	ldr	r2, [r3, #0]
 800b806:	4baa      	ldr	r3, [pc, #680]	; (800bab0 <UART_SetConfig+0x2d8>)
 800b808:	4013      	ands	r3, r2
 800b80a:	697a      	ldr	r2, [r7, #20]
 800b80c:	6812      	ldr	r2, [r2, #0]
 800b80e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b810:	430b      	orrs	r3, r1
 800b812:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	685b      	ldr	r3, [r3, #4]
 800b81a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	68da      	ldr	r2, [r3, #12]
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	430a      	orrs	r2, r1
 800b828:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	699b      	ldr	r3, [r3, #24]
 800b82e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	4a9f      	ldr	r2, [pc, #636]	; (800bab4 <UART_SetConfig+0x2dc>)
 800b836:	4293      	cmp	r3, r2
 800b838:	d004      	beq.n	800b844 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b83a:	697b      	ldr	r3, [r7, #20]
 800b83c:	6a1b      	ldr	r3, [r3, #32]
 800b83e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b840:	4313      	orrs	r3, r2
 800b842:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	689b      	ldr	r3, [r3, #8]
 800b84a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800b84e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800b852:	697a      	ldr	r2, [r7, #20]
 800b854:	6812      	ldr	r2, [r2, #0]
 800b856:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b858:	430b      	orrs	r3, r1
 800b85a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b862:	f023 010f 	bic.w	r1, r3, #15
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	430a      	orrs	r2, r1
 800b870:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	4a90      	ldr	r2, [pc, #576]	; (800bab8 <UART_SetConfig+0x2e0>)
 800b878:	4293      	cmp	r3, r2
 800b87a:	d125      	bne.n	800b8c8 <UART_SetConfig+0xf0>
 800b87c:	4b8f      	ldr	r3, [pc, #572]	; (800babc <UART_SetConfig+0x2e4>)
 800b87e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b882:	f003 0303 	and.w	r3, r3, #3
 800b886:	2b03      	cmp	r3, #3
 800b888:	d81a      	bhi.n	800b8c0 <UART_SetConfig+0xe8>
 800b88a:	a201      	add	r2, pc, #4	; (adr r2, 800b890 <UART_SetConfig+0xb8>)
 800b88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b890:	0800b8a1 	.word	0x0800b8a1
 800b894:	0800b8b1 	.word	0x0800b8b1
 800b898:	0800b8a9 	.word	0x0800b8a9
 800b89c:	0800b8b9 	.word	0x0800b8b9
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b8a6:	e116      	b.n	800bad6 <UART_SetConfig+0x2fe>
 800b8a8:	2302      	movs	r3, #2
 800b8aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b8ae:	e112      	b.n	800bad6 <UART_SetConfig+0x2fe>
 800b8b0:	2304      	movs	r3, #4
 800b8b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b8b6:	e10e      	b.n	800bad6 <UART_SetConfig+0x2fe>
 800b8b8:	2308      	movs	r3, #8
 800b8ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b8be:	e10a      	b.n	800bad6 <UART_SetConfig+0x2fe>
 800b8c0:	2310      	movs	r3, #16
 800b8c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b8c6:	e106      	b.n	800bad6 <UART_SetConfig+0x2fe>
 800b8c8:	697b      	ldr	r3, [r7, #20]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	4a7c      	ldr	r2, [pc, #496]	; (800bac0 <UART_SetConfig+0x2e8>)
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	d138      	bne.n	800b944 <UART_SetConfig+0x16c>
 800b8d2:	4b7a      	ldr	r3, [pc, #488]	; (800babc <UART_SetConfig+0x2e4>)
 800b8d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8d8:	f003 030c 	and.w	r3, r3, #12
 800b8dc:	2b0c      	cmp	r3, #12
 800b8de:	d82d      	bhi.n	800b93c <UART_SetConfig+0x164>
 800b8e0:	a201      	add	r2, pc, #4	; (adr r2, 800b8e8 <UART_SetConfig+0x110>)
 800b8e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8e6:	bf00      	nop
 800b8e8:	0800b91d 	.word	0x0800b91d
 800b8ec:	0800b93d 	.word	0x0800b93d
 800b8f0:	0800b93d 	.word	0x0800b93d
 800b8f4:	0800b93d 	.word	0x0800b93d
 800b8f8:	0800b92d 	.word	0x0800b92d
 800b8fc:	0800b93d 	.word	0x0800b93d
 800b900:	0800b93d 	.word	0x0800b93d
 800b904:	0800b93d 	.word	0x0800b93d
 800b908:	0800b925 	.word	0x0800b925
 800b90c:	0800b93d 	.word	0x0800b93d
 800b910:	0800b93d 	.word	0x0800b93d
 800b914:	0800b93d 	.word	0x0800b93d
 800b918:	0800b935 	.word	0x0800b935
 800b91c:	2300      	movs	r3, #0
 800b91e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b922:	e0d8      	b.n	800bad6 <UART_SetConfig+0x2fe>
 800b924:	2302      	movs	r3, #2
 800b926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b92a:	e0d4      	b.n	800bad6 <UART_SetConfig+0x2fe>
 800b92c:	2304      	movs	r3, #4
 800b92e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b932:	e0d0      	b.n	800bad6 <UART_SetConfig+0x2fe>
 800b934:	2308      	movs	r3, #8
 800b936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b93a:	e0cc      	b.n	800bad6 <UART_SetConfig+0x2fe>
 800b93c:	2310      	movs	r3, #16
 800b93e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b942:	e0c8      	b.n	800bad6 <UART_SetConfig+0x2fe>
 800b944:	697b      	ldr	r3, [r7, #20]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	4a5e      	ldr	r2, [pc, #376]	; (800bac4 <UART_SetConfig+0x2ec>)
 800b94a:	4293      	cmp	r3, r2
 800b94c:	d125      	bne.n	800b99a <UART_SetConfig+0x1c2>
 800b94e:	4b5b      	ldr	r3, [pc, #364]	; (800babc <UART_SetConfig+0x2e4>)
 800b950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b954:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b958:	2b30      	cmp	r3, #48	; 0x30
 800b95a:	d016      	beq.n	800b98a <UART_SetConfig+0x1b2>
 800b95c:	2b30      	cmp	r3, #48	; 0x30
 800b95e:	d818      	bhi.n	800b992 <UART_SetConfig+0x1ba>
 800b960:	2b20      	cmp	r3, #32
 800b962:	d00a      	beq.n	800b97a <UART_SetConfig+0x1a2>
 800b964:	2b20      	cmp	r3, #32
 800b966:	d814      	bhi.n	800b992 <UART_SetConfig+0x1ba>
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d002      	beq.n	800b972 <UART_SetConfig+0x19a>
 800b96c:	2b10      	cmp	r3, #16
 800b96e:	d008      	beq.n	800b982 <UART_SetConfig+0x1aa>
 800b970:	e00f      	b.n	800b992 <UART_SetConfig+0x1ba>
 800b972:	2300      	movs	r3, #0
 800b974:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b978:	e0ad      	b.n	800bad6 <UART_SetConfig+0x2fe>
 800b97a:	2302      	movs	r3, #2
 800b97c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b980:	e0a9      	b.n	800bad6 <UART_SetConfig+0x2fe>
 800b982:	2304      	movs	r3, #4
 800b984:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b988:	e0a5      	b.n	800bad6 <UART_SetConfig+0x2fe>
 800b98a:	2308      	movs	r3, #8
 800b98c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b990:	e0a1      	b.n	800bad6 <UART_SetConfig+0x2fe>
 800b992:	2310      	movs	r3, #16
 800b994:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b998:	e09d      	b.n	800bad6 <UART_SetConfig+0x2fe>
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	4a4a      	ldr	r2, [pc, #296]	; (800bac8 <UART_SetConfig+0x2f0>)
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d125      	bne.n	800b9f0 <UART_SetConfig+0x218>
 800b9a4:	4b45      	ldr	r3, [pc, #276]	; (800babc <UART_SetConfig+0x2e4>)
 800b9a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b9ae:	2bc0      	cmp	r3, #192	; 0xc0
 800b9b0:	d016      	beq.n	800b9e0 <UART_SetConfig+0x208>
 800b9b2:	2bc0      	cmp	r3, #192	; 0xc0
 800b9b4:	d818      	bhi.n	800b9e8 <UART_SetConfig+0x210>
 800b9b6:	2b80      	cmp	r3, #128	; 0x80
 800b9b8:	d00a      	beq.n	800b9d0 <UART_SetConfig+0x1f8>
 800b9ba:	2b80      	cmp	r3, #128	; 0x80
 800b9bc:	d814      	bhi.n	800b9e8 <UART_SetConfig+0x210>
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d002      	beq.n	800b9c8 <UART_SetConfig+0x1f0>
 800b9c2:	2b40      	cmp	r3, #64	; 0x40
 800b9c4:	d008      	beq.n	800b9d8 <UART_SetConfig+0x200>
 800b9c6:	e00f      	b.n	800b9e8 <UART_SetConfig+0x210>
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b9ce:	e082      	b.n	800bad6 <UART_SetConfig+0x2fe>
 800b9d0:	2302      	movs	r3, #2
 800b9d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b9d6:	e07e      	b.n	800bad6 <UART_SetConfig+0x2fe>
 800b9d8:	2304      	movs	r3, #4
 800b9da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b9de:	e07a      	b.n	800bad6 <UART_SetConfig+0x2fe>
 800b9e0:	2308      	movs	r3, #8
 800b9e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b9e6:	e076      	b.n	800bad6 <UART_SetConfig+0x2fe>
 800b9e8:	2310      	movs	r3, #16
 800b9ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b9ee:	e072      	b.n	800bad6 <UART_SetConfig+0x2fe>
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	4a35      	ldr	r2, [pc, #212]	; (800bacc <UART_SetConfig+0x2f4>)
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	d12a      	bne.n	800ba50 <UART_SetConfig+0x278>
 800b9fa:	4b30      	ldr	r3, [pc, #192]	; (800babc <UART_SetConfig+0x2e4>)
 800b9fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba08:	d01a      	beq.n	800ba40 <UART_SetConfig+0x268>
 800ba0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba0e:	d81b      	bhi.n	800ba48 <UART_SetConfig+0x270>
 800ba10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba14:	d00c      	beq.n	800ba30 <UART_SetConfig+0x258>
 800ba16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba1a:	d815      	bhi.n	800ba48 <UART_SetConfig+0x270>
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d003      	beq.n	800ba28 <UART_SetConfig+0x250>
 800ba20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba24:	d008      	beq.n	800ba38 <UART_SetConfig+0x260>
 800ba26:	e00f      	b.n	800ba48 <UART_SetConfig+0x270>
 800ba28:	2300      	movs	r3, #0
 800ba2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba2e:	e052      	b.n	800bad6 <UART_SetConfig+0x2fe>
 800ba30:	2302      	movs	r3, #2
 800ba32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba36:	e04e      	b.n	800bad6 <UART_SetConfig+0x2fe>
 800ba38:	2304      	movs	r3, #4
 800ba3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba3e:	e04a      	b.n	800bad6 <UART_SetConfig+0x2fe>
 800ba40:	2308      	movs	r3, #8
 800ba42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba46:	e046      	b.n	800bad6 <UART_SetConfig+0x2fe>
 800ba48:	2310      	movs	r3, #16
 800ba4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba4e:	e042      	b.n	800bad6 <UART_SetConfig+0x2fe>
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	4a17      	ldr	r2, [pc, #92]	; (800bab4 <UART_SetConfig+0x2dc>)
 800ba56:	4293      	cmp	r3, r2
 800ba58:	d13a      	bne.n	800bad0 <UART_SetConfig+0x2f8>
 800ba5a:	4b18      	ldr	r3, [pc, #96]	; (800babc <UART_SetConfig+0x2e4>)
 800ba5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ba64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ba68:	d01a      	beq.n	800baa0 <UART_SetConfig+0x2c8>
 800ba6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ba6e:	d81b      	bhi.n	800baa8 <UART_SetConfig+0x2d0>
 800ba70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba74:	d00c      	beq.n	800ba90 <UART_SetConfig+0x2b8>
 800ba76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba7a:	d815      	bhi.n	800baa8 <UART_SetConfig+0x2d0>
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d003      	beq.n	800ba88 <UART_SetConfig+0x2b0>
 800ba80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba84:	d008      	beq.n	800ba98 <UART_SetConfig+0x2c0>
 800ba86:	e00f      	b.n	800baa8 <UART_SetConfig+0x2d0>
 800ba88:	2300      	movs	r3, #0
 800ba8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba8e:	e022      	b.n	800bad6 <UART_SetConfig+0x2fe>
 800ba90:	2302      	movs	r3, #2
 800ba92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba96:	e01e      	b.n	800bad6 <UART_SetConfig+0x2fe>
 800ba98:	2304      	movs	r3, #4
 800ba9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba9e:	e01a      	b.n	800bad6 <UART_SetConfig+0x2fe>
 800baa0:	2308      	movs	r3, #8
 800baa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800baa6:	e016      	b.n	800bad6 <UART_SetConfig+0x2fe>
 800baa8:	2310      	movs	r3, #16
 800baaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800baae:	e012      	b.n	800bad6 <UART_SetConfig+0x2fe>
 800bab0:	cfff69f3 	.word	0xcfff69f3
 800bab4:	40008000 	.word	0x40008000
 800bab8:	40013800 	.word	0x40013800
 800babc:	40021000 	.word	0x40021000
 800bac0:	40004400 	.word	0x40004400
 800bac4:	40004800 	.word	0x40004800
 800bac8:	40004c00 	.word	0x40004c00
 800bacc:	40005000 	.word	0x40005000
 800bad0:	2310      	movs	r3, #16
 800bad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	4aae      	ldr	r2, [pc, #696]	; (800bd94 <UART_SetConfig+0x5bc>)
 800badc:	4293      	cmp	r3, r2
 800bade:	f040 8097 	bne.w	800bc10 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bae2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bae6:	2b08      	cmp	r3, #8
 800bae8:	d823      	bhi.n	800bb32 <UART_SetConfig+0x35a>
 800baea:	a201      	add	r2, pc, #4	; (adr r2, 800baf0 <UART_SetConfig+0x318>)
 800baec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baf0:	0800bb15 	.word	0x0800bb15
 800baf4:	0800bb33 	.word	0x0800bb33
 800baf8:	0800bb1d 	.word	0x0800bb1d
 800bafc:	0800bb33 	.word	0x0800bb33
 800bb00:	0800bb23 	.word	0x0800bb23
 800bb04:	0800bb33 	.word	0x0800bb33
 800bb08:	0800bb33 	.word	0x0800bb33
 800bb0c:	0800bb33 	.word	0x0800bb33
 800bb10:	0800bb2b 	.word	0x0800bb2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb14:	f7fd fb9e 	bl	8009254 <HAL_RCC_GetPCLK1Freq>
 800bb18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bb1a:	e010      	b.n	800bb3e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bb1c:	4b9e      	ldr	r3, [pc, #632]	; (800bd98 <UART_SetConfig+0x5c0>)
 800bb1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bb20:	e00d      	b.n	800bb3e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bb22:	f7fd fb29 	bl	8009178 <HAL_RCC_GetSysClockFreq>
 800bb26:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bb28:	e009      	b.n	800bb3e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bb30:	e005      	b.n	800bb3e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800bb32:	2300      	movs	r3, #0
 800bb34:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bb36:	2301      	movs	r3, #1
 800bb38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bb3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bb3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	f000 8130 	beq.w	800bda6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb4a:	4a94      	ldr	r2, [pc, #592]	; (800bd9c <UART_SetConfig+0x5c4>)
 800bb4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb50:	461a      	mov	r2, r3
 800bb52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb54:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb58:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bb5a:	697b      	ldr	r3, [r7, #20]
 800bb5c:	685a      	ldr	r2, [r3, #4]
 800bb5e:	4613      	mov	r3, r2
 800bb60:	005b      	lsls	r3, r3, #1
 800bb62:	4413      	add	r3, r2
 800bb64:	69ba      	ldr	r2, [r7, #24]
 800bb66:	429a      	cmp	r2, r3
 800bb68:	d305      	bcc.n	800bb76 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	685b      	ldr	r3, [r3, #4]
 800bb6e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bb70:	69ba      	ldr	r2, [r7, #24]
 800bb72:	429a      	cmp	r2, r3
 800bb74:	d903      	bls.n	800bb7e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800bb76:	2301      	movs	r3, #1
 800bb78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bb7c:	e113      	b.n	800bda6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb80:	2200      	movs	r2, #0
 800bb82:	60bb      	str	r3, [r7, #8]
 800bb84:	60fa      	str	r2, [r7, #12]
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb8a:	4a84      	ldr	r2, [pc, #528]	; (800bd9c <UART_SetConfig+0x5c4>)
 800bb8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb90:	b29b      	uxth	r3, r3
 800bb92:	2200      	movs	r2, #0
 800bb94:	603b      	str	r3, [r7, #0]
 800bb96:	607a      	str	r2, [r7, #4]
 800bb98:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb9c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bba0:	f7f5 f80c 	bl	8000bbc <__aeabi_uldivmod>
 800bba4:	4602      	mov	r2, r0
 800bba6:	460b      	mov	r3, r1
 800bba8:	4610      	mov	r0, r2
 800bbaa:	4619      	mov	r1, r3
 800bbac:	f04f 0200 	mov.w	r2, #0
 800bbb0:	f04f 0300 	mov.w	r3, #0
 800bbb4:	020b      	lsls	r3, r1, #8
 800bbb6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bbba:	0202      	lsls	r2, r0, #8
 800bbbc:	6979      	ldr	r1, [r7, #20]
 800bbbe:	6849      	ldr	r1, [r1, #4]
 800bbc0:	0849      	lsrs	r1, r1, #1
 800bbc2:	2000      	movs	r0, #0
 800bbc4:	460c      	mov	r4, r1
 800bbc6:	4605      	mov	r5, r0
 800bbc8:	eb12 0804 	adds.w	r8, r2, r4
 800bbcc:	eb43 0905 	adc.w	r9, r3, r5
 800bbd0:	697b      	ldr	r3, [r7, #20]
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	469a      	mov	sl, r3
 800bbd8:	4693      	mov	fp, r2
 800bbda:	4652      	mov	r2, sl
 800bbdc:	465b      	mov	r3, fp
 800bbde:	4640      	mov	r0, r8
 800bbe0:	4649      	mov	r1, r9
 800bbe2:	f7f4 ffeb 	bl	8000bbc <__aeabi_uldivmod>
 800bbe6:	4602      	mov	r2, r0
 800bbe8:	460b      	mov	r3, r1
 800bbea:	4613      	mov	r3, r2
 800bbec:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bbee:	6a3b      	ldr	r3, [r7, #32]
 800bbf0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bbf4:	d308      	bcc.n	800bc08 <UART_SetConfig+0x430>
 800bbf6:	6a3b      	ldr	r3, [r7, #32]
 800bbf8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bbfc:	d204      	bcs.n	800bc08 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800bbfe:	697b      	ldr	r3, [r7, #20]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	6a3a      	ldr	r2, [r7, #32]
 800bc04:	60da      	str	r2, [r3, #12]
 800bc06:	e0ce      	b.n	800bda6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800bc08:	2301      	movs	r3, #1
 800bc0a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bc0e:	e0ca      	b.n	800bda6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	69db      	ldr	r3, [r3, #28]
 800bc14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc18:	d166      	bne.n	800bce8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800bc1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bc1e:	2b08      	cmp	r3, #8
 800bc20:	d827      	bhi.n	800bc72 <UART_SetConfig+0x49a>
 800bc22:	a201      	add	r2, pc, #4	; (adr r2, 800bc28 <UART_SetConfig+0x450>)
 800bc24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc28:	0800bc4d 	.word	0x0800bc4d
 800bc2c:	0800bc55 	.word	0x0800bc55
 800bc30:	0800bc5d 	.word	0x0800bc5d
 800bc34:	0800bc73 	.word	0x0800bc73
 800bc38:	0800bc63 	.word	0x0800bc63
 800bc3c:	0800bc73 	.word	0x0800bc73
 800bc40:	0800bc73 	.word	0x0800bc73
 800bc44:	0800bc73 	.word	0x0800bc73
 800bc48:	0800bc6b 	.word	0x0800bc6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc4c:	f7fd fb02 	bl	8009254 <HAL_RCC_GetPCLK1Freq>
 800bc50:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bc52:	e014      	b.n	800bc7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc54:	f7fd fb14 	bl	8009280 <HAL_RCC_GetPCLK2Freq>
 800bc58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bc5a:	e010      	b.n	800bc7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bc5c:	4b4e      	ldr	r3, [pc, #312]	; (800bd98 <UART_SetConfig+0x5c0>)
 800bc5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bc60:	e00d      	b.n	800bc7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bc62:	f7fd fa89 	bl	8009178 <HAL_RCC_GetSysClockFreq>
 800bc66:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bc68:	e009      	b.n	800bc7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bc70:	e005      	b.n	800bc7e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800bc72:	2300      	movs	r3, #0
 800bc74:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bc76:	2301      	movs	r3, #1
 800bc78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bc7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bc7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	f000 8090 	beq.w	800bda6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc8a:	4a44      	ldr	r2, [pc, #272]	; (800bd9c <UART_SetConfig+0x5c4>)
 800bc8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc90:	461a      	mov	r2, r3
 800bc92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc94:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc98:	005a      	lsls	r2, r3, #1
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	685b      	ldr	r3, [r3, #4]
 800bc9e:	085b      	lsrs	r3, r3, #1
 800bca0:	441a      	add	r2, r3
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	685b      	ldr	r3, [r3, #4]
 800bca6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcaa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bcac:	6a3b      	ldr	r3, [r7, #32]
 800bcae:	2b0f      	cmp	r3, #15
 800bcb0:	d916      	bls.n	800bce0 <UART_SetConfig+0x508>
 800bcb2:	6a3b      	ldr	r3, [r7, #32]
 800bcb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bcb8:	d212      	bcs.n	800bce0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bcba:	6a3b      	ldr	r3, [r7, #32]
 800bcbc:	b29b      	uxth	r3, r3
 800bcbe:	f023 030f 	bic.w	r3, r3, #15
 800bcc2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bcc4:	6a3b      	ldr	r3, [r7, #32]
 800bcc6:	085b      	lsrs	r3, r3, #1
 800bcc8:	b29b      	uxth	r3, r3
 800bcca:	f003 0307 	and.w	r3, r3, #7
 800bcce:	b29a      	uxth	r2, r3
 800bcd0:	8bfb      	ldrh	r3, [r7, #30]
 800bcd2:	4313      	orrs	r3, r2
 800bcd4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	8bfa      	ldrh	r2, [r7, #30]
 800bcdc:	60da      	str	r2, [r3, #12]
 800bcde:	e062      	b.n	800bda6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800bce0:	2301      	movs	r3, #1
 800bce2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bce6:	e05e      	b.n	800bda6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bce8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bcec:	2b08      	cmp	r3, #8
 800bcee:	d828      	bhi.n	800bd42 <UART_SetConfig+0x56a>
 800bcf0:	a201      	add	r2, pc, #4	; (adr r2, 800bcf8 <UART_SetConfig+0x520>)
 800bcf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcf6:	bf00      	nop
 800bcf8:	0800bd1d 	.word	0x0800bd1d
 800bcfc:	0800bd25 	.word	0x0800bd25
 800bd00:	0800bd2d 	.word	0x0800bd2d
 800bd04:	0800bd43 	.word	0x0800bd43
 800bd08:	0800bd33 	.word	0x0800bd33
 800bd0c:	0800bd43 	.word	0x0800bd43
 800bd10:	0800bd43 	.word	0x0800bd43
 800bd14:	0800bd43 	.word	0x0800bd43
 800bd18:	0800bd3b 	.word	0x0800bd3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd1c:	f7fd fa9a 	bl	8009254 <HAL_RCC_GetPCLK1Freq>
 800bd20:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bd22:	e014      	b.n	800bd4e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd24:	f7fd faac 	bl	8009280 <HAL_RCC_GetPCLK2Freq>
 800bd28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bd2a:	e010      	b.n	800bd4e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bd2c:	4b1a      	ldr	r3, [pc, #104]	; (800bd98 <UART_SetConfig+0x5c0>)
 800bd2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bd30:	e00d      	b.n	800bd4e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bd32:	f7fd fa21 	bl	8009178 <HAL_RCC_GetSysClockFreq>
 800bd36:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bd38:	e009      	b.n	800bd4e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bd40:	e005      	b.n	800bd4e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800bd42:	2300      	movs	r3, #0
 800bd44:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bd46:	2301      	movs	r3, #1
 800bd48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bd4c:	bf00      	nop
    }

    if (pclk != 0U)
 800bd4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d028      	beq.n	800bda6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd54:	697b      	ldr	r3, [r7, #20]
 800bd56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd58:	4a10      	ldr	r2, [pc, #64]	; (800bd9c <UART_SetConfig+0x5c4>)
 800bd5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd5e:	461a      	mov	r2, r3
 800bd60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd62:	fbb3 f2f2 	udiv	r2, r3, r2
 800bd66:	697b      	ldr	r3, [r7, #20]
 800bd68:	685b      	ldr	r3, [r3, #4]
 800bd6a:	085b      	lsrs	r3, r3, #1
 800bd6c:	441a      	add	r2, r3
 800bd6e:	697b      	ldr	r3, [r7, #20]
 800bd70:	685b      	ldr	r3, [r3, #4]
 800bd72:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd76:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd78:	6a3b      	ldr	r3, [r7, #32]
 800bd7a:	2b0f      	cmp	r3, #15
 800bd7c:	d910      	bls.n	800bda0 <UART_SetConfig+0x5c8>
 800bd7e:	6a3b      	ldr	r3, [r7, #32]
 800bd80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd84:	d20c      	bcs.n	800bda0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bd86:	6a3b      	ldr	r3, [r7, #32]
 800bd88:	b29a      	uxth	r2, r3
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	60da      	str	r2, [r3, #12]
 800bd90:	e009      	b.n	800bda6 <UART_SetConfig+0x5ce>
 800bd92:	bf00      	nop
 800bd94:	40008000 	.word	0x40008000
 800bd98:	00f42400 	.word	0x00f42400
 800bd9c:	08014c0c 	.word	0x08014c0c
      }
      else
      {
        ret = HAL_ERROR;
 800bda0:	2301      	movs	r3, #1
 800bda2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	2201      	movs	r2, #1
 800bdaa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	2201      	movs	r2, #1
 800bdb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800bdc2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3730      	adds	r7, #48	; 0x30
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800bdd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b083      	sub	sp, #12
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bddc:	f003 0301 	and.w	r3, r3, #1
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d00a      	beq.n	800bdfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	685b      	ldr	r3, [r3, #4]
 800bdea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	430a      	orrs	r2, r1
 800bdf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdfe:	f003 0302 	and.w	r3, r3, #2
 800be02:	2b00      	cmp	r3, #0
 800be04:	d00a      	beq.n	800be1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	685b      	ldr	r3, [r3, #4]
 800be0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	430a      	orrs	r2, r1
 800be1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be20:	f003 0304 	and.w	r3, r3, #4
 800be24:	2b00      	cmp	r3, #0
 800be26:	d00a      	beq.n	800be3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	685b      	ldr	r3, [r3, #4]
 800be2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	430a      	orrs	r2, r1
 800be3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be42:	f003 0308 	and.w	r3, r3, #8
 800be46:	2b00      	cmp	r3, #0
 800be48:	d00a      	beq.n	800be60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	685b      	ldr	r3, [r3, #4]
 800be50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	430a      	orrs	r2, r1
 800be5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be64:	f003 0310 	and.w	r3, r3, #16
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d00a      	beq.n	800be82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	689b      	ldr	r3, [r3, #8]
 800be72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	430a      	orrs	r2, r1
 800be80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be86:	f003 0320 	and.w	r3, r3, #32
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d00a      	beq.n	800bea4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	689b      	ldr	r3, [r3, #8]
 800be94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	430a      	orrs	r2, r1
 800bea2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800beac:	2b00      	cmp	r3, #0
 800beae:	d01a      	beq.n	800bee6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	685b      	ldr	r3, [r3, #4]
 800beb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	430a      	orrs	r2, r1
 800bec4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800beca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bece:	d10a      	bne.n	800bee6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	685b      	ldr	r3, [r3, #4]
 800bed6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	430a      	orrs	r2, r1
 800bee4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d00a      	beq.n	800bf08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	685b      	ldr	r3, [r3, #4]
 800bef8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	430a      	orrs	r2, r1
 800bf06:	605a      	str	r2, [r3, #4]
  }
}
 800bf08:	bf00      	nop
 800bf0a:	370c      	adds	r7, #12
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf12:	4770      	bx	lr

0800bf14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b086      	sub	sp, #24
 800bf18:	af02      	add	r7, sp, #8
 800bf1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bf24:	f7f8 f8e0 	bl	80040e8 <HAL_GetTick>
 800bf28:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f003 0308 	and.w	r3, r3, #8
 800bf34:	2b08      	cmp	r3, #8
 800bf36:	d10e      	bne.n	800bf56 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bf3c:	9300      	str	r3, [sp, #0]
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	2200      	movs	r2, #0
 800bf42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f000 f82f 	bl	800bfaa <UART_WaitOnFlagUntilTimeout>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d001      	beq.n	800bf56 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bf52:	2303      	movs	r3, #3
 800bf54:	e025      	b.n	800bfa2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	f003 0304 	and.w	r3, r3, #4
 800bf60:	2b04      	cmp	r3, #4
 800bf62:	d10e      	bne.n	800bf82 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bf68:	9300      	str	r3, [sp, #0]
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f000 f819 	bl	800bfaa <UART_WaitOnFlagUntilTimeout>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d001      	beq.n	800bf82 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bf7e:	2303      	movs	r3, #3
 800bf80:	e00f      	b.n	800bfa2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2220      	movs	r2, #32
 800bf86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2220      	movs	r2, #32
 800bf8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2200      	movs	r2, #0
 800bf96:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bfa0:	2300      	movs	r3, #0
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3710      	adds	r7, #16
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}

0800bfaa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bfaa:	b580      	push	{r7, lr}
 800bfac:	b09c      	sub	sp, #112	; 0x70
 800bfae:	af00      	add	r7, sp, #0
 800bfb0:	60f8      	str	r0, [r7, #12]
 800bfb2:	60b9      	str	r1, [r7, #8]
 800bfb4:	603b      	str	r3, [r7, #0]
 800bfb6:	4613      	mov	r3, r2
 800bfb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bfba:	e0a9      	b.n	800c110 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bfbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bfbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfc2:	f000 80a5 	beq.w	800c110 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bfc6:	f7f8 f88f 	bl	80040e8 <HAL_GetTick>
 800bfca:	4602      	mov	r2, r0
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	1ad3      	subs	r3, r2, r3
 800bfd0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bfd2:	429a      	cmp	r2, r3
 800bfd4:	d302      	bcc.n	800bfdc <UART_WaitOnFlagUntilTimeout+0x32>
 800bfd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d140      	bne.n	800c05e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfe4:	e853 3f00 	ldrex	r3, [r3]
 800bfe8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bfea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bff0:	667b      	str	r3, [r7, #100]	; 0x64
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	461a      	mov	r2, r3
 800bff8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bffa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bffc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bffe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c000:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c002:	e841 2300 	strex	r3, r2, [r1]
 800c006:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c008:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d1e6      	bne.n	800bfdc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	3308      	adds	r3, #8
 800c014:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c018:	e853 3f00 	ldrex	r3, [r3]
 800c01c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c01e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c020:	f023 0301 	bic.w	r3, r3, #1
 800c024:	663b      	str	r3, [r7, #96]	; 0x60
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	3308      	adds	r3, #8
 800c02c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c02e:	64ba      	str	r2, [r7, #72]	; 0x48
 800c030:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c032:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c034:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c036:	e841 2300 	strex	r3, r2, [r1]
 800c03a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c03c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d1e5      	bne.n	800c00e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	2220      	movs	r2, #32
 800c046:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	2220      	movs	r2, #32
 800c04e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	2200      	movs	r2, #0
 800c056:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c05a:	2303      	movs	r3, #3
 800c05c:	e069      	b.n	800c132 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	f003 0304 	and.w	r3, r3, #4
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d051      	beq.n	800c110 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	69db      	ldr	r3, [r3, #28]
 800c072:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c076:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c07a:	d149      	bne.n	800c110 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c084:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c08e:	e853 3f00 	ldrex	r3, [r3]
 800c092:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c096:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c09a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	461a      	mov	r2, r3
 800c0a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c0a4:	637b      	str	r3, [r7, #52]	; 0x34
 800c0a6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c0aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c0ac:	e841 2300 	strex	r3, r2, [r1]
 800c0b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d1e6      	bne.n	800c086 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	3308      	adds	r3, #8
 800c0be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0c0:	697b      	ldr	r3, [r7, #20]
 800c0c2:	e853 3f00 	ldrex	r3, [r3]
 800c0c6:	613b      	str	r3, [r7, #16]
   return(result);
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	f023 0301 	bic.w	r3, r3, #1
 800c0ce:	66bb      	str	r3, [r7, #104]	; 0x68
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	3308      	adds	r3, #8
 800c0d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c0d8:	623a      	str	r2, [r7, #32]
 800c0da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0dc:	69f9      	ldr	r1, [r7, #28]
 800c0de:	6a3a      	ldr	r2, [r7, #32]
 800c0e0:	e841 2300 	strex	r3, r2, [r1]
 800c0e4:	61bb      	str	r3, [r7, #24]
   return(result);
 800c0e6:	69bb      	ldr	r3, [r7, #24]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d1e5      	bne.n	800c0b8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	2220      	movs	r2, #32
 800c0f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	2220      	movs	r2, #32
 800c0f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	2220      	movs	r2, #32
 800c100:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	2200      	movs	r2, #0
 800c108:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c10c:	2303      	movs	r3, #3
 800c10e:	e010      	b.n	800c132 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	69da      	ldr	r2, [r3, #28]
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	4013      	ands	r3, r2
 800c11a:	68ba      	ldr	r2, [r7, #8]
 800c11c:	429a      	cmp	r2, r3
 800c11e:	bf0c      	ite	eq
 800c120:	2301      	moveq	r3, #1
 800c122:	2300      	movne	r3, #0
 800c124:	b2db      	uxtb	r3, r3
 800c126:	461a      	mov	r2, r3
 800c128:	79fb      	ldrb	r3, [r7, #7]
 800c12a:	429a      	cmp	r2, r3
 800c12c:	f43f af46 	beq.w	800bfbc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c130:	2300      	movs	r3, #0
}
 800c132:	4618      	mov	r0, r3
 800c134:	3770      	adds	r7, #112	; 0x70
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}
	...

0800c13c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c13c:	b480      	push	{r7}
 800c13e:	b0a3      	sub	sp, #140	; 0x8c
 800c140:	af00      	add	r7, sp, #0
 800c142:	60f8      	str	r0, [r7, #12]
 800c144:	60b9      	str	r1, [r7, #8]
 800c146:	4613      	mov	r3, r2
 800c148:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	68ba      	ldr	r2, [r7, #8]
 800c14e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	88fa      	ldrh	r2, [r7, #6]
 800c154:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	88fa      	ldrh	r2, [r7, #6]
 800c15c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	2200      	movs	r2, #0
 800c164:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	689b      	ldr	r3, [r3, #8]
 800c16a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c16e:	d10e      	bne.n	800c18e <UART_Start_Receive_IT+0x52>
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	691b      	ldr	r3, [r3, #16]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d105      	bne.n	800c184 <UART_Start_Receive_IT+0x48>
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c17e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c182:	e02d      	b.n	800c1e0 <UART_Start_Receive_IT+0xa4>
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	22ff      	movs	r2, #255	; 0xff
 800c188:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c18c:	e028      	b.n	800c1e0 <UART_Start_Receive_IT+0xa4>
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	689b      	ldr	r3, [r3, #8]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d10d      	bne.n	800c1b2 <UART_Start_Receive_IT+0x76>
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	691b      	ldr	r3, [r3, #16]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d104      	bne.n	800c1a8 <UART_Start_Receive_IT+0x6c>
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	22ff      	movs	r2, #255	; 0xff
 800c1a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c1a6:	e01b      	b.n	800c1e0 <UART_Start_Receive_IT+0xa4>
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	227f      	movs	r2, #127	; 0x7f
 800c1ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c1b0:	e016      	b.n	800c1e0 <UART_Start_Receive_IT+0xa4>
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	689b      	ldr	r3, [r3, #8]
 800c1b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c1ba:	d10d      	bne.n	800c1d8 <UART_Start_Receive_IT+0x9c>
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	691b      	ldr	r3, [r3, #16]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d104      	bne.n	800c1ce <UART_Start_Receive_IT+0x92>
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	227f      	movs	r2, #127	; 0x7f
 800c1c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c1cc:	e008      	b.n	800c1e0 <UART_Start_Receive_IT+0xa4>
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	223f      	movs	r2, #63	; 0x3f
 800c1d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c1d6:	e003      	b.n	800c1e0 <UART_Start_Receive_IT+0xa4>
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	2222      	movs	r2, #34	; 0x22
 800c1ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	3308      	adds	r3, #8
 800c1f6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c1fa:	e853 3f00 	ldrex	r3, [r3]
 800c1fe:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c200:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c202:	f043 0301 	orr.w	r3, r3, #1
 800c206:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	3308      	adds	r3, #8
 800c210:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c214:	673a      	str	r2, [r7, #112]	; 0x70
 800c216:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c218:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c21a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c21c:	e841 2300 	strex	r3, r2, [r1]
 800c220:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800c222:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c224:	2b00      	cmp	r3, #0
 800c226:	d1e3      	bne.n	800c1f0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c22c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c230:	d153      	bne.n	800c2da <UART_Start_Receive_IT+0x19e>
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c238:	88fa      	ldrh	r2, [r7, #6]
 800c23a:	429a      	cmp	r2, r3
 800c23c:	d34d      	bcc.n	800c2da <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	689b      	ldr	r3, [r3, #8]
 800c242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c246:	d107      	bne.n	800c258 <UART_Start_Receive_IT+0x11c>
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	691b      	ldr	r3, [r3, #16]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d103      	bne.n	800c258 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	4a4b      	ldr	r2, [pc, #300]	; (800c380 <UART_Start_Receive_IT+0x244>)
 800c254:	671a      	str	r2, [r3, #112]	; 0x70
 800c256:	e002      	b.n	800c25e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	4a4a      	ldr	r2, [pc, #296]	; (800c384 <UART_Start_Receive_IT+0x248>)
 800c25c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	2200      	movs	r2, #0
 800c262:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	691b      	ldr	r3, [r3, #16]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d01a      	beq.n	800c2a4 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c274:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c276:	e853 3f00 	ldrex	r3, [r3]
 800c27a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c27c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c27e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c282:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	461a      	mov	r2, r3
 800c28c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c290:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c292:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c294:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c296:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c298:	e841 2300 	strex	r3, r2, [r1]
 800c29c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c29e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d1e4      	bne.n	800c26e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	3308      	adds	r3, #8
 800c2aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2ae:	e853 3f00 	ldrex	r3, [r3]
 800c2b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c2b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c2ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	3308      	adds	r3, #8
 800c2c2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c2c4:	64ba      	str	r2, [r7, #72]	; 0x48
 800c2c6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c2ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c2cc:	e841 2300 	strex	r3, r2, [r1]
 800c2d0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c2d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d1e5      	bne.n	800c2a4 <UART_Start_Receive_IT+0x168>
 800c2d8:	e04a      	b.n	800c370 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	689b      	ldr	r3, [r3, #8]
 800c2de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2e2:	d107      	bne.n	800c2f4 <UART_Start_Receive_IT+0x1b8>
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	691b      	ldr	r3, [r3, #16]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d103      	bne.n	800c2f4 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	4a26      	ldr	r2, [pc, #152]	; (800c388 <UART_Start_Receive_IT+0x24c>)
 800c2f0:	671a      	str	r2, [r3, #112]	; 0x70
 800c2f2:	e002      	b.n	800c2fa <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	4a25      	ldr	r2, [pc, #148]	; (800c38c <UART_Start_Receive_IT+0x250>)
 800c2f8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	691b      	ldr	r3, [r3, #16]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d019      	beq.n	800c33e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c312:	e853 3f00 	ldrex	r3, [r3]
 800c316:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c31a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800c31e:	677b      	str	r3, [r7, #116]	; 0x74
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	461a      	mov	r2, r3
 800c326:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c328:	637b      	str	r3, [r7, #52]	; 0x34
 800c32a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c32c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c32e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c330:	e841 2300 	strex	r3, r2, [r1]
 800c334:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d1e6      	bne.n	800c30a <UART_Start_Receive_IT+0x1ce>
 800c33c:	e018      	b.n	800c370 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c344:	697b      	ldr	r3, [r7, #20]
 800c346:	e853 3f00 	ldrex	r3, [r3]
 800c34a:	613b      	str	r3, [r7, #16]
   return(result);
 800c34c:	693b      	ldr	r3, [r7, #16]
 800c34e:	f043 0320 	orr.w	r3, r3, #32
 800c352:	67bb      	str	r3, [r7, #120]	; 0x78
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	461a      	mov	r2, r3
 800c35a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c35c:	623b      	str	r3, [r7, #32]
 800c35e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c360:	69f9      	ldr	r1, [r7, #28]
 800c362:	6a3a      	ldr	r2, [r7, #32]
 800c364:	e841 2300 	strex	r3, r2, [r1]
 800c368:	61bb      	str	r3, [r7, #24]
   return(result);
 800c36a:	69bb      	ldr	r3, [r7, #24]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d1e6      	bne.n	800c33e <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 800c370:	2300      	movs	r3, #0
}
 800c372:	4618      	mov	r0, r3
 800c374:	378c      	adds	r7, #140	; 0x8c
 800c376:	46bd      	mov	sp, r7
 800c378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37c:	4770      	bx	lr
 800c37e:	bf00      	nop
 800c380:	0800ca99 	.word	0x0800ca99
 800c384:	0800c7a1 	.word	0x0800c7a1
 800c388:	0800c63f 	.word	0x0800c63f
 800c38c:	0800c4df 	.word	0x0800c4df

0800c390 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c390:	b480      	push	{r7}
 800c392:	b095      	sub	sp, #84	; 0x54
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c39e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3a0:	e853 3f00 	ldrex	r3, [r3]
 800c3a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c3ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	461a      	mov	r2, r3
 800c3b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3b6:	643b      	str	r3, [r7, #64]	; 0x40
 800c3b8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c3bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c3be:	e841 2300 	strex	r3, r2, [r1]
 800c3c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d1e6      	bne.n	800c398 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	3308      	adds	r3, #8
 800c3d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3d2:	6a3b      	ldr	r3, [r7, #32]
 800c3d4:	e853 3f00 	ldrex	r3, [r3]
 800c3d8:	61fb      	str	r3, [r7, #28]
   return(result);
 800c3da:	69fb      	ldr	r3, [r7, #28]
 800c3dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c3e0:	f023 0301 	bic.w	r3, r3, #1
 800c3e4:	64bb      	str	r3, [r7, #72]	; 0x48
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	3308      	adds	r3, #8
 800c3ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c3ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c3f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c3f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3f6:	e841 2300 	strex	r3, r2, [r1]
 800c3fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d1e3      	bne.n	800c3ca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c406:	2b01      	cmp	r3, #1
 800c408:	d118      	bne.n	800c43c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	e853 3f00 	ldrex	r3, [r3]
 800c416:	60bb      	str	r3, [r7, #8]
   return(result);
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	f023 0310 	bic.w	r3, r3, #16
 800c41e:	647b      	str	r3, [r7, #68]	; 0x44
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	461a      	mov	r2, r3
 800c426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c428:	61bb      	str	r3, [r7, #24]
 800c42a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c42c:	6979      	ldr	r1, [r7, #20]
 800c42e:	69ba      	ldr	r2, [r7, #24]
 800c430:	e841 2300 	strex	r3, r2, [r1]
 800c434:	613b      	str	r3, [r7, #16]
   return(result);
 800c436:	693b      	ldr	r3, [r7, #16]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d1e6      	bne.n	800c40a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2220      	movs	r2, #32
 800c440:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2200      	movs	r2, #0
 800c448:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	2200      	movs	r2, #0
 800c44e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800c450:	bf00      	nop
 800c452:	3754      	adds	r7, #84	; 0x54
 800c454:	46bd      	mov	sp, r7
 800c456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45a:	4770      	bx	lr

0800c45c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b084      	sub	sp, #16
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c468:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	2200      	movs	r2, #0
 800c46e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	2200      	movs	r2, #0
 800c476:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c47a:	68f8      	ldr	r0, [r7, #12]
 800c47c:	f7ff f996 	bl	800b7ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c480:	bf00      	nop
 800c482:	3710      	adds	r7, #16
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}

0800c488 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b088      	sub	sp, #32
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	e853 3f00 	ldrex	r3, [r3]
 800c49c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c4a4:	61fb      	str	r3, [r7, #28]
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	461a      	mov	r2, r3
 800c4ac:	69fb      	ldr	r3, [r7, #28]
 800c4ae:	61bb      	str	r3, [r7, #24]
 800c4b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4b2:	6979      	ldr	r1, [r7, #20]
 800c4b4:	69ba      	ldr	r2, [r7, #24]
 800c4b6:	e841 2300 	strex	r3, r2, [r1]
 800c4ba:	613b      	str	r3, [r7, #16]
   return(result);
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d1e6      	bne.n	800c490 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2220      	movs	r2, #32
 800c4c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	f7ff f957 	bl	800b784 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c4d6:	bf00      	nop
 800c4d8:	3720      	adds	r7, #32
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}

0800c4de <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c4de:	b580      	push	{r7, lr}
 800c4e0:	b096      	sub	sp, #88	; 0x58
 800c4e2:	af00      	add	r7, sp, #0
 800c4e4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c4ec:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4f6:	2b22      	cmp	r3, #34	; 0x22
 800c4f8:	f040 8095 	bne.w	800c626 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c502:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c506:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800c50a:	b2d9      	uxtb	r1, r3
 800c50c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c510:	b2da      	uxtb	r2, r3
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c516:	400a      	ands	r2, r1
 800c518:	b2d2      	uxtb	r2, r2
 800c51a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c520:	1c5a      	adds	r2, r3, #1
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c52c:	b29b      	uxth	r3, r3
 800c52e:	3b01      	subs	r3, #1
 800c530:	b29a      	uxth	r2, r3
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c53e:	b29b      	uxth	r3, r3
 800c540:	2b00      	cmp	r3, #0
 800c542:	d178      	bne.n	800c636 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c54a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c54c:	e853 3f00 	ldrex	r3, [r3]
 800c550:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c554:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c558:	653b      	str	r3, [r7, #80]	; 0x50
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	461a      	mov	r2, r3
 800c560:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c562:	647b      	str	r3, [r7, #68]	; 0x44
 800c564:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c566:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c568:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c56a:	e841 2300 	strex	r3, r2, [r1]
 800c56e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c572:	2b00      	cmp	r3, #0
 800c574:	d1e6      	bne.n	800c544 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	3308      	adds	r3, #8
 800c57c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c580:	e853 3f00 	ldrex	r3, [r3]
 800c584:	623b      	str	r3, [r7, #32]
   return(result);
 800c586:	6a3b      	ldr	r3, [r7, #32]
 800c588:	f023 0301 	bic.w	r3, r3, #1
 800c58c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	3308      	adds	r3, #8
 800c594:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c596:	633a      	str	r2, [r7, #48]	; 0x30
 800c598:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c59a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c59c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c59e:	e841 2300 	strex	r3, r2, [r1]
 800c5a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d1e5      	bne.n	800c576 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2220      	movs	r2, #32
 800c5ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5bc:	2b01      	cmp	r3, #1
 800c5be:	d12e      	bne.n	800c61e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	e853 3f00 	ldrex	r3, [r3]
 800c5d2:	60fb      	str	r3, [r7, #12]
   return(result);
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	f023 0310 	bic.w	r3, r3, #16
 800c5da:	64bb      	str	r3, [r7, #72]	; 0x48
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	461a      	mov	r2, r3
 800c5e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c5e4:	61fb      	str	r3, [r7, #28]
 800c5e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5e8:	69b9      	ldr	r1, [r7, #24]
 800c5ea:	69fa      	ldr	r2, [r7, #28]
 800c5ec:	e841 2300 	strex	r3, r2, [r1]
 800c5f0:	617b      	str	r3, [r7, #20]
   return(result);
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d1e6      	bne.n	800c5c6 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	69db      	ldr	r3, [r3, #28]
 800c5fe:	f003 0310 	and.w	r3, r3, #16
 800c602:	2b10      	cmp	r3, #16
 800c604:	d103      	bne.n	800c60e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	2210      	movs	r2, #16
 800c60c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c614:	4619      	mov	r1, r3
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f7ff f8d2 	bl	800b7c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c61c:	e00b      	b.n	800c636 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f7ff f8ba 	bl	800b798 <HAL_UART_RxCpltCallback>
}
 800c624:	e007      	b.n	800c636 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	699a      	ldr	r2, [r3, #24]
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	f042 0208 	orr.w	r2, r2, #8
 800c634:	619a      	str	r2, [r3, #24]
}
 800c636:	bf00      	nop
 800c638:	3758      	adds	r7, #88	; 0x58
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}

0800c63e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c63e:	b580      	push	{r7, lr}
 800c640:	b096      	sub	sp, #88	; 0x58
 800c642:	af00      	add	r7, sp, #0
 800c644:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c64c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c656:	2b22      	cmp	r3, #34	; 0x22
 800c658:	f040 8095 	bne.w	800c786 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c662:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c66a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800c66c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800c670:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c674:	4013      	ands	r3, r2
 800c676:	b29a      	uxth	r2, r3
 800c678:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c67a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c680:	1c9a      	adds	r2, r3, #2
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c68c:	b29b      	uxth	r3, r3
 800c68e:	3b01      	subs	r3, #1
 800c690:	b29a      	uxth	r2, r3
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c69e:	b29b      	uxth	r3, r3
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d178      	bne.n	800c796 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6ac:	e853 3f00 	ldrex	r3, [r3]
 800c6b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c6b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	461a      	mov	r2, r3
 800c6c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6c2:	643b      	str	r3, [r7, #64]	; 0x40
 800c6c4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c6c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c6ca:	e841 2300 	strex	r3, r2, [r1]
 800c6ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d1e6      	bne.n	800c6a4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	3308      	adds	r3, #8
 800c6dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6de:	6a3b      	ldr	r3, [r7, #32]
 800c6e0:	e853 3f00 	ldrex	r3, [r3]
 800c6e4:	61fb      	str	r3, [r7, #28]
   return(result);
 800c6e6:	69fb      	ldr	r3, [r7, #28]
 800c6e8:	f023 0301 	bic.w	r3, r3, #1
 800c6ec:	64bb      	str	r3, [r7, #72]	; 0x48
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	3308      	adds	r3, #8
 800c6f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c6f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c6f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c6fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6fe:	e841 2300 	strex	r3, r2, [r1]
 800c702:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c706:	2b00      	cmp	r3, #0
 800c708:	d1e5      	bne.n	800c6d6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2220      	movs	r2, #32
 800c70e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2200      	movs	r2, #0
 800c716:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c71c:	2b01      	cmp	r3, #1
 800c71e:	d12e      	bne.n	800c77e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2200      	movs	r2, #0
 800c724:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	e853 3f00 	ldrex	r3, [r3]
 800c732:	60bb      	str	r3, [r7, #8]
   return(result);
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	f023 0310 	bic.w	r3, r3, #16
 800c73a:	647b      	str	r3, [r7, #68]	; 0x44
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	461a      	mov	r2, r3
 800c742:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c744:	61bb      	str	r3, [r7, #24]
 800c746:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c748:	6979      	ldr	r1, [r7, #20]
 800c74a:	69ba      	ldr	r2, [r7, #24]
 800c74c:	e841 2300 	strex	r3, r2, [r1]
 800c750:	613b      	str	r3, [r7, #16]
   return(result);
 800c752:	693b      	ldr	r3, [r7, #16]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d1e6      	bne.n	800c726 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	69db      	ldr	r3, [r3, #28]
 800c75e:	f003 0310 	and.w	r3, r3, #16
 800c762:	2b10      	cmp	r3, #16
 800c764:	d103      	bne.n	800c76e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	2210      	movs	r2, #16
 800c76c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c774:	4619      	mov	r1, r3
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f7ff f822 	bl	800b7c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c77c:	e00b      	b.n	800c796 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f7ff f80a 	bl	800b798 <HAL_UART_RxCpltCallback>
}
 800c784:	e007      	b.n	800c796 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	699a      	ldr	r2, [r3, #24]
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	f042 0208 	orr.w	r2, r2, #8
 800c794:	619a      	str	r2, [r3, #24]
}
 800c796:	bf00      	nop
 800c798:	3758      	adds	r7, #88	; 0x58
 800c79a:	46bd      	mov	sp, r7
 800c79c:	bd80      	pop	{r7, pc}
	...

0800c7a0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b0a6      	sub	sp, #152	; 0x98
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c7ae:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	69db      	ldr	r3, [r3, #28]
 800c7b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	689b      	ldr	r3, [r3, #8]
 800c7cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7d6:	2b22      	cmp	r3, #34	; 0x22
 800c7d8:	f040 814f 	bne.w	800ca7a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c7e2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c7e6:	e0f6      	b.n	800c9d6 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7ee:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c7f2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800c7f6:	b2d9      	uxtb	r1, r3
 800c7f8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800c7fc:	b2da      	uxtb	r2, r3
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c802:	400a      	ands	r2, r1
 800c804:	b2d2      	uxtb	r2, r2
 800c806:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c80c:	1c5a      	adds	r2, r3, #1
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c818:	b29b      	uxth	r3, r3
 800c81a:	3b01      	subs	r3, #1
 800c81c:	b29a      	uxth	r2, r3
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	69db      	ldr	r3, [r3, #28]
 800c82a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c82e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c832:	f003 0307 	and.w	r3, r3, #7
 800c836:	2b00      	cmp	r3, #0
 800c838:	d053      	beq.n	800c8e2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c83a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c83e:	f003 0301 	and.w	r3, r3, #1
 800c842:	2b00      	cmp	r3, #0
 800c844:	d011      	beq.n	800c86a <UART_RxISR_8BIT_FIFOEN+0xca>
 800c846:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c84a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d00b      	beq.n	800c86a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	2201      	movs	r2, #1
 800c858:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c860:	f043 0201 	orr.w	r2, r3, #1
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c86a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c86e:	f003 0302 	and.w	r3, r3, #2
 800c872:	2b00      	cmp	r3, #0
 800c874:	d011      	beq.n	800c89a <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c876:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c87a:	f003 0301 	and.w	r3, r3, #1
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d00b      	beq.n	800c89a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	2202      	movs	r2, #2
 800c888:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c890:	f043 0204 	orr.w	r2, r3, #4
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c89a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c89e:	f003 0304 	and.w	r3, r3, #4
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d011      	beq.n	800c8ca <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c8a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c8aa:	f003 0301 	and.w	r3, r3, #1
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d00b      	beq.n	800c8ca <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	2204      	movs	r2, #4
 800c8b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8c0:	f043 0202 	orr.w	r2, r3, #2
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d006      	beq.n	800c8e2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c8d4:	6878      	ldr	r0, [r7, #4]
 800c8d6:	f7fe ff69 	bl	800b7ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2200      	movs	r2, #0
 800c8de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c8e8:	b29b      	uxth	r3, r3
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d173      	bne.n	800c9d6 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c8f6:	e853 3f00 	ldrex	r3, [r3]
 800c8fa:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800c8fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c8fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c902:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	461a      	mov	r2, r3
 800c90c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c910:	66bb      	str	r3, [r7, #104]	; 0x68
 800c912:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c914:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c916:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c918:	e841 2300 	strex	r3, r2, [r1]
 800c91c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c91e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c920:	2b00      	cmp	r3, #0
 800c922:	d1e4      	bne.n	800c8ee <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	3308      	adds	r3, #8
 800c92a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c92c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c92e:	e853 3f00 	ldrex	r3, [r3]
 800c932:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c934:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c936:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c93a:	f023 0301 	bic.w	r3, r3, #1
 800c93e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	3308      	adds	r3, #8
 800c946:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c948:	657a      	str	r2, [r7, #84]	; 0x54
 800c94a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c94c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c94e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c950:	e841 2300 	strex	r3, r2, [r1]
 800c954:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d1e3      	bne.n	800c924 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2220      	movs	r2, #32
 800c960:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2200      	movs	r2, #0
 800c968:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c96e:	2b01      	cmp	r3, #1
 800c970:	d12e      	bne.n	800c9d0 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2200      	movs	r2, #0
 800c976:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c97e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c980:	e853 3f00 	ldrex	r3, [r3]
 800c984:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c988:	f023 0310 	bic.w	r3, r3, #16
 800c98c:	67bb      	str	r3, [r7, #120]	; 0x78
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	461a      	mov	r2, r3
 800c994:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c996:	643b      	str	r3, [r7, #64]	; 0x40
 800c998:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c99a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c99c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c99e:	e841 2300 	strex	r3, r2, [r1]
 800c9a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d1e6      	bne.n	800c978 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	69db      	ldr	r3, [r3, #28]
 800c9b0:	f003 0310 	and.w	r3, r3, #16
 800c9b4:	2b10      	cmp	r3, #16
 800c9b6:	d103      	bne.n	800c9c0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	2210      	movs	r2, #16
 800c9be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c9c6:	4619      	mov	r1, r3
 800c9c8:	6878      	ldr	r0, [r7, #4]
 800c9ca:	f7fe fef9 	bl	800b7c0 <HAL_UARTEx_RxEventCallback>
 800c9ce:	e002      	b.n	800c9d6 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c9d0:	6878      	ldr	r0, [r7, #4]
 800c9d2:	f7fe fee1 	bl	800b798 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c9d6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d006      	beq.n	800c9ec <UART_RxISR_8BIT_FIFOEN+0x24c>
 800c9de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c9e2:	f003 0320 	and.w	r3, r3, #32
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	f47f aefe 	bne.w	800c7e8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c9f2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c9f6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d045      	beq.n	800ca8a <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ca04:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ca08:	429a      	cmp	r2, r3
 800ca0a:	d23e      	bcs.n	800ca8a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	3308      	adds	r3, #8
 800ca12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca14:	6a3b      	ldr	r3, [r7, #32]
 800ca16:	e853 3f00 	ldrex	r3, [r3]
 800ca1a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ca1c:	69fb      	ldr	r3, [r7, #28]
 800ca1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ca22:	673b      	str	r3, [r7, #112]	; 0x70
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	3308      	adds	r3, #8
 800ca2a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ca2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ca2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ca32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca34:	e841 2300 	strex	r3, r2, [r1]
 800ca38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ca3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d1e5      	bne.n	800ca0c <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	4a14      	ldr	r2, [pc, #80]	; (800ca94 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800ca44:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	e853 3f00 	ldrex	r3, [r3]
 800ca52:	60bb      	str	r3, [r7, #8]
   return(result);
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	f043 0320 	orr.w	r3, r3, #32
 800ca5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	461a      	mov	r2, r3
 800ca62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ca64:	61bb      	str	r3, [r7, #24]
 800ca66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca68:	6979      	ldr	r1, [r7, #20]
 800ca6a:	69ba      	ldr	r2, [r7, #24]
 800ca6c:	e841 2300 	strex	r3, r2, [r1]
 800ca70:	613b      	str	r3, [r7, #16]
   return(result);
 800ca72:	693b      	ldr	r3, [r7, #16]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d1e6      	bne.n	800ca46 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ca78:	e007      	b.n	800ca8a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	699a      	ldr	r2, [r3, #24]
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	f042 0208 	orr.w	r2, r2, #8
 800ca88:	619a      	str	r2, [r3, #24]
}
 800ca8a:	bf00      	nop
 800ca8c:	3798      	adds	r7, #152	; 0x98
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}
 800ca92:	bf00      	nop
 800ca94:	0800c4df 	.word	0x0800c4df

0800ca98 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b0a8      	sub	sp, #160	; 0xa0
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800caa6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	69db      	ldr	r3, [r3, #28]
 800cab0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	689b      	ldr	r3, [r3, #8]
 800cac4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cace:	2b22      	cmp	r3, #34	; 0x22
 800cad0:	f040 8153 	bne.w	800cd7a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cada:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cade:	e0fa      	b.n	800ccd6 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cae6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800caee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800caf2:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800caf6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800cafa:	4013      	ands	r3, r2
 800cafc:	b29a      	uxth	r2, r3
 800cafe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cb02:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb08:	1c9a      	adds	r2, r3, #2
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cb14:	b29b      	uxth	r3, r3
 800cb16:	3b01      	subs	r3, #1
 800cb18:	b29a      	uxth	r2, r3
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	69db      	ldr	r3, [r3, #28]
 800cb26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800cb2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cb2e:	f003 0307 	and.w	r3, r3, #7
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d053      	beq.n	800cbde <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cb36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cb3a:	f003 0301 	and.w	r3, r3, #1
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d011      	beq.n	800cb66 <UART_RxISR_16BIT_FIFOEN+0xce>
 800cb42:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cb46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d00b      	beq.n	800cb66 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	2201      	movs	r2, #1
 800cb54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb5c:	f043 0201 	orr.w	r2, r3, #1
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cb66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cb6a:	f003 0302 	and.w	r3, r3, #2
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d011      	beq.n	800cb96 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800cb72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cb76:	f003 0301 	and.w	r3, r3, #1
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d00b      	beq.n	800cb96 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	2202      	movs	r2, #2
 800cb84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb8c:	f043 0204 	orr.w	r2, r3, #4
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cb96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cb9a:	f003 0304 	and.w	r3, r3, #4
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d011      	beq.n	800cbc6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800cba2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cba6:	f003 0301 	and.w	r3, r3, #1
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d00b      	beq.n	800cbc6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	2204      	movs	r2, #4
 800cbb4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbbc:	f043 0202 	orr.w	r2, r3, #2
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d006      	beq.n	800cbde <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f7fe fdeb 	bl	800b7ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2200      	movs	r2, #0
 800cbda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cbe4:	b29b      	uxth	r3, r3
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d175      	bne.n	800ccd6 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbf0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cbf2:	e853 3f00 	ldrex	r3, [r3]
 800cbf6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800cbf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cbfa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cbfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	461a      	mov	r2, r3
 800cc08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cc0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cc0e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc10:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cc12:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cc14:	e841 2300 	strex	r3, r2, [r1]
 800cc18:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800cc1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d1e4      	bne.n	800cbea <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	3308      	adds	r3, #8
 800cc26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc2a:	e853 3f00 	ldrex	r3, [r3]
 800cc2e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cc30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cc36:	f023 0301 	bic.w	r3, r3, #1
 800cc3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	3308      	adds	r3, #8
 800cc44:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cc48:	65ba      	str	r2, [r7, #88]	; 0x58
 800cc4a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cc4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cc50:	e841 2300 	strex	r3, r2, [r1]
 800cc54:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cc56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d1e1      	bne.n	800cc20 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2220      	movs	r2, #32
 800cc60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2200      	movs	r2, #0
 800cc68:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc6e:	2b01      	cmp	r3, #1
 800cc70:	d12e      	bne.n	800ccd0 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2200      	movs	r2, #0
 800cc76:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc80:	e853 3f00 	ldrex	r3, [r3]
 800cc84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cc86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc88:	f023 0310 	bic.w	r3, r3, #16
 800cc8c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	461a      	mov	r2, r3
 800cc94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cc96:	647b      	str	r3, [r7, #68]	; 0x44
 800cc98:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cc9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cc9e:	e841 2300 	strex	r3, r2, [r1]
 800cca2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d1e6      	bne.n	800cc78 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	69db      	ldr	r3, [r3, #28]
 800ccb0:	f003 0310 	and.w	r3, r3, #16
 800ccb4:	2b10      	cmp	r3, #16
 800ccb6:	d103      	bne.n	800ccc0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	2210      	movs	r2, #16
 800ccbe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ccc6:	4619      	mov	r1, r3
 800ccc8:	6878      	ldr	r0, [r7, #4]
 800ccca:	f7fe fd79 	bl	800b7c0 <HAL_UARTEx_RxEventCallback>
 800ccce:	e002      	b.n	800ccd6 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ccd0:	6878      	ldr	r0, [r7, #4]
 800ccd2:	f7fe fd61 	bl	800b798 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ccd6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d006      	beq.n	800ccec <UART_RxISR_16BIT_FIFOEN+0x254>
 800ccde:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cce2:	f003 0320 	and.w	r3, r3, #32
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	f47f aefa 	bne.w	800cae0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ccf2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ccf6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d045      	beq.n	800cd8a <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cd04:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800cd08:	429a      	cmp	r2, r3
 800cd0a:	d23e      	bcs.n	800cd8a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	3308      	adds	r3, #8
 800cd12:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd16:	e853 3f00 	ldrex	r3, [r3]
 800cd1a:	623b      	str	r3, [r7, #32]
   return(result);
 800cd1c:	6a3b      	ldr	r3, [r7, #32]
 800cd1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cd22:	677b      	str	r3, [r7, #116]	; 0x74
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	3308      	adds	r3, #8
 800cd2a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800cd2c:	633a      	str	r2, [r7, #48]	; 0x30
 800cd2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cd32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd34:	e841 2300 	strex	r3, r2, [r1]
 800cd38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cd3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d1e5      	bne.n	800cd0c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	4a14      	ldr	r2, [pc, #80]	; (800cd94 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800cd44:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd4c:	693b      	ldr	r3, [r7, #16]
 800cd4e:	e853 3f00 	ldrex	r3, [r3]
 800cd52:	60fb      	str	r3, [r7, #12]
   return(result);
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	f043 0320 	orr.w	r3, r3, #32
 800cd5a:	673b      	str	r3, [r7, #112]	; 0x70
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	461a      	mov	r2, r3
 800cd62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cd64:	61fb      	str	r3, [r7, #28]
 800cd66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd68:	69b9      	ldr	r1, [r7, #24]
 800cd6a:	69fa      	ldr	r2, [r7, #28]
 800cd6c:	e841 2300 	strex	r3, r2, [r1]
 800cd70:	617b      	str	r3, [r7, #20]
   return(result);
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d1e6      	bne.n	800cd46 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cd78:	e007      	b.n	800cd8a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	699a      	ldr	r2, [r3, #24]
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	f042 0208 	orr.w	r2, r2, #8
 800cd88:	619a      	str	r2, [r3, #24]
}
 800cd8a:	bf00      	nop
 800cd8c:	37a0      	adds	r7, #160	; 0xa0
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	bd80      	pop	{r7, pc}
 800cd92:	bf00      	nop
 800cd94:	0800c63f 	.word	0x0800c63f

0800cd98 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cd98:	b480      	push	{r7}
 800cd9a:	b083      	sub	sp, #12
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cda0:	bf00      	nop
 800cda2:	370c      	adds	r7, #12
 800cda4:	46bd      	mov	sp, r7
 800cda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdaa:	4770      	bx	lr

0800cdac <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cdac:	b480      	push	{r7}
 800cdae:	b083      	sub	sp, #12
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cdb4:	bf00      	nop
 800cdb6:	370c      	adds	r7, #12
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbe:	4770      	bx	lr

0800cdc0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b083      	sub	sp, #12
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cdc8:	bf00      	nop
 800cdca:	370c      	adds	r7, #12
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd2:	4770      	bx	lr

0800cdd4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b085      	sub	sp, #20
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cde2:	2b01      	cmp	r3, #1
 800cde4:	d101      	bne.n	800cdea <HAL_UARTEx_DisableFifoMode+0x16>
 800cde6:	2302      	movs	r3, #2
 800cde8:	e027      	b.n	800ce3a <HAL_UARTEx_DisableFifoMode+0x66>
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2201      	movs	r2, #1
 800cdee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2224      	movs	r2, #36	; 0x24
 800cdf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	681a      	ldr	r2, [r3, #0]
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	f022 0201 	bic.w	r2, r2, #1
 800ce10:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ce18:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	68fa      	ldr	r2, [r7, #12]
 800ce26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2220      	movs	r2, #32
 800ce2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2200      	movs	r2, #0
 800ce34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ce38:	2300      	movs	r3, #0
}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	3714      	adds	r7, #20
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce44:	4770      	bx	lr

0800ce46 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ce46:	b580      	push	{r7, lr}
 800ce48:	b084      	sub	sp, #16
 800ce4a:	af00      	add	r7, sp, #0
 800ce4c:	6078      	str	r0, [r7, #4]
 800ce4e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ce56:	2b01      	cmp	r3, #1
 800ce58:	d101      	bne.n	800ce5e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ce5a:	2302      	movs	r3, #2
 800ce5c:	e02d      	b.n	800ceba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	2201      	movs	r2, #1
 800ce62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2224      	movs	r2, #36	; 0x24
 800ce6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	681a      	ldr	r2, [r3, #0]
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	f022 0201 	bic.w	r2, r2, #1
 800ce84:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	689b      	ldr	r3, [r3, #8]
 800ce8c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	683a      	ldr	r2, [r7, #0]
 800ce96:	430a      	orrs	r2, r1
 800ce98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ce9a:	6878      	ldr	r0, [r7, #4]
 800ce9c:	f000 f850 	bl	800cf40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	68fa      	ldr	r2, [r7, #12]
 800cea6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	2220      	movs	r2, #32
 800ceac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ceb8:	2300      	movs	r3, #0
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	3710      	adds	r7, #16
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}

0800cec2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cec2:	b580      	push	{r7, lr}
 800cec4:	b084      	sub	sp, #16
 800cec6:	af00      	add	r7, sp, #0
 800cec8:	6078      	str	r0, [r7, #4]
 800ceca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ced2:	2b01      	cmp	r3, #1
 800ced4:	d101      	bne.n	800ceda <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ced6:	2302      	movs	r3, #2
 800ced8:	e02d      	b.n	800cf36 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2201      	movs	r2, #1
 800cede:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2224      	movs	r2, #36	; 0x24
 800cee6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	681a      	ldr	r2, [r3, #0]
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	f022 0201 	bic.w	r2, r2, #1
 800cf00:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	689b      	ldr	r3, [r3, #8]
 800cf08:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	683a      	ldr	r2, [r7, #0]
 800cf12:	430a      	orrs	r2, r1
 800cf14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cf16:	6878      	ldr	r0, [r7, #4]
 800cf18:	f000 f812 	bl	800cf40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	68fa      	ldr	r2, [r7, #12]
 800cf22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2220      	movs	r2, #32
 800cf28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2200      	movs	r2, #0
 800cf30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cf34:	2300      	movs	r3, #0
}
 800cf36:	4618      	mov	r0, r3
 800cf38:	3710      	adds	r7, #16
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd80      	pop	{r7, pc}
	...

0800cf40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cf40:	b480      	push	{r7}
 800cf42:	b085      	sub	sp, #20
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d108      	bne.n	800cf62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2201      	movs	r2, #1
 800cf54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2201      	movs	r2, #1
 800cf5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cf60:	e031      	b.n	800cfc6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cf62:	2308      	movs	r3, #8
 800cf64:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cf66:	2308      	movs	r3, #8
 800cf68:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	689b      	ldr	r3, [r3, #8]
 800cf70:	0e5b      	lsrs	r3, r3, #25
 800cf72:	b2db      	uxtb	r3, r3
 800cf74:	f003 0307 	and.w	r3, r3, #7
 800cf78:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	689b      	ldr	r3, [r3, #8]
 800cf80:	0f5b      	lsrs	r3, r3, #29
 800cf82:	b2db      	uxtb	r3, r3
 800cf84:	f003 0307 	and.w	r3, r3, #7
 800cf88:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cf8a:	7bbb      	ldrb	r3, [r7, #14]
 800cf8c:	7b3a      	ldrb	r2, [r7, #12]
 800cf8e:	4911      	ldr	r1, [pc, #68]	; (800cfd4 <UARTEx_SetNbDataToProcess+0x94>)
 800cf90:	5c8a      	ldrb	r2, [r1, r2]
 800cf92:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cf96:	7b3a      	ldrb	r2, [r7, #12]
 800cf98:	490f      	ldr	r1, [pc, #60]	; (800cfd8 <UARTEx_SetNbDataToProcess+0x98>)
 800cf9a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cf9c:	fb93 f3f2 	sdiv	r3, r3, r2
 800cfa0:	b29a      	uxth	r2, r3
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cfa8:	7bfb      	ldrb	r3, [r7, #15]
 800cfaa:	7b7a      	ldrb	r2, [r7, #13]
 800cfac:	4909      	ldr	r1, [pc, #36]	; (800cfd4 <UARTEx_SetNbDataToProcess+0x94>)
 800cfae:	5c8a      	ldrb	r2, [r1, r2]
 800cfb0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cfb4:	7b7a      	ldrb	r2, [r7, #13]
 800cfb6:	4908      	ldr	r1, [pc, #32]	; (800cfd8 <UARTEx_SetNbDataToProcess+0x98>)
 800cfb8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cfba:	fb93 f3f2 	sdiv	r3, r3, r2
 800cfbe:	b29a      	uxth	r2, r3
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cfc6:	bf00      	nop
 800cfc8:	3714      	adds	r7, #20
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd0:	4770      	bx	lr
 800cfd2:	bf00      	nop
 800cfd4:	08014c24 	.word	0x08014c24
 800cfd8:	08014c2c 	.word	0x08014c2c

0800cfdc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800cfdc:	b480      	push	{r7}
 800cfde:	b085      	sub	sp, #20
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800cfec:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800cff0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	b29a      	uxth	r2, r3
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800cffc:	2300      	movs	r3, #0
}
 800cffe:	4618      	mov	r0, r3
 800d000:	3714      	adds	r7, #20
 800d002:	46bd      	mov	sp, r7
 800d004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d008:	4770      	bx	lr

0800d00a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800d00a:	b480      	push	{r7}
 800d00c:	b085      	sub	sp, #20
 800d00e:	af00      	add	r7, sp, #0
 800d010:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800d012:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800d016:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800d01e:	b29a      	uxth	r2, r3
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	b29b      	uxth	r3, r3
 800d024:	43db      	mvns	r3, r3
 800d026:	b29b      	uxth	r3, r3
 800d028:	4013      	ands	r3, r2
 800d02a:	b29a      	uxth	r2, r3
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d032:	2300      	movs	r3, #0
}
 800d034:	4618      	mov	r0, r3
 800d036:	3714      	adds	r7, #20
 800d038:	46bd      	mov	sp, r7
 800d03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03e:	4770      	bx	lr

0800d040 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800d040:	b084      	sub	sp, #16
 800d042:	b480      	push	{r7}
 800d044:	b083      	sub	sp, #12
 800d046:	af00      	add	r7, sp, #0
 800d048:	6078      	str	r0, [r7, #4]
 800d04a:	f107 0014 	add.w	r0, r7, #20
 800d04e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2201      	movs	r2, #1
 800d056:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2200      	movs	r2, #0
 800d05e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	2200      	movs	r2, #0
 800d066:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	2200      	movs	r2, #0
 800d06e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800d072:	2300      	movs	r3, #0
}
 800d074:	4618      	mov	r0, r3
 800d076:	370c      	adds	r7, #12
 800d078:	46bd      	mov	sp, r7
 800d07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07e:	b004      	add	sp, #16
 800d080:	4770      	bx	lr
	...

0800d084 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d084:	b480      	push	{r7}
 800d086:	b09d      	sub	sp, #116	; 0x74
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
 800d08c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800d08e:	2300      	movs	r3, #0
 800d090:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800d094:	687a      	ldr	r2, [r7, #4]
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	781b      	ldrb	r3, [r3, #0]
 800d09a:	009b      	lsls	r3, r3, #2
 800d09c:	4413      	add	r3, r2
 800d09e:	881b      	ldrh	r3, [r3, #0]
 800d0a0:	b29b      	uxth	r3, r3
 800d0a2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800d0a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d0aa:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	78db      	ldrb	r3, [r3, #3]
 800d0b2:	2b03      	cmp	r3, #3
 800d0b4:	d81f      	bhi.n	800d0f6 <USB_ActivateEndpoint+0x72>
 800d0b6:	a201      	add	r2, pc, #4	; (adr r2, 800d0bc <USB_ActivateEndpoint+0x38>)
 800d0b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0bc:	0800d0cd 	.word	0x0800d0cd
 800d0c0:	0800d0e9 	.word	0x0800d0e9
 800d0c4:	0800d0ff 	.word	0x0800d0ff
 800d0c8:	0800d0db 	.word	0x0800d0db
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800d0cc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d0d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d0d4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800d0d8:	e012      	b.n	800d100 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800d0da:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d0de:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800d0e2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800d0e6:	e00b      	b.n	800d100 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800d0e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d0ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d0f0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800d0f4:	e004      	b.n	800d100 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800d0f6:	2301      	movs	r3, #1
 800d0f8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800d0fc:	e000      	b.n	800d100 <USB_ActivateEndpoint+0x7c>
      break;
 800d0fe:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800d100:	687a      	ldr	r2, [r7, #4]
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	781b      	ldrb	r3, [r3, #0]
 800d106:	009b      	lsls	r3, r3, #2
 800d108:	441a      	add	r2, r3
 800d10a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d10e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d112:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d116:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d11a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d11e:	b29b      	uxth	r3, r3
 800d120:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800d122:	687a      	ldr	r2, [r7, #4]
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	781b      	ldrb	r3, [r3, #0]
 800d128:	009b      	lsls	r3, r3, #2
 800d12a:	4413      	add	r3, r2
 800d12c:	881b      	ldrh	r3, [r3, #0]
 800d12e:	b29b      	uxth	r3, r3
 800d130:	b21b      	sxth	r3, r3
 800d132:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d13a:	b21a      	sxth	r2, r3
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	781b      	ldrb	r3, [r3, #0]
 800d140:	b21b      	sxth	r3, r3
 800d142:	4313      	orrs	r3, r2
 800d144:	b21b      	sxth	r3, r3
 800d146:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800d14a:	687a      	ldr	r2, [r7, #4]
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	781b      	ldrb	r3, [r3, #0]
 800d150:	009b      	lsls	r3, r3, #2
 800d152:	441a      	add	r2, r3
 800d154:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800d158:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d15c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d160:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d168:	b29b      	uxth	r3, r3
 800d16a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	7b1b      	ldrb	r3, [r3, #12]
 800d170:	2b00      	cmp	r3, #0
 800d172:	f040 8149 	bne.w	800d408 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	785b      	ldrb	r3, [r3, #1]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	f000 8084 	beq.w	800d288 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	61bb      	str	r3, [r7, #24]
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d18a:	b29b      	uxth	r3, r3
 800d18c:	461a      	mov	r2, r3
 800d18e:	69bb      	ldr	r3, [r7, #24]
 800d190:	4413      	add	r3, r2
 800d192:	61bb      	str	r3, [r7, #24]
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	781b      	ldrb	r3, [r3, #0]
 800d198:	00da      	lsls	r2, r3, #3
 800d19a:	69bb      	ldr	r3, [r7, #24]
 800d19c:	4413      	add	r3, r2
 800d19e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d1a2:	617b      	str	r3, [r7, #20]
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	88db      	ldrh	r3, [r3, #6]
 800d1a8:	085b      	lsrs	r3, r3, #1
 800d1aa:	b29b      	uxth	r3, r3
 800d1ac:	005b      	lsls	r3, r3, #1
 800d1ae:	b29a      	uxth	r2, r3
 800d1b0:	697b      	ldr	r3, [r7, #20]
 800d1b2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d1b4:	687a      	ldr	r2, [r7, #4]
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	781b      	ldrb	r3, [r3, #0]
 800d1ba:	009b      	lsls	r3, r3, #2
 800d1bc:	4413      	add	r3, r2
 800d1be:	881b      	ldrh	r3, [r3, #0]
 800d1c0:	827b      	strh	r3, [r7, #18]
 800d1c2:	8a7b      	ldrh	r3, [r7, #18]
 800d1c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d01b      	beq.n	800d204 <USB_ActivateEndpoint+0x180>
 800d1cc:	687a      	ldr	r2, [r7, #4]
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	781b      	ldrb	r3, [r3, #0]
 800d1d2:	009b      	lsls	r3, r3, #2
 800d1d4:	4413      	add	r3, r2
 800d1d6:	881b      	ldrh	r3, [r3, #0]
 800d1d8:	b29b      	uxth	r3, r3
 800d1da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d1de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d1e2:	823b      	strh	r3, [r7, #16]
 800d1e4:	687a      	ldr	r2, [r7, #4]
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	781b      	ldrb	r3, [r3, #0]
 800d1ea:	009b      	lsls	r3, r3, #2
 800d1ec:	441a      	add	r2, r3
 800d1ee:	8a3b      	ldrh	r3, [r7, #16]
 800d1f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d1f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d1f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d1fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d200:	b29b      	uxth	r3, r3
 800d202:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	78db      	ldrb	r3, [r3, #3]
 800d208:	2b01      	cmp	r3, #1
 800d20a:	d020      	beq.n	800d24e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d20c:	687a      	ldr	r2, [r7, #4]
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	781b      	ldrb	r3, [r3, #0]
 800d212:	009b      	lsls	r3, r3, #2
 800d214:	4413      	add	r3, r2
 800d216:	881b      	ldrh	r3, [r3, #0]
 800d218:	b29b      	uxth	r3, r3
 800d21a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d21e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d222:	81bb      	strh	r3, [r7, #12]
 800d224:	89bb      	ldrh	r3, [r7, #12]
 800d226:	f083 0320 	eor.w	r3, r3, #32
 800d22a:	81bb      	strh	r3, [r7, #12]
 800d22c:	687a      	ldr	r2, [r7, #4]
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	781b      	ldrb	r3, [r3, #0]
 800d232:	009b      	lsls	r3, r3, #2
 800d234:	441a      	add	r2, r3
 800d236:	89bb      	ldrh	r3, [r7, #12]
 800d238:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d23c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d240:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d248:	b29b      	uxth	r3, r3
 800d24a:	8013      	strh	r3, [r2, #0]
 800d24c:	e2a6      	b.n	800d79c <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d24e:	687a      	ldr	r2, [r7, #4]
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	781b      	ldrb	r3, [r3, #0]
 800d254:	009b      	lsls	r3, r3, #2
 800d256:	4413      	add	r3, r2
 800d258:	881b      	ldrh	r3, [r3, #0]
 800d25a:	b29b      	uxth	r3, r3
 800d25c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d260:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d264:	81fb      	strh	r3, [r7, #14]
 800d266:	687a      	ldr	r2, [r7, #4]
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	781b      	ldrb	r3, [r3, #0]
 800d26c:	009b      	lsls	r3, r3, #2
 800d26e:	441a      	add	r2, r3
 800d270:	89fb      	ldrh	r3, [r7, #14]
 800d272:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d276:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d27a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d27e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d282:	b29b      	uxth	r3, r3
 800d284:	8013      	strh	r3, [r2, #0]
 800d286:	e289      	b.n	800d79c <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	633b      	str	r3, [r7, #48]	; 0x30
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d292:	b29b      	uxth	r3, r3
 800d294:	461a      	mov	r2, r3
 800d296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d298:	4413      	add	r3, r2
 800d29a:	633b      	str	r3, [r7, #48]	; 0x30
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	781b      	ldrb	r3, [r3, #0]
 800d2a0:	00da      	lsls	r2, r3, #3
 800d2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a4:	4413      	add	r3, r2
 800d2a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d2aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	88db      	ldrh	r3, [r3, #6]
 800d2b0:	085b      	lsrs	r3, r3, #1
 800d2b2:	b29b      	uxth	r3, r3
 800d2b4:	005b      	lsls	r3, r3, #1
 800d2b6:	b29a      	uxth	r2, r3
 800d2b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ba:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	62bb      	str	r3, [r7, #40]	; 0x28
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d2c6:	b29b      	uxth	r3, r3
 800d2c8:	461a      	mov	r2, r3
 800d2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2cc:	4413      	add	r3, r2
 800d2ce:	62bb      	str	r3, [r7, #40]	; 0x28
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	781b      	ldrb	r3, [r3, #0]
 800d2d4:	00da      	lsls	r2, r3, #3
 800d2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2d8:	4413      	add	r3, r2
 800d2da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d2de:	627b      	str	r3, [r7, #36]	; 0x24
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	691b      	ldr	r3, [r3, #16]
 800d2e4:	2b3e      	cmp	r3, #62	; 0x3e
 800d2e6:	d918      	bls.n	800d31a <USB_ActivateEndpoint+0x296>
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	691b      	ldr	r3, [r3, #16]
 800d2ec:	095b      	lsrs	r3, r3, #5
 800d2ee:	66bb      	str	r3, [r7, #104]	; 0x68
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	691b      	ldr	r3, [r3, #16]
 800d2f4:	f003 031f 	and.w	r3, r3, #31
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d102      	bne.n	800d302 <USB_ActivateEndpoint+0x27e>
 800d2fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d2fe:	3b01      	subs	r3, #1
 800d300:	66bb      	str	r3, [r7, #104]	; 0x68
 800d302:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d304:	b29b      	uxth	r3, r3
 800d306:	029b      	lsls	r3, r3, #10
 800d308:	b29b      	uxth	r3, r3
 800d30a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d30e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d312:	b29a      	uxth	r2, r3
 800d314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d316:	801a      	strh	r2, [r3, #0]
 800d318:	e029      	b.n	800d36e <USB_ActivateEndpoint+0x2ea>
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	691b      	ldr	r3, [r3, #16]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d112      	bne.n	800d348 <USB_ActivateEndpoint+0x2c4>
 800d322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d324:	881b      	ldrh	r3, [r3, #0]
 800d326:	b29b      	uxth	r3, r3
 800d328:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d32c:	b29a      	uxth	r2, r3
 800d32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d330:	801a      	strh	r2, [r3, #0]
 800d332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d334:	881b      	ldrh	r3, [r3, #0]
 800d336:	b29b      	uxth	r3, r3
 800d338:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d33c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d340:	b29a      	uxth	r2, r3
 800d342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d344:	801a      	strh	r2, [r3, #0]
 800d346:	e012      	b.n	800d36e <USB_ActivateEndpoint+0x2ea>
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	691b      	ldr	r3, [r3, #16]
 800d34c:	085b      	lsrs	r3, r3, #1
 800d34e:	66bb      	str	r3, [r7, #104]	; 0x68
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	691b      	ldr	r3, [r3, #16]
 800d354:	f003 0301 	and.w	r3, r3, #1
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d002      	beq.n	800d362 <USB_ActivateEndpoint+0x2de>
 800d35c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d35e:	3301      	adds	r3, #1
 800d360:	66bb      	str	r3, [r7, #104]	; 0x68
 800d362:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d364:	b29b      	uxth	r3, r3
 800d366:	029b      	lsls	r3, r3, #10
 800d368:	b29a      	uxth	r2, r3
 800d36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d36c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d36e:	687a      	ldr	r2, [r7, #4]
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	781b      	ldrb	r3, [r3, #0]
 800d374:	009b      	lsls	r3, r3, #2
 800d376:	4413      	add	r3, r2
 800d378:	881b      	ldrh	r3, [r3, #0]
 800d37a:	847b      	strh	r3, [r7, #34]	; 0x22
 800d37c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d37e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d382:	2b00      	cmp	r3, #0
 800d384:	d01b      	beq.n	800d3be <USB_ActivateEndpoint+0x33a>
 800d386:	687a      	ldr	r2, [r7, #4]
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	781b      	ldrb	r3, [r3, #0]
 800d38c:	009b      	lsls	r3, r3, #2
 800d38e:	4413      	add	r3, r2
 800d390:	881b      	ldrh	r3, [r3, #0]
 800d392:	b29b      	uxth	r3, r3
 800d394:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d398:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d39c:	843b      	strh	r3, [r7, #32]
 800d39e:	687a      	ldr	r2, [r7, #4]
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	781b      	ldrb	r3, [r3, #0]
 800d3a4:	009b      	lsls	r3, r3, #2
 800d3a6:	441a      	add	r2, r3
 800d3a8:	8c3b      	ldrh	r3, [r7, #32]
 800d3aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d3ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d3b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d3b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3ba:	b29b      	uxth	r3, r3
 800d3bc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d3be:	687a      	ldr	r2, [r7, #4]
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	781b      	ldrb	r3, [r3, #0]
 800d3c4:	009b      	lsls	r3, r3, #2
 800d3c6:	4413      	add	r3, r2
 800d3c8:	881b      	ldrh	r3, [r3, #0]
 800d3ca:	b29b      	uxth	r3, r3
 800d3cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d3d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d3d4:	83fb      	strh	r3, [r7, #30]
 800d3d6:	8bfb      	ldrh	r3, [r7, #30]
 800d3d8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d3dc:	83fb      	strh	r3, [r7, #30]
 800d3de:	8bfb      	ldrh	r3, [r7, #30]
 800d3e0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d3e4:	83fb      	strh	r3, [r7, #30]
 800d3e6:	687a      	ldr	r2, [r7, #4]
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	781b      	ldrb	r3, [r3, #0]
 800d3ec:	009b      	lsls	r3, r3, #2
 800d3ee:	441a      	add	r2, r3
 800d3f0:	8bfb      	ldrh	r3, [r7, #30]
 800d3f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d3f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d3fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d3fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d402:	b29b      	uxth	r3, r3
 800d404:	8013      	strh	r3, [r2, #0]
 800d406:	e1c9      	b.n	800d79c <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	78db      	ldrb	r3, [r3, #3]
 800d40c:	2b02      	cmp	r3, #2
 800d40e:	d11e      	bne.n	800d44e <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d410:	687a      	ldr	r2, [r7, #4]
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	781b      	ldrb	r3, [r3, #0]
 800d416:	009b      	lsls	r3, r3, #2
 800d418:	4413      	add	r3, r2
 800d41a:	881b      	ldrh	r3, [r3, #0]
 800d41c:	b29b      	uxth	r3, r3
 800d41e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d426:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800d42a:	687a      	ldr	r2, [r7, #4]
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	781b      	ldrb	r3, [r3, #0]
 800d430:	009b      	lsls	r3, r3, #2
 800d432:	441a      	add	r2, r3
 800d434:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800d438:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d43c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d440:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800d444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d448:	b29b      	uxth	r3, r3
 800d44a:	8013      	strh	r3, [r2, #0]
 800d44c:	e01d      	b.n	800d48a <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800d44e:	687a      	ldr	r2, [r7, #4]
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	781b      	ldrb	r3, [r3, #0]
 800d454:	009b      	lsls	r3, r3, #2
 800d456:	4413      	add	r3, r2
 800d458:	881b      	ldrh	r3, [r3, #0]
 800d45a:	b29b      	uxth	r3, r3
 800d45c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800d460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d464:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800d468:	687a      	ldr	r2, [r7, #4]
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	781b      	ldrb	r3, [r3, #0]
 800d46e:	009b      	lsls	r3, r3, #2
 800d470:	441a      	add	r2, r3
 800d472:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800d476:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d47a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d47e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d486:	b29b      	uxth	r3, r3
 800d488:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d494:	b29b      	uxth	r3, r3
 800d496:	461a      	mov	r2, r3
 800d498:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d49a:	4413      	add	r3, r2
 800d49c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	781b      	ldrb	r3, [r3, #0]
 800d4a2:	00da      	lsls	r2, r3, #3
 800d4a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d4a6:	4413      	add	r3, r2
 800d4a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d4ac:	65bb      	str	r3, [r7, #88]	; 0x58
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	891b      	ldrh	r3, [r3, #8]
 800d4b2:	085b      	lsrs	r3, r3, #1
 800d4b4:	b29b      	uxth	r3, r3
 800d4b6:	005b      	lsls	r3, r3, #1
 800d4b8:	b29a      	uxth	r2, r3
 800d4ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d4bc:	801a      	strh	r2, [r3, #0]
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	657b      	str	r3, [r7, #84]	; 0x54
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d4c8:	b29b      	uxth	r3, r3
 800d4ca:	461a      	mov	r2, r3
 800d4cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d4ce:	4413      	add	r3, r2
 800d4d0:	657b      	str	r3, [r7, #84]	; 0x54
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	781b      	ldrb	r3, [r3, #0]
 800d4d6:	00da      	lsls	r2, r3, #3
 800d4d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d4da:	4413      	add	r3, r2
 800d4dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d4e0:	653b      	str	r3, [r7, #80]	; 0x50
 800d4e2:	683b      	ldr	r3, [r7, #0]
 800d4e4:	895b      	ldrh	r3, [r3, #10]
 800d4e6:	085b      	lsrs	r3, r3, #1
 800d4e8:	b29b      	uxth	r3, r3
 800d4ea:	005b      	lsls	r3, r3, #1
 800d4ec:	b29a      	uxth	r2, r3
 800d4ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4f0:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	785b      	ldrb	r3, [r3, #1]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	f040 8093 	bne.w	800d622 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d4fc:	687a      	ldr	r2, [r7, #4]
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	781b      	ldrb	r3, [r3, #0]
 800d502:	009b      	lsls	r3, r3, #2
 800d504:	4413      	add	r3, r2
 800d506:	881b      	ldrh	r3, [r3, #0]
 800d508:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800d50c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d510:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d514:	2b00      	cmp	r3, #0
 800d516:	d01b      	beq.n	800d550 <USB_ActivateEndpoint+0x4cc>
 800d518:	687a      	ldr	r2, [r7, #4]
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	781b      	ldrb	r3, [r3, #0]
 800d51e:	009b      	lsls	r3, r3, #2
 800d520:	4413      	add	r3, r2
 800d522:	881b      	ldrh	r3, [r3, #0]
 800d524:	b29b      	uxth	r3, r3
 800d526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d52a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d52e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800d530:	687a      	ldr	r2, [r7, #4]
 800d532:	683b      	ldr	r3, [r7, #0]
 800d534:	781b      	ldrb	r3, [r3, #0]
 800d536:	009b      	lsls	r3, r3, #2
 800d538:	441a      	add	r2, r3
 800d53a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d53c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d540:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d544:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d54c:	b29b      	uxth	r3, r3
 800d54e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d550:	687a      	ldr	r2, [r7, #4]
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	781b      	ldrb	r3, [r3, #0]
 800d556:	009b      	lsls	r3, r3, #2
 800d558:	4413      	add	r3, r2
 800d55a:	881b      	ldrh	r3, [r3, #0]
 800d55c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800d55e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d564:	2b00      	cmp	r3, #0
 800d566:	d01b      	beq.n	800d5a0 <USB_ActivateEndpoint+0x51c>
 800d568:	687a      	ldr	r2, [r7, #4]
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	781b      	ldrb	r3, [r3, #0]
 800d56e:	009b      	lsls	r3, r3, #2
 800d570:	4413      	add	r3, r2
 800d572:	881b      	ldrh	r3, [r3, #0]
 800d574:	b29b      	uxth	r3, r3
 800d576:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d57a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d57e:	877b      	strh	r3, [r7, #58]	; 0x3a
 800d580:	687a      	ldr	r2, [r7, #4]
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	781b      	ldrb	r3, [r3, #0]
 800d586:	009b      	lsls	r3, r3, #2
 800d588:	441a      	add	r2, r3
 800d58a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d58c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d590:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d594:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d598:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d59c:	b29b      	uxth	r3, r3
 800d59e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d5a0:	687a      	ldr	r2, [r7, #4]
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	781b      	ldrb	r3, [r3, #0]
 800d5a6:	009b      	lsls	r3, r3, #2
 800d5a8:	4413      	add	r3, r2
 800d5aa:	881b      	ldrh	r3, [r3, #0]
 800d5ac:	b29b      	uxth	r3, r3
 800d5ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d5b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d5b6:	873b      	strh	r3, [r7, #56]	; 0x38
 800d5b8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800d5ba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d5be:	873b      	strh	r3, [r7, #56]	; 0x38
 800d5c0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800d5c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d5c6:	873b      	strh	r3, [r7, #56]	; 0x38
 800d5c8:	687a      	ldr	r2, [r7, #4]
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	781b      	ldrb	r3, [r3, #0]
 800d5ce:	009b      	lsls	r3, r3, #2
 800d5d0:	441a      	add	r2, r3
 800d5d2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800d5d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d5d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d5dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d5e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5e4:	b29b      	uxth	r3, r3
 800d5e6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d5e8:	687a      	ldr	r2, [r7, #4]
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	781b      	ldrb	r3, [r3, #0]
 800d5ee:	009b      	lsls	r3, r3, #2
 800d5f0:	4413      	add	r3, r2
 800d5f2:	881b      	ldrh	r3, [r3, #0]
 800d5f4:	b29b      	uxth	r3, r3
 800d5f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d5fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d5fe:	86fb      	strh	r3, [r7, #54]	; 0x36
 800d600:	687a      	ldr	r2, [r7, #4]
 800d602:	683b      	ldr	r3, [r7, #0]
 800d604:	781b      	ldrb	r3, [r3, #0]
 800d606:	009b      	lsls	r3, r3, #2
 800d608:	441a      	add	r2, r3
 800d60a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d60c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d610:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d614:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d61c:	b29b      	uxth	r3, r3
 800d61e:	8013      	strh	r3, [r2, #0]
 800d620:	e0bc      	b.n	800d79c <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d622:	687a      	ldr	r2, [r7, #4]
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	781b      	ldrb	r3, [r3, #0]
 800d628:	009b      	lsls	r3, r3, #2
 800d62a:	4413      	add	r3, r2
 800d62c:	881b      	ldrh	r3, [r3, #0]
 800d62e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800d632:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d01d      	beq.n	800d67a <USB_ActivateEndpoint+0x5f6>
 800d63e:	687a      	ldr	r2, [r7, #4]
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	781b      	ldrb	r3, [r3, #0]
 800d644:	009b      	lsls	r3, r3, #2
 800d646:	4413      	add	r3, r2
 800d648:	881b      	ldrh	r3, [r3, #0]
 800d64a:	b29b      	uxth	r3, r3
 800d64c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d654:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800d658:	687a      	ldr	r2, [r7, #4]
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	781b      	ldrb	r3, [r3, #0]
 800d65e:	009b      	lsls	r3, r3, #2
 800d660:	441a      	add	r2, r3
 800d662:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800d666:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d66a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d66e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d676:	b29b      	uxth	r3, r3
 800d678:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d67a:	687a      	ldr	r2, [r7, #4]
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	781b      	ldrb	r3, [r3, #0]
 800d680:	009b      	lsls	r3, r3, #2
 800d682:	4413      	add	r3, r2
 800d684:	881b      	ldrh	r3, [r3, #0]
 800d686:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800d68a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800d68e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d692:	2b00      	cmp	r3, #0
 800d694:	d01d      	beq.n	800d6d2 <USB_ActivateEndpoint+0x64e>
 800d696:	687a      	ldr	r2, [r7, #4]
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	781b      	ldrb	r3, [r3, #0]
 800d69c:	009b      	lsls	r3, r3, #2
 800d69e:	4413      	add	r3, r2
 800d6a0:	881b      	ldrh	r3, [r3, #0]
 800d6a2:	b29b      	uxth	r3, r3
 800d6a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d6a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d6ac:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800d6b0:	687a      	ldr	r2, [r7, #4]
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	781b      	ldrb	r3, [r3, #0]
 800d6b6:	009b      	lsls	r3, r3, #2
 800d6b8:	441a      	add	r2, r3
 800d6ba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d6be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d6c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d6c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d6ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d6ce:	b29b      	uxth	r3, r3
 800d6d0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	78db      	ldrb	r3, [r3, #3]
 800d6d6:	2b01      	cmp	r3, #1
 800d6d8:	d024      	beq.n	800d724 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d6da:	687a      	ldr	r2, [r7, #4]
 800d6dc:	683b      	ldr	r3, [r7, #0]
 800d6de:	781b      	ldrb	r3, [r3, #0]
 800d6e0:	009b      	lsls	r3, r3, #2
 800d6e2:	4413      	add	r3, r2
 800d6e4:	881b      	ldrh	r3, [r3, #0]
 800d6e6:	b29b      	uxth	r3, r3
 800d6e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d6ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d6f0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800d6f4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d6f8:	f083 0320 	eor.w	r3, r3, #32
 800d6fc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800d700:	687a      	ldr	r2, [r7, #4]
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	781b      	ldrb	r3, [r3, #0]
 800d706:	009b      	lsls	r3, r3, #2
 800d708:	441a      	add	r2, r3
 800d70a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d70e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d712:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d716:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d71a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d71e:	b29b      	uxth	r3, r3
 800d720:	8013      	strh	r3, [r2, #0]
 800d722:	e01d      	b.n	800d760 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d724:	687a      	ldr	r2, [r7, #4]
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	781b      	ldrb	r3, [r3, #0]
 800d72a:	009b      	lsls	r3, r3, #2
 800d72c:	4413      	add	r3, r2
 800d72e:	881b      	ldrh	r3, [r3, #0]
 800d730:	b29b      	uxth	r3, r3
 800d732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d736:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d73a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800d73e:	687a      	ldr	r2, [r7, #4]
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	781b      	ldrb	r3, [r3, #0]
 800d744:	009b      	lsls	r3, r3, #2
 800d746:	441a      	add	r2, r3
 800d748:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d74c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d750:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d754:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d75c:	b29b      	uxth	r3, r3
 800d75e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d760:	687a      	ldr	r2, [r7, #4]
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	781b      	ldrb	r3, [r3, #0]
 800d766:	009b      	lsls	r3, r3, #2
 800d768:	4413      	add	r3, r2
 800d76a:	881b      	ldrh	r3, [r3, #0]
 800d76c:	b29b      	uxth	r3, r3
 800d76e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d776:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800d77a:	687a      	ldr	r2, [r7, #4]
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	781b      	ldrb	r3, [r3, #0]
 800d780:	009b      	lsls	r3, r3, #2
 800d782:	441a      	add	r2, r3
 800d784:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d788:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d78c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d790:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d798:	b29b      	uxth	r3, r3
 800d79a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800d79c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	3774      	adds	r7, #116	; 0x74
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7aa:	4770      	bx	lr

0800d7ac <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d7ac:	b480      	push	{r7}
 800d7ae:	b08d      	sub	sp, #52	; 0x34
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
 800d7b4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	7b1b      	ldrb	r3, [r3, #12]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	f040 808e 	bne.w	800d8dc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800d7c0:	683b      	ldr	r3, [r7, #0]
 800d7c2:	785b      	ldrb	r3, [r3, #1]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d044      	beq.n	800d852 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d7c8:	687a      	ldr	r2, [r7, #4]
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	781b      	ldrb	r3, [r3, #0]
 800d7ce:	009b      	lsls	r3, r3, #2
 800d7d0:	4413      	add	r3, r2
 800d7d2:	881b      	ldrh	r3, [r3, #0]
 800d7d4:	81bb      	strh	r3, [r7, #12]
 800d7d6:	89bb      	ldrh	r3, [r7, #12]
 800d7d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d01b      	beq.n	800d818 <USB_DeactivateEndpoint+0x6c>
 800d7e0:	687a      	ldr	r2, [r7, #4]
 800d7e2:	683b      	ldr	r3, [r7, #0]
 800d7e4:	781b      	ldrb	r3, [r3, #0]
 800d7e6:	009b      	lsls	r3, r3, #2
 800d7e8:	4413      	add	r3, r2
 800d7ea:	881b      	ldrh	r3, [r3, #0]
 800d7ec:	b29b      	uxth	r3, r3
 800d7ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d7f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d7f6:	817b      	strh	r3, [r7, #10]
 800d7f8:	687a      	ldr	r2, [r7, #4]
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	781b      	ldrb	r3, [r3, #0]
 800d7fe:	009b      	lsls	r3, r3, #2
 800d800:	441a      	add	r2, r3
 800d802:	897b      	ldrh	r3, [r7, #10]
 800d804:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d808:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d80c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d810:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d814:	b29b      	uxth	r3, r3
 800d816:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d818:	687a      	ldr	r2, [r7, #4]
 800d81a:	683b      	ldr	r3, [r7, #0]
 800d81c:	781b      	ldrb	r3, [r3, #0]
 800d81e:	009b      	lsls	r3, r3, #2
 800d820:	4413      	add	r3, r2
 800d822:	881b      	ldrh	r3, [r3, #0]
 800d824:	b29b      	uxth	r3, r3
 800d826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d82a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d82e:	813b      	strh	r3, [r7, #8]
 800d830:	687a      	ldr	r2, [r7, #4]
 800d832:	683b      	ldr	r3, [r7, #0]
 800d834:	781b      	ldrb	r3, [r3, #0]
 800d836:	009b      	lsls	r3, r3, #2
 800d838:	441a      	add	r2, r3
 800d83a:	893b      	ldrh	r3, [r7, #8]
 800d83c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d840:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d844:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d84c:	b29b      	uxth	r3, r3
 800d84e:	8013      	strh	r3, [r2, #0]
 800d850:	e192      	b.n	800db78 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d852:	687a      	ldr	r2, [r7, #4]
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	781b      	ldrb	r3, [r3, #0]
 800d858:	009b      	lsls	r3, r3, #2
 800d85a:	4413      	add	r3, r2
 800d85c:	881b      	ldrh	r3, [r3, #0]
 800d85e:	827b      	strh	r3, [r7, #18]
 800d860:	8a7b      	ldrh	r3, [r7, #18]
 800d862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d866:	2b00      	cmp	r3, #0
 800d868:	d01b      	beq.n	800d8a2 <USB_DeactivateEndpoint+0xf6>
 800d86a:	687a      	ldr	r2, [r7, #4]
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	781b      	ldrb	r3, [r3, #0]
 800d870:	009b      	lsls	r3, r3, #2
 800d872:	4413      	add	r3, r2
 800d874:	881b      	ldrh	r3, [r3, #0]
 800d876:	b29b      	uxth	r3, r3
 800d878:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d87c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d880:	823b      	strh	r3, [r7, #16]
 800d882:	687a      	ldr	r2, [r7, #4]
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	781b      	ldrb	r3, [r3, #0]
 800d888:	009b      	lsls	r3, r3, #2
 800d88a:	441a      	add	r2, r3
 800d88c:	8a3b      	ldrh	r3, [r7, #16]
 800d88e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d892:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d896:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d89a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d89e:	b29b      	uxth	r3, r3
 800d8a0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d8a2:	687a      	ldr	r2, [r7, #4]
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	781b      	ldrb	r3, [r3, #0]
 800d8a8:	009b      	lsls	r3, r3, #2
 800d8aa:	4413      	add	r3, r2
 800d8ac:	881b      	ldrh	r3, [r3, #0]
 800d8ae:	b29b      	uxth	r3, r3
 800d8b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d8b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d8b8:	81fb      	strh	r3, [r7, #14]
 800d8ba:	687a      	ldr	r2, [r7, #4]
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	781b      	ldrb	r3, [r3, #0]
 800d8c0:	009b      	lsls	r3, r3, #2
 800d8c2:	441a      	add	r2, r3
 800d8c4:	89fb      	ldrh	r3, [r7, #14]
 800d8c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d8ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d8ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d8d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8d6:	b29b      	uxth	r3, r3
 800d8d8:	8013      	strh	r3, [r2, #0]
 800d8da:	e14d      	b.n	800db78 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	785b      	ldrb	r3, [r3, #1]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	f040 80a5 	bne.w	800da30 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d8e6:	687a      	ldr	r2, [r7, #4]
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	781b      	ldrb	r3, [r3, #0]
 800d8ec:	009b      	lsls	r3, r3, #2
 800d8ee:	4413      	add	r3, r2
 800d8f0:	881b      	ldrh	r3, [r3, #0]
 800d8f2:	843b      	strh	r3, [r7, #32]
 800d8f4:	8c3b      	ldrh	r3, [r7, #32]
 800d8f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d01b      	beq.n	800d936 <USB_DeactivateEndpoint+0x18a>
 800d8fe:	687a      	ldr	r2, [r7, #4]
 800d900:	683b      	ldr	r3, [r7, #0]
 800d902:	781b      	ldrb	r3, [r3, #0]
 800d904:	009b      	lsls	r3, r3, #2
 800d906:	4413      	add	r3, r2
 800d908:	881b      	ldrh	r3, [r3, #0]
 800d90a:	b29b      	uxth	r3, r3
 800d90c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d914:	83fb      	strh	r3, [r7, #30]
 800d916:	687a      	ldr	r2, [r7, #4]
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	781b      	ldrb	r3, [r3, #0]
 800d91c:	009b      	lsls	r3, r3, #2
 800d91e:	441a      	add	r2, r3
 800d920:	8bfb      	ldrh	r3, [r7, #30]
 800d922:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d926:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d92a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d92e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d932:	b29b      	uxth	r3, r3
 800d934:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d936:	687a      	ldr	r2, [r7, #4]
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	781b      	ldrb	r3, [r3, #0]
 800d93c:	009b      	lsls	r3, r3, #2
 800d93e:	4413      	add	r3, r2
 800d940:	881b      	ldrh	r3, [r3, #0]
 800d942:	83bb      	strh	r3, [r7, #28]
 800d944:	8bbb      	ldrh	r3, [r7, #28]
 800d946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d01b      	beq.n	800d986 <USB_DeactivateEndpoint+0x1da>
 800d94e:	687a      	ldr	r2, [r7, #4]
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	781b      	ldrb	r3, [r3, #0]
 800d954:	009b      	lsls	r3, r3, #2
 800d956:	4413      	add	r3, r2
 800d958:	881b      	ldrh	r3, [r3, #0]
 800d95a:	b29b      	uxth	r3, r3
 800d95c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d964:	837b      	strh	r3, [r7, #26]
 800d966:	687a      	ldr	r2, [r7, #4]
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	781b      	ldrb	r3, [r3, #0]
 800d96c:	009b      	lsls	r3, r3, #2
 800d96e:	441a      	add	r2, r3
 800d970:	8b7b      	ldrh	r3, [r7, #26]
 800d972:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d976:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d97a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d97e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d982:	b29b      	uxth	r3, r3
 800d984:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800d986:	687a      	ldr	r2, [r7, #4]
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	781b      	ldrb	r3, [r3, #0]
 800d98c:	009b      	lsls	r3, r3, #2
 800d98e:	4413      	add	r3, r2
 800d990:	881b      	ldrh	r3, [r3, #0]
 800d992:	b29b      	uxth	r3, r3
 800d994:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d99c:	833b      	strh	r3, [r7, #24]
 800d99e:	687a      	ldr	r2, [r7, #4]
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	781b      	ldrb	r3, [r3, #0]
 800d9a4:	009b      	lsls	r3, r3, #2
 800d9a6:	441a      	add	r2, r3
 800d9a8:	8b3b      	ldrh	r3, [r7, #24]
 800d9aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d9ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d9b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d9b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d9ba:	b29b      	uxth	r3, r3
 800d9bc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d9be:	687a      	ldr	r2, [r7, #4]
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	781b      	ldrb	r3, [r3, #0]
 800d9c4:	009b      	lsls	r3, r3, #2
 800d9c6:	4413      	add	r3, r2
 800d9c8:	881b      	ldrh	r3, [r3, #0]
 800d9ca:	b29b      	uxth	r3, r3
 800d9cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d9d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d9d4:	82fb      	strh	r3, [r7, #22]
 800d9d6:	687a      	ldr	r2, [r7, #4]
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	781b      	ldrb	r3, [r3, #0]
 800d9dc:	009b      	lsls	r3, r3, #2
 800d9de:	441a      	add	r2, r3
 800d9e0:	8afb      	ldrh	r3, [r7, #22]
 800d9e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d9e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d9ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d9ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9f2:	b29b      	uxth	r3, r3
 800d9f4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d9f6:	687a      	ldr	r2, [r7, #4]
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	781b      	ldrb	r3, [r3, #0]
 800d9fc:	009b      	lsls	r3, r3, #2
 800d9fe:	4413      	add	r3, r2
 800da00:	881b      	ldrh	r3, [r3, #0]
 800da02:	b29b      	uxth	r3, r3
 800da04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800da08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da0c:	82bb      	strh	r3, [r7, #20]
 800da0e:	687a      	ldr	r2, [r7, #4]
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	781b      	ldrb	r3, [r3, #0]
 800da14:	009b      	lsls	r3, r3, #2
 800da16:	441a      	add	r2, r3
 800da18:	8abb      	ldrh	r3, [r7, #20]
 800da1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800da1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800da22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800da26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da2a:	b29b      	uxth	r3, r3
 800da2c:	8013      	strh	r3, [r2, #0]
 800da2e:	e0a3      	b.n	800db78 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800da30:	687a      	ldr	r2, [r7, #4]
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	781b      	ldrb	r3, [r3, #0]
 800da36:	009b      	lsls	r3, r3, #2
 800da38:	4413      	add	r3, r2
 800da3a:	881b      	ldrh	r3, [r3, #0]
 800da3c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800da3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800da40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800da44:	2b00      	cmp	r3, #0
 800da46:	d01b      	beq.n	800da80 <USB_DeactivateEndpoint+0x2d4>
 800da48:	687a      	ldr	r2, [r7, #4]
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	781b      	ldrb	r3, [r3, #0]
 800da4e:	009b      	lsls	r3, r3, #2
 800da50:	4413      	add	r3, r2
 800da52:	881b      	ldrh	r3, [r3, #0]
 800da54:	b29b      	uxth	r3, r3
 800da56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800da5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da5e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800da60:	687a      	ldr	r2, [r7, #4]
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	781b      	ldrb	r3, [r3, #0]
 800da66:	009b      	lsls	r3, r3, #2
 800da68:	441a      	add	r2, r3
 800da6a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800da6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800da70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800da74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800da78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da7c:	b29b      	uxth	r3, r3
 800da7e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800da80:	687a      	ldr	r2, [r7, #4]
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	781b      	ldrb	r3, [r3, #0]
 800da86:	009b      	lsls	r3, r3, #2
 800da88:	4413      	add	r3, r2
 800da8a:	881b      	ldrh	r3, [r3, #0]
 800da8c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800da8e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800da90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da94:	2b00      	cmp	r3, #0
 800da96:	d01b      	beq.n	800dad0 <USB_DeactivateEndpoint+0x324>
 800da98:	687a      	ldr	r2, [r7, #4]
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	781b      	ldrb	r3, [r3, #0]
 800da9e:	009b      	lsls	r3, r3, #2
 800daa0:	4413      	add	r3, r2
 800daa2:	881b      	ldrh	r3, [r3, #0]
 800daa4:	b29b      	uxth	r3, r3
 800daa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800daaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800daae:	853b      	strh	r3, [r7, #40]	; 0x28
 800dab0:	687a      	ldr	r2, [r7, #4]
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	781b      	ldrb	r3, [r3, #0]
 800dab6:	009b      	lsls	r3, r3, #2
 800dab8:	441a      	add	r2, r3
 800daba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dabc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dac0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dac4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dac8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800dacc:	b29b      	uxth	r3, r3
 800dace:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800dad0:	687a      	ldr	r2, [r7, #4]
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	781b      	ldrb	r3, [r3, #0]
 800dad6:	009b      	lsls	r3, r3, #2
 800dad8:	4413      	add	r3, r2
 800dada:	881b      	ldrh	r3, [r3, #0]
 800dadc:	b29b      	uxth	r3, r3
 800dade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dae6:	84fb      	strh	r3, [r7, #38]	; 0x26
 800dae8:	687a      	ldr	r2, [r7, #4]
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	781b      	ldrb	r3, [r3, #0]
 800daee:	009b      	lsls	r3, r3, #2
 800daf0:	441a      	add	r2, r3
 800daf2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800daf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800daf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dafc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800db00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db04:	b29b      	uxth	r3, r3
 800db06:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800db08:	687a      	ldr	r2, [r7, #4]
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	781b      	ldrb	r3, [r3, #0]
 800db0e:	009b      	lsls	r3, r3, #2
 800db10:	4413      	add	r3, r2
 800db12:	881b      	ldrh	r3, [r3, #0]
 800db14:	b29b      	uxth	r3, r3
 800db16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800db1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db1e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800db20:	687a      	ldr	r2, [r7, #4]
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	781b      	ldrb	r3, [r3, #0]
 800db26:	009b      	lsls	r3, r3, #2
 800db28:	441a      	add	r2, r3
 800db2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800db30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800db34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800db38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db3c:	b29b      	uxth	r3, r3
 800db3e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800db40:	687a      	ldr	r2, [r7, #4]
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	781b      	ldrb	r3, [r3, #0]
 800db46:	009b      	lsls	r3, r3, #2
 800db48:	4413      	add	r3, r2
 800db4a:	881b      	ldrh	r3, [r3, #0]
 800db4c:	b29b      	uxth	r3, r3
 800db4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800db52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db56:	847b      	strh	r3, [r7, #34]	; 0x22
 800db58:	687a      	ldr	r2, [r7, #4]
 800db5a:	683b      	ldr	r3, [r7, #0]
 800db5c:	781b      	ldrb	r3, [r3, #0]
 800db5e:	009b      	lsls	r3, r3, #2
 800db60:	441a      	add	r2, r3
 800db62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800db64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800db68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800db6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800db70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db74:	b29b      	uxth	r3, r3
 800db76:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800db78:	2300      	movs	r3, #0
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	3734      	adds	r7, #52	; 0x34
 800db7e:	46bd      	mov	sp, r7
 800db80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db84:	4770      	bx	lr

0800db86 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800db86:	b580      	push	{r7, lr}
 800db88:	b0c2      	sub	sp, #264	; 0x108
 800db8a:	af00      	add	r7, sp, #0
 800db8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800db94:	6018      	str	r0, [r3, #0]
 800db96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db9e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dba4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	785b      	ldrb	r3, [r3, #1]
 800dbac:	2b01      	cmp	r3, #1
 800dbae:	f040 867b 	bne.w	800e8a8 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800dbb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	699a      	ldr	r2, [r3, #24]
 800dbbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	691b      	ldr	r3, [r3, #16]
 800dbca:	429a      	cmp	r2, r3
 800dbcc:	d908      	bls.n	800dbe0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800dbce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	691b      	ldr	r3, [r3, #16]
 800dbda:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800dbde:	e007      	b.n	800dbf0 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800dbe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbe4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	699b      	ldr	r3, [r3, #24]
 800dbec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800dbf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	7b1b      	ldrb	r3, [r3, #12]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d13a      	bne.n	800dc76 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800dc00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	6959      	ldr	r1, [r3, #20]
 800dc0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	88da      	ldrh	r2, [r3, #6]
 800dc18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc1c:	b29b      	uxth	r3, r3
 800dc1e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800dc22:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800dc26:	6800      	ldr	r0, [r0, #0]
 800dc28:	f001 fc1d 	bl	800f466 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800dc2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	613b      	str	r3, [r7, #16]
 800dc38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dc46:	b29b      	uxth	r3, r3
 800dc48:	461a      	mov	r2, r3
 800dc4a:	693b      	ldr	r3, [r7, #16]
 800dc4c:	4413      	add	r3, r2
 800dc4e:	613b      	str	r3, [r7, #16]
 800dc50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	781b      	ldrb	r3, [r3, #0]
 800dc5c:	00da      	lsls	r2, r3, #3
 800dc5e:	693b      	ldr	r3, [r7, #16]
 800dc60:	4413      	add	r3, r2
 800dc62:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800dc66:	60fb      	str	r3, [r7, #12]
 800dc68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc6c:	b29a      	uxth	r2, r3
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	801a      	strh	r2, [r3, #0]
 800dc72:	f000 bde3 	b.w	800e83c <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800dc76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	78db      	ldrb	r3, [r3, #3]
 800dc82:	2b02      	cmp	r3, #2
 800dc84:	f040 843a 	bne.w	800e4fc <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800dc88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	6a1a      	ldr	r2, [r3, #32]
 800dc94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	691b      	ldr	r3, [r3, #16]
 800dca0:	429a      	cmp	r2, r3
 800dca2:	f240 83b7 	bls.w	800e414 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800dca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dcaa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dcae:	681a      	ldr	r2, [r3, #0]
 800dcb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dcb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	781b      	ldrb	r3, [r3, #0]
 800dcbc:	009b      	lsls	r3, r3, #2
 800dcbe:	4413      	add	r3, r2
 800dcc0:	881b      	ldrh	r3, [r3, #0]
 800dcc2:	b29b      	uxth	r3, r3
 800dcc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dcc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dccc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800dcd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dcd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dcd8:	681a      	ldr	r2, [r3, #0]
 800dcda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dcde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	781b      	ldrb	r3, [r3, #0]
 800dce6:	009b      	lsls	r3, r3, #2
 800dce8:	441a      	add	r2, r3
 800dcea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800dcee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dcf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dcf6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800dcfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dcfe:	b29b      	uxth	r3, r3
 800dd00:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800dd02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	6a1a      	ldr	r2, [r3, #32]
 800dd0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dd12:	1ad2      	subs	r2, r2, r3
 800dd14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800dd20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dd28:	681a      	ldr	r2, [r3, #0]
 800dd2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	781b      	ldrb	r3, [r3, #0]
 800dd36:	009b      	lsls	r3, r3, #2
 800dd38:	4413      	add	r3, r2
 800dd3a:	881b      	ldrh	r3, [r3, #0]
 800dd3c:	b29b      	uxth	r3, r3
 800dd3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	f000 81b3 	beq.w	800e0ae <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800dd48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	633b      	str	r3, [r7, #48]	; 0x30
 800dd54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	785b      	ldrb	r3, [r3, #1]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d16d      	bne.n	800de40 <USB_EPStartXfer+0x2ba>
 800dd64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	62bb      	str	r3, [r7, #40]	; 0x28
 800dd70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dd7e:	b29b      	uxth	r3, r3
 800dd80:	461a      	mov	r2, r3
 800dd82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd84:	4413      	add	r3, r2
 800dd86:	62bb      	str	r3, [r7, #40]	; 0x28
 800dd88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	781b      	ldrb	r3, [r3, #0]
 800dd94:	00da      	lsls	r2, r3, #3
 800dd96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd98:	4413      	add	r3, r2
 800dd9a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800dd9e:	627b      	str	r3, [r7, #36]	; 0x24
 800dda0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dda4:	2b3e      	cmp	r3, #62	; 0x3e
 800dda6:	d91c      	bls.n	800dde2 <USB_EPStartXfer+0x25c>
 800dda8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ddac:	095b      	lsrs	r3, r3, #5
 800ddae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ddb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ddb6:	f003 031f 	and.w	r3, r3, #31
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d104      	bne.n	800ddc8 <USB_EPStartXfer+0x242>
 800ddbe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ddc2:	3b01      	subs	r3, #1
 800ddc4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ddc8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ddcc:	b29b      	uxth	r3, r3
 800ddce:	029b      	lsls	r3, r3, #10
 800ddd0:	b29b      	uxth	r3, r3
 800ddd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ddd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ddda:	b29a      	uxth	r2, r3
 800dddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddde:	801a      	strh	r2, [r3, #0]
 800dde0:	e053      	b.n	800de8a <USB_EPStartXfer+0x304>
 800dde2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d112      	bne.n	800de10 <USB_EPStartXfer+0x28a>
 800ddea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddec:	881b      	ldrh	r3, [r3, #0]
 800ddee:	b29b      	uxth	r3, r3
 800ddf0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ddf4:	b29a      	uxth	r2, r3
 800ddf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddf8:	801a      	strh	r2, [r3, #0]
 800ddfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddfc:	881b      	ldrh	r3, [r3, #0]
 800ddfe:	b29b      	uxth	r3, r3
 800de00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800de04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800de08:	b29a      	uxth	r2, r3
 800de0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de0c:	801a      	strh	r2, [r3, #0]
 800de0e:	e03c      	b.n	800de8a <USB_EPStartXfer+0x304>
 800de10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800de14:	085b      	lsrs	r3, r3, #1
 800de16:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800de1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800de1e:	f003 0301 	and.w	r3, r3, #1
 800de22:	2b00      	cmp	r3, #0
 800de24:	d004      	beq.n	800de30 <USB_EPStartXfer+0x2aa>
 800de26:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800de2a:	3301      	adds	r3, #1
 800de2c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800de30:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800de34:	b29b      	uxth	r3, r3
 800de36:	029b      	lsls	r3, r3, #10
 800de38:	b29a      	uxth	r2, r3
 800de3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de3c:	801a      	strh	r2, [r3, #0]
 800de3e:	e024      	b.n	800de8a <USB_EPStartXfer+0x304>
 800de40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	785b      	ldrb	r3, [r3, #1]
 800de4c:	2b01      	cmp	r3, #1
 800de4e:	d11c      	bne.n	800de8a <USB_EPStartXfer+0x304>
 800de50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800de5e:	b29b      	uxth	r3, r3
 800de60:	461a      	mov	r2, r3
 800de62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de64:	4413      	add	r3, r2
 800de66:	633b      	str	r3, [r7, #48]	; 0x30
 800de68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	781b      	ldrb	r3, [r3, #0]
 800de74:	00da      	lsls	r2, r3, #3
 800de76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de78:	4413      	add	r3, r2
 800de7a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800de7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800de84:	b29a      	uxth	r2, r3
 800de86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de88:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800de8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	895b      	ldrh	r3, [r3, #10]
 800de96:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800de9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	6959      	ldr	r1, [r3, #20]
 800dea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800deaa:	b29b      	uxth	r3, r3
 800deac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800deb0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800deb4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800deb8:	6800      	ldr	r0, [r0, #0]
 800deba:	f001 fad4 	bl	800f466 <USB_WritePMA>
            ep->xfer_buff += len;
 800debe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dec2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	695a      	ldr	r2, [r3, #20]
 800deca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dece:	441a      	add	r2, r3
 800ded0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ded4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800dedc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dee0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	6a1a      	ldr	r2, [r3, #32]
 800dee8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800deec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	691b      	ldr	r3, [r3, #16]
 800def4:	429a      	cmp	r2, r3
 800def6:	d90f      	bls.n	800df18 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800def8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800defc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	6a1a      	ldr	r2, [r3, #32]
 800df04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800df08:	1ad2      	subs	r2, r2, r3
 800df0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	621a      	str	r2, [r3, #32]
 800df16:	e00e      	b.n	800df36 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800df18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	6a1b      	ldr	r3, [r3, #32]
 800df24:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800df28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	2200      	movs	r2, #0
 800df34:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800df36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	785b      	ldrb	r3, [r3, #1]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d16d      	bne.n	800e022 <USB_EPStartXfer+0x49c>
 800df46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	61bb      	str	r3, [r7, #24]
 800df52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800df60:	b29b      	uxth	r3, r3
 800df62:	461a      	mov	r2, r3
 800df64:	69bb      	ldr	r3, [r7, #24]
 800df66:	4413      	add	r3, r2
 800df68:	61bb      	str	r3, [r7, #24]
 800df6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	781b      	ldrb	r3, [r3, #0]
 800df76:	00da      	lsls	r2, r3, #3
 800df78:	69bb      	ldr	r3, [r7, #24]
 800df7a:	4413      	add	r3, r2
 800df7c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800df80:	617b      	str	r3, [r7, #20]
 800df82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800df86:	2b3e      	cmp	r3, #62	; 0x3e
 800df88:	d91c      	bls.n	800dfc4 <USB_EPStartXfer+0x43e>
 800df8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800df8e:	095b      	lsrs	r3, r3, #5
 800df90:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800df94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800df98:	f003 031f 	and.w	r3, r3, #31
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d104      	bne.n	800dfaa <USB_EPStartXfer+0x424>
 800dfa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dfa4:	3b01      	subs	r3, #1
 800dfa6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800dfaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dfae:	b29b      	uxth	r3, r3
 800dfb0:	029b      	lsls	r3, r3, #10
 800dfb2:	b29b      	uxth	r3, r3
 800dfb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dfb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dfbc:	b29a      	uxth	r2, r3
 800dfbe:	697b      	ldr	r3, [r7, #20]
 800dfc0:	801a      	strh	r2, [r3, #0]
 800dfc2:	e059      	b.n	800e078 <USB_EPStartXfer+0x4f2>
 800dfc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d112      	bne.n	800dff2 <USB_EPStartXfer+0x46c>
 800dfcc:	697b      	ldr	r3, [r7, #20]
 800dfce:	881b      	ldrh	r3, [r3, #0]
 800dfd0:	b29b      	uxth	r3, r3
 800dfd2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800dfd6:	b29a      	uxth	r2, r3
 800dfd8:	697b      	ldr	r3, [r7, #20]
 800dfda:	801a      	strh	r2, [r3, #0]
 800dfdc:	697b      	ldr	r3, [r7, #20]
 800dfde:	881b      	ldrh	r3, [r3, #0]
 800dfe0:	b29b      	uxth	r3, r3
 800dfe2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dfe6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dfea:	b29a      	uxth	r2, r3
 800dfec:	697b      	ldr	r3, [r7, #20]
 800dfee:	801a      	strh	r2, [r3, #0]
 800dff0:	e042      	b.n	800e078 <USB_EPStartXfer+0x4f2>
 800dff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dff6:	085b      	lsrs	r3, r3, #1
 800dff8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800dffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e000:	f003 0301 	and.w	r3, r3, #1
 800e004:	2b00      	cmp	r3, #0
 800e006:	d004      	beq.n	800e012 <USB_EPStartXfer+0x48c>
 800e008:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e00c:	3301      	adds	r3, #1
 800e00e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800e012:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e016:	b29b      	uxth	r3, r3
 800e018:	029b      	lsls	r3, r3, #10
 800e01a:	b29a      	uxth	r2, r3
 800e01c:	697b      	ldr	r3, [r7, #20]
 800e01e:	801a      	strh	r2, [r3, #0]
 800e020:	e02a      	b.n	800e078 <USB_EPStartXfer+0x4f2>
 800e022:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e026:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	785b      	ldrb	r3, [r3, #1]
 800e02e:	2b01      	cmp	r3, #1
 800e030:	d122      	bne.n	800e078 <USB_EPStartXfer+0x4f2>
 800e032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e036:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	623b      	str	r3, [r7, #32]
 800e03e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e042:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e04c:	b29b      	uxth	r3, r3
 800e04e:	461a      	mov	r2, r3
 800e050:	6a3b      	ldr	r3, [r7, #32]
 800e052:	4413      	add	r3, r2
 800e054:	623b      	str	r3, [r7, #32]
 800e056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e05a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	781b      	ldrb	r3, [r3, #0]
 800e062:	00da      	lsls	r2, r3, #3
 800e064:	6a3b      	ldr	r3, [r7, #32]
 800e066:	4413      	add	r3, r2
 800e068:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e06c:	61fb      	str	r3, [r7, #28]
 800e06e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e072:	b29a      	uxth	r2, r3
 800e074:	69fb      	ldr	r3, [r7, #28]
 800e076:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e078:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e07c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	891b      	ldrh	r3, [r3, #8]
 800e084:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e08c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	6959      	ldr	r1, [r3, #20]
 800e094:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e098:	b29b      	uxth	r3, r3
 800e09a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e09e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e0a2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e0a6:	6800      	ldr	r0, [r0, #0]
 800e0a8:	f001 f9dd 	bl	800f466 <USB_WritePMA>
 800e0ac:	e3c6      	b.n	800e83c <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e0ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	785b      	ldrb	r3, [r3, #1]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d16d      	bne.n	800e19a <USB_EPStartXfer+0x614>
 800e0be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	64bb      	str	r3, [r7, #72]	; 0x48
 800e0ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e0d8:	b29b      	uxth	r3, r3
 800e0da:	461a      	mov	r2, r3
 800e0dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e0de:	4413      	add	r3, r2
 800e0e0:	64bb      	str	r3, [r7, #72]	; 0x48
 800e0e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	781b      	ldrb	r3, [r3, #0]
 800e0ee:	00da      	lsls	r2, r3, #3
 800e0f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e0f2:	4413      	add	r3, r2
 800e0f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e0f8:	647b      	str	r3, [r7, #68]	; 0x44
 800e0fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e0fe:	2b3e      	cmp	r3, #62	; 0x3e
 800e100:	d91c      	bls.n	800e13c <USB_EPStartXfer+0x5b6>
 800e102:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e106:	095b      	lsrs	r3, r3, #5
 800e108:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e10c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e110:	f003 031f 	and.w	r3, r3, #31
 800e114:	2b00      	cmp	r3, #0
 800e116:	d104      	bne.n	800e122 <USB_EPStartXfer+0x59c>
 800e118:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e11c:	3b01      	subs	r3, #1
 800e11e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e122:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e126:	b29b      	uxth	r3, r3
 800e128:	029b      	lsls	r3, r3, #10
 800e12a:	b29b      	uxth	r3, r3
 800e12c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e130:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e134:	b29a      	uxth	r2, r3
 800e136:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e138:	801a      	strh	r2, [r3, #0]
 800e13a:	e059      	b.n	800e1f0 <USB_EPStartXfer+0x66a>
 800e13c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e140:	2b00      	cmp	r3, #0
 800e142:	d112      	bne.n	800e16a <USB_EPStartXfer+0x5e4>
 800e144:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e146:	881b      	ldrh	r3, [r3, #0]
 800e148:	b29b      	uxth	r3, r3
 800e14a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e14e:	b29a      	uxth	r2, r3
 800e150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e152:	801a      	strh	r2, [r3, #0]
 800e154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e156:	881b      	ldrh	r3, [r3, #0]
 800e158:	b29b      	uxth	r3, r3
 800e15a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e15e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e162:	b29a      	uxth	r2, r3
 800e164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e166:	801a      	strh	r2, [r3, #0]
 800e168:	e042      	b.n	800e1f0 <USB_EPStartXfer+0x66a>
 800e16a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e16e:	085b      	lsrs	r3, r3, #1
 800e170:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e174:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e178:	f003 0301 	and.w	r3, r3, #1
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d004      	beq.n	800e18a <USB_EPStartXfer+0x604>
 800e180:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e184:	3301      	adds	r3, #1
 800e186:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e18a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e18e:	b29b      	uxth	r3, r3
 800e190:	029b      	lsls	r3, r3, #10
 800e192:	b29a      	uxth	r2, r3
 800e194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e196:	801a      	strh	r2, [r3, #0]
 800e198:	e02a      	b.n	800e1f0 <USB_EPStartXfer+0x66a>
 800e19a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e19e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	785b      	ldrb	r3, [r3, #1]
 800e1a6:	2b01      	cmp	r3, #1
 800e1a8:	d122      	bne.n	800e1f0 <USB_EPStartXfer+0x66a>
 800e1aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	653b      	str	r3, [r7, #80]	; 0x50
 800e1b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e1c4:	b29b      	uxth	r3, r3
 800e1c6:	461a      	mov	r2, r3
 800e1c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1ca:	4413      	add	r3, r2
 800e1cc:	653b      	str	r3, [r7, #80]	; 0x50
 800e1ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	781b      	ldrb	r3, [r3, #0]
 800e1da:	00da      	lsls	r2, r3, #3
 800e1dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1de:	4413      	add	r3, r2
 800e1e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e1e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e1e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e1ea:	b29a      	uxth	r2, r3
 800e1ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1ee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e1f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	891b      	ldrh	r3, [r3, #8]
 800e1fc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e200:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e204:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	6959      	ldr	r1, [r3, #20]
 800e20c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e210:	b29b      	uxth	r3, r3
 800e212:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e216:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e21a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e21e:	6800      	ldr	r0, [r0, #0]
 800e220:	f001 f921 	bl	800f466 <USB_WritePMA>
            ep->xfer_buff += len;
 800e224:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e228:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	695a      	ldr	r2, [r3, #20]
 800e230:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e234:	441a      	add	r2, r3
 800e236:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e23a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e242:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e246:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	6a1a      	ldr	r2, [r3, #32]
 800e24e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e252:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	691b      	ldr	r3, [r3, #16]
 800e25a:	429a      	cmp	r2, r3
 800e25c:	d90f      	bls.n	800e27e <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800e25e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e262:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	6a1a      	ldr	r2, [r3, #32]
 800e26a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e26e:	1ad2      	subs	r2, r2, r3
 800e270:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e274:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	621a      	str	r2, [r3, #32]
 800e27c:	e00e      	b.n	800e29c <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800e27e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e282:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	6a1b      	ldr	r3, [r3, #32]
 800e28a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800e28e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e292:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	2200      	movs	r2, #0
 800e29a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e29c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	643b      	str	r3, [r7, #64]	; 0x40
 800e2a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	785b      	ldrb	r3, [r3, #1]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d16d      	bne.n	800e394 <USB_EPStartXfer+0x80e>
 800e2b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	63bb      	str	r3, [r7, #56]	; 0x38
 800e2c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e2d2:	b29b      	uxth	r3, r3
 800e2d4:	461a      	mov	r2, r3
 800e2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2d8:	4413      	add	r3, r2
 800e2da:	63bb      	str	r3, [r7, #56]	; 0x38
 800e2dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	781b      	ldrb	r3, [r3, #0]
 800e2e8:	00da      	lsls	r2, r3, #3
 800e2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ec:	4413      	add	r3, r2
 800e2ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e2f2:	637b      	str	r3, [r7, #52]	; 0x34
 800e2f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e2f8:	2b3e      	cmp	r3, #62	; 0x3e
 800e2fa:	d91c      	bls.n	800e336 <USB_EPStartXfer+0x7b0>
 800e2fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e300:	095b      	lsrs	r3, r3, #5
 800e302:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e306:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e30a:	f003 031f 	and.w	r3, r3, #31
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d104      	bne.n	800e31c <USB_EPStartXfer+0x796>
 800e312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e316:	3b01      	subs	r3, #1
 800e318:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e31c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e320:	b29b      	uxth	r3, r3
 800e322:	029b      	lsls	r3, r3, #10
 800e324:	b29b      	uxth	r3, r3
 800e326:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e32a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e32e:	b29a      	uxth	r2, r3
 800e330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e332:	801a      	strh	r2, [r3, #0]
 800e334:	e053      	b.n	800e3de <USB_EPStartXfer+0x858>
 800e336:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d112      	bne.n	800e364 <USB_EPStartXfer+0x7de>
 800e33e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e340:	881b      	ldrh	r3, [r3, #0]
 800e342:	b29b      	uxth	r3, r3
 800e344:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e348:	b29a      	uxth	r2, r3
 800e34a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e34c:	801a      	strh	r2, [r3, #0]
 800e34e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e350:	881b      	ldrh	r3, [r3, #0]
 800e352:	b29b      	uxth	r3, r3
 800e354:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e358:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e35c:	b29a      	uxth	r2, r3
 800e35e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e360:	801a      	strh	r2, [r3, #0]
 800e362:	e03c      	b.n	800e3de <USB_EPStartXfer+0x858>
 800e364:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e368:	085b      	lsrs	r3, r3, #1
 800e36a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e36e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e372:	f003 0301 	and.w	r3, r3, #1
 800e376:	2b00      	cmp	r3, #0
 800e378:	d004      	beq.n	800e384 <USB_EPStartXfer+0x7fe>
 800e37a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e37e:	3301      	adds	r3, #1
 800e380:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e388:	b29b      	uxth	r3, r3
 800e38a:	029b      	lsls	r3, r3, #10
 800e38c:	b29a      	uxth	r2, r3
 800e38e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e390:	801a      	strh	r2, [r3, #0]
 800e392:	e024      	b.n	800e3de <USB_EPStartXfer+0x858>
 800e394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	785b      	ldrb	r3, [r3, #1]
 800e3a0:	2b01      	cmp	r3, #1
 800e3a2:	d11c      	bne.n	800e3de <USB_EPStartXfer+0x858>
 800e3a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e3b2:	b29b      	uxth	r3, r3
 800e3b4:	461a      	mov	r2, r3
 800e3b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3b8:	4413      	add	r3, r2
 800e3ba:	643b      	str	r3, [r7, #64]	; 0x40
 800e3bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	781b      	ldrb	r3, [r3, #0]
 800e3c8:	00da      	lsls	r2, r3, #3
 800e3ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3cc:	4413      	add	r3, r2
 800e3ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e3d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e3d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e3d8:	b29a      	uxth	r2, r3
 800e3da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800e3de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	895b      	ldrh	r3, [r3, #10]
 800e3ea:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e3ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	6959      	ldr	r1, [r3, #20]
 800e3fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e3fe:	b29b      	uxth	r3, r3
 800e400:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e404:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e408:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e40c:	6800      	ldr	r0, [r0, #0]
 800e40e:	f001 f82a 	bl	800f466 <USB_WritePMA>
 800e412:	e213      	b.n	800e83c <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800e414:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e418:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	6a1b      	ldr	r3, [r3, #32]
 800e420:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800e424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e428:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e42c:	681a      	ldr	r2, [r3, #0]
 800e42e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e432:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	781b      	ldrb	r3, [r3, #0]
 800e43a:	009b      	lsls	r3, r3, #2
 800e43c:	4413      	add	r3, r2
 800e43e:	881b      	ldrh	r3, [r3, #0]
 800e440:	b29b      	uxth	r3, r3
 800e442:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800e446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e44a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800e44e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e452:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e456:	681a      	ldr	r2, [r3, #0]
 800e458:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e45c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	781b      	ldrb	r3, [r3, #0]
 800e464:	009b      	lsls	r3, r3, #2
 800e466:	441a      	add	r2, r3
 800e468:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800e46c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e470:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e474:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e47c:	b29b      	uxth	r3, r3
 800e47e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e484:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e48c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e490:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e49a:	b29b      	uxth	r3, r3
 800e49c:	461a      	mov	r2, r3
 800e49e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e4a0:	4413      	add	r3, r2
 800e4a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e4a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	781b      	ldrb	r3, [r3, #0]
 800e4b0:	00da      	lsls	r2, r3, #3
 800e4b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e4b4:	4413      	add	r3, r2
 800e4b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e4ba:	65bb      	str	r3, [r7, #88]	; 0x58
 800e4bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e4c0:	b29a      	uxth	r2, r3
 800e4c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e4c4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800e4c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	891b      	ldrh	r3, [r3, #8]
 800e4d2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e4d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	6959      	ldr	r1, [r3, #20]
 800e4e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e4e6:	b29b      	uxth	r3, r3
 800e4e8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e4ec:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e4f0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e4f4:	6800      	ldr	r0, [r0, #0]
 800e4f6:	f000 ffb6 	bl	800f466 <USB_WritePMA>
 800e4fa:	e19f      	b.n	800e83c <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800e4fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e500:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	6a1a      	ldr	r2, [r3, #32]
 800e508:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e50c:	1ad2      	subs	r2, r2, r3
 800e50e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e512:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e51a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e51e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e522:	681a      	ldr	r2, [r3, #0]
 800e524:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e528:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	781b      	ldrb	r3, [r3, #0]
 800e530:	009b      	lsls	r3, r3, #2
 800e532:	4413      	add	r3, r2
 800e534:	881b      	ldrh	r3, [r3, #0]
 800e536:	b29b      	uxth	r3, r3
 800e538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	f000 80bc 	beq.w	800e6ba <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e546:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	673b      	str	r3, [r7, #112]	; 0x70
 800e54e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e552:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	785b      	ldrb	r3, [r3, #1]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d16d      	bne.n	800e63a <USB_EPStartXfer+0xab4>
 800e55e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e562:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	66bb      	str	r3, [r7, #104]	; 0x68
 800e56a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e56e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e578:	b29b      	uxth	r3, r3
 800e57a:	461a      	mov	r2, r3
 800e57c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e57e:	4413      	add	r3, r2
 800e580:	66bb      	str	r3, [r7, #104]	; 0x68
 800e582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e586:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	781b      	ldrb	r3, [r3, #0]
 800e58e:	00da      	lsls	r2, r3, #3
 800e590:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e592:	4413      	add	r3, r2
 800e594:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e598:	667b      	str	r3, [r7, #100]	; 0x64
 800e59a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e59e:	2b3e      	cmp	r3, #62	; 0x3e
 800e5a0:	d91c      	bls.n	800e5dc <USB_EPStartXfer+0xa56>
 800e5a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e5a6:	095b      	lsrs	r3, r3, #5
 800e5a8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800e5ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e5b0:	f003 031f 	and.w	r3, r3, #31
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d104      	bne.n	800e5c2 <USB_EPStartXfer+0xa3c>
 800e5b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e5bc:	3b01      	subs	r3, #1
 800e5be:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800e5c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e5c6:	b29b      	uxth	r3, r3
 800e5c8:	029b      	lsls	r3, r3, #10
 800e5ca:	b29b      	uxth	r3, r3
 800e5cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e5d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e5d4:	b29a      	uxth	r2, r3
 800e5d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e5d8:	801a      	strh	r2, [r3, #0]
 800e5da:	e053      	b.n	800e684 <USB_EPStartXfer+0xafe>
 800e5dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d112      	bne.n	800e60a <USB_EPStartXfer+0xa84>
 800e5e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e5e6:	881b      	ldrh	r3, [r3, #0]
 800e5e8:	b29b      	uxth	r3, r3
 800e5ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e5ee:	b29a      	uxth	r2, r3
 800e5f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e5f2:	801a      	strh	r2, [r3, #0]
 800e5f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e5f6:	881b      	ldrh	r3, [r3, #0]
 800e5f8:	b29b      	uxth	r3, r3
 800e5fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e5fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e602:	b29a      	uxth	r2, r3
 800e604:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e606:	801a      	strh	r2, [r3, #0]
 800e608:	e03c      	b.n	800e684 <USB_EPStartXfer+0xafe>
 800e60a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e60e:	085b      	lsrs	r3, r3, #1
 800e610:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800e614:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e618:	f003 0301 	and.w	r3, r3, #1
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d004      	beq.n	800e62a <USB_EPStartXfer+0xaa4>
 800e620:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e624:	3301      	adds	r3, #1
 800e626:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800e62a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e62e:	b29b      	uxth	r3, r3
 800e630:	029b      	lsls	r3, r3, #10
 800e632:	b29a      	uxth	r2, r3
 800e634:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e636:	801a      	strh	r2, [r3, #0]
 800e638:	e024      	b.n	800e684 <USB_EPStartXfer+0xafe>
 800e63a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e63e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	785b      	ldrb	r3, [r3, #1]
 800e646:	2b01      	cmp	r3, #1
 800e648:	d11c      	bne.n	800e684 <USB_EPStartXfer+0xafe>
 800e64a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e64e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e658:	b29b      	uxth	r3, r3
 800e65a:	461a      	mov	r2, r3
 800e65c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e65e:	4413      	add	r3, r2
 800e660:	673b      	str	r3, [r7, #112]	; 0x70
 800e662:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e666:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	781b      	ldrb	r3, [r3, #0]
 800e66e:	00da      	lsls	r2, r3, #3
 800e670:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e672:	4413      	add	r3, r2
 800e674:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e678:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e67a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e67e:	b29a      	uxth	r2, r3
 800e680:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e682:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800e684:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e688:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	895b      	ldrh	r3, [r3, #10]
 800e690:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e698:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	6959      	ldr	r1, [r3, #20]
 800e6a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e6a4:	b29b      	uxth	r3, r3
 800e6a6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e6aa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e6ae:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e6b2:	6800      	ldr	r0, [r0, #0]
 800e6b4:	f000 fed7 	bl	800f466 <USB_WritePMA>
 800e6b8:	e0c0      	b.n	800e83c <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e6ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	785b      	ldrb	r3, [r3, #1]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d16d      	bne.n	800e7a6 <USB_EPStartXfer+0xc20>
 800e6ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e6d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e6e4:	b29b      	uxth	r3, r3
 800e6e6:	461a      	mov	r2, r3
 800e6e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e6ea:	4413      	add	r3, r2
 800e6ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e6ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	781b      	ldrb	r3, [r3, #0]
 800e6fa:	00da      	lsls	r2, r3, #3
 800e6fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e6fe:	4413      	add	r3, r2
 800e700:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e704:	67bb      	str	r3, [r7, #120]	; 0x78
 800e706:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e70a:	2b3e      	cmp	r3, #62	; 0x3e
 800e70c:	d91c      	bls.n	800e748 <USB_EPStartXfer+0xbc2>
 800e70e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e712:	095b      	lsrs	r3, r3, #5
 800e714:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e718:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e71c:	f003 031f 	and.w	r3, r3, #31
 800e720:	2b00      	cmp	r3, #0
 800e722:	d104      	bne.n	800e72e <USB_EPStartXfer+0xba8>
 800e724:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e728:	3b01      	subs	r3, #1
 800e72a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e72e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e732:	b29b      	uxth	r3, r3
 800e734:	029b      	lsls	r3, r3, #10
 800e736:	b29b      	uxth	r3, r3
 800e738:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e73c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e740:	b29a      	uxth	r2, r3
 800e742:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e744:	801a      	strh	r2, [r3, #0]
 800e746:	e05f      	b.n	800e808 <USB_EPStartXfer+0xc82>
 800e748:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d112      	bne.n	800e776 <USB_EPStartXfer+0xbf0>
 800e750:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e752:	881b      	ldrh	r3, [r3, #0]
 800e754:	b29b      	uxth	r3, r3
 800e756:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e75a:	b29a      	uxth	r2, r3
 800e75c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e75e:	801a      	strh	r2, [r3, #0]
 800e760:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e762:	881b      	ldrh	r3, [r3, #0]
 800e764:	b29b      	uxth	r3, r3
 800e766:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e76a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e76e:	b29a      	uxth	r2, r3
 800e770:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e772:	801a      	strh	r2, [r3, #0]
 800e774:	e048      	b.n	800e808 <USB_EPStartXfer+0xc82>
 800e776:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e77a:	085b      	lsrs	r3, r3, #1
 800e77c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e780:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e784:	f003 0301 	and.w	r3, r3, #1
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d004      	beq.n	800e796 <USB_EPStartXfer+0xc10>
 800e78c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e790:	3301      	adds	r3, #1
 800e792:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e796:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e79a:	b29b      	uxth	r3, r3
 800e79c:	029b      	lsls	r3, r3, #10
 800e79e:	b29a      	uxth	r2, r3
 800e7a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e7a2:	801a      	strh	r2, [r3, #0]
 800e7a4:	e030      	b.n	800e808 <USB_EPStartXfer+0xc82>
 800e7a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	785b      	ldrb	r3, [r3, #1]
 800e7b2:	2b01      	cmp	r3, #1
 800e7b4:	d128      	bne.n	800e808 <USB_EPStartXfer+0xc82>
 800e7b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e7c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e7d2:	b29b      	uxth	r3, r3
 800e7d4:	461a      	mov	r2, r3
 800e7d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e7da:	4413      	add	r3, r2
 800e7dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e7e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	781b      	ldrb	r3, [r3, #0]
 800e7ec:	00da      	lsls	r2, r3, #3
 800e7ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e7f2:	4413      	add	r3, r2
 800e7f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e7f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e7fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e800:	b29a      	uxth	r2, r3
 800e802:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e806:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800e808:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e80c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	891b      	ldrh	r3, [r3, #8]
 800e814:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e818:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e81c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	6959      	ldr	r1, [r3, #20]
 800e824:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e828:	b29b      	uxth	r3, r3
 800e82a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e82e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e832:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e836:	6800      	ldr	r0, [r0, #0]
 800e838:	f000 fe15 	bl	800f466 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800e83c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e840:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e844:	681a      	ldr	r2, [r3, #0]
 800e846:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e84a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	781b      	ldrb	r3, [r3, #0]
 800e852:	009b      	lsls	r3, r3, #2
 800e854:	4413      	add	r3, r2
 800e856:	881b      	ldrh	r3, [r3, #0]
 800e858:	b29b      	uxth	r3, r3
 800e85a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e85e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e862:	817b      	strh	r3, [r7, #10]
 800e864:	897b      	ldrh	r3, [r7, #10]
 800e866:	f083 0310 	eor.w	r3, r3, #16
 800e86a:	817b      	strh	r3, [r7, #10]
 800e86c:	897b      	ldrh	r3, [r7, #10]
 800e86e:	f083 0320 	eor.w	r3, r3, #32
 800e872:	817b      	strh	r3, [r7, #10]
 800e874:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e878:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e87c:	681a      	ldr	r2, [r3, #0]
 800e87e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e882:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	781b      	ldrb	r3, [r3, #0]
 800e88a:	009b      	lsls	r3, r3, #2
 800e88c:	441a      	add	r2, r3
 800e88e:	897b      	ldrh	r3, [r7, #10]
 800e890:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e894:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e898:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e89c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e8a0:	b29b      	uxth	r3, r3
 800e8a2:	8013      	strh	r3, [r2, #0]
 800e8a4:	f000 bc9f 	b.w	800f1e6 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800e8a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	7b1b      	ldrb	r3, [r3, #12]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	f040 80ae 	bne.w	800ea16 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800e8ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	699a      	ldr	r2, [r3, #24]
 800e8c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	691b      	ldr	r3, [r3, #16]
 800e8d2:	429a      	cmp	r2, r3
 800e8d4:	d917      	bls.n	800e906 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800e8d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	691b      	ldr	r3, [r3, #16]
 800e8e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800e8e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	699a      	ldr	r2, [r3, #24]
 800e8f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e8f6:	1ad2      	subs	r2, r2, r3
 800e8f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	619a      	str	r2, [r3, #24]
 800e904:	e00e      	b.n	800e924 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800e906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e90a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	699b      	ldr	r3, [r3, #24]
 800e912:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800e916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e91a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	2200      	movs	r2, #0
 800e922:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800e924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e928:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e932:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e936:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e940:	b29b      	uxth	r3, r3
 800e942:	461a      	mov	r2, r3
 800e944:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e948:	4413      	add	r3, r2
 800e94a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e94e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e952:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	781b      	ldrb	r3, [r3, #0]
 800e95a:	00da      	lsls	r2, r3, #3
 800e95c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e960:	4413      	add	r3, r2
 800e962:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e966:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e96a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e96e:	2b3e      	cmp	r3, #62	; 0x3e
 800e970:	d91d      	bls.n	800e9ae <USB_EPStartXfer+0xe28>
 800e972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e976:	095b      	lsrs	r3, r3, #5
 800e978:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e97c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e980:	f003 031f 	and.w	r3, r3, #31
 800e984:	2b00      	cmp	r3, #0
 800e986:	d104      	bne.n	800e992 <USB_EPStartXfer+0xe0c>
 800e988:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e98c:	3b01      	subs	r3, #1
 800e98e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e992:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e996:	b29b      	uxth	r3, r3
 800e998:	029b      	lsls	r3, r3, #10
 800e99a:	b29b      	uxth	r3, r3
 800e99c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e9a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e9a4:	b29a      	uxth	r2, r3
 800e9a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e9aa:	801a      	strh	r2, [r3, #0]
 800e9ac:	e3e1      	b.n	800f172 <USB_EPStartXfer+0x15ec>
 800e9ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d116      	bne.n	800e9e4 <USB_EPStartXfer+0xe5e>
 800e9b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e9ba:	881b      	ldrh	r3, [r3, #0]
 800e9bc:	b29b      	uxth	r3, r3
 800e9be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e9c2:	b29a      	uxth	r2, r3
 800e9c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e9c8:	801a      	strh	r2, [r3, #0]
 800e9ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e9ce:	881b      	ldrh	r3, [r3, #0]
 800e9d0:	b29b      	uxth	r3, r3
 800e9d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e9d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e9da:	b29a      	uxth	r2, r3
 800e9dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e9e0:	801a      	strh	r2, [r3, #0]
 800e9e2:	e3c6      	b.n	800f172 <USB_EPStartXfer+0x15ec>
 800e9e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e9e8:	085b      	lsrs	r3, r3, #1
 800e9ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e9ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e9f2:	f003 0301 	and.w	r3, r3, #1
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d004      	beq.n	800ea04 <USB_EPStartXfer+0xe7e>
 800e9fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e9fe:	3301      	adds	r3, #1
 800ea00:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ea04:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ea08:	b29b      	uxth	r3, r3
 800ea0a:	029b      	lsls	r3, r3, #10
 800ea0c:	b29a      	uxth	r2, r3
 800ea0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ea12:	801a      	strh	r2, [r3, #0]
 800ea14:	e3ad      	b.n	800f172 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800ea16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	78db      	ldrb	r3, [r3, #3]
 800ea22:	2b02      	cmp	r3, #2
 800ea24:	f040 8200 	bne.w	800ee28 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800ea28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	785b      	ldrb	r3, [r3, #1]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	f040 8091 	bne.w	800eb5c <USB_EPStartXfer+0xfd6>
 800ea3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ea48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ea56:	b29b      	uxth	r3, r3
 800ea58:	461a      	mov	r2, r3
 800ea5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ea5e:	4413      	add	r3, r2
 800ea60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ea64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	781b      	ldrb	r3, [r3, #0]
 800ea70:	00da      	lsls	r2, r3, #3
 800ea72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ea76:	4413      	add	r3, r2
 800ea78:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ea7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ea80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	691b      	ldr	r3, [r3, #16]
 800ea8c:	2b3e      	cmp	r3, #62	; 0x3e
 800ea8e:	d925      	bls.n	800eadc <USB_EPStartXfer+0xf56>
 800ea90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	691b      	ldr	r3, [r3, #16]
 800ea9c:	095b      	lsrs	r3, r3, #5
 800ea9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800eaa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eaa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	691b      	ldr	r3, [r3, #16]
 800eaae:	f003 031f 	and.w	r3, r3, #31
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d104      	bne.n	800eac0 <USB_EPStartXfer+0xf3a>
 800eab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eaba:	3b01      	subs	r3, #1
 800eabc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800eac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eac4:	b29b      	uxth	r3, r3
 800eac6:	029b      	lsls	r3, r3, #10
 800eac8:	b29b      	uxth	r3, r3
 800eaca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eace:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ead2:	b29a      	uxth	r2, r3
 800ead4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ead8:	801a      	strh	r2, [r3, #0]
 800eada:	e074      	b.n	800ebc6 <USB_EPStartXfer+0x1040>
 800eadc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eae0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	691b      	ldr	r3, [r3, #16]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d116      	bne.n	800eb1a <USB_EPStartXfer+0xf94>
 800eaec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800eaf0:	881b      	ldrh	r3, [r3, #0]
 800eaf2:	b29b      	uxth	r3, r3
 800eaf4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800eaf8:	b29a      	uxth	r2, r3
 800eafa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800eafe:	801a      	strh	r2, [r3, #0]
 800eb00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800eb04:	881b      	ldrh	r3, [r3, #0]
 800eb06:	b29b      	uxth	r3, r3
 800eb08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eb0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eb10:	b29a      	uxth	r2, r3
 800eb12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800eb16:	801a      	strh	r2, [r3, #0]
 800eb18:	e055      	b.n	800ebc6 <USB_EPStartXfer+0x1040>
 800eb1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	691b      	ldr	r3, [r3, #16]
 800eb26:	085b      	lsrs	r3, r3, #1
 800eb28:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800eb2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	691b      	ldr	r3, [r3, #16]
 800eb38:	f003 0301 	and.w	r3, r3, #1
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d004      	beq.n	800eb4a <USB_EPStartXfer+0xfc4>
 800eb40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb44:	3301      	adds	r3, #1
 800eb46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800eb4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb4e:	b29b      	uxth	r3, r3
 800eb50:	029b      	lsls	r3, r3, #10
 800eb52:	b29a      	uxth	r2, r3
 800eb54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800eb58:	801a      	strh	r2, [r3, #0]
 800eb5a:	e034      	b.n	800ebc6 <USB_EPStartXfer+0x1040>
 800eb5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	785b      	ldrb	r3, [r3, #1]
 800eb68:	2b01      	cmp	r3, #1
 800eb6a:	d12c      	bne.n	800ebc6 <USB_EPStartXfer+0x1040>
 800eb6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800eb7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eb88:	b29b      	uxth	r3, r3
 800eb8a:	461a      	mov	r2, r3
 800eb8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800eb90:	4413      	add	r3, r2
 800eb92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800eb96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	781b      	ldrb	r3, [r3, #0]
 800eba2:	00da      	lsls	r2, r3, #3
 800eba4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800eba8:	4413      	add	r3, r2
 800ebaa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ebae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ebb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ebb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	691b      	ldr	r3, [r3, #16]
 800ebbe:	b29a      	uxth	r2, r3
 800ebc0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ebc4:	801a      	strh	r2, [r3, #0]
 800ebc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ebca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ebd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ebd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	785b      	ldrb	r3, [r3, #1]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	f040 8091 	bne.w	800ed08 <USB_EPStartXfer+0x1182>
 800ebe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ebea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ebf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ebf8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ec02:	b29b      	uxth	r3, r3
 800ec04:	461a      	mov	r2, r3
 800ec06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ec0a:	4413      	add	r3, r2
 800ec0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ec10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	781b      	ldrb	r3, [r3, #0]
 800ec1c:	00da      	lsls	r2, r3, #3
 800ec1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ec22:	4413      	add	r3, r2
 800ec24:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ec28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ec2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	691b      	ldr	r3, [r3, #16]
 800ec38:	2b3e      	cmp	r3, #62	; 0x3e
 800ec3a:	d925      	bls.n	800ec88 <USB_EPStartXfer+0x1102>
 800ec3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	691b      	ldr	r3, [r3, #16]
 800ec48:	095b      	lsrs	r3, r3, #5
 800ec4a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ec4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	691b      	ldr	r3, [r3, #16]
 800ec5a:	f003 031f 	and.w	r3, r3, #31
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d104      	bne.n	800ec6c <USB_EPStartXfer+0x10e6>
 800ec62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ec66:	3b01      	subs	r3, #1
 800ec68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ec6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ec70:	b29b      	uxth	r3, r3
 800ec72:	029b      	lsls	r3, r3, #10
 800ec74:	b29b      	uxth	r3, r3
 800ec76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ec7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ec7e:	b29a      	uxth	r2, r3
 800ec80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ec84:	801a      	strh	r2, [r3, #0]
 800ec86:	e06d      	b.n	800ed64 <USB_EPStartXfer+0x11de>
 800ec88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	691b      	ldr	r3, [r3, #16]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d116      	bne.n	800ecc6 <USB_EPStartXfer+0x1140>
 800ec98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ec9c:	881b      	ldrh	r3, [r3, #0]
 800ec9e:	b29b      	uxth	r3, r3
 800eca0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800eca4:	b29a      	uxth	r2, r3
 800eca6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ecaa:	801a      	strh	r2, [r3, #0]
 800ecac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ecb0:	881b      	ldrh	r3, [r3, #0]
 800ecb2:	b29b      	uxth	r3, r3
 800ecb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ecb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ecbc:	b29a      	uxth	r2, r3
 800ecbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ecc2:	801a      	strh	r2, [r3, #0]
 800ecc4:	e04e      	b.n	800ed64 <USB_EPStartXfer+0x11de>
 800ecc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ecca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	691b      	ldr	r3, [r3, #16]
 800ecd2:	085b      	lsrs	r3, r3, #1
 800ecd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ecd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ecdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	691b      	ldr	r3, [r3, #16]
 800ece4:	f003 0301 	and.w	r3, r3, #1
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d004      	beq.n	800ecf6 <USB_EPStartXfer+0x1170>
 800ecec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ecf0:	3301      	adds	r3, #1
 800ecf2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ecf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ecfa:	b29b      	uxth	r3, r3
 800ecfc:	029b      	lsls	r3, r3, #10
 800ecfe:	b29a      	uxth	r2, r3
 800ed00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ed04:	801a      	strh	r2, [r3, #0]
 800ed06:	e02d      	b.n	800ed64 <USB_EPStartXfer+0x11de>
 800ed08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	785b      	ldrb	r3, [r3, #1]
 800ed14:	2b01      	cmp	r3, #1
 800ed16:	d125      	bne.n	800ed64 <USB_EPStartXfer+0x11de>
 800ed18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ed26:	b29b      	uxth	r3, r3
 800ed28:	461a      	mov	r2, r3
 800ed2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ed2e:	4413      	add	r3, r2
 800ed30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ed34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	781b      	ldrb	r3, [r3, #0]
 800ed40:	00da      	lsls	r2, r3, #3
 800ed42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ed46:	4413      	add	r3, r2
 800ed48:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ed4c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ed50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	691b      	ldr	r3, [r3, #16]
 800ed5c:	b29a      	uxth	r2, r3
 800ed5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ed62:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800ed64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	69db      	ldr	r3, [r3, #28]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	f000 81fe 	beq.w	800f172 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800ed76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ed7e:	681a      	ldr	r2, [r3, #0]
 800ed80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	781b      	ldrb	r3, [r3, #0]
 800ed8c:	009b      	lsls	r3, r3, #2
 800ed8e:	4413      	add	r3, r2
 800ed90:	881b      	ldrh	r3, [r3, #0]
 800ed92:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ed96:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ed9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d005      	beq.n	800edae <USB_EPStartXfer+0x1228>
 800eda2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800eda6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d10d      	bne.n	800edca <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800edae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800edb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	f040 81db 	bne.w	800f172 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800edbc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800edc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	f040 81d4 	bne.w	800f172 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800edca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800edce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800edd2:	681a      	ldr	r2, [r3, #0]
 800edd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800edd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	781b      	ldrb	r3, [r3, #0]
 800ede0:	009b      	lsls	r3, r3, #2
 800ede2:	4413      	add	r3, r2
 800ede4:	881b      	ldrh	r3, [r3, #0]
 800ede6:	b29b      	uxth	r3, r3
 800ede8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800edec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800edf0:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800edf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800edf8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800edfc:	681a      	ldr	r2, [r3, #0]
 800edfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	781b      	ldrb	r3, [r3, #0]
 800ee0a:	009b      	lsls	r3, r3, #2
 800ee0c:	441a      	add	r2, r3
 800ee0e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800ee12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ee16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ee1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ee1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ee22:	b29b      	uxth	r3, r3
 800ee24:	8013      	strh	r3, [r2, #0]
 800ee26:	e1a4      	b.n	800f172 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800ee28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	78db      	ldrb	r3, [r3, #3]
 800ee34:	2b01      	cmp	r3, #1
 800ee36:	f040 819a 	bne.w	800f16e <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800ee3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	699a      	ldr	r2, [r3, #24]
 800ee46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	691b      	ldr	r3, [r3, #16]
 800ee52:	429a      	cmp	r2, r3
 800ee54:	d917      	bls.n	800ee86 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800ee56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	691b      	ldr	r3, [r3, #16]
 800ee62:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800ee66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	699a      	ldr	r2, [r3, #24]
 800ee72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ee76:	1ad2      	subs	r2, r2, r3
 800ee78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	619a      	str	r2, [r3, #24]
 800ee84:	e00e      	b.n	800eea4 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800ee86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	699b      	ldr	r3, [r3, #24]
 800ee92:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800ee96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	2200      	movs	r2, #0
 800eea2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800eea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eea8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	785b      	ldrb	r3, [r3, #1]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d178      	bne.n	800efa6 <USB_EPStartXfer+0x1420>
 800eeb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eeb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800eec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eec6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eed0:	b29b      	uxth	r3, r3
 800eed2:	461a      	mov	r2, r3
 800eed4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800eed8:	4413      	add	r3, r2
 800eeda:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800eede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eee2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	781b      	ldrb	r3, [r3, #0]
 800eeea:	00da      	lsls	r2, r3, #3
 800eeec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800eef0:	4413      	add	r3, r2
 800eef2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800eef6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800eefa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eefe:	2b3e      	cmp	r3, #62	; 0x3e
 800ef00:	d91d      	bls.n	800ef3e <USB_EPStartXfer+0x13b8>
 800ef02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ef06:	095b      	lsrs	r3, r3, #5
 800ef08:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ef0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ef10:	f003 031f 	and.w	r3, r3, #31
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d104      	bne.n	800ef22 <USB_EPStartXfer+0x139c>
 800ef18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ef1c:	3b01      	subs	r3, #1
 800ef1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ef22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ef26:	b29b      	uxth	r3, r3
 800ef28:	029b      	lsls	r3, r3, #10
 800ef2a:	b29b      	uxth	r3, r3
 800ef2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ef30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ef34:	b29a      	uxth	r2, r3
 800ef36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ef3a:	801a      	strh	r2, [r3, #0]
 800ef3c:	e064      	b.n	800f008 <USB_EPStartXfer+0x1482>
 800ef3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d116      	bne.n	800ef74 <USB_EPStartXfer+0x13ee>
 800ef46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ef4a:	881b      	ldrh	r3, [r3, #0]
 800ef4c:	b29b      	uxth	r3, r3
 800ef4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ef52:	b29a      	uxth	r2, r3
 800ef54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ef58:	801a      	strh	r2, [r3, #0]
 800ef5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ef5e:	881b      	ldrh	r3, [r3, #0]
 800ef60:	b29b      	uxth	r3, r3
 800ef62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ef66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ef6a:	b29a      	uxth	r2, r3
 800ef6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ef70:	801a      	strh	r2, [r3, #0]
 800ef72:	e049      	b.n	800f008 <USB_EPStartXfer+0x1482>
 800ef74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ef78:	085b      	lsrs	r3, r3, #1
 800ef7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ef7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ef82:	f003 0301 	and.w	r3, r3, #1
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d004      	beq.n	800ef94 <USB_EPStartXfer+0x140e>
 800ef8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ef8e:	3301      	adds	r3, #1
 800ef90:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ef94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ef98:	b29b      	uxth	r3, r3
 800ef9a:	029b      	lsls	r3, r3, #10
 800ef9c:	b29a      	uxth	r2, r3
 800ef9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800efa2:	801a      	strh	r2, [r3, #0]
 800efa4:	e030      	b.n	800f008 <USB_EPStartXfer+0x1482>
 800efa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800efaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	785b      	ldrb	r3, [r3, #1]
 800efb2:	2b01      	cmp	r3, #1
 800efb4:	d128      	bne.n	800f008 <USB_EPStartXfer+0x1482>
 800efb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800efba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800efc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800efc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800efd2:	b29b      	uxth	r3, r3
 800efd4:	461a      	mov	r2, r3
 800efd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800efda:	4413      	add	r3, r2
 800efdc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800efe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800efe4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	781b      	ldrb	r3, [r3, #0]
 800efec:	00da      	lsls	r2, r3, #3
 800efee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800eff2:	4413      	add	r3, r2
 800eff4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800eff8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800effc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f000:	b29a      	uxth	r2, r3
 800f002:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800f006:	801a      	strh	r2, [r3, #0]
 800f008:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f00c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f016:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f01a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	785b      	ldrb	r3, [r3, #1]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d178      	bne.n	800f118 <USB_EPStartXfer+0x1592>
 800f026:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f02a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f034:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f038:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f042:	b29b      	uxth	r3, r3
 800f044:	461a      	mov	r2, r3
 800f046:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f04a:	4413      	add	r3, r2
 800f04c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f050:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f054:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	781b      	ldrb	r3, [r3, #0]
 800f05c:	00da      	lsls	r2, r3, #3
 800f05e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f062:	4413      	add	r3, r2
 800f064:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f068:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f06c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f070:	2b3e      	cmp	r3, #62	; 0x3e
 800f072:	d91d      	bls.n	800f0b0 <USB_EPStartXfer+0x152a>
 800f074:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f078:	095b      	lsrs	r3, r3, #5
 800f07a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f07e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f082:	f003 031f 	and.w	r3, r3, #31
 800f086:	2b00      	cmp	r3, #0
 800f088:	d104      	bne.n	800f094 <USB_EPStartXfer+0x150e>
 800f08a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f08e:	3b01      	subs	r3, #1
 800f090:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f094:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f098:	b29b      	uxth	r3, r3
 800f09a:	029b      	lsls	r3, r3, #10
 800f09c:	b29b      	uxth	r3, r3
 800f09e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f0a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f0a6:	b29a      	uxth	r2, r3
 800f0a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f0ac:	801a      	strh	r2, [r3, #0]
 800f0ae:	e060      	b.n	800f172 <USB_EPStartXfer+0x15ec>
 800f0b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d116      	bne.n	800f0e6 <USB_EPStartXfer+0x1560>
 800f0b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f0bc:	881b      	ldrh	r3, [r3, #0]
 800f0be:	b29b      	uxth	r3, r3
 800f0c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f0c4:	b29a      	uxth	r2, r3
 800f0c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f0ca:	801a      	strh	r2, [r3, #0]
 800f0cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f0d0:	881b      	ldrh	r3, [r3, #0]
 800f0d2:	b29b      	uxth	r3, r3
 800f0d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f0d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f0dc:	b29a      	uxth	r2, r3
 800f0de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f0e2:	801a      	strh	r2, [r3, #0]
 800f0e4:	e045      	b.n	800f172 <USB_EPStartXfer+0x15ec>
 800f0e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f0ea:	085b      	lsrs	r3, r3, #1
 800f0ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f0f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f0f4:	f003 0301 	and.w	r3, r3, #1
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d004      	beq.n	800f106 <USB_EPStartXfer+0x1580>
 800f0fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f100:	3301      	adds	r3, #1
 800f102:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f106:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f10a:	b29b      	uxth	r3, r3
 800f10c:	029b      	lsls	r3, r3, #10
 800f10e:	b29a      	uxth	r2, r3
 800f110:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f114:	801a      	strh	r2, [r3, #0]
 800f116:	e02c      	b.n	800f172 <USB_EPStartXfer+0x15ec>
 800f118:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f11c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	785b      	ldrb	r3, [r3, #1]
 800f124:	2b01      	cmp	r3, #1
 800f126:	d124      	bne.n	800f172 <USB_EPStartXfer+0x15ec>
 800f128:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f12c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f136:	b29b      	uxth	r3, r3
 800f138:	461a      	mov	r2, r3
 800f13a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800f13e:	4413      	add	r3, r2
 800f140:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f148:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	781b      	ldrb	r3, [r3, #0]
 800f150:	00da      	lsls	r2, r3, #3
 800f152:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800f156:	4413      	add	r3, r2
 800f158:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f15c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f160:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f164:	b29a      	uxth	r2, r3
 800f166:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f16a:	801a      	strh	r2, [r3, #0]
 800f16c:	e001      	b.n	800f172 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800f16e:	2301      	movs	r3, #1
 800f170:	e03a      	b.n	800f1e8 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f176:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f17a:	681a      	ldr	r2, [r3, #0]
 800f17c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f180:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	781b      	ldrb	r3, [r3, #0]
 800f188:	009b      	lsls	r3, r3, #2
 800f18a:	4413      	add	r3, r2
 800f18c:	881b      	ldrh	r3, [r3, #0]
 800f18e:	b29b      	uxth	r3, r3
 800f190:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f198:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800f19c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f1a0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f1a4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800f1a8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f1ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f1b0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800f1b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f1b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f1bc:	681a      	ldr	r2, [r3, #0]
 800f1be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f1c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	781b      	ldrb	r3, [r3, #0]
 800f1ca:	009b      	lsls	r3, r3, #2
 800f1cc:	441a      	add	r2, r3
 800f1ce:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f1d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f1d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f1da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f1de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1e2:	b29b      	uxth	r3, r3
 800f1e4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800f1e6:	2300      	movs	r3, #0
}
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	bd80      	pop	{r7, pc}

0800f1f2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f1f2:	b480      	push	{r7}
 800f1f4:	b085      	sub	sp, #20
 800f1f6:	af00      	add	r7, sp, #0
 800f1f8:	6078      	str	r0, [r7, #4]
 800f1fa:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800f1fc:	683b      	ldr	r3, [r7, #0]
 800f1fe:	785b      	ldrb	r3, [r3, #1]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d020      	beq.n	800f246 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800f204:	687a      	ldr	r2, [r7, #4]
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	781b      	ldrb	r3, [r3, #0]
 800f20a:	009b      	lsls	r3, r3, #2
 800f20c:	4413      	add	r3, r2
 800f20e:	881b      	ldrh	r3, [r3, #0]
 800f210:	b29b      	uxth	r3, r3
 800f212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f216:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f21a:	81bb      	strh	r3, [r7, #12]
 800f21c:	89bb      	ldrh	r3, [r7, #12]
 800f21e:	f083 0310 	eor.w	r3, r3, #16
 800f222:	81bb      	strh	r3, [r7, #12]
 800f224:	687a      	ldr	r2, [r7, #4]
 800f226:	683b      	ldr	r3, [r7, #0]
 800f228:	781b      	ldrb	r3, [r3, #0]
 800f22a:	009b      	lsls	r3, r3, #2
 800f22c:	441a      	add	r2, r3
 800f22e:	89bb      	ldrh	r3, [r7, #12]
 800f230:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f234:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f238:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f23c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f240:	b29b      	uxth	r3, r3
 800f242:	8013      	strh	r3, [r2, #0]
 800f244:	e01f      	b.n	800f286 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800f246:	687a      	ldr	r2, [r7, #4]
 800f248:	683b      	ldr	r3, [r7, #0]
 800f24a:	781b      	ldrb	r3, [r3, #0]
 800f24c:	009b      	lsls	r3, r3, #2
 800f24e:	4413      	add	r3, r2
 800f250:	881b      	ldrh	r3, [r3, #0]
 800f252:	b29b      	uxth	r3, r3
 800f254:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f25c:	81fb      	strh	r3, [r7, #14]
 800f25e:	89fb      	ldrh	r3, [r7, #14]
 800f260:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f264:	81fb      	strh	r3, [r7, #14]
 800f266:	687a      	ldr	r2, [r7, #4]
 800f268:	683b      	ldr	r3, [r7, #0]
 800f26a:	781b      	ldrb	r3, [r3, #0]
 800f26c:	009b      	lsls	r3, r3, #2
 800f26e:	441a      	add	r2, r3
 800f270:	89fb      	ldrh	r3, [r7, #14]
 800f272:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f276:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f27a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f27e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f282:	b29b      	uxth	r3, r3
 800f284:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800f286:	2300      	movs	r3, #0
}
 800f288:	4618      	mov	r0, r3
 800f28a:	3714      	adds	r7, #20
 800f28c:	46bd      	mov	sp, r7
 800f28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f292:	4770      	bx	lr

0800f294 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f294:	b480      	push	{r7}
 800f296:	b087      	sub	sp, #28
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
 800f29c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800f29e:	683b      	ldr	r3, [r7, #0]
 800f2a0:	7b1b      	ldrb	r3, [r3, #12]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	f040 809d 	bne.w	800f3e2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	785b      	ldrb	r3, [r3, #1]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d04c      	beq.n	800f34a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f2b0:	687a      	ldr	r2, [r7, #4]
 800f2b2:	683b      	ldr	r3, [r7, #0]
 800f2b4:	781b      	ldrb	r3, [r3, #0]
 800f2b6:	009b      	lsls	r3, r3, #2
 800f2b8:	4413      	add	r3, r2
 800f2ba:	881b      	ldrh	r3, [r3, #0]
 800f2bc:	823b      	strh	r3, [r7, #16]
 800f2be:	8a3b      	ldrh	r3, [r7, #16]
 800f2c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d01b      	beq.n	800f300 <USB_EPClearStall+0x6c>
 800f2c8:	687a      	ldr	r2, [r7, #4]
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	781b      	ldrb	r3, [r3, #0]
 800f2ce:	009b      	lsls	r3, r3, #2
 800f2d0:	4413      	add	r3, r2
 800f2d2:	881b      	ldrh	r3, [r3, #0]
 800f2d4:	b29b      	uxth	r3, r3
 800f2d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f2da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f2de:	81fb      	strh	r3, [r7, #14]
 800f2e0:	687a      	ldr	r2, [r7, #4]
 800f2e2:	683b      	ldr	r3, [r7, #0]
 800f2e4:	781b      	ldrb	r3, [r3, #0]
 800f2e6:	009b      	lsls	r3, r3, #2
 800f2e8:	441a      	add	r2, r3
 800f2ea:	89fb      	ldrh	r3, [r7, #14]
 800f2ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f2f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f2f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f2f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f2fc:	b29b      	uxth	r3, r3
 800f2fe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f300:	683b      	ldr	r3, [r7, #0]
 800f302:	78db      	ldrb	r3, [r3, #3]
 800f304:	2b01      	cmp	r3, #1
 800f306:	d06c      	beq.n	800f3e2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f308:	687a      	ldr	r2, [r7, #4]
 800f30a:	683b      	ldr	r3, [r7, #0]
 800f30c:	781b      	ldrb	r3, [r3, #0]
 800f30e:	009b      	lsls	r3, r3, #2
 800f310:	4413      	add	r3, r2
 800f312:	881b      	ldrh	r3, [r3, #0]
 800f314:	b29b      	uxth	r3, r3
 800f316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f31a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f31e:	81bb      	strh	r3, [r7, #12]
 800f320:	89bb      	ldrh	r3, [r7, #12]
 800f322:	f083 0320 	eor.w	r3, r3, #32
 800f326:	81bb      	strh	r3, [r7, #12]
 800f328:	687a      	ldr	r2, [r7, #4]
 800f32a:	683b      	ldr	r3, [r7, #0]
 800f32c:	781b      	ldrb	r3, [r3, #0]
 800f32e:	009b      	lsls	r3, r3, #2
 800f330:	441a      	add	r2, r3
 800f332:	89bb      	ldrh	r3, [r7, #12]
 800f334:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f338:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f33c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f344:	b29b      	uxth	r3, r3
 800f346:	8013      	strh	r3, [r2, #0]
 800f348:	e04b      	b.n	800f3e2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f34a:	687a      	ldr	r2, [r7, #4]
 800f34c:	683b      	ldr	r3, [r7, #0]
 800f34e:	781b      	ldrb	r3, [r3, #0]
 800f350:	009b      	lsls	r3, r3, #2
 800f352:	4413      	add	r3, r2
 800f354:	881b      	ldrh	r3, [r3, #0]
 800f356:	82fb      	strh	r3, [r7, #22]
 800f358:	8afb      	ldrh	r3, [r7, #22]
 800f35a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d01b      	beq.n	800f39a <USB_EPClearStall+0x106>
 800f362:	687a      	ldr	r2, [r7, #4]
 800f364:	683b      	ldr	r3, [r7, #0]
 800f366:	781b      	ldrb	r3, [r3, #0]
 800f368:	009b      	lsls	r3, r3, #2
 800f36a:	4413      	add	r3, r2
 800f36c:	881b      	ldrh	r3, [r3, #0]
 800f36e:	b29b      	uxth	r3, r3
 800f370:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f378:	82bb      	strh	r3, [r7, #20]
 800f37a:	687a      	ldr	r2, [r7, #4]
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	781b      	ldrb	r3, [r3, #0]
 800f380:	009b      	lsls	r3, r3, #2
 800f382:	441a      	add	r2, r3
 800f384:	8abb      	ldrh	r3, [r7, #20]
 800f386:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f38a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f38e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f396:	b29b      	uxth	r3, r3
 800f398:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f39a:	687a      	ldr	r2, [r7, #4]
 800f39c:	683b      	ldr	r3, [r7, #0]
 800f39e:	781b      	ldrb	r3, [r3, #0]
 800f3a0:	009b      	lsls	r3, r3, #2
 800f3a2:	4413      	add	r3, r2
 800f3a4:	881b      	ldrh	r3, [r3, #0]
 800f3a6:	b29b      	uxth	r3, r3
 800f3a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f3ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f3b0:	827b      	strh	r3, [r7, #18]
 800f3b2:	8a7b      	ldrh	r3, [r7, #18]
 800f3b4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f3b8:	827b      	strh	r3, [r7, #18]
 800f3ba:	8a7b      	ldrh	r3, [r7, #18]
 800f3bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f3c0:	827b      	strh	r3, [r7, #18]
 800f3c2:	687a      	ldr	r2, [r7, #4]
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	781b      	ldrb	r3, [r3, #0]
 800f3c8:	009b      	lsls	r3, r3, #2
 800f3ca:	441a      	add	r2, r3
 800f3cc:	8a7b      	ldrh	r3, [r7, #18]
 800f3ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f3d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f3d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f3da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3de:	b29b      	uxth	r3, r3
 800f3e0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800f3e2:	2300      	movs	r3, #0
}
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	371c      	adds	r7, #28
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ee:	4770      	bx	lr

0800f3f0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800f3f0:	b480      	push	{r7}
 800f3f2:	b083      	sub	sp, #12
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]
 800f3f8:	460b      	mov	r3, r1
 800f3fa:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800f3fc:	78fb      	ldrb	r3, [r7, #3]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d103      	bne.n	800f40a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	2280      	movs	r2, #128	; 0x80
 800f406:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800f40a:	2300      	movs	r3, #0
}
 800f40c:	4618      	mov	r0, r3
 800f40e:	370c      	adds	r7, #12
 800f410:	46bd      	mov	sp, r7
 800f412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f416:	4770      	bx	lr

0800f418 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800f418:	b480      	push	{r7}
 800f41a:	b083      	sub	sp, #12
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f426:	b29b      	uxth	r3, r3
 800f428:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f42c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f430:	b29a      	uxth	r2, r3
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800f438:	2300      	movs	r3, #0
}
 800f43a:	4618      	mov	r0, r3
 800f43c:	370c      	adds	r7, #12
 800f43e:	46bd      	mov	sp, r7
 800f440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f444:	4770      	bx	lr

0800f446 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800f446:	b480      	push	{r7}
 800f448:	b085      	sub	sp, #20
 800f44a:	af00      	add	r7, sp, #0
 800f44c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800f454:	b29b      	uxth	r3, r3
 800f456:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800f458:	68fb      	ldr	r3, [r7, #12]
}
 800f45a:	4618      	mov	r0, r3
 800f45c:	3714      	adds	r7, #20
 800f45e:	46bd      	mov	sp, r7
 800f460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f464:	4770      	bx	lr

0800f466 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800f466:	b480      	push	{r7}
 800f468:	b08d      	sub	sp, #52	; 0x34
 800f46a:	af00      	add	r7, sp, #0
 800f46c:	60f8      	str	r0, [r7, #12]
 800f46e:	60b9      	str	r1, [r7, #8]
 800f470:	4611      	mov	r1, r2
 800f472:	461a      	mov	r2, r3
 800f474:	460b      	mov	r3, r1
 800f476:	80fb      	strh	r3, [r7, #6]
 800f478:	4613      	mov	r3, r2
 800f47a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800f47c:	88bb      	ldrh	r3, [r7, #4]
 800f47e:	3301      	adds	r3, #1
 800f480:	085b      	lsrs	r3, r3, #1
 800f482:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800f488:	68bb      	ldr	r3, [r7, #8]
 800f48a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f48c:	88fa      	ldrh	r2, [r7, #6]
 800f48e:	69fb      	ldr	r3, [r7, #28]
 800f490:	4413      	add	r3, r2
 800f492:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f496:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800f498:	6a3b      	ldr	r3, [r7, #32]
 800f49a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f49c:	e01b      	b.n	800f4d6 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800f49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4a0:	781b      	ldrb	r3, [r3, #0]
 800f4a2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800f4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4a6:	3301      	adds	r3, #1
 800f4a8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800f4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ac:	781b      	ldrb	r3, [r3, #0]
 800f4ae:	b29b      	uxth	r3, r3
 800f4b0:	021b      	lsls	r3, r3, #8
 800f4b2:	b29b      	uxth	r3, r3
 800f4b4:	461a      	mov	r2, r3
 800f4b6:	69bb      	ldr	r3, [r7, #24]
 800f4b8:	4313      	orrs	r3, r2
 800f4ba:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800f4bc:	697b      	ldr	r3, [r7, #20]
 800f4be:	b29a      	uxth	r2, r3
 800f4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800f4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c6:	3302      	adds	r3, #2
 800f4c8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800f4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4cc:	3301      	adds	r3, #1
 800f4ce:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800f4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4d2:	3b01      	subs	r3, #1
 800f4d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d1e0      	bne.n	800f49e <USB_WritePMA+0x38>
  }
}
 800f4dc:	bf00      	nop
 800f4de:	bf00      	nop
 800f4e0:	3734      	adds	r7, #52	; 0x34
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e8:	4770      	bx	lr

0800f4ea <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800f4ea:	b480      	push	{r7}
 800f4ec:	b08b      	sub	sp, #44	; 0x2c
 800f4ee:	af00      	add	r7, sp, #0
 800f4f0:	60f8      	str	r0, [r7, #12]
 800f4f2:	60b9      	str	r1, [r7, #8]
 800f4f4:	4611      	mov	r1, r2
 800f4f6:	461a      	mov	r2, r3
 800f4f8:	460b      	mov	r3, r1
 800f4fa:	80fb      	strh	r3, [r7, #6]
 800f4fc:	4613      	mov	r3, r2
 800f4fe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800f500:	88bb      	ldrh	r3, [r7, #4]
 800f502:	085b      	lsrs	r3, r3, #1
 800f504:	b29b      	uxth	r3, r3
 800f506:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800f50c:	68bb      	ldr	r3, [r7, #8]
 800f50e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f510:	88fa      	ldrh	r2, [r7, #6]
 800f512:	697b      	ldr	r3, [r7, #20]
 800f514:	4413      	add	r3, r2
 800f516:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f51a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800f51c:	69bb      	ldr	r3, [r7, #24]
 800f51e:	627b      	str	r3, [r7, #36]	; 0x24
 800f520:	e018      	b.n	800f554 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800f522:	6a3b      	ldr	r3, [r7, #32]
 800f524:	881b      	ldrh	r3, [r3, #0]
 800f526:	b29b      	uxth	r3, r3
 800f528:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800f52a:	6a3b      	ldr	r3, [r7, #32]
 800f52c:	3302      	adds	r3, #2
 800f52e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800f530:	693b      	ldr	r3, [r7, #16]
 800f532:	b2da      	uxtb	r2, r3
 800f534:	69fb      	ldr	r3, [r7, #28]
 800f536:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800f538:	69fb      	ldr	r3, [r7, #28]
 800f53a:	3301      	adds	r3, #1
 800f53c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800f53e:	693b      	ldr	r3, [r7, #16]
 800f540:	0a1b      	lsrs	r3, r3, #8
 800f542:	b2da      	uxtb	r2, r3
 800f544:	69fb      	ldr	r3, [r7, #28]
 800f546:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800f548:	69fb      	ldr	r3, [r7, #28]
 800f54a:	3301      	adds	r3, #1
 800f54c:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800f54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f550:	3b01      	subs	r3, #1
 800f552:	627b      	str	r3, [r7, #36]	; 0x24
 800f554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f556:	2b00      	cmp	r3, #0
 800f558:	d1e3      	bne.n	800f522 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800f55a:	88bb      	ldrh	r3, [r7, #4]
 800f55c:	f003 0301 	and.w	r3, r3, #1
 800f560:	b29b      	uxth	r3, r3
 800f562:	2b00      	cmp	r3, #0
 800f564:	d007      	beq.n	800f576 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800f566:	6a3b      	ldr	r3, [r7, #32]
 800f568:	881b      	ldrh	r3, [r3, #0]
 800f56a:	b29b      	uxth	r3, r3
 800f56c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800f56e:	693b      	ldr	r3, [r7, #16]
 800f570:	b2da      	uxtb	r2, r3
 800f572:	69fb      	ldr	r3, [r7, #28]
 800f574:	701a      	strb	r2, [r3, #0]
  }
}
 800f576:	bf00      	nop
 800f578:	372c      	adds	r7, #44	; 0x2c
 800f57a:	46bd      	mov	sp, r7
 800f57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f580:	4770      	bx	lr

0800f582 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f582:	b580      	push	{r7, lr}
 800f584:	b084      	sub	sp, #16
 800f586:	af00      	add	r7, sp, #0
 800f588:	6078      	str	r0, [r7, #4]
 800f58a:	460b      	mov	r3, r1
 800f58c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f58e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800f592:	f004 f9bf 	bl	8013914 <USBD_static_malloc>
 800f596:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d105      	bne.n	800f5aa <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	2200      	movs	r2, #0
 800f5a2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800f5a6:	2302      	movs	r3, #2
 800f5a8:	e066      	b.n	800f678 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	68fa      	ldr	r2, [r7, #12]
 800f5ae:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	7c1b      	ldrb	r3, [r3, #16]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d119      	bne.n	800f5ee <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f5ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f5be:	2202      	movs	r2, #2
 800f5c0:	2181      	movs	r1, #129	; 0x81
 800f5c2:	6878      	ldr	r0, [r7, #4]
 800f5c4:	f004 f84b 	bl	801365e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	2201      	movs	r2, #1
 800f5cc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f5ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f5d2:	2202      	movs	r2, #2
 800f5d4:	2101      	movs	r1, #1
 800f5d6:	6878      	ldr	r0, [r7, #4]
 800f5d8:	f004 f841 	bl	801365e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	2201      	movs	r2, #1
 800f5e0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	2210      	movs	r2, #16
 800f5e8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800f5ec:	e016      	b.n	800f61c <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f5ee:	2340      	movs	r3, #64	; 0x40
 800f5f0:	2202      	movs	r2, #2
 800f5f2:	2181      	movs	r1, #129	; 0x81
 800f5f4:	6878      	ldr	r0, [r7, #4]
 800f5f6:	f004 f832 	bl	801365e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	2201      	movs	r2, #1
 800f5fe:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f600:	2340      	movs	r3, #64	; 0x40
 800f602:	2202      	movs	r2, #2
 800f604:	2101      	movs	r1, #1
 800f606:	6878      	ldr	r0, [r7, #4]
 800f608:	f004 f829 	bl	801365e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	2201      	movs	r2, #1
 800f610:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	2210      	movs	r2, #16
 800f618:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f61c:	2308      	movs	r3, #8
 800f61e:	2203      	movs	r2, #3
 800f620:	2182      	movs	r1, #130	; 0x82
 800f622:	6878      	ldr	r0, [r7, #4]
 800f624:	f004 f81b 	bl	801365e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	2201      	movs	r2, #1
 800f62c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	2200      	movs	r2, #0
 800f63e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	2200      	movs	r2, #0
 800f646:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	7c1b      	ldrb	r3, [r3, #16]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d109      	bne.n	800f666 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f658:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f65c:	2101      	movs	r1, #1
 800f65e:	6878      	ldr	r0, [r7, #4]
 800f660:	f004 f8ed 	bl	801383e <USBD_LL_PrepareReceive>
 800f664:	e007      	b.n	800f676 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f66c:	2340      	movs	r3, #64	; 0x40
 800f66e:	2101      	movs	r1, #1
 800f670:	6878      	ldr	r0, [r7, #4]
 800f672:	f004 f8e4 	bl	801383e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f676:	2300      	movs	r3, #0
}
 800f678:	4618      	mov	r0, r3
 800f67a:	3710      	adds	r7, #16
 800f67c:	46bd      	mov	sp, r7
 800f67e:	bd80      	pop	{r7, pc}

0800f680 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b082      	sub	sp, #8
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
 800f688:	460b      	mov	r3, r1
 800f68a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800f68c:	2181      	movs	r1, #129	; 0x81
 800f68e:	6878      	ldr	r0, [r7, #4]
 800f690:	f004 f80b 	bl	80136aa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	2200      	movs	r2, #0
 800f698:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800f69a:	2101      	movs	r1, #1
 800f69c:	6878      	ldr	r0, [r7, #4]
 800f69e:	f004 f804 	bl	80136aa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	2200      	movs	r2, #0
 800f6a6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800f6aa:	2182      	movs	r1, #130	; 0x82
 800f6ac:	6878      	ldr	r0, [r7, #4]
 800f6ae:	f003 fffc 	bl	80136aa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	2200      	movs	r2, #0
 800f6be:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d00e      	beq.n	800f6ea <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f6d2:	685b      	ldr	r3, [r3, #4]
 800f6d4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f6dc:	4618      	mov	r0, r3
 800f6de:	f004 f927 	bl	8013930 <USBD_static_free>
    pdev->pClassData = NULL;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f6ea:	2300      	movs	r3, #0
}
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	3708      	adds	r7, #8
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	bd80      	pop	{r7, pc}

0800f6f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	b086      	sub	sp, #24
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	6078      	str	r0, [r7, #4]
 800f6fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f704:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800f706:	2300      	movs	r3, #0
 800f708:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800f70a:	2300      	movs	r3, #0
 800f70c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800f70e:	2300      	movs	r3, #0
 800f710:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800f712:	693b      	ldr	r3, [r7, #16]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d101      	bne.n	800f71c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800f718:	2303      	movs	r3, #3
 800f71a:	e0af      	b.n	800f87c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f71c:	683b      	ldr	r3, [r7, #0]
 800f71e:	781b      	ldrb	r3, [r3, #0]
 800f720:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f724:	2b00      	cmp	r3, #0
 800f726:	d03f      	beq.n	800f7a8 <USBD_CDC_Setup+0xb4>
 800f728:	2b20      	cmp	r3, #32
 800f72a:	f040 809f 	bne.w	800f86c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800f72e:	683b      	ldr	r3, [r7, #0]
 800f730:	88db      	ldrh	r3, [r3, #6]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d02e      	beq.n	800f794 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800f736:	683b      	ldr	r3, [r7, #0]
 800f738:	781b      	ldrb	r3, [r3, #0]
 800f73a:	b25b      	sxtb	r3, r3
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	da16      	bge.n	800f76e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f746:	689b      	ldr	r3, [r3, #8]
 800f748:	683a      	ldr	r2, [r7, #0]
 800f74a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800f74c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f74e:	683a      	ldr	r2, [r7, #0]
 800f750:	88d2      	ldrh	r2, [r2, #6]
 800f752:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f754:	683b      	ldr	r3, [r7, #0]
 800f756:	88db      	ldrh	r3, [r3, #6]
 800f758:	2b07      	cmp	r3, #7
 800f75a:	bf28      	it	cs
 800f75c:	2307      	movcs	r3, #7
 800f75e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f760:	693b      	ldr	r3, [r7, #16]
 800f762:	89fa      	ldrh	r2, [r7, #14]
 800f764:	4619      	mov	r1, r3
 800f766:	6878      	ldr	r0, [r7, #4]
 800f768:	f001 fa9f 	bl	8010caa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800f76c:	e085      	b.n	800f87a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800f76e:	683b      	ldr	r3, [r7, #0]
 800f770:	785a      	ldrb	r2, [r3, #1]
 800f772:	693b      	ldr	r3, [r7, #16]
 800f774:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	88db      	ldrh	r3, [r3, #6]
 800f77c:	b2da      	uxtb	r2, r3
 800f77e:	693b      	ldr	r3, [r7, #16]
 800f780:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800f784:	6939      	ldr	r1, [r7, #16]
 800f786:	683b      	ldr	r3, [r7, #0]
 800f788:	88db      	ldrh	r3, [r3, #6]
 800f78a:	461a      	mov	r2, r3
 800f78c:	6878      	ldr	r0, [r7, #4]
 800f78e:	f001 fab8 	bl	8010d02 <USBD_CtlPrepareRx>
      break;
 800f792:	e072      	b.n	800f87a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f79a:	689b      	ldr	r3, [r3, #8]
 800f79c:	683a      	ldr	r2, [r7, #0]
 800f79e:	7850      	ldrb	r0, [r2, #1]
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	6839      	ldr	r1, [r7, #0]
 800f7a4:	4798      	blx	r3
      break;
 800f7a6:	e068      	b.n	800f87a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f7a8:	683b      	ldr	r3, [r7, #0]
 800f7aa:	785b      	ldrb	r3, [r3, #1]
 800f7ac:	2b0b      	cmp	r3, #11
 800f7ae:	d852      	bhi.n	800f856 <USBD_CDC_Setup+0x162>
 800f7b0:	a201      	add	r2, pc, #4	; (adr r2, 800f7b8 <USBD_CDC_Setup+0xc4>)
 800f7b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7b6:	bf00      	nop
 800f7b8:	0800f7e9 	.word	0x0800f7e9
 800f7bc:	0800f865 	.word	0x0800f865
 800f7c0:	0800f857 	.word	0x0800f857
 800f7c4:	0800f857 	.word	0x0800f857
 800f7c8:	0800f857 	.word	0x0800f857
 800f7cc:	0800f857 	.word	0x0800f857
 800f7d0:	0800f857 	.word	0x0800f857
 800f7d4:	0800f857 	.word	0x0800f857
 800f7d8:	0800f857 	.word	0x0800f857
 800f7dc:	0800f857 	.word	0x0800f857
 800f7e0:	0800f813 	.word	0x0800f813
 800f7e4:	0800f83d 	.word	0x0800f83d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f7ee:	b2db      	uxtb	r3, r3
 800f7f0:	2b03      	cmp	r3, #3
 800f7f2:	d107      	bne.n	800f804 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f7f4:	f107 030a 	add.w	r3, r7, #10
 800f7f8:	2202      	movs	r2, #2
 800f7fa:	4619      	mov	r1, r3
 800f7fc:	6878      	ldr	r0, [r7, #4]
 800f7fe:	f001 fa54 	bl	8010caa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f802:	e032      	b.n	800f86a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800f804:	6839      	ldr	r1, [r7, #0]
 800f806:	6878      	ldr	r0, [r7, #4]
 800f808:	f001 f9de 	bl	8010bc8 <USBD_CtlError>
            ret = USBD_FAIL;
 800f80c:	2303      	movs	r3, #3
 800f80e:	75fb      	strb	r3, [r7, #23]
          break;
 800f810:	e02b      	b.n	800f86a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f818:	b2db      	uxtb	r3, r3
 800f81a:	2b03      	cmp	r3, #3
 800f81c:	d107      	bne.n	800f82e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f81e:	f107 030d 	add.w	r3, r7, #13
 800f822:	2201      	movs	r2, #1
 800f824:	4619      	mov	r1, r3
 800f826:	6878      	ldr	r0, [r7, #4]
 800f828:	f001 fa3f 	bl	8010caa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f82c:	e01d      	b.n	800f86a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800f82e:	6839      	ldr	r1, [r7, #0]
 800f830:	6878      	ldr	r0, [r7, #4]
 800f832:	f001 f9c9 	bl	8010bc8 <USBD_CtlError>
            ret = USBD_FAIL;
 800f836:	2303      	movs	r3, #3
 800f838:	75fb      	strb	r3, [r7, #23]
          break;
 800f83a:	e016      	b.n	800f86a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f842:	b2db      	uxtb	r3, r3
 800f844:	2b03      	cmp	r3, #3
 800f846:	d00f      	beq.n	800f868 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800f848:	6839      	ldr	r1, [r7, #0]
 800f84a:	6878      	ldr	r0, [r7, #4]
 800f84c:	f001 f9bc 	bl	8010bc8 <USBD_CtlError>
            ret = USBD_FAIL;
 800f850:	2303      	movs	r3, #3
 800f852:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800f854:	e008      	b.n	800f868 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800f856:	6839      	ldr	r1, [r7, #0]
 800f858:	6878      	ldr	r0, [r7, #4]
 800f85a:	f001 f9b5 	bl	8010bc8 <USBD_CtlError>
          ret = USBD_FAIL;
 800f85e:	2303      	movs	r3, #3
 800f860:	75fb      	strb	r3, [r7, #23]
          break;
 800f862:	e002      	b.n	800f86a <USBD_CDC_Setup+0x176>
          break;
 800f864:	bf00      	nop
 800f866:	e008      	b.n	800f87a <USBD_CDC_Setup+0x186>
          break;
 800f868:	bf00      	nop
      }
      break;
 800f86a:	e006      	b.n	800f87a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800f86c:	6839      	ldr	r1, [r7, #0]
 800f86e:	6878      	ldr	r0, [r7, #4]
 800f870:	f001 f9aa 	bl	8010bc8 <USBD_CtlError>
      ret = USBD_FAIL;
 800f874:	2303      	movs	r3, #3
 800f876:	75fb      	strb	r3, [r7, #23]
      break;
 800f878:	bf00      	nop
  }

  return (uint8_t)ret;
 800f87a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f87c:	4618      	mov	r0, r3
 800f87e:	3718      	adds	r7, #24
 800f880:	46bd      	mov	sp, r7
 800f882:	bd80      	pop	{r7, pc}

0800f884 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f884:	b580      	push	{r7, lr}
 800f886:	b084      	sub	sp, #16
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
 800f88c:	460b      	mov	r3, r1
 800f88e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f896:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d101      	bne.n	800f8a6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f8a2:	2303      	movs	r3, #3
 800f8a4:	e04f      	b.n	800f946 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f8ac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f8ae:	78fa      	ldrb	r2, [r7, #3]
 800f8b0:	6879      	ldr	r1, [r7, #4]
 800f8b2:	4613      	mov	r3, r2
 800f8b4:	009b      	lsls	r3, r3, #2
 800f8b6:	4413      	add	r3, r2
 800f8b8:	009b      	lsls	r3, r3, #2
 800f8ba:	440b      	add	r3, r1
 800f8bc:	3318      	adds	r3, #24
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d029      	beq.n	800f918 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800f8c4:	78fa      	ldrb	r2, [r7, #3]
 800f8c6:	6879      	ldr	r1, [r7, #4]
 800f8c8:	4613      	mov	r3, r2
 800f8ca:	009b      	lsls	r3, r3, #2
 800f8cc:	4413      	add	r3, r2
 800f8ce:	009b      	lsls	r3, r3, #2
 800f8d0:	440b      	add	r3, r1
 800f8d2:	3318      	adds	r3, #24
 800f8d4:	681a      	ldr	r2, [r3, #0]
 800f8d6:	78f9      	ldrb	r1, [r7, #3]
 800f8d8:	68f8      	ldr	r0, [r7, #12]
 800f8da:	460b      	mov	r3, r1
 800f8dc:	009b      	lsls	r3, r3, #2
 800f8de:	440b      	add	r3, r1
 800f8e0:	00db      	lsls	r3, r3, #3
 800f8e2:	4403      	add	r3, r0
 800f8e4:	3338      	adds	r3, #56	; 0x38
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	fbb2 f1f3 	udiv	r1, r2, r3
 800f8ec:	fb01 f303 	mul.w	r3, r1, r3
 800f8f0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d110      	bne.n	800f918 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800f8f6:	78fa      	ldrb	r2, [r7, #3]
 800f8f8:	6879      	ldr	r1, [r7, #4]
 800f8fa:	4613      	mov	r3, r2
 800f8fc:	009b      	lsls	r3, r3, #2
 800f8fe:	4413      	add	r3, r2
 800f900:	009b      	lsls	r3, r3, #2
 800f902:	440b      	add	r3, r1
 800f904:	3318      	adds	r3, #24
 800f906:	2200      	movs	r2, #0
 800f908:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f90a:	78f9      	ldrb	r1, [r7, #3]
 800f90c:	2300      	movs	r3, #0
 800f90e:	2200      	movs	r2, #0
 800f910:	6878      	ldr	r0, [r7, #4]
 800f912:	f003 ff73 	bl	80137fc <USBD_LL_Transmit>
 800f916:	e015      	b.n	800f944 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800f918:	68bb      	ldr	r3, [r7, #8]
 800f91a:	2200      	movs	r2, #0
 800f91c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f926:	691b      	ldr	r3, [r3, #16]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d00b      	beq.n	800f944 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f932:	691b      	ldr	r3, [r3, #16]
 800f934:	68ba      	ldr	r2, [r7, #8]
 800f936:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800f93a:	68ba      	ldr	r2, [r7, #8]
 800f93c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800f940:	78fa      	ldrb	r2, [r7, #3]
 800f942:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800f944:	2300      	movs	r3, #0
}
 800f946:	4618      	mov	r0, r3
 800f948:	3710      	adds	r7, #16
 800f94a:	46bd      	mov	sp, r7
 800f94c:	bd80      	pop	{r7, pc}

0800f94e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f94e:	b580      	push	{r7, lr}
 800f950:	b084      	sub	sp, #16
 800f952:	af00      	add	r7, sp, #0
 800f954:	6078      	str	r0, [r7, #4]
 800f956:	460b      	mov	r3, r1
 800f958:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f960:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d101      	bne.n	800f970 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f96c:	2303      	movs	r3, #3
 800f96e:	e015      	b.n	800f99c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f970:	78fb      	ldrb	r3, [r7, #3]
 800f972:	4619      	mov	r1, r3
 800f974:	6878      	ldr	r0, [r7, #4]
 800f976:	f003 ff83 	bl	8013880 <USBD_LL_GetRxDataSize>
 800f97a:	4602      	mov	r2, r0
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f988:	68db      	ldr	r3, [r3, #12]
 800f98a:	68fa      	ldr	r2, [r7, #12]
 800f98c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800f990:	68fa      	ldr	r2, [r7, #12]
 800f992:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800f996:	4611      	mov	r1, r2
 800f998:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800f99a:	2300      	movs	r3, #0
}
 800f99c:	4618      	mov	r0, r3
 800f99e:	3710      	adds	r7, #16
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	bd80      	pop	{r7, pc}

0800f9a4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b084      	sub	sp, #16
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f9b2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d101      	bne.n	800f9be <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800f9ba:	2303      	movs	r3, #3
 800f9bc:	e01b      	b.n	800f9f6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d015      	beq.n	800f9f4 <USBD_CDC_EP0_RxReady+0x50>
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800f9ce:	2bff      	cmp	r3, #255	; 0xff
 800f9d0:	d010      	beq.n	800f9f4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f9d8:	689b      	ldr	r3, [r3, #8]
 800f9da:	68fa      	ldr	r2, [r7, #12]
 800f9dc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800f9e0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800f9e2:	68fa      	ldr	r2, [r7, #12]
 800f9e4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f9e8:	b292      	uxth	r2, r2
 800f9ea:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	22ff      	movs	r2, #255	; 0xff
 800f9f0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800f9f4:	2300      	movs	r3, #0
}
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	3710      	adds	r7, #16
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	bd80      	pop	{r7, pc}
	...

0800fa00 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800fa00:	b480      	push	{r7}
 800fa02:	b083      	sub	sp, #12
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	2243      	movs	r2, #67	; 0x43
 800fa0c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800fa0e:	4b03      	ldr	r3, [pc, #12]	; (800fa1c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800fa10:	4618      	mov	r0, r3
 800fa12:	370c      	adds	r7, #12
 800fa14:	46bd      	mov	sp, r7
 800fa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1a:	4770      	bx	lr
 800fa1c:	20000098 	.word	0x20000098

0800fa20 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800fa20:	b480      	push	{r7}
 800fa22:	b083      	sub	sp, #12
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	2243      	movs	r2, #67	; 0x43
 800fa2c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800fa2e:	4b03      	ldr	r3, [pc, #12]	; (800fa3c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800fa30:	4618      	mov	r0, r3
 800fa32:	370c      	adds	r7, #12
 800fa34:	46bd      	mov	sp, r7
 800fa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3a:	4770      	bx	lr
 800fa3c:	20000054 	.word	0x20000054

0800fa40 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800fa40:	b480      	push	{r7}
 800fa42:	b083      	sub	sp, #12
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	2243      	movs	r2, #67	; 0x43
 800fa4c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800fa4e:	4b03      	ldr	r3, [pc, #12]	; (800fa5c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800fa50:	4618      	mov	r0, r3
 800fa52:	370c      	adds	r7, #12
 800fa54:	46bd      	mov	sp, r7
 800fa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5a:	4770      	bx	lr
 800fa5c:	200000dc 	.word	0x200000dc

0800fa60 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800fa60:	b480      	push	{r7}
 800fa62:	b083      	sub	sp, #12
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	220a      	movs	r2, #10
 800fa6c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800fa6e:	4b03      	ldr	r3, [pc, #12]	; (800fa7c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800fa70:	4618      	mov	r0, r3
 800fa72:	370c      	adds	r7, #12
 800fa74:	46bd      	mov	sp, r7
 800fa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7a:	4770      	bx	lr
 800fa7c:	20000010 	.word	0x20000010

0800fa80 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800fa80:	b480      	push	{r7}
 800fa82:	b083      	sub	sp, #12
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
 800fa88:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800fa8a:	683b      	ldr	r3, [r7, #0]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d101      	bne.n	800fa94 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800fa90:	2303      	movs	r3, #3
 800fa92:	e004      	b.n	800fa9e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	683a      	ldr	r2, [r7, #0]
 800fa98:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800fa9c:	2300      	movs	r3, #0
}
 800fa9e:	4618      	mov	r0, r3
 800faa0:	370c      	adds	r7, #12
 800faa2:	46bd      	mov	sp, r7
 800faa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa8:	4770      	bx	lr

0800faaa <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800faaa:	b480      	push	{r7}
 800faac:	b087      	sub	sp, #28
 800faae:	af00      	add	r7, sp, #0
 800fab0:	60f8      	str	r0, [r7, #12]
 800fab2:	60b9      	str	r1, [r7, #8]
 800fab4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fabc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800fabe:	697b      	ldr	r3, [r7, #20]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d101      	bne.n	800fac8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800fac4:	2303      	movs	r3, #3
 800fac6:	e008      	b.n	800fada <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800fac8:	697b      	ldr	r3, [r7, #20]
 800faca:	68ba      	ldr	r2, [r7, #8]
 800facc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800fad0:	697b      	ldr	r3, [r7, #20]
 800fad2:	687a      	ldr	r2, [r7, #4]
 800fad4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800fad8:	2300      	movs	r3, #0
}
 800fada:	4618      	mov	r0, r3
 800fadc:	371c      	adds	r7, #28
 800fade:	46bd      	mov	sp, r7
 800fae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae4:	4770      	bx	lr

0800fae6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800fae6:	b480      	push	{r7}
 800fae8:	b085      	sub	sp, #20
 800faea:	af00      	add	r7, sp, #0
 800faec:	6078      	str	r0, [r7, #4]
 800faee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800faf6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d101      	bne.n	800fb02 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800fafe:	2303      	movs	r3, #3
 800fb00:	e004      	b.n	800fb0c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	683a      	ldr	r2, [r7, #0]
 800fb06:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800fb0a:	2300      	movs	r3, #0
}
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	3714      	adds	r7, #20
 800fb10:	46bd      	mov	sp, r7
 800fb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb16:	4770      	bx	lr

0800fb18 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b084      	sub	sp, #16
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fb26:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d101      	bne.n	800fb36 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800fb32:	2303      	movs	r3, #3
 800fb34:	e016      	b.n	800fb64 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	7c1b      	ldrb	r3, [r3, #16]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d109      	bne.n	800fb52 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fb44:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fb48:	2101      	movs	r1, #1
 800fb4a:	6878      	ldr	r0, [r7, #4]
 800fb4c:	f003 fe77 	bl	801383e <USBD_LL_PrepareReceive>
 800fb50:	e007      	b.n	800fb62 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fb58:	2340      	movs	r3, #64	; 0x40
 800fb5a:	2101      	movs	r1, #1
 800fb5c:	6878      	ldr	r0, [r7, #4]
 800fb5e:	f003 fe6e 	bl	801383e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800fb62:	2300      	movs	r3, #0
}
 800fb64:	4618      	mov	r0, r3
 800fb66:	3710      	adds	r7, #16
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	bd80      	pop	{r7, pc}

0800fb6c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b086      	sub	sp, #24
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	60f8      	str	r0, [r7, #12]
 800fb74:	60b9      	str	r1, [r7, #8]
 800fb76:	4613      	mov	r3, r2
 800fb78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d101      	bne.n	800fb84 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800fb80:	2303      	movs	r3, #3
 800fb82:	e01f      	b.n	800fbc4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	2200      	movs	r2, #0
 800fb88:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	2200      	movs	r2, #0
 800fb90:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	2200      	movs	r2, #0
 800fb98:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800fb9c:	68bb      	ldr	r3, [r7, #8]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d003      	beq.n	800fbaa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	68ba      	ldr	r2, [r7, #8]
 800fba6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	2201      	movs	r2, #1
 800fbae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	79fa      	ldrb	r2, [r7, #7]
 800fbb6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800fbb8:	68f8      	ldr	r0, [r7, #12]
 800fbba:	f003 fcd5 	bl	8013568 <USBD_LL_Init>
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800fbc2:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	3718      	adds	r7, #24
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	bd80      	pop	{r7, pc}

0800fbcc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b084      	sub	sp, #16
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]
 800fbd4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800fbda:	683b      	ldr	r3, [r7, #0]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d101      	bne.n	800fbe4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800fbe0:	2303      	movs	r3, #3
 800fbe2:	e016      	b.n	800fc12 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	683a      	ldr	r2, [r7, #0]
 800fbe8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fbf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d00b      	beq.n	800fc10 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fbfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc00:	f107 020e 	add.w	r2, r7, #14
 800fc04:	4610      	mov	r0, r2
 800fc06:	4798      	blx	r3
 800fc08:	4602      	mov	r2, r0
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800fc10:	2300      	movs	r3, #0
}
 800fc12:	4618      	mov	r0, r3
 800fc14:	3710      	adds	r7, #16
 800fc16:	46bd      	mov	sp, r7
 800fc18:	bd80      	pop	{r7, pc}

0800fc1a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800fc1a:	b580      	push	{r7, lr}
 800fc1c:	b082      	sub	sp, #8
 800fc1e:	af00      	add	r7, sp, #0
 800fc20:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800fc22:	6878      	ldr	r0, [r7, #4]
 800fc24:	f003 fd00 	bl	8013628 <USBD_LL_Start>
 800fc28:	4603      	mov	r3, r0
}
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	3708      	adds	r7, #8
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	bd80      	pop	{r7, pc}

0800fc32 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800fc32:	b480      	push	{r7}
 800fc34:	b083      	sub	sp, #12
 800fc36:	af00      	add	r7, sp, #0
 800fc38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fc3a:	2300      	movs	r3, #0
}
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	370c      	adds	r7, #12
 800fc40:	46bd      	mov	sp, r7
 800fc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc46:	4770      	bx	lr

0800fc48 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b084      	sub	sp, #16
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
 800fc50:	460b      	mov	r3, r1
 800fc52:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800fc54:	2303      	movs	r3, #3
 800fc56:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d009      	beq.n	800fc76 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	78fa      	ldrb	r2, [r7, #3]
 800fc6c:	4611      	mov	r1, r2
 800fc6e:	6878      	ldr	r0, [r7, #4]
 800fc70:	4798      	blx	r3
 800fc72:	4603      	mov	r3, r0
 800fc74:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800fc76:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc78:	4618      	mov	r0, r3
 800fc7a:	3710      	adds	r7, #16
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	bd80      	pop	{r7, pc}

0800fc80 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b082      	sub	sp, #8
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
 800fc88:	460b      	mov	r3, r1
 800fc8a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d007      	beq.n	800fca6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc9c:	685b      	ldr	r3, [r3, #4]
 800fc9e:	78fa      	ldrb	r2, [r7, #3]
 800fca0:	4611      	mov	r1, r2
 800fca2:	6878      	ldr	r0, [r7, #4]
 800fca4:	4798      	blx	r3
  }

  return USBD_OK;
 800fca6:	2300      	movs	r3, #0
}
 800fca8:	4618      	mov	r0, r3
 800fcaa:	3708      	adds	r7, #8
 800fcac:	46bd      	mov	sp, r7
 800fcae:	bd80      	pop	{r7, pc}

0800fcb0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b084      	sub	sp, #16
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	6078      	str	r0, [r7, #4]
 800fcb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800fcc0:	6839      	ldr	r1, [r7, #0]
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	f000 ff46 	bl	8010b54 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	2201      	movs	r2, #1
 800fccc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800fcd6:	461a      	mov	r2, r3
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800fce4:	f003 031f 	and.w	r3, r3, #31
 800fce8:	2b02      	cmp	r3, #2
 800fcea:	d01a      	beq.n	800fd22 <USBD_LL_SetupStage+0x72>
 800fcec:	2b02      	cmp	r3, #2
 800fcee:	d822      	bhi.n	800fd36 <USBD_LL_SetupStage+0x86>
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d002      	beq.n	800fcfa <USBD_LL_SetupStage+0x4a>
 800fcf4:	2b01      	cmp	r3, #1
 800fcf6:	d00a      	beq.n	800fd0e <USBD_LL_SetupStage+0x5e>
 800fcf8:	e01d      	b.n	800fd36 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800fd00:	4619      	mov	r1, r3
 800fd02:	6878      	ldr	r0, [r7, #4]
 800fd04:	f000 f9ee 	bl	80100e4 <USBD_StdDevReq>
 800fd08:	4603      	mov	r3, r0
 800fd0a:	73fb      	strb	r3, [r7, #15]
      break;
 800fd0c:	e020      	b.n	800fd50 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800fd14:	4619      	mov	r1, r3
 800fd16:	6878      	ldr	r0, [r7, #4]
 800fd18:	f000 fa52 	bl	80101c0 <USBD_StdItfReq>
 800fd1c:	4603      	mov	r3, r0
 800fd1e:	73fb      	strb	r3, [r7, #15]
      break;
 800fd20:	e016      	b.n	800fd50 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800fd28:	4619      	mov	r1, r3
 800fd2a:	6878      	ldr	r0, [r7, #4]
 800fd2c:	f000 fa91 	bl	8010252 <USBD_StdEPReq>
 800fd30:	4603      	mov	r3, r0
 800fd32:	73fb      	strb	r3, [r7, #15]
      break;
 800fd34:	e00c      	b.n	800fd50 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800fd3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800fd40:	b2db      	uxtb	r3, r3
 800fd42:	4619      	mov	r1, r3
 800fd44:	6878      	ldr	r0, [r7, #4]
 800fd46:	f003 fccf 	bl	80136e8 <USBD_LL_StallEP>
 800fd4a:	4603      	mov	r3, r0
 800fd4c:	73fb      	strb	r3, [r7, #15]
      break;
 800fd4e:	bf00      	nop
  }

  return ret;
 800fd50:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd52:	4618      	mov	r0, r3
 800fd54:	3710      	adds	r7, #16
 800fd56:	46bd      	mov	sp, r7
 800fd58:	bd80      	pop	{r7, pc}

0800fd5a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800fd5a:	b580      	push	{r7, lr}
 800fd5c:	b086      	sub	sp, #24
 800fd5e:	af00      	add	r7, sp, #0
 800fd60:	60f8      	str	r0, [r7, #12]
 800fd62:	460b      	mov	r3, r1
 800fd64:	607a      	str	r2, [r7, #4]
 800fd66:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800fd68:	7afb      	ldrb	r3, [r7, #11]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d138      	bne.n	800fde0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800fd74:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fd7c:	2b03      	cmp	r3, #3
 800fd7e:	d14a      	bne.n	800fe16 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800fd80:	693b      	ldr	r3, [r7, #16]
 800fd82:	689a      	ldr	r2, [r3, #8]
 800fd84:	693b      	ldr	r3, [r7, #16]
 800fd86:	68db      	ldr	r3, [r3, #12]
 800fd88:	429a      	cmp	r2, r3
 800fd8a:	d913      	bls.n	800fdb4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800fd8c:	693b      	ldr	r3, [r7, #16]
 800fd8e:	689a      	ldr	r2, [r3, #8]
 800fd90:	693b      	ldr	r3, [r7, #16]
 800fd92:	68db      	ldr	r3, [r3, #12]
 800fd94:	1ad2      	subs	r2, r2, r3
 800fd96:	693b      	ldr	r3, [r7, #16]
 800fd98:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800fd9a:	693b      	ldr	r3, [r7, #16]
 800fd9c:	68da      	ldr	r2, [r3, #12]
 800fd9e:	693b      	ldr	r3, [r7, #16]
 800fda0:	689b      	ldr	r3, [r3, #8]
 800fda2:	4293      	cmp	r3, r2
 800fda4:	bf28      	it	cs
 800fda6:	4613      	movcs	r3, r2
 800fda8:	461a      	mov	r2, r3
 800fdaa:	6879      	ldr	r1, [r7, #4]
 800fdac:	68f8      	ldr	r0, [r7, #12]
 800fdae:	f000 ffc5 	bl	8010d3c <USBD_CtlContinueRx>
 800fdb2:	e030      	b.n	800fe16 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fdba:	b2db      	uxtb	r3, r3
 800fdbc:	2b03      	cmp	r3, #3
 800fdbe:	d10b      	bne.n	800fdd8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fdc6:	691b      	ldr	r3, [r3, #16]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d005      	beq.n	800fdd8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fdd2:	691b      	ldr	r3, [r3, #16]
 800fdd4:	68f8      	ldr	r0, [r7, #12]
 800fdd6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800fdd8:	68f8      	ldr	r0, [r7, #12]
 800fdda:	f000 ffc0 	bl	8010d5e <USBD_CtlSendStatus>
 800fdde:	e01a      	b.n	800fe16 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fde6:	b2db      	uxtb	r3, r3
 800fde8:	2b03      	cmp	r3, #3
 800fdea:	d114      	bne.n	800fe16 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fdf2:	699b      	ldr	r3, [r3, #24]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d00e      	beq.n	800fe16 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fdfe:	699b      	ldr	r3, [r3, #24]
 800fe00:	7afa      	ldrb	r2, [r7, #11]
 800fe02:	4611      	mov	r1, r2
 800fe04:	68f8      	ldr	r0, [r7, #12]
 800fe06:	4798      	blx	r3
 800fe08:	4603      	mov	r3, r0
 800fe0a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800fe0c:	7dfb      	ldrb	r3, [r7, #23]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d001      	beq.n	800fe16 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800fe12:	7dfb      	ldrb	r3, [r7, #23]
 800fe14:	e000      	b.n	800fe18 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800fe16:	2300      	movs	r3, #0
}
 800fe18:	4618      	mov	r0, r3
 800fe1a:	3718      	adds	r7, #24
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	bd80      	pop	{r7, pc}

0800fe20 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b086      	sub	sp, #24
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	60f8      	str	r0, [r7, #12]
 800fe28:	460b      	mov	r3, r1
 800fe2a:	607a      	str	r2, [r7, #4]
 800fe2c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800fe2e:	7afb      	ldrb	r3, [r7, #11]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d16b      	bne.n	800ff0c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	3314      	adds	r3, #20
 800fe38:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fe40:	2b02      	cmp	r3, #2
 800fe42:	d156      	bne.n	800fef2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800fe44:	693b      	ldr	r3, [r7, #16]
 800fe46:	689a      	ldr	r2, [r3, #8]
 800fe48:	693b      	ldr	r3, [r7, #16]
 800fe4a:	68db      	ldr	r3, [r3, #12]
 800fe4c:	429a      	cmp	r2, r3
 800fe4e:	d914      	bls.n	800fe7a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800fe50:	693b      	ldr	r3, [r7, #16]
 800fe52:	689a      	ldr	r2, [r3, #8]
 800fe54:	693b      	ldr	r3, [r7, #16]
 800fe56:	68db      	ldr	r3, [r3, #12]
 800fe58:	1ad2      	subs	r2, r2, r3
 800fe5a:	693b      	ldr	r3, [r7, #16]
 800fe5c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800fe5e:	693b      	ldr	r3, [r7, #16]
 800fe60:	689b      	ldr	r3, [r3, #8]
 800fe62:	461a      	mov	r2, r3
 800fe64:	6879      	ldr	r1, [r7, #4]
 800fe66:	68f8      	ldr	r0, [r7, #12]
 800fe68:	f000 ff3a 	bl	8010ce0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	2200      	movs	r2, #0
 800fe70:	2100      	movs	r1, #0
 800fe72:	68f8      	ldr	r0, [r7, #12]
 800fe74:	f003 fce3 	bl	801383e <USBD_LL_PrepareReceive>
 800fe78:	e03b      	b.n	800fef2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800fe7a:	693b      	ldr	r3, [r7, #16]
 800fe7c:	68da      	ldr	r2, [r3, #12]
 800fe7e:	693b      	ldr	r3, [r7, #16]
 800fe80:	689b      	ldr	r3, [r3, #8]
 800fe82:	429a      	cmp	r2, r3
 800fe84:	d11c      	bne.n	800fec0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800fe86:	693b      	ldr	r3, [r7, #16]
 800fe88:	685a      	ldr	r2, [r3, #4]
 800fe8a:	693b      	ldr	r3, [r7, #16]
 800fe8c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800fe8e:	429a      	cmp	r2, r3
 800fe90:	d316      	bcc.n	800fec0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800fe92:	693b      	ldr	r3, [r7, #16]
 800fe94:	685a      	ldr	r2, [r3, #4]
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800fe9c:	429a      	cmp	r2, r3
 800fe9e:	d20f      	bcs.n	800fec0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800fea0:	2200      	movs	r2, #0
 800fea2:	2100      	movs	r1, #0
 800fea4:	68f8      	ldr	r0, [r7, #12]
 800fea6:	f000 ff1b 	bl	8010ce0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	2200      	movs	r2, #0
 800feae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800feb2:	2300      	movs	r3, #0
 800feb4:	2200      	movs	r2, #0
 800feb6:	2100      	movs	r1, #0
 800feb8:	68f8      	ldr	r0, [r7, #12]
 800feba:	f003 fcc0 	bl	801383e <USBD_LL_PrepareReceive>
 800febe:	e018      	b.n	800fef2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fec6:	b2db      	uxtb	r3, r3
 800fec8:	2b03      	cmp	r3, #3
 800feca:	d10b      	bne.n	800fee4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fed2:	68db      	ldr	r3, [r3, #12]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d005      	beq.n	800fee4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fede:	68db      	ldr	r3, [r3, #12]
 800fee0:	68f8      	ldr	r0, [r7, #12]
 800fee2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800fee4:	2180      	movs	r1, #128	; 0x80
 800fee6:	68f8      	ldr	r0, [r7, #12]
 800fee8:	f003 fbfe 	bl	80136e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800feec:	68f8      	ldr	r0, [r7, #12]
 800feee:	f000 ff49 	bl	8010d84 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800fef8:	2b01      	cmp	r3, #1
 800fefa:	d122      	bne.n	800ff42 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800fefc:	68f8      	ldr	r0, [r7, #12]
 800fefe:	f7ff fe98 	bl	800fc32 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	2200      	movs	r2, #0
 800ff06:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ff0a:	e01a      	b.n	800ff42 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff12:	b2db      	uxtb	r3, r3
 800ff14:	2b03      	cmp	r3, #3
 800ff16:	d114      	bne.n	800ff42 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff1e:	695b      	ldr	r3, [r3, #20]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d00e      	beq.n	800ff42 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff2a:	695b      	ldr	r3, [r3, #20]
 800ff2c:	7afa      	ldrb	r2, [r7, #11]
 800ff2e:	4611      	mov	r1, r2
 800ff30:	68f8      	ldr	r0, [r7, #12]
 800ff32:	4798      	blx	r3
 800ff34:	4603      	mov	r3, r0
 800ff36:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ff38:	7dfb      	ldrb	r3, [r7, #23]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d001      	beq.n	800ff42 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800ff3e:	7dfb      	ldrb	r3, [r7, #23]
 800ff40:	e000      	b.n	800ff44 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800ff42:	2300      	movs	r3, #0
}
 800ff44:	4618      	mov	r0, r3
 800ff46:	3718      	adds	r7, #24
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	bd80      	pop	{r7, pc}

0800ff4c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b082      	sub	sp, #8
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	2201      	movs	r2, #1
 800ff58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	2200      	movs	r2, #0
 800ff60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	2200      	movs	r2, #0
 800ff68:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	2200      	movs	r2, #0
 800ff6e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d101      	bne.n	800ff80 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800ff7c:	2303      	movs	r3, #3
 800ff7e:	e02f      	b.n	800ffe0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d00f      	beq.n	800ffaa <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff90:	685b      	ldr	r3, [r3, #4]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d009      	beq.n	800ffaa <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff9c:	685b      	ldr	r3, [r3, #4]
 800ff9e:	687a      	ldr	r2, [r7, #4]
 800ffa0:	6852      	ldr	r2, [r2, #4]
 800ffa2:	b2d2      	uxtb	r2, r2
 800ffa4:	4611      	mov	r1, r2
 800ffa6:	6878      	ldr	r0, [r7, #4]
 800ffa8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ffaa:	2340      	movs	r3, #64	; 0x40
 800ffac:	2200      	movs	r2, #0
 800ffae:	2100      	movs	r1, #0
 800ffb0:	6878      	ldr	r0, [r7, #4]
 800ffb2:	f003 fb54 	bl	801365e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	2201      	movs	r2, #1
 800ffba:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	2240      	movs	r2, #64	; 0x40
 800ffc2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ffc6:	2340      	movs	r3, #64	; 0x40
 800ffc8:	2200      	movs	r2, #0
 800ffca:	2180      	movs	r1, #128	; 0x80
 800ffcc:	6878      	ldr	r0, [r7, #4]
 800ffce:	f003 fb46 	bl	801365e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	2201      	movs	r2, #1
 800ffd6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	2240      	movs	r2, #64	; 0x40
 800ffdc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ffde:	2300      	movs	r3, #0
}
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	3708      	adds	r7, #8
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	bd80      	pop	{r7, pc}

0800ffe8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ffe8:	b480      	push	{r7}
 800ffea:	b083      	sub	sp, #12
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	6078      	str	r0, [r7, #4]
 800fff0:	460b      	mov	r3, r1
 800fff2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	78fa      	ldrb	r2, [r7, #3]
 800fff8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800fffa:	2300      	movs	r3, #0
}
 800fffc:	4618      	mov	r0, r3
 800fffe:	370c      	adds	r7, #12
 8010000:	46bd      	mov	sp, r7
 8010002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010006:	4770      	bx	lr

08010008 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010008:	b480      	push	{r7}
 801000a:	b083      	sub	sp, #12
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010016:	b2da      	uxtb	r2, r3
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	2204      	movs	r2, #4
 8010022:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8010026:	2300      	movs	r3, #0
}
 8010028:	4618      	mov	r0, r3
 801002a:	370c      	adds	r7, #12
 801002c:	46bd      	mov	sp, r7
 801002e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010032:	4770      	bx	lr

08010034 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8010034:	b480      	push	{r7}
 8010036:	b083      	sub	sp, #12
 8010038:	af00      	add	r7, sp, #0
 801003a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010042:	b2db      	uxtb	r3, r3
 8010044:	2b04      	cmp	r3, #4
 8010046:	d106      	bne.n	8010056 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801004e:	b2da      	uxtb	r2, r3
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8010056:	2300      	movs	r3, #0
}
 8010058:	4618      	mov	r0, r3
 801005a:	370c      	adds	r7, #12
 801005c:	46bd      	mov	sp, r7
 801005e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010062:	4770      	bx	lr

08010064 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b082      	sub	sp, #8
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010072:	2b00      	cmp	r3, #0
 8010074:	d101      	bne.n	801007a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8010076:	2303      	movs	r3, #3
 8010078:	e012      	b.n	80100a0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010080:	b2db      	uxtb	r3, r3
 8010082:	2b03      	cmp	r3, #3
 8010084:	d10b      	bne.n	801009e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801008c:	69db      	ldr	r3, [r3, #28]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d005      	beq.n	801009e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010098:	69db      	ldr	r3, [r3, #28]
 801009a:	6878      	ldr	r0, [r7, #4]
 801009c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801009e:	2300      	movs	r3, #0
}
 80100a0:	4618      	mov	r0, r3
 80100a2:	3708      	adds	r7, #8
 80100a4:	46bd      	mov	sp, r7
 80100a6:	bd80      	pop	{r7, pc}

080100a8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80100a8:	b480      	push	{r7}
 80100aa:	b087      	sub	sp, #28
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80100b4:	697b      	ldr	r3, [r7, #20]
 80100b6:	781b      	ldrb	r3, [r3, #0]
 80100b8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80100ba:	697b      	ldr	r3, [r7, #20]
 80100bc:	3301      	adds	r3, #1
 80100be:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80100c0:	697b      	ldr	r3, [r7, #20]
 80100c2:	781b      	ldrb	r3, [r3, #0]
 80100c4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80100c6:	8a3b      	ldrh	r3, [r7, #16]
 80100c8:	021b      	lsls	r3, r3, #8
 80100ca:	b21a      	sxth	r2, r3
 80100cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80100d0:	4313      	orrs	r3, r2
 80100d2:	b21b      	sxth	r3, r3
 80100d4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80100d6:	89fb      	ldrh	r3, [r7, #14]
}
 80100d8:	4618      	mov	r0, r3
 80100da:	371c      	adds	r7, #28
 80100dc:	46bd      	mov	sp, r7
 80100de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e2:	4770      	bx	lr

080100e4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80100e4:	b580      	push	{r7, lr}
 80100e6:	b084      	sub	sp, #16
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	6078      	str	r0, [r7, #4]
 80100ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80100ee:	2300      	movs	r3, #0
 80100f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80100f2:	683b      	ldr	r3, [r7, #0]
 80100f4:	781b      	ldrb	r3, [r3, #0]
 80100f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80100fa:	2b40      	cmp	r3, #64	; 0x40
 80100fc:	d005      	beq.n	801010a <USBD_StdDevReq+0x26>
 80100fe:	2b40      	cmp	r3, #64	; 0x40
 8010100:	d853      	bhi.n	80101aa <USBD_StdDevReq+0xc6>
 8010102:	2b00      	cmp	r3, #0
 8010104:	d00b      	beq.n	801011e <USBD_StdDevReq+0x3a>
 8010106:	2b20      	cmp	r3, #32
 8010108:	d14f      	bne.n	80101aa <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010110:	689b      	ldr	r3, [r3, #8]
 8010112:	6839      	ldr	r1, [r7, #0]
 8010114:	6878      	ldr	r0, [r7, #4]
 8010116:	4798      	blx	r3
 8010118:	4603      	mov	r3, r0
 801011a:	73fb      	strb	r3, [r7, #15]
      break;
 801011c:	e04a      	b.n	80101b4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801011e:	683b      	ldr	r3, [r7, #0]
 8010120:	785b      	ldrb	r3, [r3, #1]
 8010122:	2b09      	cmp	r3, #9
 8010124:	d83b      	bhi.n	801019e <USBD_StdDevReq+0xba>
 8010126:	a201      	add	r2, pc, #4	; (adr r2, 801012c <USBD_StdDevReq+0x48>)
 8010128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801012c:	08010181 	.word	0x08010181
 8010130:	08010195 	.word	0x08010195
 8010134:	0801019f 	.word	0x0801019f
 8010138:	0801018b 	.word	0x0801018b
 801013c:	0801019f 	.word	0x0801019f
 8010140:	0801015f 	.word	0x0801015f
 8010144:	08010155 	.word	0x08010155
 8010148:	0801019f 	.word	0x0801019f
 801014c:	08010177 	.word	0x08010177
 8010150:	08010169 	.word	0x08010169
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010154:	6839      	ldr	r1, [r7, #0]
 8010156:	6878      	ldr	r0, [r7, #4]
 8010158:	f000 f9de 	bl	8010518 <USBD_GetDescriptor>
          break;
 801015c:	e024      	b.n	80101a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801015e:	6839      	ldr	r1, [r7, #0]
 8010160:	6878      	ldr	r0, [r7, #4]
 8010162:	f000 fb6d 	bl	8010840 <USBD_SetAddress>
          break;
 8010166:	e01f      	b.n	80101a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010168:	6839      	ldr	r1, [r7, #0]
 801016a:	6878      	ldr	r0, [r7, #4]
 801016c:	f000 fbac 	bl	80108c8 <USBD_SetConfig>
 8010170:	4603      	mov	r3, r0
 8010172:	73fb      	strb	r3, [r7, #15]
          break;
 8010174:	e018      	b.n	80101a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8010176:	6839      	ldr	r1, [r7, #0]
 8010178:	6878      	ldr	r0, [r7, #4]
 801017a:	f000 fc4b 	bl	8010a14 <USBD_GetConfig>
          break;
 801017e:	e013      	b.n	80101a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010180:	6839      	ldr	r1, [r7, #0]
 8010182:	6878      	ldr	r0, [r7, #4]
 8010184:	f000 fc7c 	bl	8010a80 <USBD_GetStatus>
          break;
 8010188:	e00e      	b.n	80101a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801018a:	6839      	ldr	r1, [r7, #0]
 801018c:	6878      	ldr	r0, [r7, #4]
 801018e:	f000 fcab 	bl	8010ae8 <USBD_SetFeature>
          break;
 8010192:	e009      	b.n	80101a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8010194:	6839      	ldr	r1, [r7, #0]
 8010196:	6878      	ldr	r0, [r7, #4]
 8010198:	f000 fcba 	bl	8010b10 <USBD_ClrFeature>
          break;
 801019c:	e004      	b.n	80101a8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 801019e:	6839      	ldr	r1, [r7, #0]
 80101a0:	6878      	ldr	r0, [r7, #4]
 80101a2:	f000 fd11 	bl	8010bc8 <USBD_CtlError>
          break;
 80101a6:	bf00      	nop
      }
      break;
 80101a8:	e004      	b.n	80101b4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80101aa:	6839      	ldr	r1, [r7, #0]
 80101ac:	6878      	ldr	r0, [r7, #4]
 80101ae:	f000 fd0b 	bl	8010bc8 <USBD_CtlError>
      break;
 80101b2:	bf00      	nop
  }

  return ret;
 80101b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80101b6:	4618      	mov	r0, r3
 80101b8:	3710      	adds	r7, #16
 80101ba:	46bd      	mov	sp, r7
 80101bc:	bd80      	pop	{r7, pc}
 80101be:	bf00      	nop

080101c0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b084      	sub	sp, #16
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	6078      	str	r0, [r7, #4]
 80101c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80101ca:	2300      	movs	r3, #0
 80101cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80101ce:	683b      	ldr	r3, [r7, #0]
 80101d0:	781b      	ldrb	r3, [r3, #0]
 80101d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80101d6:	2b40      	cmp	r3, #64	; 0x40
 80101d8:	d005      	beq.n	80101e6 <USBD_StdItfReq+0x26>
 80101da:	2b40      	cmp	r3, #64	; 0x40
 80101dc:	d82f      	bhi.n	801023e <USBD_StdItfReq+0x7e>
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d001      	beq.n	80101e6 <USBD_StdItfReq+0x26>
 80101e2:	2b20      	cmp	r3, #32
 80101e4:	d12b      	bne.n	801023e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80101ec:	b2db      	uxtb	r3, r3
 80101ee:	3b01      	subs	r3, #1
 80101f0:	2b02      	cmp	r3, #2
 80101f2:	d81d      	bhi.n	8010230 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80101f4:	683b      	ldr	r3, [r7, #0]
 80101f6:	889b      	ldrh	r3, [r3, #4]
 80101f8:	b2db      	uxtb	r3, r3
 80101fa:	2b01      	cmp	r3, #1
 80101fc:	d813      	bhi.n	8010226 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010204:	689b      	ldr	r3, [r3, #8]
 8010206:	6839      	ldr	r1, [r7, #0]
 8010208:	6878      	ldr	r0, [r7, #4]
 801020a:	4798      	blx	r3
 801020c:	4603      	mov	r3, r0
 801020e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8010210:	683b      	ldr	r3, [r7, #0]
 8010212:	88db      	ldrh	r3, [r3, #6]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d110      	bne.n	801023a <USBD_StdItfReq+0x7a>
 8010218:	7bfb      	ldrb	r3, [r7, #15]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d10d      	bne.n	801023a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 801021e:	6878      	ldr	r0, [r7, #4]
 8010220:	f000 fd9d 	bl	8010d5e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8010224:	e009      	b.n	801023a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8010226:	6839      	ldr	r1, [r7, #0]
 8010228:	6878      	ldr	r0, [r7, #4]
 801022a:	f000 fccd 	bl	8010bc8 <USBD_CtlError>
          break;
 801022e:	e004      	b.n	801023a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8010230:	6839      	ldr	r1, [r7, #0]
 8010232:	6878      	ldr	r0, [r7, #4]
 8010234:	f000 fcc8 	bl	8010bc8 <USBD_CtlError>
          break;
 8010238:	e000      	b.n	801023c <USBD_StdItfReq+0x7c>
          break;
 801023a:	bf00      	nop
      }
      break;
 801023c:	e004      	b.n	8010248 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 801023e:	6839      	ldr	r1, [r7, #0]
 8010240:	6878      	ldr	r0, [r7, #4]
 8010242:	f000 fcc1 	bl	8010bc8 <USBD_CtlError>
      break;
 8010246:	bf00      	nop
  }

  return ret;
 8010248:	7bfb      	ldrb	r3, [r7, #15]
}
 801024a:	4618      	mov	r0, r3
 801024c:	3710      	adds	r7, #16
 801024e:	46bd      	mov	sp, r7
 8010250:	bd80      	pop	{r7, pc}

08010252 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010252:	b580      	push	{r7, lr}
 8010254:	b084      	sub	sp, #16
 8010256:	af00      	add	r7, sp, #0
 8010258:	6078      	str	r0, [r7, #4]
 801025a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801025c:	2300      	movs	r3, #0
 801025e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8010260:	683b      	ldr	r3, [r7, #0]
 8010262:	889b      	ldrh	r3, [r3, #4]
 8010264:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010266:	683b      	ldr	r3, [r7, #0]
 8010268:	781b      	ldrb	r3, [r3, #0]
 801026a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801026e:	2b40      	cmp	r3, #64	; 0x40
 8010270:	d007      	beq.n	8010282 <USBD_StdEPReq+0x30>
 8010272:	2b40      	cmp	r3, #64	; 0x40
 8010274:	f200 8145 	bhi.w	8010502 <USBD_StdEPReq+0x2b0>
 8010278:	2b00      	cmp	r3, #0
 801027a:	d00c      	beq.n	8010296 <USBD_StdEPReq+0x44>
 801027c:	2b20      	cmp	r3, #32
 801027e:	f040 8140 	bne.w	8010502 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010288:	689b      	ldr	r3, [r3, #8]
 801028a:	6839      	ldr	r1, [r7, #0]
 801028c:	6878      	ldr	r0, [r7, #4]
 801028e:	4798      	blx	r3
 8010290:	4603      	mov	r3, r0
 8010292:	73fb      	strb	r3, [r7, #15]
      break;
 8010294:	e13a      	b.n	801050c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010296:	683b      	ldr	r3, [r7, #0]
 8010298:	785b      	ldrb	r3, [r3, #1]
 801029a:	2b03      	cmp	r3, #3
 801029c:	d007      	beq.n	80102ae <USBD_StdEPReq+0x5c>
 801029e:	2b03      	cmp	r3, #3
 80102a0:	f300 8129 	bgt.w	80104f6 <USBD_StdEPReq+0x2a4>
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d07f      	beq.n	80103a8 <USBD_StdEPReq+0x156>
 80102a8:	2b01      	cmp	r3, #1
 80102aa:	d03c      	beq.n	8010326 <USBD_StdEPReq+0xd4>
 80102ac:	e123      	b.n	80104f6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80102b4:	b2db      	uxtb	r3, r3
 80102b6:	2b02      	cmp	r3, #2
 80102b8:	d002      	beq.n	80102c0 <USBD_StdEPReq+0x6e>
 80102ba:	2b03      	cmp	r3, #3
 80102bc:	d016      	beq.n	80102ec <USBD_StdEPReq+0x9a>
 80102be:	e02c      	b.n	801031a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80102c0:	7bbb      	ldrb	r3, [r7, #14]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d00d      	beq.n	80102e2 <USBD_StdEPReq+0x90>
 80102c6:	7bbb      	ldrb	r3, [r7, #14]
 80102c8:	2b80      	cmp	r3, #128	; 0x80
 80102ca:	d00a      	beq.n	80102e2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80102cc:	7bbb      	ldrb	r3, [r7, #14]
 80102ce:	4619      	mov	r1, r3
 80102d0:	6878      	ldr	r0, [r7, #4]
 80102d2:	f003 fa09 	bl	80136e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80102d6:	2180      	movs	r1, #128	; 0x80
 80102d8:	6878      	ldr	r0, [r7, #4]
 80102da:	f003 fa05 	bl	80136e8 <USBD_LL_StallEP>
 80102de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80102e0:	e020      	b.n	8010324 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80102e2:	6839      	ldr	r1, [r7, #0]
 80102e4:	6878      	ldr	r0, [r7, #4]
 80102e6:	f000 fc6f 	bl	8010bc8 <USBD_CtlError>
              break;
 80102ea:	e01b      	b.n	8010324 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80102ec:	683b      	ldr	r3, [r7, #0]
 80102ee:	885b      	ldrh	r3, [r3, #2]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d10e      	bne.n	8010312 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80102f4:	7bbb      	ldrb	r3, [r7, #14]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d00b      	beq.n	8010312 <USBD_StdEPReq+0xc0>
 80102fa:	7bbb      	ldrb	r3, [r7, #14]
 80102fc:	2b80      	cmp	r3, #128	; 0x80
 80102fe:	d008      	beq.n	8010312 <USBD_StdEPReq+0xc0>
 8010300:	683b      	ldr	r3, [r7, #0]
 8010302:	88db      	ldrh	r3, [r3, #6]
 8010304:	2b00      	cmp	r3, #0
 8010306:	d104      	bne.n	8010312 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010308:	7bbb      	ldrb	r3, [r7, #14]
 801030a:	4619      	mov	r1, r3
 801030c:	6878      	ldr	r0, [r7, #4]
 801030e:	f003 f9eb 	bl	80136e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8010312:	6878      	ldr	r0, [r7, #4]
 8010314:	f000 fd23 	bl	8010d5e <USBD_CtlSendStatus>

              break;
 8010318:	e004      	b.n	8010324 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 801031a:	6839      	ldr	r1, [r7, #0]
 801031c:	6878      	ldr	r0, [r7, #4]
 801031e:	f000 fc53 	bl	8010bc8 <USBD_CtlError>
              break;
 8010322:	bf00      	nop
          }
          break;
 8010324:	e0ec      	b.n	8010500 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801032c:	b2db      	uxtb	r3, r3
 801032e:	2b02      	cmp	r3, #2
 8010330:	d002      	beq.n	8010338 <USBD_StdEPReq+0xe6>
 8010332:	2b03      	cmp	r3, #3
 8010334:	d016      	beq.n	8010364 <USBD_StdEPReq+0x112>
 8010336:	e030      	b.n	801039a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010338:	7bbb      	ldrb	r3, [r7, #14]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d00d      	beq.n	801035a <USBD_StdEPReq+0x108>
 801033e:	7bbb      	ldrb	r3, [r7, #14]
 8010340:	2b80      	cmp	r3, #128	; 0x80
 8010342:	d00a      	beq.n	801035a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010344:	7bbb      	ldrb	r3, [r7, #14]
 8010346:	4619      	mov	r1, r3
 8010348:	6878      	ldr	r0, [r7, #4]
 801034a:	f003 f9cd 	bl	80136e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801034e:	2180      	movs	r1, #128	; 0x80
 8010350:	6878      	ldr	r0, [r7, #4]
 8010352:	f003 f9c9 	bl	80136e8 <USBD_LL_StallEP>
 8010356:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010358:	e025      	b.n	80103a6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 801035a:	6839      	ldr	r1, [r7, #0]
 801035c:	6878      	ldr	r0, [r7, #4]
 801035e:	f000 fc33 	bl	8010bc8 <USBD_CtlError>
              break;
 8010362:	e020      	b.n	80103a6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010364:	683b      	ldr	r3, [r7, #0]
 8010366:	885b      	ldrh	r3, [r3, #2]
 8010368:	2b00      	cmp	r3, #0
 801036a:	d11b      	bne.n	80103a4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801036c:	7bbb      	ldrb	r3, [r7, #14]
 801036e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010372:	2b00      	cmp	r3, #0
 8010374:	d004      	beq.n	8010380 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010376:	7bbb      	ldrb	r3, [r7, #14]
 8010378:	4619      	mov	r1, r3
 801037a:	6878      	ldr	r0, [r7, #4]
 801037c:	f003 f9d3 	bl	8013726 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8010380:	6878      	ldr	r0, [r7, #4]
 8010382:	f000 fcec 	bl	8010d5e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801038c:	689b      	ldr	r3, [r3, #8]
 801038e:	6839      	ldr	r1, [r7, #0]
 8010390:	6878      	ldr	r0, [r7, #4]
 8010392:	4798      	blx	r3
 8010394:	4603      	mov	r3, r0
 8010396:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8010398:	e004      	b.n	80103a4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 801039a:	6839      	ldr	r1, [r7, #0]
 801039c:	6878      	ldr	r0, [r7, #4]
 801039e:	f000 fc13 	bl	8010bc8 <USBD_CtlError>
              break;
 80103a2:	e000      	b.n	80103a6 <USBD_StdEPReq+0x154>
              break;
 80103a4:	bf00      	nop
          }
          break;
 80103a6:	e0ab      	b.n	8010500 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80103ae:	b2db      	uxtb	r3, r3
 80103b0:	2b02      	cmp	r3, #2
 80103b2:	d002      	beq.n	80103ba <USBD_StdEPReq+0x168>
 80103b4:	2b03      	cmp	r3, #3
 80103b6:	d032      	beq.n	801041e <USBD_StdEPReq+0x1cc>
 80103b8:	e097      	b.n	80104ea <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80103ba:	7bbb      	ldrb	r3, [r7, #14]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d007      	beq.n	80103d0 <USBD_StdEPReq+0x17e>
 80103c0:	7bbb      	ldrb	r3, [r7, #14]
 80103c2:	2b80      	cmp	r3, #128	; 0x80
 80103c4:	d004      	beq.n	80103d0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80103c6:	6839      	ldr	r1, [r7, #0]
 80103c8:	6878      	ldr	r0, [r7, #4]
 80103ca:	f000 fbfd 	bl	8010bc8 <USBD_CtlError>
                break;
 80103ce:	e091      	b.n	80104f4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80103d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	da0b      	bge.n	80103f0 <USBD_StdEPReq+0x19e>
 80103d8:	7bbb      	ldrb	r3, [r7, #14]
 80103da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80103de:	4613      	mov	r3, r2
 80103e0:	009b      	lsls	r3, r3, #2
 80103e2:	4413      	add	r3, r2
 80103e4:	009b      	lsls	r3, r3, #2
 80103e6:	3310      	adds	r3, #16
 80103e8:	687a      	ldr	r2, [r7, #4]
 80103ea:	4413      	add	r3, r2
 80103ec:	3304      	adds	r3, #4
 80103ee:	e00b      	b.n	8010408 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80103f0:	7bbb      	ldrb	r3, [r7, #14]
 80103f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80103f6:	4613      	mov	r3, r2
 80103f8:	009b      	lsls	r3, r3, #2
 80103fa:	4413      	add	r3, r2
 80103fc:	009b      	lsls	r3, r3, #2
 80103fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010402:	687a      	ldr	r2, [r7, #4]
 8010404:	4413      	add	r3, r2
 8010406:	3304      	adds	r3, #4
 8010408:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801040a:	68bb      	ldr	r3, [r7, #8]
 801040c:	2200      	movs	r2, #0
 801040e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010410:	68bb      	ldr	r3, [r7, #8]
 8010412:	2202      	movs	r2, #2
 8010414:	4619      	mov	r1, r3
 8010416:	6878      	ldr	r0, [r7, #4]
 8010418:	f000 fc47 	bl	8010caa <USBD_CtlSendData>
              break;
 801041c:	e06a      	b.n	80104f4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801041e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010422:	2b00      	cmp	r3, #0
 8010424:	da11      	bge.n	801044a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010426:	7bbb      	ldrb	r3, [r7, #14]
 8010428:	f003 020f 	and.w	r2, r3, #15
 801042c:	6879      	ldr	r1, [r7, #4]
 801042e:	4613      	mov	r3, r2
 8010430:	009b      	lsls	r3, r3, #2
 8010432:	4413      	add	r3, r2
 8010434:	009b      	lsls	r3, r3, #2
 8010436:	440b      	add	r3, r1
 8010438:	3324      	adds	r3, #36	; 0x24
 801043a:	881b      	ldrh	r3, [r3, #0]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d117      	bne.n	8010470 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8010440:	6839      	ldr	r1, [r7, #0]
 8010442:	6878      	ldr	r0, [r7, #4]
 8010444:	f000 fbc0 	bl	8010bc8 <USBD_CtlError>
                  break;
 8010448:	e054      	b.n	80104f4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801044a:	7bbb      	ldrb	r3, [r7, #14]
 801044c:	f003 020f 	and.w	r2, r3, #15
 8010450:	6879      	ldr	r1, [r7, #4]
 8010452:	4613      	mov	r3, r2
 8010454:	009b      	lsls	r3, r3, #2
 8010456:	4413      	add	r3, r2
 8010458:	009b      	lsls	r3, r3, #2
 801045a:	440b      	add	r3, r1
 801045c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010460:	881b      	ldrh	r3, [r3, #0]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d104      	bne.n	8010470 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8010466:	6839      	ldr	r1, [r7, #0]
 8010468:	6878      	ldr	r0, [r7, #4]
 801046a:	f000 fbad 	bl	8010bc8 <USBD_CtlError>
                  break;
 801046e:	e041      	b.n	80104f4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010470:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010474:	2b00      	cmp	r3, #0
 8010476:	da0b      	bge.n	8010490 <USBD_StdEPReq+0x23e>
 8010478:	7bbb      	ldrb	r3, [r7, #14]
 801047a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801047e:	4613      	mov	r3, r2
 8010480:	009b      	lsls	r3, r3, #2
 8010482:	4413      	add	r3, r2
 8010484:	009b      	lsls	r3, r3, #2
 8010486:	3310      	adds	r3, #16
 8010488:	687a      	ldr	r2, [r7, #4]
 801048a:	4413      	add	r3, r2
 801048c:	3304      	adds	r3, #4
 801048e:	e00b      	b.n	80104a8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010490:	7bbb      	ldrb	r3, [r7, #14]
 8010492:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010496:	4613      	mov	r3, r2
 8010498:	009b      	lsls	r3, r3, #2
 801049a:	4413      	add	r3, r2
 801049c:	009b      	lsls	r3, r3, #2
 801049e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80104a2:	687a      	ldr	r2, [r7, #4]
 80104a4:	4413      	add	r3, r2
 80104a6:	3304      	adds	r3, #4
 80104a8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80104aa:	7bbb      	ldrb	r3, [r7, #14]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d002      	beq.n	80104b6 <USBD_StdEPReq+0x264>
 80104b0:	7bbb      	ldrb	r3, [r7, #14]
 80104b2:	2b80      	cmp	r3, #128	; 0x80
 80104b4:	d103      	bne.n	80104be <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80104b6:	68bb      	ldr	r3, [r7, #8]
 80104b8:	2200      	movs	r2, #0
 80104ba:	601a      	str	r2, [r3, #0]
 80104bc:	e00e      	b.n	80104dc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80104be:	7bbb      	ldrb	r3, [r7, #14]
 80104c0:	4619      	mov	r1, r3
 80104c2:	6878      	ldr	r0, [r7, #4]
 80104c4:	f003 f94e 	bl	8013764 <USBD_LL_IsStallEP>
 80104c8:	4603      	mov	r3, r0
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d003      	beq.n	80104d6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80104ce:	68bb      	ldr	r3, [r7, #8]
 80104d0:	2201      	movs	r2, #1
 80104d2:	601a      	str	r2, [r3, #0]
 80104d4:	e002      	b.n	80104dc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80104d6:	68bb      	ldr	r3, [r7, #8]
 80104d8:	2200      	movs	r2, #0
 80104da:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80104dc:	68bb      	ldr	r3, [r7, #8]
 80104de:	2202      	movs	r2, #2
 80104e0:	4619      	mov	r1, r3
 80104e2:	6878      	ldr	r0, [r7, #4]
 80104e4:	f000 fbe1 	bl	8010caa <USBD_CtlSendData>
              break;
 80104e8:	e004      	b.n	80104f4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80104ea:	6839      	ldr	r1, [r7, #0]
 80104ec:	6878      	ldr	r0, [r7, #4]
 80104ee:	f000 fb6b 	bl	8010bc8 <USBD_CtlError>
              break;
 80104f2:	bf00      	nop
          }
          break;
 80104f4:	e004      	b.n	8010500 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80104f6:	6839      	ldr	r1, [r7, #0]
 80104f8:	6878      	ldr	r0, [r7, #4]
 80104fa:	f000 fb65 	bl	8010bc8 <USBD_CtlError>
          break;
 80104fe:	bf00      	nop
      }
      break;
 8010500:	e004      	b.n	801050c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8010502:	6839      	ldr	r1, [r7, #0]
 8010504:	6878      	ldr	r0, [r7, #4]
 8010506:	f000 fb5f 	bl	8010bc8 <USBD_CtlError>
      break;
 801050a:	bf00      	nop
  }

  return ret;
 801050c:	7bfb      	ldrb	r3, [r7, #15]
}
 801050e:	4618      	mov	r0, r3
 8010510:	3710      	adds	r7, #16
 8010512:	46bd      	mov	sp, r7
 8010514:	bd80      	pop	{r7, pc}
	...

08010518 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b084      	sub	sp, #16
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
 8010520:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010522:	2300      	movs	r3, #0
 8010524:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010526:	2300      	movs	r3, #0
 8010528:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801052a:	2300      	movs	r3, #0
 801052c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801052e:	683b      	ldr	r3, [r7, #0]
 8010530:	885b      	ldrh	r3, [r3, #2]
 8010532:	0a1b      	lsrs	r3, r3, #8
 8010534:	b29b      	uxth	r3, r3
 8010536:	3b01      	subs	r3, #1
 8010538:	2b0e      	cmp	r3, #14
 801053a:	f200 8152 	bhi.w	80107e2 <USBD_GetDescriptor+0x2ca>
 801053e:	a201      	add	r2, pc, #4	; (adr r2, 8010544 <USBD_GetDescriptor+0x2c>)
 8010540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010544:	080105b5 	.word	0x080105b5
 8010548:	080105cd 	.word	0x080105cd
 801054c:	0801060d 	.word	0x0801060d
 8010550:	080107e3 	.word	0x080107e3
 8010554:	080107e3 	.word	0x080107e3
 8010558:	08010783 	.word	0x08010783
 801055c:	080107af 	.word	0x080107af
 8010560:	080107e3 	.word	0x080107e3
 8010564:	080107e3 	.word	0x080107e3
 8010568:	080107e3 	.word	0x080107e3
 801056c:	080107e3 	.word	0x080107e3
 8010570:	080107e3 	.word	0x080107e3
 8010574:	080107e3 	.word	0x080107e3
 8010578:	080107e3 	.word	0x080107e3
 801057c:	08010581 	.word	0x08010581
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010586:	69db      	ldr	r3, [r3, #28]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d00b      	beq.n	80105a4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010592:	69db      	ldr	r3, [r3, #28]
 8010594:	687a      	ldr	r2, [r7, #4]
 8010596:	7c12      	ldrb	r2, [r2, #16]
 8010598:	f107 0108 	add.w	r1, r7, #8
 801059c:	4610      	mov	r0, r2
 801059e:	4798      	blx	r3
 80105a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80105a2:	e126      	b.n	80107f2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80105a4:	6839      	ldr	r1, [r7, #0]
 80105a6:	6878      	ldr	r0, [r7, #4]
 80105a8:	f000 fb0e 	bl	8010bc8 <USBD_CtlError>
        err++;
 80105ac:	7afb      	ldrb	r3, [r7, #11]
 80105ae:	3301      	adds	r3, #1
 80105b0:	72fb      	strb	r3, [r7, #11]
      break;
 80105b2:	e11e      	b.n	80107f2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	687a      	ldr	r2, [r7, #4]
 80105be:	7c12      	ldrb	r2, [r2, #16]
 80105c0:	f107 0108 	add.w	r1, r7, #8
 80105c4:	4610      	mov	r0, r2
 80105c6:	4798      	blx	r3
 80105c8:	60f8      	str	r0, [r7, #12]
      break;
 80105ca:	e112      	b.n	80107f2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	7c1b      	ldrb	r3, [r3, #16]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d10d      	bne.n	80105f0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80105da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105dc:	f107 0208 	add.w	r2, r7, #8
 80105e0:	4610      	mov	r0, r2
 80105e2:	4798      	blx	r3
 80105e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	3301      	adds	r3, #1
 80105ea:	2202      	movs	r2, #2
 80105ec:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80105ee:	e100      	b.n	80107f2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80105f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105f8:	f107 0208 	add.w	r2, r7, #8
 80105fc:	4610      	mov	r0, r2
 80105fe:	4798      	blx	r3
 8010600:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	3301      	adds	r3, #1
 8010606:	2202      	movs	r2, #2
 8010608:	701a      	strb	r2, [r3, #0]
      break;
 801060a:	e0f2      	b.n	80107f2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801060c:	683b      	ldr	r3, [r7, #0]
 801060e:	885b      	ldrh	r3, [r3, #2]
 8010610:	b2db      	uxtb	r3, r3
 8010612:	2b05      	cmp	r3, #5
 8010614:	f200 80ac 	bhi.w	8010770 <USBD_GetDescriptor+0x258>
 8010618:	a201      	add	r2, pc, #4	; (adr r2, 8010620 <USBD_GetDescriptor+0x108>)
 801061a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801061e:	bf00      	nop
 8010620:	08010639 	.word	0x08010639
 8010624:	0801066d 	.word	0x0801066d
 8010628:	080106a1 	.word	0x080106a1
 801062c:	080106d5 	.word	0x080106d5
 8010630:	08010709 	.word	0x08010709
 8010634:	0801073d 	.word	0x0801073d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801063e:	685b      	ldr	r3, [r3, #4]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d00b      	beq.n	801065c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801064a:	685b      	ldr	r3, [r3, #4]
 801064c:	687a      	ldr	r2, [r7, #4]
 801064e:	7c12      	ldrb	r2, [r2, #16]
 8010650:	f107 0108 	add.w	r1, r7, #8
 8010654:	4610      	mov	r0, r2
 8010656:	4798      	blx	r3
 8010658:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801065a:	e091      	b.n	8010780 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801065c:	6839      	ldr	r1, [r7, #0]
 801065e:	6878      	ldr	r0, [r7, #4]
 8010660:	f000 fab2 	bl	8010bc8 <USBD_CtlError>
            err++;
 8010664:	7afb      	ldrb	r3, [r7, #11]
 8010666:	3301      	adds	r3, #1
 8010668:	72fb      	strb	r3, [r7, #11]
          break;
 801066a:	e089      	b.n	8010780 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010672:	689b      	ldr	r3, [r3, #8]
 8010674:	2b00      	cmp	r3, #0
 8010676:	d00b      	beq.n	8010690 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801067e:	689b      	ldr	r3, [r3, #8]
 8010680:	687a      	ldr	r2, [r7, #4]
 8010682:	7c12      	ldrb	r2, [r2, #16]
 8010684:	f107 0108 	add.w	r1, r7, #8
 8010688:	4610      	mov	r0, r2
 801068a:	4798      	blx	r3
 801068c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801068e:	e077      	b.n	8010780 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010690:	6839      	ldr	r1, [r7, #0]
 8010692:	6878      	ldr	r0, [r7, #4]
 8010694:	f000 fa98 	bl	8010bc8 <USBD_CtlError>
            err++;
 8010698:	7afb      	ldrb	r3, [r7, #11]
 801069a:	3301      	adds	r3, #1
 801069c:	72fb      	strb	r3, [r7, #11]
          break;
 801069e:	e06f      	b.n	8010780 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80106a6:	68db      	ldr	r3, [r3, #12]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d00b      	beq.n	80106c4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80106b2:	68db      	ldr	r3, [r3, #12]
 80106b4:	687a      	ldr	r2, [r7, #4]
 80106b6:	7c12      	ldrb	r2, [r2, #16]
 80106b8:	f107 0108 	add.w	r1, r7, #8
 80106bc:	4610      	mov	r0, r2
 80106be:	4798      	blx	r3
 80106c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80106c2:	e05d      	b.n	8010780 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80106c4:	6839      	ldr	r1, [r7, #0]
 80106c6:	6878      	ldr	r0, [r7, #4]
 80106c8:	f000 fa7e 	bl	8010bc8 <USBD_CtlError>
            err++;
 80106cc:	7afb      	ldrb	r3, [r7, #11]
 80106ce:	3301      	adds	r3, #1
 80106d0:	72fb      	strb	r3, [r7, #11]
          break;
 80106d2:	e055      	b.n	8010780 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80106da:	691b      	ldr	r3, [r3, #16]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d00b      	beq.n	80106f8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80106e6:	691b      	ldr	r3, [r3, #16]
 80106e8:	687a      	ldr	r2, [r7, #4]
 80106ea:	7c12      	ldrb	r2, [r2, #16]
 80106ec:	f107 0108 	add.w	r1, r7, #8
 80106f0:	4610      	mov	r0, r2
 80106f2:	4798      	blx	r3
 80106f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80106f6:	e043      	b.n	8010780 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80106f8:	6839      	ldr	r1, [r7, #0]
 80106fa:	6878      	ldr	r0, [r7, #4]
 80106fc:	f000 fa64 	bl	8010bc8 <USBD_CtlError>
            err++;
 8010700:	7afb      	ldrb	r3, [r7, #11]
 8010702:	3301      	adds	r3, #1
 8010704:	72fb      	strb	r3, [r7, #11]
          break;
 8010706:	e03b      	b.n	8010780 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801070e:	695b      	ldr	r3, [r3, #20]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d00b      	beq.n	801072c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801071a:	695b      	ldr	r3, [r3, #20]
 801071c:	687a      	ldr	r2, [r7, #4]
 801071e:	7c12      	ldrb	r2, [r2, #16]
 8010720:	f107 0108 	add.w	r1, r7, #8
 8010724:	4610      	mov	r0, r2
 8010726:	4798      	blx	r3
 8010728:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801072a:	e029      	b.n	8010780 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801072c:	6839      	ldr	r1, [r7, #0]
 801072e:	6878      	ldr	r0, [r7, #4]
 8010730:	f000 fa4a 	bl	8010bc8 <USBD_CtlError>
            err++;
 8010734:	7afb      	ldrb	r3, [r7, #11]
 8010736:	3301      	adds	r3, #1
 8010738:	72fb      	strb	r3, [r7, #11]
          break;
 801073a:	e021      	b.n	8010780 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010742:	699b      	ldr	r3, [r3, #24]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d00b      	beq.n	8010760 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801074e:	699b      	ldr	r3, [r3, #24]
 8010750:	687a      	ldr	r2, [r7, #4]
 8010752:	7c12      	ldrb	r2, [r2, #16]
 8010754:	f107 0108 	add.w	r1, r7, #8
 8010758:	4610      	mov	r0, r2
 801075a:	4798      	blx	r3
 801075c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801075e:	e00f      	b.n	8010780 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010760:	6839      	ldr	r1, [r7, #0]
 8010762:	6878      	ldr	r0, [r7, #4]
 8010764:	f000 fa30 	bl	8010bc8 <USBD_CtlError>
            err++;
 8010768:	7afb      	ldrb	r3, [r7, #11]
 801076a:	3301      	adds	r3, #1
 801076c:	72fb      	strb	r3, [r7, #11]
          break;
 801076e:	e007      	b.n	8010780 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8010770:	6839      	ldr	r1, [r7, #0]
 8010772:	6878      	ldr	r0, [r7, #4]
 8010774:	f000 fa28 	bl	8010bc8 <USBD_CtlError>
          err++;
 8010778:	7afb      	ldrb	r3, [r7, #11]
 801077a:	3301      	adds	r3, #1
 801077c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 801077e:	bf00      	nop
      }
      break;
 8010780:	e037      	b.n	80107f2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	7c1b      	ldrb	r3, [r3, #16]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d109      	bne.n	801079e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010792:	f107 0208 	add.w	r2, r7, #8
 8010796:	4610      	mov	r0, r2
 8010798:	4798      	blx	r3
 801079a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801079c:	e029      	b.n	80107f2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801079e:	6839      	ldr	r1, [r7, #0]
 80107a0:	6878      	ldr	r0, [r7, #4]
 80107a2:	f000 fa11 	bl	8010bc8 <USBD_CtlError>
        err++;
 80107a6:	7afb      	ldrb	r3, [r7, #11]
 80107a8:	3301      	adds	r3, #1
 80107aa:	72fb      	strb	r3, [r7, #11]
      break;
 80107ac:	e021      	b.n	80107f2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	7c1b      	ldrb	r3, [r3, #16]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d10d      	bne.n	80107d2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80107bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107be:	f107 0208 	add.w	r2, r7, #8
 80107c2:	4610      	mov	r0, r2
 80107c4:	4798      	blx	r3
 80107c6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	3301      	adds	r3, #1
 80107cc:	2207      	movs	r2, #7
 80107ce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80107d0:	e00f      	b.n	80107f2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80107d2:	6839      	ldr	r1, [r7, #0]
 80107d4:	6878      	ldr	r0, [r7, #4]
 80107d6:	f000 f9f7 	bl	8010bc8 <USBD_CtlError>
        err++;
 80107da:	7afb      	ldrb	r3, [r7, #11]
 80107dc:	3301      	adds	r3, #1
 80107de:	72fb      	strb	r3, [r7, #11]
      break;
 80107e0:	e007      	b.n	80107f2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80107e2:	6839      	ldr	r1, [r7, #0]
 80107e4:	6878      	ldr	r0, [r7, #4]
 80107e6:	f000 f9ef 	bl	8010bc8 <USBD_CtlError>
      err++;
 80107ea:	7afb      	ldrb	r3, [r7, #11]
 80107ec:	3301      	adds	r3, #1
 80107ee:	72fb      	strb	r3, [r7, #11]
      break;
 80107f0:	bf00      	nop
  }

  if (err != 0U)
 80107f2:	7afb      	ldrb	r3, [r7, #11]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d11e      	bne.n	8010836 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80107f8:	683b      	ldr	r3, [r7, #0]
 80107fa:	88db      	ldrh	r3, [r3, #6]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d016      	beq.n	801082e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8010800:	893b      	ldrh	r3, [r7, #8]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d00e      	beq.n	8010824 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8010806:	683b      	ldr	r3, [r7, #0]
 8010808:	88da      	ldrh	r2, [r3, #6]
 801080a:	893b      	ldrh	r3, [r7, #8]
 801080c:	4293      	cmp	r3, r2
 801080e:	bf28      	it	cs
 8010810:	4613      	movcs	r3, r2
 8010812:	b29b      	uxth	r3, r3
 8010814:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010816:	893b      	ldrh	r3, [r7, #8]
 8010818:	461a      	mov	r2, r3
 801081a:	68f9      	ldr	r1, [r7, #12]
 801081c:	6878      	ldr	r0, [r7, #4]
 801081e:	f000 fa44 	bl	8010caa <USBD_CtlSendData>
 8010822:	e009      	b.n	8010838 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010824:	6839      	ldr	r1, [r7, #0]
 8010826:	6878      	ldr	r0, [r7, #4]
 8010828:	f000 f9ce 	bl	8010bc8 <USBD_CtlError>
 801082c:	e004      	b.n	8010838 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801082e:	6878      	ldr	r0, [r7, #4]
 8010830:	f000 fa95 	bl	8010d5e <USBD_CtlSendStatus>
 8010834:	e000      	b.n	8010838 <USBD_GetDescriptor+0x320>
    return;
 8010836:	bf00      	nop
  }
}
 8010838:	3710      	adds	r7, #16
 801083a:	46bd      	mov	sp, r7
 801083c:	bd80      	pop	{r7, pc}
 801083e:	bf00      	nop

08010840 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010840:	b580      	push	{r7, lr}
 8010842:	b084      	sub	sp, #16
 8010844:	af00      	add	r7, sp, #0
 8010846:	6078      	str	r0, [r7, #4]
 8010848:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801084a:	683b      	ldr	r3, [r7, #0]
 801084c:	889b      	ldrh	r3, [r3, #4]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d131      	bne.n	80108b6 <USBD_SetAddress+0x76>
 8010852:	683b      	ldr	r3, [r7, #0]
 8010854:	88db      	ldrh	r3, [r3, #6]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d12d      	bne.n	80108b6 <USBD_SetAddress+0x76>
 801085a:	683b      	ldr	r3, [r7, #0]
 801085c:	885b      	ldrh	r3, [r3, #2]
 801085e:	2b7f      	cmp	r3, #127	; 0x7f
 8010860:	d829      	bhi.n	80108b6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010862:	683b      	ldr	r3, [r7, #0]
 8010864:	885b      	ldrh	r3, [r3, #2]
 8010866:	b2db      	uxtb	r3, r3
 8010868:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801086c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010874:	b2db      	uxtb	r3, r3
 8010876:	2b03      	cmp	r3, #3
 8010878:	d104      	bne.n	8010884 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801087a:	6839      	ldr	r1, [r7, #0]
 801087c:	6878      	ldr	r0, [r7, #4]
 801087e:	f000 f9a3 	bl	8010bc8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010882:	e01d      	b.n	80108c0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	7bfa      	ldrb	r2, [r7, #15]
 8010888:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801088c:	7bfb      	ldrb	r3, [r7, #15]
 801088e:	4619      	mov	r1, r3
 8010890:	6878      	ldr	r0, [r7, #4]
 8010892:	f002 ff94 	bl	80137be <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010896:	6878      	ldr	r0, [r7, #4]
 8010898:	f000 fa61 	bl	8010d5e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801089c:	7bfb      	ldrb	r3, [r7, #15]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d004      	beq.n	80108ac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	2202      	movs	r2, #2
 80108a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80108aa:	e009      	b.n	80108c0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	2201      	movs	r2, #1
 80108b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80108b4:	e004      	b.n	80108c0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80108b6:	6839      	ldr	r1, [r7, #0]
 80108b8:	6878      	ldr	r0, [r7, #4]
 80108ba:	f000 f985 	bl	8010bc8 <USBD_CtlError>
  }
}
 80108be:	bf00      	nop
 80108c0:	bf00      	nop
 80108c2:	3710      	adds	r7, #16
 80108c4:	46bd      	mov	sp, r7
 80108c6:	bd80      	pop	{r7, pc}

080108c8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80108c8:	b580      	push	{r7, lr}
 80108ca:	b084      	sub	sp, #16
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	6078      	str	r0, [r7, #4]
 80108d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80108d2:	2300      	movs	r3, #0
 80108d4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80108d6:	683b      	ldr	r3, [r7, #0]
 80108d8:	885b      	ldrh	r3, [r3, #2]
 80108da:	b2da      	uxtb	r2, r3
 80108dc:	4b4c      	ldr	r3, [pc, #304]	; (8010a10 <USBD_SetConfig+0x148>)
 80108de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80108e0:	4b4b      	ldr	r3, [pc, #300]	; (8010a10 <USBD_SetConfig+0x148>)
 80108e2:	781b      	ldrb	r3, [r3, #0]
 80108e4:	2b01      	cmp	r3, #1
 80108e6:	d905      	bls.n	80108f4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80108e8:	6839      	ldr	r1, [r7, #0]
 80108ea:	6878      	ldr	r0, [r7, #4]
 80108ec:	f000 f96c 	bl	8010bc8 <USBD_CtlError>
    return USBD_FAIL;
 80108f0:	2303      	movs	r3, #3
 80108f2:	e088      	b.n	8010a06 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80108fa:	b2db      	uxtb	r3, r3
 80108fc:	2b02      	cmp	r3, #2
 80108fe:	d002      	beq.n	8010906 <USBD_SetConfig+0x3e>
 8010900:	2b03      	cmp	r3, #3
 8010902:	d025      	beq.n	8010950 <USBD_SetConfig+0x88>
 8010904:	e071      	b.n	80109ea <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8010906:	4b42      	ldr	r3, [pc, #264]	; (8010a10 <USBD_SetConfig+0x148>)
 8010908:	781b      	ldrb	r3, [r3, #0]
 801090a:	2b00      	cmp	r3, #0
 801090c:	d01c      	beq.n	8010948 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 801090e:	4b40      	ldr	r3, [pc, #256]	; (8010a10 <USBD_SetConfig+0x148>)
 8010910:	781b      	ldrb	r3, [r3, #0]
 8010912:	461a      	mov	r2, r3
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010918:	4b3d      	ldr	r3, [pc, #244]	; (8010a10 <USBD_SetConfig+0x148>)
 801091a:	781b      	ldrb	r3, [r3, #0]
 801091c:	4619      	mov	r1, r3
 801091e:	6878      	ldr	r0, [r7, #4]
 8010920:	f7ff f992 	bl	800fc48 <USBD_SetClassConfig>
 8010924:	4603      	mov	r3, r0
 8010926:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010928:	7bfb      	ldrb	r3, [r7, #15]
 801092a:	2b00      	cmp	r3, #0
 801092c:	d004      	beq.n	8010938 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 801092e:	6839      	ldr	r1, [r7, #0]
 8010930:	6878      	ldr	r0, [r7, #4]
 8010932:	f000 f949 	bl	8010bc8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010936:	e065      	b.n	8010a04 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8010938:	6878      	ldr	r0, [r7, #4]
 801093a:	f000 fa10 	bl	8010d5e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	2203      	movs	r2, #3
 8010942:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8010946:	e05d      	b.n	8010a04 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8010948:	6878      	ldr	r0, [r7, #4]
 801094a:	f000 fa08 	bl	8010d5e <USBD_CtlSendStatus>
      break;
 801094e:	e059      	b.n	8010a04 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010950:	4b2f      	ldr	r3, [pc, #188]	; (8010a10 <USBD_SetConfig+0x148>)
 8010952:	781b      	ldrb	r3, [r3, #0]
 8010954:	2b00      	cmp	r3, #0
 8010956:	d112      	bne.n	801097e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	2202      	movs	r2, #2
 801095c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8010960:	4b2b      	ldr	r3, [pc, #172]	; (8010a10 <USBD_SetConfig+0x148>)
 8010962:	781b      	ldrb	r3, [r3, #0]
 8010964:	461a      	mov	r2, r3
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801096a:	4b29      	ldr	r3, [pc, #164]	; (8010a10 <USBD_SetConfig+0x148>)
 801096c:	781b      	ldrb	r3, [r3, #0]
 801096e:	4619      	mov	r1, r3
 8010970:	6878      	ldr	r0, [r7, #4]
 8010972:	f7ff f985 	bl	800fc80 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8010976:	6878      	ldr	r0, [r7, #4]
 8010978:	f000 f9f1 	bl	8010d5e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801097c:	e042      	b.n	8010a04 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 801097e:	4b24      	ldr	r3, [pc, #144]	; (8010a10 <USBD_SetConfig+0x148>)
 8010980:	781b      	ldrb	r3, [r3, #0]
 8010982:	461a      	mov	r2, r3
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	685b      	ldr	r3, [r3, #4]
 8010988:	429a      	cmp	r2, r3
 801098a:	d02a      	beq.n	80109e2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	685b      	ldr	r3, [r3, #4]
 8010990:	b2db      	uxtb	r3, r3
 8010992:	4619      	mov	r1, r3
 8010994:	6878      	ldr	r0, [r7, #4]
 8010996:	f7ff f973 	bl	800fc80 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801099a:	4b1d      	ldr	r3, [pc, #116]	; (8010a10 <USBD_SetConfig+0x148>)
 801099c:	781b      	ldrb	r3, [r3, #0]
 801099e:	461a      	mov	r2, r3
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80109a4:	4b1a      	ldr	r3, [pc, #104]	; (8010a10 <USBD_SetConfig+0x148>)
 80109a6:	781b      	ldrb	r3, [r3, #0]
 80109a8:	4619      	mov	r1, r3
 80109aa:	6878      	ldr	r0, [r7, #4]
 80109ac:	f7ff f94c 	bl	800fc48 <USBD_SetClassConfig>
 80109b0:	4603      	mov	r3, r0
 80109b2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80109b4:	7bfb      	ldrb	r3, [r7, #15]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d00f      	beq.n	80109da <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80109ba:	6839      	ldr	r1, [r7, #0]
 80109bc:	6878      	ldr	r0, [r7, #4]
 80109be:	f000 f903 	bl	8010bc8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	685b      	ldr	r3, [r3, #4]
 80109c6:	b2db      	uxtb	r3, r3
 80109c8:	4619      	mov	r1, r3
 80109ca:	6878      	ldr	r0, [r7, #4]
 80109cc:	f7ff f958 	bl	800fc80 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	2202      	movs	r2, #2
 80109d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80109d8:	e014      	b.n	8010a04 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80109da:	6878      	ldr	r0, [r7, #4]
 80109dc:	f000 f9bf 	bl	8010d5e <USBD_CtlSendStatus>
      break;
 80109e0:	e010      	b.n	8010a04 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80109e2:	6878      	ldr	r0, [r7, #4]
 80109e4:	f000 f9bb 	bl	8010d5e <USBD_CtlSendStatus>
      break;
 80109e8:	e00c      	b.n	8010a04 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80109ea:	6839      	ldr	r1, [r7, #0]
 80109ec:	6878      	ldr	r0, [r7, #4]
 80109ee:	f000 f8eb 	bl	8010bc8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80109f2:	4b07      	ldr	r3, [pc, #28]	; (8010a10 <USBD_SetConfig+0x148>)
 80109f4:	781b      	ldrb	r3, [r3, #0]
 80109f6:	4619      	mov	r1, r3
 80109f8:	6878      	ldr	r0, [r7, #4]
 80109fa:	f7ff f941 	bl	800fc80 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80109fe:	2303      	movs	r3, #3
 8010a00:	73fb      	strb	r3, [r7, #15]
      break;
 8010a02:	bf00      	nop
  }

  return ret;
 8010a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a06:	4618      	mov	r0, r3
 8010a08:	3710      	adds	r7, #16
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	bd80      	pop	{r7, pc}
 8010a0e:	bf00      	nop
 8010a10:	20000b98 	.word	0x20000b98

08010a14 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010a14:	b580      	push	{r7, lr}
 8010a16:	b082      	sub	sp, #8
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	6078      	str	r0, [r7, #4]
 8010a1c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010a1e:	683b      	ldr	r3, [r7, #0]
 8010a20:	88db      	ldrh	r3, [r3, #6]
 8010a22:	2b01      	cmp	r3, #1
 8010a24:	d004      	beq.n	8010a30 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010a26:	6839      	ldr	r1, [r7, #0]
 8010a28:	6878      	ldr	r0, [r7, #4]
 8010a2a:	f000 f8cd 	bl	8010bc8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010a2e:	e023      	b.n	8010a78 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010a36:	b2db      	uxtb	r3, r3
 8010a38:	2b02      	cmp	r3, #2
 8010a3a:	dc02      	bgt.n	8010a42 <USBD_GetConfig+0x2e>
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	dc03      	bgt.n	8010a48 <USBD_GetConfig+0x34>
 8010a40:	e015      	b.n	8010a6e <USBD_GetConfig+0x5a>
 8010a42:	2b03      	cmp	r3, #3
 8010a44:	d00b      	beq.n	8010a5e <USBD_GetConfig+0x4a>
 8010a46:	e012      	b.n	8010a6e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	3308      	adds	r3, #8
 8010a52:	2201      	movs	r2, #1
 8010a54:	4619      	mov	r1, r3
 8010a56:	6878      	ldr	r0, [r7, #4]
 8010a58:	f000 f927 	bl	8010caa <USBD_CtlSendData>
        break;
 8010a5c:	e00c      	b.n	8010a78 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	3304      	adds	r3, #4
 8010a62:	2201      	movs	r2, #1
 8010a64:	4619      	mov	r1, r3
 8010a66:	6878      	ldr	r0, [r7, #4]
 8010a68:	f000 f91f 	bl	8010caa <USBD_CtlSendData>
        break;
 8010a6c:	e004      	b.n	8010a78 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8010a6e:	6839      	ldr	r1, [r7, #0]
 8010a70:	6878      	ldr	r0, [r7, #4]
 8010a72:	f000 f8a9 	bl	8010bc8 <USBD_CtlError>
        break;
 8010a76:	bf00      	nop
}
 8010a78:	bf00      	nop
 8010a7a:	3708      	adds	r7, #8
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	bd80      	pop	{r7, pc}

08010a80 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b082      	sub	sp, #8
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
 8010a88:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010a90:	b2db      	uxtb	r3, r3
 8010a92:	3b01      	subs	r3, #1
 8010a94:	2b02      	cmp	r3, #2
 8010a96:	d81e      	bhi.n	8010ad6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010a98:	683b      	ldr	r3, [r7, #0]
 8010a9a:	88db      	ldrh	r3, [r3, #6]
 8010a9c:	2b02      	cmp	r3, #2
 8010a9e:	d004      	beq.n	8010aaa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010aa0:	6839      	ldr	r1, [r7, #0]
 8010aa2:	6878      	ldr	r0, [r7, #4]
 8010aa4:	f000 f890 	bl	8010bc8 <USBD_CtlError>
        break;
 8010aa8:	e01a      	b.n	8010ae0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	2201      	movs	r2, #1
 8010aae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d005      	beq.n	8010ac6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	68db      	ldr	r3, [r3, #12]
 8010abe:	f043 0202 	orr.w	r2, r3, #2
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	330c      	adds	r3, #12
 8010aca:	2202      	movs	r2, #2
 8010acc:	4619      	mov	r1, r3
 8010ace:	6878      	ldr	r0, [r7, #4]
 8010ad0:	f000 f8eb 	bl	8010caa <USBD_CtlSendData>
      break;
 8010ad4:	e004      	b.n	8010ae0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010ad6:	6839      	ldr	r1, [r7, #0]
 8010ad8:	6878      	ldr	r0, [r7, #4]
 8010ada:	f000 f875 	bl	8010bc8 <USBD_CtlError>
      break;
 8010ade:	bf00      	nop
  }
}
 8010ae0:	bf00      	nop
 8010ae2:	3708      	adds	r7, #8
 8010ae4:	46bd      	mov	sp, r7
 8010ae6:	bd80      	pop	{r7, pc}

08010ae8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010ae8:	b580      	push	{r7, lr}
 8010aea:	b082      	sub	sp, #8
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	6078      	str	r0, [r7, #4]
 8010af0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010af2:	683b      	ldr	r3, [r7, #0]
 8010af4:	885b      	ldrh	r3, [r3, #2]
 8010af6:	2b01      	cmp	r3, #1
 8010af8:	d106      	bne.n	8010b08 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	2201      	movs	r2, #1
 8010afe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010b02:	6878      	ldr	r0, [r7, #4]
 8010b04:	f000 f92b 	bl	8010d5e <USBD_CtlSendStatus>
  }
}
 8010b08:	bf00      	nop
 8010b0a:	3708      	adds	r7, #8
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	bd80      	pop	{r7, pc}

08010b10 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010b10:	b580      	push	{r7, lr}
 8010b12:	b082      	sub	sp, #8
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	6078      	str	r0, [r7, #4]
 8010b18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010b20:	b2db      	uxtb	r3, r3
 8010b22:	3b01      	subs	r3, #1
 8010b24:	2b02      	cmp	r3, #2
 8010b26:	d80b      	bhi.n	8010b40 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010b28:	683b      	ldr	r3, [r7, #0]
 8010b2a:	885b      	ldrh	r3, [r3, #2]
 8010b2c:	2b01      	cmp	r3, #1
 8010b2e:	d10c      	bne.n	8010b4a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	2200      	movs	r2, #0
 8010b34:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010b38:	6878      	ldr	r0, [r7, #4]
 8010b3a:	f000 f910 	bl	8010d5e <USBD_CtlSendStatus>
      }
      break;
 8010b3e:	e004      	b.n	8010b4a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010b40:	6839      	ldr	r1, [r7, #0]
 8010b42:	6878      	ldr	r0, [r7, #4]
 8010b44:	f000 f840 	bl	8010bc8 <USBD_CtlError>
      break;
 8010b48:	e000      	b.n	8010b4c <USBD_ClrFeature+0x3c>
      break;
 8010b4a:	bf00      	nop
  }
}
 8010b4c:	bf00      	nop
 8010b4e:	3708      	adds	r7, #8
 8010b50:	46bd      	mov	sp, r7
 8010b52:	bd80      	pop	{r7, pc}

08010b54 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010b54:	b580      	push	{r7, lr}
 8010b56:	b084      	sub	sp, #16
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
 8010b5c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010b5e:	683b      	ldr	r3, [r7, #0]
 8010b60:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	781a      	ldrb	r2, [r3, #0]
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	3301      	adds	r3, #1
 8010b6e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	781a      	ldrb	r2, [r3, #0]
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	3301      	adds	r3, #1
 8010b7c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010b7e:	68f8      	ldr	r0, [r7, #12]
 8010b80:	f7ff fa92 	bl	80100a8 <SWAPBYTE>
 8010b84:	4603      	mov	r3, r0
 8010b86:	461a      	mov	r2, r3
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	3301      	adds	r3, #1
 8010b90:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	3301      	adds	r3, #1
 8010b96:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010b98:	68f8      	ldr	r0, [r7, #12]
 8010b9a:	f7ff fa85 	bl	80100a8 <SWAPBYTE>
 8010b9e:	4603      	mov	r3, r0
 8010ba0:	461a      	mov	r2, r3
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	3301      	adds	r3, #1
 8010baa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	3301      	adds	r3, #1
 8010bb0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010bb2:	68f8      	ldr	r0, [r7, #12]
 8010bb4:	f7ff fa78 	bl	80100a8 <SWAPBYTE>
 8010bb8:	4603      	mov	r3, r0
 8010bba:	461a      	mov	r2, r3
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	80da      	strh	r2, [r3, #6]
}
 8010bc0:	bf00      	nop
 8010bc2:	3710      	adds	r7, #16
 8010bc4:	46bd      	mov	sp, r7
 8010bc6:	bd80      	pop	{r7, pc}

08010bc8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010bc8:	b580      	push	{r7, lr}
 8010bca:	b082      	sub	sp, #8
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
 8010bd0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010bd2:	2180      	movs	r1, #128	; 0x80
 8010bd4:	6878      	ldr	r0, [r7, #4]
 8010bd6:	f002 fd87 	bl	80136e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010bda:	2100      	movs	r1, #0
 8010bdc:	6878      	ldr	r0, [r7, #4]
 8010bde:	f002 fd83 	bl	80136e8 <USBD_LL_StallEP>
}
 8010be2:	bf00      	nop
 8010be4:	3708      	adds	r7, #8
 8010be6:	46bd      	mov	sp, r7
 8010be8:	bd80      	pop	{r7, pc}

08010bea <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010bea:	b580      	push	{r7, lr}
 8010bec:	b086      	sub	sp, #24
 8010bee:	af00      	add	r7, sp, #0
 8010bf0:	60f8      	str	r0, [r7, #12]
 8010bf2:	60b9      	str	r1, [r7, #8]
 8010bf4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d036      	beq.n	8010c6e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010c04:	6938      	ldr	r0, [r7, #16]
 8010c06:	f000 f836 	bl	8010c76 <USBD_GetLen>
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	3301      	adds	r3, #1
 8010c0e:	b29b      	uxth	r3, r3
 8010c10:	005b      	lsls	r3, r3, #1
 8010c12:	b29a      	uxth	r2, r3
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010c18:	7dfb      	ldrb	r3, [r7, #23]
 8010c1a:	68ba      	ldr	r2, [r7, #8]
 8010c1c:	4413      	add	r3, r2
 8010c1e:	687a      	ldr	r2, [r7, #4]
 8010c20:	7812      	ldrb	r2, [r2, #0]
 8010c22:	701a      	strb	r2, [r3, #0]
  idx++;
 8010c24:	7dfb      	ldrb	r3, [r7, #23]
 8010c26:	3301      	adds	r3, #1
 8010c28:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010c2a:	7dfb      	ldrb	r3, [r7, #23]
 8010c2c:	68ba      	ldr	r2, [r7, #8]
 8010c2e:	4413      	add	r3, r2
 8010c30:	2203      	movs	r2, #3
 8010c32:	701a      	strb	r2, [r3, #0]
  idx++;
 8010c34:	7dfb      	ldrb	r3, [r7, #23]
 8010c36:	3301      	adds	r3, #1
 8010c38:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010c3a:	e013      	b.n	8010c64 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8010c3c:	7dfb      	ldrb	r3, [r7, #23]
 8010c3e:	68ba      	ldr	r2, [r7, #8]
 8010c40:	4413      	add	r3, r2
 8010c42:	693a      	ldr	r2, [r7, #16]
 8010c44:	7812      	ldrb	r2, [r2, #0]
 8010c46:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010c48:	693b      	ldr	r3, [r7, #16]
 8010c4a:	3301      	adds	r3, #1
 8010c4c:	613b      	str	r3, [r7, #16]
    idx++;
 8010c4e:	7dfb      	ldrb	r3, [r7, #23]
 8010c50:	3301      	adds	r3, #1
 8010c52:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010c54:	7dfb      	ldrb	r3, [r7, #23]
 8010c56:	68ba      	ldr	r2, [r7, #8]
 8010c58:	4413      	add	r3, r2
 8010c5a:	2200      	movs	r2, #0
 8010c5c:	701a      	strb	r2, [r3, #0]
    idx++;
 8010c5e:	7dfb      	ldrb	r3, [r7, #23]
 8010c60:	3301      	adds	r3, #1
 8010c62:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010c64:	693b      	ldr	r3, [r7, #16]
 8010c66:	781b      	ldrb	r3, [r3, #0]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d1e7      	bne.n	8010c3c <USBD_GetString+0x52>
 8010c6c:	e000      	b.n	8010c70 <USBD_GetString+0x86>
    return;
 8010c6e:	bf00      	nop
  }
}
 8010c70:	3718      	adds	r7, #24
 8010c72:	46bd      	mov	sp, r7
 8010c74:	bd80      	pop	{r7, pc}

08010c76 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010c76:	b480      	push	{r7}
 8010c78:	b085      	sub	sp, #20
 8010c7a:	af00      	add	r7, sp, #0
 8010c7c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010c7e:	2300      	movs	r3, #0
 8010c80:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010c86:	e005      	b.n	8010c94 <USBD_GetLen+0x1e>
  {
    len++;
 8010c88:	7bfb      	ldrb	r3, [r7, #15]
 8010c8a:	3301      	adds	r3, #1
 8010c8c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010c8e:	68bb      	ldr	r3, [r7, #8]
 8010c90:	3301      	adds	r3, #1
 8010c92:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010c94:	68bb      	ldr	r3, [r7, #8]
 8010c96:	781b      	ldrb	r3, [r3, #0]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d1f5      	bne.n	8010c88 <USBD_GetLen+0x12>
  }

  return len;
 8010c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	3714      	adds	r7, #20
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca8:	4770      	bx	lr

08010caa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010caa:	b580      	push	{r7, lr}
 8010cac:	b084      	sub	sp, #16
 8010cae:	af00      	add	r7, sp, #0
 8010cb0:	60f8      	str	r0, [r7, #12]
 8010cb2:	60b9      	str	r1, [r7, #8]
 8010cb4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	2202      	movs	r2, #2
 8010cba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	687a      	ldr	r2, [r7, #4]
 8010cc2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	687a      	ldr	r2, [r7, #4]
 8010cc8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	68ba      	ldr	r2, [r7, #8]
 8010cce:	2100      	movs	r1, #0
 8010cd0:	68f8      	ldr	r0, [r7, #12]
 8010cd2:	f002 fd93 	bl	80137fc <USBD_LL_Transmit>

  return USBD_OK;
 8010cd6:	2300      	movs	r3, #0
}
 8010cd8:	4618      	mov	r0, r3
 8010cda:	3710      	adds	r7, #16
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	bd80      	pop	{r7, pc}

08010ce0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b084      	sub	sp, #16
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	60f8      	str	r0, [r7, #12]
 8010ce8:	60b9      	str	r1, [r7, #8]
 8010cea:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	68ba      	ldr	r2, [r7, #8]
 8010cf0:	2100      	movs	r1, #0
 8010cf2:	68f8      	ldr	r0, [r7, #12]
 8010cf4:	f002 fd82 	bl	80137fc <USBD_LL_Transmit>

  return USBD_OK;
 8010cf8:	2300      	movs	r3, #0
}
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	3710      	adds	r7, #16
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	bd80      	pop	{r7, pc}

08010d02 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010d02:	b580      	push	{r7, lr}
 8010d04:	b084      	sub	sp, #16
 8010d06:	af00      	add	r7, sp, #0
 8010d08:	60f8      	str	r0, [r7, #12]
 8010d0a:	60b9      	str	r1, [r7, #8]
 8010d0c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	2203      	movs	r2, #3
 8010d12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	687a      	ldr	r2, [r7, #4]
 8010d1a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	687a      	ldr	r2, [r7, #4]
 8010d22:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	68ba      	ldr	r2, [r7, #8]
 8010d2a:	2100      	movs	r1, #0
 8010d2c:	68f8      	ldr	r0, [r7, #12]
 8010d2e:	f002 fd86 	bl	801383e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010d32:	2300      	movs	r3, #0
}
 8010d34:	4618      	mov	r0, r3
 8010d36:	3710      	adds	r7, #16
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	bd80      	pop	{r7, pc}

08010d3c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	b084      	sub	sp, #16
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	60f8      	str	r0, [r7, #12]
 8010d44:	60b9      	str	r1, [r7, #8]
 8010d46:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	68ba      	ldr	r2, [r7, #8]
 8010d4c:	2100      	movs	r1, #0
 8010d4e:	68f8      	ldr	r0, [r7, #12]
 8010d50:	f002 fd75 	bl	801383e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010d54:	2300      	movs	r3, #0
}
 8010d56:	4618      	mov	r0, r3
 8010d58:	3710      	adds	r7, #16
 8010d5a:	46bd      	mov	sp, r7
 8010d5c:	bd80      	pop	{r7, pc}

08010d5e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010d5e:	b580      	push	{r7, lr}
 8010d60:	b082      	sub	sp, #8
 8010d62:	af00      	add	r7, sp, #0
 8010d64:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	2204      	movs	r2, #4
 8010d6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010d6e:	2300      	movs	r3, #0
 8010d70:	2200      	movs	r2, #0
 8010d72:	2100      	movs	r1, #0
 8010d74:	6878      	ldr	r0, [r7, #4]
 8010d76:	f002 fd41 	bl	80137fc <USBD_LL_Transmit>

  return USBD_OK;
 8010d7a:	2300      	movs	r3, #0
}
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	3708      	adds	r7, #8
 8010d80:	46bd      	mov	sp, r7
 8010d82:	bd80      	pop	{r7, pc}

08010d84 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b082      	sub	sp, #8
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	2205      	movs	r2, #5
 8010d90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010d94:	2300      	movs	r3, #0
 8010d96:	2200      	movs	r2, #0
 8010d98:	2100      	movs	r1, #0
 8010d9a:	6878      	ldr	r0, [r7, #4]
 8010d9c:	f002 fd4f 	bl	801383e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010da0:	2300      	movs	r3, #0
}
 8010da2:	4618      	mov	r0, r3
 8010da4:	3708      	adds	r7, #8
 8010da6:	46bd      	mov	sp, r7
 8010da8:	bd80      	pop	{r7, pc}

08010daa <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8010daa:	b480      	push	{r7}
 8010dac:	b085      	sub	sp, #20
 8010dae:	af00      	add	r7, sp, #0
 8010db0:	4603      	mov	r3, r0
 8010db2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8010db4:	2300      	movs	r3, #0
 8010db6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8010db8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010dbc:	2b84      	cmp	r3, #132	; 0x84
 8010dbe:	d005      	beq.n	8010dcc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8010dc0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	4413      	add	r3, r2
 8010dc8:	3303      	adds	r3, #3
 8010dca:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8010dcc:	68fb      	ldr	r3, [r7, #12]
}
 8010dce:	4618      	mov	r0, r3
 8010dd0:	3714      	adds	r7, #20
 8010dd2:	46bd      	mov	sp, r7
 8010dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd8:	4770      	bx	lr

08010dda <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8010dda:	b580      	push	{r7, lr}
 8010ddc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8010dde:	f000 fee9 	bl	8011bb4 <vTaskStartScheduler>
  
  return osOK;
 8010de2:	2300      	movs	r3, #0
}
 8010de4:	4618      	mov	r0, r3
 8010de6:	bd80      	pop	{r7, pc}

08010de8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8010de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010dea:	b087      	sub	sp, #28
 8010dec:	af02      	add	r7, sp, #8
 8010dee:	6078      	str	r0, [r7, #4]
 8010df0:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	685c      	ldr	r4, [r3, #4]
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010dfe:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010e06:	4618      	mov	r0, r3
 8010e08:	f7ff ffcf 	bl	8010daa <makeFreeRtosPriority>
 8010e0c:	4602      	mov	r2, r0
 8010e0e:	f107 030c 	add.w	r3, r7, #12
 8010e12:	9301      	str	r3, [sp, #4]
 8010e14:	9200      	str	r2, [sp, #0]
 8010e16:	683b      	ldr	r3, [r7, #0]
 8010e18:	4632      	mov	r2, r6
 8010e1a:	4629      	mov	r1, r5
 8010e1c:	4620      	mov	r0, r4
 8010e1e:	f000 fd55 	bl	80118cc <xTaskCreate>
 8010e22:	4603      	mov	r3, r0
 8010e24:	2b01      	cmp	r3, #1
 8010e26:	d001      	beq.n	8010e2c <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8010e28:	2300      	movs	r3, #0
 8010e2a:	e000      	b.n	8010e2e <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8010e2c:	68fb      	ldr	r3, [r7, #12]
}
 8010e2e:	4618      	mov	r0, r3
 8010e30:	3714      	adds	r7, #20
 8010e32:	46bd      	mov	sp, r7
 8010e34:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010e36 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8010e36:	b580      	push	{r7, lr}
 8010e38:	b084      	sub	sp, #16
 8010e3a:	af00      	add	r7, sp, #0
 8010e3c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d001      	beq.n	8010e4c <osDelay+0x16>
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	e000      	b.n	8010e4e <osDelay+0x18>
 8010e4c:	2301      	movs	r3, #1
 8010e4e:	4618      	mov	r0, r3
 8010e50:	f000 fe7c 	bl	8011b4c <vTaskDelay>
  
  return osOK;
 8010e54:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8010e56:	4618      	mov	r0, r3
 8010e58:	3710      	adds	r7, #16
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	bd80      	pop	{r7, pc}

08010e5e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8010e5e:	b580      	push	{r7, lr}
 8010e60:	b082      	sub	sp, #8
 8010e62:	af00      	add	r7, sp, #0
 8010e64:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8010e66:	2001      	movs	r0, #1
 8010e68:	f000 f9a1 	bl	80111ae <xQueueCreateMutex>
 8010e6c:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 8010e6e:	4618      	mov	r0, r3
 8010e70:	3708      	adds	r7, #8
 8010e72:	46bd      	mov	sp, r7
 8010e74:	bd80      	pop	{r7, pc}

08010e76 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8010e76:	b580      	push	{r7, lr}
 8010e78:	b084      	sub	sp, #16
 8010e7a:	af00      	add	r7, sp, #0
 8010e7c:	6078      	str	r0, [r7, #4]
 8010e7e:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8010e80:	683b      	ldr	r3, [r7, #0]
 8010e82:	2b01      	cmp	r3, #1
 8010e84:	d110      	bne.n	8010ea8 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8010e86:	2203      	movs	r2, #3
 8010e88:	2100      	movs	r1, #0
 8010e8a:	2001      	movs	r0, #1
 8010e8c:	f000 f920 	bl	80110d0 <xQueueGenericCreate>
 8010e90:	60f8      	str	r0, [r7, #12]
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d005      	beq.n	8010ea4 <osSemaphoreCreate+0x2e>
 8010e98:	2300      	movs	r3, #0
 8010e9a:	2200      	movs	r2, #0
 8010e9c:	2100      	movs	r1, #0
 8010e9e:	68f8      	ldr	r0, [r7, #12]
 8010ea0:	f000 f99e 	bl	80111e0 <xQueueGenericSend>
    return sema;
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	e000      	b.n	8010eaa <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 8010ea8:	2300      	movs	r3, #0
#endif
  }
#endif
}
 8010eaa:	4618      	mov	r0, r3
 8010eac:	3710      	adds	r7, #16
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	bd80      	pop	{r7, pc}

08010eb2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010eb2:	b480      	push	{r7}
 8010eb4:	b083      	sub	sp, #12
 8010eb6:	af00      	add	r7, sp, #0
 8010eb8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	f103 0208 	add.w	r2, r3, #8
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8010eca:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	f103 0208 	add.w	r2, r3, #8
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	f103 0208 	add.w	r2, r3, #8
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	2200      	movs	r2, #0
 8010ee4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010ee6:	bf00      	nop
 8010ee8:	370c      	adds	r7, #12
 8010eea:	46bd      	mov	sp, r7
 8010eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef0:	4770      	bx	lr

08010ef2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010ef2:	b480      	push	{r7}
 8010ef4:	b083      	sub	sp, #12
 8010ef6:	af00      	add	r7, sp, #0
 8010ef8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	2200      	movs	r2, #0
 8010efe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010f00:	bf00      	nop
 8010f02:	370c      	adds	r7, #12
 8010f04:	46bd      	mov	sp, r7
 8010f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0a:	4770      	bx	lr

08010f0c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010f0c:	b480      	push	{r7}
 8010f0e:	b085      	sub	sp, #20
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	6078      	str	r0, [r7, #4]
 8010f14:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	685b      	ldr	r3, [r3, #4]
 8010f1a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010f1c:	683b      	ldr	r3, [r7, #0]
 8010f1e:	68fa      	ldr	r2, [r7, #12]
 8010f20:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	689a      	ldr	r2, [r3, #8]
 8010f26:	683b      	ldr	r3, [r7, #0]
 8010f28:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	689b      	ldr	r3, [r3, #8]
 8010f2e:	683a      	ldr	r2, [r7, #0]
 8010f30:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	683a      	ldr	r2, [r7, #0]
 8010f36:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010f38:	683b      	ldr	r3, [r7, #0]
 8010f3a:	687a      	ldr	r2, [r7, #4]
 8010f3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	1c5a      	adds	r2, r3, #1
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	601a      	str	r2, [r3, #0]
}
 8010f48:	bf00      	nop
 8010f4a:	3714      	adds	r7, #20
 8010f4c:	46bd      	mov	sp, r7
 8010f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f52:	4770      	bx	lr

08010f54 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010f54:	b480      	push	{r7}
 8010f56:	b085      	sub	sp, #20
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	6078      	str	r0, [r7, #4]
 8010f5c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010f5e:	683b      	ldr	r3, [r7, #0]
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010f64:	68bb      	ldr	r3, [r7, #8]
 8010f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f6a:	d103      	bne.n	8010f74 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	691b      	ldr	r3, [r3, #16]
 8010f70:	60fb      	str	r3, [r7, #12]
 8010f72:	e00c      	b.n	8010f8e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	3308      	adds	r3, #8
 8010f78:	60fb      	str	r3, [r7, #12]
 8010f7a:	e002      	b.n	8010f82 <vListInsert+0x2e>
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	685b      	ldr	r3, [r3, #4]
 8010f80:	60fb      	str	r3, [r7, #12]
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	685b      	ldr	r3, [r3, #4]
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	68ba      	ldr	r2, [r7, #8]
 8010f8a:	429a      	cmp	r2, r3
 8010f8c:	d2f6      	bcs.n	8010f7c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	685a      	ldr	r2, [r3, #4]
 8010f92:	683b      	ldr	r3, [r7, #0]
 8010f94:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010f96:	683b      	ldr	r3, [r7, #0]
 8010f98:	685b      	ldr	r3, [r3, #4]
 8010f9a:	683a      	ldr	r2, [r7, #0]
 8010f9c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010f9e:	683b      	ldr	r3, [r7, #0]
 8010fa0:	68fa      	ldr	r2, [r7, #12]
 8010fa2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	683a      	ldr	r2, [r7, #0]
 8010fa8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010faa:	683b      	ldr	r3, [r7, #0]
 8010fac:	687a      	ldr	r2, [r7, #4]
 8010fae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	1c5a      	adds	r2, r3, #1
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	601a      	str	r2, [r3, #0]
}
 8010fba:	bf00      	nop
 8010fbc:	3714      	adds	r7, #20
 8010fbe:	46bd      	mov	sp, r7
 8010fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc4:	4770      	bx	lr

08010fc6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010fc6:	b480      	push	{r7}
 8010fc8:	b085      	sub	sp, #20
 8010fca:	af00      	add	r7, sp, #0
 8010fcc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	691b      	ldr	r3, [r3, #16]
 8010fd2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	685b      	ldr	r3, [r3, #4]
 8010fd8:	687a      	ldr	r2, [r7, #4]
 8010fda:	6892      	ldr	r2, [r2, #8]
 8010fdc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	689b      	ldr	r3, [r3, #8]
 8010fe2:	687a      	ldr	r2, [r7, #4]
 8010fe4:	6852      	ldr	r2, [r2, #4]
 8010fe6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	685b      	ldr	r3, [r3, #4]
 8010fec:	687a      	ldr	r2, [r7, #4]
 8010fee:	429a      	cmp	r2, r3
 8010ff0:	d103      	bne.n	8010ffa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	689a      	ldr	r2, [r3, #8]
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	2200      	movs	r2, #0
 8010ffe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	1e5a      	subs	r2, r3, #1
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	681b      	ldr	r3, [r3, #0]
}
 801100e:	4618      	mov	r0, r3
 8011010:	3714      	adds	r7, #20
 8011012:	46bd      	mov	sp, r7
 8011014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011018:	4770      	bx	lr

0801101a <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801101a:	b580      	push	{r7, lr}
 801101c:	b084      	sub	sp, #16
 801101e:	af00      	add	r7, sp, #0
 8011020:	6078      	str	r0, [r7, #4]
 8011022:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	2b00      	cmp	r3, #0
 801102c:	d10a      	bne.n	8011044 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801102e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011032:	f383 8811 	msr	BASEPRI, r3
 8011036:	f3bf 8f6f 	isb	sy
 801103a:	f3bf 8f4f 	dsb	sy
 801103e:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8011040:	bf00      	nop
 8011042:	e7fe      	b.n	8011042 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8011044:	f001 fcbe 	bl	80129c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	681a      	ldr	r2, [r3, #0]
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011050:	68f9      	ldr	r1, [r7, #12]
 8011052:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011054:	fb01 f303 	mul.w	r3, r1, r3
 8011058:	441a      	add	r2, r3
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	2200      	movs	r2, #0
 8011062:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	681a      	ldr	r2, [r3, #0]
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	681a      	ldr	r2, [r3, #0]
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011074:	3b01      	subs	r3, #1
 8011076:	68f9      	ldr	r1, [r7, #12]
 8011078:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801107a:	fb01 f303 	mul.w	r3, r1, r3
 801107e:	441a      	add	r2, r3
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	22ff      	movs	r2, #255	; 0xff
 8011088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	22ff      	movs	r2, #255	; 0xff
 8011090:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011094:	683b      	ldr	r3, [r7, #0]
 8011096:	2b00      	cmp	r3, #0
 8011098:	d109      	bne.n	80110ae <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	691b      	ldr	r3, [r3, #16]
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d00f      	beq.n	80110c2 <xQueueGenericReset+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	3310      	adds	r3, #16
 80110a6:	4618      	mov	r0, r3
 80110a8:	f000 ff8c 	bl	8011fc4 <xTaskRemoveFromEventList>
 80110ac:	e009      	b.n	80110c2 <xQueueGenericReset+0xa8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	3310      	adds	r3, #16
 80110b2:	4618      	mov	r0, r3
 80110b4:	f7ff fefd 	bl	8010eb2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	3324      	adds	r3, #36	; 0x24
 80110bc:	4618      	mov	r0, r3
 80110be:	f7ff fef8 	bl	8010eb2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80110c2:	f001 fcaf 	bl	8012a24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80110c6:	2301      	movs	r3, #1
}
 80110c8:	4618      	mov	r0, r3
 80110ca:	3710      	adds	r7, #16
 80110cc:	46bd      	mov	sp, r7
 80110ce:	bd80      	pop	{r7, pc}

080110d0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80110d0:	b580      	push	{r7, lr}
 80110d2:	b08a      	sub	sp, #40	; 0x28
 80110d4:	af02      	add	r7, sp, #8
 80110d6:	60f8      	str	r0, [r7, #12]
 80110d8:	60b9      	str	r1, [r7, #8]
 80110da:	4613      	mov	r3, r2
 80110dc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d10a      	bne.n	80110fa <xQueueGenericCreate+0x2a>
	__asm volatile
 80110e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110e8:	f383 8811 	msr	BASEPRI, r3
 80110ec:	f3bf 8f6f 	isb	sy
 80110f0:	f3bf 8f4f 	dsb	sy
 80110f4:	613b      	str	r3, [r7, #16]
}
 80110f6:	bf00      	nop
 80110f8:	e7fe      	b.n	80110f8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	68ba      	ldr	r2, [r7, #8]
 80110fe:	fb02 f303 	mul.w	r3, r2, r3
 8011102:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011104:	69fb      	ldr	r3, [r7, #28]
 8011106:	3348      	adds	r3, #72	; 0x48
 8011108:	4618      	mov	r0, r3
 801110a:	f001 fd7d 	bl	8012c08 <pvPortMalloc>
 801110e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011110:	69bb      	ldr	r3, [r7, #24]
 8011112:	2b00      	cmp	r3, #0
 8011114:	d00d      	beq.n	8011132 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8011116:	69bb      	ldr	r3, [r7, #24]
 8011118:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801111a:	697b      	ldr	r3, [r7, #20]
 801111c:	3348      	adds	r3, #72	; 0x48
 801111e:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011120:	79fa      	ldrb	r2, [r7, #7]
 8011122:	69bb      	ldr	r3, [r7, #24]
 8011124:	9300      	str	r3, [sp, #0]
 8011126:	4613      	mov	r3, r2
 8011128:	697a      	ldr	r2, [r7, #20]
 801112a:	68b9      	ldr	r1, [r7, #8]
 801112c:	68f8      	ldr	r0, [r7, #12]
 801112e:	f000 f805 	bl	801113c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011132:	69bb      	ldr	r3, [r7, #24]
	}
 8011134:	4618      	mov	r0, r3
 8011136:	3720      	adds	r7, #32
 8011138:	46bd      	mov	sp, r7
 801113a:	bd80      	pop	{r7, pc}

0801113c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801113c:	b580      	push	{r7, lr}
 801113e:	b084      	sub	sp, #16
 8011140:	af00      	add	r7, sp, #0
 8011142:	60f8      	str	r0, [r7, #12]
 8011144:	60b9      	str	r1, [r7, #8]
 8011146:	607a      	str	r2, [r7, #4]
 8011148:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801114a:	68bb      	ldr	r3, [r7, #8]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d103      	bne.n	8011158 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011150:	69bb      	ldr	r3, [r7, #24]
 8011152:	69ba      	ldr	r2, [r7, #24]
 8011154:	601a      	str	r2, [r3, #0]
 8011156:	e002      	b.n	801115e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011158:	69bb      	ldr	r3, [r7, #24]
 801115a:	687a      	ldr	r2, [r7, #4]
 801115c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801115e:	69bb      	ldr	r3, [r7, #24]
 8011160:	68fa      	ldr	r2, [r7, #12]
 8011162:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011164:	69bb      	ldr	r3, [r7, #24]
 8011166:	68ba      	ldr	r2, [r7, #8]
 8011168:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801116a:	2101      	movs	r1, #1
 801116c:	69b8      	ldr	r0, [r7, #24]
 801116e:	f7ff ff54 	bl	801101a <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011172:	bf00      	nop
 8011174:	3710      	adds	r7, #16
 8011176:	46bd      	mov	sp, r7
 8011178:	bd80      	pop	{r7, pc}

0801117a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801117a:	b580      	push	{r7, lr}
 801117c:	b082      	sub	sp, #8
 801117e:	af00      	add	r7, sp, #0
 8011180:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	2b00      	cmp	r3, #0
 8011186:	d00e      	beq.n	80111a6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	2200      	movs	r2, #0
 801118c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	2200      	movs	r2, #0
 8011192:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	2200      	movs	r2, #0
 8011198:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801119a:	2300      	movs	r3, #0
 801119c:	2200      	movs	r2, #0
 801119e:	2100      	movs	r1, #0
 80111a0:	6878      	ldr	r0, [r7, #4]
 80111a2:	f000 f81d 	bl	80111e0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80111a6:	bf00      	nop
 80111a8:	3708      	adds	r7, #8
 80111aa:	46bd      	mov	sp, r7
 80111ac:	bd80      	pop	{r7, pc}

080111ae <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80111ae:	b580      	push	{r7, lr}
 80111b0:	b086      	sub	sp, #24
 80111b2:	af00      	add	r7, sp, #0
 80111b4:	4603      	mov	r3, r0
 80111b6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80111b8:	2301      	movs	r3, #1
 80111ba:	617b      	str	r3, [r7, #20]
 80111bc:	2300      	movs	r3, #0
 80111be:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80111c0:	79fb      	ldrb	r3, [r7, #7]
 80111c2:	461a      	mov	r2, r3
 80111c4:	6939      	ldr	r1, [r7, #16]
 80111c6:	6978      	ldr	r0, [r7, #20]
 80111c8:	f7ff ff82 	bl	80110d0 <xQueueGenericCreate>
 80111cc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80111ce:	68f8      	ldr	r0, [r7, #12]
 80111d0:	f7ff ffd3 	bl	801117a <prvInitialiseMutex>

		return xNewQueue;
 80111d4:	68fb      	ldr	r3, [r7, #12]
	}
 80111d6:	4618      	mov	r0, r3
 80111d8:	3718      	adds	r7, #24
 80111da:	46bd      	mov	sp, r7
 80111dc:	bd80      	pop	{r7, pc}
	...

080111e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80111e0:	b580      	push	{r7, lr}
 80111e2:	b08e      	sub	sp, #56	; 0x38
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	60f8      	str	r0, [r7, #12]
 80111e8:	60b9      	str	r1, [r7, #8]
 80111ea:	607a      	str	r2, [r7, #4]
 80111ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80111ee:	2300      	movs	r3, #0
 80111f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80111f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d10a      	bne.n	8011212 <xQueueGenericSend+0x32>
	__asm volatile
 80111fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011200:	f383 8811 	msr	BASEPRI, r3
 8011204:	f3bf 8f6f 	isb	sy
 8011208:	f3bf 8f4f 	dsb	sy
 801120c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801120e:	bf00      	nop
 8011210:	e7fe      	b.n	8011210 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011212:	68bb      	ldr	r3, [r7, #8]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d103      	bne.n	8011220 <xQueueGenericSend+0x40>
 8011218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801121c:	2b00      	cmp	r3, #0
 801121e:	d101      	bne.n	8011224 <xQueueGenericSend+0x44>
 8011220:	2301      	movs	r3, #1
 8011222:	e000      	b.n	8011226 <xQueueGenericSend+0x46>
 8011224:	2300      	movs	r3, #0
 8011226:	2b00      	cmp	r3, #0
 8011228:	d10a      	bne.n	8011240 <xQueueGenericSend+0x60>
	__asm volatile
 801122a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801122e:	f383 8811 	msr	BASEPRI, r3
 8011232:	f3bf 8f6f 	isb	sy
 8011236:	f3bf 8f4f 	dsb	sy
 801123a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801123c:	bf00      	nop
 801123e:	e7fe      	b.n	801123e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011240:	683b      	ldr	r3, [r7, #0]
 8011242:	2b02      	cmp	r3, #2
 8011244:	d103      	bne.n	801124e <xQueueGenericSend+0x6e>
 8011246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801124a:	2b01      	cmp	r3, #1
 801124c:	d101      	bne.n	8011252 <xQueueGenericSend+0x72>
 801124e:	2301      	movs	r3, #1
 8011250:	e000      	b.n	8011254 <xQueueGenericSend+0x74>
 8011252:	2300      	movs	r3, #0
 8011254:	2b00      	cmp	r3, #0
 8011256:	d10a      	bne.n	801126e <xQueueGenericSend+0x8e>
	__asm volatile
 8011258:	f04f 0350 	mov.w	r3, #80	; 0x50
 801125c:	f383 8811 	msr	BASEPRI, r3
 8011260:	f3bf 8f6f 	isb	sy
 8011264:	f3bf 8f4f 	dsb	sy
 8011268:	623b      	str	r3, [r7, #32]
}
 801126a:	bf00      	nop
 801126c:	e7fe      	b.n	801126c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801126e:	f001 f855 	bl	801231c <xTaskGetSchedulerState>
 8011272:	4603      	mov	r3, r0
 8011274:	2b00      	cmp	r3, #0
 8011276:	d102      	bne.n	801127e <xQueueGenericSend+0x9e>
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	2b00      	cmp	r3, #0
 801127c:	d101      	bne.n	8011282 <xQueueGenericSend+0xa2>
 801127e:	2301      	movs	r3, #1
 8011280:	e000      	b.n	8011284 <xQueueGenericSend+0xa4>
 8011282:	2300      	movs	r3, #0
 8011284:	2b00      	cmp	r3, #0
 8011286:	d10a      	bne.n	801129e <xQueueGenericSend+0xbe>
	__asm volatile
 8011288:	f04f 0350 	mov.w	r3, #80	; 0x50
 801128c:	f383 8811 	msr	BASEPRI, r3
 8011290:	f3bf 8f6f 	isb	sy
 8011294:	f3bf 8f4f 	dsb	sy
 8011298:	61fb      	str	r3, [r7, #28]
}
 801129a:	bf00      	nop
 801129c:	e7fe      	b.n	801129c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801129e:	f001 fb91 	bl	80129c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80112a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80112a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80112aa:	429a      	cmp	r2, r3
 80112ac:	d302      	bcc.n	80112b4 <xQueueGenericSend+0xd4>
 80112ae:	683b      	ldr	r3, [r7, #0]
 80112b0:	2b02      	cmp	r3, #2
 80112b2:	d112      	bne.n	80112da <xQueueGenericSend+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80112b4:	683a      	ldr	r2, [r7, #0]
 80112b6:	68b9      	ldr	r1, [r7, #8]
 80112b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80112ba:	f000 fa1d 	bl	80116f8 <prvCopyDataToQueue>
 80112be:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80112c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d004      	beq.n	80112d2 <xQueueGenericSend+0xf2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80112c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112ca:	3324      	adds	r3, #36	; 0x24
 80112cc:	4618      	mov	r0, r3
 80112ce:	f000 fe79 	bl	8011fc4 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80112d2:	f001 fba7 	bl	8012a24 <vPortExitCritical>
				return pdPASS;
 80112d6:	2301      	movs	r3, #1
 80112d8:	e062      	b.n	80113a0 <xQueueGenericSend+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d103      	bne.n	80112e8 <xQueueGenericSend+0x108>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80112e0:	f001 fba0 	bl	8012a24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80112e4:	2300      	movs	r3, #0
 80112e6:	e05b      	b.n	80113a0 <xQueueGenericSend+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80112e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d106      	bne.n	80112fc <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80112ee:	f107 0314 	add.w	r3, r7, #20
 80112f2:	4618      	mov	r0, r3
 80112f4:	f000 fec8 	bl	8012088 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80112f8:	2301      	movs	r3, #1
 80112fa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80112fc:	f001 fb92 	bl	8012a24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011300:	f000 fca8 	bl	8011c54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011304:	f001 fb5e 	bl	80129c4 <vPortEnterCritical>
 8011308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801130a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801130e:	b25b      	sxtb	r3, r3
 8011310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011314:	d103      	bne.n	801131e <xQueueGenericSend+0x13e>
 8011316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011318:	2200      	movs	r2, #0
 801131a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801131e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011320:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011324:	b25b      	sxtb	r3, r3
 8011326:	f1b3 3fff 	cmp.w	r3, #4294967295
 801132a:	d103      	bne.n	8011334 <xQueueGenericSend+0x154>
 801132c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801132e:	2200      	movs	r2, #0
 8011330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011334:	f001 fb76 	bl	8012a24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011338:	1d3a      	adds	r2, r7, #4
 801133a:	f107 0314 	add.w	r3, r7, #20
 801133e:	4611      	mov	r1, r2
 8011340:	4618      	mov	r0, r3
 8011342:	f000 feb7 	bl	80120b4 <xTaskCheckForTimeOut>
 8011346:	4603      	mov	r3, r0
 8011348:	2b00      	cmp	r3, #0
 801134a:	d123      	bne.n	8011394 <xQueueGenericSend+0x1b4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801134c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801134e:	f000 faa5 	bl	801189c <prvIsQueueFull>
 8011352:	4603      	mov	r3, r0
 8011354:	2b00      	cmp	r3, #0
 8011356:	d017      	beq.n	8011388 <xQueueGenericSend+0x1a8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801135a:	3310      	adds	r3, #16
 801135c:	687a      	ldr	r2, [r7, #4]
 801135e:	4611      	mov	r1, r2
 8011360:	4618      	mov	r0, r3
 8011362:	f000 fe0b 	bl	8011f7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011366:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011368:	f000 fa30 	bl	80117cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801136c:	f000 fc80 	bl	8011c70 <xTaskResumeAll>
 8011370:	4603      	mov	r3, r0
 8011372:	2b00      	cmp	r3, #0
 8011374:	d193      	bne.n	801129e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8011376:	4b0c      	ldr	r3, [pc, #48]	; (80113a8 <xQueueGenericSend+0x1c8>)
 8011378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801137c:	601a      	str	r2, [r3, #0]
 801137e:	f3bf 8f4f 	dsb	sy
 8011382:	f3bf 8f6f 	isb	sy
 8011386:	e78a      	b.n	801129e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011388:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801138a:	f000 fa1f 	bl	80117cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801138e:	f000 fc6f 	bl	8011c70 <xTaskResumeAll>
 8011392:	e784      	b.n	801129e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011394:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011396:	f000 fa19 	bl	80117cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801139a:	f000 fc69 	bl	8011c70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801139e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80113a0:	4618      	mov	r0, r3
 80113a2:	3738      	adds	r7, #56	; 0x38
 80113a4:	46bd      	mov	sp, r7
 80113a6:	bd80      	pop	{r7, pc}
 80113a8:	e000ed04 	.word	0xe000ed04

080113ac <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80113ac:	b580      	push	{r7, lr}
 80113ae:	b08e      	sub	sp, #56	; 0x38
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
 80113b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80113ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d10a      	bne.n	80113d6 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80113c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113c4:	f383 8811 	msr	BASEPRI, r3
 80113c8:	f3bf 8f6f 	isb	sy
 80113cc:	f3bf 8f4f 	dsb	sy
 80113d0:	623b      	str	r3, [r7, #32]
}
 80113d2:	bf00      	nop
 80113d4:	e7fe      	b.n	80113d4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80113d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d00a      	beq.n	80113f4 <xQueueGiveFromISR+0x48>
	__asm volatile
 80113de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113e2:	f383 8811 	msr	BASEPRI, r3
 80113e6:	f3bf 8f6f 	isb	sy
 80113ea:	f3bf 8f4f 	dsb	sy
 80113ee:	61fb      	str	r3, [r7, #28]
}
 80113f0:	bf00      	nop
 80113f2:	e7fe      	b.n	80113f2 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80113f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d103      	bne.n	8011404 <xQueueGiveFromISR+0x58>
 80113fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113fe:	689b      	ldr	r3, [r3, #8]
 8011400:	2b00      	cmp	r3, #0
 8011402:	d101      	bne.n	8011408 <xQueueGiveFromISR+0x5c>
 8011404:	2301      	movs	r3, #1
 8011406:	e000      	b.n	801140a <xQueueGiveFromISR+0x5e>
 8011408:	2300      	movs	r3, #0
 801140a:	2b00      	cmp	r3, #0
 801140c:	d10a      	bne.n	8011424 <xQueueGiveFromISR+0x78>
	__asm volatile
 801140e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011412:	f383 8811 	msr	BASEPRI, r3
 8011416:	f3bf 8f6f 	isb	sy
 801141a:	f3bf 8f4f 	dsb	sy
 801141e:	61bb      	str	r3, [r7, #24]
}
 8011420:	bf00      	nop
 8011422:	e7fe      	b.n	8011422 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011424:	f001 fbb0 	bl	8012b88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011428:	f3ef 8211 	mrs	r2, BASEPRI
 801142c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011430:	f383 8811 	msr	BASEPRI, r3
 8011434:	f3bf 8f6f 	isb	sy
 8011438:	f3bf 8f4f 	dsb	sy
 801143c:	617a      	str	r2, [r7, #20]
 801143e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011440:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011442:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011448:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801144a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801144c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801144e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011450:	429a      	cmp	r2, r3
 8011452:	d22b      	bcs.n	80114ac <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011456:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801145a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801145e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011460:	1c5a      	adds	r2, r3, #1
 8011462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011464:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011466:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801146a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801146e:	d112      	bne.n	8011496 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011474:	2b00      	cmp	r3, #0
 8011476:	d016      	beq.n	80114a6 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801147a:	3324      	adds	r3, #36	; 0x24
 801147c:	4618      	mov	r0, r3
 801147e:	f000 fda1 	bl	8011fc4 <xTaskRemoveFromEventList>
 8011482:	4603      	mov	r3, r0
 8011484:	2b00      	cmp	r3, #0
 8011486:	d00e      	beq.n	80114a6 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011488:	683b      	ldr	r3, [r7, #0]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d00b      	beq.n	80114a6 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801148e:	683b      	ldr	r3, [r7, #0]
 8011490:	2201      	movs	r2, #1
 8011492:	601a      	str	r2, [r3, #0]
 8011494:	e007      	b.n	80114a6 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011496:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801149a:	3301      	adds	r3, #1
 801149c:	b2db      	uxtb	r3, r3
 801149e:	b25a      	sxtb	r2, r3
 80114a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80114a6:	2301      	movs	r3, #1
 80114a8:	637b      	str	r3, [r7, #52]	; 0x34
 80114aa:	e001      	b.n	80114b0 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80114ac:	2300      	movs	r3, #0
 80114ae:	637b      	str	r3, [r7, #52]	; 0x34
 80114b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114b2:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80114ba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80114bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80114be:	4618      	mov	r0, r3
 80114c0:	3738      	adds	r7, #56	; 0x38
 80114c2:	46bd      	mov	sp, r7
 80114c4:	bd80      	pop	{r7, pc}
	...

080114c8 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80114c8:	b580      	push	{r7, lr}
 80114ca:	b08e      	sub	sp, #56	; 0x38
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	6078      	str	r0, [r7, #4]
 80114d0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80114d2:	2300      	movs	r3, #0
 80114d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80114da:	2300      	movs	r3, #0
 80114dc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80114de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d10a      	bne.n	80114fa <xQueueSemaphoreTake+0x32>
	__asm volatile
 80114e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114e8:	f383 8811 	msr	BASEPRI, r3
 80114ec:	f3bf 8f6f 	isb	sy
 80114f0:	f3bf 8f4f 	dsb	sy
 80114f4:	623b      	str	r3, [r7, #32]
}
 80114f6:	bf00      	nop
 80114f8:	e7fe      	b.n	80114f8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80114fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d00a      	beq.n	8011518 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8011502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011506:	f383 8811 	msr	BASEPRI, r3
 801150a:	f3bf 8f6f 	isb	sy
 801150e:	f3bf 8f4f 	dsb	sy
 8011512:	61fb      	str	r3, [r7, #28]
}
 8011514:	bf00      	nop
 8011516:	e7fe      	b.n	8011516 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011518:	f000 ff00 	bl	801231c <xTaskGetSchedulerState>
 801151c:	4603      	mov	r3, r0
 801151e:	2b00      	cmp	r3, #0
 8011520:	d102      	bne.n	8011528 <xQueueSemaphoreTake+0x60>
 8011522:	683b      	ldr	r3, [r7, #0]
 8011524:	2b00      	cmp	r3, #0
 8011526:	d101      	bne.n	801152c <xQueueSemaphoreTake+0x64>
 8011528:	2301      	movs	r3, #1
 801152a:	e000      	b.n	801152e <xQueueSemaphoreTake+0x66>
 801152c:	2300      	movs	r3, #0
 801152e:	2b00      	cmp	r3, #0
 8011530:	d10a      	bne.n	8011548 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8011532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011536:	f383 8811 	msr	BASEPRI, r3
 801153a:	f3bf 8f6f 	isb	sy
 801153e:	f3bf 8f4f 	dsb	sy
 8011542:	61bb      	str	r3, [r7, #24]
}
 8011544:	bf00      	nop
 8011546:	e7fe      	b.n	8011546 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011548:	f001 fa3c 	bl	80129c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801154c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801154e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011550:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011554:	2b00      	cmp	r3, #0
 8011556:	d019      	beq.n	801158c <xQueueSemaphoreTake+0xc4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801155a:	1e5a      	subs	r2, r3, #1
 801155c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801155e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	2b00      	cmp	r3, #0
 8011566:	d104      	bne.n	8011572 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8011568:	f001 f880 	bl	801266c <pvTaskIncrementMutexHeldCount>
 801156c:	4602      	mov	r2, r0
 801156e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011570:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011574:	691b      	ldr	r3, [r3, #16]
 8011576:	2b00      	cmp	r3, #0
 8011578:	d004      	beq.n	8011584 <xQueueSemaphoreTake+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801157a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801157c:	3310      	adds	r3, #16
 801157e:	4618      	mov	r0, r3
 8011580:	f000 fd20 	bl	8011fc4 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011584:	f001 fa4e 	bl	8012a24 <vPortExitCritical>
				return pdPASS;
 8011588:	2301      	movs	r3, #1
 801158a:	e097      	b.n	80116bc <xQueueSemaphoreTake+0x1f4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801158c:	683b      	ldr	r3, [r7, #0]
 801158e:	2b00      	cmp	r3, #0
 8011590:	d111      	bne.n	80115b6 <xQueueSemaphoreTake+0xee>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011594:	2b00      	cmp	r3, #0
 8011596:	d00a      	beq.n	80115ae <xQueueSemaphoreTake+0xe6>
	__asm volatile
 8011598:	f04f 0350 	mov.w	r3, #80	; 0x50
 801159c:	f383 8811 	msr	BASEPRI, r3
 80115a0:	f3bf 8f6f 	isb	sy
 80115a4:	f3bf 8f4f 	dsb	sy
 80115a8:	617b      	str	r3, [r7, #20]
}
 80115aa:	bf00      	nop
 80115ac:	e7fe      	b.n	80115ac <xQueueSemaphoreTake+0xe4>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80115ae:	f001 fa39 	bl	8012a24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80115b2:	2300      	movs	r3, #0
 80115b4:	e082      	b.n	80116bc <xQueueSemaphoreTake+0x1f4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80115b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d106      	bne.n	80115ca <xQueueSemaphoreTake+0x102>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80115bc:	f107 030c 	add.w	r3, r7, #12
 80115c0:	4618      	mov	r0, r3
 80115c2:	f000 fd61 	bl	8012088 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80115c6:	2301      	movs	r3, #1
 80115c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80115ca:	f001 fa2b 	bl	8012a24 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80115ce:	f000 fb41 	bl	8011c54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80115d2:	f001 f9f7 	bl	80129c4 <vPortEnterCritical>
 80115d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80115dc:	b25b      	sxtb	r3, r3
 80115de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115e2:	d103      	bne.n	80115ec <xQueueSemaphoreTake+0x124>
 80115e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115e6:	2200      	movs	r2, #0
 80115e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80115ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80115f2:	b25b      	sxtb	r3, r3
 80115f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115f8:	d103      	bne.n	8011602 <xQueueSemaphoreTake+0x13a>
 80115fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115fc:	2200      	movs	r2, #0
 80115fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011602:	f001 fa0f 	bl	8012a24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011606:	463a      	mov	r2, r7
 8011608:	f107 030c 	add.w	r3, r7, #12
 801160c:	4611      	mov	r1, r2
 801160e:	4618      	mov	r0, r3
 8011610:	f000 fd50 	bl	80120b4 <xTaskCheckForTimeOut>
 8011614:	4603      	mov	r3, r0
 8011616:	2b00      	cmp	r3, #0
 8011618:	d132      	bne.n	8011680 <xQueueSemaphoreTake+0x1b8>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801161a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801161c:	f000 f928 	bl	8011870 <prvIsQueueEmpty>
 8011620:	4603      	mov	r3, r0
 8011622:	2b00      	cmp	r3, #0
 8011624:	d026      	beq.n	8011674 <xQueueSemaphoreTake+0x1ac>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	2b00      	cmp	r3, #0
 801162c:	d109      	bne.n	8011642 <xQueueSemaphoreTake+0x17a>
					{
						taskENTER_CRITICAL();
 801162e:	f001 f9c9 	bl	80129c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011634:	689b      	ldr	r3, [r3, #8]
 8011636:	4618      	mov	r0, r3
 8011638:	f000 fe8e 	bl	8012358 <xTaskPriorityInherit>
 801163c:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801163e:	f001 f9f1 	bl	8012a24 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011644:	3324      	adds	r3, #36	; 0x24
 8011646:	683a      	ldr	r2, [r7, #0]
 8011648:	4611      	mov	r1, r2
 801164a:	4618      	mov	r0, r3
 801164c:	f000 fc96 	bl	8011f7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011650:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011652:	f000 f8bb 	bl	80117cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011656:	f000 fb0b 	bl	8011c70 <xTaskResumeAll>
 801165a:	4603      	mov	r3, r0
 801165c:	2b00      	cmp	r3, #0
 801165e:	f47f af73 	bne.w	8011548 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8011662:	4b18      	ldr	r3, [pc, #96]	; (80116c4 <xQueueSemaphoreTake+0x1fc>)
 8011664:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011668:	601a      	str	r2, [r3, #0]
 801166a:	f3bf 8f4f 	dsb	sy
 801166e:	f3bf 8f6f 	isb	sy
 8011672:	e769      	b.n	8011548 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011674:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011676:	f000 f8a9 	bl	80117cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801167a:	f000 faf9 	bl	8011c70 <xTaskResumeAll>
 801167e:	e763      	b.n	8011548 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011680:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011682:	f000 f8a3 	bl	80117cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011686:	f000 faf3 	bl	8011c70 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801168a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801168c:	f000 f8f0 	bl	8011870 <prvIsQueueEmpty>
 8011690:	4603      	mov	r3, r0
 8011692:	2b00      	cmp	r3, #0
 8011694:	f43f af58 	beq.w	8011548 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8011698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801169a:	2b00      	cmp	r3, #0
 801169c:	d00d      	beq.n	80116ba <xQueueSemaphoreTake+0x1f2>
					{
						taskENTER_CRITICAL();
 801169e:	f001 f991 	bl	80129c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80116a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80116a4:	f000 f810 	bl	80116c8 <prvGetDisinheritPriorityAfterTimeout>
 80116a8:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80116aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ac:	689b      	ldr	r3, [r3, #8]
 80116ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80116b0:	4618      	mov	r0, r3
 80116b2:	f000 ff4d 	bl	8012550 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80116b6:	f001 f9b5 	bl	8012a24 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80116ba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80116bc:	4618      	mov	r0, r3
 80116be:	3738      	adds	r7, #56	; 0x38
 80116c0:	46bd      	mov	sp, r7
 80116c2:	bd80      	pop	{r7, pc}
 80116c4:	e000ed04 	.word	0xe000ed04

080116c8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80116c8:	b480      	push	{r7}
 80116ca:	b085      	sub	sp, #20
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d006      	beq.n	80116e6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	f1c3 0307 	rsb	r3, r3, #7
 80116e2:	60fb      	str	r3, [r7, #12]
 80116e4:	e001      	b.n	80116ea <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80116e6:	2300      	movs	r3, #0
 80116e8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80116ea:	68fb      	ldr	r3, [r7, #12]
	}
 80116ec:	4618      	mov	r0, r3
 80116ee:	3714      	adds	r7, #20
 80116f0:	46bd      	mov	sp, r7
 80116f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f6:	4770      	bx	lr

080116f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80116f8:	b580      	push	{r7, lr}
 80116fa:	b086      	sub	sp, #24
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	60f8      	str	r0, [r7, #12]
 8011700:	60b9      	str	r1, [r7, #8]
 8011702:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011704:	2300      	movs	r3, #0
 8011706:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801170c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011712:	2b00      	cmp	r3, #0
 8011714:	d10d      	bne.n	8011732 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	2b00      	cmp	r3, #0
 801171c:	d14d      	bne.n	80117ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	689b      	ldr	r3, [r3, #8]
 8011722:	4618      	mov	r0, r3
 8011724:	f000 fe8e 	bl	8012444 <xTaskPriorityDisinherit>
 8011728:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	2200      	movs	r2, #0
 801172e:	609a      	str	r2, [r3, #8]
 8011730:	e043      	b.n	80117ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d119      	bne.n	801176c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	6858      	ldr	r0, [r3, #4]
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011740:	461a      	mov	r2, r3
 8011742:	68b9      	ldr	r1, [r7, #8]
 8011744:	f002 f9d8 	bl	8013af8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	685a      	ldr	r2, [r3, #4]
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011750:	441a      	add	r2, r3
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	685a      	ldr	r2, [r3, #4]
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	689b      	ldr	r3, [r3, #8]
 801175e:	429a      	cmp	r2, r3
 8011760:	d32b      	bcc.n	80117ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	681a      	ldr	r2, [r3, #0]
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	605a      	str	r2, [r3, #4]
 801176a:	e026      	b.n	80117ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	68d8      	ldr	r0, [r3, #12]
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011774:	461a      	mov	r2, r3
 8011776:	68b9      	ldr	r1, [r7, #8]
 8011778:	f002 f9be 	bl	8013af8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	68da      	ldr	r2, [r3, #12]
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011784:	425b      	negs	r3, r3
 8011786:	441a      	add	r2, r3
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	68da      	ldr	r2, [r3, #12]
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	429a      	cmp	r2, r3
 8011796:	d207      	bcs.n	80117a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	689a      	ldr	r2, [r3, #8]
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117a0:	425b      	negs	r3, r3
 80117a2:	441a      	add	r2, r3
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	2b02      	cmp	r3, #2
 80117ac:	d105      	bne.n	80117ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80117ae:	693b      	ldr	r3, [r7, #16]
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d002      	beq.n	80117ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80117b4:	693b      	ldr	r3, [r7, #16]
 80117b6:	3b01      	subs	r3, #1
 80117b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80117ba:	693b      	ldr	r3, [r7, #16]
 80117bc:	1c5a      	adds	r2, r3, #1
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80117c2:	697b      	ldr	r3, [r7, #20]
}
 80117c4:	4618      	mov	r0, r3
 80117c6:	3718      	adds	r7, #24
 80117c8:	46bd      	mov	sp, r7
 80117ca:	bd80      	pop	{r7, pc}

080117cc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b084      	sub	sp, #16
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80117d4:	f001 f8f6 	bl	80129c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80117de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80117e0:	e011      	b.n	8011806 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d012      	beq.n	8011810 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	3324      	adds	r3, #36	; 0x24
 80117ee:	4618      	mov	r0, r3
 80117f0:	f000 fbe8 	bl	8011fc4 <xTaskRemoveFromEventList>
 80117f4:	4603      	mov	r3, r0
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d001      	beq.n	80117fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80117fa:	f000 fccd 	bl	8012198 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80117fe:	7bfb      	ldrb	r3, [r7, #15]
 8011800:	3b01      	subs	r3, #1
 8011802:	b2db      	uxtb	r3, r3
 8011804:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801180a:	2b00      	cmp	r3, #0
 801180c:	dce9      	bgt.n	80117e2 <prvUnlockQueue+0x16>
 801180e:	e000      	b.n	8011812 <prvUnlockQueue+0x46>
					break;
 8011810:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	22ff      	movs	r2, #255	; 0xff
 8011816:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801181a:	f001 f903 	bl	8012a24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801181e:	f001 f8d1 	bl	80129c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011828:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801182a:	e011      	b.n	8011850 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	691b      	ldr	r3, [r3, #16]
 8011830:	2b00      	cmp	r3, #0
 8011832:	d012      	beq.n	801185a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	3310      	adds	r3, #16
 8011838:	4618      	mov	r0, r3
 801183a:	f000 fbc3 	bl	8011fc4 <xTaskRemoveFromEventList>
 801183e:	4603      	mov	r3, r0
 8011840:	2b00      	cmp	r3, #0
 8011842:	d001      	beq.n	8011848 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011844:	f000 fca8 	bl	8012198 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011848:	7bbb      	ldrb	r3, [r7, #14]
 801184a:	3b01      	subs	r3, #1
 801184c:	b2db      	uxtb	r3, r3
 801184e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011850:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011854:	2b00      	cmp	r3, #0
 8011856:	dce9      	bgt.n	801182c <prvUnlockQueue+0x60>
 8011858:	e000      	b.n	801185c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801185a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	22ff      	movs	r2, #255	; 0xff
 8011860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011864:	f001 f8de 	bl	8012a24 <vPortExitCritical>
}
 8011868:	bf00      	nop
 801186a:	3710      	adds	r7, #16
 801186c:	46bd      	mov	sp, r7
 801186e:	bd80      	pop	{r7, pc}

08011870 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011870:	b580      	push	{r7, lr}
 8011872:	b084      	sub	sp, #16
 8011874:	af00      	add	r7, sp, #0
 8011876:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011878:	f001 f8a4 	bl	80129c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011880:	2b00      	cmp	r3, #0
 8011882:	d102      	bne.n	801188a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011884:	2301      	movs	r3, #1
 8011886:	60fb      	str	r3, [r7, #12]
 8011888:	e001      	b.n	801188e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801188a:	2300      	movs	r3, #0
 801188c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801188e:	f001 f8c9 	bl	8012a24 <vPortExitCritical>

	return xReturn;
 8011892:	68fb      	ldr	r3, [r7, #12]
}
 8011894:	4618      	mov	r0, r3
 8011896:	3710      	adds	r7, #16
 8011898:	46bd      	mov	sp, r7
 801189a:	bd80      	pop	{r7, pc}

0801189c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801189c:	b580      	push	{r7, lr}
 801189e:	b084      	sub	sp, #16
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80118a4:	f001 f88e 	bl	80129c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80118b0:	429a      	cmp	r2, r3
 80118b2:	d102      	bne.n	80118ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80118b4:	2301      	movs	r3, #1
 80118b6:	60fb      	str	r3, [r7, #12]
 80118b8:	e001      	b.n	80118be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80118ba:	2300      	movs	r3, #0
 80118bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80118be:	f001 f8b1 	bl	8012a24 <vPortExitCritical>

	return xReturn;
 80118c2:	68fb      	ldr	r3, [r7, #12]
}
 80118c4:	4618      	mov	r0, r3
 80118c6:	3710      	adds	r7, #16
 80118c8:	46bd      	mov	sp, r7
 80118ca:	bd80      	pop	{r7, pc}

080118cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b08c      	sub	sp, #48	; 0x30
 80118d0:	af04      	add	r7, sp, #16
 80118d2:	60f8      	str	r0, [r7, #12]
 80118d4:	60b9      	str	r1, [r7, #8]
 80118d6:	603b      	str	r3, [r7, #0]
 80118d8:	4613      	mov	r3, r2
 80118da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80118dc:	88fb      	ldrh	r3, [r7, #6]
 80118de:	009b      	lsls	r3, r3, #2
 80118e0:	4618      	mov	r0, r3
 80118e2:	f001 f991 	bl	8012c08 <pvPortMalloc>
 80118e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80118e8:	697b      	ldr	r3, [r7, #20]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d00e      	beq.n	801190c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80118ee:	20a0      	movs	r0, #160	; 0xa0
 80118f0:	f001 f98a 	bl	8012c08 <pvPortMalloc>
 80118f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80118f6:	69fb      	ldr	r3, [r7, #28]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d003      	beq.n	8011904 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80118fc:	69fb      	ldr	r3, [r7, #28]
 80118fe:	697a      	ldr	r2, [r7, #20]
 8011900:	631a      	str	r2, [r3, #48]	; 0x30
 8011902:	e005      	b.n	8011910 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011904:	6978      	ldr	r0, [r7, #20]
 8011906:	f001 fa4b 	bl	8012da0 <vPortFree>
 801190a:	e001      	b.n	8011910 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801190c:	2300      	movs	r3, #0
 801190e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011910:	69fb      	ldr	r3, [r7, #28]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d013      	beq.n	801193e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011916:	88fa      	ldrh	r2, [r7, #6]
 8011918:	2300      	movs	r3, #0
 801191a:	9303      	str	r3, [sp, #12]
 801191c:	69fb      	ldr	r3, [r7, #28]
 801191e:	9302      	str	r3, [sp, #8]
 8011920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011922:	9301      	str	r3, [sp, #4]
 8011924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011926:	9300      	str	r3, [sp, #0]
 8011928:	683b      	ldr	r3, [r7, #0]
 801192a:	68b9      	ldr	r1, [r7, #8]
 801192c:	68f8      	ldr	r0, [r7, #12]
 801192e:	f000 f80f 	bl	8011950 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011932:	69f8      	ldr	r0, [r7, #28]
 8011934:	f000 f8ae 	bl	8011a94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011938:	2301      	movs	r3, #1
 801193a:	61bb      	str	r3, [r7, #24]
 801193c:	e002      	b.n	8011944 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801193e:	f04f 33ff 	mov.w	r3, #4294967295
 8011942:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011944:	69bb      	ldr	r3, [r7, #24]
	}
 8011946:	4618      	mov	r0, r3
 8011948:	3720      	adds	r7, #32
 801194a:	46bd      	mov	sp, r7
 801194c:	bd80      	pop	{r7, pc}
	...

08011950 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011950:	b580      	push	{r7, lr}
 8011952:	b088      	sub	sp, #32
 8011954:	af00      	add	r7, sp, #0
 8011956:	60f8      	str	r0, [r7, #12]
 8011958:	60b9      	str	r1, [r7, #8]
 801195a:	607a      	str	r2, [r7, #4]
 801195c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801195e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011960:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011968:	3b01      	subs	r3, #1
 801196a:	009b      	lsls	r3, r3, #2
 801196c:	4413      	add	r3, r2
 801196e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011970:	69bb      	ldr	r3, [r7, #24]
 8011972:	f023 0307 	bic.w	r3, r3, #7
 8011976:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011978:	69bb      	ldr	r3, [r7, #24]
 801197a:	f003 0307 	and.w	r3, r3, #7
 801197e:	2b00      	cmp	r3, #0
 8011980:	d00a      	beq.n	8011998 <prvInitialiseNewTask+0x48>
	__asm volatile
 8011982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011986:	f383 8811 	msr	BASEPRI, r3
 801198a:	f3bf 8f6f 	isb	sy
 801198e:	f3bf 8f4f 	dsb	sy
 8011992:	617b      	str	r3, [r7, #20]
}
 8011994:	bf00      	nop
 8011996:	e7fe      	b.n	8011996 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011998:	68bb      	ldr	r3, [r7, #8]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d01f      	beq.n	80119de <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801199e:	2300      	movs	r3, #0
 80119a0:	61fb      	str	r3, [r7, #28]
 80119a2:	e012      	b.n	80119ca <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80119a4:	68ba      	ldr	r2, [r7, #8]
 80119a6:	69fb      	ldr	r3, [r7, #28]
 80119a8:	4413      	add	r3, r2
 80119aa:	7819      	ldrb	r1, [r3, #0]
 80119ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80119ae:	69fb      	ldr	r3, [r7, #28]
 80119b0:	4413      	add	r3, r2
 80119b2:	3334      	adds	r3, #52	; 0x34
 80119b4:	460a      	mov	r2, r1
 80119b6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80119b8:	68ba      	ldr	r2, [r7, #8]
 80119ba:	69fb      	ldr	r3, [r7, #28]
 80119bc:	4413      	add	r3, r2
 80119be:	781b      	ldrb	r3, [r3, #0]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d006      	beq.n	80119d2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80119c4:	69fb      	ldr	r3, [r7, #28]
 80119c6:	3301      	adds	r3, #1
 80119c8:	61fb      	str	r3, [r7, #28]
 80119ca:	69fb      	ldr	r3, [r7, #28]
 80119cc:	2b0f      	cmp	r3, #15
 80119ce:	d9e9      	bls.n	80119a4 <prvInitialiseNewTask+0x54>
 80119d0:	e000      	b.n	80119d4 <prvInitialiseNewTask+0x84>
			{
				break;
 80119d2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80119d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119d6:	2200      	movs	r2, #0
 80119d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80119dc:	e003      	b.n	80119e6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80119de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119e0:	2200      	movs	r2, #0
 80119e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80119e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119e8:	2b06      	cmp	r3, #6
 80119ea:	d901      	bls.n	80119f0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80119ec:	2306      	movs	r3, #6
 80119ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80119f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80119f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80119f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80119fa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80119fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119fe:	2200      	movs	r2, #0
 8011a00:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a04:	3304      	adds	r3, #4
 8011a06:	4618      	mov	r0, r3
 8011a08:	f7ff fa73 	bl	8010ef2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a0e:	3318      	adds	r3, #24
 8011a10:	4618      	mov	r0, r3
 8011a12:	f7ff fa6e 	bl	8010ef2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a1a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a1e:	f1c3 0207 	rsb	r2, r3, #7
 8011a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a24:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a2a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a2e:	2200      	movs	r2, #0
 8011a30:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a36:	2200      	movs	r2, #0
 8011a38:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8011a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a3e:	334c      	adds	r3, #76	; 0x4c
 8011a40:	224c      	movs	r2, #76	; 0x4c
 8011a42:	2100      	movs	r1, #0
 8011a44:	4618      	mov	r0, r3
 8011a46:	f001 ffcd 	bl	80139e4 <memset>
 8011a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a4c:	4a0e      	ldr	r2, [pc, #56]	; (8011a88 <prvInitialiseNewTask+0x138>)
 8011a4e:	651a      	str	r2, [r3, #80]	; 0x50
 8011a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a52:	4a0e      	ldr	r2, [pc, #56]	; (8011a8c <prvInitialiseNewTask+0x13c>)
 8011a54:	655a      	str	r2, [r3, #84]	; 0x54
 8011a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a58:	4a0d      	ldr	r2, [pc, #52]	; (8011a90 <prvInitialiseNewTask+0x140>)
 8011a5a:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 8011a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a5e:	2200      	movs	r2, #0
 8011a60:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011a64:	683a      	ldr	r2, [r7, #0]
 8011a66:	68f9      	ldr	r1, [r7, #12]
 8011a68:	69b8      	ldr	r0, [r7, #24]
 8011a6a:	f000 fe7d 	bl	8012768 <pxPortInitialiseStack>
 8011a6e:	4602      	mov	r2, r0
 8011a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a72:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d002      	beq.n	8011a80 <prvInitialiseNewTask+0x130>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a7e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011a80:	bf00      	nop
 8011a82:	3720      	adds	r7, #32
 8011a84:	46bd      	mov	sp, r7
 8011a86:	bd80      	pop	{r7, pc}
 8011a88:	200056d4 	.word	0x200056d4
 8011a8c:	2000573c 	.word	0x2000573c
 8011a90:	200057a4 	.word	0x200057a4

08011a94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b082      	sub	sp, #8
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011a9c:	f000 ff92 	bl	80129c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011aa0:	4b24      	ldr	r3, [pc, #144]	; (8011b34 <prvAddNewTaskToReadyList+0xa0>)
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	3301      	adds	r3, #1
 8011aa6:	4a23      	ldr	r2, [pc, #140]	; (8011b34 <prvAddNewTaskToReadyList+0xa0>)
 8011aa8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011aaa:	4b23      	ldr	r3, [pc, #140]	; (8011b38 <prvAddNewTaskToReadyList+0xa4>)
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d109      	bne.n	8011ac6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011ab2:	4a21      	ldr	r2, [pc, #132]	; (8011b38 <prvAddNewTaskToReadyList+0xa4>)
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011ab8:	4b1e      	ldr	r3, [pc, #120]	; (8011b34 <prvAddNewTaskToReadyList+0xa0>)
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	2b01      	cmp	r3, #1
 8011abe:	d110      	bne.n	8011ae2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011ac0:	f000 fb88 	bl	80121d4 <prvInitialiseTaskLists>
 8011ac4:	e00d      	b.n	8011ae2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011ac6:	4b1d      	ldr	r3, [pc, #116]	; (8011b3c <prvAddNewTaskToReadyList+0xa8>)
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d109      	bne.n	8011ae2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011ace:	4b1a      	ldr	r3, [pc, #104]	; (8011b38 <prvAddNewTaskToReadyList+0xa4>)
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ad8:	429a      	cmp	r2, r3
 8011ada:	d802      	bhi.n	8011ae2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011adc:	4a16      	ldr	r2, [pc, #88]	; (8011b38 <prvAddNewTaskToReadyList+0xa4>)
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011ae2:	4b17      	ldr	r3, [pc, #92]	; (8011b40 <prvAddNewTaskToReadyList+0xac>)
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	3301      	adds	r3, #1
 8011ae8:	4a15      	ldr	r2, [pc, #84]	; (8011b40 <prvAddNewTaskToReadyList+0xac>)
 8011aea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011af0:	2201      	movs	r2, #1
 8011af2:	409a      	lsls	r2, r3
 8011af4:	4b13      	ldr	r3, [pc, #76]	; (8011b44 <prvAddNewTaskToReadyList+0xb0>)
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	4313      	orrs	r3, r2
 8011afa:	4a12      	ldr	r2, [pc, #72]	; (8011b44 <prvAddNewTaskToReadyList+0xb0>)
 8011afc:	6013      	str	r3, [r2, #0]
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b02:	4613      	mov	r3, r2
 8011b04:	009b      	lsls	r3, r3, #2
 8011b06:	4413      	add	r3, r2
 8011b08:	009b      	lsls	r3, r3, #2
 8011b0a:	4a0f      	ldr	r2, [pc, #60]	; (8011b48 <prvAddNewTaskToReadyList+0xb4>)
 8011b0c:	441a      	add	r2, r3
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	3304      	adds	r3, #4
 8011b12:	4619      	mov	r1, r3
 8011b14:	4610      	mov	r0, r2
 8011b16:	f7ff f9f9 	bl	8010f0c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011b1a:	f000 ff83 	bl	8012a24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011b1e:	4b07      	ldr	r3, [pc, #28]	; (8011b3c <prvAddNewTaskToReadyList+0xa8>)
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d001      	beq.n	8011b2a <prvAddNewTaskToReadyList+0x96>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011b26:	4b04      	ldr	r3, [pc, #16]	; (8011b38 <prvAddNewTaskToReadyList+0xa4>)
 8011b28:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011b2a:	bf00      	nop
 8011b2c:	3708      	adds	r7, #8
 8011b2e:	46bd      	mov	sp, r7
 8011b30:	bd80      	pop	{r7, pc}
 8011b32:	bf00      	nop
 8011b34:	20000c9c 	.word	0x20000c9c
 8011b38:	20000b9c 	.word	0x20000b9c
 8011b3c:	20000ca8 	.word	0x20000ca8
 8011b40:	20000cb8 	.word	0x20000cb8
 8011b44:	20000ca4 	.word	0x20000ca4
 8011b48:	20000ba0 	.word	0x20000ba0

08011b4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011b4c:	b580      	push	{r7, lr}
 8011b4e:	b084      	sub	sp, #16
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011b54:	2300      	movs	r3, #0
 8011b56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d017      	beq.n	8011b8e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011b5e:	4b13      	ldr	r3, [pc, #76]	; (8011bac <vTaskDelay+0x60>)
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d00a      	beq.n	8011b7c <vTaskDelay+0x30>
	__asm volatile
 8011b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b6a:	f383 8811 	msr	BASEPRI, r3
 8011b6e:	f3bf 8f6f 	isb	sy
 8011b72:	f3bf 8f4f 	dsb	sy
 8011b76:	60bb      	str	r3, [r7, #8]
}
 8011b78:	bf00      	nop
 8011b7a:	e7fe      	b.n	8011b7a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8011b7c:	f000 f86a 	bl	8011c54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011b80:	2100      	movs	r1, #0
 8011b82:	6878      	ldr	r0, [r7, #4]
 8011b84:	f000 fd86 	bl	8012694 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011b88:	f000 f872 	bl	8011c70 <xTaskResumeAll>
 8011b8c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d107      	bne.n	8011ba4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8011b94:	4b06      	ldr	r3, [pc, #24]	; (8011bb0 <vTaskDelay+0x64>)
 8011b96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b9a:	601a      	str	r2, [r3, #0]
 8011b9c:	f3bf 8f4f 	dsb	sy
 8011ba0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011ba4:	bf00      	nop
 8011ba6:	3710      	adds	r7, #16
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	bd80      	pop	{r7, pc}
 8011bac:	20000cc4 	.word	0x20000cc4
 8011bb0:	e000ed04 	.word	0xe000ed04

08011bb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011bb4:	b580      	push	{r7, lr}
 8011bb6:	b086      	sub	sp, #24
 8011bb8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8011bba:	4b1e      	ldr	r3, [pc, #120]	; (8011c34 <vTaskStartScheduler+0x80>)
 8011bbc:	9301      	str	r3, [sp, #4]
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	9300      	str	r3, [sp, #0]
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	2280      	movs	r2, #128	; 0x80
 8011bc6:	491c      	ldr	r1, [pc, #112]	; (8011c38 <vTaskStartScheduler+0x84>)
 8011bc8:	481c      	ldr	r0, [pc, #112]	; (8011c3c <vTaskStartScheduler+0x88>)
 8011bca:	f7ff fe7f 	bl	80118cc <xTaskCreate>
 8011bce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	2b01      	cmp	r3, #1
 8011bd4:	d11b      	bne.n	8011c0e <vTaskStartScheduler+0x5a>
	__asm volatile
 8011bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bda:	f383 8811 	msr	BASEPRI, r3
 8011bde:	f3bf 8f6f 	isb	sy
 8011be2:	f3bf 8f4f 	dsb	sy
 8011be6:	60bb      	str	r3, [r7, #8]
}
 8011be8:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011bea:	4b15      	ldr	r3, [pc, #84]	; (8011c40 <vTaskStartScheduler+0x8c>)
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	334c      	adds	r3, #76	; 0x4c
 8011bf0:	4a14      	ldr	r2, [pc, #80]	; (8011c44 <vTaskStartScheduler+0x90>)
 8011bf2:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011bf4:	4b14      	ldr	r3, [pc, #80]	; (8011c48 <vTaskStartScheduler+0x94>)
 8011bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8011bfa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011bfc:	4b13      	ldr	r3, [pc, #76]	; (8011c4c <vTaskStartScheduler+0x98>)
 8011bfe:	2201      	movs	r2, #1
 8011c00:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011c02:	4b13      	ldr	r3, [pc, #76]	; (8011c50 <vTaskStartScheduler+0x9c>)
 8011c04:	2200      	movs	r2, #0
 8011c06:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011c08:	f000 fe3a 	bl	8012880 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011c0c:	e00e      	b.n	8011c2c <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c14:	d10a      	bne.n	8011c2c <vTaskStartScheduler+0x78>
	__asm volatile
 8011c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c1a:	f383 8811 	msr	BASEPRI, r3
 8011c1e:	f3bf 8f6f 	isb	sy
 8011c22:	f3bf 8f4f 	dsb	sy
 8011c26:	607b      	str	r3, [r7, #4]
}
 8011c28:	bf00      	nop
 8011c2a:	e7fe      	b.n	8011c2a <vTaskStartScheduler+0x76>
}
 8011c2c:	bf00      	nop
 8011c2e:	3710      	adds	r7, #16
 8011c30:	46bd      	mov	sp, r7
 8011c32:	bd80      	pop	{r7, pc}
 8011c34:	20000cc0 	.word	0x20000cc0
 8011c38:	08014ba4 	.word	0x08014ba4
 8011c3c:	080121b1 	.word	0x080121b1
 8011c40:	20000b9c 	.word	0x20000b9c
 8011c44:	200001d8 	.word	0x200001d8
 8011c48:	20000cbc 	.word	0x20000cbc
 8011c4c:	20000ca8 	.word	0x20000ca8
 8011c50:	20000ca0 	.word	0x20000ca0

08011c54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011c54:	b480      	push	{r7}
 8011c56:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011c58:	4b04      	ldr	r3, [pc, #16]	; (8011c6c <vTaskSuspendAll+0x18>)
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	3301      	adds	r3, #1
 8011c5e:	4a03      	ldr	r2, [pc, #12]	; (8011c6c <vTaskSuspendAll+0x18>)
 8011c60:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8011c62:	bf00      	nop
 8011c64:	46bd      	mov	sp, r7
 8011c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c6a:	4770      	bx	lr
 8011c6c:	20000cc4 	.word	0x20000cc4

08011c70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011c70:	b580      	push	{r7, lr}
 8011c72:	b084      	sub	sp, #16
 8011c74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011c76:	2300      	movs	r3, #0
 8011c78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011c7a:	2300      	movs	r3, #0
 8011c7c:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011c7e:	4b3b      	ldr	r3, [pc, #236]	; (8011d6c <xTaskResumeAll+0xfc>)
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d10a      	bne.n	8011c9c <xTaskResumeAll+0x2c>
	__asm volatile
 8011c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c8a:	f383 8811 	msr	BASEPRI, r3
 8011c8e:	f3bf 8f6f 	isb	sy
 8011c92:	f3bf 8f4f 	dsb	sy
 8011c96:	603b      	str	r3, [r7, #0]
}
 8011c98:	bf00      	nop
 8011c9a:	e7fe      	b.n	8011c9a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011c9c:	f000 fe92 	bl	80129c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011ca0:	4b32      	ldr	r3, [pc, #200]	; (8011d6c <xTaskResumeAll+0xfc>)
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	3b01      	subs	r3, #1
 8011ca6:	4a31      	ldr	r2, [pc, #196]	; (8011d6c <xTaskResumeAll+0xfc>)
 8011ca8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011caa:	4b30      	ldr	r3, [pc, #192]	; (8011d6c <xTaskResumeAll+0xfc>)
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d155      	bne.n	8011d5e <xTaskResumeAll+0xee>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011cb2:	4b2f      	ldr	r3, [pc, #188]	; (8011d70 <xTaskResumeAll+0x100>)
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d051      	beq.n	8011d5e <xTaskResumeAll+0xee>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011cba:	e02e      	b.n	8011d1a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011cbc:	4b2d      	ldr	r3, [pc, #180]	; (8011d74 <xTaskResumeAll+0x104>)
 8011cbe:	68db      	ldr	r3, [r3, #12]
 8011cc0:	68db      	ldr	r3, [r3, #12]
 8011cc2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	3318      	adds	r3, #24
 8011cc8:	4618      	mov	r0, r3
 8011cca:	f7ff f97c 	bl	8010fc6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	3304      	adds	r3, #4
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	f7ff f977 	bl	8010fc6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cdc:	2201      	movs	r2, #1
 8011cde:	409a      	lsls	r2, r3
 8011ce0:	4b25      	ldr	r3, [pc, #148]	; (8011d78 <xTaskResumeAll+0x108>)
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	4313      	orrs	r3, r2
 8011ce6:	4a24      	ldr	r2, [pc, #144]	; (8011d78 <xTaskResumeAll+0x108>)
 8011ce8:	6013      	str	r3, [r2, #0]
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cee:	4613      	mov	r3, r2
 8011cf0:	009b      	lsls	r3, r3, #2
 8011cf2:	4413      	add	r3, r2
 8011cf4:	009b      	lsls	r3, r3, #2
 8011cf6:	4a21      	ldr	r2, [pc, #132]	; (8011d7c <xTaskResumeAll+0x10c>)
 8011cf8:	441a      	add	r2, r3
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	3304      	adds	r3, #4
 8011cfe:	4619      	mov	r1, r3
 8011d00:	4610      	mov	r0, r2
 8011d02:	f7ff f903 	bl	8010f0c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d0a:	4b1d      	ldr	r3, [pc, #116]	; (8011d80 <xTaskResumeAll+0x110>)
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d10:	429a      	cmp	r2, r3
 8011d12:	d302      	bcc.n	8011d1a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8011d14:	4b1b      	ldr	r3, [pc, #108]	; (8011d84 <xTaskResumeAll+0x114>)
 8011d16:	2201      	movs	r2, #1
 8011d18:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011d1a:	4b16      	ldr	r3, [pc, #88]	; (8011d74 <xTaskResumeAll+0x104>)
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d1cc      	bne.n	8011cbc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d001      	beq.n	8011d2c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011d28:	f000 fad8 	bl	80122dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011d2c:	4b16      	ldr	r3, [pc, #88]	; (8011d88 <xTaskResumeAll+0x118>)
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011d32:	68bb      	ldr	r3, [r7, #8]
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d010      	beq.n	8011d5a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011d38:	f000 f828 	bl	8011d8c <xTaskIncrementTick>
 8011d3c:	4603      	mov	r3, r0
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d002      	beq.n	8011d48 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8011d42:	4b10      	ldr	r3, [pc, #64]	; (8011d84 <xTaskResumeAll+0x114>)
 8011d44:	2201      	movs	r2, #1
 8011d46:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8011d48:	68bb      	ldr	r3, [r7, #8]
 8011d4a:	3b01      	subs	r3, #1
 8011d4c:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011d4e:	68bb      	ldr	r3, [r7, #8]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d1f1      	bne.n	8011d38 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8011d54:	4b0c      	ldr	r3, [pc, #48]	; (8011d88 <xTaskResumeAll+0x118>)
 8011d56:	2200      	movs	r2, #0
 8011d58:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011d5a:	4b0a      	ldr	r3, [pc, #40]	; (8011d84 <xTaskResumeAll+0x114>)
 8011d5c:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011d5e:	f000 fe61 	bl	8012a24 <vPortExitCritical>

	return xAlreadyYielded;
 8011d62:	687b      	ldr	r3, [r7, #4]
}
 8011d64:	4618      	mov	r0, r3
 8011d66:	3710      	adds	r7, #16
 8011d68:	46bd      	mov	sp, r7
 8011d6a:	bd80      	pop	{r7, pc}
 8011d6c:	20000cc4 	.word	0x20000cc4
 8011d70:	20000c9c 	.word	0x20000c9c
 8011d74:	20000c5c 	.word	0x20000c5c
 8011d78:	20000ca4 	.word	0x20000ca4
 8011d7c:	20000ba0 	.word	0x20000ba0
 8011d80:	20000b9c 	.word	0x20000b9c
 8011d84:	20000cb0 	.word	0x20000cb0
 8011d88:	20000cac 	.word	0x20000cac

08011d8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	b086      	sub	sp, #24
 8011d90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011d92:	2300      	movs	r3, #0
 8011d94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011d96:	4b3f      	ldr	r3, [pc, #252]	; (8011e94 <xTaskIncrementTick+0x108>)
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d16f      	bne.n	8011e7e <xTaskIncrementTick+0xf2>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011d9e:	4b3e      	ldr	r3, [pc, #248]	; (8011e98 <xTaskIncrementTick+0x10c>)
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	3301      	adds	r3, #1
 8011da4:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011da6:	4a3c      	ldr	r2, [pc, #240]	; (8011e98 <xTaskIncrementTick+0x10c>)
 8011da8:	693b      	ldr	r3, [r7, #16]
 8011daa:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011dac:	693b      	ldr	r3, [r7, #16]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d120      	bne.n	8011df4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8011db2:	4b3a      	ldr	r3, [pc, #232]	; (8011e9c <xTaskIncrementTick+0x110>)
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d00a      	beq.n	8011dd2 <xTaskIncrementTick+0x46>
	__asm volatile
 8011dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dc0:	f383 8811 	msr	BASEPRI, r3
 8011dc4:	f3bf 8f6f 	isb	sy
 8011dc8:	f3bf 8f4f 	dsb	sy
 8011dcc:	603b      	str	r3, [r7, #0]
}
 8011dce:	bf00      	nop
 8011dd0:	e7fe      	b.n	8011dd0 <xTaskIncrementTick+0x44>
 8011dd2:	4b32      	ldr	r3, [pc, #200]	; (8011e9c <xTaskIncrementTick+0x110>)
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	60fb      	str	r3, [r7, #12]
 8011dd8:	4b31      	ldr	r3, [pc, #196]	; (8011ea0 <xTaskIncrementTick+0x114>)
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	4a2f      	ldr	r2, [pc, #188]	; (8011e9c <xTaskIncrementTick+0x110>)
 8011dde:	6013      	str	r3, [r2, #0]
 8011de0:	4a2f      	ldr	r2, [pc, #188]	; (8011ea0 <xTaskIncrementTick+0x114>)
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	6013      	str	r3, [r2, #0]
 8011de6:	4b2f      	ldr	r3, [pc, #188]	; (8011ea4 <xTaskIncrementTick+0x118>)
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	3301      	adds	r3, #1
 8011dec:	4a2d      	ldr	r2, [pc, #180]	; (8011ea4 <xTaskIncrementTick+0x118>)
 8011dee:	6013      	str	r3, [r2, #0]
 8011df0:	f000 fa74 	bl	80122dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011df4:	4b2c      	ldr	r3, [pc, #176]	; (8011ea8 <xTaskIncrementTick+0x11c>)
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	693a      	ldr	r2, [r7, #16]
 8011dfa:	429a      	cmp	r2, r3
 8011dfc:	d344      	bcc.n	8011e88 <xTaskIncrementTick+0xfc>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011dfe:	4b27      	ldr	r3, [pc, #156]	; (8011e9c <xTaskIncrementTick+0x110>)
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d104      	bne.n	8011e12 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011e08:	4b27      	ldr	r3, [pc, #156]	; (8011ea8 <xTaskIncrementTick+0x11c>)
 8011e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8011e0e:	601a      	str	r2, [r3, #0]
					break;
 8011e10:	e03a      	b.n	8011e88 <xTaskIncrementTick+0xfc>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011e12:	4b22      	ldr	r3, [pc, #136]	; (8011e9c <xTaskIncrementTick+0x110>)
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	68db      	ldr	r3, [r3, #12]
 8011e18:	68db      	ldr	r3, [r3, #12]
 8011e1a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011e1c:	68bb      	ldr	r3, [r7, #8]
 8011e1e:	685b      	ldr	r3, [r3, #4]
 8011e20:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011e22:	693a      	ldr	r2, [r7, #16]
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	429a      	cmp	r2, r3
 8011e28:	d203      	bcs.n	8011e32 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011e2a:	4a1f      	ldr	r2, [pc, #124]	; (8011ea8 <xTaskIncrementTick+0x11c>)
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011e30:	e02a      	b.n	8011e88 <xTaskIncrementTick+0xfc>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011e32:	68bb      	ldr	r3, [r7, #8]
 8011e34:	3304      	adds	r3, #4
 8011e36:	4618      	mov	r0, r3
 8011e38:	f7ff f8c5 	bl	8010fc6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011e3c:	68bb      	ldr	r3, [r7, #8]
 8011e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d004      	beq.n	8011e4e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011e44:	68bb      	ldr	r3, [r7, #8]
 8011e46:	3318      	adds	r3, #24
 8011e48:	4618      	mov	r0, r3
 8011e4a:	f7ff f8bc 	bl	8010fc6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011e4e:	68bb      	ldr	r3, [r7, #8]
 8011e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e52:	2201      	movs	r2, #1
 8011e54:	409a      	lsls	r2, r3
 8011e56:	4b15      	ldr	r3, [pc, #84]	; (8011eac <xTaskIncrementTick+0x120>)
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	4313      	orrs	r3, r2
 8011e5c:	4a13      	ldr	r2, [pc, #76]	; (8011eac <xTaskIncrementTick+0x120>)
 8011e5e:	6013      	str	r3, [r2, #0]
 8011e60:	68bb      	ldr	r3, [r7, #8]
 8011e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e64:	4613      	mov	r3, r2
 8011e66:	009b      	lsls	r3, r3, #2
 8011e68:	4413      	add	r3, r2
 8011e6a:	009b      	lsls	r3, r3, #2
 8011e6c:	4a10      	ldr	r2, [pc, #64]	; (8011eb0 <xTaskIncrementTick+0x124>)
 8011e6e:	441a      	add	r2, r3
 8011e70:	68bb      	ldr	r3, [r7, #8]
 8011e72:	3304      	adds	r3, #4
 8011e74:	4619      	mov	r1, r3
 8011e76:	4610      	mov	r0, r2
 8011e78:	f7ff f848 	bl	8010f0c <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011e7c:	e7bf      	b.n	8011dfe <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8011e7e:	4b0d      	ldr	r3, [pc, #52]	; (8011eb4 <xTaskIncrementTick+0x128>)
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	3301      	adds	r3, #1
 8011e84:	4a0b      	ldr	r2, [pc, #44]	; (8011eb4 <xTaskIncrementTick+0x128>)
 8011e86:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011e88:	697b      	ldr	r3, [r7, #20]
}
 8011e8a:	4618      	mov	r0, r3
 8011e8c:	3718      	adds	r7, #24
 8011e8e:	46bd      	mov	sp, r7
 8011e90:	bd80      	pop	{r7, pc}
 8011e92:	bf00      	nop
 8011e94:	20000cc4 	.word	0x20000cc4
 8011e98:	20000ca0 	.word	0x20000ca0
 8011e9c:	20000c54 	.word	0x20000c54
 8011ea0:	20000c58 	.word	0x20000c58
 8011ea4:	20000cb4 	.word	0x20000cb4
 8011ea8:	20000cbc 	.word	0x20000cbc
 8011eac:	20000ca4 	.word	0x20000ca4
 8011eb0:	20000ba0 	.word	0x20000ba0
 8011eb4:	20000cac 	.word	0x20000cac

08011eb8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011eb8:	b480      	push	{r7}
 8011eba:	b087      	sub	sp, #28
 8011ebc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011ebe:	4b29      	ldr	r3, [pc, #164]	; (8011f64 <vTaskSwitchContext+0xac>)
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d003      	beq.n	8011ece <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011ec6:	4b28      	ldr	r3, [pc, #160]	; (8011f68 <vTaskSwitchContext+0xb0>)
 8011ec8:	2201      	movs	r2, #1
 8011eca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011ecc:	e044      	b.n	8011f58 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8011ece:	4b26      	ldr	r3, [pc, #152]	; (8011f68 <vTaskSwitchContext+0xb0>)
 8011ed0:	2200      	movs	r2, #0
 8011ed2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011ed4:	4b25      	ldr	r3, [pc, #148]	; (8011f6c <vTaskSwitchContext+0xb4>)
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	fab3 f383 	clz	r3, r3
 8011ee0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8011ee2:	7afb      	ldrb	r3, [r7, #11]
 8011ee4:	f1c3 031f 	rsb	r3, r3, #31
 8011ee8:	617b      	str	r3, [r7, #20]
 8011eea:	4921      	ldr	r1, [pc, #132]	; (8011f70 <vTaskSwitchContext+0xb8>)
 8011eec:	697a      	ldr	r2, [r7, #20]
 8011eee:	4613      	mov	r3, r2
 8011ef0:	009b      	lsls	r3, r3, #2
 8011ef2:	4413      	add	r3, r2
 8011ef4:	009b      	lsls	r3, r3, #2
 8011ef6:	440b      	add	r3, r1
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d10a      	bne.n	8011f14 <vTaskSwitchContext+0x5c>
	__asm volatile
 8011efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f02:	f383 8811 	msr	BASEPRI, r3
 8011f06:	f3bf 8f6f 	isb	sy
 8011f0a:	f3bf 8f4f 	dsb	sy
 8011f0e:	607b      	str	r3, [r7, #4]
}
 8011f10:	bf00      	nop
 8011f12:	e7fe      	b.n	8011f12 <vTaskSwitchContext+0x5a>
 8011f14:	697a      	ldr	r2, [r7, #20]
 8011f16:	4613      	mov	r3, r2
 8011f18:	009b      	lsls	r3, r3, #2
 8011f1a:	4413      	add	r3, r2
 8011f1c:	009b      	lsls	r3, r3, #2
 8011f1e:	4a14      	ldr	r2, [pc, #80]	; (8011f70 <vTaskSwitchContext+0xb8>)
 8011f20:	4413      	add	r3, r2
 8011f22:	613b      	str	r3, [r7, #16]
 8011f24:	693b      	ldr	r3, [r7, #16]
 8011f26:	685b      	ldr	r3, [r3, #4]
 8011f28:	685a      	ldr	r2, [r3, #4]
 8011f2a:	693b      	ldr	r3, [r7, #16]
 8011f2c:	605a      	str	r2, [r3, #4]
 8011f2e:	693b      	ldr	r3, [r7, #16]
 8011f30:	685a      	ldr	r2, [r3, #4]
 8011f32:	693b      	ldr	r3, [r7, #16]
 8011f34:	3308      	adds	r3, #8
 8011f36:	429a      	cmp	r2, r3
 8011f38:	d104      	bne.n	8011f44 <vTaskSwitchContext+0x8c>
 8011f3a:	693b      	ldr	r3, [r7, #16]
 8011f3c:	685b      	ldr	r3, [r3, #4]
 8011f3e:	685a      	ldr	r2, [r3, #4]
 8011f40:	693b      	ldr	r3, [r7, #16]
 8011f42:	605a      	str	r2, [r3, #4]
 8011f44:	693b      	ldr	r3, [r7, #16]
 8011f46:	685b      	ldr	r3, [r3, #4]
 8011f48:	68db      	ldr	r3, [r3, #12]
 8011f4a:	4a0a      	ldr	r2, [pc, #40]	; (8011f74 <vTaskSwitchContext+0xbc>)
 8011f4c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011f4e:	4b09      	ldr	r3, [pc, #36]	; (8011f74 <vTaskSwitchContext+0xbc>)
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	334c      	adds	r3, #76	; 0x4c
 8011f54:	4a08      	ldr	r2, [pc, #32]	; (8011f78 <vTaskSwitchContext+0xc0>)
 8011f56:	6013      	str	r3, [r2, #0]
}
 8011f58:	bf00      	nop
 8011f5a:	371c      	adds	r7, #28
 8011f5c:	46bd      	mov	sp, r7
 8011f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f62:	4770      	bx	lr
 8011f64:	20000cc4 	.word	0x20000cc4
 8011f68:	20000cb0 	.word	0x20000cb0
 8011f6c:	20000ca4 	.word	0x20000ca4
 8011f70:	20000ba0 	.word	0x20000ba0
 8011f74:	20000b9c 	.word	0x20000b9c
 8011f78:	200001d8 	.word	0x200001d8

08011f7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011f7c:	b580      	push	{r7, lr}
 8011f7e:	b084      	sub	sp, #16
 8011f80:	af00      	add	r7, sp, #0
 8011f82:	6078      	str	r0, [r7, #4]
 8011f84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d10a      	bne.n	8011fa2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8011f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f90:	f383 8811 	msr	BASEPRI, r3
 8011f94:	f3bf 8f6f 	isb	sy
 8011f98:	f3bf 8f4f 	dsb	sy
 8011f9c:	60fb      	str	r3, [r7, #12]
}
 8011f9e:	bf00      	nop
 8011fa0:	e7fe      	b.n	8011fa0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011fa2:	4b07      	ldr	r3, [pc, #28]	; (8011fc0 <vTaskPlaceOnEventList+0x44>)
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	3318      	adds	r3, #24
 8011fa8:	4619      	mov	r1, r3
 8011faa:	6878      	ldr	r0, [r7, #4]
 8011fac:	f7fe ffd2 	bl	8010f54 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011fb0:	2101      	movs	r1, #1
 8011fb2:	6838      	ldr	r0, [r7, #0]
 8011fb4:	f000 fb6e 	bl	8012694 <prvAddCurrentTaskToDelayedList>
}
 8011fb8:	bf00      	nop
 8011fba:	3710      	adds	r7, #16
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	bd80      	pop	{r7, pc}
 8011fc0:	20000b9c 	.word	0x20000b9c

08011fc4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	b086      	sub	sp, #24
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	68db      	ldr	r3, [r3, #12]
 8011fd0:	68db      	ldr	r3, [r3, #12]
 8011fd2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011fd4:	693b      	ldr	r3, [r7, #16]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d10a      	bne.n	8011ff0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8011fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fde:	f383 8811 	msr	BASEPRI, r3
 8011fe2:	f3bf 8f6f 	isb	sy
 8011fe6:	f3bf 8f4f 	dsb	sy
 8011fea:	60fb      	str	r3, [r7, #12]
}
 8011fec:	bf00      	nop
 8011fee:	e7fe      	b.n	8011fee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011ff0:	693b      	ldr	r3, [r7, #16]
 8011ff2:	3318      	adds	r3, #24
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	f7fe ffe6 	bl	8010fc6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011ffa:	4b1d      	ldr	r3, [pc, #116]	; (8012070 <xTaskRemoveFromEventList+0xac>)
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d11c      	bne.n	801203c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012002:	693b      	ldr	r3, [r7, #16]
 8012004:	3304      	adds	r3, #4
 8012006:	4618      	mov	r0, r3
 8012008:	f7fe ffdd 	bl	8010fc6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801200c:	693b      	ldr	r3, [r7, #16]
 801200e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012010:	2201      	movs	r2, #1
 8012012:	409a      	lsls	r2, r3
 8012014:	4b17      	ldr	r3, [pc, #92]	; (8012074 <xTaskRemoveFromEventList+0xb0>)
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	4313      	orrs	r3, r2
 801201a:	4a16      	ldr	r2, [pc, #88]	; (8012074 <xTaskRemoveFromEventList+0xb0>)
 801201c:	6013      	str	r3, [r2, #0]
 801201e:	693b      	ldr	r3, [r7, #16]
 8012020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012022:	4613      	mov	r3, r2
 8012024:	009b      	lsls	r3, r3, #2
 8012026:	4413      	add	r3, r2
 8012028:	009b      	lsls	r3, r3, #2
 801202a:	4a13      	ldr	r2, [pc, #76]	; (8012078 <xTaskRemoveFromEventList+0xb4>)
 801202c:	441a      	add	r2, r3
 801202e:	693b      	ldr	r3, [r7, #16]
 8012030:	3304      	adds	r3, #4
 8012032:	4619      	mov	r1, r3
 8012034:	4610      	mov	r0, r2
 8012036:	f7fe ff69 	bl	8010f0c <vListInsertEnd>
 801203a:	e005      	b.n	8012048 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801203c:	693b      	ldr	r3, [r7, #16]
 801203e:	3318      	adds	r3, #24
 8012040:	4619      	mov	r1, r3
 8012042:	480e      	ldr	r0, [pc, #56]	; (801207c <xTaskRemoveFromEventList+0xb8>)
 8012044:	f7fe ff62 	bl	8010f0c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012048:	693b      	ldr	r3, [r7, #16]
 801204a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801204c:	4b0c      	ldr	r3, [pc, #48]	; (8012080 <xTaskRemoveFromEventList+0xbc>)
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012052:	429a      	cmp	r2, r3
 8012054:	d905      	bls.n	8012062 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012056:	2301      	movs	r3, #1
 8012058:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801205a:	4b0a      	ldr	r3, [pc, #40]	; (8012084 <xTaskRemoveFromEventList+0xc0>)
 801205c:	2201      	movs	r2, #1
 801205e:	601a      	str	r2, [r3, #0]
 8012060:	e001      	b.n	8012066 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8012062:	2300      	movs	r3, #0
 8012064:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012066:	697b      	ldr	r3, [r7, #20]
}
 8012068:	4618      	mov	r0, r3
 801206a:	3718      	adds	r7, #24
 801206c:	46bd      	mov	sp, r7
 801206e:	bd80      	pop	{r7, pc}
 8012070:	20000cc4 	.word	0x20000cc4
 8012074:	20000ca4 	.word	0x20000ca4
 8012078:	20000ba0 	.word	0x20000ba0
 801207c:	20000c5c 	.word	0x20000c5c
 8012080:	20000b9c 	.word	0x20000b9c
 8012084:	20000cb0 	.word	0x20000cb0

08012088 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012088:	b480      	push	{r7}
 801208a:	b083      	sub	sp, #12
 801208c:	af00      	add	r7, sp, #0
 801208e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012090:	4b06      	ldr	r3, [pc, #24]	; (80120ac <vTaskInternalSetTimeOutState+0x24>)
 8012092:	681a      	ldr	r2, [r3, #0]
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012098:	4b05      	ldr	r3, [pc, #20]	; (80120b0 <vTaskInternalSetTimeOutState+0x28>)
 801209a:	681a      	ldr	r2, [r3, #0]
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	605a      	str	r2, [r3, #4]
}
 80120a0:	bf00      	nop
 80120a2:	370c      	adds	r7, #12
 80120a4:	46bd      	mov	sp, r7
 80120a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120aa:	4770      	bx	lr
 80120ac:	20000cb4 	.word	0x20000cb4
 80120b0:	20000ca0 	.word	0x20000ca0

080120b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80120b4:	b580      	push	{r7, lr}
 80120b6:	b088      	sub	sp, #32
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	6078      	str	r0, [r7, #4]
 80120bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d10a      	bne.n	80120da <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80120c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120c8:	f383 8811 	msr	BASEPRI, r3
 80120cc:	f3bf 8f6f 	isb	sy
 80120d0:	f3bf 8f4f 	dsb	sy
 80120d4:	613b      	str	r3, [r7, #16]
}
 80120d6:	bf00      	nop
 80120d8:	e7fe      	b.n	80120d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80120da:	683b      	ldr	r3, [r7, #0]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d10a      	bne.n	80120f6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80120e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120e4:	f383 8811 	msr	BASEPRI, r3
 80120e8:	f3bf 8f6f 	isb	sy
 80120ec:	f3bf 8f4f 	dsb	sy
 80120f0:	60fb      	str	r3, [r7, #12]
}
 80120f2:	bf00      	nop
 80120f4:	e7fe      	b.n	80120f4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80120f6:	f000 fc65 	bl	80129c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80120fa:	4b24      	ldr	r3, [pc, #144]	; (801218c <xTaskCheckForTimeOut+0xd8>)
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	685b      	ldr	r3, [r3, #4]
 8012104:	69ba      	ldr	r2, [r7, #24]
 8012106:	1ad3      	subs	r3, r2, r3
 8012108:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 801210a:	4b21      	ldr	r3, [pc, #132]	; (8012190 <xTaskCheckForTimeOut+0xdc>)
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8012112:	2b00      	cmp	r3, #0
 8012114:	d007      	beq.n	8012126 <xTaskCheckForTimeOut+0x72>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 8012116:	4b1e      	ldr	r3, [pc, #120]	; (8012190 <xTaskCheckForTimeOut+0xdc>)
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	2200      	movs	r2, #0
 801211c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
				xReturn = pdTRUE;
 8012120:	2301      	movs	r3, #1
 8012122:	61fb      	str	r3, [r7, #28]
 8012124:	e02b      	b.n	801217e <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012126:	683b      	ldr	r3, [r7, #0]
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801212e:	d102      	bne.n	8012136 <xTaskCheckForTimeOut+0x82>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012130:	2300      	movs	r3, #0
 8012132:	61fb      	str	r3, [r7, #28]
 8012134:	e023      	b.n	801217e <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	681a      	ldr	r2, [r3, #0]
 801213a:	4b16      	ldr	r3, [pc, #88]	; (8012194 <xTaskCheckForTimeOut+0xe0>)
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	429a      	cmp	r2, r3
 8012140:	d007      	beq.n	8012152 <xTaskCheckForTimeOut+0x9e>
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	685b      	ldr	r3, [r3, #4]
 8012146:	69ba      	ldr	r2, [r7, #24]
 8012148:	429a      	cmp	r2, r3
 801214a:	d302      	bcc.n	8012152 <xTaskCheckForTimeOut+0x9e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801214c:	2301      	movs	r3, #1
 801214e:	61fb      	str	r3, [r7, #28]
 8012150:	e015      	b.n	801217e <xTaskCheckForTimeOut+0xca>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012152:	683b      	ldr	r3, [r7, #0]
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	697a      	ldr	r2, [r7, #20]
 8012158:	429a      	cmp	r2, r3
 801215a:	d20b      	bcs.n	8012174 <xTaskCheckForTimeOut+0xc0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801215c:	683b      	ldr	r3, [r7, #0]
 801215e:	681a      	ldr	r2, [r3, #0]
 8012160:	697b      	ldr	r3, [r7, #20]
 8012162:	1ad2      	subs	r2, r2, r3
 8012164:	683b      	ldr	r3, [r7, #0]
 8012166:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012168:	6878      	ldr	r0, [r7, #4]
 801216a:	f7ff ff8d 	bl	8012088 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801216e:	2300      	movs	r3, #0
 8012170:	61fb      	str	r3, [r7, #28]
 8012172:	e004      	b.n	801217e <xTaskCheckForTimeOut+0xca>
		}
		else
		{
			*pxTicksToWait = 0;
 8012174:	683b      	ldr	r3, [r7, #0]
 8012176:	2200      	movs	r2, #0
 8012178:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801217a:	2301      	movs	r3, #1
 801217c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801217e:	f000 fc51 	bl	8012a24 <vPortExitCritical>

	return xReturn;
 8012182:	69fb      	ldr	r3, [r7, #28]
}
 8012184:	4618      	mov	r0, r3
 8012186:	3720      	adds	r7, #32
 8012188:	46bd      	mov	sp, r7
 801218a:	bd80      	pop	{r7, pc}
 801218c:	20000ca0 	.word	0x20000ca0
 8012190:	20000b9c 	.word	0x20000b9c
 8012194:	20000cb4 	.word	0x20000cb4

08012198 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012198:	b480      	push	{r7}
 801219a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801219c:	4b03      	ldr	r3, [pc, #12]	; (80121ac <vTaskMissedYield+0x14>)
 801219e:	2201      	movs	r2, #1
 80121a0:	601a      	str	r2, [r3, #0]
}
 80121a2:	bf00      	nop
 80121a4:	46bd      	mov	sp, r7
 80121a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121aa:	4770      	bx	lr
 80121ac:	20000cb0 	.word	0x20000cb0

080121b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b082      	sub	sp, #8
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80121b8:	f000 f84c 	bl	8012254 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 80121bc:	4b04      	ldr	r3, [pc, #16]	; (80121d0 <prvIdleTask+0x20>)
 80121be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80121c2:	601a      	str	r2, [r3, #0]
 80121c4:	f3bf 8f4f 	dsb	sy
 80121c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80121cc:	e7f4      	b.n	80121b8 <prvIdleTask+0x8>
 80121ce:	bf00      	nop
 80121d0:	e000ed04 	.word	0xe000ed04

080121d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b082      	sub	sp, #8
 80121d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80121da:	2300      	movs	r3, #0
 80121dc:	607b      	str	r3, [r7, #4]
 80121de:	e00c      	b.n	80121fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80121e0:	687a      	ldr	r2, [r7, #4]
 80121e2:	4613      	mov	r3, r2
 80121e4:	009b      	lsls	r3, r3, #2
 80121e6:	4413      	add	r3, r2
 80121e8:	009b      	lsls	r3, r3, #2
 80121ea:	4a12      	ldr	r2, [pc, #72]	; (8012234 <prvInitialiseTaskLists+0x60>)
 80121ec:	4413      	add	r3, r2
 80121ee:	4618      	mov	r0, r3
 80121f0:	f7fe fe5f 	bl	8010eb2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	3301      	adds	r3, #1
 80121f8:	607b      	str	r3, [r7, #4]
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	2b06      	cmp	r3, #6
 80121fe:	d9ef      	bls.n	80121e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012200:	480d      	ldr	r0, [pc, #52]	; (8012238 <prvInitialiseTaskLists+0x64>)
 8012202:	f7fe fe56 	bl	8010eb2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012206:	480d      	ldr	r0, [pc, #52]	; (801223c <prvInitialiseTaskLists+0x68>)
 8012208:	f7fe fe53 	bl	8010eb2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801220c:	480c      	ldr	r0, [pc, #48]	; (8012240 <prvInitialiseTaskLists+0x6c>)
 801220e:	f7fe fe50 	bl	8010eb2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012212:	480c      	ldr	r0, [pc, #48]	; (8012244 <prvInitialiseTaskLists+0x70>)
 8012214:	f7fe fe4d 	bl	8010eb2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012218:	480b      	ldr	r0, [pc, #44]	; (8012248 <prvInitialiseTaskLists+0x74>)
 801221a:	f7fe fe4a 	bl	8010eb2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801221e:	4b0b      	ldr	r3, [pc, #44]	; (801224c <prvInitialiseTaskLists+0x78>)
 8012220:	4a05      	ldr	r2, [pc, #20]	; (8012238 <prvInitialiseTaskLists+0x64>)
 8012222:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012224:	4b0a      	ldr	r3, [pc, #40]	; (8012250 <prvInitialiseTaskLists+0x7c>)
 8012226:	4a05      	ldr	r2, [pc, #20]	; (801223c <prvInitialiseTaskLists+0x68>)
 8012228:	601a      	str	r2, [r3, #0]
}
 801222a:	bf00      	nop
 801222c:	3708      	adds	r7, #8
 801222e:	46bd      	mov	sp, r7
 8012230:	bd80      	pop	{r7, pc}
 8012232:	bf00      	nop
 8012234:	20000ba0 	.word	0x20000ba0
 8012238:	20000c2c 	.word	0x20000c2c
 801223c:	20000c40 	.word	0x20000c40
 8012240:	20000c5c 	.word	0x20000c5c
 8012244:	20000c70 	.word	0x20000c70
 8012248:	20000c88 	.word	0x20000c88
 801224c:	20000c54 	.word	0x20000c54
 8012250:	20000c58 	.word	0x20000c58

08012254 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012254:	b580      	push	{r7, lr}
 8012256:	b082      	sub	sp, #8
 8012258:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801225a:	e019      	b.n	8012290 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801225c:	f000 fbb2 	bl	80129c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012260:	4b10      	ldr	r3, [pc, #64]	; (80122a4 <prvCheckTasksWaitingTermination+0x50>)
 8012262:	68db      	ldr	r3, [r3, #12]
 8012264:	68db      	ldr	r3, [r3, #12]
 8012266:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	3304      	adds	r3, #4
 801226c:	4618      	mov	r0, r3
 801226e:	f7fe feaa 	bl	8010fc6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012272:	4b0d      	ldr	r3, [pc, #52]	; (80122a8 <prvCheckTasksWaitingTermination+0x54>)
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	3b01      	subs	r3, #1
 8012278:	4a0b      	ldr	r2, [pc, #44]	; (80122a8 <prvCheckTasksWaitingTermination+0x54>)
 801227a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801227c:	4b0b      	ldr	r3, [pc, #44]	; (80122ac <prvCheckTasksWaitingTermination+0x58>)
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	3b01      	subs	r3, #1
 8012282:	4a0a      	ldr	r2, [pc, #40]	; (80122ac <prvCheckTasksWaitingTermination+0x58>)
 8012284:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012286:	f000 fbcd 	bl	8012a24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801228a:	6878      	ldr	r0, [r7, #4]
 801228c:	f000 f810 	bl	80122b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012290:	4b06      	ldr	r3, [pc, #24]	; (80122ac <prvCheckTasksWaitingTermination+0x58>)
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d1e1      	bne.n	801225c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012298:	bf00      	nop
 801229a:	bf00      	nop
 801229c:	3708      	adds	r7, #8
 801229e:	46bd      	mov	sp, r7
 80122a0:	bd80      	pop	{r7, pc}
 80122a2:	bf00      	nop
 80122a4:	20000c70 	.word	0x20000c70
 80122a8:	20000c9c 	.word	0x20000c9c
 80122ac:	20000c84 	.word	0x20000c84

080122b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80122b0:	b580      	push	{r7, lr}
 80122b2:	b082      	sub	sp, #8
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	334c      	adds	r3, #76	; 0x4c
 80122bc:	4618      	mov	r0, r3
 80122be:	f001 fb99 	bl	80139f4 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122c6:	4618      	mov	r0, r3
 80122c8:	f000 fd6a 	bl	8012da0 <vPortFree>
			vPortFree( pxTCB );
 80122cc:	6878      	ldr	r0, [r7, #4]
 80122ce:	f000 fd67 	bl	8012da0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80122d2:	bf00      	nop
 80122d4:	3708      	adds	r7, #8
 80122d6:	46bd      	mov	sp, r7
 80122d8:	bd80      	pop	{r7, pc}
	...

080122dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80122dc:	b480      	push	{r7}
 80122de:	b083      	sub	sp, #12
 80122e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80122e2:	4b0c      	ldr	r3, [pc, #48]	; (8012314 <prvResetNextTaskUnblockTime+0x38>)
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d104      	bne.n	80122f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80122ec:	4b0a      	ldr	r3, [pc, #40]	; (8012318 <prvResetNextTaskUnblockTime+0x3c>)
 80122ee:	f04f 32ff 	mov.w	r2, #4294967295
 80122f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80122f4:	e008      	b.n	8012308 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80122f6:	4b07      	ldr	r3, [pc, #28]	; (8012314 <prvResetNextTaskUnblockTime+0x38>)
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	68db      	ldr	r3, [r3, #12]
 80122fc:	68db      	ldr	r3, [r3, #12]
 80122fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	685b      	ldr	r3, [r3, #4]
 8012304:	4a04      	ldr	r2, [pc, #16]	; (8012318 <prvResetNextTaskUnblockTime+0x3c>)
 8012306:	6013      	str	r3, [r2, #0]
}
 8012308:	bf00      	nop
 801230a:	370c      	adds	r7, #12
 801230c:	46bd      	mov	sp, r7
 801230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012312:	4770      	bx	lr
 8012314:	20000c54 	.word	0x20000c54
 8012318:	20000cbc 	.word	0x20000cbc

0801231c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801231c:	b480      	push	{r7}
 801231e:	b083      	sub	sp, #12
 8012320:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012322:	4b0b      	ldr	r3, [pc, #44]	; (8012350 <xTaskGetSchedulerState+0x34>)
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d102      	bne.n	8012330 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801232a:	2301      	movs	r3, #1
 801232c:	607b      	str	r3, [r7, #4]
 801232e:	e008      	b.n	8012342 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012330:	4b08      	ldr	r3, [pc, #32]	; (8012354 <xTaskGetSchedulerState+0x38>)
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	2b00      	cmp	r3, #0
 8012336:	d102      	bne.n	801233e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012338:	2302      	movs	r3, #2
 801233a:	607b      	str	r3, [r7, #4]
 801233c:	e001      	b.n	8012342 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801233e:	2300      	movs	r3, #0
 8012340:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012342:	687b      	ldr	r3, [r7, #4]
	}
 8012344:	4618      	mov	r0, r3
 8012346:	370c      	adds	r7, #12
 8012348:	46bd      	mov	sp, r7
 801234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801234e:	4770      	bx	lr
 8012350:	20000ca8 	.word	0x20000ca8
 8012354:	20000cc4 	.word	0x20000cc4

08012358 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012358:	b580      	push	{r7, lr}
 801235a:	b084      	sub	sp, #16
 801235c:	af00      	add	r7, sp, #0
 801235e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012364:	2300      	movs	r3, #0
 8012366:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	2b00      	cmp	r3, #0
 801236c:	d05e      	beq.n	801242c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801236e:	68bb      	ldr	r3, [r7, #8]
 8012370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012372:	4b31      	ldr	r3, [pc, #196]	; (8012438 <xTaskPriorityInherit+0xe0>)
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012378:	429a      	cmp	r2, r3
 801237a:	d24e      	bcs.n	801241a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801237c:	68bb      	ldr	r3, [r7, #8]
 801237e:	699b      	ldr	r3, [r3, #24]
 8012380:	2b00      	cmp	r3, #0
 8012382:	db06      	blt.n	8012392 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012384:	4b2c      	ldr	r3, [pc, #176]	; (8012438 <xTaskPriorityInherit+0xe0>)
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801238a:	f1c3 0207 	rsb	r2, r3, #7
 801238e:	68bb      	ldr	r3, [r7, #8]
 8012390:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012392:	68bb      	ldr	r3, [r7, #8]
 8012394:	6959      	ldr	r1, [r3, #20]
 8012396:	68bb      	ldr	r3, [r7, #8]
 8012398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801239a:	4613      	mov	r3, r2
 801239c:	009b      	lsls	r3, r3, #2
 801239e:	4413      	add	r3, r2
 80123a0:	009b      	lsls	r3, r3, #2
 80123a2:	4a26      	ldr	r2, [pc, #152]	; (801243c <xTaskPriorityInherit+0xe4>)
 80123a4:	4413      	add	r3, r2
 80123a6:	4299      	cmp	r1, r3
 80123a8:	d12f      	bne.n	801240a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80123aa:	68bb      	ldr	r3, [r7, #8]
 80123ac:	3304      	adds	r3, #4
 80123ae:	4618      	mov	r0, r3
 80123b0:	f7fe fe09 	bl	8010fc6 <uxListRemove>
 80123b4:	4603      	mov	r3, r0
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d10a      	bne.n	80123d0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80123ba:	68bb      	ldr	r3, [r7, #8]
 80123bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123be:	2201      	movs	r2, #1
 80123c0:	fa02 f303 	lsl.w	r3, r2, r3
 80123c4:	43da      	mvns	r2, r3
 80123c6:	4b1e      	ldr	r3, [pc, #120]	; (8012440 <xTaskPriorityInherit+0xe8>)
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	4013      	ands	r3, r2
 80123cc:	4a1c      	ldr	r2, [pc, #112]	; (8012440 <xTaskPriorityInherit+0xe8>)
 80123ce:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80123d0:	4b19      	ldr	r3, [pc, #100]	; (8012438 <xTaskPriorityInherit+0xe0>)
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123d6:	68bb      	ldr	r3, [r7, #8]
 80123d8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80123da:	68bb      	ldr	r3, [r7, #8]
 80123dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123de:	2201      	movs	r2, #1
 80123e0:	409a      	lsls	r2, r3
 80123e2:	4b17      	ldr	r3, [pc, #92]	; (8012440 <xTaskPriorityInherit+0xe8>)
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	4313      	orrs	r3, r2
 80123e8:	4a15      	ldr	r2, [pc, #84]	; (8012440 <xTaskPriorityInherit+0xe8>)
 80123ea:	6013      	str	r3, [r2, #0]
 80123ec:	68bb      	ldr	r3, [r7, #8]
 80123ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123f0:	4613      	mov	r3, r2
 80123f2:	009b      	lsls	r3, r3, #2
 80123f4:	4413      	add	r3, r2
 80123f6:	009b      	lsls	r3, r3, #2
 80123f8:	4a10      	ldr	r2, [pc, #64]	; (801243c <xTaskPriorityInherit+0xe4>)
 80123fa:	441a      	add	r2, r3
 80123fc:	68bb      	ldr	r3, [r7, #8]
 80123fe:	3304      	adds	r3, #4
 8012400:	4619      	mov	r1, r3
 8012402:	4610      	mov	r0, r2
 8012404:	f7fe fd82 	bl	8010f0c <vListInsertEnd>
 8012408:	e004      	b.n	8012414 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801240a:	4b0b      	ldr	r3, [pc, #44]	; (8012438 <xTaskPriorityInherit+0xe0>)
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012410:	68bb      	ldr	r3, [r7, #8]
 8012412:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8012414:	2301      	movs	r3, #1
 8012416:	60fb      	str	r3, [r7, #12]
 8012418:	e008      	b.n	801242c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801241a:	68bb      	ldr	r3, [r7, #8]
 801241c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801241e:	4b06      	ldr	r3, [pc, #24]	; (8012438 <xTaskPriorityInherit+0xe0>)
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012424:	429a      	cmp	r2, r3
 8012426:	d201      	bcs.n	801242c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8012428:	2301      	movs	r3, #1
 801242a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801242c:	68fb      	ldr	r3, [r7, #12]
	}
 801242e:	4618      	mov	r0, r3
 8012430:	3710      	adds	r7, #16
 8012432:	46bd      	mov	sp, r7
 8012434:	bd80      	pop	{r7, pc}
 8012436:	bf00      	nop
 8012438:	20000b9c 	.word	0x20000b9c
 801243c:	20000ba0 	.word	0x20000ba0
 8012440:	20000ca4 	.word	0x20000ca4

08012444 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012444:	b580      	push	{r7, lr}
 8012446:	b086      	sub	sp, #24
 8012448:	af00      	add	r7, sp, #0
 801244a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012450:	2300      	movs	r3, #0
 8012452:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	2b00      	cmp	r3, #0
 8012458:	d06e      	beq.n	8012538 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801245a:	4b3a      	ldr	r3, [pc, #232]	; (8012544 <xTaskPriorityDisinherit+0x100>)
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	693a      	ldr	r2, [r7, #16]
 8012460:	429a      	cmp	r2, r3
 8012462:	d00a      	beq.n	801247a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8012464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012468:	f383 8811 	msr	BASEPRI, r3
 801246c:	f3bf 8f6f 	isb	sy
 8012470:	f3bf 8f4f 	dsb	sy
 8012474:	60fb      	str	r3, [r7, #12]
}
 8012476:	bf00      	nop
 8012478:	e7fe      	b.n	8012478 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801247a:	693b      	ldr	r3, [r7, #16]
 801247c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801247e:	2b00      	cmp	r3, #0
 8012480:	d10a      	bne.n	8012498 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8012482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012486:	f383 8811 	msr	BASEPRI, r3
 801248a:	f3bf 8f6f 	isb	sy
 801248e:	f3bf 8f4f 	dsb	sy
 8012492:	60bb      	str	r3, [r7, #8]
}
 8012494:	bf00      	nop
 8012496:	e7fe      	b.n	8012496 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8012498:	693b      	ldr	r3, [r7, #16]
 801249a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801249c:	1e5a      	subs	r2, r3, #1
 801249e:	693b      	ldr	r3, [r7, #16]
 80124a0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80124a2:	693b      	ldr	r3, [r7, #16]
 80124a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124a6:	693b      	ldr	r3, [r7, #16]
 80124a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80124aa:	429a      	cmp	r2, r3
 80124ac:	d044      	beq.n	8012538 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80124ae:	693b      	ldr	r3, [r7, #16]
 80124b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d140      	bne.n	8012538 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80124b6:	693b      	ldr	r3, [r7, #16]
 80124b8:	3304      	adds	r3, #4
 80124ba:	4618      	mov	r0, r3
 80124bc:	f7fe fd83 	bl	8010fc6 <uxListRemove>
 80124c0:	4603      	mov	r3, r0
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d115      	bne.n	80124f2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80124c6:	693b      	ldr	r3, [r7, #16]
 80124c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124ca:	491f      	ldr	r1, [pc, #124]	; (8012548 <xTaskPriorityDisinherit+0x104>)
 80124cc:	4613      	mov	r3, r2
 80124ce:	009b      	lsls	r3, r3, #2
 80124d0:	4413      	add	r3, r2
 80124d2:	009b      	lsls	r3, r3, #2
 80124d4:	440b      	add	r3, r1
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d10a      	bne.n	80124f2 <xTaskPriorityDisinherit+0xae>
 80124dc:	693b      	ldr	r3, [r7, #16]
 80124de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124e0:	2201      	movs	r2, #1
 80124e2:	fa02 f303 	lsl.w	r3, r2, r3
 80124e6:	43da      	mvns	r2, r3
 80124e8:	4b18      	ldr	r3, [pc, #96]	; (801254c <xTaskPriorityDisinherit+0x108>)
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	4013      	ands	r3, r2
 80124ee:	4a17      	ldr	r2, [pc, #92]	; (801254c <xTaskPriorityDisinherit+0x108>)
 80124f0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80124f2:	693b      	ldr	r3, [r7, #16]
 80124f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80124f6:	693b      	ldr	r3, [r7, #16]
 80124f8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80124fa:	693b      	ldr	r3, [r7, #16]
 80124fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124fe:	f1c3 0207 	rsb	r2, r3, #7
 8012502:	693b      	ldr	r3, [r7, #16]
 8012504:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012506:	693b      	ldr	r3, [r7, #16]
 8012508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801250a:	2201      	movs	r2, #1
 801250c:	409a      	lsls	r2, r3
 801250e:	4b0f      	ldr	r3, [pc, #60]	; (801254c <xTaskPriorityDisinherit+0x108>)
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	4313      	orrs	r3, r2
 8012514:	4a0d      	ldr	r2, [pc, #52]	; (801254c <xTaskPriorityDisinherit+0x108>)
 8012516:	6013      	str	r3, [r2, #0]
 8012518:	693b      	ldr	r3, [r7, #16]
 801251a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801251c:	4613      	mov	r3, r2
 801251e:	009b      	lsls	r3, r3, #2
 8012520:	4413      	add	r3, r2
 8012522:	009b      	lsls	r3, r3, #2
 8012524:	4a08      	ldr	r2, [pc, #32]	; (8012548 <xTaskPriorityDisinherit+0x104>)
 8012526:	441a      	add	r2, r3
 8012528:	693b      	ldr	r3, [r7, #16]
 801252a:	3304      	adds	r3, #4
 801252c:	4619      	mov	r1, r3
 801252e:	4610      	mov	r0, r2
 8012530:	f7fe fcec 	bl	8010f0c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012534:	2301      	movs	r3, #1
 8012536:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012538:	697b      	ldr	r3, [r7, #20]
	}
 801253a:	4618      	mov	r0, r3
 801253c:	3718      	adds	r7, #24
 801253e:	46bd      	mov	sp, r7
 8012540:	bd80      	pop	{r7, pc}
 8012542:	bf00      	nop
 8012544:	20000b9c 	.word	0x20000b9c
 8012548:	20000ba0 	.word	0x20000ba0
 801254c:	20000ca4 	.word	0x20000ca4

08012550 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8012550:	b580      	push	{r7, lr}
 8012552:	b088      	sub	sp, #32
 8012554:	af00      	add	r7, sp, #0
 8012556:	6078      	str	r0, [r7, #4]
 8012558:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801255e:	2301      	movs	r3, #1
 8012560:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d077      	beq.n	8012658 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012568:	69bb      	ldr	r3, [r7, #24]
 801256a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801256c:	2b00      	cmp	r3, #0
 801256e:	d10a      	bne.n	8012586 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8012570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012574:	f383 8811 	msr	BASEPRI, r3
 8012578:	f3bf 8f6f 	isb	sy
 801257c:	f3bf 8f4f 	dsb	sy
 8012580:	60fb      	str	r3, [r7, #12]
}
 8012582:	bf00      	nop
 8012584:	e7fe      	b.n	8012584 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012586:	69bb      	ldr	r3, [r7, #24]
 8012588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801258a:	683a      	ldr	r2, [r7, #0]
 801258c:	429a      	cmp	r2, r3
 801258e:	d902      	bls.n	8012596 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012590:	683b      	ldr	r3, [r7, #0]
 8012592:	61fb      	str	r3, [r7, #28]
 8012594:	e002      	b.n	801259c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012596:	69bb      	ldr	r3, [r7, #24]
 8012598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801259a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801259c:	69bb      	ldr	r3, [r7, #24]
 801259e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125a0:	69fa      	ldr	r2, [r7, #28]
 80125a2:	429a      	cmp	r2, r3
 80125a4:	d058      	beq.n	8012658 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80125a6:	69bb      	ldr	r3, [r7, #24]
 80125a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80125aa:	697a      	ldr	r2, [r7, #20]
 80125ac:	429a      	cmp	r2, r3
 80125ae:	d153      	bne.n	8012658 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80125b0:	4b2b      	ldr	r3, [pc, #172]	; (8012660 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	69ba      	ldr	r2, [r7, #24]
 80125b6:	429a      	cmp	r2, r3
 80125b8:	d10a      	bne.n	80125d0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80125ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125be:	f383 8811 	msr	BASEPRI, r3
 80125c2:	f3bf 8f6f 	isb	sy
 80125c6:	f3bf 8f4f 	dsb	sy
 80125ca:	60bb      	str	r3, [r7, #8]
}
 80125cc:	bf00      	nop
 80125ce:	e7fe      	b.n	80125ce <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80125d0:	69bb      	ldr	r3, [r7, #24]
 80125d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125d4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80125d6:	69bb      	ldr	r3, [r7, #24]
 80125d8:	69fa      	ldr	r2, [r7, #28]
 80125da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80125dc:	69bb      	ldr	r3, [r7, #24]
 80125de:	699b      	ldr	r3, [r3, #24]
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	db04      	blt.n	80125ee <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80125e4:	69fb      	ldr	r3, [r7, #28]
 80125e6:	f1c3 0207 	rsb	r2, r3, #7
 80125ea:	69bb      	ldr	r3, [r7, #24]
 80125ec:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80125ee:	69bb      	ldr	r3, [r7, #24]
 80125f0:	6959      	ldr	r1, [r3, #20]
 80125f2:	693a      	ldr	r2, [r7, #16]
 80125f4:	4613      	mov	r3, r2
 80125f6:	009b      	lsls	r3, r3, #2
 80125f8:	4413      	add	r3, r2
 80125fa:	009b      	lsls	r3, r3, #2
 80125fc:	4a19      	ldr	r2, [pc, #100]	; (8012664 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80125fe:	4413      	add	r3, r2
 8012600:	4299      	cmp	r1, r3
 8012602:	d129      	bne.n	8012658 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012604:	69bb      	ldr	r3, [r7, #24]
 8012606:	3304      	adds	r3, #4
 8012608:	4618      	mov	r0, r3
 801260a:	f7fe fcdc 	bl	8010fc6 <uxListRemove>
 801260e:	4603      	mov	r3, r0
 8012610:	2b00      	cmp	r3, #0
 8012612:	d10a      	bne.n	801262a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8012614:	69bb      	ldr	r3, [r7, #24]
 8012616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012618:	2201      	movs	r2, #1
 801261a:	fa02 f303 	lsl.w	r3, r2, r3
 801261e:	43da      	mvns	r2, r3
 8012620:	4b11      	ldr	r3, [pc, #68]	; (8012668 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	4013      	ands	r3, r2
 8012626:	4a10      	ldr	r2, [pc, #64]	; (8012668 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8012628:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801262a:	69bb      	ldr	r3, [r7, #24]
 801262c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801262e:	2201      	movs	r2, #1
 8012630:	409a      	lsls	r2, r3
 8012632:	4b0d      	ldr	r3, [pc, #52]	; (8012668 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	4313      	orrs	r3, r2
 8012638:	4a0b      	ldr	r2, [pc, #44]	; (8012668 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801263a:	6013      	str	r3, [r2, #0]
 801263c:	69bb      	ldr	r3, [r7, #24]
 801263e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012640:	4613      	mov	r3, r2
 8012642:	009b      	lsls	r3, r3, #2
 8012644:	4413      	add	r3, r2
 8012646:	009b      	lsls	r3, r3, #2
 8012648:	4a06      	ldr	r2, [pc, #24]	; (8012664 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801264a:	441a      	add	r2, r3
 801264c:	69bb      	ldr	r3, [r7, #24]
 801264e:	3304      	adds	r3, #4
 8012650:	4619      	mov	r1, r3
 8012652:	4610      	mov	r0, r2
 8012654:	f7fe fc5a 	bl	8010f0c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012658:	bf00      	nop
 801265a:	3720      	adds	r7, #32
 801265c:	46bd      	mov	sp, r7
 801265e:	bd80      	pop	{r7, pc}
 8012660:	20000b9c 	.word	0x20000b9c
 8012664:	20000ba0 	.word	0x20000ba0
 8012668:	20000ca4 	.word	0x20000ca4

0801266c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801266c:	b480      	push	{r7}
 801266e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012670:	4b07      	ldr	r3, [pc, #28]	; (8012690 <pvTaskIncrementMutexHeldCount+0x24>)
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d004      	beq.n	8012682 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012678:	4b05      	ldr	r3, [pc, #20]	; (8012690 <pvTaskIncrementMutexHeldCount+0x24>)
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801267e:	3201      	adds	r2, #1
 8012680:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8012682:	4b03      	ldr	r3, [pc, #12]	; (8012690 <pvTaskIncrementMutexHeldCount+0x24>)
 8012684:	681b      	ldr	r3, [r3, #0]
	}
 8012686:	4618      	mov	r0, r3
 8012688:	46bd      	mov	sp, r7
 801268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801268e:	4770      	bx	lr
 8012690:	20000b9c 	.word	0x20000b9c

08012694 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012694:	b580      	push	{r7, lr}
 8012696:	b084      	sub	sp, #16
 8012698:	af00      	add	r7, sp, #0
 801269a:	6078      	str	r0, [r7, #4]
 801269c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801269e:	4b2b      	ldr	r3, [pc, #172]	; (801274c <prvAddCurrentTaskToDelayedList+0xb8>)
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80126a4:	4b2a      	ldr	r3, [pc, #168]	; (8012750 <prvAddCurrentTaskToDelayedList+0xbc>)
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	2200      	movs	r2, #0
 80126aa:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80126ae:	4b28      	ldr	r3, [pc, #160]	; (8012750 <prvAddCurrentTaskToDelayedList+0xbc>)
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	3304      	adds	r3, #4
 80126b4:	4618      	mov	r0, r3
 80126b6:	f7fe fc86 	bl	8010fc6 <uxListRemove>
 80126ba:	4603      	mov	r3, r0
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d10b      	bne.n	80126d8 <prvAddCurrentTaskToDelayedList+0x44>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80126c0:	4b23      	ldr	r3, [pc, #140]	; (8012750 <prvAddCurrentTaskToDelayedList+0xbc>)
 80126c2:	681b      	ldr	r3, [r3, #0]
 80126c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126c6:	2201      	movs	r2, #1
 80126c8:	fa02 f303 	lsl.w	r3, r2, r3
 80126cc:	43da      	mvns	r2, r3
 80126ce:	4b21      	ldr	r3, [pc, #132]	; (8012754 <prvAddCurrentTaskToDelayedList+0xc0>)
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	4013      	ands	r3, r2
 80126d4:	4a1f      	ldr	r2, [pc, #124]	; (8012754 <prvAddCurrentTaskToDelayedList+0xc0>)
 80126d6:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126de:	d10a      	bne.n	80126f6 <prvAddCurrentTaskToDelayedList+0x62>
 80126e0:	683b      	ldr	r3, [r7, #0]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d007      	beq.n	80126f6 <prvAddCurrentTaskToDelayedList+0x62>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80126e6:	4b1a      	ldr	r3, [pc, #104]	; (8012750 <prvAddCurrentTaskToDelayedList+0xbc>)
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	3304      	adds	r3, #4
 80126ec:	4619      	mov	r1, r3
 80126ee:	481a      	ldr	r0, [pc, #104]	; (8012758 <prvAddCurrentTaskToDelayedList+0xc4>)
 80126f0:	f7fe fc0c 	bl	8010f0c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80126f4:	e026      	b.n	8012744 <prvAddCurrentTaskToDelayedList+0xb0>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80126f6:	68fa      	ldr	r2, [r7, #12]
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	4413      	add	r3, r2
 80126fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80126fe:	4b14      	ldr	r3, [pc, #80]	; (8012750 <prvAddCurrentTaskToDelayedList+0xbc>)
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	68ba      	ldr	r2, [r7, #8]
 8012704:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012706:	68ba      	ldr	r2, [r7, #8]
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	429a      	cmp	r2, r3
 801270c:	d209      	bcs.n	8012722 <prvAddCurrentTaskToDelayedList+0x8e>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801270e:	4b13      	ldr	r3, [pc, #76]	; (801275c <prvAddCurrentTaskToDelayedList+0xc8>)
 8012710:	681a      	ldr	r2, [r3, #0]
 8012712:	4b0f      	ldr	r3, [pc, #60]	; (8012750 <prvAddCurrentTaskToDelayedList+0xbc>)
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	3304      	adds	r3, #4
 8012718:	4619      	mov	r1, r3
 801271a:	4610      	mov	r0, r2
 801271c:	f7fe fc1a 	bl	8010f54 <vListInsert>
}
 8012720:	e010      	b.n	8012744 <prvAddCurrentTaskToDelayedList+0xb0>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012722:	4b0f      	ldr	r3, [pc, #60]	; (8012760 <prvAddCurrentTaskToDelayedList+0xcc>)
 8012724:	681a      	ldr	r2, [r3, #0]
 8012726:	4b0a      	ldr	r3, [pc, #40]	; (8012750 <prvAddCurrentTaskToDelayedList+0xbc>)
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	3304      	adds	r3, #4
 801272c:	4619      	mov	r1, r3
 801272e:	4610      	mov	r0, r2
 8012730:	f7fe fc10 	bl	8010f54 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012734:	4b0b      	ldr	r3, [pc, #44]	; (8012764 <prvAddCurrentTaskToDelayedList+0xd0>)
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	68ba      	ldr	r2, [r7, #8]
 801273a:	429a      	cmp	r2, r3
 801273c:	d202      	bcs.n	8012744 <prvAddCurrentTaskToDelayedList+0xb0>
					xNextTaskUnblockTime = xTimeToWake;
 801273e:	4a09      	ldr	r2, [pc, #36]	; (8012764 <prvAddCurrentTaskToDelayedList+0xd0>)
 8012740:	68bb      	ldr	r3, [r7, #8]
 8012742:	6013      	str	r3, [r2, #0]
}
 8012744:	bf00      	nop
 8012746:	3710      	adds	r7, #16
 8012748:	46bd      	mov	sp, r7
 801274a:	bd80      	pop	{r7, pc}
 801274c:	20000ca0 	.word	0x20000ca0
 8012750:	20000b9c 	.word	0x20000b9c
 8012754:	20000ca4 	.word	0x20000ca4
 8012758:	20000c88 	.word	0x20000c88
 801275c:	20000c58 	.word	0x20000c58
 8012760:	20000c54 	.word	0x20000c54
 8012764:	20000cbc 	.word	0x20000cbc

08012768 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012768:	b480      	push	{r7}
 801276a:	b085      	sub	sp, #20
 801276c:	af00      	add	r7, sp, #0
 801276e:	60f8      	str	r0, [r7, #12]
 8012770:	60b9      	str	r1, [r7, #8]
 8012772:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	3b04      	subs	r3, #4
 8012778:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012780:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	3b04      	subs	r3, #4
 8012786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012788:	68bb      	ldr	r3, [r7, #8]
 801278a:	f023 0201 	bic.w	r2, r3, #1
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	3b04      	subs	r3, #4
 8012796:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012798:	4a0c      	ldr	r2, [pc, #48]	; (80127cc <pxPortInitialiseStack+0x64>)
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	3b14      	subs	r3, #20
 80127a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80127a4:	687a      	ldr	r2, [r7, #4]
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	3b04      	subs	r3, #4
 80127ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	f06f 0202 	mvn.w	r2, #2
 80127b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80127b8:	68fb      	ldr	r3, [r7, #12]
 80127ba:	3b20      	subs	r3, #32
 80127bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80127be:	68fb      	ldr	r3, [r7, #12]
}
 80127c0:	4618      	mov	r0, r3
 80127c2:	3714      	adds	r7, #20
 80127c4:	46bd      	mov	sp, r7
 80127c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ca:	4770      	bx	lr
 80127cc:	080127d1 	.word	0x080127d1

080127d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80127d0:	b480      	push	{r7}
 80127d2:	b085      	sub	sp, #20
 80127d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80127d6:	2300      	movs	r3, #0
 80127d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80127da:	4b12      	ldr	r3, [pc, #72]	; (8012824 <prvTaskExitError+0x54>)
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127e2:	d00a      	beq.n	80127fa <prvTaskExitError+0x2a>
	__asm volatile
 80127e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127e8:	f383 8811 	msr	BASEPRI, r3
 80127ec:	f3bf 8f6f 	isb	sy
 80127f0:	f3bf 8f4f 	dsb	sy
 80127f4:	60fb      	str	r3, [r7, #12]
}
 80127f6:	bf00      	nop
 80127f8:	e7fe      	b.n	80127f8 <prvTaskExitError+0x28>
	__asm volatile
 80127fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127fe:	f383 8811 	msr	BASEPRI, r3
 8012802:	f3bf 8f6f 	isb	sy
 8012806:	f3bf 8f4f 	dsb	sy
 801280a:	60bb      	str	r3, [r7, #8]
}
 801280c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801280e:	bf00      	nop
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	2b00      	cmp	r3, #0
 8012814:	d0fc      	beq.n	8012810 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012816:	bf00      	nop
 8012818:	bf00      	nop
 801281a:	3714      	adds	r7, #20
 801281c:	46bd      	mov	sp, r7
 801281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012822:	4770      	bx	lr
 8012824:	20000120 	.word	0x20000120
	...

08012830 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012830:	4b07      	ldr	r3, [pc, #28]	; (8012850 <pxCurrentTCBConst2>)
 8012832:	6819      	ldr	r1, [r3, #0]
 8012834:	6808      	ldr	r0, [r1, #0]
 8012836:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801283a:	f380 8809 	msr	PSP, r0
 801283e:	f3bf 8f6f 	isb	sy
 8012842:	f04f 0000 	mov.w	r0, #0
 8012846:	f380 8811 	msr	BASEPRI, r0
 801284a:	4770      	bx	lr
 801284c:	f3af 8000 	nop.w

08012850 <pxCurrentTCBConst2>:
 8012850:	20000b9c 	.word	0x20000b9c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012854:	bf00      	nop
 8012856:	bf00      	nop

08012858 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012858:	4808      	ldr	r0, [pc, #32]	; (801287c <prvPortStartFirstTask+0x24>)
 801285a:	6800      	ldr	r0, [r0, #0]
 801285c:	6800      	ldr	r0, [r0, #0]
 801285e:	f380 8808 	msr	MSP, r0
 8012862:	f04f 0000 	mov.w	r0, #0
 8012866:	f380 8814 	msr	CONTROL, r0
 801286a:	b662      	cpsie	i
 801286c:	b661      	cpsie	f
 801286e:	f3bf 8f4f 	dsb	sy
 8012872:	f3bf 8f6f 	isb	sy
 8012876:	df00      	svc	0
 8012878:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801287a:	bf00      	nop
 801287c:	e000ed08 	.word	0xe000ed08

08012880 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012880:	b580      	push	{r7, lr}
 8012882:	b086      	sub	sp, #24
 8012884:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012886:	4b46      	ldr	r3, [pc, #280]	; (80129a0 <xPortStartScheduler+0x120>)
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	4a46      	ldr	r2, [pc, #280]	; (80129a4 <xPortStartScheduler+0x124>)
 801288c:	4293      	cmp	r3, r2
 801288e:	d10a      	bne.n	80128a6 <xPortStartScheduler+0x26>
	__asm volatile
 8012890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012894:	f383 8811 	msr	BASEPRI, r3
 8012898:	f3bf 8f6f 	isb	sy
 801289c:	f3bf 8f4f 	dsb	sy
 80128a0:	613b      	str	r3, [r7, #16]
}
 80128a2:	bf00      	nop
 80128a4:	e7fe      	b.n	80128a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80128a6:	4b3e      	ldr	r3, [pc, #248]	; (80129a0 <xPortStartScheduler+0x120>)
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	4a3f      	ldr	r2, [pc, #252]	; (80129a8 <xPortStartScheduler+0x128>)
 80128ac:	4293      	cmp	r3, r2
 80128ae:	d10a      	bne.n	80128c6 <xPortStartScheduler+0x46>
	__asm volatile
 80128b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128b4:	f383 8811 	msr	BASEPRI, r3
 80128b8:	f3bf 8f6f 	isb	sy
 80128bc:	f3bf 8f4f 	dsb	sy
 80128c0:	60fb      	str	r3, [r7, #12]
}
 80128c2:	bf00      	nop
 80128c4:	e7fe      	b.n	80128c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80128c6:	4b39      	ldr	r3, [pc, #228]	; (80129ac <xPortStartScheduler+0x12c>)
 80128c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80128ca:	697b      	ldr	r3, [r7, #20]
 80128cc:	781b      	ldrb	r3, [r3, #0]
 80128ce:	b2db      	uxtb	r3, r3
 80128d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80128d2:	697b      	ldr	r3, [r7, #20]
 80128d4:	22ff      	movs	r2, #255	; 0xff
 80128d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80128d8:	697b      	ldr	r3, [r7, #20]
 80128da:	781b      	ldrb	r3, [r3, #0]
 80128dc:	b2db      	uxtb	r3, r3
 80128de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80128e0:	78fb      	ldrb	r3, [r7, #3]
 80128e2:	b2db      	uxtb	r3, r3
 80128e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80128e8:	b2da      	uxtb	r2, r3
 80128ea:	4b31      	ldr	r3, [pc, #196]	; (80129b0 <xPortStartScheduler+0x130>)
 80128ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80128ee:	4b31      	ldr	r3, [pc, #196]	; (80129b4 <xPortStartScheduler+0x134>)
 80128f0:	2207      	movs	r2, #7
 80128f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80128f4:	e009      	b.n	801290a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80128f6:	4b2f      	ldr	r3, [pc, #188]	; (80129b4 <xPortStartScheduler+0x134>)
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	3b01      	subs	r3, #1
 80128fc:	4a2d      	ldr	r2, [pc, #180]	; (80129b4 <xPortStartScheduler+0x134>)
 80128fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012900:	78fb      	ldrb	r3, [r7, #3]
 8012902:	b2db      	uxtb	r3, r3
 8012904:	005b      	lsls	r3, r3, #1
 8012906:	b2db      	uxtb	r3, r3
 8012908:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801290a:	78fb      	ldrb	r3, [r7, #3]
 801290c:	b2db      	uxtb	r3, r3
 801290e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012912:	2b80      	cmp	r3, #128	; 0x80
 8012914:	d0ef      	beq.n	80128f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012916:	4b27      	ldr	r3, [pc, #156]	; (80129b4 <xPortStartScheduler+0x134>)
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	f1c3 0307 	rsb	r3, r3, #7
 801291e:	2b04      	cmp	r3, #4
 8012920:	d00a      	beq.n	8012938 <xPortStartScheduler+0xb8>
	__asm volatile
 8012922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012926:	f383 8811 	msr	BASEPRI, r3
 801292a:	f3bf 8f6f 	isb	sy
 801292e:	f3bf 8f4f 	dsb	sy
 8012932:	60bb      	str	r3, [r7, #8]
}
 8012934:	bf00      	nop
 8012936:	e7fe      	b.n	8012936 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012938:	4b1e      	ldr	r3, [pc, #120]	; (80129b4 <xPortStartScheduler+0x134>)
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	021b      	lsls	r3, r3, #8
 801293e:	4a1d      	ldr	r2, [pc, #116]	; (80129b4 <xPortStartScheduler+0x134>)
 8012940:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012942:	4b1c      	ldr	r3, [pc, #112]	; (80129b4 <xPortStartScheduler+0x134>)
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801294a:	4a1a      	ldr	r2, [pc, #104]	; (80129b4 <xPortStartScheduler+0x134>)
 801294c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	b2da      	uxtb	r2, r3
 8012952:	697b      	ldr	r3, [r7, #20]
 8012954:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012956:	4b18      	ldr	r3, [pc, #96]	; (80129b8 <xPortStartScheduler+0x138>)
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	4a17      	ldr	r2, [pc, #92]	; (80129b8 <xPortStartScheduler+0x138>)
 801295c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012960:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012962:	4b15      	ldr	r3, [pc, #84]	; (80129b8 <xPortStartScheduler+0x138>)
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	4a14      	ldr	r2, [pc, #80]	; (80129b8 <xPortStartScheduler+0x138>)
 8012968:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801296c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801296e:	f000 f8dd 	bl	8012b2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012972:	4b12      	ldr	r3, [pc, #72]	; (80129bc <xPortStartScheduler+0x13c>)
 8012974:	2200      	movs	r2, #0
 8012976:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012978:	f000 f8fc 	bl	8012b74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801297c:	4b10      	ldr	r3, [pc, #64]	; (80129c0 <xPortStartScheduler+0x140>)
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	4a0f      	ldr	r2, [pc, #60]	; (80129c0 <xPortStartScheduler+0x140>)
 8012982:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012986:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012988:	f7ff ff66 	bl	8012858 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801298c:	f7ff fa94 	bl	8011eb8 <vTaskSwitchContext>
	prvTaskExitError();
 8012990:	f7ff ff1e 	bl	80127d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012994:	2300      	movs	r3, #0
}
 8012996:	4618      	mov	r0, r3
 8012998:	3718      	adds	r7, #24
 801299a:	46bd      	mov	sp, r7
 801299c:	bd80      	pop	{r7, pc}
 801299e:	bf00      	nop
 80129a0:	e000ed00 	.word	0xe000ed00
 80129a4:	410fc271 	.word	0x410fc271
 80129a8:	410fc270 	.word	0x410fc270
 80129ac:	e000e400 	.word	0xe000e400
 80129b0:	20000cc8 	.word	0x20000cc8
 80129b4:	20000ccc 	.word	0x20000ccc
 80129b8:	e000ed20 	.word	0xe000ed20
 80129bc:	20000120 	.word	0x20000120
 80129c0:	e000ef34 	.word	0xe000ef34

080129c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80129c4:	b480      	push	{r7}
 80129c6:	b083      	sub	sp, #12
 80129c8:	af00      	add	r7, sp, #0
	__asm volatile
 80129ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129ce:	f383 8811 	msr	BASEPRI, r3
 80129d2:	f3bf 8f6f 	isb	sy
 80129d6:	f3bf 8f4f 	dsb	sy
 80129da:	607b      	str	r3, [r7, #4]
}
 80129dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80129de:	4b0f      	ldr	r3, [pc, #60]	; (8012a1c <vPortEnterCritical+0x58>)
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	3301      	adds	r3, #1
 80129e4:	4a0d      	ldr	r2, [pc, #52]	; (8012a1c <vPortEnterCritical+0x58>)
 80129e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80129e8:	4b0c      	ldr	r3, [pc, #48]	; (8012a1c <vPortEnterCritical+0x58>)
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	2b01      	cmp	r3, #1
 80129ee:	d10f      	bne.n	8012a10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80129f0:	4b0b      	ldr	r3, [pc, #44]	; (8012a20 <vPortEnterCritical+0x5c>)
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	b2db      	uxtb	r3, r3
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d00a      	beq.n	8012a10 <vPortEnterCritical+0x4c>
	__asm volatile
 80129fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129fe:	f383 8811 	msr	BASEPRI, r3
 8012a02:	f3bf 8f6f 	isb	sy
 8012a06:	f3bf 8f4f 	dsb	sy
 8012a0a:	603b      	str	r3, [r7, #0]
}
 8012a0c:	bf00      	nop
 8012a0e:	e7fe      	b.n	8012a0e <vPortEnterCritical+0x4a>
	}
}
 8012a10:	bf00      	nop
 8012a12:	370c      	adds	r7, #12
 8012a14:	46bd      	mov	sp, r7
 8012a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a1a:	4770      	bx	lr
 8012a1c:	20000120 	.word	0x20000120
 8012a20:	e000ed04 	.word	0xe000ed04

08012a24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012a24:	b480      	push	{r7}
 8012a26:	b083      	sub	sp, #12
 8012a28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012a2a:	4b12      	ldr	r3, [pc, #72]	; (8012a74 <vPortExitCritical+0x50>)
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d10a      	bne.n	8012a48 <vPortExitCritical+0x24>
	__asm volatile
 8012a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a36:	f383 8811 	msr	BASEPRI, r3
 8012a3a:	f3bf 8f6f 	isb	sy
 8012a3e:	f3bf 8f4f 	dsb	sy
 8012a42:	607b      	str	r3, [r7, #4]
}
 8012a44:	bf00      	nop
 8012a46:	e7fe      	b.n	8012a46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012a48:	4b0a      	ldr	r3, [pc, #40]	; (8012a74 <vPortExitCritical+0x50>)
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	3b01      	subs	r3, #1
 8012a4e:	4a09      	ldr	r2, [pc, #36]	; (8012a74 <vPortExitCritical+0x50>)
 8012a50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012a52:	4b08      	ldr	r3, [pc, #32]	; (8012a74 <vPortExitCritical+0x50>)
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d105      	bne.n	8012a66 <vPortExitCritical+0x42>
 8012a5a:	2300      	movs	r3, #0
 8012a5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012a5e:	683b      	ldr	r3, [r7, #0]
 8012a60:	f383 8811 	msr	BASEPRI, r3
}
 8012a64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012a66:	bf00      	nop
 8012a68:	370c      	adds	r7, #12
 8012a6a:	46bd      	mov	sp, r7
 8012a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a70:	4770      	bx	lr
 8012a72:	bf00      	nop
 8012a74:	20000120 	.word	0x20000120
	...

08012a80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012a80:	f3ef 8009 	mrs	r0, PSP
 8012a84:	f3bf 8f6f 	isb	sy
 8012a88:	4b15      	ldr	r3, [pc, #84]	; (8012ae0 <pxCurrentTCBConst>)
 8012a8a:	681a      	ldr	r2, [r3, #0]
 8012a8c:	f01e 0f10 	tst.w	lr, #16
 8012a90:	bf08      	it	eq
 8012a92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012a96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a9a:	6010      	str	r0, [r2, #0]
 8012a9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012aa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012aa4:	f380 8811 	msr	BASEPRI, r0
 8012aa8:	f3bf 8f4f 	dsb	sy
 8012aac:	f3bf 8f6f 	isb	sy
 8012ab0:	f7ff fa02 	bl	8011eb8 <vTaskSwitchContext>
 8012ab4:	f04f 0000 	mov.w	r0, #0
 8012ab8:	f380 8811 	msr	BASEPRI, r0
 8012abc:	bc09      	pop	{r0, r3}
 8012abe:	6819      	ldr	r1, [r3, #0]
 8012ac0:	6808      	ldr	r0, [r1, #0]
 8012ac2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ac6:	f01e 0f10 	tst.w	lr, #16
 8012aca:	bf08      	it	eq
 8012acc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012ad0:	f380 8809 	msr	PSP, r0
 8012ad4:	f3bf 8f6f 	isb	sy
 8012ad8:	4770      	bx	lr
 8012ada:	bf00      	nop
 8012adc:	f3af 8000 	nop.w

08012ae0 <pxCurrentTCBConst>:
 8012ae0:	20000b9c 	.word	0x20000b9c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012ae4:	bf00      	nop
 8012ae6:	bf00      	nop

08012ae8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012ae8:	b580      	push	{r7, lr}
 8012aea:	b082      	sub	sp, #8
 8012aec:	af00      	add	r7, sp, #0
	__asm volatile
 8012aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012af2:	f383 8811 	msr	BASEPRI, r3
 8012af6:	f3bf 8f6f 	isb	sy
 8012afa:	f3bf 8f4f 	dsb	sy
 8012afe:	607b      	str	r3, [r7, #4]
}
 8012b00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012b02:	f7ff f943 	bl	8011d8c <xTaskIncrementTick>
 8012b06:	4603      	mov	r3, r0
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d003      	beq.n	8012b14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012b0c:	4b06      	ldr	r3, [pc, #24]	; (8012b28 <SysTick_Handler+0x40>)
 8012b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b12:	601a      	str	r2, [r3, #0]
 8012b14:	2300      	movs	r3, #0
 8012b16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012b18:	683b      	ldr	r3, [r7, #0]
 8012b1a:	f383 8811 	msr	BASEPRI, r3
}
 8012b1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012b20:	bf00      	nop
 8012b22:	3708      	adds	r7, #8
 8012b24:	46bd      	mov	sp, r7
 8012b26:	bd80      	pop	{r7, pc}
 8012b28:	e000ed04 	.word	0xe000ed04

08012b2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012b2c:	b480      	push	{r7}
 8012b2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012b30:	4b0b      	ldr	r3, [pc, #44]	; (8012b60 <vPortSetupTimerInterrupt+0x34>)
 8012b32:	2200      	movs	r2, #0
 8012b34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012b36:	4b0b      	ldr	r3, [pc, #44]	; (8012b64 <vPortSetupTimerInterrupt+0x38>)
 8012b38:	2200      	movs	r2, #0
 8012b3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012b3c:	4b0a      	ldr	r3, [pc, #40]	; (8012b68 <vPortSetupTimerInterrupt+0x3c>)
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	4a0a      	ldr	r2, [pc, #40]	; (8012b6c <vPortSetupTimerInterrupt+0x40>)
 8012b42:	fba2 2303 	umull	r2, r3, r2, r3
 8012b46:	099b      	lsrs	r3, r3, #6
 8012b48:	4a09      	ldr	r2, [pc, #36]	; (8012b70 <vPortSetupTimerInterrupt+0x44>)
 8012b4a:	3b01      	subs	r3, #1
 8012b4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012b4e:	4b04      	ldr	r3, [pc, #16]	; (8012b60 <vPortSetupTimerInterrupt+0x34>)
 8012b50:	2207      	movs	r2, #7
 8012b52:	601a      	str	r2, [r3, #0]
}
 8012b54:	bf00      	nop
 8012b56:	46bd      	mov	sp, r7
 8012b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b5c:	4770      	bx	lr
 8012b5e:	bf00      	nop
 8012b60:	e000e010 	.word	0xe000e010
 8012b64:	e000e018 	.word	0xe000e018
 8012b68:	20000004 	.word	0x20000004
 8012b6c:	10624dd3 	.word	0x10624dd3
 8012b70:	e000e014 	.word	0xe000e014

08012b74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012b74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012b84 <vPortEnableVFP+0x10>
 8012b78:	6801      	ldr	r1, [r0, #0]
 8012b7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012b7e:	6001      	str	r1, [r0, #0]
 8012b80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012b82:	bf00      	nop
 8012b84:	e000ed88 	.word	0xe000ed88

08012b88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012b88:	b480      	push	{r7}
 8012b8a:	b085      	sub	sp, #20
 8012b8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012b8e:	f3ef 8305 	mrs	r3, IPSR
 8012b92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	2b0f      	cmp	r3, #15
 8012b98:	d914      	bls.n	8012bc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012b9a:	4a17      	ldr	r2, [pc, #92]	; (8012bf8 <vPortValidateInterruptPriority+0x70>)
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	4413      	add	r3, r2
 8012ba0:	781b      	ldrb	r3, [r3, #0]
 8012ba2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012ba4:	4b15      	ldr	r3, [pc, #84]	; (8012bfc <vPortValidateInterruptPriority+0x74>)
 8012ba6:	781b      	ldrb	r3, [r3, #0]
 8012ba8:	7afa      	ldrb	r2, [r7, #11]
 8012baa:	429a      	cmp	r2, r3
 8012bac:	d20a      	bcs.n	8012bc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8012bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bb2:	f383 8811 	msr	BASEPRI, r3
 8012bb6:	f3bf 8f6f 	isb	sy
 8012bba:	f3bf 8f4f 	dsb	sy
 8012bbe:	607b      	str	r3, [r7, #4]
}
 8012bc0:	bf00      	nop
 8012bc2:	e7fe      	b.n	8012bc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012bc4:	4b0e      	ldr	r3, [pc, #56]	; (8012c00 <vPortValidateInterruptPriority+0x78>)
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012bcc:	4b0d      	ldr	r3, [pc, #52]	; (8012c04 <vPortValidateInterruptPriority+0x7c>)
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	429a      	cmp	r2, r3
 8012bd2:	d90a      	bls.n	8012bea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bd8:	f383 8811 	msr	BASEPRI, r3
 8012bdc:	f3bf 8f6f 	isb	sy
 8012be0:	f3bf 8f4f 	dsb	sy
 8012be4:	603b      	str	r3, [r7, #0]
}
 8012be6:	bf00      	nop
 8012be8:	e7fe      	b.n	8012be8 <vPortValidateInterruptPriority+0x60>
	}
 8012bea:	bf00      	nop
 8012bec:	3714      	adds	r7, #20
 8012bee:	46bd      	mov	sp, r7
 8012bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bf4:	4770      	bx	lr
 8012bf6:	bf00      	nop
 8012bf8:	e000e3f0 	.word	0xe000e3f0
 8012bfc:	20000cc8 	.word	0x20000cc8
 8012c00:	e000ed0c 	.word	0xe000ed0c
 8012c04:	20000ccc 	.word	0x20000ccc

08012c08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012c08:	b580      	push	{r7, lr}
 8012c0a:	b08a      	sub	sp, #40	; 0x28
 8012c0c:	af00      	add	r7, sp, #0
 8012c0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012c10:	2300      	movs	r3, #0
 8012c12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012c14:	f7ff f81e 	bl	8011c54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012c18:	4b5b      	ldr	r3, [pc, #364]	; (8012d88 <pvPortMalloc+0x180>)
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d101      	bne.n	8012c24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012c20:	f000 f920 	bl	8012e64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012c24:	4b59      	ldr	r3, [pc, #356]	; (8012d8c <pvPortMalloc+0x184>)
 8012c26:	681a      	ldr	r2, [r3, #0]
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	4013      	ands	r3, r2
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	f040 8093 	bne.w	8012d58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d01d      	beq.n	8012c74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8012c38:	2208      	movs	r2, #8
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	4413      	add	r3, r2
 8012c3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	f003 0307 	and.w	r3, r3, #7
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d014      	beq.n	8012c74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	f023 0307 	bic.w	r3, r3, #7
 8012c50:	3308      	adds	r3, #8
 8012c52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	f003 0307 	and.w	r3, r3, #7
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d00a      	beq.n	8012c74 <pvPortMalloc+0x6c>
	__asm volatile
 8012c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c62:	f383 8811 	msr	BASEPRI, r3
 8012c66:	f3bf 8f6f 	isb	sy
 8012c6a:	f3bf 8f4f 	dsb	sy
 8012c6e:	617b      	str	r3, [r7, #20]
}
 8012c70:	bf00      	nop
 8012c72:	e7fe      	b.n	8012c72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d06e      	beq.n	8012d58 <pvPortMalloc+0x150>
 8012c7a:	4b45      	ldr	r3, [pc, #276]	; (8012d90 <pvPortMalloc+0x188>)
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	687a      	ldr	r2, [r7, #4]
 8012c80:	429a      	cmp	r2, r3
 8012c82:	d869      	bhi.n	8012d58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012c84:	4b43      	ldr	r3, [pc, #268]	; (8012d94 <pvPortMalloc+0x18c>)
 8012c86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012c88:	4b42      	ldr	r3, [pc, #264]	; (8012d94 <pvPortMalloc+0x18c>)
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012c8e:	e004      	b.n	8012c9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8012c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c9c:	685b      	ldr	r3, [r3, #4]
 8012c9e:	687a      	ldr	r2, [r7, #4]
 8012ca0:	429a      	cmp	r2, r3
 8012ca2:	d903      	bls.n	8012cac <pvPortMalloc+0xa4>
 8012ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d1f1      	bne.n	8012c90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012cac:	4b36      	ldr	r3, [pc, #216]	; (8012d88 <pvPortMalloc+0x180>)
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012cb2:	429a      	cmp	r2, r3
 8012cb4:	d050      	beq.n	8012d58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012cb6:	6a3b      	ldr	r3, [r7, #32]
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	2208      	movs	r2, #8
 8012cbc:	4413      	add	r3, r2
 8012cbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cc2:	681a      	ldr	r2, [r3, #0]
 8012cc4:	6a3b      	ldr	r3, [r7, #32]
 8012cc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cca:	685a      	ldr	r2, [r3, #4]
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	1ad2      	subs	r2, r2, r3
 8012cd0:	2308      	movs	r3, #8
 8012cd2:	005b      	lsls	r3, r3, #1
 8012cd4:	429a      	cmp	r2, r3
 8012cd6:	d91f      	bls.n	8012d18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	4413      	add	r3, r2
 8012cde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012ce0:	69bb      	ldr	r3, [r7, #24]
 8012ce2:	f003 0307 	and.w	r3, r3, #7
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d00a      	beq.n	8012d00 <pvPortMalloc+0xf8>
	__asm volatile
 8012cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cee:	f383 8811 	msr	BASEPRI, r3
 8012cf2:	f3bf 8f6f 	isb	sy
 8012cf6:	f3bf 8f4f 	dsb	sy
 8012cfa:	613b      	str	r3, [r7, #16]
}
 8012cfc:	bf00      	nop
 8012cfe:	e7fe      	b.n	8012cfe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d02:	685a      	ldr	r2, [r3, #4]
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	1ad2      	subs	r2, r2, r3
 8012d08:	69bb      	ldr	r3, [r7, #24]
 8012d0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d0e:	687a      	ldr	r2, [r7, #4]
 8012d10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012d12:	69b8      	ldr	r0, [r7, #24]
 8012d14:	f000 f908 	bl	8012f28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012d18:	4b1d      	ldr	r3, [pc, #116]	; (8012d90 <pvPortMalloc+0x188>)
 8012d1a:	681a      	ldr	r2, [r3, #0]
 8012d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d1e:	685b      	ldr	r3, [r3, #4]
 8012d20:	1ad3      	subs	r3, r2, r3
 8012d22:	4a1b      	ldr	r2, [pc, #108]	; (8012d90 <pvPortMalloc+0x188>)
 8012d24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012d26:	4b1a      	ldr	r3, [pc, #104]	; (8012d90 <pvPortMalloc+0x188>)
 8012d28:	681a      	ldr	r2, [r3, #0]
 8012d2a:	4b1b      	ldr	r3, [pc, #108]	; (8012d98 <pvPortMalloc+0x190>)
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	429a      	cmp	r2, r3
 8012d30:	d203      	bcs.n	8012d3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012d32:	4b17      	ldr	r3, [pc, #92]	; (8012d90 <pvPortMalloc+0x188>)
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	4a18      	ldr	r2, [pc, #96]	; (8012d98 <pvPortMalloc+0x190>)
 8012d38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d3c:	685a      	ldr	r2, [r3, #4]
 8012d3e:	4b13      	ldr	r3, [pc, #76]	; (8012d8c <pvPortMalloc+0x184>)
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	431a      	orrs	r2, r3
 8012d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d4a:	2200      	movs	r2, #0
 8012d4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8012d4e:	4b13      	ldr	r3, [pc, #76]	; (8012d9c <pvPortMalloc+0x194>)
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	3301      	adds	r3, #1
 8012d54:	4a11      	ldr	r2, [pc, #68]	; (8012d9c <pvPortMalloc+0x194>)
 8012d56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012d58:	f7fe ff8a 	bl	8011c70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012d5c:	69fb      	ldr	r3, [r7, #28]
 8012d5e:	f003 0307 	and.w	r3, r3, #7
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d00a      	beq.n	8012d7c <pvPortMalloc+0x174>
	__asm volatile
 8012d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d6a:	f383 8811 	msr	BASEPRI, r3
 8012d6e:	f3bf 8f6f 	isb	sy
 8012d72:	f3bf 8f4f 	dsb	sy
 8012d76:	60fb      	str	r3, [r7, #12]
}
 8012d78:	bf00      	nop
 8012d7a:	e7fe      	b.n	8012d7a <pvPortMalloc+0x172>
	return pvReturn;
 8012d7c:	69fb      	ldr	r3, [r7, #28]
}
 8012d7e:	4618      	mov	r0, r3
 8012d80:	3728      	adds	r7, #40	; 0x28
 8012d82:	46bd      	mov	sp, r7
 8012d84:	bd80      	pop	{r7, pc}
 8012d86:	bf00      	nop
 8012d88:	20003cd8 	.word	0x20003cd8
 8012d8c:	20003cec 	.word	0x20003cec
 8012d90:	20003cdc 	.word	0x20003cdc
 8012d94:	20003cd0 	.word	0x20003cd0
 8012d98:	20003ce0 	.word	0x20003ce0
 8012d9c:	20003ce4 	.word	0x20003ce4

08012da0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012da0:	b580      	push	{r7, lr}
 8012da2:	b086      	sub	sp, #24
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d04d      	beq.n	8012e4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012db2:	2308      	movs	r3, #8
 8012db4:	425b      	negs	r3, r3
 8012db6:	697a      	ldr	r2, [r7, #20]
 8012db8:	4413      	add	r3, r2
 8012dba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012dbc:	697b      	ldr	r3, [r7, #20]
 8012dbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012dc0:	693b      	ldr	r3, [r7, #16]
 8012dc2:	685a      	ldr	r2, [r3, #4]
 8012dc4:	4b24      	ldr	r3, [pc, #144]	; (8012e58 <vPortFree+0xb8>)
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	4013      	ands	r3, r2
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d10a      	bne.n	8012de4 <vPortFree+0x44>
	__asm volatile
 8012dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dd2:	f383 8811 	msr	BASEPRI, r3
 8012dd6:	f3bf 8f6f 	isb	sy
 8012dda:	f3bf 8f4f 	dsb	sy
 8012dde:	60fb      	str	r3, [r7, #12]
}
 8012de0:	bf00      	nop
 8012de2:	e7fe      	b.n	8012de2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012de4:	693b      	ldr	r3, [r7, #16]
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d00a      	beq.n	8012e02 <vPortFree+0x62>
	__asm volatile
 8012dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012df0:	f383 8811 	msr	BASEPRI, r3
 8012df4:	f3bf 8f6f 	isb	sy
 8012df8:	f3bf 8f4f 	dsb	sy
 8012dfc:	60bb      	str	r3, [r7, #8]
}
 8012dfe:	bf00      	nop
 8012e00:	e7fe      	b.n	8012e00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012e02:	693b      	ldr	r3, [r7, #16]
 8012e04:	685a      	ldr	r2, [r3, #4]
 8012e06:	4b14      	ldr	r3, [pc, #80]	; (8012e58 <vPortFree+0xb8>)
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	4013      	ands	r3, r2
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d01e      	beq.n	8012e4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012e10:	693b      	ldr	r3, [r7, #16]
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d11a      	bne.n	8012e4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012e18:	693b      	ldr	r3, [r7, #16]
 8012e1a:	685a      	ldr	r2, [r3, #4]
 8012e1c:	4b0e      	ldr	r3, [pc, #56]	; (8012e58 <vPortFree+0xb8>)
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	43db      	mvns	r3, r3
 8012e22:	401a      	ands	r2, r3
 8012e24:	693b      	ldr	r3, [r7, #16]
 8012e26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012e28:	f7fe ff14 	bl	8011c54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012e2c:	693b      	ldr	r3, [r7, #16]
 8012e2e:	685a      	ldr	r2, [r3, #4]
 8012e30:	4b0a      	ldr	r3, [pc, #40]	; (8012e5c <vPortFree+0xbc>)
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	4413      	add	r3, r2
 8012e36:	4a09      	ldr	r2, [pc, #36]	; (8012e5c <vPortFree+0xbc>)
 8012e38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012e3a:	6938      	ldr	r0, [r7, #16]
 8012e3c:	f000 f874 	bl	8012f28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012e40:	4b07      	ldr	r3, [pc, #28]	; (8012e60 <vPortFree+0xc0>)
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	3301      	adds	r3, #1
 8012e46:	4a06      	ldr	r2, [pc, #24]	; (8012e60 <vPortFree+0xc0>)
 8012e48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8012e4a:	f7fe ff11 	bl	8011c70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012e4e:	bf00      	nop
 8012e50:	3718      	adds	r7, #24
 8012e52:	46bd      	mov	sp, r7
 8012e54:	bd80      	pop	{r7, pc}
 8012e56:	bf00      	nop
 8012e58:	20003cec 	.word	0x20003cec
 8012e5c:	20003cdc 	.word	0x20003cdc
 8012e60:	20003ce8 	.word	0x20003ce8

08012e64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012e64:	b480      	push	{r7}
 8012e66:	b085      	sub	sp, #20
 8012e68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012e6a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8012e6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012e70:	4b27      	ldr	r3, [pc, #156]	; (8012f10 <prvHeapInit+0xac>)
 8012e72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	f003 0307 	and.w	r3, r3, #7
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d00c      	beq.n	8012e98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	3307      	adds	r3, #7
 8012e82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	f023 0307 	bic.w	r3, r3, #7
 8012e8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012e8c:	68ba      	ldr	r2, [r7, #8]
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	1ad3      	subs	r3, r2, r3
 8012e92:	4a1f      	ldr	r2, [pc, #124]	; (8012f10 <prvHeapInit+0xac>)
 8012e94:	4413      	add	r3, r2
 8012e96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012e9c:	4a1d      	ldr	r2, [pc, #116]	; (8012f14 <prvHeapInit+0xb0>)
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012ea2:	4b1c      	ldr	r3, [pc, #112]	; (8012f14 <prvHeapInit+0xb0>)
 8012ea4:	2200      	movs	r2, #0
 8012ea6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	68ba      	ldr	r2, [r7, #8]
 8012eac:	4413      	add	r3, r2
 8012eae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012eb0:	2208      	movs	r2, #8
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	1a9b      	subs	r3, r3, r2
 8012eb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	f023 0307 	bic.w	r3, r3, #7
 8012ebe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	4a15      	ldr	r2, [pc, #84]	; (8012f18 <prvHeapInit+0xb4>)
 8012ec4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012ec6:	4b14      	ldr	r3, [pc, #80]	; (8012f18 <prvHeapInit+0xb4>)
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	2200      	movs	r2, #0
 8012ecc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012ece:	4b12      	ldr	r3, [pc, #72]	; (8012f18 <prvHeapInit+0xb4>)
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	2200      	movs	r2, #0
 8012ed4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012eda:	683b      	ldr	r3, [r7, #0]
 8012edc:	68fa      	ldr	r2, [r7, #12]
 8012ede:	1ad2      	subs	r2, r2, r3
 8012ee0:	683b      	ldr	r3, [r7, #0]
 8012ee2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012ee4:	4b0c      	ldr	r3, [pc, #48]	; (8012f18 <prvHeapInit+0xb4>)
 8012ee6:	681a      	ldr	r2, [r3, #0]
 8012ee8:	683b      	ldr	r3, [r7, #0]
 8012eea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012eec:	683b      	ldr	r3, [r7, #0]
 8012eee:	685b      	ldr	r3, [r3, #4]
 8012ef0:	4a0a      	ldr	r2, [pc, #40]	; (8012f1c <prvHeapInit+0xb8>)
 8012ef2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012ef4:	683b      	ldr	r3, [r7, #0]
 8012ef6:	685b      	ldr	r3, [r3, #4]
 8012ef8:	4a09      	ldr	r2, [pc, #36]	; (8012f20 <prvHeapInit+0xbc>)
 8012efa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012efc:	4b09      	ldr	r3, [pc, #36]	; (8012f24 <prvHeapInit+0xc0>)
 8012efe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012f02:	601a      	str	r2, [r3, #0]
}
 8012f04:	bf00      	nop
 8012f06:	3714      	adds	r7, #20
 8012f08:	46bd      	mov	sp, r7
 8012f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f0e:	4770      	bx	lr
 8012f10:	20000cd0 	.word	0x20000cd0
 8012f14:	20003cd0 	.word	0x20003cd0
 8012f18:	20003cd8 	.word	0x20003cd8
 8012f1c:	20003ce0 	.word	0x20003ce0
 8012f20:	20003cdc 	.word	0x20003cdc
 8012f24:	20003cec 	.word	0x20003cec

08012f28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012f28:	b480      	push	{r7}
 8012f2a:	b085      	sub	sp, #20
 8012f2c:	af00      	add	r7, sp, #0
 8012f2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012f30:	4b28      	ldr	r3, [pc, #160]	; (8012fd4 <prvInsertBlockIntoFreeList+0xac>)
 8012f32:	60fb      	str	r3, [r7, #12]
 8012f34:	e002      	b.n	8012f3c <prvInsertBlockIntoFreeList+0x14>
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	60fb      	str	r3, [r7, #12]
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	687a      	ldr	r2, [r7, #4]
 8012f42:	429a      	cmp	r2, r3
 8012f44:	d8f7      	bhi.n	8012f36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	685b      	ldr	r3, [r3, #4]
 8012f4e:	68ba      	ldr	r2, [r7, #8]
 8012f50:	4413      	add	r3, r2
 8012f52:	687a      	ldr	r2, [r7, #4]
 8012f54:	429a      	cmp	r2, r3
 8012f56:	d108      	bne.n	8012f6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	685a      	ldr	r2, [r3, #4]
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	685b      	ldr	r3, [r3, #4]
 8012f60:	441a      	add	r2, r3
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	685b      	ldr	r3, [r3, #4]
 8012f72:	68ba      	ldr	r2, [r7, #8]
 8012f74:	441a      	add	r2, r3
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	429a      	cmp	r2, r3
 8012f7c:	d118      	bne.n	8012fb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	681a      	ldr	r2, [r3, #0]
 8012f82:	4b15      	ldr	r3, [pc, #84]	; (8012fd8 <prvInsertBlockIntoFreeList+0xb0>)
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	429a      	cmp	r2, r3
 8012f88:	d00d      	beq.n	8012fa6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	685a      	ldr	r2, [r3, #4]
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	685b      	ldr	r3, [r3, #4]
 8012f94:	441a      	add	r2, r3
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	681a      	ldr	r2, [r3, #0]
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	601a      	str	r2, [r3, #0]
 8012fa4:	e008      	b.n	8012fb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012fa6:	4b0c      	ldr	r3, [pc, #48]	; (8012fd8 <prvInsertBlockIntoFreeList+0xb0>)
 8012fa8:	681a      	ldr	r2, [r3, #0]
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	601a      	str	r2, [r3, #0]
 8012fae:	e003      	b.n	8012fb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	681a      	ldr	r2, [r3, #0]
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012fb8:	68fa      	ldr	r2, [r7, #12]
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	429a      	cmp	r2, r3
 8012fbe:	d002      	beq.n	8012fc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	687a      	ldr	r2, [r7, #4]
 8012fc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012fc6:	bf00      	nop
 8012fc8:	3714      	adds	r7, #20
 8012fca:	46bd      	mov	sp, r7
 8012fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fd0:	4770      	bx	lr
 8012fd2:	bf00      	nop
 8012fd4:	20003cd0 	.word	0x20003cd0
 8012fd8:	20003cd8 	.word	0x20003cd8

08012fdc <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8012fdc:	b580      	push	{r7, lr}
 8012fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8012fe0:	2200      	movs	r2, #0
 8012fe2:	4912      	ldr	r1, [pc, #72]	; (801302c <MX_USB_Device_Init+0x50>)
 8012fe4:	4812      	ldr	r0, [pc, #72]	; (8013030 <MX_USB_Device_Init+0x54>)
 8012fe6:	f7fc fdc1 	bl	800fb6c <USBD_Init>
 8012fea:	4603      	mov	r3, r0
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d001      	beq.n	8012ff4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8012ff0:	f7f0 f8a2 	bl	8003138 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8012ff4:	490f      	ldr	r1, [pc, #60]	; (8013034 <MX_USB_Device_Init+0x58>)
 8012ff6:	480e      	ldr	r0, [pc, #56]	; (8013030 <MX_USB_Device_Init+0x54>)
 8012ff8:	f7fc fde8 	bl	800fbcc <USBD_RegisterClass>
 8012ffc:	4603      	mov	r3, r0
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d001      	beq.n	8013006 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8013002:	f7f0 f899 	bl	8003138 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8013006:	490c      	ldr	r1, [pc, #48]	; (8013038 <MX_USB_Device_Init+0x5c>)
 8013008:	4809      	ldr	r0, [pc, #36]	; (8013030 <MX_USB_Device_Init+0x54>)
 801300a:	f7fc fd39 	bl	800fa80 <USBD_CDC_RegisterInterface>
 801300e:	4603      	mov	r3, r0
 8013010:	2b00      	cmp	r3, #0
 8013012:	d001      	beq.n	8013018 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8013014:	f7f0 f890 	bl	8003138 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8013018:	4805      	ldr	r0, [pc, #20]	; (8013030 <MX_USB_Device_Init+0x54>)
 801301a:	f7fc fdfe 	bl	800fc1a <USBD_Start>
 801301e:	4603      	mov	r3, r0
 8013020:	2b00      	cmp	r3, #0
 8013022:	d001      	beq.n	8013028 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8013024:	f7f0 f888 	bl	8003138 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8013028:	bf00      	nop
 801302a:	bd80      	pop	{r7, pc}
 801302c:	20000138 	.word	0x20000138
 8013030:	20003cf0 	.word	0x20003cf0
 8013034:	2000001c 	.word	0x2000001c
 8013038:	20000124 	.word	0x20000124

0801303c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801303c:	b580      	push	{r7, lr}
 801303e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8013040:	2200      	movs	r2, #0
 8013042:	4905      	ldr	r1, [pc, #20]	; (8013058 <CDC_Init_FS+0x1c>)
 8013044:	4805      	ldr	r0, [pc, #20]	; (801305c <CDC_Init_FS+0x20>)
 8013046:	f7fc fd30 	bl	800faaa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801304a:	4905      	ldr	r1, [pc, #20]	; (8013060 <CDC_Init_FS+0x24>)
 801304c:	4803      	ldr	r0, [pc, #12]	; (801305c <CDC_Init_FS+0x20>)
 801304e:	f7fc fd4a 	bl	800fae6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8013052:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8013054:	4618      	mov	r0, r3
 8013056:	bd80      	pop	{r7, pc}
 8013058:	200047c0 	.word	0x200047c0
 801305c:	20003cf0 	.word	0x20003cf0
 8013060:	20003fc0 	.word	0x20003fc0

08013064 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8013064:	b480      	push	{r7}
 8013066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8013068:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801306a:	4618      	mov	r0, r3
 801306c:	46bd      	mov	sp, r7
 801306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013072:	4770      	bx	lr

08013074 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8013074:	b480      	push	{r7}
 8013076:	b083      	sub	sp, #12
 8013078:	af00      	add	r7, sp, #0
 801307a:	4603      	mov	r3, r0
 801307c:	6039      	str	r1, [r7, #0]
 801307e:	71fb      	strb	r3, [r7, #7]
 8013080:	4613      	mov	r3, r2
 8013082:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8013084:	79fb      	ldrb	r3, [r7, #7]
 8013086:	2b23      	cmp	r3, #35	; 0x23
 8013088:	d84a      	bhi.n	8013120 <CDC_Control_FS+0xac>
 801308a:	a201      	add	r2, pc, #4	; (adr r2, 8013090 <CDC_Control_FS+0x1c>)
 801308c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013090:	08013121 	.word	0x08013121
 8013094:	08013121 	.word	0x08013121
 8013098:	08013121 	.word	0x08013121
 801309c:	08013121 	.word	0x08013121
 80130a0:	08013121 	.word	0x08013121
 80130a4:	08013121 	.word	0x08013121
 80130a8:	08013121 	.word	0x08013121
 80130ac:	08013121 	.word	0x08013121
 80130b0:	08013121 	.word	0x08013121
 80130b4:	08013121 	.word	0x08013121
 80130b8:	08013121 	.word	0x08013121
 80130bc:	08013121 	.word	0x08013121
 80130c0:	08013121 	.word	0x08013121
 80130c4:	08013121 	.word	0x08013121
 80130c8:	08013121 	.word	0x08013121
 80130cc:	08013121 	.word	0x08013121
 80130d0:	08013121 	.word	0x08013121
 80130d4:	08013121 	.word	0x08013121
 80130d8:	08013121 	.word	0x08013121
 80130dc:	08013121 	.word	0x08013121
 80130e0:	08013121 	.word	0x08013121
 80130e4:	08013121 	.word	0x08013121
 80130e8:	08013121 	.word	0x08013121
 80130ec:	08013121 	.word	0x08013121
 80130f0:	08013121 	.word	0x08013121
 80130f4:	08013121 	.word	0x08013121
 80130f8:	08013121 	.word	0x08013121
 80130fc:	08013121 	.word	0x08013121
 8013100:	08013121 	.word	0x08013121
 8013104:	08013121 	.word	0x08013121
 8013108:	08013121 	.word	0x08013121
 801310c:	08013121 	.word	0x08013121
 8013110:	08013121 	.word	0x08013121
 8013114:	08013121 	.word	0x08013121
 8013118:	08013121 	.word	0x08013121
 801311c:	08013121 	.word	0x08013121
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8013120:	bf00      	nop
  }

  return (USBD_OK);
 8013122:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8013124:	4618      	mov	r0, r3
 8013126:	370c      	adds	r7, #12
 8013128:	46bd      	mov	sp, r7
 801312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801312e:	4770      	bx	lr

08013130 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8013130:	b580      	push	{r7, lr}
 8013132:	b082      	sub	sp, #8
 8013134:	af00      	add	r7, sp, #0
 8013136:	6078      	str	r0, [r7, #4]
 8013138:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801313a:	6879      	ldr	r1, [r7, #4]
 801313c:	4805      	ldr	r0, [pc, #20]	; (8013154 <CDC_Receive_FS+0x24>)
 801313e:	f7fc fcd2 	bl	800fae6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8013142:	4804      	ldr	r0, [pc, #16]	; (8013154 <CDC_Receive_FS+0x24>)
 8013144:	f7fc fce8 	bl	800fb18 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8013148:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801314a:	4618      	mov	r0, r3
 801314c:	3708      	adds	r7, #8
 801314e:	46bd      	mov	sp, r7
 8013150:	bd80      	pop	{r7, pc}
 8013152:	bf00      	nop
 8013154:	20003cf0 	.word	0x20003cf0

08013158 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8013158:	b480      	push	{r7}
 801315a:	b087      	sub	sp, #28
 801315c:	af00      	add	r7, sp, #0
 801315e:	60f8      	str	r0, [r7, #12]
 8013160:	60b9      	str	r1, [r7, #8]
 8013162:	4613      	mov	r3, r2
 8013164:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8013166:	2300      	movs	r3, #0
 8013168:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801316a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801316e:	4618      	mov	r0, r3
 8013170:	371c      	adds	r7, #28
 8013172:	46bd      	mov	sp, r7
 8013174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013178:	4770      	bx	lr
	...

0801317c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801317c:	b480      	push	{r7}
 801317e:	b083      	sub	sp, #12
 8013180:	af00      	add	r7, sp, #0
 8013182:	4603      	mov	r3, r0
 8013184:	6039      	str	r1, [r7, #0]
 8013186:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8013188:	683b      	ldr	r3, [r7, #0]
 801318a:	2212      	movs	r2, #18
 801318c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 801318e:	4b03      	ldr	r3, [pc, #12]	; (801319c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8013190:	4618      	mov	r0, r3
 8013192:	370c      	adds	r7, #12
 8013194:	46bd      	mov	sp, r7
 8013196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801319a:	4770      	bx	lr
 801319c:	20000158 	.word	0x20000158

080131a0 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80131a0:	b480      	push	{r7}
 80131a2:	b083      	sub	sp, #12
 80131a4:	af00      	add	r7, sp, #0
 80131a6:	4603      	mov	r3, r0
 80131a8:	6039      	str	r1, [r7, #0]
 80131aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80131ac:	683b      	ldr	r3, [r7, #0]
 80131ae:	2204      	movs	r2, #4
 80131b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80131b2:	4b03      	ldr	r3, [pc, #12]	; (80131c0 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80131b4:	4618      	mov	r0, r3
 80131b6:	370c      	adds	r7, #12
 80131b8:	46bd      	mov	sp, r7
 80131ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131be:	4770      	bx	lr
 80131c0:	2000016c 	.word	0x2000016c

080131c4 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80131c4:	b580      	push	{r7, lr}
 80131c6:	b082      	sub	sp, #8
 80131c8:	af00      	add	r7, sp, #0
 80131ca:	4603      	mov	r3, r0
 80131cc:	6039      	str	r1, [r7, #0]
 80131ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80131d0:	79fb      	ldrb	r3, [r7, #7]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d105      	bne.n	80131e2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80131d6:	683a      	ldr	r2, [r7, #0]
 80131d8:	4907      	ldr	r1, [pc, #28]	; (80131f8 <USBD_CDC_ProductStrDescriptor+0x34>)
 80131da:	4808      	ldr	r0, [pc, #32]	; (80131fc <USBD_CDC_ProductStrDescriptor+0x38>)
 80131dc:	f7fd fd05 	bl	8010bea <USBD_GetString>
 80131e0:	e004      	b.n	80131ec <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80131e2:	683a      	ldr	r2, [r7, #0]
 80131e4:	4904      	ldr	r1, [pc, #16]	; (80131f8 <USBD_CDC_ProductStrDescriptor+0x34>)
 80131e6:	4805      	ldr	r0, [pc, #20]	; (80131fc <USBD_CDC_ProductStrDescriptor+0x38>)
 80131e8:	f7fd fcff 	bl	8010bea <USBD_GetString>
  }
  return USBD_StrDesc;
 80131ec:	4b02      	ldr	r3, [pc, #8]	; (80131f8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80131ee:	4618      	mov	r0, r3
 80131f0:	3708      	adds	r7, #8
 80131f2:	46bd      	mov	sp, r7
 80131f4:	bd80      	pop	{r7, pc}
 80131f6:	bf00      	nop
 80131f8:	20004fc0 	.word	0x20004fc0
 80131fc:	08014bac 	.word	0x08014bac

08013200 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013200:	b580      	push	{r7, lr}
 8013202:	b082      	sub	sp, #8
 8013204:	af00      	add	r7, sp, #0
 8013206:	4603      	mov	r3, r0
 8013208:	6039      	str	r1, [r7, #0]
 801320a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801320c:	683a      	ldr	r2, [r7, #0]
 801320e:	4904      	ldr	r1, [pc, #16]	; (8013220 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8013210:	4804      	ldr	r0, [pc, #16]	; (8013224 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8013212:	f7fd fcea 	bl	8010bea <USBD_GetString>
  return USBD_StrDesc;
 8013216:	4b02      	ldr	r3, [pc, #8]	; (8013220 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8013218:	4618      	mov	r0, r3
 801321a:	3708      	adds	r7, #8
 801321c:	46bd      	mov	sp, r7
 801321e:	bd80      	pop	{r7, pc}
 8013220:	20004fc0 	.word	0x20004fc0
 8013224:	08014bc4 	.word	0x08014bc4

08013228 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013228:	b580      	push	{r7, lr}
 801322a:	b082      	sub	sp, #8
 801322c:	af00      	add	r7, sp, #0
 801322e:	4603      	mov	r3, r0
 8013230:	6039      	str	r1, [r7, #0]
 8013232:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8013234:	683b      	ldr	r3, [r7, #0]
 8013236:	221a      	movs	r2, #26
 8013238:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801323a:	f000 f843 	bl	80132c4 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801323e:	4b02      	ldr	r3, [pc, #8]	; (8013248 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8013240:	4618      	mov	r0, r3
 8013242:	3708      	adds	r7, #8
 8013244:	46bd      	mov	sp, r7
 8013246:	bd80      	pop	{r7, pc}
 8013248:	20000170 	.word	0x20000170

0801324c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801324c:	b580      	push	{r7, lr}
 801324e:	b082      	sub	sp, #8
 8013250:	af00      	add	r7, sp, #0
 8013252:	4603      	mov	r3, r0
 8013254:	6039      	str	r1, [r7, #0]
 8013256:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8013258:	79fb      	ldrb	r3, [r7, #7]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d105      	bne.n	801326a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801325e:	683a      	ldr	r2, [r7, #0]
 8013260:	4907      	ldr	r1, [pc, #28]	; (8013280 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8013262:	4808      	ldr	r0, [pc, #32]	; (8013284 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8013264:	f7fd fcc1 	bl	8010bea <USBD_GetString>
 8013268:	e004      	b.n	8013274 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801326a:	683a      	ldr	r2, [r7, #0]
 801326c:	4904      	ldr	r1, [pc, #16]	; (8013280 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801326e:	4805      	ldr	r0, [pc, #20]	; (8013284 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8013270:	f7fd fcbb 	bl	8010bea <USBD_GetString>
  }
  return USBD_StrDesc;
 8013274:	4b02      	ldr	r3, [pc, #8]	; (8013280 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8013276:	4618      	mov	r0, r3
 8013278:	3708      	adds	r7, #8
 801327a:	46bd      	mov	sp, r7
 801327c:	bd80      	pop	{r7, pc}
 801327e:	bf00      	nop
 8013280:	20004fc0 	.word	0x20004fc0
 8013284:	08014bd8 	.word	0x08014bd8

08013288 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013288:	b580      	push	{r7, lr}
 801328a:	b082      	sub	sp, #8
 801328c:	af00      	add	r7, sp, #0
 801328e:	4603      	mov	r3, r0
 8013290:	6039      	str	r1, [r7, #0]
 8013292:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013294:	79fb      	ldrb	r3, [r7, #7]
 8013296:	2b00      	cmp	r3, #0
 8013298:	d105      	bne.n	80132a6 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801329a:	683a      	ldr	r2, [r7, #0]
 801329c:	4907      	ldr	r1, [pc, #28]	; (80132bc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801329e:	4808      	ldr	r0, [pc, #32]	; (80132c0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80132a0:	f7fd fca3 	bl	8010bea <USBD_GetString>
 80132a4:	e004      	b.n	80132b0 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80132a6:	683a      	ldr	r2, [r7, #0]
 80132a8:	4904      	ldr	r1, [pc, #16]	; (80132bc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80132aa:	4805      	ldr	r0, [pc, #20]	; (80132c0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80132ac:	f7fd fc9d 	bl	8010bea <USBD_GetString>
  }
  return USBD_StrDesc;
 80132b0:	4b02      	ldr	r3, [pc, #8]	; (80132bc <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80132b2:	4618      	mov	r0, r3
 80132b4:	3708      	adds	r7, #8
 80132b6:	46bd      	mov	sp, r7
 80132b8:	bd80      	pop	{r7, pc}
 80132ba:	bf00      	nop
 80132bc:	20004fc0 	.word	0x20004fc0
 80132c0:	08014be4 	.word	0x08014be4

080132c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80132c4:	b580      	push	{r7, lr}
 80132c6:	b084      	sub	sp, #16
 80132c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80132ca:	4b0f      	ldr	r3, [pc, #60]	; (8013308 <Get_SerialNum+0x44>)
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80132d0:	4b0e      	ldr	r3, [pc, #56]	; (801330c <Get_SerialNum+0x48>)
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80132d6:	4b0e      	ldr	r3, [pc, #56]	; (8013310 <Get_SerialNum+0x4c>)
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80132dc:	68fa      	ldr	r2, [r7, #12]
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	4413      	add	r3, r2
 80132e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d009      	beq.n	80132fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80132ea:	2208      	movs	r2, #8
 80132ec:	4909      	ldr	r1, [pc, #36]	; (8013314 <Get_SerialNum+0x50>)
 80132ee:	68f8      	ldr	r0, [r7, #12]
 80132f0:	f000 f814 	bl	801331c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80132f4:	2204      	movs	r2, #4
 80132f6:	4908      	ldr	r1, [pc, #32]	; (8013318 <Get_SerialNum+0x54>)
 80132f8:	68b8      	ldr	r0, [r7, #8]
 80132fa:	f000 f80f 	bl	801331c <IntToUnicode>
  }
}
 80132fe:	bf00      	nop
 8013300:	3710      	adds	r7, #16
 8013302:	46bd      	mov	sp, r7
 8013304:	bd80      	pop	{r7, pc}
 8013306:	bf00      	nop
 8013308:	1fff7590 	.word	0x1fff7590
 801330c:	1fff7594 	.word	0x1fff7594
 8013310:	1fff7598 	.word	0x1fff7598
 8013314:	20000172 	.word	0x20000172
 8013318:	20000182 	.word	0x20000182

0801331c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801331c:	b480      	push	{r7}
 801331e:	b087      	sub	sp, #28
 8013320:	af00      	add	r7, sp, #0
 8013322:	60f8      	str	r0, [r7, #12]
 8013324:	60b9      	str	r1, [r7, #8]
 8013326:	4613      	mov	r3, r2
 8013328:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801332a:	2300      	movs	r3, #0
 801332c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801332e:	2300      	movs	r3, #0
 8013330:	75fb      	strb	r3, [r7, #23]
 8013332:	e027      	b.n	8013384 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	0f1b      	lsrs	r3, r3, #28
 8013338:	2b09      	cmp	r3, #9
 801333a:	d80b      	bhi.n	8013354 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	0f1b      	lsrs	r3, r3, #28
 8013340:	b2da      	uxtb	r2, r3
 8013342:	7dfb      	ldrb	r3, [r7, #23]
 8013344:	005b      	lsls	r3, r3, #1
 8013346:	4619      	mov	r1, r3
 8013348:	68bb      	ldr	r3, [r7, #8]
 801334a:	440b      	add	r3, r1
 801334c:	3230      	adds	r2, #48	; 0x30
 801334e:	b2d2      	uxtb	r2, r2
 8013350:	701a      	strb	r2, [r3, #0]
 8013352:	e00a      	b.n	801336a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	0f1b      	lsrs	r3, r3, #28
 8013358:	b2da      	uxtb	r2, r3
 801335a:	7dfb      	ldrb	r3, [r7, #23]
 801335c:	005b      	lsls	r3, r3, #1
 801335e:	4619      	mov	r1, r3
 8013360:	68bb      	ldr	r3, [r7, #8]
 8013362:	440b      	add	r3, r1
 8013364:	3237      	adds	r2, #55	; 0x37
 8013366:	b2d2      	uxtb	r2, r2
 8013368:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	011b      	lsls	r3, r3, #4
 801336e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8013370:	7dfb      	ldrb	r3, [r7, #23]
 8013372:	005b      	lsls	r3, r3, #1
 8013374:	3301      	adds	r3, #1
 8013376:	68ba      	ldr	r2, [r7, #8]
 8013378:	4413      	add	r3, r2
 801337a:	2200      	movs	r2, #0
 801337c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801337e:	7dfb      	ldrb	r3, [r7, #23]
 8013380:	3301      	adds	r3, #1
 8013382:	75fb      	strb	r3, [r7, #23]
 8013384:	7dfa      	ldrb	r2, [r7, #23]
 8013386:	79fb      	ldrb	r3, [r7, #7]
 8013388:	429a      	cmp	r2, r3
 801338a:	d3d3      	bcc.n	8013334 <IntToUnicode+0x18>
  }
}
 801338c:	bf00      	nop
 801338e:	bf00      	nop
 8013390:	371c      	adds	r7, #28
 8013392:	46bd      	mov	sp, r7
 8013394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013398:	4770      	bx	lr
	...

0801339c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801339c:	b580      	push	{r7, lr}
 801339e:	b098      	sub	sp, #96	; 0x60
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80133a4:	f107 030c 	add.w	r3, r7, #12
 80133a8:	2254      	movs	r2, #84	; 0x54
 80133aa:	2100      	movs	r1, #0
 80133ac:	4618      	mov	r0, r3
 80133ae:	f000 fb19 	bl	80139e4 <memset>
  if(pcdHandle->Instance==USB)
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	681b      	ldr	r3, [r3, #0]
 80133b6:	4a15      	ldr	r2, [pc, #84]	; (801340c <HAL_PCD_MspInit+0x70>)
 80133b8:	4293      	cmp	r3, r2
 80133ba:	d122      	bne.n	8013402 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80133bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80133c0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80133c2:	2300      	movs	r3, #0
 80133c4:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80133c6:	f107 030c 	add.w	r3, r7, #12
 80133ca:	4618      	mov	r0, r3
 80133cc:	f7f5 ffe6 	bl	800939c <HAL_RCCEx_PeriphCLKConfig>
 80133d0:	4603      	mov	r3, r0
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d001      	beq.n	80133da <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 80133d6:	f7ef feaf 	bl	8003138 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80133da:	4b0d      	ldr	r3, [pc, #52]	; (8013410 <HAL_PCD_MspInit+0x74>)
 80133dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80133de:	4a0c      	ldr	r2, [pc, #48]	; (8013410 <HAL_PCD_MspInit+0x74>)
 80133e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80133e4:	6593      	str	r3, [r2, #88]	; 0x58
 80133e6:	4b0a      	ldr	r3, [pc, #40]	; (8013410 <HAL_PCD_MspInit+0x74>)
 80133e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80133ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80133ee:	60bb      	str	r3, [r7, #8]
 80133f0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 80133f2:	2200      	movs	r2, #0
 80133f4:	2105      	movs	r1, #5
 80133f6:	2014      	movs	r0, #20
 80133f8:	f7f2 f968 	bl	80056cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80133fc:	2014      	movs	r0, #20
 80133fe:	f7f2 f97f 	bl	8005700 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8013402:	bf00      	nop
 8013404:	3760      	adds	r7, #96	; 0x60
 8013406:	46bd      	mov	sp, r7
 8013408:	bd80      	pop	{r7, pc}
 801340a:	bf00      	nop
 801340c:	40005c00 	.word	0x40005c00
 8013410:	40021000 	.word	0x40021000

08013414 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013414:	b580      	push	{r7, lr}
 8013416:	b082      	sub	sp, #8
 8013418:	af00      	add	r7, sp, #0
 801341a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8013428:	4619      	mov	r1, r3
 801342a:	4610      	mov	r0, r2
 801342c:	f7fc fc40 	bl	800fcb0 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8013430:	bf00      	nop
 8013432:	3708      	adds	r7, #8
 8013434:	46bd      	mov	sp, r7
 8013436:	bd80      	pop	{r7, pc}

08013438 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013438:	b580      	push	{r7, lr}
 801343a:	b082      	sub	sp, #8
 801343c:	af00      	add	r7, sp, #0
 801343e:	6078      	str	r0, [r7, #4]
 8013440:	460b      	mov	r3, r1
 8013442:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 801344a:	78fa      	ldrb	r2, [r7, #3]
 801344c:	6879      	ldr	r1, [r7, #4]
 801344e:	4613      	mov	r3, r2
 8013450:	009b      	lsls	r3, r3, #2
 8013452:	4413      	add	r3, r2
 8013454:	00db      	lsls	r3, r3, #3
 8013456:	440b      	add	r3, r1
 8013458:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 801345c:	681a      	ldr	r2, [r3, #0]
 801345e:	78fb      	ldrb	r3, [r7, #3]
 8013460:	4619      	mov	r1, r3
 8013462:	f7fc fc7a 	bl	800fd5a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8013466:	bf00      	nop
 8013468:	3708      	adds	r7, #8
 801346a:	46bd      	mov	sp, r7
 801346c:	bd80      	pop	{r7, pc}

0801346e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801346e:	b580      	push	{r7, lr}
 8013470:	b082      	sub	sp, #8
 8013472:	af00      	add	r7, sp, #0
 8013474:	6078      	str	r0, [r7, #4]
 8013476:	460b      	mov	r3, r1
 8013478:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8013480:	78fa      	ldrb	r2, [r7, #3]
 8013482:	6879      	ldr	r1, [r7, #4]
 8013484:	4613      	mov	r3, r2
 8013486:	009b      	lsls	r3, r3, #2
 8013488:	4413      	add	r3, r2
 801348a:	00db      	lsls	r3, r3, #3
 801348c:	440b      	add	r3, r1
 801348e:	333c      	adds	r3, #60	; 0x3c
 8013490:	681a      	ldr	r2, [r3, #0]
 8013492:	78fb      	ldrb	r3, [r7, #3]
 8013494:	4619      	mov	r1, r3
 8013496:	f7fc fcc3 	bl	800fe20 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 801349a:	bf00      	nop
 801349c:	3708      	adds	r7, #8
 801349e:	46bd      	mov	sp, r7
 80134a0:	bd80      	pop	{r7, pc}

080134a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80134a2:	b580      	push	{r7, lr}
 80134a4:	b082      	sub	sp, #8
 80134a6:	af00      	add	r7, sp, #0
 80134a8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80134b0:	4618      	mov	r0, r3
 80134b2:	f7fc fdd7 	bl	8010064 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80134b6:	bf00      	nop
 80134b8:	3708      	adds	r7, #8
 80134ba:	46bd      	mov	sp, r7
 80134bc:	bd80      	pop	{r7, pc}

080134be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80134be:	b580      	push	{r7, lr}
 80134c0:	b084      	sub	sp, #16
 80134c2:	af00      	add	r7, sp, #0
 80134c4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80134c6:	2301      	movs	r3, #1
 80134c8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	689b      	ldr	r3, [r3, #8]
 80134ce:	2b02      	cmp	r3, #2
 80134d0:	d001      	beq.n	80134d6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80134d2:	f7ef fe31 	bl	8003138 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80134dc:	7bfa      	ldrb	r2, [r7, #15]
 80134de:	4611      	mov	r1, r2
 80134e0:	4618      	mov	r0, r3
 80134e2:	f7fc fd81 	bl	800ffe8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80134ec:	4618      	mov	r0, r3
 80134ee:	f7fc fd2d 	bl	800ff4c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80134f2:	bf00      	nop
 80134f4:	3710      	adds	r7, #16
 80134f6:	46bd      	mov	sp, r7
 80134f8:	bd80      	pop	{r7, pc}
	...

080134fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80134fc:	b580      	push	{r7, lr}
 80134fe:	b082      	sub	sp, #8
 8013500:	af00      	add	r7, sp, #0
 8013502:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801350a:	4618      	mov	r0, r3
 801350c:	f7fc fd7c 	bl	8010008 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	699b      	ldr	r3, [r3, #24]
 8013514:	2b00      	cmp	r3, #0
 8013516:	d005      	beq.n	8013524 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013518:	4b04      	ldr	r3, [pc, #16]	; (801352c <HAL_PCD_SuspendCallback+0x30>)
 801351a:	691b      	ldr	r3, [r3, #16]
 801351c:	4a03      	ldr	r2, [pc, #12]	; (801352c <HAL_PCD_SuspendCallback+0x30>)
 801351e:	f043 0306 	orr.w	r3, r3, #6
 8013522:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8013524:	bf00      	nop
 8013526:	3708      	adds	r7, #8
 8013528:	46bd      	mov	sp, r7
 801352a:	bd80      	pop	{r7, pc}
 801352c:	e000ed00 	.word	0xe000ed00

08013530 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013530:	b580      	push	{r7, lr}
 8013532:	b082      	sub	sp, #8
 8013534:	af00      	add	r7, sp, #0
 8013536:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	699b      	ldr	r3, [r3, #24]
 801353c:	2b00      	cmp	r3, #0
 801353e:	d007      	beq.n	8013550 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013540:	4b08      	ldr	r3, [pc, #32]	; (8013564 <HAL_PCD_ResumeCallback+0x34>)
 8013542:	691b      	ldr	r3, [r3, #16]
 8013544:	4a07      	ldr	r2, [pc, #28]	; (8013564 <HAL_PCD_ResumeCallback+0x34>)
 8013546:	f023 0306 	bic.w	r3, r3, #6
 801354a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 801354c:	f000 f9fa 	bl	8013944 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8013556:	4618      	mov	r0, r3
 8013558:	f7fc fd6c 	bl	8010034 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 801355c:	bf00      	nop
 801355e:	3708      	adds	r7, #8
 8013560:	46bd      	mov	sp, r7
 8013562:	bd80      	pop	{r7, pc}
 8013564:	e000ed00 	.word	0xe000ed00

08013568 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8013568:	b580      	push	{r7, lr}
 801356a:	b082      	sub	sp, #8
 801356c:	af00      	add	r7, sp, #0
 801356e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8013570:	4a2b      	ldr	r2, [pc, #172]	; (8013620 <USBD_LL_Init+0xb8>)
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	4a29      	ldr	r2, [pc, #164]	; (8013620 <USBD_LL_Init+0xb8>)
 801357c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8013580:	4b27      	ldr	r3, [pc, #156]	; (8013620 <USBD_LL_Init+0xb8>)
 8013582:	4a28      	ldr	r2, [pc, #160]	; (8013624 <USBD_LL_Init+0xbc>)
 8013584:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8013586:	4b26      	ldr	r3, [pc, #152]	; (8013620 <USBD_LL_Init+0xb8>)
 8013588:	2208      	movs	r2, #8
 801358a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801358c:	4b24      	ldr	r3, [pc, #144]	; (8013620 <USBD_LL_Init+0xb8>)
 801358e:	2202      	movs	r2, #2
 8013590:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8013592:	4b23      	ldr	r3, [pc, #140]	; (8013620 <USBD_LL_Init+0xb8>)
 8013594:	2202      	movs	r2, #2
 8013596:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8013598:	4b21      	ldr	r3, [pc, #132]	; (8013620 <USBD_LL_Init+0xb8>)
 801359a:	2200      	movs	r2, #0
 801359c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801359e:	4b20      	ldr	r3, [pc, #128]	; (8013620 <USBD_LL_Init+0xb8>)
 80135a0:	2200      	movs	r2, #0
 80135a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80135a4:	4b1e      	ldr	r3, [pc, #120]	; (8013620 <USBD_LL_Init+0xb8>)
 80135a6:	2200      	movs	r2, #0
 80135a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80135aa:	4b1d      	ldr	r3, [pc, #116]	; (8013620 <USBD_LL_Init+0xb8>)
 80135ac:	2200      	movs	r2, #0
 80135ae:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80135b0:	481b      	ldr	r0, [pc, #108]	; (8013620 <USBD_LL_Init+0xb8>)
 80135b2:	f7f3 fbb6 	bl	8006d22 <HAL_PCD_Init>
 80135b6:	4603      	mov	r3, r0
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d001      	beq.n	80135c0 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 80135bc:	f7ef fdbc 	bl	8003138 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80135c6:	2318      	movs	r3, #24
 80135c8:	2200      	movs	r2, #0
 80135ca:	2100      	movs	r1, #0
 80135cc:	f7f5 f86f 	bl	80086ae <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80135d6:	2358      	movs	r3, #88	; 0x58
 80135d8:	2200      	movs	r2, #0
 80135da:	2180      	movs	r1, #128	; 0x80
 80135dc:	f7f5 f867 	bl	80086ae <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80135e6:	23c0      	movs	r3, #192	; 0xc0
 80135e8:	2200      	movs	r2, #0
 80135ea:	2181      	movs	r1, #129	; 0x81
 80135ec:	f7f5 f85f 	bl	80086ae <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80135f6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80135fa:	2200      	movs	r2, #0
 80135fc:	2101      	movs	r1, #1
 80135fe:	f7f5 f856 	bl	80086ae <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013608:	f44f 7380 	mov.w	r3, #256	; 0x100
 801360c:	2200      	movs	r2, #0
 801360e:	2182      	movs	r1, #130	; 0x82
 8013610:	f7f5 f84d 	bl	80086ae <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8013614:	2300      	movs	r3, #0
}
 8013616:	4618      	mov	r0, r3
 8013618:	3708      	adds	r7, #8
 801361a:	46bd      	mov	sp, r7
 801361c:	bd80      	pop	{r7, pc}
 801361e:	bf00      	nop
 8013620:	200051c0 	.word	0x200051c0
 8013624:	40005c00 	.word	0x40005c00

08013628 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013628:	b580      	push	{r7, lr}
 801362a:	b084      	sub	sp, #16
 801362c:	af00      	add	r7, sp, #0
 801362e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013630:	2300      	movs	r3, #0
 8013632:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013634:	2300      	movs	r3, #0
 8013636:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801363e:	4618      	mov	r0, r3
 8013640:	f7f3 fc54 	bl	8006eec <HAL_PCD_Start>
 8013644:	4603      	mov	r3, r0
 8013646:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013648:	7bfb      	ldrb	r3, [r7, #15]
 801364a:	4618      	mov	r0, r3
 801364c:	f000 f980 	bl	8013950 <USBD_Get_USB_Status>
 8013650:	4603      	mov	r3, r0
 8013652:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013654:	7bbb      	ldrb	r3, [r7, #14]
}
 8013656:	4618      	mov	r0, r3
 8013658:	3710      	adds	r7, #16
 801365a:	46bd      	mov	sp, r7
 801365c:	bd80      	pop	{r7, pc}

0801365e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801365e:	b580      	push	{r7, lr}
 8013660:	b084      	sub	sp, #16
 8013662:	af00      	add	r7, sp, #0
 8013664:	6078      	str	r0, [r7, #4]
 8013666:	4608      	mov	r0, r1
 8013668:	4611      	mov	r1, r2
 801366a:	461a      	mov	r2, r3
 801366c:	4603      	mov	r3, r0
 801366e:	70fb      	strb	r3, [r7, #3]
 8013670:	460b      	mov	r3, r1
 8013672:	70bb      	strb	r3, [r7, #2]
 8013674:	4613      	mov	r3, r2
 8013676:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013678:	2300      	movs	r3, #0
 801367a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801367c:	2300      	movs	r3, #0
 801367e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013686:	78bb      	ldrb	r3, [r7, #2]
 8013688:	883a      	ldrh	r2, [r7, #0]
 801368a:	78f9      	ldrb	r1, [r7, #3]
 801368c:	f7f3 fd9c 	bl	80071c8 <HAL_PCD_EP_Open>
 8013690:	4603      	mov	r3, r0
 8013692:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013694:	7bfb      	ldrb	r3, [r7, #15]
 8013696:	4618      	mov	r0, r3
 8013698:	f000 f95a 	bl	8013950 <USBD_Get_USB_Status>
 801369c:	4603      	mov	r3, r0
 801369e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80136a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80136a2:	4618      	mov	r0, r3
 80136a4:	3710      	adds	r7, #16
 80136a6:	46bd      	mov	sp, r7
 80136a8:	bd80      	pop	{r7, pc}

080136aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80136aa:	b580      	push	{r7, lr}
 80136ac:	b084      	sub	sp, #16
 80136ae:	af00      	add	r7, sp, #0
 80136b0:	6078      	str	r0, [r7, #4]
 80136b2:	460b      	mov	r3, r1
 80136b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80136b6:	2300      	movs	r3, #0
 80136b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80136ba:	2300      	movs	r3, #0
 80136bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80136c4:	78fa      	ldrb	r2, [r7, #3]
 80136c6:	4611      	mov	r1, r2
 80136c8:	4618      	mov	r0, r3
 80136ca:	f7f3 fde3 	bl	8007294 <HAL_PCD_EP_Close>
 80136ce:	4603      	mov	r3, r0
 80136d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80136d2:	7bfb      	ldrb	r3, [r7, #15]
 80136d4:	4618      	mov	r0, r3
 80136d6:	f000 f93b 	bl	8013950 <USBD_Get_USB_Status>
 80136da:	4603      	mov	r3, r0
 80136dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80136de:	7bbb      	ldrb	r3, [r7, #14]
}
 80136e0:	4618      	mov	r0, r3
 80136e2:	3710      	adds	r7, #16
 80136e4:	46bd      	mov	sp, r7
 80136e6:	bd80      	pop	{r7, pc}

080136e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80136e8:	b580      	push	{r7, lr}
 80136ea:	b084      	sub	sp, #16
 80136ec:	af00      	add	r7, sp, #0
 80136ee:	6078      	str	r0, [r7, #4]
 80136f0:	460b      	mov	r3, r1
 80136f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80136f4:	2300      	movs	r3, #0
 80136f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80136f8:	2300      	movs	r3, #0
 80136fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013702:	78fa      	ldrb	r2, [r7, #3]
 8013704:	4611      	mov	r1, r2
 8013706:	4618      	mov	r0, r3
 8013708:	f7f3 fea4 	bl	8007454 <HAL_PCD_EP_SetStall>
 801370c:	4603      	mov	r3, r0
 801370e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013710:	7bfb      	ldrb	r3, [r7, #15]
 8013712:	4618      	mov	r0, r3
 8013714:	f000 f91c 	bl	8013950 <USBD_Get_USB_Status>
 8013718:	4603      	mov	r3, r0
 801371a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801371c:	7bbb      	ldrb	r3, [r7, #14]
}
 801371e:	4618      	mov	r0, r3
 8013720:	3710      	adds	r7, #16
 8013722:	46bd      	mov	sp, r7
 8013724:	bd80      	pop	{r7, pc}

08013726 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013726:	b580      	push	{r7, lr}
 8013728:	b084      	sub	sp, #16
 801372a:	af00      	add	r7, sp, #0
 801372c:	6078      	str	r0, [r7, #4]
 801372e:	460b      	mov	r3, r1
 8013730:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013732:	2300      	movs	r3, #0
 8013734:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013736:	2300      	movs	r3, #0
 8013738:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013740:	78fa      	ldrb	r2, [r7, #3]
 8013742:	4611      	mov	r1, r2
 8013744:	4618      	mov	r0, r3
 8013746:	f7f3 fed7 	bl	80074f8 <HAL_PCD_EP_ClrStall>
 801374a:	4603      	mov	r3, r0
 801374c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801374e:	7bfb      	ldrb	r3, [r7, #15]
 8013750:	4618      	mov	r0, r3
 8013752:	f000 f8fd 	bl	8013950 <USBD_Get_USB_Status>
 8013756:	4603      	mov	r3, r0
 8013758:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801375a:	7bbb      	ldrb	r3, [r7, #14]
}
 801375c:	4618      	mov	r0, r3
 801375e:	3710      	adds	r7, #16
 8013760:	46bd      	mov	sp, r7
 8013762:	bd80      	pop	{r7, pc}

08013764 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013764:	b480      	push	{r7}
 8013766:	b085      	sub	sp, #20
 8013768:	af00      	add	r7, sp, #0
 801376a:	6078      	str	r0, [r7, #4]
 801376c:	460b      	mov	r3, r1
 801376e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013776:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013778:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801377c:	2b00      	cmp	r3, #0
 801377e:	da0c      	bge.n	801379a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013780:	78fb      	ldrb	r3, [r7, #3]
 8013782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013786:	68f9      	ldr	r1, [r7, #12]
 8013788:	1c5a      	adds	r2, r3, #1
 801378a:	4613      	mov	r3, r2
 801378c:	009b      	lsls	r3, r3, #2
 801378e:	4413      	add	r3, r2
 8013790:	00db      	lsls	r3, r3, #3
 8013792:	440b      	add	r3, r1
 8013794:	3302      	adds	r3, #2
 8013796:	781b      	ldrb	r3, [r3, #0]
 8013798:	e00b      	b.n	80137b2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801379a:	78fb      	ldrb	r3, [r7, #3]
 801379c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80137a0:	68f9      	ldr	r1, [r7, #12]
 80137a2:	4613      	mov	r3, r2
 80137a4:	009b      	lsls	r3, r3, #2
 80137a6:	4413      	add	r3, r2
 80137a8:	00db      	lsls	r3, r3, #3
 80137aa:	440b      	add	r3, r1
 80137ac:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80137b0:	781b      	ldrb	r3, [r3, #0]
  }
}
 80137b2:	4618      	mov	r0, r3
 80137b4:	3714      	adds	r7, #20
 80137b6:	46bd      	mov	sp, r7
 80137b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137bc:	4770      	bx	lr

080137be <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80137be:	b580      	push	{r7, lr}
 80137c0:	b084      	sub	sp, #16
 80137c2:	af00      	add	r7, sp, #0
 80137c4:	6078      	str	r0, [r7, #4]
 80137c6:	460b      	mov	r3, r1
 80137c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80137ca:	2300      	movs	r3, #0
 80137cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80137ce:	2300      	movs	r3, #0
 80137d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80137d8:	78fa      	ldrb	r2, [r7, #3]
 80137da:	4611      	mov	r1, r2
 80137dc:	4618      	mov	r0, r3
 80137de:	f7f3 fcce 	bl	800717e <HAL_PCD_SetAddress>
 80137e2:	4603      	mov	r3, r0
 80137e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80137e6:	7bfb      	ldrb	r3, [r7, #15]
 80137e8:	4618      	mov	r0, r3
 80137ea:	f000 f8b1 	bl	8013950 <USBD_Get_USB_Status>
 80137ee:	4603      	mov	r3, r0
 80137f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80137f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80137f4:	4618      	mov	r0, r3
 80137f6:	3710      	adds	r7, #16
 80137f8:	46bd      	mov	sp, r7
 80137fa:	bd80      	pop	{r7, pc}

080137fc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80137fc:	b580      	push	{r7, lr}
 80137fe:	b086      	sub	sp, #24
 8013800:	af00      	add	r7, sp, #0
 8013802:	60f8      	str	r0, [r7, #12]
 8013804:	607a      	str	r2, [r7, #4]
 8013806:	603b      	str	r3, [r7, #0]
 8013808:	460b      	mov	r3, r1
 801380a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801380c:	2300      	movs	r3, #0
 801380e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013810:	2300      	movs	r3, #0
 8013812:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801381a:	7af9      	ldrb	r1, [r7, #11]
 801381c:	683b      	ldr	r3, [r7, #0]
 801381e:	687a      	ldr	r2, [r7, #4]
 8013820:	f7f3 fdd5 	bl	80073ce <HAL_PCD_EP_Transmit>
 8013824:	4603      	mov	r3, r0
 8013826:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013828:	7dfb      	ldrb	r3, [r7, #23]
 801382a:	4618      	mov	r0, r3
 801382c:	f000 f890 	bl	8013950 <USBD_Get_USB_Status>
 8013830:	4603      	mov	r3, r0
 8013832:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013834:	7dbb      	ldrb	r3, [r7, #22]
}
 8013836:	4618      	mov	r0, r3
 8013838:	3718      	adds	r7, #24
 801383a:	46bd      	mov	sp, r7
 801383c:	bd80      	pop	{r7, pc}

0801383e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801383e:	b580      	push	{r7, lr}
 8013840:	b086      	sub	sp, #24
 8013842:	af00      	add	r7, sp, #0
 8013844:	60f8      	str	r0, [r7, #12]
 8013846:	607a      	str	r2, [r7, #4]
 8013848:	603b      	str	r3, [r7, #0]
 801384a:	460b      	mov	r3, r1
 801384c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801384e:	2300      	movs	r3, #0
 8013850:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013852:	2300      	movs	r3, #0
 8013854:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013856:	68fb      	ldr	r3, [r7, #12]
 8013858:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801385c:	7af9      	ldrb	r1, [r7, #11]
 801385e:	683b      	ldr	r3, [r7, #0]
 8013860:	687a      	ldr	r2, [r7, #4]
 8013862:	f7f3 fd5f 	bl	8007324 <HAL_PCD_EP_Receive>
 8013866:	4603      	mov	r3, r0
 8013868:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801386a:	7dfb      	ldrb	r3, [r7, #23]
 801386c:	4618      	mov	r0, r3
 801386e:	f000 f86f 	bl	8013950 <USBD_Get_USB_Status>
 8013872:	4603      	mov	r3, r0
 8013874:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013876:	7dbb      	ldrb	r3, [r7, #22]
}
 8013878:	4618      	mov	r0, r3
 801387a:	3718      	adds	r7, #24
 801387c:	46bd      	mov	sp, r7
 801387e:	bd80      	pop	{r7, pc}

08013880 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013880:	b580      	push	{r7, lr}
 8013882:	b082      	sub	sp, #8
 8013884:	af00      	add	r7, sp, #0
 8013886:	6078      	str	r0, [r7, #4]
 8013888:	460b      	mov	r3, r1
 801388a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013892:	78fa      	ldrb	r2, [r7, #3]
 8013894:	4611      	mov	r1, r2
 8013896:	4618      	mov	r0, r3
 8013898:	f7f3 fd81 	bl	800739e <HAL_PCD_EP_GetRxCount>
 801389c:	4603      	mov	r3, r0
}
 801389e:	4618      	mov	r0, r3
 80138a0:	3708      	adds	r7, #8
 80138a2:	46bd      	mov	sp, r7
 80138a4:	bd80      	pop	{r7, pc}
	...

080138a8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80138a8:	b580      	push	{r7, lr}
 80138aa:	b082      	sub	sp, #8
 80138ac:	af00      	add	r7, sp, #0
 80138ae:	6078      	str	r0, [r7, #4]
 80138b0:	460b      	mov	r3, r1
 80138b2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80138b4:	78fb      	ldrb	r3, [r7, #3]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d002      	beq.n	80138c0 <HAL_PCDEx_LPM_Callback+0x18>
 80138ba:	2b01      	cmp	r3, #1
 80138bc:	d013      	beq.n	80138e6 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 80138be:	e023      	b.n	8013908 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	699b      	ldr	r3, [r3, #24]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d007      	beq.n	80138d8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80138c8:	f000 f83c 	bl	8013944 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80138cc:	4b10      	ldr	r3, [pc, #64]	; (8013910 <HAL_PCDEx_LPM_Callback+0x68>)
 80138ce:	691b      	ldr	r3, [r3, #16]
 80138d0:	4a0f      	ldr	r2, [pc, #60]	; (8013910 <HAL_PCDEx_LPM_Callback+0x68>)
 80138d2:	f023 0306 	bic.w	r3, r3, #6
 80138d6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80138de:	4618      	mov	r0, r3
 80138e0:	f7fc fba8 	bl	8010034 <USBD_LL_Resume>
    break;
 80138e4:	e010      	b.n	8013908 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80138ec:	4618      	mov	r0, r3
 80138ee:	f7fc fb8b 	bl	8010008 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	699b      	ldr	r3, [r3, #24]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d005      	beq.n	8013906 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80138fa:	4b05      	ldr	r3, [pc, #20]	; (8013910 <HAL_PCDEx_LPM_Callback+0x68>)
 80138fc:	691b      	ldr	r3, [r3, #16]
 80138fe:	4a04      	ldr	r2, [pc, #16]	; (8013910 <HAL_PCDEx_LPM_Callback+0x68>)
 8013900:	f043 0306 	orr.w	r3, r3, #6
 8013904:	6113      	str	r3, [r2, #16]
    break;
 8013906:	bf00      	nop
}
 8013908:	bf00      	nop
 801390a:	3708      	adds	r7, #8
 801390c:	46bd      	mov	sp, r7
 801390e:	bd80      	pop	{r7, pc}
 8013910:	e000ed00 	.word	0xe000ed00

08013914 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013914:	b480      	push	{r7}
 8013916:	b083      	sub	sp, #12
 8013918:	af00      	add	r7, sp, #0
 801391a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801391c:	4b03      	ldr	r3, [pc, #12]	; (801392c <USBD_static_malloc+0x18>)
}
 801391e:	4618      	mov	r0, r3
 8013920:	370c      	adds	r7, #12
 8013922:	46bd      	mov	sp, r7
 8013924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013928:	4770      	bx	lr
 801392a:	bf00      	nop
 801392c:	200054b4 	.word	0x200054b4

08013930 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013930:	b480      	push	{r7}
 8013932:	b083      	sub	sp, #12
 8013934:	af00      	add	r7, sp, #0
 8013936:	6078      	str	r0, [r7, #4]

}
 8013938:	bf00      	nop
 801393a:	370c      	adds	r7, #12
 801393c:	46bd      	mov	sp, r7
 801393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013942:	4770      	bx	lr

08013944 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8013944:	b580      	push	{r7, lr}
 8013946:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8013948:	f7ef fb96 	bl	8003078 <SystemClock_Config>
}
 801394c:	bf00      	nop
 801394e:	bd80      	pop	{r7, pc}

08013950 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013950:	b480      	push	{r7}
 8013952:	b085      	sub	sp, #20
 8013954:	af00      	add	r7, sp, #0
 8013956:	4603      	mov	r3, r0
 8013958:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801395a:	2300      	movs	r3, #0
 801395c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801395e:	79fb      	ldrb	r3, [r7, #7]
 8013960:	2b03      	cmp	r3, #3
 8013962:	d817      	bhi.n	8013994 <USBD_Get_USB_Status+0x44>
 8013964:	a201      	add	r2, pc, #4	; (adr r2, 801396c <USBD_Get_USB_Status+0x1c>)
 8013966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801396a:	bf00      	nop
 801396c:	0801397d 	.word	0x0801397d
 8013970:	08013983 	.word	0x08013983
 8013974:	08013989 	.word	0x08013989
 8013978:	0801398f 	.word	0x0801398f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801397c:	2300      	movs	r3, #0
 801397e:	73fb      	strb	r3, [r7, #15]
    break;
 8013980:	e00b      	b.n	801399a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013982:	2303      	movs	r3, #3
 8013984:	73fb      	strb	r3, [r7, #15]
    break;
 8013986:	e008      	b.n	801399a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013988:	2301      	movs	r3, #1
 801398a:	73fb      	strb	r3, [r7, #15]
    break;
 801398c:	e005      	b.n	801399a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801398e:	2303      	movs	r3, #3
 8013990:	73fb      	strb	r3, [r7, #15]
    break;
 8013992:	e002      	b.n	801399a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013994:	2303      	movs	r3, #3
 8013996:	73fb      	strb	r3, [r7, #15]
    break;
 8013998:	bf00      	nop
  }
  return usb_status;
 801399a:	7bfb      	ldrb	r3, [r7, #15]
}
 801399c:	4618      	mov	r0, r3
 801399e:	3714      	adds	r7, #20
 80139a0:	46bd      	mov	sp, r7
 80139a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139a6:	4770      	bx	lr

080139a8 <arm_pid_init_f32>:
 80139a8:	edd0 6a08 	vldr	s13, [r0, #32]
 80139ac:	edd0 7a06 	vldr	s15, [r0, #24]
 80139b0:	ed90 7a07 	vldr	s14, [r0, #28]
 80139b4:	edc0 6a02 	vstr	s13, [r0, #8]
 80139b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80139bc:	ee36 6aa6 	vadd.f32	s12, s13, s13
 80139c0:	eef1 7a67 	vneg.f32	s15, s15
 80139c4:	ee37 7a26 	vadd.f32	s14, s14, s13
 80139c8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80139cc:	ed80 7a00 	vstr	s14, [r0]
 80139d0:	edc0 7a01 	vstr	s15, [r0, #4]
 80139d4:	b901      	cbnz	r1, 80139d8 <arm_pid_init_f32+0x30>
 80139d6:	4770      	bx	lr
 80139d8:	2300      	movs	r3, #0
 80139da:	60c3      	str	r3, [r0, #12]
 80139dc:	6103      	str	r3, [r0, #16]
 80139de:	6143      	str	r3, [r0, #20]
 80139e0:	4770      	bx	lr
 80139e2:	bf00      	nop

080139e4 <memset>:
 80139e4:	4402      	add	r2, r0
 80139e6:	4603      	mov	r3, r0
 80139e8:	4293      	cmp	r3, r2
 80139ea:	d100      	bne.n	80139ee <memset+0xa>
 80139ec:	4770      	bx	lr
 80139ee:	f803 1b01 	strb.w	r1, [r3], #1
 80139f2:	e7f9      	b.n	80139e8 <memset+0x4>

080139f4 <_reclaim_reent>:
 80139f4:	4b29      	ldr	r3, [pc, #164]	; (8013a9c <_reclaim_reent+0xa8>)
 80139f6:	681b      	ldr	r3, [r3, #0]
 80139f8:	4283      	cmp	r3, r0
 80139fa:	b570      	push	{r4, r5, r6, lr}
 80139fc:	4604      	mov	r4, r0
 80139fe:	d04b      	beq.n	8013a98 <_reclaim_reent+0xa4>
 8013a00:	69c3      	ldr	r3, [r0, #28]
 8013a02:	b143      	cbz	r3, 8013a16 <_reclaim_reent+0x22>
 8013a04:	68db      	ldr	r3, [r3, #12]
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d144      	bne.n	8013a94 <_reclaim_reent+0xa0>
 8013a0a:	69e3      	ldr	r3, [r4, #28]
 8013a0c:	6819      	ldr	r1, [r3, #0]
 8013a0e:	b111      	cbz	r1, 8013a16 <_reclaim_reent+0x22>
 8013a10:	4620      	mov	r0, r4
 8013a12:	f000 f87f 	bl	8013b14 <_free_r>
 8013a16:	6961      	ldr	r1, [r4, #20]
 8013a18:	b111      	cbz	r1, 8013a20 <_reclaim_reent+0x2c>
 8013a1a:	4620      	mov	r0, r4
 8013a1c:	f000 f87a 	bl	8013b14 <_free_r>
 8013a20:	69e1      	ldr	r1, [r4, #28]
 8013a22:	b111      	cbz	r1, 8013a2a <_reclaim_reent+0x36>
 8013a24:	4620      	mov	r0, r4
 8013a26:	f000 f875 	bl	8013b14 <_free_r>
 8013a2a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013a2c:	b111      	cbz	r1, 8013a34 <_reclaim_reent+0x40>
 8013a2e:	4620      	mov	r0, r4
 8013a30:	f000 f870 	bl	8013b14 <_free_r>
 8013a34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013a36:	b111      	cbz	r1, 8013a3e <_reclaim_reent+0x4a>
 8013a38:	4620      	mov	r0, r4
 8013a3a:	f000 f86b 	bl	8013b14 <_free_r>
 8013a3e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013a40:	b111      	cbz	r1, 8013a48 <_reclaim_reent+0x54>
 8013a42:	4620      	mov	r0, r4
 8013a44:	f000 f866 	bl	8013b14 <_free_r>
 8013a48:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8013a4a:	b111      	cbz	r1, 8013a52 <_reclaim_reent+0x5e>
 8013a4c:	4620      	mov	r0, r4
 8013a4e:	f000 f861 	bl	8013b14 <_free_r>
 8013a52:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8013a54:	b111      	cbz	r1, 8013a5c <_reclaim_reent+0x68>
 8013a56:	4620      	mov	r0, r4
 8013a58:	f000 f85c 	bl	8013b14 <_free_r>
 8013a5c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8013a5e:	b111      	cbz	r1, 8013a66 <_reclaim_reent+0x72>
 8013a60:	4620      	mov	r0, r4
 8013a62:	f000 f857 	bl	8013b14 <_free_r>
 8013a66:	6a23      	ldr	r3, [r4, #32]
 8013a68:	b1b3      	cbz	r3, 8013a98 <_reclaim_reent+0xa4>
 8013a6a:	4620      	mov	r0, r4
 8013a6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013a70:	4718      	bx	r3
 8013a72:	5949      	ldr	r1, [r1, r5]
 8013a74:	b941      	cbnz	r1, 8013a88 <_reclaim_reent+0x94>
 8013a76:	3504      	adds	r5, #4
 8013a78:	69e3      	ldr	r3, [r4, #28]
 8013a7a:	2d80      	cmp	r5, #128	; 0x80
 8013a7c:	68d9      	ldr	r1, [r3, #12]
 8013a7e:	d1f8      	bne.n	8013a72 <_reclaim_reent+0x7e>
 8013a80:	4620      	mov	r0, r4
 8013a82:	f000 f847 	bl	8013b14 <_free_r>
 8013a86:	e7c0      	b.n	8013a0a <_reclaim_reent+0x16>
 8013a88:	680e      	ldr	r6, [r1, #0]
 8013a8a:	4620      	mov	r0, r4
 8013a8c:	f000 f842 	bl	8013b14 <_free_r>
 8013a90:	4631      	mov	r1, r6
 8013a92:	e7ef      	b.n	8013a74 <_reclaim_reent+0x80>
 8013a94:	2500      	movs	r5, #0
 8013a96:	e7ef      	b.n	8013a78 <_reclaim_reent+0x84>
 8013a98:	bd70      	pop	{r4, r5, r6, pc}
 8013a9a:	bf00      	nop
 8013a9c:	200001d8 	.word	0x200001d8

08013aa0 <__errno>:
 8013aa0:	4b01      	ldr	r3, [pc, #4]	; (8013aa8 <__errno+0x8>)
 8013aa2:	6818      	ldr	r0, [r3, #0]
 8013aa4:	4770      	bx	lr
 8013aa6:	bf00      	nop
 8013aa8:	200001d8 	.word	0x200001d8

08013aac <__libc_init_array>:
 8013aac:	b570      	push	{r4, r5, r6, lr}
 8013aae:	4d0d      	ldr	r5, [pc, #52]	; (8013ae4 <__libc_init_array+0x38>)
 8013ab0:	4c0d      	ldr	r4, [pc, #52]	; (8013ae8 <__libc_init_array+0x3c>)
 8013ab2:	1b64      	subs	r4, r4, r5
 8013ab4:	10a4      	asrs	r4, r4, #2
 8013ab6:	2600      	movs	r6, #0
 8013ab8:	42a6      	cmp	r6, r4
 8013aba:	d109      	bne.n	8013ad0 <__libc_init_array+0x24>
 8013abc:	4d0b      	ldr	r5, [pc, #44]	; (8013aec <__libc_init_array+0x40>)
 8013abe:	4c0c      	ldr	r4, [pc, #48]	; (8013af0 <__libc_init_array+0x44>)
 8013ac0:	f000 ffba 	bl	8014a38 <_init>
 8013ac4:	1b64      	subs	r4, r4, r5
 8013ac6:	10a4      	asrs	r4, r4, #2
 8013ac8:	2600      	movs	r6, #0
 8013aca:	42a6      	cmp	r6, r4
 8013acc:	d105      	bne.n	8013ada <__libc_init_array+0x2e>
 8013ace:	bd70      	pop	{r4, r5, r6, pc}
 8013ad0:	f855 3b04 	ldr.w	r3, [r5], #4
 8013ad4:	4798      	blx	r3
 8013ad6:	3601      	adds	r6, #1
 8013ad8:	e7ee      	b.n	8013ab8 <__libc_init_array+0xc>
 8013ada:	f855 3b04 	ldr.w	r3, [r5], #4
 8013ade:	4798      	blx	r3
 8013ae0:	3601      	adds	r6, #1
 8013ae2:	e7f2      	b.n	8013aca <__libc_init_array+0x1e>
 8013ae4:	08014c70 	.word	0x08014c70
 8013ae8:	08014c70 	.word	0x08014c70
 8013aec:	08014c70 	.word	0x08014c70
 8013af0:	08014c74 	.word	0x08014c74

08013af4 <__retarget_lock_acquire_recursive>:
 8013af4:	4770      	bx	lr

08013af6 <__retarget_lock_release_recursive>:
 8013af6:	4770      	bx	lr

08013af8 <memcpy>:
 8013af8:	440a      	add	r2, r1
 8013afa:	4291      	cmp	r1, r2
 8013afc:	f100 33ff 	add.w	r3, r0, #4294967295
 8013b00:	d100      	bne.n	8013b04 <memcpy+0xc>
 8013b02:	4770      	bx	lr
 8013b04:	b510      	push	{r4, lr}
 8013b06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013b0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013b0e:	4291      	cmp	r1, r2
 8013b10:	d1f9      	bne.n	8013b06 <memcpy+0xe>
 8013b12:	bd10      	pop	{r4, pc}

08013b14 <_free_r>:
 8013b14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013b16:	2900      	cmp	r1, #0
 8013b18:	d044      	beq.n	8013ba4 <_free_r+0x90>
 8013b1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013b1e:	9001      	str	r0, [sp, #4]
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	f1a1 0404 	sub.w	r4, r1, #4
 8013b26:	bfb8      	it	lt
 8013b28:	18e4      	addlt	r4, r4, r3
 8013b2a:	f000 f83f 	bl	8013bac <__malloc_lock>
 8013b2e:	4a1e      	ldr	r2, [pc, #120]	; (8013ba8 <_free_r+0x94>)
 8013b30:	9801      	ldr	r0, [sp, #4]
 8013b32:	6813      	ldr	r3, [r2, #0]
 8013b34:	b933      	cbnz	r3, 8013b44 <_free_r+0x30>
 8013b36:	6063      	str	r3, [r4, #4]
 8013b38:	6014      	str	r4, [r2, #0]
 8013b3a:	b003      	add	sp, #12
 8013b3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013b40:	f000 b83a 	b.w	8013bb8 <__malloc_unlock>
 8013b44:	42a3      	cmp	r3, r4
 8013b46:	d908      	bls.n	8013b5a <_free_r+0x46>
 8013b48:	6825      	ldr	r5, [r4, #0]
 8013b4a:	1961      	adds	r1, r4, r5
 8013b4c:	428b      	cmp	r3, r1
 8013b4e:	bf01      	itttt	eq
 8013b50:	6819      	ldreq	r1, [r3, #0]
 8013b52:	685b      	ldreq	r3, [r3, #4]
 8013b54:	1949      	addeq	r1, r1, r5
 8013b56:	6021      	streq	r1, [r4, #0]
 8013b58:	e7ed      	b.n	8013b36 <_free_r+0x22>
 8013b5a:	461a      	mov	r2, r3
 8013b5c:	685b      	ldr	r3, [r3, #4]
 8013b5e:	b10b      	cbz	r3, 8013b64 <_free_r+0x50>
 8013b60:	42a3      	cmp	r3, r4
 8013b62:	d9fa      	bls.n	8013b5a <_free_r+0x46>
 8013b64:	6811      	ldr	r1, [r2, #0]
 8013b66:	1855      	adds	r5, r2, r1
 8013b68:	42a5      	cmp	r5, r4
 8013b6a:	d10b      	bne.n	8013b84 <_free_r+0x70>
 8013b6c:	6824      	ldr	r4, [r4, #0]
 8013b6e:	4421      	add	r1, r4
 8013b70:	1854      	adds	r4, r2, r1
 8013b72:	42a3      	cmp	r3, r4
 8013b74:	6011      	str	r1, [r2, #0]
 8013b76:	d1e0      	bne.n	8013b3a <_free_r+0x26>
 8013b78:	681c      	ldr	r4, [r3, #0]
 8013b7a:	685b      	ldr	r3, [r3, #4]
 8013b7c:	6053      	str	r3, [r2, #4]
 8013b7e:	440c      	add	r4, r1
 8013b80:	6014      	str	r4, [r2, #0]
 8013b82:	e7da      	b.n	8013b3a <_free_r+0x26>
 8013b84:	d902      	bls.n	8013b8c <_free_r+0x78>
 8013b86:	230c      	movs	r3, #12
 8013b88:	6003      	str	r3, [r0, #0]
 8013b8a:	e7d6      	b.n	8013b3a <_free_r+0x26>
 8013b8c:	6825      	ldr	r5, [r4, #0]
 8013b8e:	1961      	adds	r1, r4, r5
 8013b90:	428b      	cmp	r3, r1
 8013b92:	bf04      	itt	eq
 8013b94:	6819      	ldreq	r1, [r3, #0]
 8013b96:	685b      	ldreq	r3, [r3, #4]
 8013b98:	6063      	str	r3, [r4, #4]
 8013b9a:	bf04      	itt	eq
 8013b9c:	1949      	addeq	r1, r1, r5
 8013b9e:	6021      	streq	r1, [r4, #0]
 8013ba0:	6054      	str	r4, [r2, #4]
 8013ba2:	e7ca      	b.n	8013b3a <_free_r+0x26>
 8013ba4:	b003      	add	sp, #12
 8013ba6:	bd30      	pop	{r4, r5, pc}
 8013ba8:	20005810 	.word	0x20005810

08013bac <__malloc_lock>:
 8013bac:	4801      	ldr	r0, [pc, #4]	; (8013bb4 <__malloc_lock+0x8>)
 8013bae:	f7ff bfa1 	b.w	8013af4 <__retarget_lock_acquire_recursive>
 8013bb2:	bf00      	nop
 8013bb4:	2000580c 	.word	0x2000580c

08013bb8 <__malloc_unlock>:
 8013bb8:	4801      	ldr	r0, [pc, #4]	; (8013bc0 <__malloc_unlock+0x8>)
 8013bba:	f7ff bf9c 	b.w	8013af6 <__retarget_lock_release_recursive>
 8013bbe:	bf00      	nop
 8013bc0:	2000580c 	.word	0x2000580c

08013bc4 <pow>:
 8013bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bc6:	ed2d 8b02 	vpush	{d8}
 8013bca:	eeb0 8a40 	vmov.f32	s16, s0
 8013bce:	eef0 8a60 	vmov.f32	s17, s1
 8013bd2:	ec55 4b11 	vmov	r4, r5, d1
 8013bd6:	f000 f873 	bl	8013cc0 <__ieee754_pow>
 8013bda:	4622      	mov	r2, r4
 8013bdc:	462b      	mov	r3, r5
 8013bde:	4620      	mov	r0, r4
 8013be0:	4629      	mov	r1, r5
 8013be2:	ec57 6b10 	vmov	r6, r7, d0
 8013be6:	f7ec ff83 	bl	8000af0 <__aeabi_dcmpun>
 8013bea:	2800      	cmp	r0, #0
 8013bec:	d13b      	bne.n	8013c66 <pow+0xa2>
 8013bee:	ec51 0b18 	vmov	r0, r1, d8
 8013bf2:	2200      	movs	r2, #0
 8013bf4:	2300      	movs	r3, #0
 8013bf6:	f7ec ff49 	bl	8000a8c <__aeabi_dcmpeq>
 8013bfa:	b1b8      	cbz	r0, 8013c2c <pow+0x68>
 8013bfc:	2200      	movs	r2, #0
 8013bfe:	2300      	movs	r3, #0
 8013c00:	4620      	mov	r0, r4
 8013c02:	4629      	mov	r1, r5
 8013c04:	f7ec ff42 	bl	8000a8c <__aeabi_dcmpeq>
 8013c08:	2800      	cmp	r0, #0
 8013c0a:	d146      	bne.n	8013c9a <pow+0xd6>
 8013c0c:	ec45 4b10 	vmov	d0, r4, r5
 8013c10:	f000 f848 	bl	8013ca4 <finite>
 8013c14:	b338      	cbz	r0, 8013c66 <pow+0xa2>
 8013c16:	2200      	movs	r2, #0
 8013c18:	2300      	movs	r3, #0
 8013c1a:	4620      	mov	r0, r4
 8013c1c:	4629      	mov	r1, r5
 8013c1e:	f7ec ff3f 	bl	8000aa0 <__aeabi_dcmplt>
 8013c22:	b300      	cbz	r0, 8013c66 <pow+0xa2>
 8013c24:	f7ff ff3c 	bl	8013aa0 <__errno>
 8013c28:	2322      	movs	r3, #34	; 0x22
 8013c2a:	e01b      	b.n	8013c64 <pow+0xa0>
 8013c2c:	ec47 6b10 	vmov	d0, r6, r7
 8013c30:	f000 f838 	bl	8013ca4 <finite>
 8013c34:	b9e0      	cbnz	r0, 8013c70 <pow+0xac>
 8013c36:	eeb0 0a48 	vmov.f32	s0, s16
 8013c3a:	eef0 0a68 	vmov.f32	s1, s17
 8013c3e:	f000 f831 	bl	8013ca4 <finite>
 8013c42:	b1a8      	cbz	r0, 8013c70 <pow+0xac>
 8013c44:	ec45 4b10 	vmov	d0, r4, r5
 8013c48:	f000 f82c 	bl	8013ca4 <finite>
 8013c4c:	b180      	cbz	r0, 8013c70 <pow+0xac>
 8013c4e:	4632      	mov	r2, r6
 8013c50:	463b      	mov	r3, r7
 8013c52:	4630      	mov	r0, r6
 8013c54:	4639      	mov	r1, r7
 8013c56:	f7ec ff4b 	bl	8000af0 <__aeabi_dcmpun>
 8013c5a:	2800      	cmp	r0, #0
 8013c5c:	d0e2      	beq.n	8013c24 <pow+0x60>
 8013c5e:	f7ff ff1f 	bl	8013aa0 <__errno>
 8013c62:	2321      	movs	r3, #33	; 0x21
 8013c64:	6003      	str	r3, [r0, #0]
 8013c66:	ecbd 8b02 	vpop	{d8}
 8013c6a:	ec47 6b10 	vmov	d0, r6, r7
 8013c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c70:	2200      	movs	r2, #0
 8013c72:	2300      	movs	r3, #0
 8013c74:	4630      	mov	r0, r6
 8013c76:	4639      	mov	r1, r7
 8013c78:	f7ec ff08 	bl	8000a8c <__aeabi_dcmpeq>
 8013c7c:	2800      	cmp	r0, #0
 8013c7e:	d0f2      	beq.n	8013c66 <pow+0xa2>
 8013c80:	eeb0 0a48 	vmov.f32	s0, s16
 8013c84:	eef0 0a68 	vmov.f32	s1, s17
 8013c88:	f000 f80c 	bl	8013ca4 <finite>
 8013c8c:	2800      	cmp	r0, #0
 8013c8e:	d0ea      	beq.n	8013c66 <pow+0xa2>
 8013c90:	ec45 4b10 	vmov	d0, r4, r5
 8013c94:	f000 f806 	bl	8013ca4 <finite>
 8013c98:	e7c3      	b.n	8013c22 <pow+0x5e>
 8013c9a:	4f01      	ldr	r7, [pc, #4]	; (8013ca0 <pow+0xdc>)
 8013c9c:	2600      	movs	r6, #0
 8013c9e:	e7e2      	b.n	8013c66 <pow+0xa2>
 8013ca0:	3ff00000 	.word	0x3ff00000

08013ca4 <finite>:
 8013ca4:	b082      	sub	sp, #8
 8013ca6:	ed8d 0b00 	vstr	d0, [sp]
 8013caa:	9801      	ldr	r0, [sp, #4]
 8013cac:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8013cb0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8013cb4:	0fc0      	lsrs	r0, r0, #31
 8013cb6:	b002      	add	sp, #8
 8013cb8:	4770      	bx	lr
 8013cba:	0000      	movs	r0, r0
 8013cbc:	0000      	movs	r0, r0
	...

08013cc0 <__ieee754_pow>:
 8013cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cc4:	ed2d 8b06 	vpush	{d8-d10}
 8013cc8:	b089      	sub	sp, #36	; 0x24
 8013cca:	ed8d 1b00 	vstr	d1, [sp]
 8013cce:	e9dd 2900 	ldrd	r2, r9, [sp]
 8013cd2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8013cd6:	ea58 0102 	orrs.w	r1, r8, r2
 8013cda:	ec57 6b10 	vmov	r6, r7, d0
 8013cde:	d115      	bne.n	8013d0c <__ieee754_pow+0x4c>
 8013ce0:	19b3      	adds	r3, r6, r6
 8013ce2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8013ce6:	4152      	adcs	r2, r2
 8013ce8:	4299      	cmp	r1, r3
 8013cea:	4b89      	ldr	r3, [pc, #548]	; (8013f10 <__ieee754_pow+0x250>)
 8013cec:	4193      	sbcs	r3, r2
 8013cee:	f080 84d1 	bcs.w	8014694 <__ieee754_pow+0x9d4>
 8013cf2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013cf6:	4630      	mov	r0, r6
 8013cf8:	4639      	mov	r1, r7
 8013cfa:	f7ec faa9 	bl	8000250 <__adddf3>
 8013cfe:	ec41 0b10 	vmov	d0, r0, r1
 8013d02:	b009      	add	sp, #36	; 0x24
 8013d04:	ecbd 8b06 	vpop	{d8-d10}
 8013d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d0c:	4b81      	ldr	r3, [pc, #516]	; (8013f14 <__ieee754_pow+0x254>)
 8013d0e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8013d12:	429c      	cmp	r4, r3
 8013d14:	ee10 aa10 	vmov	sl, s0
 8013d18:	463d      	mov	r5, r7
 8013d1a:	dc06      	bgt.n	8013d2a <__ieee754_pow+0x6a>
 8013d1c:	d101      	bne.n	8013d22 <__ieee754_pow+0x62>
 8013d1e:	2e00      	cmp	r6, #0
 8013d20:	d1e7      	bne.n	8013cf2 <__ieee754_pow+0x32>
 8013d22:	4598      	cmp	r8, r3
 8013d24:	dc01      	bgt.n	8013d2a <__ieee754_pow+0x6a>
 8013d26:	d10f      	bne.n	8013d48 <__ieee754_pow+0x88>
 8013d28:	b172      	cbz	r2, 8013d48 <__ieee754_pow+0x88>
 8013d2a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8013d2e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8013d32:	ea55 050a 	orrs.w	r5, r5, sl
 8013d36:	d1dc      	bne.n	8013cf2 <__ieee754_pow+0x32>
 8013d38:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013d3c:	18db      	adds	r3, r3, r3
 8013d3e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8013d42:	4152      	adcs	r2, r2
 8013d44:	429d      	cmp	r5, r3
 8013d46:	e7d0      	b.n	8013cea <__ieee754_pow+0x2a>
 8013d48:	2d00      	cmp	r5, #0
 8013d4a:	da3b      	bge.n	8013dc4 <__ieee754_pow+0x104>
 8013d4c:	4b72      	ldr	r3, [pc, #456]	; (8013f18 <__ieee754_pow+0x258>)
 8013d4e:	4598      	cmp	r8, r3
 8013d50:	dc51      	bgt.n	8013df6 <__ieee754_pow+0x136>
 8013d52:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8013d56:	4598      	cmp	r8, r3
 8013d58:	f340 84ab 	ble.w	80146b2 <__ieee754_pow+0x9f2>
 8013d5c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013d60:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013d64:	2b14      	cmp	r3, #20
 8013d66:	dd0f      	ble.n	8013d88 <__ieee754_pow+0xc8>
 8013d68:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8013d6c:	fa22 f103 	lsr.w	r1, r2, r3
 8013d70:	fa01 f303 	lsl.w	r3, r1, r3
 8013d74:	4293      	cmp	r3, r2
 8013d76:	f040 849c 	bne.w	80146b2 <__ieee754_pow+0x9f2>
 8013d7a:	f001 0101 	and.w	r1, r1, #1
 8013d7e:	f1c1 0302 	rsb	r3, r1, #2
 8013d82:	9304      	str	r3, [sp, #16]
 8013d84:	b182      	cbz	r2, 8013da8 <__ieee754_pow+0xe8>
 8013d86:	e05f      	b.n	8013e48 <__ieee754_pow+0x188>
 8013d88:	2a00      	cmp	r2, #0
 8013d8a:	d15b      	bne.n	8013e44 <__ieee754_pow+0x184>
 8013d8c:	f1c3 0314 	rsb	r3, r3, #20
 8013d90:	fa48 f103 	asr.w	r1, r8, r3
 8013d94:	fa01 f303 	lsl.w	r3, r1, r3
 8013d98:	4543      	cmp	r3, r8
 8013d9a:	f040 8487 	bne.w	80146ac <__ieee754_pow+0x9ec>
 8013d9e:	f001 0101 	and.w	r1, r1, #1
 8013da2:	f1c1 0302 	rsb	r3, r1, #2
 8013da6:	9304      	str	r3, [sp, #16]
 8013da8:	4b5c      	ldr	r3, [pc, #368]	; (8013f1c <__ieee754_pow+0x25c>)
 8013daa:	4598      	cmp	r8, r3
 8013dac:	d132      	bne.n	8013e14 <__ieee754_pow+0x154>
 8013dae:	f1b9 0f00 	cmp.w	r9, #0
 8013db2:	f280 8477 	bge.w	80146a4 <__ieee754_pow+0x9e4>
 8013db6:	4959      	ldr	r1, [pc, #356]	; (8013f1c <__ieee754_pow+0x25c>)
 8013db8:	4632      	mov	r2, r6
 8013dba:	463b      	mov	r3, r7
 8013dbc:	2000      	movs	r0, #0
 8013dbe:	f7ec fd27 	bl	8000810 <__aeabi_ddiv>
 8013dc2:	e79c      	b.n	8013cfe <__ieee754_pow+0x3e>
 8013dc4:	2300      	movs	r3, #0
 8013dc6:	9304      	str	r3, [sp, #16]
 8013dc8:	2a00      	cmp	r2, #0
 8013dca:	d13d      	bne.n	8013e48 <__ieee754_pow+0x188>
 8013dcc:	4b51      	ldr	r3, [pc, #324]	; (8013f14 <__ieee754_pow+0x254>)
 8013dce:	4598      	cmp	r8, r3
 8013dd0:	d1ea      	bne.n	8013da8 <__ieee754_pow+0xe8>
 8013dd2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8013dd6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8013dda:	ea53 030a 	orrs.w	r3, r3, sl
 8013dde:	f000 8459 	beq.w	8014694 <__ieee754_pow+0x9d4>
 8013de2:	4b4f      	ldr	r3, [pc, #316]	; (8013f20 <__ieee754_pow+0x260>)
 8013de4:	429c      	cmp	r4, r3
 8013de6:	dd08      	ble.n	8013dfa <__ieee754_pow+0x13a>
 8013de8:	f1b9 0f00 	cmp.w	r9, #0
 8013dec:	f2c0 8456 	blt.w	801469c <__ieee754_pow+0x9dc>
 8013df0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013df4:	e783      	b.n	8013cfe <__ieee754_pow+0x3e>
 8013df6:	2302      	movs	r3, #2
 8013df8:	e7e5      	b.n	8013dc6 <__ieee754_pow+0x106>
 8013dfa:	f1b9 0f00 	cmp.w	r9, #0
 8013dfe:	f04f 0000 	mov.w	r0, #0
 8013e02:	f04f 0100 	mov.w	r1, #0
 8013e06:	f6bf af7a 	bge.w	8013cfe <__ieee754_pow+0x3e>
 8013e0a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8013e0e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8013e12:	e774      	b.n	8013cfe <__ieee754_pow+0x3e>
 8013e14:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8013e18:	d106      	bne.n	8013e28 <__ieee754_pow+0x168>
 8013e1a:	4632      	mov	r2, r6
 8013e1c:	463b      	mov	r3, r7
 8013e1e:	4630      	mov	r0, r6
 8013e20:	4639      	mov	r1, r7
 8013e22:	f7ec fbcb 	bl	80005bc <__aeabi_dmul>
 8013e26:	e76a      	b.n	8013cfe <__ieee754_pow+0x3e>
 8013e28:	4b3e      	ldr	r3, [pc, #248]	; (8013f24 <__ieee754_pow+0x264>)
 8013e2a:	4599      	cmp	r9, r3
 8013e2c:	d10c      	bne.n	8013e48 <__ieee754_pow+0x188>
 8013e2e:	2d00      	cmp	r5, #0
 8013e30:	db0a      	blt.n	8013e48 <__ieee754_pow+0x188>
 8013e32:	ec47 6b10 	vmov	d0, r6, r7
 8013e36:	b009      	add	sp, #36	; 0x24
 8013e38:	ecbd 8b06 	vpop	{d8-d10}
 8013e3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e40:	f000 bd20 	b.w	8014884 <__ieee754_sqrt>
 8013e44:	2300      	movs	r3, #0
 8013e46:	9304      	str	r3, [sp, #16]
 8013e48:	ec47 6b10 	vmov	d0, r6, r7
 8013e4c:	f000 fc62 	bl	8014714 <fabs>
 8013e50:	ec51 0b10 	vmov	r0, r1, d0
 8013e54:	f1ba 0f00 	cmp.w	sl, #0
 8013e58:	d129      	bne.n	8013eae <__ieee754_pow+0x1ee>
 8013e5a:	b124      	cbz	r4, 8013e66 <__ieee754_pow+0x1a6>
 8013e5c:	4b2f      	ldr	r3, [pc, #188]	; (8013f1c <__ieee754_pow+0x25c>)
 8013e5e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8013e62:	429a      	cmp	r2, r3
 8013e64:	d123      	bne.n	8013eae <__ieee754_pow+0x1ee>
 8013e66:	f1b9 0f00 	cmp.w	r9, #0
 8013e6a:	da05      	bge.n	8013e78 <__ieee754_pow+0x1b8>
 8013e6c:	4602      	mov	r2, r0
 8013e6e:	460b      	mov	r3, r1
 8013e70:	2000      	movs	r0, #0
 8013e72:	492a      	ldr	r1, [pc, #168]	; (8013f1c <__ieee754_pow+0x25c>)
 8013e74:	f7ec fccc 	bl	8000810 <__aeabi_ddiv>
 8013e78:	2d00      	cmp	r5, #0
 8013e7a:	f6bf af40 	bge.w	8013cfe <__ieee754_pow+0x3e>
 8013e7e:	9b04      	ldr	r3, [sp, #16]
 8013e80:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013e84:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013e88:	431c      	orrs	r4, r3
 8013e8a:	d108      	bne.n	8013e9e <__ieee754_pow+0x1de>
 8013e8c:	4602      	mov	r2, r0
 8013e8e:	460b      	mov	r3, r1
 8013e90:	4610      	mov	r0, r2
 8013e92:	4619      	mov	r1, r3
 8013e94:	f7ec f9da 	bl	800024c <__aeabi_dsub>
 8013e98:	4602      	mov	r2, r0
 8013e9a:	460b      	mov	r3, r1
 8013e9c:	e78f      	b.n	8013dbe <__ieee754_pow+0xfe>
 8013e9e:	9b04      	ldr	r3, [sp, #16]
 8013ea0:	2b01      	cmp	r3, #1
 8013ea2:	f47f af2c 	bne.w	8013cfe <__ieee754_pow+0x3e>
 8013ea6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013eaa:	4619      	mov	r1, r3
 8013eac:	e727      	b.n	8013cfe <__ieee754_pow+0x3e>
 8013eae:	0feb      	lsrs	r3, r5, #31
 8013eb0:	3b01      	subs	r3, #1
 8013eb2:	9306      	str	r3, [sp, #24]
 8013eb4:	9a06      	ldr	r2, [sp, #24]
 8013eb6:	9b04      	ldr	r3, [sp, #16]
 8013eb8:	4313      	orrs	r3, r2
 8013eba:	d102      	bne.n	8013ec2 <__ieee754_pow+0x202>
 8013ebc:	4632      	mov	r2, r6
 8013ebe:	463b      	mov	r3, r7
 8013ec0:	e7e6      	b.n	8013e90 <__ieee754_pow+0x1d0>
 8013ec2:	4b19      	ldr	r3, [pc, #100]	; (8013f28 <__ieee754_pow+0x268>)
 8013ec4:	4598      	cmp	r8, r3
 8013ec6:	f340 80fb 	ble.w	80140c0 <__ieee754_pow+0x400>
 8013eca:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8013ece:	4598      	cmp	r8, r3
 8013ed0:	4b13      	ldr	r3, [pc, #76]	; (8013f20 <__ieee754_pow+0x260>)
 8013ed2:	dd0c      	ble.n	8013eee <__ieee754_pow+0x22e>
 8013ed4:	429c      	cmp	r4, r3
 8013ed6:	dc0f      	bgt.n	8013ef8 <__ieee754_pow+0x238>
 8013ed8:	f1b9 0f00 	cmp.w	r9, #0
 8013edc:	da0f      	bge.n	8013efe <__ieee754_pow+0x23e>
 8013ede:	2000      	movs	r0, #0
 8013ee0:	b009      	add	sp, #36	; 0x24
 8013ee2:	ecbd 8b06 	vpop	{d8-d10}
 8013ee6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013eea:	f000 bcc2 	b.w	8014872 <__math_oflow>
 8013eee:	429c      	cmp	r4, r3
 8013ef0:	dbf2      	blt.n	8013ed8 <__ieee754_pow+0x218>
 8013ef2:	4b0a      	ldr	r3, [pc, #40]	; (8013f1c <__ieee754_pow+0x25c>)
 8013ef4:	429c      	cmp	r4, r3
 8013ef6:	dd19      	ble.n	8013f2c <__ieee754_pow+0x26c>
 8013ef8:	f1b9 0f00 	cmp.w	r9, #0
 8013efc:	dcef      	bgt.n	8013ede <__ieee754_pow+0x21e>
 8013efe:	2000      	movs	r0, #0
 8013f00:	b009      	add	sp, #36	; 0x24
 8013f02:	ecbd 8b06 	vpop	{d8-d10}
 8013f06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f0a:	f000 bca9 	b.w	8014860 <__math_uflow>
 8013f0e:	bf00      	nop
 8013f10:	fff00000 	.word	0xfff00000
 8013f14:	7ff00000 	.word	0x7ff00000
 8013f18:	433fffff 	.word	0x433fffff
 8013f1c:	3ff00000 	.word	0x3ff00000
 8013f20:	3fefffff 	.word	0x3fefffff
 8013f24:	3fe00000 	.word	0x3fe00000
 8013f28:	41e00000 	.word	0x41e00000
 8013f2c:	4b60      	ldr	r3, [pc, #384]	; (80140b0 <__ieee754_pow+0x3f0>)
 8013f2e:	2200      	movs	r2, #0
 8013f30:	f7ec f98c 	bl	800024c <__aeabi_dsub>
 8013f34:	a354      	add	r3, pc, #336	; (adr r3, 8014088 <__ieee754_pow+0x3c8>)
 8013f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f3a:	4604      	mov	r4, r0
 8013f3c:	460d      	mov	r5, r1
 8013f3e:	f7ec fb3d 	bl	80005bc <__aeabi_dmul>
 8013f42:	a353      	add	r3, pc, #332	; (adr r3, 8014090 <__ieee754_pow+0x3d0>)
 8013f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f48:	4606      	mov	r6, r0
 8013f4a:	460f      	mov	r7, r1
 8013f4c:	4620      	mov	r0, r4
 8013f4e:	4629      	mov	r1, r5
 8013f50:	f7ec fb34 	bl	80005bc <__aeabi_dmul>
 8013f54:	4b57      	ldr	r3, [pc, #348]	; (80140b4 <__ieee754_pow+0x3f4>)
 8013f56:	4682      	mov	sl, r0
 8013f58:	468b      	mov	fp, r1
 8013f5a:	2200      	movs	r2, #0
 8013f5c:	4620      	mov	r0, r4
 8013f5e:	4629      	mov	r1, r5
 8013f60:	f7ec fb2c 	bl	80005bc <__aeabi_dmul>
 8013f64:	4602      	mov	r2, r0
 8013f66:	460b      	mov	r3, r1
 8013f68:	a14b      	add	r1, pc, #300	; (adr r1, 8014098 <__ieee754_pow+0x3d8>)
 8013f6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013f6e:	f7ec f96d 	bl	800024c <__aeabi_dsub>
 8013f72:	4622      	mov	r2, r4
 8013f74:	462b      	mov	r3, r5
 8013f76:	f7ec fb21 	bl	80005bc <__aeabi_dmul>
 8013f7a:	4602      	mov	r2, r0
 8013f7c:	460b      	mov	r3, r1
 8013f7e:	2000      	movs	r0, #0
 8013f80:	494d      	ldr	r1, [pc, #308]	; (80140b8 <__ieee754_pow+0x3f8>)
 8013f82:	f7ec f963 	bl	800024c <__aeabi_dsub>
 8013f86:	4622      	mov	r2, r4
 8013f88:	4680      	mov	r8, r0
 8013f8a:	4689      	mov	r9, r1
 8013f8c:	462b      	mov	r3, r5
 8013f8e:	4620      	mov	r0, r4
 8013f90:	4629      	mov	r1, r5
 8013f92:	f7ec fb13 	bl	80005bc <__aeabi_dmul>
 8013f96:	4602      	mov	r2, r0
 8013f98:	460b      	mov	r3, r1
 8013f9a:	4640      	mov	r0, r8
 8013f9c:	4649      	mov	r1, r9
 8013f9e:	f7ec fb0d 	bl	80005bc <__aeabi_dmul>
 8013fa2:	a33f      	add	r3, pc, #252	; (adr r3, 80140a0 <__ieee754_pow+0x3e0>)
 8013fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fa8:	f7ec fb08 	bl	80005bc <__aeabi_dmul>
 8013fac:	4602      	mov	r2, r0
 8013fae:	460b      	mov	r3, r1
 8013fb0:	4650      	mov	r0, sl
 8013fb2:	4659      	mov	r1, fp
 8013fb4:	f7ec f94a 	bl	800024c <__aeabi_dsub>
 8013fb8:	4602      	mov	r2, r0
 8013fba:	460b      	mov	r3, r1
 8013fbc:	4680      	mov	r8, r0
 8013fbe:	4689      	mov	r9, r1
 8013fc0:	4630      	mov	r0, r6
 8013fc2:	4639      	mov	r1, r7
 8013fc4:	f7ec f944 	bl	8000250 <__adddf3>
 8013fc8:	2000      	movs	r0, #0
 8013fca:	4632      	mov	r2, r6
 8013fcc:	463b      	mov	r3, r7
 8013fce:	4604      	mov	r4, r0
 8013fd0:	460d      	mov	r5, r1
 8013fd2:	f7ec f93b 	bl	800024c <__aeabi_dsub>
 8013fd6:	4602      	mov	r2, r0
 8013fd8:	460b      	mov	r3, r1
 8013fda:	4640      	mov	r0, r8
 8013fdc:	4649      	mov	r1, r9
 8013fde:	f7ec f935 	bl	800024c <__aeabi_dsub>
 8013fe2:	9b04      	ldr	r3, [sp, #16]
 8013fe4:	9a06      	ldr	r2, [sp, #24]
 8013fe6:	3b01      	subs	r3, #1
 8013fe8:	4313      	orrs	r3, r2
 8013fea:	4682      	mov	sl, r0
 8013fec:	468b      	mov	fp, r1
 8013fee:	f040 81e7 	bne.w	80143c0 <__ieee754_pow+0x700>
 8013ff2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80140a8 <__ieee754_pow+0x3e8>
 8013ff6:	eeb0 8a47 	vmov.f32	s16, s14
 8013ffa:	eef0 8a67 	vmov.f32	s17, s15
 8013ffe:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014002:	2600      	movs	r6, #0
 8014004:	4632      	mov	r2, r6
 8014006:	463b      	mov	r3, r7
 8014008:	e9dd 0100 	ldrd	r0, r1, [sp]
 801400c:	f7ec f91e 	bl	800024c <__aeabi_dsub>
 8014010:	4622      	mov	r2, r4
 8014012:	462b      	mov	r3, r5
 8014014:	f7ec fad2 	bl	80005bc <__aeabi_dmul>
 8014018:	e9dd 2300 	ldrd	r2, r3, [sp]
 801401c:	4680      	mov	r8, r0
 801401e:	4689      	mov	r9, r1
 8014020:	4650      	mov	r0, sl
 8014022:	4659      	mov	r1, fp
 8014024:	f7ec faca 	bl	80005bc <__aeabi_dmul>
 8014028:	4602      	mov	r2, r0
 801402a:	460b      	mov	r3, r1
 801402c:	4640      	mov	r0, r8
 801402e:	4649      	mov	r1, r9
 8014030:	f7ec f90e 	bl	8000250 <__adddf3>
 8014034:	4632      	mov	r2, r6
 8014036:	463b      	mov	r3, r7
 8014038:	4680      	mov	r8, r0
 801403a:	4689      	mov	r9, r1
 801403c:	4620      	mov	r0, r4
 801403e:	4629      	mov	r1, r5
 8014040:	f7ec fabc 	bl	80005bc <__aeabi_dmul>
 8014044:	460b      	mov	r3, r1
 8014046:	4604      	mov	r4, r0
 8014048:	460d      	mov	r5, r1
 801404a:	4602      	mov	r2, r0
 801404c:	4649      	mov	r1, r9
 801404e:	4640      	mov	r0, r8
 8014050:	f7ec f8fe 	bl	8000250 <__adddf3>
 8014054:	4b19      	ldr	r3, [pc, #100]	; (80140bc <__ieee754_pow+0x3fc>)
 8014056:	4299      	cmp	r1, r3
 8014058:	ec45 4b19 	vmov	d9, r4, r5
 801405c:	4606      	mov	r6, r0
 801405e:	460f      	mov	r7, r1
 8014060:	468b      	mov	fp, r1
 8014062:	f340 82f0 	ble.w	8014646 <__ieee754_pow+0x986>
 8014066:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801406a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801406e:	4303      	orrs	r3, r0
 8014070:	f000 81e4 	beq.w	801443c <__ieee754_pow+0x77c>
 8014074:	ec51 0b18 	vmov	r0, r1, d8
 8014078:	2200      	movs	r2, #0
 801407a:	2300      	movs	r3, #0
 801407c:	f7ec fd10 	bl	8000aa0 <__aeabi_dcmplt>
 8014080:	3800      	subs	r0, #0
 8014082:	bf18      	it	ne
 8014084:	2001      	movne	r0, #1
 8014086:	e72b      	b.n	8013ee0 <__ieee754_pow+0x220>
 8014088:	60000000 	.word	0x60000000
 801408c:	3ff71547 	.word	0x3ff71547
 8014090:	f85ddf44 	.word	0xf85ddf44
 8014094:	3e54ae0b 	.word	0x3e54ae0b
 8014098:	55555555 	.word	0x55555555
 801409c:	3fd55555 	.word	0x3fd55555
 80140a0:	652b82fe 	.word	0x652b82fe
 80140a4:	3ff71547 	.word	0x3ff71547
 80140a8:	00000000 	.word	0x00000000
 80140ac:	bff00000 	.word	0xbff00000
 80140b0:	3ff00000 	.word	0x3ff00000
 80140b4:	3fd00000 	.word	0x3fd00000
 80140b8:	3fe00000 	.word	0x3fe00000
 80140bc:	408fffff 	.word	0x408fffff
 80140c0:	4bd5      	ldr	r3, [pc, #852]	; (8014418 <__ieee754_pow+0x758>)
 80140c2:	402b      	ands	r3, r5
 80140c4:	2200      	movs	r2, #0
 80140c6:	b92b      	cbnz	r3, 80140d4 <__ieee754_pow+0x414>
 80140c8:	4bd4      	ldr	r3, [pc, #848]	; (801441c <__ieee754_pow+0x75c>)
 80140ca:	f7ec fa77 	bl	80005bc <__aeabi_dmul>
 80140ce:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80140d2:	460c      	mov	r4, r1
 80140d4:	1523      	asrs	r3, r4, #20
 80140d6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80140da:	4413      	add	r3, r2
 80140dc:	9305      	str	r3, [sp, #20]
 80140de:	4bd0      	ldr	r3, [pc, #832]	; (8014420 <__ieee754_pow+0x760>)
 80140e0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80140e4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80140e8:	429c      	cmp	r4, r3
 80140ea:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80140ee:	dd08      	ble.n	8014102 <__ieee754_pow+0x442>
 80140f0:	4bcc      	ldr	r3, [pc, #816]	; (8014424 <__ieee754_pow+0x764>)
 80140f2:	429c      	cmp	r4, r3
 80140f4:	f340 8162 	ble.w	80143bc <__ieee754_pow+0x6fc>
 80140f8:	9b05      	ldr	r3, [sp, #20]
 80140fa:	3301      	adds	r3, #1
 80140fc:	9305      	str	r3, [sp, #20]
 80140fe:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8014102:	2400      	movs	r4, #0
 8014104:	00e3      	lsls	r3, r4, #3
 8014106:	9307      	str	r3, [sp, #28]
 8014108:	4bc7      	ldr	r3, [pc, #796]	; (8014428 <__ieee754_pow+0x768>)
 801410a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801410e:	ed93 7b00 	vldr	d7, [r3]
 8014112:	4629      	mov	r1, r5
 8014114:	ec53 2b17 	vmov	r2, r3, d7
 8014118:	eeb0 9a47 	vmov.f32	s18, s14
 801411c:	eef0 9a67 	vmov.f32	s19, s15
 8014120:	4682      	mov	sl, r0
 8014122:	f7ec f893 	bl	800024c <__aeabi_dsub>
 8014126:	4652      	mov	r2, sl
 8014128:	4606      	mov	r6, r0
 801412a:	460f      	mov	r7, r1
 801412c:	462b      	mov	r3, r5
 801412e:	ec51 0b19 	vmov	r0, r1, d9
 8014132:	f7ec f88d 	bl	8000250 <__adddf3>
 8014136:	4602      	mov	r2, r0
 8014138:	460b      	mov	r3, r1
 801413a:	2000      	movs	r0, #0
 801413c:	49bb      	ldr	r1, [pc, #748]	; (801442c <__ieee754_pow+0x76c>)
 801413e:	f7ec fb67 	bl	8000810 <__aeabi_ddiv>
 8014142:	ec41 0b1a 	vmov	d10, r0, r1
 8014146:	4602      	mov	r2, r0
 8014148:	460b      	mov	r3, r1
 801414a:	4630      	mov	r0, r6
 801414c:	4639      	mov	r1, r7
 801414e:	f7ec fa35 	bl	80005bc <__aeabi_dmul>
 8014152:	2300      	movs	r3, #0
 8014154:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014158:	9302      	str	r3, [sp, #8]
 801415a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801415e:	46ab      	mov	fp, r5
 8014160:	106d      	asrs	r5, r5, #1
 8014162:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8014166:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801416a:	ec41 0b18 	vmov	d8, r0, r1
 801416e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8014172:	2200      	movs	r2, #0
 8014174:	4640      	mov	r0, r8
 8014176:	4649      	mov	r1, r9
 8014178:	4614      	mov	r4, r2
 801417a:	461d      	mov	r5, r3
 801417c:	f7ec fa1e 	bl	80005bc <__aeabi_dmul>
 8014180:	4602      	mov	r2, r0
 8014182:	460b      	mov	r3, r1
 8014184:	4630      	mov	r0, r6
 8014186:	4639      	mov	r1, r7
 8014188:	f7ec f860 	bl	800024c <__aeabi_dsub>
 801418c:	ec53 2b19 	vmov	r2, r3, d9
 8014190:	4606      	mov	r6, r0
 8014192:	460f      	mov	r7, r1
 8014194:	4620      	mov	r0, r4
 8014196:	4629      	mov	r1, r5
 8014198:	f7ec f858 	bl	800024c <__aeabi_dsub>
 801419c:	4602      	mov	r2, r0
 801419e:	460b      	mov	r3, r1
 80141a0:	4650      	mov	r0, sl
 80141a2:	4659      	mov	r1, fp
 80141a4:	f7ec f852 	bl	800024c <__aeabi_dsub>
 80141a8:	4642      	mov	r2, r8
 80141aa:	464b      	mov	r3, r9
 80141ac:	f7ec fa06 	bl	80005bc <__aeabi_dmul>
 80141b0:	4602      	mov	r2, r0
 80141b2:	460b      	mov	r3, r1
 80141b4:	4630      	mov	r0, r6
 80141b6:	4639      	mov	r1, r7
 80141b8:	f7ec f848 	bl	800024c <__aeabi_dsub>
 80141bc:	ec53 2b1a 	vmov	r2, r3, d10
 80141c0:	f7ec f9fc 	bl	80005bc <__aeabi_dmul>
 80141c4:	ec53 2b18 	vmov	r2, r3, d8
 80141c8:	ec41 0b19 	vmov	d9, r0, r1
 80141cc:	ec51 0b18 	vmov	r0, r1, d8
 80141d0:	f7ec f9f4 	bl	80005bc <__aeabi_dmul>
 80141d4:	a37c      	add	r3, pc, #496	; (adr r3, 80143c8 <__ieee754_pow+0x708>)
 80141d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141da:	4604      	mov	r4, r0
 80141dc:	460d      	mov	r5, r1
 80141de:	f7ec f9ed 	bl	80005bc <__aeabi_dmul>
 80141e2:	a37b      	add	r3, pc, #492	; (adr r3, 80143d0 <__ieee754_pow+0x710>)
 80141e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141e8:	f7ec f832 	bl	8000250 <__adddf3>
 80141ec:	4622      	mov	r2, r4
 80141ee:	462b      	mov	r3, r5
 80141f0:	f7ec f9e4 	bl	80005bc <__aeabi_dmul>
 80141f4:	a378      	add	r3, pc, #480	; (adr r3, 80143d8 <__ieee754_pow+0x718>)
 80141f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141fa:	f7ec f829 	bl	8000250 <__adddf3>
 80141fe:	4622      	mov	r2, r4
 8014200:	462b      	mov	r3, r5
 8014202:	f7ec f9db 	bl	80005bc <__aeabi_dmul>
 8014206:	a376      	add	r3, pc, #472	; (adr r3, 80143e0 <__ieee754_pow+0x720>)
 8014208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801420c:	f7ec f820 	bl	8000250 <__adddf3>
 8014210:	4622      	mov	r2, r4
 8014212:	462b      	mov	r3, r5
 8014214:	f7ec f9d2 	bl	80005bc <__aeabi_dmul>
 8014218:	a373      	add	r3, pc, #460	; (adr r3, 80143e8 <__ieee754_pow+0x728>)
 801421a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801421e:	f7ec f817 	bl	8000250 <__adddf3>
 8014222:	4622      	mov	r2, r4
 8014224:	462b      	mov	r3, r5
 8014226:	f7ec f9c9 	bl	80005bc <__aeabi_dmul>
 801422a:	a371      	add	r3, pc, #452	; (adr r3, 80143f0 <__ieee754_pow+0x730>)
 801422c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014230:	f7ec f80e 	bl	8000250 <__adddf3>
 8014234:	4622      	mov	r2, r4
 8014236:	4606      	mov	r6, r0
 8014238:	460f      	mov	r7, r1
 801423a:	462b      	mov	r3, r5
 801423c:	4620      	mov	r0, r4
 801423e:	4629      	mov	r1, r5
 8014240:	f7ec f9bc 	bl	80005bc <__aeabi_dmul>
 8014244:	4602      	mov	r2, r0
 8014246:	460b      	mov	r3, r1
 8014248:	4630      	mov	r0, r6
 801424a:	4639      	mov	r1, r7
 801424c:	f7ec f9b6 	bl	80005bc <__aeabi_dmul>
 8014250:	4642      	mov	r2, r8
 8014252:	4604      	mov	r4, r0
 8014254:	460d      	mov	r5, r1
 8014256:	464b      	mov	r3, r9
 8014258:	ec51 0b18 	vmov	r0, r1, d8
 801425c:	f7eb fff8 	bl	8000250 <__adddf3>
 8014260:	ec53 2b19 	vmov	r2, r3, d9
 8014264:	f7ec f9aa 	bl	80005bc <__aeabi_dmul>
 8014268:	4622      	mov	r2, r4
 801426a:	462b      	mov	r3, r5
 801426c:	f7eb fff0 	bl	8000250 <__adddf3>
 8014270:	4642      	mov	r2, r8
 8014272:	4682      	mov	sl, r0
 8014274:	468b      	mov	fp, r1
 8014276:	464b      	mov	r3, r9
 8014278:	4640      	mov	r0, r8
 801427a:	4649      	mov	r1, r9
 801427c:	f7ec f99e 	bl	80005bc <__aeabi_dmul>
 8014280:	4b6b      	ldr	r3, [pc, #428]	; (8014430 <__ieee754_pow+0x770>)
 8014282:	2200      	movs	r2, #0
 8014284:	4606      	mov	r6, r0
 8014286:	460f      	mov	r7, r1
 8014288:	f7eb ffe2 	bl	8000250 <__adddf3>
 801428c:	4652      	mov	r2, sl
 801428e:	465b      	mov	r3, fp
 8014290:	f7eb ffde 	bl	8000250 <__adddf3>
 8014294:	2000      	movs	r0, #0
 8014296:	4604      	mov	r4, r0
 8014298:	460d      	mov	r5, r1
 801429a:	4602      	mov	r2, r0
 801429c:	460b      	mov	r3, r1
 801429e:	4640      	mov	r0, r8
 80142a0:	4649      	mov	r1, r9
 80142a2:	f7ec f98b 	bl	80005bc <__aeabi_dmul>
 80142a6:	4b62      	ldr	r3, [pc, #392]	; (8014430 <__ieee754_pow+0x770>)
 80142a8:	4680      	mov	r8, r0
 80142aa:	4689      	mov	r9, r1
 80142ac:	2200      	movs	r2, #0
 80142ae:	4620      	mov	r0, r4
 80142b0:	4629      	mov	r1, r5
 80142b2:	f7eb ffcb 	bl	800024c <__aeabi_dsub>
 80142b6:	4632      	mov	r2, r6
 80142b8:	463b      	mov	r3, r7
 80142ba:	f7eb ffc7 	bl	800024c <__aeabi_dsub>
 80142be:	4602      	mov	r2, r0
 80142c0:	460b      	mov	r3, r1
 80142c2:	4650      	mov	r0, sl
 80142c4:	4659      	mov	r1, fp
 80142c6:	f7eb ffc1 	bl	800024c <__aeabi_dsub>
 80142ca:	ec53 2b18 	vmov	r2, r3, d8
 80142ce:	f7ec f975 	bl	80005bc <__aeabi_dmul>
 80142d2:	4622      	mov	r2, r4
 80142d4:	4606      	mov	r6, r0
 80142d6:	460f      	mov	r7, r1
 80142d8:	462b      	mov	r3, r5
 80142da:	ec51 0b19 	vmov	r0, r1, d9
 80142de:	f7ec f96d 	bl	80005bc <__aeabi_dmul>
 80142e2:	4602      	mov	r2, r0
 80142e4:	460b      	mov	r3, r1
 80142e6:	4630      	mov	r0, r6
 80142e8:	4639      	mov	r1, r7
 80142ea:	f7eb ffb1 	bl	8000250 <__adddf3>
 80142ee:	4606      	mov	r6, r0
 80142f0:	460f      	mov	r7, r1
 80142f2:	4602      	mov	r2, r0
 80142f4:	460b      	mov	r3, r1
 80142f6:	4640      	mov	r0, r8
 80142f8:	4649      	mov	r1, r9
 80142fa:	f7eb ffa9 	bl	8000250 <__adddf3>
 80142fe:	a33e      	add	r3, pc, #248	; (adr r3, 80143f8 <__ieee754_pow+0x738>)
 8014300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014304:	2000      	movs	r0, #0
 8014306:	4604      	mov	r4, r0
 8014308:	460d      	mov	r5, r1
 801430a:	f7ec f957 	bl	80005bc <__aeabi_dmul>
 801430e:	4642      	mov	r2, r8
 8014310:	ec41 0b18 	vmov	d8, r0, r1
 8014314:	464b      	mov	r3, r9
 8014316:	4620      	mov	r0, r4
 8014318:	4629      	mov	r1, r5
 801431a:	f7eb ff97 	bl	800024c <__aeabi_dsub>
 801431e:	4602      	mov	r2, r0
 8014320:	460b      	mov	r3, r1
 8014322:	4630      	mov	r0, r6
 8014324:	4639      	mov	r1, r7
 8014326:	f7eb ff91 	bl	800024c <__aeabi_dsub>
 801432a:	a335      	add	r3, pc, #212	; (adr r3, 8014400 <__ieee754_pow+0x740>)
 801432c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014330:	f7ec f944 	bl	80005bc <__aeabi_dmul>
 8014334:	a334      	add	r3, pc, #208	; (adr r3, 8014408 <__ieee754_pow+0x748>)
 8014336:	e9d3 2300 	ldrd	r2, r3, [r3]
 801433a:	4606      	mov	r6, r0
 801433c:	460f      	mov	r7, r1
 801433e:	4620      	mov	r0, r4
 8014340:	4629      	mov	r1, r5
 8014342:	f7ec f93b 	bl	80005bc <__aeabi_dmul>
 8014346:	4602      	mov	r2, r0
 8014348:	460b      	mov	r3, r1
 801434a:	4630      	mov	r0, r6
 801434c:	4639      	mov	r1, r7
 801434e:	f7eb ff7f 	bl	8000250 <__adddf3>
 8014352:	9a07      	ldr	r2, [sp, #28]
 8014354:	4b37      	ldr	r3, [pc, #220]	; (8014434 <__ieee754_pow+0x774>)
 8014356:	4413      	add	r3, r2
 8014358:	e9d3 2300 	ldrd	r2, r3, [r3]
 801435c:	f7eb ff78 	bl	8000250 <__adddf3>
 8014360:	4682      	mov	sl, r0
 8014362:	9805      	ldr	r0, [sp, #20]
 8014364:	468b      	mov	fp, r1
 8014366:	f7ec f8bf 	bl	80004e8 <__aeabi_i2d>
 801436a:	9a07      	ldr	r2, [sp, #28]
 801436c:	4b32      	ldr	r3, [pc, #200]	; (8014438 <__ieee754_pow+0x778>)
 801436e:	4413      	add	r3, r2
 8014370:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014374:	4606      	mov	r6, r0
 8014376:	460f      	mov	r7, r1
 8014378:	4652      	mov	r2, sl
 801437a:	465b      	mov	r3, fp
 801437c:	ec51 0b18 	vmov	r0, r1, d8
 8014380:	f7eb ff66 	bl	8000250 <__adddf3>
 8014384:	4642      	mov	r2, r8
 8014386:	464b      	mov	r3, r9
 8014388:	f7eb ff62 	bl	8000250 <__adddf3>
 801438c:	4632      	mov	r2, r6
 801438e:	463b      	mov	r3, r7
 8014390:	f7eb ff5e 	bl	8000250 <__adddf3>
 8014394:	2000      	movs	r0, #0
 8014396:	4632      	mov	r2, r6
 8014398:	463b      	mov	r3, r7
 801439a:	4604      	mov	r4, r0
 801439c:	460d      	mov	r5, r1
 801439e:	f7eb ff55 	bl	800024c <__aeabi_dsub>
 80143a2:	4642      	mov	r2, r8
 80143a4:	464b      	mov	r3, r9
 80143a6:	f7eb ff51 	bl	800024c <__aeabi_dsub>
 80143aa:	ec53 2b18 	vmov	r2, r3, d8
 80143ae:	f7eb ff4d 	bl	800024c <__aeabi_dsub>
 80143b2:	4602      	mov	r2, r0
 80143b4:	460b      	mov	r3, r1
 80143b6:	4650      	mov	r0, sl
 80143b8:	4659      	mov	r1, fp
 80143ba:	e610      	b.n	8013fde <__ieee754_pow+0x31e>
 80143bc:	2401      	movs	r4, #1
 80143be:	e6a1      	b.n	8014104 <__ieee754_pow+0x444>
 80143c0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8014410 <__ieee754_pow+0x750>
 80143c4:	e617      	b.n	8013ff6 <__ieee754_pow+0x336>
 80143c6:	bf00      	nop
 80143c8:	4a454eef 	.word	0x4a454eef
 80143cc:	3fca7e28 	.word	0x3fca7e28
 80143d0:	93c9db65 	.word	0x93c9db65
 80143d4:	3fcd864a 	.word	0x3fcd864a
 80143d8:	a91d4101 	.word	0xa91d4101
 80143dc:	3fd17460 	.word	0x3fd17460
 80143e0:	518f264d 	.word	0x518f264d
 80143e4:	3fd55555 	.word	0x3fd55555
 80143e8:	db6fabff 	.word	0xdb6fabff
 80143ec:	3fdb6db6 	.word	0x3fdb6db6
 80143f0:	33333303 	.word	0x33333303
 80143f4:	3fe33333 	.word	0x3fe33333
 80143f8:	e0000000 	.word	0xe0000000
 80143fc:	3feec709 	.word	0x3feec709
 8014400:	dc3a03fd 	.word	0xdc3a03fd
 8014404:	3feec709 	.word	0x3feec709
 8014408:	145b01f5 	.word	0x145b01f5
 801440c:	be3e2fe0 	.word	0xbe3e2fe0
 8014410:	00000000 	.word	0x00000000
 8014414:	3ff00000 	.word	0x3ff00000
 8014418:	7ff00000 	.word	0x7ff00000
 801441c:	43400000 	.word	0x43400000
 8014420:	0003988e 	.word	0x0003988e
 8014424:	000bb679 	.word	0x000bb679
 8014428:	08014c38 	.word	0x08014c38
 801442c:	3ff00000 	.word	0x3ff00000
 8014430:	40080000 	.word	0x40080000
 8014434:	08014c58 	.word	0x08014c58
 8014438:	08014c48 	.word	0x08014c48
 801443c:	a3b3      	add	r3, pc, #716	; (adr r3, 801470c <__ieee754_pow+0xa4c>)
 801443e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014442:	4640      	mov	r0, r8
 8014444:	4649      	mov	r1, r9
 8014446:	f7eb ff03 	bl	8000250 <__adddf3>
 801444a:	4622      	mov	r2, r4
 801444c:	ec41 0b1a 	vmov	d10, r0, r1
 8014450:	462b      	mov	r3, r5
 8014452:	4630      	mov	r0, r6
 8014454:	4639      	mov	r1, r7
 8014456:	f7eb fef9 	bl	800024c <__aeabi_dsub>
 801445a:	4602      	mov	r2, r0
 801445c:	460b      	mov	r3, r1
 801445e:	ec51 0b1a 	vmov	r0, r1, d10
 8014462:	f7ec fb3b 	bl	8000adc <__aeabi_dcmpgt>
 8014466:	2800      	cmp	r0, #0
 8014468:	f47f ae04 	bne.w	8014074 <__ieee754_pow+0x3b4>
 801446c:	4aa2      	ldr	r2, [pc, #648]	; (80146f8 <__ieee754_pow+0xa38>)
 801446e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014472:	4293      	cmp	r3, r2
 8014474:	f340 8107 	ble.w	8014686 <__ieee754_pow+0x9c6>
 8014478:	151b      	asrs	r3, r3, #20
 801447a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801447e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8014482:	fa4a fa03 	asr.w	sl, sl, r3
 8014486:	44da      	add	sl, fp
 8014488:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801448c:	489b      	ldr	r0, [pc, #620]	; (80146fc <__ieee754_pow+0xa3c>)
 801448e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8014492:	4108      	asrs	r0, r1
 8014494:	ea00 030a 	and.w	r3, r0, sl
 8014498:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801449c:	f1c1 0114 	rsb	r1, r1, #20
 80144a0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80144a4:	fa4a fa01 	asr.w	sl, sl, r1
 80144a8:	f1bb 0f00 	cmp.w	fp, #0
 80144ac:	f04f 0200 	mov.w	r2, #0
 80144b0:	4620      	mov	r0, r4
 80144b2:	4629      	mov	r1, r5
 80144b4:	bfb8      	it	lt
 80144b6:	f1ca 0a00 	rsblt	sl, sl, #0
 80144ba:	f7eb fec7 	bl	800024c <__aeabi_dsub>
 80144be:	ec41 0b19 	vmov	d9, r0, r1
 80144c2:	4642      	mov	r2, r8
 80144c4:	464b      	mov	r3, r9
 80144c6:	ec51 0b19 	vmov	r0, r1, d9
 80144ca:	f7eb fec1 	bl	8000250 <__adddf3>
 80144ce:	a37a      	add	r3, pc, #488	; (adr r3, 80146b8 <__ieee754_pow+0x9f8>)
 80144d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144d4:	2000      	movs	r0, #0
 80144d6:	4604      	mov	r4, r0
 80144d8:	460d      	mov	r5, r1
 80144da:	f7ec f86f 	bl	80005bc <__aeabi_dmul>
 80144de:	ec53 2b19 	vmov	r2, r3, d9
 80144e2:	4606      	mov	r6, r0
 80144e4:	460f      	mov	r7, r1
 80144e6:	4620      	mov	r0, r4
 80144e8:	4629      	mov	r1, r5
 80144ea:	f7eb feaf 	bl	800024c <__aeabi_dsub>
 80144ee:	4602      	mov	r2, r0
 80144f0:	460b      	mov	r3, r1
 80144f2:	4640      	mov	r0, r8
 80144f4:	4649      	mov	r1, r9
 80144f6:	f7eb fea9 	bl	800024c <__aeabi_dsub>
 80144fa:	a371      	add	r3, pc, #452	; (adr r3, 80146c0 <__ieee754_pow+0xa00>)
 80144fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014500:	f7ec f85c 	bl	80005bc <__aeabi_dmul>
 8014504:	a370      	add	r3, pc, #448	; (adr r3, 80146c8 <__ieee754_pow+0xa08>)
 8014506:	e9d3 2300 	ldrd	r2, r3, [r3]
 801450a:	4680      	mov	r8, r0
 801450c:	4689      	mov	r9, r1
 801450e:	4620      	mov	r0, r4
 8014510:	4629      	mov	r1, r5
 8014512:	f7ec f853 	bl	80005bc <__aeabi_dmul>
 8014516:	4602      	mov	r2, r0
 8014518:	460b      	mov	r3, r1
 801451a:	4640      	mov	r0, r8
 801451c:	4649      	mov	r1, r9
 801451e:	f7eb fe97 	bl	8000250 <__adddf3>
 8014522:	4604      	mov	r4, r0
 8014524:	460d      	mov	r5, r1
 8014526:	4602      	mov	r2, r0
 8014528:	460b      	mov	r3, r1
 801452a:	4630      	mov	r0, r6
 801452c:	4639      	mov	r1, r7
 801452e:	f7eb fe8f 	bl	8000250 <__adddf3>
 8014532:	4632      	mov	r2, r6
 8014534:	463b      	mov	r3, r7
 8014536:	4680      	mov	r8, r0
 8014538:	4689      	mov	r9, r1
 801453a:	f7eb fe87 	bl	800024c <__aeabi_dsub>
 801453e:	4602      	mov	r2, r0
 8014540:	460b      	mov	r3, r1
 8014542:	4620      	mov	r0, r4
 8014544:	4629      	mov	r1, r5
 8014546:	f7eb fe81 	bl	800024c <__aeabi_dsub>
 801454a:	4642      	mov	r2, r8
 801454c:	4606      	mov	r6, r0
 801454e:	460f      	mov	r7, r1
 8014550:	464b      	mov	r3, r9
 8014552:	4640      	mov	r0, r8
 8014554:	4649      	mov	r1, r9
 8014556:	f7ec f831 	bl	80005bc <__aeabi_dmul>
 801455a:	a35d      	add	r3, pc, #372	; (adr r3, 80146d0 <__ieee754_pow+0xa10>)
 801455c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014560:	4604      	mov	r4, r0
 8014562:	460d      	mov	r5, r1
 8014564:	f7ec f82a 	bl	80005bc <__aeabi_dmul>
 8014568:	a35b      	add	r3, pc, #364	; (adr r3, 80146d8 <__ieee754_pow+0xa18>)
 801456a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801456e:	f7eb fe6d 	bl	800024c <__aeabi_dsub>
 8014572:	4622      	mov	r2, r4
 8014574:	462b      	mov	r3, r5
 8014576:	f7ec f821 	bl	80005bc <__aeabi_dmul>
 801457a:	a359      	add	r3, pc, #356	; (adr r3, 80146e0 <__ieee754_pow+0xa20>)
 801457c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014580:	f7eb fe66 	bl	8000250 <__adddf3>
 8014584:	4622      	mov	r2, r4
 8014586:	462b      	mov	r3, r5
 8014588:	f7ec f818 	bl	80005bc <__aeabi_dmul>
 801458c:	a356      	add	r3, pc, #344	; (adr r3, 80146e8 <__ieee754_pow+0xa28>)
 801458e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014592:	f7eb fe5b 	bl	800024c <__aeabi_dsub>
 8014596:	4622      	mov	r2, r4
 8014598:	462b      	mov	r3, r5
 801459a:	f7ec f80f 	bl	80005bc <__aeabi_dmul>
 801459e:	a354      	add	r3, pc, #336	; (adr r3, 80146f0 <__ieee754_pow+0xa30>)
 80145a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145a4:	f7eb fe54 	bl	8000250 <__adddf3>
 80145a8:	4622      	mov	r2, r4
 80145aa:	462b      	mov	r3, r5
 80145ac:	f7ec f806 	bl	80005bc <__aeabi_dmul>
 80145b0:	4602      	mov	r2, r0
 80145b2:	460b      	mov	r3, r1
 80145b4:	4640      	mov	r0, r8
 80145b6:	4649      	mov	r1, r9
 80145b8:	f7eb fe48 	bl	800024c <__aeabi_dsub>
 80145bc:	4604      	mov	r4, r0
 80145be:	460d      	mov	r5, r1
 80145c0:	4602      	mov	r2, r0
 80145c2:	460b      	mov	r3, r1
 80145c4:	4640      	mov	r0, r8
 80145c6:	4649      	mov	r1, r9
 80145c8:	f7eb fff8 	bl	80005bc <__aeabi_dmul>
 80145cc:	2200      	movs	r2, #0
 80145ce:	ec41 0b19 	vmov	d9, r0, r1
 80145d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80145d6:	4620      	mov	r0, r4
 80145d8:	4629      	mov	r1, r5
 80145da:	f7eb fe37 	bl	800024c <__aeabi_dsub>
 80145de:	4602      	mov	r2, r0
 80145e0:	460b      	mov	r3, r1
 80145e2:	ec51 0b19 	vmov	r0, r1, d9
 80145e6:	f7ec f913 	bl	8000810 <__aeabi_ddiv>
 80145ea:	4632      	mov	r2, r6
 80145ec:	4604      	mov	r4, r0
 80145ee:	460d      	mov	r5, r1
 80145f0:	463b      	mov	r3, r7
 80145f2:	4640      	mov	r0, r8
 80145f4:	4649      	mov	r1, r9
 80145f6:	f7eb ffe1 	bl	80005bc <__aeabi_dmul>
 80145fa:	4632      	mov	r2, r6
 80145fc:	463b      	mov	r3, r7
 80145fe:	f7eb fe27 	bl	8000250 <__adddf3>
 8014602:	4602      	mov	r2, r0
 8014604:	460b      	mov	r3, r1
 8014606:	4620      	mov	r0, r4
 8014608:	4629      	mov	r1, r5
 801460a:	f7eb fe1f 	bl	800024c <__aeabi_dsub>
 801460e:	4642      	mov	r2, r8
 8014610:	464b      	mov	r3, r9
 8014612:	f7eb fe1b 	bl	800024c <__aeabi_dsub>
 8014616:	460b      	mov	r3, r1
 8014618:	4602      	mov	r2, r0
 801461a:	4939      	ldr	r1, [pc, #228]	; (8014700 <__ieee754_pow+0xa40>)
 801461c:	2000      	movs	r0, #0
 801461e:	f7eb fe15 	bl	800024c <__aeabi_dsub>
 8014622:	ec41 0b10 	vmov	d0, r0, r1
 8014626:	ee10 3a90 	vmov	r3, s1
 801462a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801462e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014632:	da2b      	bge.n	801468c <__ieee754_pow+0x9cc>
 8014634:	4650      	mov	r0, sl
 8014636:	f000 f877 	bl	8014728 <scalbn>
 801463a:	ec51 0b10 	vmov	r0, r1, d0
 801463e:	ec53 2b18 	vmov	r2, r3, d8
 8014642:	f7ff bbee 	b.w	8013e22 <__ieee754_pow+0x162>
 8014646:	4b2f      	ldr	r3, [pc, #188]	; (8014704 <__ieee754_pow+0xa44>)
 8014648:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801464c:	429e      	cmp	r6, r3
 801464e:	f77f af0d 	ble.w	801446c <__ieee754_pow+0x7ac>
 8014652:	4b2d      	ldr	r3, [pc, #180]	; (8014708 <__ieee754_pow+0xa48>)
 8014654:	440b      	add	r3, r1
 8014656:	4303      	orrs	r3, r0
 8014658:	d009      	beq.n	801466e <__ieee754_pow+0x9ae>
 801465a:	ec51 0b18 	vmov	r0, r1, d8
 801465e:	2200      	movs	r2, #0
 8014660:	2300      	movs	r3, #0
 8014662:	f7ec fa1d 	bl	8000aa0 <__aeabi_dcmplt>
 8014666:	3800      	subs	r0, #0
 8014668:	bf18      	it	ne
 801466a:	2001      	movne	r0, #1
 801466c:	e448      	b.n	8013f00 <__ieee754_pow+0x240>
 801466e:	4622      	mov	r2, r4
 8014670:	462b      	mov	r3, r5
 8014672:	f7eb fdeb 	bl	800024c <__aeabi_dsub>
 8014676:	4642      	mov	r2, r8
 8014678:	464b      	mov	r3, r9
 801467a:	f7ec fa25 	bl	8000ac8 <__aeabi_dcmpge>
 801467e:	2800      	cmp	r0, #0
 8014680:	f43f aef4 	beq.w	801446c <__ieee754_pow+0x7ac>
 8014684:	e7e9      	b.n	801465a <__ieee754_pow+0x99a>
 8014686:	f04f 0a00 	mov.w	sl, #0
 801468a:	e71a      	b.n	80144c2 <__ieee754_pow+0x802>
 801468c:	ec51 0b10 	vmov	r0, r1, d0
 8014690:	4619      	mov	r1, r3
 8014692:	e7d4      	b.n	801463e <__ieee754_pow+0x97e>
 8014694:	491a      	ldr	r1, [pc, #104]	; (8014700 <__ieee754_pow+0xa40>)
 8014696:	2000      	movs	r0, #0
 8014698:	f7ff bb31 	b.w	8013cfe <__ieee754_pow+0x3e>
 801469c:	2000      	movs	r0, #0
 801469e:	2100      	movs	r1, #0
 80146a0:	f7ff bb2d 	b.w	8013cfe <__ieee754_pow+0x3e>
 80146a4:	4630      	mov	r0, r6
 80146a6:	4639      	mov	r1, r7
 80146a8:	f7ff bb29 	b.w	8013cfe <__ieee754_pow+0x3e>
 80146ac:	9204      	str	r2, [sp, #16]
 80146ae:	f7ff bb7b 	b.w	8013da8 <__ieee754_pow+0xe8>
 80146b2:	2300      	movs	r3, #0
 80146b4:	f7ff bb65 	b.w	8013d82 <__ieee754_pow+0xc2>
 80146b8:	00000000 	.word	0x00000000
 80146bc:	3fe62e43 	.word	0x3fe62e43
 80146c0:	fefa39ef 	.word	0xfefa39ef
 80146c4:	3fe62e42 	.word	0x3fe62e42
 80146c8:	0ca86c39 	.word	0x0ca86c39
 80146cc:	be205c61 	.word	0xbe205c61
 80146d0:	72bea4d0 	.word	0x72bea4d0
 80146d4:	3e663769 	.word	0x3e663769
 80146d8:	c5d26bf1 	.word	0xc5d26bf1
 80146dc:	3ebbbd41 	.word	0x3ebbbd41
 80146e0:	af25de2c 	.word	0xaf25de2c
 80146e4:	3f11566a 	.word	0x3f11566a
 80146e8:	16bebd93 	.word	0x16bebd93
 80146ec:	3f66c16c 	.word	0x3f66c16c
 80146f0:	5555553e 	.word	0x5555553e
 80146f4:	3fc55555 	.word	0x3fc55555
 80146f8:	3fe00000 	.word	0x3fe00000
 80146fc:	fff00000 	.word	0xfff00000
 8014700:	3ff00000 	.word	0x3ff00000
 8014704:	4090cbff 	.word	0x4090cbff
 8014708:	3f6f3400 	.word	0x3f6f3400
 801470c:	652b82fe 	.word	0x652b82fe
 8014710:	3c971547 	.word	0x3c971547

08014714 <fabs>:
 8014714:	ec51 0b10 	vmov	r0, r1, d0
 8014718:	ee10 2a10 	vmov	r2, s0
 801471c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014720:	ec43 2b10 	vmov	d0, r2, r3
 8014724:	4770      	bx	lr
	...

08014728 <scalbn>:
 8014728:	b570      	push	{r4, r5, r6, lr}
 801472a:	ec55 4b10 	vmov	r4, r5, d0
 801472e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8014732:	4606      	mov	r6, r0
 8014734:	462b      	mov	r3, r5
 8014736:	b999      	cbnz	r1, 8014760 <scalbn+0x38>
 8014738:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801473c:	4323      	orrs	r3, r4
 801473e:	d03f      	beq.n	80147c0 <scalbn+0x98>
 8014740:	4b35      	ldr	r3, [pc, #212]	; (8014818 <scalbn+0xf0>)
 8014742:	4629      	mov	r1, r5
 8014744:	ee10 0a10 	vmov	r0, s0
 8014748:	2200      	movs	r2, #0
 801474a:	f7eb ff37 	bl	80005bc <__aeabi_dmul>
 801474e:	4b33      	ldr	r3, [pc, #204]	; (801481c <scalbn+0xf4>)
 8014750:	429e      	cmp	r6, r3
 8014752:	4604      	mov	r4, r0
 8014754:	460d      	mov	r5, r1
 8014756:	da10      	bge.n	801477a <scalbn+0x52>
 8014758:	a327      	add	r3, pc, #156	; (adr r3, 80147f8 <scalbn+0xd0>)
 801475a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801475e:	e01f      	b.n	80147a0 <scalbn+0x78>
 8014760:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8014764:	4291      	cmp	r1, r2
 8014766:	d10c      	bne.n	8014782 <scalbn+0x5a>
 8014768:	ee10 2a10 	vmov	r2, s0
 801476c:	4620      	mov	r0, r4
 801476e:	4629      	mov	r1, r5
 8014770:	f7eb fd6e 	bl	8000250 <__adddf3>
 8014774:	4604      	mov	r4, r0
 8014776:	460d      	mov	r5, r1
 8014778:	e022      	b.n	80147c0 <scalbn+0x98>
 801477a:	460b      	mov	r3, r1
 801477c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8014780:	3936      	subs	r1, #54	; 0x36
 8014782:	f24c 3250 	movw	r2, #50000	; 0xc350
 8014786:	4296      	cmp	r6, r2
 8014788:	dd0d      	ble.n	80147a6 <scalbn+0x7e>
 801478a:	2d00      	cmp	r5, #0
 801478c:	a11c      	add	r1, pc, #112	; (adr r1, 8014800 <scalbn+0xd8>)
 801478e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014792:	da02      	bge.n	801479a <scalbn+0x72>
 8014794:	a11c      	add	r1, pc, #112	; (adr r1, 8014808 <scalbn+0xe0>)
 8014796:	e9d1 0100 	ldrd	r0, r1, [r1]
 801479a:	a319      	add	r3, pc, #100	; (adr r3, 8014800 <scalbn+0xd8>)
 801479c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147a0:	f7eb ff0c 	bl	80005bc <__aeabi_dmul>
 80147a4:	e7e6      	b.n	8014774 <scalbn+0x4c>
 80147a6:	1872      	adds	r2, r6, r1
 80147a8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80147ac:	428a      	cmp	r2, r1
 80147ae:	dcec      	bgt.n	801478a <scalbn+0x62>
 80147b0:	2a00      	cmp	r2, #0
 80147b2:	dd08      	ble.n	80147c6 <scalbn+0x9e>
 80147b4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80147b8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80147bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80147c0:	ec45 4b10 	vmov	d0, r4, r5
 80147c4:	bd70      	pop	{r4, r5, r6, pc}
 80147c6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80147ca:	da08      	bge.n	80147de <scalbn+0xb6>
 80147cc:	2d00      	cmp	r5, #0
 80147ce:	a10a      	add	r1, pc, #40	; (adr r1, 80147f8 <scalbn+0xd0>)
 80147d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80147d4:	dac0      	bge.n	8014758 <scalbn+0x30>
 80147d6:	a10e      	add	r1, pc, #56	; (adr r1, 8014810 <scalbn+0xe8>)
 80147d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80147dc:	e7bc      	b.n	8014758 <scalbn+0x30>
 80147de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80147e2:	3236      	adds	r2, #54	; 0x36
 80147e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80147e8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80147ec:	4620      	mov	r0, r4
 80147ee:	4b0c      	ldr	r3, [pc, #48]	; (8014820 <scalbn+0xf8>)
 80147f0:	2200      	movs	r2, #0
 80147f2:	e7d5      	b.n	80147a0 <scalbn+0x78>
 80147f4:	f3af 8000 	nop.w
 80147f8:	c2f8f359 	.word	0xc2f8f359
 80147fc:	01a56e1f 	.word	0x01a56e1f
 8014800:	8800759c 	.word	0x8800759c
 8014804:	7e37e43c 	.word	0x7e37e43c
 8014808:	8800759c 	.word	0x8800759c
 801480c:	fe37e43c 	.word	0xfe37e43c
 8014810:	c2f8f359 	.word	0xc2f8f359
 8014814:	81a56e1f 	.word	0x81a56e1f
 8014818:	43500000 	.word	0x43500000
 801481c:	ffff3cb0 	.word	0xffff3cb0
 8014820:	3c900000 	.word	0x3c900000

08014824 <with_errno>:
 8014824:	b570      	push	{r4, r5, r6, lr}
 8014826:	4604      	mov	r4, r0
 8014828:	460d      	mov	r5, r1
 801482a:	4616      	mov	r6, r2
 801482c:	f7ff f938 	bl	8013aa0 <__errno>
 8014830:	4629      	mov	r1, r5
 8014832:	6006      	str	r6, [r0, #0]
 8014834:	4620      	mov	r0, r4
 8014836:	bd70      	pop	{r4, r5, r6, pc}

08014838 <xflow>:
 8014838:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801483a:	4614      	mov	r4, r2
 801483c:	461d      	mov	r5, r3
 801483e:	b108      	cbz	r0, 8014844 <xflow+0xc>
 8014840:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014844:	e9cd 2300 	strd	r2, r3, [sp]
 8014848:	e9dd 2300 	ldrd	r2, r3, [sp]
 801484c:	4620      	mov	r0, r4
 801484e:	4629      	mov	r1, r5
 8014850:	f7eb feb4 	bl	80005bc <__aeabi_dmul>
 8014854:	2222      	movs	r2, #34	; 0x22
 8014856:	b003      	add	sp, #12
 8014858:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801485c:	f7ff bfe2 	b.w	8014824 <with_errno>

08014860 <__math_uflow>:
 8014860:	b508      	push	{r3, lr}
 8014862:	2200      	movs	r2, #0
 8014864:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8014868:	f7ff ffe6 	bl	8014838 <xflow>
 801486c:	ec41 0b10 	vmov	d0, r0, r1
 8014870:	bd08      	pop	{r3, pc}

08014872 <__math_oflow>:
 8014872:	b508      	push	{r3, lr}
 8014874:	2200      	movs	r2, #0
 8014876:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801487a:	f7ff ffdd 	bl	8014838 <xflow>
 801487e:	ec41 0b10 	vmov	d0, r0, r1
 8014882:	bd08      	pop	{r3, pc}

08014884 <__ieee754_sqrt>:
 8014884:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014888:	ec55 4b10 	vmov	r4, r5, d0
 801488c:	4e67      	ldr	r6, [pc, #412]	; (8014a2c <__ieee754_sqrt+0x1a8>)
 801488e:	43ae      	bics	r6, r5
 8014890:	ee10 0a10 	vmov	r0, s0
 8014894:	ee10 2a10 	vmov	r2, s0
 8014898:	4629      	mov	r1, r5
 801489a:	462b      	mov	r3, r5
 801489c:	d10d      	bne.n	80148ba <__ieee754_sqrt+0x36>
 801489e:	f7eb fe8d 	bl	80005bc <__aeabi_dmul>
 80148a2:	4602      	mov	r2, r0
 80148a4:	460b      	mov	r3, r1
 80148a6:	4620      	mov	r0, r4
 80148a8:	4629      	mov	r1, r5
 80148aa:	f7eb fcd1 	bl	8000250 <__adddf3>
 80148ae:	4604      	mov	r4, r0
 80148b0:	460d      	mov	r5, r1
 80148b2:	ec45 4b10 	vmov	d0, r4, r5
 80148b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148ba:	2d00      	cmp	r5, #0
 80148bc:	dc0b      	bgt.n	80148d6 <__ieee754_sqrt+0x52>
 80148be:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80148c2:	4326      	orrs	r6, r4
 80148c4:	d0f5      	beq.n	80148b2 <__ieee754_sqrt+0x2e>
 80148c6:	b135      	cbz	r5, 80148d6 <__ieee754_sqrt+0x52>
 80148c8:	f7eb fcc0 	bl	800024c <__aeabi_dsub>
 80148cc:	4602      	mov	r2, r0
 80148ce:	460b      	mov	r3, r1
 80148d0:	f7eb ff9e 	bl	8000810 <__aeabi_ddiv>
 80148d4:	e7eb      	b.n	80148ae <__ieee754_sqrt+0x2a>
 80148d6:	1509      	asrs	r1, r1, #20
 80148d8:	f000 808d 	beq.w	80149f6 <__ieee754_sqrt+0x172>
 80148dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80148e0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80148e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80148e8:	07c9      	lsls	r1, r1, #31
 80148ea:	bf5c      	itt	pl
 80148ec:	005b      	lslpl	r3, r3, #1
 80148ee:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80148f2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80148f6:	bf58      	it	pl
 80148f8:	0052      	lslpl	r2, r2, #1
 80148fa:	2500      	movs	r5, #0
 80148fc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8014900:	1076      	asrs	r6, r6, #1
 8014902:	0052      	lsls	r2, r2, #1
 8014904:	f04f 0e16 	mov.w	lr, #22
 8014908:	46ac      	mov	ip, r5
 801490a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801490e:	eb0c 0001 	add.w	r0, ip, r1
 8014912:	4298      	cmp	r0, r3
 8014914:	bfde      	ittt	le
 8014916:	1a1b      	suble	r3, r3, r0
 8014918:	eb00 0c01 	addle.w	ip, r0, r1
 801491c:	186d      	addle	r5, r5, r1
 801491e:	005b      	lsls	r3, r3, #1
 8014920:	f1be 0e01 	subs.w	lr, lr, #1
 8014924:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8014928:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801492c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8014930:	d1ed      	bne.n	801490e <__ieee754_sqrt+0x8a>
 8014932:	4674      	mov	r4, lr
 8014934:	2720      	movs	r7, #32
 8014936:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801493a:	4563      	cmp	r3, ip
 801493c:	eb01 000e 	add.w	r0, r1, lr
 8014940:	dc02      	bgt.n	8014948 <__ieee754_sqrt+0xc4>
 8014942:	d113      	bne.n	801496c <__ieee754_sqrt+0xe8>
 8014944:	4290      	cmp	r0, r2
 8014946:	d811      	bhi.n	801496c <__ieee754_sqrt+0xe8>
 8014948:	2800      	cmp	r0, #0
 801494a:	eb00 0e01 	add.w	lr, r0, r1
 801494e:	da57      	bge.n	8014a00 <__ieee754_sqrt+0x17c>
 8014950:	f1be 0f00 	cmp.w	lr, #0
 8014954:	db54      	blt.n	8014a00 <__ieee754_sqrt+0x17c>
 8014956:	f10c 0801 	add.w	r8, ip, #1
 801495a:	eba3 030c 	sub.w	r3, r3, ip
 801495e:	4290      	cmp	r0, r2
 8014960:	bf88      	it	hi
 8014962:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8014966:	1a12      	subs	r2, r2, r0
 8014968:	440c      	add	r4, r1
 801496a:	46c4      	mov	ip, r8
 801496c:	005b      	lsls	r3, r3, #1
 801496e:	3f01      	subs	r7, #1
 8014970:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8014974:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8014978:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801497c:	d1dd      	bne.n	801493a <__ieee754_sqrt+0xb6>
 801497e:	4313      	orrs	r3, r2
 8014980:	d01b      	beq.n	80149ba <__ieee754_sqrt+0x136>
 8014982:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8014a30 <__ieee754_sqrt+0x1ac>
 8014986:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8014a34 <__ieee754_sqrt+0x1b0>
 801498a:	e9da 0100 	ldrd	r0, r1, [sl]
 801498e:	e9db 2300 	ldrd	r2, r3, [fp]
 8014992:	f7eb fc5b 	bl	800024c <__aeabi_dsub>
 8014996:	e9da 8900 	ldrd	r8, r9, [sl]
 801499a:	4602      	mov	r2, r0
 801499c:	460b      	mov	r3, r1
 801499e:	4640      	mov	r0, r8
 80149a0:	4649      	mov	r1, r9
 80149a2:	f7ec f887 	bl	8000ab4 <__aeabi_dcmple>
 80149a6:	b140      	cbz	r0, 80149ba <__ieee754_sqrt+0x136>
 80149a8:	f1b4 3fff 	cmp.w	r4, #4294967295
 80149ac:	e9da 0100 	ldrd	r0, r1, [sl]
 80149b0:	e9db 2300 	ldrd	r2, r3, [fp]
 80149b4:	d126      	bne.n	8014a04 <__ieee754_sqrt+0x180>
 80149b6:	3501      	adds	r5, #1
 80149b8:	463c      	mov	r4, r7
 80149ba:	106a      	asrs	r2, r5, #1
 80149bc:	0863      	lsrs	r3, r4, #1
 80149be:	07e9      	lsls	r1, r5, #31
 80149c0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80149c4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80149c8:	bf48      	it	mi
 80149ca:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80149ce:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80149d2:	461c      	mov	r4, r3
 80149d4:	e76d      	b.n	80148b2 <__ieee754_sqrt+0x2e>
 80149d6:	0ad3      	lsrs	r3, r2, #11
 80149d8:	3815      	subs	r0, #21
 80149da:	0552      	lsls	r2, r2, #21
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d0fa      	beq.n	80149d6 <__ieee754_sqrt+0x152>
 80149e0:	02dc      	lsls	r4, r3, #11
 80149e2:	d50a      	bpl.n	80149fa <__ieee754_sqrt+0x176>
 80149e4:	f1c1 0420 	rsb	r4, r1, #32
 80149e8:	fa22 f404 	lsr.w	r4, r2, r4
 80149ec:	1e4d      	subs	r5, r1, #1
 80149ee:	408a      	lsls	r2, r1
 80149f0:	4323      	orrs	r3, r4
 80149f2:	1b41      	subs	r1, r0, r5
 80149f4:	e772      	b.n	80148dc <__ieee754_sqrt+0x58>
 80149f6:	4608      	mov	r0, r1
 80149f8:	e7f0      	b.n	80149dc <__ieee754_sqrt+0x158>
 80149fa:	005b      	lsls	r3, r3, #1
 80149fc:	3101      	adds	r1, #1
 80149fe:	e7ef      	b.n	80149e0 <__ieee754_sqrt+0x15c>
 8014a00:	46e0      	mov	r8, ip
 8014a02:	e7aa      	b.n	801495a <__ieee754_sqrt+0xd6>
 8014a04:	f7eb fc24 	bl	8000250 <__adddf3>
 8014a08:	e9da 8900 	ldrd	r8, r9, [sl]
 8014a0c:	4602      	mov	r2, r0
 8014a0e:	460b      	mov	r3, r1
 8014a10:	4640      	mov	r0, r8
 8014a12:	4649      	mov	r1, r9
 8014a14:	f7ec f844 	bl	8000aa0 <__aeabi_dcmplt>
 8014a18:	b120      	cbz	r0, 8014a24 <__ieee754_sqrt+0x1a0>
 8014a1a:	1ca0      	adds	r0, r4, #2
 8014a1c:	bf08      	it	eq
 8014a1e:	3501      	addeq	r5, #1
 8014a20:	3402      	adds	r4, #2
 8014a22:	e7ca      	b.n	80149ba <__ieee754_sqrt+0x136>
 8014a24:	3401      	adds	r4, #1
 8014a26:	f024 0401 	bic.w	r4, r4, #1
 8014a2a:	e7c6      	b.n	80149ba <__ieee754_sqrt+0x136>
 8014a2c:	7ff00000 	.word	0x7ff00000
 8014a30:	200001e0 	.word	0x200001e0
 8014a34:	200001e8 	.word	0x200001e8

08014a38 <_init>:
 8014a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a3a:	bf00      	nop
 8014a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014a3e:	bc08      	pop	{r3}
 8014a40:	469e      	mov	lr, r3
 8014a42:	4770      	bx	lr

08014a44 <_fini>:
 8014a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a46:	bf00      	nop
 8014a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014a4a:	bc08      	pop	{r3}
 8014a4c:	469e      	mov	lr, r3
 8014a4e:	4770      	bx	lr
