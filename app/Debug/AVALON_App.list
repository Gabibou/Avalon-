
AVALON_App.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  0800d800  0800d800  0000d800  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee08  0800d9e0  0800d9e0  0000d9e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  0801c7e8  0801c7e8  0001c7e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ca70  0801ca70  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0801ca70  0801ca70  0001ca70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ca78  0801ca78  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ca78  0801ca78  0001ca78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ca7c  0801ca7c  0001ca7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0801ca80  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003c48  20000078  0801caf8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003cc0  0801caf8  00023cc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002c034  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005df6  00000000  00000000  0004c194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000021e8  00000000  00000000  00051f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a25  00000000  00000000  00054178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002fc06  00000000  00000000  00055b9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002ee8b  00000000  00000000  000857a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00123542  00000000  00000000  000b462e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009600  00000000  00000000  001d7b70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  001e1170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00000010  00000000  00000000  001e11e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800d9e0 <__do_global_dtors_aux>:
 800d9e0:	b510      	push	{r4, lr}
 800d9e2:	4c05      	ldr	r4, [pc, #20]	; (800d9f8 <__do_global_dtors_aux+0x18>)
 800d9e4:	7823      	ldrb	r3, [r4, #0]
 800d9e6:	b933      	cbnz	r3, 800d9f6 <__do_global_dtors_aux+0x16>
 800d9e8:	4b04      	ldr	r3, [pc, #16]	; (800d9fc <__do_global_dtors_aux+0x1c>)
 800d9ea:	b113      	cbz	r3, 800d9f2 <__do_global_dtors_aux+0x12>
 800d9ec:	4804      	ldr	r0, [pc, #16]	; (800da00 <__do_global_dtors_aux+0x20>)
 800d9ee:	f3af 8000 	nop.w
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	7023      	strb	r3, [r4, #0]
 800d9f6:	bd10      	pop	{r4, pc}
 800d9f8:	20000078 	.word	0x20000078
 800d9fc:	00000000 	.word	0x00000000
 800da00:	0801c7d0 	.word	0x0801c7d0

0800da04 <frame_dummy>:
 800da04:	b508      	push	{r3, lr}
 800da06:	4b03      	ldr	r3, [pc, #12]	; (800da14 <frame_dummy+0x10>)
 800da08:	b11b      	cbz	r3, 800da12 <frame_dummy+0xe>
 800da0a:	4903      	ldr	r1, [pc, #12]	; (800da18 <frame_dummy+0x14>)
 800da0c:	4803      	ldr	r0, [pc, #12]	; (800da1c <frame_dummy+0x18>)
 800da0e:	f3af 8000 	nop.w
 800da12:	bd08      	pop	{r3, pc}
 800da14:	00000000 	.word	0x00000000
 800da18:	2000007c 	.word	0x2000007c
 800da1c:	0801c7d0 	.word	0x0801c7d0

0800da20 <strcmp>:
 800da20:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da24:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da28:	2a01      	cmp	r2, #1
 800da2a:	bf28      	it	cs
 800da2c:	429a      	cmpcs	r2, r3
 800da2e:	d0f7      	beq.n	800da20 <strcmp>
 800da30:	1ad0      	subs	r0, r2, r3
 800da32:	4770      	bx	lr

0800da34 <strlen>:
 800da34:	4603      	mov	r3, r0
 800da36:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da3a:	2a00      	cmp	r2, #0
 800da3c:	d1fb      	bne.n	800da36 <strlen+0x2>
 800da3e:	1a18      	subs	r0, r3, r0
 800da40:	3801      	subs	r0, #1
 800da42:	4770      	bx	lr

0800da44 <__aeabi_drsub>:
 800da44:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800da48:	e002      	b.n	800da50 <__adddf3>
 800da4a:	bf00      	nop

0800da4c <__aeabi_dsub>:
 800da4c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800da50 <__adddf3>:
 800da50:	b530      	push	{r4, r5, lr}
 800da52:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800da56:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800da5a:	ea94 0f05 	teq	r4, r5
 800da5e:	bf08      	it	eq
 800da60:	ea90 0f02 	teqeq	r0, r2
 800da64:	bf1f      	itttt	ne
 800da66:	ea54 0c00 	orrsne.w	ip, r4, r0
 800da6a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800da6e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800da72:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800da76:	f000 80e2 	beq.w	800dc3e <__adddf3+0x1ee>
 800da7a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800da7e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800da82:	bfb8      	it	lt
 800da84:	426d      	neglt	r5, r5
 800da86:	dd0c      	ble.n	800daa2 <__adddf3+0x52>
 800da88:	442c      	add	r4, r5
 800da8a:	ea80 0202 	eor.w	r2, r0, r2
 800da8e:	ea81 0303 	eor.w	r3, r1, r3
 800da92:	ea82 0000 	eor.w	r0, r2, r0
 800da96:	ea83 0101 	eor.w	r1, r3, r1
 800da9a:	ea80 0202 	eor.w	r2, r0, r2
 800da9e:	ea81 0303 	eor.w	r3, r1, r3
 800daa2:	2d36      	cmp	r5, #54	; 0x36
 800daa4:	bf88      	it	hi
 800daa6:	bd30      	pophi	{r4, r5, pc}
 800daa8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800daac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800dab0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800dab4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800dab8:	d002      	beq.n	800dac0 <__adddf3+0x70>
 800daba:	4240      	negs	r0, r0
 800dabc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800dac0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800dac4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800dac8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800dacc:	d002      	beq.n	800dad4 <__adddf3+0x84>
 800dace:	4252      	negs	r2, r2
 800dad0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800dad4:	ea94 0f05 	teq	r4, r5
 800dad8:	f000 80a7 	beq.w	800dc2a <__adddf3+0x1da>
 800dadc:	f1a4 0401 	sub.w	r4, r4, #1
 800dae0:	f1d5 0e20 	rsbs	lr, r5, #32
 800dae4:	db0d      	blt.n	800db02 <__adddf3+0xb2>
 800dae6:	fa02 fc0e 	lsl.w	ip, r2, lr
 800daea:	fa22 f205 	lsr.w	r2, r2, r5
 800daee:	1880      	adds	r0, r0, r2
 800daf0:	f141 0100 	adc.w	r1, r1, #0
 800daf4:	fa03 f20e 	lsl.w	r2, r3, lr
 800daf8:	1880      	adds	r0, r0, r2
 800dafa:	fa43 f305 	asr.w	r3, r3, r5
 800dafe:	4159      	adcs	r1, r3
 800db00:	e00e      	b.n	800db20 <__adddf3+0xd0>
 800db02:	f1a5 0520 	sub.w	r5, r5, #32
 800db06:	f10e 0e20 	add.w	lr, lr, #32
 800db0a:	2a01      	cmp	r2, #1
 800db0c:	fa03 fc0e 	lsl.w	ip, r3, lr
 800db10:	bf28      	it	cs
 800db12:	f04c 0c02 	orrcs.w	ip, ip, #2
 800db16:	fa43 f305 	asr.w	r3, r3, r5
 800db1a:	18c0      	adds	r0, r0, r3
 800db1c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800db20:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800db24:	d507      	bpl.n	800db36 <__adddf3+0xe6>
 800db26:	f04f 0e00 	mov.w	lr, #0
 800db2a:	f1dc 0c00 	rsbs	ip, ip, #0
 800db2e:	eb7e 0000 	sbcs.w	r0, lr, r0
 800db32:	eb6e 0101 	sbc.w	r1, lr, r1
 800db36:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800db3a:	d31b      	bcc.n	800db74 <__adddf3+0x124>
 800db3c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800db40:	d30c      	bcc.n	800db5c <__adddf3+0x10c>
 800db42:	0849      	lsrs	r1, r1, #1
 800db44:	ea5f 0030 	movs.w	r0, r0, rrx
 800db48:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800db4c:	f104 0401 	add.w	r4, r4, #1
 800db50:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800db54:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800db58:	f080 809a 	bcs.w	800dc90 <__adddf3+0x240>
 800db5c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800db60:	bf08      	it	eq
 800db62:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800db66:	f150 0000 	adcs.w	r0, r0, #0
 800db6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800db6e:	ea41 0105 	orr.w	r1, r1, r5
 800db72:	bd30      	pop	{r4, r5, pc}
 800db74:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800db78:	4140      	adcs	r0, r0
 800db7a:	eb41 0101 	adc.w	r1, r1, r1
 800db7e:	3c01      	subs	r4, #1
 800db80:	bf28      	it	cs
 800db82:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800db86:	d2e9      	bcs.n	800db5c <__adddf3+0x10c>
 800db88:	f091 0f00 	teq	r1, #0
 800db8c:	bf04      	itt	eq
 800db8e:	4601      	moveq	r1, r0
 800db90:	2000      	moveq	r0, #0
 800db92:	fab1 f381 	clz	r3, r1
 800db96:	bf08      	it	eq
 800db98:	3320      	addeq	r3, #32
 800db9a:	f1a3 030b 	sub.w	r3, r3, #11
 800db9e:	f1b3 0220 	subs.w	r2, r3, #32
 800dba2:	da0c      	bge.n	800dbbe <__adddf3+0x16e>
 800dba4:	320c      	adds	r2, #12
 800dba6:	dd08      	ble.n	800dbba <__adddf3+0x16a>
 800dba8:	f102 0c14 	add.w	ip, r2, #20
 800dbac:	f1c2 020c 	rsb	r2, r2, #12
 800dbb0:	fa01 f00c 	lsl.w	r0, r1, ip
 800dbb4:	fa21 f102 	lsr.w	r1, r1, r2
 800dbb8:	e00c      	b.n	800dbd4 <__adddf3+0x184>
 800dbba:	f102 0214 	add.w	r2, r2, #20
 800dbbe:	bfd8      	it	le
 800dbc0:	f1c2 0c20 	rsble	ip, r2, #32
 800dbc4:	fa01 f102 	lsl.w	r1, r1, r2
 800dbc8:	fa20 fc0c 	lsr.w	ip, r0, ip
 800dbcc:	bfdc      	itt	le
 800dbce:	ea41 010c 	orrle.w	r1, r1, ip
 800dbd2:	4090      	lslle	r0, r2
 800dbd4:	1ae4      	subs	r4, r4, r3
 800dbd6:	bfa2      	ittt	ge
 800dbd8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800dbdc:	4329      	orrge	r1, r5
 800dbde:	bd30      	popge	{r4, r5, pc}
 800dbe0:	ea6f 0404 	mvn.w	r4, r4
 800dbe4:	3c1f      	subs	r4, #31
 800dbe6:	da1c      	bge.n	800dc22 <__adddf3+0x1d2>
 800dbe8:	340c      	adds	r4, #12
 800dbea:	dc0e      	bgt.n	800dc0a <__adddf3+0x1ba>
 800dbec:	f104 0414 	add.w	r4, r4, #20
 800dbf0:	f1c4 0220 	rsb	r2, r4, #32
 800dbf4:	fa20 f004 	lsr.w	r0, r0, r4
 800dbf8:	fa01 f302 	lsl.w	r3, r1, r2
 800dbfc:	ea40 0003 	orr.w	r0, r0, r3
 800dc00:	fa21 f304 	lsr.w	r3, r1, r4
 800dc04:	ea45 0103 	orr.w	r1, r5, r3
 800dc08:	bd30      	pop	{r4, r5, pc}
 800dc0a:	f1c4 040c 	rsb	r4, r4, #12
 800dc0e:	f1c4 0220 	rsb	r2, r4, #32
 800dc12:	fa20 f002 	lsr.w	r0, r0, r2
 800dc16:	fa01 f304 	lsl.w	r3, r1, r4
 800dc1a:	ea40 0003 	orr.w	r0, r0, r3
 800dc1e:	4629      	mov	r1, r5
 800dc20:	bd30      	pop	{r4, r5, pc}
 800dc22:	fa21 f004 	lsr.w	r0, r1, r4
 800dc26:	4629      	mov	r1, r5
 800dc28:	bd30      	pop	{r4, r5, pc}
 800dc2a:	f094 0f00 	teq	r4, #0
 800dc2e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800dc32:	bf06      	itte	eq
 800dc34:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800dc38:	3401      	addeq	r4, #1
 800dc3a:	3d01      	subne	r5, #1
 800dc3c:	e74e      	b.n	800dadc <__adddf3+0x8c>
 800dc3e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800dc42:	bf18      	it	ne
 800dc44:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800dc48:	d029      	beq.n	800dc9e <__adddf3+0x24e>
 800dc4a:	ea94 0f05 	teq	r4, r5
 800dc4e:	bf08      	it	eq
 800dc50:	ea90 0f02 	teqeq	r0, r2
 800dc54:	d005      	beq.n	800dc62 <__adddf3+0x212>
 800dc56:	ea54 0c00 	orrs.w	ip, r4, r0
 800dc5a:	bf04      	itt	eq
 800dc5c:	4619      	moveq	r1, r3
 800dc5e:	4610      	moveq	r0, r2
 800dc60:	bd30      	pop	{r4, r5, pc}
 800dc62:	ea91 0f03 	teq	r1, r3
 800dc66:	bf1e      	ittt	ne
 800dc68:	2100      	movne	r1, #0
 800dc6a:	2000      	movne	r0, #0
 800dc6c:	bd30      	popne	{r4, r5, pc}
 800dc6e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800dc72:	d105      	bne.n	800dc80 <__adddf3+0x230>
 800dc74:	0040      	lsls	r0, r0, #1
 800dc76:	4149      	adcs	r1, r1
 800dc78:	bf28      	it	cs
 800dc7a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800dc7e:	bd30      	pop	{r4, r5, pc}
 800dc80:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800dc84:	bf3c      	itt	cc
 800dc86:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800dc8a:	bd30      	popcc	{r4, r5, pc}
 800dc8c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800dc90:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800dc94:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800dc98:	f04f 0000 	mov.w	r0, #0
 800dc9c:	bd30      	pop	{r4, r5, pc}
 800dc9e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800dca2:	bf1a      	itte	ne
 800dca4:	4619      	movne	r1, r3
 800dca6:	4610      	movne	r0, r2
 800dca8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800dcac:	bf1c      	itt	ne
 800dcae:	460b      	movne	r3, r1
 800dcb0:	4602      	movne	r2, r0
 800dcb2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800dcb6:	bf06      	itte	eq
 800dcb8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800dcbc:	ea91 0f03 	teqeq	r1, r3
 800dcc0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800dcc4:	bd30      	pop	{r4, r5, pc}
 800dcc6:	bf00      	nop

0800dcc8 <__aeabi_ui2d>:
 800dcc8:	f090 0f00 	teq	r0, #0
 800dccc:	bf04      	itt	eq
 800dcce:	2100      	moveq	r1, #0
 800dcd0:	4770      	bxeq	lr
 800dcd2:	b530      	push	{r4, r5, lr}
 800dcd4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800dcd8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800dcdc:	f04f 0500 	mov.w	r5, #0
 800dce0:	f04f 0100 	mov.w	r1, #0
 800dce4:	e750      	b.n	800db88 <__adddf3+0x138>
 800dce6:	bf00      	nop

0800dce8 <__aeabi_i2d>:
 800dce8:	f090 0f00 	teq	r0, #0
 800dcec:	bf04      	itt	eq
 800dcee:	2100      	moveq	r1, #0
 800dcf0:	4770      	bxeq	lr
 800dcf2:	b530      	push	{r4, r5, lr}
 800dcf4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800dcf8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800dcfc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800dd00:	bf48      	it	mi
 800dd02:	4240      	negmi	r0, r0
 800dd04:	f04f 0100 	mov.w	r1, #0
 800dd08:	e73e      	b.n	800db88 <__adddf3+0x138>
 800dd0a:	bf00      	nop

0800dd0c <__aeabi_f2d>:
 800dd0c:	0042      	lsls	r2, r0, #1
 800dd0e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800dd12:	ea4f 0131 	mov.w	r1, r1, rrx
 800dd16:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800dd1a:	bf1f      	itttt	ne
 800dd1c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800dd20:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800dd24:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800dd28:	4770      	bxne	lr
 800dd2a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800dd2e:	bf08      	it	eq
 800dd30:	4770      	bxeq	lr
 800dd32:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800dd36:	bf04      	itt	eq
 800dd38:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800dd3c:	4770      	bxeq	lr
 800dd3e:	b530      	push	{r4, r5, lr}
 800dd40:	f44f 7460 	mov.w	r4, #896	; 0x380
 800dd44:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800dd48:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800dd4c:	e71c      	b.n	800db88 <__adddf3+0x138>
 800dd4e:	bf00      	nop

0800dd50 <__aeabi_ul2d>:
 800dd50:	ea50 0201 	orrs.w	r2, r0, r1
 800dd54:	bf08      	it	eq
 800dd56:	4770      	bxeq	lr
 800dd58:	b530      	push	{r4, r5, lr}
 800dd5a:	f04f 0500 	mov.w	r5, #0
 800dd5e:	e00a      	b.n	800dd76 <__aeabi_l2d+0x16>

0800dd60 <__aeabi_l2d>:
 800dd60:	ea50 0201 	orrs.w	r2, r0, r1
 800dd64:	bf08      	it	eq
 800dd66:	4770      	bxeq	lr
 800dd68:	b530      	push	{r4, r5, lr}
 800dd6a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800dd6e:	d502      	bpl.n	800dd76 <__aeabi_l2d+0x16>
 800dd70:	4240      	negs	r0, r0
 800dd72:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800dd76:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800dd7a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800dd7e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800dd82:	f43f aed8 	beq.w	800db36 <__adddf3+0xe6>
 800dd86:	f04f 0203 	mov.w	r2, #3
 800dd8a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800dd8e:	bf18      	it	ne
 800dd90:	3203      	addne	r2, #3
 800dd92:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800dd96:	bf18      	it	ne
 800dd98:	3203      	addne	r2, #3
 800dd9a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800dd9e:	f1c2 0320 	rsb	r3, r2, #32
 800dda2:	fa00 fc03 	lsl.w	ip, r0, r3
 800dda6:	fa20 f002 	lsr.w	r0, r0, r2
 800ddaa:	fa01 fe03 	lsl.w	lr, r1, r3
 800ddae:	ea40 000e 	orr.w	r0, r0, lr
 800ddb2:	fa21 f102 	lsr.w	r1, r1, r2
 800ddb6:	4414      	add	r4, r2
 800ddb8:	e6bd      	b.n	800db36 <__adddf3+0xe6>
 800ddba:	bf00      	nop

0800ddbc <__aeabi_dmul>:
 800ddbc:	b570      	push	{r4, r5, r6, lr}
 800ddbe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800ddc2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800ddc6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800ddca:	bf1d      	ittte	ne
 800ddcc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800ddd0:	ea94 0f0c 	teqne	r4, ip
 800ddd4:	ea95 0f0c 	teqne	r5, ip
 800ddd8:	f000 f8de 	bleq	800df98 <__aeabi_dmul+0x1dc>
 800dddc:	442c      	add	r4, r5
 800ddde:	ea81 0603 	eor.w	r6, r1, r3
 800dde2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800dde6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800ddea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800ddee:	bf18      	it	ne
 800ddf0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800ddf4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ddf8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ddfc:	d038      	beq.n	800de70 <__aeabi_dmul+0xb4>
 800ddfe:	fba0 ce02 	umull	ip, lr, r0, r2
 800de02:	f04f 0500 	mov.w	r5, #0
 800de06:	fbe1 e502 	umlal	lr, r5, r1, r2
 800de0a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800de0e:	fbe0 e503 	umlal	lr, r5, r0, r3
 800de12:	f04f 0600 	mov.w	r6, #0
 800de16:	fbe1 5603 	umlal	r5, r6, r1, r3
 800de1a:	f09c 0f00 	teq	ip, #0
 800de1e:	bf18      	it	ne
 800de20:	f04e 0e01 	orrne.w	lr, lr, #1
 800de24:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800de28:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800de2c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800de30:	d204      	bcs.n	800de3c <__aeabi_dmul+0x80>
 800de32:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800de36:	416d      	adcs	r5, r5
 800de38:	eb46 0606 	adc.w	r6, r6, r6
 800de3c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800de40:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800de44:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800de48:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800de4c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800de50:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800de54:	bf88      	it	hi
 800de56:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800de5a:	d81e      	bhi.n	800de9a <__aeabi_dmul+0xde>
 800de5c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800de60:	bf08      	it	eq
 800de62:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800de66:	f150 0000 	adcs.w	r0, r0, #0
 800de6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800de6e:	bd70      	pop	{r4, r5, r6, pc}
 800de70:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800de74:	ea46 0101 	orr.w	r1, r6, r1
 800de78:	ea40 0002 	orr.w	r0, r0, r2
 800de7c:	ea81 0103 	eor.w	r1, r1, r3
 800de80:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800de84:	bfc2      	ittt	gt
 800de86:	ebd4 050c 	rsbsgt	r5, r4, ip
 800de8a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800de8e:	bd70      	popgt	{r4, r5, r6, pc}
 800de90:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800de94:	f04f 0e00 	mov.w	lr, #0
 800de98:	3c01      	subs	r4, #1
 800de9a:	f300 80ab 	bgt.w	800dff4 <__aeabi_dmul+0x238>
 800de9e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800dea2:	bfde      	ittt	le
 800dea4:	2000      	movle	r0, #0
 800dea6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800deaa:	bd70      	pople	{r4, r5, r6, pc}
 800deac:	f1c4 0400 	rsb	r4, r4, #0
 800deb0:	3c20      	subs	r4, #32
 800deb2:	da35      	bge.n	800df20 <__aeabi_dmul+0x164>
 800deb4:	340c      	adds	r4, #12
 800deb6:	dc1b      	bgt.n	800def0 <__aeabi_dmul+0x134>
 800deb8:	f104 0414 	add.w	r4, r4, #20
 800debc:	f1c4 0520 	rsb	r5, r4, #32
 800dec0:	fa00 f305 	lsl.w	r3, r0, r5
 800dec4:	fa20 f004 	lsr.w	r0, r0, r4
 800dec8:	fa01 f205 	lsl.w	r2, r1, r5
 800decc:	ea40 0002 	orr.w	r0, r0, r2
 800ded0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800ded4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ded8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800dedc:	fa21 f604 	lsr.w	r6, r1, r4
 800dee0:	eb42 0106 	adc.w	r1, r2, r6
 800dee4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800dee8:	bf08      	it	eq
 800deea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800deee:	bd70      	pop	{r4, r5, r6, pc}
 800def0:	f1c4 040c 	rsb	r4, r4, #12
 800def4:	f1c4 0520 	rsb	r5, r4, #32
 800def8:	fa00 f304 	lsl.w	r3, r0, r4
 800defc:	fa20 f005 	lsr.w	r0, r0, r5
 800df00:	fa01 f204 	lsl.w	r2, r1, r4
 800df04:	ea40 0002 	orr.w	r0, r0, r2
 800df08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800df0c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800df10:	f141 0100 	adc.w	r1, r1, #0
 800df14:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800df18:	bf08      	it	eq
 800df1a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800df1e:	bd70      	pop	{r4, r5, r6, pc}
 800df20:	f1c4 0520 	rsb	r5, r4, #32
 800df24:	fa00 f205 	lsl.w	r2, r0, r5
 800df28:	ea4e 0e02 	orr.w	lr, lr, r2
 800df2c:	fa20 f304 	lsr.w	r3, r0, r4
 800df30:	fa01 f205 	lsl.w	r2, r1, r5
 800df34:	ea43 0302 	orr.w	r3, r3, r2
 800df38:	fa21 f004 	lsr.w	r0, r1, r4
 800df3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800df40:	fa21 f204 	lsr.w	r2, r1, r4
 800df44:	ea20 0002 	bic.w	r0, r0, r2
 800df48:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800df4c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800df50:	bf08      	it	eq
 800df52:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800df56:	bd70      	pop	{r4, r5, r6, pc}
 800df58:	f094 0f00 	teq	r4, #0
 800df5c:	d10f      	bne.n	800df7e <__aeabi_dmul+0x1c2>
 800df5e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800df62:	0040      	lsls	r0, r0, #1
 800df64:	eb41 0101 	adc.w	r1, r1, r1
 800df68:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800df6c:	bf08      	it	eq
 800df6e:	3c01      	subeq	r4, #1
 800df70:	d0f7      	beq.n	800df62 <__aeabi_dmul+0x1a6>
 800df72:	ea41 0106 	orr.w	r1, r1, r6
 800df76:	f095 0f00 	teq	r5, #0
 800df7a:	bf18      	it	ne
 800df7c:	4770      	bxne	lr
 800df7e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800df82:	0052      	lsls	r2, r2, #1
 800df84:	eb43 0303 	adc.w	r3, r3, r3
 800df88:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800df8c:	bf08      	it	eq
 800df8e:	3d01      	subeq	r5, #1
 800df90:	d0f7      	beq.n	800df82 <__aeabi_dmul+0x1c6>
 800df92:	ea43 0306 	orr.w	r3, r3, r6
 800df96:	4770      	bx	lr
 800df98:	ea94 0f0c 	teq	r4, ip
 800df9c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800dfa0:	bf18      	it	ne
 800dfa2:	ea95 0f0c 	teqne	r5, ip
 800dfa6:	d00c      	beq.n	800dfc2 <__aeabi_dmul+0x206>
 800dfa8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800dfac:	bf18      	it	ne
 800dfae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800dfb2:	d1d1      	bne.n	800df58 <__aeabi_dmul+0x19c>
 800dfb4:	ea81 0103 	eor.w	r1, r1, r3
 800dfb8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800dfbc:	f04f 0000 	mov.w	r0, #0
 800dfc0:	bd70      	pop	{r4, r5, r6, pc}
 800dfc2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800dfc6:	bf06      	itte	eq
 800dfc8:	4610      	moveq	r0, r2
 800dfca:	4619      	moveq	r1, r3
 800dfcc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800dfd0:	d019      	beq.n	800e006 <__aeabi_dmul+0x24a>
 800dfd2:	ea94 0f0c 	teq	r4, ip
 800dfd6:	d102      	bne.n	800dfde <__aeabi_dmul+0x222>
 800dfd8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800dfdc:	d113      	bne.n	800e006 <__aeabi_dmul+0x24a>
 800dfde:	ea95 0f0c 	teq	r5, ip
 800dfe2:	d105      	bne.n	800dff0 <__aeabi_dmul+0x234>
 800dfe4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800dfe8:	bf1c      	itt	ne
 800dfea:	4610      	movne	r0, r2
 800dfec:	4619      	movne	r1, r3
 800dfee:	d10a      	bne.n	800e006 <__aeabi_dmul+0x24a>
 800dff0:	ea81 0103 	eor.w	r1, r1, r3
 800dff4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800dff8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800dffc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e000:	f04f 0000 	mov.w	r0, #0
 800e004:	bd70      	pop	{r4, r5, r6, pc}
 800e006:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800e00a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800e00e:	bd70      	pop	{r4, r5, r6, pc}

0800e010 <__aeabi_ddiv>:
 800e010:	b570      	push	{r4, r5, r6, lr}
 800e012:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800e016:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800e01a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800e01e:	bf1d      	ittte	ne
 800e020:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800e024:	ea94 0f0c 	teqne	r4, ip
 800e028:	ea95 0f0c 	teqne	r5, ip
 800e02c:	f000 f8a7 	bleq	800e17e <__aeabi_ddiv+0x16e>
 800e030:	eba4 0405 	sub.w	r4, r4, r5
 800e034:	ea81 0e03 	eor.w	lr, r1, r3
 800e038:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800e03c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800e040:	f000 8088 	beq.w	800e154 <__aeabi_ddiv+0x144>
 800e044:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800e048:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800e04c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800e050:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800e054:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800e058:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800e05c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800e060:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800e064:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800e068:	429d      	cmp	r5, r3
 800e06a:	bf08      	it	eq
 800e06c:	4296      	cmpeq	r6, r2
 800e06e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800e072:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800e076:	d202      	bcs.n	800e07e <__aeabi_ddiv+0x6e>
 800e078:	085b      	lsrs	r3, r3, #1
 800e07a:	ea4f 0232 	mov.w	r2, r2, rrx
 800e07e:	1ab6      	subs	r6, r6, r2
 800e080:	eb65 0503 	sbc.w	r5, r5, r3
 800e084:	085b      	lsrs	r3, r3, #1
 800e086:	ea4f 0232 	mov.w	r2, r2, rrx
 800e08a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800e08e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800e092:	ebb6 0e02 	subs.w	lr, r6, r2
 800e096:	eb75 0e03 	sbcs.w	lr, r5, r3
 800e09a:	bf22      	ittt	cs
 800e09c:	1ab6      	subcs	r6, r6, r2
 800e09e:	4675      	movcs	r5, lr
 800e0a0:	ea40 000c 	orrcs.w	r0, r0, ip
 800e0a4:	085b      	lsrs	r3, r3, #1
 800e0a6:	ea4f 0232 	mov.w	r2, r2, rrx
 800e0aa:	ebb6 0e02 	subs.w	lr, r6, r2
 800e0ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 800e0b2:	bf22      	ittt	cs
 800e0b4:	1ab6      	subcs	r6, r6, r2
 800e0b6:	4675      	movcs	r5, lr
 800e0b8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800e0bc:	085b      	lsrs	r3, r3, #1
 800e0be:	ea4f 0232 	mov.w	r2, r2, rrx
 800e0c2:	ebb6 0e02 	subs.w	lr, r6, r2
 800e0c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 800e0ca:	bf22      	ittt	cs
 800e0cc:	1ab6      	subcs	r6, r6, r2
 800e0ce:	4675      	movcs	r5, lr
 800e0d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800e0d4:	085b      	lsrs	r3, r3, #1
 800e0d6:	ea4f 0232 	mov.w	r2, r2, rrx
 800e0da:	ebb6 0e02 	subs.w	lr, r6, r2
 800e0de:	eb75 0e03 	sbcs.w	lr, r5, r3
 800e0e2:	bf22      	ittt	cs
 800e0e4:	1ab6      	subcs	r6, r6, r2
 800e0e6:	4675      	movcs	r5, lr
 800e0e8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800e0ec:	ea55 0e06 	orrs.w	lr, r5, r6
 800e0f0:	d018      	beq.n	800e124 <__aeabi_ddiv+0x114>
 800e0f2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800e0f6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800e0fa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800e0fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800e102:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800e106:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800e10a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800e10e:	d1c0      	bne.n	800e092 <__aeabi_ddiv+0x82>
 800e110:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800e114:	d10b      	bne.n	800e12e <__aeabi_ddiv+0x11e>
 800e116:	ea41 0100 	orr.w	r1, r1, r0
 800e11a:	f04f 0000 	mov.w	r0, #0
 800e11e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800e122:	e7b6      	b.n	800e092 <__aeabi_ddiv+0x82>
 800e124:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800e128:	bf04      	itt	eq
 800e12a:	4301      	orreq	r1, r0
 800e12c:	2000      	moveq	r0, #0
 800e12e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800e132:	bf88      	it	hi
 800e134:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800e138:	f63f aeaf 	bhi.w	800de9a <__aeabi_dmul+0xde>
 800e13c:	ebb5 0c03 	subs.w	ip, r5, r3
 800e140:	bf04      	itt	eq
 800e142:	ebb6 0c02 	subseq.w	ip, r6, r2
 800e146:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800e14a:	f150 0000 	adcs.w	r0, r0, #0
 800e14e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800e152:	bd70      	pop	{r4, r5, r6, pc}
 800e154:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800e158:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800e15c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800e160:	bfc2      	ittt	gt
 800e162:	ebd4 050c 	rsbsgt	r5, r4, ip
 800e166:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800e16a:	bd70      	popgt	{r4, r5, r6, pc}
 800e16c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e170:	f04f 0e00 	mov.w	lr, #0
 800e174:	3c01      	subs	r4, #1
 800e176:	e690      	b.n	800de9a <__aeabi_dmul+0xde>
 800e178:	ea45 0e06 	orr.w	lr, r5, r6
 800e17c:	e68d      	b.n	800de9a <__aeabi_dmul+0xde>
 800e17e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800e182:	ea94 0f0c 	teq	r4, ip
 800e186:	bf08      	it	eq
 800e188:	ea95 0f0c 	teqeq	r5, ip
 800e18c:	f43f af3b 	beq.w	800e006 <__aeabi_dmul+0x24a>
 800e190:	ea94 0f0c 	teq	r4, ip
 800e194:	d10a      	bne.n	800e1ac <__aeabi_ddiv+0x19c>
 800e196:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800e19a:	f47f af34 	bne.w	800e006 <__aeabi_dmul+0x24a>
 800e19e:	ea95 0f0c 	teq	r5, ip
 800e1a2:	f47f af25 	bne.w	800dff0 <__aeabi_dmul+0x234>
 800e1a6:	4610      	mov	r0, r2
 800e1a8:	4619      	mov	r1, r3
 800e1aa:	e72c      	b.n	800e006 <__aeabi_dmul+0x24a>
 800e1ac:	ea95 0f0c 	teq	r5, ip
 800e1b0:	d106      	bne.n	800e1c0 <__aeabi_ddiv+0x1b0>
 800e1b2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800e1b6:	f43f aefd 	beq.w	800dfb4 <__aeabi_dmul+0x1f8>
 800e1ba:	4610      	mov	r0, r2
 800e1bc:	4619      	mov	r1, r3
 800e1be:	e722      	b.n	800e006 <__aeabi_dmul+0x24a>
 800e1c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800e1c4:	bf18      	it	ne
 800e1c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800e1ca:	f47f aec5 	bne.w	800df58 <__aeabi_dmul+0x19c>
 800e1ce:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800e1d2:	f47f af0d 	bne.w	800dff0 <__aeabi_dmul+0x234>
 800e1d6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800e1da:	f47f aeeb 	bne.w	800dfb4 <__aeabi_dmul+0x1f8>
 800e1de:	e712      	b.n	800e006 <__aeabi_dmul+0x24a>

0800e1e0 <__gedf2>:
 800e1e0:	f04f 3cff 	mov.w	ip, #4294967295
 800e1e4:	e006      	b.n	800e1f4 <__cmpdf2+0x4>
 800e1e6:	bf00      	nop

0800e1e8 <__ledf2>:
 800e1e8:	f04f 0c01 	mov.w	ip, #1
 800e1ec:	e002      	b.n	800e1f4 <__cmpdf2+0x4>
 800e1ee:	bf00      	nop

0800e1f0 <__cmpdf2>:
 800e1f0:	f04f 0c01 	mov.w	ip, #1
 800e1f4:	f84d cd04 	str.w	ip, [sp, #-4]!
 800e1f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800e1fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800e200:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800e204:	bf18      	it	ne
 800e206:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800e20a:	d01b      	beq.n	800e244 <__cmpdf2+0x54>
 800e20c:	b001      	add	sp, #4
 800e20e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800e212:	bf0c      	ite	eq
 800e214:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800e218:	ea91 0f03 	teqne	r1, r3
 800e21c:	bf02      	ittt	eq
 800e21e:	ea90 0f02 	teqeq	r0, r2
 800e222:	2000      	moveq	r0, #0
 800e224:	4770      	bxeq	lr
 800e226:	f110 0f00 	cmn.w	r0, #0
 800e22a:	ea91 0f03 	teq	r1, r3
 800e22e:	bf58      	it	pl
 800e230:	4299      	cmppl	r1, r3
 800e232:	bf08      	it	eq
 800e234:	4290      	cmpeq	r0, r2
 800e236:	bf2c      	ite	cs
 800e238:	17d8      	asrcs	r0, r3, #31
 800e23a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800e23e:	f040 0001 	orr.w	r0, r0, #1
 800e242:	4770      	bx	lr
 800e244:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800e248:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800e24c:	d102      	bne.n	800e254 <__cmpdf2+0x64>
 800e24e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800e252:	d107      	bne.n	800e264 <__cmpdf2+0x74>
 800e254:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800e258:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800e25c:	d1d6      	bne.n	800e20c <__cmpdf2+0x1c>
 800e25e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800e262:	d0d3      	beq.n	800e20c <__cmpdf2+0x1c>
 800e264:	f85d 0b04 	ldr.w	r0, [sp], #4
 800e268:	4770      	bx	lr
 800e26a:	bf00      	nop

0800e26c <__aeabi_cdrcmple>:
 800e26c:	4684      	mov	ip, r0
 800e26e:	4610      	mov	r0, r2
 800e270:	4662      	mov	r2, ip
 800e272:	468c      	mov	ip, r1
 800e274:	4619      	mov	r1, r3
 800e276:	4663      	mov	r3, ip
 800e278:	e000      	b.n	800e27c <__aeabi_cdcmpeq>
 800e27a:	bf00      	nop

0800e27c <__aeabi_cdcmpeq>:
 800e27c:	b501      	push	{r0, lr}
 800e27e:	f7ff ffb7 	bl	800e1f0 <__cmpdf2>
 800e282:	2800      	cmp	r0, #0
 800e284:	bf48      	it	mi
 800e286:	f110 0f00 	cmnmi.w	r0, #0
 800e28a:	bd01      	pop	{r0, pc}

0800e28c <__aeabi_dcmpeq>:
 800e28c:	f84d ed08 	str.w	lr, [sp, #-8]!
 800e290:	f7ff fff4 	bl	800e27c <__aeabi_cdcmpeq>
 800e294:	bf0c      	ite	eq
 800e296:	2001      	moveq	r0, #1
 800e298:	2000      	movne	r0, #0
 800e29a:	f85d fb08 	ldr.w	pc, [sp], #8
 800e29e:	bf00      	nop

0800e2a0 <__aeabi_dcmplt>:
 800e2a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 800e2a4:	f7ff ffea 	bl	800e27c <__aeabi_cdcmpeq>
 800e2a8:	bf34      	ite	cc
 800e2aa:	2001      	movcc	r0, #1
 800e2ac:	2000      	movcs	r0, #0
 800e2ae:	f85d fb08 	ldr.w	pc, [sp], #8
 800e2b2:	bf00      	nop

0800e2b4 <__aeabi_dcmple>:
 800e2b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 800e2b8:	f7ff ffe0 	bl	800e27c <__aeabi_cdcmpeq>
 800e2bc:	bf94      	ite	ls
 800e2be:	2001      	movls	r0, #1
 800e2c0:	2000      	movhi	r0, #0
 800e2c2:	f85d fb08 	ldr.w	pc, [sp], #8
 800e2c6:	bf00      	nop

0800e2c8 <__aeabi_dcmpge>:
 800e2c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 800e2cc:	f7ff ffce 	bl	800e26c <__aeabi_cdrcmple>
 800e2d0:	bf94      	ite	ls
 800e2d2:	2001      	movls	r0, #1
 800e2d4:	2000      	movhi	r0, #0
 800e2d6:	f85d fb08 	ldr.w	pc, [sp], #8
 800e2da:	bf00      	nop

0800e2dc <__aeabi_dcmpgt>:
 800e2dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 800e2e0:	f7ff ffc4 	bl	800e26c <__aeabi_cdrcmple>
 800e2e4:	bf34      	ite	cc
 800e2e6:	2001      	movcc	r0, #1
 800e2e8:	2000      	movcs	r0, #0
 800e2ea:	f85d fb08 	ldr.w	pc, [sp], #8
 800e2ee:	bf00      	nop

0800e2f0 <__aeabi_dcmpun>:
 800e2f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800e2f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800e2f8:	d102      	bne.n	800e300 <__aeabi_dcmpun+0x10>
 800e2fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800e2fe:	d10a      	bne.n	800e316 <__aeabi_dcmpun+0x26>
 800e300:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800e304:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800e308:	d102      	bne.n	800e310 <__aeabi_dcmpun+0x20>
 800e30a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800e30e:	d102      	bne.n	800e316 <__aeabi_dcmpun+0x26>
 800e310:	f04f 0000 	mov.w	r0, #0
 800e314:	4770      	bx	lr
 800e316:	f04f 0001 	mov.w	r0, #1
 800e31a:	4770      	bx	lr

0800e31c <__aeabi_d2f>:
 800e31c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800e320:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800e324:	bf24      	itt	cs
 800e326:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800e32a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800e32e:	d90d      	bls.n	800e34c <__aeabi_d2f+0x30>
 800e330:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800e334:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800e338:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800e33c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800e340:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800e344:	bf08      	it	eq
 800e346:	f020 0001 	biceq.w	r0, r0, #1
 800e34a:	4770      	bx	lr
 800e34c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800e350:	d121      	bne.n	800e396 <__aeabi_d2f+0x7a>
 800e352:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800e356:	bfbc      	itt	lt
 800e358:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800e35c:	4770      	bxlt	lr
 800e35e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e362:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800e366:	f1c2 0218 	rsb	r2, r2, #24
 800e36a:	f1c2 0c20 	rsb	ip, r2, #32
 800e36e:	fa10 f30c 	lsls.w	r3, r0, ip
 800e372:	fa20 f002 	lsr.w	r0, r0, r2
 800e376:	bf18      	it	ne
 800e378:	f040 0001 	orrne.w	r0, r0, #1
 800e37c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800e380:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800e384:	fa03 fc0c 	lsl.w	ip, r3, ip
 800e388:	ea40 000c 	orr.w	r0, r0, ip
 800e38c:	fa23 f302 	lsr.w	r3, r3, r2
 800e390:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e394:	e7cc      	b.n	800e330 <__aeabi_d2f+0x14>
 800e396:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800e39a:	d107      	bne.n	800e3ac <__aeabi_d2f+0x90>
 800e39c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800e3a0:	bf1e      	ittt	ne
 800e3a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800e3a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800e3aa:	4770      	bxne	lr
 800e3ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800e3b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800e3b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800e3b8:	4770      	bx	lr
 800e3ba:	bf00      	nop

0800e3bc <__aeabi_uldivmod>:
 800e3bc:	b953      	cbnz	r3, 800e3d4 <__aeabi_uldivmod+0x18>
 800e3be:	b94a      	cbnz	r2, 800e3d4 <__aeabi_uldivmod+0x18>
 800e3c0:	2900      	cmp	r1, #0
 800e3c2:	bf08      	it	eq
 800e3c4:	2800      	cmpeq	r0, #0
 800e3c6:	bf1c      	itt	ne
 800e3c8:	f04f 31ff 	movne.w	r1, #4294967295
 800e3cc:	f04f 30ff 	movne.w	r0, #4294967295
 800e3d0:	f000 b970 	b.w	800e6b4 <__aeabi_idiv0>
 800e3d4:	f1ad 0c08 	sub.w	ip, sp, #8
 800e3d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800e3dc:	f000 f806 	bl	800e3ec <__udivmoddi4>
 800e3e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 800e3e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e3e8:	b004      	add	sp, #16
 800e3ea:	4770      	bx	lr

0800e3ec <__udivmoddi4>:
 800e3ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3f0:	9e08      	ldr	r6, [sp, #32]
 800e3f2:	460d      	mov	r5, r1
 800e3f4:	4604      	mov	r4, r0
 800e3f6:	460f      	mov	r7, r1
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d14a      	bne.n	800e492 <__udivmoddi4+0xa6>
 800e3fc:	428a      	cmp	r2, r1
 800e3fe:	4694      	mov	ip, r2
 800e400:	d965      	bls.n	800e4ce <__udivmoddi4+0xe2>
 800e402:	fab2 f382 	clz	r3, r2
 800e406:	b143      	cbz	r3, 800e41a <__udivmoddi4+0x2e>
 800e408:	fa02 fc03 	lsl.w	ip, r2, r3
 800e40c:	f1c3 0220 	rsb	r2, r3, #32
 800e410:	409f      	lsls	r7, r3
 800e412:	fa20 f202 	lsr.w	r2, r0, r2
 800e416:	4317      	orrs	r7, r2
 800e418:	409c      	lsls	r4, r3
 800e41a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800e41e:	fa1f f58c 	uxth.w	r5, ip
 800e422:	fbb7 f1fe 	udiv	r1, r7, lr
 800e426:	0c22      	lsrs	r2, r4, #16
 800e428:	fb0e 7711 	mls	r7, lr, r1, r7
 800e42c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800e430:	fb01 f005 	mul.w	r0, r1, r5
 800e434:	4290      	cmp	r0, r2
 800e436:	d90a      	bls.n	800e44e <__udivmoddi4+0x62>
 800e438:	eb1c 0202 	adds.w	r2, ip, r2
 800e43c:	f101 37ff 	add.w	r7, r1, #4294967295
 800e440:	f080 811c 	bcs.w	800e67c <__udivmoddi4+0x290>
 800e444:	4290      	cmp	r0, r2
 800e446:	f240 8119 	bls.w	800e67c <__udivmoddi4+0x290>
 800e44a:	3902      	subs	r1, #2
 800e44c:	4462      	add	r2, ip
 800e44e:	1a12      	subs	r2, r2, r0
 800e450:	b2a4      	uxth	r4, r4
 800e452:	fbb2 f0fe 	udiv	r0, r2, lr
 800e456:	fb0e 2210 	mls	r2, lr, r0, r2
 800e45a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800e45e:	fb00 f505 	mul.w	r5, r0, r5
 800e462:	42a5      	cmp	r5, r4
 800e464:	d90a      	bls.n	800e47c <__udivmoddi4+0x90>
 800e466:	eb1c 0404 	adds.w	r4, ip, r4
 800e46a:	f100 32ff 	add.w	r2, r0, #4294967295
 800e46e:	f080 8107 	bcs.w	800e680 <__udivmoddi4+0x294>
 800e472:	42a5      	cmp	r5, r4
 800e474:	f240 8104 	bls.w	800e680 <__udivmoddi4+0x294>
 800e478:	4464      	add	r4, ip
 800e47a:	3802      	subs	r0, #2
 800e47c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800e480:	1b64      	subs	r4, r4, r5
 800e482:	2100      	movs	r1, #0
 800e484:	b11e      	cbz	r6, 800e48e <__udivmoddi4+0xa2>
 800e486:	40dc      	lsrs	r4, r3
 800e488:	2300      	movs	r3, #0
 800e48a:	e9c6 4300 	strd	r4, r3, [r6]
 800e48e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e492:	428b      	cmp	r3, r1
 800e494:	d908      	bls.n	800e4a8 <__udivmoddi4+0xbc>
 800e496:	2e00      	cmp	r6, #0
 800e498:	f000 80ed 	beq.w	800e676 <__udivmoddi4+0x28a>
 800e49c:	2100      	movs	r1, #0
 800e49e:	e9c6 0500 	strd	r0, r5, [r6]
 800e4a2:	4608      	mov	r0, r1
 800e4a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4a8:	fab3 f183 	clz	r1, r3
 800e4ac:	2900      	cmp	r1, #0
 800e4ae:	d149      	bne.n	800e544 <__udivmoddi4+0x158>
 800e4b0:	42ab      	cmp	r3, r5
 800e4b2:	d302      	bcc.n	800e4ba <__udivmoddi4+0xce>
 800e4b4:	4282      	cmp	r2, r0
 800e4b6:	f200 80f8 	bhi.w	800e6aa <__udivmoddi4+0x2be>
 800e4ba:	1a84      	subs	r4, r0, r2
 800e4bc:	eb65 0203 	sbc.w	r2, r5, r3
 800e4c0:	2001      	movs	r0, #1
 800e4c2:	4617      	mov	r7, r2
 800e4c4:	2e00      	cmp	r6, #0
 800e4c6:	d0e2      	beq.n	800e48e <__udivmoddi4+0xa2>
 800e4c8:	e9c6 4700 	strd	r4, r7, [r6]
 800e4cc:	e7df      	b.n	800e48e <__udivmoddi4+0xa2>
 800e4ce:	b902      	cbnz	r2, 800e4d2 <__udivmoddi4+0xe6>
 800e4d0:	deff      	udf	#255	; 0xff
 800e4d2:	fab2 f382 	clz	r3, r2
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	f040 8090 	bne.w	800e5fc <__udivmoddi4+0x210>
 800e4dc:	1a8a      	subs	r2, r1, r2
 800e4de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800e4e2:	fa1f fe8c 	uxth.w	lr, ip
 800e4e6:	2101      	movs	r1, #1
 800e4e8:	fbb2 f5f7 	udiv	r5, r2, r7
 800e4ec:	fb07 2015 	mls	r0, r7, r5, r2
 800e4f0:	0c22      	lsrs	r2, r4, #16
 800e4f2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800e4f6:	fb0e f005 	mul.w	r0, lr, r5
 800e4fa:	4290      	cmp	r0, r2
 800e4fc:	d908      	bls.n	800e510 <__udivmoddi4+0x124>
 800e4fe:	eb1c 0202 	adds.w	r2, ip, r2
 800e502:	f105 38ff 	add.w	r8, r5, #4294967295
 800e506:	d202      	bcs.n	800e50e <__udivmoddi4+0x122>
 800e508:	4290      	cmp	r0, r2
 800e50a:	f200 80cb 	bhi.w	800e6a4 <__udivmoddi4+0x2b8>
 800e50e:	4645      	mov	r5, r8
 800e510:	1a12      	subs	r2, r2, r0
 800e512:	b2a4      	uxth	r4, r4
 800e514:	fbb2 f0f7 	udiv	r0, r2, r7
 800e518:	fb07 2210 	mls	r2, r7, r0, r2
 800e51c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800e520:	fb0e fe00 	mul.w	lr, lr, r0
 800e524:	45a6      	cmp	lr, r4
 800e526:	d908      	bls.n	800e53a <__udivmoddi4+0x14e>
 800e528:	eb1c 0404 	adds.w	r4, ip, r4
 800e52c:	f100 32ff 	add.w	r2, r0, #4294967295
 800e530:	d202      	bcs.n	800e538 <__udivmoddi4+0x14c>
 800e532:	45a6      	cmp	lr, r4
 800e534:	f200 80bb 	bhi.w	800e6ae <__udivmoddi4+0x2c2>
 800e538:	4610      	mov	r0, r2
 800e53a:	eba4 040e 	sub.w	r4, r4, lr
 800e53e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800e542:	e79f      	b.n	800e484 <__udivmoddi4+0x98>
 800e544:	f1c1 0720 	rsb	r7, r1, #32
 800e548:	408b      	lsls	r3, r1
 800e54a:	fa22 fc07 	lsr.w	ip, r2, r7
 800e54e:	ea4c 0c03 	orr.w	ip, ip, r3
 800e552:	fa05 f401 	lsl.w	r4, r5, r1
 800e556:	fa20 f307 	lsr.w	r3, r0, r7
 800e55a:	40fd      	lsrs	r5, r7
 800e55c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800e560:	4323      	orrs	r3, r4
 800e562:	fbb5 f8f9 	udiv	r8, r5, r9
 800e566:	fa1f fe8c 	uxth.w	lr, ip
 800e56a:	fb09 5518 	mls	r5, r9, r8, r5
 800e56e:	0c1c      	lsrs	r4, r3, #16
 800e570:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800e574:	fb08 f50e 	mul.w	r5, r8, lr
 800e578:	42a5      	cmp	r5, r4
 800e57a:	fa02 f201 	lsl.w	r2, r2, r1
 800e57e:	fa00 f001 	lsl.w	r0, r0, r1
 800e582:	d90b      	bls.n	800e59c <__udivmoddi4+0x1b0>
 800e584:	eb1c 0404 	adds.w	r4, ip, r4
 800e588:	f108 3aff 	add.w	sl, r8, #4294967295
 800e58c:	f080 8088 	bcs.w	800e6a0 <__udivmoddi4+0x2b4>
 800e590:	42a5      	cmp	r5, r4
 800e592:	f240 8085 	bls.w	800e6a0 <__udivmoddi4+0x2b4>
 800e596:	f1a8 0802 	sub.w	r8, r8, #2
 800e59a:	4464      	add	r4, ip
 800e59c:	1b64      	subs	r4, r4, r5
 800e59e:	b29d      	uxth	r5, r3
 800e5a0:	fbb4 f3f9 	udiv	r3, r4, r9
 800e5a4:	fb09 4413 	mls	r4, r9, r3, r4
 800e5a8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800e5ac:	fb03 fe0e 	mul.w	lr, r3, lr
 800e5b0:	45a6      	cmp	lr, r4
 800e5b2:	d908      	bls.n	800e5c6 <__udivmoddi4+0x1da>
 800e5b4:	eb1c 0404 	adds.w	r4, ip, r4
 800e5b8:	f103 35ff 	add.w	r5, r3, #4294967295
 800e5bc:	d26c      	bcs.n	800e698 <__udivmoddi4+0x2ac>
 800e5be:	45a6      	cmp	lr, r4
 800e5c0:	d96a      	bls.n	800e698 <__udivmoddi4+0x2ac>
 800e5c2:	3b02      	subs	r3, #2
 800e5c4:	4464      	add	r4, ip
 800e5c6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800e5ca:	fba3 9502 	umull	r9, r5, r3, r2
 800e5ce:	eba4 040e 	sub.w	r4, r4, lr
 800e5d2:	42ac      	cmp	r4, r5
 800e5d4:	46c8      	mov	r8, r9
 800e5d6:	46ae      	mov	lr, r5
 800e5d8:	d356      	bcc.n	800e688 <__udivmoddi4+0x29c>
 800e5da:	d053      	beq.n	800e684 <__udivmoddi4+0x298>
 800e5dc:	b156      	cbz	r6, 800e5f4 <__udivmoddi4+0x208>
 800e5de:	ebb0 0208 	subs.w	r2, r0, r8
 800e5e2:	eb64 040e 	sbc.w	r4, r4, lr
 800e5e6:	fa04 f707 	lsl.w	r7, r4, r7
 800e5ea:	40ca      	lsrs	r2, r1
 800e5ec:	40cc      	lsrs	r4, r1
 800e5ee:	4317      	orrs	r7, r2
 800e5f0:	e9c6 7400 	strd	r7, r4, [r6]
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	2100      	movs	r1, #0
 800e5f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5fc:	f1c3 0120 	rsb	r1, r3, #32
 800e600:	fa02 fc03 	lsl.w	ip, r2, r3
 800e604:	fa20 f201 	lsr.w	r2, r0, r1
 800e608:	fa25 f101 	lsr.w	r1, r5, r1
 800e60c:	409d      	lsls	r5, r3
 800e60e:	432a      	orrs	r2, r5
 800e610:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800e614:	fa1f fe8c 	uxth.w	lr, ip
 800e618:	fbb1 f0f7 	udiv	r0, r1, r7
 800e61c:	fb07 1510 	mls	r5, r7, r0, r1
 800e620:	0c11      	lsrs	r1, r2, #16
 800e622:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800e626:	fb00 f50e 	mul.w	r5, r0, lr
 800e62a:	428d      	cmp	r5, r1
 800e62c:	fa04 f403 	lsl.w	r4, r4, r3
 800e630:	d908      	bls.n	800e644 <__udivmoddi4+0x258>
 800e632:	eb1c 0101 	adds.w	r1, ip, r1
 800e636:	f100 38ff 	add.w	r8, r0, #4294967295
 800e63a:	d22f      	bcs.n	800e69c <__udivmoddi4+0x2b0>
 800e63c:	428d      	cmp	r5, r1
 800e63e:	d92d      	bls.n	800e69c <__udivmoddi4+0x2b0>
 800e640:	3802      	subs	r0, #2
 800e642:	4461      	add	r1, ip
 800e644:	1b49      	subs	r1, r1, r5
 800e646:	b292      	uxth	r2, r2
 800e648:	fbb1 f5f7 	udiv	r5, r1, r7
 800e64c:	fb07 1115 	mls	r1, r7, r5, r1
 800e650:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800e654:	fb05 f10e 	mul.w	r1, r5, lr
 800e658:	4291      	cmp	r1, r2
 800e65a:	d908      	bls.n	800e66e <__udivmoddi4+0x282>
 800e65c:	eb1c 0202 	adds.w	r2, ip, r2
 800e660:	f105 38ff 	add.w	r8, r5, #4294967295
 800e664:	d216      	bcs.n	800e694 <__udivmoddi4+0x2a8>
 800e666:	4291      	cmp	r1, r2
 800e668:	d914      	bls.n	800e694 <__udivmoddi4+0x2a8>
 800e66a:	3d02      	subs	r5, #2
 800e66c:	4462      	add	r2, ip
 800e66e:	1a52      	subs	r2, r2, r1
 800e670:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800e674:	e738      	b.n	800e4e8 <__udivmoddi4+0xfc>
 800e676:	4631      	mov	r1, r6
 800e678:	4630      	mov	r0, r6
 800e67a:	e708      	b.n	800e48e <__udivmoddi4+0xa2>
 800e67c:	4639      	mov	r1, r7
 800e67e:	e6e6      	b.n	800e44e <__udivmoddi4+0x62>
 800e680:	4610      	mov	r0, r2
 800e682:	e6fb      	b.n	800e47c <__udivmoddi4+0x90>
 800e684:	4548      	cmp	r0, r9
 800e686:	d2a9      	bcs.n	800e5dc <__udivmoddi4+0x1f0>
 800e688:	ebb9 0802 	subs.w	r8, r9, r2
 800e68c:	eb65 0e0c 	sbc.w	lr, r5, ip
 800e690:	3b01      	subs	r3, #1
 800e692:	e7a3      	b.n	800e5dc <__udivmoddi4+0x1f0>
 800e694:	4645      	mov	r5, r8
 800e696:	e7ea      	b.n	800e66e <__udivmoddi4+0x282>
 800e698:	462b      	mov	r3, r5
 800e69a:	e794      	b.n	800e5c6 <__udivmoddi4+0x1da>
 800e69c:	4640      	mov	r0, r8
 800e69e:	e7d1      	b.n	800e644 <__udivmoddi4+0x258>
 800e6a0:	46d0      	mov	r8, sl
 800e6a2:	e77b      	b.n	800e59c <__udivmoddi4+0x1b0>
 800e6a4:	3d02      	subs	r5, #2
 800e6a6:	4462      	add	r2, ip
 800e6a8:	e732      	b.n	800e510 <__udivmoddi4+0x124>
 800e6aa:	4608      	mov	r0, r1
 800e6ac:	e70a      	b.n	800e4c4 <__udivmoddi4+0xd8>
 800e6ae:	4464      	add	r4, ip
 800e6b0:	3802      	subs	r0, #2
 800e6b2:	e742      	b.n	800e53a <__udivmoddi4+0x14e>

0800e6b4 <__aeabi_idiv0>:
 800e6b4:	4770      	bx	lr
 800e6b6:	bf00      	nop

0800e6b8 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b088      	sub	sp, #32
 800e6bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800e6be:	463b      	mov	r3, r7
 800e6c0:	2220      	movs	r2, #32
 800e6c2:	2100      	movs	r1, #0
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	f00d f833 	bl	801b730 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800e6ca:	4b3a      	ldr	r3, [pc, #232]	; (800e7b4 <MX_ADC2_Init+0xfc>)
 800e6cc:	4a3a      	ldr	r2, [pc, #232]	; (800e7b8 <MX_ADC2_Init+0x100>)
 800e6ce:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV128;
 800e6d0:	4b38      	ldr	r3, [pc, #224]	; (800e7b4 <MX_ADC2_Init+0xfc>)
 800e6d2:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
 800e6d6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800e6d8:	4b36      	ldr	r3, [pc, #216]	; (800e7b4 <MX_ADC2_Init+0xfc>)
 800e6da:	2200      	movs	r2, #0
 800e6dc:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800e6de:	4b35      	ldr	r3, [pc, #212]	; (800e7b4 <MX_ADC2_Init+0xfc>)
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800e6e4:	4b33      	ldr	r3, [pc, #204]	; (800e7b4 <MX_ADC2_Init+0xfc>)
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800e6ea:	4b32      	ldr	r3, [pc, #200]	; (800e7b4 <MX_ADC2_Init+0xfc>)
 800e6ec:	2201      	movs	r2, #1
 800e6ee:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800e6f0:	4b30      	ldr	r3, [pc, #192]	; (800e7b4 <MX_ADC2_Init+0xfc>)
 800e6f2:	2204      	movs	r2, #4
 800e6f4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800e6f6:	4b2f      	ldr	r3, [pc, #188]	; (800e7b4 <MX_ADC2_Init+0xfc>)
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800e6fc:	4b2d      	ldr	r3, [pc, #180]	; (800e7b4 <MX_ADC2_Init+0xfc>)
 800e6fe:	2201      	movs	r2, #1
 800e700:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 3;
 800e702:	4b2c      	ldr	r3, [pc, #176]	; (800e7b4 <MX_ADC2_Init+0xfc>)
 800e704:	2203      	movs	r2, #3
 800e706:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800e708:	4b2a      	ldr	r3, [pc, #168]	; (800e7b4 <MX_ADC2_Init+0xfc>)
 800e70a:	2200      	movs	r2, #0
 800e70c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800e710:	4b28      	ldr	r3, [pc, #160]	; (800e7b4 <MX_ADC2_Init+0xfc>)
 800e712:	2200      	movs	r2, #0
 800e714:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800e716:	4b27      	ldr	r3, [pc, #156]	; (800e7b4 <MX_ADC2_Init+0xfc>)
 800e718:	2200      	movs	r2, #0
 800e71a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800e71c:	4b25      	ldr	r3, [pc, #148]	; (800e7b4 <MX_ADC2_Init+0xfc>)
 800e71e:	2201      	movs	r2, #1
 800e720:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800e724:	4b23      	ldr	r3, [pc, #140]	; (800e7b4 <MX_ADC2_Init+0xfc>)
 800e726:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e72a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800e72c:	4b21      	ldr	r3, [pc, #132]	; (800e7b4 <MX_ADC2_Init+0xfc>)
 800e72e:	2200      	movs	r2, #0
 800e730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800e734:	481f      	ldr	r0, [pc, #124]	; (800e7b4 <MX_ADC2_Init+0xfc>)
 800e736:	f003 fe13 	bl	8012360 <HAL_ADC_Init>
 800e73a:	4603      	mov	r3, r0
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d001      	beq.n	800e744 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 800e740:	f002 fbba 	bl	8010eb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800e744:	4b1d      	ldr	r3, [pc, #116]	; (800e7bc <MX_ADC2_Init+0x104>)
 800e746:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800e748:	2306      	movs	r3, #6
 800e74a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800e74c:	2304      	movs	r3, #4
 800e74e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 800e750:	4b1b      	ldr	r3, [pc, #108]	; (800e7c0 <MX_ADC2_Init+0x108>)
 800e752:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800e754:	2304      	movs	r3, #4
 800e756:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800e758:	2300      	movs	r3, #0
 800e75a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800e75c:	463b      	mov	r3, r7
 800e75e:	4619      	mov	r1, r3
 800e760:	4814      	ldr	r0, [pc, #80]	; (800e7b4 <MX_ADC2_Init+0xfc>)
 800e762:	f004 f8b1 	bl	80128c8 <HAL_ADC_ConfigChannel>
 800e766:	4603      	mov	r3, r0
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d001      	beq.n	800e770 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 800e76c:	f002 fba4 	bl	8010eb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800e770:	4b14      	ldr	r3, [pc, #80]	; (800e7c4 <MX_ADC2_Init+0x10c>)
 800e772:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800e774:	230c      	movs	r3, #12
 800e776:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800e778:	463b      	mov	r3, r7
 800e77a:	4619      	mov	r1, r3
 800e77c:	480d      	ldr	r0, [pc, #52]	; (800e7b4 <MX_ADC2_Init+0xfc>)
 800e77e:	f004 f8a3 	bl	80128c8 <HAL_ADC_ConfigChannel>
 800e782:	4603      	mov	r3, r0
 800e784:	2b00      	cmp	r3, #0
 800e786:	d001      	beq.n	800e78c <MX_ADC2_Init+0xd4>
  {
    Error_Handler();
 800e788:	f002 fb96 	bl	8010eb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800e78c:	4b0e      	ldr	r3, [pc, #56]	; (800e7c8 <MX_ADC2_Init+0x110>)
 800e78e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800e790:	2312      	movs	r3, #18
 800e792:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800e794:	237f      	movs	r3, #127	; 0x7f
 800e796:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800e798:	463b      	mov	r3, r7
 800e79a:	4619      	mov	r1, r3
 800e79c:	4805      	ldr	r0, [pc, #20]	; (800e7b4 <MX_ADC2_Init+0xfc>)
 800e79e:	f004 f893 	bl	80128c8 <HAL_ADC_ConfigChannel>
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d001      	beq.n	800e7ac <MX_ADC2_Init+0xf4>
  {
    Error_Handler();
 800e7a8:	f002 fb86 	bl	8010eb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800e7ac:	bf00      	nop
 800e7ae:	3720      	adds	r7, #32
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bd80      	pop	{r7, pc}
 800e7b4:	20000094 	.word	0x20000094
 800e7b8:	50000100 	.word	0x50000100
 800e7bc:	04300002 	.word	0x04300002
 800e7c0:	407f0000 	.word	0x407f0000
 800e7c4:	19200040 	.word	0x19200040
 800e7c8:	2a000400 	.word	0x2a000400

0800e7cc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b0a0      	sub	sp, #128	; 0x80
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e7d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800e7d8:	2200      	movs	r2, #0
 800e7da:	601a      	str	r2, [r3, #0]
 800e7dc:	605a      	str	r2, [r3, #4]
 800e7de:	609a      	str	r2, [r3, #8]
 800e7e0:	60da      	str	r2, [r3, #12]
 800e7e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800e7e4:	f107 0318 	add.w	r3, r7, #24
 800e7e8:	2254      	movs	r2, #84	; 0x54
 800e7ea:	2100      	movs	r1, #0
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	f00c ff9f 	bl	801b730 <memset>
  if(adcHandle->Instance==ADC2)
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	4a4c      	ldr	r2, [pc, #304]	; (800e928 <HAL_ADC_MspInit+0x15c>)
 800e7f8:	4293      	cmp	r3, r2
 800e7fa:	f040 8090 	bne.w	800e91e <HAL_ADC_MspInit+0x152>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800e7fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e802:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800e804:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800e808:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e80a:	f107 0318 	add.w	r3, r7, #24
 800e80e:	4618      	mov	r0, r3
 800e810:	f006 ff7e 	bl	8015710 <HAL_RCCEx_PeriphCLKConfig>
 800e814:	4603      	mov	r3, r0
 800e816:	2b00      	cmp	r3, #0
 800e818:	d001      	beq.n	800e81e <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800e81a:	f002 fb4d 	bl	8010eb8 <Error_Handler>
    }

    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800e81e:	4b43      	ldr	r3, [pc, #268]	; (800e92c <HAL_ADC_MspInit+0x160>)
 800e820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e822:	4a42      	ldr	r2, [pc, #264]	; (800e92c <HAL_ADC_MspInit+0x160>)
 800e824:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e82a:	4b40      	ldr	r3, [pc, #256]	; (800e92c <HAL_ADC_MspInit+0x160>)
 800e82c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e82e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e832:	617b      	str	r3, [r7, #20]
 800e834:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800e836:	4b3d      	ldr	r3, [pc, #244]	; (800e92c <HAL_ADC_MspInit+0x160>)
 800e838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e83a:	4a3c      	ldr	r2, [pc, #240]	; (800e92c <HAL_ADC_MspInit+0x160>)
 800e83c:	f043 0320 	orr.w	r3, r3, #32
 800e840:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e842:	4b3a      	ldr	r3, [pc, #232]	; (800e92c <HAL_ADC_MspInit+0x160>)
 800e844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e846:	f003 0320 	and.w	r3, r3, #32
 800e84a:	613b      	str	r3, [r7, #16]
 800e84c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e84e:	4b37      	ldr	r3, [pc, #220]	; (800e92c <HAL_ADC_MspInit+0x160>)
 800e850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e852:	4a36      	ldr	r2, [pc, #216]	; (800e92c <HAL_ADC_MspInit+0x160>)
 800e854:	f043 0304 	orr.w	r3, r3, #4
 800e858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e85a:	4b34      	ldr	r3, [pc, #208]	; (800e92c <HAL_ADC_MspInit+0x160>)
 800e85c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e85e:	f003 0304 	and.w	r3, r3, #4
 800e862:	60fb      	str	r3, [r7, #12]
 800e864:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e866:	4b31      	ldr	r3, [pc, #196]	; (800e92c <HAL_ADC_MspInit+0x160>)
 800e868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e86a:	4a30      	ldr	r2, [pc, #192]	; (800e92c <HAL_ADC_MspInit+0x160>)
 800e86c:	f043 0301 	orr.w	r3, r3, #1
 800e870:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e872:	4b2e      	ldr	r3, [pc, #184]	; (800e92c <HAL_ADC_MspInit+0x160>)
 800e874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e876:	f003 0301 	and.w	r3, r3, #1
 800e87a:	60bb      	str	r3, [r7, #8]
 800e87c:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC2_IN6
    PC1     ------> ADC2_IN7
    PA0     ------> ADC2_IN1
    PA1     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800e87e:	2302      	movs	r3, #2
 800e880:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e882:	2303      	movs	r3, #3
 800e884:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e886:	2300      	movs	r3, #0
 800e888:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800e88a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800e88e:	4619      	mov	r1, r3
 800e890:	4827      	ldr	r0, [pc, #156]	; (800e930 <HAL_ADC_MspInit+0x164>)
 800e892:	f005 f961 	bl	8013b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800e896:	2303      	movs	r3, #3
 800e898:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e89a:	2303      	movs	r3, #3
 800e89c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e89e:	2300      	movs	r3, #0
 800e8a0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e8a2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800e8a6:	4619      	mov	r1, r3
 800e8a8:	4822      	ldr	r0, [pc, #136]	; (800e934 <HAL_ADC_MspInit+0x168>)
 800e8aa:	f005 f955 	bl	8013b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800e8ae:	2303      	movs	r3, #3
 800e8b0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e8b2:	2303      	movs	r3, #3
 800e8b4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e8ba:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800e8be:	4619      	mov	r1, r3
 800e8c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800e8c4:	f005 f948 	bl	8013b58 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 800e8c8:	4b1b      	ldr	r3, [pc, #108]	; (800e938 <HAL_ADC_MspInit+0x16c>)
 800e8ca:	4a1c      	ldr	r2, [pc, #112]	; (800e93c <HAL_ADC_MspInit+0x170>)
 800e8cc:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800e8ce:	4b1a      	ldr	r3, [pc, #104]	; (800e938 <HAL_ADC_MspInit+0x16c>)
 800e8d0:	2224      	movs	r2, #36	; 0x24
 800e8d2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e8d4:	4b18      	ldr	r3, [pc, #96]	; (800e938 <HAL_ADC_MspInit+0x16c>)
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800e8da:	4b17      	ldr	r3, [pc, #92]	; (800e938 <HAL_ADC_MspInit+0x16c>)
 800e8dc:	2200      	movs	r2, #0
 800e8de:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800e8e0:	4b15      	ldr	r3, [pc, #84]	; (800e938 <HAL_ADC_MspInit+0x16c>)
 800e8e2:	2280      	movs	r2, #128	; 0x80
 800e8e4:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800e8e6:	4b14      	ldr	r3, [pc, #80]	; (800e938 <HAL_ADC_MspInit+0x16c>)
 800e8e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e8ec:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800e8ee:	4b12      	ldr	r3, [pc, #72]	; (800e938 <HAL_ADC_MspInit+0x16c>)
 800e8f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e8f4:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800e8f6:	4b10      	ldr	r3, [pc, #64]	; (800e938 <HAL_ADC_MspInit+0x16c>)
 800e8f8:	2220      	movs	r2, #32
 800e8fa:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800e8fc:	4b0e      	ldr	r3, [pc, #56]	; (800e938 <HAL_ADC_MspInit+0x16c>)
 800e8fe:	2200      	movs	r2, #0
 800e900:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800e902:	480d      	ldr	r0, [pc, #52]	; (800e938 <HAL_ADC_MspInit+0x16c>)
 800e904:	f004 fdf6 	bl	80134f4 <HAL_DMA_Init>
 800e908:	4603      	mov	r3, r0
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d001      	beq.n	800e912 <HAL_ADC_MspInit+0x146>
    {
      Error_Handler();
 800e90e:	f002 fad3 	bl	8010eb8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	4a08      	ldr	r2, [pc, #32]	; (800e938 <HAL_ADC_MspInit+0x16c>)
 800e916:	655a      	str	r2, [r3, #84]	; 0x54
 800e918:	4a07      	ldr	r2, [pc, #28]	; (800e938 <HAL_ADC_MspInit+0x16c>)
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800e91e:	bf00      	nop
 800e920:	3780      	adds	r7, #128	; 0x80
 800e922:	46bd      	mov	sp, r7
 800e924:	bd80      	pop	{r7, pc}
 800e926:	bf00      	nop
 800e928:	50000100 	.word	0x50000100
 800e92c:	40021000 	.word	0x40021000
 800e930:	48001400 	.word	0x48001400
 800e934:	48000800 	.word	0x48000800
 800e938:	20000100 	.word	0x20000100
 800e93c:	40020008 	.word	0x40020008

0800e940 <Battery_ReadBatteryVoltage>:

#include "adc_voltage_current_measurement.h"



void Battery_ReadBatteryVoltage(Battery_t * battery_struct,uint16_t BatteryMonitoringData[]){
 800e940:	b580      	push	{r7, lr}
 800e942:	b082      	sub	sp, #8
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
 800e948:	6039      	str	r1, [r7, #0]
	battery_struct->BatteryVoltage = (BatteryMonitoringData[BATTERY_VOLTAGE_RANK]*ADC_VOLTAGE_REF)/ADC_BIT_VALUE;
 800e94a:	683b      	ldr	r3, [r7, #0]
 800e94c:	3304      	adds	r3, #4
 800e94e:	881b      	ldrh	r3, [r3, #0]
 800e950:	4618      	mov	r0, r3
 800e952:	f7ff f9c9 	bl	800dce8 <__aeabi_i2d>
 800e956:	a30f      	add	r3, pc, #60	; (adr r3, 800e994 <Battery_ReadBatteryVoltage+0x54>)
 800e958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e95c:	f7ff fa2e 	bl	800ddbc <__aeabi_dmul>
 800e960:	4602      	mov	r2, r0
 800e962:	460b      	mov	r3, r1
 800e964:	4610      	mov	r0, r2
 800e966:	4619      	mov	r1, r3
 800e968:	f04f 0200 	mov.w	r2, #0
 800e96c:	4b08      	ldr	r3, [pc, #32]	; (800e990 <Battery_ReadBatteryVoltage+0x50>)
 800e96e:	f7ff fb4f 	bl	800e010 <__aeabi_ddiv>
 800e972:	4602      	mov	r2, r0
 800e974:	460b      	mov	r3, r1
 800e976:	4610      	mov	r0, r2
 800e978:	4619      	mov	r1, r3
 800e97a:	f7ff fccf 	bl	800e31c <__aeabi_d2f>
 800e97e:	4602      	mov	r2, r0
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	601a      	str	r2, [r3, #0]
}
 800e984:	bf00      	nop
 800e986:	3708      	adds	r7, #8
 800e988:	46bd      	mov	sp, r7
 800e98a:	bd80      	pop	{r7, pc}
 800e98c:	f3af 8000 	nop.w
 800e990:	40b00000 	.word	0x40b00000
 800e994:	66666666 	.word	0x66666666
 800e998:	400a6666 	.word	0x400a6666
 800e99c:	00000000 	.word	0x00000000

0800e9a0 <Battery_ReadCurrent3V3>:

void Battery_ReadCurrent3V3(Battery_t * battery_struct,uint16_t BatteryMonitoringData[]){
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b084      	sub	sp, #16
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
 800e9a8:	6039      	str	r1, [r7, #0]
	float32_t shunt_resistor_voltage = (BatteryMonitoringData[BATTERY_3V3CURR_RANK]*ADC_VOLTAGE_REF)/ADC_BIT_VALUE;
 800e9aa:	683b      	ldr	r3, [r7, #0]
 800e9ac:	3302      	adds	r3, #2
 800e9ae:	881b      	ldrh	r3, [r3, #0]
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	f7ff f999 	bl	800dce8 <__aeabi_i2d>
 800e9b6:	a319      	add	r3, pc, #100	; (adr r3, 800ea1c <Battery_ReadCurrent3V3+0x7c>)
 800e9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9bc:	f7ff f9fe 	bl	800ddbc <__aeabi_dmul>
 800e9c0:	4602      	mov	r2, r0
 800e9c2:	460b      	mov	r3, r1
 800e9c4:	4610      	mov	r0, r2
 800e9c6:	4619      	mov	r1, r3
 800e9c8:	f04f 0200 	mov.w	r2, #0
 800e9cc:	4b12      	ldr	r3, [pc, #72]	; (800ea18 <Battery_ReadCurrent3V3+0x78>)
 800e9ce:	f7ff fb1f 	bl	800e010 <__aeabi_ddiv>
 800e9d2:	4602      	mov	r2, r0
 800e9d4:	460b      	mov	r3, r1
 800e9d6:	4610      	mov	r0, r2
 800e9d8:	4619      	mov	r1, r3
 800e9da:	f7ff fc9f 	bl	800e31c <__aeabi_d2f>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	60fb      	str	r3, [r7, #12]
	battery_struct->CurrentConsumption3V3 = shunt_resistor_voltage/SHUNT_RESISTOR_VALUE;
 800e9e2:	68f8      	ldr	r0, [r7, #12]
 800e9e4:	f7ff f992 	bl	800dd0c <__aeabi_f2d>
 800e9e8:	a309      	add	r3, pc, #36	; (adr r3, 800ea10 <Battery_ReadCurrent3V3+0x70>)
 800e9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ee:	f7ff fb0f 	bl	800e010 <__aeabi_ddiv>
 800e9f2:	4602      	mov	r2, r0
 800e9f4:	460b      	mov	r3, r1
 800e9f6:	4610      	mov	r0, r2
 800e9f8:	4619      	mov	r1, r3
 800e9fa:	f7ff fc8f 	bl	800e31c <__aeabi_d2f>
 800e9fe:	4602      	mov	r2, r0
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	605a      	str	r2, [r3, #4]
}
 800ea04:	bf00      	nop
 800ea06:	3710      	adds	r7, #16
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	bd80      	pop	{r7, pc}
 800ea0c:	f3af 8000 	nop.w
 800ea10:	d2f1a9fc 	.word	0xd2f1a9fc
 800ea14:	3f60624d 	.word	0x3f60624d
 800ea18:	40b00000 	.word	0x40b00000
 800ea1c:	66666666 	.word	0x66666666
 800ea20:	400a6666 	.word	0x400a6666
 800ea24:	00000000 	.word	0x00000000

0800ea28 <Battery_ReadCurrent5V>:

void Battery_ReadCurrent5V(Battery_t * battery_struct,uint16_t BatteryMonitoringData[]){
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b084      	sub	sp, #16
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
 800ea30:	6039      	str	r1, [r7, #0]
	float32_t shunt_resistor_voltage = (BatteryMonitoringData[BATTERY_5VCURR_RANK]*ADC_VOLTAGE_REF)/ADC_BIT_VALUE;
 800ea32:	683b      	ldr	r3, [r7, #0]
 800ea34:	881b      	ldrh	r3, [r3, #0]
 800ea36:	4618      	mov	r0, r3
 800ea38:	f7ff f956 	bl	800dce8 <__aeabi_i2d>
 800ea3c:	a319      	add	r3, pc, #100	; (adr r3, 800eaa4 <Battery_ReadCurrent5V+0x7c>)
 800ea3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea42:	f7ff f9bb 	bl	800ddbc <__aeabi_dmul>
 800ea46:	4602      	mov	r2, r0
 800ea48:	460b      	mov	r3, r1
 800ea4a:	4610      	mov	r0, r2
 800ea4c:	4619      	mov	r1, r3
 800ea4e:	f04f 0200 	mov.w	r2, #0
 800ea52:	4b13      	ldr	r3, [pc, #76]	; (800eaa0 <Battery_ReadCurrent5V+0x78>)
 800ea54:	f7ff fadc 	bl	800e010 <__aeabi_ddiv>
 800ea58:	4602      	mov	r2, r0
 800ea5a:	460b      	mov	r3, r1
 800ea5c:	4610      	mov	r0, r2
 800ea5e:	4619      	mov	r1, r3
 800ea60:	f7ff fc5c 	bl	800e31c <__aeabi_d2f>
 800ea64:	4603      	mov	r3, r0
 800ea66:	60fb      	str	r3, [r7, #12]
	battery_struct->CurrentConsumption5V = shunt_resistor_voltage/SHUNT_RESISTOR_VALUE;
 800ea68:	68f8      	ldr	r0, [r7, #12]
 800ea6a:	f7ff f94f 	bl	800dd0c <__aeabi_f2d>
 800ea6e:	a30a      	add	r3, pc, #40	; (adr r3, 800ea98 <Battery_ReadCurrent5V+0x70>)
 800ea70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea74:	f7ff facc 	bl	800e010 <__aeabi_ddiv>
 800ea78:	4602      	mov	r2, r0
 800ea7a:	460b      	mov	r3, r1
 800ea7c:	4610      	mov	r0, r2
 800ea7e:	4619      	mov	r1, r3
 800ea80:	f7ff fc4c 	bl	800e31c <__aeabi_d2f>
 800ea84:	4602      	mov	r2, r0
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	609a      	str	r2, [r3, #8]
}
 800ea8a:	bf00      	nop
 800ea8c:	3710      	adds	r7, #16
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	bd80      	pop	{r7, pc}
 800ea92:	bf00      	nop
 800ea94:	f3af 8000 	nop.w
 800ea98:	d2f1a9fc 	.word	0xd2f1a9fc
 800ea9c:	3f60624d 	.word	0x3f60624d
 800eaa0:	40b00000 	.word	0x40b00000
 800eaa4:	66666666 	.word	0x66666666
 800eaa8:	400a6666 	.word	0x400a6666
 800eaac:	00000000 	.word	0x00000000

0800eab0 <Battery_RemaningTime>:

void Battery_RemaningTime(Battery_t * battery_struct){
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b084      	sub	sp, #16
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]

	float32_t current_average = battery_struct->CurrentConsumption3V3 + battery_struct->CurrentConsumption5V;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	ed93 7a01 	vldr	s14, [r3, #4]
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	edd3 7a02 	vldr	s15, [r3, #8]
 800eac4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eac8:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t battery_remaining_hour = BATTERRY_CAPACITY/current_average;
 800eacc:	68f8      	ldr	r0, [r7, #12]
 800eace:	f7ff f91d 	bl	800dd0c <__aeabi_f2d>
 800ead2:	4602      	mov	r2, r0
 800ead4:	460b      	mov	r3, r1
 800ead6:	a10f      	add	r1, pc, #60	; (adr r1, 800eb14 <Battery_RemaningTime+0x64>)
 800ead8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eadc:	f7ff fa98 	bl	800e010 <__aeabi_ddiv>
 800eae0:	4602      	mov	r2, r0
 800eae2:	460b      	mov	r3, r1
 800eae4:	4610      	mov	r0, r2
 800eae6:	4619      	mov	r1, r3
 800eae8:	f7ff fc18 	bl	800e31c <__aeabi_d2f>
 800eaec:	4603      	mov	r3, r0
 800eaee:	60bb      	str	r3, [r7, #8]
	battery_struct->battery_left_ms = (battery_remaining_hour*3600000);
 800eaf0:	edd7 7a02 	vldr	s15, [r7, #8]
 800eaf4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800eb10 <Battery_RemaningTime+0x60>
 800eaf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eafc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eb00:	ee17 2a90 	vmov	r2, s15
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	60da      	str	r2, [r3, #12]
}
 800eb08:	bf00      	nop
 800eb0a:	3710      	adds	r7, #16
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd80      	pop	{r7, pc}
 800eb10:	4a5bba00 	.word	0x4a5bba00
 800eb14:	9999999a 	.word	0x9999999a
 800eb18:	40019999 	.word	0x40019999

0800eb1c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800eb1c:	b5b0      	push	{r4, r5, r7, lr}
 800eb1e:	b0b8      	sub	sp, #224	; 0xe0
 800eb20:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN Init */

	/*Configure output for timer*/
	PropulsionAndControl_Init(&HDW_CONTROLLER_struct, ESC_GPIO_PIN, ESC_GPIO_PORT, SERVO_LEFT_GPIO_PIN, SERVO_LEFT_GPIO_PORT, SERVO_RIGHT_GPIO_PIN, SERVO_RIGHT_GPIO_PORT, ESC_TIMER_CHANNEL_NBR, SERVO_LEFT_TIMER_CHANNEL_NBR, SERVO_RIGHT_TIMER_CHANNEL_NBR, &htim4);
 800eb22:	4b6b      	ldr	r3, [pc, #428]	; (800ecd0 <MX_FREERTOS_Init+0x1b4>)
 800eb24:	9306      	str	r3, [sp, #24]
 800eb26:	2302      	movs	r3, #2
 800eb28:	9305      	str	r3, [sp, #20]
 800eb2a:	2301      	movs	r3, #1
 800eb2c:	9304      	str	r3, [sp, #16]
 800eb2e:	2304      	movs	r3, #4
 800eb30:	9303      	str	r3, [sp, #12]
 800eb32:	4b68      	ldr	r3, [pc, #416]	; (800ecd4 <MX_FREERTOS_Init+0x1b8>)
 800eb34:	9302      	str	r3, [sp, #8]
 800eb36:	2380      	movs	r3, #128	; 0x80
 800eb38:	9301      	str	r3, [sp, #4]
 800eb3a:	4b66      	ldr	r3, [pc, #408]	; (800ecd4 <MX_FREERTOS_Init+0x1b8>)
 800eb3c:	9300      	str	r3, [sp, #0]
 800eb3e:	2340      	movs	r3, #64	; 0x40
 800eb40:	4a64      	ldr	r2, [pc, #400]	; (800ecd4 <MX_FREERTOS_Init+0x1b8>)
 800eb42:	f44f 7100 	mov.w	r1, #512	; 0x200
 800eb46:	4864      	ldr	r0, [pc, #400]	; (800ecd8 <MX_FREERTOS_Init+0x1bc>)
 800eb48:	f002 fc2c 	bl	80113a4 <PropulsionAndControl_Init>

	/*Init for IMU sensors*/
	BNO055_Init(&hi2c2, &IMU_BNO055_struct);
 800eb4c:	4963      	ldr	r1, [pc, #396]	; (800ecdc <MX_FREERTOS_Init+0x1c0>)
 800eb4e:	4864      	ldr	r0, [pc, #400]	; (800ece0 <MX_FREERTOS_Init+0x1c4>)
 800eb50:	f000 fe2d 	bl	800f7ae <BNO055_Init>


  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of I2C_Controller */
  osMutexDef(I2C_Controller);
 800eb54:	2300      	movs	r3, #0
 800eb56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  I2C_ControllerHandle = osMutexCreate(osMutex(I2C_Controller));
 800eb5a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800eb5e:	4618      	mov	r0, r3
 800eb60:	f00a fc50 	bl	8019404 <osMutexCreate>
 800eb64:	4603      	mov	r3, r0
 800eb66:	4a5f      	ldr	r2, [pc, #380]	; (800ece4 <MX_FREERTOS_Init+0x1c8>)
 800eb68:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of GPS_UART_Semaphore */
  osSemaphoreDef(GPS_UART_Semaphore);
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  GPS_UART_SemaphoreHandle = osSemaphoreCreate(osSemaphore(GPS_UART_Semaphore), 1);
 800eb70:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800eb74:	2101      	movs	r1, #1
 800eb76:	4618      	mov	r0, r3
 800eb78:	f00a fc50 	bl	801941c <osSemaphoreCreate>
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	4a5a      	ldr	r2, [pc, #360]	; (800ece8 <MX_FREERTOS_Init+0x1cc>)
 800eb80:	6013      	str	r3, [r2, #0]

  /* definition and creation of HG_PROTECTION_SEM */
  osSemaphoreDef(HG_PROTECTION_SEM);
 800eb82:	2300      	movs	r3, #0
 800eb84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  HG_PROTECTION_SEMHandle = osSemaphoreCreate(osSemaphore(HG_PROTECTION_SEM), 1);
 800eb88:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800eb8c:	2101      	movs	r1, #1
 800eb8e:	4618      	mov	r0, r3
 800eb90:	f00a fc44 	bl	801941c <osSemaphoreCreate>
 800eb94:	4603      	mov	r3, r0
 800eb96:	4a55      	ldr	r2, [pc, #340]	; (800ecec <MX_FREERTOS_Init+0x1d0>)
 800eb98:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of LedTask */
  osThreadDef(LedTask, StartLedTask, osPriorityNormal, 0, 128);
 800eb9a:	4b55      	ldr	r3, [pc, #340]	; (800ecf0 <MX_FREERTOS_Init+0x1d4>)
 800eb9c:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 800eba0:	461d      	mov	r5, r3
 800eba2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eba4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eba6:	682b      	ldr	r3, [r5, #0]
 800eba8:	6023      	str	r3, [r4, #0]
  LedTaskHandle = osThreadCreate(osThread(LedTask), NULL);
 800ebaa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800ebae:	2100      	movs	r1, #0
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	f00a fbec 	bl	801938e <osThreadCreate>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	4a4e      	ldr	r2, [pc, #312]	; (800ecf4 <MX_FREERTOS_Init+0x1d8>)
 800ebba:	6013      	str	r3, [r2, #0]

  /* definition and creation of Roll_PID */
  osThreadDef(Roll_PID, StartRoll_PID, osPriorityLow, 0, 128);
 800ebbc:	4b4e      	ldr	r3, [pc, #312]	; (800ecf8 <MX_FREERTOS_Init+0x1dc>)
 800ebbe:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800ebc2:	461d      	mov	r5, r3
 800ebc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ebc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ebc8:	682b      	ldr	r3, [r5, #0]
 800ebca:	6023      	str	r3, [r4, #0]
  Roll_PIDHandle = osThreadCreate(osThread(Roll_PID), NULL);
 800ebcc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800ebd0:	2100      	movs	r1, #0
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	f00a fbdb 	bl	801938e <osThreadCreate>
 800ebd8:	4603      	mov	r3, r0
 800ebda:	4a48      	ldr	r2, [pc, #288]	; (800ecfc <MX_FREERTOS_Init+0x1e0>)
 800ebdc:	6013      	str	r3, [r2, #0]

  /* definition and creation of Pitch_PID */
  osThreadDef(Pitch_PID, StartPitch_PID, osPriorityLow, 0, 128);
 800ebde:	4b48      	ldr	r3, [pc, #288]	; (800ed00 <MX_FREERTOS_Init+0x1e4>)
 800ebe0:	f107 0478 	add.w	r4, r7, #120	; 0x78
 800ebe4:	461d      	mov	r5, r3
 800ebe6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ebe8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ebea:	682b      	ldr	r3, [r5, #0]
 800ebec:	6023      	str	r3, [r4, #0]
  Pitch_PIDHandle = osThreadCreate(osThread(Pitch_PID), NULL);
 800ebee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800ebf2:	2100      	movs	r1, #0
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	f00a fbca 	bl	801938e <osThreadCreate>
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	4a41      	ldr	r2, [pc, #260]	; (800ed04 <MX_FREERTOS_Init+0x1e8>)
 800ebfe:	6013      	str	r3, [r2, #0]

  /* definition and creation of Yaw_PID */
  osThreadDef(Yaw_PID, StartYaw_PID, osPriorityLow, 0, 128);
 800ec00:	4b41      	ldr	r3, [pc, #260]	; (800ed08 <MX_FREERTOS_Init+0x1ec>)
 800ec02:	f107 0464 	add.w	r4, r7, #100	; 0x64
 800ec06:	461d      	mov	r5, r3
 800ec08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ec0c:	682b      	ldr	r3, [r5, #0]
 800ec0e:	6023      	str	r3, [r4, #0]
  Yaw_PIDHandle = osThreadCreate(osThread(Yaw_PID), NULL);
 800ec10:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ec14:	2100      	movs	r1, #0
 800ec16:	4618      	mov	r0, r3
 800ec18:	f00a fbb9 	bl	801938e <osThreadCreate>
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	4a3b      	ldr	r2, [pc, #236]	; (800ed0c <MX_FREERTOS_Init+0x1f0>)
 800ec20:	6013      	str	r3, [r2, #0]

  /* definition and creation of PressureMonitor */
  osThreadDef(PressureMonitor, StartPressureMonitor, osPriorityLow, 0, 128);
 800ec22:	4b3b      	ldr	r3, [pc, #236]	; (800ed10 <MX_FREERTOS_Init+0x1f4>)
 800ec24:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800ec28:	461d      	mov	r5, r3
 800ec2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ec2e:	682b      	ldr	r3, [r5, #0]
 800ec30:	6023      	str	r3, [r4, #0]
  PressureMonitorHandle = osThreadCreate(osThread(PressureMonitor), NULL);
 800ec32:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ec36:	2100      	movs	r1, #0
 800ec38:	4618      	mov	r0, r3
 800ec3a:	f00a fba8 	bl	801938e <osThreadCreate>
 800ec3e:	4603      	mov	r3, r0
 800ec40:	4a34      	ldr	r2, [pc, #208]	; (800ed14 <MX_FREERTOS_Init+0x1f8>)
 800ec42:	6013      	str	r3, [r2, #0]

  /* definition and creation of GPS */
  osThreadDef(GPS, StartGPS, osPriorityLow, 0, 128);
 800ec44:	4b34      	ldr	r3, [pc, #208]	; (800ed18 <MX_FREERTOS_Init+0x1fc>)
 800ec46:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800ec4a:	461d      	mov	r5, r3
 800ec4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ec50:	682b      	ldr	r3, [r5, #0]
 800ec52:	6023      	str	r3, [r4, #0]
  GPSHandle = osThreadCreate(osThread(GPS), NULL);
 800ec54:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ec58:	2100      	movs	r1, #0
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	f00a fb97 	bl	801938e <osThreadCreate>
 800ec60:	4603      	mov	r3, r0
 800ec62:	4a2e      	ldr	r2, [pc, #184]	; (800ed1c <MX_FREERTOS_Init+0x200>)
 800ec64:	6013      	str	r3, [r2, #0]

  /* definition and creation of MainTask */
  osThreadDef(MainTask, StartMainTask, osPriorityLow, 0, 256);
 800ec66:	4b2e      	ldr	r3, [pc, #184]	; (800ed20 <MX_FREERTOS_Init+0x204>)
 800ec68:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800ec6c:	461d      	mov	r5, r3
 800ec6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ec72:	682b      	ldr	r3, [r5, #0]
 800ec74:	6023      	str	r3, [r4, #0]
  MainTaskHandle = osThreadCreate(osThread(MainTask), NULL);
 800ec76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ec7a:	2100      	movs	r1, #0
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	f00a fb86 	bl	801938e <osThreadCreate>
 800ec82:	4603      	mov	r3, r0
 800ec84:	4a27      	ldr	r2, [pc, #156]	; (800ed24 <MX_FREERTOS_Init+0x208>)
 800ec86:	6013      	str	r3, [r2, #0]

  /* definition and creation of BatteryMonitori */
  osThreadDef(BatteryMonitori, StartBatteryMonitoring, osPriorityLow, 0, 128);
 800ec88:	4b27      	ldr	r3, [pc, #156]	; (800ed28 <MX_FREERTOS_Init+0x20c>)
 800ec8a:	f107 0414 	add.w	r4, r7, #20
 800ec8e:	461d      	mov	r5, r3
 800ec90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ec94:	682b      	ldr	r3, [r5, #0]
 800ec96:	6023      	str	r3, [r4, #0]
  BatteryMonitoriHandle = osThreadCreate(osThread(BatteryMonitori), NULL);
 800ec98:	f107 0314 	add.w	r3, r7, #20
 800ec9c:	2100      	movs	r1, #0
 800ec9e:	4618      	mov	r0, r3
 800eca0:	f00a fb75 	bl	801938e <osThreadCreate>
 800eca4:	4603      	mov	r3, r0
 800eca6:	4a21      	ldr	r2, [pc, #132]	; (800ed2c <MX_FREERTOS_Init+0x210>)
 800eca8:	6013      	str	r3, [r2, #0]

  /* definition and creation of Telemetry */
  osThreadDef(Telemetry, StartTelemetry, osPriorityIdle, 0, 256);
 800ecaa:	4b21      	ldr	r3, [pc, #132]	; (800ed30 <MX_FREERTOS_Init+0x214>)
 800ecac:	463c      	mov	r4, r7
 800ecae:	461d      	mov	r5, r3
 800ecb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ecb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ecb4:	682b      	ldr	r3, [r5, #0]
 800ecb6:	6023      	str	r3, [r4, #0]
  TelemetryHandle = osThreadCreate(osThread(Telemetry), NULL);
 800ecb8:	463b      	mov	r3, r7
 800ecba:	2100      	movs	r1, #0
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f00a fb66 	bl	801938e <osThreadCreate>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	4a1b      	ldr	r2, [pc, #108]	; (800ed34 <MX_FREERTOS_Init+0x218>)
 800ecc6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800ecc8:	bf00      	nop
 800ecca:	37c0      	adds	r7, #192	; 0xc0
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bdb0      	pop	{r4, r5, r7, pc}
 800ecd0:	200008b4 	.word	0x200008b4
 800ecd4:	48000400 	.word	0x48000400
 800ecd8:	20000304 	.word	0x20000304
 800ecdc:	20000248 	.word	0x20000248
 800ece0:	200001fc 	.word	0x200001fc
 800ece4:	200001f0 	.word	0x200001f0
 800ece8:	200001f4 	.word	0x200001f4
 800ecec:	200001f8 	.word	0x200001f8
 800ecf0:	0801c7f0 	.word	0x0801c7f0
 800ecf4:	200001cc 	.word	0x200001cc
 800ecf8:	0801c810 	.word	0x0801c810
 800ecfc:	200001d0 	.word	0x200001d0
 800ed00:	0801c830 	.word	0x0801c830
 800ed04:	200001d4 	.word	0x200001d4
 800ed08:	0801c84c 	.word	0x0801c84c
 800ed0c:	200001d8 	.word	0x200001d8
 800ed10:	0801c870 	.word	0x0801c870
 800ed14:	200001dc 	.word	0x200001dc
 800ed18:	0801c888 	.word	0x0801c888
 800ed1c:	200001e0 	.word	0x200001e0
 800ed20:	0801c8a8 	.word	0x0801c8a8
 800ed24:	200001e4 	.word	0x200001e4
 800ed28:	0801c8cc 	.word	0x0801c8cc
 800ed2c:	200001e8 	.word	0x200001e8
 800ed30:	0801c8ec 	.word	0x0801c8ec
 800ed34:	200001ec 	.word	0x200001ec

0800ed38 <StartLedTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLedTask */
void StartLedTask(void const * argument)
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b082      	sub	sp, #8
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	/*htim3.Instance->CCR1 = 1000;
	vTaskDelay(100);
	htim3.Instance->CCR1 = 0;*/
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800ed40:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ed44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ed48:	f005 f8a0 	bl	8013e8c <HAL_GPIO_TogglePin>
    vTaskDelay(5000);
 800ed4c:	f241 3088 	movw	r0, #5000	; 0x1388
 800ed50:	f00b f9ce 	bl	801a0f0 <vTaskDelay>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800ed54:	e7f4      	b.n	800ed40 <StartLedTask+0x8>
	...

0800ed58 <StartRoll_PID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRoll_PID */
void StartRoll_PID(void const * argument)
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b082      	sub	sp, #8
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRoll_PID */


	/*PID factor init*/
	Pid_Init(&hpid_roll, PID_KP_ROLL, PID_KI_ROLL, PID_KD_ROLL);
 800ed60:	ed9f 1a11 	vldr	s2, [pc, #68]	; 800eda8 <StartRoll_PID+0x50>
 800ed64:	eddf 0a11 	vldr	s1, [pc, #68]	; 800edac <StartRoll_PID+0x54>
 800ed68:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800edb0 <StartRoll_PID+0x58>
 800ed6c:	4811      	ldr	r0, [pc, #68]	; (800edb4 <StartRoll_PID+0x5c>)
 800ed6e:	f002 f8f3 	bl	8010f58 <Pid_Init>

  /* Infinite loop */
	for(;;)
	{	/*Read roll axis data*/
		xSemaphoreTake(I2C_ControllerHandle,25);
 800ed72:	4b11      	ldr	r3, [pc, #68]	; (800edb8 <StartRoll_PID+0x60>)
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	2119      	movs	r1, #25
 800ed78:	4618      	mov	r0, r3
 800ed7a:	f00a fe77 	bl	8019a6c <xQueueSemaphoreTake>
		BNO055_ReadEuler_Roll(&hi2c2, &IMU_BNO055_struct);
 800ed7e:	490f      	ldr	r1, [pc, #60]	; (800edbc <StartRoll_PID+0x64>)
 800ed80:	480f      	ldr	r0, [pc, #60]	; (800edc0 <StartRoll_PID+0x68>)
 800ed82:	f000 fe8f 	bl	800faa4 <BNO055_ReadEuler_Roll>
		xSemaphoreGive(I2C_ControllerHandle);
 800ed86:	4b0c      	ldr	r3, [pc, #48]	; (800edb8 <StartRoll_PID+0x60>)
 800ed88:	6818      	ldr	r0, [r3, #0]
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	2100      	movs	r1, #0
 800ed90:	f00a fcf8 	bl	8019784 <xQueueGenericSend>

		/*Compensate PID*/
		Pid_CompensateRoll(&hpid_roll, &COMMAND_struct, &IMU_BNO055_struct, &HDW_CONTROLLER_struct);
 800ed94:	4b0b      	ldr	r3, [pc, #44]	; (800edc4 <StartRoll_PID+0x6c>)
 800ed96:	4a09      	ldr	r2, [pc, #36]	; (800edbc <StartRoll_PID+0x64>)
 800ed98:	490b      	ldr	r1, [pc, #44]	; (800edc8 <StartRoll_PID+0x70>)
 800ed9a:	4806      	ldr	r0, [pc, #24]	; (800edb4 <StartRoll_PID+0x5c>)
 800ed9c:	f002 f93a 	bl	8011014 <Pid_CompensateRoll>
		vTaskDelay(150);
 800eda0:	2096      	movs	r0, #150	; 0x96
 800eda2:	f00b f9a5 	bl	801a0f0 <vTaskDelay>
		xSemaphoreTake(I2C_ControllerHandle,25);
 800eda6:	e7e4      	b.n	800ed72 <StartRoll_PID+0x1a>
 800eda8:	bdb15662 	.word	0xbdb15662
 800edac:	bce59984 	.word	0xbce59984
 800edb0:	be07bf5a 	.word	0xbe07bf5a
 800edb4:	200001a8 	.word	0x200001a8
 800edb8:	200001f0 	.word	0x200001f0
 800edbc:	20000248 	.word	0x20000248
 800edc0:	200001fc 	.word	0x200001fc
 800edc4:	20000304 	.word	0x20000304
 800edc8:	200002f0 	.word	0x200002f0

0800edcc <StartPitch_PID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPitch_PID */
void StartPitch_PID(void const * argument)
{
 800edcc:	b580      	push	{r7, lr}
 800edce:	b082      	sub	sp, #8
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPitch_PID */
	Pid_Init(&hpid_pitch, PID_KP_PITCH, PID_KI_PITCH, PID_KD_PITCH);
 800edd4:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 800edd8:	eddf 0a10 	vldr	s1, [pc, #64]	; 800ee1c <StartPitch_PID+0x50>
 800eddc:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800ee20 <StartPitch_PID+0x54>
 800ede0:	4810      	ldr	r0, [pc, #64]	; (800ee24 <StartPitch_PID+0x58>)
 800ede2:	f002 f8b9 	bl	8010f58 <Pid_Init>
  /* Infinite loop */
  for(;;)
  {
	  	/*Read pitch axis data*/
		xSemaphoreTake(I2C_ControllerHandle,25);
 800ede6:	4b10      	ldr	r3, [pc, #64]	; (800ee28 <StartPitch_PID+0x5c>)
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	2119      	movs	r1, #25
 800edec:	4618      	mov	r0, r3
 800edee:	f00a fe3d 	bl	8019a6c <xQueueSemaphoreTake>
		BNO055_ReadEuler_Pitch(&hi2c2, &IMU_BNO055_struct);
 800edf2:	490e      	ldr	r1, [pc, #56]	; (800ee2c <StartPitch_PID+0x60>)
 800edf4:	480e      	ldr	r0, [pc, #56]	; (800ee30 <StartPitch_PID+0x64>)
 800edf6:	f000 fea7 	bl	800fb48 <BNO055_ReadEuler_Pitch>
		xSemaphoreGive(I2C_ControllerHandle);
 800edfa:	4b0b      	ldr	r3, [pc, #44]	; (800ee28 <StartPitch_PID+0x5c>)
 800edfc:	6818      	ldr	r0, [r3, #0]
 800edfe:	2300      	movs	r3, #0
 800ee00:	2200      	movs	r2, #0
 800ee02:	2100      	movs	r1, #0
 800ee04:	f00a fcbe 	bl	8019784 <xQueueGenericSend>

		/*Compensate PID */
		Pid_CompensatePitch(&hpid_pitch, &COMMAND_struct, &IMU_BNO055_struct, &HDW_CONTROLLER_struct);
 800ee08:	4b0a      	ldr	r3, [pc, #40]	; (800ee34 <StartPitch_PID+0x68>)
 800ee0a:	4a08      	ldr	r2, [pc, #32]	; (800ee2c <StartPitch_PID+0x60>)
 800ee0c:	490a      	ldr	r1, [pc, #40]	; (800ee38 <StartPitch_PID+0x6c>)
 800ee0e:	4805      	ldr	r0, [pc, #20]	; (800ee24 <StartPitch_PID+0x58>)
 800ee10:	f002 f9c6 	bl	80111a0 <Pid_CompensatePitch>
		vTaskDelay(150);
 800ee14:	2096      	movs	r0, #150	; 0x96
 800ee16:	f00b f96b 	bl	801a0f0 <vTaskDelay>
		xSemaphoreTake(I2C_ControllerHandle,25);
 800ee1a:	e7e4      	b.n	800ede6 <StartPitch_PID+0x1a>
 800ee1c:	3ccccccd 	.word	0x3ccccccd
 800ee20:	42c80000 	.word	0x42c80000
 800ee24:	20000160 	.word	0x20000160
 800ee28:	200001f0 	.word	0x200001f0
 800ee2c:	20000248 	.word	0x20000248
 800ee30:	200001fc 	.word	0x200001fc
 800ee34:	20000304 	.word	0x20000304
 800ee38:	200002f0 	.word	0x200002f0

0800ee3c <StartYaw_PID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartYaw_PID */
void StartYaw_PID(void const * argument)
{
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	b082      	sub	sp, #8
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartYaw_PID */
	Pid_Init(&hpid_yaw, PID_KP_YAW, PID_KI_YAW, PID_KD_YAW);
 800ee44:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 800ee48:	eddf 0a10 	vldr	s1, [pc, #64]	; 800ee8c <StartYaw_PID+0x50>
 800ee4c:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800ee90 <StartYaw_PID+0x54>
 800ee50:	4810      	ldr	r0, [pc, #64]	; (800ee94 <StartYaw_PID+0x58>)
 800ee52:	f002 f881 	bl	8010f58 <Pid_Init>
  /* Infinite loop */
  for(;;)
  {
	  	/*Read yaw axis data*/
		xSemaphoreTake(I2C_ControllerHandle,25);
 800ee56:	4b10      	ldr	r3, [pc, #64]	; (800ee98 <StartYaw_PID+0x5c>)
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	2119      	movs	r1, #25
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	f00a fe05 	bl	8019a6c <xQueueSemaphoreTake>
		BNO055_ReadEuler_Yaw(&hi2c2, &IMU_BNO055_struct);
 800ee62:	490e      	ldr	r1, [pc, #56]	; (800ee9c <StartYaw_PID+0x60>)
 800ee64:	480e      	ldr	r0, [pc, #56]	; (800eea0 <StartYaw_PID+0x64>)
 800ee66:	f000 fec1 	bl	800fbec <BNO055_ReadEuler_Yaw>
		xSemaphoreGive(I2C_ControllerHandle);
 800ee6a:	4b0b      	ldr	r3, [pc, #44]	; (800ee98 <StartYaw_PID+0x5c>)
 800ee6c:	6818      	ldr	r0, [r3, #0]
 800ee6e:	2300      	movs	r3, #0
 800ee70:	2200      	movs	r2, #0
 800ee72:	2100      	movs	r1, #0
 800ee74:	f00a fc86 	bl	8019784 <xQueueGenericSend>

		/*Compensate PID step 1 - error calculation */
		Pid_CompensateYaw(&hpid_yaw, &COMMAND_struct, &IMU_BNO055_struct, &HDW_CONTROLLER_struct);
 800ee78:	4b0a      	ldr	r3, [pc, #40]	; (800eea4 <StartYaw_PID+0x68>)
 800ee7a:	4a08      	ldr	r2, [pc, #32]	; (800ee9c <StartYaw_PID+0x60>)
 800ee7c:	490a      	ldr	r1, [pc, #40]	; (800eea8 <StartYaw_PID+0x6c>)
 800ee7e:	4805      	ldr	r0, [pc, #20]	; (800ee94 <StartYaw_PID+0x58>)
 800ee80:	f002 f885 	bl	8010f8e <Pid_CompensateYaw>
		vTaskDelay(150);
 800ee84:	2096      	movs	r0, #150	; 0x96
 800ee86:	f00b f933 	bl	801a0f0 <vTaskDelay>
		xSemaphoreTake(I2C_ControllerHandle,25);
 800ee8a:	e7e4      	b.n	800ee56 <StartYaw_PID+0x1a>
 800ee8c:	3ccccccd 	.word	0x3ccccccd
 800ee90:	42c80000 	.word	0x42c80000
 800ee94:	20000184 	.word	0x20000184
 800ee98:	200001f0 	.word	0x200001f0
 800ee9c:	20000248 	.word	0x20000248
 800eea0:	200001fc 	.word	0x200001fc
 800eea4:	20000304 	.word	0x20000304
 800eea8:	200002f0 	.word	0x200002f0

0800eeac <StartPressureMonitor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPressureMonitor */
void StartPressureMonitor(void const * argument)
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b082      	sub	sp, #8
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPressureMonitor */
	BMP390_Init(&hi2c2);
 800eeb4:	480f      	ldr	r0, [pc, #60]	; (800eef4 <StartPressureMonitor+0x48>)
 800eeb6:	f000 f9ed 	bl	800f294 <BMP390_Init>

	/*Barometer calibration*/
	BMP390_GetP0Pressure(&hi2c2, &ALTIMETER_struct, I2C_ControllerHandle);
 800eeba:	4b0f      	ldr	r3, [pc, #60]	; (800eef8 <StartPressureMonitor+0x4c>)
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	461a      	mov	r2, r3
 800eec0:	490e      	ldr	r1, [pc, #56]	; (800eefc <StartPressureMonitor+0x50>)
 800eec2:	480c      	ldr	r0, [pc, #48]	; (800eef4 <StartPressureMonitor+0x48>)
 800eec4:	f000 fa30 	bl	800f328 <BMP390_GetP0Pressure>

  /* Infinite loop */
  for(;;)
  {
	  BMP390_ReadPress(&hi2c2,&ALTIMETER_struct, I2C_ControllerHandle);
 800eec8:	4b0b      	ldr	r3, [pc, #44]	; (800eef8 <StartPressureMonitor+0x4c>)
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	461a      	mov	r2, r3
 800eece:	490b      	ldr	r1, [pc, #44]	; (800eefc <StartPressureMonitor+0x50>)
 800eed0:	4808      	ldr	r0, [pc, #32]	; (800eef4 <StartPressureMonitor+0x48>)
 800eed2:	f000 f979 	bl	800f1c8 <BMP390_ReadPress>
	  BMP390_ReadTemp(&hi2c2, &ALTIMETER_struct, I2C_ControllerHandle);
 800eed6:	4b08      	ldr	r3, [pc, #32]	; (800eef8 <StartPressureMonitor+0x4c>)
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	461a      	mov	r2, r3
 800eedc:	4907      	ldr	r1, [pc, #28]	; (800eefc <StartPressureMonitor+0x50>)
 800eede:	4805      	ldr	r0, [pc, #20]	; (800eef4 <StartPressureMonitor+0x48>)
 800eee0:	f000 f91c 	bl	800f11c <BMP390_ReadTemp>
	  BMP390_GetRelativeAltitude(&ALTIMETER_struct);
 800eee4:	4805      	ldr	r0, [pc, #20]	; (800eefc <StartPressureMonitor+0x50>)
 800eee6:	f000 fa4b 	bl	800f380 <BMP390_GetRelativeAltitude>
	  /*Recalibrate sensor if gps data move too much*/
	  vTaskDelay(500);
 800eeea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800eeee:	f00b f8ff 	bl	801a0f0 <vTaskDelay>
	  BMP390_ReadPress(&hi2c2,&ALTIMETER_struct, I2C_ControllerHandle);
 800eef2:	e7e9      	b.n	800eec8 <StartPressureMonitor+0x1c>
 800eef4:	200001fc 	.word	0x200001fc
 800eef8:	200001f0 	.word	0x200001f0
 800eefc:	20000334 	.word	0x20000334

0800ef00 <StartGPS>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGPS */
void StartGPS(void const * argument)
{
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b082      	sub	sp, #8
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  /*TO BE DONE marche pas trop */
	  /*When UART IT then block task until IT*/
	  HAL_UART_Receive_IT(&huart4, &gps_receive_rx, BUFFER_SIZE_NMEA);
 800ef08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ef0c:	4909      	ldr	r1, [pc, #36]	; (800ef34 <StartGPS+0x34>)
 800ef0e:	480a      	ldr	r0, [pc, #40]	; (800ef38 <StartGPS+0x38>)
 800ef10:	f008 fa84 	bl	801741c <HAL_UART_Receive_IT>
	  xSemaphoreTake(GPS_UART_SemaphoreHandle,100000);
 800ef14:	4b09      	ldr	r3, [pc, #36]	; (800ef3c <StartGPS+0x3c>)
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	4909      	ldr	r1, [pc, #36]	; (800ef40 <StartGPS+0x40>)
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	f00a fda6 	bl	8019a6c <xQueueSemaphoreTake>
	  gps_ReadNMEA(gps_receive_rx,&GPS_struct);
 800ef20:	4908      	ldr	r1, [pc, #32]	; (800ef44 <StartGPS+0x44>)
 800ef22:	4804      	ldr	r0, [pc, #16]	; (800ef34 <StartGPS+0x34>)
 800ef24:	f001 f82a 	bl	800ff7c <gps_ReadNMEA>
	  vTaskDelay(1000);
 800ef28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ef2c:	f00b f8e0 	bl	801a0f0 <vTaskDelay>
	  HAL_UART_Receive_IT(&huart4, &gps_receive_rx, BUFFER_SIZE_NMEA);
 800ef30:	e7ea      	b.n	800ef08 <StartGPS+0x8>
 800ef32:	bf00      	nop
 800ef34:	20000378 	.word	0x20000378
 800ef38:	20000900 	.word	0x20000900
 800ef3c:	200001f4 	.word	0x200001f4
 800ef40:	000186a0 	.word	0x000186a0
 800ef44:	20000348 	.word	0x20000348

0800ef48 <StartMainTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMainTask */
void StartMainTask(void const * argument)
{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b09c      	sub	sp, #112	; 0x70
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMainTask */
	  xSemaphoreTake(HG_PROTECTION_SEMHandle,9999999999999999);
 800ef50:	4b19      	ldr	r3, [pc, #100]	; (800efb8 <StartMainTask+0x70>)
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	4919      	ldr	r1, [pc, #100]	; (800efbc <StartMainTask+0x74>)
 800ef56:	4618      	mov	r0, r3
 800ef58:	f00a fd88 	bl	8019a6c <xQueueSemaphoreTake>
	  xSemaphoreTake(HG_PROTECTION_SEMHandle,9999999999999999);
 800ef5c:	4b16      	ldr	r3, [pc, #88]	; (800efb8 <StartMainTask+0x70>)
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	4916      	ldr	r1, [pc, #88]	; (800efbc <StartMainTask+0x74>)
 800ef62:	4618      	mov	r0, r3
 800ef64:	f00a fd82 	bl	8019a6c <xQueueSemaphoreTake>
	for(int i=0;i<5;i++){
 800ef68:	2300      	movs	r3, #0
 800ef6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ef6c:	e011      	b.n	800ef92 <StartMainTask+0x4a>
		htim3.Instance->CCR1 = 1000;
 800ef6e:	4b14      	ldr	r3, [pc, #80]	; (800efc0 <StartMainTask+0x78>)
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ef76:	635a      	str	r2, [r3, #52]	; 0x34
		vTaskDelay(100);
 800ef78:	2064      	movs	r0, #100	; 0x64
 800ef7a:	f00b f8b9 	bl	801a0f0 <vTaskDelay>
		htim3.Instance->CCR1 = 0;
 800ef7e:	4b10      	ldr	r3, [pc, #64]	; (800efc0 <StartMainTask+0x78>)
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	2200      	movs	r2, #0
 800ef84:	635a      	str	r2, [r3, #52]	; 0x34
		vTaskDelay(100);
 800ef86:	2064      	movs	r0, #100	; 0x64
 800ef88:	f00b f8b2 	bl	801a0f0 <vTaskDelay>
	for(int i=0;i<5;i++){
 800ef8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ef8e:	3301      	adds	r3, #1
 800ef90:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ef92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ef94:	2b04      	cmp	r3, #4
 800ef96:	ddea      	ble.n	800ef6e <StartMainTask+0x26>
  /* Infinite loop */
  for(;;)
  {

//	  BNO055_ReadLina(&hi2c2, &IMU_BNO055_struct, I2C_ControllerHandle);
	  BNO055_ReadAccel(&hi2c2, &IMU_BNO055_struct, I2C_ControllerHandle);
 800ef98:	4b0a      	ldr	r3, [pc, #40]	; (800efc4 <StartMainTask+0x7c>)
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	461a      	mov	r2, r3
 800ef9e:	490a      	ldr	r1, [pc, #40]	; (800efc8 <StartMainTask+0x80>)
 800efa0:	480a      	ldr	r0, [pc, #40]	; (800efcc <StartMainTask+0x84>)
 800efa2:	f000 fc61 	bl	800f868 <BNO055_ReadAccel>
	  BNO055_ComputeSpeed(&hi2c2, &IMU_BNO055_struct);
 800efa6:	4908      	ldr	r1, [pc, #32]	; (800efc8 <StartMainTask+0x80>)
 800efa8:	4808      	ldr	r0, [pc, #32]	; (800efcc <StartMainTask+0x84>)
 800efaa:	f000 fe59 	bl	800fc60 <BNO055_ComputeSpeed>


	  vTaskDelay(500);
 800efae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800efb2:	f00b f89d 	bl	801a0f0 <vTaskDelay>
	  BNO055_ReadAccel(&hi2c2, &IMU_BNO055_struct, I2C_ControllerHandle);
 800efb6:	e7ef      	b.n	800ef98 <StartMainTask+0x50>
 800efb8:	200001f8 	.word	0x200001f8
 800efbc:	6fc0ffff 	.word	0x6fc0ffff
 800efc0:	20000868 	.word	0x20000868
 800efc4:	200001f0 	.word	0x200001f0
 800efc8:	20000248 	.word	0x20000248
 800efcc:	200001fc 	.word	0x200001fc

0800efd0 <StartBatteryMonitoring>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBatteryMonitoring */
void StartBatteryMonitoring(void const * argument)
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b082      	sub	sp, #8
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBatteryMonitoring */
  /* Infinite loop */
  for(;;)
  {
	Battery_ReadBatteryVoltage(&BATTERY_Struct,BatteryMonitoringData);
 800efd8:	4909      	ldr	r1, [pc, #36]	; (800f000 <StartBatteryMonitoring+0x30>)
 800efda:	480a      	ldr	r0, [pc, #40]	; (800f004 <StartBatteryMonitoring+0x34>)
 800efdc:	f7ff fcb0 	bl	800e940 <Battery_ReadBatteryVoltage>
	Battery_ReadCurrent5V(&BATTERY_Struct, BatteryMonitoringData);
 800efe0:	4907      	ldr	r1, [pc, #28]	; (800f000 <StartBatteryMonitoring+0x30>)
 800efe2:	4808      	ldr	r0, [pc, #32]	; (800f004 <StartBatteryMonitoring+0x34>)
 800efe4:	f7ff fd20 	bl	800ea28 <Battery_ReadCurrent5V>
	Battery_ReadCurrent3V3(&BATTERY_Struct, BatteryMonitoringData);
 800efe8:	4905      	ldr	r1, [pc, #20]	; (800f000 <StartBatteryMonitoring+0x30>)
 800efea:	4806      	ldr	r0, [pc, #24]	; (800f004 <StartBatteryMonitoring+0x34>)
 800efec:	f7ff fcd8 	bl	800e9a0 <Battery_ReadCurrent3V3>
	Battery_RemaningTime(&BATTERY_Struct);
 800eff0:	4804      	ldr	r0, [pc, #16]	; (800f004 <StartBatteryMonitoring+0x34>)
 800eff2:	f7ff fd5d 	bl	800eab0 <Battery_RemaningTime>
    vTaskDelay(5000);
 800eff6:	f241 3088 	movw	r0, #5000	; 0x1388
 800effa:	f00b f879 	bl	801a0f0 <vTaskDelay>
	Battery_ReadBatteryVoltage(&BATTERY_Struct,BatteryMonitoringData);
 800effe:	e7eb      	b.n	800efd8 <StartBatteryMonitoring+0x8>
 800f000:	20000760 	.word	0x20000760
 800f004:	20000368 	.word	0x20000368

0800f008 <StartTelemetry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetry */
void StartTelemetry(void const * argument)
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b082      	sub	sp, #8
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTelemetry */
	WIOE5_Init(&huart5);
 800f010:	4803      	ldr	r0, [pc, #12]	; (800f020 <StartTelemetry+0x18>)
 800f012:	f001 fb71 	bl	80106f8 <WIOE5_Init>
  /* Infinite loop */
  for(;;)
  {
	  vTaskDelay(1000);
 800f016:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f01a:	f00b f869 	bl	801a0f0 <vTaskDelay>
 800f01e:	e7fa      	b.n	800f016 <StartTelemetry+0xe>
 800f020:	20000990 	.word	0x20000990

0800f024 <BMP390_EnablePressureSensor>:
	//Clearing the register is done by reading it
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, STATUS_REG, 1, &data, 1, 10);
}

void BMP390_EnablePressureSensor(I2C_HandleTypeDef *I2C){
 800f024:	b580      	push	{r7, lr}
 800f026:	b088      	sub	sp, #32
 800f028:	af04      	add	r7, sp, #16
 800f02a:	6078      	str	r0, [r7, #4]
	uint8_t reg_value;
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
 800f02c:	230a      	movs	r3, #10
 800f02e:	9302      	str	r3, [sp, #8]
 800f030:	2301      	movs	r3, #1
 800f032:	9301      	str	r3, [sp, #4]
 800f034:	f107 030f 	add.w	r3, r7, #15
 800f038:	9300      	str	r3, [sp, #0]
 800f03a:	2301      	movs	r3, #1
 800f03c:	221b      	movs	r2, #27
 800f03e:	21ec      	movs	r1, #236	; 0xec
 800f040:	6878      	ldr	r0, [r7, #4]
 800f042:	f005 f903 	bl	801424c <HAL_I2C_Mem_Read>
	data = (reg_value&0x32) + 0x01;
 800f046:	7bfb      	ldrb	r3, [r7, #15]
 800f048:	f003 0332 	and.w	r3, r3, #50	; 0x32
 800f04c:	b2db      	uxtb	r3, r3
 800f04e:	3301      	adds	r3, #1
 800f050:	b2db      	uxtb	r3, r3
 800f052:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
 800f054:	230a      	movs	r3, #10
 800f056:	9302      	str	r3, [sp, #8]
 800f058:	2301      	movs	r3, #1
 800f05a:	9301      	str	r3, [sp, #4]
 800f05c:	f107 030e 	add.w	r3, r7, #14
 800f060:	9300      	str	r3, [sp, #0]
 800f062:	2301      	movs	r3, #1
 800f064:	221b      	movs	r2, #27
 800f066:	21ec      	movs	r1, #236	; 0xec
 800f068:	6878      	ldr	r0, [r7, #4]
 800f06a:	f004 ffdb 	bl	8014024 <HAL_I2C_Mem_Write>
}
 800f06e:	bf00      	nop
 800f070:	3710      	adds	r7, #16
 800f072:	46bd      	mov	sp, r7
 800f074:	bd80      	pop	{r7, pc}

0800f076 <BMP390_EnableTempSensor>:
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
	data = (reg_value&0x31);
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
}

void BMP390_EnableTempSensor(I2C_HandleTypeDef *I2C){
 800f076:	b580      	push	{r7, lr}
 800f078:	b088      	sub	sp, #32
 800f07a:	af04      	add	r7, sp, #16
 800f07c:	6078      	str	r0, [r7, #4]
	uint8_t reg_value;
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
 800f07e:	230a      	movs	r3, #10
 800f080:	9302      	str	r3, [sp, #8]
 800f082:	2301      	movs	r3, #1
 800f084:	9301      	str	r3, [sp, #4]
 800f086:	f107 030f 	add.w	r3, r7, #15
 800f08a:	9300      	str	r3, [sp, #0]
 800f08c:	2301      	movs	r3, #1
 800f08e:	221b      	movs	r2, #27
 800f090:	21ec      	movs	r1, #236	; 0xec
 800f092:	6878      	ldr	r0, [r7, #4]
 800f094:	f005 f8da 	bl	801424c <HAL_I2C_Mem_Read>
	data = (reg_value&0x31) + 0x01;
 800f098:	7bfb      	ldrb	r3, [r7, #15]
 800f09a:	f003 0331 	and.w	r3, r3, #49	; 0x31
 800f09e:	b2db      	uxtb	r3, r3
 800f0a0:	3301      	adds	r3, #1
 800f0a2:	b2db      	uxtb	r3, r3
 800f0a4:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
 800f0a6:	230a      	movs	r3, #10
 800f0a8:	9302      	str	r3, [sp, #8]
 800f0aa:	2301      	movs	r3, #1
 800f0ac:	9301      	str	r3, [sp, #4]
 800f0ae:	f107 030e 	add.w	r3, r7, #14
 800f0b2:	9300      	str	r3, [sp, #0]
 800f0b4:	2301      	movs	r3, #1
 800f0b6:	221b      	movs	r2, #27
 800f0b8:	21ec      	movs	r1, #236	; 0xec
 800f0ba:	6878      	ldr	r0, [r7, #4]
 800f0bc:	f004 ffb2 	bl	8014024 <HAL_I2C_Mem_Write>
}
 800f0c0:	bf00      	nop
 800f0c2:	3710      	adds	r7, #16
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd80      	pop	{r7, pc}

0800f0c8 <BMP390_WakeUp>:
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
	data = (reg_value&0x03);
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
}

void BMP390_WakeUp(I2C_HandleTypeDef *I2C){
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b088      	sub	sp, #32
 800f0cc:	af04      	add	r7, sp, #16
 800f0ce:	6078      	str	r0, [r7, #4]
	uint8_t reg_value;
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
 800f0d0:	230a      	movs	r3, #10
 800f0d2:	9302      	str	r3, [sp, #8]
 800f0d4:	2301      	movs	r3, #1
 800f0d6:	9301      	str	r3, [sp, #4]
 800f0d8:	f107 030f 	add.w	r3, r7, #15
 800f0dc:	9300      	str	r3, [sp, #0]
 800f0de:	2301      	movs	r3, #1
 800f0e0:	221b      	movs	r2, #27
 800f0e2:	21ec      	movs	r1, #236	; 0xec
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	f005 f8b1 	bl	801424c <HAL_I2C_Mem_Read>
	data = (reg_value&0x03) + 0x30;
 800f0ea:	7bfb      	ldrb	r3, [r7, #15]
 800f0ec:	f003 0303 	and.w	r3, r3, #3
 800f0f0:	b2db      	uxtb	r3, r3
 800f0f2:	3330      	adds	r3, #48	; 0x30
 800f0f4:	b2db      	uxtb	r3, r3
 800f0f6:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
 800f0f8:	230a      	movs	r3, #10
 800f0fa:	9302      	str	r3, [sp, #8]
 800f0fc:	2301      	movs	r3, #1
 800f0fe:	9301      	str	r3, [sp, #4]
 800f100:	f107 030e 	add.w	r3, r7, #14
 800f104:	9300      	str	r3, [sp, #0]
 800f106:	2301      	movs	r3, #1
 800f108:	221b      	movs	r2, #27
 800f10a:	21ec      	movs	r1, #236	; 0xec
 800f10c:	6878      	ldr	r0, [r7, #4]
 800f10e:	f004 ff89 	bl	8014024 <HAL_I2C_Mem_Write>
}
 800f112:	bf00      	nop
 800f114:	3710      	adds	r7, #16
 800f116:	46bd      	mov	sp, r7
 800f118:	bd80      	pop	{r7, pc}
	...

0800f11c <BMP390_ReadTemp>:
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, CONFIG_REG, 1, &reg_value, 1, 10);
	data = (reg_value&0x01) + (value<<1);
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, OSR_REG, 1, &data, 1, 10);
}

void BMP390_ReadTemp(I2C_HandleTypeDef *I2C,ALTIMETER_t *altimeter,osMutexId I2CControllerProtect){
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b08a      	sub	sp, #40	; 0x28
 800f120:	af04      	add	r7, sp, #16
 800f122:	60f8      	str	r0, [r7, #12]
 800f124:	60b9      	str	r1, [r7, #8]
 800f126:	607a      	str	r2, [r7, #4]
	uint8_t XLSB;
	uint8_t LSB;
	uint8_t MSB;
	uint32_t temp;

	xSemaphoreTake(I2CControllerProtect, 35);
 800f128:	2123      	movs	r1, #35	; 0x23
 800f12a:	6878      	ldr	r0, [r7, #4]
 800f12c:	f00a fc9e 	bl	8019a6c <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, TEMP_XLSB_REG, 1, &XLSB, 1, 10);
 800f130:	230a      	movs	r3, #10
 800f132:	9302      	str	r3, [sp, #8]
 800f134:	2301      	movs	r3, #1
 800f136:	9301      	str	r3, [sp, #4]
 800f138:	f107 0313 	add.w	r3, r7, #19
 800f13c:	9300      	str	r3, [sp, #0]
 800f13e:	2301      	movs	r3, #1
 800f140:	2207      	movs	r2, #7
 800f142:	21ec      	movs	r1, #236	; 0xec
 800f144:	68f8      	ldr	r0, [r7, #12]
 800f146:	f005 f881 	bl	801424c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, TEMP_LSB_REG, 1, &LSB, 1, 10);
 800f14a:	230a      	movs	r3, #10
 800f14c:	9302      	str	r3, [sp, #8]
 800f14e:	2301      	movs	r3, #1
 800f150:	9301      	str	r3, [sp, #4]
 800f152:	f107 0312 	add.w	r3, r7, #18
 800f156:	9300      	str	r3, [sp, #0]
 800f158:	2301      	movs	r3, #1
 800f15a:	2208      	movs	r2, #8
 800f15c:	21ec      	movs	r1, #236	; 0xec
 800f15e:	68f8      	ldr	r0, [r7, #12]
 800f160:	f005 f874 	bl	801424c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, TEMP_MSB_REG, 1, &MSB, 1, 10);
 800f164:	230a      	movs	r3, #10
 800f166:	9302      	str	r3, [sp, #8]
 800f168:	2301      	movs	r3, #1
 800f16a:	9301      	str	r3, [sp, #4]
 800f16c:	f107 0311 	add.w	r3, r7, #17
 800f170:	9300      	str	r3, [sp, #0]
 800f172:	2301      	movs	r3, #1
 800f174:	2209      	movs	r2, #9
 800f176:	21ec      	movs	r1, #236	; 0xec
 800f178:	68f8      	ldr	r0, [r7, #12]
 800f17a:	f005 f867 	bl	801424c <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 800f17e:	2300      	movs	r3, #0
 800f180:	2200      	movs	r2, #0
 800f182:	2100      	movs	r1, #0
 800f184:	6878      	ldr	r0, [r7, #4]
 800f186:	f00a fafd 	bl	8019784 <xQueueGenericSend>
	temp = XLSB + (LSB<<8) + (MSB<<16);
 800f18a:	7cfb      	ldrb	r3, [r7, #19]
 800f18c:	461a      	mov	r2, r3
 800f18e:	7cbb      	ldrb	r3, [r7, #18]
 800f190:	021b      	lsls	r3, r3, #8
 800f192:	441a      	add	r2, r3
 800f194:	7c7b      	ldrb	r3, [r7, #17]
 800f196:	041b      	lsls	r3, r3, #16
 800f198:	4413      	add	r3, r2
 800f19a:	617b      	str	r3, [r7, #20]
	altimeter->temp_data = (temp/258111);
 800f19c:	697a      	ldr	r2, [r7, #20]
 800f19e:	4b09      	ldr	r3, [pc, #36]	; (800f1c4 <BMP390_ReadTemp+0xa8>)
 800f1a0:	fba3 1302 	umull	r1, r3, r3, r2
 800f1a4:	1ad2      	subs	r2, r2, r3
 800f1a6:	0852      	lsrs	r2, r2, #1
 800f1a8:	4413      	add	r3, r2
 800f1aa:	0c5b      	lsrs	r3, r3, #17
 800f1ac:	ee07 3a90 	vmov	s15, r3
 800f1b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f1b4:	68bb      	ldr	r3, [r7, #8]
 800f1b6:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800f1ba:	bf00      	nop
 800f1bc:	3718      	adds	r7, #24
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	bd80      	pop	{r7, pc}
 800f1c2:	bf00      	nop
 800f1c4:	04000105 	.word	0x04000105

0800f1c8 <BMP390_ReadPress>:

void BMP390_ReadPress(I2C_HandleTypeDef *I2C,ALTIMETER_t *altimeter,osMutexId I2CControllerProtect){
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b08a      	sub	sp, #40	; 0x28
 800f1cc:	af04      	add	r7, sp, #16
 800f1ce:	60f8      	str	r0, [r7, #12]
 800f1d0:	60b9      	str	r1, [r7, #8]
 800f1d2:	607a      	str	r2, [r7, #4]
	uint8_t XLSB;
	uint8_t LSB;
	uint8_t MSB;
	uint32_t press;

	xSemaphoreTake(I2CControllerProtect, 35);
 800f1d4:	2123      	movs	r1, #35	; 0x23
 800f1d6:	6878      	ldr	r0, [r7, #4]
 800f1d8:	f00a fc48 	bl	8019a6c <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PRESS_XLSB_REG, 1, &XLSB, 1, 10);
 800f1dc:	230a      	movs	r3, #10
 800f1de:	9302      	str	r3, [sp, #8]
 800f1e0:	2301      	movs	r3, #1
 800f1e2:	9301      	str	r3, [sp, #4]
 800f1e4:	f107 0313 	add.w	r3, r7, #19
 800f1e8:	9300      	str	r3, [sp, #0]
 800f1ea:	2301      	movs	r3, #1
 800f1ec:	2204      	movs	r2, #4
 800f1ee:	21ec      	movs	r1, #236	; 0xec
 800f1f0:	68f8      	ldr	r0, [r7, #12]
 800f1f2:	f005 f82b 	bl	801424c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PRESS_LSB_REG, 1, &LSB, 1, 10);
 800f1f6:	230a      	movs	r3, #10
 800f1f8:	9302      	str	r3, [sp, #8]
 800f1fa:	2301      	movs	r3, #1
 800f1fc:	9301      	str	r3, [sp, #4]
 800f1fe:	f107 0312 	add.w	r3, r7, #18
 800f202:	9300      	str	r3, [sp, #0]
 800f204:	2301      	movs	r3, #1
 800f206:	2205      	movs	r2, #5
 800f208:	21ec      	movs	r1, #236	; 0xec
 800f20a:	68f8      	ldr	r0, [r7, #12]
 800f20c:	f005 f81e 	bl	801424c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PRESS_MSB_REG, 1, &MSB, 1, 10);
 800f210:	230a      	movs	r3, #10
 800f212:	9302      	str	r3, [sp, #8]
 800f214:	2301      	movs	r3, #1
 800f216:	9301      	str	r3, [sp, #4]
 800f218:	f107 0311 	add.w	r3, r7, #17
 800f21c:	9300      	str	r3, [sp, #0]
 800f21e:	2301      	movs	r3, #1
 800f220:	2206      	movs	r2, #6
 800f222:	21ec      	movs	r1, #236	; 0xec
 800f224:	68f8      	ldr	r0, [r7, #12]
 800f226:	f005 f811 	bl	801424c <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 800f22a:	2300      	movs	r3, #0
 800f22c:	2200      	movs	r2, #0
 800f22e:	2100      	movs	r1, #0
 800f230:	6878      	ldr	r0, [r7, #4]
 800f232:	f00a faa7 	bl	8019784 <xQueueGenericSend>
	press = XLSB + (LSB<<8) + (MSB<<16);
 800f236:	7cfb      	ldrb	r3, [r7, #19]
 800f238:	461a      	mov	r2, r3
 800f23a:	7cbb      	ldrb	r3, [r7, #18]
 800f23c:	021b      	lsls	r3, r3, #8
 800f23e:	441a      	add	r2, r3
 800f240:	7c7b      	ldrb	r3, [r7, #17]
 800f242:	041b      	lsls	r3, r3, #16
 800f244:	4413      	add	r3, r2
 800f246:	617b      	str	r3, [r7, #20]
	altimeter->pressure_hpa = (press*PRESS_STEP)+300;
 800f248:	6978      	ldr	r0, [r7, #20]
 800f24a:	f7fe fd3d 	bl	800dcc8 <__aeabi_ui2d>
 800f24e:	f04f 0200 	mov.w	r2, #0
 800f252:	4b0f      	ldr	r3, [pc, #60]	; (800f290 <BMP390_ReadPress+0xc8>)
 800f254:	f7fe fdb2 	bl	800ddbc <__aeabi_dmul>
 800f258:	4602      	mov	r2, r0
 800f25a:	460b      	mov	r3, r1
 800f25c:	4610      	mov	r0, r2
 800f25e:	4619      	mov	r1, r3
 800f260:	a309      	add	r3, pc, #36	; (adr r3, 800f288 <BMP390_ReadPress+0xc0>)
 800f262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f266:	f7fe fbf3 	bl	800da50 <__adddf3>
 800f26a:	4602      	mov	r2, r0
 800f26c:	460b      	mov	r3, r1
 800f26e:	4610      	mov	r0, r2
 800f270:	4619      	mov	r1, r3
 800f272:	f7ff f853 	bl	800e31c <__aeabi_d2f>
 800f276:	4602      	mov	r2, r0
 800f278:	68bb      	ldr	r3, [r7, #8]
 800f27a:	601a      	str	r2, [r3, #0]

}
 800f27c:	bf00      	nop
 800f27e:	3718      	adds	r7, #24
 800f280:	46bd      	mov	sp, r7
 800f282:	bd80      	pop	{r7, pc}
 800f284:	f3af 8000 	nop.w
 800f288:	00000000 	.word	0x00000000
 800f28c:	4072c000 	.word	0x4072c000
 800f290:	3f0db000 	.word	0x3f0db000

0800f294 <BMP390_Init>:
	xSemaphoreGive(I2CControllerProtect);
	time = XLSB + (LSB<<8) + (MSB<<16);
	altimeter->time_data = time;
}

uint8_t BMP390_Init(I2C_HandleTypeDef *I2C){
 800f294:	b580      	push	{r7, lr}
 800f296:	b088      	sub	sp, #32
 800f298:	af04      	add	r7, sp, #16
 800f29a:	6078      	str	r0, [r7, #4]

	uint8_t data;
	uint8_t res = 0;
 800f29c:	2300      	movs	r3, #0
 800f29e:	73fb      	strb	r3, [r7, #15]

	//Start by checking dev ID and REV iD
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, CHIP_ID_REG, 1, &data, 1, 10);
 800f2a0:	230a      	movs	r3, #10
 800f2a2:	9302      	str	r3, [sp, #8]
 800f2a4:	2301      	movs	r3, #1
 800f2a6:	9301      	str	r3, [sp, #4]
 800f2a8:	f107 030e 	add.w	r3, r7, #14
 800f2ac:	9300      	str	r3, [sp, #0]
 800f2ae:	2301      	movs	r3, #1
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	21ec      	movs	r1, #236	; 0xec
 800f2b4:	6878      	ldr	r0, [r7, #4]
 800f2b6:	f004 ffc9 	bl	801424c <HAL_I2C_Mem_Read>
	if(data!=0x60){
 800f2ba:	7bbb      	ldrb	r3, [r7, #14]
 800f2bc:	2b60      	cmp	r3, #96	; 0x60
 800f2be:	d001      	beq.n	800f2c4 <BMP390_Init+0x30>
		res = 1;
 800f2c0:	2301      	movs	r3, #1
 800f2c2:	73fb      	strb	r3, [r7, #15]
	}
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, REV_ID_REG, 1, &data, 1, 10);
 800f2c4:	230a      	movs	r3, #10
 800f2c6:	9302      	str	r3, [sp, #8]
 800f2c8:	2301      	movs	r3, #1
 800f2ca:	9301      	str	r3, [sp, #4]
 800f2cc:	f107 030e 	add.w	r3, r7, #14
 800f2d0:	9300      	str	r3, [sp, #0]
 800f2d2:	2301      	movs	r3, #1
 800f2d4:	2201      	movs	r2, #1
 800f2d6:	21ec      	movs	r1, #236	; 0xec
 800f2d8:	6878      	ldr	r0, [r7, #4]
 800f2da:	f004 ffb7 	bl	801424c <HAL_I2C_Mem_Read>
	if(data!=0x01){
 800f2de:	7bbb      	ldrb	r3, [r7, #14]
 800f2e0:	2b01      	cmp	r3, #1
 800f2e2:	d001      	beq.n	800f2e8 <BMP390_Init+0x54>
		res = 1;
 800f2e4:	2301      	movs	r3, #1
 800f2e6:	73fb      	strb	r3, [r7, #15]
	}

	//Enable all sensors
	BMP390_EnableTempSensor(I2C);
 800f2e8:	6878      	ldr	r0, [r7, #4]
 800f2ea:	f7ff fec4 	bl	800f076 <BMP390_EnableTempSensor>
	BMP390_EnablePressureSensor(I2C);
 800f2ee:	6878      	ldr	r0, [r7, #4]
 800f2f0:	f7ff fe98 	bl	800f024 <BMP390_EnablePressureSensor>

	BMP390_WakeUp(I2C);
 800f2f4:	6878      	ldr	r0, [r7, #4]
 800f2f6:	f7ff fee7 	bl	800f0c8 <BMP390_WakeUp>
	/*Wait until sensor wake up */
	HAL_Delay(5);
 800f2fa:	2005      	movs	r0, #5
 800f2fc:	f002 fdec 	bl	8011ed8 <HAL_Delay>

	//Set the IT pin on high level and enable with pressure/temp sensor
	data = 0x42;
 800f300:	2342      	movs	r3, #66	; 0x42
 800f302:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, INT_CTRL_REG, 1, &data, 1, 10);
 800f304:	230a      	movs	r3, #10
 800f306:	9302      	str	r3, [sp, #8]
 800f308:	2301      	movs	r3, #1
 800f30a:	9301      	str	r3, [sp, #4]
 800f30c:	f107 030e 	add.w	r3, r7, #14
 800f310:	9300      	str	r3, [sp, #0]
 800f312:	2301      	movs	r3, #1
 800f314:	2219      	movs	r2, #25
 800f316:	21ec      	movs	r1, #236	; 0xec
 800f318:	6878      	ldr	r0, [r7, #4]
 800f31a:	f004 fe83 	bl	8014024 <HAL_I2C_Mem_Write>

	//Set Filter value
	//BMP390_SetFilter(I2C, 0x02);


	return res;
 800f31e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f320:	4618      	mov	r0, r3
 800f322:	3710      	adds	r7, #16
 800f324:	46bd      	mov	sp, r7
 800f326:	bd80      	pop	{r7, pc}

0800f328 <BMP390_GetP0Pressure>:

void BMP390_GetP0Pressure(I2C_HandleTypeDef *I2C,ALTIMETER_t *altimeter,osMutexId I2CControllerProtect){
 800f328:	b580      	push	{r7, lr}
 800f32a:	b086      	sub	sp, #24
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	60f8      	str	r0, [r7, #12]
 800f330:	60b9      	str	r1, [r7, #8]
 800f332:	607a      	str	r2, [r7, #4]
	float P0;
	for(int i=0;i<STARTUP_PRESSURE_AVERAGE_COUNT;i++){
 800f334:	2300      	movs	r3, #0
 800f336:	613b      	str	r3, [r7, #16]
 800f338:	e010      	b.n	800f35c <BMP390_GetP0Pressure+0x34>
		BMP390_ReadPress(I2C, altimeter, I2CControllerProtect);
 800f33a:	687a      	ldr	r2, [r7, #4]
 800f33c:	68b9      	ldr	r1, [r7, #8]
 800f33e:	68f8      	ldr	r0, [r7, #12]
 800f340:	f7ff ff42 	bl	800f1c8 <BMP390_ReadPress>
		P0 += altimeter->pressure_hpa;
 800f344:	68bb      	ldr	r3, [r7, #8]
 800f346:	edd3 7a00 	vldr	s15, [r3]
 800f34a:	ed97 7a05 	vldr	s14, [r7, #20]
 800f34e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f352:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i=0;i<STARTUP_PRESSURE_AVERAGE_COUNT;i++){
 800f356:	693b      	ldr	r3, [r7, #16]
 800f358:	3301      	adds	r3, #1
 800f35a:	613b      	str	r3, [r7, #16]
 800f35c:	693b      	ldr	r3, [r7, #16]
 800f35e:	2b09      	cmp	r3, #9
 800f360:	ddeb      	ble.n	800f33a <BMP390_GetP0Pressure+0x12>
	}
	altimeter->calibration_pressure = (P0/STARTUP_PRESSURE_AVERAGE_COUNT);
 800f362:	ed97 7a05 	vldr	s14, [r7, #20]
 800f366:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800f36a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f36e:	68bb      	ldr	r3, [r7, #8]
 800f370:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800f374:	bf00      	nop
 800f376:	3718      	adds	r7, #24
 800f378:	46bd      	mov	sp, r7
 800f37a:	bd80      	pop	{r7, pc}
 800f37c:	0000      	movs	r0, r0
	...

0800f380 <BMP390_GetRelativeAltitude>:

/*Function use to calculate relative altitude. In order to work properly it should'nt be call before a calibration*/
void BMP390_GetRelativeAltitude(ALTIMETER_t *altimeter){
 800f380:	b580      	push	{r7, lr}
 800f382:	b082      	sub	sp, #8
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]
	altimeter->differential_altitude = 44330.0 * (1.0 - pow(altimeter->pressure_hpa / altimeter->calibration_pressure, 0.1903));
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	ed93 7a00 	vldr	s14, [r3]
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	edd3 7a03 	vldr	s15, [r3, #12]
 800f394:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f398:	ee16 0a90 	vmov	r0, s13
 800f39c:	f7fe fcb6 	bl	800dd0c <__aeabi_f2d>
 800f3a0:	4602      	mov	r2, r0
 800f3a2:	460b      	mov	r3, r1
 800f3a4:	ed9f 1b12 	vldr	d1, [pc, #72]	; 800f3f0 <BMP390_GetRelativeAltitude+0x70>
 800f3a8:	ec43 2b10 	vmov	d0, r2, r3
 800f3ac:	f00c fad6 	bl	801b95c <pow>
 800f3b0:	ec53 2b10 	vmov	r2, r3, d0
 800f3b4:	f04f 0000 	mov.w	r0, #0
 800f3b8:	4911      	ldr	r1, [pc, #68]	; (800f400 <BMP390_GetRelativeAltitude+0x80>)
 800f3ba:	f7fe fb47 	bl	800da4c <__aeabi_dsub>
 800f3be:	4602      	mov	r2, r0
 800f3c0:	460b      	mov	r3, r1
 800f3c2:	4610      	mov	r0, r2
 800f3c4:	4619      	mov	r1, r3
 800f3c6:	a30c      	add	r3, pc, #48	; (adr r3, 800f3f8 <BMP390_GetRelativeAltitude+0x78>)
 800f3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3cc:	f7fe fcf6 	bl	800ddbc <__aeabi_dmul>
 800f3d0:	4602      	mov	r2, r0
 800f3d2:	460b      	mov	r3, r1
 800f3d4:	4610      	mov	r0, r2
 800f3d6:	4619      	mov	r1, r3
 800f3d8:	f7fe ffa0 	bl	800e31c <__aeabi_d2f>
 800f3dc:	4602      	mov	r2, r0
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	611a      	str	r2, [r3, #16]
}
 800f3e2:	bf00      	nop
 800f3e4:	3708      	adds	r7, #8
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	bd80      	pop	{r7, pc}
 800f3ea:	bf00      	nop
 800f3ec:	f3af 8000 	nop.w
 800f3f0:	1a36e2eb 	.word	0x1a36e2eb
 800f3f4:	3fc85bc0 	.word	0x3fc85bc0
 800f3f8:	00000000 	.word	0x00000000
 800f3fc:	40e5a540 	.word	0x40e5a540
 800f400:	3ff00000 	.word	0x3ff00000

0800f404 <BNO055_SetPage>:
 * Method use to switch page in IMU memory
 * param: I2C --> pointer on I2C handle struct
 * param: page --> integer value range 0 to 1 include
 * note: If a page value is bigger than 1 then no error will be raise so be carefull
 */
void BNO055_SetPage(I2C_HandleTypeDef *I2C,uint8_t page){
 800f404:	b580      	push	{r7, lr}
 800f406:	b086      	sub	sp, #24
 800f408:	af04      	add	r7, sp, #16
 800f40a:	6078      	str	r0, [r7, #4]
 800f40c:	460b      	mov	r3, r1
 800f40e:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_PAGE_ID, 1, &page, 1, 10);
 800f410:	230a      	movs	r3, #10
 800f412:	9302      	str	r3, [sp, #8]
 800f414:	2301      	movs	r3, #1
 800f416:	9301      	str	r3, [sp, #4]
 800f418:	1cfb      	adds	r3, r7, #3
 800f41a:	9300      	str	r3, [sp, #0]
 800f41c:	2301      	movs	r3, #1
 800f41e:	2207      	movs	r2, #7
 800f420:	2150      	movs	r1, #80	; 0x50
 800f422:	6878      	ldr	r0, [r7, #4]
 800f424:	f004 fdfe 	bl	8014024 <HAL_I2C_Mem_Write>
}
 800f428:	bf00      	nop
 800f42a:	3708      	adds	r7, #8
 800f42c:	46bd      	mov	sp, r7
 800f42e:	bd80      	pop	{r7, pc}

0800f430 <BNO055_SetOperationMode>:
 * Method use to switch operation mode of IMU
 * param: I2C --> pointer on I2C handle struct
 * param: BNO055 --> pointer on IMU struct
 * param: mode --> operation mode already define in <bno055.h>
 */
void BNO055_SetOperationMode(I2C_HandleTypeDef *I2C,bno055_opmode_t mode,BNO055_t *BNO055){
 800f430:	b580      	push	{r7, lr}
 800f432:	b088      	sub	sp, #32
 800f434:	af04      	add	r7, sp, #16
 800f436:	60f8      	str	r0, [r7, #12]
 800f438:	460b      	mov	r3, r1
 800f43a:	607a      	str	r2, [r7, #4]
 800f43c:	72fb      	strb	r3, [r7, #11]
	BNO055->operational_mode = mode;
 800f43e:	7afa      	ldrb	r2, [r7, #11]
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_OPR_MODE, 1, &mode, 1, 10);
 800f446:	230a      	movs	r3, #10
 800f448:	9302      	str	r3, [sp, #8]
 800f44a:	2301      	movs	r3, #1
 800f44c:	9301      	str	r3, [sp, #4]
 800f44e:	f107 030b 	add.w	r3, r7, #11
 800f452:	9300      	str	r3, [sp, #0]
 800f454:	2301      	movs	r3, #1
 800f456:	223d      	movs	r2, #61	; 0x3d
 800f458:	2150      	movs	r1, #80	; 0x50
 800f45a:	68f8      	ldr	r0, [r7, #12]
 800f45c:	f004 fde2 	bl	8014024 <HAL_I2C_Mem_Write>
}
 800f460:	bf00      	nop
 800f462:	3710      	adds	r7, #16
 800f464:	46bd      	mov	sp, r7
 800f466:	bd80      	pop	{r7, pc}

0800f468 <BNO055_ReadSystemReg>:

/*
 * Function use read the system register
 * param: I2C --> pointer on I2C handle struct
 */
uint8_t BNO055_ReadSystemReg(I2C_HandleTypeDef *I2C){
 800f468:	b580      	push	{r7, lr}
 800f46a:	b088      	sub	sp, #32
 800f46c:	af04      	add	r7, sp, #16
 800f46e:	6078      	str	r0, [r7, #4]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &system_reg, 1, 100);
 800f470:	2364      	movs	r3, #100	; 0x64
 800f472:	9302      	str	r3, [sp, #8]
 800f474:	2301      	movs	r3, #1
 800f476:	9301      	str	r3, [sp, #4]
 800f478:	f107 030f 	add.w	r3, r7, #15
 800f47c:	9300      	str	r3, [sp, #0]
 800f47e:	2301      	movs	r3, #1
 800f480:	223f      	movs	r2, #63	; 0x3f
 800f482:	2150      	movs	r1, #80	; 0x50
 800f484:	6878      	ldr	r0, [r7, #4]
 800f486:	f004 fee1 	bl	801424c <HAL_I2C_Mem_Read>
	return system_reg;
 800f48a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f48c:	4618      	mov	r0, r3
 800f48e:	3710      	adds	r7, #16
 800f490:	46bd      	mov	sp, r7
 800f492:	bd80      	pop	{r7, pc}

0800f494 <BNO055_ReadITStatus>:

/*
 * Function use to read interrupt register
 * param: I2C --> pointer on I2C handle struct
 */
uint8_t BNO055_ReadITStatus(I2C_HandleTypeDef * I2C){
 800f494:	b580      	push	{r7, lr}
 800f496:	b088      	sub	sp, #32
 800f498:	af04      	add	r7, sp, #16
 800f49a:	6078      	str	r0, [r7, #4]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_INT_STATUS, 1, &system_reg, 1, 100);
 800f49c:	2364      	movs	r3, #100	; 0x64
 800f49e:	9302      	str	r3, [sp, #8]
 800f4a0:	2301      	movs	r3, #1
 800f4a2:	9301      	str	r3, [sp, #4]
 800f4a4:	f107 030f 	add.w	r3, r7, #15
 800f4a8:	9300      	str	r3, [sp, #0]
 800f4aa:	2301      	movs	r3, #1
 800f4ac:	2237      	movs	r2, #55	; 0x37
 800f4ae:	2150      	movs	r1, #80	; 0x50
 800f4b0:	6878      	ldr	r0, [r7, #4]
 800f4b2:	f004 fecb 	bl	801424c <HAL_I2C_Mem_Read>
	return system_reg;
 800f4b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	3710      	adds	r7, #16
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	bd80      	pop	{r7, pc}

0800f4c0 <BNO055_EnableAccHighG>:
/*
 * Method use to set high G acceleration interrupt
 * param: I2C --> pointer on I2C handle struct
 * note: This method should only be call after a SetPage(1)
 */
void BNO055_EnableAccHighG(I2C_HandleTypeDef *I2C){
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	b088      	sub	sp, #32
 800f4c4:	af04      	add	r7, sp, #16
 800f4c6:	6078      	str	r0, [r7, #4]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_INT_EN, 1, &system_reg, 1, 100);
 800f4c8:	2364      	movs	r3, #100	; 0x64
 800f4ca:	9302      	str	r3, [sp, #8]
 800f4cc:	2301      	movs	r3, #1
 800f4ce:	9301      	str	r3, [sp, #4]
 800f4d0:	f107 030f 	add.w	r3, r7, #15
 800f4d4:	9300      	str	r3, [sp, #0]
 800f4d6:	2301      	movs	r3, #1
 800f4d8:	2210      	movs	r2, #16
 800f4da:	2150      	movs	r1, #80	; 0x50
 800f4dc:	6878      	ldr	r0, [r7, #4]
 800f4de:	f004 feb5 	bl	801424c <HAL_I2C_Mem_Read>
	system_reg|=1<<5;
 800f4e2:	7bfb      	ldrb	r3, [r7, #15]
 800f4e4:	f043 0320 	orr.w	r3, r3, #32
 800f4e8:	b2db      	uxtb	r3, r3
 800f4ea:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_INT_EN, 1, &system_reg, 1, 10);
 800f4ec:	230a      	movs	r3, #10
 800f4ee:	9302      	str	r3, [sp, #8]
 800f4f0:	2301      	movs	r3, #1
 800f4f2:	9301      	str	r3, [sp, #4]
 800f4f4:	f107 030f 	add.w	r3, r7, #15
 800f4f8:	9300      	str	r3, [sp, #0]
 800f4fa:	2301      	movs	r3, #1
 800f4fc:	2210      	movs	r2, #16
 800f4fe:	2150      	movs	r1, #80	; 0x50
 800f500:	6878      	ldr	r0, [r7, #4]
 800f502:	f004 fd8f 	bl	8014024 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_INT_MSK, 1, &system_reg, 1, 100);
 800f506:	2364      	movs	r3, #100	; 0x64
 800f508:	9302      	str	r3, [sp, #8]
 800f50a:	2301      	movs	r3, #1
 800f50c:	9301      	str	r3, [sp, #4]
 800f50e:	f107 030f 	add.w	r3, r7, #15
 800f512:	9300      	str	r3, [sp, #0]
 800f514:	2301      	movs	r3, #1
 800f516:	220f      	movs	r2, #15
 800f518:	2150      	movs	r1, #80	; 0x50
 800f51a:	6878      	ldr	r0, [r7, #4]
 800f51c:	f004 fe96 	bl	801424c <HAL_I2C_Mem_Read>
	system_reg|=1<<5;
 800f520:	7bfb      	ldrb	r3, [r7, #15]
 800f522:	f043 0320 	orr.w	r3, r3, #32
 800f526:	b2db      	uxtb	r3, r3
 800f528:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_INT_MSK, 1, &system_reg, 1, 10);
 800f52a:	230a      	movs	r3, #10
 800f52c:	9302      	str	r3, [sp, #8]
 800f52e:	2301      	movs	r3, #1
 800f530:	9301      	str	r3, [sp, #4]
 800f532:	f107 030f 	add.w	r3, r7, #15
 800f536:	9300      	str	r3, [sp, #0]
 800f538:	2301      	movs	r3, #1
 800f53a:	220f      	movs	r2, #15
 800f53c:	2150      	movs	r1, #80	; 0x50
 800f53e:	6878      	ldr	r0, [r7, #4]
 800f540:	f004 fd70 	bl	8014024 <HAL_I2C_Mem_Write>
}
 800f544:	bf00      	nop
 800f546:	3710      	adds	r7, #16
 800f548:	46bd      	mov	sp, r7
 800f54a:	bd80      	pop	{r7, pc}

0800f54c <BNO055_EnableHighGAcc>:
/*
 * Method use to set high G acceleration interrupt for each axis
 * param: I2C --> pointer on I2C handle struct
 * axis: --> char use to define an axis Eg: 'X' or 'Y' or 'Z'
 */
void BNO055_EnableHighGAcc(I2C_HandleTypeDef *I2C,char axis){
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b088      	sub	sp, #32
 800f550:	af04      	add	r7, sp, #16
 800f552:	6078      	str	r0, [r7, #4]
 800f554:	460b      	mov	r3, r1
 800f556:	70fb      	strb	r3, [r7, #3]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_INT_SETTINGS, 1, &system_reg, 1, 100);
 800f558:	2364      	movs	r3, #100	; 0x64
 800f55a:	9302      	str	r3, [sp, #8]
 800f55c:	2301      	movs	r3, #1
 800f55e:	9301      	str	r3, [sp, #4]
 800f560:	f107 030f 	add.w	r3, r7, #15
 800f564:	9300      	str	r3, [sp, #0]
 800f566:	2301      	movs	r3, #1
 800f568:	2212      	movs	r2, #18
 800f56a:	2150      	movs	r1, #80	; 0x50
 800f56c:	6878      	ldr	r0, [r7, #4]
 800f56e:	f004 fe6d 	bl	801424c <HAL_I2C_Mem_Read>
	switch (axis) {
 800f572:	78fb      	ldrb	r3, [r7, #3]
 800f574:	2b5a      	cmp	r3, #90	; 0x5a
 800f576:	d012      	beq.n	800f59e <BNO055_EnableHighGAcc+0x52>
 800f578:	2b5a      	cmp	r3, #90	; 0x5a
 800f57a:	dc16      	bgt.n	800f5aa <BNO055_EnableHighGAcc+0x5e>
 800f57c:	2b58      	cmp	r3, #88	; 0x58
 800f57e:	d002      	beq.n	800f586 <BNO055_EnableHighGAcc+0x3a>
 800f580:	2b59      	cmp	r3, #89	; 0x59
 800f582:	d006      	beq.n	800f592 <BNO055_EnableHighGAcc+0x46>
 800f584:	e011      	b.n	800f5aa <BNO055_EnableHighGAcc+0x5e>
		case 'X':
			system_reg|=1<<5;
 800f586:	7bfb      	ldrb	r3, [r7, #15]
 800f588:	f043 0320 	orr.w	r3, r3, #32
 800f58c:	b2db      	uxtb	r3, r3
 800f58e:	73fb      	strb	r3, [r7, #15]
			break;
 800f590:	e00b      	b.n	800f5aa <BNO055_EnableHighGAcc+0x5e>
		case 'Y':
			system_reg|=1<<6;
 800f592:	7bfb      	ldrb	r3, [r7, #15]
 800f594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f598:	b2db      	uxtb	r3, r3
 800f59a:	73fb      	strb	r3, [r7, #15]
			break;
 800f59c:	e005      	b.n	800f5aa <BNO055_EnableHighGAcc+0x5e>
		case 'Z':
			system_reg|=1<<7;
 800f59e:	7bfb      	ldrb	r3, [r7, #15]
 800f5a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f5a4:	b2db      	uxtb	r3, r3
 800f5a6:	73fb      	strb	r3, [r7, #15]
			break;
 800f5a8:	bf00      	nop
	}
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_ACC_INT_SETTINGS, 1, &system_reg, 1, 10);
 800f5aa:	230a      	movs	r3, #10
 800f5ac:	9302      	str	r3, [sp, #8]
 800f5ae:	2301      	movs	r3, #1
 800f5b0:	9301      	str	r3, [sp, #4]
 800f5b2:	f107 030f 	add.w	r3, r7, #15
 800f5b6:	9300      	str	r3, [sp, #0]
 800f5b8:	2301      	movs	r3, #1
 800f5ba:	2212      	movs	r2, #18
 800f5bc:	2150      	movs	r1, #80	; 0x50
 800f5be:	6878      	ldr	r0, [r7, #4]
 800f5c0:	f004 fd30 	bl	8014024 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_INT_SETTINGS, 1, &system_reg, 1, 100);
 800f5c4:	2364      	movs	r3, #100	; 0x64
 800f5c6:	9302      	str	r3, [sp, #8]
 800f5c8:	2301      	movs	r3, #1
 800f5ca:	9301      	str	r3, [sp, #4]
 800f5cc:	f107 030f 	add.w	r3, r7, #15
 800f5d0:	9300      	str	r3, [sp, #0]
 800f5d2:	2301      	movs	r3, #1
 800f5d4:	2212      	movs	r2, #18
 800f5d6:	2150      	movs	r1, #80	; 0x50
 800f5d8:	6878      	ldr	r0, [r7, #4]
 800f5da:	f004 fe37 	bl	801424c <HAL_I2C_Mem_Read>
}
 800f5de:	bf00      	nop
 800f5e0:	3710      	adds	r7, #16
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	bd80      	pop	{r7, pc}

0800f5e6 <BNO055_ClearIntFlag>:
/*
 * Method use to clear interrupt flag set by hardware
 * param: I2C --> pointer on I2C handle struct
 * note: if call in interrupt, you can find SPI pointer in IMU struct
 */
void BNO055_ClearIntFlag(I2C_HandleTypeDef *I2C){
 800f5e6:	b580      	push	{r7, lr}
 800f5e8:	b088      	sub	sp, #32
 800f5ea:	af04      	add	r7, sp, #16
 800f5ec:	6078      	str	r0, [r7, #4]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &system_reg, 1, 100);
 800f5ee:	2364      	movs	r3, #100	; 0x64
 800f5f0:	9302      	str	r3, [sp, #8]
 800f5f2:	2301      	movs	r3, #1
 800f5f4:	9301      	str	r3, [sp, #4]
 800f5f6:	f107 030f 	add.w	r3, r7, #15
 800f5fa:	9300      	str	r3, [sp, #0]
 800f5fc:	2301      	movs	r3, #1
 800f5fe:	223f      	movs	r2, #63	; 0x3f
 800f600:	2150      	movs	r1, #80	; 0x50
 800f602:	6878      	ldr	r0, [r7, #4]
 800f604:	f004 fe22 	bl	801424c <HAL_I2C_Mem_Read>
	system_reg|=1<<6;
 800f608:	7bfb      	ldrb	r3, [r7, #15]
 800f60a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f60e:	b2db      	uxtb	r3, r3
 800f610:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &system_reg, 1, 10);
 800f612:	230a      	movs	r3, #10
 800f614:	9302      	str	r3, [sp, #8]
 800f616:	2301      	movs	r3, #1
 800f618:	9301      	str	r3, [sp, #4]
 800f61a:	f107 030f 	add.w	r3, r7, #15
 800f61e:	9300      	str	r3, [sp, #0]
 800f620:	2301      	movs	r3, #1
 800f622:	223f      	movs	r2, #63	; 0x3f
 800f624:	2150      	movs	r1, #80	; 0x50
 800f626:	6878      	ldr	r0, [r7, #4]
 800f628:	f004 fcfc 	bl	8014024 <HAL_I2C_Mem_Write>
	BNO055_ReadITStatus(I2C);
 800f62c:	6878      	ldr	r0, [r7, #4]
 800f62e:	f7ff ff31 	bl	800f494 <BNO055_ReadITStatus>
}
 800f632:	bf00      	nop
 800f634:	3710      	adds	r7, #16
 800f636:	46bd      	mov	sp, r7
 800f638:	bd80      	pop	{r7, pc}

0800f63a <BNO055_EnableExtClock>:
/*
 * Method use to enable external clock for IMU
 * param: I2C --> pointer on I2C handle struct
 * note: If not clock selected then work with LSI else LSE
 */
void BNO055_EnableExtClock(I2C_HandleTypeDef *I2C){
 800f63a:	b580      	push	{r7, lr}
 800f63c:	b088      	sub	sp, #32
 800f63e:	af04      	add	r7, sp, #16
 800f640:	6078      	str	r0, [r7, #4]
	uint8_t actual_reg_value = BNO055_ReadSystemReg(I2C);
 800f642:	6878      	ldr	r0, [r7, #4]
 800f644:	f7ff ff10 	bl	800f468 <BNO055_ReadSystemReg>
 800f648:	4603      	mov	r3, r0
 800f64a:	73fb      	strb	r3, [r7, #15]
	//Change the 7th bit of this reg --> activate external clock
	uint8_t sys_reg_value = (actual_reg_value&0x7F) + (0x01<<7);
 800f64c:	7bfb      	ldrb	r3, [r7, #15]
 800f64e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f652:	b2db      	uxtb	r3, r3
 800f654:	3b80      	subs	r3, #128	; 0x80
 800f656:	b2db      	uxtb	r3, r3
 800f658:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &sys_reg_value, 1, 10);
 800f65a:	230a      	movs	r3, #10
 800f65c:	9302      	str	r3, [sp, #8]
 800f65e:	2301      	movs	r3, #1
 800f660:	9301      	str	r3, [sp, #4]
 800f662:	f107 030e 	add.w	r3, r7, #14
 800f666:	9300      	str	r3, [sp, #0]
 800f668:	2301      	movs	r3, #1
 800f66a:	223f      	movs	r2, #63	; 0x3f
 800f66c:	2150      	movs	r1, #80	; 0x50
 800f66e:	6878      	ldr	r0, [r7, #4]
 800f670:	f004 fcd8 	bl	8014024 <HAL_I2C_Mem_Write>
}
 800f674:	bf00      	nop
 800f676:	3710      	adds	r7, #16
 800f678:	46bd      	mov	sp, r7
 800f67a:	bd80      	pop	{r7, pc}

0800f67c <BNO055_TriggerSelfTest>:

/*
 * Method use to start a self test
 * param: I2C --> pointer on I2C handle struct
 */
void BNO055_TriggerSelfTest(I2C_HandleTypeDef *I2C){
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b088      	sub	sp, #32
 800f680:	af04      	add	r7, sp, #16
 800f682:	6078      	str	r0, [r7, #4]
	uint8_t actual_reg_value = BNO055_ReadSystemReg(I2C);
 800f684:	6878      	ldr	r0, [r7, #4]
 800f686:	f7ff feef 	bl	800f468 <BNO055_ReadSystemReg>
 800f68a:	4603      	mov	r3, r0
 800f68c:	73fb      	strb	r3, [r7, #15]
	//Change the 7th bit of this reg --> activate external clock
	uint8_t sys_reg_value = (actual_reg_value&0xFE) + 0x01;
 800f68e:	7bfb      	ldrb	r3, [r7, #15]
 800f690:	f023 0301 	bic.w	r3, r3, #1
 800f694:	b2db      	uxtb	r3, r3
 800f696:	3301      	adds	r3, #1
 800f698:	b2db      	uxtb	r3, r3
 800f69a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &sys_reg_value, 1, 10);
 800f69c:	230a      	movs	r3, #10
 800f69e:	9302      	str	r3, [sp, #8]
 800f6a0:	2301      	movs	r3, #1
 800f6a2:	9301      	str	r3, [sp, #4]
 800f6a4:	f107 030e 	add.w	r3, r7, #14
 800f6a8:	9300      	str	r3, [sp, #0]
 800f6aa:	2301      	movs	r3, #1
 800f6ac:	223f      	movs	r2, #63	; 0x3f
 800f6ae:	2150      	movs	r1, #80	; 0x50
 800f6b0:	6878      	ldr	r0, [r7, #4]
 800f6b2:	f004 fcb7 	bl	8014024 <HAL_I2C_Mem_Write>
}
 800f6b6:	bf00      	nop
 800f6b8:	3710      	adds	r7, #16
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	bd80      	pop	{r7, pc}

0800f6be <BNO055_CheckSelfTestResult>:
/*
 * Method use to check self test result
 * param: I2C --> pointer on I2C handle struct
 * param: BNO055 --> pointer on IMU struct
 */
uint8_t BNO055_CheckSelfTestResult(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 800f6be:	b580      	push	{r7, lr}
 800f6c0:	b088      	sub	sp, #32
 800f6c2:	af04      	add	r7, sp, #16
 800f6c4:	6078      	str	r0, [r7, #4]
 800f6c6:	6039      	str	r1, [r7, #0]
	uint8_t res = 0;
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_value;
	//Checking all self power on test result
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ST_RESULT, 1, &reg_value, 1, 10);
 800f6cc:	230a      	movs	r3, #10
 800f6ce:	9302      	str	r3, [sp, #8]
 800f6d0:	2301      	movs	r3, #1
 800f6d2:	9301      	str	r3, [sp, #4]
 800f6d4:	f107 030e 	add.w	r3, r7, #14
 800f6d8:	9300      	str	r3, [sp, #0]
 800f6da:	2301      	movs	r3, #1
 800f6dc:	2236      	movs	r2, #54	; 0x36
 800f6de:	2150      	movs	r1, #80	; 0x50
 800f6e0:	6878      	ldr	r0, [r7, #4]
 800f6e2:	f004 fdb3 	bl	801424c <HAL_I2C_Mem_Read>
	if((reg_value&0x0F)!=0x0F){
 800f6e6:	7bbb      	ldrb	r3, [r7, #14]
 800f6e8:	f003 030f 	and.w	r3, r3, #15
 800f6ec:	2b0f      	cmp	r3, #15
 800f6ee:	d001      	beq.n	800f6f4 <BNO055_CheckSelfTestResult+0x36>
		res = 1;
 800f6f0:	2301      	movs	r3, #1
 800f6f2:	73fb      	strb	r3, [r7, #15]
	}
	//Trigger a test to ensure sensor is working properly
	BNO055_TriggerSelfTest(I2C);
 800f6f4:	6878      	ldr	r0, [r7, #4]
 800f6f6:	f7ff ffc1 	bl	800f67c <BNO055_TriggerSelfTest>
	//Wait some time to ensure test is done (made with hal delay because task hasn't started yet)
	osDelay(500);
 800f6fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f6fe:	f009 fe6d 	bl	80193dc <osDelay>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_ERR, 1, &reg_value, 1, 10);
 800f702:	230a      	movs	r3, #10
 800f704:	9302      	str	r3, [sp, #8]
 800f706:	2301      	movs	r3, #1
 800f708:	9301      	str	r3, [sp, #4]
 800f70a:	f107 030e 	add.w	r3, r7, #14
 800f70e:	9300      	str	r3, [sp, #0]
 800f710:	2301      	movs	r3, #1
 800f712:	223a      	movs	r2, #58	; 0x3a
 800f714:	2150      	movs	r1, #80	; 0x50
 800f716:	6878      	ldr	r0, [r7, #4]
 800f718:	f004 fd98 	bl	801424c <HAL_I2C_Mem_Read>
	if(reg_value!=0x00){
 800f71c:	7bbb      	ldrb	r3, [r7, #14]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d001      	beq.n	800f726 <BNO055_CheckSelfTestResult+0x68>
		res = 1;
 800f722:	2301      	movs	r3, #1
 800f724:	73fb      	strb	r3, [r7, #15]
	}
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_STATUS, 1, &reg_value, 1, 10);
 800f726:	230a      	movs	r3, #10
 800f728:	9302      	str	r3, [sp, #8]
 800f72a:	2301      	movs	r3, #1
 800f72c:	9301      	str	r3, [sp, #4]
 800f72e:	f107 030e 	add.w	r3, r7, #14
 800f732:	9300      	str	r3, [sp, #0]
 800f734:	2301      	movs	r3, #1
 800f736:	2239      	movs	r2, #57	; 0x39
 800f738:	2150      	movs	r1, #80	; 0x50
 800f73a:	6878      	ldr	r0, [r7, #4]
 800f73c:	f004 fd86 	bl	801424c <HAL_I2C_Mem_Read>

	return res;
 800f740:	7bfb      	ldrb	r3, [r7, #15]
}
 800f742:	4618      	mov	r0, r3
 800f744:	3710      	adds	r7, #16
 800f746:	46bd      	mov	sp, r7
 800f748:	bd80      	pop	{r7, pc}

0800f74a <BNO055_SetHighGThreshold>:
 * Method use to set the high g interrupt threshold
 * param: I2C --> pointer on I2C handle struct
 * param: threshold --> threshold in LSB (15.81mg = 1LSB)
 *  * note: need to be call after page(1)
 */
void BNO055_SetHighGThreshold(I2C_HandleTypeDef *I2C,uint8_t threshold){
 800f74a:	b580      	push	{r7, lr}
 800f74c:	b088      	sub	sp, #32
 800f74e:	af04      	add	r7, sp, #16
 800f750:	6078      	str	r0, [r7, #4]
 800f752:	460b      	mov	r3, r1
 800f754:	70fb      	strb	r3, [r7, #3]
	uint8_t system_reg;
	system_reg = threshold;
 800f756:	78fb      	ldrb	r3, [r7, #3]
 800f758:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_ACC_HG_THRESH, 1, &system_reg, 1, 10);
 800f75a:	230a      	movs	r3, #10
 800f75c:	9302      	str	r3, [sp, #8]
 800f75e:	2301      	movs	r3, #1
 800f760:	9301      	str	r3, [sp, #4]
 800f762:	f107 030f 	add.w	r3, r7, #15
 800f766:	9300      	str	r3, [sp, #0]
 800f768:	2301      	movs	r3, #1
 800f76a:	2214      	movs	r2, #20
 800f76c:	2150      	movs	r1, #80	; 0x50
 800f76e:	6878      	ldr	r0, [r7, #4]
 800f770:	f004 fc58 	bl	8014024 <HAL_I2C_Mem_Write>
}
 800f774:	bf00      	nop
 800f776:	3710      	adds	r7, #16
 800f778:	46bd      	mov	sp, r7
 800f77a:	bd80      	pop	{r7, pc}

0800f77c <BNO055_SetHighGDuration>:
 * Method use to set the high g interrupt duration
 * param: I2C --> pointer on I2C handle struct
 * param: duration --> duration in ms (1LSB = 2ms)
 *  * note: need to be call after page(1)
 */
void BNO055_SetHighGDuration(I2C_HandleTypeDef *I2C,uint8_t duration){
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b088      	sub	sp, #32
 800f780:	af04      	add	r7, sp, #16
 800f782:	6078      	str	r0, [r7, #4]
 800f784:	460b      	mov	r3, r1
 800f786:	70fb      	strb	r3, [r7, #3]
	uint8_t system_reg;
	system_reg = duration;
 800f788:	78fb      	ldrb	r3, [r7, #3]
 800f78a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_ACC_HG_DURATION, 1, &system_reg, 1, 10);
 800f78c:	230a      	movs	r3, #10
 800f78e:	9302      	str	r3, [sp, #8]
 800f790:	2301      	movs	r3, #1
 800f792:	9301      	str	r3, [sp, #4]
 800f794:	f107 030f 	add.w	r3, r7, #15
 800f798:	9300      	str	r3, [sp, #0]
 800f79a:	2301      	movs	r3, #1
 800f79c:	2213      	movs	r2, #19
 800f79e:	2150      	movs	r1, #80	; 0x50
 800f7a0:	6878      	ldr	r0, [r7, #4]
 800f7a2:	f004 fc3f 	bl	8014024 <HAL_I2C_Mem_Write>
}
 800f7a6:	bf00      	nop
 800f7a8:	3710      	adds	r7, #16
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	bd80      	pop	{r7, pc}

0800f7ae <BNO055_Init>:
/*
 * Init function for IMU, it enable it run self test
 * param: I2C --> pointer on I2C handle struct
 * param: BNO055 --> pointer on IMU struct
 */
uint8_t BNO055_Init(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 800f7ae:	b580      	push	{r7, lr}
 800f7b0:	b088      	sub	sp, #32
 800f7b2:	af04      	add	r7, sp, #16
 800f7b4:	6078      	str	r0, [r7, #4]
 800f7b6:	6039      	str	r1, [r7, #0]

	uint8_t res = 0;
 800f7b8:	2300      	movs	r3, #0
 800f7ba:	73fb      	strb	r3, [r7, #15]
	uint8_t reg;

	//Reset the IMU error counter
	BNO055->self_test_error = 0;
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	2200      	movs	r2, #0
 800f7c0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

	//Add pointer into IMU struct
	BNO055->I2C_pt = I2C;
 800f7c4:	683b      	ldr	r3, [r7, #0]
 800f7c6:	687a      	ldr	r2, [r7, #4]
 800f7c8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	//We need to select the page 1
	BNO055_SetPage(I2C,1);
 800f7cc:	2101      	movs	r1, #1
 800f7ce:	6878      	ldr	r0, [r7, #4]
 800f7d0:	f7ff fe18 	bl	800f404 <BNO055_SetPage>

	//Enable High G accelerometer interrupt
	BNO055_EnableAccHighG(I2C);
 800f7d4:	6878      	ldr	r0, [r7, #4]
 800f7d6:	f7ff fe73 	bl	800f4c0 <BNO055_EnableAccHighG>

	//Enable HIGH G for axis X/Y/Z
	BNO055_EnableHighGAcc(I2C, 'X');
 800f7da:	2158      	movs	r1, #88	; 0x58
 800f7dc:	6878      	ldr	r0, [r7, #4]
 800f7de:	f7ff feb5 	bl	800f54c <BNO055_EnableHighGAcc>
	BNO055_EnableHighGAcc(I2C, 'Y');
 800f7e2:	2159      	movs	r1, #89	; 0x59
 800f7e4:	6878      	ldr	r0, [r7, #4]
 800f7e6:	f7ff feb1 	bl	800f54c <BNO055_EnableHighGAcc>
	BNO055_EnableHighGAcc(I2C, 'Z');
 800f7ea:	215a      	movs	r1, #90	; 0x5a
 800f7ec:	6878      	ldr	r0, [r7, #4]
 800f7ee:	f7ff fead 	bl	800f54c <BNO055_EnableHighGAcc>

	//Set threshold
	BNO055_SetHighGThreshold(I2C, BNO055_HG_THRESHOLD);
 800f7f2:	2150      	movs	r1, #80	; 0x50
 800f7f4:	6878      	ldr	r0, [r7, #4]
 800f7f6:	f7ff ffa8 	bl	800f74a <BNO055_SetHighGThreshold>

	//Set the duration
	BNO055_SetHighGDuration(I2C, BNO055_HG_DURATION);
 800f7fa:	2140      	movs	r1, #64	; 0x40
 800f7fc:	6878      	ldr	r0, [r7, #4]
 800f7fe:	f7ff ffbd 	bl	800f77c <BNO055_SetHighGDuration>

	//We need to select the page 0
	BNO055_SetPage(I2C,0);
 800f802:	2100      	movs	r1, #0
 800f804:	6878      	ldr	r0, [r7, #4]
 800f806:	f7ff fdfd 	bl	800f404 <BNO055_SetPage>

	//As the board have external 32.756 khz clock we use it
	BNO055_EnableExtClock(I2C);
 800f80a:	6878      	ldr	r0, [r7, #4]
 800f80c:	f7ff ff15 	bl	800f63a <BNO055_EnableExtClock>
	/*Make BIST and power up test*/
	osDelay(200);
 800f810:	20c8      	movs	r0, #200	; 0xc8
 800f812:	f009 fde3 	bl	80193dc <osDelay>
	reg = BNO055_CheckSelfTestResult(I2C, BNO055);
 800f816:	6839      	ldr	r1, [r7, #0]
 800f818:	6878      	ldr	r0, [r7, #4]
 800f81a:	f7ff ff50 	bl	800f6be <BNO055_CheckSelfTestResult>
 800f81e:	4603      	mov	r3, r0
 800f820:	73bb      	strb	r3, [r7, #14]
	if(reg != 0x00){
 800f822:	7bbb      	ldrb	r3, [r7, #14]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d001      	beq.n	800f82c <BNO055_Init+0x7e>
		res = 1;
 800f828:	2301      	movs	r3, #1
 800f82a:	73fb      	strb	r3, [r7, #15]
	}

	//Select the operation mode (the NDOF use all 3 sensor and will calculate data using absolute orientation (USE BNO055_OPERATION_MODE_IMU if you want to have relative orientation)
	BNO055_SetOperationMode(I2C, BNO055_OPERATION_MODE_NDOF, BNO055);
 800f82c:	683a      	ldr	r2, [r7, #0]
 800f82e:	210c      	movs	r1, #12
 800f830:	6878      	ldr	r0, [r7, #4]
 800f832:	f7ff fdfd 	bl	800f430 <BNO055_SetOperationMode>

	/*Check for writing problem of OPR_MODE_REG*/
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_OPR_MODE, 1, &reg, 1, 10);
 800f836:	230a      	movs	r3, #10
 800f838:	9302      	str	r3, [sp, #8]
 800f83a:	2301      	movs	r3, #1
 800f83c:	9301      	str	r3, [sp, #4]
 800f83e:	f107 030e 	add.w	r3, r7, #14
 800f842:	9300      	str	r3, [sp, #0]
 800f844:	2301      	movs	r3, #1
 800f846:	223d      	movs	r2, #61	; 0x3d
 800f848:	2150      	movs	r1, #80	; 0x50
 800f84a:	6878      	ldr	r0, [r7, #4]
 800f84c:	f004 fcfe 	bl	801424c <HAL_I2C_Mem_Read>
	if( reg != BNO055_OPERATION_MODE_NDOF){
 800f850:	7bbb      	ldrb	r3, [r7, #14]
 800f852:	2b0c      	cmp	r3, #12
 800f854:	d001      	beq.n	800f85a <BNO055_Init+0xac>
		res = 1;
 800f856:	2301      	movs	r3, #1
 800f858:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f85a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f85c:	4618      	mov	r0, r3
 800f85e:	3710      	adds	r7, #16
 800f860:	46bd      	mov	sp, r7
 800f862:	bd80      	pop	{r7, pc}
 800f864:	0000      	movs	r0, r0
	...

0800f868 <BNO055_ReadAccel>:
 * Function use to read accelerometer data from IMU
 * param: I2C --> pointer on I2C handle struct
 * param: BNO055 --> pointer on IMU struct
 * param: I2CControllerProtect --> Semaphore use to protect I2C hardware from being modified by more than one task at the same time
 */
void BNO055_ReadAccel(I2C_HandleTypeDef *I2C,BNO055_t *BNO055,osMutexId I2CControllerProtect){
 800f868:	b580      	push	{r7, lr}
 800f86a:	b08a      	sub	sp, #40	; 0x28
 800f86c:	af04      	add	r7, sp, #16
 800f86e:	60f8      	str	r0, [r7, #12]
 800f870:	60b9      	str	r1, [r7, #8]
 800f872:	607a      	str	r2, [r7, #4]
	//Read gyroscope value
	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;


	xSemaphoreTake(I2CControllerProtect,25);
 800f874:	2119      	movs	r1, #25
 800f876:	6878      	ldr	r0, [r7, #4]
 800f878:	f00a f8f8 	bl	8019a6c <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_X_LSB, 1, &reg_value_lsb, 1, 10);
 800f87c:	230a      	movs	r3, #10
 800f87e:	9302      	str	r3, [sp, #8]
 800f880:	2301      	movs	r3, #1
 800f882:	9301      	str	r3, [sp, #4]
 800f884:	f107 0317 	add.w	r3, r7, #23
 800f888:	9300      	str	r3, [sp, #0]
 800f88a:	2301      	movs	r3, #1
 800f88c:	2208      	movs	r2, #8
 800f88e:	2150      	movs	r1, #80	; 0x50
 800f890:	68f8      	ldr	r0, [r7, #12]
 800f892:	f004 fcdb 	bl	801424c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_X_MSB, 1, &reg_value_msb, 1, 10);
 800f896:	230a      	movs	r3, #10
 800f898:	9302      	str	r3, [sp, #8]
 800f89a:	2301      	movs	r3, #1
 800f89c:	9301      	str	r3, [sp, #4]
 800f89e:	f107 0316 	add.w	r3, r7, #22
 800f8a2:	9300      	str	r3, [sp, #0]
 800f8a4:	2301      	movs	r3, #1
 800f8a6:	2209      	movs	r2, #9
 800f8a8:	2150      	movs	r1, #80	; 0x50
 800f8aa:	68f8      	ldr	r0, [r7, #12]
 800f8ac:	f004 fcce 	bl	801424c <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	2100      	movs	r1, #0
 800f8b6:	6878      	ldr	r0, [r7, #4]
 800f8b8:	f009 ff64 	bl	8019784 <xQueueGenericSend>
	BNO055->raw_data.accelerometer.x = ((float)(reg_value_lsb + (reg_value_msb<<8))/ (float) accelScale);	//The minus sign is only use to sync axis value to board schematic
 800f8bc:	7dfb      	ldrb	r3, [r7, #23]
 800f8be:	461a      	mov	r2, r3
 800f8c0:	7dbb      	ldrb	r3, [r7, #22]
 800f8c2:	021b      	lsls	r3, r3, #8
 800f8c4:	4413      	add	r3, r2
 800f8c6:	ee07 3a90 	vmov	s15, r3
 800f8ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f8ce:	4b74      	ldr	r3, [pc, #464]	; (800faa0 <BNO055_ReadAccel+0x238>)
 800f8d0:	881b      	ldrh	r3, [r3, #0]
 800f8d2:	ee07 3a90 	vmov	s15, r3
 800f8d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f8da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f8de:	68bb      	ldr	r3, [r7, #8]
 800f8e0:	edc3 7a03 	vstr	s15, [r3, #12]

	/*In order to scale the acceleration correclty on -327m/s^2 to +327m/s^2*/
	if(BNO055->raw_data.accelerometer.x > 327.68){
 800f8e4:	68bb      	ldr	r3, [r7, #8]
 800f8e6:	68db      	ldr	r3, [r3, #12]
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	f7fe fa0f 	bl	800dd0c <__aeabi_f2d>
 800f8ee:	a368      	add	r3, pc, #416	; (adr r3, 800fa90 <BNO055_ReadAccel+0x228>)
 800f8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8f4:	f7fe fcf2 	bl	800e2dc <__aeabi_dcmpgt>
 800f8f8:	4603      	mov	r3, r0
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d012      	beq.n	800f924 <BNO055_ReadAccel+0xbc>
		BNO055->raw_data.accelerometer.x = BNO055->raw_data.accelerometer.x - 655.36;
 800f8fe:	68bb      	ldr	r3, [r7, #8]
 800f900:	68db      	ldr	r3, [r3, #12]
 800f902:	4618      	mov	r0, r3
 800f904:	f7fe fa02 	bl	800dd0c <__aeabi_f2d>
 800f908:	a363      	add	r3, pc, #396	; (adr r3, 800fa98 <BNO055_ReadAccel+0x230>)
 800f90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f90e:	f7fe f89d 	bl	800da4c <__aeabi_dsub>
 800f912:	4602      	mov	r2, r0
 800f914:	460b      	mov	r3, r1
 800f916:	4610      	mov	r0, r2
 800f918:	4619      	mov	r1, r3
 800f91a:	f7fe fcff 	bl	800e31c <__aeabi_d2f>
 800f91e:	4602      	mov	r2, r0
 800f920:	68bb      	ldr	r3, [r7, #8]
 800f922:	60da      	str	r2, [r3, #12]
	}

	xSemaphoreTake(I2CControllerProtect,25);
 800f924:	2119      	movs	r1, #25
 800f926:	6878      	ldr	r0, [r7, #4]
 800f928:	f00a f8a0 	bl	8019a6c <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_Y_LSB, 1, &reg_value_lsb, 1, 10);
 800f92c:	230a      	movs	r3, #10
 800f92e:	9302      	str	r3, [sp, #8]
 800f930:	2301      	movs	r3, #1
 800f932:	9301      	str	r3, [sp, #4]
 800f934:	f107 0317 	add.w	r3, r7, #23
 800f938:	9300      	str	r3, [sp, #0]
 800f93a:	2301      	movs	r3, #1
 800f93c:	220a      	movs	r2, #10
 800f93e:	2150      	movs	r1, #80	; 0x50
 800f940:	68f8      	ldr	r0, [r7, #12]
 800f942:	f004 fc83 	bl	801424c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_Y_MSB, 1, &reg_value_msb, 1, 10);
 800f946:	230a      	movs	r3, #10
 800f948:	9302      	str	r3, [sp, #8]
 800f94a:	2301      	movs	r3, #1
 800f94c:	9301      	str	r3, [sp, #4]
 800f94e:	f107 0316 	add.w	r3, r7, #22
 800f952:	9300      	str	r3, [sp, #0]
 800f954:	2301      	movs	r3, #1
 800f956:	220b      	movs	r2, #11
 800f958:	2150      	movs	r1, #80	; 0x50
 800f95a:	68f8      	ldr	r0, [r7, #12]
 800f95c:	f004 fc76 	bl	801424c <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 800f960:	2300      	movs	r3, #0
 800f962:	2200      	movs	r2, #0
 800f964:	2100      	movs	r1, #0
 800f966:	6878      	ldr	r0, [r7, #4]
 800f968:	f009 ff0c 	bl	8019784 <xQueueGenericSend>
	BNO055->raw_data.accelerometer.y = ((float)(reg_value_lsb + (reg_value_msb<<8))/ (float) accelScale);
 800f96c:	7dfb      	ldrb	r3, [r7, #23]
 800f96e:	461a      	mov	r2, r3
 800f970:	7dbb      	ldrb	r3, [r7, #22]
 800f972:	021b      	lsls	r3, r3, #8
 800f974:	4413      	add	r3, r2
 800f976:	ee07 3a90 	vmov	s15, r3
 800f97a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f97e:	4b48      	ldr	r3, [pc, #288]	; (800faa0 <BNO055_ReadAccel+0x238>)
 800f980:	881b      	ldrh	r3, [r3, #0]
 800f982:	ee07 3a90 	vmov	s15, r3
 800f986:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f98a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f98e:	68bb      	ldr	r3, [r7, #8]
 800f990:	edc3 7a04 	vstr	s15, [r3, #16]

	if(BNO055->raw_data.accelerometer.y > 327.68){
 800f994:	68bb      	ldr	r3, [r7, #8]
 800f996:	691b      	ldr	r3, [r3, #16]
 800f998:	4618      	mov	r0, r3
 800f99a:	f7fe f9b7 	bl	800dd0c <__aeabi_f2d>
 800f99e:	a33c      	add	r3, pc, #240	; (adr r3, 800fa90 <BNO055_ReadAccel+0x228>)
 800f9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9a4:	f7fe fc9a 	bl	800e2dc <__aeabi_dcmpgt>
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d012      	beq.n	800f9d4 <BNO055_ReadAccel+0x16c>
		BNO055->raw_data.accelerometer.y = BNO055->raw_data.accelerometer.y - 655.36;
 800f9ae:	68bb      	ldr	r3, [r7, #8]
 800f9b0:	691b      	ldr	r3, [r3, #16]
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	f7fe f9aa 	bl	800dd0c <__aeabi_f2d>
 800f9b8:	a337      	add	r3, pc, #220	; (adr r3, 800fa98 <BNO055_ReadAccel+0x230>)
 800f9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9be:	f7fe f845 	bl	800da4c <__aeabi_dsub>
 800f9c2:	4602      	mov	r2, r0
 800f9c4:	460b      	mov	r3, r1
 800f9c6:	4610      	mov	r0, r2
 800f9c8:	4619      	mov	r1, r3
 800f9ca:	f7fe fca7 	bl	800e31c <__aeabi_d2f>
 800f9ce:	4602      	mov	r2, r0
 800f9d0:	68bb      	ldr	r3, [r7, #8]
 800f9d2:	611a      	str	r2, [r3, #16]
	}


	xSemaphoreTake(I2CControllerProtect,25);
 800f9d4:	2119      	movs	r1, #25
 800f9d6:	6878      	ldr	r0, [r7, #4]
 800f9d8:	f00a f848 	bl	8019a6c <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_Z_LSB, 1, &reg_value_lsb, 1, 10);
 800f9dc:	230a      	movs	r3, #10
 800f9de:	9302      	str	r3, [sp, #8]
 800f9e0:	2301      	movs	r3, #1
 800f9e2:	9301      	str	r3, [sp, #4]
 800f9e4:	f107 0317 	add.w	r3, r7, #23
 800f9e8:	9300      	str	r3, [sp, #0]
 800f9ea:	2301      	movs	r3, #1
 800f9ec:	220c      	movs	r2, #12
 800f9ee:	2150      	movs	r1, #80	; 0x50
 800f9f0:	68f8      	ldr	r0, [r7, #12]
 800f9f2:	f004 fc2b 	bl	801424c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_Z_MSB, 1, &reg_value_msb, 1, 10);
 800f9f6:	230a      	movs	r3, #10
 800f9f8:	9302      	str	r3, [sp, #8]
 800f9fa:	2301      	movs	r3, #1
 800f9fc:	9301      	str	r3, [sp, #4]
 800f9fe:	f107 0316 	add.w	r3, r7, #22
 800fa02:	9300      	str	r3, [sp, #0]
 800fa04:	2301      	movs	r3, #1
 800fa06:	220d      	movs	r2, #13
 800fa08:	2150      	movs	r1, #80	; 0x50
 800fa0a:	68f8      	ldr	r0, [r7, #12]
 800fa0c:	f004 fc1e 	bl	801424c <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 800fa10:	2300      	movs	r3, #0
 800fa12:	2200      	movs	r2, #0
 800fa14:	2100      	movs	r1, #0
 800fa16:	6878      	ldr	r0, [r7, #4]
 800fa18:	f009 feb4 	bl	8019784 <xQueueGenericSend>
	BNO055->raw_data.accelerometer.z = ((float)(reg_value_lsb + (reg_value_msb<<8))/ (float) accelScale);
 800fa1c:	7dfb      	ldrb	r3, [r7, #23]
 800fa1e:	461a      	mov	r2, r3
 800fa20:	7dbb      	ldrb	r3, [r7, #22]
 800fa22:	021b      	lsls	r3, r3, #8
 800fa24:	4413      	add	r3, r2
 800fa26:	ee07 3a90 	vmov	s15, r3
 800fa2a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800fa2e:	4b1c      	ldr	r3, [pc, #112]	; (800faa0 <BNO055_ReadAccel+0x238>)
 800fa30:	881b      	ldrh	r3, [r3, #0]
 800fa32:	ee07 3a90 	vmov	s15, r3
 800fa36:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800fa3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fa3e:	68bb      	ldr	r3, [r7, #8]
 800fa40:	edc3 7a05 	vstr	s15, [r3, #20]

	if(BNO055->raw_data.accelerometer.z > 327.68){
 800fa44:	68bb      	ldr	r3, [r7, #8]
 800fa46:	695b      	ldr	r3, [r3, #20]
 800fa48:	4618      	mov	r0, r3
 800fa4a:	f7fe f95f 	bl	800dd0c <__aeabi_f2d>
 800fa4e:	a310      	add	r3, pc, #64	; (adr r3, 800fa90 <BNO055_ReadAccel+0x228>)
 800fa50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa54:	f7fe fc42 	bl	800e2dc <__aeabi_dcmpgt>
 800fa58:	4603      	mov	r3, r0
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d100      	bne.n	800fa60 <BNO055_ReadAccel+0x1f8>
		BNO055->raw_data.accelerometer.z = BNO055->raw_data.accelerometer.z - 655.36;
	}
}
 800fa5e:	e012      	b.n	800fa86 <BNO055_ReadAccel+0x21e>
		BNO055->raw_data.accelerometer.z = BNO055->raw_data.accelerometer.z - 655.36;
 800fa60:	68bb      	ldr	r3, [r7, #8]
 800fa62:	695b      	ldr	r3, [r3, #20]
 800fa64:	4618      	mov	r0, r3
 800fa66:	f7fe f951 	bl	800dd0c <__aeabi_f2d>
 800fa6a:	a30b      	add	r3, pc, #44	; (adr r3, 800fa98 <BNO055_ReadAccel+0x230>)
 800fa6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa70:	f7fd ffec 	bl	800da4c <__aeabi_dsub>
 800fa74:	4602      	mov	r2, r0
 800fa76:	460b      	mov	r3, r1
 800fa78:	4610      	mov	r0, r2
 800fa7a:	4619      	mov	r1, r3
 800fa7c:	f7fe fc4e 	bl	800e31c <__aeabi_d2f>
 800fa80:	4602      	mov	r2, r0
 800fa82:	68bb      	ldr	r3, [r7, #8]
 800fa84:	615a      	str	r2, [r3, #20]
}
 800fa86:	bf00      	nop
 800fa88:	3718      	adds	r7, #24
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	bd80      	pop	{r7, pc}
 800fa8e:	bf00      	nop
 800fa90:	47ae147b 	.word	0x47ae147b
 800fa94:	40747ae1 	.word	0x40747ae1
 800fa98:	47ae147b 	.word	0x47ae147b
 800fa9c:	40847ae1 	.word	0x40847ae1
 800faa0:	20000000 	.word	0x20000000

0800faa4 <BNO055_ReadEuler_Roll>:
 * @INPUT - I2C interface struct
 * @INPUT - IMU struc
 * @OUTPUT - None
 * @INFORMATIONS - If use with freertos or other reeltime os please use a semaphore/mutex to protect I2C interface
 */
void BNO055_ReadEuler_Roll(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b088      	sub	sp, #32
 800faa8:	af04      	add	r7, sp, #16
 800faaa:	6078      	str	r0, [r7, #4]
 800faac:	6039      	str	r1, [r7, #0]

	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;

	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_ROLL_LSB, 1, &reg_value_lsb, 1, 10);
 800faae:	230a      	movs	r3, #10
 800fab0:	9302      	str	r3, [sp, #8]
 800fab2:	2301      	movs	r3, #1
 800fab4:	9301      	str	r3, [sp, #4]
 800fab6:	f107 030f 	add.w	r3, r7, #15
 800faba:	9300      	str	r3, [sp, #0]
 800fabc:	2301      	movs	r3, #1
 800fabe:	221c      	movs	r2, #28
 800fac0:	2150      	movs	r1, #80	; 0x50
 800fac2:	6878      	ldr	r0, [r7, #4]
 800fac4:	f004 fbc2 	bl	801424c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_ROLL_MSB, 1, &reg_value_msb, 1, 10);
 800fac8:	230a      	movs	r3, #10
 800faca:	9302      	str	r3, [sp, #8]
 800facc:	2301      	movs	r3, #1
 800face:	9301      	str	r3, [sp, #4]
 800fad0:	f107 030e 	add.w	r3, r7, #14
 800fad4:	9300      	str	r3, [sp, #0]
 800fad6:	2301      	movs	r3, #1
 800fad8:	221d      	movs	r2, #29
 800fada:	2150      	movs	r1, #80	; 0x50
 800fadc:	6878      	ldr	r0, [r7, #4]
 800fade:	f004 fbb5 	bl	801424c <HAL_I2C_Mem_Read>
	BNO055->processed_data.euler_angles.y = (float) ((reg_value_lsb + (reg_value_msb<<8))/ (float) eulerScale);
 800fae2:	7bfb      	ldrb	r3, [r7, #15]
 800fae4:	461a      	mov	r2, r3
 800fae6:	7bbb      	ldrb	r3, [r7, #14]
 800fae8:	021b      	lsls	r3, r3, #8
 800faea:	4413      	add	r3, r2
 800faec:	ee07 3a90 	vmov	s15, r3
 800faf0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800faf4:	4b11      	ldr	r3, [pc, #68]	; (800fb3c <BNO055_ReadEuler_Roll+0x98>)
 800faf6:	881b      	ldrh	r3, [r3, #0]
 800faf8:	ee07 3a90 	vmov	s15, r3
 800fafc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800fb00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fb04:	683b      	ldr	r3, [r7, #0]
 800fb06:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	/*Make sure the data are rotating clockwise*/
	if(BNO055->processed_data.euler_angles.y > 2000){
 800fb0a:	683b      	ldr	r3, [r7, #0]
 800fb0c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800fb10:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800fb40 <BNO055_ReadEuler_Roll+0x9c>
 800fb14:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fb18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb1c:	dc00      	bgt.n	800fb20 <BNO055_ReadEuler_Roll+0x7c>
		BNO055->processed_data.euler_angles.y = BNO055->processed_data.euler_angles.y - 4096;
	}
}
 800fb1e:	e009      	b.n	800fb34 <BNO055_ReadEuler_Roll+0x90>
		BNO055->processed_data.euler_angles.y = BNO055->processed_data.euler_angles.y - 4096;
 800fb20:	683b      	ldr	r3, [r7, #0]
 800fb22:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800fb26:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800fb44 <BNO055_ReadEuler_Roll+0xa0>
 800fb2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fb2e:	683b      	ldr	r3, [r7, #0]
 800fb30:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 800fb34:	bf00      	nop
 800fb36:	3710      	adds	r7, #16
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	bd80      	pop	{r7, pc}
 800fb3c:	20000002 	.word	0x20000002
 800fb40:	44fa0000 	.word	0x44fa0000
 800fb44:	45800000 	.word	0x45800000

0800fb48 <BNO055_ReadEuler_Pitch>:
 * @INPUT - I2C interface struct
 * @INPUT - IMU struc
 * @OUTPUT - None
 * @INFORMATIONS - If use with freertos or other reeltime os please use a semaphore/mutex to protect I2C interface
 */
void BNO055_ReadEuler_Pitch(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b088      	sub	sp, #32
 800fb4c:	af04      	add	r7, sp, #16
 800fb4e:	6078      	str	r0, [r7, #4]
 800fb50:	6039      	str	r1, [r7, #0]

	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;

	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_PITCH_LSB, 1, &reg_value_lsb, 1, 10);
 800fb52:	230a      	movs	r3, #10
 800fb54:	9302      	str	r3, [sp, #8]
 800fb56:	2301      	movs	r3, #1
 800fb58:	9301      	str	r3, [sp, #4]
 800fb5a:	f107 030f 	add.w	r3, r7, #15
 800fb5e:	9300      	str	r3, [sp, #0]
 800fb60:	2301      	movs	r3, #1
 800fb62:	221e      	movs	r2, #30
 800fb64:	2150      	movs	r1, #80	; 0x50
 800fb66:	6878      	ldr	r0, [r7, #4]
 800fb68:	f004 fb70 	bl	801424c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_PITCH_MSB, 1, &reg_value_msb, 1, 10);
 800fb6c:	230a      	movs	r3, #10
 800fb6e:	9302      	str	r3, [sp, #8]
 800fb70:	2301      	movs	r3, #1
 800fb72:	9301      	str	r3, [sp, #4]
 800fb74:	f107 030e 	add.w	r3, r7, #14
 800fb78:	9300      	str	r3, [sp, #0]
 800fb7a:	2301      	movs	r3, #1
 800fb7c:	221f      	movs	r2, #31
 800fb7e:	2150      	movs	r1, #80	; 0x50
 800fb80:	6878      	ldr	r0, [r7, #4]
 800fb82:	f004 fb63 	bl	801424c <HAL_I2C_Mem_Read>
	BNO055->processed_data.euler_angles.x = (float) ((reg_value_lsb + (reg_value_msb<<8))/(float) eulerScale);
 800fb86:	7bfb      	ldrb	r3, [r7, #15]
 800fb88:	461a      	mov	r2, r3
 800fb8a:	7bbb      	ldrb	r3, [r7, #14]
 800fb8c:	021b      	lsls	r3, r3, #8
 800fb8e:	4413      	add	r3, r2
 800fb90:	ee07 3a90 	vmov	s15, r3
 800fb94:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800fb98:	4b11      	ldr	r3, [pc, #68]	; (800fbe0 <BNO055_ReadEuler_Pitch+0x98>)
 800fb9a:	881b      	ldrh	r3, [r3, #0]
 800fb9c:	ee07 3a90 	vmov	s15, r3
 800fba0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800fba4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fba8:	683b      	ldr	r3, [r7, #0]
 800fbaa:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	/*Make sure the data are rotating clockwise*/
	if(BNO055->processed_data.euler_angles.x > 2000){
 800fbae:	683b      	ldr	r3, [r7, #0]
 800fbb0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800fbb4:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800fbe4 <BNO055_ReadEuler_Pitch+0x9c>
 800fbb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fbbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbc0:	dc00      	bgt.n	800fbc4 <BNO055_ReadEuler_Pitch+0x7c>
		BNO055->processed_data.euler_angles.x = BNO055->processed_data.euler_angles.x - 4096;
	}
}
 800fbc2:	e009      	b.n	800fbd8 <BNO055_ReadEuler_Pitch+0x90>
		BNO055->processed_data.euler_angles.x = BNO055->processed_data.euler_angles.x - 4096;
 800fbc4:	683b      	ldr	r3, [r7, #0]
 800fbc6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800fbca:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800fbe8 <BNO055_ReadEuler_Pitch+0xa0>
 800fbce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fbd2:	683b      	ldr	r3, [r7, #0]
 800fbd4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 800fbd8:	bf00      	nop
 800fbda:	3710      	adds	r7, #16
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	bd80      	pop	{r7, pc}
 800fbe0:	20000002 	.word	0x20000002
 800fbe4:	44fa0000 	.word	0x44fa0000
 800fbe8:	45800000 	.word	0x45800000

0800fbec <BNO055_ReadEuler_Yaw>:
 * @INPUT - I2C interface struct
 * @INPUT - IMU struct
 * @OUTPUT - None
 * @INFORMATIONS - If use with freertos or other reeltime os please use a semaphore/mutex to protect I2C interface
 */
void BNO055_ReadEuler_Yaw(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b088      	sub	sp, #32
 800fbf0:	af04      	add	r7, sp, #16
 800fbf2:	6078      	str	r0, [r7, #4]
 800fbf4:	6039      	str	r1, [r7, #0]

	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;

	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_HEADING_LSB, 1, &reg_value_lsb, 1, 10);
 800fbf6:	230a      	movs	r3, #10
 800fbf8:	9302      	str	r3, [sp, #8]
 800fbfa:	2301      	movs	r3, #1
 800fbfc:	9301      	str	r3, [sp, #4]
 800fbfe:	f107 030f 	add.w	r3, r7, #15
 800fc02:	9300      	str	r3, [sp, #0]
 800fc04:	2301      	movs	r3, #1
 800fc06:	221a      	movs	r2, #26
 800fc08:	2150      	movs	r1, #80	; 0x50
 800fc0a:	6878      	ldr	r0, [r7, #4]
 800fc0c:	f004 fb1e 	bl	801424c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_HEADING_MSB, 1, &reg_value_msb, 1, 10);
 800fc10:	230a      	movs	r3, #10
 800fc12:	9302      	str	r3, [sp, #8]
 800fc14:	2301      	movs	r3, #1
 800fc16:	9301      	str	r3, [sp, #4]
 800fc18:	f107 030e 	add.w	r3, r7, #14
 800fc1c:	9300      	str	r3, [sp, #0]
 800fc1e:	2301      	movs	r3, #1
 800fc20:	221b      	movs	r2, #27
 800fc22:	2150      	movs	r1, #80	; 0x50
 800fc24:	6878      	ldr	r0, [r7, #4]
 800fc26:	f004 fb11 	bl	801424c <HAL_I2C_Mem_Read>
	BNO055->processed_data.euler_angles.z = (float) ((reg_value_lsb + (reg_value_msb<<8))/ (float) eulerScale);
 800fc2a:	7bfb      	ldrb	r3, [r7, #15]
 800fc2c:	461a      	mov	r2, r3
 800fc2e:	7bbb      	ldrb	r3, [r7, #14]
 800fc30:	021b      	lsls	r3, r3, #8
 800fc32:	4413      	add	r3, r2
 800fc34:	ee07 3a90 	vmov	s15, r3
 800fc38:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800fc3c:	4b07      	ldr	r3, [pc, #28]	; (800fc5c <BNO055_ReadEuler_Yaw+0x70>)
 800fc3e:	881b      	ldrh	r3, [r3, #0]
 800fc40:	ee07 3a90 	vmov	s15, r3
 800fc44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800fc48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fc4c:	683b      	ldr	r3, [r7, #0]
 800fc4e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 800fc52:	bf00      	nop
 800fc54:	3710      	adds	r7, #16
 800fc56:	46bd      	mov	sp, r7
 800fc58:	bd80      	pop	{r7, pc}
 800fc5a:	bf00      	nop
 800fc5c:	20000002 	.word	0x20000002

0800fc60 <BNO055_ComputeSpeed>:
 * @INPUT - I2C interface struct
 * @INPUT - IMU struct
 * @INFORMATIONS - Need to be call after a ReadAccel function in order to work correctly
 * Tick should be increment every ms in order to gather correct data
 */
void BNO055_ComputeSpeed(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b088      	sub	sp, #32
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
 800fc68:	6039      	str	r1, [r7, #0]

	float speed_vector_x;
	float current_acceleration =BNO055->raw_data.accelerometer.x;
 800fc6a:	683b      	ldr	r3, [r7, #0]
 800fc6c:	68db      	ldr	r3, [r3, #12]
 800fc6e:	61fb      	str	r3, [r7, #28]
	uint32_t current_tick = HAL_GetTick();
 800fc70:	f002 f926 	bl	8011ec0 <HAL_GetTick>
 800fc74:	61b8      	str	r0, [r7, #24]
	float delta_acceleration = (current_acceleration - BNO055->reserved_for_operation.previous_acceleration.x);
 800fc76:	683b      	ldr	r3, [r7, #0]
 800fc78:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800fc7c:	ed97 7a07 	vldr	s14, [r7, #28]
 800fc80:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fc84:	edc7 7a05 	vstr	s15, [r7, #20]
	uint32_t delta_tick = (current_tick - BNO055->reserved_for_operation.last_call_tick.x);
 800fc88:	683b      	ldr	r3, [r7, #0]
 800fc8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fc8e:	69ba      	ldr	r2, [r7, #24]
 800fc90:	1ad3      	subs	r3, r2, r3
 800fc92:	613b      	str	r3, [r7, #16]


	speed_vector_x = (float)(delta_tick/1000)*current_acceleration;
 800fc94:	693b      	ldr	r3, [r7, #16]
 800fc96:	4a0a      	ldr	r2, [pc, #40]	; (800fcc0 <BNO055_ComputeSpeed+0x60>)
 800fc98:	fba2 2303 	umull	r2, r3, r2, r3
 800fc9c:	099b      	lsrs	r3, r3, #6
 800fc9e:	ee07 3a90 	vmov	s15, r3
 800fca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fca6:	ed97 7a07 	vldr	s14, [r7, #28]
 800fcaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fcae:	edc7 7a03 	vstr	s15, [r7, #12]
	BNO055->processed_data.speed_vector.x = speed_vector_x;
 800fcb2:	683b      	ldr	r3, [r7, #0]
 800fcb4:	68fa      	ldr	r2, [r7, #12]
 800fcb6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800fcb8:	bf00      	nop
 800fcba:	3720      	adds	r7, #32
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	bd80      	pop	{r7, pc}
 800fcc0:	10624dd3 	.word	0x10624dd3

0800fcc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b082      	sub	sp, #8
 800fcc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800fcca:	4b12      	ldr	r3, [pc, #72]	; (800fd14 <MX_DMA_Init+0x50>)
 800fccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fcce:	4a11      	ldr	r2, [pc, #68]	; (800fd14 <MX_DMA_Init+0x50>)
 800fcd0:	f043 0304 	orr.w	r3, r3, #4
 800fcd4:	6493      	str	r3, [r2, #72]	; 0x48
 800fcd6:	4b0f      	ldr	r3, [pc, #60]	; (800fd14 <MX_DMA_Init+0x50>)
 800fcd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fcda:	f003 0304 	and.w	r3, r3, #4
 800fcde:	607b      	str	r3, [r7, #4]
 800fce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800fce2:	4b0c      	ldr	r3, [pc, #48]	; (800fd14 <MX_DMA_Init+0x50>)
 800fce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fce6:	4a0b      	ldr	r2, [pc, #44]	; (800fd14 <MX_DMA_Init+0x50>)
 800fce8:	f043 0301 	orr.w	r3, r3, #1
 800fcec:	6493      	str	r3, [r2, #72]	; 0x48
 800fcee:	4b09      	ldr	r3, [pc, #36]	; (800fd14 <MX_DMA_Init+0x50>)
 800fcf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fcf2:	f003 0301 	and.w	r3, r3, #1
 800fcf6:	603b      	str	r3, [r7, #0]
 800fcf8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	2105      	movs	r1, #5
 800fcfe:	200b      	movs	r0, #11
 800fd00:	f003 fbd0 	bl	80134a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800fd04:	200b      	movs	r0, #11
 800fd06:	f003 fbe7 	bl	80134d8 <HAL_NVIC_EnableIRQ>

}
 800fd0a:	bf00      	nop
 800fd0c:	3708      	adds	r7, #8
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	bd80      	pop	{r7, pc}
 800fd12:	bf00      	nop
 800fd14:	40021000 	.word	0x40021000

0800fd18 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800fd18:	b580      	push	{r7, lr}
 800fd1a:	b08a      	sub	sp, #40	; 0x28
 800fd1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fd1e:	f107 0314 	add.w	r3, r7, #20
 800fd22:	2200      	movs	r2, #0
 800fd24:	601a      	str	r2, [r3, #0]
 800fd26:	605a      	str	r2, [r3, #4]
 800fd28:	609a      	str	r2, [r3, #8]
 800fd2a:	60da      	str	r2, [r3, #12]
 800fd2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800fd2e:	4b37      	ldr	r3, [pc, #220]	; (800fe0c <MX_GPIO_Init+0xf4>)
 800fd30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fd32:	4a36      	ldr	r2, [pc, #216]	; (800fe0c <MX_GPIO_Init+0xf4>)
 800fd34:	f043 0320 	orr.w	r3, r3, #32
 800fd38:	64d3      	str	r3, [r2, #76]	; 0x4c
 800fd3a:	4b34      	ldr	r3, [pc, #208]	; (800fe0c <MX_GPIO_Init+0xf4>)
 800fd3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fd3e:	f003 0320 	and.w	r3, r3, #32
 800fd42:	613b      	str	r3, [r7, #16]
 800fd44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800fd46:	4b31      	ldr	r3, [pc, #196]	; (800fe0c <MX_GPIO_Init+0xf4>)
 800fd48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fd4a:	4a30      	ldr	r2, [pc, #192]	; (800fe0c <MX_GPIO_Init+0xf4>)
 800fd4c:	f043 0304 	orr.w	r3, r3, #4
 800fd50:	64d3      	str	r3, [r2, #76]	; 0x4c
 800fd52:	4b2e      	ldr	r3, [pc, #184]	; (800fe0c <MX_GPIO_Init+0xf4>)
 800fd54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fd56:	f003 0304 	and.w	r3, r3, #4
 800fd5a:	60fb      	str	r3, [r7, #12]
 800fd5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800fd5e:	4b2b      	ldr	r3, [pc, #172]	; (800fe0c <MX_GPIO_Init+0xf4>)
 800fd60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fd62:	4a2a      	ldr	r2, [pc, #168]	; (800fe0c <MX_GPIO_Init+0xf4>)
 800fd64:	f043 0301 	orr.w	r3, r3, #1
 800fd68:	64d3      	str	r3, [r2, #76]	; 0x4c
 800fd6a:	4b28      	ldr	r3, [pc, #160]	; (800fe0c <MX_GPIO_Init+0xf4>)
 800fd6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fd6e:	f003 0301 	and.w	r3, r3, #1
 800fd72:	60bb      	str	r3, [r7, #8]
 800fd74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800fd76:	4b25      	ldr	r3, [pc, #148]	; (800fe0c <MX_GPIO_Init+0xf4>)
 800fd78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fd7a:	4a24      	ldr	r2, [pc, #144]	; (800fe0c <MX_GPIO_Init+0xf4>)
 800fd7c:	f043 0308 	orr.w	r3, r3, #8
 800fd80:	64d3      	str	r3, [r2, #76]	; 0x4c
 800fd82:	4b22      	ldr	r3, [pc, #136]	; (800fe0c <MX_GPIO_Init+0xf4>)
 800fd84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fd86:	f003 0308 	and.w	r3, r3, #8
 800fd8a:	607b      	str	r3, [r7, #4]
 800fd8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800fd8e:	4b1f      	ldr	r3, [pc, #124]	; (800fe0c <MX_GPIO_Init+0xf4>)
 800fd90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fd92:	4a1e      	ldr	r2, [pc, #120]	; (800fe0c <MX_GPIO_Init+0xf4>)
 800fd94:	f043 0302 	orr.w	r3, r3, #2
 800fd98:	64d3      	str	r3, [r2, #76]	; 0x4c
 800fd9a:	4b1c      	ldr	r3, [pc, #112]	; (800fe0c <MX_GPIO_Init+0xf4>)
 800fd9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fd9e:	f003 0302 	and.w	r3, r3, #2
 800fda2:	603b      	str	r3, [r7, #0]
 800fda4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800fda6:	2200      	movs	r2, #0
 800fda8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fdac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800fdb0:	f004 f854 	bl	8013e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800fdb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fdb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fdba:	2301      	movs	r3, #1
 800fdbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800fdc6:	f107 0314 	add.w	r3, r7, #20
 800fdca:	4619      	mov	r1, r3
 800fdcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800fdd0:	f003 fec2 	bl	8013b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_IT_Pin;
 800fdd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fdd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800fdda:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800fdde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fde0:	2300      	movs	r3, #0
 800fde2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_IT_GPIO_Port, &GPIO_InitStruct);
 800fde4:	f107 0314 	add.w	r3, r7, #20
 800fde8:	4619      	mov	r1, r3
 800fdea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800fdee:	f003 feb3 	bl	8013b58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	2105      	movs	r1, #5
 800fdf6:	2028      	movs	r0, #40	; 0x28
 800fdf8:	f003 fb54 	bl	80134a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800fdfc:	2028      	movs	r0, #40	; 0x28
 800fdfe:	f003 fb6b 	bl	80134d8 <HAL_NVIC_EnableIRQ>

}
 800fe02:	bf00      	nop
 800fe04:	3728      	adds	r7, #40	; 0x28
 800fe06:	46bd      	mov	sp, r7
 800fe08:	bd80      	pop	{r7, pc}
 800fe0a:	bf00      	nop
 800fe0c:	40021000 	.word	0x40021000

0800fe10 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800fe10:	b580      	push	{r7, lr}
 800fe12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800fe14:	4b1b      	ldr	r3, [pc, #108]	; (800fe84 <MX_I2C2_Init+0x74>)
 800fe16:	4a1c      	ldr	r2, [pc, #112]	; (800fe88 <MX_I2C2_Init+0x78>)
 800fe18:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20C0EDFF;
 800fe1a:	4b1a      	ldr	r3, [pc, #104]	; (800fe84 <MX_I2C2_Init+0x74>)
 800fe1c:	4a1b      	ldr	r2, [pc, #108]	; (800fe8c <MX_I2C2_Init+0x7c>)
 800fe1e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800fe20:	4b18      	ldr	r3, [pc, #96]	; (800fe84 <MX_I2C2_Init+0x74>)
 800fe22:	2200      	movs	r2, #0
 800fe24:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800fe26:	4b17      	ldr	r3, [pc, #92]	; (800fe84 <MX_I2C2_Init+0x74>)
 800fe28:	2201      	movs	r2, #1
 800fe2a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800fe2c:	4b15      	ldr	r3, [pc, #84]	; (800fe84 <MX_I2C2_Init+0x74>)
 800fe2e:	2200      	movs	r2, #0
 800fe30:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800fe32:	4b14      	ldr	r3, [pc, #80]	; (800fe84 <MX_I2C2_Init+0x74>)
 800fe34:	2200      	movs	r2, #0
 800fe36:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800fe38:	4b12      	ldr	r3, [pc, #72]	; (800fe84 <MX_I2C2_Init+0x74>)
 800fe3a:	2200      	movs	r2, #0
 800fe3c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800fe3e:	4b11      	ldr	r3, [pc, #68]	; (800fe84 <MX_I2C2_Init+0x74>)
 800fe40:	2200      	movs	r2, #0
 800fe42:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800fe44:	4b0f      	ldr	r3, [pc, #60]	; (800fe84 <MX_I2C2_Init+0x74>)
 800fe46:	2200      	movs	r2, #0
 800fe48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800fe4a:	480e      	ldr	r0, [pc, #56]	; (800fe84 <MX_I2C2_Init+0x74>)
 800fe4c:	f004 f85b 	bl	8013f06 <HAL_I2C_Init>
 800fe50:	4603      	mov	r3, r0
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d001      	beq.n	800fe5a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800fe56:	f001 f82f 	bl	8010eb8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800fe5a:	2100      	movs	r1, #0
 800fe5c:	4809      	ldr	r0, [pc, #36]	; (800fe84 <MX_I2C2_Init+0x74>)
 800fe5e:	f004 fdb5 	bl	80149cc <HAL_I2CEx_ConfigAnalogFilter>
 800fe62:	4603      	mov	r3, r0
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d001      	beq.n	800fe6c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800fe68:	f001 f826 	bl	8010eb8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800fe6c:	2100      	movs	r1, #0
 800fe6e:	4805      	ldr	r0, [pc, #20]	; (800fe84 <MX_I2C2_Init+0x74>)
 800fe70:	f004 fdf7 	bl	8014a62 <HAL_I2CEx_ConfigDigitalFilter>
 800fe74:	4603      	mov	r3, r0
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d001      	beq.n	800fe7e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800fe7a:	f001 f81d 	bl	8010eb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800fe7e:	bf00      	nop
 800fe80:	bd80      	pop	{r7, pc}
 800fe82:	bf00      	nop
 800fe84:	200001fc 	.word	0x200001fc
 800fe88:	40005800 	.word	0x40005800
 800fe8c:	20c0edff 	.word	0x20c0edff

0800fe90 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b0a0      	sub	sp, #128	; 0x80
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fe98:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800fe9c:	2200      	movs	r2, #0
 800fe9e:	601a      	str	r2, [r3, #0]
 800fea0:	605a      	str	r2, [r3, #4]
 800fea2:	609a      	str	r2, [r3, #8]
 800fea4:	60da      	str	r2, [r3, #12]
 800fea6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800fea8:	f107 0318 	add.w	r3, r7, #24
 800feac:	2254      	movs	r2, #84	; 0x54
 800feae:	2100      	movs	r1, #0
 800feb0:	4618      	mov	r0, r3
 800feb2:	f00b fc3d 	bl	801b730 <memset>
  if(i2cHandle->Instance==I2C2)
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	4a2c      	ldr	r2, [pc, #176]	; (800ff6c <HAL_I2C_MspInit+0xdc>)
 800febc:	4293      	cmp	r3, r2
 800febe:	d151      	bne.n	800ff64 <HAL_I2C_MspInit+0xd4>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800fec0:	2380      	movs	r3, #128	; 0x80
 800fec2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800fec4:	2300      	movs	r3, #0
 800fec6:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800fec8:	f107 0318 	add.w	r3, r7, #24
 800fecc:	4618      	mov	r0, r3
 800fece:	f005 fc1f 	bl	8015710 <HAL_RCCEx_PeriphCLKConfig>
 800fed2:	4603      	mov	r3, r0
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d001      	beq.n	800fedc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800fed8:	f000 ffee 	bl	8010eb8 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800fedc:	4b24      	ldr	r3, [pc, #144]	; (800ff70 <HAL_I2C_MspInit+0xe0>)
 800fede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fee0:	4a23      	ldr	r2, [pc, #140]	; (800ff70 <HAL_I2C_MspInit+0xe0>)
 800fee2:	f043 0320 	orr.w	r3, r3, #32
 800fee6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800fee8:	4b21      	ldr	r3, [pc, #132]	; (800ff70 <HAL_I2C_MspInit+0xe0>)
 800feea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800feec:	f003 0320 	and.w	r3, r3, #32
 800fef0:	617b      	str	r3, [r7, #20]
 800fef2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800fef4:	4b1e      	ldr	r3, [pc, #120]	; (800ff70 <HAL_I2C_MspInit+0xe0>)
 800fef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fef8:	4a1d      	ldr	r2, [pc, #116]	; (800ff70 <HAL_I2C_MspInit+0xe0>)
 800fefa:	f043 0304 	orr.w	r3, r3, #4
 800fefe:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ff00:	4b1b      	ldr	r3, [pc, #108]	; (800ff70 <HAL_I2C_MspInit+0xe0>)
 800ff02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ff04:	f003 0304 	and.w	r3, r3, #4
 800ff08:	613b      	str	r3, [r7, #16]
 800ff0a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0-OSC_IN     ------> I2C2_SDA
    PC4     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800ff0c:	2301      	movs	r3, #1
 800ff0e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ff10:	2312      	movs	r3, #18
 800ff12:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ff14:	2300      	movs	r3, #0
 800ff16:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ff18:	2300      	movs	r3, #0
 800ff1a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800ff1c:	2304      	movs	r3, #4
 800ff1e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800ff20:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800ff24:	4619      	mov	r1, r3
 800ff26:	4813      	ldr	r0, [pc, #76]	; (800ff74 <HAL_I2C_MspInit+0xe4>)
 800ff28:	f003 fe16 	bl	8013b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800ff2c:	2310      	movs	r3, #16
 800ff2e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ff30:	2312      	movs	r3, #18
 800ff32:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ff34:	2300      	movs	r3, #0
 800ff36:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ff38:	2300      	movs	r3, #0
 800ff3a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800ff3c:	2304      	movs	r3, #4
 800ff3e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ff40:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800ff44:	4619      	mov	r1, r3
 800ff46:	480c      	ldr	r0, [pc, #48]	; (800ff78 <HAL_I2C_MspInit+0xe8>)
 800ff48:	f003 fe06 	bl	8013b58 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800ff4c:	4b08      	ldr	r3, [pc, #32]	; (800ff70 <HAL_I2C_MspInit+0xe0>)
 800ff4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff50:	4a07      	ldr	r2, [pc, #28]	; (800ff70 <HAL_I2C_MspInit+0xe0>)
 800ff52:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ff56:	6593      	str	r3, [r2, #88]	; 0x58
 800ff58:	4b05      	ldr	r3, [pc, #20]	; (800ff70 <HAL_I2C_MspInit+0xe0>)
 800ff5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ff60:	60fb      	str	r3, [r7, #12]
 800ff62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800ff64:	bf00      	nop
 800ff66:	3780      	adds	r7, #128	; 0x80
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	bd80      	pop	{r7, pc}
 800ff6c:	40005800 	.word	0x40005800
 800ff70:	40021000 	.word	0x40021000
 800ff74:	48001400 	.word	0x48001400
 800ff78:	48000800 	.word	0x48000800

0800ff7c <gps_ReadNMEA>:
 */

#include "l80-m39.h"


void gps_ReadNMEA(uint8_t nmea_data[],GPS_t *gps_struct){
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b08e      	sub	sp, #56	; 0x38
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
 800ff84:	6039      	str	r1, [r7, #0]

	uint8_t string_nmea[6];
	uint8_t gpgga_nmea[6] = "GPGGA\0";
 800ff86:	4a70      	ldr	r2, [pc, #448]	; (8010148 <gps_ReadNMEA+0x1cc>)
 800ff88:	f107 0318 	add.w	r3, r7, #24
 800ff8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ff90:	6018      	str	r0, [r3, #0]
 800ff92:	3304      	adds	r3, #4
 800ff94:	8019      	strh	r1, [r3, #0]
	uint8_t readed_data[12];
	uint8_t delta;
	uint8_t begin_offset;
	uint8_t processing_offset = 0;
 800ff96:	2300      	movs	r3, #0
 800ff98:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	//Loop for all the nmea data
	for(int i=0;i<BUFFER_SIZE_NMEA;i++){
 800ff9c:	2300      	movs	r3, #0
 800ff9e:	633b      	str	r3, [r7, #48]	; 0x30
 800ffa0:	e0c8      	b.n	8010134 <gps_ReadNMEA+0x1b8>
		/*only look for a data beginin symbol = $ */
		if(nmea_data[i] == '$'){
 800ffa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffa4:	687a      	ldr	r2, [r7, #4]
 800ffa6:	4413      	add	r3, r2
 800ffa8:	781b      	ldrb	r3, [r3, #0]
 800ffaa:	2b24      	cmp	r3, #36	; 0x24
 800ffac:	f040 80bf 	bne.w	801012e <gps_ReadNMEA+0x1b2>
			/*Check if we have $GPGGA*/
			for(int j=0;j<5;j++){
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ffb4:	e00f      	b.n	800ffd6 <gps_ReadNMEA+0x5a>
				string_nmea[j] = nmea_data[(i+j+1)];
 800ffb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ffb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffba:	4413      	add	r3, r2
 800ffbc:	3301      	adds	r3, #1
 800ffbe:	687a      	ldr	r2, [r7, #4]
 800ffc0:	4413      	add	r3, r2
 800ffc2:	7819      	ldrb	r1, [r3, #0]
 800ffc4:	f107 0220 	add.w	r2, r7, #32
 800ffc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffca:	4413      	add	r3, r2
 800ffcc:	460a      	mov	r2, r1
 800ffce:	701a      	strb	r2, [r3, #0]
			for(int j=0;j<5;j++){
 800ffd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffd2:	3301      	adds	r3, #1
 800ffd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ffd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffd8:	2b04      	cmp	r3, #4
 800ffda:	ddec      	ble.n	800ffb6 <gps_ReadNMEA+0x3a>
			}
			string_nmea[5] = 0;
 800ffdc:	2300      	movs	r3, #0
 800ffde:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			/*Be aware that input string of strcmp need to end on \0 If not the result will probably be random value*/
			if(strcmp(string_nmea,gpgga_nmea) == 0){
 800ffe2:	f107 0218 	add.w	r2, r7, #24
 800ffe6:	f107 0320 	add.w	r3, r7, #32
 800ffea:	4611      	mov	r1, r2
 800ffec:	4618      	mov	r0, r3
 800ffee:	f7fd fd17 	bl	800da20 <strcmp>
 800fff2:	4603      	mov	r3, r0
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	f040 809a 	bne.w	801012e <gps_ReadNMEA+0x1b2>
				i+=6;	/*Skip GPGGA,*/
 800fffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fffc:	3306      	adds	r3, #6
 800fffe:	633b      	str	r3, [r7, #48]	; 0x30
				for(int k=0;k<12;k++){
 8010000:	2300      	movs	r3, #0
 8010002:	62bb      	str	r3, [r7, #40]	; 0x28
 8010004:	e08e      	b.n	8010124 <gps_ReadNMEA+0x1a8>

					/*Read a part of the incomming data*/
					i++;	/*skip ','*/
 8010006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010008:	3301      	adds	r3, #1
 801000a:	633b      	str	r3, [r7, #48]	; 0x30
					begin_offset = i;
 801000c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801000e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					delta = 0;
 8010012:	2300      	movs	r3, #0
 8010014:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

					while((nmea_data[i] !='\0' )&&( nmea_data[i] != ',')){
 8010018:	e013      	b.n	8010042 <gps_ReadNMEA+0xc6>
						readed_data[delta] = nmea_data[i];
 801001a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801001c:	687a      	ldr	r2, [r7, #4]
 801001e:	441a      	add	r2, r3
 8010020:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010024:	7812      	ldrb	r2, [r2, #0]
 8010026:	3338      	adds	r3, #56	; 0x38
 8010028:	443b      	add	r3, r7
 801002a:	f803 2c2c 	strb.w	r2, [r3, #-44]
						i++;
 801002e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010030:	3301      	adds	r3, #1
 8010032:	633b      	str	r3, [r7, #48]	; 0x30
						delta = i - begin_offset;
 8010034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010036:	b2da      	uxtb	r2, r3
 8010038:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801003c:	1ad3      	subs	r3, r2, r3
 801003e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					while((nmea_data[i] !='\0' )&&( nmea_data[i] != ',')){
 8010042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010044:	687a      	ldr	r2, [r7, #4]
 8010046:	4413      	add	r3, r2
 8010048:	781b      	ldrb	r3, [r3, #0]
 801004a:	2b00      	cmp	r3, #0
 801004c:	d005      	beq.n	801005a <gps_ReadNMEA+0xde>
 801004e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010050:	687a      	ldr	r2, [r7, #4]
 8010052:	4413      	add	r3, r2
 8010054:	781b      	ldrb	r3, [r3, #0]
 8010056:	2b2c      	cmp	r3, #44	; 0x2c
 8010058:	d1df      	bne.n	801001a <gps_ReadNMEA+0x9e>
					}
					processing_offset++;
 801005a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801005e:	3301      	adds	r3, #1
 8010060:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					/*Process incomming data*/
					switch (processing_offset) {
 8010064:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010068:	3b01      	subs	r3, #1
 801006a:	2b0a      	cmp	r3, #10
 801006c:	d857      	bhi.n	801011e <gps_ReadNMEA+0x1a2>
 801006e:	a201      	add	r2, pc, #4	; (adr r2, 8010074 <gps_ReadNMEA+0xf8>)
 8010070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010074:	080100a1 	.word	0x080100a1
 8010078:	080100af 	.word	0x080100af
 801007c:	080100bd 	.word	0x080100bd
 8010080:	080100cb 	.word	0x080100cb
 8010084:	080100d9 	.word	0x080100d9
 8010088:	080100e7 	.word	0x080100e7
 801008c:	080100f5 	.word	0x080100f5
 8010090:	0801011f 	.word	0x0801011f
 8010094:	08010103 	.word	0x08010103
 8010098:	0801011f 	.word	0x0801011f
 801009c:	08010111 	.word	0x08010111
						/*UTC*/
						case 1:
							gps_ProcessUTC(readed_data, gps_struct);
 80100a0:	f107 030c 	add.w	r3, r7, #12
 80100a4:	6839      	ldr	r1, [r7, #0]
 80100a6:	4618      	mov	r0, r3
 80100a8:	f000 f850 	bl	801014c <gps_ProcessUTC>
							break;
 80100ac:	e037      	b.n	801011e <gps_ReadNMEA+0x1a2>

						/*LATITUDE*/
						case 2:
							gps_ProcessLatitude(readed_data, gps_struct);
 80100ae:	f107 030c 	add.w	r3, r7, #12
 80100b2:	6839      	ldr	r1, [r7, #0]
 80100b4:	4618      	mov	r0, r3
 80100b6:	f000 f887 	bl	80101c8 <gps_ProcessLatitude>
							break;
 80100ba:	e030      	b.n	801011e <gps_ReadNMEA+0x1a2>

						/*NORTH - SOUTH*/
						case 3:
							gps_ProcessNorthSouth(readed_data, gps_struct);
 80100bc:	f107 030c 	add.w	r3, r7, #12
 80100c0:	6839      	ldr	r1, [r7, #0]
 80100c2:	4618      	mov	r0, r3
 80100c4:	f000 f9fa 	bl	80104bc <gps_ProcessNorthSouth>
							break;
 80100c8:	e029      	b.n	801011e <gps_ReadNMEA+0x1a2>

						/*LONGITUDE*/
						case 4:
							gps_ProcessLongitude(readed_data, gps_struct);
 80100ca:	f107 030c 	add.w	r3, r7, #12
 80100ce:	6839      	ldr	r1, [r7, #0]
 80100d0:	4618      	mov	r0, r3
 80100d2:	f000 f935 	bl	8010340 <gps_ProcessLongitude>
							break;
 80100d6:	e022      	b.n	801011e <gps_ReadNMEA+0x1a2>

						/*EAST - WEST*/
						case 5:
							gps_ProcessEastWest(readed_data,gps_struct);
 80100d8:	f107 030c 	add.w	r3, r7, #12
 80100dc:	6839      	ldr	r1, [r7, #0]
 80100de:	4618      	mov	r0, r3
 80100e0:	f000 fa02 	bl	80104e8 <gps_ProcessEastWest>
							break;
 80100e4:	e01b      	b.n	801011e <gps_ReadNMEA+0x1a2>

						/*FIX QUALIFICATION*/
						case 6:
							gps_ProcessFix(readed_data, gps_struct);
 80100e6:	f107 030c 	add.w	r3, r7, #12
 80100ea:	6839      	ldr	r1, [r7, #0]
 80100ec:	4618      	mov	r0, r3
 80100ee:	f000 fa11 	bl	8010514 <gps_ProcessFix>
							break;
 80100f2:	e014      	b.n	801011e <gps_ReadNMEA+0x1a2>

						/*SATELLITES COUNT */
						case 7:
							gps_ProcessSatelliteCount(readed_data, gps_struct);
 80100f4:	f107 030c 	add.w	r3, r7, #12
 80100f8:	6839      	ldr	r1, [r7, #0]
 80100fa:	4618      	mov	r0, r3
 80100fc:	f000 fa28 	bl	8010550 <gps_ProcessSatelliteCount>
							break;
 8010100:	e00d      	b.n	801011e <gps_ReadNMEA+0x1a2>

						/*MSL ALTITUDE*/
						case 9:
							gps_ProcessAltitude(readed_data, gps_struct);
 8010102:	f107 030c 	add.w	r3, r7, #12
 8010106:	6839      	ldr	r1, [r7, #0]
 8010108:	4618      	mov	r0, r3
 801010a:	f000 fa3d 	bl	8010588 <gps_ProcessAltitude>
							break;
 801010e:	e006      	b.n	801011e <gps_ReadNMEA+0x1a2>

						/*ELLIPTICAL CORRECTION */
						case 11:
							gps_ProcessAltitudeCorre(readed_data, gps_struct);	//Can be use to process altitude correction as well
 8010110:	f107 030c 	add.w	r3, r7, #12
 8010114:	6839      	ldr	r1, [r7, #0]
 8010116:	4618      	mov	r0, r3
 8010118:	f000 fa92 	bl	8010640 <gps_ProcessAltitudeCorre>
							break;
 801011c:	bf00      	nop
				for(int k=0;k<12;k++){
 801011e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010120:	3301      	adds	r3, #1
 8010122:	62bb      	str	r3, [r7, #40]	; 0x28
 8010124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010126:	2b0b      	cmp	r3, #11
 8010128:	f77f af6d 	ble.w	8010006 <gps_ReadNMEA+0x8a>
					}
				}
				/*After the first $GPGGA read we need to quit the current reading process*/
				break;
 801012c:	e008      	b.n	8010140 <gps_ReadNMEA+0x1c4>
	for(int i=0;i<BUFFER_SIZE_NMEA;i++){
 801012e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010130:	3301      	adds	r3, #1
 8010132:	633b      	str	r3, [r7, #48]	; 0x30
 8010134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010136:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801013a:	f6ff af32 	blt.w	800ffa2 <gps_ReadNMEA+0x26>

			}
		}
	}
}
 801013e:	bf00      	nop
 8010140:	bf00      	nop
 8010142:	3738      	adds	r7, #56	; 0x38
 8010144:	46bd      	mov	sp, r7
 8010146:	bd80      	pop	{r7, pc}
 8010148:	0801c900 	.word	0x0801c900

0801014c <gps_ProcessUTC>:

void gps_ProcessUTC(uint8_t utc_incomming[],GPS_t *gps_struct){
 801014c:	b480      	push	{r7}
 801014e:	b083      	sub	sp, #12
 8010150:	af00      	add	r7, sp, #0
 8010152:	6078      	str	r0, [r7, #4]
 8010154:	6039      	str	r1, [r7, #0]
	gps_struct->utc_time.hour = ((utc_incomming[0] - '0')*10) + (utc_incomming[1] - '0');
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	781b      	ldrb	r3, [r3, #0]
 801015a:	461a      	mov	r2, r3
 801015c:	0092      	lsls	r2, r2, #2
 801015e:	4413      	add	r3, r2
 8010160:	005b      	lsls	r3, r3, #1
 8010162:	b2da      	uxtb	r2, r3
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	3301      	adds	r3, #1
 8010168:	781b      	ldrb	r3, [r3, #0]
 801016a:	4413      	add	r3, r2
 801016c:	b2db      	uxtb	r3, r3
 801016e:	3b10      	subs	r3, #16
 8010170:	b2da      	uxtb	r2, r3
 8010172:	683b      	ldr	r3, [r7, #0]
 8010174:	761a      	strb	r2, [r3, #24]
	gps_struct->utc_time.minute = ((utc_incomming[2] - '0')*10) + (utc_incomming[3] - '0');
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	3302      	adds	r3, #2
 801017a:	781b      	ldrb	r3, [r3, #0]
 801017c:	461a      	mov	r2, r3
 801017e:	0092      	lsls	r2, r2, #2
 8010180:	4413      	add	r3, r2
 8010182:	005b      	lsls	r3, r3, #1
 8010184:	b2da      	uxtb	r2, r3
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	3303      	adds	r3, #3
 801018a:	781b      	ldrb	r3, [r3, #0]
 801018c:	4413      	add	r3, r2
 801018e:	b2db      	uxtb	r3, r3
 8010190:	3b10      	subs	r3, #16
 8010192:	b2da      	uxtb	r2, r3
 8010194:	683b      	ldr	r3, [r7, #0]
 8010196:	765a      	strb	r2, [r3, #25]
	gps_struct->utc_time.second = ((utc_incomming[4] - '0')*10) + (utc_incomming[5] - '0');
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	3304      	adds	r3, #4
 801019c:	781b      	ldrb	r3, [r3, #0]
 801019e:	461a      	mov	r2, r3
 80101a0:	0092      	lsls	r2, r2, #2
 80101a2:	4413      	add	r3, r2
 80101a4:	005b      	lsls	r3, r3, #1
 80101a6:	b2da      	uxtb	r2, r3
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	3305      	adds	r3, #5
 80101ac:	781b      	ldrb	r3, [r3, #0]
 80101ae:	4413      	add	r3, r2
 80101b0:	b2db      	uxtb	r3, r3
 80101b2:	3b10      	subs	r3, #16
 80101b4:	b2da      	uxtb	r2, r3
 80101b6:	683b      	ldr	r3, [r7, #0]
 80101b8:	769a      	strb	r2, [r3, #26]
}
 80101ba:	bf00      	nop
 80101bc:	370c      	adds	r7, #12
 80101be:	46bd      	mov	sp, r7
 80101c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c4:	4770      	bx	lr
	...

080101c8 <gps_ProcessLatitude>:

void gps_ProcessLatitude(uint8_t utc_incomming[],GPS_t *gps_struct){
 80101c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80101cc:	b084      	sub	sp, #16
 80101ce:	af00      	add	r7, sp, #0
 80101d0:	6078      	str	r0, [r7, #4]
 80101d2:	6039      	str	r1, [r7, #0]

	int8_t degree_DMm = 0;
 80101d4:	2300      	movs	r3, #0
 80101d6:	73fb      	strb	r3, [r7, #15]
	float minute_DMm = 0;
 80101d8:	f04f 0300 	mov.w	r3, #0
 80101dc:	60bb      	str	r3, [r7, #8]

	/*Add reader degree*/
	degree_DMm = ((utc_incomming[0] - '0')*10) + (utc_incomming[1] - '0');
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	781b      	ldrb	r3, [r3, #0]
 80101e2:	3b30      	subs	r3, #48	; 0x30
 80101e4:	b2db      	uxtb	r3, r3
 80101e6:	461a      	mov	r2, r3
 80101e8:	0092      	lsls	r2, r2, #2
 80101ea:	4413      	add	r3, r2
 80101ec:	005b      	lsls	r3, r3, #1
 80101ee:	b2da      	uxtb	r2, r3
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	3301      	adds	r3, #1
 80101f4:	781b      	ldrb	r3, [r3, #0]
 80101f6:	4413      	add	r3, r2
 80101f8:	b2db      	uxtb	r3, r3
 80101fa:	3b30      	subs	r3, #48	; 0x30
 80101fc:	b2db      	uxtb	r3, r3
 80101fe:	73fb      	strb	r3, [r7, #15]
	/*Add first part of minutes*/
	minute_DMm = ((utc_incomming[2] - '0')*10) + (utc_incomming[3] - '0');
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	3302      	adds	r3, #2
 8010204:	781b      	ldrb	r3, [r3, #0]
 8010206:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801020a:	4613      	mov	r3, r2
 801020c:	009b      	lsls	r3, r3, #2
 801020e:	4413      	add	r3, r2
 8010210:	005b      	lsls	r3, r3, #1
 8010212:	461a      	mov	r2, r3
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	3303      	adds	r3, #3
 8010218:	781b      	ldrb	r3, [r3, #0]
 801021a:	3b30      	subs	r3, #48	; 0x30
 801021c:	4413      	add	r3, r2
 801021e:	ee07 3a90 	vmov	s15, r3
 8010222:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010226:	edc7 7a02 	vstr	s15, [r7, #8]
	minute_DMm += ((utc_incomming[5] - '0')*0.1) + ((utc_incomming[6] - '0')*0.01) + ((utc_incomming[7] - '0')*0.001) + ((utc_incomming[8] - '0')*0.0001);
 801022a:	68b8      	ldr	r0, [r7, #8]
 801022c:	f7fd fd6e 	bl	800dd0c <__aeabi_f2d>
 8010230:	4604      	mov	r4, r0
 8010232:	460d      	mov	r5, r1
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	3305      	adds	r3, #5
 8010238:	781b      	ldrb	r3, [r3, #0]
 801023a:	3b30      	subs	r3, #48	; 0x30
 801023c:	4618      	mov	r0, r3
 801023e:	f7fd fd53 	bl	800dce8 <__aeabi_i2d>
 8010242:	a336      	add	r3, pc, #216	; (adr r3, 801031c <gps_ProcessLatitude+0x154>)
 8010244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010248:	f7fd fdb8 	bl	800ddbc <__aeabi_dmul>
 801024c:	4602      	mov	r2, r0
 801024e:	460b      	mov	r3, r1
 8010250:	4690      	mov	r8, r2
 8010252:	4699      	mov	r9, r3
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	3306      	adds	r3, #6
 8010258:	781b      	ldrb	r3, [r3, #0]
 801025a:	3b30      	subs	r3, #48	; 0x30
 801025c:	4618      	mov	r0, r3
 801025e:	f7fd fd43 	bl	800dce8 <__aeabi_i2d>
 8010262:	a330      	add	r3, pc, #192	; (adr r3, 8010324 <gps_ProcessLatitude+0x15c>)
 8010264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010268:	f7fd fda8 	bl	800ddbc <__aeabi_dmul>
 801026c:	4602      	mov	r2, r0
 801026e:	460b      	mov	r3, r1
 8010270:	4640      	mov	r0, r8
 8010272:	4649      	mov	r1, r9
 8010274:	f7fd fbec 	bl	800da50 <__adddf3>
 8010278:	4602      	mov	r2, r0
 801027a:	460b      	mov	r3, r1
 801027c:	4690      	mov	r8, r2
 801027e:	4699      	mov	r9, r3
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	3307      	adds	r3, #7
 8010284:	781b      	ldrb	r3, [r3, #0]
 8010286:	3b30      	subs	r3, #48	; 0x30
 8010288:	4618      	mov	r0, r3
 801028a:	f7fd fd2d 	bl	800dce8 <__aeabi_i2d>
 801028e:	a327      	add	r3, pc, #156	; (adr r3, 801032c <gps_ProcessLatitude+0x164>)
 8010290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010294:	f7fd fd92 	bl	800ddbc <__aeabi_dmul>
 8010298:	4602      	mov	r2, r0
 801029a:	460b      	mov	r3, r1
 801029c:	4640      	mov	r0, r8
 801029e:	4649      	mov	r1, r9
 80102a0:	f7fd fbd6 	bl	800da50 <__adddf3>
 80102a4:	4602      	mov	r2, r0
 80102a6:	460b      	mov	r3, r1
 80102a8:	4690      	mov	r8, r2
 80102aa:	4699      	mov	r9, r3
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	3308      	adds	r3, #8
 80102b0:	781b      	ldrb	r3, [r3, #0]
 80102b2:	3b30      	subs	r3, #48	; 0x30
 80102b4:	4618      	mov	r0, r3
 80102b6:	f7fd fd17 	bl	800dce8 <__aeabi_i2d>
 80102ba:	a31e      	add	r3, pc, #120	; (adr r3, 8010334 <gps_ProcessLatitude+0x16c>)
 80102bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102c0:	f7fd fd7c 	bl	800ddbc <__aeabi_dmul>
 80102c4:	4602      	mov	r2, r0
 80102c6:	460b      	mov	r3, r1
 80102c8:	4640      	mov	r0, r8
 80102ca:	4649      	mov	r1, r9
 80102cc:	f7fd fbc0 	bl	800da50 <__adddf3>
 80102d0:	4602      	mov	r2, r0
 80102d2:	460b      	mov	r3, r1
 80102d4:	4620      	mov	r0, r4
 80102d6:	4629      	mov	r1, r5
 80102d8:	f7fd fbba 	bl	800da50 <__adddf3>
 80102dc:	4602      	mov	r2, r0
 80102de:	460b      	mov	r3, r1
 80102e0:	4610      	mov	r0, r2
 80102e2:	4619      	mov	r1, r3
 80102e4:	f7fe f81a 	bl	800e31c <__aeabi_d2f>
 80102e8:	4603      	mov	r3, r0
 80102ea:	60bb      	str	r3, [r7, #8]

	gps_struct->latitude_deg_s = (degree_DMm + (minute_DMm/60));
 80102ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80102f0:	ee07 3a90 	vmov	s15, r3
 80102f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80102f8:	edd7 6a02 	vldr	s13, [r7, #8]
 80102fc:	ed9f 6a06 	vldr	s12, [pc, #24]	; 8010318 <gps_ProcessLatitude+0x150>
 8010300:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8010304:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010308:	683b      	ldr	r3, [r7, #0]
 801030a:	edc3 7a00 	vstr	s15, [r3]
}
 801030e:	bf00      	nop
 8010310:	3710      	adds	r7, #16
 8010312:	46bd      	mov	sp, r7
 8010314:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8010318:	42700000 	.word	0x42700000
 801031c:	9999999a 	.word	0x9999999a
 8010320:	3fb99999 	.word	0x3fb99999
 8010324:	47ae147b 	.word	0x47ae147b
 8010328:	3f847ae1 	.word	0x3f847ae1
 801032c:	d2f1a9fc 	.word	0xd2f1a9fc
 8010330:	3f50624d 	.word	0x3f50624d
 8010334:	eb1c432d 	.word	0xeb1c432d
 8010338:	3f1a36e2 	.word	0x3f1a36e2
 801033c:	00000000 	.word	0x00000000

08010340 <gps_ProcessLongitude>:

void gps_ProcessLongitude(uint8_t utc_incomming[],GPS_t *gps_struct){
 8010340:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8010344:	b084      	sub	sp, #16
 8010346:	af00      	add	r7, sp, #0
 8010348:	6078      	str	r0, [r7, #4]
 801034a:	6039      	str	r1, [r7, #0]

	int8_t degree_DMm = 0;
 801034c:	2300      	movs	r3, #0
 801034e:	73fb      	strb	r3, [r7, #15]
	float minute_DMm = 0;
 8010350:	f04f 0300 	mov.w	r3, #0
 8010354:	60bb      	str	r3, [r7, #8]

	/*Add reader degree*/
	degree_DMm = ((utc_incomming[1] - '0')*10) + (utc_incomming[2] - '0');
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	3301      	adds	r3, #1
 801035a:	781b      	ldrb	r3, [r3, #0]
 801035c:	3b30      	subs	r3, #48	; 0x30
 801035e:	b2db      	uxtb	r3, r3
 8010360:	461a      	mov	r2, r3
 8010362:	0092      	lsls	r2, r2, #2
 8010364:	4413      	add	r3, r2
 8010366:	005b      	lsls	r3, r3, #1
 8010368:	b2da      	uxtb	r2, r3
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	3302      	adds	r3, #2
 801036e:	781b      	ldrb	r3, [r3, #0]
 8010370:	4413      	add	r3, r2
 8010372:	b2db      	uxtb	r3, r3
 8010374:	3b30      	subs	r3, #48	; 0x30
 8010376:	b2db      	uxtb	r3, r3
 8010378:	73fb      	strb	r3, [r7, #15]
	/*Add first part of minutes*/
	minute_DMm = ((utc_incomming[3] - '0')*10) + (utc_incomming[4] - '0');
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	3303      	adds	r3, #3
 801037e:	781b      	ldrb	r3, [r3, #0]
 8010380:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8010384:	4613      	mov	r3, r2
 8010386:	009b      	lsls	r3, r3, #2
 8010388:	4413      	add	r3, r2
 801038a:	005b      	lsls	r3, r3, #1
 801038c:	461a      	mov	r2, r3
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	3304      	adds	r3, #4
 8010392:	781b      	ldrb	r3, [r3, #0]
 8010394:	3b30      	subs	r3, #48	; 0x30
 8010396:	4413      	add	r3, r2
 8010398:	ee07 3a90 	vmov	s15, r3
 801039c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80103a0:	edc7 7a02 	vstr	s15, [r7, #8]
	minute_DMm += ((utc_incomming[5] - '0')*0.1) + ((utc_incomming[6] - '0')*0.01) + ((utc_incomming[7] - '0')*0.001) + ((utc_incomming[8] - '0')*0.0001);
 80103a4:	68b8      	ldr	r0, [r7, #8]
 80103a6:	f7fd fcb1 	bl	800dd0c <__aeabi_f2d>
 80103aa:	4604      	mov	r4, r0
 80103ac:	460d      	mov	r5, r1
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	3305      	adds	r3, #5
 80103b2:	781b      	ldrb	r3, [r3, #0]
 80103b4:	3b30      	subs	r3, #48	; 0x30
 80103b6:	4618      	mov	r0, r3
 80103b8:	f7fd fc96 	bl	800dce8 <__aeabi_i2d>
 80103bc:	a337      	add	r3, pc, #220	; (adr r3, 801049c <gps_ProcessLongitude+0x15c>)
 80103be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103c2:	f7fd fcfb 	bl	800ddbc <__aeabi_dmul>
 80103c6:	4602      	mov	r2, r0
 80103c8:	460b      	mov	r3, r1
 80103ca:	4690      	mov	r8, r2
 80103cc:	4699      	mov	r9, r3
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	3306      	adds	r3, #6
 80103d2:	781b      	ldrb	r3, [r3, #0]
 80103d4:	3b30      	subs	r3, #48	; 0x30
 80103d6:	4618      	mov	r0, r3
 80103d8:	f7fd fc86 	bl	800dce8 <__aeabi_i2d>
 80103dc:	a331      	add	r3, pc, #196	; (adr r3, 80104a4 <gps_ProcessLongitude+0x164>)
 80103de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103e2:	f7fd fceb 	bl	800ddbc <__aeabi_dmul>
 80103e6:	4602      	mov	r2, r0
 80103e8:	460b      	mov	r3, r1
 80103ea:	4640      	mov	r0, r8
 80103ec:	4649      	mov	r1, r9
 80103ee:	f7fd fb2f 	bl	800da50 <__adddf3>
 80103f2:	4602      	mov	r2, r0
 80103f4:	460b      	mov	r3, r1
 80103f6:	4690      	mov	r8, r2
 80103f8:	4699      	mov	r9, r3
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	3307      	adds	r3, #7
 80103fe:	781b      	ldrb	r3, [r3, #0]
 8010400:	3b30      	subs	r3, #48	; 0x30
 8010402:	4618      	mov	r0, r3
 8010404:	f7fd fc70 	bl	800dce8 <__aeabi_i2d>
 8010408:	a328      	add	r3, pc, #160	; (adr r3, 80104ac <gps_ProcessLongitude+0x16c>)
 801040a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801040e:	f7fd fcd5 	bl	800ddbc <__aeabi_dmul>
 8010412:	4602      	mov	r2, r0
 8010414:	460b      	mov	r3, r1
 8010416:	4640      	mov	r0, r8
 8010418:	4649      	mov	r1, r9
 801041a:	f7fd fb19 	bl	800da50 <__adddf3>
 801041e:	4602      	mov	r2, r0
 8010420:	460b      	mov	r3, r1
 8010422:	4690      	mov	r8, r2
 8010424:	4699      	mov	r9, r3
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	3308      	adds	r3, #8
 801042a:	781b      	ldrb	r3, [r3, #0]
 801042c:	3b30      	subs	r3, #48	; 0x30
 801042e:	4618      	mov	r0, r3
 8010430:	f7fd fc5a 	bl	800dce8 <__aeabi_i2d>
 8010434:	a31f      	add	r3, pc, #124	; (adr r3, 80104b4 <gps_ProcessLongitude+0x174>)
 8010436:	e9d3 2300 	ldrd	r2, r3, [r3]
 801043a:	f7fd fcbf 	bl	800ddbc <__aeabi_dmul>
 801043e:	4602      	mov	r2, r0
 8010440:	460b      	mov	r3, r1
 8010442:	4640      	mov	r0, r8
 8010444:	4649      	mov	r1, r9
 8010446:	f7fd fb03 	bl	800da50 <__adddf3>
 801044a:	4602      	mov	r2, r0
 801044c:	460b      	mov	r3, r1
 801044e:	4620      	mov	r0, r4
 8010450:	4629      	mov	r1, r5
 8010452:	f7fd fafd 	bl	800da50 <__adddf3>
 8010456:	4602      	mov	r2, r0
 8010458:	460b      	mov	r3, r1
 801045a:	4610      	mov	r0, r2
 801045c:	4619      	mov	r1, r3
 801045e:	f7fd ff5d 	bl	800e31c <__aeabi_d2f>
 8010462:	4603      	mov	r3, r0
 8010464:	60bb      	str	r3, [r7, #8]

	gps_struct->longitude_deg_s = (degree_DMm + (minute_DMm/60));
 8010466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801046a:	ee07 3a90 	vmov	s15, r3
 801046e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010472:	edd7 6a02 	vldr	s13, [r7, #8]
 8010476:	ed9f 6a08 	vldr	s12, [pc, #32]	; 8010498 <gps_ProcessLongitude+0x158>
 801047a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801047e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010482:	683b      	ldr	r3, [r7, #0]
 8010484:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8010488:	bf00      	nop
 801048a:	3710      	adds	r7, #16
 801048c:	46bd      	mov	sp, r7
 801048e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8010492:	bf00      	nop
 8010494:	f3af 8000 	nop.w
 8010498:	42700000 	.word	0x42700000
 801049c:	9999999a 	.word	0x9999999a
 80104a0:	3fb99999 	.word	0x3fb99999
 80104a4:	47ae147b 	.word	0x47ae147b
 80104a8:	3f847ae1 	.word	0x3f847ae1
 80104ac:	d2f1a9fc 	.word	0xd2f1a9fc
 80104b0:	3f50624d 	.word	0x3f50624d
 80104b4:	eb1c432d 	.word	0xeb1c432d
 80104b8:	3f1a36e2 	.word	0x3f1a36e2

080104bc <gps_ProcessNorthSouth>:

void gps_ProcessNorthSouth(uint8_t utc_incomming[],GPS_t *gps_struct){
 80104bc:	b480      	push	{r7}
 80104be:	b083      	sub	sp, #12
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	6078      	str	r0, [r7, #4]
 80104c4:	6039      	str	r1, [r7, #0]

	if(utc_incomming[0] == 'N'){
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	781b      	ldrb	r3, [r3, #0]
 80104ca:	2b4e      	cmp	r3, #78	; 0x4e
 80104cc:	d103      	bne.n	80104d6 <gps_ProcessNorthSouth+0x1a>
		gps_struct->north_south = north;
 80104ce:	683b      	ldr	r3, [r7, #0]
 80104d0:	2200      	movs	r2, #0
 80104d2:	741a      	strb	r2, [r3, #16]
	}
	else{
		gps_struct->north_south = south;
	}
}
 80104d4:	e002      	b.n	80104dc <gps_ProcessNorthSouth+0x20>
		gps_struct->north_south = south;
 80104d6:	683b      	ldr	r3, [r7, #0]
 80104d8:	2201      	movs	r2, #1
 80104da:	741a      	strb	r2, [r3, #16]
}
 80104dc:	bf00      	nop
 80104de:	370c      	adds	r7, #12
 80104e0:	46bd      	mov	sp, r7
 80104e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e6:	4770      	bx	lr

080104e8 <gps_ProcessEastWest>:

void gps_ProcessEastWest(uint8_t utc_incomming[],GPS_t *gps_struct){
 80104e8:	b480      	push	{r7}
 80104ea:	b083      	sub	sp, #12
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
 80104f0:	6039      	str	r1, [r7, #0]

	if(utc_incomming[0] == 'E'){
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	781b      	ldrb	r3, [r3, #0]
 80104f6:	2b45      	cmp	r3, #69	; 0x45
 80104f8:	d103      	bne.n	8010502 <gps_ProcessEastWest+0x1a>
		gps_struct->east_west = east;
 80104fa:	683b      	ldr	r3, [r7, #0]
 80104fc:	2202      	movs	r2, #2
 80104fe:	745a      	strb	r2, [r3, #17]
	}
	else{
		gps_struct->east_west = west;
	}
}
 8010500:	e002      	b.n	8010508 <gps_ProcessEastWest+0x20>
		gps_struct->east_west = west;
 8010502:	683b      	ldr	r3, [r7, #0]
 8010504:	2203      	movs	r2, #3
 8010506:	745a      	strb	r2, [r3, #17]
}
 8010508:	bf00      	nop
 801050a:	370c      	adds	r7, #12
 801050c:	46bd      	mov	sp, r7
 801050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010512:	4770      	bx	lr

08010514 <gps_ProcessFix>:

void gps_ProcessFix(uint8_t utc_incomming[],GPS_t *gps_struct){
 8010514:	b480      	push	{r7}
 8010516:	b083      	sub	sp, #12
 8010518:	af00      	add	r7, sp, #0
 801051a:	6078      	str	r0, [r7, #4]
 801051c:	6039      	str	r1, [r7, #0]

	if(utc_incomming[0] == '1'){
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	781b      	ldrb	r3, [r3, #0]
 8010522:	2b31      	cmp	r3, #49	; 0x31
 8010524:	d103      	bne.n	801052e <gps_ProcessFix+0x1a>
		gps_struct->qualification = fix_gps;
 8010526:	683b      	ldr	r3, [r7, #0]
 8010528:	2201      	movs	r2, #1
 801052a:	771a      	strb	r2, [r3, #28]
		}
		else{
			gps_struct->qualification = unvalid;
		}
	}
}
 801052c:	e00a      	b.n	8010544 <gps_ProcessFix+0x30>
		if(utc_incomming[0] == '2'){
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	781b      	ldrb	r3, [r3, #0]
 8010532:	2b32      	cmp	r3, #50	; 0x32
 8010534:	d103      	bne.n	801053e <gps_ProcessFix+0x2a>
			gps_struct->qualification = fix_dgps;
 8010536:	683b      	ldr	r3, [r7, #0]
 8010538:	2202      	movs	r2, #2
 801053a:	771a      	strb	r2, [r3, #28]
}
 801053c:	e002      	b.n	8010544 <gps_ProcessFix+0x30>
			gps_struct->qualification = unvalid;
 801053e:	683b      	ldr	r3, [r7, #0]
 8010540:	2200      	movs	r2, #0
 8010542:	771a      	strb	r2, [r3, #28]
}
 8010544:	bf00      	nop
 8010546:	370c      	adds	r7, #12
 8010548:	46bd      	mov	sp, r7
 801054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801054e:	4770      	bx	lr

08010550 <gps_ProcessSatelliteCount>:

void gps_ProcessSatelliteCount(uint8_t utc_incomming[],GPS_t *gps_struct){
 8010550:	b480      	push	{r7}
 8010552:	b083      	sub	sp, #12
 8010554:	af00      	add	r7, sp, #0
 8010556:	6078      	str	r0, [r7, #4]
 8010558:	6039      	str	r1, [r7, #0]

	gps_struct->satelite_number = ((utc_incomming[0] - '0')*10) + (utc_incomming[1] - '0');
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	781b      	ldrb	r3, [r3, #0]
 801055e:	461a      	mov	r2, r3
 8010560:	0092      	lsls	r2, r2, #2
 8010562:	4413      	add	r3, r2
 8010564:	005b      	lsls	r3, r3, #1
 8010566:	b2da      	uxtb	r2, r3
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	3301      	adds	r3, #1
 801056c:	781b      	ldrb	r3, [r3, #0]
 801056e:	4413      	add	r3, r2
 8010570:	b2db      	uxtb	r3, r3
 8010572:	3b10      	subs	r3, #16
 8010574:	b2da      	uxtb	r2, r3
 8010576:	683b      	ldr	r3, [r7, #0]
 8010578:	76da      	strb	r2, [r3, #27]
}
 801057a:	bf00      	nop
 801057c:	370c      	adds	r7, #12
 801057e:	46bd      	mov	sp, r7
 8010580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010584:	4770      	bx	lr
	...

08010588 <gps_ProcessAltitude>:

void gps_ProcessAltitude(uint8_t utc_incomming[],GPS_t *gps_struct){
 8010588:	b580      	push	{r7, lr}
 801058a:	b086      	sub	sp, #24
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
 8010590:	6039      	str	r1, [r7, #0]

	float altitude = 0;
 8010592:	f04f 0300 	mov.w	r3, #0
 8010596:	617b      	str	r3, [r7, #20]
	uint8_t dot_find = 0;
 8010598:	2300      	movs	r3, #0
 801059a:	74fb      	strb	r3, [r7, #19]
	for(int i=0;i<sizeof(utc_incomming);i++){
 801059c:	2300      	movs	r3, #0
 801059e:	60fb      	str	r3, [r7, #12]
 80105a0:	e03f      	b.n	8010622 <gps_ProcessAltitude+0x9a>

		if(utc_incomming[i] == '.'){
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	687a      	ldr	r2, [r7, #4]
 80105a6:	4413      	add	r3, r2
 80105a8:	781b      	ldrb	r3, [r3, #0]
 80105aa:	2b2e      	cmp	r3, #46	; 0x2e
 80105ac:	d104      	bne.n	80105b8 <gps_ProcessAltitude+0x30>
			dot_find = 1;
 80105ae:	2301      	movs	r3, #1
 80105b0:	74fb      	strb	r3, [r7, #19]
			i++;
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	3301      	adds	r3, #1
 80105b6:	60fb      	str	r3, [r7, #12]
		}

		if(dot_find){
 80105b8:	7cfb      	ldrb	r3, [r7, #19]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d01b      	beq.n	80105f6 <gps_ProcessAltitude+0x6e>
			altitude +=  (float)((utc_incomming[i] - '0')*0.1);
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	687a      	ldr	r2, [r7, #4]
 80105c2:	4413      	add	r3, r2
 80105c4:	781b      	ldrb	r3, [r3, #0]
 80105c6:	3b30      	subs	r3, #48	; 0x30
 80105c8:	4618      	mov	r0, r3
 80105ca:	f7fd fb8d 	bl	800dce8 <__aeabi_i2d>
 80105ce:	a31a      	add	r3, pc, #104	; (adr r3, 8010638 <gps_ProcessAltitude+0xb0>)
 80105d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105d4:	f7fd fbf2 	bl	800ddbc <__aeabi_dmul>
 80105d8:	4602      	mov	r2, r0
 80105da:	460b      	mov	r3, r1
 80105dc:	4610      	mov	r0, r2
 80105de:	4619      	mov	r1, r3
 80105e0:	f7fd fe9c 	bl	800e31c <__aeabi_d2f>
 80105e4:	ee07 0a10 	vmov	s14, r0
 80105e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80105ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80105f0:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 80105f4:	e018      	b.n	8010628 <gps_ProcessAltitude+0xa0>

		}
		else{
			altitude = (altitude*10) + (utc_incomming[i] - '0');
 80105f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80105fa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80105fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	687a      	ldr	r2, [r7, #4]
 8010606:	4413      	add	r3, r2
 8010608:	781b      	ldrb	r3, [r3, #0]
 801060a:	3b30      	subs	r3, #48	; 0x30
 801060c:	ee07 3a90 	vmov	s15, r3
 8010610:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010614:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010618:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i=0;i<sizeof(utc_incomming);i++){
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	3301      	adds	r3, #1
 8010620:	60fb      	str	r3, [r7, #12]
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	2b03      	cmp	r3, #3
 8010626:	d9bc      	bls.n	80105a2 <gps_ProcessAltitude+0x1a>
		}

	}
	gps_struct->altitude_deg_s = altitude;
 8010628:	683b      	ldr	r3, [r7, #0]
 801062a:	697a      	ldr	r2, [r7, #20]
 801062c:	609a      	str	r2, [r3, #8]
}
 801062e:	bf00      	nop
 8010630:	3718      	adds	r7, #24
 8010632:	46bd      	mov	sp, r7
 8010634:	bd80      	pop	{r7, pc}
 8010636:	bf00      	nop
 8010638:	9999999a 	.word	0x9999999a
 801063c:	3fb99999 	.word	0x3fb99999

08010640 <gps_ProcessAltitudeCorre>:

void gps_ProcessAltitudeCorre(uint8_t utc_incomming[],GPS_t *gps_struct){
 8010640:	b580      	push	{r7, lr}
 8010642:	b086      	sub	sp, #24
 8010644:	af00      	add	r7, sp, #0
 8010646:	6078      	str	r0, [r7, #4]
 8010648:	6039      	str	r1, [r7, #0]

	float altitude = 0;
 801064a:	f04f 0300 	mov.w	r3, #0
 801064e:	617b      	str	r3, [r7, #20]
	uint8_t dot_find = 0;
 8010650:	2300      	movs	r3, #0
 8010652:	74fb      	strb	r3, [r7, #19]
	for(int i=0;i<sizeof(utc_incomming);i++){
 8010654:	2300      	movs	r3, #0
 8010656:	60fb      	str	r3, [r7, #12]
 8010658:	e03f      	b.n	80106da <gps_ProcessAltitudeCorre+0x9a>

		if(utc_incomming[i] == '.'){
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	687a      	ldr	r2, [r7, #4]
 801065e:	4413      	add	r3, r2
 8010660:	781b      	ldrb	r3, [r3, #0]
 8010662:	2b2e      	cmp	r3, #46	; 0x2e
 8010664:	d104      	bne.n	8010670 <gps_ProcessAltitudeCorre+0x30>
			dot_find = 1;
 8010666:	2301      	movs	r3, #1
 8010668:	74fb      	strb	r3, [r7, #19]
			i++;
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	3301      	adds	r3, #1
 801066e:	60fb      	str	r3, [r7, #12]
		}

		if(dot_find){
 8010670:	7cfb      	ldrb	r3, [r7, #19]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d01b      	beq.n	80106ae <gps_ProcessAltitudeCorre+0x6e>
			altitude +=  (float)((utc_incomming[i] - '0')*0.1);
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	687a      	ldr	r2, [r7, #4]
 801067a:	4413      	add	r3, r2
 801067c:	781b      	ldrb	r3, [r3, #0]
 801067e:	3b30      	subs	r3, #48	; 0x30
 8010680:	4618      	mov	r0, r3
 8010682:	f7fd fb31 	bl	800dce8 <__aeabi_i2d>
 8010686:	a31a      	add	r3, pc, #104	; (adr r3, 80106f0 <gps_ProcessAltitudeCorre+0xb0>)
 8010688:	e9d3 2300 	ldrd	r2, r3, [r3]
 801068c:	f7fd fb96 	bl	800ddbc <__aeabi_dmul>
 8010690:	4602      	mov	r2, r0
 8010692:	460b      	mov	r3, r1
 8010694:	4610      	mov	r0, r2
 8010696:	4619      	mov	r1, r3
 8010698:	f7fd fe40 	bl	800e31c <__aeabi_d2f>
 801069c:	ee07 0a10 	vmov	s14, r0
 80106a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80106a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80106a8:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 80106ac:	e018      	b.n	80106e0 <gps_ProcessAltitudeCorre+0xa0>

		}
		else{
			altitude = (altitude*10) + (utc_incomming[i] - '0');
 80106ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80106b2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80106b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	687a      	ldr	r2, [r7, #4]
 80106be:	4413      	add	r3, r2
 80106c0:	781b      	ldrb	r3, [r3, #0]
 80106c2:	3b30      	subs	r3, #48	; 0x30
 80106c4:	ee07 3a90 	vmov	s15, r3
 80106c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80106cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80106d0:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i=0;i<sizeof(utc_incomming);i++){
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	3301      	adds	r3, #1
 80106d8:	60fb      	str	r3, [r7, #12]
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	2b03      	cmp	r3, #3
 80106de:	d9bc      	bls.n	801065a <gps_ProcessAltitudeCorre+0x1a>
		}

	}
	gps_struct->altitude_correction = altitude;
 80106e0:	683b      	ldr	r3, [r7, #0]
 80106e2:	697a      	ldr	r2, [r7, #20]
 80106e4:	60da      	str	r2, [r3, #12]
}
 80106e6:	bf00      	nop
 80106e8:	3718      	adds	r7, #24
 80106ea:	46bd      	mov	sp, r7
 80106ec:	bd80      	pop	{r7, pc}
 80106ee:	bf00      	nop
 80106f0:	9999999a 	.word	0x9999999a
 80106f4:	3fb99999 	.word	0x3fb99999

080106f8 <WIOE5_Init>:
 *    @huart is a pointer on uart handdle
 *
 * OUTPUT:
 * 	  @res is an integer use to count the number of error reported during initialisation
 * */
uint8_t WIOE5_Init(UART_HandleTypeDef *huart){
 80106f8:	b580      	push	{r7, lr}
 80106fa:	b0a0      	sub	sp, #128	; 0x80
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]

	uint8_t res = 0;
 8010700:	2300      	movs	r3, #0
 8010702:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint8_t string[100] = {0};
 8010706:	2300      	movs	r3, #0
 8010708:	61bb      	str	r3, [r7, #24]
 801070a:	f107 031c 	add.w	r3, r7, #28
 801070e:	2260      	movs	r2, #96	; 0x60
 8010710:	2100      	movs	r1, #0
 8010712:	4618      	mov	r0, r3
 8010714:	f00b f80c 	bl	801b730 <memset>
	uint8_t firmware_version[10] = {0};
 8010718:	2300      	movs	r3, #0
 801071a:	60fb      	str	r3, [r7, #12]
 801071c:	f107 0310 	add.w	r3, r7, #16
 8010720:	2200      	movs	r2, #0
 8010722:	601a      	str	r2, [r3, #0]
 8010724:	809a      	strh	r2, [r3, #4]

	/* Reset WIOE5 configuration */
	WIOE5_FactoryReset(huart);
 8010726:	6878      	ldr	r0, [r7, #4]
 8010728:	f000 fa46 	bl	8010bb8 <WIOE5_FactoryReset>

	WIOE5_SendString(huart, "ABCDEF", 6);
 801072c:	2206      	movs	r2, #6
 801072e:	491e      	ldr	r1, [pc, #120]	; (80107a8 <WIOE5_Init+0xb0>)
 8010730:	6878      	ldr	r0, [r7, #4]
 8010732:	f000 fa83 	bl	8010c3c <WIOE5_SendString>


	/*Check for correct wiring*/
	HAL_UART_Transmit(huart, "AT\r\n", 8, 100);
 8010736:	2364      	movs	r3, #100	; 0x64
 8010738:	2208      	movs	r2, #8
 801073a:	491c      	ldr	r1, [pc, #112]	; (80107ac <WIOE5_Init+0xb4>)
 801073c:	6878      	ldr	r0, [r7, #4]
 801073e:	f006 fd03 	bl	8017148 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, string, 100,1000);
 8010742:	f107 0118 	add.w	r1, r7, #24
 8010746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801074a:	2264      	movs	r2, #100	; 0x64
 801074c:	6878      	ldr	r0, [r7, #4]
 801074e:	f006 fd91 	bl	8017274 <HAL_UART_Receive>
	if(strcmp(string,"+AT: OK\r\n") != 0x0){
 8010752:	f107 0318 	add.w	r3, r7, #24
 8010756:	4916      	ldr	r1, [pc, #88]	; (80107b0 <WIOE5_Init+0xb8>)
 8010758:	4618      	mov	r0, r3
 801075a:	f7fd f961 	bl	800da20 <strcmp>
 801075e:	4603      	mov	r3, r0
 8010760:	2b00      	cmp	r3, #0
 8010762:	d004      	beq.n	801076e <WIOE5_Init+0x76>
		res++;
 8010764:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010768:	3301      	adds	r3, #1
 801076a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	}

	WIOE5_ReadFirmwareVersion(firmware_version, huart);
 801076e:	f107 030c 	add.w	r3, r7, #12
 8010772:	6879      	ldr	r1, [r7, #4]
 8010774:	4618      	mov	r0, r3
 8010776:	f000 f879 	bl	801086c <WIOE5_ReadFirmwareVersion>

	/*Set lora channel*/
	WIOE5_ChannelSwitch(LORA_CHANNEL_INIT,huart);
 801077a:	6879      	ldr	r1, [r7, #4]
 801077c:	2003      	movs	r0, #3
 801077e:	f000 f81b 	bl	80107b8 <WIOE5_ChannelSwitch>
	/*Set data rate*/
	WIOE5_SetDataRate(LORA_868Mhz_FSK_50000BPS,huart);
 8010782:	6879      	ldr	r1, [r7, #4]
 8010784:	2007      	movs	r0, #7
 8010786:	f000 f8b5 	bl	80108f4 <WIOE5_SetDataRate>
	/*Set transmit power*/
	WIOE5_SetTxPower(LORA_868Mhz_16dBm, huart);
 801078a:	6879      	ldr	r1, [r7, #4]
 801078c:	2010      	movs	r0, #16
 801078e:	f000 f90b 	bl	80109a8 <WIOE5_SetTxPower>

	/*Send 0x1234 5678*/
	WIOE5_SendData(305419896, huart);
 8010792:	6879      	ldr	r1, [r7, #4]
 8010794:	4807      	ldr	r0, [pc, #28]	; (80107b4 <WIOE5_Init+0xbc>)
 8010796:	f000 f97b 	bl	8010a90 <WIOE5_SendData>

	return res;
 801079a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 801079e:	4618      	mov	r0, r3
 80107a0:	3780      	adds	r7, #128	; 0x80
 80107a2:	46bd      	mov	sp, r7
 80107a4:	bd80      	pop	{r7, pc}
 80107a6:	bf00      	nop
 80107a8:	0801c908 	.word	0x0801c908
 80107ac:	0801c910 	.word	0x0801c910
 80107b0:	0801c918 	.word	0x0801c918
 80107b4:	12345678 	.word	0x12345678

080107b8 <WIOE5_ChannelSwitch>:
 *    @channel is an integer that define the channel number (Should be between 0 and 2 for EU868 Mhz version
 *	  @huart is a pointer on uart handdle
 * OUTPUT:
 * 	  @res is an integer use to check error
 * */
uint8_t WIOE5_ChannelSwitch(uint8_t channel,UART_HandleTypeDef *huart){
 80107b8:	b580      	push	{r7, lr}
 80107ba:	b0a2      	sub	sp, #136	; 0x88
 80107bc:	af00      	add	r7, sp, #0
 80107be:	4603      	mov	r3, r0
 80107c0:	6039      	str	r1, [r7, #0]
 80107c2:	71fb      	strb	r3, [r7, #7]

	uint8_t querry[25] = "AT+CH=";
 80107c4:	4a27      	ldr	r2, [pc, #156]	; (8010864 <WIOE5_ChannelSwitch+0xac>)
 80107c6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80107ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80107ce:	6018      	str	r0, [r3, #0]
 80107d0:	3304      	adds	r3, #4
 80107d2:	8019      	strh	r1, [r3, #0]
 80107d4:	3302      	adds	r3, #2
 80107d6:	0c0a      	lsrs	r2, r1, #16
 80107d8:	701a      	strb	r2, [r3, #0]
 80107da:	f107 0373 	add.w	r3, r7, #115	; 0x73
 80107de:	2200      	movs	r2, #0
 80107e0:	601a      	str	r2, [r3, #0]
 80107e2:	605a      	str	r2, [r3, #4]
 80107e4:	609a      	str	r2, [r3, #8]
 80107e6:	60da      	str	r2, [r3, #12]
 80107e8:	821a      	strh	r2, [r3, #16]
	querry[6] =  (channel+'0');
 80107ea:	79fb      	ldrb	r3, [r7, #7]
 80107ec:	3330      	adds	r3, #48	; 0x30
 80107ee:	b2db      	uxtb	r3, r3
 80107f0:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
	uint8_t string[100] = {0};
 80107f4:	2300      	movs	r3, #0
 80107f6:	60bb      	str	r3, [r7, #8]
 80107f8:	f107 030c 	add.w	r3, r7, #12
 80107fc:	2260      	movs	r2, #96	; 0x60
 80107fe:	2100      	movs	r1, #0
 8010800:	4618      	mov	r0, r3
 8010802:	f00a ff95 	bl	801b730 <memset>
	uint8_t res = 0;
 8010806:	2300      	movs	r3, #0
 8010808:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	strcat(querry, "\r\n");
 801080c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010810:	4618      	mov	r0, r3
 8010812:	f7fd f90f 	bl	800da34 <strlen>
 8010816:	4603      	mov	r3, r0
 8010818:	461a      	mov	r2, r3
 801081a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801081e:	4413      	add	r3, r2
 8010820:	4a11      	ldr	r2, [pc, #68]	; (8010868 <WIOE5_ChannelSwitch+0xb0>)
 8010822:	8811      	ldrh	r1, [r2, #0]
 8010824:	7892      	ldrb	r2, [r2, #2]
 8010826:	8019      	strh	r1, [r3, #0]
 8010828:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(huart, querry, sizeof(querry), 100);
 801082a:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 801082e:	2364      	movs	r3, #100	; 0x64
 8010830:	2219      	movs	r2, #25
 8010832:	6838      	ldr	r0, [r7, #0]
 8010834:	f006 fc88 	bl	8017148 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, string, 100,1000);
 8010838:	f107 0108 	add.w	r1, r7, #8
 801083c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010840:	2264      	movs	r2, #100	; 0x64
 8010842:	6838      	ldr	r0, [r7, #0]
 8010844:	f006 fd16 	bl	8017274 <HAL_UART_Receive>
	if(string[0]!='+'){
 8010848:	7a3b      	ldrb	r3, [r7, #8]
 801084a:	2b2b      	cmp	r3, #43	; 0x2b
 801084c:	d004      	beq.n	8010858 <WIOE5_ChannelSwitch+0xa0>
		res++;
 801084e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8010852:	3301      	adds	r3, #1
 8010854:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	}
	return res;
 8010858:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 801085c:	4618      	mov	r0, r3
 801085e:	3788      	adds	r7, #136	; 0x88
 8010860:	46bd      	mov	sp, r7
 8010862:	bd80      	pop	{r7, pc}
 8010864:	0801c928 	.word	0x0801c928
 8010868:	0801c924 	.word	0x0801c924

0801086c <WIOE5_ReadFirmwareVersion>:
/* Function use to read WIOE5 firmware version
 * INPUT:
 *    @version_output is an array of
 *	  @huart is a pointer on uart handdle
 * */
void WIOE5_ReadFirmwareVersion(uint8_t version_output[],UART_HandleTypeDef *huart){
 801086c:	b580      	push	{r7, lr}
 801086e:	b09c      	sub	sp, #112	; 0x70
 8010870:	af00      	add	r7, sp, #0
 8010872:	6078      	str	r0, [r7, #4]
 8010874:	6039      	str	r1, [r7, #0]

	uint8_t string[100] = {0};
 8010876:	2300      	movs	r3, #0
 8010878:	60bb      	str	r3, [r7, #8]
 801087a:	f107 030c 	add.w	r3, r7, #12
 801087e:	2260      	movs	r2, #96	; 0x60
 8010880:	2100      	movs	r1, #0
 8010882:	4618      	mov	r0, r3
 8010884:	f00a ff54 	bl	801b730 <memset>
	uint8_t index = 6;
 8010888:	2306      	movs	r3, #6
 801088a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	HAL_UART_Transmit(huart, "AT+VER\r\n", sizeof("AT+VER\r\n"), 100);
 801088e:	2364      	movs	r3, #100	; 0x64
 8010890:	2209      	movs	r2, #9
 8010892:	4917      	ldr	r1, [pc, #92]	; (80108f0 <WIOE5_ReadFirmwareVersion+0x84>)
 8010894:	6838      	ldr	r0, [r7, #0]
 8010896:	f006 fc57 	bl	8017148 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, string, 100,1000);
 801089a:	f107 0108 	add.w	r1, r7, #8
 801089e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80108a2:	2264      	movs	r2, #100	; 0x64
 80108a4:	6838      	ldr	r0, [r7, #0]
 80108a6:	f006 fce5 	bl	8017274 <HAL_UART_Receive>

	while((string[index] != '\r') || (index > sizeof(string))){
 80108aa:	e010      	b.n	80108ce <WIOE5_ReadFirmwareVersion+0x62>
		version_output[index-5] = string[index];
 80108ac:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80108b0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80108b4:	3b05      	subs	r3, #5
 80108b6:	6879      	ldr	r1, [r7, #4]
 80108b8:	440b      	add	r3, r1
 80108ba:	3270      	adds	r2, #112	; 0x70
 80108bc:	443a      	add	r2, r7
 80108be:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 80108c2:	701a      	strb	r2, [r3, #0]
		index++;
 80108c4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80108c8:	3301      	adds	r3, #1
 80108ca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	while((string[index] != '\r') || (index > sizeof(string))){
 80108ce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80108d2:	3370      	adds	r3, #112	; 0x70
 80108d4:	443b      	add	r3, r7
 80108d6:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 80108da:	2b0d      	cmp	r3, #13
 80108dc:	d1e6      	bne.n	80108ac <WIOE5_ReadFirmwareVersion+0x40>
 80108de:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80108e2:	2b64      	cmp	r3, #100	; 0x64
 80108e4:	d8e2      	bhi.n	80108ac <WIOE5_ReadFirmwareVersion+0x40>
	}
}
 80108e6:	bf00      	nop
 80108e8:	bf00      	nop
 80108ea:	3770      	adds	r7, #112	; 0x70
 80108ec:	46bd      	mov	sp, r7
 80108ee:	bd80      	pop	{r7, pc}
 80108f0:	0801c944 	.word	0x0801c944

080108f4 <WIOE5_SetDataRate>:
 *    @dr is an integer use to set data rate
 *	  @huart is a pointer on uart handdle
 *OUTPUT:
 * 	  @res is an integer use to check error
 * */
uint8_t WIOE5_SetDataRate(uint8_t dr,UART_HandleTypeDef *huart){
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b0a2      	sub	sp, #136	; 0x88
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	4603      	mov	r3, r0
 80108fc:	6039      	str	r1, [r7, #0]
 80108fe:	71fb      	strb	r3, [r7, #7]

	uint8_t querry[25] = "AT+DR=";
 8010900:	4a27      	ldr	r2, [pc, #156]	; (80109a0 <WIOE5_SetDataRate+0xac>)
 8010902:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010906:	e892 0003 	ldmia.w	r2, {r0, r1}
 801090a:	6018      	str	r0, [r3, #0]
 801090c:	3304      	adds	r3, #4
 801090e:	8019      	strh	r1, [r3, #0]
 8010910:	3302      	adds	r3, #2
 8010912:	0c0a      	lsrs	r2, r1, #16
 8010914:	701a      	strb	r2, [r3, #0]
 8010916:	f107 0373 	add.w	r3, r7, #115	; 0x73
 801091a:	2200      	movs	r2, #0
 801091c:	601a      	str	r2, [r3, #0]
 801091e:	605a      	str	r2, [r3, #4]
 8010920:	609a      	str	r2, [r3, #8]
 8010922:	60da      	str	r2, [r3, #12]
 8010924:	821a      	strh	r2, [r3, #16]
	querry[6] =  (dr+'0');
 8010926:	79fb      	ldrb	r3, [r7, #7]
 8010928:	3330      	adds	r3, #48	; 0x30
 801092a:	b2db      	uxtb	r3, r3
 801092c:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
	uint8_t string[100] = {0};
 8010930:	2300      	movs	r3, #0
 8010932:	60bb      	str	r3, [r7, #8]
 8010934:	f107 030c 	add.w	r3, r7, #12
 8010938:	2260      	movs	r2, #96	; 0x60
 801093a:	2100      	movs	r1, #0
 801093c:	4618      	mov	r0, r3
 801093e:	f00a fef7 	bl	801b730 <memset>
	uint8_t res = 0;
 8010942:	2300      	movs	r3, #0
 8010944:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	strcat(querry, "\r\n");
 8010948:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801094c:	4618      	mov	r0, r3
 801094e:	f7fd f871 	bl	800da34 <strlen>
 8010952:	4603      	mov	r3, r0
 8010954:	461a      	mov	r2, r3
 8010956:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801095a:	4413      	add	r3, r2
 801095c:	4a11      	ldr	r2, [pc, #68]	; (80109a4 <WIOE5_SetDataRate+0xb0>)
 801095e:	8811      	ldrh	r1, [r2, #0]
 8010960:	7892      	ldrb	r2, [r2, #2]
 8010962:	8019      	strh	r1, [r3, #0]
 8010964:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(huart, querry, sizeof(querry), 100);
 8010966:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 801096a:	2364      	movs	r3, #100	; 0x64
 801096c:	2219      	movs	r2, #25
 801096e:	6838      	ldr	r0, [r7, #0]
 8010970:	f006 fbea 	bl	8017148 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, string, 100,1000);
 8010974:	f107 0108 	add.w	r1, r7, #8
 8010978:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801097c:	2264      	movs	r2, #100	; 0x64
 801097e:	6838      	ldr	r0, [r7, #0]
 8010980:	f006 fc78 	bl	8017274 <HAL_UART_Receive>
	if(string[0]!='+'){
 8010984:	7a3b      	ldrb	r3, [r7, #8]
 8010986:	2b2b      	cmp	r3, #43	; 0x2b
 8010988:	d004      	beq.n	8010994 <WIOE5_SetDataRate+0xa0>
		res++;
 801098a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 801098e:	3301      	adds	r3, #1
 8010990:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	}
	return res;
 8010994:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8010998:	4618      	mov	r0, r3
 801099a:	3788      	adds	r7, #136	; 0x88
 801099c:	46bd      	mov	sp, r7
 801099e:	bd80      	pop	{r7, pc}
 80109a0:	0801c950 	.word	0x0801c950
 80109a4:	0801c924 	.word	0x0801c924

080109a8 <WIOE5_SetTxPower>:
 *    @tx_power is an integer use to set data rate
 *	  @huart is a pointer on uart handdle
 *OUTPUT:
 * 	  @res is an integer use to check error
 * */
uint8_t WIOE5_SetTxPower(uint8_t tx_power,UART_HandleTypeDef *huart){
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b0a2      	sub	sp, #136	; 0x88
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	4603      	mov	r3, r0
 80109b0:	6039      	str	r1, [r7, #0]
 80109b2:	71fb      	strb	r3, [r7, #7]

	uint8_t querry[25] = "AT+POWER=";
 80109b4:	4a33      	ldr	r2, [pc, #204]	; (8010a84 <WIOE5_SetTxPower+0xdc>)
 80109b6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80109ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80109bc:	c303      	stmia	r3!, {r0, r1}
 80109be:	801a      	strh	r2, [r3, #0]
 80109c0:	f107 0376 	add.w	r3, r7, #118	; 0x76
 80109c4:	2200      	movs	r2, #0
 80109c6:	601a      	str	r2, [r3, #0]
 80109c8:	605a      	str	r2, [r3, #4]
 80109ca:	609a      	str	r2, [r3, #8]
 80109cc:	f8c3 200b 	str.w	r2, [r3, #11]
	uint8_t string[100] = {0};
 80109d0:	2300      	movs	r3, #0
 80109d2:	60bb      	str	r3, [r7, #8]
 80109d4:	f107 030c 	add.w	r3, r7, #12
 80109d8:	2260      	movs	r2, #96	; 0x60
 80109da:	2100      	movs	r1, #0
 80109dc:	4618      	mov	r0, r3
 80109de:	f00a fea7 	bl	801b730 <memset>
	uint8_t res = 0;
 80109e2:	2300      	movs	r3, #0
 80109e4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	if(tx_power < 10){	/*Two digit at least*/
 80109e8:	79fb      	ldrb	r3, [r7, #7]
 80109ea:	2b09      	cmp	r3, #9
 80109ec:	d805      	bhi.n	80109fa <WIOE5_SetTxPower+0x52>
		querry[9] =  (tx_power+'0');
 80109ee:	79fb      	ldrb	r3, [r7, #7]
 80109f0:	3330      	adds	r3, #48	; 0x30
 80109f2:	b2db      	uxtb	r3, r3
 80109f4:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 80109f8:	e018      	b.n	8010a2c <WIOE5_SetTxPower+0x84>
	}
	else{
		querry[9] =  ((tx_power/10)+'0');
 80109fa:	79fb      	ldrb	r3, [r7, #7]
 80109fc:	4a22      	ldr	r2, [pc, #136]	; (8010a88 <WIOE5_SetTxPower+0xe0>)
 80109fe:	fba2 2303 	umull	r2, r3, r2, r3
 8010a02:	08db      	lsrs	r3, r3, #3
 8010a04:	b2db      	uxtb	r3, r3
 8010a06:	3330      	adds	r3, #48	; 0x30
 8010a08:	b2db      	uxtb	r3, r3
 8010a0a:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
		querry[10] =  ((tx_power%10)+'0');
 8010a0e:	79fa      	ldrb	r2, [r7, #7]
 8010a10:	4b1d      	ldr	r3, [pc, #116]	; (8010a88 <WIOE5_SetTxPower+0xe0>)
 8010a12:	fba3 1302 	umull	r1, r3, r3, r2
 8010a16:	08d9      	lsrs	r1, r3, #3
 8010a18:	460b      	mov	r3, r1
 8010a1a:	009b      	lsls	r3, r3, #2
 8010a1c:	440b      	add	r3, r1
 8010a1e:	005b      	lsls	r3, r3, #1
 8010a20:	1ad3      	subs	r3, r2, r3
 8010a22:	b2db      	uxtb	r3, r3
 8010a24:	3330      	adds	r3, #48	; 0x30
 8010a26:	b2db      	uxtb	r3, r3
 8010a28:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	}
	strcat(querry, "\r\n");
 8010a2c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010a30:	4618      	mov	r0, r3
 8010a32:	f7fc ffff 	bl	800da34 <strlen>
 8010a36:	4603      	mov	r3, r0
 8010a38:	461a      	mov	r2, r3
 8010a3a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010a3e:	4413      	add	r3, r2
 8010a40:	4a12      	ldr	r2, [pc, #72]	; (8010a8c <WIOE5_SetTxPower+0xe4>)
 8010a42:	8811      	ldrh	r1, [r2, #0]
 8010a44:	7892      	ldrb	r2, [r2, #2]
 8010a46:	8019      	strh	r1, [r3, #0]
 8010a48:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(huart, querry, sizeof(querry), 100);
 8010a4a:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8010a4e:	2364      	movs	r3, #100	; 0x64
 8010a50:	2219      	movs	r2, #25
 8010a52:	6838      	ldr	r0, [r7, #0]
 8010a54:	f006 fb78 	bl	8017148 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, string, 100,1000);
 8010a58:	f107 0108 	add.w	r1, r7, #8
 8010a5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010a60:	2264      	movs	r2, #100	; 0x64
 8010a62:	6838      	ldr	r0, [r7, #0]
 8010a64:	f006 fc06 	bl	8017274 <HAL_UART_Receive>
	if(string[0]!='+'){
 8010a68:	7a3b      	ldrb	r3, [r7, #8]
 8010a6a:	2b2b      	cmp	r3, #43	; 0x2b
 8010a6c:	d004      	beq.n	8010a78 <WIOE5_SetTxPower+0xd0>
		res++;
 8010a6e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8010a72:	3301      	adds	r3, #1
 8010a74:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	}
	return res;
 8010a78:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	3788      	adds	r7, #136	; 0x88
 8010a80:	46bd      	mov	sp, r7
 8010a82:	bd80      	pop	{r7, pc}
 8010a84:	0801c96c 	.word	0x0801c96c
 8010a88:	cccccccd 	.word	0xcccccccd
 8010a8c:	0801c924 	.word	0x0801c924

08010a90 <WIOE5_SendData>:
 *    @data is an integer - this is the 4 byte to send
 *	  @huart is a pointer on uart handdle
 *OUTPUT:
 * 	  @res is an integer use to check error
 * */
uint8_t WIOE5_SendData(uint32_t data,UART_HandleTypeDef *huart){
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b0a6      	sub	sp, #152	; 0x98
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	6078      	str	r0, [r7, #4]
 8010a98:	6039      	str	r1, [r7, #0]

	uint8_t querry[30] = "AT+MSGHEX=";
 8010a9a:	4a44      	ldr	r2, [pc, #272]	; (8010bac <WIOE5_SendData+0x11c>)
 8010a9c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8010aa0:	ca07      	ldmia	r2, {r0, r1, r2}
 8010aa2:	c303      	stmia	r3!, {r0, r1}
 8010aa4:	801a      	strh	r2, [r3, #0]
 8010aa6:	3302      	adds	r3, #2
 8010aa8:	0c12      	lsrs	r2, r2, #16
 8010aaa:	701a      	strb	r2, [r3, #0]
 8010aac:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 8010ab0:	2200      	movs	r2, #0
 8010ab2:	601a      	str	r2, [r3, #0]
 8010ab4:	605a      	str	r2, [r3, #4]
 8010ab6:	609a      	str	r2, [r3, #8]
 8010ab8:	60da      	str	r2, [r3, #12]
 8010aba:	f8c3 200f 	str.w	r2, [r3, #15]
	querry[10] = '"';
 8010abe:	2322      	movs	r3, #34	; 0x22
 8010ac0:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
	uint8_t hex_char = 0;
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	uint8_t res;
	uint8_t string[100] = {0};
 8010aca:	2300      	movs	r3, #0
 8010acc:	60fb      	str	r3, [r7, #12]
 8010ace:	f107 0310 	add.w	r3, r7, #16
 8010ad2:	2260      	movs	r2, #96	; 0x60
 8010ad4:	2100      	movs	r1, #0
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	f00a fe2a 	bl	801b730 <memset>

	/*Split 32 bits into 4 byte*/
	for(int i=0;i<8;i++){
 8010adc:	2300      	movs	r3, #0
 8010ade:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010ae2:	e02c      	b.n	8010b3e <WIOE5_SendData+0xae>
		hex_char = (data&(0xf<<(i*4)))>>(i*4);
 8010ae4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010ae8:	009b      	lsls	r3, r3, #2
 8010aea:	220f      	movs	r2, #15
 8010aec:	fa02 f303 	lsl.w	r3, r2, r3
 8010af0:	461a      	mov	r2, r3
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	401a      	ands	r2, r3
 8010af6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010afa:	009b      	lsls	r3, r3, #2
 8010afc:	fa22 f303 	lsr.w	r3, r2, r3
 8010b00:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		if(hex_char > 10){
 8010b04:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010b08:	2b0a      	cmp	r3, #10
 8010b0a:	d905      	bls.n	8010b18 <WIOE5_SendData+0x88>
			hex_char = hex_char + 55;
 8010b0c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010b10:	3337      	adds	r3, #55	; 0x37
 8010b12:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8010b16:	e004      	b.n	8010b22 <WIOE5_SendData+0x92>
		}
		else{
			hex_char = hex_char + 48;
 8010b18:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010b1c:	3330      	adds	r3, #48	; 0x30
 8010b1e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		querry[11+i] = hex_char;
 8010b22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010b26:	330b      	adds	r3, #11
 8010b28:	3398      	adds	r3, #152	; 0x98
 8010b2a:	443b      	add	r3, r7
 8010b2c:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8010b30:	f803 2c28 	strb.w	r2, [r3, #-40]
	for(int i=0;i<8;i++){
 8010b34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010b38:	3301      	adds	r3, #1
 8010b3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010b3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010b42:	2b07      	cmp	r3, #7
 8010b44:	ddce      	ble.n	8010ae4 <WIOE5_SendData+0x54>
	}
	querry[19] = '"';
 8010b46:	2322      	movs	r3, #34	; 0x22
 8010b48:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
	strcat(querry,"\r\n");
 8010b4c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8010b50:	4618      	mov	r0, r3
 8010b52:	f7fc ff6f 	bl	800da34 <strlen>
 8010b56:	4603      	mov	r3, r0
 8010b58:	461a      	mov	r2, r3
 8010b5a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8010b5e:	4413      	add	r3, r2
 8010b60:	4a13      	ldr	r2, [pc, #76]	; (8010bb0 <WIOE5_SendData+0x120>)
 8010b62:	8811      	ldrh	r1, [r2, #0]
 8010b64:	7892      	ldrb	r2, [r2, #2]
 8010b66:	8019      	strh	r1, [r3, #0]
 8010b68:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(huart, querry, sizeof(querry), 100);
 8010b6a:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8010b6e:	2364      	movs	r3, #100	; 0x64
 8010b70:	221e      	movs	r2, #30
 8010b72:	6838      	ldr	r0, [r7, #0]
 8010b74:	f006 fae8 	bl	8017148 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, string, 100,1000);
 8010b78:	f107 010c 	add.w	r1, r7, #12
 8010b7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010b80:	2264      	movs	r2, #100	; 0x64
 8010b82:	6838      	ldr	r0, [r7, #0]
 8010b84:	f006 fb76 	bl	8017274 <HAL_UART_Receive>

	/*Check if receive a DONE*/
	if(strcmp("+MSGHEX: Start\r\n",string)!=0x00){
 8010b88:	f107 030c 	add.w	r3, r7, #12
 8010b8c:	4619      	mov	r1, r3
 8010b8e:	4809      	ldr	r0, [pc, #36]	; (8010bb4 <WIOE5_SendData+0x124>)
 8010b90:	f7fc ff46 	bl	800da20 <strcmp>
 8010b94:	4603      	mov	r3, r0
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d002      	beq.n	8010ba0 <WIOE5_SendData+0x110>
		res = 1;
 8010b9a:	2301      	movs	r3, #1
 8010b9c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
	}
	return res;
 8010ba0:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
}
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	3798      	adds	r7, #152	; 0x98
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	bd80      	pop	{r7, pc}
 8010bac:	0801c99c 	.word	0x0801c99c
 8010bb0:	0801c924 	.word	0x0801c924
 8010bb4:	0801c988 	.word	0x0801c988

08010bb8 <WIOE5_FactoryReset>:
 * INPUT:
 *	  @huart is a pointer on uart handdle
 *OUTPUT:
 * 	  @res is an integer use to check error
 * */
uint8_t WIOE5_FactoryReset(UART_HandleTypeDef *huart){
 8010bb8:	b590      	push	{r4, r7, lr}
 8010bba:	b0a5      	sub	sp, #148	; 0x94
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]

	uint8_t res = 0;
 8010bc0:	2300      	movs	r3, #0
 8010bc2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	uint8_t string[100] = {0};
 8010bc6:	2300      	movs	r3, #0
 8010bc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8010bca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010bce:	2260      	movs	r2, #96	; 0x60
 8010bd0:	2100      	movs	r1, #0
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	f00a fdac 	bl	801b730 <memset>
	uint8_t querry[30] = "AT+FDEFAULT\r\n";
 8010bd8:	4b16      	ldr	r3, [pc, #88]	; (8010c34 <WIOE5_FactoryReset+0x7c>)
 8010bda:	f107 0408 	add.w	r4, r7, #8
 8010bde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010be0:	c407      	stmia	r4!, {r0, r1, r2}
 8010be2:	8023      	strh	r3, [r4, #0]
 8010be4:	f107 0316 	add.w	r3, r7, #22
 8010be8:	2200      	movs	r2, #0
 8010bea:	601a      	str	r2, [r3, #0]
 8010bec:	605a      	str	r2, [r3, #4]
 8010bee:	609a      	str	r2, [r3, #8]
 8010bf0:	60da      	str	r2, [r3, #12]

	HAL_UART_Transmit(huart, querry, sizeof(querry), 100);
 8010bf2:	f107 0108 	add.w	r1, r7, #8
 8010bf6:	2364      	movs	r3, #100	; 0x64
 8010bf8:	221e      	movs	r2, #30
 8010bfa:	6878      	ldr	r0, [r7, #4]
 8010bfc:	f006 faa4 	bl	8017148 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, string, 100,1000);
 8010c00:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010c04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010c08:	2264      	movs	r2, #100	; 0x64
 8010c0a:	6878      	ldr	r0, [r7, #4]
 8010c0c:	f006 fb32 	bl	8017274 <HAL_UART_Receive>

	if(strcmp("+FDEFAULT: OK\r\n",string)!=0x00){
 8010c10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010c14:	4619      	mov	r1, r3
 8010c16:	4808      	ldr	r0, [pc, #32]	; (8010c38 <WIOE5_FactoryReset+0x80>)
 8010c18:	f7fc ff02 	bl	800da20 <strcmp>
 8010c1c:	4603      	mov	r3, r0
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d002      	beq.n	8010c28 <WIOE5_FactoryReset+0x70>
		res = 1;
 8010c22:	2301      	movs	r3, #1
 8010c24:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	}

	return res;
 8010c28:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	3794      	adds	r7, #148	; 0x94
 8010c30:	46bd      	mov	sp, r7
 8010c32:	bd90      	pop	{r4, r7, pc}
 8010c34:	0801c9cc 	.word	0x0801c9cc
 8010c38:	0801c9bc 	.word	0x0801c9bc

08010c3c <WIOE5_SendString>:
 *	  @string is the actual message to be send
 *	  @string_size is an integer
 *OUTPUT:
 * 	  @res is an integer use to check error
 * */
uint8_t WIOE5_SendString(UART_HandleTypeDef *huart,uint8_t string[],uint32_t string_size){
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	b0a4      	sub	sp, #144	; 0x90
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	60f8      	str	r0, [r7, #12]
 8010c44:	60b9      	str	r1, [r7, #8]
 8010c46:	607a      	str	r2, [r7, #4]

	uint8_t res = 0;
 8010c48:	2300      	movs	r3, #0
 8010c4a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	uint8_t received_str[100] = {0};
 8010c4e:	2300      	movs	r3, #0
 8010c50:	61fb      	str	r3, [r7, #28]
 8010c52:	f107 0320 	add.w	r3, r7, #32
 8010c56:	2260      	movs	r2, #96	; 0x60
 8010c58:	2100      	movs	r1, #0
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	f00a fd68 	bl	801b730 <memset>
	uint8_t querry[10] = "AT+MSG=";
 8010c60:	4a41      	ldr	r2, [pc, #260]	; (8010d68 <WIOE5_SendString+0x12c>)
 8010c62:	f107 0310 	add.w	r3, r7, #16
 8010c66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010c6a:	e883 0003 	stmia.w	r3, {r0, r1}
 8010c6e:	2300      	movs	r3, #0
 8010c70:	833b      	strh	r3, [r7, #24]
	/*Init a pointer on char as NULL*/
	char * string_to_send = NULL;
 8010c72:	2300      	movs	r3, #0
 8010c74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

	/*Allocate some space for the string to send*/
	string_to_send = (char *) malloc( (string_size+30) * sizeof(char));
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	331e      	adds	r3, #30
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	f00a fc9b 	bl	801b5b8 <malloc>
 8010c82:	4603      	mov	r3, r0
 8010c84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

	/*Clear the string*/
	for(int i=0;i<(string_size+30);i++){
 8010c88:	2300      	movs	r3, #0
 8010c8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8010c8e:	e00b      	b.n	8010ca8 <WIOE5_SendString+0x6c>
		string_to_send[i] = 0x0;
 8010c90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010c94:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010c98:	4413      	add	r3, r2
 8010c9a:	2200      	movs	r2, #0
 8010c9c:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<(string_size+30);i++){
 8010c9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010ca2:	3301      	adds	r3, #1
 8010ca4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	f103 021e 	add.w	r2, r3, #30
 8010cae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010cb2:	429a      	cmp	r2, r3
 8010cb4:	d8ec      	bhi.n	8010c90 <WIOE5_SendString+0x54>
	}

	strcat(string_to_send,querry);
 8010cb6:	f107 0310 	add.w	r3, r7, #16
 8010cba:	4619      	mov	r1, r3
 8010cbc:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8010cc0:	f00a fd3e 	bl	801b740 <strcat>
	strncat(string_to_send,0x34,1);
 8010cc4:	2201      	movs	r2, #1
 8010cc6:	2134      	movs	r1, #52	; 0x34
 8010cc8:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8010ccc:	f00a fd47 	bl	801b75e <strncat>

	/*Add the string to*/
	for(int i=0;i<string_size;i++){
 8010cd0:	2300      	movs	r3, #0
 8010cd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010cd6:	e011      	b.n	8010cfc <WIOE5_SendString+0xc0>
		string_to_send[7+i] = string[i];
 8010cd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010cdc:	68ba      	ldr	r2, [r7, #8]
 8010cde:	441a      	add	r2, r3
 8010ce0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010ce4:	3307      	adds	r3, #7
 8010ce6:	4619      	mov	r1, r3
 8010ce8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010cec:	440b      	add	r3, r1
 8010cee:	7812      	ldrb	r2, [r2, #0]
 8010cf0:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<string_size;i++){
 8010cf2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010cf6:	3301      	adds	r3, #1
 8010cf8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010cfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010d00:	687a      	ldr	r2, [r7, #4]
 8010d02:	429a      	cmp	r2, r3
 8010d04:	d8e8      	bhi.n	8010cd8 <WIOE5_SendString+0x9c>
	}

	strncat(string_to_send,0x34,1);
 8010d06:	2201      	movs	r2, #1
 8010d08:	2134      	movs	r1, #52	; 0x34
 8010d0a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8010d0e:	f00a fd26 	bl	801b75e <strncat>
	strcat(string_to_send,"\r\n");
 8010d12:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8010d16:	f7fc fe8d 	bl	800da34 <strlen>
 8010d1a:	4603      	mov	r3, r0
 8010d1c:	461a      	mov	r2, r3
 8010d1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010d22:	4413      	add	r3, r2
 8010d24:	4a11      	ldr	r2, [pc, #68]	; (8010d6c <WIOE5_SendString+0x130>)
 8010d26:	8811      	ldrh	r1, [r2, #0]
 8010d28:	7892      	ldrb	r2, [r2, #2]
 8010d2a:	8019      	strh	r1, [r3, #0]
 8010d2c:	709a      	strb	r2, [r3, #2]

	HAL_UART_Transmit(huart, string_to_send, (string_size+30), 100);
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	b29b      	uxth	r3, r3
 8010d32:	331e      	adds	r3, #30
 8010d34:	b29a      	uxth	r2, r3
 8010d36:	2364      	movs	r3, #100	; 0x64
 8010d38:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8010d3c:	68f8      	ldr	r0, [r7, #12]
 8010d3e:	f006 fa03 	bl	8017148 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, received_str, 100,1000);
 8010d42:	f107 011c 	add.w	r1, r7, #28
 8010d46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010d4a:	2264      	movs	r2, #100	; 0x64
 8010d4c:	68f8      	ldr	r0, [r7, #12]
 8010d4e:	f006 fa91 	bl	8017274 <HAL_UART_Receive>


	free(string_to_send);
 8010d52:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8010d56:	f00a fc37 	bl	801b5c8 <free>
	return res;
 8010d5a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8010d5e:	4618      	mov	r0, r3
 8010d60:	3790      	adds	r7, #144	; 0x90
 8010d62:	46bd      	mov	sp, r7
 8010d64:	bd80      	pop	{r7, pc}
 8010d66:	bf00      	nop
 8010d68:	0801c9ec 	.word	0x0801c9ec
 8010d6c:	0801c924 	.word	0x0801c924

08010d70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8010d70:	b580      	push	{r7, lr}
 8010d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	SCB->VTOR = 0x0800D800;
 8010d74:	4b1b      	ldr	r3, [pc, #108]	; (8010de4 <main+0x74>)
 8010d76:	4a1c      	ldr	r2, [pc, #112]	; (8010de8 <main+0x78>)
 8010d78:	609a      	str	r2, [r3, #8]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8010d7a:	b662      	cpsie	i
}
 8010d7c:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8010d7e:	f001 f874 	bl	8011e6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8010d82:	f000 f83b 	bl	8010dfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8010d86:	f7fe ffc7 	bl	800fd18 <MX_GPIO_Init>
  MX_DMA_Init();
 8010d8a:	f7fe ff9b 	bl	800fcc4 <MX_DMA_Init>
  MX_I2C2_Init();
 8010d8e:	f7ff f83f 	bl	800fe10 <MX_I2C2_Init>
  MX_TIM2_Init();
 8010d92:	f000 fd1b 	bl	80117cc <MX_TIM2_Init>
  MX_TIM3_Init();
 8010d96:	f000 fd71 	bl	801187c <MX_TIM3_Init>
  MX_TIM4_Init();
 8010d9a:	f000 fdc9 	bl	8011930 <MX_TIM4_Init>
  MX_UART4_Init();
 8010d9e:	f000 fedf 	bl	8011b60 <MX_UART4_Init>
  MX_UART5_Init();
 8010da2:	f000 ff29 	bl	8011bf8 <MX_UART5_Init>
  MX_ADC2_Init();
 8010da6:	f7fd fc87 	bl	800e6b8 <MX_ADC2_Init>
  MX_SPI1_Init();
 8010daa:	f000 fb5d 	bl	8011468 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /*Timer start flaps and throttle + buzzer*/
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8010dae:	2100      	movs	r1, #0
 8010db0:	480e      	ldr	r0, [pc, #56]	; (8010dec <main+0x7c>)
 8010db2:	f005 f8d7 	bl	8015f64 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8010db6:	2100      	movs	r1, #0
 8010db8:	480d      	ldr	r0, [pc, #52]	; (8010df0 <main+0x80>)
 8010dba:	f005 f8d3 	bl	8015f64 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8010dbe:	2104      	movs	r1, #4
 8010dc0:	480b      	ldr	r0, [pc, #44]	; (8010df0 <main+0x80>)
 8010dc2:	f005 f8cf 	bl	8015f64 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8010dc6:	210c      	movs	r1, #12
 8010dc8:	4809      	ldr	r0, [pc, #36]	; (8010df0 <main+0x80>)
 8010dca:	f005 f8cb 	bl	8015f64 <HAL_TIM_PWM_Start>

  /*Start ADC conversion with DMA request*/
  HAL_ADC_Start_DMA(&hadc2, &BatteryMonitoringData, CONVERSION_COUNT);
 8010dce:	2203      	movs	r2, #3
 8010dd0:	4908      	ldr	r1, [pc, #32]	; (8010df4 <main+0x84>)
 8010dd2:	4809      	ldr	r0, [pc, #36]	; (8010df8 <main+0x88>)
 8010dd4:	f001 fc86 	bl	80126e4 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8010dd8:	f7fd fea0 	bl	800eb1c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8010ddc:	f008 fad0 	bl	8019380 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8010de0:	e7fe      	b.n	8010de0 <main+0x70>
 8010de2:	bf00      	nop
 8010de4:	e000ed00 	.word	0xe000ed00
 8010de8:	0800d800 	.word	0x0800d800
 8010dec:	20000868 	.word	0x20000868
 8010df0:	200008b4 	.word	0x200008b4
 8010df4:	20000760 	.word	0x20000760
 8010df8:	20000094 	.word	0x20000094

08010dfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	b094      	sub	sp, #80	; 0x50
 8010e00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8010e02:	f107 0318 	add.w	r3, r7, #24
 8010e06:	2238      	movs	r2, #56	; 0x38
 8010e08:	2100      	movs	r1, #0
 8010e0a:	4618      	mov	r0, r3
 8010e0c:	f00a fc90 	bl	801b730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8010e10:	1d3b      	adds	r3, r7, #4
 8010e12:	2200      	movs	r2, #0
 8010e14:	601a      	str	r2, [r3, #0]
 8010e16:	605a      	str	r2, [r3, #4]
 8010e18:	609a      	str	r2, [r3, #8]
 8010e1a:	60da      	str	r2, [r3, #12]
 8010e1c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8010e1e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8010e22:	f003 fe6b 	bl	8014afc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8010e26:	2302      	movs	r3, #2
 8010e28:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8010e2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010e2e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8010e30:	2340      	movs	r3, #64	; 0x40
 8010e32:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8010e34:	2302      	movs	r3, #2
 8010e36:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8010e38:	2302      	movs	r3, #2
 8010e3a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8010e3c:	2304      	movs	r3, #4
 8010e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8010e40:	234b      	movs	r3, #75	; 0x4b
 8010e42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8010e44:	2302      	movs	r3, #2
 8010e46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8010e48:	2302      	movs	r3, #2
 8010e4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8010e4c:	2302      	movs	r3, #2
 8010e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8010e50:	f107 0318 	add.w	r3, r7, #24
 8010e54:	4618      	mov	r0, r3
 8010e56:	f003 fef5 	bl	8014c44 <HAL_RCC_OscConfig>
 8010e5a:	4603      	mov	r3, r0
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d001      	beq.n	8010e64 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8010e60:	f000 f82a 	bl	8010eb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8010e64:	230f      	movs	r3, #15
 8010e66:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8010e68:	2303      	movs	r3, #3
 8010e6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8010e6c:	2300      	movs	r3, #0
 8010e6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8010e70:	2300      	movs	r3, #0
 8010e72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8010e74:	2300      	movs	r3, #0
 8010e76:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8010e78:	1d3b      	adds	r3, r7, #4
 8010e7a:	2104      	movs	r1, #4
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	f004 f9f9 	bl	8015274 <HAL_RCC_ClockConfig>
 8010e82:	4603      	mov	r3, r0
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d001      	beq.n	8010e8c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8010e88:	f000 f816 	bl	8010eb8 <Error_Handler>
  }
}
 8010e8c:	bf00      	nop
 8010e8e:	3750      	adds	r7, #80	; 0x50
 8010e90:	46bd      	mov	sp, r7
 8010e92:	bd80      	pop	{r7, pc}

08010e94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010e94:	b580      	push	{r7, lr}
 8010e96:	b082      	sub	sp, #8
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	4a04      	ldr	r2, [pc, #16]	; (8010eb4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8010ea2:	4293      	cmp	r3, r2
 8010ea4:	d101      	bne.n	8010eaa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8010ea6:	f000 fff9 	bl	8011e9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8010eaa:	bf00      	nop
 8010eac:	3708      	adds	r7, #8
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	bd80      	pop	{r7, pc}
 8010eb2:	bf00      	nop
 8010eb4:	40012c00 	.word	0x40012c00

08010eb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8010eb8:	b480      	push	{r7}
 8010eba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8010ebc:	b672      	cpsid	i
}
 8010ebe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8010ec0:	e7fe      	b.n	8010ec0 <Error_Handler+0x8>

08010ec2 <Pid_CalculatePitchError>:
DESCRIPTION - Basic driver for the mpu6050 accelerometer.
*******************************************************)*/
#include "main.h"

//As the gyro got the front at x axis then rotation on X mean roll / rotation on Y mean pitch and rotation on Z mean yaw
float32_t Pid_CalculatePitchError(COMMAND_t *command,BNO055_t *Accelerometer){
 8010ec2:	b480      	push	{r7}
 8010ec4:	b085      	sub	sp, #20
 8010ec6:	af00      	add	r7, sp, #0
 8010ec8:	6078      	str	r0, [r7, #4]
 8010eca:	6039      	str	r1, [r7, #0]
	float32_t res = (Accelerometer->processed_data.euler_angles.x)-(command->pitch_angle);
 8010ecc:	683b      	ldr	r3, [r7, #0]
 8010ece:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	edd3 7a02 	vldr	s15, [r3, #8]
 8010ed8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010edc:	edc7 7a03 	vstr	s15, [r7, #12]
	return res;
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	ee07 3a90 	vmov	s15, r3
}
 8010ee6:	eeb0 0a67 	vmov.f32	s0, s15
 8010eea:	3714      	adds	r7, #20
 8010eec:	46bd      	mov	sp, r7
 8010eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef2:	4770      	bx	lr

08010ef4 <Pid_CalculateYawError>:

float32_t Pid_CalculateYawError(COMMAND_t *command,BNO055_t *Accelerometer){
 8010ef4:	b480      	push	{r7}
 8010ef6:	b085      	sub	sp, #20
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	6078      	str	r0, [r7, #4]
 8010efc:	6039      	str	r1, [r7, #0]
	float32_t res = (Accelerometer->processed_data.euler_angles.z)-(command->yaw_angle);
 8010efe:	683b      	ldr	r3, [r7, #0]
 8010f00:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	edd3 7a03 	vldr	s15, [r3, #12]
 8010f0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010f0e:	edc7 7a03 	vstr	s15, [r7, #12]
	return res;
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	ee07 3a90 	vmov	s15, r3
}
 8010f18:	eeb0 0a67 	vmov.f32	s0, s15
 8010f1c:	3714      	adds	r7, #20
 8010f1e:	46bd      	mov	sp, r7
 8010f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f24:	4770      	bx	lr

08010f26 <Pid_CalculateRollError>:

float32_t Pid_CalculateRollError(COMMAND_t *command,BNO055_t *Accelerometer){
 8010f26:	b480      	push	{r7}
 8010f28:	b085      	sub	sp, #20
 8010f2a:	af00      	add	r7, sp, #0
 8010f2c:	6078      	str	r0, [r7, #4]
 8010f2e:	6039      	str	r1, [r7, #0]
	float32_t res = (Accelerometer->processed_data.euler_angles.y)-(command->roll_angle);
 8010f30:	683b      	ldr	r3, [r7, #0]
 8010f32:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	edd3 7a04 	vldr	s15, [r3, #16]
 8010f3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010f40:	edc7 7a03 	vstr	s15, [r7, #12]
	return res;
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	ee07 3a90 	vmov	s15, r3
}
 8010f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8010f4e:	3714      	adds	r7, #20
 8010f50:	46bd      	mov	sp, r7
 8010f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f56:	4770      	bx	lr

08010f58 <Pid_Init>:

void Pid_Init(arm_pid_instance_f32 *PID,float32_t KP,float32_t KI,float32_t KD){
 8010f58:	b580      	push	{r7, lr}
 8010f5a:	b084      	sub	sp, #16
 8010f5c:	af00      	add	r7, sp, #0
 8010f5e:	60f8      	str	r0, [r7, #12]
 8010f60:	ed87 0a02 	vstr	s0, [r7, #8]
 8010f64:	edc7 0a01 	vstr	s1, [r7, #4]
 8010f68:	ed87 1a00 	vstr	s2, [r7]

	//Set PID gain
	PID->Kp = KP;
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	68ba      	ldr	r2, [r7, #8]
 8010f70:	619a      	str	r2, [r3, #24]
	PID->Ki = KI;
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	687a      	ldr	r2, [r7, #4]
 8010f76:	61da      	str	r2, [r3, #28]
	PID->Kd = KD;
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	683a      	ldr	r2, [r7, #0]
 8010f7c:	621a      	str	r2, [r3, #32]

	//Set the PID
	arm_pid_init_f32(PID, 1);
 8010f7e:	2101      	movs	r1, #1
 8010f80:	68f8      	ldr	r0, [r7, #12]
 8010f82:	f00a fafb 	bl	801b57c <arm_pid_init_f32>

}
 8010f86:	bf00      	nop
 8010f88:	3710      	adds	r7, #16
 8010f8a:	46bd      	mov	sp, r7
 8010f8c:	bd80      	pop	{r7, pc}

08010f8e <Pid_CompensateYaw>:

//Function use to compensate a roatation on yaw axis --> make sure to update accelerometer before reading and compensate
void Pid_CompensateYaw(arm_pid_instance_f32 *PID,COMMAND_t *command,BNO055_t *Accelerometer,PROPULSION_t *propulsion){
 8010f8e:	b580      	push	{r7, lr}
 8010f90:	b08a      	sub	sp, #40	; 0x28
 8010f92:	af00      	add	r7, sp, #0
 8010f94:	60f8      	str	r0, [r7, #12]
 8010f96:	60b9      	str	r1, [r7, #8]
 8010f98:	607a      	str	r2, [r7, #4]
 8010f9a:	603b      	str	r3, [r7, #0]
	float32_t error;
	float32_t pid_value;
	//Calculate the erro in °/s around yaw/z axis
	error = Pid_CalculateYawError(command, Accelerometer);
 8010f9c:	6879      	ldr	r1, [r7, #4]
 8010f9e:	68b8      	ldr	r0, [r7, #8]
 8010fa0:	f7ff ffa8 	bl	8010ef4 <Pid_CalculateYawError>
 8010fa4:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	61fb      	str	r3, [r7, #28]
 8010fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fae:	61bb      	str	r3, [r7, #24]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8010fb0:	69fb      	ldr	r3, [r7, #28]
 8010fb2:	ed93 7a00 	vldr	s14, [r3]
 8010fb6:	edd7 7a06 	vldr	s15, [r7, #24]
 8010fba:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8010fbe:	69fb      	ldr	r3, [r7, #28]
 8010fc0:	edd3 6a01 	vldr	s13, [r3, #4]
 8010fc4:	69fb      	ldr	r3, [r7, #28]
 8010fc6:	edd3 7a03 	vldr	s15, [r3, #12]
 8010fca:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8010fce:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8010fd2:	69fb      	ldr	r3, [r7, #28]
 8010fd4:	edd3 6a02 	vldr	s13, [r3, #8]
 8010fd8:	69fb      	ldr	r3, [r7, #28]
 8010fda:	edd3 7a04 	vldr	s15, [r3, #16]
 8010fde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010fe2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010fe6:	69fb      	ldr	r3, [r7, #28]
 8010fe8:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8010fec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010ff0:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Update state */
    S->state[1] = S->state[0];
 8010ff4:	69fb      	ldr	r3, [r7, #28]
 8010ff6:	68da      	ldr	r2, [r3, #12]
 8010ff8:	69fb      	ldr	r3, [r7, #28]
 8010ffa:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8010ffc:	69fb      	ldr	r3, [r7, #28]
 8010ffe:	69ba      	ldr	r2, [r7, #24]
 8011000:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8011002:	69fb      	ldr	r3, [r7, #28]
 8011004:	697a      	ldr	r2, [r7, #20]
 8011006:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8011008:	697b      	ldr	r3, [r7, #20]
	//calculate the amount of mouve needed to force back the plane
	pid_value = arm_pid_f32(PID, error);
 801100a:	623b      	str	r3, [r7, #32]

	//Ase the plane is a fixed wing we can't compensate move on yaw axis ...
	//If you have different plane make sure to create a thing to do here
}
 801100c:	bf00      	nop
 801100e:	3728      	adds	r7, #40	; 0x28
 8011010:	46bd      	mov	sp, r7
 8011012:	bd80      	pop	{r7, pc}

08011014 <Pid_CompensateRoll>:

//Function use to compensate a roatation on Roll axis --> make sure to update accelerometer before reading and compensate
void Pid_CompensateRoll(arm_pid_instance_f32 *PID,COMMAND_t *command,BNO055_t *Accelerometer,PROPULSION_t *propulsion){
 8011014:	b580      	push	{r7, lr}
 8011016:	b08a      	sub	sp, #40	; 0x28
 8011018:	af00      	add	r7, sp, #0
 801101a:	60f8      	str	r0, [r7, #12]
 801101c:	60b9      	str	r1, [r7, #8]
 801101e:	607a      	str	r2, [r7, #4]
 8011020:	603b      	str	r3, [r7, #0]

	float32_t error;
	float32_t pid_value;
	//Calculate the erro in °/s around yaw/z axis
	error = Pid_CalculateRollError(command, Accelerometer);
 8011022:	6879      	ldr	r1, [r7, #4]
 8011024:	68b8      	ldr	r0, [r7, #8]
 8011026:	f7ff ff7e 	bl	8010f26 <Pid_CalculateRollError>
 801102a:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	61fb      	str	r3, [r7, #28]
 8011032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011034:	61bb      	str	r3, [r7, #24]
    out = (S->A0 * in) +
 8011036:	69fb      	ldr	r3, [r7, #28]
 8011038:	ed93 7a00 	vldr	s14, [r3]
 801103c:	edd7 7a06 	vldr	s15, [r7, #24]
 8011040:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8011044:	69fb      	ldr	r3, [r7, #28]
 8011046:	edd3 6a01 	vldr	s13, [r3, #4]
 801104a:	69fb      	ldr	r3, [r7, #28]
 801104c:	edd3 7a03 	vldr	s15, [r3, #12]
 8011050:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8011054:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8011058:	69fb      	ldr	r3, [r7, #28]
 801105a:	edd3 6a02 	vldr	s13, [r3, #8]
 801105e:	69fb      	ldr	r3, [r7, #28]
 8011060:	edd3 7a04 	vldr	s15, [r3, #16]
 8011064:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011068:	ee37 7a27 	vadd.f32	s14, s14, s15
 801106c:	69fb      	ldr	r3, [r7, #28]
 801106e:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8011072:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011076:	edc7 7a05 	vstr	s15, [r7, #20]
    S->state[1] = S->state[0];
 801107a:	69fb      	ldr	r3, [r7, #28]
 801107c:	68da      	ldr	r2, [r3, #12]
 801107e:	69fb      	ldr	r3, [r7, #28]
 8011080:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8011082:	69fb      	ldr	r3, [r7, #28]
 8011084:	69ba      	ldr	r2, [r7, #24]
 8011086:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8011088:	69fb      	ldr	r3, [r7, #28]
 801108a:	697a      	ldr	r2, [r7, #20]
 801108c:	615a      	str	r2, [r3, #20]
    return (out);
 801108e:	697b      	ldr	r3, [r7, #20]
	//calculate the amount of mouve needed to force back the plane
	pid_value = arm_pid_f32(PID, error);
 8011090:	623b      	str	r3, [r7, #32]

	/*Left flaps up and right flaps down*/


#ifndef SERVO_LEFT_REVERSED
	if((propulsion->servo_left_timer_val + pid_value)>MAX_LEFT_EXTENSION){
 8011092:	683b      	ldr	r3, [r7, #0]
 8011094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011096:	ee07 3a90 	vmov	s15, r3
 801109a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801109e:	edd7 7a08 	vldr	s15, [r7, #32]
 80110a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80110a6:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8011198 <Pid_CompensateRoll+0x184>
 80110aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80110ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110b2:	dd04      	ble.n	80110be <Pid_CompensateRoll+0xaa>
		propulsion->servo_left_timer_val = MAX_LEFT_EXTENSION;
 80110b4:	683b      	ldr	r3, [r7, #0]
 80110b6:	f640 52ac 	movw	r2, #3500	; 0xdac
 80110ba:	625a      	str	r2, [r3, #36]	; 0x24
 80110bc:	e025      	b.n	801110a <Pid_CompensateRoll+0xf6>
	}
	else{
		if((propulsion->servo_left_timer_val + pid_value)<MIN_LEFT_EXTENSION){
 80110be:	683b      	ldr	r3, [r7, #0]
 80110c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110c2:	ee07 3a90 	vmov	s15, r3
 80110c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80110ca:	edd7 7a08 	vldr	s15, [r7, #32]
 80110ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80110d2:	ed9f 7a32 	vldr	s14, [pc, #200]	; 801119c <Pid_CompensateRoll+0x188>
 80110d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80110da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110de:	d504      	bpl.n	80110ea <Pid_CompensateRoll+0xd6>
			propulsion->servo_left_timer_val = MIN_LEFT_EXTENSION;
 80110e0:	683b      	ldr	r3, [r7, #0]
 80110e2:	f240 5214 	movw	r2, #1300	; 0x514
 80110e6:	625a      	str	r2, [r3, #36]	; 0x24
 80110e8:	e00f      	b.n	801110a <Pid_CompensateRoll+0xf6>
		}
		else{
			propulsion->servo_left_timer_val += pid_value;
 80110ea:	683b      	ldr	r3, [r7, #0]
 80110ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110ee:	ee07 3a90 	vmov	s15, r3
 80110f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80110f6:	edd7 7a08 	vldr	s15, [r7, #32]
 80110fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80110fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011102:	ee17 2a90 	vmov	r2, s15
 8011106:	683b      	ldr	r3, [r7, #0]
 8011108:	625a      	str	r2, [r3, #36]	; 0x24
			propulsion->servo_right_timer_val -= pid_value;
		}
	}
#endif
#ifdef SERVO_RIGHT_REVERSED
	if((propulsion->servo_right_timer_val + pid_value)>MIN_RIGHT_EXTENSION){
 801110a:	683b      	ldr	r3, [r7, #0]
 801110c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801110e:	ee07 3a90 	vmov	s15, r3
 8011112:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011116:	edd7 7a08 	vldr	s15, [r7, #32]
 801111a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801111e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8011198 <Pid_CompensateRoll+0x184>
 8011122:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801112a:	dd04      	ble.n	8011136 <Pid_CompensateRoll+0x122>
		propulsion->servo_right_timer_val = MIN_RIGHT_EXTENSION;
 801112c:	683b      	ldr	r3, [r7, #0]
 801112e:	f640 52ac 	movw	r2, #3500	; 0xdac
 8011132:	629a      	str	r2, [r3, #40]	; 0x28
 8011134:	e025      	b.n	8011182 <Pid_CompensateRoll+0x16e>
	}
	else{
		if((propulsion->servo_right_timer_val + pid_value)<MAX_RIGHT_EXTENSION){
 8011136:	683b      	ldr	r3, [r7, #0]
 8011138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801113a:	ee07 3a90 	vmov	s15, r3
 801113e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011142:	edd7 7a08 	vldr	s15, [r7, #32]
 8011146:	ee77 7a27 	vadd.f32	s15, s14, s15
 801114a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 801119c <Pid_CompensateRoll+0x188>
 801114e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011156:	d504      	bpl.n	8011162 <Pid_CompensateRoll+0x14e>
			propulsion->servo_right_timer_val = MAX_RIGHT_EXTENSION;
 8011158:	683b      	ldr	r3, [r7, #0]
 801115a:	f240 5214 	movw	r2, #1300	; 0x514
 801115e:	629a      	str	r2, [r3, #40]	; 0x28
 8011160:	e00f      	b.n	8011182 <Pid_CompensateRoll+0x16e>
		}
		else{
			propulsion->servo_right_timer_val += pid_value;
 8011162:	683b      	ldr	r3, [r7, #0]
 8011164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011166:	ee07 3a90 	vmov	s15, r3
 801116a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801116e:	edd7 7a08 	vldr	s15, [r7, #32]
 8011172:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011176:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801117a:	ee17 2a90 	vmov	r2, s15
 801117e:	683b      	ldr	r3, [r7, #0]
 8011180:	629a      	str	r2, [r3, #40]	; 0x28
			propulsion->servo_left_timer_val -= pid_value;
		}
	}
#endif

	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 8011182:	6838      	ldr	r0, [r7, #0]
 8011184:	f000 f8d2 	bl	801132c <PropulsionAndControl_UpdateLeftFlaps>
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8011188:	6838      	ldr	r0, [r7, #0]
 801118a:	f000 f8ed 	bl	8011368 <PropulsionAndControl_UpdateRightFlaps>

}
 801118e:	bf00      	nop
 8011190:	3728      	adds	r7, #40	; 0x28
 8011192:	46bd      	mov	sp, r7
 8011194:	bd80      	pop	{r7, pc}
 8011196:	bf00      	nop
 8011198:	455ac000 	.word	0x455ac000
 801119c:	44a28000 	.word	0x44a28000

080111a0 <Pid_CompensatePitch>:
//Function use to compensate a roatation on Pitch axis --> make sure to update accelerometer before reading and compensate
void Pid_CompensatePitch(arm_pid_instance_f32 *PID,COMMAND_t *command,BNO055_t *Accelerometer,PROPULSION_t *propulsion){
 80111a0:	b580      	push	{r7, lr}
 80111a2:	b08a      	sub	sp, #40	; 0x28
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	60f8      	str	r0, [r7, #12]
 80111a8:	60b9      	str	r1, [r7, #8]
 80111aa:	607a      	str	r2, [r7, #4]
 80111ac:	603b      	str	r3, [r7, #0]

	float32_t error;
	float32_t pid_value;
	//Calculate the erro in °/s around yaw/z axis
	error = Pid_CalculatePitchError(command, Accelerometer);
 80111ae:	6879      	ldr	r1, [r7, #4]
 80111b0:	68b8      	ldr	r0, [r7, #8]
 80111b2:	f7ff fe86 	bl	8010ec2 <Pid_CalculatePitchError>
 80111b6:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	61fb      	str	r3, [r7, #28]
 80111be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111c0:	61bb      	str	r3, [r7, #24]
    out = (S->A0 * in) +
 80111c2:	69fb      	ldr	r3, [r7, #28]
 80111c4:	ed93 7a00 	vldr	s14, [r3]
 80111c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80111cc:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80111d0:	69fb      	ldr	r3, [r7, #28]
 80111d2:	edd3 6a01 	vldr	s13, [r3, #4]
 80111d6:	69fb      	ldr	r3, [r7, #28]
 80111d8:	edd3 7a03 	vldr	s15, [r3, #12]
 80111dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80111e0:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80111e4:	69fb      	ldr	r3, [r7, #28]
 80111e6:	edd3 6a02 	vldr	s13, [r3, #8]
 80111ea:	69fb      	ldr	r3, [r7, #28]
 80111ec:	edd3 7a04 	vldr	s15, [r3, #16]
 80111f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80111f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80111f8:	69fb      	ldr	r3, [r7, #28]
 80111fa:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80111fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011202:	edc7 7a05 	vstr	s15, [r7, #20]
    S->state[1] = S->state[0];
 8011206:	69fb      	ldr	r3, [r7, #28]
 8011208:	68da      	ldr	r2, [r3, #12]
 801120a:	69fb      	ldr	r3, [r7, #28]
 801120c:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 801120e:	69fb      	ldr	r3, [r7, #28]
 8011210:	69ba      	ldr	r2, [r7, #24]
 8011212:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8011214:	69fb      	ldr	r3, [r7, #28]
 8011216:	697a      	ldr	r2, [r7, #20]
 8011218:	615a      	str	r2, [r3, #20]
    return (out);
 801121a:	697b      	ldr	r3, [r7, #20]
	//calculate the amount of mouve needed to force back the plane
	pid_value = arm_pid_f32(PID, error);
 801121c:	623b      	str	r3, [r7, #32]


#ifndef SERVO_LEFT_REVERSED
	if((propulsion->servo_left_timer_val + pid_value)>MAX_LEFT_EXTENSION){
 801121e:	683b      	ldr	r3, [r7, #0]
 8011220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011222:	ee07 3a90 	vmov	s15, r3
 8011226:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801122a:	edd7 7a08 	vldr	s15, [r7, #32]
 801122e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011232:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8011324 <Pid_CompensatePitch+0x184>
 8011236:	eef4 7ac7 	vcmpe.f32	s15, s14
 801123a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801123e:	dd04      	ble.n	801124a <Pid_CompensatePitch+0xaa>
		propulsion->servo_left_timer_val = MAX_LEFT_EXTENSION;
 8011240:	683b      	ldr	r3, [r7, #0]
 8011242:	f640 52ac 	movw	r2, #3500	; 0xdac
 8011246:	625a      	str	r2, [r3, #36]	; 0x24
 8011248:	e025      	b.n	8011296 <Pid_CompensatePitch+0xf6>
	}
	else{
		if((propulsion->servo_left_timer_val + pid_value)<MIN_LEFT_EXTENSION){
 801124a:	683b      	ldr	r3, [r7, #0]
 801124c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801124e:	ee07 3a90 	vmov	s15, r3
 8011252:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011256:	edd7 7a08 	vldr	s15, [r7, #32]
 801125a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801125e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8011328 <Pid_CompensatePitch+0x188>
 8011262:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801126a:	d504      	bpl.n	8011276 <Pid_CompensatePitch+0xd6>
			propulsion->servo_left_timer_val = MIN_LEFT_EXTENSION;
 801126c:	683b      	ldr	r3, [r7, #0]
 801126e:	f240 5214 	movw	r2, #1300	; 0x514
 8011272:	625a      	str	r2, [r3, #36]	; 0x24
 8011274:	e00f      	b.n	8011296 <Pid_CompensatePitch+0xf6>
		}
		else{
			propulsion->servo_left_timer_val += pid_value;
 8011276:	683b      	ldr	r3, [r7, #0]
 8011278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801127a:	ee07 3a90 	vmov	s15, r3
 801127e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011282:	edd7 7a08 	vldr	s15, [r7, #32]
 8011286:	ee77 7a27 	vadd.f32	s15, s14, s15
 801128a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801128e:	ee17 2a90 	vmov	r2, s15
 8011292:	683b      	ldr	r3, [r7, #0]
 8011294:	625a      	str	r2, [r3, #36]	; 0x24
			propulsion->servo_right_timer_val += pid_value;
		}
	}
#endif
#ifdef SERVO_RIGHT_REVERSED
	if((propulsion->servo_right_timer_val - pid_value)>MIN_RIGHT_EXTENSION){
 8011296:	683b      	ldr	r3, [r7, #0]
 8011298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801129a:	ee07 3a90 	vmov	s15, r3
 801129e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80112a2:	edd7 7a08 	vldr	s15, [r7, #32]
 80112a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80112aa:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8011324 <Pid_CompensatePitch+0x184>
 80112ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80112b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112b6:	dd04      	ble.n	80112c2 <Pid_CompensatePitch+0x122>
		propulsion->servo_right_timer_val = MIN_RIGHT_EXTENSION;
 80112b8:	683b      	ldr	r3, [r7, #0]
 80112ba:	f640 52ac 	movw	r2, #3500	; 0xdac
 80112be:	629a      	str	r2, [r3, #40]	; 0x28
 80112c0:	e025      	b.n	801130e <Pid_CompensatePitch+0x16e>
	}
	else{
		if((propulsion->servo_right_timer_val - pid_value)<MAX_RIGHT_EXTENSION){
 80112c2:	683b      	ldr	r3, [r7, #0]
 80112c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112c6:	ee07 3a90 	vmov	s15, r3
 80112ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80112ce:	edd7 7a08 	vldr	s15, [r7, #32]
 80112d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80112d6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8011328 <Pid_CompensatePitch+0x188>
 80112da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80112de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112e2:	d504      	bpl.n	80112ee <Pid_CompensatePitch+0x14e>
			propulsion->servo_right_timer_val = MAX_RIGHT_EXTENSION;
 80112e4:	683b      	ldr	r3, [r7, #0]
 80112e6:	f240 5214 	movw	r2, #1300	; 0x514
 80112ea:	629a      	str	r2, [r3, #40]	; 0x28
 80112ec:	e00f      	b.n	801130e <Pid_CompensatePitch+0x16e>
		}
		else{
			propulsion->servo_right_timer_val -= pid_value;
 80112ee:	683b      	ldr	r3, [r7, #0]
 80112f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112f2:	ee07 3a90 	vmov	s15, r3
 80112f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80112fa:	edd7 7a08 	vldr	s15, [r7, #32]
 80112fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011306:	ee17 2a90 	vmov	r2, s15
 801130a:	683b      	ldr	r3, [r7, #0]
 801130c:	629a      	str	r2, [r3, #40]	; 0x28
		}
	}
#endif


	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 801130e:	6838      	ldr	r0, [r7, #0]
 8011310:	f000 f80c 	bl	801132c <PropulsionAndControl_UpdateLeftFlaps>
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8011314:	6838      	ldr	r0, [r7, #0]
 8011316:	f000 f827 	bl	8011368 <PropulsionAndControl_UpdateRightFlaps>

}
 801131a:	bf00      	nop
 801131c:	3728      	adds	r7, #40	; 0x28
 801131e:	46bd      	mov	sp, r7
 8011320:	bd80      	pop	{r7, pc}
 8011322:	bf00      	nop
 8011324:	455ac000 	.word	0x455ac000
 8011328:	44a28000 	.word	0x44a28000

0801132c <PropulsionAndControl_UpdateLeftFlaps>:
void PropulsionAndControl_UpdateESC(PROPULSION_t *propulsion){
	uint32_t * timer_base_addr_ptr = &(propulsion->timer->Instance->CCR1);
	*(timer_base_addr_ptr + ((propulsion->esc_timer_channel-1))) = propulsion->esc_timer_val;
	propulsion->update_timer = 0x01;
}
void PropulsionAndControl_UpdateLeftFlaps(PROPULSION_t *propulsion){
 801132c:	b480      	push	{r7}
 801132e:	b085      	sub	sp, #20
 8011330:	af00      	add	r7, sp, #0
 8011332:	6078      	str	r0, [r7, #4]
	uint32_t * timer_base_addr_ptr = &(propulsion->timer->Instance->CCR1);
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	699b      	ldr	r3, [r3, #24]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	3334      	adds	r3, #52	; 0x34
 801133c:	60fb      	str	r3, [r7, #12]
	*(timer_base_addr_ptr + ((propulsion->servo_left_timer_channel-1))) = propulsion->servo_left_timer_val;
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	7f5b      	ldrb	r3, [r3, #29]
 8011342:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011346:	3b01      	subs	r3, #1
 8011348:	009b      	lsls	r3, r3, #2
 801134a:	68fa      	ldr	r2, [r7, #12]
 801134c:	4413      	add	r3, r2
 801134e:	687a      	ldr	r2, [r7, #4]
 8011350:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8011352:	601a      	str	r2, [r3, #0]
	propulsion->update_timer = 0x01;
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	2201      	movs	r2, #1
 8011358:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 801135c:	bf00      	nop
 801135e:	3714      	adds	r7, #20
 8011360:	46bd      	mov	sp, r7
 8011362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011366:	4770      	bx	lr

08011368 <PropulsionAndControl_UpdateRightFlaps>:
void PropulsionAndControl_UpdateRightFlaps(PROPULSION_t *propulsion){
 8011368:	b480      	push	{r7}
 801136a:	b085      	sub	sp, #20
 801136c:	af00      	add	r7, sp, #0
 801136e:	6078      	str	r0, [r7, #4]
	uint32_t * timer_base_addr_ptr = &(propulsion->timer->Instance->CCR1);
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	699b      	ldr	r3, [r3, #24]
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	3334      	adds	r3, #52	; 0x34
 8011378:	60fb      	str	r3, [r7, #12]
	*(timer_base_addr_ptr + ((propulsion->servo_right_timer_channel-1))) = propulsion->servo_right_timer_val;
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	7f9b      	ldrb	r3, [r3, #30]
 801137e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011382:	3b01      	subs	r3, #1
 8011384:	009b      	lsls	r3, r3, #2
 8011386:	68fa      	ldr	r2, [r7, #12]
 8011388:	4413      	add	r3, r2
 801138a:	687a      	ldr	r2, [r7, #4]
 801138c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 801138e:	601a      	str	r2, [r3, #0]
	propulsion->update_timer = 0x01;
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	2201      	movs	r2, #1
 8011394:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8011398:	bf00      	nop
 801139a:	3714      	adds	r7, #20
 801139c:	46bd      	mov	sp, r7
 801139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a2:	4770      	bx	lr

080113a4 <PropulsionAndControl_Init>:

void PropulsionAndControl_Init(PROPULSION_t *propulsion,uint32_t esc_pin,GPIO_TypeDef *esc_port,uint32_t servo_left_pin,GPIO_TypeDef *servo_left_port,uint32_t servo_right_pin,GPIO_TypeDef *servo_right_port,uint32_t esc_channel,uint32_t servo_left_channel,uint32_t servo_right_channel,TIM_HandleTypeDef *timer_entity){
 80113a4:	b580      	push	{r7, lr}
 80113a6:	b084      	sub	sp, #16
 80113a8:	af00      	add	r7, sp, #0
 80113aa:	60f8      	str	r0, [r7, #12]
 80113ac:	60b9      	str	r1, [r7, #8]
 80113ae:	607a      	str	r2, [r7, #4]
 80113b0:	603b      	str	r3, [r7, #0]

	//Store all pins into the struct
	propulsion->esc_pin = esc_pin;
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	68ba      	ldr	r2, [r7, #8]
 80113b6:	611a      	str	r2, [r3, #16]
	propulsion->esc_port = esc_port;
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	687a      	ldr	r2, [r7, #4]
 80113bc:	615a      	str	r2, [r3, #20]
	propulsion->esc_timer_channel = esc_channel;
 80113be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113c0:	b2da      	uxtb	r2, r3
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	771a      	strb	r2, [r3, #28]

	propulsion->servo_left_pin = servo_left_pin;
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	683a      	ldr	r2, [r7, #0]
 80113ca:	601a      	str	r2, [r3, #0]
	propulsion->servo_left_port = servo_left_port;
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	69ba      	ldr	r2, [r7, #24]
 80113d0:	605a      	str	r2, [r3, #4]
	propulsion->servo_left_timer_channel = servo_left_channel;
 80113d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113d4:	b2da      	uxtb	r2, r3
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	775a      	strb	r2, [r3, #29]

	propulsion->servo_right_pin = servo_right_pin;
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	69fa      	ldr	r2, [r7, #28]
 80113de:	609a      	str	r2, [r3, #8]
	propulsion->servo_right_port = servo_right_port;
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	6a3a      	ldr	r2, [r7, #32]
 80113e4:	60da      	str	r2, [r3, #12]
	propulsion->servo_right_timer_channel = servo_right_channel;
 80113e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113e8:	b2da      	uxtb	r2, r3
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	779a      	strb	r2, [r3, #30]

	propulsion->timer = timer_entity;
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80113f2:	619a      	str	r2, [r3, #24]

	//put the flaps at minimum
	HAL_Delay(20);
 80113f4:	2014      	movs	r0, #20
 80113f6:	f000 fd6f 	bl	8011ed8 <HAL_Delay>
	propulsion->servo_left_timer_val = MIN_LEFT_EXTENSION;
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	f240 5214 	movw	r2, #1300	; 0x514
 8011400:	625a      	str	r2, [r3, #36]	; 0x24
	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 8011402:	68f8      	ldr	r0, [r7, #12]
 8011404:	f7ff ff92 	bl	801132c <PropulsionAndControl_UpdateLeftFlaps>

	//put the flaps at minimum
	propulsion->servo_right_timer_val = MIN_RIGHT_EXTENSION;
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	f640 52ac 	movw	r2, #3500	; 0xdac
 801140e:	629a      	str	r2, [r3, #40]	; 0x28
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8011410:	68f8      	ldr	r0, [r7, #12]
 8011412:	f7ff ffa9 	bl	8011368 <PropulsionAndControl_UpdateRightFlaps>

	//put the flaps at maximum
	HAL_Delay(1500);
 8011416:	f240 50dc 	movw	r0, #1500	; 0x5dc
 801141a:	f000 fd5d 	bl	8011ed8 <HAL_Delay>
	propulsion->servo_left_timer_val = MAX_LEFT_EXTENSION;
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	f640 52ac 	movw	r2, #3500	; 0xdac
 8011424:	625a      	str	r2, [r3, #36]	; 0x24
	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 8011426:	68f8      	ldr	r0, [r7, #12]
 8011428:	f7ff ff80 	bl	801132c <PropulsionAndControl_UpdateLeftFlaps>

	//put the flaps at maximum
	propulsion->servo_right_timer_val = MAX_RIGHT_EXTENSION;
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	f240 5214 	movw	r2, #1300	; 0x514
 8011432:	629a      	str	r2, [r3, #40]	; 0x28
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8011434:	68f8      	ldr	r0, [r7, #12]
 8011436:	f7ff ff97 	bl	8011368 <PropulsionAndControl_UpdateRightFlaps>

	HAL_Delay(1500);
 801143a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 801143e:	f000 fd4b 	bl	8011ed8 <HAL_Delay>
	propulsion->servo_left_timer_val = (MAX_LEFT_EXTENSION+MIN_LEFT_EXTENSION)/2;
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8011448:	625a      	str	r2, [r3, #36]	; 0x24
	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 801144a:	68f8      	ldr	r0, [r7, #12]
 801144c:	f7ff ff6e 	bl	801132c <PropulsionAndControl_UpdateLeftFlaps>

	//put the flaps at minimum
	propulsion->servo_right_timer_val = (MAX_RIGHT_EXTENSION+MIN_RIGHT_EXTENSION)/2;
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8011456:	629a      	str	r2, [r3, #40]	; 0x28
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8011458:	68f8      	ldr	r0, [r7, #12]
 801145a:	f7ff ff85 	bl	8011368 <PropulsionAndControl_UpdateRightFlaps>
}
 801145e:	bf00      	nop
 8011460:	3710      	adds	r7, #16
 8011462:	46bd      	mov	sp, r7
 8011464:	bd80      	pop	{r7, pc}
	...

08011468 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8011468:	b580      	push	{r7, lr}
 801146a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 801146c:	4b1b      	ldr	r3, [pc, #108]	; (80114dc <MX_SPI1_Init+0x74>)
 801146e:	4a1c      	ldr	r2, [pc, #112]	; (80114e0 <MX_SPI1_Init+0x78>)
 8011470:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8011472:	4b1a      	ldr	r3, [pc, #104]	; (80114dc <MX_SPI1_Init+0x74>)
 8011474:	f44f 7282 	mov.w	r2, #260	; 0x104
 8011478:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 801147a:	4b18      	ldr	r3, [pc, #96]	; (80114dc <MX_SPI1_Init+0x74>)
 801147c:	2200      	movs	r2, #0
 801147e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8011480:	4b16      	ldr	r3, [pc, #88]	; (80114dc <MX_SPI1_Init+0x74>)
 8011482:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8011486:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8011488:	4b14      	ldr	r3, [pc, #80]	; (80114dc <MX_SPI1_Init+0x74>)
 801148a:	2200      	movs	r2, #0
 801148c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 801148e:	4b13      	ldr	r3, [pc, #76]	; (80114dc <MX_SPI1_Init+0x74>)
 8011490:	2201      	movs	r2, #1
 8011492:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8011494:	4b11      	ldr	r3, [pc, #68]	; (80114dc <MX_SPI1_Init+0x74>)
 8011496:	f44f 7200 	mov.w	r2, #512	; 0x200
 801149a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 801149c:	4b0f      	ldr	r3, [pc, #60]	; (80114dc <MX_SPI1_Init+0x74>)
 801149e:	2228      	movs	r2, #40	; 0x28
 80114a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80114a2:	4b0e      	ldr	r3, [pc, #56]	; (80114dc <MX_SPI1_Init+0x74>)
 80114a4:	2200      	movs	r2, #0
 80114a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80114a8:	4b0c      	ldr	r3, [pc, #48]	; (80114dc <MX_SPI1_Init+0x74>)
 80114aa:	2200      	movs	r2, #0
 80114ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80114ae:	4b0b      	ldr	r3, [pc, #44]	; (80114dc <MX_SPI1_Init+0x74>)
 80114b0:	2200      	movs	r2, #0
 80114b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80114b4:	4b09      	ldr	r3, [pc, #36]	; (80114dc <MX_SPI1_Init+0x74>)
 80114b6:	2207      	movs	r2, #7
 80114b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80114ba:	4b08      	ldr	r3, [pc, #32]	; (80114dc <MX_SPI1_Init+0x74>)
 80114bc:	2200      	movs	r2, #0
 80114be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80114c0:	4b06      	ldr	r3, [pc, #24]	; (80114dc <MX_SPI1_Init+0x74>)
 80114c2:	2200      	movs	r2, #0
 80114c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80114c6:	4805      	ldr	r0, [pc, #20]	; (80114dc <MX_SPI1_Init+0x74>)
 80114c8:	f004 fb70 	bl	8015bac <HAL_SPI_Init>
 80114cc:	4603      	mov	r3, r0
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d001      	beq.n	80114d6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80114d2:	f7ff fcf1 	bl	8010eb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80114d6:	bf00      	nop
 80114d8:	bd80      	pop	{r7, pc}
 80114da:	bf00      	nop
 80114dc:	20000768 	.word	0x20000768
 80114e0:	40013000 	.word	0x40013000

080114e4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80114e4:	b580      	push	{r7, lr}
 80114e6:	b08a      	sub	sp, #40	; 0x28
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80114ec:	f107 0314 	add.w	r3, r7, #20
 80114f0:	2200      	movs	r2, #0
 80114f2:	601a      	str	r2, [r3, #0]
 80114f4:	605a      	str	r2, [r3, #4]
 80114f6:	609a      	str	r2, [r3, #8]
 80114f8:	60da      	str	r2, [r3, #12]
 80114fa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	4a17      	ldr	r2, [pc, #92]	; (8011560 <HAL_SPI_MspInit+0x7c>)
 8011502:	4293      	cmp	r3, r2
 8011504:	d128      	bne.n	8011558 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8011506:	4b17      	ldr	r3, [pc, #92]	; (8011564 <HAL_SPI_MspInit+0x80>)
 8011508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801150a:	4a16      	ldr	r2, [pc, #88]	; (8011564 <HAL_SPI_MspInit+0x80>)
 801150c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8011510:	6613      	str	r3, [r2, #96]	; 0x60
 8011512:	4b14      	ldr	r3, [pc, #80]	; (8011564 <HAL_SPI_MspInit+0x80>)
 8011514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011516:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801151a:	613b      	str	r3, [r7, #16]
 801151c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801151e:	4b11      	ldr	r3, [pc, #68]	; (8011564 <HAL_SPI_MspInit+0x80>)
 8011520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011522:	4a10      	ldr	r2, [pc, #64]	; (8011564 <HAL_SPI_MspInit+0x80>)
 8011524:	f043 0301 	orr.w	r3, r3, #1
 8011528:	64d3      	str	r3, [r2, #76]	; 0x4c
 801152a:	4b0e      	ldr	r3, [pc, #56]	; (8011564 <HAL_SPI_MspInit+0x80>)
 801152c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801152e:	f003 0301 	and.w	r3, r3, #1
 8011532:	60fb      	str	r3, [r7, #12]
 8011534:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8011536:	23e0      	movs	r3, #224	; 0xe0
 8011538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801153a:	2302      	movs	r3, #2
 801153c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801153e:	2300      	movs	r3, #0
 8011540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011542:	2300      	movs	r3, #0
 8011544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8011546:	2305      	movs	r3, #5
 8011548:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801154a:	f107 0314 	add.w	r3, r7, #20
 801154e:	4619      	mov	r1, r3
 8011550:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8011554:	f002 fb00 	bl	8013b58 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8011558:	bf00      	nop
 801155a:	3728      	adds	r7, #40	; 0x28
 801155c:	46bd      	mov	sp, r7
 801155e:	bd80      	pop	{r7, pc}
 8011560:	40013000 	.word	0x40013000
 8011564:	40021000 	.word	0x40021000

08011568 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8011568:	b580      	push	{r7, lr}
 801156a:	b082      	sub	sp, #8
 801156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801156e:	4b11      	ldr	r3, [pc, #68]	; (80115b4 <HAL_MspInit+0x4c>)
 8011570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011572:	4a10      	ldr	r2, [pc, #64]	; (80115b4 <HAL_MspInit+0x4c>)
 8011574:	f043 0301 	orr.w	r3, r3, #1
 8011578:	6613      	str	r3, [r2, #96]	; 0x60
 801157a:	4b0e      	ldr	r3, [pc, #56]	; (80115b4 <HAL_MspInit+0x4c>)
 801157c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801157e:	f003 0301 	and.w	r3, r3, #1
 8011582:	607b      	str	r3, [r7, #4]
 8011584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8011586:	4b0b      	ldr	r3, [pc, #44]	; (80115b4 <HAL_MspInit+0x4c>)
 8011588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801158a:	4a0a      	ldr	r2, [pc, #40]	; (80115b4 <HAL_MspInit+0x4c>)
 801158c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011590:	6593      	str	r3, [r2, #88]	; 0x58
 8011592:	4b08      	ldr	r3, [pc, #32]	; (80115b4 <HAL_MspInit+0x4c>)
 8011594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801159a:	603b      	str	r3, [r7, #0]
 801159c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 801159e:	2200      	movs	r2, #0
 80115a0:	210f      	movs	r1, #15
 80115a2:	f06f 0001 	mvn.w	r0, #1
 80115a6:	f001 ff7d 	bl	80134a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80115aa:	bf00      	nop
 80115ac:	3708      	adds	r7, #8
 80115ae:	46bd      	mov	sp, r7
 80115b0:	bd80      	pop	{r7, pc}
 80115b2:	bf00      	nop
 80115b4:	40021000 	.word	0x40021000

080115b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b08c      	sub	sp, #48	; 0x30
 80115bc:	af00      	add	r7, sp, #0
 80115be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80115c0:	2300      	movs	r3, #0
 80115c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80115c4:	2300      	movs	r3, #0
 80115c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80115c8:	4b2c      	ldr	r3, [pc, #176]	; (801167c <HAL_InitTick+0xc4>)
 80115ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80115cc:	4a2b      	ldr	r2, [pc, #172]	; (801167c <HAL_InitTick+0xc4>)
 80115ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80115d2:	6613      	str	r3, [r2, #96]	; 0x60
 80115d4:	4b29      	ldr	r3, [pc, #164]	; (801167c <HAL_InitTick+0xc4>)
 80115d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80115d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80115dc:	60bb      	str	r3, [r7, #8]
 80115de:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80115e0:	f107 020c 	add.w	r2, r7, #12
 80115e4:	f107 0310 	add.w	r3, r7, #16
 80115e8:	4611      	mov	r1, r2
 80115ea:	4618      	mov	r0, r3
 80115ec:	f004 f818 	bl	8015620 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80115f0:	f004 f800 	bl	80155f4 <HAL_RCC_GetPCLK2Freq>
 80115f4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80115f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115f8:	4a21      	ldr	r2, [pc, #132]	; (8011680 <HAL_InitTick+0xc8>)
 80115fa:	fba2 2303 	umull	r2, r3, r2, r3
 80115fe:	0c9b      	lsrs	r3, r3, #18
 8011600:	3b01      	subs	r3, #1
 8011602:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8011604:	4b1f      	ldr	r3, [pc, #124]	; (8011684 <HAL_InitTick+0xcc>)
 8011606:	4a20      	ldr	r2, [pc, #128]	; (8011688 <HAL_InitTick+0xd0>)
 8011608:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 801160a:	4b1e      	ldr	r3, [pc, #120]	; (8011684 <HAL_InitTick+0xcc>)
 801160c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8011610:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8011612:	4a1c      	ldr	r2, [pc, #112]	; (8011684 <HAL_InitTick+0xcc>)
 8011614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011616:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8011618:	4b1a      	ldr	r3, [pc, #104]	; (8011684 <HAL_InitTick+0xcc>)
 801161a:	2200      	movs	r2, #0
 801161c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 801161e:	4b19      	ldr	r3, [pc, #100]	; (8011684 <HAL_InitTick+0xcc>)
 8011620:	2200      	movs	r2, #0
 8011622:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8011624:	4817      	ldr	r0, [pc, #92]	; (8011684 <HAL_InitTick+0xcc>)
 8011626:	f004 fb6c 	bl	8015d02 <HAL_TIM_Base_Init>
 801162a:	4603      	mov	r3, r0
 801162c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8011630:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011634:	2b00      	cmp	r3, #0
 8011636:	d11b      	bne.n	8011670 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8011638:	4812      	ldr	r0, [pc, #72]	; (8011684 <HAL_InitTick+0xcc>)
 801163a:	f004 fbc3 	bl	8015dc4 <HAL_TIM_Base_Start_IT>
 801163e:	4603      	mov	r3, r0
 8011640:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8011644:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011648:	2b00      	cmp	r3, #0
 801164a:	d111      	bne.n	8011670 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 801164c:	2019      	movs	r0, #25
 801164e:	f001 ff43 	bl	80134d8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	2b0f      	cmp	r3, #15
 8011656:	d808      	bhi.n	801166a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8011658:	2200      	movs	r2, #0
 801165a:	6879      	ldr	r1, [r7, #4]
 801165c:	2019      	movs	r0, #25
 801165e:	f001 ff21 	bl	80134a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8011662:	4a0a      	ldr	r2, [pc, #40]	; (801168c <HAL_InitTick+0xd4>)
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	6013      	str	r3, [r2, #0]
 8011668:	e002      	b.n	8011670 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 801166a:	2301      	movs	r3, #1
 801166c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8011670:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011674:	4618      	mov	r0, r3
 8011676:	3730      	adds	r7, #48	; 0x30
 8011678:	46bd      	mov	sp, r7
 801167a:	bd80      	pop	{r7, pc}
 801167c:	40021000 	.word	0x40021000
 8011680:	431bde83 	.word	0x431bde83
 8011684:	200007cc 	.word	0x200007cc
 8011688:	40012c00 	.word	0x40012c00
 801168c:	20000008 	.word	0x20000008

08011690 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8011690:	b480      	push	{r7}
 8011692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8011694:	e7fe      	b.n	8011694 <NMI_Handler+0x4>

08011696 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8011696:	b480      	push	{r7}
 8011698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801169a:	e7fe      	b.n	801169a <HardFault_Handler+0x4>

0801169c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801169c:	b480      	push	{r7}
 801169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80116a0:	e7fe      	b.n	80116a0 <MemManage_Handler+0x4>

080116a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80116a2:	b480      	push	{r7}
 80116a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80116a6:	e7fe      	b.n	80116a6 <BusFault_Handler+0x4>

080116a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80116a8:	b480      	push	{r7}
 80116aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80116ac:	e7fe      	b.n	80116ac <UsageFault_Handler+0x4>

080116ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80116ae:	b480      	push	{r7}
 80116b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80116b2:	bf00      	nop
 80116b4:	46bd      	mov	sp, r7
 80116b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ba:	4770      	bx	lr

080116bc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80116bc:	b580      	push	{r7, lr}
 80116be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80116c0:	4802      	ldr	r0, [pc, #8]	; (80116cc <DMA1_Channel1_IRQHandler+0x10>)
 80116c2:	f002 f8fa 	bl	80138ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80116c6:	bf00      	nop
 80116c8:	bd80      	pop	{r7, pc}
 80116ca:	bf00      	nop
 80116cc:	20000100 	.word	0x20000100

080116d0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80116d0:	b580      	push	{r7, lr}
 80116d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80116d4:	4802      	ldr	r0, [pc, #8]	; (80116e0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80116d6:	f004 fd57 	bl	8016188 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80116da:	bf00      	nop
 80116dc:	bd80      	pop	{r7, pc}
 80116de:	bf00      	nop
 80116e0:	200007cc 	.word	0x200007cc

080116e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80116e4:	b580      	push	{r7, lr}
 80116e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_IT_Pin);
 80116e8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80116ec:	f002 fbe8 	bl	8013ec0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  BNO055_ClearIntFlag(&hi2c2);
 80116f0:	4805      	ldr	r0, [pc, #20]	; (8011708 <EXTI15_10_IRQHandler+0x24>)
 80116f2:	f7fd ff78 	bl	800f5e6 <BNO055_ClearIntFlag>
  xSemaphoreGiveFromISR(HG_PROTECTION_SEMHandle,1);
 80116f6:	4b05      	ldr	r3, [pc, #20]	; (801170c <EXTI15_10_IRQHandler+0x28>)
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	2101      	movs	r1, #1
 80116fc:	4618      	mov	r0, r3
 80116fe:	f008 f927 	bl	8019950 <xQueueGiveFromISR>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8011702:	bf00      	nop
 8011704:	bd80      	pop	{r7, pc}
 8011706:	bf00      	nop
 8011708:	200001fc 	.word	0x200001fc
 801170c:	200001f8 	.word	0x200001f8

08011710 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 8011710:	b580      	push	{r7, lr}
 8011712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8011714:	4805      	ldr	r0, [pc, #20]	; (801172c <UART4_IRQHandler+0x1c>)
 8011716:	f005 fed7 	bl	80174c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  xSemaphoreGiveFromISR(GPS_UART_SemaphoreHandle,pdFALSE);
 801171a:	4b05      	ldr	r3, [pc, #20]	; (8011730 <UART4_IRQHandler+0x20>)
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	2100      	movs	r1, #0
 8011720:	4618      	mov	r0, r3
 8011722:	f008 f915 	bl	8019950 <xQueueGiveFromISR>

  /* USER CODE END UART4_IRQn 1 */
}
 8011726:	bf00      	nop
 8011728:	bd80      	pop	{r7, pc}
 801172a:	bf00      	nop
 801172c:	20000900 	.word	0x20000900
 8011730:	200001f4 	.word	0x200001f4

08011734 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8011734:	b580      	push	{r7, lr}
 8011736:	b086      	sub	sp, #24
 8011738:	af00      	add	r7, sp, #0
 801173a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 801173c:	4a14      	ldr	r2, [pc, #80]	; (8011790 <_sbrk+0x5c>)
 801173e:	4b15      	ldr	r3, [pc, #84]	; (8011794 <_sbrk+0x60>)
 8011740:	1ad3      	subs	r3, r2, r3
 8011742:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8011744:	697b      	ldr	r3, [r7, #20]
 8011746:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8011748:	4b13      	ldr	r3, [pc, #76]	; (8011798 <_sbrk+0x64>)
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d102      	bne.n	8011756 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8011750:	4b11      	ldr	r3, [pc, #68]	; (8011798 <_sbrk+0x64>)
 8011752:	4a12      	ldr	r2, [pc, #72]	; (801179c <_sbrk+0x68>)
 8011754:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8011756:	4b10      	ldr	r3, [pc, #64]	; (8011798 <_sbrk+0x64>)
 8011758:	681a      	ldr	r2, [r3, #0]
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	4413      	add	r3, r2
 801175e:	693a      	ldr	r2, [r7, #16]
 8011760:	429a      	cmp	r2, r3
 8011762:	d207      	bcs.n	8011774 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8011764:	f00a f874 	bl	801b850 <__errno>
 8011768:	4603      	mov	r3, r0
 801176a:	220c      	movs	r2, #12
 801176c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 801176e:	f04f 33ff 	mov.w	r3, #4294967295
 8011772:	e009      	b.n	8011788 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8011774:	4b08      	ldr	r3, [pc, #32]	; (8011798 <_sbrk+0x64>)
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801177a:	4b07      	ldr	r3, [pc, #28]	; (8011798 <_sbrk+0x64>)
 801177c:	681a      	ldr	r2, [r3, #0]
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	4413      	add	r3, r2
 8011782:	4a05      	ldr	r2, [pc, #20]	; (8011798 <_sbrk+0x64>)
 8011784:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8011786:	68fb      	ldr	r3, [r7, #12]
}
 8011788:	4618      	mov	r0, r3
 801178a:	3718      	adds	r7, #24
 801178c:	46bd      	mov	sp, r7
 801178e:	bd80      	pop	{r7, pc}
 8011790:	20020000 	.word	0x20020000
 8011794:	00000400 	.word	0x00000400
 8011798:	20000818 	.word	0x20000818
 801179c:	20003cc0 	.word	0x20003cc0

080117a0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80117a0:	b480      	push	{r7}
 80117a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80117a4:	4b08      	ldr	r3, [pc, #32]	; (80117c8 <SystemInit+0x28>)
 80117a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80117aa:	4a07      	ldr	r2, [pc, #28]	; (80117c8 <SystemInit+0x28>)
 80117ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80117b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 80117b4:	4b04      	ldr	r3, [pc, #16]	; (80117c8 <SystemInit+0x28>)
 80117b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80117ba:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80117bc:	bf00      	nop
 80117be:	46bd      	mov	sp, r7
 80117c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c4:	4770      	bx	lr
 80117c6:	bf00      	nop
 80117c8:	e000ed00 	.word	0xe000ed00

080117cc <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b08a      	sub	sp, #40	; 0x28
 80117d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80117d2:	f107 031c 	add.w	r3, r7, #28
 80117d6:	2200      	movs	r2, #0
 80117d8:	601a      	str	r2, [r3, #0]
 80117da:	605a      	str	r2, [r3, #4]
 80117dc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80117de:	463b      	mov	r3, r7
 80117e0:	2200      	movs	r2, #0
 80117e2:	601a      	str	r2, [r3, #0]
 80117e4:	605a      	str	r2, [r3, #4]
 80117e6:	609a      	str	r2, [r3, #8]
 80117e8:	60da      	str	r2, [r3, #12]
 80117ea:	611a      	str	r2, [r3, #16]
 80117ec:	615a      	str	r2, [r3, #20]
 80117ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80117f0:	4b20      	ldr	r3, [pc, #128]	; (8011874 <MX_TIM2_Init+0xa8>)
 80117f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80117f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80117f8:	4b1e      	ldr	r3, [pc, #120]	; (8011874 <MX_TIM2_Init+0xa8>)
 80117fa:	2200      	movs	r2, #0
 80117fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80117fe:	4b1d      	ldr	r3, [pc, #116]	; (8011874 <MX_TIM2_Init+0xa8>)
 8011800:	2200      	movs	r2, #0
 8011802:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1440000;
 8011804:	4b1b      	ldr	r3, [pc, #108]	; (8011874 <MX_TIM2_Init+0xa8>)
 8011806:	4a1c      	ldr	r2, [pc, #112]	; (8011878 <MX_TIM2_Init+0xac>)
 8011808:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801180a:	4b1a      	ldr	r3, [pc, #104]	; (8011874 <MX_TIM2_Init+0xa8>)
 801180c:	2200      	movs	r2, #0
 801180e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011810:	4b18      	ldr	r3, [pc, #96]	; (8011874 <MX_TIM2_Init+0xa8>)
 8011812:	2200      	movs	r2, #0
 8011814:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8011816:	4817      	ldr	r0, [pc, #92]	; (8011874 <MX_TIM2_Init+0xa8>)
 8011818:	f004 fb4c 	bl	8015eb4 <HAL_TIM_PWM_Init>
 801181c:	4603      	mov	r3, r0
 801181e:	2b00      	cmp	r3, #0
 8011820:	d001      	beq.n	8011826 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8011822:	f7ff fb49 	bl	8010eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8011826:	2300      	movs	r3, #0
 8011828:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801182a:	2300      	movs	r3, #0
 801182c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 801182e:	f107 031c 	add.w	r3, r7, #28
 8011832:	4619      	mov	r1, r3
 8011834:	480f      	ldr	r0, [pc, #60]	; (8011874 <MX_TIM2_Init+0xa8>)
 8011836:	f005 fb5b 	bl	8016ef0 <HAL_TIMEx_MasterConfigSynchronization>
 801183a:	4603      	mov	r3, r0
 801183c:	2b00      	cmp	r3, #0
 801183e:	d001      	beq.n	8011844 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8011840:	f7ff fb3a 	bl	8010eb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8011844:	2360      	movs	r3, #96	; 0x60
 8011846:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8011848:	2300      	movs	r3, #0
 801184a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801184c:	2300      	movs	r3, #0
 801184e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8011850:	2300      	movs	r3, #0
 8011852:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8011854:	463b      	mov	r3, r7
 8011856:	2208      	movs	r2, #8
 8011858:	4619      	mov	r1, r3
 801185a:	4806      	ldr	r0, [pc, #24]	; (8011874 <MX_TIM2_Init+0xa8>)
 801185c:	f004 fe14 	bl	8016488 <HAL_TIM_PWM_ConfigChannel>
 8011860:	4603      	mov	r3, r0
 8011862:	2b00      	cmp	r3, #0
 8011864:	d001      	beq.n	801186a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8011866:	f7ff fb27 	bl	8010eb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 801186a:	bf00      	nop
 801186c:	3728      	adds	r7, #40	; 0x28
 801186e:	46bd      	mov	sp, r7
 8011870:	bd80      	pop	{r7, pc}
 8011872:	bf00      	nop
 8011874:	2000081c 	.word	0x2000081c
 8011878:	0015f900 	.word	0x0015f900

0801187c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 801187c:	b580      	push	{r7, lr}
 801187e:	b08a      	sub	sp, #40	; 0x28
 8011880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8011882:	f107 031c 	add.w	r3, r7, #28
 8011886:	2200      	movs	r2, #0
 8011888:	601a      	str	r2, [r3, #0]
 801188a:	605a      	str	r2, [r3, #4]
 801188c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 801188e:	463b      	mov	r3, r7
 8011890:	2200      	movs	r2, #0
 8011892:	601a      	str	r2, [r3, #0]
 8011894:	605a      	str	r2, [r3, #4]
 8011896:	609a      	str	r2, [r3, #8]
 8011898:	60da      	str	r2, [r3, #12]
 801189a:	611a      	str	r2, [r3, #16]
 801189c:	615a      	str	r2, [r3, #20]
 801189e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80118a0:	4b21      	ldr	r3, [pc, #132]	; (8011928 <MX_TIM3_Init+0xac>)
 80118a2:	4a22      	ldr	r2, [pc, #136]	; (801192c <MX_TIM3_Init+0xb0>)
 80118a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 50;
 80118a6:	4b20      	ldr	r3, [pc, #128]	; (8011928 <MX_TIM3_Init+0xac>)
 80118a8:	2232      	movs	r2, #50	; 0x32
 80118aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80118ac:	4b1e      	ldr	r3, [pc, #120]	; (8011928 <MX_TIM3_Init+0xac>)
 80118ae:	2200      	movs	r2, #0
 80118b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7200;
 80118b2:	4b1d      	ldr	r3, [pc, #116]	; (8011928 <MX_TIM3_Init+0xac>)
 80118b4:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80118b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80118ba:	4b1b      	ldr	r3, [pc, #108]	; (8011928 <MX_TIM3_Init+0xac>)
 80118bc:	2200      	movs	r2, #0
 80118be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80118c0:	4b19      	ldr	r3, [pc, #100]	; (8011928 <MX_TIM3_Init+0xac>)
 80118c2:	2200      	movs	r2, #0
 80118c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80118c6:	4818      	ldr	r0, [pc, #96]	; (8011928 <MX_TIM3_Init+0xac>)
 80118c8:	f004 faf4 	bl	8015eb4 <HAL_TIM_PWM_Init>
 80118cc:	4603      	mov	r3, r0
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d001      	beq.n	80118d6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80118d2:	f7ff faf1 	bl	8010eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80118d6:	2300      	movs	r3, #0
 80118d8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80118da:	2300      	movs	r3, #0
 80118dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80118de:	f107 031c 	add.w	r3, r7, #28
 80118e2:	4619      	mov	r1, r3
 80118e4:	4810      	ldr	r0, [pc, #64]	; (8011928 <MX_TIM3_Init+0xac>)
 80118e6:	f005 fb03 	bl	8016ef0 <HAL_TIMEx_MasterConfigSynchronization>
 80118ea:	4603      	mov	r3, r0
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d001      	beq.n	80118f4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80118f0:	f7ff fae2 	bl	8010eb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80118f4:	2360      	movs	r3, #96	; 0x60
 80118f6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80118f8:	2300      	movs	r3, #0
 80118fa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80118fc:	2300      	movs	r3, #0
 80118fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8011900:	2300      	movs	r3, #0
 8011902:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8011904:	463b      	mov	r3, r7
 8011906:	2200      	movs	r2, #0
 8011908:	4619      	mov	r1, r3
 801190a:	4807      	ldr	r0, [pc, #28]	; (8011928 <MX_TIM3_Init+0xac>)
 801190c:	f004 fdbc 	bl	8016488 <HAL_TIM_PWM_ConfigChannel>
 8011910:	4603      	mov	r3, r0
 8011912:	2b00      	cmp	r3, #0
 8011914:	d001      	beq.n	801191a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8011916:	f7ff facf 	bl	8010eb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 801191a:	4803      	ldr	r0, [pc, #12]	; (8011928 <MX_TIM3_Init+0xac>)
 801191c:	f000 f8c2 	bl	8011aa4 <HAL_TIM_MspPostInit>

}
 8011920:	bf00      	nop
 8011922:	3728      	adds	r7, #40	; 0x28
 8011924:	46bd      	mov	sp, r7
 8011926:	bd80      	pop	{r7, pc}
 8011928:	20000868 	.word	0x20000868
 801192c:	40000400 	.word	0x40000400

08011930 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8011930:	b580      	push	{r7, lr}
 8011932:	b08a      	sub	sp, #40	; 0x28
 8011934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8011936:	f107 031c 	add.w	r3, r7, #28
 801193a:	2200      	movs	r2, #0
 801193c:	601a      	str	r2, [r3, #0]
 801193e:	605a      	str	r2, [r3, #4]
 8011940:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8011942:	463b      	mov	r3, r7
 8011944:	2200      	movs	r2, #0
 8011946:	601a      	str	r2, [r3, #0]
 8011948:	605a      	str	r2, [r3, #4]
 801194a:	609a      	str	r2, [r3, #8]
 801194c:	60da      	str	r2, [r3, #12]
 801194e:	611a      	str	r2, [r3, #16]
 8011950:	615a      	str	r2, [r3, #20]
 8011952:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8011954:	4b2e      	ldr	r3, [pc, #184]	; (8011a10 <MX_TIM4_Init+0xe0>)
 8011956:	4a2f      	ldr	r2, [pc, #188]	; (8011a14 <MX_TIM4_Init+0xe4>)
 8011958:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 50;
 801195a:	4b2d      	ldr	r3, [pc, #180]	; (8011a10 <MX_TIM4_Init+0xe0>)
 801195c:	2232      	movs	r2, #50	; 0x32
 801195e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011960:	4b2b      	ldr	r3, [pc, #172]	; (8011a10 <MX_TIM4_Init+0xe0>)
 8011962:	2200      	movs	r2, #0
 8011964:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000;
 8011966:	4b2a      	ldr	r3, [pc, #168]	; (8011a10 <MX_TIM4_Init+0xe0>)
 8011968:	f64e 2260 	movw	r2, #60000	; 0xea60
 801196c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801196e:	4b28      	ldr	r3, [pc, #160]	; (8011a10 <MX_TIM4_Init+0xe0>)
 8011970:	2200      	movs	r2, #0
 8011972:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011974:	4b26      	ldr	r3, [pc, #152]	; (8011a10 <MX_TIM4_Init+0xe0>)
 8011976:	2200      	movs	r2, #0
 8011978:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 801197a:	4825      	ldr	r0, [pc, #148]	; (8011a10 <MX_TIM4_Init+0xe0>)
 801197c:	f004 fa9a 	bl	8015eb4 <HAL_TIM_PWM_Init>
 8011980:	4603      	mov	r3, r0
 8011982:	2b00      	cmp	r3, #0
 8011984:	d001      	beq.n	801198a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8011986:	f7ff fa97 	bl	8010eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801198a:	2300      	movs	r3, #0
 801198c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801198e:	2300      	movs	r3, #0
 8011990:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8011992:	f107 031c 	add.w	r3, r7, #28
 8011996:	4619      	mov	r1, r3
 8011998:	481d      	ldr	r0, [pc, #116]	; (8011a10 <MX_TIM4_Init+0xe0>)
 801199a:	f005 faa9 	bl	8016ef0 <HAL_TIMEx_MasterConfigSynchronization>
 801199e:	4603      	mov	r3, r0
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d001      	beq.n	80119a8 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80119a4:	f7ff fa88 	bl	8010eb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80119a8:	2360      	movs	r3, #96	; 0x60
 80119aa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2880;
 80119ac:	f44f 6334 	mov.w	r3, #2880	; 0xb40
 80119b0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80119b2:	2300      	movs	r3, #0
 80119b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80119b6:	2300      	movs	r3, #0
 80119b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80119ba:	463b      	mov	r3, r7
 80119bc:	2200      	movs	r2, #0
 80119be:	4619      	mov	r1, r3
 80119c0:	4813      	ldr	r0, [pc, #76]	; (8011a10 <MX_TIM4_Init+0xe0>)
 80119c2:	f004 fd61 	bl	8016488 <HAL_TIM_PWM_ConfigChannel>
 80119c6:	4603      	mov	r3, r0
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d001      	beq.n	80119d0 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 80119cc:	f7ff fa74 	bl	8010eb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80119d0:	463b      	mov	r3, r7
 80119d2:	2204      	movs	r2, #4
 80119d4:	4619      	mov	r1, r3
 80119d6:	480e      	ldr	r0, [pc, #56]	; (8011a10 <MX_TIM4_Init+0xe0>)
 80119d8:	f004 fd56 	bl	8016488 <HAL_TIM_PWM_ConfigChannel>
 80119dc:	4603      	mov	r3, r0
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d001      	beq.n	80119e6 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 80119e2:	f7ff fa69 	bl	8010eb8 <Error_Handler>
  }
  sConfigOC.Pulse = 6000;
 80119e6:	f241 7370 	movw	r3, #6000	; 0x1770
 80119ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80119ec:	463b      	mov	r3, r7
 80119ee:	220c      	movs	r2, #12
 80119f0:	4619      	mov	r1, r3
 80119f2:	4807      	ldr	r0, [pc, #28]	; (8011a10 <MX_TIM4_Init+0xe0>)
 80119f4:	f004 fd48 	bl	8016488 <HAL_TIM_PWM_ConfigChannel>
 80119f8:	4603      	mov	r3, r0
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d001      	beq.n	8011a02 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 80119fe:	f7ff fa5b 	bl	8010eb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8011a02:	4803      	ldr	r0, [pc, #12]	; (8011a10 <MX_TIM4_Init+0xe0>)
 8011a04:	f000 f84e 	bl	8011aa4 <HAL_TIM_MspPostInit>

}
 8011a08:	bf00      	nop
 8011a0a:	3728      	adds	r7, #40	; 0x28
 8011a0c:	46bd      	mov	sp, r7
 8011a0e:	bd80      	pop	{r7, pc}
 8011a10:	200008b4 	.word	0x200008b4
 8011a14:	40000800 	.word	0x40000800

08011a18 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8011a18:	b480      	push	{r7}
 8011a1a:	b087      	sub	sp, #28
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011a28:	d10c      	bne.n	8011a44 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8011a2a:	4b1b      	ldr	r3, [pc, #108]	; (8011a98 <HAL_TIM_PWM_MspInit+0x80>)
 8011a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a2e:	4a1a      	ldr	r2, [pc, #104]	; (8011a98 <HAL_TIM_PWM_MspInit+0x80>)
 8011a30:	f043 0301 	orr.w	r3, r3, #1
 8011a34:	6593      	str	r3, [r2, #88]	; 0x58
 8011a36:	4b18      	ldr	r3, [pc, #96]	; (8011a98 <HAL_TIM_PWM_MspInit+0x80>)
 8011a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a3a:	f003 0301 	and.w	r3, r3, #1
 8011a3e:	617b      	str	r3, [r7, #20]
 8011a40:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8011a42:	e022      	b.n	8011a8a <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM3)
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	4a14      	ldr	r2, [pc, #80]	; (8011a9c <HAL_TIM_PWM_MspInit+0x84>)
 8011a4a:	4293      	cmp	r3, r2
 8011a4c:	d10c      	bne.n	8011a68 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8011a4e:	4b12      	ldr	r3, [pc, #72]	; (8011a98 <HAL_TIM_PWM_MspInit+0x80>)
 8011a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a52:	4a11      	ldr	r2, [pc, #68]	; (8011a98 <HAL_TIM_PWM_MspInit+0x80>)
 8011a54:	f043 0302 	orr.w	r3, r3, #2
 8011a58:	6593      	str	r3, [r2, #88]	; 0x58
 8011a5a:	4b0f      	ldr	r3, [pc, #60]	; (8011a98 <HAL_TIM_PWM_MspInit+0x80>)
 8011a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a5e:	f003 0302 	and.w	r3, r3, #2
 8011a62:	613b      	str	r3, [r7, #16]
 8011a64:	693b      	ldr	r3, [r7, #16]
}
 8011a66:	e010      	b.n	8011a8a <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM4)
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	4a0c      	ldr	r2, [pc, #48]	; (8011aa0 <HAL_TIM_PWM_MspInit+0x88>)
 8011a6e:	4293      	cmp	r3, r2
 8011a70:	d10b      	bne.n	8011a8a <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8011a72:	4b09      	ldr	r3, [pc, #36]	; (8011a98 <HAL_TIM_PWM_MspInit+0x80>)
 8011a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a76:	4a08      	ldr	r2, [pc, #32]	; (8011a98 <HAL_TIM_PWM_MspInit+0x80>)
 8011a78:	f043 0304 	orr.w	r3, r3, #4
 8011a7c:	6593      	str	r3, [r2, #88]	; 0x58
 8011a7e:	4b06      	ldr	r3, [pc, #24]	; (8011a98 <HAL_TIM_PWM_MspInit+0x80>)
 8011a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a82:	f003 0304 	and.w	r3, r3, #4
 8011a86:	60fb      	str	r3, [r7, #12]
 8011a88:	68fb      	ldr	r3, [r7, #12]
}
 8011a8a:	bf00      	nop
 8011a8c:	371c      	adds	r7, #28
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a94:	4770      	bx	lr
 8011a96:	bf00      	nop
 8011a98:	40021000 	.word	0x40021000
 8011a9c:	40000400 	.word	0x40000400
 8011aa0:	40000800 	.word	0x40000800

08011aa4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b08a      	sub	sp, #40	; 0x28
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011aac:	f107 0314 	add.w	r3, r7, #20
 8011ab0:	2200      	movs	r2, #0
 8011ab2:	601a      	str	r2, [r3, #0]
 8011ab4:	605a      	str	r2, [r3, #4]
 8011ab6:	609a      	str	r2, [r3, #8]
 8011ab8:	60da      	str	r2, [r3, #12]
 8011aba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	4a22      	ldr	r2, [pc, #136]	; (8011b4c <HAL_TIM_MspPostInit+0xa8>)
 8011ac2:	4293      	cmp	r3, r2
 8011ac4:	d11c      	bne.n	8011b00 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011ac6:	4b22      	ldr	r3, [pc, #136]	; (8011b50 <HAL_TIM_MspPostInit+0xac>)
 8011ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011aca:	4a21      	ldr	r2, [pc, #132]	; (8011b50 <HAL_TIM_MspPostInit+0xac>)
 8011acc:	f043 0304 	orr.w	r3, r3, #4
 8011ad0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011ad2:	4b1f      	ldr	r3, [pc, #124]	; (8011b50 <HAL_TIM_MspPostInit+0xac>)
 8011ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011ad6:	f003 0304 	and.w	r3, r3, #4
 8011ada:	613b      	str	r3, [r7, #16]
 8011adc:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8011ade:	2340      	movs	r3, #64	; 0x40
 8011ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011ae2:	2302      	movs	r3, #2
 8011ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011ae6:	2300      	movs	r3, #0
 8011ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011aea:	2300      	movs	r3, #0
 8011aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8011aee:	2302      	movs	r3, #2
 8011af0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011af2:	f107 0314 	add.w	r3, r7, #20
 8011af6:	4619      	mov	r1, r3
 8011af8:	4816      	ldr	r0, [pc, #88]	; (8011b54 <HAL_TIM_MspPostInit+0xb0>)
 8011afa:	f002 f82d 	bl	8013b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8011afe:	e021      	b.n	8011b44 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM4)
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	4a14      	ldr	r2, [pc, #80]	; (8011b58 <HAL_TIM_MspPostInit+0xb4>)
 8011b06:	4293      	cmp	r3, r2
 8011b08:	d11c      	bne.n	8011b44 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011b0a:	4b11      	ldr	r3, [pc, #68]	; (8011b50 <HAL_TIM_MspPostInit+0xac>)
 8011b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b0e:	4a10      	ldr	r2, [pc, #64]	; (8011b50 <HAL_TIM_MspPostInit+0xac>)
 8011b10:	f043 0302 	orr.w	r3, r3, #2
 8011b14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011b16:	4b0e      	ldr	r3, [pc, #56]	; (8011b50 <HAL_TIM_MspPostInit+0xac>)
 8011b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b1a:	f003 0302 	and.w	r3, r3, #2
 8011b1e:	60fb      	str	r3, [r7, #12]
 8011b20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8011b22:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8011b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011b28:	2302      	movs	r3, #2
 8011b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011b2c:	2300      	movs	r3, #0
 8011b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011b30:	2300      	movs	r3, #0
 8011b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8011b34:	2302      	movs	r3, #2
 8011b36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011b38:	f107 0314 	add.w	r3, r7, #20
 8011b3c:	4619      	mov	r1, r3
 8011b3e:	4807      	ldr	r0, [pc, #28]	; (8011b5c <HAL_TIM_MspPostInit+0xb8>)
 8011b40:	f002 f80a 	bl	8013b58 <HAL_GPIO_Init>
}
 8011b44:	bf00      	nop
 8011b46:	3728      	adds	r7, #40	; 0x28
 8011b48:	46bd      	mov	sp, r7
 8011b4a:	bd80      	pop	{r7, pc}
 8011b4c:	40000400 	.word	0x40000400
 8011b50:	40021000 	.word	0x40021000
 8011b54:	48000800 	.word	0x48000800
 8011b58:	40000800 	.word	0x40000800
 8011b5c:	48000400 	.word	0x48000400

08011b60 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart5;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8011b60:	b580      	push	{r7, lr}
 8011b62:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8011b64:	4b22      	ldr	r3, [pc, #136]	; (8011bf0 <MX_UART4_Init+0x90>)
 8011b66:	4a23      	ldr	r2, [pc, #140]	; (8011bf4 <MX_UART4_Init+0x94>)
 8011b68:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8011b6a:	4b21      	ldr	r3, [pc, #132]	; (8011bf0 <MX_UART4_Init+0x90>)
 8011b6c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8011b70:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8011b72:	4b1f      	ldr	r3, [pc, #124]	; (8011bf0 <MX_UART4_Init+0x90>)
 8011b74:	2200      	movs	r2, #0
 8011b76:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8011b78:	4b1d      	ldr	r3, [pc, #116]	; (8011bf0 <MX_UART4_Init+0x90>)
 8011b7a:	2200      	movs	r2, #0
 8011b7c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8011b7e:	4b1c      	ldr	r3, [pc, #112]	; (8011bf0 <MX_UART4_Init+0x90>)
 8011b80:	2200      	movs	r2, #0
 8011b82:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8011b84:	4b1a      	ldr	r3, [pc, #104]	; (8011bf0 <MX_UART4_Init+0x90>)
 8011b86:	220c      	movs	r2, #12
 8011b88:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8011b8a:	4b19      	ldr	r3, [pc, #100]	; (8011bf0 <MX_UART4_Init+0x90>)
 8011b8c:	2200      	movs	r2, #0
 8011b8e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8011b90:	4b17      	ldr	r3, [pc, #92]	; (8011bf0 <MX_UART4_Init+0x90>)
 8011b92:	2200      	movs	r2, #0
 8011b94:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8011b96:	4b16      	ldr	r3, [pc, #88]	; (8011bf0 <MX_UART4_Init+0x90>)
 8011b98:	2200      	movs	r2, #0
 8011b9a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8011b9c:	4b14      	ldr	r3, [pc, #80]	; (8011bf0 <MX_UART4_Init+0x90>)
 8011b9e:	2200      	movs	r2, #0
 8011ba0:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8011ba2:	4b13      	ldr	r3, [pc, #76]	; (8011bf0 <MX_UART4_Init+0x90>)
 8011ba4:	2200      	movs	r2, #0
 8011ba6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8011ba8:	4811      	ldr	r0, [pc, #68]	; (8011bf0 <MX_UART4_Init+0x90>)
 8011baa:	f005 fa7d 	bl	80170a8 <HAL_UART_Init>
 8011bae:	4603      	mov	r3, r0
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d001      	beq.n	8011bb8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8011bb4:	f7ff f980 	bl	8010eb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8011bb8:	2100      	movs	r1, #0
 8011bba:	480d      	ldr	r0, [pc, #52]	; (8011bf0 <MX_UART4_Init+0x90>)
 8011bbc:	f007 fafd 	bl	80191ba <HAL_UARTEx_SetTxFifoThreshold>
 8011bc0:	4603      	mov	r3, r0
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d001      	beq.n	8011bca <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8011bc6:	f7ff f977 	bl	8010eb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8011bca:	2100      	movs	r1, #0
 8011bcc:	4808      	ldr	r0, [pc, #32]	; (8011bf0 <MX_UART4_Init+0x90>)
 8011bce:	f007 fb32 	bl	8019236 <HAL_UARTEx_SetRxFifoThreshold>
 8011bd2:	4603      	mov	r3, r0
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d001      	beq.n	8011bdc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8011bd8:	f7ff f96e 	bl	8010eb8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8011bdc:	4804      	ldr	r0, [pc, #16]	; (8011bf0 <MX_UART4_Init+0x90>)
 8011bde:	f007 fab3 	bl	8019148 <HAL_UARTEx_DisableFifoMode>
 8011be2:	4603      	mov	r3, r0
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d001      	beq.n	8011bec <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8011be8:	f7ff f966 	bl	8010eb8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8011bec:	bf00      	nop
 8011bee:	bd80      	pop	{r7, pc}
 8011bf0:	20000900 	.word	0x20000900
 8011bf4:	40004c00 	.word	0x40004c00

08011bf8 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8011bfc:	4b22      	ldr	r3, [pc, #136]	; (8011c88 <MX_UART5_Init+0x90>)
 8011bfe:	4a23      	ldr	r2, [pc, #140]	; (8011c8c <MX_UART5_Init+0x94>)
 8011c00:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8011c02:	4b21      	ldr	r3, [pc, #132]	; (8011c88 <MX_UART5_Init+0x90>)
 8011c04:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8011c08:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8011c0a:	4b1f      	ldr	r3, [pc, #124]	; (8011c88 <MX_UART5_Init+0x90>)
 8011c0c:	2200      	movs	r2, #0
 8011c0e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8011c10:	4b1d      	ldr	r3, [pc, #116]	; (8011c88 <MX_UART5_Init+0x90>)
 8011c12:	2200      	movs	r2, #0
 8011c14:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8011c16:	4b1c      	ldr	r3, [pc, #112]	; (8011c88 <MX_UART5_Init+0x90>)
 8011c18:	2200      	movs	r2, #0
 8011c1a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8011c1c:	4b1a      	ldr	r3, [pc, #104]	; (8011c88 <MX_UART5_Init+0x90>)
 8011c1e:	220c      	movs	r2, #12
 8011c20:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8011c22:	4b19      	ldr	r3, [pc, #100]	; (8011c88 <MX_UART5_Init+0x90>)
 8011c24:	2200      	movs	r2, #0
 8011c26:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8011c28:	4b17      	ldr	r3, [pc, #92]	; (8011c88 <MX_UART5_Init+0x90>)
 8011c2a:	2200      	movs	r2, #0
 8011c2c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8011c2e:	4b16      	ldr	r3, [pc, #88]	; (8011c88 <MX_UART5_Init+0x90>)
 8011c30:	2200      	movs	r2, #0
 8011c32:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8011c34:	4b14      	ldr	r3, [pc, #80]	; (8011c88 <MX_UART5_Init+0x90>)
 8011c36:	2200      	movs	r2, #0
 8011c38:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8011c3a:	4b13      	ldr	r3, [pc, #76]	; (8011c88 <MX_UART5_Init+0x90>)
 8011c3c:	2200      	movs	r2, #0
 8011c3e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8011c40:	4811      	ldr	r0, [pc, #68]	; (8011c88 <MX_UART5_Init+0x90>)
 8011c42:	f005 fa31 	bl	80170a8 <HAL_UART_Init>
 8011c46:	4603      	mov	r3, r0
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d001      	beq.n	8011c50 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8011c4c:	f7ff f934 	bl	8010eb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8011c50:	2100      	movs	r1, #0
 8011c52:	480d      	ldr	r0, [pc, #52]	; (8011c88 <MX_UART5_Init+0x90>)
 8011c54:	f007 fab1 	bl	80191ba <HAL_UARTEx_SetTxFifoThreshold>
 8011c58:	4603      	mov	r3, r0
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d001      	beq.n	8011c62 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8011c5e:	f7ff f92b 	bl	8010eb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8011c62:	2100      	movs	r1, #0
 8011c64:	4808      	ldr	r0, [pc, #32]	; (8011c88 <MX_UART5_Init+0x90>)
 8011c66:	f007 fae6 	bl	8019236 <HAL_UARTEx_SetRxFifoThreshold>
 8011c6a:	4603      	mov	r3, r0
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d001      	beq.n	8011c74 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8011c70:	f7ff f922 	bl	8010eb8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8011c74:	4804      	ldr	r0, [pc, #16]	; (8011c88 <MX_UART5_Init+0x90>)
 8011c76:	f007 fa67 	bl	8019148 <HAL_UARTEx_DisableFifoMode>
 8011c7a:	4603      	mov	r3, r0
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d001      	beq.n	8011c84 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8011c80:	f7ff f91a 	bl	8010eb8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8011c84:	bf00      	nop
 8011c86:	bd80      	pop	{r7, pc}
 8011c88:	20000990 	.word	0x20000990
 8011c8c:	40005000 	.word	0x40005000

08011c90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8011c90:	b580      	push	{r7, lr}
 8011c92:	b0a2      	sub	sp, #136	; 0x88
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011c98:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8011c9c:	2200      	movs	r2, #0
 8011c9e:	601a      	str	r2, [r3, #0]
 8011ca0:	605a      	str	r2, [r3, #4]
 8011ca2:	609a      	str	r2, [r3, #8]
 8011ca4:	60da      	str	r2, [r3, #12]
 8011ca6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8011ca8:	f107 0320 	add.w	r3, r7, #32
 8011cac:	2254      	movs	r2, #84	; 0x54
 8011cae:	2100      	movs	r1, #0
 8011cb0:	4618      	mov	r0, r3
 8011cb2:	f009 fd3d 	bl	801b730 <memset>
  if(uartHandle->Instance==UART4)
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	4a52      	ldr	r2, [pc, #328]	; (8011e04 <HAL_UART_MspInit+0x174>)
 8011cbc:	4293      	cmp	r3, r2
 8011cbe:	d141      	bne.n	8011d44 <HAL_UART_MspInit+0xb4>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8011cc0:	2308      	movs	r3, #8
 8011cc2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8011cc4:	2300      	movs	r3, #0
 8011cc6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8011cc8:	f107 0320 	add.w	r3, r7, #32
 8011ccc:	4618      	mov	r0, r3
 8011cce:	f003 fd1f 	bl	8015710 <HAL_RCCEx_PeriphCLKConfig>
 8011cd2:	4603      	mov	r3, r0
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d001      	beq.n	8011cdc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8011cd8:	f7ff f8ee 	bl	8010eb8 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8011cdc:	4b4a      	ldr	r3, [pc, #296]	; (8011e08 <HAL_UART_MspInit+0x178>)
 8011cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011ce0:	4a49      	ldr	r2, [pc, #292]	; (8011e08 <HAL_UART_MspInit+0x178>)
 8011ce2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011ce6:	6593      	str	r3, [r2, #88]	; 0x58
 8011ce8:	4b47      	ldr	r3, [pc, #284]	; (8011e08 <HAL_UART_MspInit+0x178>)
 8011cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011cec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011cf0:	61fb      	str	r3, [r7, #28]
 8011cf2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011cf4:	4b44      	ldr	r3, [pc, #272]	; (8011e08 <HAL_UART_MspInit+0x178>)
 8011cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011cf8:	4a43      	ldr	r2, [pc, #268]	; (8011e08 <HAL_UART_MspInit+0x178>)
 8011cfa:	f043 0304 	orr.w	r3, r3, #4
 8011cfe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011d00:	4b41      	ldr	r3, [pc, #260]	; (8011e08 <HAL_UART_MspInit+0x178>)
 8011d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011d04:	f003 0304 	and.w	r3, r3, #4
 8011d08:	61bb      	str	r3, [r7, #24]
 8011d0a:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8011d0c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8011d10:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011d12:	2302      	movs	r3, #2
 8011d14:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d16:	2300      	movs	r3, #0
 8011d18:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011d1a:	2300      	movs	r3, #0
 8011d1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8011d20:	2305      	movs	r3, #5
 8011d22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011d26:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8011d2a:	4619      	mov	r1, r3
 8011d2c:	4837      	ldr	r0, [pc, #220]	; (8011e0c <HAL_UART_MspInit+0x17c>)
 8011d2e:	f001 ff13 	bl	8013b58 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8011d32:	2200      	movs	r2, #0
 8011d34:	2105      	movs	r1, #5
 8011d36:	2034      	movs	r0, #52	; 0x34
 8011d38:	f001 fbb4 	bl	80134a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8011d3c:	2034      	movs	r0, #52	; 0x34
 8011d3e:	f001 fbcb 	bl	80134d8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8011d42:	e05b      	b.n	8011dfc <HAL_UART_MspInit+0x16c>
  else if(uartHandle->Instance==UART5)
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	4a31      	ldr	r2, [pc, #196]	; (8011e10 <HAL_UART_MspInit+0x180>)
 8011d4a:	4293      	cmp	r3, r2
 8011d4c:	d156      	bne.n	8011dfc <HAL_UART_MspInit+0x16c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8011d4e:	2310      	movs	r3, #16
 8011d50:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8011d52:	2300      	movs	r3, #0
 8011d54:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8011d56:	f107 0320 	add.w	r3, r7, #32
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	f003 fcd8 	bl	8015710 <HAL_RCCEx_PeriphCLKConfig>
 8011d60:	4603      	mov	r3, r0
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d001      	beq.n	8011d6a <HAL_UART_MspInit+0xda>
      Error_Handler();
 8011d66:	f7ff f8a7 	bl	8010eb8 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8011d6a:	4b27      	ldr	r3, [pc, #156]	; (8011e08 <HAL_UART_MspInit+0x178>)
 8011d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d6e:	4a26      	ldr	r2, [pc, #152]	; (8011e08 <HAL_UART_MspInit+0x178>)
 8011d70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011d74:	6593      	str	r3, [r2, #88]	; 0x58
 8011d76:	4b24      	ldr	r3, [pc, #144]	; (8011e08 <HAL_UART_MspInit+0x178>)
 8011d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011d7e:	617b      	str	r3, [r7, #20]
 8011d80:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011d82:	4b21      	ldr	r3, [pc, #132]	; (8011e08 <HAL_UART_MspInit+0x178>)
 8011d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011d86:	4a20      	ldr	r2, [pc, #128]	; (8011e08 <HAL_UART_MspInit+0x178>)
 8011d88:	f043 0304 	orr.w	r3, r3, #4
 8011d8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011d8e:	4b1e      	ldr	r3, [pc, #120]	; (8011e08 <HAL_UART_MspInit+0x178>)
 8011d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011d92:	f003 0304 	and.w	r3, r3, #4
 8011d96:	613b      	str	r3, [r7, #16]
 8011d98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8011d9a:	4b1b      	ldr	r3, [pc, #108]	; (8011e08 <HAL_UART_MspInit+0x178>)
 8011d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011d9e:	4a1a      	ldr	r2, [pc, #104]	; (8011e08 <HAL_UART_MspInit+0x178>)
 8011da0:	f043 0308 	orr.w	r3, r3, #8
 8011da4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011da6:	4b18      	ldr	r3, [pc, #96]	; (8011e08 <HAL_UART_MspInit+0x178>)
 8011da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011daa:	f003 0308 	and.w	r3, r3, #8
 8011dae:	60fb      	str	r3, [r7, #12]
 8011db0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8011db2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011db6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011db8:	2302      	movs	r3, #2
 8011dba:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011dbc:	2300      	movs	r3, #0
 8011dbe:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011dc0:	2300      	movs	r3, #0
 8011dc2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8011dc6:	2305      	movs	r3, #5
 8011dc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011dcc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8011dd0:	4619      	mov	r1, r3
 8011dd2:	480e      	ldr	r0, [pc, #56]	; (8011e0c <HAL_UART_MspInit+0x17c>)
 8011dd4:	f001 fec0 	bl	8013b58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8011dd8:	2304      	movs	r3, #4
 8011dda:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011ddc:	2302      	movs	r3, #2
 8011dde:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011de0:	2300      	movs	r3, #0
 8011de2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011de4:	2300      	movs	r3, #0
 8011de6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8011dea:	2305      	movs	r3, #5
 8011dec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8011df0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8011df4:	4619      	mov	r1, r3
 8011df6:	4807      	ldr	r0, [pc, #28]	; (8011e14 <HAL_UART_MspInit+0x184>)
 8011df8:	f001 feae 	bl	8013b58 <HAL_GPIO_Init>
}
 8011dfc:	bf00      	nop
 8011dfe:	3788      	adds	r7, #136	; 0x88
 8011e00:	46bd      	mov	sp, r7
 8011e02:	bd80      	pop	{r7, pc}
 8011e04:	40004c00 	.word	0x40004c00
 8011e08:	40021000 	.word	0x40021000
 8011e0c:	48000800 	.word	0x48000800
 8011e10:	40005000 	.word	0x40005000
 8011e14:	48000c00 	.word	0x48000c00

08011e18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8011e18:	480d      	ldr	r0, [pc, #52]	; (8011e50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8011e1a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8011e1c:	480d      	ldr	r0, [pc, #52]	; (8011e54 <LoopForever+0x6>)
  ldr r1, =_edata
 8011e1e:	490e      	ldr	r1, [pc, #56]	; (8011e58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8011e20:	4a0e      	ldr	r2, [pc, #56]	; (8011e5c <LoopForever+0xe>)
  movs r3, #0
 8011e22:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8011e24:	e002      	b.n	8011e2c <LoopCopyDataInit>

08011e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8011e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8011e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8011e2a:	3304      	adds	r3, #4

08011e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8011e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8011e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8011e30:	d3f9      	bcc.n	8011e26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8011e32:	4a0b      	ldr	r2, [pc, #44]	; (8011e60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8011e34:	4c0b      	ldr	r4, [pc, #44]	; (8011e64 <LoopForever+0x16>)
  movs r3, #0
 8011e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8011e38:	e001      	b.n	8011e3e <LoopFillZerobss>

08011e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8011e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8011e3c:	3204      	adds	r2, #4

08011e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8011e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8011e40:	d3fb      	bcc.n	8011e3a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8011e42:	f7ff fcad 	bl	80117a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8011e46:	f009 fd09 	bl	801b85c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8011e4a:	f7fe ff91 	bl	8010d70 <main>

08011e4e <LoopForever>:

LoopForever:
    b LoopForever
 8011e4e:	e7fe      	b.n	8011e4e <LoopForever>
  ldr   r0, =_estack
 8011e50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8011e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8011e58:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8011e5c:	0801ca80 	.word	0x0801ca80
  ldr r2, =_sbss
 8011e60:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8011e64:	20003cc0 	.word	0x20003cc0

08011e68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8011e68:	e7fe      	b.n	8011e68 <ADC1_2_IRQHandler>

08011e6a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8011e6a:	b580      	push	{r7, lr}
 8011e6c:	b082      	sub	sp, #8
 8011e6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8011e70:	2300      	movs	r3, #0
 8011e72:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8011e74:	2003      	movs	r0, #3
 8011e76:	f001 fb0a 	bl	801348e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8011e7a:	200f      	movs	r0, #15
 8011e7c:	f7ff fb9c 	bl	80115b8 <HAL_InitTick>
 8011e80:	4603      	mov	r3, r0
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d002      	beq.n	8011e8c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8011e86:	2301      	movs	r3, #1
 8011e88:	71fb      	strb	r3, [r7, #7]
 8011e8a:	e001      	b.n	8011e90 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8011e8c:	f7ff fb6c 	bl	8011568 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8011e90:	79fb      	ldrb	r3, [r7, #7]

}
 8011e92:	4618      	mov	r0, r3
 8011e94:	3708      	adds	r7, #8
 8011e96:	46bd      	mov	sp, r7
 8011e98:	bd80      	pop	{r7, pc}
	...

08011e9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8011e9c:	b480      	push	{r7}
 8011e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8011ea0:	4b05      	ldr	r3, [pc, #20]	; (8011eb8 <HAL_IncTick+0x1c>)
 8011ea2:	681a      	ldr	r2, [r3, #0]
 8011ea4:	4b05      	ldr	r3, [pc, #20]	; (8011ebc <HAL_IncTick+0x20>)
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	4413      	add	r3, r2
 8011eaa:	4a03      	ldr	r2, [pc, #12]	; (8011eb8 <HAL_IncTick+0x1c>)
 8011eac:	6013      	str	r3, [r2, #0]
}
 8011eae:	bf00      	nop
 8011eb0:	46bd      	mov	sp, r7
 8011eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb6:	4770      	bx	lr
 8011eb8:	20000a20 	.word	0x20000a20
 8011ebc:	2000000c 	.word	0x2000000c

08011ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8011ec0:	b480      	push	{r7}
 8011ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8011ec4:	4b03      	ldr	r3, [pc, #12]	; (8011ed4 <HAL_GetTick+0x14>)
 8011ec6:	681b      	ldr	r3, [r3, #0]
}
 8011ec8:	4618      	mov	r0, r3
 8011eca:	46bd      	mov	sp, r7
 8011ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed0:	4770      	bx	lr
 8011ed2:	bf00      	nop
 8011ed4:	20000a20 	.word	0x20000a20

08011ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	b084      	sub	sp, #16
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8011ee0:	f7ff ffee 	bl	8011ec0 <HAL_GetTick>
 8011ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ef0:	d004      	beq.n	8011efc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8011ef2:	4b09      	ldr	r3, [pc, #36]	; (8011f18 <HAL_Delay+0x40>)
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	68fa      	ldr	r2, [r7, #12]
 8011ef8:	4413      	add	r3, r2
 8011efa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8011efc:	bf00      	nop
 8011efe:	f7ff ffdf 	bl	8011ec0 <HAL_GetTick>
 8011f02:	4602      	mov	r2, r0
 8011f04:	68bb      	ldr	r3, [r7, #8]
 8011f06:	1ad3      	subs	r3, r2, r3
 8011f08:	68fa      	ldr	r2, [r7, #12]
 8011f0a:	429a      	cmp	r2, r3
 8011f0c:	d8f7      	bhi.n	8011efe <HAL_Delay+0x26>
  {
  }
}
 8011f0e:	bf00      	nop
 8011f10:	bf00      	nop
 8011f12:	3710      	adds	r7, #16
 8011f14:	46bd      	mov	sp, r7
 8011f16:	bd80      	pop	{r7, pc}
 8011f18:	2000000c 	.word	0x2000000c

08011f1c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8011f1c:	b480      	push	{r7}
 8011f1e:	b083      	sub	sp, #12
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]
 8011f24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	689b      	ldr	r3, [r3, #8]
 8011f2a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8011f2e:	683b      	ldr	r3, [r7, #0]
 8011f30:	431a      	orrs	r2, r3
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	609a      	str	r2, [r3, #8]
}
 8011f36:	bf00      	nop
 8011f38:	370c      	adds	r7, #12
 8011f3a:	46bd      	mov	sp, r7
 8011f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f40:	4770      	bx	lr

08011f42 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8011f42:	b480      	push	{r7}
 8011f44:	b083      	sub	sp, #12
 8011f46:	af00      	add	r7, sp, #0
 8011f48:	6078      	str	r0, [r7, #4]
 8011f4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	689b      	ldr	r3, [r3, #8]
 8011f50:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8011f54:	683b      	ldr	r3, [r7, #0]
 8011f56:	431a      	orrs	r2, r3
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	609a      	str	r2, [r3, #8]
}
 8011f5c:	bf00      	nop
 8011f5e:	370c      	adds	r7, #12
 8011f60:	46bd      	mov	sp, r7
 8011f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f66:	4770      	bx	lr

08011f68 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8011f68:	b480      	push	{r7}
 8011f6a:	b083      	sub	sp, #12
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	689b      	ldr	r3, [r3, #8]
 8011f74:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8011f78:	4618      	mov	r0, r3
 8011f7a:	370c      	adds	r7, #12
 8011f7c:	46bd      	mov	sp, r7
 8011f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f82:	4770      	bx	lr

08011f84 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8011f84:	b480      	push	{r7}
 8011f86:	b087      	sub	sp, #28
 8011f88:	af00      	add	r7, sp, #0
 8011f8a:	60f8      	str	r0, [r7, #12]
 8011f8c:	60b9      	str	r1, [r7, #8]
 8011f8e:	607a      	str	r2, [r7, #4]
 8011f90:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	3360      	adds	r3, #96	; 0x60
 8011f96:	461a      	mov	r2, r3
 8011f98:	68bb      	ldr	r3, [r7, #8]
 8011f9a:	009b      	lsls	r3, r3, #2
 8011f9c:	4413      	add	r3, r2
 8011f9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8011fa0:	697b      	ldr	r3, [r7, #20]
 8011fa2:	681a      	ldr	r2, [r3, #0]
 8011fa4:	4b08      	ldr	r3, [pc, #32]	; (8011fc8 <LL_ADC_SetOffset+0x44>)
 8011fa6:	4013      	ands	r3, r2
 8011fa8:	687a      	ldr	r2, [r7, #4]
 8011faa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8011fae:	683a      	ldr	r2, [r7, #0]
 8011fb0:	430a      	orrs	r2, r1
 8011fb2:	4313      	orrs	r3, r2
 8011fb4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8011fb8:	697b      	ldr	r3, [r7, #20]
 8011fba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8011fbc:	bf00      	nop
 8011fbe:	371c      	adds	r7, #28
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc6:	4770      	bx	lr
 8011fc8:	03fff000 	.word	0x03fff000

08011fcc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8011fcc:	b480      	push	{r7}
 8011fce:	b085      	sub	sp, #20
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	6078      	str	r0, [r7, #4]
 8011fd4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	3360      	adds	r3, #96	; 0x60
 8011fda:	461a      	mov	r2, r3
 8011fdc:	683b      	ldr	r3, [r7, #0]
 8011fde:	009b      	lsls	r3, r3, #2
 8011fe0:	4413      	add	r3, r2
 8011fe2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8011fec:	4618      	mov	r0, r3
 8011fee:	3714      	adds	r7, #20
 8011ff0:	46bd      	mov	sp, r7
 8011ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff6:	4770      	bx	lr

08011ff8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8011ff8:	b480      	push	{r7}
 8011ffa:	b087      	sub	sp, #28
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	60f8      	str	r0, [r7, #12]
 8012000:	60b9      	str	r1, [r7, #8]
 8012002:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	3360      	adds	r3, #96	; 0x60
 8012008:	461a      	mov	r2, r3
 801200a:	68bb      	ldr	r3, [r7, #8]
 801200c:	009b      	lsls	r3, r3, #2
 801200e:	4413      	add	r3, r2
 8012010:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8012012:	697b      	ldr	r3, [r7, #20]
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	431a      	orrs	r2, r3
 801201e:	697b      	ldr	r3, [r7, #20]
 8012020:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8012022:	bf00      	nop
 8012024:	371c      	adds	r7, #28
 8012026:	46bd      	mov	sp, r7
 8012028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801202c:	4770      	bx	lr

0801202e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 801202e:	b480      	push	{r7}
 8012030:	b087      	sub	sp, #28
 8012032:	af00      	add	r7, sp, #0
 8012034:	60f8      	str	r0, [r7, #12]
 8012036:	60b9      	str	r1, [r7, #8]
 8012038:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	3360      	adds	r3, #96	; 0x60
 801203e:	461a      	mov	r2, r3
 8012040:	68bb      	ldr	r3, [r7, #8]
 8012042:	009b      	lsls	r3, r3, #2
 8012044:	4413      	add	r3, r2
 8012046:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8012048:	697b      	ldr	r3, [r7, #20]
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	431a      	orrs	r2, r3
 8012054:	697b      	ldr	r3, [r7, #20]
 8012056:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8012058:	bf00      	nop
 801205a:	371c      	adds	r7, #28
 801205c:	46bd      	mov	sp, r7
 801205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012062:	4770      	bx	lr

08012064 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8012064:	b480      	push	{r7}
 8012066:	b087      	sub	sp, #28
 8012068:	af00      	add	r7, sp, #0
 801206a:	60f8      	str	r0, [r7, #12]
 801206c:	60b9      	str	r1, [r7, #8]
 801206e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	3360      	adds	r3, #96	; 0x60
 8012074:	461a      	mov	r2, r3
 8012076:	68bb      	ldr	r3, [r7, #8]
 8012078:	009b      	lsls	r3, r3, #2
 801207a:	4413      	add	r3, r2
 801207c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 801207e:	697b      	ldr	r3, [r7, #20]
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	431a      	orrs	r2, r3
 801208a:	697b      	ldr	r3, [r7, #20]
 801208c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 801208e:	bf00      	nop
 8012090:	371c      	adds	r7, #28
 8012092:	46bd      	mov	sp, r7
 8012094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012098:	4770      	bx	lr

0801209a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 801209a:	b480      	push	{r7}
 801209c:	b083      	sub	sp, #12
 801209e:	af00      	add	r7, sp, #0
 80120a0:	6078      	str	r0, [r7, #4]
 80120a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	695b      	ldr	r3, [r3, #20]
 80120a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80120ac:	683b      	ldr	r3, [r7, #0]
 80120ae:	431a      	orrs	r2, r3
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	615a      	str	r2, [r3, #20]
}
 80120b4:	bf00      	nop
 80120b6:	370c      	adds	r7, #12
 80120b8:	46bd      	mov	sp, r7
 80120ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120be:	4770      	bx	lr

080120c0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80120c0:	b480      	push	{r7}
 80120c2:	b083      	sub	sp, #12
 80120c4:	af00      	add	r7, sp, #0
 80120c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	68db      	ldr	r3, [r3, #12]
 80120cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d101      	bne.n	80120d8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80120d4:	2301      	movs	r3, #1
 80120d6:	e000      	b.n	80120da <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80120d8:	2300      	movs	r3, #0
}
 80120da:	4618      	mov	r0, r3
 80120dc:	370c      	adds	r7, #12
 80120de:	46bd      	mov	sp, r7
 80120e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e4:	4770      	bx	lr

080120e6 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80120e6:	b480      	push	{r7}
 80120e8:	b087      	sub	sp, #28
 80120ea:	af00      	add	r7, sp, #0
 80120ec:	60f8      	str	r0, [r7, #12]
 80120ee:	60b9      	str	r1, [r7, #8]
 80120f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	3330      	adds	r3, #48	; 0x30
 80120f6:	461a      	mov	r2, r3
 80120f8:	68bb      	ldr	r3, [r7, #8]
 80120fa:	0a1b      	lsrs	r3, r3, #8
 80120fc:	009b      	lsls	r3, r3, #2
 80120fe:	f003 030c 	and.w	r3, r3, #12
 8012102:	4413      	add	r3, r2
 8012104:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8012106:	697b      	ldr	r3, [r7, #20]
 8012108:	681a      	ldr	r2, [r3, #0]
 801210a:	68bb      	ldr	r3, [r7, #8]
 801210c:	f003 031f 	and.w	r3, r3, #31
 8012110:	211f      	movs	r1, #31
 8012112:	fa01 f303 	lsl.w	r3, r1, r3
 8012116:	43db      	mvns	r3, r3
 8012118:	401a      	ands	r2, r3
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	0e9b      	lsrs	r3, r3, #26
 801211e:	f003 011f 	and.w	r1, r3, #31
 8012122:	68bb      	ldr	r3, [r7, #8]
 8012124:	f003 031f 	and.w	r3, r3, #31
 8012128:	fa01 f303 	lsl.w	r3, r1, r3
 801212c:	431a      	orrs	r2, r3
 801212e:	697b      	ldr	r3, [r7, #20]
 8012130:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8012132:	bf00      	nop
 8012134:	371c      	adds	r7, #28
 8012136:	46bd      	mov	sp, r7
 8012138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801213c:	4770      	bx	lr

0801213e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 801213e:	b480      	push	{r7}
 8012140:	b087      	sub	sp, #28
 8012142:	af00      	add	r7, sp, #0
 8012144:	60f8      	str	r0, [r7, #12]
 8012146:	60b9      	str	r1, [r7, #8]
 8012148:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	3314      	adds	r3, #20
 801214e:	461a      	mov	r2, r3
 8012150:	68bb      	ldr	r3, [r7, #8]
 8012152:	0e5b      	lsrs	r3, r3, #25
 8012154:	009b      	lsls	r3, r3, #2
 8012156:	f003 0304 	and.w	r3, r3, #4
 801215a:	4413      	add	r3, r2
 801215c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 801215e:	697b      	ldr	r3, [r7, #20]
 8012160:	681a      	ldr	r2, [r3, #0]
 8012162:	68bb      	ldr	r3, [r7, #8]
 8012164:	0d1b      	lsrs	r3, r3, #20
 8012166:	f003 031f 	and.w	r3, r3, #31
 801216a:	2107      	movs	r1, #7
 801216c:	fa01 f303 	lsl.w	r3, r1, r3
 8012170:	43db      	mvns	r3, r3
 8012172:	401a      	ands	r2, r3
 8012174:	68bb      	ldr	r3, [r7, #8]
 8012176:	0d1b      	lsrs	r3, r3, #20
 8012178:	f003 031f 	and.w	r3, r3, #31
 801217c:	6879      	ldr	r1, [r7, #4]
 801217e:	fa01 f303 	lsl.w	r3, r1, r3
 8012182:	431a      	orrs	r2, r3
 8012184:	697b      	ldr	r3, [r7, #20]
 8012186:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8012188:	bf00      	nop
 801218a:	371c      	adds	r7, #28
 801218c:	46bd      	mov	sp, r7
 801218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012192:	4770      	bx	lr

08012194 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8012194:	b480      	push	{r7}
 8012196:	b085      	sub	sp, #20
 8012198:	af00      	add	r7, sp, #0
 801219a:	60f8      	str	r0, [r7, #12]
 801219c:	60b9      	str	r1, [r7, #8]
 801219e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	4a0f      	ldr	r2, [pc, #60]	; (80121e0 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80121a4:	4293      	cmp	r3, r2
 80121a6:	d10a      	bne.n	80121be <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80121ae:	68bb      	ldr	r3, [r7, #8]
 80121b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80121b4:	431a      	orrs	r2, r3
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80121bc:	e00a      	b.n	80121d4 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80121c4:	68bb      	ldr	r3, [r7, #8]
 80121c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80121ca:	43db      	mvns	r3, r3
 80121cc:	401a      	ands	r2, r3
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80121d4:	bf00      	nop
 80121d6:	3714      	adds	r7, #20
 80121d8:	46bd      	mov	sp, r7
 80121da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121de:	4770      	bx	lr
 80121e0:	407f0000 	.word	0x407f0000

080121e4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80121e4:	b480      	push	{r7}
 80121e6:	b083      	sub	sp, #12
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	689b      	ldr	r3, [r3, #8]
 80121f0:	f003 031f 	and.w	r3, r3, #31
}
 80121f4:	4618      	mov	r0, r3
 80121f6:	370c      	adds	r7, #12
 80121f8:	46bd      	mov	sp, r7
 80121fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121fe:	4770      	bx	lr

08012200 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8012200:	b480      	push	{r7}
 8012202:	b083      	sub	sp, #12
 8012204:	af00      	add	r7, sp, #0
 8012206:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	689b      	ldr	r3, [r3, #8]
 801220c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8012210:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8012214:	687a      	ldr	r2, [r7, #4]
 8012216:	6093      	str	r3, [r2, #8]
}
 8012218:	bf00      	nop
 801221a:	370c      	adds	r7, #12
 801221c:	46bd      	mov	sp, r7
 801221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012222:	4770      	bx	lr

08012224 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8012224:	b480      	push	{r7}
 8012226:	b083      	sub	sp, #12
 8012228:	af00      	add	r7, sp, #0
 801222a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	689b      	ldr	r3, [r3, #8]
 8012230:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012234:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012238:	d101      	bne.n	801223e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 801223a:	2301      	movs	r3, #1
 801223c:	e000      	b.n	8012240 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 801223e:	2300      	movs	r3, #0
}
 8012240:	4618      	mov	r0, r3
 8012242:	370c      	adds	r7, #12
 8012244:	46bd      	mov	sp, r7
 8012246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801224a:	4770      	bx	lr

0801224c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 801224c:	b480      	push	{r7}
 801224e:	b083      	sub	sp, #12
 8012250:	af00      	add	r7, sp, #0
 8012252:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	689b      	ldr	r3, [r3, #8]
 8012258:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 801225c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8012260:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8012268:	bf00      	nop
 801226a:	370c      	adds	r7, #12
 801226c:	46bd      	mov	sp, r7
 801226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012272:	4770      	bx	lr

08012274 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8012274:	b480      	push	{r7}
 8012276:	b083      	sub	sp, #12
 8012278:	af00      	add	r7, sp, #0
 801227a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	689b      	ldr	r3, [r3, #8]
 8012280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012284:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012288:	d101      	bne.n	801228e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 801228a:	2301      	movs	r3, #1
 801228c:	e000      	b.n	8012290 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 801228e:	2300      	movs	r3, #0
}
 8012290:	4618      	mov	r0, r3
 8012292:	370c      	adds	r7, #12
 8012294:	46bd      	mov	sp, r7
 8012296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801229a:	4770      	bx	lr

0801229c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 801229c:	b480      	push	{r7}
 801229e:	b083      	sub	sp, #12
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	689b      	ldr	r3, [r3, #8]
 80122a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80122ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80122b0:	f043 0201 	orr.w	r2, r3, #1
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80122b8:	bf00      	nop
 80122ba:	370c      	adds	r7, #12
 80122bc:	46bd      	mov	sp, r7
 80122be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122c2:	4770      	bx	lr

080122c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80122c4:	b480      	push	{r7}
 80122c6:	b083      	sub	sp, #12
 80122c8:	af00      	add	r7, sp, #0
 80122ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	689b      	ldr	r3, [r3, #8]
 80122d0:	f003 0301 	and.w	r3, r3, #1
 80122d4:	2b01      	cmp	r3, #1
 80122d6:	d101      	bne.n	80122dc <LL_ADC_IsEnabled+0x18>
 80122d8:	2301      	movs	r3, #1
 80122da:	e000      	b.n	80122de <LL_ADC_IsEnabled+0x1a>
 80122dc:	2300      	movs	r3, #0
}
 80122de:	4618      	mov	r0, r3
 80122e0:	370c      	adds	r7, #12
 80122e2:	46bd      	mov	sp, r7
 80122e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122e8:	4770      	bx	lr

080122ea <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80122ea:	b480      	push	{r7}
 80122ec:	b083      	sub	sp, #12
 80122ee:	af00      	add	r7, sp, #0
 80122f0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	689b      	ldr	r3, [r3, #8]
 80122f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80122fa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80122fe:	f043 0204 	orr.w	r2, r3, #4
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8012306:	bf00      	nop
 8012308:	370c      	adds	r7, #12
 801230a:	46bd      	mov	sp, r7
 801230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012310:	4770      	bx	lr

08012312 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8012312:	b480      	push	{r7}
 8012314:	b083      	sub	sp, #12
 8012316:	af00      	add	r7, sp, #0
 8012318:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	689b      	ldr	r3, [r3, #8]
 801231e:	f003 0304 	and.w	r3, r3, #4
 8012322:	2b04      	cmp	r3, #4
 8012324:	d101      	bne.n	801232a <LL_ADC_REG_IsConversionOngoing+0x18>
 8012326:	2301      	movs	r3, #1
 8012328:	e000      	b.n	801232c <LL_ADC_REG_IsConversionOngoing+0x1a>
 801232a:	2300      	movs	r3, #0
}
 801232c:	4618      	mov	r0, r3
 801232e:	370c      	adds	r7, #12
 8012330:	46bd      	mov	sp, r7
 8012332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012336:	4770      	bx	lr

08012338 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8012338:	b480      	push	{r7}
 801233a:	b083      	sub	sp, #12
 801233c:	af00      	add	r7, sp, #0
 801233e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	689b      	ldr	r3, [r3, #8]
 8012344:	f003 0308 	and.w	r3, r3, #8
 8012348:	2b08      	cmp	r3, #8
 801234a:	d101      	bne.n	8012350 <LL_ADC_INJ_IsConversionOngoing+0x18>
 801234c:	2301      	movs	r3, #1
 801234e:	e000      	b.n	8012352 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8012350:	2300      	movs	r3, #0
}
 8012352:	4618      	mov	r0, r3
 8012354:	370c      	adds	r7, #12
 8012356:	46bd      	mov	sp, r7
 8012358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801235c:	4770      	bx	lr
	...

08012360 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8012360:	b590      	push	{r4, r7, lr}
 8012362:	b089      	sub	sp, #36	; 0x24
 8012364:	af00      	add	r7, sp, #0
 8012366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8012368:	2300      	movs	r3, #0
 801236a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 801236c:	2300      	movs	r3, #0
 801236e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d101      	bne.n	801237a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8012376:	2301      	movs	r3, #1
 8012378:	e1af      	b.n	80126da <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	695b      	ldr	r3, [r3, #20]
 801237e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012384:	2b00      	cmp	r3, #0
 8012386:	d109      	bne.n	801239c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8012388:	6878      	ldr	r0, [r7, #4]
 801238a:	f7fc fa1f 	bl	800e7cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	2200      	movs	r2, #0
 8012392:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	2200      	movs	r2, #0
 8012398:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	4618      	mov	r0, r3
 80123a2:	f7ff ff3f 	bl	8012224 <LL_ADC_IsDeepPowerDownEnabled>
 80123a6:	4603      	mov	r3, r0
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d004      	beq.n	80123b6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	4618      	mov	r0, r3
 80123b2:	f7ff ff25 	bl	8012200 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	4618      	mov	r0, r3
 80123bc:	f7ff ff5a 	bl	8012274 <LL_ADC_IsInternalRegulatorEnabled>
 80123c0:	4603      	mov	r3, r0
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d115      	bne.n	80123f2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	4618      	mov	r0, r3
 80123cc:	f7ff ff3e 	bl	801224c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80123d0:	4b9f      	ldr	r3, [pc, #636]	; (8012650 <HAL_ADC_Init+0x2f0>)
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	099b      	lsrs	r3, r3, #6
 80123d6:	4a9f      	ldr	r2, [pc, #636]	; (8012654 <HAL_ADC_Init+0x2f4>)
 80123d8:	fba2 2303 	umull	r2, r3, r2, r3
 80123dc:	099b      	lsrs	r3, r3, #6
 80123de:	3301      	adds	r3, #1
 80123e0:	005b      	lsls	r3, r3, #1
 80123e2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80123e4:	e002      	b.n	80123ec <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80123e6:	68bb      	ldr	r3, [r7, #8]
 80123e8:	3b01      	subs	r3, #1
 80123ea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80123ec:	68bb      	ldr	r3, [r7, #8]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d1f9      	bne.n	80123e6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	4618      	mov	r0, r3
 80123f8:	f7ff ff3c 	bl	8012274 <LL_ADC_IsInternalRegulatorEnabled>
 80123fc:	4603      	mov	r3, r0
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d10d      	bne.n	801241e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012406:	f043 0210 	orr.w	r2, r3, #16
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012412:	f043 0201 	orr.w	r2, r3, #1
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 801241a:	2301      	movs	r3, #1
 801241c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	4618      	mov	r0, r3
 8012424:	f7ff ff75 	bl	8012312 <LL_ADC_REG_IsConversionOngoing>
 8012428:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801242e:	f003 0310 	and.w	r3, r3, #16
 8012432:	2b00      	cmp	r3, #0
 8012434:	f040 8148 	bne.w	80126c8 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8012438:	697b      	ldr	r3, [r7, #20]
 801243a:	2b00      	cmp	r3, #0
 801243c:	f040 8144 	bne.w	80126c8 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012444:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8012448:	f043 0202 	orr.w	r2, r3, #2
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	4618      	mov	r0, r3
 8012456:	f7ff ff35 	bl	80122c4 <LL_ADC_IsEnabled>
 801245a:	4603      	mov	r3, r0
 801245c:	2b00      	cmp	r3, #0
 801245e:	d141      	bne.n	80124e4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012468:	d004      	beq.n	8012474 <HAL_ADC_Init+0x114>
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	4a7a      	ldr	r2, [pc, #488]	; (8012658 <HAL_ADC_Init+0x2f8>)
 8012470:	4293      	cmp	r3, r2
 8012472:	d10f      	bne.n	8012494 <HAL_ADC_Init+0x134>
 8012474:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8012478:	f7ff ff24 	bl	80122c4 <LL_ADC_IsEnabled>
 801247c:	4604      	mov	r4, r0
 801247e:	4876      	ldr	r0, [pc, #472]	; (8012658 <HAL_ADC_Init+0x2f8>)
 8012480:	f7ff ff20 	bl	80122c4 <LL_ADC_IsEnabled>
 8012484:	4603      	mov	r3, r0
 8012486:	4323      	orrs	r3, r4
 8012488:	2b00      	cmp	r3, #0
 801248a:	bf0c      	ite	eq
 801248c:	2301      	moveq	r3, #1
 801248e:	2300      	movne	r3, #0
 8012490:	b2db      	uxtb	r3, r3
 8012492:	e012      	b.n	80124ba <HAL_ADC_Init+0x15a>
 8012494:	4871      	ldr	r0, [pc, #452]	; (801265c <HAL_ADC_Init+0x2fc>)
 8012496:	f7ff ff15 	bl	80122c4 <LL_ADC_IsEnabled>
 801249a:	4604      	mov	r4, r0
 801249c:	4870      	ldr	r0, [pc, #448]	; (8012660 <HAL_ADC_Init+0x300>)
 801249e:	f7ff ff11 	bl	80122c4 <LL_ADC_IsEnabled>
 80124a2:	4603      	mov	r3, r0
 80124a4:	431c      	orrs	r4, r3
 80124a6:	486f      	ldr	r0, [pc, #444]	; (8012664 <HAL_ADC_Init+0x304>)
 80124a8:	f7ff ff0c 	bl	80122c4 <LL_ADC_IsEnabled>
 80124ac:	4603      	mov	r3, r0
 80124ae:	4323      	orrs	r3, r4
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	bf0c      	ite	eq
 80124b4:	2301      	moveq	r3, #1
 80124b6:	2300      	movne	r3, #0
 80124b8:	b2db      	uxtb	r3, r3
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d012      	beq.n	80124e4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80124c6:	d004      	beq.n	80124d2 <HAL_ADC_Init+0x172>
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	4a62      	ldr	r2, [pc, #392]	; (8012658 <HAL_ADC_Init+0x2f8>)
 80124ce:	4293      	cmp	r3, r2
 80124d0:	d101      	bne.n	80124d6 <HAL_ADC_Init+0x176>
 80124d2:	4a65      	ldr	r2, [pc, #404]	; (8012668 <HAL_ADC_Init+0x308>)
 80124d4:	e000      	b.n	80124d8 <HAL_ADC_Init+0x178>
 80124d6:	4a65      	ldr	r2, [pc, #404]	; (801266c <HAL_ADC_Init+0x30c>)
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	685b      	ldr	r3, [r3, #4]
 80124dc:	4619      	mov	r1, r3
 80124de:	4610      	mov	r0, r2
 80124e0:	f7ff fd1c 	bl	8011f1c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	7f5b      	ldrb	r3, [r3, #29]
 80124e8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80124ee:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80124f4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80124fa:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012502:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8012504:	4313      	orrs	r3, r2
 8012506:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801250e:	2b01      	cmp	r3, #1
 8012510:	d106      	bne.n	8012520 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012516:	3b01      	subs	r3, #1
 8012518:	045b      	lsls	r3, r3, #17
 801251a:	69ba      	ldr	r2, [r7, #24]
 801251c:	4313      	orrs	r3, r2
 801251e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012524:	2b00      	cmp	r3, #0
 8012526:	d009      	beq.n	801253c <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801252c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012534:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8012536:	69ba      	ldr	r2, [r7, #24]
 8012538:	4313      	orrs	r3, r2
 801253a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	68da      	ldr	r2, [r3, #12]
 8012542:	4b4b      	ldr	r3, [pc, #300]	; (8012670 <HAL_ADC_Init+0x310>)
 8012544:	4013      	ands	r3, r2
 8012546:	687a      	ldr	r2, [r7, #4]
 8012548:	6812      	ldr	r2, [r2, #0]
 801254a:	69b9      	ldr	r1, [r7, #24]
 801254c:	430b      	orrs	r3, r1
 801254e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	691b      	ldr	r3, [r3, #16]
 8012556:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	430a      	orrs	r2, r1
 8012564:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	4618      	mov	r0, r3
 801256c:	f7ff fed1 	bl	8012312 <LL_ADC_REG_IsConversionOngoing>
 8012570:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	4618      	mov	r0, r3
 8012578:	f7ff fede 	bl	8012338 <LL_ADC_INJ_IsConversionOngoing>
 801257c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 801257e:	693b      	ldr	r3, [r7, #16]
 8012580:	2b00      	cmp	r3, #0
 8012582:	d17f      	bne.n	8012684 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	2b00      	cmp	r3, #0
 8012588:	d17c      	bne.n	8012684 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 801258e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012596:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8012598:	4313      	orrs	r3, r2
 801259a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	68db      	ldr	r3, [r3, #12]
 80125a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80125a6:	f023 0302 	bic.w	r3, r3, #2
 80125aa:	687a      	ldr	r2, [r7, #4]
 80125ac:	6812      	ldr	r2, [r2, #0]
 80125ae:	69b9      	ldr	r1, [r7, #24]
 80125b0:	430b      	orrs	r3, r1
 80125b2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	691b      	ldr	r3, [r3, #16]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d017      	beq.n	80125ec <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	691a      	ldr	r2, [r3, #16]
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80125ca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80125d4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80125d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80125dc:	687a      	ldr	r2, [r7, #4]
 80125de:	6911      	ldr	r1, [r2, #16]
 80125e0:	687a      	ldr	r2, [r7, #4]
 80125e2:	6812      	ldr	r2, [r2, #0]
 80125e4:	430b      	orrs	r3, r1
 80125e6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80125ea:	e013      	b.n	8012614 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	691a      	ldr	r2, [r3, #16]
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80125fa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8012604:	687a      	ldr	r2, [r7, #4]
 8012606:	6812      	ldr	r2, [r2, #0]
 8012608:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 801260c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8012610:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801261a:	2b01      	cmp	r3, #1
 801261c:	d12a      	bne.n	8012674 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	691b      	ldr	r3, [r3, #16]
 8012624:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8012628:	f023 0304 	bic.w	r3, r3, #4
 801262c:	687a      	ldr	r2, [r7, #4]
 801262e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8012630:	687a      	ldr	r2, [r7, #4]
 8012632:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8012634:	4311      	orrs	r1, r2
 8012636:	687a      	ldr	r2, [r7, #4]
 8012638:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 801263a:	4311      	orrs	r1, r2
 801263c:	687a      	ldr	r2, [r7, #4]
 801263e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8012640:	430a      	orrs	r2, r1
 8012642:	431a      	orrs	r2, r3
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	f042 0201 	orr.w	r2, r2, #1
 801264c:	611a      	str	r2, [r3, #16]
 801264e:	e019      	b.n	8012684 <HAL_ADC_Init+0x324>
 8012650:	20000004 	.word	0x20000004
 8012654:	053e2d63 	.word	0x053e2d63
 8012658:	50000100 	.word	0x50000100
 801265c:	50000400 	.word	0x50000400
 8012660:	50000500 	.word	0x50000500
 8012664:	50000600 	.word	0x50000600
 8012668:	50000300 	.word	0x50000300
 801266c:	50000700 	.word	0x50000700
 8012670:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	691a      	ldr	r2, [r3, #16]
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	f022 0201 	bic.w	r2, r2, #1
 8012682:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	695b      	ldr	r3, [r3, #20]
 8012688:	2b01      	cmp	r3, #1
 801268a:	d10c      	bne.n	80126a6 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012692:	f023 010f 	bic.w	r1, r3, #15
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	6a1b      	ldr	r3, [r3, #32]
 801269a:	1e5a      	subs	r2, r3, #1
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	430a      	orrs	r2, r1
 80126a2:	631a      	str	r2, [r3, #48]	; 0x30
 80126a4:	e007      	b.n	80126b6 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	f022 020f 	bic.w	r2, r2, #15
 80126b4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80126ba:	f023 0303 	bic.w	r3, r3, #3
 80126be:	f043 0201 	orr.w	r2, r3, #1
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80126c6:	e007      	b.n	80126d8 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80126cc:	f043 0210 	orr.w	r2, r3, #16
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80126d4:	2301      	movs	r3, #1
 80126d6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80126d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80126da:	4618      	mov	r0, r3
 80126dc:	3724      	adds	r7, #36	; 0x24
 80126de:	46bd      	mov	sp, r7
 80126e0:	bd90      	pop	{r4, r7, pc}
 80126e2:	bf00      	nop

080126e4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80126e4:	b580      	push	{r7, lr}
 80126e6:	b086      	sub	sp, #24
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	60f8      	str	r0, [r7, #12]
 80126ec:	60b9      	str	r1, [r7, #8]
 80126ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80126f8:	d004      	beq.n	8012704 <HAL_ADC_Start_DMA+0x20>
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	4a5a      	ldr	r2, [pc, #360]	; (8012868 <HAL_ADC_Start_DMA+0x184>)
 8012700:	4293      	cmp	r3, r2
 8012702:	d101      	bne.n	8012708 <HAL_ADC_Start_DMA+0x24>
 8012704:	4b59      	ldr	r3, [pc, #356]	; (801286c <HAL_ADC_Start_DMA+0x188>)
 8012706:	e000      	b.n	801270a <HAL_ADC_Start_DMA+0x26>
 8012708:	4b59      	ldr	r3, [pc, #356]	; (8012870 <HAL_ADC_Start_DMA+0x18c>)
 801270a:	4618      	mov	r0, r3
 801270c:	f7ff fd6a 	bl	80121e4 <LL_ADC_GetMultimode>
 8012710:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	4618      	mov	r0, r3
 8012718:	f7ff fdfb 	bl	8012312 <LL_ADC_REG_IsConversionOngoing>
 801271c:	4603      	mov	r3, r0
 801271e:	2b00      	cmp	r3, #0
 8012720:	f040 809b 	bne.w	801285a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801272a:	2b01      	cmp	r3, #1
 801272c:	d101      	bne.n	8012732 <HAL_ADC_Start_DMA+0x4e>
 801272e:	2302      	movs	r3, #2
 8012730:	e096      	b.n	8012860 <HAL_ADC_Start_DMA+0x17c>
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	2201      	movs	r2, #1
 8012736:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	4a4d      	ldr	r2, [pc, #308]	; (8012874 <HAL_ADC_Start_DMA+0x190>)
 8012740:	4293      	cmp	r3, r2
 8012742:	d008      	beq.n	8012756 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8012744:	693b      	ldr	r3, [r7, #16]
 8012746:	2b00      	cmp	r3, #0
 8012748:	d005      	beq.n	8012756 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 801274a:	693b      	ldr	r3, [r7, #16]
 801274c:	2b05      	cmp	r3, #5
 801274e:	d002      	beq.n	8012756 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8012750:	693b      	ldr	r3, [r7, #16]
 8012752:	2b09      	cmp	r3, #9
 8012754:	d17a      	bne.n	801284c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8012756:	68f8      	ldr	r0, [r7, #12]
 8012758:	f000 fcf6 	bl	8013148 <ADC_Enable>
 801275c:	4603      	mov	r3, r0
 801275e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8012760:	7dfb      	ldrb	r3, [r7, #23]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d16d      	bne.n	8012842 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801276a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801276e:	f023 0301 	bic.w	r3, r3, #1
 8012772:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	4a3a      	ldr	r2, [pc, #232]	; (8012868 <HAL_ADC_Start_DMA+0x184>)
 8012780:	4293      	cmp	r3, r2
 8012782:	d009      	beq.n	8012798 <HAL_ADC_Start_DMA+0xb4>
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	4a3b      	ldr	r2, [pc, #236]	; (8012878 <HAL_ADC_Start_DMA+0x194>)
 801278a:	4293      	cmp	r3, r2
 801278c:	d002      	beq.n	8012794 <HAL_ADC_Start_DMA+0xb0>
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	e003      	b.n	801279c <HAL_ADC_Start_DMA+0xb8>
 8012794:	4b39      	ldr	r3, [pc, #228]	; (801287c <HAL_ADC_Start_DMA+0x198>)
 8012796:	e001      	b.n	801279c <HAL_ADC_Start_DMA+0xb8>
 8012798:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801279c:	68fa      	ldr	r2, [r7, #12]
 801279e:	6812      	ldr	r2, [r2, #0]
 80127a0:	4293      	cmp	r3, r2
 80127a2:	d002      	beq.n	80127aa <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80127a4:	693b      	ldr	r3, [r7, #16]
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d105      	bne.n	80127b6 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80127ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80127ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d006      	beq.n	80127d0 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80127c6:	f023 0206 	bic.w	r2, r3, #6
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	661a      	str	r2, [r3, #96]	; 0x60
 80127ce:	e002      	b.n	80127d6 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	2200      	movs	r2, #0
 80127d4:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80127da:	4a29      	ldr	r2, [pc, #164]	; (8012880 <HAL_ADC_Start_DMA+0x19c>)
 80127dc:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80127e2:	4a28      	ldr	r2, [pc, #160]	; (8012884 <HAL_ADC_Start_DMA+0x1a0>)
 80127e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80127ea:	4a27      	ldr	r2, [pc, #156]	; (8012888 <HAL_ADC_Start_DMA+0x1a4>)
 80127ec:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	221c      	movs	r2, #28
 80127f4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	2200      	movs	r2, #0
 80127fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	685a      	ldr	r2, [r3, #4]
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	f042 0210 	orr.w	r2, r2, #16
 801280c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	68da      	ldr	r2, [r3, #12]
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	f042 0201 	orr.w	r2, r2, #1
 801281c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	3340      	adds	r3, #64	; 0x40
 8012828:	4619      	mov	r1, r3
 801282a:	68ba      	ldr	r2, [r7, #8]
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	f000 ff09 	bl	8013644 <HAL_DMA_Start_IT>
 8012832:	4603      	mov	r3, r0
 8012834:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8012836:	68fb      	ldr	r3, [r7, #12]
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	4618      	mov	r0, r3
 801283c:	f7ff fd55 	bl	80122ea <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8012840:	e00d      	b.n	801285e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	2200      	movs	r2, #0
 8012846:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 801284a:	e008      	b.n	801285e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 801284c:	2301      	movs	r3, #1
 801284e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	2200      	movs	r2, #0
 8012854:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8012858:	e001      	b.n	801285e <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 801285a:	2302      	movs	r3, #2
 801285c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 801285e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012860:	4618      	mov	r0, r3
 8012862:	3718      	adds	r7, #24
 8012864:	46bd      	mov	sp, r7
 8012866:	bd80      	pop	{r7, pc}
 8012868:	50000100 	.word	0x50000100
 801286c:	50000300 	.word	0x50000300
 8012870:	50000700 	.word	0x50000700
 8012874:	50000600 	.word	0x50000600
 8012878:	50000500 	.word	0x50000500
 801287c:	50000400 	.word	0x50000400
 8012880:	0801320d 	.word	0x0801320d
 8012884:	080132e5 	.word	0x080132e5
 8012888:	08013301 	.word	0x08013301

0801288c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 801288c:	b480      	push	{r7}
 801288e:	b083      	sub	sp, #12
 8012890:	af00      	add	r7, sp, #0
 8012892:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8012894:	bf00      	nop
 8012896:	370c      	adds	r7, #12
 8012898:	46bd      	mov	sp, r7
 801289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801289e:	4770      	bx	lr

080128a0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80128a0:	b480      	push	{r7}
 80128a2:	b083      	sub	sp, #12
 80128a4:	af00      	add	r7, sp, #0
 80128a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80128a8:	bf00      	nop
 80128aa:	370c      	adds	r7, #12
 80128ac:	46bd      	mov	sp, r7
 80128ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128b2:	4770      	bx	lr

080128b4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80128b4:	b480      	push	{r7}
 80128b6:	b083      	sub	sp, #12
 80128b8:	af00      	add	r7, sp, #0
 80128ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80128bc:	bf00      	nop
 80128be:	370c      	adds	r7, #12
 80128c0:	46bd      	mov	sp, r7
 80128c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c6:	4770      	bx	lr

080128c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80128c8:	b580      	push	{r7, lr}
 80128ca:	b0b6      	sub	sp, #216	; 0xd8
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	6078      	str	r0, [r7, #4]
 80128d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80128d2:	2300      	movs	r3, #0
 80128d4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80128d8:	2300      	movs	r3, #0
 80128da:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80128e2:	2b01      	cmp	r3, #1
 80128e4:	d102      	bne.n	80128ec <HAL_ADC_ConfigChannel+0x24>
 80128e6:	2302      	movs	r3, #2
 80128e8:	f000 bc13 	b.w	8013112 <HAL_ADC_ConfigChannel+0x84a>
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	2201      	movs	r2, #1
 80128f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	4618      	mov	r0, r3
 80128fa:	f7ff fd0a 	bl	8012312 <LL_ADC_REG_IsConversionOngoing>
 80128fe:	4603      	mov	r3, r0
 8012900:	2b00      	cmp	r3, #0
 8012902:	f040 83f3 	bne.w	80130ec <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	6818      	ldr	r0, [r3, #0]
 801290a:	683b      	ldr	r3, [r7, #0]
 801290c:	6859      	ldr	r1, [r3, #4]
 801290e:	683b      	ldr	r3, [r7, #0]
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	461a      	mov	r2, r3
 8012914:	f7ff fbe7 	bl	80120e6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	4618      	mov	r0, r3
 801291e:	f7ff fcf8 	bl	8012312 <LL_ADC_REG_IsConversionOngoing>
 8012922:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	4618      	mov	r0, r3
 801292c:	f7ff fd04 	bl	8012338 <LL_ADC_INJ_IsConversionOngoing>
 8012930:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8012934:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8012938:	2b00      	cmp	r3, #0
 801293a:	f040 81d9 	bne.w	8012cf0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 801293e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8012942:	2b00      	cmp	r3, #0
 8012944:	f040 81d4 	bne.w	8012cf0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8012948:	683b      	ldr	r3, [r7, #0]
 801294a:	689b      	ldr	r3, [r3, #8]
 801294c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012950:	d10f      	bne.n	8012972 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	6818      	ldr	r0, [r3, #0]
 8012956:	683b      	ldr	r3, [r7, #0]
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	2200      	movs	r2, #0
 801295c:	4619      	mov	r1, r3
 801295e:	f7ff fbee 	bl	801213e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801296a:	4618      	mov	r0, r3
 801296c:	f7ff fb95 	bl	801209a <LL_ADC_SetSamplingTimeCommonConfig>
 8012970:	e00e      	b.n	8012990 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	6818      	ldr	r0, [r3, #0]
 8012976:	683b      	ldr	r3, [r7, #0]
 8012978:	6819      	ldr	r1, [r3, #0]
 801297a:	683b      	ldr	r3, [r7, #0]
 801297c:	689b      	ldr	r3, [r3, #8]
 801297e:	461a      	mov	r2, r3
 8012980:	f7ff fbdd 	bl	801213e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	2100      	movs	r1, #0
 801298a:	4618      	mov	r0, r3
 801298c:	f7ff fb85 	bl	801209a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8012990:	683b      	ldr	r3, [r7, #0]
 8012992:	695a      	ldr	r2, [r3, #20]
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	68db      	ldr	r3, [r3, #12]
 801299a:	08db      	lsrs	r3, r3, #3
 801299c:	f003 0303 	and.w	r3, r3, #3
 80129a0:	005b      	lsls	r3, r3, #1
 80129a2:	fa02 f303 	lsl.w	r3, r2, r3
 80129a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80129aa:	683b      	ldr	r3, [r7, #0]
 80129ac:	691b      	ldr	r3, [r3, #16]
 80129ae:	2b04      	cmp	r3, #4
 80129b0:	d022      	beq.n	80129f8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	6818      	ldr	r0, [r3, #0]
 80129b6:	683b      	ldr	r3, [r7, #0]
 80129b8:	6919      	ldr	r1, [r3, #16]
 80129ba:	683b      	ldr	r3, [r7, #0]
 80129bc:	681a      	ldr	r2, [r3, #0]
 80129be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80129c2:	f7ff fadf 	bl	8011f84 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	6818      	ldr	r0, [r3, #0]
 80129ca:	683b      	ldr	r3, [r7, #0]
 80129cc:	6919      	ldr	r1, [r3, #16]
 80129ce:	683b      	ldr	r3, [r7, #0]
 80129d0:	699b      	ldr	r3, [r3, #24]
 80129d2:	461a      	mov	r2, r3
 80129d4:	f7ff fb2b 	bl	801202e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	6818      	ldr	r0, [r3, #0]
 80129dc:	683b      	ldr	r3, [r7, #0]
 80129de:	6919      	ldr	r1, [r3, #16]
 80129e0:	683b      	ldr	r3, [r7, #0]
 80129e2:	7f1b      	ldrb	r3, [r3, #28]
 80129e4:	2b01      	cmp	r3, #1
 80129e6:	d102      	bne.n	80129ee <HAL_ADC_ConfigChannel+0x126>
 80129e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80129ec:	e000      	b.n	80129f0 <HAL_ADC_ConfigChannel+0x128>
 80129ee:	2300      	movs	r3, #0
 80129f0:	461a      	mov	r2, r3
 80129f2:	f7ff fb37 	bl	8012064 <LL_ADC_SetOffsetSaturation>
 80129f6:	e17b      	b.n	8012cf0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	2100      	movs	r1, #0
 80129fe:	4618      	mov	r0, r3
 8012a00:	f7ff fae4 	bl	8011fcc <LL_ADC_GetOffsetChannel>
 8012a04:	4603      	mov	r3, r0
 8012a06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d10a      	bne.n	8012a24 <HAL_ADC_ConfigChannel+0x15c>
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	2100      	movs	r1, #0
 8012a14:	4618      	mov	r0, r3
 8012a16:	f7ff fad9 	bl	8011fcc <LL_ADC_GetOffsetChannel>
 8012a1a:	4603      	mov	r3, r0
 8012a1c:	0e9b      	lsrs	r3, r3, #26
 8012a1e:	f003 021f 	and.w	r2, r3, #31
 8012a22:	e01e      	b.n	8012a62 <HAL_ADC_ConfigChannel+0x19a>
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	681b      	ldr	r3, [r3, #0]
 8012a28:	2100      	movs	r1, #0
 8012a2a:	4618      	mov	r0, r3
 8012a2c:	f7ff face 	bl	8011fcc <LL_ADC_GetOffsetChannel>
 8012a30:	4603      	mov	r3, r0
 8012a32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012a36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8012a3a:	fa93 f3a3 	rbit	r3, r3
 8012a3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8012a42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012a46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8012a4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d101      	bne.n	8012a56 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8012a52:	2320      	movs	r3, #32
 8012a54:	e004      	b.n	8012a60 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8012a56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8012a5a:	fab3 f383 	clz	r3, r3
 8012a5e:	b2db      	uxtb	r3, r3
 8012a60:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8012a62:	683b      	ldr	r3, [r7, #0]
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d105      	bne.n	8012a7a <HAL_ADC_ConfigChannel+0x1b2>
 8012a6e:	683b      	ldr	r3, [r7, #0]
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	0e9b      	lsrs	r3, r3, #26
 8012a74:	f003 031f 	and.w	r3, r3, #31
 8012a78:	e018      	b.n	8012aac <HAL_ADC_ConfigChannel+0x1e4>
 8012a7a:	683b      	ldr	r3, [r7, #0]
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012a82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8012a86:	fa93 f3a3 	rbit	r3, r3
 8012a8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8012a8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012a92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8012a96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d101      	bne.n	8012aa2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8012a9e:	2320      	movs	r3, #32
 8012aa0:	e004      	b.n	8012aac <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8012aa2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012aa6:	fab3 f383 	clz	r3, r3
 8012aaa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8012aac:	429a      	cmp	r2, r3
 8012aae:	d106      	bne.n	8012abe <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	2200      	movs	r2, #0
 8012ab6:	2100      	movs	r1, #0
 8012ab8:	4618      	mov	r0, r3
 8012aba:	f7ff fa9d 	bl	8011ff8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	2101      	movs	r1, #1
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	f7ff fa81 	bl	8011fcc <LL_ADC_GetOffsetChannel>
 8012aca:	4603      	mov	r3, r0
 8012acc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d10a      	bne.n	8012aea <HAL_ADC_ConfigChannel+0x222>
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	2101      	movs	r1, #1
 8012ada:	4618      	mov	r0, r3
 8012adc:	f7ff fa76 	bl	8011fcc <LL_ADC_GetOffsetChannel>
 8012ae0:	4603      	mov	r3, r0
 8012ae2:	0e9b      	lsrs	r3, r3, #26
 8012ae4:	f003 021f 	and.w	r2, r3, #31
 8012ae8:	e01e      	b.n	8012b28 <HAL_ADC_ConfigChannel+0x260>
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	2101      	movs	r1, #1
 8012af0:	4618      	mov	r0, r3
 8012af2:	f7ff fa6b 	bl	8011fcc <LL_ADC_GetOffsetChannel>
 8012af6:	4603      	mov	r3, r0
 8012af8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012afc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012b00:	fa93 f3a3 	rbit	r3, r3
 8012b04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8012b08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012b0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8012b10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d101      	bne.n	8012b1c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8012b18:	2320      	movs	r3, #32
 8012b1a:	e004      	b.n	8012b26 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8012b1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012b20:	fab3 f383 	clz	r3, r3
 8012b24:	b2db      	uxtb	r3, r3
 8012b26:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8012b28:	683b      	ldr	r3, [r7, #0]
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d105      	bne.n	8012b40 <HAL_ADC_ConfigChannel+0x278>
 8012b34:	683b      	ldr	r3, [r7, #0]
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	0e9b      	lsrs	r3, r3, #26
 8012b3a:	f003 031f 	and.w	r3, r3, #31
 8012b3e:	e018      	b.n	8012b72 <HAL_ADC_ConfigChannel+0x2aa>
 8012b40:	683b      	ldr	r3, [r7, #0]
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012b48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012b4c:	fa93 f3a3 	rbit	r3, r3
 8012b50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8012b54:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012b58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8012b5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d101      	bne.n	8012b68 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8012b64:	2320      	movs	r3, #32
 8012b66:	e004      	b.n	8012b72 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8012b68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012b6c:	fab3 f383 	clz	r3, r3
 8012b70:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8012b72:	429a      	cmp	r2, r3
 8012b74:	d106      	bne.n	8012b84 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	2200      	movs	r2, #0
 8012b7c:	2101      	movs	r1, #1
 8012b7e:	4618      	mov	r0, r3
 8012b80:	f7ff fa3a 	bl	8011ff8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	2102      	movs	r1, #2
 8012b8a:	4618      	mov	r0, r3
 8012b8c:	f7ff fa1e 	bl	8011fcc <LL_ADC_GetOffsetChannel>
 8012b90:	4603      	mov	r3, r0
 8012b92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d10a      	bne.n	8012bb0 <HAL_ADC_ConfigChannel+0x2e8>
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	2102      	movs	r1, #2
 8012ba0:	4618      	mov	r0, r3
 8012ba2:	f7ff fa13 	bl	8011fcc <LL_ADC_GetOffsetChannel>
 8012ba6:	4603      	mov	r3, r0
 8012ba8:	0e9b      	lsrs	r3, r3, #26
 8012baa:	f003 021f 	and.w	r2, r3, #31
 8012bae:	e01e      	b.n	8012bee <HAL_ADC_ConfigChannel+0x326>
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	2102      	movs	r1, #2
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	f7ff fa08 	bl	8011fcc <LL_ADC_GetOffsetChannel>
 8012bbc:	4603      	mov	r3, r0
 8012bbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012bc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012bc6:	fa93 f3a3 	rbit	r3, r3
 8012bca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8012bce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012bd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8012bd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d101      	bne.n	8012be2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8012bde:	2320      	movs	r3, #32
 8012be0:	e004      	b.n	8012bec <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8012be2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012be6:	fab3 f383 	clz	r3, r3
 8012bea:	b2db      	uxtb	r3, r3
 8012bec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8012bee:	683b      	ldr	r3, [r7, #0]
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d105      	bne.n	8012c06 <HAL_ADC_ConfigChannel+0x33e>
 8012bfa:	683b      	ldr	r3, [r7, #0]
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	0e9b      	lsrs	r3, r3, #26
 8012c00:	f003 031f 	and.w	r3, r3, #31
 8012c04:	e016      	b.n	8012c34 <HAL_ADC_ConfigChannel+0x36c>
 8012c06:	683b      	ldr	r3, [r7, #0]
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012c0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012c12:	fa93 f3a3 	rbit	r3, r3
 8012c16:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8012c18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012c1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8012c1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d101      	bne.n	8012c2a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8012c26:	2320      	movs	r3, #32
 8012c28:	e004      	b.n	8012c34 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8012c2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012c2e:	fab3 f383 	clz	r3, r3
 8012c32:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8012c34:	429a      	cmp	r2, r3
 8012c36:	d106      	bne.n	8012c46 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	2200      	movs	r2, #0
 8012c3e:	2102      	movs	r1, #2
 8012c40:	4618      	mov	r0, r3
 8012c42:	f7ff f9d9 	bl	8011ff8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	2103      	movs	r1, #3
 8012c4c:	4618      	mov	r0, r3
 8012c4e:	f7ff f9bd 	bl	8011fcc <LL_ADC_GetOffsetChannel>
 8012c52:	4603      	mov	r3, r0
 8012c54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d10a      	bne.n	8012c72 <HAL_ADC_ConfigChannel+0x3aa>
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	2103      	movs	r1, #3
 8012c62:	4618      	mov	r0, r3
 8012c64:	f7ff f9b2 	bl	8011fcc <LL_ADC_GetOffsetChannel>
 8012c68:	4603      	mov	r3, r0
 8012c6a:	0e9b      	lsrs	r3, r3, #26
 8012c6c:	f003 021f 	and.w	r2, r3, #31
 8012c70:	e017      	b.n	8012ca2 <HAL_ADC_ConfigChannel+0x3da>
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	2103      	movs	r1, #3
 8012c78:	4618      	mov	r0, r3
 8012c7a:	f7ff f9a7 	bl	8011fcc <LL_ADC_GetOffsetChannel>
 8012c7e:	4603      	mov	r3, r0
 8012c80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012c82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012c84:	fa93 f3a3 	rbit	r3, r3
 8012c88:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8012c8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012c8c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8012c8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d101      	bne.n	8012c98 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8012c94:	2320      	movs	r3, #32
 8012c96:	e003      	b.n	8012ca0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8012c98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012c9a:	fab3 f383 	clz	r3, r3
 8012c9e:	b2db      	uxtb	r3, r3
 8012ca0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8012ca2:	683b      	ldr	r3, [r7, #0]
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d105      	bne.n	8012cba <HAL_ADC_ConfigChannel+0x3f2>
 8012cae:	683b      	ldr	r3, [r7, #0]
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	0e9b      	lsrs	r3, r3, #26
 8012cb4:	f003 031f 	and.w	r3, r3, #31
 8012cb8:	e011      	b.n	8012cde <HAL_ADC_ConfigChannel+0x416>
 8012cba:	683b      	ldr	r3, [r7, #0]
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012cc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012cc2:	fa93 f3a3 	rbit	r3, r3
 8012cc6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8012cc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012cca:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8012ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d101      	bne.n	8012cd6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8012cd2:	2320      	movs	r3, #32
 8012cd4:	e003      	b.n	8012cde <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8012cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012cd8:	fab3 f383 	clz	r3, r3
 8012cdc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8012cde:	429a      	cmp	r2, r3
 8012ce0:	d106      	bne.n	8012cf0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	2200      	movs	r2, #0
 8012ce8:	2103      	movs	r1, #3
 8012cea:	4618      	mov	r0, r3
 8012cec:	f7ff f984 	bl	8011ff8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	f7ff fae5 	bl	80122c4 <LL_ADC_IsEnabled>
 8012cfa:	4603      	mov	r3, r0
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	f040 813d 	bne.w	8012f7c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	6818      	ldr	r0, [r3, #0]
 8012d06:	683b      	ldr	r3, [r7, #0]
 8012d08:	6819      	ldr	r1, [r3, #0]
 8012d0a:	683b      	ldr	r3, [r7, #0]
 8012d0c:	68db      	ldr	r3, [r3, #12]
 8012d0e:	461a      	mov	r2, r3
 8012d10:	f7ff fa40 	bl	8012194 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8012d14:	683b      	ldr	r3, [r7, #0]
 8012d16:	68db      	ldr	r3, [r3, #12]
 8012d18:	4aa2      	ldr	r2, [pc, #648]	; (8012fa4 <HAL_ADC_ConfigChannel+0x6dc>)
 8012d1a:	4293      	cmp	r3, r2
 8012d1c:	f040 812e 	bne.w	8012f7c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8012d24:	683b      	ldr	r3, [r7, #0]
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d10b      	bne.n	8012d48 <HAL_ADC_ConfigChannel+0x480>
 8012d30:	683b      	ldr	r3, [r7, #0]
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	0e9b      	lsrs	r3, r3, #26
 8012d36:	3301      	adds	r3, #1
 8012d38:	f003 031f 	and.w	r3, r3, #31
 8012d3c:	2b09      	cmp	r3, #9
 8012d3e:	bf94      	ite	ls
 8012d40:	2301      	movls	r3, #1
 8012d42:	2300      	movhi	r3, #0
 8012d44:	b2db      	uxtb	r3, r3
 8012d46:	e019      	b.n	8012d7c <HAL_ADC_ConfigChannel+0x4b4>
 8012d48:	683b      	ldr	r3, [r7, #0]
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012d4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012d50:	fa93 f3a3 	rbit	r3, r3
 8012d54:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8012d56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012d58:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8012d5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d101      	bne.n	8012d64 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8012d60:	2320      	movs	r3, #32
 8012d62:	e003      	b.n	8012d6c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8012d64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012d66:	fab3 f383 	clz	r3, r3
 8012d6a:	b2db      	uxtb	r3, r3
 8012d6c:	3301      	adds	r3, #1
 8012d6e:	f003 031f 	and.w	r3, r3, #31
 8012d72:	2b09      	cmp	r3, #9
 8012d74:	bf94      	ite	ls
 8012d76:	2301      	movls	r3, #1
 8012d78:	2300      	movhi	r3, #0
 8012d7a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d079      	beq.n	8012e74 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8012d80:	683b      	ldr	r3, [r7, #0]
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d107      	bne.n	8012d9c <HAL_ADC_ConfigChannel+0x4d4>
 8012d8c:	683b      	ldr	r3, [r7, #0]
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	0e9b      	lsrs	r3, r3, #26
 8012d92:	3301      	adds	r3, #1
 8012d94:	069b      	lsls	r3, r3, #26
 8012d96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8012d9a:	e015      	b.n	8012dc8 <HAL_ADC_ConfigChannel+0x500>
 8012d9c:	683b      	ldr	r3, [r7, #0]
 8012d9e:	681b      	ldr	r3, [r3, #0]
 8012da0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012da4:	fa93 f3a3 	rbit	r3, r3
 8012da8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8012daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012dac:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8012dae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d101      	bne.n	8012db8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8012db4:	2320      	movs	r3, #32
 8012db6:	e003      	b.n	8012dc0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8012db8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012dba:	fab3 f383 	clz	r3, r3
 8012dbe:	b2db      	uxtb	r3, r3
 8012dc0:	3301      	adds	r3, #1
 8012dc2:	069b      	lsls	r3, r3, #26
 8012dc4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8012dc8:	683b      	ldr	r3, [r7, #0]
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d109      	bne.n	8012de8 <HAL_ADC_ConfigChannel+0x520>
 8012dd4:	683b      	ldr	r3, [r7, #0]
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	0e9b      	lsrs	r3, r3, #26
 8012dda:	3301      	adds	r3, #1
 8012ddc:	f003 031f 	and.w	r3, r3, #31
 8012de0:	2101      	movs	r1, #1
 8012de2:	fa01 f303 	lsl.w	r3, r1, r3
 8012de6:	e017      	b.n	8012e18 <HAL_ADC_ConfigChannel+0x550>
 8012de8:	683b      	ldr	r3, [r7, #0]
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012dee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012df0:	fa93 f3a3 	rbit	r3, r3
 8012df4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8012df6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012df8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8012dfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d101      	bne.n	8012e04 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8012e00:	2320      	movs	r3, #32
 8012e02:	e003      	b.n	8012e0c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8012e04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e06:	fab3 f383 	clz	r3, r3
 8012e0a:	b2db      	uxtb	r3, r3
 8012e0c:	3301      	adds	r3, #1
 8012e0e:	f003 031f 	and.w	r3, r3, #31
 8012e12:	2101      	movs	r1, #1
 8012e14:	fa01 f303 	lsl.w	r3, r1, r3
 8012e18:	ea42 0103 	orr.w	r1, r2, r3
 8012e1c:	683b      	ldr	r3, [r7, #0]
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d10a      	bne.n	8012e3e <HAL_ADC_ConfigChannel+0x576>
 8012e28:	683b      	ldr	r3, [r7, #0]
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	0e9b      	lsrs	r3, r3, #26
 8012e2e:	3301      	adds	r3, #1
 8012e30:	f003 021f 	and.w	r2, r3, #31
 8012e34:	4613      	mov	r3, r2
 8012e36:	005b      	lsls	r3, r3, #1
 8012e38:	4413      	add	r3, r2
 8012e3a:	051b      	lsls	r3, r3, #20
 8012e3c:	e018      	b.n	8012e70 <HAL_ADC_ConfigChannel+0x5a8>
 8012e3e:	683b      	ldr	r3, [r7, #0]
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e46:	fa93 f3a3 	rbit	r3, r3
 8012e4a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8012e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8012e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d101      	bne.n	8012e5a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8012e56:	2320      	movs	r3, #32
 8012e58:	e003      	b.n	8012e62 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8012e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e5c:	fab3 f383 	clz	r3, r3
 8012e60:	b2db      	uxtb	r3, r3
 8012e62:	3301      	adds	r3, #1
 8012e64:	f003 021f 	and.w	r2, r3, #31
 8012e68:	4613      	mov	r3, r2
 8012e6a:	005b      	lsls	r3, r3, #1
 8012e6c:	4413      	add	r3, r2
 8012e6e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8012e70:	430b      	orrs	r3, r1
 8012e72:	e07e      	b.n	8012f72 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8012e74:	683b      	ldr	r3, [r7, #0]
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d107      	bne.n	8012e90 <HAL_ADC_ConfigChannel+0x5c8>
 8012e80:	683b      	ldr	r3, [r7, #0]
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	0e9b      	lsrs	r3, r3, #26
 8012e86:	3301      	adds	r3, #1
 8012e88:	069b      	lsls	r3, r3, #26
 8012e8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8012e8e:	e015      	b.n	8012ebc <HAL_ADC_ConfigChannel+0x5f4>
 8012e90:	683b      	ldr	r3, [r7, #0]
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e98:	fa93 f3a3 	rbit	r3, r3
 8012e9c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8012e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ea0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8012ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d101      	bne.n	8012eac <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8012ea8:	2320      	movs	r3, #32
 8012eaa:	e003      	b.n	8012eb4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8012eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012eae:	fab3 f383 	clz	r3, r3
 8012eb2:	b2db      	uxtb	r3, r3
 8012eb4:	3301      	adds	r3, #1
 8012eb6:	069b      	lsls	r3, r3, #26
 8012eb8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8012ebc:	683b      	ldr	r3, [r7, #0]
 8012ebe:	681b      	ldr	r3, [r3, #0]
 8012ec0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d109      	bne.n	8012edc <HAL_ADC_ConfigChannel+0x614>
 8012ec8:	683b      	ldr	r3, [r7, #0]
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	0e9b      	lsrs	r3, r3, #26
 8012ece:	3301      	adds	r3, #1
 8012ed0:	f003 031f 	and.w	r3, r3, #31
 8012ed4:	2101      	movs	r1, #1
 8012ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8012eda:	e017      	b.n	8012f0c <HAL_ADC_ConfigChannel+0x644>
 8012edc:	683b      	ldr	r3, [r7, #0]
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012ee2:	6a3b      	ldr	r3, [r7, #32]
 8012ee4:	fa93 f3a3 	rbit	r3, r3
 8012ee8:	61fb      	str	r3, [r7, #28]
  return result;
 8012eea:	69fb      	ldr	r3, [r7, #28]
 8012eec:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8012eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d101      	bne.n	8012ef8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8012ef4:	2320      	movs	r3, #32
 8012ef6:	e003      	b.n	8012f00 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8012ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012efa:	fab3 f383 	clz	r3, r3
 8012efe:	b2db      	uxtb	r3, r3
 8012f00:	3301      	adds	r3, #1
 8012f02:	f003 031f 	and.w	r3, r3, #31
 8012f06:	2101      	movs	r1, #1
 8012f08:	fa01 f303 	lsl.w	r3, r1, r3
 8012f0c:	ea42 0103 	orr.w	r1, r2, r3
 8012f10:	683b      	ldr	r3, [r7, #0]
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d10d      	bne.n	8012f38 <HAL_ADC_ConfigChannel+0x670>
 8012f1c:	683b      	ldr	r3, [r7, #0]
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	0e9b      	lsrs	r3, r3, #26
 8012f22:	3301      	adds	r3, #1
 8012f24:	f003 021f 	and.w	r2, r3, #31
 8012f28:	4613      	mov	r3, r2
 8012f2a:	005b      	lsls	r3, r3, #1
 8012f2c:	4413      	add	r3, r2
 8012f2e:	3b1e      	subs	r3, #30
 8012f30:	051b      	lsls	r3, r3, #20
 8012f32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8012f36:	e01b      	b.n	8012f70 <HAL_ADC_ConfigChannel+0x6a8>
 8012f38:	683b      	ldr	r3, [r7, #0]
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012f3e:	697b      	ldr	r3, [r7, #20]
 8012f40:	fa93 f3a3 	rbit	r3, r3
 8012f44:	613b      	str	r3, [r7, #16]
  return result;
 8012f46:	693b      	ldr	r3, [r7, #16]
 8012f48:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8012f4a:	69bb      	ldr	r3, [r7, #24]
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d101      	bne.n	8012f54 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8012f50:	2320      	movs	r3, #32
 8012f52:	e003      	b.n	8012f5c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8012f54:	69bb      	ldr	r3, [r7, #24]
 8012f56:	fab3 f383 	clz	r3, r3
 8012f5a:	b2db      	uxtb	r3, r3
 8012f5c:	3301      	adds	r3, #1
 8012f5e:	f003 021f 	and.w	r2, r3, #31
 8012f62:	4613      	mov	r3, r2
 8012f64:	005b      	lsls	r3, r3, #1
 8012f66:	4413      	add	r3, r2
 8012f68:	3b1e      	subs	r3, #30
 8012f6a:	051b      	lsls	r3, r3, #20
 8012f6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8012f70:	430b      	orrs	r3, r1
 8012f72:	683a      	ldr	r2, [r7, #0]
 8012f74:	6892      	ldr	r2, [r2, #8]
 8012f76:	4619      	mov	r1, r3
 8012f78:	f7ff f8e1 	bl	801213e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8012f7c:	683b      	ldr	r3, [r7, #0]
 8012f7e:	681a      	ldr	r2, [r3, #0]
 8012f80:	4b09      	ldr	r3, [pc, #36]	; (8012fa8 <HAL_ADC_ConfigChannel+0x6e0>)
 8012f82:	4013      	ands	r3, r2
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	f000 80be 	beq.w	8013106 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012f92:	d004      	beq.n	8012f9e <HAL_ADC_ConfigChannel+0x6d6>
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	4a04      	ldr	r2, [pc, #16]	; (8012fac <HAL_ADC_ConfigChannel+0x6e4>)
 8012f9a:	4293      	cmp	r3, r2
 8012f9c:	d10a      	bne.n	8012fb4 <HAL_ADC_ConfigChannel+0x6ec>
 8012f9e:	4b04      	ldr	r3, [pc, #16]	; (8012fb0 <HAL_ADC_ConfigChannel+0x6e8>)
 8012fa0:	e009      	b.n	8012fb6 <HAL_ADC_ConfigChannel+0x6ee>
 8012fa2:	bf00      	nop
 8012fa4:	407f0000 	.word	0x407f0000
 8012fa8:	80080000 	.word	0x80080000
 8012fac:	50000100 	.word	0x50000100
 8012fb0:	50000300 	.word	0x50000300
 8012fb4:	4b59      	ldr	r3, [pc, #356]	; (801311c <HAL_ADC_ConfigChannel+0x854>)
 8012fb6:	4618      	mov	r0, r3
 8012fb8:	f7fe ffd6 	bl	8011f68 <LL_ADC_GetCommonPathInternalCh>
 8012fbc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8012fc0:	683b      	ldr	r3, [r7, #0]
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	4a56      	ldr	r2, [pc, #344]	; (8013120 <HAL_ADC_ConfigChannel+0x858>)
 8012fc6:	4293      	cmp	r3, r2
 8012fc8:	d004      	beq.n	8012fd4 <HAL_ADC_ConfigChannel+0x70c>
 8012fca:	683b      	ldr	r3, [r7, #0]
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	4a55      	ldr	r2, [pc, #340]	; (8013124 <HAL_ADC_ConfigChannel+0x85c>)
 8012fd0:	4293      	cmp	r3, r2
 8012fd2:	d13a      	bne.n	801304a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8012fd4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012fd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d134      	bne.n	801304a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012fe8:	d005      	beq.n	8012ff6 <HAL_ADC_ConfigChannel+0x72e>
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	4a4e      	ldr	r2, [pc, #312]	; (8013128 <HAL_ADC_ConfigChannel+0x860>)
 8012ff0:	4293      	cmp	r3, r2
 8012ff2:	f040 8085 	bne.w	8013100 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012ffe:	d004      	beq.n	801300a <HAL_ADC_ConfigChannel+0x742>
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	4a49      	ldr	r2, [pc, #292]	; (801312c <HAL_ADC_ConfigChannel+0x864>)
 8013006:	4293      	cmp	r3, r2
 8013008:	d101      	bne.n	801300e <HAL_ADC_ConfigChannel+0x746>
 801300a:	4a49      	ldr	r2, [pc, #292]	; (8013130 <HAL_ADC_ConfigChannel+0x868>)
 801300c:	e000      	b.n	8013010 <HAL_ADC_ConfigChannel+0x748>
 801300e:	4a43      	ldr	r2, [pc, #268]	; (801311c <HAL_ADC_ConfigChannel+0x854>)
 8013010:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013014:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8013018:	4619      	mov	r1, r3
 801301a:	4610      	mov	r0, r2
 801301c:	f7fe ff91 	bl	8011f42 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8013020:	4b44      	ldr	r3, [pc, #272]	; (8013134 <HAL_ADC_ConfigChannel+0x86c>)
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	099b      	lsrs	r3, r3, #6
 8013026:	4a44      	ldr	r2, [pc, #272]	; (8013138 <HAL_ADC_ConfigChannel+0x870>)
 8013028:	fba2 2303 	umull	r2, r3, r2, r3
 801302c:	099b      	lsrs	r3, r3, #6
 801302e:	1c5a      	adds	r2, r3, #1
 8013030:	4613      	mov	r3, r2
 8013032:	005b      	lsls	r3, r3, #1
 8013034:	4413      	add	r3, r2
 8013036:	009b      	lsls	r3, r3, #2
 8013038:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 801303a:	e002      	b.n	8013042 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	3b01      	subs	r3, #1
 8013040:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8013042:	68fb      	ldr	r3, [r7, #12]
 8013044:	2b00      	cmp	r3, #0
 8013046:	d1f9      	bne.n	801303c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8013048:	e05a      	b.n	8013100 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 801304a:	683b      	ldr	r3, [r7, #0]
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	4a3b      	ldr	r2, [pc, #236]	; (801313c <HAL_ADC_ConfigChannel+0x874>)
 8013050:	4293      	cmp	r3, r2
 8013052:	d125      	bne.n	80130a0 <HAL_ADC_ConfigChannel+0x7d8>
 8013054:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013058:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801305c:	2b00      	cmp	r3, #0
 801305e:	d11f      	bne.n	80130a0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	681b      	ldr	r3, [r3, #0]
 8013064:	4a31      	ldr	r2, [pc, #196]	; (801312c <HAL_ADC_ConfigChannel+0x864>)
 8013066:	4293      	cmp	r3, r2
 8013068:	d104      	bne.n	8013074 <HAL_ADC_ConfigChannel+0x7ac>
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	681b      	ldr	r3, [r3, #0]
 801306e:	4a34      	ldr	r2, [pc, #208]	; (8013140 <HAL_ADC_ConfigChannel+0x878>)
 8013070:	4293      	cmp	r3, r2
 8013072:	d047      	beq.n	8013104 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	681b      	ldr	r3, [r3, #0]
 8013078:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801307c:	d004      	beq.n	8013088 <HAL_ADC_ConfigChannel+0x7c0>
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	4a2a      	ldr	r2, [pc, #168]	; (801312c <HAL_ADC_ConfigChannel+0x864>)
 8013084:	4293      	cmp	r3, r2
 8013086:	d101      	bne.n	801308c <HAL_ADC_ConfigChannel+0x7c4>
 8013088:	4a29      	ldr	r2, [pc, #164]	; (8013130 <HAL_ADC_ConfigChannel+0x868>)
 801308a:	e000      	b.n	801308e <HAL_ADC_ConfigChannel+0x7c6>
 801308c:	4a23      	ldr	r2, [pc, #140]	; (801311c <HAL_ADC_ConfigChannel+0x854>)
 801308e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013092:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013096:	4619      	mov	r1, r3
 8013098:	4610      	mov	r0, r2
 801309a:	f7fe ff52 	bl	8011f42 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 801309e:	e031      	b.n	8013104 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80130a0:	683b      	ldr	r3, [r7, #0]
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	4a27      	ldr	r2, [pc, #156]	; (8013144 <HAL_ADC_ConfigChannel+0x87c>)
 80130a6:	4293      	cmp	r3, r2
 80130a8:	d12d      	bne.n	8013106 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80130aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80130ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d127      	bne.n	8013106 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	4a1c      	ldr	r2, [pc, #112]	; (801312c <HAL_ADC_ConfigChannel+0x864>)
 80130bc:	4293      	cmp	r3, r2
 80130be:	d022      	beq.n	8013106 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80130c8:	d004      	beq.n	80130d4 <HAL_ADC_ConfigChannel+0x80c>
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	681b      	ldr	r3, [r3, #0]
 80130ce:	4a17      	ldr	r2, [pc, #92]	; (801312c <HAL_ADC_ConfigChannel+0x864>)
 80130d0:	4293      	cmp	r3, r2
 80130d2:	d101      	bne.n	80130d8 <HAL_ADC_ConfigChannel+0x810>
 80130d4:	4a16      	ldr	r2, [pc, #88]	; (8013130 <HAL_ADC_ConfigChannel+0x868>)
 80130d6:	e000      	b.n	80130da <HAL_ADC_ConfigChannel+0x812>
 80130d8:	4a10      	ldr	r2, [pc, #64]	; (801311c <HAL_ADC_ConfigChannel+0x854>)
 80130da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80130de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80130e2:	4619      	mov	r1, r3
 80130e4:	4610      	mov	r0, r2
 80130e6:	f7fe ff2c 	bl	8011f42 <LL_ADC_SetCommonPathInternalCh>
 80130ea:	e00c      	b.n	8013106 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80130f0:	f043 0220 	orr.w	r2, r3, #32
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80130f8:	2301      	movs	r3, #1
 80130fa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80130fe:	e002      	b.n	8013106 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8013100:	bf00      	nop
 8013102:	e000      	b.n	8013106 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8013104:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	2200      	movs	r2, #0
 801310a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 801310e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8013112:	4618      	mov	r0, r3
 8013114:	37d8      	adds	r7, #216	; 0xd8
 8013116:	46bd      	mov	sp, r7
 8013118:	bd80      	pop	{r7, pc}
 801311a:	bf00      	nop
 801311c:	50000700 	.word	0x50000700
 8013120:	c3210000 	.word	0xc3210000
 8013124:	90c00010 	.word	0x90c00010
 8013128:	50000600 	.word	0x50000600
 801312c:	50000100 	.word	0x50000100
 8013130:	50000300 	.word	0x50000300
 8013134:	20000004 	.word	0x20000004
 8013138:	053e2d63 	.word	0x053e2d63
 801313c:	c7520000 	.word	0xc7520000
 8013140:	50000500 	.word	0x50000500
 8013144:	cb840000 	.word	0xcb840000

08013148 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8013148:	b580      	push	{r7, lr}
 801314a:	b084      	sub	sp, #16
 801314c:	af00      	add	r7, sp, #0
 801314e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	4618      	mov	r0, r3
 8013156:	f7ff f8b5 	bl	80122c4 <LL_ADC_IsEnabled>
 801315a:	4603      	mov	r3, r0
 801315c:	2b00      	cmp	r3, #0
 801315e:	d14d      	bne.n	80131fc <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	689a      	ldr	r2, [r3, #8]
 8013166:	4b28      	ldr	r3, [pc, #160]	; (8013208 <ADC_Enable+0xc0>)
 8013168:	4013      	ands	r3, r2
 801316a:	2b00      	cmp	r3, #0
 801316c:	d00d      	beq.n	801318a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013172:	f043 0210 	orr.w	r2, r3, #16
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801317e:	f043 0201 	orr.w	r2, r3, #1
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8013186:	2301      	movs	r3, #1
 8013188:	e039      	b.n	80131fe <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	4618      	mov	r0, r3
 8013190:	f7ff f884 	bl	801229c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8013194:	f7fe fe94 	bl	8011ec0 <HAL_GetTick>
 8013198:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801319a:	e028      	b.n	80131ee <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	4618      	mov	r0, r3
 80131a2:	f7ff f88f 	bl	80122c4 <LL_ADC_IsEnabled>
 80131a6:	4603      	mov	r3, r0
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d104      	bne.n	80131b6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	4618      	mov	r0, r3
 80131b2:	f7ff f873 	bl	801229c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80131b6:	f7fe fe83 	bl	8011ec0 <HAL_GetTick>
 80131ba:	4602      	mov	r2, r0
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	1ad3      	subs	r3, r2, r3
 80131c0:	2b02      	cmp	r3, #2
 80131c2:	d914      	bls.n	80131ee <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	f003 0301 	and.w	r3, r3, #1
 80131ce:	2b01      	cmp	r3, #1
 80131d0:	d00d      	beq.n	80131ee <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80131d6:	f043 0210 	orr.w	r2, r3, #16
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80131e2:	f043 0201 	orr.w	r2, r3, #1
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80131ea:	2301      	movs	r3, #1
 80131ec:	e007      	b.n	80131fe <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	f003 0301 	and.w	r3, r3, #1
 80131f8:	2b01      	cmp	r3, #1
 80131fa:	d1cf      	bne.n	801319c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80131fc:	2300      	movs	r3, #0
}
 80131fe:	4618      	mov	r0, r3
 8013200:	3710      	adds	r7, #16
 8013202:	46bd      	mov	sp, r7
 8013204:	bd80      	pop	{r7, pc}
 8013206:	bf00      	nop
 8013208:	8000003f 	.word	0x8000003f

0801320c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 801320c:	b580      	push	{r7, lr}
 801320e:	b084      	sub	sp, #16
 8013210:	af00      	add	r7, sp, #0
 8013212:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013218:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 801321a:	68fb      	ldr	r3, [r7, #12]
 801321c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801321e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013222:	2b00      	cmp	r3, #0
 8013224:	d14b      	bne.n	80132be <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801322a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	f003 0308 	and.w	r3, r3, #8
 801323c:	2b00      	cmp	r3, #0
 801323e:	d021      	beq.n	8013284 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8013240:	68fb      	ldr	r3, [r7, #12]
 8013242:	681b      	ldr	r3, [r3, #0]
 8013244:	4618      	mov	r0, r3
 8013246:	f7fe ff3b 	bl	80120c0 <LL_ADC_REG_IsTriggerSourceSWStart>
 801324a:	4603      	mov	r3, r0
 801324c:	2b00      	cmp	r3, #0
 801324e:	d032      	beq.n	80132b6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	68db      	ldr	r3, [r3, #12]
 8013256:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801325a:	2b00      	cmp	r3, #0
 801325c:	d12b      	bne.n	80132b6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013262:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801326a:	68fb      	ldr	r3, [r7, #12]
 801326c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801326e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8013272:	2b00      	cmp	r3, #0
 8013274:	d11f      	bne.n	80132b6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801327a:	f043 0201 	orr.w	r2, r3, #1
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	65da      	str	r2, [r3, #92]	; 0x5c
 8013282:	e018      	b.n	80132b6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	68db      	ldr	r3, [r3, #12]
 801328a:	f003 0302 	and.w	r3, r3, #2
 801328e:	2b00      	cmp	r3, #0
 8013290:	d111      	bne.n	80132b6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013296:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80132a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d105      	bne.n	80132b6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80132ae:	f043 0201 	orr.w	r2, r3, #1
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80132b6:	68f8      	ldr	r0, [r7, #12]
 80132b8:	f7ff fae8 	bl	801288c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80132bc:	e00e      	b.n	80132dc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80132c2:	f003 0310 	and.w	r3, r3, #16
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d003      	beq.n	80132d2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80132ca:	68f8      	ldr	r0, [r7, #12]
 80132cc:	f7ff faf2 	bl	80128b4 <HAL_ADC_ErrorCallback>
}
 80132d0:	e004      	b.n	80132dc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80132d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80132d8:	6878      	ldr	r0, [r7, #4]
 80132da:	4798      	blx	r3
}
 80132dc:	bf00      	nop
 80132de:	3710      	adds	r7, #16
 80132e0:	46bd      	mov	sp, r7
 80132e2:	bd80      	pop	{r7, pc}

080132e4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80132e4:	b580      	push	{r7, lr}
 80132e6:	b084      	sub	sp, #16
 80132e8:	af00      	add	r7, sp, #0
 80132ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80132f0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80132f2:	68f8      	ldr	r0, [r7, #12]
 80132f4:	f7ff fad4 	bl	80128a0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80132f8:	bf00      	nop
 80132fa:	3710      	adds	r7, #16
 80132fc:	46bd      	mov	sp, r7
 80132fe:	bd80      	pop	{r7, pc}

08013300 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8013300:	b580      	push	{r7, lr}
 8013302:	b084      	sub	sp, #16
 8013304:	af00      	add	r7, sp, #0
 8013306:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801330c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013312:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801331e:	f043 0204 	orr.w	r2, r3, #4
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8013326:	68f8      	ldr	r0, [r7, #12]
 8013328:	f7ff fac4 	bl	80128b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801332c:	bf00      	nop
 801332e:	3710      	adds	r7, #16
 8013330:	46bd      	mov	sp, r7
 8013332:	bd80      	pop	{r7, pc}

08013334 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8013334:	b480      	push	{r7}
 8013336:	b085      	sub	sp, #20
 8013338:	af00      	add	r7, sp, #0
 801333a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	f003 0307 	and.w	r3, r3, #7
 8013342:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8013344:	4b0c      	ldr	r3, [pc, #48]	; (8013378 <__NVIC_SetPriorityGrouping+0x44>)
 8013346:	68db      	ldr	r3, [r3, #12]
 8013348:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801334a:	68ba      	ldr	r2, [r7, #8]
 801334c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8013350:	4013      	ands	r3, r2
 8013352:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8013358:	68bb      	ldr	r3, [r7, #8]
 801335a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801335c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8013360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013364:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8013366:	4a04      	ldr	r2, [pc, #16]	; (8013378 <__NVIC_SetPriorityGrouping+0x44>)
 8013368:	68bb      	ldr	r3, [r7, #8]
 801336a:	60d3      	str	r3, [r2, #12]
}
 801336c:	bf00      	nop
 801336e:	3714      	adds	r7, #20
 8013370:	46bd      	mov	sp, r7
 8013372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013376:	4770      	bx	lr
 8013378:	e000ed00 	.word	0xe000ed00

0801337c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801337c:	b480      	push	{r7}
 801337e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8013380:	4b04      	ldr	r3, [pc, #16]	; (8013394 <__NVIC_GetPriorityGrouping+0x18>)
 8013382:	68db      	ldr	r3, [r3, #12]
 8013384:	0a1b      	lsrs	r3, r3, #8
 8013386:	f003 0307 	and.w	r3, r3, #7
}
 801338a:	4618      	mov	r0, r3
 801338c:	46bd      	mov	sp, r7
 801338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013392:	4770      	bx	lr
 8013394:	e000ed00 	.word	0xe000ed00

08013398 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8013398:	b480      	push	{r7}
 801339a:	b083      	sub	sp, #12
 801339c:	af00      	add	r7, sp, #0
 801339e:	4603      	mov	r3, r0
 80133a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80133a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	db0b      	blt.n	80133c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80133aa:	79fb      	ldrb	r3, [r7, #7]
 80133ac:	f003 021f 	and.w	r2, r3, #31
 80133b0:	4907      	ldr	r1, [pc, #28]	; (80133d0 <__NVIC_EnableIRQ+0x38>)
 80133b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80133b6:	095b      	lsrs	r3, r3, #5
 80133b8:	2001      	movs	r0, #1
 80133ba:	fa00 f202 	lsl.w	r2, r0, r2
 80133be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80133c2:	bf00      	nop
 80133c4:	370c      	adds	r7, #12
 80133c6:	46bd      	mov	sp, r7
 80133c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133cc:	4770      	bx	lr
 80133ce:	bf00      	nop
 80133d0:	e000e100 	.word	0xe000e100

080133d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80133d4:	b480      	push	{r7}
 80133d6:	b083      	sub	sp, #12
 80133d8:	af00      	add	r7, sp, #0
 80133da:	4603      	mov	r3, r0
 80133dc:	6039      	str	r1, [r7, #0]
 80133de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80133e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	db0a      	blt.n	80133fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80133e8:	683b      	ldr	r3, [r7, #0]
 80133ea:	b2da      	uxtb	r2, r3
 80133ec:	490c      	ldr	r1, [pc, #48]	; (8013420 <__NVIC_SetPriority+0x4c>)
 80133ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80133f2:	0112      	lsls	r2, r2, #4
 80133f4:	b2d2      	uxtb	r2, r2
 80133f6:	440b      	add	r3, r1
 80133f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80133fc:	e00a      	b.n	8013414 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80133fe:	683b      	ldr	r3, [r7, #0]
 8013400:	b2da      	uxtb	r2, r3
 8013402:	4908      	ldr	r1, [pc, #32]	; (8013424 <__NVIC_SetPriority+0x50>)
 8013404:	79fb      	ldrb	r3, [r7, #7]
 8013406:	f003 030f 	and.w	r3, r3, #15
 801340a:	3b04      	subs	r3, #4
 801340c:	0112      	lsls	r2, r2, #4
 801340e:	b2d2      	uxtb	r2, r2
 8013410:	440b      	add	r3, r1
 8013412:	761a      	strb	r2, [r3, #24]
}
 8013414:	bf00      	nop
 8013416:	370c      	adds	r7, #12
 8013418:	46bd      	mov	sp, r7
 801341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801341e:	4770      	bx	lr
 8013420:	e000e100 	.word	0xe000e100
 8013424:	e000ed00 	.word	0xe000ed00

08013428 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8013428:	b480      	push	{r7}
 801342a:	b089      	sub	sp, #36	; 0x24
 801342c:	af00      	add	r7, sp, #0
 801342e:	60f8      	str	r0, [r7, #12]
 8013430:	60b9      	str	r1, [r7, #8]
 8013432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	f003 0307 	and.w	r3, r3, #7
 801343a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801343c:	69fb      	ldr	r3, [r7, #28]
 801343e:	f1c3 0307 	rsb	r3, r3, #7
 8013442:	2b04      	cmp	r3, #4
 8013444:	bf28      	it	cs
 8013446:	2304      	movcs	r3, #4
 8013448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801344a:	69fb      	ldr	r3, [r7, #28]
 801344c:	3304      	adds	r3, #4
 801344e:	2b06      	cmp	r3, #6
 8013450:	d902      	bls.n	8013458 <NVIC_EncodePriority+0x30>
 8013452:	69fb      	ldr	r3, [r7, #28]
 8013454:	3b03      	subs	r3, #3
 8013456:	e000      	b.n	801345a <NVIC_EncodePriority+0x32>
 8013458:	2300      	movs	r3, #0
 801345a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801345c:	f04f 32ff 	mov.w	r2, #4294967295
 8013460:	69bb      	ldr	r3, [r7, #24]
 8013462:	fa02 f303 	lsl.w	r3, r2, r3
 8013466:	43da      	mvns	r2, r3
 8013468:	68bb      	ldr	r3, [r7, #8]
 801346a:	401a      	ands	r2, r3
 801346c:	697b      	ldr	r3, [r7, #20]
 801346e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8013470:	f04f 31ff 	mov.w	r1, #4294967295
 8013474:	697b      	ldr	r3, [r7, #20]
 8013476:	fa01 f303 	lsl.w	r3, r1, r3
 801347a:	43d9      	mvns	r1, r3
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8013480:	4313      	orrs	r3, r2
         );
}
 8013482:	4618      	mov	r0, r3
 8013484:	3724      	adds	r7, #36	; 0x24
 8013486:	46bd      	mov	sp, r7
 8013488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801348c:	4770      	bx	lr

0801348e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801348e:	b580      	push	{r7, lr}
 8013490:	b082      	sub	sp, #8
 8013492:	af00      	add	r7, sp, #0
 8013494:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8013496:	6878      	ldr	r0, [r7, #4]
 8013498:	f7ff ff4c 	bl	8013334 <__NVIC_SetPriorityGrouping>
}
 801349c:	bf00      	nop
 801349e:	3708      	adds	r7, #8
 80134a0:	46bd      	mov	sp, r7
 80134a2:	bd80      	pop	{r7, pc}

080134a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80134a4:	b580      	push	{r7, lr}
 80134a6:	b086      	sub	sp, #24
 80134a8:	af00      	add	r7, sp, #0
 80134aa:	4603      	mov	r3, r0
 80134ac:	60b9      	str	r1, [r7, #8]
 80134ae:	607a      	str	r2, [r7, #4]
 80134b0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80134b2:	f7ff ff63 	bl	801337c <__NVIC_GetPriorityGrouping>
 80134b6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80134b8:	687a      	ldr	r2, [r7, #4]
 80134ba:	68b9      	ldr	r1, [r7, #8]
 80134bc:	6978      	ldr	r0, [r7, #20]
 80134be:	f7ff ffb3 	bl	8013428 <NVIC_EncodePriority>
 80134c2:	4602      	mov	r2, r0
 80134c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80134c8:	4611      	mov	r1, r2
 80134ca:	4618      	mov	r0, r3
 80134cc:	f7ff ff82 	bl	80133d4 <__NVIC_SetPriority>
}
 80134d0:	bf00      	nop
 80134d2:	3718      	adds	r7, #24
 80134d4:	46bd      	mov	sp, r7
 80134d6:	bd80      	pop	{r7, pc}

080134d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80134d8:	b580      	push	{r7, lr}
 80134da:	b082      	sub	sp, #8
 80134dc:	af00      	add	r7, sp, #0
 80134de:	4603      	mov	r3, r0
 80134e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80134e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80134e6:	4618      	mov	r0, r3
 80134e8:	f7ff ff56 	bl	8013398 <__NVIC_EnableIRQ>
}
 80134ec:	bf00      	nop
 80134ee:	3708      	adds	r7, #8
 80134f0:	46bd      	mov	sp, r7
 80134f2:	bd80      	pop	{r7, pc}

080134f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80134f4:	b580      	push	{r7, lr}
 80134f6:	b084      	sub	sp, #16
 80134f8:	af00      	add	r7, sp, #0
 80134fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d101      	bne.n	8013506 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8013502:	2301      	movs	r3, #1
 8013504:	e08d      	b.n	8013622 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	461a      	mov	r2, r3
 801350c:	4b47      	ldr	r3, [pc, #284]	; (801362c <HAL_DMA_Init+0x138>)
 801350e:	429a      	cmp	r2, r3
 8013510:	d80f      	bhi.n	8013532 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	461a      	mov	r2, r3
 8013518:	4b45      	ldr	r3, [pc, #276]	; (8013630 <HAL_DMA_Init+0x13c>)
 801351a:	4413      	add	r3, r2
 801351c:	4a45      	ldr	r2, [pc, #276]	; (8013634 <HAL_DMA_Init+0x140>)
 801351e:	fba2 2303 	umull	r2, r3, r2, r3
 8013522:	091b      	lsrs	r3, r3, #4
 8013524:	009a      	lsls	r2, r3, #2
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	4a42      	ldr	r2, [pc, #264]	; (8013638 <HAL_DMA_Init+0x144>)
 801352e:	641a      	str	r2, [r3, #64]	; 0x40
 8013530:	e00e      	b.n	8013550 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	461a      	mov	r2, r3
 8013538:	4b40      	ldr	r3, [pc, #256]	; (801363c <HAL_DMA_Init+0x148>)
 801353a:	4413      	add	r3, r2
 801353c:	4a3d      	ldr	r2, [pc, #244]	; (8013634 <HAL_DMA_Init+0x140>)
 801353e:	fba2 2303 	umull	r2, r3, r2, r3
 8013542:	091b      	lsrs	r3, r3, #4
 8013544:	009a      	lsls	r2, r3, #2
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	4a3c      	ldr	r2, [pc, #240]	; (8013640 <HAL_DMA_Init+0x14c>)
 801354e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	2202      	movs	r2, #2
 8013554:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8013566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801356a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8013574:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	691b      	ldr	r3, [r3, #16]
 801357a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8013580:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	699b      	ldr	r3, [r3, #24]
 8013586:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801358c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	6a1b      	ldr	r3, [r3, #32]
 8013592:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8013594:	68fa      	ldr	r2, [r7, #12]
 8013596:	4313      	orrs	r3, r2
 8013598:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	68fa      	ldr	r2, [r7, #12]
 80135a0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80135a2:	6878      	ldr	r0, [r7, #4]
 80135a4:	f000 fa76 	bl	8013a94 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	689b      	ldr	r3, [r3, #8]
 80135ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80135b0:	d102      	bne.n	80135b8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	2200      	movs	r2, #0
 80135b6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	685a      	ldr	r2, [r3, #4]
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80135c0:	b2d2      	uxtb	r2, r2
 80135c2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80135c8:	687a      	ldr	r2, [r7, #4]
 80135ca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80135cc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	685b      	ldr	r3, [r3, #4]
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d010      	beq.n	80135f8 <HAL_DMA_Init+0x104>
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	685b      	ldr	r3, [r3, #4]
 80135da:	2b04      	cmp	r3, #4
 80135dc:	d80c      	bhi.n	80135f8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80135de:	6878      	ldr	r0, [r7, #4]
 80135e0:	f000 fa96 	bl	8013b10 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80135e8:	2200      	movs	r2, #0
 80135ea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80135f0:	687a      	ldr	r2, [r7, #4]
 80135f2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80135f4:	605a      	str	r2, [r3, #4]
 80135f6:	e008      	b.n	801360a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	2200      	movs	r2, #0
 80135fc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	2200      	movs	r2, #0
 8013602:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	2200      	movs	r2, #0
 8013608:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	2200      	movs	r2, #0
 801360e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	2201      	movs	r2, #1
 8013614:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	2200      	movs	r2, #0
 801361c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8013620:	2300      	movs	r3, #0
}
 8013622:	4618      	mov	r0, r3
 8013624:	3710      	adds	r7, #16
 8013626:	46bd      	mov	sp, r7
 8013628:	bd80      	pop	{r7, pc}
 801362a:	bf00      	nop
 801362c:	40020407 	.word	0x40020407
 8013630:	bffdfff8 	.word	0xbffdfff8
 8013634:	cccccccd 	.word	0xcccccccd
 8013638:	40020000 	.word	0x40020000
 801363c:	bffdfbf8 	.word	0xbffdfbf8
 8013640:	40020400 	.word	0x40020400

08013644 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8013644:	b580      	push	{r7, lr}
 8013646:	b086      	sub	sp, #24
 8013648:	af00      	add	r7, sp, #0
 801364a:	60f8      	str	r0, [r7, #12]
 801364c:	60b9      	str	r1, [r7, #8]
 801364e:	607a      	str	r2, [r7, #4]
 8013650:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013652:	2300      	movs	r3, #0
 8013654:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801365c:	2b01      	cmp	r3, #1
 801365e:	d101      	bne.n	8013664 <HAL_DMA_Start_IT+0x20>
 8013660:	2302      	movs	r3, #2
 8013662:	e066      	b.n	8013732 <HAL_DMA_Start_IT+0xee>
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	2201      	movs	r2, #1
 8013668:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8013672:	b2db      	uxtb	r3, r3
 8013674:	2b01      	cmp	r3, #1
 8013676:	d155      	bne.n	8013724 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	2202      	movs	r2, #2
 801367c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	2200      	movs	r2, #0
 8013684:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	681a      	ldr	r2, [r3, #0]
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	f022 0201 	bic.w	r2, r2, #1
 8013694:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8013696:	683b      	ldr	r3, [r7, #0]
 8013698:	687a      	ldr	r2, [r7, #4]
 801369a:	68b9      	ldr	r1, [r7, #8]
 801369c:	68f8      	ldr	r0, [r7, #12]
 801369e:	f000 f9bb 	bl	8013a18 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d008      	beq.n	80136bc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	681a      	ldr	r2, [r3, #0]
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	681b      	ldr	r3, [r3, #0]
 80136b4:	f042 020e 	orr.w	r2, r2, #14
 80136b8:	601a      	str	r2, [r3, #0]
 80136ba:	e00f      	b.n	80136dc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	681b      	ldr	r3, [r3, #0]
 80136c0:	681a      	ldr	r2, [r3, #0]
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	681b      	ldr	r3, [r3, #0]
 80136c6:	f022 0204 	bic.w	r2, r2, #4
 80136ca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	681a      	ldr	r2, [r3, #0]
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	f042 020a 	orr.w	r2, r2, #10
 80136da:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d007      	beq.n	80136fa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80136ee:	681a      	ldr	r2, [r3, #0]
 80136f0:	68fb      	ldr	r3, [r7, #12]
 80136f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80136f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80136f8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d007      	beq.n	8013712 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013706:	681a      	ldr	r2, [r3, #0]
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801370c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013710:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	681b      	ldr	r3, [r3, #0]
 8013716:	681a      	ldr	r2, [r3, #0]
 8013718:	68fb      	ldr	r3, [r7, #12]
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	f042 0201 	orr.w	r2, r2, #1
 8013720:	601a      	str	r2, [r3, #0]
 8013722:	e005      	b.n	8013730 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8013724:	68fb      	ldr	r3, [r7, #12]
 8013726:	2200      	movs	r2, #0
 8013728:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 801372c:	2302      	movs	r3, #2
 801372e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8013730:	7dfb      	ldrb	r3, [r7, #23]
}
 8013732:	4618      	mov	r0, r3
 8013734:	3718      	adds	r7, #24
 8013736:	46bd      	mov	sp, r7
 8013738:	bd80      	pop	{r7, pc}

0801373a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801373a:	b480      	push	{r7}
 801373c:	b085      	sub	sp, #20
 801373e:	af00      	add	r7, sp, #0
 8013740:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013742:	2300      	movs	r3, #0
 8013744:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801374c:	b2db      	uxtb	r3, r3
 801374e:	2b02      	cmp	r3, #2
 8013750:	d005      	beq.n	801375e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	2204      	movs	r2, #4
 8013756:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8013758:	2301      	movs	r3, #1
 801375a:	73fb      	strb	r3, [r7, #15]
 801375c:	e037      	b.n	80137ce <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	681b      	ldr	r3, [r3, #0]
 8013762:	681a      	ldr	r2, [r3, #0]
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	681b      	ldr	r3, [r3, #0]
 8013768:	f022 020e 	bic.w	r2, r2, #14
 801376c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013772:	681a      	ldr	r2, [r3, #0]
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013778:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801377c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	681a      	ldr	r2, [r3, #0]
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	f022 0201 	bic.w	r2, r2, #1
 801378c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013792:	f003 021f 	and.w	r2, r3, #31
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801379a:	2101      	movs	r1, #1
 801379c:	fa01 f202 	lsl.w	r2, r1, r2
 80137a0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80137a6:	687a      	ldr	r2, [r7, #4]
 80137a8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80137aa:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d00c      	beq.n	80137ce <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80137b8:	681a      	ldr	r2, [r3, #0]
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80137be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80137c2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80137c8:	687a      	ldr	r2, [r7, #4]
 80137ca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80137cc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	2201      	movs	r2, #1
 80137d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	2200      	movs	r2, #0
 80137da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80137de:	7bfb      	ldrb	r3, [r7, #15]
}
 80137e0:	4618      	mov	r0, r3
 80137e2:	3714      	adds	r7, #20
 80137e4:	46bd      	mov	sp, r7
 80137e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ea:	4770      	bx	lr

080137ec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80137ec:	b580      	push	{r7, lr}
 80137ee:	b084      	sub	sp, #16
 80137f0:	af00      	add	r7, sp, #0
 80137f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80137f4:	2300      	movs	r3, #0
 80137f6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80137fe:	b2db      	uxtb	r3, r3
 8013800:	2b02      	cmp	r3, #2
 8013802:	d00d      	beq.n	8013820 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	2204      	movs	r2, #4
 8013808:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	2201      	movs	r2, #1
 801380e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	2200      	movs	r2, #0
 8013816:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 801381a:	2301      	movs	r3, #1
 801381c:	73fb      	strb	r3, [r7, #15]
 801381e:	e047      	b.n	80138b0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	681b      	ldr	r3, [r3, #0]
 8013824:	681a      	ldr	r2, [r3, #0]
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	f022 020e 	bic.w	r2, r2, #14
 801382e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	681a      	ldr	r2, [r3, #0]
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	f022 0201 	bic.w	r2, r2, #1
 801383e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013844:	681a      	ldr	r2, [r3, #0]
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801384a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801384e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013854:	f003 021f 	and.w	r2, r3, #31
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801385c:	2101      	movs	r1, #1
 801385e:	fa01 f202 	lsl.w	r2, r1, r2
 8013862:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013868:	687a      	ldr	r2, [r7, #4]
 801386a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801386c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013872:	2b00      	cmp	r3, #0
 8013874:	d00c      	beq.n	8013890 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801387a:	681a      	ldr	r2, [r3, #0]
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013880:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8013884:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801388a:	687a      	ldr	r2, [r7, #4]
 801388c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801388e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	2201      	movs	r2, #1
 8013894:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	2200      	movs	r2, #0
 801389c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d003      	beq.n	80138b0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80138ac:	6878      	ldr	r0, [r7, #4]
 80138ae:	4798      	blx	r3
    }
  }
  return status;
 80138b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80138b2:	4618      	mov	r0, r3
 80138b4:	3710      	adds	r7, #16
 80138b6:	46bd      	mov	sp, r7
 80138b8:	bd80      	pop	{r7, pc}

080138ba <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80138ba:	b580      	push	{r7, lr}
 80138bc:	b084      	sub	sp, #16
 80138be:	af00      	add	r7, sp, #0
 80138c0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138c6:	681b      	ldr	r3, [r3, #0]
 80138c8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	681b      	ldr	r3, [r3, #0]
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80138d6:	f003 031f 	and.w	r3, r3, #31
 80138da:	2204      	movs	r2, #4
 80138dc:	409a      	lsls	r2, r3
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	4013      	ands	r3, r2
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d026      	beq.n	8013934 <HAL_DMA_IRQHandler+0x7a>
 80138e6:	68bb      	ldr	r3, [r7, #8]
 80138e8:	f003 0304 	and.w	r3, r3, #4
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d021      	beq.n	8013934 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	f003 0320 	and.w	r3, r3, #32
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d107      	bne.n	801390e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	681b      	ldr	r3, [r3, #0]
 8013902:	681a      	ldr	r2, [r3, #0]
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	f022 0204 	bic.w	r2, r2, #4
 801390c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013912:	f003 021f 	and.w	r2, r3, #31
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801391a:	2104      	movs	r1, #4
 801391c:	fa01 f202 	lsl.w	r2, r1, r2
 8013920:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013926:	2b00      	cmp	r3, #0
 8013928:	d071      	beq.n	8013a0e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801392e:	6878      	ldr	r0, [r7, #4]
 8013930:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8013932:	e06c      	b.n	8013a0e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013938:	f003 031f 	and.w	r3, r3, #31
 801393c:	2202      	movs	r2, #2
 801393e:	409a      	lsls	r2, r3
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	4013      	ands	r3, r2
 8013944:	2b00      	cmp	r3, #0
 8013946:	d02e      	beq.n	80139a6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8013948:	68bb      	ldr	r3, [r7, #8]
 801394a:	f003 0302 	and.w	r3, r3, #2
 801394e:	2b00      	cmp	r3, #0
 8013950:	d029      	beq.n	80139a6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	681b      	ldr	r3, [r3, #0]
 8013958:	f003 0320 	and.w	r3, r3, #32
 801395c:	2b00      	cmp	r3, #0
 801395e:	d10b      	bne.n	8013978 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	681a      	ldr	r2, [r3, #0]
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	f022 020a 	bic.w	r2, r2, #10
 801396e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	2201      	movs	r2, #1
 8013974:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801397c:	f003 021f 	and.w	r2, r3, #31
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013984:	2102      	movs	r1, #2
 8013986:	fa01 f202 	lsl.w	r2, r1, r2
 801398a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	2200      	movs	r2, #0
 8013990:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013998:	2b00      	cmp	r3, #0
 801399a:	d038      	beq.n	8013a0e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139a0:	6878      	ldr	r0, [r7, #4]
 80139a2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80139a4:	e033      	b.n	8013a0e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80139aa:	f003 031f 	and.w	r3, r3, #31
 80139ae:	2208      	movs	r2, #8
 80139b0:	409a      	lsls	r2, r3
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	4013      	ands	r3, r2
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d02a      	beq.n	8013a10 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80139ba:	68bb      	ldr	r3, [r7, #8]
 80139bc:	f003 0308 	and.w	r3, r3, #8
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d025      	beq.n	8013a10 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	681b      	ldr	r3, [r3, #0]
 80139c8:	681a      	ldr	r2, [r3, #0]
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	f022 020e 	bic.w	r2, r2, #14
 80139d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80139d8:	f003 021f 	and.w	r2, r3, #31
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80139e0:	2101      	movs	r1, #1
 80139e2:	fa01 f202 	lsl.w	r2, r1, r2
 80139e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	2201      	movs	r2, #1
 80139ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	2201      	movs	r2, #1
 80139f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	2200      	movs	r2, #0
 80139fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d004      	beq.n	8013a10 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013a0a:	6878      	ldr	r0, [r7, #4]
 8013a0c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8013a0e:	bf00      	nop
 8013a10:	bf00      	nop
}
 8013a12:	3710      	adds	r7, #16
 8013a14:	46bd      	mov	sp, r7
 8013a16:	bd80      	pop	{r7, pc}

08013a18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8013a18:	b480      	push	{r7}
 8013a1a:	b085      	sub	sp, #20
 8013a1c:	af00      	add	r7, sp, #0
 8013a1e:	60f8      	str	r0, [r7, #12]
 8013a20:	60b9      	str	r1, [r7, #8]
 8013a22:	607a      	str	r2, [r7, #4]
 8013a24:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013a2a:	68fa      	ldr	r2, [r7, #12]
 8013a2c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8013a2e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d004      	beq.n	8013a42 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013a3c:	68fa      	ldr	r2, [r7, #12]
 8013a3e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8013a40:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a46:	f003 021f 	and.w	r2, r3, #31
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a4e:	2101      	movs	r1, #1
 8013a50:	fa01 f202 	lsl.w	r2, r1, r2
 8013a54:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	683a      	ldr	r2, [r7, #0]
 8013a5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	689b      	ldr	r3, [r3, #8]
 8013a62:	2b10      	cmp	r3, #16
 8013a64:	d108      	bne.n	8013a78 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	687a      	ldr	r2, [r7, #4]
 8013a6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	68ba      	ldr	r2, [r7, #8]
 8013a74:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8013a76:	e007      	b.n	8013a88 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	68ba      	ldr	r2, [r7, #8]
 8013a7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	687a      	ldr	r2, [r7, #4]
 8013a86:	60da      	str	r2, [r3, #12]
}
 8013a88:	bf00      	nop
 8013a8a:	3714      	adds	r7, #20
 8013a8c:	46bd      	mov	sp, r7
 8013a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a92:	4770      	bx	lr

08013a94 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8013a94:	b480      	push	{r7}
 8013a96:	b087      	sub	sp, #28
 8013a98:	af00      	add	r7, sp, #0
 8013a9a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	461a      	mov	r2, r3
 8013aa2:	4b16      	ldr	r3, [pc, #88]	; (8013afc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8013aa4:	429a      	cmp	r2, r3
 8013aa6:	d802      	bhi.n	8013aae <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8013aa8:	4b15      	ldr	r3, [pc, #84]	; (8013b00 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8013aaa:	617b      	str	r3, [r7, #20]
 8013aac:	e001      	b.n	8013ab2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8013aae:	4b15      	ldr	r3, [pc, #84]	; (8013b04 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8013ab0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8013ab2:	697b      	ldr	r3, [r7, #20]
 8013ab4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	b2db      	uxtb	r3, r3
 8013abc:	3b08      	subs	r3, #8
 8013abe:	4a12      	ldr	r2, [pc, #72]	; (8013b08 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8013ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8013ac4:	091b      	lsrs	r3, r3, #4
 8013ac6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013acc:	089b      	lsrs	r3, r3, #2
 8013ace:	009a      	lsls	r2, r3, #2
 8013ad0:	693b      	ldr	r3, [r7, #16]
 8013ad2:	4413      	add	r3, r2
 8013ad4:	461a      	mov	r2, r3
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	4a0b      	ldr	r2, [pc, #44]	; (8013b0c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8013ade:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	f003 031f 	and.w	r3, r3, #31
 8013ae6:	2201      	movs	r2, #1
 8013ae8:	409a      	lsls	r2, r3
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	651a      	str	r2, [r3, #80]	; 0x50
}
 8013aee:	bf00      	nop
 8013af0:	371c      	adds	r7, #28
 8013af2:	46bd      	mov	sp, r7
 8013af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af8:	4770      	bx	lr
 8013afa:	bf00      	nop
 8013afc:	40020407 	.word	0x40020407
 8013b00:	40020800 	.word	0x40020800
 8013b04:	40020820 	.word	0x40020820
 8013b08:	cccccccd 	.word	0xcccccccd
 8013b0c:	40020880 	.word	0x40020880

08013b10 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8013b10:	b480      	push	{r7}
 8013b12:	b085      	sub	sp, #20
 8013b14:	af00      	add	r7, sp, #0
 8013b16:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	685b      	ldr	r3, [r3, #4]
 8013b1c:	b2db      	uxtb	r3, r3
 8013b1e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8013b20:	68fa      	ldr	r2, [r7, #12]
 8013b22:	4b0b      	ldr	r3, [pc, #44]	; (8013b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8013b24:	4413      	add	r3, r2
 8013b26:	009b      	lsls	r3, r3, #2
 8013b28:	461a      	mov	r2, r3
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	4a08      	ldr	r2, [pc, #32]	; (8013b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8013b32:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	3b01      	subs	r3, #1
 8013b38:	f003 031f 	and.w	r3, r3, #31
 8013b3c:	2201      	movs	r2, #1
 8013b3e:	409a      	lsls	r2, r3
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8013b44:	bf00      	nop
 8013b46:	3714      	adds	r7, #20
 8013b48:	46bd      	mov	sp, r7
 8013b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b4e:	4770      	bx	lr
 8013b50:	1000823f 	.word	0x1000823f
 8013b54:	40020940 	.word	0x40020940

08013b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8013b58:	b480      	push	{r7}
 8013b5a:	b087      	sub	sp, #28
 8013b5c:	af00      	add	r7, sp, #0
 8013b5e:	6078      	str	r0, [r7, #4]
 8013b60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8013b62:	2300      	movs	r3, #0
 8013b64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8013b66:	e15a      	b.n	8013e1e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8013b68:	683b      	ldr	r3, [r7, #0]
 8013b6a:	681a      	ldr	r2, [r3, #0]
 8013b6c:	2101      	movs	r1, #1
 8013b6e:	697b      	ldr	r3, [r7, #20]
 8013b70:	fa01 f303 	lsl.w	r3, r1, r3
 8013b74:	4013      	ands	r3, r2
 8013b76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	f000 814c 	beq.w	8013e18 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8013b80:	683b      	ldr	r3, [r7, #0]
 8013b82:	685b      	ldr	r3, [r3, #4]
 8013b84:	f003 0303 	and.w	r3, r3, #3
 8013b88:	2b01      	cmp	r3, #1
 8013b8a:	d005      	beq.n	8013b98 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8013b8c:	683b      	ldr	r3, [r7, #0]
 8013b8e:	685b      	ldr	r3, [r3, #4]
 8013b90:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8013b94:	2b02      	cmp	r3, #2
 8013b96:	d130      	bne.n	8013bfa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	689b      	ldr	r3, [r3, #8]
 8013b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8013b9e:	697b      	ldr	r3, [r7, #20]
 8013ba0:	005b      	lsls	r3, r3, #1
 8013ba2:	2203      	movs	r2, #3
 8013ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8013ba8:	43db      	mvns	r3, r3
 8013baa:	693a      	ldr	r2, [r7, #16]
 8013bac:	4013      	ands	r3, r2
 8013bae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8013bb0:	683b      	ldr	r3, [r7, #0]
 8013bb2:	68da      	ldr	r2, [r3, #12]
 8013bb4:	697b      	ldr	r3, [r7, #20]
 8013bb6:	005b      	lsls	r3, r3, #1
 8013bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8013bbc:	693a      	ldr	r2, [r7, #16]
 8013bbe:	4313      	orrs	r3, r2
 8013bc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	693a      	ldr	r2, [r7, #16]
 8013bc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	685b      	ldr	r3, [r3, #4]
 8013bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8013bce:	2201      	movs	r2, #1
 8013bd0:	697b      	ldr	r3, [r7, #20]
 8013bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8013bd6:	43db      	mvns	r3, r3
 8013bd8:	693a      	ldr	r2, [r7, #16]
 8013bda:	4013      	ands	r3, r2
 8013bdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8013bde:	683b      	ldr	r3, [r7, #0]
 8013be0:	685b      	ldr	r3, [r3, #4]
 8013be2:	091b      	lsrs	r3, r3, #4
 8013be4:	f003 0201 	and.w	r2, r3, #1
 8013be8:	697b      	ldr	r3, [r7, #20]
 8013bea:	fa02 f303 	lsl.w	r3, r2, r3
 8013bee:	693a      	ldr	r2, [r7, #16]
 8013bf0:	4313      	orrs	r3, r2
 8013bf2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	693a      	ldr	r2, [r7, #16]
 8013bf8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8013bfa:	683b      	ldr	r3, [r7, #0]
 8013bfc:	685b      	ldr	r3, [r3, #4]
 8013bfe:	f003 0303 	and.w	r3, r3, #3
 8013c02:	2b03      	cmp	r3, #3
 8013c04:	d017      	beq.n	8013c36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	68db      	ldr	r3, [r3, #12]
 8013c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8013c0c:	697b      	ldr	r3, [r7, #20]
 8013c0e:	005b      	lsls	r3, r3, #1
 8013c10:	2203      	movs	r2, #3
 8013c12:	fa02 f303 	lsl.w	r3, r2, r3
 8013c16:	43db      	mvns	r3, r3
 8013c18:	693a      	ldr	r2, [r7, #16]
 8013c1a:	4013      	ands	r3, r2
 8013c1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8013c1e:	683b      	ldr	r3, [r7, #0]
 8013c20:	689a      	ldr	r2, [r3, #8]
 8013c22:	697b      	ldr	r3, [r7, #20]
 8013c24:	005b      	lsls	r3, r3, #1
 8013c26:	fa02 f303 	lsl.w	r3, r2, r3
 8013c2a:	693a      	ldr	r2, [r7, #16]
 8013c2c:	4313      	orrs	r3, r2
 8013c2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	693a      	ldr	r2, [r7, #16]
 8013c34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8013c36:	683b      	ldr	r3, [r7, #0]
 8013c38:	685b      	ldr	r3, [r3, #4]
 8013c3a:	f003 0303 	and.w	r3, r3, #3
 8013c3e:	2b02      	cmp	r3, #2
 8013c40:	d123      	bne.n	8013c8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8013c42:	697b      	ldr	r3, [r7, #20]
 8013c44:	08da      	lsrs	r2, r3, #3
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	3208      	adds	r2, #8
 8013c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8013c50:	697b      	ldr	r3, [r7, #20]
 8013c52:	f003 0307 	and.w	r3, r3, #7
 8013c56:	009b      	lsls	r3, r3, #2
 8013c58:	220f      	movs	r2, #15
 8013c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8013c5e:	43db      	mvns	r3, r3
 8013c60:	693a      	ldr	r2, [r7, #16]
 8013c62:	4013      	ands	r3, r2
 8013c64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8013c66:	683b      	ldr	r3, [r7, #0]
 8013c68:	691a      	ldr	r2, [r3, #16]
 8013c6a:	697b      	ldr	r3, [r7, #20]
 8013c6c:	f003 0307 	and.w	r3, r3, #7
 8013c70:	009b      	lsls	r3, r3, #2
 8013c72:	fa02 f303 	lsl.w	r3, r2, r3
 8013c76:	693a      	ldr	r2, [r7, #16]
 8013c78:	4313      	orrs	r3, r2
 8013c7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8013c7c:	697b      	ldr	r3, [r7, #20]
 8013c7e:	08da      	lsrs	r2, r3, #3
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	3208      	adds	r2, #8
 8013c84:	6939      	ldr	r1, [r7, #16]
 8013c86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8013c90:	697b      	ldr	r3, [r7, #20]
 8013c92:	005b      	lsls	r3, r3, #1
 8013c94:	2203      	movs	r2, #3
 8013c96:	fa02 f303 	lsl.w	r3, r2, r3
 8013c9a:	43db      	mvns	r3, r3
 8013c9c:	693a      	ldr	r2, [r7, #16]
 8013c9e:	4013      	ands	r3, r2
 8013ca0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8013ca2:	683b      	ldr	r3, [r7, #0]
 8013ca4:	685b      	ldr	r3, [r3, #4]
 8013ca6:	f003 0203 	and.w	r2, r3, #3
 8013caa:	697b      	ldr	r3, [r7, #20]
 8013cac:	005b      	lsls	r3, r3, #1
 8013cae:	fa02 f303 	lsl.w	r3, r2, r3
 8013cb2:	693a      	ldr	r2, [r7, #16]
 8013cb4:	4313      	orrs	r3, r2
 8013cb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	693a      	ldr	r2, [r7, #16]
 8013cbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8013cbe:	683b      	ldr	r3, [r7, #0]
 8013cc0:	685b      	ldr	r3, [r3, #4]
 8013cc2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	f000 80a6 	beq.w	8013e18 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8013ccc:	4b5b      	ldr	r3, [pc, #364]	; (8013e3c <HAL_GPIO_Init+0x2e4>)
 8013cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013cd0:	4a5a      	ldr	r2, [pc, #360]	; (8013e3c <HAL_GPIO_Init+0x2e4>)
 8013cd2:	f043 0301 	orr.w	r3, r3, #1
 8013cd6:	6613      	str	r3, [r2, #96]	; 0x60
 8013cd8:	4b58      	ldr	r3, [pc, #352]	; (8013e3c <HAL_GPIO_Init+0x2e4>)
 8013cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013cdc:	f003 0301 	and.w	r3, r3, #1
 8013ce0:	60bb      	str	r3, [r7, #8]
 8013ce2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8013ce4:	4a56      	ldr	r2, [pc, #344]	; (8013e40 <HAL_GPIO_Init+0x2e8>)
 8013ce6:	697b      	ldr	r3, [r7, #20]
 8013ce8:	089b      	lsrs	r3, r3, #2
 8013cea:	3302      	adds	r3, #2
 8013cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8013cf2:	697b      	ldr	r3, [r7, #20]
 8013cf4:	f003 0303 	and.w	r3, r3, #3
 8013cf8:	009b      	lsls	r3, r3, #2
 8013cfa:	220f      	movs	r2, #15
 8013cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8013d00:	43db      	mvns	r3, r3
 8013d02:	693a      	ldr	r2, [r7, #16]
 8013d04:	4013      	ands	r3, r2
 8013d06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8013d0e:	d01f      	beq.n	8013d50 <HAL_GPIO_Init+0x1f8>
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	4a4c      	ldr	r2, [pc, #304]	; (8013e44 <HAL_GPIO_Init+0x2ec>)
 8013d14:	4293      	cmp	r3, r2
 8013d16:	d019      	beq.n	8013d4c <HAL_GPIO_Init+0x1f4>
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	4a4b      	ldr	r2, [pc, #300]	; (8013e48 <HAL_GPIO_Init+0x2f0>)
 8013d1c:	4293      	cmp	r3, r2
 8013d1e:	d013      	beq.n	8013d48 <HAL_GPIO_Init+0x1f0>
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	4a4a      	ldr	r2, [pc, #296]	; (8013e4c <HAL_GPIO_Init+0x2f4>)
 8013d24:	4293      	cmp	r3, r2
 8013d26:	d00d      	beq.n	8013d44 <HAL_GPIO_Init+0x1ec>
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	4a49      	ldr	r2, [pc, #292]	; (8013e50 <HAL_GPIO_Init+0x2f8>)
 8013d2c:	4293      	cmp	r3, r2
 8013d2e:	d007      	beq.n	8013d40 <HAL_GPIO_Init+0x1e8>
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	4a48      	ldr	r2, [pc, #288]	; (8013e54 <HAL_GPIO_Init+0x2fc>)
 8013d34:	4293      	cmp	r3, r2
 8013d36:	d101      	bne.n	8013d3c <HAL_GPIO_Init+0x1e4>
 8013d38:	2305      	movs	r3, #5
 8013d3a:	e00a      	b.n	8013d52 <HAL_GPIO_Init+0x1fa>
 8013d3c:	2306      	movs	r3, #6
 8013d3e:	e008      	b.n	8013d52 <HAL_GPIO_Init+0x1fa>
 8013d40:	2304      	movs	r3, #4
 8013d42:	e006      	b.n	8013d52 <HAL_GPIO_Init+0x1fa>
 8013d44:	2303      	movs	r3, #3
 8013d46:	e004      	b.n	8013d52 <HAL_GPIO_Init+0x1fa>
 8013d48:	2302      	movs	r3, #2
 8013d4a:	e002      	b.n	8013d52 <HAL_GPIO_Init+0x1fa>
 8013d4c:	2301      	movs	r3, #1
 8013d4e:	e000      	b.n	8013d52 <HAL_GPIO_Init+0x1fa>
 8013d50:	2300      	movs	r3, #0
 8013d52:	697a      	ldr	r2, [r7, #20]
 8013d54:	f002 0203 	and.w	r2, r2, #3
 8013d58:	0092      	lsls	r2, r2, #2
 8013d5a:	4093      	lsls	r3, r2
 8013d5c:	693a      	ldr	r2, [r7, #16]
 8013d5e:	4313      	orrs	r3, r2
 8013d60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8013d62:	4937      	ldr	r1, [pc, #220]	; (8013e40 <HAL_GPIO_Init+0x2e8>)
 8013d64:	697b      	ldr	r3, [r7, #20]
 8013d66:	089b      	lsrs	r3, r3, #2
 8013d68:	3302      	adds	r3, #2
 8013d6a:	693a      	ldr	r2, [r7, #16]
 8013d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8013d70:	4b39      	ldr	r3, [pc, #228]	; (8013e58 <HAL_GPIO_Init+0x300>)
 8013d72:	689b      	ldr	r3, [r3, #8]
 8013d74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	43db      	mvns	r3, r3
 8013d7a:	693a      	ldr	r2, [r7, #16]
 8013d7c:	4013      	ands	r3, r2
 8013d7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8013d80:	683b      	ldr	r3, [r7, #0]
 8013d82:	685b      	ldr	r3, [r3, #4]
 8013d84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d003      	beq.n	8013d94 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8013d8c:	693a      	ldr	r2, [r7, #16]
 8013d8e:	68fb      	ldr	r3, [r7, #12]
 8013d90:	4313      	orrs	r3, r2
 8013d92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8013d94:	4a30      	ldr	r2, [pc, #192]	; (8013e58 <HAL_GPIO_Init+0x300>)
 8013d96:	693b      	ldr	r3, [r7, #16]
 8013d98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8013d9a:	4b2f      	ldr	r3, [pc, #188]	; (8013e58 <HAL_GPIO_Init+0x300>)
 8013d9c:	68db      	ldr	r3, [r3, #12]
 8013d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	43db      	mvns	r3, r3
 8013da4:	693a      	ldr	r2, [r7, #16]
 8013da6:	4013      	ands	r3, r2
 8013da8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8013daa:	683b      	ldr	r3, [r7, #0]
 8013dac:	685b      	ldr	r3, [r3, #4]
 8013dae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d003      	beq.n	8013dbe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8013db6:	693a      	ldr	r2, [r7, #16]
 8013db8:	68fb      	ldr	r3, [r7, #12]
 8013dba:	4313      	orrs	r3, r2
 8013dbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8013dbe:	4a26      	ldr	r2, [pc, #152]	; (8013e58 <HAL_GPIO_Init+0x300>)
 8013dc0:	693b      	ldr	r3, [r7, #16]
 8013dc2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8013dc4:	4b24      	ldr	r3, [pc, #144]	; (8013e58 <HAL_GPIO_Init+0x300>)
 8013dc6:	685b      	ldr	r3, [r3, #4]
 8013dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	43db      	mvns	r3, r3
 8013dce:	693a      	ldr	r2, [r7, #16]
 8013dd0:	4013      	ands	r3, r2
 8013dd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8013dd4:	683b      	ldr	r3, [r7, #0]
 8013dd6:	685b      	ldr	r3, [r3, #4]
 8013dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d003      	beq.n	8013de8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8013de0:	693a      	ldr	r2, [r7, #16]
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	4313      	orrs	r3, r2
 8013de6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8013de8:	4a1b      	ldr	r2, [pc, #108]	; (8013e58 <HAL_GPIO_Init+0x300>)
 8013dea:	693b      	ldr	r3, [r7, #16]
 8013dec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8013dee:	4b1a      	ldr	r3, [pc, #104]	; (8013e58 <HAL_GPIO_Init+0x300>)
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	43db      	mvns	r3, r3
 8013df8:	693a      	ldr	r2, [r7, #16]
 8013dfa:	4013      	ands	r3, r2
 8013dfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8013dfe:	683b      	ldr	r3, [r7, #0]
 8013e00:	685b      	ldr	r3, [r3, #4]
 8013e02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d003      	beq.n	8013e12 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8013e0a:	693a      	ldr	r2, [r7, #16]
 8013e0c:	68fb      	ldr	r3, [r7, #12]
 8013e0e:	4313      	orrs	r3, r2
 8013e10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8013e12:	4a11      	ldr	r2, [pc, #68]	; (8013e58 <HAL_GPIO_Init+0x300>)
 8013e14:	693b      	ldr	r3, [r7, #16]
 8013e16:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8013e18:	697b      	ldr	r3, [r7, #20]
 8013e1a:	3301      	adds	r3, #1
 8013e1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8013e1e:	683b      	ldr	r3, [r7, #0]
 8013e20:	681a      	ldr	r2, [r3, #0]
 8013e22:	697b      	ldr	r3, [r7, #20]
 8013e24:	fa22 f303 	lsr.w	r3, r2, r3
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	f47f ae9d 	bne.w	8013b68 <HAL_GPIO_Init+0x10>
  }
}
 8013e2e:	bf00      	nop
 8013e30:	bf00      	nop
 8013e32:	371c      	adds	r7, #28
 8013e34:	46bd      	mov	sp, r7
 8013e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e3a:	4770      	bx	lr
 8013e3c:	40021000 	.word	0x40021000
 8013e40:	40010000 	.word	0x40010000
 8013e44:	48000400 	.word	0x48000400
 8013e48:	48000800 	.word	0x48000800
 8013e4c:	48000c00 	.word	0x48000c00
 8013e50:	48001000 	.word	0x48001000
 8013e54:	48001400 	.word	0x48001400
 8013e58:	40010400 	.word	0x40010400

08013e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8013e5c:	b480      	push	{r7}
 8013e5e:	b083      	sub	sp, #12
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	6078      	str	r0, [r7, #4]
 8013e64:	460b      	mov	r3, r1
 8013e66:	807b      	strh	r3, [r7, #2]
 8013e68:	4613      	mov	r3, r2
 8013e6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8013e6c:	787b      	ldrb	r3, [r7, #1]
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d003      	beq.n	8013e7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8013e72:	887a      	ldrh	r2, [r7, #2]
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8013e78:	e002      	b.n	8013e80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8013e7a:	887a      	ldrh	r2, [r7, #2]
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8013e80:	bf00      	nop
 8013e82:	370c      	adds	r7, #12
 8013e84:	46bd      	mov	sp, r7
 8013e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e8a:	4770      	bx	lr

08013e8c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8013e8c:	b480      	push	{r7}
 8013e8e:	b085      	sub	sp, #20
 8013e90:	af00      	add	r7, sp, #0
 8013e92:	6078      	str	r0, [r7, #4]
 8013e94:	460b      	mov	r3, r1
 8013e96:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	695b      	ldr	r3, [r3, #20]
 8013e9c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8013e9e:	887a      	ldrh	r2, [r7, #2]
 8013ea0:	68fb      	ldr	r3, [r7, #12]
 8013ea2:	4013      	ands	r3, r2
 8013ea4:	041a      	lsls	r2, r3, #16
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	43d9      	mvns	r1, r3
 8013eaa:	887b      	ldrh	r3, [r7, #2]
 8013eac:	400b      	ands	r3, r1
 8013eae:	431a      	orrs	r2, r3
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	619a      	str	r2, [r3, #24]
}
 8013eb4:	bf00      	nop
 8013eb6:	3714      	adds	r7, #20
 8013eb8:	46bd      	mov	sp, r7
 8013eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ebe:	4770      	bx	lr

08013ec0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8013ec0:	b580      	push	{r7, lr}
 8013ec2:	b082      	sub	sp, #8
 8013ec4:	af00      	add	r7, sp, #0
 8013ec6:	4603      	mov	r3, r0
 8013ec8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8013eca:	4b08      	ldr	r3, [pc, #32]	; (8013eec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8013ecc:	695a      	ldr	r2, [r3, #20]
 8013ece:	88fb      	ldrh	r3, [r7, #6]
 8013ed0:	4013      	ands	r3, r2
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d006      	beq.n	8013ee4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8013ed6:	4a05      	ldr	r2, [pc, #20]	; (8013eec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8013ed8:	88fb      	ldrh	r3, [r7, #6]
 8013eda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8013edc:	88fb      	ldrh	r3, [r7, #6]
 8013ede:	4618      	mov	r0, r3
 8013ee0:	f000 f806 	bl	8013ef0 <HAL_GPIO_EXTI_Callback>
  }
}
 8013ee4:	bf00      	nop
 8013ee6:	3708      	adds	r7, #8
 8013ee8:	46bd      	mov	sp, r7
 8013eea:	bd80      	pop	{r7, pc}
 8013eec:	40010400 	.word	0x40010400

08013ef0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8013ef0:	b480      	push	{r7}
 8013ef2:	b083      	sub	sp, #12
 8013ef4:	af00      	add	r7, sp, #0
 8013ef6:	4603      	mov	r3, r0
 8013ef8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8013efa:	bf00      	nop
 8013efc:	370c      	adds	r7, #12
 8013efe:	46bd      	mov	sp, r7
 8013f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f04:	4770      	bx	lr

08013f06 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8013f06:	b580      	push	{r7, lr}
 8013f08:	b082      	sub	sp, #8
 8013f0a:	af00      	add	r7, sp, #0
 8013f0c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d101      	bne.n	8013f18 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8013f14:	2301      	movs	r3, #1
 8013f16:	e081      	b.n	801401c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013f1e:	b2db      	uxtb	r3, r3
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d106      	bne.n	8013f32 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	2200      	movs	r2, #0
 8013f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8013f2c:	6878      	ldr	r0, [r7, #4]
 8013f2e:	f7fb ffaf 	bl	800fe90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	2224      	movs	r2, #36	; 0x24
 8013f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	681a      	ldr	r2, [r3, #0]
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	f022 0201 	bic.w	r2, r2, #1
 8013f48:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	685a      	ldr	r2, [r3, #4]
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8013f56:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	689a      	ldr	r2, [r3, #8]
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	681b      	ldr	r3, [r3, #0]
 8013f62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8013f66:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	68db      	ldr	r3, [r3, #12]
 8013f6c:	2b01      	cmp	r3, #1
 8013f6e:	d107      	bne.n	8013f80 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	689a      	ldr	r2, [r3, #8]
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	681b      	ldr	r3, [r3, #0]
 8013f78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8013f7c:	609a      	str	r2, [r3, #8]
 8013f7e:	e006      	b.n	8013f8e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	689a      	ldr	r2, [r3, #8]
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	681b      	ldr	r3, [r3, #0]
 8013f88:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8013f8c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	68db      	ldr	r3, [r3, #12]
 8013f92:	2b02      	cmp	r3, #2
 8013f94:	d104      	bne.n	8013fa0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	681b      	ldr	r3, [r3, #0]
 8013f9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013f9e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	685b      	ldr	r3, [r3, #4]
 8013fa6:	687a      	ldr	r2, [r7, #4]
 8013fa8:	6812      	ldr	r2, [r2, #0]
 8013faa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8013fae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013fb2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	68da      	ldr	r2, [r3, #12]
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	681b      	ldr	r3, [r3, #0]
 8013fbe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8013fc2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	691a      	ldr	r2, [r3, #16]
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	695b      	ldr	r3, [r3, #20]
 8013fcc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	699b      	ldr	r3, [r3, #24]
 8013fd4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	681b      	ldr	r3, [r3, #0]
 8013fda:	430a      	orrs	r2, r1
 8013fdc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	69d9      	ldr	r1, [r3, #28]
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	6a1a      	ldr	r2, [r3, #32]
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	681b      	ldr	r3, [r3, #0]
 8013fea:	430a      	orrs	r2, r1
 8013fec:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	681b      	ldr	r3, [r3, #0]
 8013ff2:	681a      	ldr	r2, [r3, #0]
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	681b      	ldr	r3, [r3, #0]
 8013ff8:	f042 0201 	orr.w	r2, r2, #1
 8013ffc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	2200      	movs	r2, #0
 8014002:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	2220      	movs	r2, #32
 8014008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	2200      	movs	r2, #0
 8014010:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	2200      	movs	r2, #0
 8014016:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 801401a:	2300      	movs	r3, #0
}
 801401c:	4618      	mov	r0, r3
 801401e:	3708      	adds	r7, #8
 8014020:	46bd      	mov	sp, r7
 8014022:	bd80      	pop	{r7, pc}

08014024 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014024:	b580      	push	{r7, lr}
 8014026:	b088      	sub	sp, #32
 8014028:	af02      	add	r7, sp, #8
 801402a:	60f8      	str	r0, [r7, #12]
 801402c:	4608      	mov	r0, r1
 801402e:	4611      	mov	r1, r2
 8014030:	461a      	mov	r2, r3
 8014032:	4603      	mov	r3, r0
 8014034:	817b      	strh	r3, [r7, #10]
 8014036:	460b      	mov	r3, r1
 8014038:	813b      	strh	r3, [r7, #8]
 801403a:	4613      	mov	r3, r2
 801403c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8014044:	b2db      	uxtb	r3, r3
 8014046:	2b20      	cmp	r3, #32
 8014048:	f040 80f9 	bne.w	801423e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 801404c:	6a3b      	ldr	r3, [r7, #32]
 801404e:	2b00      	cmp	r3, #0
 8014050:	d002      	beq.n	8014058 <HAL_I2C_Mem_Write+0x34>
 8014052:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014054:	2b00      	cmp	r3, #0
 8014056:	d105      	bne.n	8014064 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801405e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8014060:	2301      	movs	r3, #1
 8014062:	e0ed      	b.n	8014240 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801406a:	2b01      	cmp	r3, #1
 801406c:	d101      	bne.n	8014072 <HAL_I2C_Mem_Write+0x4e>
 801406e:	2302      	movs	r3, #2
 8014070:	e0e6      	b.n	8014240 <HAL_I2C_Mem_Write+0x21c>
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	2201      	movs	r2, #1
 8014076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801407a:	f7fd ff21 	bl	8011ec0 <HAL_GetTick>
 801407e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8014080:	697b      	ldr	r3, [r7, #20]
 8014082:	9300      	str	r3, [sp, #0]
 8014084:	2319      	movs	r3, #25
 8014086:	2201      	movs	r2, #1
 8014088:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801408c:	68f8      	ldr	r0, [r7, #12]
 801408e:	f000 fac3 	bl	8014618 <I2C_WaitOnFlagUntilTimeout>
 8014092:	4603      	mov	r3, r0
 8014094:	2b00      	cmp	r3, #0
 8014096:	d001      	beq.n	801409c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8014098:	2301      	movs	r3, #1
 801409a:	e0d1      	b.n	8014240 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	2221      	movs	r2, #33	; 0x21
 80140a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80140a4:	68fb      	ldr	r3, [r7, #12]
 80140a6:	2240      	movs	r2, #64	; 0x40
 80140a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	2200      	movs	r2, #0
 80140b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80140b2:	68fb      	ldr	r3, [r7, #12]
 80140b4:	6a3a      	ldr	r2, [r7, #32]
 80140b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80140bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	2200      	movs	r2, #0
 80140c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80140c4:	88f8      	ldrh	r0, [r7, #6]
 80140c6:	893a      	ldrh	r2, [r7, #8]
 80140c8:	8979      	ldrh	r1, [r7, #10]
 80140ca:	697b      	ldr	r3, [r7, #20]
 80140cc:	9301      	str	r3, [sp, #4]
 80140ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140d0:	9300      	str	r3, [sp, #0]
 80140d2:	4603      	mov	r3, r0
 80140d4:	68f8      	ldr	r0, [r7, #12]
 80140d6:	f000 f9d3 	bl	8014480 <I2C_RequestMemoryWrite>
 80140da:	4603      	mov	r3, r0
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d005      	beq.n	80140ec <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80140e0:	68fb      	ldr	r3, [r7, #12]
 80140e2:	2200      	movs	r2, #0
 80140e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80140e8:	2301      	movs	r3, #1
 80140ea:	e0a9      	b.n	8014240 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80140f0:	b29b      	uxth	r3, r3
 80140f2:	2bff      	cmp	r3, #255	; 0xff
 80140f4:	d90e      	bls.n	8014114 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80140f6:	68fb      	ldr	r3, [r7, #12]
 80140f8:	22ff      	movs	r2, #255	; 0xff
 80140fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014100:	b2da      	uxtb	r2, r3
 8014102:	8979      	ldrh	r1, [r7, #10]
 8014104:	2300      	movs	r3, #0
 8014106:	9300      	str	r3, [sp, #0]
 8014108:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801410c:	68f8      	ldr	r0, [r7, #12]
 801410e:	f000 fc2b 	bl	8014968 <I2C_TransferConfig>
 8014112:	e00f      	b.n	8014134 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8014114:	68fb      	ldr	r3, [r7, #12]
 8014116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014118:	b29a      	uxth	r2, r3
 801411a:	68fb      	ldr	r3, [r7, #12]
 801411c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014122:	b2da      	uxtb	r2, r3
 8014124:	8979      	ldrh	r1, [r7, #10]
 8014126:	2300      	movs	r3, #0
 8014128:	9300      	str	r3, [sp, #0]
 801412a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801412e:	68f8      	ldr	r0, [r7, #12]
 8014130:	f000 fc1a 	bl	8014968 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8014134:	697a      	ldr	r2, [r7, #20]
 8014136:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014138:	68f8      	ldr	r0, [r7, #12]
 801413a:	f000 faad 	bl	8014698 <I2C_WaitOnTXISFlagUntilTimeout>
 801413e:	4603      	mov	r3, r0
 8014140:	2b00      	cmp	r3, #0
 8014142:	d001      	beq.n	8014148 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8014144:	2301      	movs	r3, #1
 8014146:	e07b      	b.n	8014240 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8014148:	68fb      	ldr	r3, [r7, #12]
 801414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801414c:	781a      	ldrb	r2, [r3, #0]
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	681b      	ldr	r3, [r3, #0]
 8014152:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014158:	1c5a      	adds	r2, r3, #1
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 801415e:	68fb      	ldr	r3, [r7, #12]
 8014160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014162:	b29b      	uxth	r3, r3
 8014164:	3b01      	subs	r3, #1
 8014166:	b29a      	uxth	r2, r3
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 801416c:	68fb      	ldr	r3, [r7, #12]
 801416e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014170:	3b01      	subs	r3, #1
 8014172:	b29a      	uxth	r2, r3
 8014174:	68fb      	ldr	r3, [r7, #12]
 8014176:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8014178:	68fb      	ldr	r3, [r7, #12]
 801417a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801417c:	b29b      	uxth	r3, r3
 801417e:	2b00      	cmp	r3, #0
 8014180:	d034      	beq.n	80141ec <HAL_I2C_Mem_Write+0x1c8>
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014186:	2b00      	cmp	r3, #0
 8014188:	d130      	bne.n	80141ec <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801418a:	697b      	ldr	r3, [r7, #20]
 801418c:	9300      	str	r3, [sp, #0]
 801418e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014190:	2200      	movs	r2, #0
 8014192:	2180      	movs	r1, #128	; 0x80
 8014194:	68f8      	ldr	r0, [r7, #12]
 8014196:	f000 fa3f 	bl	8014618 <I2C_WaitOnFlagUntilTimeout>
 801419a:	4603      	mov	r3, r0
 801419c:	2b00      	cmp	r3, #0
 801419e:	d001      	beq.n	80141a4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80141a0:	2301      	movs	r3, #1
 80141a2:	e04d      	b.n	8014240 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80141a4:	68fb      	ldr	r3, [r7, #12]
 80141a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80141a8:	b29b      	uxth	r3, r3
 80141aa:	2bff      	cmp	r3, #255	; 0xff
 80141ac:	d90e      	bls.n	80141cc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80141ae:	68fb      	ldr	r3, [r7, #12]
 80141b0:	22ff      	movs	r2, #255	; 0xff
 80141b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80141b8:	b2da      	uxtb	r2, r3
 80141ba:	8979      	ldrh	r1, [r7, #10]
 80141bc:	2300      	movs	r3, #0
 80141be:	9300      	str	r3, [sp, #0]
 80141c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80141c4:	68f8      	ldr	r0, [r7, #12]
 80141c6:	f000 fbcf 	bl	8014968 <I2C_TransferConfig>
 80141ca:	e00f      	b.n	80141ec <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80141d0:	b29a      	uxth	r2, r3
 80141d2:	68fb      	ldr	r3, [r7, #12]
 80141d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80141d6:	68fb      	ldr	r3, [r7, #12]
 80141d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80141da:	b2da      	uxtb	r2, r3
 80141dc:	8979      	ldrh	r1, [r7, #10]
 80141de:	2300      	movs	r3, #0
 80141e0:	9300      	str	r3, [sp, #0]
 80141e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80141e6:	68f8      	ldr	r0, [r7, #12]
 80141e8:	f000 fbbe 	bl	8014968 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80141ec:	68fb      	ldr	r3, [r7, #12]
 80141ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80141f0:	b29b      	uxth	r3, r3
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d19e      	bne.n	8014134 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80141f6:	697a      	ldr	r2, [r7, #20]
 80141f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80141fa:	68f8      	ldr	r0, [r7, #12]
 80141fc:	f000 fa8c 	bl	8014718 <I2C_WaitOnSTOPFlagUntilTimeout>
 8014200:	4603      	mov	r3, r0
 8014202:	2b00      	cmp	r3, #0
 8014204:	d001      	beq.n	801420a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8014206:	2301      	movs	r3, #1
 8014208:	e01a      	b.n	8014240 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801420a:	68fb      	ldr	r3, [r7, #12]
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	2220      	movs	r2, #32
 8014210:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	6859      	ldr	r1, [r3, #4]
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	681a      	ldr	r2, [r3, #0]
 801421c:	4b0a      	ldr	r3, [pc, #40]	; (8014248 <HAL_I2C_Mem_Write+0x224>)
 801421e:	400b      	ands	r3, r1
 8014220:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8014222:	68fb      	ldr	r3, [r7, #12]
 8014224:	2220      	movs	r2, #32
 8014226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	2200      	movs	r2, #0
 801422e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	2200      	movs	r2, #0
 8014236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801423a:	2300      	movs	r3, #0
 801423c:	e000      	b.n	8014240 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 801423e:	2302      	movs	r3, #2
  }
}
 8014240:	4618      	mov	r0, r3
 8014242:	3718      	adds	r7, #24
 8014244:	46bd      	mov	sp, r7
 8014246:	bd80      	pop	{r7, pc}
 8014248:	fe00e800 	.word	0xfe00e800

0801424c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801424c:	b580      	push	{r7, lr}
 801424e:	b088      	sub	sp, #32
 8014250:	af02      	add	r7, sp, #8
 8014252:	60f8      	str	r0, [r7, #12]
 8014254:	4608      	mov	r0, r1
 8014256:	4611      	mov	r1, r2
 8014258:	461a      	mov	r2, r3
 801425a:	4603      	mov	r3, r0
 801425c:	817b      	strh	r3, [r7, #10]
 801425e:	460b      	mov	r3, r1
 8014260:	813b      	strh	r3, [r7, #8]
 8014262:	4613      	mov	r3, r2
 8014264:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801426c:	b2db      	uxtb	r3, r3
 801426e:	2b20      	cmp	r3, #32
 8014270:	f040 80fd 	bne.w	801446e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8014274:	6a3b      	ldr	r3, [r7, #32]
 8014276:	2b00      	cmp	r3, #0
 8014278:	d002      	beq.n	8014280 <HAL_I2C_Mem_Read+0x34>
 801427a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801427c:	2b00      	cmp	r3, #0
 801427e:	d105      	bne.n	801428c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014286:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8014288:	2301      	movs	r3, #1
 801428a:	e0f1      	b.n	8014470 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014292:	2b01      	cmp	r3, #1
 8014294:	d101      	bne.n	801429a <HAL_I2C_Mem_Read+0x4e>
 8014296:	2302      	movs	r3, #2
 8014298:	e0ea      	b.n	8014470 <HAL_I2C_Mem_Read+0x224>
 801429a:	68fb      	ldr	r3, [r7, #12]
 801429c:	2201      	movs	r2, #1
 801429e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80142a2:	f7fd fe0d 	bl	8011ec0 <HAL_GetTick>
 80142a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80142a8:	697b      	ldr	r3, [r7, #20]
 80142aa:	9300      	str	r3, [sp, #0]
 80142ac:	2319      	movs	r3, #25
 80142ae:	2201      	movs	r2, #1
 80142b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80142b4:	68f8      	ldr	r0, [r7, #12]
 80142b6:	f000 f9af 	bl	8014618 <I2C_WaitOnFlagUntilTimeout>
 80142ba:	4603      	mov	r3, r0
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d001      	beq.n	80142c4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80142c0:	2301      	movs	r3, #1
 80142c2:	e0d5      	b.n	8014470 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80142c4:	68fb      	ldr	r3, [r7, #12]
 80142c6:	2222      	movs	r2, #34	; 0x22
 80142c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	2240      	movs	r2, #64	; 0x40
 80142d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	2200      	movs	r2, #0
 80142d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80142da:	68fb      	ldr	r3, [r7, #12]
 80142dc:	6a3a      	ldr	r2, [r7, #32]
 80142de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80142e0:	68fb      	ldr	r3, [r7, #12]
 80142e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80142e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80142e6:	68fb      	ldr	r3, [r7, #12]
 80142e8:	2200      	movs	r2, #0
 80142ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80142ec:	88f8      	ldrh	r0, [r7, #6]
 80142ee:	893a      	ldrh	r2, [r7, #8]
 80142f0:	8979      	ldrh	r1, [r7, #10]
 80142f2:	697b      	ldr	r3, [r7, #20]
 80142f4:	9301      	str	r3, [sp, #4]
 80142f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142f8:	9300      	str	r3, [sp, #0]
 80142fa:	4603      	mov	r3, r0
 80142fc:	68f8      	ldr	r0, [r7, #12]
 80142fe:	f000 f913 	bl	8014528 <I2C_RequestMemoryRead>
 8014302:	4603      	mov	r3, r0
 8014304:	2b00      	cmp	r3, #0
 8014306:	d005      	beq.n	8014314 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	2200      	movs	r2, #0
 801430c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8014310:	2301      	movs	r3, #1
 8014312:	e0ad      	b.n	8014470 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014318:	b29b      	uxth	r3, r3
 801431a:	2bff      	cmp	r3, #255	; 0xff
 801431c:	d90e      	bls.n	801433c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	22ff      	movs	r2, #255	; 0xff
 8014322:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014328:	b2da      	uxtb	r2, r3
 801432a:	8979      	ldrh	r1, [r7, #10]
 801432c:	4b52      	ldr	r3, [pc, #328]	; (8014478 <HAL_I2C_Mem_Read+0x22c>)
 801432e:	9300      	str	r3, [sp, #0]
 8014330:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8014334:	68f8      	ldr	r0, [r7, #12]
 8014336:	f000 fb17 	bl	8014968 <I2C_TransferConfig>
 801433a:	e00f      	b.n	801435c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801433c:	68fb      	ldr	r3, [r7, #12]
 801433e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014340:	b29a      	uxth	r2, r3
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801434a:	b2da      	uxtb	r2, r3
 801434c:	8979      	ldrh	r1, [r7, #10]
 801434e:	4b4a      	ldr	r3, [pc, #296]	; (8014478 <HAL_I2C_Mem_Read+0x22c>)
 8014350:	9300      	str	r3, [sp, #0]
 8014352:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8014356:	68f8      	ldr	r0, [r7, #12]
 8014358:	f000 fb06 	bl	8014968 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 801435c:	697b      	ldr	r3, [r7, #20]
 801435e:	9300      	str	r3, [sp, #0]
 8014360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014362:	2200      	movs	r2, #0
 8014364:	2104      	movs	r1, #4
 8014366:	68f8      	ldr	r0, [r7, #12]
 8014368:	f000 f956 	bl	8014618 <I2C_WaitOnFlagUntilTimeout>
 801436c:	4603      	mov	r3, r0
 801436e:	2b00      	cmp	r3, #0
 8014370:	d001      	beq.n	8014376 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8014372:	2301      	movs	r3, #1
 8014374:	e07c      	b.n	8014470 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8014376:	68fb      	ldr	r3, [r7, #12]
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801437c:	68fb      	ldr	r3, [r7, #12]
 801437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014380:	b2d2      	uxtb	r2, r2
 8014382:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8014384:	68fb      	ldr	r3, [r7, #12]
 8014386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014388:	1c5a      	adds	r2, r3, #1
 801438a:	68fb      	ldr	r3, [r7, #12]
 801438c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014392:	3b01      	subs	r3, #1
 8014394:	b29a      	uxth	r2, r3
 8014396:	68fb      	ldr	r3, [r7, #12]
 8014398:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801439e:	b29b      	uxth	r3, r3
 80143a0:	3b01      	subs	r3, #1
 80143a2:	b29a      	uxth	r2, r3
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80143ac:	b29b      	uxth	r3, r3
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d034      	beq.n	801441c <HAL_I2C_Mem_Read+0x1d0>
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d130      	bne.n	801441c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80143ba:	697b      	ldr	r3, [r7, #20]
 80143bc:	9300      	str	r3, [sp, #0]
 80143be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143c0:	2200      	movs	r2, #0
 80143c2:	2180      	movs	r1, #128	; 0x80
 80143c4:	68f8      	ldr	r0, [r7, #12]
 80143c6:	f000 f927 	bl	8014618 <I2C_WaitOnFlagUntilTimeout>
 80143ca:	4603      	mov	r3, r0
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d001      	beq.n	80143d4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80143d0:	2301      	movs	r3, #1
 80143d2:	e04d      	b.n	8014470 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80143d4:	68fb      	ldr	r3, [r7, #12]
 80143d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80143d8:	b29b      	uxth	r3, r3
 80143da:	2bff      	cmp	r3, #255	; 0xff
 80143dc:	d90e      	bls.n	80143fc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	22ff      	movs	r2, #255	; 0xff
 80143e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80143e4:	68fb      	ldr	r3, [r7, #12]
 80143e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80143e8:	b2da      	uxtb	r2, r3
 80143ea:	8979      	ldrh	r1, [r7, #10]
 80143ec:	2300      	movs	r3, #0
 80143ee:	9300      	str	r3, [sp, #0]
 80143f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80143f4:	68f8      	ldr	r0, [r7, #12]
 80143f6:	f000 fab7 	bl	8014968 <I2C_TransferConfig>
 80143fa:	e00f      	b.n	801441c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014400:	b29a      	uxth	r2, r3
 8014402:	68fb      	ldr	r3, [r7, #12]
 8014404:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801440a:	b2da      	uxtb	r2, r3
 801440c:	8979      	ldrh	r1, [r7, #10]
 801440e:	2300      	movs	r3, #0
 8014410:	9300      	str	r3, [sp, #0]
 8014412:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8014416:	68f8      	ldr	r0, [r7, #12]
 8014418:	f000 faa6 	bl	8014968 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 801441c:	68fb      	ldr	r3, [r7, #12]
 801441e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014420:	b29b      	uxth	r3, r3
 8014422:	2b00      	cmp	r3, #0
 8014424:	d19a      	bne.n	801435c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8014426:	697a      	ldr	r2, [r7, #20]
 8014428:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801442a:	68f8      	ldr	r0, [r7, #12]
 801442c:	f000 f974 	bl	8014718 <I2C_WaitOnSTOPFlagUntilTimeout>
 8014430:	4603      	mov	r3, r0
 8014432:	2b00      	cmp	r3, #0
 8014434:	d001      	beq.n	801443a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8014436:	2301      	movs	r3, #1
 8014438:	e01a      	b.n	8014470 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801443a:	68fb      	ldr	r3, [r7, #12]
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	2220      	movs	r2, #32
 8014440:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8014442:	68fb      	ldr	r3, [r7, #12]
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	6859      	ldr	r1, [r3, #4]
 8014448:	68fb      	ldr	r3, [r7, #12]
 801444a:	681a      	ldr	r2, [r3, #0]
 801444c:	4b0b      	ldr	r3, [pc, #44]	; (801447c <HAL_I2C_Mem_Read+0x230>)
 801444e:	400b      	ands	r3, r1
 8014450:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8014452:	68fb      	ldr	r3, [r7, #12]
 8014454:	2220      	movs	r2, #32
 8014456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	2200      	movs	r2, #0
 801445e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	2200      	movs	r2, #0
 8014466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801446a:	2300      	movs	r3, #0
 801446c:	e000      	b.n	8014470 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 801446e:	2302      	movs	r3, #2
  }
}
 8014470:	4618      	mov	r0, r3
 8014472:	3718      	adds	r7, #24
 8014474:	46bd      	mov	sp, r7
 8014476:	bd80      	pop	{r7, pc}
 8014478:	80002400 	.word	0x80002400
 801447c:	fe00e800 	.word	0xfe00e800

08014480 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8014480:	b580      	push	{r7, lr}
 8014482:	b086      	sub	sp, #24
 8014484:	af02      	add	r7, sp, #8
 8014486:	60f8      	str	r0, [r7, #12]
 8014488:	4608      	mov	r0, r1
 801448a:	4611      	mov	r1, r2
 801448c:	461a      	mov	r2, r3
 801448e:	4603      	mov	r3, r0
 8014490:	817b      	strh	r3, [r7, #10]
 8014492:	460b      	mov	r3, r1
 8014494:	813b      	strh	r3, [r7, #8]
 8014496:	4613      	mov	r3, r2
 8014498:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 801449a:	88fb      	ldrh	r3, [r7, #6]
 801449c:	b2da      	uxtb	r2, r3
 801449e:	8979      	ldrh	r1, [r7, #10]
 80144a0:	4b20      	ldr	r3, [pc, #128]	; (8014524 <I2C_RequestMemoryWrite+0xa4>)
 80144a2:	9300      	str	r3, [sp, #0]
 80144a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80144a8:	68f8      	ldr	r0, [r7, #12]
 80144aa:	f000 fa5d 	bl	8014968 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80144ae:	69fa      	ldr	r2, [r7, #28]
 80144b0:	69b9      	ldr	r1, [r7, #24]
 80144b2:	68f8      	ldr	r0, [r7, #12]
 80144b4:	f000 f8f0 	bl	8014698 <I2C_WaitOnTXISFlagUntilTimeout>
 80144b8:	4603      	mov	r3, r0
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d001      	beq.n	80144c2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80144be:	2301      	movs	r3, #1
 80144c0:	e02c      	b.n	801451c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80144c2:	88fb      	ldrh	r3, [r7, #6]
 80144c4:	2b01      	cmp	r3, #1
 80144c6:	d105      	bne.n	80144d4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80144c8:	893b      	ldrh	r3, [r7, #8]
 80144ca:	b2da      	uxtb	r2, r3
 80144cc:	68fb      	ldr	r3, [r7, #12]
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	629a      	str	r2, [r3, #40]	; 0x28
 80144d2:	e015      	b.n	8014500 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80144d4:	893b      	ldrh	r3, [r7, #8]
 80144d6:	0a1b      	lsrs	r3, r3, #8
 80144d8:	b29b      	uxth	r3, r3
 80144da:	b2da      	uxtb	r2, r3
 80144dc:	68fb      	ldr	r3, [r7, #12]
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80144e2:	69fa      	ldr	r2, [r7, #28]
 80144e4:	69b9      	ldr	r1, [r7, #24]
 80144e6:	68f8      	ldr	r0, [r7, #12]
 80144e8:	f000 f8d6 	bl	8014698 <I2C_WaitOnTXISFlagUntilTimeout>
 80144ec:	4603      	mov	r3, r0
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d001      	beq.n	80144f6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80144f2:	2301      	movs	r3, #1
 80144f4:	e012      	b.n	801451c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80144f6:	893b      	ldrh	r3, [r7, #8]
 80144f8:	b2da      	uxtb	r2, r3
 80144fa:	68fb      	ldr	r3, [r7, #12]
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8014500:	69fb      	ldr	r3, [r7, #28]
 8014502:	9300      	str	r3, [sp, #0]
 8014504:	69bb      	ldr	r3, [r7, #24]
 8014506:	2200      	movs	r2, #0
 8014508:	2180      	movs	r1, #128	; 0x80
 801450a:	68f8      	ldr	r0, [r7, #12]
 801450c:	f000 f884 	bl	8014618 <I2C_WaitOnFlagUntilTimeout>
 8014510:	4603      	mov	r3, r0
 8014512:	2b00      	cmp	r3, #0
 8014514:	d001      	beq.n	801451a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8014516:	2301      	movs	r3, #1
 8014518:	e000      	b.n	801451c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 801451a:	2300      	movs	r3, #0
}
 801451c:	4618      	mov	r0, r3
 801451e:	3710      	adds	r7, #16
 8014520:	46bd      	mov	sp, r7
 8014522:	bd80      	pop	{r7, pc}
 8014524:	80002000 	.word	0x80002000

08014528 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8014528:	b580      	push	{r7, lr}
 801452a:	b086      	sub	sp, #24
 801452c:	af02      	add	r7, sp, #8
 801452e:	60f8      	str	r0, [r7, #12]
 8014530:	4608      	mov	r0, r1
 8014532:	4611      	mov	r1, r2
 8014534:	461a      	mov	r2, r3
 8014536:	4603      	mov	r3, r0
 8014538:	817b      	strh	r3, [r7, #10]
 801453a:	460b      	mov	r3, r1
 801453c:	813b      	strh	r3, [r7, #8]
 801453e:	4613      	mov	r3, r2
 8014540:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8014542:	88fb      	ldrh	r3, [r7, #6]
 8014544:	b2da      	uxtb	r2, r3
 8014546:	8979      	ldrh	r1, [r7, #10]
 8014548:	4b20      	ldr	r3, [pc, #128]	; (80145cc <I2C_RequestMemoryRead+0xa4>)
 801454a:	9300      	str	r3, [sp, #0]
 801454c:	2300      	movs	r3, #0
 801454e:	68f8      	ldr	r0, [r7, #12]
 8014550:	f000 fa0a 	bl	8014968 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8014554:	69fa      	ldr	r2, [r7, #28]
 8014556:	69b9      	ldr	r1, [r7, #24]
 8014558:	68f8      	ldr	r0, [r7, #12]
 801455a:	f000 f89d 	bl	8014698 <I2C_WaitOnTXISFlagUntilTimeout>
 801455e:	4603      	mov	r3, r0
 8014560:	2b00      	cmp	r3, #0
 8014562:	d001      	beq.n	8014568 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8014564:	2301      	movs	r3, #1
 8014566:	e02c      	b.n	80145c2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8014568:	88fb      	ldrh	r3, [r7, #6]
 801456a:	2b01      	cmp	r3, #1
 801456c:	d105      	bne.n	801457a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801456e:	893b      	ldrh	r3, [r7, #8]
 8014570:	b2da      	uxtb	r2, r3
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	681b      	ldr	r3, [r3, #0]
 8014576:	629a      	str	r2, [r3, #40]	; 0x28
 8014578:	e015      	b.n	80145a6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 801457a:	893b      	ldrh	r3, [r7, #8]
 801457c:	0a1b      	lsrs	r3, r3, #8
 801457e:	b29b      	uxth	r3, r3
 8014580:	b2da      	uxtb	r2, r3
 8014582:	68fb      	ldr	r3, [r7, #12]
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8014588:	69fa      	ldr	r2, [r7, #28]
 801458a:	69b9      	ldr	r1, [r7, #24]
 801458c:	68f8      	ldr	r0, [r7, #12]
 801458e:	f000 f883 	bl	8014698 <I2C_WaitOnTXISFlagUntilTimeout>
 8014592:	4603      	mov	r3, r0
 8014594:	2b00      	cmp	r3, #0
 8014596:	d001      	beq.n	801459c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8014598:	2301      	movs	r3, #1
 801459a:	e012      	b.n	80145c2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801459c:	893b      	ldrh	r3, [r7, #8]
 801459e:	b2da      	uxtb	r2, r3
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80145a6:	69fb      	ldr	r3, [r7, #28]
 80145a8:	9300      	str	r3, [sp, #0]
 80145aa:	69bb      	ldr	r3, [r7, #24]
 80145ac:	2200      	movs	r2, #0
 80145ae:	2140      	movs	r1, #64	; 0x40
 80145b0:	68f8      	ldr	r0, [r7, #12]
 80145b2:	f000 f831 	bl	8014618 <I2C_WaitOnFlagUntilTimeout>
 80145b6:	4603      	mov	r3, r0
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d001      	beq.n	80145c0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80145bc:	2301      	movs	r3, #1
 80145be:	e000      	b.n	80145c2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80145c0:	2300      	movs	r3, #0
}
 80145c2:	4618      	mov	r0, r3
 80145c4:	3710      	adds	r7, #16
 80145c6:	46bd      	mov	sp, r7
 80145c8:	bd80      	pop	{r7, pc}
 80145ca:	bf00      	nop
 80145cc:	80002000 	.word	0x80002000

080145d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80145d0:	b480      	push	{r7}
 80145d2:	b083      	sub	sp, #12
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	681b      	ldr	r3, [r3, #0]
 80145dc:	699b      	ldr	r3, [r3, #24]
 80145de:	f003 0302 	and.w	r3, r3, #2
 80145e2:	2b02      	cmp	r3, #2
 80145e4:	d103      	bne.n	80145ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	681b      	ldr	r3, [r3, #0]
 80145ea:	2200      	movs	r2, #0
 80145ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	699b      	ldr	r3, [r3, #24]
 80145f4:	f003 0301 	and.w	r3, r3, #1
 80145f8:	2b01      	cmp	r3, #1
 80145fa:	d007      	beq.n	801460c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	699a      	ldr	r2, [r3, #24]
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	f042 0201 	orr.w	r2, r2, #1
 801460a:	619a      	str	r2, [r3, #24]
  }
}
 801460c:	bf00      	nop
 801460e:	370c      	adds	r7, #12
 8014610:	46bd      	mov	sp, r7
 8014612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014616:	4770      	bx	lr

08014618 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8014618:	b580      	push	{r7, lr}
 801461a:	b084      	sub	sp, #16
 801461c:	af00      	add	r7, sp, #0
 801461e:	60f8      	str	r0, [r7, #12]
 8014620:	60b9      	str	r1, [r7, #8]
 8014622:	603b      	str	r3, [r7, #0]
 8014624:	4613      	mov	r3, r2
 8014626:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8014628:	e022      	b.n	8014670 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801462a:	683b      	ldr	r3, [r7, #0]
 801462c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014630:	d01e      	beq.n	8014670 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014632:	f7fd fc45 	bl	8011ec0 <HAL_GetTick>
 8014636:	4602      	mov	r2, r0
 8014638:	69bb      	ldr	r3, [r7, #24]
 801463a:	1ad3      	subs	r3, r2, r3
 801463c:	683a      	ldr	r2, [r7, #0]
 801463e:	429a      	cmp	r2, r3
 8014640:	d302      	bcc.n	8014648 <I2C_WaitOnFlagUntilTimeout+0x30>
 8014642:	683b      	ldr	r3, [r7, #0]
 8014644:	2b00      	cmp	r3, #0
 8014646:	d113      	bne.n	8014670 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8014648:	68fb      	ldr	r3, [r7, #12]
 801464a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801464c:	f043 0220 	orr.w	r2, r3, #32
 8014650:	68fb      	ldr	r3, [r7, #12]
 8014652:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8014654:	68fb      	ldr	r3, [r7, #12]
 8014656:	2220      	movs	r2, #32
 8014658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	2200      	movs	r2, #0
 8014660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	2200      	movs	r2, #0
 8014668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 801466c:	2301      	movs	r3, #1
 801466e:	e00f      	b.n	8014690 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	699a      	ldr	r2, [r3, #24]
 8014676:	68bb      	ldr	r3, [r7, #8]
 8014678:	4013      	ands	r3, r2
 801467a:	68ba      	ldr	r2, [r7, #8]
 801467c:	429a      	cmp	r2, r3
 801467e:	bf0c      	ite	eq
 8014680:	2301      	moveq	r3, #1
 8014682:	2300      	movne	r3, #0
 8014684:	b2db      	uxtb	r3, r3
 8014686:	461a      	mov	r2, r3
 8014688:	79fb      	ldrb	r3, [r7, #7]
 801468a:	429a      	cmp	r2, r3
 801468c:	d0cd      	beq.n	801462a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801468e:	2300      	movs	r3, #0
}
 8014690:	4618      	mov	r0, r3
 8014692:	3710      	adds	r7, #16
 8014694:	46bd      	mov	sp, r7
 8014696:	bd80      	pop	{r7, pc}

08014698 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8014698:	b580      	push	{r7, lr}
 801469a:	b084      	sub	sp, #16
 801469c:	af00      	add	r7, sp, #0
 801469e:	60f8      	str	r0, [r7, #12]
 80146a0:	60b9      	str	r1, [r7, #8]
 80146a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80146a4:	e02c      	b.n	8014700 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80146a6:	687a      	ldr	r2, [r7, #4]
 80146a8:	68b9      	ldr	r1, [r7, #8]
 80146aa:	68f8      	ldr	r0, [r7, #12]
 80146ac:	f000 f870 	bl	8014790 <I2C_IsErrorOccurred>
 80146b0:	4603      	mov	r3, r0
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d001      	beq.n	80146ba <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80146b6:	2301      	movs	r3, #1
 80146b8:	e02a      	b.n	8014710 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80146ba:	68bb      	ldr	r3, [r7, #8]
 80146bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80146c0:	d01e      	beq.n	8014700 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80146c2:	f7fd fbfd 	bl	8011ec0 <HAL_GetTick>
 80146c6:	4602      	mov	r2, r0
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	1ad3      	subs	r3, r2, r3
 80146cc:	68ba      	ldr	r2, [r7, #8]
 80146ce:	429a      	cmp	r2, r3
 80146d0:	d302      	bcc.n	80146d8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80146d2:	68bb      	ldr	r3, [r7, #8]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d113      	bne.n	8014700 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80146dc:	f043 0220 	orr.w	r2, r3, #32
 80146e0:	68fb      	ldr	r3, [r7, #12]
 80146e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80146e4:	68fb      	ldr	r3, [r7, #12]
 80146e6:	2220      	movs	r2, #32
 80146e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	2200      	movs	r2, #0
 80146f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	2200      	movs	r2, #0
 80146f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80146fc:	2301      	movs	r3, #1
 80146fe:	e007      	b.n	8014710 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8014700:	68fb      	ldr	r3, [r7, #12]
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	699b      	ldr	r3, [r3, #24]
 8014706:	f003 0302 	and.w	r3, r3, #2
 801470a:	2b02      	cmp	r3, #2
 801470c:	d1cb      	bne.n	80146a6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801470e:	2300      	movs	r3, #0
}
 8014710:	4618      	mov	r0, r3
 8014712:	3710      	adds	r7, #16
 8014714:	46bd      	mov	sp, r7
 8014716:	bd80      	pop	{r7, pc}

08014718 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8014718:	b580      	push	{r7, lr}
 801471a:	b084      	sub	sp, #16
 801471c:	af00      	add	r7, sp, #0
 801471e:	60f8      	str	r0, [r7, #12]
 8014720:	60b9      	str	r1, [r7, #8]
 8014722:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8014724:	e028      	b.n	8014778 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8014726:	687a      	ldr	r2, [r7, #4]
 8014728:	68b9      	ldr	r1, [r7, #8]
 801472a:	68f8      	ldr	r0, [r7, #12]
 801472c:	f000 f830 	bl	8014790 <I2C_IsErrorOccurred>
 8014730:	4603      	mov	r3, r0
 8014732:	2b00      	cmp	r3, #0
 8014734:	d001      	beq.n	801473a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8014736:	2301      	movs	r3, #1
 8014738:	e026      	b.n	8014788 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801473a:	f7fd fbc1 	bl	8011ec0 <HAL_GetTick>
 801473e:	4602      	mov	r2, r0
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	1ad3      	subs	r3, r2, r3
 8014744:	68ba      	ldr	r2, [r7, #8]
 8014746:	429a      	cmp	r2, r3
 8014748:	d302      	bcc.n	8014750 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801474a:	68bb      	ldr	r3, [r7, #8]
 801474c:	2b00      	cmp	r3, #0
 801474e:	d113      	bne.n	8014778 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8014750:	68fb      	ldr	r3, [r7, #12]
 8014752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014754:	f043 0220 	orr.w	r2, r3, #32
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 801475c:	68fb      	ldr	r3, [r7, #12]
 801475e:	2220      	movs	r2, #32
 8014760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	2200      	movs	r2, #0
 8014768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801476c:	68fb      	ldr	r3, [r7, #12]
 801476e:	2200      	movs	r2, #0
 8014770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8014774:	2301      	movs	r3, #1
 8014776:	e007      	b.n	8014788 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	699b      	ldr	r3, [r3, #24]
 801477e:	f003 0320 	and.w	r3, r3, #32
 8014782:	2b20      	cmp	r3, #32
 8014784:	d1cf      	bne.n	8014726 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8014786:	2300      	movs	r3, #0
}
 8014788:	4618      	mov	r0, r3
 801478a:	3710      	adds	r7, #16
 801478c:	46bd      	mov	sp, r7
 801478e:	bd80      	pop	{r7, pc}

08014790 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8014790:	b580      	push	{r7, lr}
 8014792:	b08a      	sub	sp, #40	; 0x28
 8014794:	af00      	add	r7, sp, #0
 8014796:	60f8      	str	r0, [r7, #12]
 8014798:	60b9      	str	r1, [r7, #8]
 801479a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801479c:	2300      	movs	r3, #0
 801479e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	699b      	ldr	r3, [r3, #24]
 80147a8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80147aa:	2300      	movs	r3, #0
 80147ac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80147b2:	69bb      	ldr	r3, [r7, #24]
 80147b4:	f003 0310 	and.w	r3, r3, #16
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d075      	beq.n	80148a8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	2210      	movs	r2, #16
 80147c2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80147c4:	e056      	b.n	8014874 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80147c6:	68bb      	ldr	r3, [r7, #8]
 80147c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147cc:	d052      	beq.n	8014874 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80147ce:	f7fd fb77 	bl	8011ec0 <HAL_GetTick>
 80147d2:	4602      	mov	r2, r0
 80147d4:	69fb      	ldr	r3, [r7, #28]
 80147d6:	1ad3      	subs	r3, r2, r3
 80147d8:	68ba      	ldr	r2, [r7, #8]
 80147da:	429a      	cmp	r2, r3
 80147dc:	d302      	bcc.n	80147e4 <I2C_IsErrorOccurred+0x54>
 80147de:	68bb      	ldr	r3, [r7, #8]
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d147      	bne.n	8014874 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80147e4:	68fb      	ldr	r3, [r7, #12]
 80147e6:	681b      	ldr	r3, [r3, #0]
 80147e8:	685b      	ldr	r3, [r3, #4]
 80147ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80147ee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80147f0:	68fb      	ldr	r3, [r7, #12]
 80147f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80147f6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	699b      	ldr	r3, [r3, #24]
 80147fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014802:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014806:	d12e      	bne.n	8014866 <I2C_IsErrorOccurred+0xd6>
 8014808:	697b      	ldr	r3, [r7, #20]
 801480a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801480e:	d02a      	beq.n	8014866 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8014810:	7cfb      	ldrb	r3, [r7, #19]
 8014812:	2b20      	cmp	r3, #32
 8014814:	d027      	beq.n	8014866 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	685a      	ldr	r2, [r3, #4]
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8014824:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8014826:	f7fd fb4b 	bl	8011ec0 <HAL_GetTick>
 801482a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801482c:	e01b      	b.n	8014866 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801482e:	f7fd fb47 	bl	8011ec0 <HAL_GetTick>
 8014832:	4602      	mov	r2, r0
 8014834:	69fb      	ldr	r3, [r7, #28]
 8014836:	1ad3      	subs	r3, r2, r3
 8014838:	2b19      	cmp	r3, #25
 801483a:	d914      	bls.n	8014866 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014840:	f043 0220 	orr.w	r2, r3, #32
 8014844:	68fb      	ldr	r3, [r7, #12]
 8014846:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	2220      	movs	r2, #32
 801484c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8014850:	68fb      	ldr	r3, [r7, #12]
 8014852:	2200      	movs	r2, #0
 8014854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	2200      	movs	r2, #0
 801485c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8014860:	2301      	movs	r3, #1
 8014862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	681b      	ldr	r3, [r3, #0]
 801486a:	699b      	ldr	r3, [r3, #24]
 801486c:	f003 0320 	and.w	r3, r3, #32
 8014870:	2b20      	cmp	r3, #32
 8014872:	d1dc      	bne.n	801482e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	699b      	ldr	r3, [r3, #24]
 801487a:	f003 0320 	and.w	r3, r3, #32
 801487e:	2b20      	cmp	r3, #32
 8014880:	d003      	beq.n	801488a <I2C_IsErrorOccurred+0xfa>
 8014882:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014886:	2b00      	cmp	r3, #0
 8014888:	d09d      	beq.n	80147c6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 801488a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801488e:	2b00      	cmp	r3, #0
 8014890:	d103      	bne.n	801489a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	681b      	ldr	r3, [r3, #0]
 8014896:	2220      	movs	r2, #32
 8014898:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 801489a:	6a3b      	ldr	r3, [r7, #32]
 801489c:	f043 0304 	orr.w	r3, r3, #4
 80148a0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80148a2:	2301      	movs	r3, #1
 80148a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	699b      	ldr	r3, [r3, #24]
 80148ae:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80148b0:	69bb      	ldr	r3, [r7, #24]
 80148b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d00b      	beq.n	80148d2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80148ba:	6a3b      	ldr	r3, [r7, #32]
 80148bc:	f043 0301 	orr.w	r3, r3, #1
 80148c0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80148ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80148cc:	2301      	movs	r3, #1
 80148ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80148d2:	69bb      	ldr	r3, [r7, #24]
 80148d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d00b      	beq.n	80148f4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80148dc:	6a3b      	ldr	r3, [r7, #32]
 80148de:	f043 0308 	orr.w	r3, r3, #8
 80148e2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80148e4:	68fb      	ldr	r3, [r7, #12]
 80148e6:	681b      	ldr	r3, [r3, #0]
 80148e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80148ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80148ee:	2301      	movs	r3, #1
 80148f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80148f4:	69bb      	ldr	r3, [r7, #24]
 80148f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d00b      	beq.n	8014916 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80148fe:	6a3b      	ldr	r3, [r7, #32]
 8014900:	f043 0302 	orr.w	r3, r3, #2
 8014904:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801490e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8014910:	2301      	movs	r3, #1
 8014912:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8014916:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801491a:	2b00      	cmp	r3, #0
 801491c:	d01c      	beq.n	8014958 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801491e:	68f8      	ldr	r0, [r7, #12]
 8014920:	f7ff fe56 	bl	80145d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	6859      	ldr	r1, [r3, #4]
 801492a:	68fb      	ldr	r3, [r7, #12]
 801492c:	681a      	ldr	r2, [r3, #0]
 801492e:	4b0d      	ldr	r3, [pc, #52]	; (8014964 <I2C_IsErrorOccurred+0x1d4>)
 8014930:	400b      	ands	r3, r1
 8014932:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8014934:	68fb      	ldr	r3, [r7, #12]
 8014936:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014938:	6a3b      	ldr	r3, [r7, #32]
 801493a:	431a      	orrs	r2, r3
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	2220      	movs	r2, #32
 8014944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8014948:	68fb      	ldr	r3, [r7, #12]
 801494a:	2200      	movs	r2, #0
 801494c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	2200      	movs	r2, #0
 8014954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8014958:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801495c:	4618      	mov	r0, r3
 801495e:	3728      	adds	r7, #40	; 0x28
 8014960:	46bd      	mov	sp, r7
 8014962:	bd80      	pop	{r7, pc}
 8014964:	fe00e800 	.word	0xfe00e800

08014968 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8014968:	b480      	push	{r7}
 801496a:	b087      	sub	sp, #28
 801496c:	af00      	add	r7, sp, #0
 801496e:	60f8      	str	r0, [r7, #12]
 8014970:	607b      	str	r3, [r7, #4]
 8014972:	460b      	mov	r3, r1
 8014974:	817b      	strh	r3, [r7, #10]
 8014976:	4613      	mov	r3, r2
 8014978:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801497a:	897b      	ldrh	r3, [r7, #10]
 801497c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8014980:	7a7b      	ldrb	r3, [r7, #9]
 8014982:	041b      	lsls	r3, r3, #16
 8014984:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8014988:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801498e:	6a3b      	ldr	r3, [r7, #32]
 8014990:	4313      	orrs	r3, r2
 8014992:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014996:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	685a      	ldr	r2, [r3, #4]
 801499e:	6a3b      	ldr	r3, [r7, #32]
 80149a0:	0d5b      	lsrs	r3, r3, #21
 80149a2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80149a6:	4b08      	ldr	r3, [pc, #32]	; (80149c8 <I2C_TransferConfig+0x60>)
 80149a8:	430b      	orrs	r3, r1
 80149aa:	43db      	mvns	r3, r3
 80149ac:	ea02 0103 	and.w	r1, r2, r3
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	697a      	ldr	r2, [r7, #20]
 80149b6:	430a      	orrs	r2, r1
 80149b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80149ba:	bf00      	nop
 80149bc:	371c      	adds	r7, #28
 80149be:	46bd      	mov	sp, r7
 80149c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149c4:	4770      	bx	lr
 80149c6:	bf00      	nop
 80149c8:	03ff63ff 	.word	0x03ff63ff

080149cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80149cc:	b480      	push	{r7}
 80149ce:	b083      	sub	sp, #12
 80149d0:	af00      	add	r7, sp, #0
 80149d2:	6078      	str	r0, [r7, #4]
 80149d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80149dc:	b2db      	uxtb	r3, r3
 80149de:	2b20      	cmp	r3, #32
 80149e0:	d138      	bne.n	8014a54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80149e8:	2b01      	cmp	r3, #1
 80149ea:	d101      	bne.n	80149f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80149ec:	2302      	movs	r3, #2
 80149ee:	e032      	b.n	8014a56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	2201      	movs	r2, #1
 80149f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	2224      	movs	r2, #36	; 0x24
 80149fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	681a      	ldr	r2, [r3, #0]
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	681b      	ldr	r3, [r3, #0]
 8014a0a:	f022 0201 	bic.w	r2, r2, #1
 8014a0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	681a      	ldr	r2, [r3, #0]
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	681b      	ldr	r3, [r3, #0]
 8014a1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8014a1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	6819      	ldr	r1, [r3, #0]
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	681b      	ldr	r3, [r3, #0]
 8014a2a:	683a      	ldr	r2, [r7, #0]
 8014a2c:	430a      	orrs	r2, r1
 8014a2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	681b      	ldr	r3, [r3, #0]
 8014a34:	681a      	ldr	r2, [r3, #0]
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	f042 0201 	orr.w	r2, r2, #1
 8014a3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	2220      	movs	r2, #32
 8014a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	2200      	movs	r2, #0
 8014a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8014a50:	2300      	movs	r3, #0
 8014a52:	e000      	b.n	8014a56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8014a54:	2302      	movs	r3, #2
  }
}
 8014a56:	4618      	mov	r0, r3
 8014a58:	370c      	adds	r7, #12
 8014a5a:	46bd      	mov	sp, r7
 8014a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a60:	4770      	bx	lr

08014a62 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8014a62:	b480      	push	{r7}
 8014a64:	b085      	sub	sp, #20
 8014a66:	af00      	add	r7, sp, #0
 8014a68:	6078      	str	r0, [r7, #4]
 8014a6a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8014a72:	b2db      	uxtb	r3, r3
 8014a74:	2b20      	cmp	r3, #32
 8014a76:	d139      	bne.n	8014aec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014a7e:	2b01      	cmp	r3, #1
 8014a80:	d101      	bne.n	8014a86 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8014a82:	2302      	movs	r3, #2
 8014a84:	e033      	b.n	8014aee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	2201      	movs	r2, #1
 8014a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	2224      	movs	r2, #36	; 0x24
 8014a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	681b      	ldr	r3, [r3, #0]
 8014a9a:	681a      	ldr	r2, [r3, #0]
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	f022 0201 	bic.w	r2, r2, #1
 8014aa4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	681b      	ldr	r3, [r3, #0]
 8014aac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8014ab4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8014ab6:	683b      	ldr	r3, [r7, #0]
 8014ab8:	021b      	lsls	r3, r3, #8
 8014aba:	68fa      	ldr	r2, [r7, #12]
 8014abc:	4313      	orrs	r3, r2
 8014abe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	681b      	ldr	r3, [r3, #0]
 8014ac4:	68fa      	ldr	r2, [r7, #12]
 8014ac6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	681a      	ldr	r2, [r3, #0]
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	681b      	ldr	r3, [r3, #0]
 8014ad2:	f042 0201 	orr.w	r2, r2, #1
 8014ad6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	2220      	movs	r2, #32
 8014adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	2200      	movs	r2, #0
 8014ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8014ae8:	2300      	movs	r3, #0
 8014aea:	e000      	b.n	8014aee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8014aec:	2302      	movs	r3, #2
  }
}
 8014aee:	4618      	mov	r0, r3
 8014af0:	3714      	adds	r7, #20
 8014af2:	46bd      	mov	sp, r7
 8014af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014af8:	4770      	bx	lr
	...

08014afc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8014afc:	b480      	push	{r7}
 8014afe:	b085      	sub	sp, #20
 8014b00:	af00      	add	r7, sp, #0
 8014b02:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d141      	bne.n	8014b8e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8014b0a:	4b4b      	ldr	r3, [pc, #300]	; (8014c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8014b0c:	681b      	ldr	r3, [r3, #0]
 8014b0e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8014b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014b16:	d131      	bne.n	8014b7c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8014b18:	4b47      	ldr	r3, [pc, #284]	; (8014c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8014b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014b1e:	4a46      	ldr	r2, [pc, #280]	; (8014c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8014b20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014b24:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8014b28:	4b43      	ldr	r3, [pc, #268]	; (8014c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8014b30:	4a41      	ldr	r2, [pc, #260]	; (8014c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8014b32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8014b36:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8014b38:	4b40      	ldr	r3, [pc, #256]	; (8014c3c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	2232      	movs	r2, #50	; 0x32
 8014b3e:	fb02 f303 	mul.w	r3, r2, r3
 8014b42:	4a3f      	ldr	r2, [pc, #252]	; (8014c40 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8014b44:	fba2 2303 	umull	r2, r3, r2, r3
 8014b48:	0c9b      	lsrs	r3, r3, #18
 8014b4a:	3301      	adds	r3, #1
 8014b4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8014b4e:	e002      	b.n	8014b56 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	3b01      	subs	r3, #1
 8014b54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8014b56:	4b38      	ldr	r3, [pc, #224]	; (8014c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8014b58:	695b      	ldr	r3, [r3, #20]
 8014b5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014b62:	d102      	bne.n	8014b6a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8014b64:	68fb      	ldr	r3, [r7, #12]
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d1f2      	bne.n	8014b50 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8014b6a:	4b33      	ldr	r3, [pc, #204]	; (8014c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8014b6c:	695b      	ldr	r3, [r3, #20]
 8014b6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014b72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014b76:	d158      	bne.n	8014c2a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8014b78:	2303      	movs	r3, #3
 8014b7a:	e057      	b.n	8014c2c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8014b7c:	4b2e      	ldr	r3, [pc, #184]	; (8014c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8014b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014b82:	4a2d      	ldr	r2, [pc, #180]	; (8014c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8014b84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014b88:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8014b8c:	e04d      	b.n	8014c2a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014b94:	d141      	bne.n	8014c1a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8014b96:	4b28      	ldr	r3, [pc, #160]	; (8014c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8014b98:	681b      	ldr	r3, [r3, #0]
 8014b9a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8014b9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014ba2:	d131      	bne.n	8014c08 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8014ba4:	4b24      	ldr	r3, [pc, #144]	; (8014c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8014ba6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014baa:	4a23      	ldr	r2, [pc, #140]	; (8014c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8014bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014bb0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8014bb4:	4b20      	ldr	r3, [pc, #128]	; (8014c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8014bb6:	681b      	ldr	r3, [r3, #0]
 8014bb8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8014bbc:	4a1e      	ldr	r2, [pc, #120]	; (8014c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8014bbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8014bc2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8014bc4:	4b1d      	ldr	r3, [pc, #116]	; (8014c3c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8014bc6:	681b      	ldr	r3, [r3, #0]
 8014bc8:	2232      	movs	r2, #50	; 0x32
 8014bca:	fb02 f303 	mul.w	r3, r2, r3
 8014bce:	4a1c      	ldr	r2, [pc, #112]	; (8014c40 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8014bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8014bd4:	0c9b      	lsrs	r3, r3, #18
 8014bd6:	3301      	adds	r3, #1
 8014bd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8014bda:	e002      	b.n	8014be2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	3b01      	subs	r3, #1
 8014be0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8014be2:	4b15      	ldr	r3, [pc, #84]	; (8014c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8014be4:	695b      	ldr	r3, [r3, #20]
 8014be6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014bee:	d102      	bne.n	8014bf6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8014bf0:	68fb      	ldr	r3, [r7, #12]
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d1f2      	bne.n	8014bdc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8014bf6:	4b10      	ldr	r3, [pc, #64]	; (8014c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8014bf8:	695b      	ldr	r3, [r3, #20]
 8014bfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014c02:	d112      	bne.n	8014c2a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8014c04:	2303      	movs	r3, #3
 8014c06:	e011      	b.n	8014c2c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8014c08:	4b0b      	ldr	r3, [pc, #44]	; (8014c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8014c0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c0e:	4a0a      	ldr	r2, [pc, #40]	; (8014c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8014c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014c14:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8014c18:	e007      	b.n	8014c2a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8014c1a:	4b07      	ldr	r3, [pc, #28]	; (8014c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8014c22:	4a05      	ldr	r2, [pc, #20]	; (8014c38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8014c24:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8014c28:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8014c2a:	2300      	movs	r3, #0
}
 8014c2c:	4618      	mov	r0, r3
 8014c2e:	3714      	adds	r7, #20
 8014c30:	46bd      	mov	sp, r7
 8014c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c36:	4770      	bx	lr
 8014c38:	40007000 	.word	0x40007000
 8014c3c:	20000004 	.word	0x20000004
 8014c40:	431bde83 	.word	0x431bde83

08014c44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8014c44:	b580      	push	{r7, lr}
 8014c46:	b088      	sub	sp, #32
 8014c48:	af00      	add	r7, sp, #0
 8014c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d101      	bne.n	8014c56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8014c52:	2301      	movs	r3, #1
 8014c54:	e306      	b.n	8015264 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	681b      	ldr	r3, [r3, #0]
 8014c5a:	f003 0301 	and.w	r3, r3, #1
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d075      	beq.n	8014d4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014c62:	4b97      	ldr	r3, [pc, #604]	; (8014ec0 <HAL_RCC_OscConfig+0x27c>)
 8014c64:	689b      	ldr	r3, [r3, #8]
 8014c66:	f003 030c 	and.w	r3, r3, #12
 8014c6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8014c6c:	4b94      	ldr	r3, [pc, #592]	; (8014ec0 <HAL_RCC_OscConfig+0x27c>)
 8014c6e:	68db      	ldr	r3, [r3, #12]
 8014c70:	f003 0303 	and.w	r3, r3, #3
 8014c74:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8014c76:	69bb      	ldr	r3, [r7, #24]
 8014c78:	2b0c      	cmp	r3, #12
 8014c7a:	d102      	bne.n	8014c82 <HAL_RCC_OscConfig+0x3e>
 8014c7c:	697b      	ldr	r3, [r7, #20]
 8014c7e:	2b03      	cmp	r3, #3
 8014c80:	d002      	beq.n	8014c88 <HAL_RCC_OscConfig+0x44>
 8014c82:	69bb      	ldr	r3, [r7, #24]
 8014c84:	2b08      	cmp	r3, #8
 8014c86:	d10b      	bne.n	8014ca0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014c88:	4b8d      	ldr	r3, [pc, #564]	; (8014ec0 <HAL_RCC_OscConfig+0x27c>)
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d05b      	beq.n	8014d4c <HAL_RCC_OscConfig+0x108>
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	685b      	ldr	r3, [r3, #4]
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d157      	bne.n	8014d4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8014c9c:	2301      	movs	r3, #1
 8014c9e:	e2e1      	b.n	8015264 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	685b      	ldr	r3, [r3, #4]
 8014ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014ca8:	d106      	bne.n	8014cb8 <HAL_RCC_OscConfig+0x74>
 8014caa:	4b85      	ldr	r3, [pc, #532]	; (8014ec0 <HAL_RCC_OscConfig+0x27c>)
 8014cac:	681b      	ldr	r3, [r3, #0]
 8014cae:	4a84      	ldr	r2, [pc, #528]	; (8014ec0 <HAL_RCC_OscConfig+0x27c>)
 8014cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014cb4:	6013      	str	r3, [r2, #0]
 8014cb6:	e01d      	b.n	8014cf4 <HAL_RCC_OscConfig+0xb0>
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	685b      	ldr	r3, [r3, #4]
 8014cbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8014cc0:	d10c      	bne.n	8014cdc <HAL_RCC_OscConfig+0x98>
 8014cc2:	4b7f      	ldr	r3, [pc, #508]	; (8014ec0 <HAL_RCC_OscConfig+0x27c>)
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	4a7e      	ldr	r2, [pc, #504]	; (8014ec0 <HAL_RCC_OscConfig+0x27c>)
 8014cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8014ccc:	6013      	str	r3, [r2, #0]
 8014cce:	4b7c      	ldr	r3, [pc, #496]	; (8014ec0 <HAL_RCC_OscConfig+0x27c>)
 8014cd0:	681b      	ldr	r3, [r3, #0]
 8014cd2:	4a7b      	ldr	r2, [pc, #492]	; (8014ec0 <HAL_RCC_OscConfig+0x27c>)
 8014cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014cd8:	6013      	str	r3, [r2, #0]
 8014cda:	e00b      	b.n	8014cf4 <HAL_RCC_OscConfig+0xb0>
 8014cdc:	4b78      	ldr	r3, [pc, #480]	; (8014ec0 <HAL_RCC_OscConfig+0x27c>)
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	4a77      	ldr	r2, [pc, #476]	; (8014ec0 <HAL_RCC_OscConfig+0x27c>)
 8014ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8014ce6:	6013      	str	r3, [r2, #0]
 8014ce8:	4b75      	ldr	r3, [pc, #468]	; (8014ec0 <HAL_RCC_OscConfig+0x27c>)
 8014cea:	681b      	ldr	r3, [r3, #0]
 8014cec:	4a74      	ldr	r2, [pc, #464]	; (8014ec0 <HAL_RCC_OscConfig+0x27c>)
 8014cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8014cf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	685b      	ldr	r3, [r3, #4]
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d013      	beq.n	8014d24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014cfc:	f7fd f8e0 	bl	8011ec0 <HAL_GetTick>
 8014d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8014d02:	e008      	b.n	8014d16 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8014d04:	f7fd f8dc 	bl	8011ec0 <HAL_GetTick>
 8014d08:	4602      	mov	r2, r0
 8014d0a:	693b      	ldr	r3, [r7, #16]
 8014d0c:	1ad3      	subs	r3, r2, r3
 8014d0e:	2b64      	cmp	r3, #100	; 0x64
 8014d10:	d901      	bls.n	8014d16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8014d12:	2303      	movs	r3, #3
 8014d14:	e2a6      	b.n	8015264 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8014d16:	4b6a      	ldr	r3, [pc, #424]	; (8014ec0 <HAL_RCC_OscConfig+0x27c>)
 8014d18:	681b      	ldr	r3, [r3, #0]
 8014d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d0f0      	beq.n	8014d04 <HAL_RCC_OscConfig+0xc0>
 8014d22:	e014      	b.n	8014d4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014d24:	f7fd f8cc 	bl	8011ec0 <HAL_GetTick>
 8014d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8014d2a:	e008      	b.n	8014d3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8014d2c:	f7fd f8c8 	bl	8011ec0 <HAL_GetTick>
 8014d30:	4602      	mov	r2, r0
 8014d32:	693b      	ldr	r3, [r7, #16]
 8014d34:	1ad3      	subs	r3, r2, r3
 8014d36:	2b64      	cmp	r3, #100	; 0x64
 8014d38:	d901      	bls.n	8014d3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8014d3a:	2303      	movs	r3, #3
 8014d3c:	e292      	b.n	8015264 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8014d3e:	4b60      	ldr	r3, [pc, #384]	; (8014ec0 <HAL_RCC_OscConfig+0x27c>)
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d1f0      	bne.n	8014d2c <HAL_RCC_OscConfig+0xe8>
 8014d4a:	e000      	b.n	8014d4e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	681b      	ldr	r3, [r3, #0]
 8014d52:	f003 0302 	and.w	r3, r3, #2
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d075      	beq.n	8014e46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014d5a:	4b59      	ldr	r3, [pc, #356]	; (8014ec0 <HAL_RCC_OscConfig+0x27c>)
 8014d5c:	689b      	ldr	r3, [r3, #8]
 8014d5e:	f003 030c 	and.w	r3, r3, #12
 8014d62:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8014d64:	4b56      	ldr	r3, [pc, #344]	; (8014ec0 <HAL_RCC_OscConfig+0x27c>)
 8014d66:	68db      	ldr	r3, [r3, #12]
 8014d68:	f003 0303 	and.w	r3, r3, #3
 8014d6c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8014d6e:	69bb      	ldr	r3, [r7, #24]
 8014d70:	2b0c      	cmp	r3, #12
 8014d72:	d102      	bne.n	8014d7a <HAL_RCC_OscConfig+0x136>
 8014d74:	697b      	ldr	r3, [r7, #20]
 8014d76:	2b02      	cmp	r3, #2
 8014d78:	d002      	beq.n	8014d80 <HAL_RCC_OscConfig+0x13c>
 8014d7a:	69bb      	ldr	r3, [r7, #24]
 8014d7c:	2b04      	cmp	r3, #4
 8014d7e:	d11f      	bne.n	8014dc0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8014d80:	4b4f      	ldr	r3, [pc, #316]	; (8014ec0 <HAL_RCC_OscConfig+0x27c>)
 8014d82:	681b      	ldr	r3, [r3, #0]
 8014d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d005      	beq.n	8014d98 <HAL_RCC_OscConfig+0x154>
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	68db      	ldr	r3, [r3, #12]
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d101      	bne.n	8014d98 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8014d94:	2301      	movs	r3, #1
 8014d96:	e265      	b.n	8015264 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014d98:	4b49      	ldr	r3, [pc, #292]	; (8014ec0 <HAL_RCC_OscConfig+0x27c>)
 8014d9a:	685b      	ldr	r3, [r3, #4]
 8014d9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	691b      	ldr	r3, [r3, #16]
 8014da4:	061b      	lsls	r3, r3, #24
 8014da6:	4946      	ldr	r1, [pc, #280]	; (8014ec0 <HAL_RCC_OscConfig+0x27c>)
 8014da8:	4313      	orrs	r3, r2
 8014daa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8014dac:	4b45      	ldr	r3, [pc, #276]	; (8014ec4 <HAL_RCC_OscConfig+0x280>)
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	4618      	mov	r0, r3
 8014db2:	f7fc fc01 	bl	80115b8 <HAL_InitTick>
 8014db6:	4603      	mov	r3, r0
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d043      	beq.n	8014e44 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8014dbc:	2301      	movs	r3, #1
 8014dbe:	e251      	b.n	8015264 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	68db      	ldr	r3, [r3, #12]
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d023      	beq.n	8014e10 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8014dc8:	4b3d      	ldr	r3, [pc, #244]	; (8014ec0 <HAL_RCC_OscConfig+0x27c>)
 8014dca:	681b      	ldr	r3, [r3, #0]
 8014dcc:	4a3c      	ldr	r2, [pc, #240]	; (8014ec0 <HAL_RCC_OscConfig+0x27c>)
 8014dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014dd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014dd4:	f7fd f874 	bl	8011ec0 <HAL_GetTick>
 8014dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8014dda:	e008      	b.n	8014dee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8014ddc:	f7fd f870 	bl	8011ec0 <HAL_GetTick>
 8014de0:	4602      	mov	r2, r0
 8014de2:	693b      	ldr	r3, [r7, #16]
 8014de4:	1ad3      	subs	r3, r2, r3
 8014de6:	2b02      	cmp	r3, #2
 8014de8:	d901      	bls.n	8014dee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8014dea:	2303      	movs	r3, #3
 8014dec:	e23a      	b.n	8015264 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8014dee:	4b34      	ldr	r3, [pc, #208]	; (8014ec0 <HAL_RCC_OscConfig+0x27c>)
 8014df0:	681b      	ldr	r3, [r3, #0]
 8014df2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d0f0      	beq.n	8014ddc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014dfa:	4b31      	ldr	r3, [pc, #196]	; (8014ec0 <HAL_RCC_OscConfig+0x27c>)
 8014dfc:	685b      	ldr	r3, [r3, #4]
 8014dfe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	691b      	ldr	r3, [r3, #16]
 8014e06:	061b      	lsls	r3, r3, #24
 8014e08:	492d      	ldr	r1, [pc, #180]	; (8014ec0 <HAL_RCC_OscConfig+0x27c>)
 8014e0a:	4313      	orrs	r3, r2
 8014e0c:	604b      	str	r3, [r1, #4]
 8014e0e:	e01a      	b.n	8014e46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8014e10:	4b2b      	ldr	r3, [pc, #172]	; (8014ec0 <HAL_RCC_OscConfig+0x27c>)
 8014e12:	681b      	ldr	r3, [r3, #0]
 8014e14:	4a2a      	ldr	r2, [pc, #168]	; (8014ec0 <HAL_RCC_OscConfig+0x27c>)
 8014e16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014e1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014e1c:	f7fd f850 	bl	8011ec0 <HAL_GetTick>
 8014e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8014e22:	e008      	b.n	8014e36 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8014e24:	f7fd f84c 	bl	8011ec0 <HAL_GetTick>
 8014e28:	4602      	mov	r2, r0
 8014e2a:	693b      	ldr	r3, [r7, #16]
 8014e2c:	1ad3      	subs	r3, r2, r3
 8014e2e:	2b02      	cmp	r3, #2
 8014e30:	d901      	bls.n	8014e36 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8014e32:	2303      	movs	r3, #3
 8014e34:	e216      	b.n	8015264 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8014e36:	4b22      	ldr	r3, [pc, #136]	; (8014ec0 <HAL_RCC_OscConfig+0x27c>)
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	d1f0      	bne.n	8014e24 <HAL_RCC_OscConfig+0x1e0>
 8014e42:	e000      	b.n	8014e46 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8014e44:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	681b      	ldr	r3, [r3, #0]
 8014e4a:	f003 0308 	and.w	r3, r3, #8
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d041      	beq.n	8014ed6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	695b      	ldr	r3, [r3, #20]
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d01c      	beq.n	8014e94 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8014e5a:	4b19      	ldr	r3, [pc, #100]	; (8014ec0 <HAL_RCC_OscConfig+0x27c>)
 8014e5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014e60:	4a17      	ldr	r2, [pc, #92]	; (8014ec0 <HAL_RCC_OscConfig+0x27c>)
 8014e62:	f043 0301 	orr.w	r3, r3, #1
 8014e66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014e6a:	f7fd f829 	bl	8011ec0 <HAL_GetTick>
 8014e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8014e70:	e008      	b.n	8014e84 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8014e72:	f7fd f825 	bl	8011ec0 <HAL_GetTick>
 8014e76:	4602      	mov	r2, r0
 8014e78:	693b      	ldr	r3, [r7, #16]
 8014e7a:	1ad3      	subs	r3, r2, r3
 8014e7c:	2b02      	cmp	r3, #2
 8014e7e:	d901      	bls.n	8014e84 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8014e80:	2303      	movs	r3, #3
 8014e82:	e1ef      	b.n	8015264 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8014e84:	4b0e      	ldr	r3, [pc, #56]	; (8014ec0 <HAL_RCC_OscConfig+0x27c>)
 8014e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014e8a:	f003 0302 	and.w	r3, r3, #2
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d0ef      	beq.n	8014e72 <HAL_RCC_OscConfig+0x22e>
 8014e92:	e020      	b.n	8014ed6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8014e94:	4b0a      	ldr	r3, [pc, #40]	; (8014ec0 <HAL_RCC_OscConfig+0x27c>)
 8014e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014e9a:	4a09      	ldr	r2, [pc, #36]	; (8014ec0 <HAL_RCC_OscConfig+0x27c>)
 8014e9c:	f023 0301 	bic.w	r3, r3, #1
 8014ea0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014ea4:	f7fd f80c 	bl	8011ec0 <HAL_GetTick>
 8014ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8014eaa:	e00d      	b.n	8014ec8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8014eac:	f7fd f808 	bl	8011ec0 <HAL_GetTick>
 8014eb0:	4602      	mov	r2, r0
 8014eb2:	693b      	ldr	r3, [r7, #16]
 8014eb4:	1ad3      	subs	r3, r2, r3
 8014eb6:	2b02      	cmp	r3, #2
 8014eb8:	d906      	bls.n	8014ec8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8014eba:	2303      	movs	r3, #3
 8014ebc:	e1d2      	b.n	8015264 <HAL_RCC_OscConfig+0x620>
 8014ebe:	bf00      	nop
 8014ec0:	40021000 	.word	0x40021000
 8014ec4:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8014ec8:	4b8c      	ldr	r3, [pc, #560]	; (80150fc <HAL_RCC_OscConfig+0x4b8>)
 8014eca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014ece:	f003 0302 	and.w	r3, r3, #2
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d1ea      	bne.n	8014eac <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	681b      	ldr	r3, [r3, #0]
 8014eda:	f003 0304 	and.w	r3, r3, #4
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	f000 80a6 	beq.w	8015030 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8014ee4:	2300      	movs	r3, #0
 8014ee6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8014ee8:	4b84      	ldr	r3, [pc, #528]	; (80150fc <HAL_RCC_OscConfig+0x4b8>)
 8014eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d101      	bne.n	8014ef8 <HAL_RCC_OscConfig+0x2b4>
 8014ef4:	2301      	movs	r3, #1
 8014ef6:	e000      	b.n	8014efa <HAL_RCC_OscConfig+0x2b6>
 8014ef8:	2300      	movs	r3, #0
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d00d      	beq.n	8014f1a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8014efe:	4b7f      	ldr	r3, [pc, #508]	; (80150fc <HAL_RCC_OscConfig+0x4b8>)
 8014f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014f02:	4a7e      	ldr	r2, [pc, #504]	; (80150fc <HAL_RCC_OscConfig+0x4b8>)
 8014f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014f08:	6593      	str	r3, [r2, #88]	; 0x58
 8014f0a:	4b7c      	ldr	r3, [pc, #496]	; (80150fc <HAL_RCC_OscConfig+0x4b8>)
 8014f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014f12:	60fb      	str	r3, [r7, #12]
 8014f14:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8014f16:	2301      	movs	r3, #1
 8014f18:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8014f1a:	4b79      	ldr	r3, [pc, #484]	; (8015100 <HAL_RCC_OscConfig+0x4bc>)
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d118      	bne.n	8014f58 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8014f26:	4b76      	ldr	r3, [pc, #472]	; (8015100 <HAL_RCC_OscConfig+0x4bc>)
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	4a75      	ldr	r2, [pc, #468]	; (8015100 <HAL_RCC_OscConfig+0x4bc>)
 8014f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014f30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8014f32:	f7fc ffc5 	bl	8011ec0 <HAL_GetTick>
 8014f36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8014f38:	e008      	b.n	8014f4c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8014f3a:	f7fc ffc1 	bl	8011ec0 <HAL_GetTick>
 8014f3e:	4602      	mov	r2, r0
 8014f40:	693b      	ldr	r3, [r7, #16]
 8014f42:	1ad3      	subs	r3, r2, r3
 8014f44:	2b02      	cmp	r3, #2
 8014f46:	d901      	bls.n	8014f4c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8014f48:	2303      	movs	r3, #3
 8014f4a:	e18b      	b.n	8015264 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8014f4c:	4b6c      	ldr	r3, [pc, #432]	; (8015100 <HAL_RCC_OscConfig+0x4bc>)
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d0f0      	beq.n	8014f3a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	689b      	ldr	r3, [r3, #8]
 8014f5c:	2b01      	cmp	r3, #1
 8014f5e:	d108      	bne.n	8014f72 <HAL_RCC_OscConfig+0x32e>
 8014f60:	4b66      	ldr	r3, [pc, #408]	; (80150fc <HAL_RCC_OscConfig+0x4b8>)
 8014f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014f66:	4a65      	ldr	r2, [pc, #404]	; (80150fc <HAL_RCC_OscConfig+0x4b8>)
 8014f68:	f043 0301 	orr.w	r3, r3, #1
 8014f6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8014f70:	e024      	b.n	8014fbc <HAL_RCC_OscConfig+0x378>
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	689b      	ldr	r3, [r3, #8]
 8014f76:	2b05      	cmp	r3, #5
 8014f78:	d110      	bne.n	8014f9c <HAL_RCC_OscConfig+0x358>
 8014f7a:	4b60      	ldr	r3, [pc, #384]	; (80150fc <HAL_RCC_OscConfig+0x4b8>)
 8014f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014f80:	4a5e      	ldr	r2, [pc, #376]	; (80150fc <HAL_RCC_OscConfig+0x4b8>)
 8014f82:	f043 0304 	orr.w	r3, r3, #4
 8014f86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8014f8a:	4b5c      	ldr	r3, [pc, #368]	; (80150fc <HAL_RCC_OscConfig+0x4b8>)
 8014f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014f90:	4a5a      	ldr	r2, [pc, #360]	; (80150fc <HAL_RCC_OscConfig+0x4b8>)
 8014f92:	f043 0301 	orr.w	r3, r3, #1
 8014f96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8014f9a:	e00f      	b.n	8014fbc <HAL_RCC_OscConfig+0x378>
 8014f9c:	4b57      	ldr	r3, [pc, #348]	; (80150fc <HAL_RCC_OscConfig+0x4b8>)
 8014f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014fa2:	4a56      	ldr	r2, [pc, #344]	; (80150fc <HAL_RCC_OscConfig+0x4b8>)
 8014fa4:	f023 0301 	bic.w	r3, r3, #1
 8014fa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8014fac:	4b53      	ldr	r3, [pc, #332]	; (80150fc <HAL_RCC_OscConfig+0x4b8>)
 8014fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014fb2:	4a52      	ldr	r2, [pc, #328]	; (80150fc <HAL_RCC_OscConfig+0x4b8>)
 8014fb4:	f023 0304 	bic.w	r3, r3, #4
 8014fb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	689b      	ldr	r3, [r3, #8]
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d016      	beq.n	8014ff2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014fc4:	f7fc ff7c 	bl	8011ec0 <HAL_GetTick>
 8014fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8014fca:	e00a      	b.n	8014fe2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8014fcc:	f7fc ff78 	bl	8011ec0 <HAL_GetTick>
 8014fd0:	4602      	mov	r2, r0
 8014fd2:	693b      	ldr	r3, [r7, #16]
 8014fd4:	1ad3      	subs	r3, r2, r3
 8014fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8014fda:	4293      	cmp	r3, r2
 8014fdc:	d901      	bls.n	8014fe2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8014fde:	2303      	movs	r3, #3
 8014fe0:	e140      	b.n	8015264 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8014fe2:	4b46      	ldr	r3, [pc, #280]	; (80150fc <HAL_RCC_OscConfig+0x4b8>)
 8014fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014fe8:	f003 0302 	and.w	r3, r3, #2
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d0ed      	beq.n	8014fcc <HAL_RCC_OscConfig+0x388>
 8014ff0:	e015      	b.n	801501e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014ff2:	f7fc ff65 	bl	8011ec0 <HAL_GetTick>
 8014ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8014ff8:	e00a      	b.n	8015010 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8014ffa:	f7fc ff61 	bl	8011ec0 <HAL_GetTick>
 8014ffe:	4602      	mov	r2, r0
 8015000:	693b      	ldr	r3, [r7, #16]
 8015002:	1ad3      	subs	r3, r2, r3
 8015004:	f241 3288 	movw	r2, #5000	; 0x1388
 8015008:	4293      	cmp	r3, r2
 801500a:	d901      	bls.n	8015010 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 801500c:	2303      	movs	r3, #3
 801500e:	e129      	b.n	8015264 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8015010:	4b3a      	ldr	r3, [pc, #232]	; (80150fc <HAL_RCC_OscConfig+0x4b8>)
 8015012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015016:	f003 0302 	and.w	r3, r3, #2
 801501a:	2b00      	cmp	r3, #0
 801501c:	d1ed      	bne.n	8014ffa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801501e:	7ffb      	ldrb	r3, [r7, #31]
 8015020:	2b01      	cmp	r3, #1
 8015022:	d105      	bne.n	8015030 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8015024:	4b35      	ldr	r3, [pc, #212]	; (80150fc <HAL_RCC_OscConfig+0x4b8>)
 8015026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015028:	4a34      	ldr	r2, [pc, #208]	; (80150fc <HAL_RCC_OscConfig+0x4b8>)
 801502a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801502e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	681b      	ldr	r3, [r3, #0]
 8015034:	f003 0320 	and.w	r3, r3, #32
 8015038:	2b00      	cmp	r3, #0
 801503a:	d03c      	beq.n	80150b6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	699b      	ldr	r3, [r3, #24]
 8015040:	2b00      	cmp	r3, #0
 8015042:	d01c      	beq.n	801507e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8015044:	4b2d      	ldr	r3, [pc, #180]	; (80150fc <HAL_RCC_OscConfig+0x4b8>)
 8015046:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801504a:	4a2c      	ldr	r2, [pc, #176]	; (80150fc <HAL_RCC_OscConfig+0x4b8>)
 801504c:	f043 0301 	orr.w	r3, r3, #1
 8015050:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015054:	f7fc ff34 	bl	8011ec0 <HAL_GetTick>
 8015058:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801505a:	e008      	b.n	801506e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801505c:	f7fc ff30 	bl	8011ec0 <HAL_GetTick>
 8015060:	4602      	mov	r2, r0
 8015062:	693b      	ldr	r3, [r7, #16]
 8015064:	1ad3      	subs	r3, r2, r3
 8015066:	2b02      	cmp	r3, #2
 8015068:	d901      	bls.n	801506e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 801506a:	2303      	movs	r3, #3
 801506c:	e0fa      	b.n	8015264 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801506e:	4b23      	ldr	r3, [pc, #140]	; (80150fc <HAL_RCC_OscConfig+0x4b8>)
 8015070:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015074:	f003 0302 	and.w	r3, r3, #2
 8015078:	2b00      	cmp	r3, #0
 801507a:	d0ef      	beq.n	801505c <HAL_RCC_OscConfig+0x418>
 801507c:	e01b      	b.n	80150b6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801507e:	4b1f      	ldr	r3, [pc, #124]	; (80150fc <HAL_RCC_OscConfig+0x4b8>)
 8015080:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015084:	4a1d      	ldr	r2, [pc, #116]	; (80150fc <HAL_RCC_OscConfig+0x4b8>)
 8015086:	f023 0301 	bic.w	r3, r3, #1
 801508a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801508e:	f7fc ff17 	bl	8011ec0 <HAL_GetTick>
 8015092:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8015094:	e008      	b.n	80150a8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8015096:	f7fc ff13 	bl	8011ec0 <HAL_GetTick>
 801509a:	4602      	mov	r2, r0
 801509c:	693b      	ldr	r3, [r7, #16]
 801509e:	1ad3      	subs	r3, r2, r3
 80150a0:	2b02      	cmp	r3, #2
 80150a2:	d901      	bls.n	80150a8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80150a4:	2303      	movs	r3, #3
 80150a6:	e0dd      	b.n	8015264 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80150a8:	4b14      	ldr	r3, [pc, #80]	; (80150fc <HAL_RCC_OscConfig+0x4b8>)
 80150aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80150ae:	f003 0302 	and.w	r3, r3, #2
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d1ef      	bne.n	8015096 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	69db      	ldr	r3, [r3, #28]
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	f000 80d1 	beq.w	8015262 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80150c0:	4b0e      	ldr	r3, [pc, #56]	; (80150fc <HAL_RCC_OscConfig+0x4b8>)
 80150c2:	689b      	ldr	r3, [r3, #8]
 80150c4:	f003 030c 	and.w	r3, r3, #12
 80150c8:	2b0c      	cmp	r3, #12
 80150ca:	f000 808b 	beq.w	80151e4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	69db      	ldr	r3, [r3, #28]
 80150d2:	2b02      	cmp	r3, #2
 80150d4:	d15e      	bne.n	8015194 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80150d6:	4b09      	ldr	r3, [pc, #36]	; (80150fc <HAL_RCC_OscConfig+0x4b8>)
 80150d8:	681b      	ldr	r3, [r3, #0]
 80150da:	4a08      	ldr	r2, [pc, #32]	; (80150fc <HAL_RCC_OscConfig+0x4b8>)
 80150dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80150e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80150e2:	f7fc feed 	bl	8011ec0 <HAL_GetTick>
 80150e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80150e8:	e00c      	b.n	8015104 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80150ea:	f7fc fee9 	bl	8011ec0 <HAL_GetTick>
 80150ee:	4602      	mov	r2, r0
 80150f0:	693b      	ldr	r3, [r7, #16]
 80150f2:	1ad3      	subs	r3, r2, r3
 80150f4:	2b02      	cmp	r3, #2
 80150f6:	d905      	bls.n	8015104 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80150f8:	2303      	movs	r3, #3
 80150fa:	e0b3      	b.n	8015264 <HAL_RCC_OscConfig+0x620>
 80150fc:	40021000 	.word	0x40021000
 8015100:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8015104:	4b59      	ldr	r3, [pc, #356]	; (801526c <HAL_RCC_OscConfig+0x628>)
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801510c:	2b00      	cmp	r3, #0
 801510e:	d1ec      	bne.n	80150ea <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8015110:	4b56      	ldr	r3, [pc, #344]	; (801526c <HAL_RCC_OscConfig+0x628>)
 8015112:	68da      	ldr	r2, [r3, #12]
 8015114:	4b56      	ldr	r3, [pc, #344]	; (8015270 <HAL_RCC_OscConfig+0x62c>)
 8015116:	4013      	ands	r3, r2
 8015118:	687a      	ldr	r2, [r7, #4]
 801511a:	6a11      	ldr	r1, [r2, #32]
 801511c:	687a      	ldr	r2, [r7, #4]
 801511e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8015120:	3a01      	subs	r2, #1
 8015122:	0112      	lsls	r2, r2, #4
 8015124:	4311      	orrs	r1, r2
 8015126:	687a      	ldr	r2, [r7, #4]
 8015128:	6a92      	ldr	r2, [r2, #40]	; 0x28
 801512a:	0212      	lsls	r2, r2, #8
 801512c:	4311      	orrs	r1, r2
 801512e:	687a      	ldr	r2, [r7, #4]
 8015130:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8015132:	0852      	lsrs	r2, r2, #1
 8015134:	3a01      	subs	r2, #1
 8015136:	0552      	lsls	r2, r2, #21
 8015138:	4311      	orrs	r1, r2
 801513a:	687a      	ldr	r2, [r7, #4]
 801513c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801513e:	0852      	lsrs	r2, r2, #1
 8015140:	3a01      	subs	r2, #1
 8015142:	0652      	lsls	r2, r2, #25
 8015144:	4311      	orrs	r1, r2
 8015146:	687a      	ldr	r2, [r7, #4]
 8015148:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801514a:	06d2      	lsls	r2, r2, #27
 801514c:	430a      	orrs	r2, r1
 801514e:	4947      	ldr	r1, [pc, #284]	; (801526c <HAL_RCC_OscConfig+0x628>)
 8015150:	4313      	orrs	r3, r2
 8015152:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8015154:	4b45      	ldr	r3, [pc, #276]	; (801526c <HAL_RCC_OscConfig+0x628>)
 8015156:	681b      	ldr	r3, [r3, #0]
 8015158:	4a44      	ldr	r2, [pc, #272]	; (801526c <HAL_RCC_OscConfig+0x628>)
 801515a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801515e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8015160:	4b42      	ldr	r3, [pc, #264]	; (801526c <HAL_RCC_OscConfig+0x628>)
 8015162:	68db      	ldr	r3, [r3, #12]
 8015164:	4a41      	ldr	r2, [pc, #260]	; (801526c <HAL_RCC_OscConfig+0x628>)
 8015166:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801516a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801516c:	f7fc fea8 	bl	8011ec0 <HAL_GetTick>
 8015170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8015172:	e008      	b.n	8015186 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8015174:	f7fc fea4 	bl	8011ec0 <HAL_GetTick>
 8015178:	4602      	mov	r2, r0
 801517a:	693b      	ldr	r3, [r7, #16]
 801517c:	1ad3      	subs	r3, r2, r3
 801517e:	2b02      	cmp	r3, #2
 8015180:	d901      	bls.n	8015186 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8015182:	2303      	movs	r3, #3
 8015184:	e06e      	b.n	8015264 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8015186:	4b39      	ldr	r3, [pc, #228]	; (801526c <HAL_RCC_OscConfig+0x628>)
 8015188:	681b      	ldr	r3, [r3, #0]
 801518a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801518e:	2b00      	cmp	r3, #0
 8015190:	d0f0      	beq.n	8015174 <HAL_RCC_OscConfig+0x530>
 8015192:	e066      	b.n	8015262 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8015194:	4b35      	ldr	r3, [pc, #212]	; (801526c <HAL_RCC_OscConfig+0x628>)
 8015196:	681b      	ldr	r3, [r3, #0]
 8015198:	4a34      	ldr	r2, [pc, #208]	; (801526c <HAL_RCC_OscConfig+0x628>)
 801519a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801519e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80151a0:	4b32      	ldr	r3, [pc, #200]	; (801526c <HAL_RCC_OscConfig+0x628>)
 80151a2:	68db      	ldr	r3, [r3, #12]
 80151a4:	4a31      	ldr	r2, [pc, #196]	; (801526c <HAL_RCC_OscConfig+0x628>)
 80151a6:	f023 0303 	bic.w	r3, r3, #3
 80151aa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80151ac:	4b2f      	ldr	r3, [pc, #188]	; (801526c <HAL_RCC_OscConfig+0x628>)
 80151ae:	68db      	ldr	r3, [r3, #12]
 80151b0:	4a2e      	ldr	r2, [pc, #184]	; (801526c <HAL_RCC_OscConfig+0x628>)
 80151b2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80151b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80151ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80151bc:	f7fc fe80 	bl	8011ec0 <HAL_GetTick>
 80151c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80151c2:	e008      	b.n	80151d6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80151c4:	f7fc fe7c 	bl	8011ec0 <HAL_GetTick>
 80151c8:	4602      	mov	r2, r0
 80151ca:	693b      	ldr	r3, [r7, #16]
 80151cc:	1ad3      	subs	r3, r2, r3
 80151ce:	2b02      	cmp	r3, #2
 80151d0:	d901      	bls.n	80151d6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80151d2:	2303      	movs	r3, #3
 80151d4:	e046      	b.n	8015264 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80151d6:	4b25      	ldr	r3, [pc, #148]	; (801526c <HAL_RCC_OscConfig+0x628>)
 80151d8:	681b      	ldr	r3, [r3, #0]
 80151da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d1f0      	bne.n	80151c4 <HAL_RCC_OscConfig+0x580>
 80151e2:	e03e      	b.n	8015262 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	69db      	ldr	r3, [r3, #28]
 80151e8:	2b01      	cmp	r3, #1
 80151ea:	d101      	bne.n	80151f0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80151ec:	2301      	movs	r3, #1
 80151ee:	e039      	b.n	8015264 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80151f0:	4b1e      	ldr	r3, [pc, #120]	; (801526c <HAL_RCC_OscConfig+0x628>)
 80151f2:	68db      	ldr	r3, [r3, #12]
 80151f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80151f6:	697b      	ldr	r3, [r7, #20]
 80151f8:	f003 0203 	and.w	r2, r3, #3
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	6a1b      	ldr	r3, [r3, #32]
 8015200:	429a      	cmp	r2, r3
 8015202:	d12c      	bne.n	801525e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8015204:	697b      	ldr	r3, [r7, #20]
 8015206:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801520e:	3b01      	subs	r3, #1
 8015210:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8015212:	429a      	cmp	r2, r3
 8015214:	d123      	bne.n	801525e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8015216:	697b      	ldr	r3, [r7, #20]
 8015218:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015220:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8015222:	429a      	cmp	r2, r3
 8015224:	d11b      	bne.n	801525e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8015226:	697b      	ldr	r3, [r7, #20]
 8015228:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015230:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8015232:	429a      	cmp	r2, r3
 8015234:	d113      	bne.n	801525e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8015236:	697b      	ldr	r3, [r7, #20]
 8015238:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015240:	085b      	lsrs	r3, r3, #1
 8015242:	3b01      	subs	r3, #1
 8015244:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8015246:	429a      	cmp	r2, r3
 8015248:	d109      	bne.n	801525e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 801524a:	697b      	ldr	r3, [r7, #20]
 801524c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015254:	085b      	lsrs	r3, r3, #1
 8015256:	3b01      	subs	r3, #1
 8015258:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801525a:	429a      	cmp	r2, r3
 801525c:	d001      	beq.n	8015262 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 801525e:	2301      	movs	r3, #1
 8015260:	e000      	b.n	8015264 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8015262:	2300      	movs	r3, #0
}
 8015264:	4618      	mov	r0, r3
 8015266:	3720      	adds	r7, #32
 8015268:	46bd      	mov	sp, r7
 801526a:	bd80      	pop	{r7, pc}
 801526c:	40021000 	.word	0x40021000
 8015270:	019f800c 	.word	0x019f800c

08015274 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8015274:	b580      	push	{r7, lr}
 8015276:	b086      	sub	sp, #24
 8015278:	af00      	add	r7, sp, #0
 801527a:	6078      	str	r0, [r7, #4]
 801527c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 801527e:	2300      	movs	r3, #0
 8015280:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	2b00      	cmp	r3, #0
 8015286:	d101      	bne.n	801528c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8015288:	2301      	movs	r3, #1
 801528a:	e11e      	b.n	80154ca <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801528c:	4b91      	ldr	r3, [pc, #580]	; (80154d4 <HAL_RCC_ClockConfig+0x260>)
 801528e:	681b      	ldr	r3, [r3, #0]
 8015290:	f003 030f 	and.w	r3, r3, #15
 8015294:	683a      	ldr	r2, [r7, #0]
 8015296:	429a      	cmp	r2, r3
 8015298:	d910      	bls.n	80152bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801529a:	4b8e      	ldr	r3, [pc, #568]	; (80154d4 <HAL_RCC_ClockConfig+0x260>)
 801529c:	681b      	ldr	r3, [r3, #0]
 801529e:	f023 020f 	bic.w	r2, r3, #15
 80152a2:	498c      	ldr	r1, [pc, #560]	; (80154d4 <HAL_RCC_ClockConfig+0x260>)
 80152a4:	683b      	ldr	r3, [r7, #0]
 80152a6:	4313      	orrs	r3, r2
 80152a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80152aa:	4b8a      	ldr	r3, [pc, #552]	; (80154d4 <HAL_RCC_ClockConfig+0x260>)
 80152ac:	681b      	ldr	r3, [r3, #0]
 80152ae:	f003 030f 	and.w	r3, r3, #15
 80152b2:	683a      	ldr	r2, [r7, #0]
 80152b4:	429a      	cmp	r2, r3
 80152b6:	d001      	beq.n	80152bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80152b8:	2301      	movs	r3, #1
 80152ba:	e106      	b.n	80154ca <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	681b      	ldr	r3, [r3, #0]
 80152c0:	f003 0301 	and.w	r3, r3, #1
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d073      	beq.n	80153b0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	685b      	ldr	r3, [r3, #4]
 80152cc:	2b03      	cmp	r3, #3
 80152ce:	d129      	bne.n	8015324 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80152d0:	4b81      	ldr	r3, [pc, #516]	; (80154d8 <HAL_RCC_ClockConfig+0x264>)
 80152d2:	681b      	ldr	r3, [r3, #0]
 80152d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80152d8:	2b00      	cmp	r3, #0
 80152da:	d101      	bne.n	80152e0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80152dc:	2301      	movs	r3, #1
 80152de:	e0f4      	b.n	80154ca <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80152e0:	f000 f9d0 	bl	8015684 <RCC_GetSysClockFreqFromPLLSource>
 80152e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80152e6:	693b      	ldr	r3, [r7, #16]
 80152e8:	4a7c      	ldr	r2, [pc, #496]	; (80154dc <HAL_RCC_ClockConfig+0x268>)
 80152ea:	4293      	cmp	r3, r2
 80152ec:	d93f      	bls.n	801536e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80152ee:	4b7a      	ldr	r3, [pc, #488]	; (80154d8 <HAL_RCC_ClockConfig+0x264>)
 80152f0:	689b      	ldr	r3, [r3, #8]
 80152f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d009      	beq.n	801530e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	681b      	ldr	r3, [r3, #0]
 80152fe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8015302:	2b00      	cmp	r3, #0
 8015304:	d033      	beq.n	801536e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 801530a:	2b00      	cmp	r3, #0
 801530c:	d12f      	bne.n	801536e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 801530e:	4b72      	ldr	r3, [pc, #456]	; (80154d8 <HAL_RCC_ClockConfig+0x264>)
 8015310:	689b      	ldr	r3, [r3, #8]
 8015312:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8015316:	4a70      	ldr	r2, [pc, #448]	; (80154d8 <HAL_RCC_ClockConfig+0x264>)
 8015318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801531c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 801531e:	2380      	movs	r3, #128	; 0x80
 8015320:	617b      	str	r3, [r7, #20]
 8015322:	e024      	b.n	801536e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	685b      	ldr	r3, [r3, #4]
 8015328:	2b02      	cmp	r3, #2
 801532a:	d107      	bne.n	801533c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801532c:	4b6a      	ldr	r3, [pc, #424]	; (80154d8 <HAL_RCC_ClockConfig+0x264>)
 801532e:	681b      	ldr	r3, [r3, #0]
 8015330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015334:	2b00      	cmp	r3, #0
 8015336:	d109      	bne.n	801534c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8015338:	2301      	movs	r3, #1
 801533a:	e0c6      	b.n	80154ca <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801533c:	4b66      	ldr	r3, [pc, #408]	; (80154d8 <HAL_RCC_ClockConfig+0x264>)
 801533e:	681b      	ldr	r3, [r3, #0]
 8015340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015344:	2b00      	cmp	r3, #0
 8015346:	d101      	bne.n	801534c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8015348:	2301      	movs	r3, #1
 801534a:	e0be      	b.n	80154ca <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 801534c:	f000 f8ce 	bl	80154ec <HAL_RCC_GetSysClockFreq>
 8015350:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8015352:	693b      	ldr	r3, [r7, #16]
 8015354:	4a61      	ldr	r2, [pc, #388]	; (80154dc <HAL_RCC_ClockConfig+0x268>)
 8015356:	4293      	cmp	r3, r2
 8015358:	d909      	bls.n	801536e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 801535a:	4b5f      	ldr	r3, [pc, #380]	; (80154d8 <HAL_RCC_ClockConfig+0x264>)
 801535c:	689b      	ldr	r3, [r3, #8]
 801535e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8015362:	4a5d      	ldr	r2, [pc, #372]	; (80154d8 <HAL_RCC_ClockConfig+0x264>)
 8015364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015368:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 801536a:	2380      	movs	r3, #128	; 0x80
 801536c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801536e:	4b5a      	ldr	r3, [pc, #360]	; (80154d8 <HAL_RCC_ClockConfig+0x264>)
 8015370:	689b      	ldr	r3, [r3, #8]
 8015372:	f023 0203 	bic.w	r2, r3, #3
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	685b      	ldr	r3, [r3, #4]
 801537a:	4957      	ldr	r1, [pc, #348]	; (80154d8 <HAL_RCC_ClockConfig+0x264>)
 801537c:	4313      	orrs	r3, r2
 801537e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8015380:	f7fc fd9e 	bl	8011ec0 <HAL_GetTick>
 8015384:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8015386:	e00a      	b.n	801539e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015388:	f7fc fd9a 	bl	8011ec0 <HAL_GetTick>
 801538c:	4602      	mov	r2, r0
 801538e:	68fb      	ldr	r3, [r7, #12]
 8015390:	1ad3      	subs	r3, r2, r3
 8015392:	f241 3288 	movw	r2, #5000	; 0x1388
 8015396:	4293      	cmp	r3, r2
 8015398:	d901      	bls.n	801539e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 801539a:	2303      	movs	r3, #3
 801539c:	e095      	b.n	80154ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801539e:	4b4e      	ldr	r3, [pc, #312]	; (80154d8 <HAL_RCC_ClockConfig+0x264>)
 80153a0:	689b      	ldr	r3, [r3, #8]
 80153a2:	f003 020c 	and.w	r2, r3, #12
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	685b      	ldr	r3, [r3, #4]
 80153aa:	009b      	lsls	r3, r3, #2
 80153ac:	429a      	cmp	r2, r3
 80153ae:	d1eb      	bne.n	8015388 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	681b      	ldr	r3, [r3, #0]
 80153b4:	f003 0302 	and.w	r3, r3, #2
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d023      	beq.n	8015404 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	681b      	ldr	r3, [r3, #0]
 80153c0:	f003 0304 	and.w	r3, r3, #4
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	d005      	beq.n	80153d4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80153c8:	4b43      	ldr	r3, [pc, #268]	; (80154d8 <HAL_RCC_ClockConfig+0x264>)
 80153ca:	689b      	ldr	r3, [r3, #8]
 80153cc:	4a42      	ldr	r2, [pc, #264]	; (80154d8 <HAL_RCC_ClockConfig+0x264>)
 80153ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80153d2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	f003 0308 	and.w	r3, r3, #8
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d007      	beq.n	80153f0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80153e0:	4b3d      	ldr	r3, [pc, #244]	; (80154d8 <HAL_RCC_ClockConfig+0x264>)
 80153e2:	689b      	ldr	r3, [r3, #8]
 80153e4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80153e8:	4a3b      	ldr	r2, [pc, #236]	; (80154d8 <HAL_RCC_ClockConfig+0x264>)
 80153ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80153ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80153f0:	4b39      	ldr	r3, [pc, #228]	; (80154d8 <HAL_RCC_ClockConfig+0x264>)
 80153f2:	689b      	ldr	r3, [r3, #8]
 80153f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	689b      	ldr	r3, [r3, #8]
 80153fc:	4936      	ldr	r1, [pc, #216]	; (80154d8 <HAL_RCC_ClockConfig+0x264>)
 80153fe:	4313      	orrs	r3, r2
 8015400:	608b      	str	r3, [r1, #8]
 8015402:	e008      	b.n	8015416 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8015404:	697b      	ldr	r3, [r7, #20]
 8015406:	2b80      	cmp	r3, #128	; 0x80
 8015408:	d105      	bne.n	8015416 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 801540a:	4b33      	ldr	r3, [pc, #204]	; (80154d8 <HAL_RCC_ClockConfig+0x264>)
 801540c:	689b      	ldr	r3, [r3, #8]
 801540e:	4a32      	ldr	r2, [pc, #200]	; (80154d8 <HAL_RCC_ClockConfig+0x264>)
 8015410:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8015414:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8015416:	4b2f      	ldr	r3, [pc, #188]	; (80154d4 <HAL_RCC_ClockConfig+0x260>)
 8015418:	681b      	ldr	r3, [r3, #0]
 801541a:	f003 030f 	and.w	r3, r3, #15
 801541e:	683a      	ldr	r2, [r7, #0]
 8015420:	429a      	cmp	r2, r3
 8015422:	d21d      	bcs.n	8015460 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8015424:	4b2b      	ldr	r3, [pc, #172]	; (80154d4 <HAL_RCC_ClockConfig+0x260>)
 8015426:	681b      	ldr	r3, [r3, #0]
 8015428:	f023 020f 	bic.w	r2, r3, #15
 801542c:	4929      	ldr	r1, [pc, #164]	; (80154d4 <HAL_RCC_ClockConfig+0x260>)
 801542e:	683b      	ldr	r3, [r7, #0]
 8015430:	4313      	orrs	r3, r2
 8015432:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8015434:	f7fc fd44 	bl	8011ec0 <HAL_GetTick>
 8015438:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801543a:	e00a      	b.n	8015452 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801543c:	f7fc fd40 	bl	8011ec0 <HAL_GetTick>
 8015440:	4602      	mov	r2, r0
 8015442:	68fb      	ldr	r3, [r7, #12]
 8015444:	1ad3      	subs	r3, r2, r3
 8015446:	f241 3288 	movw	r2, #5000	; 0x1388
 801544a:	4293      	cmp	r3, r2
 801544c:	d901      	bls.n	8015452 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 801544e:	2303      	movs	r3, #3
 8015450:	e03b      	b.n	80154ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8015452:	4b20      	ldr	r3, [pc, #128]	; (80154d4 <HAL_RCC_ClockConfig+0x260>)
 8015454:	681b      	ldr	r3, [r3, #0]
 8015456:	f003 030f 	and.w	r3, r3, #15
 801545a:	683a      	ldr	r2, [r7, #0]
 801545c:	429a      	cmp	r2, r3
 801545e:	d1ed      	bne.n	801543c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	681b      	ldr	r3, [r3, #0]
 8015464:	f003 0304 	and.w	r3, r3, #4
 8015468:	2b00      	cmp	r3, #0
 801546a:	d008      	beq.n	801547e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801546c:	4b1a      	ldr	r3, [pc, #104]	; (80154d8 <HAL_RCC_ClockConfig+0x264>)
 801546e:	689b      	ldr	r3, [r3, #8]
 8015470:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	68db      	ldr	r3, [r3, #12]
 8015478:	4917      	ldr	r1, [pc, #92]	; (80154d8 <HAL_RCC_ClockConfig+0x264>)
 801547a:	4313      	orrs	r3, r2
 801547c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	681b      	ldr	r3, [r3, #0]
 8015482:	f003 0308 	and.w	r3, r3, #8
 8015486:	2b00      	cmp	r3, #0
 8015488:	d009      	beq.n	801549e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801548a:	4b13      	ldr	r3, [pc, #76]	; (80154d8 <HAL_RCC_ClockConfig+0x264>)
 801548c:	689b      	ldr	r3, [r3, #8]
 801548e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	691b      	ldr	r3, [r3, #16]
 8015496:	00db      	lsls	r3, r3, #3
 8015498:	490f      	ldr	r1, [pc, #60]	; (80154d8 <HAL_RCC_ClockConfig+0x264>)
 801549a:	4313      	orrs	r3, r2
 801549c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801549e:	f000 f825 	bl	80154ec <HAL_RCC_GetSysClockFreq>
 80154a2:	4602      	mov	r2, r0
 80154a4:	4b0c      	ldr	r3, [pc, #48]	; (80154d8 <HAL_RCC_ClockConfig+0x264>)
 80154a6:	689b      	ldr	r3, [r3, #8]
 80154a8:	091b      	lsrs	r3, r3, #4
 80154aa:	f003 030f 	and.w	r3, r3, #15
 80154ae:	490c      	ldr	r1, [pc, #48]	; (80154e0 <HAL_RCC_ClockConfig+0x26c>)
 80154b0:	5ccb      	ldrb	r3, [r1, r3]
 80154b2:	f003 031f 	and.w	r3, r3, #31
 80154b6:	fa22 f303 	lsr.w	r3, r2, r3
 80154ba:	4a0a      	ldr	r2, [pc, #40]	; (80154e4 <HAL_RCC_ClockConfig+0x270>)
 80154bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80154be:	4b0a      	ldr	r3, [pc, #40]	; (80154e8 <HAL_RCC_ClockConfig+0x274>)
 80154c0:	681b      	ldr	r3, [r3, #0]
 80154c2:	4618      	mov	r0, r3
 80154c4:	f7fc f878 	bl	80115b8 <HAL_InitTick>
 80154c8:	4603      	mov	r3, r0
}
 80154ca:	4618      	mov	r0, r3
 80154cc:	3718      	adds	r7, #24
 80154ce:	46bd      	mov	sp, r7
 80154d0:	bd80      	pop	{r7, pc}
 80154d2:	bf00      	nop
 80154d4:	40022000 	.word	0x40022000
 80154d8:	40021000 	.word	0x40021000
 80154dc:	04c4b400 	.word	0x04c4b400
 80154e0:	0801ca00 	.word	0x0801ca00
 80154e4:	20000004 	.word	0x20000004
 80154e8:	20000008 	.word	0x20000008

080154ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80154ec:	b480      	push	{r7}
 80154ee:	b087      	sub	sp, #28
 80154f0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80154f2:	4b2c      	ldr	r3, [pc, #176]	; (80155a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80154f4:	689b      	ldr	r3, [r3, #8]
 80154f6:	f003 030c 	and.w	r3, r3, #12
 80154fa:	2b04      	cmp	r3, #4
 80154fc:	d102      	bne.n	8015504 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80154fe:	4b2a      	ldr	r3, [pc, #168]	; (80155a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8015500:	613b      	str	r3, [r7, #16]
 8015502:	e047      	b.n	8015594 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8015504:	4b27      	ldr	r3, [pc, #156]	; (80155a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8015506:	689b      	ldr	r3, [r3, #8]
 8015508:	f003 030c 	and.w	r3, r3, #12
 801550c:	2b08      	cmp	r3, #8
 801550e:	d102      	bne.n	8015516 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8015510:	4b26      	ldr	r3, [pc, #152]	; (80155ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8015512:	613b      	str	r3, [r7, #16]
 8015514:	e03e      	b.n	8015594 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8015516:	4b23      	ldr	r3, [pc, #140]	; (80155a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8015518:	689b      	ldr	r3, [r3, #8]
 801551a:	f003 030c 	and.w	r3, r3, #12
 801551e:	2b0c      	cmp	r3, #12
 8015520:	d136      	bne.n	8015590 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8015522:	4b20      	ldr	r3, [pc, #128]	; (80155a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8015524:	68db      	ldr	r3, [r3, #12]
 8015526:	f003 0303 	and.w	r3, r3, #3
 801552a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801552c:	4b1d      	ldr	r3, [pc, #116]	; (80155a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 801552e:	68db      	ldr	r3, [r3, #12]
 8015530:	091b      	lsrs	r3, r3, #4
 8015532:	f003 030f 	and.w	r3, r3, #15
 8015536:	3301      	adds	r3, #1
 8015538:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 801553a:	68fb      	ldr	r3, [r7, #12]
 801553c:	2b03      	cmp	r3, #3
 801553e:	d10c      	bne.n	801555a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8015540:	4a1a      	ldr	r2, [pc, #104]	; (80155ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8015542:	68bb      	ldr	r3, [r7, #8]
 8015544:	fbb2 f3f3 	udiv	r3, r2, r3
 8015548:	4a16      	ldr	r2, [pc, #88]	; (80155a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 801554a:	68d2      	ldr	r2, [r2, #12]
 801554c:	0a12      	lsrs	r2, r2, #8
 801554e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8015552:	fb02 f303 	mul.w	r3, r2, r3
 8015556:	617b      	str	r3, [r7, #20]
      break;
 8015558:	e00c      	b.n	8015574 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801555a:	4a13      	ldr	r2, [pc, #76]	; (80155a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 801555c:	68bb      	ldr	r3, [r7, #8]
 801555e:	fbb2 f3f3 	udiv	r3, r2, r3
 8015562:	4a10      	ldr	r2, [pc, #64]	; (80155a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8015564:	68d2      	ldr	r2, [r2, #12]
 8015566:	0a12      	lsrs	r2, r2, #8
 8015568:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801556c:	fb02 f303 	mul.w	r3, r2, r3
 8015570:	617b      	str	r3, [r7, #20]
      break;
 8015572:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8015574:	4b0b      	ldr	r3, [pc, #44]	; (80155a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8015576:	68db      	ldr	r3, [r3, #12]
 8015578:	0e5b      	lsrs	r3, r3, #25
 801557a:	f003 0303 	and.w	r3, r3, #3
 801557e:	3301      	adds	r3, #1
 8015580:	005b      	lsls	r3, r3, #1
 8015582:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8015584:	697a      	ldr	r2, [r7, #20]
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	fbb2 f3f3 	udiv	r3, r2, r3
 801558c:	613b      	str	r3, [r7, #16]
 801558e:	e001      	b.n	8015594 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8015590:	2300      	movs	r3, #0
 8015592:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8015594:	693b      	ldr	r3, [r7, #16]
}
 8015596:	4618      	mov	r0, r3
 8015598:	371c      	adds	r7, #28
 801559a:	46bd      	mov	sp, r7
 801559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155a0:	4770      	bx	lr
 80155a2:	bf00      	nop
 80155a4:	40021000 	.word	0x40021000
 80155a8:	00f42400 	.word	0x00f42400
 80155ac:	007a1200 	.word	0x007a1200

080155b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80155b0:	b480      	push	{r7}
 80155b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80155b4:	4b03      	ldr	r3, [pc, #12]	; (80155c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80155b6:	681b      	ldr	r3, [r3, #0]
}
 80155b8:	4618      	mov	r0, r3
 80155ba:	46bd      	mov	sp, r7
 80155bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155c0:	4770      	bx	lr
 80155c2:	bf00      	nop
 80155c4:	20000004 	.word	0x20000004

080155c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80155c8:	b580      	push	{r7, lr}
 80155ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80155cc:	f7ff fff0 	bl	80155b0 <HAL_RCC_GetHCLKFreq>
 80155d0:	4602      	mov	r2, r0
 80155d2:	4b06      	ldr	r3, [pc, #24]	; (80155ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80155d4:	689b      	ldr	r3, [r3, #8]
 80155d6:	0a1b      	lsrs	r3, r3, #8
 80155d8:	f003 0307 	and.w	r3, r3, #7
 80155dc:	4904      	ldr	r1, [pc, #16]	; (80155f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80155de:	5ccb      	ldrb	r3, [r1, r3]
 80155e0:	f003 031f 	and.w	r3, r3, #31
 80155e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80155e8:	4618      	mov	r0, r3
 80155ea:	bd80      	pop	{r7, pc}
 80155ec:	40021000 	.word	0x40021000
 80155f0:	0801ca10 	.word	0x0801ca10

080155f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80155f4:	b580      	push	{r7, lr}
 80155f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80155f8:	f7ff ffda 	bl	80155b0 <HAL_RCC_GetHCLKFreq>
 80155fc:	4602      	mov	r2, r0
 80155fe:	4b06      	ldr	r3, [pc, #24]	; (8015618 <HAL_RCC_GetPCLK2Freq+0x24>)
 8015600:	689b      	ldr	r3, [r3, #8]
 8015602:	0adb      	lsrs	r3, r3, #11
 8015604:	f003 0307 	and.w	r3, r3, #7
 8015608:	4904      	ldr	r1, [pc, #16]	; (801561c <HAL_RCC_GetPCLK2Freq+0x28>)
 801560a:	5ccb      	ldrb	r3, [r1, r3]
 801560c:	f003 031f 	and.w	r3, r3, #31
 8015610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8015614:	4618      	mov	r0, r3
 8015616:	bd80      	pop	{r7, pc}
 8015618:	40021000 	.word	0x40021000
 801561c:	0801ca10 	.word	0x0801ca10

08015620 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8015620:	b480      	push	{r7}
 8015622:	b083      	sub	sp, #12
 8015624:	af00      	add	r7, sp, #0
 8015626:	6078      	str	r0, [r7, #4]
 8015628:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	220f      	movs	r2, #15
 801562e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8015630:	4b12      	ldr	r3, [pc, #72]	; (801567c <HAL_RCC_GetClockConfig+0x5c>)
 8015632:	689b      	ldr	r3, [r3, #8]
 8015634:	f003 0203 	and.w	r2, r3, #3
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 801563c:	4b0f      	ldr	r3, [pc, #60]	; (801567c <HAL_RCC_GetClockConfig+0x5c>)
 801563e:	689b      	ldr	r3, [r3, #8]
 8015640:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8015648:	4b0c      	ldr	r3, [pc, #48]	; (801567c <HAL_RCC_GetClockConfig+0x5c>)
 801564a:	689b      	ldr	r3, [r3, #8]
 801564c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8015654:	4b09      	ldr	r3, [pc, #36]	; (801567c <HAL_RCC_GetClockConfig+0x5c>)
 8015656:	689b      	ldr	r3, [r3, #8]
 8015658:	08db      	lsrs	r3, r3, #3
 801565a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8015662:	4b07      	ldr	r3, [pc, #28]	; (8015680 <HAL_RCC_GetClockConfig+0x60>)
 8015664:	681b      	ldr	r3, [r3, #0]
 8015666:	f003 020f 	and.w	r2, r3, #15
 801566a:	683b      	ldr	r3, [r7, #0]
 801566c:	601a      	str	r2, [r3, #0]
}
 801566e:	bf00      	nop
 8015670:	370c      	adds	r7, #12
 8015672:	46bd      	mov	sp, r7
 8015674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015678:	4770      	bx	lr
 801567a:	bf00      	nop
 801567c:	40021000 	.word	0x40021000
 8015680:	40022000 	.word	0x40022000

08015684 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8015684:	b480      	push	{r7}
 8015686:	b087      	sub	sp, #28
 8015688:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801568a:	4b1e      	ldr	r3, [pc, #120]	; (8015704 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801568c:	68db      	ldr	r3, [r3, #12]
 801568e:	f003 0303 	and.w	r3, r3, #3
 8015692:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8015694:	4b1b      	ldr	r3, [pc, #108]	; (8015704 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8015696:	68db      	ldr	r3, [r3, #12]
 8015698:	091b      	lsrs	r3, r3, #4
 801569a:	f003 030f 	and.w	r3, r3, #15
 801569e:	3301      	adds	r3, #1
 80156a0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80156a2:	693b      	ldr	r3, [r7, #16]
 80156a4:	2b03      	cmp	r3, #3
 80156a6:	d10c      	bne.n	80156c2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80156a8:	4a17      	ldr	r2, [pc, #92]	; (8015708 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80156aa:	68fb      	ldr	r3, [r7, #12]
 80156ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80156b0:	4a14      	ldr	r2, [pc, #80]	; (8015704 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80156b2:	68d2      	ldr	r2, [r2, #12]
 80156b4:	0a12      	lsrs	r2, r2, #8
 80156b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80156ba:	fb02 f303 	mul.w	r3, r2, r3
 80156be:	617b      	str	r3, [r7, #20]
    break;
 80156c0:	e00c      	b.n	80156dc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80156c2:	4a12      	ldr	r2, [pc, #72]	; (801570c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80156ca:	4a0e      	ldr	r2, [pc, #56]	; (8015704 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80156cc:	68d2      	ldr	r2, [r2, #12]
 80156ce:	0a12      	lsrs	r2, r2, #8
 80156d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80156d4:	fb02 f303 	mul.w	r3, r2, r3
 80156d8:	617b      	str	r3, [r7, #20]
    break;
 80156da:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80156dc:	4b09      	ldr	r3, [pc, #36]	; (8015704 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80156de:	68db      	ldr	r3, [r3, #12]
 80156e0:	0e5b      	lsrs	r3, r3, #25
 80156e2:	f003 0303 	and.w	r3, r3, #3
 80156e6:	3301      	adds	r3, #1
 80156e8:	005b      	lsls	r3, r3, #1
 80156ea:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80156ec:	697a      	ldr	r2, [r7, #20]
 80156ee:	68bb      	ldr	r3, [r7, #8]
 80156f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80156f4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80156f6:	687b      	ldr	r3, [r7, #4]
}
 80156f8:	4618      	mov	r0, r3
 80156fa:	371c      	adds	r7, #28
 80156fc:	46bd      	mov	sp, r7
 80156fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015702:	4770      	bx	lr
 8015704:	40021000 	.word	0x40021000
 8015708:	007a1200 	.word	0x007a1200
 801570c:	00f42400 	.word	0x00f42400

08015710 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8015710:	b580      	push	{r7, lr}
 8015712:	b086      	sub	sp, #24
 8015714:	af00      	add	r7, sp, #0
 8015716:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8015718:	2300      	movs	r3, #0
 801571a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801571c:	2300      	movs	r3, #0
 801571e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	681b      	ldr	r3, [r3, #0]
 8015724:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8015728:	2b00      	cmp	r3, #0
 801572a:	f000 8098 	beq.w	801585e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 801572e:	2300      	movs	r3, #0
 8015730:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8015732:	4b43      	ldr	r3, [pc, #268]	; (8015840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8015734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801573a:	2b00      	cmp	r3, #0
 801573c:	d10d      	bne.n	801575a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801573e:	4b40      	ldr	r3, [pc, #256]	; (8015840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8015740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015742:	4a3f      	ldr	r2, [pc, #252]	; (8015840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8015744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015748:	6593      	str	r3, [r2, #88]	; 0x58
 801574a:	4b3d      	ldr	r3, [pc, #244]	; (8015840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801574c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801574e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015752:	60bb      	str	r3, [r7, #8]
 8015754:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8015756:	2301      	movs	r3, #1
 8015758:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801575a:	4b3a      	ldr	r3, [pc, #232]	; (8015844 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801575c:	681b      	ldr	r3, [r3, #0]
 801575e:	4a39      	ldr	r2, [pc, #228]	; (8015844 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8015760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015764:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8015766:	f7fc fbab 	bl	8011ec0 <HAL_GetTick>
 801576a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801576c:	e009      	b.n	8015782 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801576e:	f7fc fba7 	bl	8011ec0 <HAL_GetTick>
 8015772:	4602      	mov	r2, r0
 8015774:	68fb      	ldr	r3, [r7, #12]
 8015776:	1ad3      	subs	r3, r2, r3
 8015778:	2b02      	cmp	r3, #2
 801577a:	d902      	bls.n	8015782 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 801577c:	2303      	movs	r3, #3
 801577e:	74fb      	strb	r3, [r7, #19]
        break;
 8015780:	e005      	b.n	801578e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8015782:	4b30      	ldr	r3, [pc, #192]	; (8015844 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8015784:	681b      	ldr	r3, [r3, #0]
 8015786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801578a:	2b00      	cmp	r3, #0
 801578c:	d0ef      	beq.n	801576e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 801578e:	7cfb      	ldrb	r3, [r7, #19]
 8015790:	2b00      	cmp	r3, #0
 8015792:	d159      	bne.n	8015848 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8015794:	4b2a      	ldr	r3, [pc, #168]	; (8015840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8015796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801579a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801579e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80157a0:	697b      	ldr	r3, [r7, #20]
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d01e      	beq.n	80157e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80157aa:	697a      	ldr	r2, [r7, #20]
 80157ac:	429a      	cmp	r2, r3
 80157ae:	d019      	beq.n	80157e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80157b0:	4b23      	ldr	r3, [pc, #140]	; (8015840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80157b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80157b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80157ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80157bc:	4b20      	ldr	r3, [pc, #128]	; (8015840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80157be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80157c2:	4a1f      	ldr	r2, [pc, #124]	; (8015840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80157c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80157c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80157cc:	4b1c      	ldr	r3, [pc, #112]	; (8015840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80157ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80157d2:	4a1b      	ldr	r2, [pc, #108]	; (8015840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80157d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80157d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80157dc:	4a18      	ldr	r2, [pc, #96]	; (8015840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80157de:	697b      	ldr	r3, [r7, #20]
 80157e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80157e4:	697b      	ldr	r3, [r7, #20]
 80157e6:	f003 0301 	and.w	r3, r3, #1
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d016      	beq.n	801581c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80157ee:	f7fc fb67 	bl	8011ec0 <HAL_GetTick>
 80157f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80157f4:	e00b      	b.n	801580e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80157f6:	f7fc fb63 	bl	8011ec0 <HAL_GetTick>
 80157fa:	4602      	mov	r2, r0
 80157fc:	68fb      	ldr	r3, [r7, #12]
 80157fe:	1ad3      	subs	r3, r2, r3
 8015800:	f241 3288 	movw	r2, #5000	; 0x1388
 8015804:	4293      	cmp	r3, r2
 8015806:	d902      	bls.n	801580e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8015808:	2303      	movs	r3, #3
 801580a:	74fb      	strb	r3, [r7, #19]
            break;
 801580c:	e006      	b.n	801581c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801580e:	4b0c      	ldr	r3, [pc, #48]	; (8015840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8015810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015814:	f003 0302 	and.w	r3, r3, #2
 8015818:	2b00      	cmp	r3, #0
 801581a:	d0ec      	beq.n	80157f6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 801581c:	7cfb      	ldrb	r3, [r7, #19]
 801581e:	2b00      	cmp	r3, #0
 8015820:	d10b      	bne.n	801583a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8015822:	4b07      	ldr	r3, [pc, #28]	; (8015840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8015824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015828:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015830:	4903      	ldr	r1, [pc, #12]	; (8015840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8015832:	4313      	orrs	r3, r2
 8015834:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8015838:	e008      	b.n	801584c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801583a:	7cfb      	ldrb	r3, [r7, #19]
 801583c:	74bb      	strb	r3, [r7, #18]
 801583e:	e005      	b.n	801584c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8015840:	40021000 	.word	0x40021000
 8015844:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015848:	7cfb      	ldrb	r3, [r7, #19]
 801584a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801584c:	7c7b      	ldrb	r3, [r7, #17]
 801584e:	2b01      	cmp	r3, #1
 8015850:	d105      	bne.n	801585e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8015852:	4ba7      	ldr	r3, [pc, #668]	; (8015af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8015854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015856:	4aa6      	ldr	r2, [pc, #664]	; (8015af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8015858:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801585c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	681b      	ldr	r3, [r3, #0]
 8015862:	f003 0301 	and.w	r3, r3, #1
 8015866:	2b00      	cmp	r3, #0
 8015868:	d00a      	beq.n	8015880 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801586a:	4ba1      	ldr	r3, [pc, #644]	; (8015af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801586c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015870:	f023 0203 	bic.w	r2, r3, #3
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	685b      	ldr	r3, [r3, #4]
 8015878:	499d      	ldr	r1, [pc, #628]	; (8015af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801587a:	4313      	orrs	r3, r2
 801587c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	681b      	ldr	r3, [r3, #0]
 8015884:	f003 0302 	and.w	r3, r3, #2
 8015888:	2b00      	cmp	r3, #0
 801588a:	d00a      	beq.n	80158a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801588c:	4b98      	ldr	r3, [pc, #608]	; (8015af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801588e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015892:	f023 020c 	bic.w	r2, r3, #12
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	689b      	ldr	r3, [r3, #8]
 801589a:	4995      	ldr	r1, [pc, #596]	; (8015af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801589c:	4313      	orrs	r3, r2
 801589e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	681b      	ldr	r3, [r3, #0]
 80158a6:	f003 0304 	and.w	r3, r3, #4
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d00a      	beq.n	80158c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80158ae:	4b90      	ldr	r3, [pc, #576]	; (8015af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80158b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80158b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	68db      	ldr	r3, [r3, #12]
 80158bc:	498c      	ldr	r1, [pc, #560]	; (8015af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80158be:	4313      	orrs	r3, r2
 80158c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	681b      	ldr	r3, [r3, #0]
 80158c8:	f003 0308 	and.w	r3, r3, #8
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d00a      	beq.n	80158e6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80158d0:	4b87      	ldr	r3, [pc, #540]	; (8015af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80158d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80158d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	691b      	ldr	r3, [r3, #16]
 80158de:	4984      	ldr	r1, [pc, #528]	; (8015af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80158e0:	4313      	orrs	r3, r2
 80158e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	681b      	ldr	r3, [r3, #0]
 80158ea:	f003 0310 	and.w	r3, r3, #16
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d00a      	beq.n	8015908 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80158f2:	4b7f      	ldr	r3, [pc, #508]	; (8015af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80158f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80158f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	695b      	ldr	r3, [r3, #20]
 8015900:	497b      	ldr	r1, [pc, #492]	; (8015af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8015902:	4313      	orrs	r3, r2
 8015904:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	681b      	ldr	r3, [r3, #0]
 801590c:	f003 0320 	and.w	r3, r3, #32
 8015910:	2b00      	cmp	r3, #0
 8015912:	d00a      	beq.n	801592a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8015914:	4b76      	ldr	r3, [pc, #472]	; (8015af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8015916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801591a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	699b      	ldr	r3, [r3, #24]
 8015922:	4973      	ldr	r1, [pc, #460]	; (8015af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8015924:	4313      	orrs	r3, r2
 8015926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	681b      	ldr	r3, [r3, #0]
 801592e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015932:	2b00      	cmp	r3, #0
 8015934:	d00a      	beq.n	801594c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8015936:	4b6e      	ldr	r3, [pc, #440]	; (8015af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8015938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801593c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	69db      	ldr	r3, [r3, #28]
 8015944:	496a      	ldr	r1, [pc, #424]	; (8015af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8015946:	4313      	orrs	r3, r2
 8015948:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	681b      	ldr	r3, [r3, #0]
 8015950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015954:	2b00      	cmp	r3, #0
 8015956:	d00a      	beq.n	801596e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8015958:	4b65      	ldr	r3, [pc, #404]	; (8015af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801595a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801595e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	6a1b      	ldr	r3, [r3, #32]
 8015966:	4962      	ldr	r1, [pc, #392]	; (8015af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8015968:	4313      	orrs	r3, r2
 801596a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	681b      	ldr	r3, [r3, #0]
 8015972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015976:	2b00      	cmp	r3, #0
 8015978:	d00a      	beq.n	8015990 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801597a:	4b5d      	ldr	r3, [pc, #372]	; (8015af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801597c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015980:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015988:	4959      	ldr	r1, [pc, #356]	; (8015af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801598a:	4313      	orrs	r3, r2
 801598c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	681b      	ldr	r3, [r3, #0]
 8015994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015998:	2b00      	cmp	r3, #0
 801599a:	d00a      	beq.n	80159b2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801599c:	4b54      	ldr	r3, [pc, #336]	; (8015af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801599e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80159a2:	f023 0203 	bic.w	r2, r3, #3
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80159aa:	4951      	ldr	r1, [pc, #324]	; (8015af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80159ac:	4313      	orrs	r3, r2
 80159ae:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	681b      	ldr	r3, [r3, #0]
 80159b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d00a      	beq.n	80159d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80159be:	4b4c      	ldr	r3, [pc, #304]	; (8015af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80159c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80159c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159cc:	4948      	ldr	r1, [pc, #288]	; (8015af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80159ce:	4313      	orrs	r3, r2
 80159d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	681b      	ldr	r3, [r3, #0]
 80159d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d015      	beq.n	8015a0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80159e0:	4b43      	ldr	r3, [pc, #268]	; (8015af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80159e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80159e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80159ee:	4940      	ldr	r1, [pc, #256]	; (8015af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80159f0:	4313      	orrs	r3, r2
 80159f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80159fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80159fe:	d105      	bne.n	8015a0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8015a00:	4b3b      	ldr	r3, [pc, #236]	; (8015af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8015a02:	68db      	ldr	r3, [r3, #12]
 8015a04:	4a3a      	ldr	r2, [pc, #232]	; (8015af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8015a06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015a0a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	681b      	ldr	r3, [r3, #0]
 8015a10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	d015      	beq.n	8015a44 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8015a18:	4b35      	ldr	r3, [pc, #212]	; (8015af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8015a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015a1e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015a26:	4932      	ldr	r1, [pc, #200]	; (8015af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8015a28:	4313      	orrs	r3, r2
 8015a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015a32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8015a36:	d105      	bne.n	8015a44 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8015a38:	4b2d      	ldr	r3, [pc, #180]	; (8015af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8015a3a:	68db      	ldr	r3, [r3, #12]
 8015a3c:	4a2c      	ldr	r2, [pc, #176]	; (8015af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8015a3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015a42:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	681b      	ldr	r3, [r3, #0]
 8015a48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d015      	beq.n	8015a7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8015a50:	4b27      	ldr	r3, [pc, #156]	; (8015af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8015a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015a56:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a5e:	4924      	ldr	r1, [pc, #144]	; (8015af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8015a60:	4313      	orrs	r3, r2
 8015a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a6a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8015a6e:	d105      	bne.n	8015a7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8015a70:	4b1f      	ldr	r3, [pc, #124]	; (8015af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8015a72:	68db      	ldr	r3, [r3, #12]
 8015a74:	4a1e      	ldr	r2, [pc, #120]	; (8015af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8015a76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015a7a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	681b      	ldr	r3, [r3, #0]
 8015a80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	d015      	beq.n	8015ab4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8015a88:	4b19      	ldr	r3, [pc, #100]	; (8015af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8015a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015a8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015a96:	4916      	ldr	r1, [pc, #88]	; (8015af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8015a98:	4313      	orrs	r3, r2
 8015a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015aa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8015aa6:	d105      	bne.n	8015ab4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8015aa8:	4b11      	ldr	r3, [pc, #68]	; (8015af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8015aaa:	68db      	ldr	r3, [r3, #12]
 8015aac:	4a10      	ldr	r2, [pc, #64]	; (8015af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8015aae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015ab2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	681b      	ldr	r3, [r3, #0]
 8015ab8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d019      	beq.n	8015af4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8015ac0:	4b0b      	ldr	r3, [pc, #44]	; (8015af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8015ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015ac6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ace:	4908      	ldr	r1, [pc, #32]	; (8015af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8015ad0:	4313      	orrs	r3, r2
 8015ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ada:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8015ade:	d109      	bne.n	8015af4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8015ae0:	4b03      	ldr	r3, [pc, #12]	; (8015af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8015ae2:	68db      	ldr	r3, [r3, #12]
 8015ae4:	4a02      	ldr	r2, [pc, #8]	; (8015af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8015ae6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015aea:	60d3      	str	r3, [r2, #12]
 8015aec:	e002      	b.n	8015af4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8015aee:	bf00      	nop
 8015af0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	681b      	ldr	r3, [r3, #0]
 8015af8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d015      	beq.n	8015b2c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8015b00:	4b29      	ldr	r3, [pc, #164]	; (8015ba8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8015b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015b06:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015b0e:	4926      	ldr	r1, [pc, #152]	; (8015ba8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8015b10:	4313      	orrs	r3, r2
 8015b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015b1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8015b1e:	d105      	bne.n	8015b2c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8015b20:	4b21      	ldr	r3, [pc, #132]	; (8015ba8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8015b22:	68db      	ldr	r3, [r3, #12]
 8015b24:	4a20      	ldr	r2, [pc, #128]	; (8015ba8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8015b26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015b2a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	681b      	ldr	r3, [r3, #0]
 8015b30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d015      	beq.n	8015b64 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8015b38:	4b1b      	ldr	r3, [pc, #108]	; (8015ba8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8015b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015b3e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015b46:	4918      	ldr	r1, [pc, #96]	; (8015ba8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8015b48:	4313      	orrs	r3, r2
 8015b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015b56:	d105      	bne.n	8015b64 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8015b58:	4b13      	ldr	r3, [pc, #76]	; (8015ba8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8015b5a:	68db      	ldr	r3, [r3, #12]
 8015b5c:	4a12      	ldr	r2, [pc, #72]	; (8015ba8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8015b5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015b62:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d015      	beq.n	8015b9c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8015b70:	4b0d      	ldr	r3, [pc, #52]	; (8015ba8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8015b72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8015b76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015b7e:	490a      	ldr	r1, [pc, #40]	; (8015ba8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8015b80:	4313      	orrs	r3, r2
 8015b82:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015b8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8015b8e:	d105      	bne.n	8015b9c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8015b90:	4b05      	ldr	r3, [pc, #20]	; (8015ba8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8015b92:	68db      	ldr	r3, [r3, #12]
 8015b94:	4a04      	ldr	r2, [pc, #16]	; (8015ba8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8015b96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015b9a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8015b9c:	7cbb      	ldrb	r3, [r7, #18]
}
 8015b9e:	4618      	mov	r0, r3
 8015ba0:	3718      	adds	r7, #24
 8015ba2:	46bd      	mov	sp, r7
 8015ba4:	bd80      	pop	{r7, pc}
 8015ba6:	bf00      	nop
 8015ba8:	40021000 	.word	0x40021000

08015bac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8015bac:	b580      	push	{r7, lr}
 8015bae:	b084      	sub	sp, #16
 8015bb0:	af00      	add	r7, sp, #0
 8015bb2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d101      	bne.n	8015bbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8015bba:	2301      	movs	r3, #1
 8015bbc:	e09d      	b.n	8015cfa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	d108      	bne.n	8015bd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	685b      	ldr	r3, [r3, #4]
 8015bca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8015bce:	d009      	beq.n	8015be4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	2200      	movs	r2, #0
 8015bd4:	61da      	str	r2, [r3, #28]
 8015bd6:	e005      	b.n	8015be4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	2200      	movs	r2, #0
 8015bdc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	2200      	movs	r2, #0
 8015be2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	2200      	movs	r2, #0
 8015be8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8015bf0:	b2db      	uxtb	r3, r3
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	d106      	bne.n	8015c04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	2200      	movs	r2, #0
 8015bfa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8015bfe:	6878      	ldr	r0, [r7, #4]
 8015c00:	f7fb fc70 	bl	80114e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	2202      	movs	r2, #2
 8015c08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	681b      	ldr	r3, [r3, #0]
 8015c10:	681a      	ldr	r2, [r3, #0]
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	681b      	ldr	r3, [r3, #0]
 8015c16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8015c1a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	68db      	ldr	r3, [r3, #12]
 8015c20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8015c24:	d902      	bls.n	8015c2c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8015c26:	2300      	movs	r3, #0
 8015c28:	60fb      	str	r3, [r7, #12]
 8015c2a:	e002      	b.n	8015c32 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8015c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015c30:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	68db      	ldr	r3, [r3, #12]
 8015c36:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8015c3a:	d007      	beq.n	8015c4c <HAL_SPI_Init+0xa0>
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	68db      	ldr	r3, [r3, #12]
 8015c40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8015c44:	d002      	beq.n	8015c4c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	2200      	movs	r2, #0
 8015c4a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	685b      	ldr	r3, [r3, #4]
 8015c50:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	689b      	ldr	r3, [r3, #8]
 8015c58:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8015c5c:	431a      	orrs	r2, r3
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	691b      	ldr	r3, [r3, #16]
 8015c62:	f003 0302 	and.w	r3, r3, #2
 8015c66:	431a      	orrs	r2, r3
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	695b      	ldr	r3, [r3, #20]
 8015c6c:	f003 0301 	and.w	r3, r3, #1
 8015c70:	431a      	orrs	r2, r3
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	699b      	ldr	r3, [r3, #24]
 8015c76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8015c7a:	431a      	orrs	r2, r3
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	69db      	ldr	r3, [r3, #28]
 8015c80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8015c84:	431a      	orrs	r2, r3
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	6a1b      	ldr	r3, [r3, #32]
 8015c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015c8e:	ea42 0103 	orr.w	r1, r2, r3
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c96:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	681b      	ldr	r3, [r3, #0]
 8015c9e:	430a      	orrs	r2, r1
 8015ca0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	699b      	ldr	r3, [r3, #24]
 8015ca6:	0c1b      	lsrs	r3, r3, #16
 8015ca8:	f003 0204 	and.w	r2, r3, #4
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cb0:	f003 0310 	and.w	r3, r3, #16
 8015cb4:	431a      	orrs	r2, r3
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015cba:	f003 0308 	and.w	r3, r3, #8
 8015cbe:	431a      	orrs	r2, r3
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	68db      	ldr	r3, [r3, #12]
 8015cc4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8015cc8:	ea42 0103 	orr.w	r1, r2, r3
 8015ccc:	68fb      	ldr	r3, [r7, #12]
 8015cce:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	681b      	ldr	r3, [r3, #0]
 8015cd6:	430a      	orrs	r2, r1
 8015cd8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	681b      	ldr	r3, [r3, #0]
 8015cde:	69da      	ldr	r2, [r3, #28]
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	681b      	ldr	r3, [r3, #0]
 8015ce4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8015ce8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	2200      	movs	r2, #0
 8015cee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	2201      	movs	r2, #1
 8015cf4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8015cf8:	2300      	movs	r3, #0
}
 8015cfa:	4618      	mov	r0, r3
 8015cfc:	3710      	adds	r7, #16
 8015cfe:	46bd      	mov	sp, r7
 8015d00:	bd80      	pop	{r7, pc}

08015d02 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8015d02:	b580      	push	{r7, lr}
 8015d04:	b082      	sub	sp, #8
 8015d06:	af00      	add	r7, sp, #0
 8015d08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	2b00      	cmp	r3, #0
 8015d0e:	d101      	bne.n	8015d14 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8015d10:	2301      	movs	r3, #1
 8015d12:	e049      	b.n	8015da8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015d1a:	b2db      	uxtb	r3, r3
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d106      	bne.n	8015d2e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	2200      	movs	r2, #0
 8015d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8015d28:	6878      	ldr	r0, [r7, #4]
 8015d2a:	f000 f841 	bl	8015db0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	2202      	movs	r2, #2
 8015d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	681a      	ldr	r2, [r3, #0]
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	3304      	adds	r3, #4
 8015d3e:	4619      	mov	r1, r3
 8015d40:	4610      	mov	r0, r2
 8015d42:	f000 fcdd 	bl	8016700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	2201      	movs	r2, #1
 8015d4a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	2201      	movs	r2, #1
 8015d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	2201      	movs	r2, #1
 8015d5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	2201      	movs	r2, #1
 8015d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	2201      	movs	r2, #1
 8015d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	2201      	movs	r2, #1
 8015d72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	2201      	movs	r2, #1
 8015d7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	2201      	movs	r2, #1
 8015d82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	2201      	movs	r2, #1
 8015d8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	2201      	movs	r2, #1
 8015d92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	2201      	movs	r2, #1
 8015d9a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	2201      	movs	r2, #1
 8015da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8015da6:	2300      	movs	r3, #0
}
 8015da8:	4618      	mov	r0, r3
 8015daa:	3708      	adds	r7, #8
 8015dac:	46bd      	mov	sp, r7
 8015dae:	bd80      	pop	{r7, pc}

08015db0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8015db0:	b480      	push	{r7}
 8015db2:	b083      	sub	sp, #12
 8015db4:	af00      	add	r7, sp, #0
 8015db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8015db8:	bf00      	nop
 8015dba:	370c      	adds	r7, #12
 8015dbc:	46bd      	mov	sp, r7
 8015dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dc2:	4770      	bx	lr

08015dc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8015dc4:	b480      	push	{r7}
 8015dc6:	b085      	sub	sp, #20
 8015dc8:	af00      	add	r7, sp, #0
 8015dca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015dd2:	b2db      	uxtb	r3, r3
 8015dd4:	2b01      	cmp	r3, #1
 8015dd6:	d001      	beq.n	8015ddc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8015dd8:	2301      	movs	r3, #1
 8015dda:	e054      	b.n	8015e86 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	2202      	movs	r2, #2
 8015de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	681b      	ldr	r3, [r3, #0]
 8015de8:	68da      	ldr	r2, [r3, #12]
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	681b      	ldr	r3, [r3, #0]
 8015dee:	f042 0201 	orr.w	r2, r2, #1
 8015df2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	681b      	ldr	r3, [r3, #0]
 8015df8:	4a26      	ldr	r2, [pc, #152]	; (8015e94 <HAL_TIM_Base_Start_IT+0xd0>)
 8015dfa:	4293      	cmp	r3, r2
 8015dfc:	d022      	beq.n	8015e44 <HAL_TIM_Base_Start_IT+0x80>
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	681b      	ldr	r3, [r3, #0]
 8015e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015e06:	d01d      	beq.n	8015e44 <HAL_TIM_Base_Start_IT+0x80>
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	681b      	ldr	r3, [r3, #0]
 8015e0c:	4a22      	ldr	r2, [pc, #136]	; (8015e98 <HAL_TIM_Base_Start_IT+0xd4>)
 8015e0e:	4293      	cmp	r3, r2
 8015e10:	d018      	beq.n	8015e44 <HAL_TIM_Base_Start_IT+0x80>
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	681b      	ldr	r3, [r3, #0]
 8015e16:	4a21      	ldr	r2, [pc, #132]	; (8015e9c <HAL_TIM_Base_Start_IT+0xd8>)
 8015e18:	4293      	cmp	r3, r2
 8015e1a:	d013      	beq.n	8015e44 <HAL_TIM_Base_Start_IT+0x80>
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	681b      	ldr	r3, [r3, #0]
 8015e20:	4a1f      	ldr	r2, [pc, #124]	; (8015ea0 <HAL_TIM_Base_Start_IT+0xdc>)
 8015e22:	4293      	cmp	r3, r2
 8015e24:	d00e      	beq.n	8015e44 <HAL_TIM_Base_Start_IT+0x80>
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	681b      	ldr	r3, [r3, #0]
 8015e2a:	4a1e      	ldr	r2, [pc, #120]	; (8015ea4 <HAL_TIM_Base_Start_IT+0xe0>)
 8015e2c:	4293      	cmp	r3, r2
 8015e2e:	d009      	beq.n	8015e44 <HAL_TIM_Base_Start_IT+0x80>
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	681b      	ldr	r3, [r3, #0]
 8015e34:	4a1c      	ldr	r2, [pc, #112]	; (8015ea8 <HAL_TIM_Base_Start_IT+0xe4>)
 8015e36:	4293      	cmp	r3, r2
 8015e38:	d004      	beq.n	8015e44 <HAL_TIM_Base_Start_IT+0x80>
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	681b      	ldr	r3, [r3, #0]
 8015e3e:	4a1b      	ldr	r2, [pc, #108]	; (8015eac <HAL_TIM_Base_Start_IT+0xe8>)
 8015e40:	4293      	cmp	r3, r2
 8015e42:	d115      	bne.n	8015e70 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	681b      	ldr	r3, [r3, #0]
 8015e48:	689a      	ldr	r2, [r3, #8]
 8015e4a:	4b19      	ldr	r3, [pc, #100]	; (8015eb0 <HAL_TIM_Base_Start_IT+0xec>)
 8015e4c:	4013      	ands	r3, r2
 8015e4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015e50:	68fb      	ldr	r3, [r7, #12]
 8015e52:	2b06      	cmp	r3, #6
 8015e54:	d015      	beq.n	8015e82 <HAL_TIM_Base_Start_IT+0xbe>
 8015e56:	68fb      	ldr	r3, [r7, #12]
 8015e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015e5c:	d011      	beq.n	8015e82 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	681b      	ldr	r3, [r3, #0]
 8015e62:	681a      	ldr	r2, [r3, #0]
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	681b      	ldr	r3, [r3, #0]
 8015e68:	f042 0201 	orr.w	r2, r2, #1
 8015e6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015e6e:	e008      	b.n	8015e82 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	681b      	ldr	r3, [r3, #0]
 8015e74:	681a      	ldr	r2, [r3, #0]
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	681b      	ldr	r3, [r3, #0]
 8015e7a:	f042 0201 	orr.w	r2, r2, #1
 8015e7e:	601a      	str	r2, [r3, #0]
 8015e80:	e000      	b.n	8015e84 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015e82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8015e84:	2300      	movs	r3, #0
}
 8015e86:	4618      	mov	r0, r3
 8015e88:	3714      	adds	r7, #20
 8015e8a:	46bd      	mov	sp, r7
 8015e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e90:	4770      	bx	lr
 8015e92:	bf00      	nop
 8015e94:	40012c00 	.word	0x40012c00
 8015e98:	40000400 	.word	0x40000400
 8015e9c:	40000800 	.word	0x40000800
 8015ea0:	40000c00 	.word	0x40000c00
 8015ea4:	40013400 	.word	0x40013400
 8015ea8:	40014000 	.word	0x40014000
 8015eac:	40015000 	.word	0x40015000
 8015eb0:	00010007 	.word	0x00010007

08015eb4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8015eb4:	b580      	push	{r7, lr}
 8015eb6:	b082      	sub	sp, #8
 8015eb8:	af00      	add	r7, sp, #0
 8015eba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d101      	bne.n	8015ec6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8015ec2:	2301      	movs	r3, #1
 8015ec4:	e049      	b.n	8015f5a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015ecc:	b2db      	uxtb	r3, r3
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	d106      	bne.n	8015ee0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	2200      	movs	r2, #0
 8015ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8015eda:	6878      	ldr	r0, [r7, #4]
 8015edc:	f7fb fd9c 	bl	8011a18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	2202      	movs	r2, #2
 8015ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	681a      	ldr	r2, [r3, #0]
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	3304      	adds	r3, #4
 8015ef0:	4619      	mov	r1, r3
 8015ef2:	4610      	mov	r0, r2
 8015ef4:	f000 fc04 	bl	8016700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	2201      	movs	r2, #1
 8015efc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	2201      	movs	r2, #1
 8015f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	2201      	movs	r2, #1
 8015f0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	2201      	movs	r2, #1
 8015f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	2201      	movs	r2, #1
 8015f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	2201      	movs	r2, #1
 8015f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	2201      	movs	r2, #1
 8015f2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	2201      	movs	r2, #1
 8015f34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	2201      	movs	r2, #1
 8015f3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	2201      	movs	r2, #1
 8015f44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	2201      	movs	r2, #1
 8015f4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	2201      	movs	r2, #1
 8015f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8015f58:	2300      	movs	r3, #0
}
 8015f5a:	4618      	mov	r0, r3
 8015f5c:	3708      	adds	r7, #8
 8015f5e:	46bd      	mov	sp, r7
 8015f60:	bd80      	pop	{r7, pc}
	...

08015f64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8015f64:	b580      	push	{r7, lr}
 8015f66:	b084      	sub	sp, #16
 8015f68:	af00      	add	r7, sp, #0
 8015f6a:	6078      	str	r0, [r7, #4]
 8015f6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8015f6e:	683b      	ldr	r3, [r7, #0]
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	d109      	bne.n	8015f88 <HAL_TIM_PWM_Start+0x24>
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015f7a:	b2db      	uxtb	r3, r3
 8015f7c:	2b01      	cmp	r3, #1
 8015f7e:	bf14      	ite	ne
 8015f80:	2301      	movne	r3, #1
 8015f82:	2300      	moveq	r3, #0
 8015f84:	b2db      	uxtb	r3, r3
 8015f86:	e03c      	b.n	8016002 <HAL_TIM_PWM_Start+0x9e>
 8015f88:	683b      	ldr	r3, [r7, #0]
 8015f8a:	2b04      	cmp	r3, #4
 8015f8c:	d109      	bne.n	8015fa2 <HAL_TIM_PWM_Start+0x3e>
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8015f94:	b2db      	uxtb	r3, r3
 8015f96:	2b01      	cmp	r3, #1
 8015f98:	bf14      	ite	ne
 8015f9a:	2301      	movne	r3, #1
 8015f9c:	2300      	moveq	r3, #0
 8015f9e:	b2db      	uxtb	r3, r3
 8015fa0:	e02f      	b.n	8016002 <HAL_TIM_PWM_Start+0x9e>
 8015fa2:	683b      	ldr	r3, [r7, #0]
 8015fa4:	2b08      	cmp	r3, #8
 8015fa6:	d109      	bne.n	8015fbc <HAL_TIM_PWM_Start+0x58>
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015fae:	b2db      	uxtb	r3, r3
 8015fb0:	2b01      	cmp	r3, #1
 8015fb2:	bf14      	ite	ne
 8015fb4:	2301      	movne	r3, #1
 8015fb6:	2300      	moveq	r3, #0
 8015fb8:	b2db      	uxtb	r3, r3
 8015fba:	e022      	b.n	8016002 <HAL_TIM_PWM_Start+0x9e>
 8015fbc:	683b      	ldr	r3, [r7, #0]
 8015fbe:	2b0c      	cmp	r3, #12
 8015fc0:	d109      	bne.n	8015fd6 <HAL_TIM_PWM_Start+0x72>
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015fc8:	b2db      	uxtb	r3, r3
 8015fca:	2b01      	cmp	r3, #1
 8015fcc:	bf14      	ite	ne
 8015fce:	2301      	movne	r3, #1
 8015fd0:	2300      	moveq	r3, #0
 8015fd2:	b2db      	uxtb	r3, r3
 8015fd4:	e015      	b.n	8016002 <HAL_TIM_PWM_Start+0x9e>
 8015fd6:	683b      	ldr	r3, [r7, #0]
 8015fd8:	2b10      	cmp	r3, #16
 8015fda:	d109      	bne.n	8015ff0 <HAL_TIM_PWM_Start+0x8c>
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015fe2:	b2db      	uxtb	r3, r3
 8015fe4:	2b01      	cmp	r3, #1
 8015fe6:	bf14      	ite	ne
 8015fe8:	2301      	movne	r3, #1
 8015fea:	2300      	moveq	r3, #0
 8015fec:	b2db      	uxtb	r3, r3
 8015fee:	e008      	b.n	8016002 <HAL_TIM_PWM_Start+0x9e>
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015ff6:	b2db      	uxtb	r3, r3
 8015ff8:	2b01      	cmp	r3, #1
 8015ffa:	bf14      	ite	ne
 8015ffc:	2301      	movne	r3, #1
 8015ffe:	2300      	moveq	r3, #0
 8016000:	b2db      	uxtb	r3, r3
 8016002:	2b00      	cmp	r3, #0
 8016004:	d001      	beq.n	801600a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8016006:	2301      	movs	r3, #1
 8016008:	e0a6      	b.n	8016158 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801600a:	683b      	ldr	r3, [r7, #0]
 801600c:	2b00      	cmp	r3, #0
 801600e:	d104      	bne.n	801601a <HAL_TIM_PWM_Start+0xb6>
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	2202      	movs	r2, #2
 8016014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8016018:	e023      	b.n	8016062 <HAL_TIM_PWM_Start+0xfe>
 801601a:	683b      	ldr	r3, [r7, #0]
 801601c:	2b04      	cmp	r3, #4
 801601e:	d104      	bne.n	801602a <HAL_TIM_PWM_Start+0xc6>
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	2202      	movs	r2, #2
 8016024:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8016028:	e01b      	b.n	8016062 <HAL_TIM_PWM_Start+0xfe>
 801602a:	683b      	ldr	r3, [r7, #0]
 801602c:	2b08      	cmp	r3, #8
 801602e:	d104      	bne.n	801603a <HAL_TIM_PWM_Start+0xd6>
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	2202      	movs	r2, #2
 8016034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8016038:	e013      	b.n	8016062 <HAL_TIM_PWM_Start+0xfe>
 801603a:	683b      	ldr	r3, [r7, #0]
 801603c:	2b0c      	cmp	r3, #12
 801603e:	d104      	bne.n	801604a <HAL_TIM_PWM_Start+0xe6>
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	2202      	movs	r2, #2
 8016044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8016048:	e00b      	b.n	8016062 <HAL_TIM_PWM_Start+0xfe>
 801604a:	683b      	ldr	r3, [r7, #0]
 801604c:	2b10      	cmp	r3, #16
 801604e:	d104      	bne.n	801605a <HAL_TIM_PWM_Start+0xf6>
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	2202      	movs	r2, #2
 8016054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8016058:	e003      	b.n	8016062 <HAL_TIM_PWM_Start+0xfe>
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	2202      	movs	r2, #2
 801605e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	681b      	ldr	r3, [r3, #0]
 8016066:	2201      	movs	r2, #1
 8016068:	6839      	ldr	r1, [r7, #0]
 801606a:	4618      	mov	r0, r3
 801606c:	f000 ff1a 	bl	8016ea4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	681b      	ldr	r3, [r3, #0]
 8016074:	4a3a      	ldr	r2, [pc, #232]	; (8016160 <HAL_TIM_PWM_Start+0x1fc>)
 8016076:	4293      	cmp	r3, r2
 8016078:	d018      	beq.n	80160ac <HAL_TIM_PWM_Start+0x148>
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	681b      	ldr	r3, [r3, #0]
 801607e:	4a39      	ldr	r2, [pc, #228]	; (8016164 <HAL_TIM_PWM_Start+0x200>)
 8016080:	4293      	cmp	r3, r2
 8016082:	d013      	beq.n	80160ac <HAL_TIM_PWM_Start+0x148>
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	681b      	ldr	r3, [r3, #0]
 8016088:	4a37      	ldr	r2, [pc, #220]	; (8016168 <HAL_TIM_PWM_Start+0x204>)
 801608a:	4293      	cmp	r3, r2
 801608c:	d00e      	beq.n	80160ac <HAL_TIM_PWM_Start+0x148>
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	681b      	ldr	r3, [r3, #0]
 8016092:	4a36      	ldr	r2, [pc, #216]	; (801616c <HAL_TIM_PWM_Start+0x208>)
 8016094:	4293      	cmp	r3, r2
 8016096:	d009      	beq.n	80160ac <HAL_TIM_PWM_Start+0x148>
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	681b      	ldr	r3, [r3, #0]
 801609c:	4a34      	ldr	r2, [pc, #208]	; (8016170 <HAL_TIM_PWM_Start+0x20c>)
 801609e:	4293      	cmp	r3, r2
 80160a0:	d004      	beq.n	80160ac <HAL_TIM_PWM_Start+0x148>
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	681b      	ldr	r3, [r3, #0]
 80160a6:	4a33      	ldr	r2, [pc, #204]	; (8016174 <HAL_TIM_PWM_Start+0x210>)
 80160a8:	4293      	cmp	r3, r2
 80160aa:	d101      	bne.n	80160b0 <HAL_TIM_PWM_Start+0x14c>
 80160ac:	2301      	movs	r3, #1
 80160ae:	e000      	b.n	80160b2 <HAL_TIM_PWM_Start+0x14e>
 80160b0:	2300      	movs	r3, #0
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d007      	beq.n	80160c6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80160b6:	687b      	ldr	r3, [r7, #4]
 80160b8:	681b      	ldr	r3, [r3, #0]
 80160ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	681b      	ldr	r3, [r3, #0]
 80160c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80160c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	681b      	ldr	r3, [r3, #0]
 80160ca:	4a25      	ldr	r2, [pc, #148]	; (8016160 <HAL_TIM_PWM_Start+0x1fc>)
 80160cc:	4293      	cmp	r3, r2
 80160ce:	d022      	beq.n	8016116 <HAL_TIM_PWM_Start+0x1b2>
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	681b      	ldr	r3, [r3, #0]
 80160d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80160d8:	d01d      	beq.n	8016116 <HAL_TIM_PWM_Start+0x1b2>
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	681b      	ldr	r3, [r3, #0]
 80160de:	4a26      	ldr	r2, [pc, #152]	; (8016178 <HAL_TIM_PWM_Start+0x214>)
 80160e0:	4293      	cmp	r3, r2
 80160e2:	d018      	beq.n	8016116 <HAL_TIM_PWM_Start+0x1b2>
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	681b      	ldr	r3, [r3, #0]
 80160e8:	4a24      	ldr	r2, [pc, #144]	; (801617c <HAL_TIM_PWM_Start+0x218>)
 80160ea:	4293      	cmp	r3, r2
 80160ec:	d013      	beq.n	8016116 <HAL_TIM_PWM_Start+0x1b2>
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	681b      	ldr	r3, [r3, #0]
 80160f2:	4a23      	ldr	r2, [pc, #140]	; (8016180 <HAL_TIM_PWM_Start+0x21c>)
 80160f4:	4293      	cmp	r3, r2
 80160f6:	d00e      	beq.n	8016116 <HAL_TIM_PWM_Start+0x1b2>
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	681b      	ldr	r3, [r3, #0]
 80160fc:	4a19      	ldr	r2, [pc, #100]	; (8016164 <HAL_TIM_PWM_Start+0x200>)
 80160fe:	4293      	cmp	r3, r2
 8016100:	d009      	beq.n	8016116 <HAL_TIM_PWM_Start+0x1b2>
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	681b      	ldr	r3, [r3, #0]
 8016106:	4a18      	ldr	r2, [pc, #96]	; (8016168 <HAL_TIM_PWM_Start+0x204>)
 8016108:	4293      	cmp	r3, r2
 801610a:	d004      	beq.n	8016116 <HAL_TIM_PWM_Start+0x1b2>
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	4a18      	ldr	r2, [pc, #96]	; (8016174 <HAL_TIM_PWM_Start+0x210>)
 8016112:	4293      	cmp	r3, r2
 8016114:	d115      	bne.n	8016142 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	681b      	ldr	r3, [r3, #0]
 801611a:	689a      	ldr	r2, [r3, #8]
 801611c:	4b19      	ldr	r3, [pc, #100]	; (8016184 <HAL_TIM_PWM_Start+0x220>)
 801611e:	4013      	ands	r3, r2
 8016120:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016122:	68fb      	ldr	r3, [r7, #12]
 8016124:	2b06      	cmp	r3, #6
 8016126:	d015      	beq.n	8016154 <HAL_TIM_PWM_Start+0x1f0>
 8016128:	68fb      	ldr	r3, [r7, #12]
 801612a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801612e:	d011      	beq.n	8016154 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	681b      	ldr	r3, [r3, #0]
 8016134:	681a      	ldr	r2, [r3, #0]
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	681b      	ldr	r3, [r3, #0]
 801613a:	f042 0201 	orr.w	r2, r2, #1
 801613e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016140:	e008      	b.n	8016154 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	681a      	ldr	r2, [r3, #0]
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	681b      	ldr	r3, [r3, #0]
 801614c:	f042 0201 	orr.w	r2, r2, #1
 8016150:	601a      	str	r2, [r3, #0]
 8016152:	e000      	b.n	8016156 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016154:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8016156:	2300      	movs	r3, #0
}
 8016158:	4618      	mov	r0, r3
 801615a:	3710      	adds	r7, #16
 801615c:	46bd      	mov	sp, r7
 801615e:	bd80      	pop	{r7, pc}
 8016160:	40012c00 	.word	0x40012c00
 8016164:	40013400 	.word	0x40013400
 8016168:	40014000 	.word	0x40014000
 801616c:	40014400 	.word	0x40014400
 8016170:	40014800 	.word	0x40014800
 8016174:	40015000 	.word	0x40015000
 8016178:	40000400 	.word	0x40000400
 801617c:	40000800 	.word	0x40000800
 8016180:	40000c00 	.word	0x40000c00
 8016184:	00010007 	.word	0x00010007

08016188 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8016188:	b580      	push	{r7, lr}
 801618a:	b082      	sub	sp, #8
 801618c:	af00      	add	r7, sp, #0
 801618e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	681b      	ldr	r3, [r3, #0]
 8016194:	691b      	ldr	r3, [r3, #16]
 8016196:	f003 0302 	and.w	r3, r3, #2
 801619a:	2b02      	cmp	r3, #2
 801619c:	d122      	bne.n	80161e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	681b      	ldr	r3, [r3, #0]
 80161a2:	68db      	ldr	r3, [r3, #12]
 80161a4:	f003 0302 	and.w	r3, r3, #2
 80161a8:	2b02      	cmp	r3, #2
 80161aa:	d11b      	bne.n	80161e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	681b      	ldr	r3, [r3, #0]
 80161b0:	f06f 0202 	mvn.w	r2, #2
 80161b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	2201      	movs	r2, #1
 80161ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	681b      	ldr	r3, [r3, #0]
 80161c0:	699b      	ldr	r3, [r3, #24]
 80161c2:	f003 0303 	and.w	r3, r3, #3
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d003      	beq.n	80161d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80161ca:	6878      	ldr	r0, [r7, #4]
 80161cc:	f000 fa7a 	bl	80166c4 <HAL_TIM_IC_CaptureCallback>
 80161d0:	e005      	b.n	80161de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80161d2:	6878      	ldr	r0, [r7, #4]
 80161d4:	f000 fa6c 	bl	80166b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80161d8:	6878      	ldr	r0, [r7, #4]
 80161da:	f000 fa7d 	bl	80166d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	2200      	movs	r2, #0
 80161e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	681b      	ldr	r3, [r3, #0]
 80161e8:	691b      	ldr	r3, [r3, #16]
 80161ea:	f003 0304 	and.w	r3, r3, #4
 80161ee:	2b04      	cmp	r3, #4
 80161f0:	d122      	bne.n	8016238 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	681b      	ldr	r3, [r3, #0]
 80161f6:	68db      	ldr	r3, [r3, #12]
 80161f8:	f003 0304 	and.w	r3, r3, #4
 80161fc:	2b04      	cmp	r3, #4
 80161fe:	d11b      	bne.n	8016238 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	681b      	ldr	r3, [r3, #0]
 8016204:	f06f 0204 	mvn.w	r2, #4
 8016208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	2202      	movs	r2, #2
 801620e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	699b      	ldr	r3, [r3, #24]
 8016216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801621a:	2b00      	cmp	r3, #0
 801621c:	d003      	beq.n	8016226 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801621e:	6878      	ldr	r0, [r7, #4]
 8016220:	f000 fa50 	bl	80166c4 <HAL_TIM_IC_CaptureCallback>
 8016224:	e005      	b.n	8016232 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016226:	6878      	ldr	r0, [r7, #4]
 8016228:	f000 fa42 	bl	80166b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801622c:	6878      	ldr	r0, [r7, #4]
 801622e:	f000 fa53 	bl	80166d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	2200      	movs	r2, #0
 8016236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	681b      	ldr	r3, [r3, #0]
 801623c:	691b      	ldr	r3, [r3, #16]
 801623e:	f003 0308 	and.w	r3, r3, #8
 8016242:	2b08      	cmp	r3, #8
 8016244:	d122      	bne.n	801628c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	681b      	ldr	r3, [r3, #0]
 801624a:	68db      	ldr	r3, [r3, #12]
 801624c:	f003 0308 	and.w	r3, r3, #8
 8016250:	2b08      	cmp	r3, #8
 8016252:	d11b      	bne.n	801628c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	681b      	ldr	r3, [r3, #0]
 8016258:	f06f 0208 	mvn.w	r2, #8
 801625c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	2204      	movs	r2, #4
 8016262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	681b      	ldr	r3, [r3, #0]
 8016268:	69db      	ldr	r3, [r3, #28]
 801626a:	f003 0303 	and.w	r3, r3, #3
 801626e:	2b00      	cmp	r3, #0
 8016270:	d003      	beq.n	801627a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016272:	6878      	ldr	r0, [r7, #4]
 8016274:	f000 fa26 	bl	80166c4 <HAL_TIM_IC_CaptureCallback>
 8016278:	e005      	b.n	8016286 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801627a:	6878      	ldr	r0, [r7, #4]
 801627c:	f000 fa18 	bl	80166b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016280:	6878      	ldr	r0, [r7, #4]
 8016282:	f000 fa29 	bl	80166d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	2200      	movs	r2, #0
 801628a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	691b      	ldr	r3, [r3, #16]
 8016292:	f003 0310 	and.w	r3, r3, #16
 8016296:	2b10      	cmp	r3, #16
 8016298:	d122      	bne.n	80162e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	681b      	ldr	r3, [r3, #0]
 801629e:	68db      	ldr	r3, [r3, #12]
 80162a0:	f003 0310 	and.w	r3, r3, #16
 80162a4:	2b10      	cmp	r3, #16
 80162a6:	d11b      	bne.n	80162e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	681b      	ldr	r3, [r3, #0]
 80162ac:	f06f 0210 	mvn.w	r2, #16
 80162b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	2208      	movs	r2, #8
 80162b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	681b      	ldr	r3, [r3, #0]
 80162bc:	69db      	ldr	r3, [r3, #28]
 80162be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	d003      	beq.n	80162ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80162c6:	6878      	ldr	r0, [r7, #4]
 80162c8:	f000 f9fc 	bl	80166c4 <HAL_TIM_IC_CaptureCallback>
 80162cc:	e005      	b.n	80162da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80162ce:	6878      	ldr	r0, [r7, #4]
 80162d0:	f000 f9ee 	bl	80166b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80162d4:	6878      	ldr	r0, [r7, #4]
 80162d6:	f000 f9ff 	bl	80166d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	2200      	movs	r2, #0
 80162de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	681b      	ldr	r3, [r3, #0]
 80162e4:	691b      	ldr	r3, [r3, #16]
 80162e6:	f003 0301 	and.w	r3, r3, #1
 80162ea:	2b01      	cmp	r3, #1
 80162ec:	d10e      	bne.n	801630c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	681b      	ldr	r3, [r3, #0]
 80162f2:	68db      	ldr	r3, [r3, #12]
 80162f4:	f003 0301 	and.w	r3, r3, #1
 80162f8:	2b01      	cmp	r3, #1
 80162fa:	d107      	bne.n	801630c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	f06f 0201 	mvn.w	r2, #1
 8016304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8016306:	6878      	ldr	r0, [r7, #4]
 8016308:	f7fa fdc4 	bl	8010e94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	681b      	ldr	r3, [r3, #0]
 8016310:	691b      	ldr	r3, [r3, #16]
 8016312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016316:	2b80      	cmp	r3, #128	; 0x80
 8016318:	d10e      	bne.n	8016338 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	681b      	ldr	r3, [r3, #0]
 801631e:	68db      	ldr	r3, [r3, #12]
 8016320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016324:	2b80      	cmp	r3, #128	; 0x80
 8016326:	d107      	bne.n	8016338 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	681b      	ldr	r3, [r3, #0]
 801632c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8016330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8016332:	6878      	ldr	r0, [r7, #4]
 8016334:	f000 fe7c 	bl	8017030 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	681b      	ldr	r3, [r3, #0]
 801633c:	691b      	ldr	r3, [r3, #16]
 801633e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016346:	d10e      	bne.n	8016366 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	681b      	ldr	r3, [r3, #0]
 801634c:	68db      	ldr	r3, [r3, #12]
 801634e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016352:	2b80      	cmp	r3, #128	; 0x80
 8016354:	d107      	bne.n	8016366 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	681b      	ldr	r3, [r3, #0]
 801635a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801635e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8016360:	6878      	ldr	r0, [r7, #4]
 8016362:	f000 fe6f 	bl	8017044 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	681b      	ldr	r3, [r3, #0]
 801636a:	691b      	ldr	r3, [r3, #16]
 801636c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016370:	2b40      	cmp	r3, #64	; 0x40
 8016372:	d10e      	bne.n	8016392 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	681b      	ldr	r3, [r3, #0]
 8016378:	68db      	ldr	r3, [r3, #12]
 801637a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801637e:	2b40      	cmp	r3, #64	; 0x40
 8016380:	d107      	bne.n	8016392 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	681b      	ldr	r3, [r3, #0]
 8016386:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801638a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801638c:	6878      	ldr	r0, [r7, #4]
 801638e:	f000 f9ad 	bl	80166ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	681b      	ldr	r3, [r3, #0]
 8016396:	691b      	ldr	r3, [r3, #16]
 8016398:	f003 0320 	and.w	r3, r3, #32
 801639c:	2b20      	cmp	r3, #32
 801639e:	d10e      	bne.n	80163be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	681b      	ldr	r3, [r3, #0]
 80163a4:	68db      	ldr	r3, [r3, #12]
 80163a6:	f003 0320 	and.w	r3, r3, #32
 80163aa:	2b20      	cmp	r3, #32
 80163ac:	d107      	bne.n	80163be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	681b      	ldr	r3, [r3, #0]
 80163b2:	f06f 0220 	mvn.w	r2, #32
 80163b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80163b8:	6878      	ldr	r0, [r7, #4]
 80163ba:	f000 fe2f 	bl	801701c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	681b      	ldr	r3, [r3, #0]
 80163c2:	691b      	ldr	r3, [r3, #16]
 80163c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80163c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80163cc:	d10f      	bne.n	80163ee <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	681b      	ldr	r3, [r3, #0]
 80163d2:	68db      	ldr	r3, [r3, #12]
 80163d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80163d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80163dc:	d107      	bne.n	80163ee <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	681b      	ldr	r3, [r3, #0]
 80163e2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80163e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80163e8:	6878      	ldr	r0, [r7, #4]
 80163ea:	f000 fe35 	bl	8017058 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	681b      	ldr	r3, [r3, #0]
 80163f2:	691b      	ldr	r3, [r3, #16]
 80163f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80163f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80163fc:	d10f      	bne.n	801641e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	681b      	ldr	r3, [r3, #0]
 8016402:	68db      	ldr	r3, [r3, #12]
 8016404:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8016408:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801640c:	d107      	bne.n	801641e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	681b      	ldr	r3, [r3, #0]
 8016412:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8016416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8016418:	6878      	ldr	r0, [r7, #4]
 801641a:	f000 fe27 	bl	801706c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	681b      	ldr	r3, [r3, #0]
 8016422:	691b      	ldr	r3, [r3, #16]
 8016424:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8016428:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801642c:	d10f      	bne.n	801644e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	681b      	ldr	r3, [r3, #0]
 8016432:	68db      	ldr	r3, [r3, #12]
 8016434:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8016438:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801643c:	d107      	bne.n	801644e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	681b      	ldr	r3, [r3, #0]
 8016442:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8016446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8016448:	6878      	ldr	r0, [r7, #4]
 801644a:	f000 fe19 	bl	8017080 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	681b      	ldr	r3, [r3, #0]
 8016452:	691b      	ldr	r3, [r3, #16]
 8016454:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016458:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801645c:	d10f      	bne.n	801647e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	681b      	ldr	r3, [r3, #0]
 8016462:	68db      	ldr	r3, [r3, #12]
 8016464:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016468:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801646c:	d107      	bne.n	801647e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	681b      	ldr	r3, [r3, #0]
 8016472:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8016476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8016478:	6878      	ldr	r0, [r7, #4]
 801647a:	f000 fe0b 	bl	8017094 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801647e:	bf00      	nop
 8016480:	3708      	adds	r7, #8
 8016482:	46bd      	mov	sp, r7
 8016484:	bd80      	pop	{r7, pc}
	...

08016488 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8016488:	b580      	push	{r7, lr}
 801648a:	b086      	sub	sp, #24
 801648c:	af00      	add	r7, sp, #0
 801648e:	60f8      	str	r0, [r7, #12]
 8016490:	60b9      	str	r1, [r7, #8]
 8016492:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016494:	2300      	movs	r3, #0
 8016496:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801649e:	2b01      	cmp	r3, #1
 80164a0:	d101      	bne.n	80164a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80164a2:	2302      	movs	r3, #2
 80164a4:	e0ff      	b.n	80166a6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80164a6:	68fb      	ldr	r3, [r7, #12]
 80164a8:	2201      	movs	r2, #1
 80164aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	2b14      	cmp	r3, #20
 80164b2:	f200 80f0 	bhi.w	8016696 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80164b6:	a201      	add	r2, pc, #4	; (adr r2, 80164bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80164b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80164bc:	08016511 	.word	0x08016511
 80164c0:	08016697 	.word	0x08016697
 80164c4:	08016697 	.word	0x08016697
 80164c8:	08016697 	.word	0x08016697
 80164cc:	08016551 	.word	0x08016551
 80164d0:	08016697 	.word	0x08016697
 80164d4:	08016697 	.word	0x08016697
 80164d8:	08016697 	.word	0x08016697
 80164dc:	08016593 	.word	0x08016593
 80164e0:	08016697 	.word	0x08016697
 80164e4:	08016697 	.word	0x08016697
 80164e8:	08016697 	.word	0x08016697
 80164ec:	080165d3 	.word	0x080165d3
 80164f0:	08016697 	.word	0x08016697
 80164f4:	08016697 	.word	0x08016697
 80164f8:	08016697 	.word	0x08016697
 80164fc:	08016615 	.word	0x08016615
 8016500:	08016697 	.word	0x08016697
 8016504:	08016697 	.word	0x08016697
 8016508:	08016697 	.word	0x08016697
 801650c:	08016655 	.word	0x08016655
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8016510:	68fb      	ldr	r3, [r7, #12]
 8016512:	681b      	ldr	r3, [r3, #0]
 8016514:	68b9      	ldr	r1, [r7, #8]
 8016516:	4618      	mov	r0, r3
 8016518:	f000 f99a 	bl	8016850 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801651c:	68fb      	ldr	r3, [r7, #12]
 801651e:	681b      	ldr	r3, [r3, #0]
 8016520:	699a      	ldr	r2, [r3, #24]
 8016522:	68fb      	ldr	r3, [r7, #12]
 8016524:	681b      	ldr	r3, [r3, #0]
 8016526:	f042 0208 	orr.w	r2, r2, #8
 801652a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801652c:	68fb      	ldr	r3, [r7, #12]
 801652e:	681b      	ldr	r3, [r3, #0]
 8016530:	699a      	ldr	r2, [r3, #24]
 8016532:	68fb      	ldr	r3, [r7, #12]
 8016534:	681b      	ldr	r3, [r3, #0]
 8016536:	f022 0204 	bic.w	r2, r2, #4
 801653a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801653c:	68fb      	ldr	r3, [r7, #12]
 801653e:	681b      	ldr	r3, [r3, #0]
 8016540:	6999      	ldr	r1, [r3, #24]
 8016542:	68bb      	ldr	r3, [r7, #8]
 8016544:	691a      	ldr	r2, [r3, #16]
 8016546:	68fb      	ldr	r3, [r7, #12]
 8016548:	681b      	ldr	r3, [r3, #0]
 801654a:	430a      	orrs	r2, r1
 801654c:	619a      	str	r2, [r3, #24]
      break;
 801654e:	e0a5      	b.n	801669c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8016550:	68fb      	ldr	r3, [r7, #12]
 8016552:	681b      	ldr	r3, [r3, #0]
 8016554:	68b9      	ldr	r1, [r7, #8]
 8016556:	4618      	mov	r0, r3
 8016558:	f000 fa14 	bl	8016984 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801655c:	68fb      	ldr	r3, [r7, #12]
 801655e:	681b      	ldr	r3, [r3, #0]
 8016560:	699a      	ldr	r2, [r3, #24]
 8016562:	68fb      	ldr	r3, [r7, #12]
 8016564:	681b      	ldr	r3, [r3, #0]
 8016566:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801656a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801656c:	68fb      	ldr	r3, [r7, #12]
 801656e:	681b      	ldr	r3, [r3, #0]
 8016570:	699a      	ldr	r2, [r3, #24]
 8016572:	68fb      	ldr	r3, [r7, #12]
 8016574:	681b      	ldr	r3, [r3, #0]
 8016576:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801657a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	6999      	ldr	r1, [r3, #24]
 8016582:	68bb      	ldr	r3, [r7, #8]
 8016584:	691b      	ldr	r3, [r3, #16]
 8016586:	021a      	lsls	r2, r3, #8
 8016588:	68fb      	ldr	r3, [r7, #12]
 801658a:	681b      	ldr	r3, [r3, #0]
 801658c:	430a      	orrs	r2, r1
 801658e:	619a      	str	r2, [r3, #24]
      break;
 8016590:	e084      	b.n	801669c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8016592:	68fb      	ldr	r3, [r7, #12]
 8016594:	681b      	ldr	r3, [r3, #0]
 8016596:	68b9      	ldr	r1, [r7, #8]
 8016598:	4618      	mov	r0, r3
 801659a:	f000 fa87 	bl	8016aac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801659e:	68fb      	ldr	r3, [r7, #12]
 80165a0:	681b      	ldr	r3, [r3, #0]
 80165a2:	69da      	ldr	r2, [r3, #28]
 80165a4:	68fb      	ldr	r3, [r7, #12]
 80165a6:	681b      	ldr	r3, [r3, #0]
 80165a8:	f042 0208 	orr.w	r2, r2, #8
 80165ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80165ae:	68fb      	ldr	r3, [r7, #12]
 80165b0:	681b      	ldr	r3, [r3, #0]
 80165b2:	69da      	ldr	r2, [r3, #28]
 80165b4:	68fb      	ldr	r3, [r7, #12]
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	f022 0204 	bic.w	r2, r2, #4
 80165bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80165be:	68fb      	ldr	r3, [r7, #12]
 80165c0:	681b      	ldr	r3, [r3, #0]
 80165c2:	69d9      	ldr	r1, [r3, #28]
 80165c4:	68bb      	ldr	r3, [r7, #8]
 80165c6:	691a      	ldr	r2, [r3, #16]
 80165c8:	68fb      	ldr	r3, [r7, #12]
 80165ca:	681b      	ldr	r3, [r3, #0]
 80165cc:	430a      	orrs	r2, r1
 80165ce:	61da      	str	r2, [r3, #28]
      break;
 80165d0:	e064      	b.n	801669c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80165d2:	68fb      	ldr	r3, [r7, #12]
 80165d4:	681b      	ldr	r3, [r3, #0]
 80165d6:	68b9      	ldr	r1, [r7, #8]
 80165d8:	4618      	mov	r0, r3
 80165da:	f000 faf9 	bl	8016bd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80165de:	68fb      	ldr	r3, [r7, #12]
 80165e0:	681b      	ldr	r3, [r3, #0]
 80165e2:	69da      	ldr	r2, [r3, #28]
 80165e4:	68fb      	ldr	r3, [r7, #12]
 80165e6:	681b      	ldr	r3, [r3, #0]
 80165e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80165ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80165ee:	68fb      	ldr	r3, [r7, #12]
 80165f0:	681b      	ldr	r3, [r3, #0]
 80165f2:	69da      	ldr	r2, [r3, #28]
 80165f4:	68fb      	ldr	r3, [r7, #12]
 80165f6:	681b      	ldr	r3, [r3, #0]
 80165f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80165fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80165fe:	68fb      	ldr	r3, [r7, #12]
 8016600:	681b      	ldr	r3, [r3, #0]
 8016602:	69d9      	ldr	r1, [r3, #28]
 8016604:	68bb      	ldr	r3, [r7, #8]
 8016606:	691b      	ldr	r3, [r3, #16]
 8016608:	021a      	lsls	r2, r3, #8
 801660a:	68fb      	ldr	r3, [r7, #12]
 801660c:	681b      	ldr	r3, [r3, #0]
 801660e:	430a      	orrs	r2, r1
 8016610:	61da      	str	r2, [r3, #28]
      break;
 8016612:	e043      	b.n	801669c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8016614:	68fb      	ldr	r3, [r7, #12]
 8016616:	681b      	ldr	r3, [r3, #0]
 8016618:	68b9      	ldr	r1, [r7, #8]
 801661a:	4618      	mov	r0, r3
 801661c:	f000 fb6c 	bl	8016cf8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8016620:	68fb      	ldr	r3, [r7, #12]
 8016622:	681b      	ldr	r3, [r3, #0]
 8016624:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016626:	68fb      	ldr	r3, [r7, #12]
 8016628:	681b      	ldr	r3, [r3, #0]
 801662a:	f042 0208 	orr.w	r2, r2, #8
 801662e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8016630:	68fb      	ldr	r3, [r7, #12]
 8016632:	681b      	ldr	r3, [r3, #0]
 8016634:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016636:	68fb      	ldr	r3, [r7, #12]
 8016638:	681b      	ldr	r3, [r3, #0]
 801663a:	f022 0204 	bic.w	r2, r2, #4
 801663e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8016640:	68fb      	ldr	r3, [r7, #12]
 8016642:	681b      	ldr	r3, [r3, #0]
 8016644:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8016646:	68bb      	ldr	r3, [r7, #8]
 8016648:	691a      	ldr	r2, [r3, #16]
 801664a:	68fb      	ldr	r3, [r7, #12]
 801664c:	681b      	ldr	r3, [r3, #0]
 801664e:	430a      	orrs	r2, r1
 8016650:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8016652:	e023      	b.n	801669c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8016654:	68fb      	ldr	r3, [r7, #12]
 8016656:	681b      	ldr	r3, [r3, #0]
 8016658:	68b9      	ldr	r1, [r7, #8]
 801665a:	4618      	mov	r0, r3
 801665c:	f000 fbb6 	bl	8016dcc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8016660:	68fb      	ldr	r3, [r7, #12]
 8016662:	681b      	ldr	r3, [r3, #0]
 8016664:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016666:	68fb      	ldr	r3, [r7, #12]
 8016668:	681b      	ldr	r3, [r3, #0]
 801666a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801666e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8016670:	68fb      	ldr	r3, [r7, #12]
 8016672:	681b      	ldr	r3, [r3, #0]
 8016674:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016676:	68fb      	ldr	r3, [r7, #12]
 8016678:	681b      	ldr	r3, [r3, #0]
 801667a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801667e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8016680:	68fb      	ldr	r3, [r7, #12]
 8016682:	681b      	ldr	r3, [r3, #0]
 8016684:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8016686:	68bb      	ldr	r3, [r7, #8]
 8016688:	691b      	ldr	r3, [r3, #16]
 801668a:	021a      	lsls	r2, r3, #8
 801668c:	68fb      	ldr	r3, [r7, #12]
 801668e:	681b      	ldr	r3, [r3, #0]
 8016690:	430a      	orrs	r2, r1
 8016692:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8016694:	e002      	b.n	801669c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8016696:	2301      	movs	r3, #1
 8016698:	75fb      	strb	r3, [r7, #23]
      break;
 801669a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801669c:	68fb      	ldr	r3, [r7, #12]
 801669e:	2200      	movs	r2, #0
 80166a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80166a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80166a6:	4618      	mov	r0, r3
 80166a8:	3718      	adds	r7, #24
 80166aa:	46bd      	mov	sp, r7
 80166ac:	bd80      	pop	{r7, pc}
 80166ae:	bf00      	nop

080166b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80166b0:	b480      	push	{r7}
 80166b2:	b083      	sub	sp, #12
 80166b4:	af00      	add	r7, sp, #0
 80166b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80166b8:	bf00      	nop
 80166ba:	370c      	adds	r7, #12
 80166bc:	46bd      	mov	sp, r7
 80166be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166c2:	4770      	bx	lr

080166c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80166c4:	b480      	push	{r7}
 80166c6:	b083      	sub	sp, #12
 80166c8:	af00      	add	r7, sp, #0
 80166ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80166cc:	bf00      	nop
 80166ce:	370c      	adds	r7, #12
 80166d0:	46bd      	mov	sp, r7
 80166d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166d6:	4770      	bx	lr

080166d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80166d8:	b480      	push	{r7}
 80166da:	b083      	sub	sp, #12
 80166dc:	af00      	add	r7, sp, #0
 80166de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80166e0:	bf00      	nop
 80166e2:	370c      	adds	r7, #12
 80166e4:	46bd      	mov	sp, r7
 80166e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166ea:	4770      	bx	lr

080166ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80166ec:	b480      	push	{r7}
 80166ee:	b083      	sub	sp, #12
 80166f0:	af00      	add	r7, sp, #0
 80166f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80166f4:	bf00      	nop
 80166f6:	370c      	adds	r7, #12
 80166f8:	46bd      	mov	sp, r7
 80166fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166fe:	4770      	bx	lr

08016700 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8016700:	b480      	push	{r7}
 8016702:	b085      	sub	sp, #20
 8016704:	af00      	add	r7, sp, #0
 8016706:	6078      	str	r0, [r7, #4]
 8016708:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	681b      	ldr	r3, [r3, #0]
 801670e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	4a46      	ldr	r2, [pc, #280]	; (801682c <TIM_Base_SetConfig+0x12c>)
 8016714:	4293      	cmp	r3, r2
 8016716:	d017      	beq.n	8016748 <TIM_Base_SetConfig+0x48>
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801671e:	d013      	beq.n	8016748 <TIM_Base_SetConfig+0x48>
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	4a43      	ldr	r2, [pc, #268]	; (8016830 <TIM_Base_SetConfig+0x130>)
 8016724:	4293      	cmp	r3, r2
 8016726:	d00f      	beq.n	8016748 <TIM_Base_SetConfig+0x48>
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	4a42      	ldr	r2, [pc, #264]	; (8016834 <TIM_Base_SetConfig+0x134>)
 801672c:	4293      	cmp	r3, r2
 801672e:	d00b      	beq.n	8016748 <TIM_Base_SetConfig+0x48>
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	4a41      	ldr	r2, [pc, #260]	; (8016838 <TIM_Base_SetConfig+0x138>)
 8016734:	4293      	cmp	r3, r2
 8016736:	d007      	beq.n	8016748 <TIM_Base_SetConfig+0x48>
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	4a40      	ldr	r2, [pc, #256]	; (801683c <TIM_Base_SetConfig+0x13c>)
 801673c:	4293      	cmp	r3, r2
 801673e:	d003      	beq.n	8016748 <TIM_Base_SetConfig+0x48>
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	4a3f      	ldr	r2, [pc, #252]	; (8016840 <TIM_Base_SetConfig+0x140>)
 8016744:	4293      	cmp	r3, r2
 8016746:	d108      	bne.n	801675a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8016748:	68fb      	ldr	r3, [r7, #12]
 801674a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801674e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8016750:	683b      	ldr	r3, [r7, #0]
 8016752:	685b      	ldr	r3, [r3, #4]
 8016754:	68fa      	ldr	r2, [r7, #12]
 8016756:	4313      	orrs	r3, r2
 8016758:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	4a33      	ldr	r2, [pc, #204]	; (801682c <TIM_Base_SetConfig+0x12c>)
 801675e:	4293      	cmp	r3, r2
 8016760:	d023      	beq.n	80167aa <TIM_Base_SetConfig+0xaa>
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016768:	d01f      	beq.n	80167aa <TIM_Base_SetConfig+0xaa>
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	4a30      	ldr	r2, [pc, #192]	; (8016830 <TIM_Base_SetConfig+0x130>)
 801676e:	4293      	cmp	r3, r2
 8016770:	d01b      	beq.n	80167aa <TIM_Base_SetConfig+0xaa>
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	4a2f      	ldr	r2, [pc, #188]	; (8016834 <TIM_Base_SetConfig+0x134>)
 8016776:	4293      	cmp	r3, r2
 8016778:	d017      	beq.n	80167aa <TIM_Base_SetConfig+0xaa>
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	4a2e      	ldr	r2, [pc, #184]	; (8016838 <TIM_Base_SetConfig+0x138>)
 801677e:	4293      	cmp	r3, r2
 8016780:	d013      	beq.n	80167aa <TIM_Base_SetConfig+0xaa>
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	4a2d      	ldr	r2, [pc, #180]	; (801683c <TIM_Base_SetConfig+0x13c>)
 8016786:	4293      	cmp	r3, r2
 8016788:	d00f      	beq.n	80167aa <TIM_Base_SetConfig+0xaa>
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	4a2d      	ldr	r2, [pc, #180]	; (8016844 <TIM_Base_SetConfig+0x144>)
 801678e:	4293      	cmp	r3, r2
 8016790:	d00b      	beq.n	80167aa <TIM_Base_SetConfig+0xaa>
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	4a2c      	ldr	r2, [pc, #176]	; (8016848 <TIM_Base_SetConfig+0x148>)
 8016796:	4293      	cmp	r3, r2
 8016798:	d007      	beq.n	80167aa <TIM_Base_SetConfig+0xaa>
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	4a2b      	ldr	r2, [pc, #172]	; (801684c <TIM_Base_SetConfig+0x14c>)
 801679e:	4293      	cmp	r3, r2
 80167a0:	d003      	beq.n	80167aa <TIM_Base_SetConfig+0xaa>
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	4a26      	ldr	r2, [pc, #152]	; (8016840 <TIM_Base_SetConfig+0x140>)
 80167a6:	4293      	cmp	r3, r2
 80167a8:	d108      	bne.n	80167bc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80167aa:	68fb      	ldr	r3, [r7, #12]
 80167ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80167b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80167b2:	683b      	ldr	r3, [r7, #0]
 80167b4:	68db      	ldr	r3, [r3, #12]
 80167b6:	68fa      	ldr	r2, [r7, #12]
 80167b8:	4313      	orrs	r3, r2
 80167ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80167bc:	68fb      	ldr	r3, [r7, #12]
 80167be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80167c2:	683b      	ldr	r3, [r7, #0]
 80167c4:	695b      	ldr	r3, [r3, #20]
 80167c6:	4313      	orrs	r3, r2
 80167c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	68fa      	ldr	r2, [r7, #12]
 80167ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80167d0:	683b      	ldr	r3, [r7, #0]
 80167d2:	689a      	ldr	r2, [r3, #8]
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80167d8:	683b      	ldr	r3, [r7, #0]
 80167da:	681a      	ldr	r2, [r3, #0]
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	4a12      	ldr	r2, [pc, #72]	; (801682c <TIM_Base_SetConfig+0x12c>)
 80167e4:	4293      	cmp	r3, r2
 80167e6:	d013      	beq.n	8016810 <TIM_Base_SetConfig+0x110>
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	4a14      	ldr	r2, [pc, #80]	; (801683c <TIM_Base_SetConfig+0x13c>)
 80167ec:	4293      	cmp	r3, r2
 80167ee:	d00f      	beq.n	8016810 <TIM_Base_SetConfig+0x110>
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	4a14      	ldr	r2, [pc, #80]	; (8016844 <TIM_Base_SetConfig+0x144>)
 80167f4:	4293      	cmp	r3, r2
 80167f6:	d00b      	beq.n	8016810 <TIM_Base_SetConfig+0x110>
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	4a13      	ldr	r2, [pc, #76]	; (8016848 <TIM_Base_SetConfig+0x148>)
 80167fc:	4293      	cmp	r3, r2
 80167fe:	d007      	beq.n	8016810 <TIM_Base_SetConfig+0x110>
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	4a12      	ldr	r2, [pc, #72]	; (801684c <TIM_Base_SetConfig+0x14c>)
 8016804:	4293      	cmp	r3, r2
 8016806:	d003      	beq.n	8016810 <TIM_Base_SetConfig+0x110>
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	4a0d      	ldr	r2, [pc, #52]	; (8016840 <TIM_Base_SetConfig+0x140>)
 801680c:	4293      	cmp	r3, r2
 801680e:	d103      	bne.n	8016818 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8016810:	683b      	ldr	r3, [r7, #0]
 8016812:	691a      	ldr	r2, [r3, #16]
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	2201      	movs	r2, #1
 801681c:	615a      	str	r2, [r3, #20]
}
 801681e:	bf00      	nop
 8016820:	3714      	adds	r7, #20
 8016822:	46bd      	mov	sp, r7
 8016824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016828:	4770      	bx	lr
 801682a:	bf00      	nop
 801682c:	40012c00 	.word	0x40012c00
 8016830:	40000400 	.word	0x40000400
 8016834:	40000800 	.word	0x40000800
 8016838:	40000c00 	.word	0x40000c00
 801683c:	40013400 	.word	0x40013400
 8016840:	40015000 	.word	0x40015000
 8016844:	40014000 	.word	0x40014000
 8016848:	40014400 	.word	0x40014400
 801684c:	40014800 	.word	0x40014800

08016850 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8016850:	b480      	push	{r7}
 8016852:	b087      	sub	sp, #28
 8016854:	af00      	add	r7, sp, #0
 8016856:	6078      	str	r0, [r7, #4]
 8016858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	6a1b      	ldr	r3, [r3, #32]
 801685e:	f023 0201 	bic.w	r2, r3, #1
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	6a1b      	ldr	r3, [r3, #32]
 801686a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	685b      	ldr	r3, [r3, #4]
 8016870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	699b      	ldr	r3, [r3, #24]
 8016876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8016878:	68fb      	ldr	r3, [r7, #12]
 801687a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801687e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8016882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	f023 0303 	bic.w	r3, r3, #3
 801688a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801688c:	683b      	ldr	r3, [r7, #0]
 801688e:	681b      	ldr	r3, [r3, #0]
 8016890:	68fa      	ldr	r2, [r7, #12]
 8016892:	4313      	orrs	r3, r2
 8016894:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8016896:	697b      	ldr	r3, [r7, #20]
 8016898:	f023 0302 	bic.w	r3, r3, #2
 801689c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801689e:	683b      	ldr	r3, [r7, #0]
 80168a0:	689b      	ldr	r3, [r3, #8]
 80168a2:	697a      	ldr	r2, [r7, #20]
 80168a4:	4313      	orrs	r3, r2
 80168a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	4a30      	ldr	r2, [pc, #192]	; (801696c <TIM_OC1_SetConfig+0x11c>)
 80168ac:	4293      	cmp	r3, r2
 80168ae:	d013      	beq.n	80168d8 <TIM_OC1_SetConfig+0x88>
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	4a2f      	ldr	r2, [pc, #188]	; (8016970 <TIM_OC1_SetConfig+0x120>)
 80168b4:	4293      	cmp	r3, r2
 80168b6:	d00f      	beq.n	80168d8 <TIM_OC1_SetConfig+0x88>
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	4a2e      	ldr	r2, [pc, #184]	; (8016974 <TIM_OC1_SetConfig+0x124>)
 80168bc:	4293      	cmp	r3, r2
 80168be:	d00b      	beq.n	80168d8 <TIM_OC1_SetConfig+0x88>
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	4a2d      	ldr	r2, [pc, #180]	; (8016978 <TIM_OC1_SetConfig+0x128>)
 80168c4:	4293      	cmp	r3, r2
 80168c6:	d007      	beq.n	80168d8 <TIM_OC1_SetConfig+0x88>
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	4a2c      	ldr	r2, [pc, #176]	; (801697c <TIM_OC1_SetConfig+0x12c>)
 80168cc:	4293      	cmp	r3, r2
 80168ce:	d003      	beq.n	80168d8 <TIM_OC1_SetConfig+0x88>
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	4a2b      	ldr	r2, [pc, #172]	; (8016980 <TIM_OC1_SetConfig+0x130>)
 80168d4:	4293      	cmp	r3, r2
 80168d6:	d10c      	bne.n	80168f2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80168d8:	697b      	ldr	r3, [r7, #20]
 80168da:	f023 0308 	bic.w	r3, r3, #8
 80168de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80168e0:	683b      	ldr	r3, [r7, #0]
 80168e2:	68db      	ldr	r3, [r3, #12]
 80168e4:	697a      	ldr	r2, [r7, #20]
 80168e6:	4313      	orrs	r3, r2
 80168e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80168ea:	697b      	ldr	r3, [r7, #20]
 80168ec:	f023 0304 	bic.w	r3, r3, #4
 80168f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	4a1d      	ldr	r2, [pc, #116]	; (801696c <TIM_OC1_SetConfig+0x11c>)
 80168f6:	4293      	cmp	r3, r2
 80168f8:	d013      	beq.n	8016922 <TIM_OC1_SetConfig+0xd2>
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	4a1c      	ldr	r2, [pc, #112]	; (8016970 <TIM_OC1_SetConfig+0x120>)
 80168fe:	4293      	cmp	r3, r2
 8016900:	d00f      	beq.n	8016922 <TIM_OC1_SetConfig+0xd2>
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	4a1b      	ldr	r2, [pc, #108]	; (8016974 <TIM_OC1_SetConfig+0x124>)
 8016906:	4293      	cmp	r3, r2
 8016908:	d00b      	beq.n	8016922 <TIM_OC1_SetConfig+0xd2>
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	4a1a      	ldr	r2, [pc, #104]	; (8016978 <TIM_OC1_SetConfig+0x128>)
 801690e:	4293      	cmp	r3, r2
 8016910:	d007      	beq.n	8016922 <TIM_OC1_SetConfig+0xd2>
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	4a19      	ldr	r2, [pc, #100]	; (801697c <TIM_OC1_SetConfig+0x12c>)
 8016916:	4293      	cmp	r3, r2
 8016918:	d003      	beq.n	8016922 <TIM_OC1_SetConfig+0xd2>
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	4a18      	ldr	r2, [pc, #96]	; (8016980 <TIM_OC1_SetConfig+0x130>)
 801691e:	4293      	cmp	r3, r2
 8016920:	d111      	bne.n	8016946 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8016922:	693b      	ldr	r3, [r7, #16]
 8016924:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016928:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801692a:	693b      	ldr	r3, [r7, #16]
 801692c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8016930:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8016932:	683b      	ldr	r3, [r7, #0]
 8016934:	695b      	ldr	r3, [r3, #20]
 8016936:	693a      	ldr	r2, [r7, #16]
 8016938:	4313      	orrs	r3, r2
 801693a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801693c:	683b      	ldr	r3, [r7, #0]
 801693e:	699b      	ldr	r3, [r3, #24]
 8016940:	693a      	ldr	r2, [r7, #16]
 8016942:	4313      	orrs	r3, r2
 8016944:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	693a      	ldr	r2, [r7, #16]
 801694a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	68fa      	ldr	r2, [r7, #12]
 8016950:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8016952:	683b      	ldr	r3, [r7, #0]
 8016954:	685a      	ldr	r2, [r3, #4]
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	697a      	ldr	r2, [r7, #20]
 801695e:	621a      	str	r2, [r3, #32]
}
 8016960:	bf00      	nop
 8016962:	371c      	adds	r7, #28
 8016964:	46bd      	mov	sp, r7
 8016966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801696a:	4770      	bx	lr
 801696c:	40012c00 	.word	0x40012c00
 8016970:	40013400 	.word	0x40013400
 8016974:	40014000 	.word	0x40014000
 8016978:	40014400 	.word	0x40014400
 801697c:	40014800 	.word	0x40014800
 8016980:	40015000 	.word	0x40015000

08016984 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8016984:	b480      	push	{r7}
 8016986:	b087      	sub	sp, #28
 8016988:	af00      	add	r7, sp, #0
 801698a:	6078      	str	r0, [r7, #4]
 801698c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	6a1b      	ldr	r3, [r3, #32]
 8016992:	f023 0210 	bic.w	r2, r3, #16
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	6a1b      	ldr	r3, [r3, #32]
 801699e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	685b      	ldr	r3, [r3, #4]
 80169a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	699b      	ldr	r3, [r3, #24]
 80169aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80169ac:	68fb      	ldr	r3, [r7, #12]
 80169ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80169b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80169b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80169b8:	68fb      	ldr	r3, [r7, #12]
 80169ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80169be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80169c0:	683b      	ldr	r3, [r7, #0]
 80169c2:	681b      	ldr	r3, [r3, #0]
 80169c4:	021b      	lsls	r3, r3, #8
 80169c6:	68fa      	ldr	r2, [r7, #12]
 80169c8:	4313      	orrs	r3, r2
 80169ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80169cc:	697b      	ldr	r3, [r7, #20]
 80169ce:	f023 0320 	bic.w	r3, r3, #32
 80169d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80169d4:	683b      	ldr	r3, [r7, #0]
 80169d6:	689b      	ldr	r3, [r3, #8]
 80169d8:	011b      	lsls	r3, r3, #4
 80169da:	697a      	ldr	r2, [r7, #20]
 80169dc:	4313      	orrs	r3, r2
 80169de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	4a2c      	ldr	r2, [pc, #176]	; (8016a94 <TIM_OC2_SetConfig+0x110>)
 80169e4:	4293      	cmp	r3, r2
 80169e6:	d007      	beq.n	80169f8 <TIM_OC2_SetConfig+0x74>
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	4a2b      	ldr	r2, [pc, #172]	; (8016a98 <TIM_OC2_SetConfig+0x114>)
 80169ec:	4293      	cmp	r3, r2
 80169ee:	d003      	beq.n	80169f8 <TIM_OC2_SetConfig+0x74>
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	4a2a      	ldr	r2, [pc, #168]	; (8016a9c <TIM_OC2_SetConfig+0x118>)
 80169f4:	4293      	cmp	r3, r2
 80169f6:	d10d      	bne.n	8016a14 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80169f8:	697b      	ldr	r3, [r7, #20]
 80169fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80169fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8016a00:	683b      	ldr	r3, [r7, #0]
 8016a02:	68db      	ldr	r3, [r3, #12]
 8016a04:	011b      	lsls	r3, r3, #4
 8016a06:	697a      	ldr	r2, [r7, #20]
 8016a08:	4313      	orrs	r3, r2
 8016a0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8016a0c:	697b      	ldr	r3, [r7, #20]
 8016a0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016a12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	4a1f      	ldr	r2, [pc, #124]	; (8016a94 <TIM_OC2_SetConfig+0x110>)
 8016a18:	4293      	cmp	r3, r2
 8016a1a:	d013      	beq.n	8016a44 <TIM_OC2_SetConfig+0xc0>
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	4a1e      	ldr	r2, [pc, #120]	; (8016a98 <TIM_OC2_SetConfig+0x114>)
 8016a20:	4293      	cmp	r3, r2
 8016a22:	d00f      	beq.n	8016a44 <TIM_OC2_SetConfig+0xc0>
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	4a1e      	ldr	r2, [pc, #120]	; (8016aa0 <TIM_OC2_SetConfig+0x11c>)
 8016a28:	4293      	cmp	r3, r2
 8016a2a:	d00b      	beq.n	8016a44 <TIM_OC2_SetConfig+0xc0>
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	4a1d      	ldr	r2, [pc, #116]	; (8016aa4 <TIM_OC2_SetConfig+0x120>)
 8016a30:	4293      	cmp	r3, r2
 8016a32:	d007      	beq.n	8016a44 <TIM_OC2_SetConfig+0xc0>
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	4a1c      	ldr	r2, [pc, #112]	; (8016aa8 <TIM_OC2_SetConfig+0x124>)
 8016a38:	4293      	cmp	r3, r2
 8016a3a:	d003      	beq.n	8016a44 <TIM_OC2_SetConfig+0xc0>
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	4a17      	ldr	r2, [pc, #92]	; (8016a9c <TIM_OC2_SetConfig+0x118>)
 8016a40:	4293      	cmp	r3, r2
 8016a42:	d113      	bne.n	8016a6c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8016a44:	693b      	ldr	r3, [r7, #16]
 8016a46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8016a4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8016a4c:	693b      	ldr	r3, [r7, #16]
 8016a4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8016a52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8016a54:	683b      	ldr	r3, [r7, #0]
 8016a56:	695b      	ldr	r3, [r3, #20]
 8016a58:	009b      	lsls	r3, r3, #2
 8016a5a:	693a      	ldr	r2, [r7, #16]
 8016a5c:	4313      	orrs	r3, r2
 8016a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8016a60:	683b      	ldr	r3, [r7, #0]
 8016a62:	699b      	ldr	r3, [r3, #24]
 8016a64:	009b      	lsls	r3, r3, #2
 8016a66:	693a      	ldr	r2, [r7, #16]
 8016a68:	4313      	orrs	r3, r2
 8016a6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	693a      	ldr	r2, [r7, #16]
 8016a70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	68fa      	ldr	r2, [r7, #12]
 8016a76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8016a78:	683b      	ldr	r3, [r7, #0]
 8016a7a:	685a      	ldr	r2, [r3, #4]
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	697a      	ldr	r2, [r7, #20]
 8016a84:	621a      	str	r2, [r3, #32]
}
 8016a86:	bf00      	nop
 8016a88:	371c      	adds	r7, #28
 8016a8a:	46bd      	mov	sp, r7
 8016a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a90:	4770      	bx	lr
 8016a92:	bf00      	nop
 8016a94:	40012c00 	.word	0x40012c00
 8016a98:	40013400 	.word	0x40013400
 8016a9c:	40015000 	.word	0x40015000
 8016aa0:	40014000 	.word	0x40014000
 8016aa4:	40014400 	.word	0x40014400
 8016aa8:	40014800 	.word	0x40014800

08016aac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8016aac:	b480      	push	{r7}
 8016aae:	b087      	sub	sp, #28
 8016ab0:	af00      	add	r7, sp, #0
 8016ab2:	6078      	str	r0, [r7, #4]
 8016ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	6a1b      	ldr	r3, [r3, #32]
 8016aba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	6a1b      	ldr	r3, [r3, #32]
 8016ac6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	685b      	ldr	r3, [r3, #4]
 8016acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	69db      	ldr	r3, [r3, #28]
 8016ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8016ad4:	68fb      	ldr	r3, [r7, #12]
 8016ad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8016ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8016ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8016ae0:	68fb      	ldr	r3, [r7, #12]
 8016ae2:	f023 0303 	bic.w	r3, r3, #3
 8016ae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016ae8:	683b      	ldr	r3, [r7, #0]
 8016aea:	681b      	ldr	r3, [r3, #0]
 8016aec:	68fa      	ldr	r2, [r7, #12]
 8016aee:	4313      	orrs	r3, r2
 8016af0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8016af2:	697b      	ldr	r3, [r7, #20]
 8016af4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8016af8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8016afa:	683b      	ldr	r3, [r7, #0]
 8016afc:	689b      	ldr	r3, [r3, #8]
 8016afe:	021b      	lsls	r3, r3, #8
 8016b00:	697a      	ldr	r2, [r7, #20]
 8016b02:	4313      	orrs	r3, r2
 8016b04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	4a2b      	ldr	r2, [pc, #172]	; (8016bb8 <TIM_OC3_SetConfig+0x10c>)
 8016b0a:	4293      	cmp	r3, r2
 8016b0c:	d007      	beq.n	8016b1e <TIM_OC3_SetConfig+0x72>
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	4a2a      	ldr	r2, [pc, #168]	; (8016bbc <TIM_OC3_SetConfig+0x110>)
 8016b12:	4293      	cmp	r3, r2
 8016b14:	d003      	beq.n	8016b1e <TIM_OC3_SetConfig+0x72>
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	4a29      	ldr	r2, [pc, #164]	; (8016bc0 <TIM_OC3_SetConfig+0x114>)
 8016b1a:	4293      	cmp	r3, r2
 8016b1c:	d10d      	bne.n	8016b3a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8016b1e:	697b      	ldr	r3, [r7, #20]
 8016b20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8016b24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8016b26:	683b      	ldr	r3, [r7, #0]
 8016b28:	68db      	ldr	r3, [r3, #12]
 8016b2a:	021b      	lsls	r3, r3, #8
 8016b2c:	697a      	ldr	r2, [r7, #20]
 8016b2e:	4313      	orrs	r3, r2
 8016b30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8016b32:	697b      	ldr	r3, [r7, #20]
 8016b34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8016b38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	4a1e      	ldr	r2, [pc, #120]	; (8016bb8 <TIM_OC3_SetConfig+0x10c>)
 8016b3e:	4293      	cmp	r3, r2
 8016b40:	d013      	beq.n	8016b6a <TIM_OC3_SetConfig+0xbe>
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	4a1d      	ldr	r2, [pc, #116]	; (8016bbc <TIM_OC3_SetConfig+0x110>)
 8016b46:	4293      	cmp	r3, r2
 8016b48:	d00f      	beq.n	8016b6a <TIM_OC3_SetConfig+0xbe>
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	4a1d      	ldr	r2, [pc, #116]	; (8016bc4 <TIM_OC3_SetConfig+0x118>)
 8016b4e:	4293      	cmp	r3, r2
 8016b50:	d00b      	beq.n	8016b6a <TIM_OC3_SetConfig+0xbe>
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	4a1c      	ldr	r2, [pc, #112]	; (8016bc8 <TIM_OC3_SetConfig+0x11c>)
 8016b56:	4293      	cmp	r3, r2
 8016b58:	d007      	beq.n	8016b6a <TIM_OC3_SetConfig+0xbe>
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	4a1b      	ldr	r2, [pc, #108]	; (8016bcc <TIM_OC3_SetConfig+0x120>)
 8016b5e:	4293      	cmp	r3, r2
 8016b60:	d003      	beq.n	8016b6a <TIM_OC3_SetConfig+0xbe>
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	4a16      	ldr	r2, [pc, #88]	; (8016bc0 <TIM_OC3_SetConfig+0x114>)
 8016b66:	4293      	cmp	r3, r2
 8016b68:	d113      	bne.n	8016b92 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8016b6a:	693b      	ldr	r3, [r7, #16]
 8016b6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016b70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8016b72:	693b      	ldr	r3, [r7, #16]
 8016b74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8016b78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8016b7a:	683b      	ldr	r3, [r7, #0]
 8016b7c:	695b      	ldr	r3, [r3, #20]
 8016b7e:	011b      	lsls	r3, r3, #4
 8016b80:	693a      	ldr	r2, [r7, #16]
 8016b82:	4313      	orrs	r3, r2
 8016b84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8016b86:	683b      	ldr	r3, [r7, #0]
 8016b88:	699b      	ldr	r3, [r3, #24]
 8016b8a:	011b      	lsls	r3, r3, #4
 8016b8c:	693a      	ldr	r2, [r7, #16]
 8016b8e:	4313      	orrs	r3, r2
 8016b90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016b92:	687b      	ldr	r3, [r7, #4]
 8016b94:	693a      	ldr	r2, [r7, #16]
 8016b96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	68fa      	ldr	r2, [r7, #12]
 8016b9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8016b9e:	683b      	ldr	r3, [r7, #0]
 8016ba0:	685a      	ldr	r2, [r3, #4]
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	697a      	ldr	r2, [r7, #20]
 8016baa:	621a      	str	r2, [r3, #32]
}
 8016bac:	bf00      	nop
 8016bae:	371c      	adds	r7, #28
 8016bb0:	46bd      	mov	sp, r7
 8016bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bb6:	4770      	bx	lr
 8016bb8:	40012c00 	.word	0x40012c00
 8016bbc:	40013400 	.word	0x40013400
 8016bc0:	40015000 	.word	0x40015000
 8016bc4:	40014000 	.word	0x40014000
 8016bc8:	40014400 	.word	0x40014400
 8016bcc:	40014800 	.word	0x40014800

08016bd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8016bd0:	b480      	push	{r7}
 8016bd2:	b087      	sub	sp, #28
 8016bd4:	af00      	add	r7, sp, #0
 8016bd6:	6078      	str	r0, [r7, #4]
 8016bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	6a1b      	ldr	r3, [r3, #32]
 8016bde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016be6:	687b      	ldr	r3, [r7, #4]
 8016be8:	6a1b      	ldr	r3, [r3, #32]
 8016bea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	685b      	ldr	r3, [r3, #4]
 8016bf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	69db      	ldr	r3, [r3, #28]
 8016bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8016bf8:	68fb      	ldr	r3, [r7, #12]
 8016bfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8016bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8016c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8016c04:	68fb      	ldr	r3, [r7, #12]
 8016c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8016c0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016c0c:	683b      	ldr	r3, [r7, #0]
 8016c0e:	681b      	ldr	r3, [r3, #0]
 8016c10:	021b      	lsls	r3, r3, #8
 8016c12:	68fa      	ldr	r2, [r7, #12]
 8016c14:	4313      	orrs	r3, r2
 8016c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8016c18:	697b      	ldr	r3, [r7, #20]
 8016c1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8016c1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8016c20:	683b      	ldr	r3, [r7, #0]
 8016c22:	689b      	ldr	r3, [r3, #8]
 8016c24:	031b      	lsls	r3, r3, #12
 8016c26:	697a      	ldr	r2, [r7, #20]
 8016c28:	4313      	orrs	r3, r2
 8016c2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	4a2c      	ldr	r2, [pc, #176]	; (8016ce0 <TIM_OC4_SetConfig+0x110>)
 8016c30:	4293      	cmp	r3, r2
 8016c32:	d007      	beq.n	8016c44 <TIM_OC4_SetConfig+0x74>
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	4a2b      	ldr	r2, [pc, #172]	; (8016ce4 <TIM_OC4_SetConfig+0x114>)
 8016c38:	4293      	cmp	r3, r2
 8016c3a:	d003      	beq.n	8016c44 <TIM_OC4_SetConfig+0x74>
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	4a2a      	ldr	r2, [pc, #168]	; (8016ce8 <TIM_OC4_SetConfig+0x118>)
 8016c40:	4293      	cmp	r3, r2
 8016c42:	d10d      	bne.n	8016c60 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8016c44:	697b      	ldr	r3, [r7, #20]
 8016c46:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8016c4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8016c4c:	683b      	ldr	r3, [r7, #0]
 8016c4e:	68db      	ldr	r3, [r3, #12]
 8016c50:	031b      	lsls	r3, r3, #12
 8016c52:	697a      	ldr	r2, [r7, #20]
 8016c54:	4313      	orrs	r3, r2
 8016c56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8016c58:	697b      	ldr	r3, [r7, #20]
 8016c5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8016c5e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	4a1f      	ldr	r2, [pc, #124]	; (8016ce0 <TIM_OC4_SetConfig+0x110>)
 8016c64:	4293      	cmp	r3, r2
 8016c66:	d013      	beq.n	8016c90 <TIM_OC4_SetConfig+0xc0>
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	4a1e      	ldr	r2, [pc, #120]	; (8016ce4 <TIM_OC4_SetConfig+0x114>)
 8016c6c:	4293      	cmp	r3, r2
 8016c6e:	d00f      	beq.n	8016c90 <TIM_OC4_SetConfig+0xc0>
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	4a1e      	ldr	r2, [pc, #120]	; (8016cec <TIM_OC4_SetConfig+0x11c>)
 8016c74:	4293      	cmp	r3, r2
 8016c76:	d00b      	beq.n	8016c90 <TIM_OC4_SetConfig+0xc0>
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	4a1d      	ldr	r2, [pc, #116]	; (8016cf0 <TIM_OC4_SetConfig+0x120>)
 8016c7c:	4293      	cmp	r3, r2
 8016c7e:	d007      	beq.n	8016c90 <TIM_OC4_SetConfig+0xc0>
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	4a1c      	ldr	r2, [pc, #112]	; (8016cf4 <TIM_OC4_SetConfig+0x124>)
 8016c84:	4293      	cmp	r3, r2
 8016c86:	d003      	beq.n	8016c90 <TIM_OC4_SetConfig+0xc0>
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	4a17      	ldr	r2, [pc, #92]	; (8016ce8 <TIM_OC4_SetConfig+0x118>)
 8016c8c:	4293      	cmp	r3, r2
 8016c8e:	d113      	bne.n	8016cb8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8016c90:	693b      	ldr	r3, [r7, #16]
 8016c92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8016c96:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8016c98:	693b      	ldr	r3, [r7, #16]
 8016c9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8016c9e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8016ca0:	683b      	ldr	r3, [r7, #0]
 8016ca2:	695b      	ldr	r3, [r3, #20]
 8016ca4:	019b      	lsls	r3, r3, #6
 8016ca6:	693a      	ldr	r2, [r7, #16]
 8016ca8:	4313      	orrs	r3, r2
 8016caa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8016cac:	683b      	ldr	r3, [r7, #0]
 8016cae:	699b      	ldr	r3, [r3, #24]
 8016cb0:	019b      	lsls	r3, r3, #6
 8016cb2:	693a      	ldr	r2, [r7, #16]
 8016cb4:	4313      	orrs	r3, r2
 8016cb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	693a      	ldr	r2, [r7, #16]
 8016cbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	68fa      	ldr	r2, [r7, #12]
 8016cc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8016cc4:	683b      	ldr	r3, [r7, #0]
 8016cc6:	685a      	ldr	r2, [r3, #4]
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	697a      	ldr	r2, [r7, #20]
 8016cd0:	621a      	str	r2, [r3, #32]
}
 8016cd2:	bf00      	nop
 8016cd4:	371c      	adds	r7, #28
 8016cd6:	46bd      	mov	sp, r7
 8016cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cdc:	4770      	bx	lr
 8016cde:	bf00      	nop
 8016ce0:	40012c00 	.word	0x40012c00
 8016ce4:	40013400 	.word	0x40013400
 8016ce8:	40015000 	.word	0x40015000
 8016cec:	40014000 	.word	0x40014000
 8016cf0:	40014400 	.word	0x40014400
 8016cf4:	40014800 	.word	0x40014800

08016cf8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8016cf8:	b480      	push	{r7}
 8016cfa:	b087      	sub	sp, #28
 8016cfc:	af00      	add	r7, sp, #0
 8016cfe:	6078      	str	r0, [r7, #4]
 8016d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	6a1b      	ldr	r3, [r3, #32]
 8016d06:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	6a1b      	ldr	r3, [r3, #32]
 8016d12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	685b      	ldr	r3, [r3, #4]
 8016d18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8016d20:	68fb      	ldr	r3, [r7, #12]
 8016d22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8016d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8016d2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016d2c:	683b      	ldr	r3, [r7, #0]
 8016d2e:	681b      	ldr	r3, [r3, #0]
 8016d30:	68fa      	ldr	r2, [r7, #12]
 8016d32:	4313      	orrs	r3, r2
 8016d34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8016d36:	693b      	ldr	r3, [r7, #16]
 8016d38:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8016d3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8016d3e:	683b      	ldr	r3, [r7, #0]
 8016d40:	689b      	ldr	r3, [r3, #8]
 8016d42:	041b      	lsls	r3, r3, #16
 8016d44:	693a      	ldr	r2, [r7, #16]
 8016d46:	4313      	orrs	r3, r2
 8016d48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	4a19      	ldr	r2, [pc, #100]	; (8016db4 <TIM_OC5_SetConfig+0xbc>)
 8016d4e:	4293      	cmp	r3, r2
 8016d50:	d013      	beq.n	8016d7a <TIM_OC5_SetConfig+0x82>
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	4a18      	ldr	r2, [pc, #96]	; (8016db8 <TIM_OC5_SetConfig+0xc0>)
 8016d56:	4293      	cmp	r3, r2
 8016d58:	d00f      	beq.n	8016d7a <TIM_OC5_SetConfig+0x82>
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	4a17      	ldr	r2, [pc, #92]	; (8016dbc <TIM_OC5_SetConfig+0xc4>)
 8016d5e:	4293      	cmp	r3, r2
 8016d60:	d00b      	beq.n	8016d7a <TIM_OC5_SetConfig+0x82>
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	4a16      	ldr	r2, [pc, #88]	; (8016dc0 <TIM_OC5_SetConfig+0xc8>)
 8016d66:	4293      	cmp	r3, r2
 8016d68:	d007      	beq.n	8016d7a <TIM_OC5_SetConfig+0x82>
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	4a15      	ldr	r2, [pc, #84]	; (8016dc4 <TIM_OC5_SetConfig+0xcc>)
 8016d6e:	4293      	cmp	r3, r2
 8016d70:	d003      	beq.n	8016d7a <TIM_OC5_SetConfig+0x82>
 8016d72:	687b      	ldr	r3, [r7, #4]
 8016d74:	4a14      	ldr	r2, [pc, #80]	; (8016dc8 <TIM_OC5_SetConfig+0xd0>)
 8016d76:	4293      	cmp	r3, r2
 8016d78:	d109      	bne.n	8016d8e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8016d7a:	697b      	ldr	r3, [r7, #20]
 8016d7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8016d80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8016d82:	683b      	ldr	r3, [r7, #0]
 8016d84:	695b      	ldr	r3, [r3, #20]
 8016d86:	021b      	lsls	r3, r3, #8
 8016d88:	697a      	ldr	r2, [r7, #20]
 8016d8a:	4313      	orrs	r3, r2
 8016d8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	697a      	ldr	r2, [r7, #20]
 8016d92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	68fa      	ldr	r2, [r7, #12]
 8016d98:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8016d9a:	683b      	ldr	r3, [r7, #0]
 8016d9c:	685a      	ldr	r2, [r3, #4]
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	693a      	ldr	r2, [r7, #16]
 8016da6:	621a      	str	r2, [r3, #32]
}
 8016da8:	bf00      	nop
 8016daa:	371c      	adds	r7, #28
 8016dac:	46bd      	mov	sp, r7
 8016dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016db2:	4770      	bx	lr
 8016db4:	40012c00 	.word	0x40012c00
 8016db8:	40013400 	.word	0x40013400
 8016dbc:	40014000 	.word	0x40014000
 8016dc0:	40014400 	.word	0x40014400
 8016dc4:	40014800 	.word	0x40014800
 8016dc8:	40015000 	.word	0x40015000

08016dcc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8016dcc:	b480      	push	{r7}
 8016dce:	b087      	sub	sp, #28
 8016dd0:	af00      	add	r7, sp, #0
 8016dd2:	6078      	str	r0, [r7, #4]
 8016dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	6a1b      	ldr	r3, [r3, #32]
 8016dda:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	6a1b      	ldr	r3, [r3, #32]
 8016de6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	685b      	ldr	r3, [r3, #4]
 8016dec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8016df4:	68fb      	ldr	r3, [r7, #12]
 8016df6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8016dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8016dfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016e00:	683b      	ldr	r3, [r7, #0]
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	021b      	lsls	r3, r3, #8
 8016e06:	68fa      	ldr	r2, [r7, #12]
 8016e08:	4313      	orrs	r3, r2
 8016e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8016e0c:	693b      	ldr	r3, [r7, #16]
 8016e0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8016e12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8016e14:	683b      	ldr	r3, [r7, #0]
 8016e16:	689b      	ldr	r3, [r3, #8]
 8016e18:	051b      	lsls	r3, r3, #20
 8016e1a:	693a      	ldr	r2, [r7, #16]
 8016e1c:	4313      	orrs	r3, r2
 8016e1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	4a1a      	ldr	r2, [pc, #104]	; (8016e8c <TIM_OC6_SetConfig+0xc0>)
 8016e24:	4293      	cmp	r3, r2
 8016e26:	d013      	beq.n	8016e50 <TIM_OC6_SetConfig+0x84>
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	4a19      	ldr	r2, [pc, #100]	; (8016e90 <TIM_OC6_SetConfig+0xc4>)
 8016e2c:	4293      	cmp	r3, r2
 8016e2e:	d00f      	beq.n	8016e50 <TIM_OC6_SetConfig+0x84>
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	4a18      	ldr	r2, [pc, #96]	; (8016e94 <TIM_OC6_SetConfig+0xc8>)
 8016e34:	4293      	cmp	r3, r2
 8016e36:	d00b      	beq.n	8016e50 <TIM_OC6_SetConfig+0x84>
 8016e38:	687b      	ldr	r3, [r7, #4]
 8016e3a:	4a17      	ldr	r2, [pc, #92]	; (8016e98 <TIM_OC6_SetConfig+0xcc>)
 8016e3c:	4293      	cmp	r3, r2
 8016e3e:	d007      	beq.n	8016e50 <TIM_OC6_SetConfig+0x84>
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	4a16      	ldr	r2, [pc, #88]	; (8016e9c <TIM_OC6_SetConfig+0xd0>)
 8016e44:	4293      	cmp	r3, r2
 8016e46:	d003      	beq.n	8016e50 <TIM_OC6_SetConfig+0x84>
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	4a15      	ldr	r2, [pc, #84]	; (8016ea0 <TIM_OC6_SetConfig+0xd4>)
 8016e4c:	4293      	cmp	r3, r2
 8016e4e:	d109      	bne.n	8016e64 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8016e50:	697b      	ldr	r3, [r7, #20]
 8016e52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8016e56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8016e58:	683b      	ldr	r3, [r7, #0]
 8016e5a:	695b      	ldr	r3, [r3, #20]
 8016e5c:	029b      	lsls	r3, r3, #10
 8016e5e:	697a      	ldr	r2, [r7, #20]
 8016e60:	4313      	orrs	r3, r2
 8016e62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	697a      	ldr	r2, [r7, #20]
 8016e68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	68fa      	ldr	r2, [r7, #12]
 8016e6e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8016e70:	683b      	ldr	r3, [r7, #0]
 8016e72:	685a      	ldr	r2, [r3, #4]
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	693a      	ldr	r2, [r7, #16]
 8016e7c:	621a      	str	r2, [r3, #32]
}
 8016e7e:	bf00      	nop
 8016e80:	371c      	adds	r7, #28
 8016e82:	46bd      	mov	sp, r7
 8016e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e88:	4770      	bx	lr
 8016e8a:	bf00      	nop
 8016e8c:	40012c00 	.word	0x40012c00
 8016e90:	40013400 	.word	0x40013400
 8016e94:	40014000 	.word	0x40014000
 8016e98:	40014400 	.word	0x40014400
 8016e9c:	40014800 	.word	0x40014800
 8016ea0:	40015000 	.word	0x40015000

08016ea4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8016ea4:	b480      	push	{r7}
 8016ea6:	b087      	sub	sp, #28
 8016ea8:	af00      	add	r7, sp, #0
 8016eaa:	60f8      	str	r0, [r7, #12]
 8016eac:	60b9      	str	r1, [r7, #8]
 8016eae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8016eb0:	68bb      	ldr	r3, [r7, #8]
 8016eb2:	f003 031f 	and.w	r3, r3, #31
 8016eb6:	2201      	movs	r2, #1
 8016eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8016ebc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8016ebe:	68fb      	ldr	r3, [r7, #12]
 8016ec0:	6a1a      	ldr	r2, [r3, #32]
 8016ec2:	697b      	ldr	r3, [r7, #20]
 8016ec4:	43db      	mvns	r3, r3
 8016ec6:	401a      	ands	r2, r3
 8016ec8:	68fb      	ldr	r3, [r7, #12]
 8016eca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8016ecc:	68fb      	ldr	r3, [r7, #12]
 8016ece:	6a1a      	ldr	r2, [r3, #32]
 8016ed0:	68bb      	ldr	r3, [r7, #8]
 8016ed2:	f003 031f 	and.w	r3, r3, #31
 8016ed6:	6879      	ldr	r1, [r7, #4]
 8016ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8016edc:	431a      	orrs	r2, r3
 8016ede:	68fb      	ldr	r3, [r7, #12]
 8016ee0:	621a      	str	r2, [r3, #32]
}
 8016ee2:	bf00      	nop
 8016ee4:	371c      	adds	r7, #28
 8016ee6:	46bd      	mov	sp, r7
 8016ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eec:	4770      	bx	lr
	...

08016ef0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8016ef0:	b480      	push	{r7}
 8016ef2:	b085      	sub	sp, #20
 8016ef4:	af00      	add	r7, sp, #0
 8016ef6:	6078      	str	r0, [r7, #4]
 8016ef8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016f00:	2b01      	cmp	r3, #1
 8016f02:	d101      	bne.n	8016f08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8016f04:	2302      	movs	r3, #2
 8016f06:	e074      	b.n	8016ff2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	2201      	movs	r2, #1
 8016f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	2202      	movs	r2, #2
 8016f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	681b      	ldr	r3, [r3, #0]
 8016f1c:	685b      	ldr	r3, [r3, #4]
 8016f1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	681b      	ldr	r3, [r3, #0]
 8016f24:	689b      	ldr	r3, [r3, #8]
 8016f26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	681b      	ldr	r3, [r3, #0]
 8016f2c:	4a34      	ldr	r2, [pc, #208]	; (8017000 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8016f2e:	4293      	cmp	r3, r2
 8016f30:	d009      	beq.n	8016f46 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	681b      	ldr	r3, [r3, #0]
 8016f36:	4a33      	ldr	r2, [pc, #204]	; (8017004 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8016f38:	4293      	cmp	r3, r2
 8016f3a:	d004      	beq.n	8016f46 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	681b      	ldr	r3, [r3, #0]
 8016f40:	4a31      	ldr	r2, [pc, #196]	; (8017008 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8016f42:	4293      	cmp	r3, r2
 8016f44:	d108      	bne.n	8016f58 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8016f46:	68fb      	ldr	r3, [r7, #12]
 8016f48:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8016f4c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8016f4e:	683b      	ldr	r3, [r7, #0]
 8016f50:	685b      	ldr	r3, [r3, #4]
 8016f52:	68fa      	ldr	r2, [r7, #12]
 8016f54:	4313      	orrs	r3, r2
 8016f56:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8016f58:	68fb      	ldr	r3, [r7, #12]
 8016f5a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8016f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8016f62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8016f64:	683b      	ldr	r3, [r7, #0]
 8016f66:	681b      	ldr	r3, [r3, #0]
 8016f68:	68fa      	ldr	r2, [r7, #12]
 8016f6a:	4313      	orrs	r3, r2
 8016f6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8016f6e:	687b      	ldr	r3, [r7, #4]
 8016f70:	681b      	ldr	r3, [r3, #0]
 8016f72:	68fa      	ldr	r2, [r7, #12]
 8016f74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	681b      	ldr	r3, [r3, #0]
 8016f7a:	4a21      	ldr	r2, [pc, #132]	; (8017000 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8016f7c:	4293      	cmp	r3, r2
 8016f7e:	d022      	beq.n	8016fc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	681b      	ldr	r3, [r3, #0]
 8016f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016f88:	d01d      	beq.n	8016fc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	681b      	ldr	r3, [r3, #0]
 8016f8e:	4a1f      	ldr	r2, [pc, #124]	; (801700c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8016f90:	4293      	cmp	r3, r2
 8016f92:	d018      	beq.n	8016fc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	681b      	ldr	r3, [r3, #0]
 8016f98:	4a1d      	ldr	r2, [pc, #116]	; (8017010 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8016f9a:	4293      	cmp	r3, r2
 8016f9c:	d013      	beq.n	8016fc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	681b      	ldr	r3, [r3, #0]
 8016fa2:	4a1c      	ldr	r2, [pc, #112]	; (8017014 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8016fa4:	4293      	cmp	r3, r2
 8016fa6:	d00e      	beq.n	8016fc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	681b      	ldr	r3, [r3, #0]
 8016fac:	4a15      	ldr	r2, [pc, #84]	; (8017004 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8016fae:	4293      	cmp	r3, r2
 8016fb0:	d009      	beq.n	8016fc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8016fb2:	687b      	ldr	r3, [r7, #4]
 8016fb4:	681b      	ldr	r3, [r3, #0]
 8016fb6:	4a18      	ldr	r2, [pc, #96]	; (8017018 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8016fb8:	4293      	cmp	r3, r2
 8016fba:	d004      	beq.n	8016fc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	681b      	ldr	r3, [r3, #0]
 8016fc0:	4a11      	ldr	r2, [pc, #68]	; (8017008 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8016fc2:	4293      	cmp	r3, r2
 8016fc4:	d10c      	bne.n	8016fe0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8016fc6:	68bb      	ldr	r3, [r7, #8]
 8016fc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016fcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8016fce:	683b      	ldr	r3, [r7, #0]
 8016fd0:	689b      	ldr	r3, [r3, #8]
 8016fd2:	68ba      	ldr	r2, [r7, #8]
 8016fd4:	4313      	orrs	r3, r2
 8016fd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	681b      	ldr	r3, [r3, #0]
 8016fdc:	68ba      	ldr	r2, [r7, #8]
 8016fde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8016fe0:	687b      	ldr	r3, [r7, #4]
 8016fe2:	2201      	movs	r2, #1
 8016fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	2200      	movs	r2, #0
 8016fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8016ff0:	2300      	movs	r3, #0
}
 8016ff2:	4618      	mov	r0, r3
 8016ff4:	3714      	adds	r7, #20
 8016ff6:	46bd      	mov	sp, r7
 8016ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ffc:	4770      	bx	lr
 8016ffe:	bf00      	nop
 8017000:	40012c00 	.word	0x40012c00
 8017004:	40013400 	.word	0x40013400
 8017008:	40015000 	.word	0x40015000
 801700c:	40000400 	.word	0x40000400
 8017010:	40000800 	.word	0x40000800
 8017014:	40000c00 	.word	0x40000c00
 8017018:	40014000 	.word	0x40014000

0801701c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801701c:	b480      	push	{r7}
 801701e:	b083      	sub	sp, #12
 8017020:	af00      	add	r7, sp, #0
 8017022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8017024:	bf00      	nop
 8017026:	370c      	adds	r7, #12
 8017028:	46bd      	mov	sp, r7
 801702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801702e:	4770      	bx	lr

08017030 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8017030:	b480      	push	{r7}
 8017032:	b083      	sub	sp, #12
 8017034:	af00      	add	r7, sp, #0
 8017036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8017038:	bf00      	nop
 801703a:	370c      	adds	r7, #12
 801703c:	46bd      	mov	sp, r7
 801703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017042:	4770      	bx	lr

08017044 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8017044:	b480      	push	{r7}
 8017046:	b083      	sub	sp, #12
 8017048:	af00      	add	r7, sp, #0
 801704a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801704c:	bf00      	nop
 801704e:	370c      	adds	r7, #12
 8017050:	46bd      	mov	sp, r7
 8017052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017056:	4770      	bx	lr

08017058 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8017058:	b480      	push	{r7}
 801705a:	b083      	sub	sp, #12
 801705c:	af00      	add	r7, sp, #0
 801705e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8017060:	bf00      	nop
 8017062:	370c      	adds	r7, #12
 8017064:	46bd      	mov	sp, r7
 8017066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801706a:	4770      	bx	lr

0801706c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 801706c:	b480      	push	{r7}
 801706e:	b083      	sub	sp, #12
 8017070:	af00      	add	r7, sp, #0
 8017072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8017074:	bf00      	nop
 8017076:	370c      	adds	r7, #12
 8017078:	46bd      	mov	sp, r7
 801707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801707e:	4770      	bx	lr

08017080 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8017080:	b480      	push	{r7}
 8017082:	b083      	sub	sp, #12
 8017084:	af00      	add	r7, sp, #0
 8017086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8017088:	bf00      	nop
 801708a:	370c      	adds	r7, #12
 801708c:	46bd      	mov	sp, r7
 801708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017092:	4770      	bx	lr

08017094 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8017094:	b480      	push	{r7}
 8017096:	b083      	sub	sp, #12
 8017098:	af00      	add	r7, sp, #0
 801709a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 801709c:	bf00      	nop
 801709e:	370c      	adds	r7, #12
 80170a0:	46bd      	mov	sp, r7
 80170a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170a6:	4770      	bx	lr

080170a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80170a8:	b580      	push	{r7, lr}
 80170aa:	b082      	sub	sp, #8
 80170ac:	af00      	add	r7, sp, #0
 80170ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	2b00      	cmp	r3, #0
 80170b4:	d101      	bne.n	80170ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80170b6:	2301      	movs	r3, #1
 80170b8:	e042      	b.n	8017140 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	d106      	bne.n	80170d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	2200      	movs	r2, #0
 80170c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80170cc:	6878      	ldr	r0, [r7, #4]
 80170ce:	f7fa fddf 	bl	8011c90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	2224      	movs	r2, #36	; 0x24
 80170d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	681b      	ldr	r3, [r3, #0]
 80170de:	681a      	ldr	r2, [r3, #0]
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	681b      	ldr	r3, [r3, #0]
 80170e4:	f022 0201 	bic.w	r2, r2, #1
 80170e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80170ea:	6878      	ldr	r0, [r7, #4]
 80170ec:	f000 fd2e 	bl	8017b4c <UART_SetConfig>
 80170f0:	4603      	mov	r3, r0
 80170f2:	2b01      	cmp	r3, #1
 80170f4:	d101      	bne.n	80170fa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80170f6:	2301      	movs	r3, #1
 80170f8:	e022      	b.n	8017140 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80170fe:	2b00      	cmp	r3, #0
 8017100:	d002      	beq.n	8017108 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8017102:	6878      	ldr	r0, [r7, #4]
 8017104:	f001 f81e 	bl	8018144 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	681b      	ldr	r3, [r3, #0]
 801710c:	685a      	ldr	r2, [r3, #4]
 801710e:	687b      	ldr	r3, [r7, #4]
 8017110:	681b      	ldr	r3, [r3, #0]
 8017112:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8017116:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8017118:	687b      	ldr	r3, [r7, #4]
 801711a:	681b      	ldr	r3, [r3, #0]
 801711c:	689a      	ldr	r2, [r3, #8]
 801711e:	687b      	ldr	r3, [r7, #4]
 8017120:	681b      	ldr	r3, [r3, #0]
 8017122:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8017126:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	681b      	ldr	r3, [r3, #0]
 801712c:	681a      	ldr	r2, [r3, #0]
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	681b      	ldr	r3, [r3, #0]
 8017132:	f042 0201 	orr.w	r2, r2, #1
 8017136:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8017138:	6878      	ldr	r0, [r7, #4]
 801713a:	f001 f8a5 	bl	8018288 <UART_CheckIdleState>
 801713e:	4603      	mov	r3, r0
}
 8017140:	4618      	mov	r0, r3
 8017142:	3708      	adds	r7, #8
 8017144:	46bd      	mov	sp, r7
 8017146:	bd80      	pop	{r7, pc}

08017148 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017148:	b580      	push	{r7, lr}
 801714a:	b08a      	sub	sp, #40	; 0x28
 801714c:	af02      	add	r7, sp, #8
 801714e:	60f8      	str	r0, [r7, #12]
 8017150:	60b9      	str	r1, [r7, #8]
 8017152:	603b      	str	r3, [r7, #0]
 8017154:	4613      	mov	r3, r2
 8017156:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8017158:	68fb      	ldr	r3, [r7, #12]
 801715a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801715e:	2b20      	cmp	r3, #32
 8017160:	f040 8083 	bne.w	801726a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8017164:	68bb      	ldr	r3, [r7, #8]
 8017166:	2b00      	cmp	r3, #0
 8017168:	d002      	beq.n	8017170 <HAL_UART_Transmit+0x28>
 801716a:	88fb      	ldrh	r3, [r7, #6]
 801716c:	2b00      	cmp	r3, #0
 801716e:	d101      	bne.n	8017174 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8017170:	2301      	movs	r3, #1
 8017172:	e07b      	b.n	801726c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8017174:	68fb      	ldr	r3, [r7, #12]
 8017176:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801717a:	2b01      	cmp	r3, #1
 801717c:	d101      	bne.n	8017182 <HAL_UART_Transmit+0x3a>
 801717e:	2302      	movs	r3, #2
 8017180:	e074      	b.n	801726c <HAL_UART_Transmit+0x124>
 8017182:	68fb      	ldr	r3, [r7, #12]
 8017184:	2201      	movs	r2, #1
 8017186:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801718a:	68fb      	ldr	r3, [r7, #12]
 801718c:	2200      	movs	r2, #0
 801718e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8017192:	68fb      	ldr	r3, [r7, #12]
 8017194:	2221      	movs	r2, #33	; 0x21
 8017196:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801719a:	f7fa fe91 	bl	8011ec0 <HAL_GetTick>
 801719e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80171a0:	68fb      	ldr	r3, [r7, #12]
 80171a2:	88fa      	ldrh	r2, [r7, #6]
 80171a4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80171a8:	68fb      	ldr	r3, [r7, #12]
 80171aa:	88fa      	ldrh	r2, [r7, #6]
 80171ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80171b0:	68fb      	ldr	r3, [r7, #12]
 80171b2:	689b      	ldr	r3, [r3, #8]
 80171b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80171b8:	d108      	bne.n	80171cc <HAL_UART_Transmit+0x84>
 80171ba:	68fb      	ldr	r3, [r7, #12]
 80171bc:	691b      	ldr	r3, [r3, #16]
 80171be:	2b00      	cmp	r3, #0
 80171c0:	d104      	bne.n	80171cc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80171c2:	2300      	movs	r3, #0
 80171c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80171c6:	68bb      	ldr	r3, [r7, #8]
 80171c8:	61bb      	str	r3, [r7, #24]
 80171ca:	e003      	b.n	80171d4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80171cc:	68bb      	ldr	r3, [r7, #8]
 80171ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80171d0:	2300      	movs	r3, #0
 80171d2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80171d4:	68fb      	ldr	r3, [r7, #12]
 80171d6:	2200      	movs	r2, #0
 80171d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80171dc:	e02c      	b.n	8017238 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80171de:	683b      	ldr	r3, [r7, #0]
 80171e0:	9300      	str	r3, [sp, #0]
 80171e2:	697b      	ldr	r3, [r7, #20]
 80171e4:	2200      	movs	r2, #0
 80171e6:	2180      	movs	r1, #128	; 0x80
 80171e8:	68f8      	ldr	r0, [r7, #12]
 80171ea:	f001 f898 	bl	801831e <UART_WaitOnFlagUntilTimeout>
 80171ee:	4603      	mov	r3, r0
 80171f0:	2b00      	cmp	r3, #0
 80171f2:	d001      	beq.n	80171f8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80171f4:	2303      	movs	r3, #3
 80171f6:	e039      	b.n	801726c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80171f8:	69fb      	ldr	r3, [r7, #28]
 80171fa:	2b00      	cmp	r3, #0
 80171fc:	d10b      	bne.n	8017216 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80171fe:	69bb      	ldr	r3, [r7, #24]
 8017200:	881b      	ldrh	r3, [r3, #0]
 8017202:	461a      	mov	r2, r3
 8017204:	68fb      	ldr	r3, [r7, #12]
 8017206:	681b      	ldr	r3, [r3, #0]
 8017208:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801720c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801720e:	69bb      	ldr	r3, [r7, #24]
 8017210:	3302      	adds	r3, #2
 8017212:	61bb      	str	r3, [r7, #24]
 8017214:	e007      	b.n	8017226 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8017216:	69fb      	ldr	r3, [r7, #28]
 8017218:	781a      	ldrb	r2, [r3, #0]
 801721a:	68fb      	ldr	r3, [r7, #12]
 801721c:	681b      	ldr	r3, [r3, #0]
 801721e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8017220:	69fb      	ldr	r3, [r7, #28]
 8017222:	3301      	adds	r3, #1
 8017224:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8017226:	68fb      	ldr	r3, [r7, #12]
 8017228:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801722c:	b29b      	uxth	r3, r3
 801722e:	3b01      	subs	r3, #1
 8017230:	b29a      	uxth	r2, r3
 8017232:	68fb      	ldr	r3, [r7, #12]
 8017234:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8017238:	68fb      	ldr	r3, [r7, #12]
 801723a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801723e:	b29b      	uxth	r3, r3
 8017240:	2b00      	cmp	r3, #0
 8017242:	d1cc      	bne.n	80171de <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8017244:	683b      	ldr	r3, [r7, #0]
 8017246:	9300      	str	r3, [sp, #0]
 8017248:	697b      	ldr	r3, [r7, #20]
 801724a:	2200      	movs	r2, #0
 801724c:	2140      	movs	r1, #64	; 0x40
 801724e:	68f8      	ldr	r0, [r7, #12]
 8017250:	f001 f865 	bl	801831e <UART_WaitOnFlagUntilTimeout>
 8017254:	4603      	mov	r3, r0
 8017256:	2b00      	cmp	r3, #0
 8017258:	d001      	beq.n	801725e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 801725a:	2303      	movs	r3, #3
 801725c:	e006      	b.n	801726c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801725e:	68fb      	ldr	r3, [r7, #12]
 8017260:	2220      	movs	r2, #32
 8017262:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8017266:	2300      	movs	r3, #0
 8017268:	e000      	b.n	801726c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 801726a:	2302      	movs	r3, #2
  }
}
 801726c:	4618      	mov	r0, r3
 801726e:	3720      	adds	r7, #32
 8017270:	46bd      	mov	sp, r7
 8017272:	bd80      	pop	{r7, pc}

08017274 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017274:	b580      	push	{r7, lr}
 8017276:	b08a      	sub	sp, #40	; 0x28
 8017278:	af02      	add	r7, sp, #8
 801727a:	60f8      	str	r0, [r7, #12]
 801727c:	60b9      	str	r1, [r7, #8]
 801727e:	603b      	str	r3, [r7, #0]
 8017280:	4613      	mov	r3, r2
 8017282:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8017284:	68fb      	ldr	r3, [r7, #12]
 8017286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801728a:	2b20      	cmp	r3, #32
 801728c:	f040 80c0 	bne.w	8017410 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8017290:	68bb      	ldr	r3, [r7, #8]
 8017292:	2b00      	cmp	r3, #0
 8017294:	d002      	beq.n	801729c <HAL_UART_Receive+0x28>
 8017296:	88fb      	ldrh	r3, [r7, #6]
 8017298:	2b00      	cmp	r3, #0
 801729a:	d101      	bne.n	80172a0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 801729c:	2301      	movs	r3, #1
 801729e:	e0b8      	b.n	8017412 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 80172a0:	68fb      	ldr	r3, [r7, #12]
 80172a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80172a6:	2b01      	cmp	r3, #1
 80172a8:	d101      	bne.n	80172ae <HAL_UART_Receive+0x3a>
 80172aa:	2302      	movs	r3, #2
 80172ac:	e0b1      	b.n	8017412 <HAL_UART_Receive+0x19e>
 80172ae:	68fb      	ldr	r3, [r7, #12]
 80172b0:	2201      	movs	r2, #1
 80172b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80172b6:	68fb      	ldr	r3, [r7, #12]
 80172b8:	2200      	movs	r2, #0
 80172ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80172be:	68fb      	ldr	r3, [r7, #12]
 80172c0:	2222      	movs	r2, #34	; 0x22
 80172c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80172c6:	68fb      	ldr	r3, [r7, #12]
 80172c8:	2200      	movs	r2, #0
 80172ca:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80172cc:	f7fa fdf8 	bl	8011ec0 <HAL_GetTick>
 80172d0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80172d2:	68fb      	ldr	r3, [r7, #12]
 80172d4:	88fa      	ldrh	r2, [r7, #6]
 80172d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80172da:	68fb      	ldr	r3, [r7, #12]
 80172dc:	88fa      	ldrh	r2, [r7, #6]
 80172de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80172e2:	68fb      	ldr	r3, [r7, #12]
 80172e4:	689b      	ldr	r3, [r3, #8]
 80172e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80172ea:	d10e      	bne.n	801730a <HAL_UART_Receive+0x96>
 80172ec:	68fb      	ldr	r3, [r7, #12]
 80172ee:	691b      	ldr	r3, [r3, #16]
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	d105      	bne.n	8017300 <HAL_UART_Receive+0x8c>
 80172f4:	68fb      	ldr	r3, [r7, #12]
 80172f6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80172fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80172fe:	e02d      	b.n	801735c <HAL_UART_Receive+0xe8>
 8017300:	68fb      	ldr	r3, [r7, #12]
 8017302:	22ff      	movs	r2, #255	; 0xff
 8017304:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8017308:	e028      	b.n	801735c <HAL_UART_Receive+0xe8>
 801730a:	68fb      	ldr	r3, [r7, #12]
 801730c:	689b      	ldr	r3, [r3, #8]
 801730e:	2b00      	cmp	r3, #0
 8017310:	d10d      	bne.n	801732e <HAL_UART_Receive+0xba>
 8017312:	68fb      	ldr	r3, [r7, #12]
 8017314:	691b      	ldr	r3, [r3, #16]
 8017316:	2b00      	cmp	r3, #0
 8017318:	d104      	bne.n	8017324 <HAL_UART_Receive+0xb0>
 801731a:	68fb      	ldr	r3, [r7, #12]
 801731c:	22ff      	movs	r2, #255	; 0xff
 801731e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8017322:	e01b      	b.n	801735c <HAL_UART_Receive+0xe8>
 8017324:	68fb      	ldr	r3, [r7, #12]
 8017326:	227f      	movs	r2, #127	; 0x7f
 8017328:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801732c:	e016      	b.n	801735c <HAL_UART_Receive+0xe8>
 801732e:	68fb      	ldr	r3, [r7, #12]
 8017330:	689b      	ldr	r3, [r3, #8]
 8017332:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8017336:	d10d      	bne.n	8017354 <HAL_UART_Receive+0xe0>
 8017338:	68fb      	ldr	r3, [r7, #12]
 801733a:	691b      	ldr	r3, [r3, #16]
 801733c:	2b00      	cmp	r3, #0
 801733e:	d104      	bne.n	801734a <HAL_UART_Receive+0xd6>
 8017340:	68fb      	ldr	r3, [r7, #12]
 8017342:	227f      	movs	r2, #127	; 0x7f
 8017344:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8017348:	e008      	b.n	801735c <HAL_UART_Receive+0xe8>
 801734a:	68fb      	ldr	r3, [r7, #12]
 801734c:	223f      	movs	r2, #63	; 0x3f
 801734e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8017352:	e003      	b.n	801735c <HAL_UART_Receive+0xe8>
 8017354:	68fb      	ldr	r3, [r7, #12]
 8017356:	2200      	movs	r2, #0
 8017358:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 801735c:	68fb      	ldr	r3, [r7, #12]
 801735e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017362:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017364:	68fb      	ldr	r3, [r7, #12]
 8017366:	689b      	ldr	r3, [r3, #8]
 8017368:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801736c:	d108      	bne.n	8017380 <HAL_UART_Receive+0x10c>
 801736e:	68fb      	ldr	r3, [r7, #12]
 8017370:	691b      	ldr	r3, [r3, #16]
 8017372:	2b00      	cmp	r3, #0
 8017374:	d104      	bne.n	8017380 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8017376:	2300      	movs	r3, #0
 8017378:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801737a:	68bb      	ldr	r3, [r7, #8]
 801737c:	61bb      	str	r3, [r7, #24]
 801737e:	e003      	b.n	8017388 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8017380:	68bb      	ldr	r3, [r7, #8]
 8017382:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8017384:	2300      	movs	r3, #0
 8017386:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8017388:	68fb      	ldr	r3, [r7, #12]
 801738a:	2200      	movs	r2, #0
 801738c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8017390:	e032      	b.n	80173f8 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8017392:	683b      	ldr	r3, [r7, #0]
 8017394:	9300      	str	r3, [sp, #0]
 8017396:	697b      	ldr	r3, [r7, #20]
 8017398:	2200      	movs	r2, #0
 801739a:	2120      	movs	r1, #32
 801739c:	68f8      	ldr	r0, [r7, #12]
 801739e:	f000 ffbe 	bl	801831e <UART_WaitOnFlagUntilTimeout>
 80173a2:	4603      	mov	r3, r0
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	d001      	beq.n	80173ac <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 80173a8:	2303      	movs	r3, #3
 80173aa:	e032      	b.n	8017412 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 80173ac:	69fb      	ldr	r3, [r7, #28]
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	d10c      	bne.n	80173cc <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80173b2:	68fb      	ldr	r3, [r7, #12]
 80173b4:	681b      	ldr	r3, [r3, #0]
 80173b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80173b8:	b29a      	uxth	r2, r3
 80173ba:	8a7b      	ldrh	r3, [r7, #18]
 80173bc:	4013      	ands	r3, r2
 80173be:	b29a      	uxth	r2, r3
 80173c0:	69bb      	ldr	r3, [r7, #24]
 80173c2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80173c4:	69bb      	ldr	r3, [r7, #24]
 80173c6:	3302      	adds	r3, #2
 80173c8:	61bb      	str	r3, [r7, #24]
 80173ca:	e00c      	b.n	80173e6 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80173cc:	68fb      	ldr	r3, [r7, #12]
 80173ce:	681b      	ldr	r3, [r3, #0]
 80173d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80173d2:	b2da      	uxtb	r2, r3
 80173d4:	8a7b      	ldrh	r3, [r7, #18]
 80173d6:	b2db      	uxtb	r3, r3
 80173d8:	4013      	ands	r3, r2
 80173da:	b2da      	uxtb	r2, r3
 80173dc:	69fb      	ldr	r3, [r7, #28]
 80173de:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80173e0:	69fb      	ldr	r3, [r7, #28]
 80173e2:	3301      	adds	r3, #1
 80173e4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80173e6:	68fb      	ldr	r3, [r7, #12]
 80173e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80173ec:	b29b      	uxth	r3, r3
 80173ee:	3b01      	subs	r3, #1
 80173f0:	b29a      	uxth	r2, r3
 80173f2:	68fb      	ldr	r3, [r7, #12]
 80173f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80173f8:	68fb      	ldr	r3, [r7, #12]
 80173fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80173fe:	b29b      	uxth	r3, r3
 8017400:	2b00      	cmp	r3, #0
 8017402:	d1c6      	bne.n	8017392 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8017404:	68fb      	ldr	r3, [r7, #12]
 8017406:	2220      	movs	r2, #32
 8017408:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 801740c:	2300      	movs	r3, #0
 801740e:	e000      	b.n	8017412 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8017410:	2302      	movs	r3, #2
  }
}
 8017412:	4618      	mov	r0, r3
 8017414:	3720      	adds	r7, #32
 8017416:	46bd      	mov	sp, r7
 8017418:	bd80      	pop	{r7, pc}
	...

0801741c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801741c:	b580      	push	{r7, lr}
 801741e:	b08a      	sub	sp, #40	; 0x28
 8017420:	af00      	add	r7, sp, #0
 8017422:	60f8      	str	r0, [r7, #12]
 8017424:	60b9      	str	r1, [r7, #8]
 8017426:	4613      	mov	r3, r2
 8017428:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801742a:	68fb      	ldr	r3, [r7, #12]
 801742c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017430:	2b20      	cmp	r3, #32
 8017432:	d142      	bne.n	80174ba <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8017434:	68bb      	ldr	r3, [r7, #8]
 8017436:	2b00      	cmp	r3, #0
 8017438:	d002      	beq.n	8017440 <HAL_UART_Receive_IT+0x24>
 801743a:	88fb      	ldrh	r3, [r7, #6]
 801743c:	2b00      	cmp	r3, #0
 801743e:	d101      	bne.n	8017444 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8017440:	2301      	movs	r3, #1
 8017442:	e03b      	b.n	80174bc <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8017444:	68fb      	ldr	r3, [r7, #12]
 8017446:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801744a:	2b01      	cmp	r3, #1
 801744c:	d101      	bne.n	8017452 <HAL_UART_Receive_IT+0x36>
 801744e:	2302      	movs	r3, #2
 8017450:	e034      	b.n	80174bc <HAL_UART_Receive_IT+0xa0>
 8017452:	68fb      	ldr	r3, [r7, #12]
 8017454:	2201      	movs	r2, #1
 8017456:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801745a:	68fb      	ldr	r3, [r7, #12]
 801745c:	2200      	movs	r2, #0
 801745e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017460:	68fb      	ldr	r3, [r7, #12]
 8017462:	681b      	ldr	r3, [r3, #0]
 8017464:	4a17      	ldr	r2, [pc, #92]	; (80174c4 <HAL_UART_Receive_IT+0xa8>)
 8017466:	4293      	cmp	r3, r2
 8017468:	d01f      	beq.n	80174aa <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801746a:	68fb      	ldr	r3, [r7, #12]
 801746c:	681b      	ldr	r3, [r3, #0]
 801746e:	685b      	ldr	r3, [r3, #4]
 8017470:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017474:	2b00      	cmp	r3, #0
 8017476:	d018      	beq.n	80174aa <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017478:	68fb      	ldr	r3, [r7, #12]
 801747a:	681b      	ldr	r3, [r3, #0]
 801747c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801747e:	697b      	ldr	r3, [r7, #20]
 8017480:	e853 3f00 	ldrex	r3, [r3]
 8017484:	613b      	str	r3, [r7, #16]
   return(result);
 8017486:	693b      	ldr	r3, [r7, #16]
 8017488:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801748c:	627b      	str	r3, [r7, #36]	; 0x24
 801748e:	68fb      	ldr	r3, [r7, #12]
 8017490:	681b      	ldr	r3, [r3, #0]
 8017492:	461a      	mov	r2, r3
 8017494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017496:	623b      	str	r3, [r7, #32]
 8017498:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801749a:	69f9      	ldr	r1, [r7, #28]
 801749c:	6a3a      	ldr	r2, [r7, #32]
 801749e:	e841 2300 	strex	r3, r2, [r1]
 80174a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80174a4:	69bb      	ldr	r3, [r7, #24]
 80174a6:	2b00      	cmp	r3, #0
 80174a8:	d1e6      	bne.n	8017478 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80174aa:	88fb      	ldrh	r3, [r7, #6]
 80174ac:	461a      	mov	r2, r3
 80174ae:	68b9      	ldr	r1, [r7, #8]
 80174b0:	68f8      	ldr	r0, [r7, #12]
 80174b2:	f000 fffd 	bl	80184b0 <UART_Start_Receive_IT>
 80174b6:	4603      	mov	r3, r0
 80174b8:	e000      	b.n	80174bc <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80174ba:	2302      	movs	r3, #2
  }
}
 80174bc:	4618      	mov	r0, r3
 80174be:	3728      	adds	r7, #40	; 0x28
 80174c0:	46bd      	mov	sp, r7
 80174c2:	bd80      	pop	{r7, pc}
 80174c4:	40008000 	.word	0x40008000

080174c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80174c8:	b580      	push	{r7, lr}
 80174ca:	b0ba      	sub	sp, #232	; 0xe8
 80174cc:	af00      	add	r7, sp, #0
 80174ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	681b      	ldr	r3, [r3, #0]
 80174d4:	69db      	ldr	r3, [r3, #28]
 80174d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	681b      	ldr	r3, [r3, #0]
 80174de:	681b      	ldr	r3, [r3, #0]
 80174e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	681b      	ldr	r3, [r3, #0]
 80174e8:	689b      	ldr	r3, [r3, #8]
 80174ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80174ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80174f2:	f640 030f 	movw	r3, #2063	; 0x80f
 80174f6:	4013      	ands	r3, r2
 80174f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80174fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8017500:	2b00      	cmp	r3, #0
 8017502:	d11b      	bne.n	801753c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8017504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017508:	f003 0320 	and.w	r3, r3, #32
 801750c:	2b00      	cmp	r3, #0
 801750e:	d015      	beq.n	801753c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8017510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017514:	f003 0320 	and.w	r3, r3, #32
 8017518:	2b00      	cmp	r3, #0
 801751a:	d105      	bne.n	8017528 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801751c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8017520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017524:	2b00      	cmp	r3, #0
 8017526:	d009      	beq.n	801753c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801752c:	2b00      	cmp	r3, #0
 801752e:	f000 82d6 	beq.w	8017ade <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017536:	6878      	ldr	r0, [r7, #4]
 8017538:	4798      	blx	r3
      }
      return;
 801753a:	e2d0      	b.n	8017ade <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801753c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8017540:	2b00      	cmp	r3, #0
 8017542:	f000 811f 	beq.w	8017784 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8017546:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801754a:	4b8b      	ldr	r3, [pc, #556]	; (8017778 <HAL_UART_IRQHandler+0x2b0>)
 801754c:	4013      	ands	r3, r2
 801754e:	2b00      	cmp	r3, #0
 8017550:	d106      	bne.n	8017560 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8017552:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8017556:	4b89      	ldr	r3, [pc, #548]	; (801777c <HAL_UART_IRQHandler+0x2b4>)
 8017558:	4013      	ands	r3, r2
 801755a:	2b00      	cmp	r3, #0
 801755c:	f000 8112 	beq.w	8017784 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8017560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017564:	f003 0301 	and.w	r3, r3, #1
 8017568:	2b00      	cmp	r3, #0
 801756a:	d011      	beq.n	8017590 <HAL_UART_IRQHandler+0xc8>
 801756c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017574:	2b00      	cmp	r3, #0
 8017576:	d00b      	beq.n	8017590 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	681b      	ldr	r3, [r3, #0]
 801757c:	2201      	movs	r2, #1
 801757e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017586:	f043 0201 	orr.w	r2, r3, #1
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017594:	f003 0302 	and.w	r3, r3, #2
 8017598:	2b00      	cmp	r3, #0
 801759a:	d011      	beq.n	80175c0 <HAL_UART_IRQHandler+0xf8>
 801759c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80175a0:	f003 0301 	and.w	r3, r3, #1
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	d00b      	beq.n	80175c0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	681b      	ldr	r3, [r3, #0]
 80175ac:	2202      	movs	r2, #2
 80175ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80175b6:	f043 0204 	orr.w	r2, r3, #4
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80175c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80175c4:	f003 0304 	and.w	r3, r3, #4
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	d011      	beq.n	80175f0 <HAL_UART_IRQHandler+0x128>
 80175cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80175d0:	f003 0301 	and.w	r3, r3, #1
 80175d4:	2b00      	cmp	r3, #0
 80175d6:	d00b      	beq.n	80175f0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	681b      	ldr	r3, [r3, #0]
 80175dc:	2204      	movs	r2, #4
 80175de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80175e6:	f043 0202 	orr.w	r2, r3, #2
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80175f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80175f4:	f003 0308 	and.w	r3, r3, #8
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d017      	beq.n	801762c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80175fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017600:	f003 0320 	and.w	r3, r3, #32
 8017604:	2b00      	cmp	r3, #0
 8017606:	d105      	bne.n	8017614 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8017608:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801760c:	4b5a      	ldr	r3, [pc, #360]	; (8017778 <HAL_UART_IRQHandler+0x2b0>)
 801760e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8017610:	2b00      	cmp	r3, #0
 8017612:	d00b      	beq.n	801762c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	681b      	ldr	r3, [r3, #0]
 8017618:	2208      	movs	r2, #8
 801761a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017622:	f043 0208 	orr.w	r2, r3, #8
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801762c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017630:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017634:	2b00      	cmp	r3, #0
 8017636:	d012      	beq.n	801765e <HAL_UART_IRQHandler+0x196>
 8017638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801763c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8017640:	2b00      	cmp	r3, #0
 8017642:	d00c      	beq.n	801765e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	681b      	ldr	r3, [r3, #0]
 8017648:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801764c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017654:	f043 0220 	orr.w	r2, r3, #32
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017664:	2b00      	cmp	r3, #0
 8017666:	f000 823c 	beq.w	8017ae2 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801766a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801766e:	f003 0320 	and.w	r3, r3, #32
 8017672:	2b00      	cmp	r3, #0
 8017674:	d013      	beq.n	801769e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8017676:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801767a:	f003 0320 	and.w	r3, r3, #32
 801767e:	2b00      	cmp	r3, #0
 8017680:	d105      	bne.n	801768e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8017682:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8017686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801768a:	2b00      	cmp	r3, #0
 801768c:	d007      	beq.n	801769e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017692:	2b00      	cmp	r3, #0
 8017694:	d003      	beq.n	801769e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801769a:	6878      	ldr	r0, [r7, #4]
 801769c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80176a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80176a8:	687b      	ldr	r3, [r7, #4]
 80176aa:	681b      	ldr	r3, [r3, #0]
 80176ac:	689b      	ldr	r3, [r3, #8]
 80176ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80176b2:	2b40      	cmp	r3, #64	; 0x40
 80176b4:	d005      	beq.n	80176c2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80176b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80176ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80176be:	2b00      	cmp	r3, #0
 80176c0:	d04f      	beq.n	8017762 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80176c2:	6878      	ldr	r0, [r7, #4]
 80176c4:	f001 f81e 	bl	8018704 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	681b      	ldr	r3, [r3, #0]
 80176cc:	689b      	ldr	r3, [r3, #8]
 80176ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80176d2:	2b40      	cmp	r3, #64	; 0x40
 80176d4:	d141      	bne.n	801775a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	681b      	ldr	r3, [r3, #0]
 80176da:	3308      	adds	r3, #8
 80176dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80176e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80176e4:	e853 3f00 	ldrex	r3, [r3]
 80176e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80176ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80176f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80176f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	681b      	ldr	r3, [r3, #0]
 80176fc:	3308      	adds	r3, #8
 80176fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8017702:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8017706:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801770a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801770e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8017712:	e841 2300 	strex	r3, r2, [r1]
 8017716:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801771a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801771e:	2b00      	cmp	r3, #0
 8017720:	d1d9      	bne.n	80176d6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8017722:	687b      	ldr	r3, [r7, #4]
 8017724:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017726:	2b00      	cmp	r3, #0
 8017728:	d013      	beq.n	8017752 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801772e:	4a14      	ldr	r2, [pc, #80]	; (8017780 <HAL_UART_IRQHandler+0x2b8>)
 8017730:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017736:	4618      	mov	r0, r3
 8017738:	f7fc f858 	bl	80137ec <HAL_DMA_Abort_IT>
 801773c:	4603      	mov	r3, r0
 801773e:	2b00      	cmp	r3, #0
 8017740:	d017      	beq.n	8017772 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8017742:	687b      	ldr	r3, [r7, #4]
 8017744:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017748:	687a      	ldr	r2, [r7, #4]
 801774a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 801774c:	4610      	mov	r0, r2
 801774e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017750:	e00f      	b.n	8017772 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8017752:	6878      	ldr	r0, [r7, #4]
 8017754:	f000 f9e4 	bl	8017b20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017758:	e00b      	b.n	8017772 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801775a:	6878      	ldr	r0, [r7, #4]
 801775c:	f000 f9e0 	bl	8017b20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017760:	e007      	b.n	8017772 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8017762:	6878      	ldr	r0, [r7, #4]
 8017764:	f000 f9dc 	bl	8017b20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017768:	687b      	ldr	r3, [r7, #4]
 801776a:	2200      	movs	r2, #0
 801776c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8017770:	e1b7      	b.n	8017ae2 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017772:	bf00      	nop
    return;
 8017774:	e1b5      	b.n	8017ae2 <HAL_UART_IRQHandler+0x61a>
 8017776:	bf00      	nop
 8017778:	10000001 	.word	0x10000001
 801777c:	04000120 	.word	0x04000120
 8017780:	080187d1 	.word	0x080187d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017788:	2b01      	cmp	r3, #1
 801778a:	f040 814a 	bne.w	8017a22 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801778e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017792:	f003 0310 	and.w	r3, r3, #16
 8017796:	2b00      	cmp	r3, #0
 8017798:	f000 8143 	beq.w	8017a22 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801779c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80177a0:	f003 0310 	and.w	r3, r3, #16
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	f000 813c 	beq.w	8017a22 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	681b      	ldr	r3, [r3, #0]
 80177ae:	2210      	movs	r2, #16
 80177b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	681b      	ldr	r3, [r3, #0]
 80177b6:	689b      	ldr	r3, [r3, #8]
 80177b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80177bc:	2b40      	cmp	r3, #64	; 0x40
 80177be:	f040 80b5 	bne.w	801792c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80177c6:	681b      	ldr	r3, [r3, #0]
 80177c8:	685b      	ldr	r3, [r3, #4]
 80177ca:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80177ce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80177d2:	2b00      	cmp	r3, #0
 80177d4:	f000 8187 	beq.w	8017ae6 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80177de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80177e2:	429a      	cmp	r2, r3
 80177e4:	f080 817f 	bcs.w	8017ae6 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80177e8:	687b      	ldr	r3, [r7, #4]
 80177ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80177ee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80177f6:	681b      	ldr	r3, [r3, #0]
 80177f8:	681b      	ldr	r3, [r3, #0]
 80177fa:	f003 0320 	and.w	r3, r3, #32
 80177fe:	2b00      	cmp	r3, #0
 8017800:	f040 8086 	bne.w	8017910 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	681b      	ldr	r3, [r3, #0]
 8017808:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801780c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8017810:	e853 3f00 	ldrex	r3, [r3]
 8017814:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8017818:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801781c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017820:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8017824:	687b      	ldr	r3, [r7, #4]
 8017826:	681b      	ldr	r3, [r3, #0]
 8017828:	461a      	mov	r2, r3
 801782a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801782e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8017832:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017836:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801783a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801783e:	e841 2300 	strex	r3, r2, [r1]
 8017842:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8017846:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801784a:	2b00      	cmp	r3, #0
 801784c:	d1da      	bne.n	8017804 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801784e:	687b      	ldr	r3, [r7, #4]
 8017850:	681b      	ldr	r3, [r3, #0]
 8017852:	3308      	adds	r3, #8
 8017854:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017856:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017858:	e853 3f00 	ldrex	r3, [r3]
 801785c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801785e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017860:	f023 0301 	bic.w	r3, r3, #1
 8017864:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	681b      	ldr	r3, [r3, #0]
 801786c:	3308      	adds	r3, #8
 801786e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8017872:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8017876:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017878:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801787a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801787e:	e841 2300 	strex	r3, r2, [r1]
 8017882:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8017884:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017886:	2b00      	cmp	r3, #0
 8017888:	d1e1      	bne.n	801784e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801788a:	687b      	ldr	r3, [r7, #4]
 801788c:	681b      	ldr	r3, [r3, #0]
 801788e:	3308      	adds	r3, #8
 8017890:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017892:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017894:	e853 3f00 	ldrex	r3, [r3]
 8017898:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801789a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801789c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80178a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80178a4:	687b      	ldr	r3, [r7, #4]
 80178a6:	681b      	ldr	r3, [r3, #0]
 80178a8:	3308      	adds	r3, #8
 80178aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80178ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80178b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80178b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80178b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80178b6:	e841 2300 	strex	r3, r2, [r1]
 80178ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80178bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80178be:	2b00      	cmp	r3, #0
 80178c0:	d1e3      	bne.n	801788a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80178c2:	687b      	ldr	r3, [r7, #4]
 80178c4:	2220      	movs	r2, #32
 80178c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	2200      	movs	r2, #0
 80178ce:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	681b      	ldr	r3, [r3, #0]
 80178d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80178d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80178d8:	e853 3f00 	ldrex	r3, [r3]
 80178dc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80178de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80178e0:	f023 0310 	bic.w	r3, r3, #16
 80178e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	681b      	ldr	r3, [r3, #0]
 80178ec:	461a      	mov	r2, r3
 80178ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80178f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80178f4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80178f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80178f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80178fa:	e841 2300 	strex	r3, r2, [r1]
 80178fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8017900:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017902:	2b00      	cmp	r3, #0
 8017904:	d1e4      	bne.n	80178d0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801790a:	4618      	mov	r0, r3
 801790c:	f7fb ff15 	bl	801373a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801791c:	b29b      	uxth	r3, r3
 801791e:	1ad3      	subs	r3, r2, r3
 8017920:	b29b      	uxth	r3, r3
 8017922:	4619      	mov	r1, r3
 8017924:	6878      	ldr	r0, [r7, #4]
 8017926:	f000 f905 	bl	8017b34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801792a:	e0dc      	b.n	8017ae6 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017938:	b29b      	uxth	r3, r3
 801793a:	1ad3      	subs	r3, r2, r3
 801793c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017946:	b29b      	uxth	r3, r3
 8017948:	2b00      	cmp	r3, #0
 801794a:	f000 80ce 	beq.w	8017aea <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 801794e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8017952:	2b00      	cmp	r3, #0
 8017954:	f000 80c9 	beq.w	8017aea <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8017958:	687b      	ldr	r3, [r7, #4]
 801795a:	681b      	ldr	r3, [r3, #0]
 801795c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801795e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017960:	e853 3f00 	ldrex	r3, [r3]
 8017964:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8017966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017968:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801796c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	681b      	ldr	r3, [r3, #0]
 8017974:	461a      	mov	r2, r3
 8017976:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801797a:	647b      	str	r3, [r7, #68]	; 0x44
 801797c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801797e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017980:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017982:	e841 2300 	strex	r3, r2, [r1]
 8017986:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8017988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801798a:	2b00      	cmp	r3, #0
 801798c:	d1e4      	bne.n	8017958 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	681b      	ldr	r3, [r3, #0]
 8017992:	3308      	adds	r3, #8
 8017994:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017998:	e853 3f00 	ldrex	r3, [r3]
 801799c:	623b      	str	r3, [r7, #32]
   return(result);
 801799e:	6a3b      	ldr	r3, [r7, #32]
 80179a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80179a4:	f023 0301 	bic.w	r3, r3, #1
 80179a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	681b      	ldr	r3, [r3, #0]
 80179b0:	3308      	adds	r3, #8
 80179b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80179b6:	633a      	str	r2, [r7, #48]	; 0x30
 80179b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80179ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80179bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80179be:	e841 2300 	strex	r3, r2, [r1]
 80179c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80179c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179c6:	2b00      	cmp	r3, #0
 80179c8:	d1e1      	bne.n	801798e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	2220      	movs	r2, #32
 80179ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	2200      	movs	r2, #0
 80179d6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	2200      	movs	r2, #0
 80179dc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	681b      	ldr	r3, [r3, #0]
 80179e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80179e4:	693b      	ldr	r3, [r7, #16]
 80179e6:	e853 3f00 	ldrex	r3, [r3]
 80179ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80179ec:	68fb      	ldr	r3, [r7, #12]
 80179ee:	f023 0310 	bic.w	r3, r3, #16
 80179f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	681b      	ldr	r3, [r3, #0]
 80179fa:	461a      	mov	r2, r3
 80179fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8017a00:	61fb      	str	r3, [r7, #28]
 8017a02:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017a04:	69b9      	ldr	r1, [r7, #24]
 8017a06:	69fa      	ldr	r2, [r7, #28]
 8017a08:	e841 2300 	strex	r3, r2, [r1]
 8017a0c:	617b      	str	r3, [r7, #20]
   return(result);
 8017a0e:	697b      	ldr	r3, [r7, #20]
 8017a10:	2b00      	cmp	r3, #0
 8017a12:	d1e4      	bne.n	80179de <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8017a14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8017a18:	4619      	mov	r1, r3
 8017a1a:	6878      	ldr	r0, [r7, #4]
 8017a1c:	f000 f88a 	bl	8017b34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8017a20:	e063      	b.n	8017aea <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8017a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017a26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	d00e      	beq.n	8017a4c <HAL_UART_IRQHandler+0x584>
 8017a2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8017a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8017a36:	2b00      	cmp	r3, #0
 8017a38:	d008      	beq.n	8017a4c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8017a3a:	687b      	ldr	r3, [r7, #4]
 8017a3c:	681b      	ldr	r3, [r3, #0]
 8017a3e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8017a42:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8017a44:	6878      	ldr	r0, [r7, #4]
 8017a46:	f001 fb61 	bl	801910c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8017a4a:	e051      	b.n	8017af0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8017a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017a54:	2b00      	cmp	r3, #0
 8017a56:	d014      	beq.n	8017a82 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8017a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d105      	bne.n	8017a70 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8017a64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8017a68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	d008      	beq.n	8017a82 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017a74:	2b00      	cmp	r3, #0
 8017a76:	d03a      	beq.n	8017aee <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8017a78:	687b      	ldr	r3, [r7, #4]
 8017a7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017a7c:	6878      	ldr	r0, [r7, #4]
 8017a7e:	4798      	blx	r3
    }
    return;
 8017a80:	e035      	b.n	8017aee <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8017a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	d009      	beq.n	8017aa2 <HAL_UART_IRQHandler+0x5da>
 8017a8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017a96:	2b00      	cmp	r3, #0
 8017a98:	d003      	beq.n	8017aa2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8017a9a:	6878      	ldr	r0, [r7, #4]
 8017a9c:	f000 feae 	bl	80187fc <UART_EndTransmit_IT>
    return;
 8017aa0:	e026      	b.n	8017af0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8017aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017aa6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017aaa:	2b00      	cmp	r3, #0
 8017aac:	d009      	beq.n	8017ac2 <HAL_UART_IRQHandler+0x5fa>
 8017aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017ab2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8017ab6:	2b00      	cmp	r3, #0
 8017ab8:	d003      	beq.n	8017ac2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8017aba:	6878      	ldr	r0, [r7, #4]
 8017abc:	f001 fb3a 	bl	8019134 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8017ac0:	e016      	b.n	8017af0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8017ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017ac6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8017aca:	2b00      	cmp	r3, #0
 8017acc:	d010      	beq.n	8017af0 <HAL_UART_IRQHandler+0x628>
 8017ace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017ad2:	2b00      	cmp	r3, #0
 8017ad4:	da0c      	bge.n	8017af0 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8017ad6:	6878      	ldr	r0, [r7, #4]
 8017ad8:	f001 fb22 	bl	8019120 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8017adc:	e008      	b.n	8017af0 <HAL_UART_IRQHandler+0x628>
      return;
 8017ade:	bf00      	nop
 8017ae0:	e006      	b.n	8017af0 <HAL_UART_IRQHandler+0x628>
    return;
 8017ae2:	bf00      	nop
 8017ae4:	e004      	b.n	8017af0 <HAL_UART_IRQHandler+0x628>
      return;
 8017ae6:	bf00      	nop
 8017ae8:	e002      	b.n	8017af0 <HAL_UART_IRQHandler+0x628>
      return;
 8017aea:	bf00      	nop
 8017aec:	e000      	b.n	8017af0 <HAL_UART_IRQHandler+0x628>
    return;
 8017aee:	bf00      	nop
  }
}
 8017af0:	37e8      	adds	r7, #232	; 0xe8
 8017af2:	46bd      	mov	sp, r7
 8017af4:	bd80      	pop	{r7, pc}
 8017af6:	bf00      	nop

08017af8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8017af8:	b480      	push	{r7}
 8017afa:	b083      	sub	sp, #12
 8017afc:	af00      	add	r7, sp, #0
 8017afe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8017b00:	bf00      	nop
 8017b02:	370c      	adds	r7, #12
 8017b04:	46bd      	mov	sp, r7
 8017b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b0a:	4770      	bx	lr

08017b0c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8017b0c:	b480      	push	{r7}
 8017b0e:	b083      	sub	sp, #12
 8017b10:	af00      	add	r7, sp, #0
 8017b12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8017b14:	bf00      	nop
 8017b16:	370c      	adds	r7, #12
 8017b18:	46bd      	mov	sp, r7
 8017b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b1e:	4770      	bx	lr

08017b20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8017b20:	b480      	push	{r7}
 8017b22:	b083      	sub	sp, #12
 8017b24:	af00      	add	r7, sp, #0
 8017b26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8017b28:	bf00      	nop
 8017b2a:	370c      	adds	r7, #12
 8017b2c:	46bd      	mov	sp, r7
 8017b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b32:	4770      	bx	lr

08017b34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8017b34:	b480      	push	{r7}
 8017b36:	b083      	sub	sp, #12
 8017b38:	af00      	add	r7, sp, #0
 8017b3a:	6078      	str	r0, [r7, #4]
 8017b3c:	460b      	mov	r3, r1
 8017b3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8017b40:	bf00      	nop
 8017b42:	370c      	adds	r7, #12
 8017b44:	46bd      	mov	sp, r7
 8017b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b4a:	4770      	bx	lr

08017b4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8017b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8017b50:	b08c      	sub	sp, #48	; 0x30
 8017b52:	af00      	add	r7, sp, #0
 8017b54:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8017b56:	2300      	movs	r3, #0
 8017b58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8017b5c:	697b      	ldr	r3, [r7, #20]
 8017b5e:	689a      	ldr	r2, [r3, #8]
 8017b60:	697b      	ldr	r3, [r7, #20]
 8017b62:	691b      	ldr	r3, [r3, #16]
 8017b64:	431a      	orrs	r2, r3
 8017b66:	697b      	ldr	r3, [r7, #20]
 8017b68:	695b      	ldr	r3, [r3, #20]
 8017b6a:	431a      	orrs	r2, r3
 8017b6c:	697b      	ldr	r3, [r7, #20]
 8017b6e:	69db      	ldr	r3, [r3, #28]
 8017b70:	4313      	orrs	r3, r2
 8017b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8017b74:	697b      	ldr	r3, [r7, #20]
 8017b76:	681b      	ldr	r3, [r3, #0]
 8017b78:	681a      	ldr	r2, [r3, #0]
 8017b7a:	4baa      	ldr	r3, [pc, #680]	; (8017e24 <UART_SetConfig+0x2d8>)
 8017b7c:	4013      	ands	r3, r2
 8017b7e:	697a      	ldr	r2, [r7, #20]
 8017b80:	6812      	ldr	r2, [r2, #0]
 8017b82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017b84:	430b      	orrs	r3, r1
 8017b86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8017b88:	697b      	ldr	r3, [r7, #20]
 8017b8a:	681b      	ldr	r3, [r3, #0]
 8017b8c:	685b      	ldr	r3, [r3, #4]
 8017b8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8017b92:	697b      	ldr	r3, [r7, #20]
 8017b94:	68da      	ldr	r2, [r3, #12]
 8017b96:	697b      	ldr	r3, [r7, #20]
 8017b98:	681b      	ldr	r3, [r3, #0]
 8017b9a:	430a      	orrs	r2, r1
 8017b9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8017b9e:	697b      	ldr	r3, [r7, #20]
 8017ba0:	699b      	ldr	r3, [r3, #24]
 8017ba2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8017ba4:	697b      	ldr	r3, [r7, #20]
 8017ba6:	681b      	ldr	r3, [r3, #0]
 8017ba8:	4a9f      	ldr	r2, [pc, #636]	; (8017e28 <UART_SetConfig+0x2dc>)
 8017baa:	4293      	cmp	r3, r2
 8017bac:	d004      	beq.n	8017bb8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8017bae:	697b      	ldr	r3, [r7, #20]
 8017bb0:	6a1b      	ldr	r3, [r3, #32]
 8017bb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017bb4:	4313      	orrs	r3, r2
 8017bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8017bb8:	697b      	ldr	r3, [r7, #20]
 8017bba:	681b      	ldr	r3, [r3, #0]
 8017bbc:	689b      	ldr	r3, [r3, #8]
 8017bbe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8017bc2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8017bc6:	697a      	ldr	r2, [r7, #20]
 8017bc8:	6812      	ldr	r2, [r2, #0]
 8017bca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017bcc:	430b      	orrs	r3, r1
 8017bce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8017bd0:	697b      	ldr	r3, [r7, #20]
 8017bd2:	681b      	ldr	r3, [r3, #0]
 8017bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017bd6:	f023 010f 	bic.w	r1, r3, #15
 8017bda:	697b      	ldr	r3, [r7, #20]
 8017bdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017bde:	697b      	ldr	r3, [r7, #20]
 8017be0:	681b      	ldr	r3, [r3, #0]
 8017be2:	430a      	orrs	r2, r1
 8017be4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8017be6:	697b      	ldr	r3, [r7, #20]
 8017be8:	681b      	ldr	r3, [r3, #0]
 8017bea:	4a90      	ldr	r2, [pc, #576]	; (8017e2c <UART_SetConfig+0x2e0>)
 8017bec:	4293      	cmp	r3, r2
 8017bee:	d125      	bne.n	8017c3c <UART_SetConfig+0xf0>
 8017bf0:	4b8f      	ldr	r3, [pc, #572]	; (8017e30 <UART_SetConfig+0x2e4>)
 8017bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017bf6:	f003 0303 	and.w	r3, r3, #3
 8017bfa:	2b03      	cmp	r3, #3
 8017bfc:	d81a      	bhi.n	8017c34 <UART_SetConfig+0xe8>
 8017bfe:	a201      	add	r2, pc, #4	; (adr r2, 8017c04 <UART_SetConfig+0xb8>)
 8017c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017c04:	08017c15 	.word	0x08017c15
 8017c08:	08017c25 	.word	0x08017c25
 8017c0c:	08017c1d 	.word	0x08017c1d
 8017c10:	08017c2d 	.word	0x08017c2d
 8017c14:	2301      	movs	r3, #1
 8017c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017c1a:	e116      	b.n	8017e4a <UART_SetConfig+0x2fe>
 8017c1c:	2302      	movs	r3, #2
 8017c1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017c22:	e112      	b.n	8017e4a <UART_SetConfig+0x2fe>
 8017c24:	2304      	movs	r3, #4
 8017c26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017c2a:	e10e      	b.n	8017e4a <UART_SetConfig+0x2fe>
 8017c2c:	2308      	movs	r3, #8
 8017c2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017c32:	e10a      	b.n	8017e4a <UART_SetConfig+0x2fe>
 8017c34:	2310      	movs	r3, #16
 8017c36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017c3a:	e106      	b.n	8017e4a <UART_SetConfig+0x2fe>
 8017c3c:	697b      	ldr	r3, [r7, #20]
 8017c3e:	681b      	ldr	r3, [r3, #0]
 8017c40:	4a7c      	ldr	r2, [pc, #496]	; (8017e34 <UART_SetConfig+0x2e8>)
 8017c42:	4293      	cmp	r3, r2
 8017c44:	d138      	bne.n	8017cb8 <UART_SetConfig+0x16c>
 8017c46:	4b7a      	ldr	r3, [pc, #488]	; (8017e30 <UART_SetConfig+0x2e4>)
 8017c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017c4c:	f003 030c 	and.w	r3, r3, #12
 8017c50:	2b0c      	cmp	r3, #12
 8017c52:	d82d      	bhi.n	8017cb0 <UART_SetConfig+0x164>
 8017c54:	a201      	add	r2, pc, #4	; (adr r2, 8017c5c <UART_SetConfig+0x110>)
 8017c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017c5a:	bf00      	nop
 8017c5c:	08017c91 	.word	0x08017c91
 8017c60:	08017cb1 	.word	0x08017cb1
 8017c64:	08017cb1 	.word	0x08017cb1
 8017c68:	08017cb1 	.word	0x08017cb1
 8017c6c:	08017ca1 	.word	0x08017ca1
 8017c70:	08017cb1 	.word	0x08017cb1
 8017c74:	08017cb1 	.word	0x08017cb1
 8017c78:	08017cb1 	.word	0x08017cb1
 8017c7c:	08017c99 	.word	0x08017c99
 8017c80:	08017cb1 	.word	0x08017cb1
 8017c84:	08017cb1 	.word	0x08017cb1
 8017c88:	08017cb1 	.word	0x08017cb1
 8017c8c:	08017ca9 	.word	0x08017ca9
 8017c90:	2300      	movs	r3, #0
 8017c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017c96:	e0d8      	b.n	8017e4a <UART_SetConfig+0x2fe>
 8017c98:	2302      	movs	r3, #2
 8017c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017c9e:	e0d4      	b.n	8017e4a <UART_SetConfig+0x2fe>
 8017ca0:	2304      	movs	r3, #4
 8017ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017ca6:	e0d0      	b.n	8017e4a <UART_SetConfig+0x2fe>
 8017ca8:	2308      	movs	r3, #8
 8017caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017cae:	e0cc      	b.n	8017e4a <UART_SetConfig+0x2fe>
 8017cb0:	2310      	movs	r3, #16
 8017cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017cb6:	e0c8      	b.n	8017e4a <UART_SetConfig+0x2fe>
 8017cb8:	697b      	ldr	r3, [r7, #20]
 8017cba:	681b      	ldr	r3, [r3, #0]
 8017cbc:	4a5e      	ldr	r2, [pc, #376]	; (8017e38 <UART_SetConfig+0x2ec>)
 8017cbe:	4293      	cmp	r3, r2
 8017cc0:	d125      	bne.n	8017d0e <UART_SetConfig+0x1c2>
 8017cc2:	4b5b      	ldr	r3, [pc, #364]	; (8017e30 <UART_SetConfig+0x2e4>)
 8017cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017cc8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8017ccc:	2b30      	cmp	r3, #48	; 0x30
 8017cce:	d016      	beq.n	8017cfe <UART_SetConfig+0x1b2>
 8017cd0:	2b30      	cmp	r3, #48	; 0x30
 8017cd2:	d818      	bhi.n	8017d06 <UART_SetConfig+0x1ba>
 8017cd4:	2b20      	cmp	r3, #32
 8017cd6:	d00a      	beq.n	8017cee <UART_SetConfig+0x1a2>
 8017cd8:	2b20      	cmp	r3, #32
 8017cda:	d814      	bhi.n	8017d06 <UART_SetConfig+0x1ba>
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	d002      	beq.n	8017ce6 <UART_SetConfig+0x19a>
 8017ce0:	2b10      	cmp	r3, #16
 8017ce2:	d008      	beq.n	8017cf6 <UART_SetConfig+0x1aa>
 8017ce4:	e00f      	b.n	8017d06 <UART_SetConfig+0x1ba>
 8017ce6:	2300      	movs	r3, #0
 8017ce8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017cec:	e0ad      	b.n	8017e4a <UART_SetConfig+0x2fe>
 8017cee:	2302      	movs	r3, #2
 8017cf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017cf4:	e0a9      	b.n	8017e4a <UART_SetConfig+0x2fe>
 8017cf6:	2304      	movs	r3, #4
 8017cf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017cfc:	e0a5      	b.n	8017e4a <UART_SetConfig+0x2fe>
 8017cfe:	2308      	movs	r3, #8
 8017d00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017d04:	e0a1      	b.n	8017e4a <UART_SetConfig+0x2fe>
 8017d06:	2310      	movs	r3, #16
 8017d08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017d0c:	e09d      	b.n	8017e4a <UART_SetConfig+0x2fe>
 8017d0e:	697b      	ldr	r3, [r7, #20]
 8017d10:	681b      	ldr	r3, [r3, #0]
 8017d12:	4a4a      	ldr	r2, [pc, #296]	; (8017e3c <UART_SetConfig+0x2f0>)
 8017d14:	4293      	cmp	r3, r2
 8017d16:	d125      	bne.n	8017d64 <UART_SetConfig+0x218>
 8017d18:	4b45      	ldr	r3, [pc, #276]	; (8017e30 <UART_SetConfig+0x2e4>)
 8017d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017d1e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8017d22:	2bc0      	cmp	r3, #192	; 0xc0
 8017d24:	d016      	beq.n	8017d54 <UART_SetConfig+0x208>
 8017d26:	2bc0      	cmp	r3, #192	; 0xc0
 8017d28:	d818      	bhi.n	8017d5c <UART_SetConfig+0x210>
 8017d2a:	2b80      	cmp	r3, #128	; 0x80
 8017d2c:	d00a      	beq.n	8017d44 <UART_SetConfig+0x1f8>
 8017d2e:	2b80      	cmp	r3, #128	; 0x80
 8017d30:	d814      	bhi.n	8017d5c <UART_SetConfig+0x210>
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	d002      	beq.n	8017d3c <UART_SetConfig+0x1f0>
 8017d36:	2b40      	cmp	r3, #64	; 0x40
 8017d38:	d008      	beq.n	8017d4c <UART_SetConfig+0x200>
 8017d3a:	e00f      	b.n	8017d5c <UART_SetConfig+0x210>
 8017d3c:	2300      	movs	r3, #0
 8017d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017d42:	e082      	b.n	8017e4a <UART_SetConfig+0x2fe>
 8017d44:	2302      	movs	r3, #2
 8017d46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017d4a:	e07e      	b.n	8017e4a <UART_SetConfig+0x2fe>
 8017d4c:	2304      	movs	r3, #4
 8017d4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017d52:	e07a      	b.n	8017e4a <UART_SetConfig+0x2fe>
 8017d54:	2308      	movs	r3, #8
 8017d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017d5a:	e076      	b.n	8017e4a <UART_SetConfig+0x2fe>
 8017d5c:	2310      	movs	r3, #16
 8017d5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017d62:	e072      	b.n	8017e4a <UART_SetConfig+0x2fe>
 8017d64:	697b      	ldr	r3, [r7, #20]
 8017d66:	681b      	ldr	r3, [r3, #0]
 8017d68:	4a35      	ldr	r2, [pc, #212]	; (8017e40 <UART_SetConfig+0x2f4>)
 8017d6a:	4293      	cmp	r3, r2
 8017d6c:	d12a      	bne.n	8017dc4 <UART_SetConfig+0x278>
 8017d6e:	4b30      	ldr	r3, [pc, #192]	; (8017e30 <UART_SetConfig+0x2e4>)
 8017d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017d74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8017d78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8017d7c:	d01a      	beq.n	8017db4 <UART_SetConfig+0x268>
 8017d7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8017d82:	d81b      	bhi.n	8017dbc <UART_SetConfig+0x270>
 8017d84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017d88:	d00c      	beq.n	8017da4 <UART_SetConfig+0x258>
 8017d8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017d8e:	d815      	bhi.n	8017dbc <UART_SetConfig+0x270>
 8017d90:	2b00      	cmp	r3, #0
 8017d92:	d003      	beq.n	8017d9c <UART_SetConfig+0x250>
 8017d94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017d98:	d008      	beq.n	8017dac <UART_SetConfig+0x260>
 8017d9a:	e00f      	b.n	8017dbc <UART_SetConfig+0x270>
 8017d9c:	2300      	movs	r3, #0
 8017d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017da2:	e052      	b.n	8017e4a <UART_SetConfig+0x2fe>
 8017da4:	2302      	movs	r3, #2
 8017da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017daa:	e04e      	b.n	8017e4a <UART_SetConfig+0x2fe>
 8017dac:	2304      	movs	r3, #4
 8017dae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017db2:	e04a      	b.n	8017e4a <UART_SetConfig+0x2fe>
 8017db4:	2308      	movs	r3, #8
 8017db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017dba:	e046      	b.n	8017e4a <UART_SetConfig+0x2fe>
 8017dbc:	2310      	movs	r3, #16
 8017dbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017dc2:	e042      	b.n	8017e4a <UART_SetConfig+0x2fe>
 8017dc4:	697b      	ldr	r3, [r7, #20]
 8017dc6:	681b      	ldr	r3, [r3, #0]
 8017dc8:	4a17      	ldr	r2, [pc, #92]	; (8017e28 <UART_SetConfig+0x2dc>)
 8017dca:	4293      	cmp	r3, r2
 8017dcc:	d13a      	bne.n	8017e44 <UART_SetConfig+0x2f8>
 8017dce:	4b18      	ldr	r3, [pc, #96]	; (8017e30 <UART_SetConfig+0x2e4>)
 8017dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017dd4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8017dd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8017ddc:	d01a      	beq.n	8017e14 <UART_SetConfig+0x2c8>
 8017dde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8017de2:	d81b      	bhi.n	8017e1c <UART_SetConfig+0x2d0>
 8017de4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017de8:	d00c      	beq.n	8017e04 <UART_SetConfig+0x2b8>
 8017dea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017dee:	d815      	bhi.n	8017e1c <UART_SetConfig+0x2d0>
 8017df0:	2b00      	cmp	r3, #0
 8017df2:	d003      	beq.n	8017dfc <UART_SetConfig+0x2b0>
 8017df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017df8:	d008      	beq.n	8017e0c <UART_SetConfig+0x2c0>
 8017dfa:	e00f      	b.n	8017e1c <UART_SetConfig+0x2d0>
 8017dfc:	2300      	movs	r3, #0
 8017dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017e02:	e022      	b.n	8017e4a <UART_SetConfig+0x2fe>
 8017e04:	2302      	movs	r3, #2
 8017e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017e0a:	e01e      	b.n	8017e4a <UART_SetConfig+0x2fe>
 8017e0c:	2304      	movs	r3, #4
 8017e0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017e12:	e01a      	b.n	8017e4a <UART_SetConfig+0x2fe>
 8017e14:	2308      	movs	r3, #8
 8017e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017e1a:	e016      	b.n	8017e4a <UART_SetConfig+0x2fe>
 8017e1c:	2310      	movs	r3, #16
 8017e1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017e22:	e012      	b.n	8017e4a <UART_SetConfig+0x2fe>
 8017e24:	cfff69f3 	.word	0xcfff69f3
 8017e28:	40008000 	.word	0x40008000
 8017e2c:	40013800 	.word	0x40013800
 8017e30:	40021000 	.word	0x40021000
 8017e34:	40004400 	.word	0x40004400
 8017e38:	40004800 	.word	0x40004800
 8017e3c:	40004c00 	.word	0x40004c00
 8017e40:	40005000 	.word	0x40005000
 8017e44:	2310      	movs	r3, #16
 8017e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8017e4a:	697b      	ldr	r3, [r7, #20]
 8017e4c:	681b      	ldr	r3, [r3, #0]
 8017e4e:	4aae      	ldr	r2, [pc, #696]	; (8018108 <UART_SetConfig+0x5bc>)
 8017e50:	4293      	cmp	r3, r2
 8017e52:	f040 8097 	bne.w	8017f84 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8017e56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017e5a:	2b08      	cmp	r3, #8
 8017e5c:	d823      	bhi.n	8017ea6 <UART_SetConfig+0x35a>
 8017e5e:	a201      	add	r2, pc, #4	; (adr r2, 8017e64 <UART_SetConfig+0x318>)
 8017e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017e64:	08017e89 	.word	0x08017e89
 8017e68:	08017ea7 	.word	0x08017ea7
 8017e6c:	08017e91 	.word	0x08017e91
 8017e70:	08017ea7 	.word	0x08017ea7
 8017e74:	08017e97 	.word	0x08017e97
 8017e78:	08017ea7 	.word	0x08017ea7
 8017e7c:	08017ea7 	.word	0x08017ea7
 8017e80:	08017ea7 	.word	0x08017ea7
 8017e84:	08017e9f 	.word	0x08017e9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8017e88:	f7fd fb9e 	bl	80155c8 <HAL_RCC_GetPCLK1Freq>
 8017e8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8017e8e:	e010      	b.n	8017eb2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8017e90:	4b9e      	ldr	r3, [pc, #632]	; (801810c <UART_SetConfig+0x5c0>)
 8017e92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8017e94:	e00d      	b.n	8017eb2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8017e96:	f7fd fb29 	bl	80154ec <HAL_RCC_GetSysClockFreq>
 8017e9a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8017e9c:	e009      	b.n	8017eb2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8017e9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017ea2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8017ea4:	e005      	b.n	8017eb2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8017ea6:	2300      	movs	r3, #0
 8017ea8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8017eaa:	2301      	movs	r3, #1
 8017eac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8017eb0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8017eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	f000 8130 	beq.w	801811a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8017eba:	697b      	ldr	r3, [r7, #20]
 8017ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ebe:	4a94      	ldr	r2, [pc, #592]	; (8018110 <UART_SetConfig+0x5c4>)
 8017ec0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017ec4:	461a      	mov	r2, r3
 8017ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ec8:	fbb3 f3f2 	udiv	r3, r3, r2
 8017ecc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8017ece:	697b      	ldr	r3, [r7, #20]
 8017ed0:	685a      	ldr	r2, [r3, #4]
 8017ed2:	4613      	mov	r3, r2
 8017ed4:	005b      	lsls	r3, r3, #1
 8017ed6:	4413      	add	r3, r2
 8017ed8:	69ba      	ldr	r2, [r7, #24]
 8017eda:	429a      	cmp	r2, r3
 8017edc:	d305      	bcc.n	8017eea <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8017ede:	697b      	ldr	r3, [r7, #20]
 8017ee0:	685b      	ldr	r3, [r3, #4]
 8017ee2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8017ee4:	69ba      	ldr	r2, [r7, #24]
 8017ee6:	429a      	cmp	r2, r3
 8017ee8:	d903      	bls.n	8017ef2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8017eea:	2301      	movs	r3, #1
 8017eec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8017ef0:	e113      	b.n	801811a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8017ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ef4:	2200      	movs	r2, #0
 8017ef6:	60bb      	str	r3, [r7, #8]
 8017ef8:	60fa      	str	r2, [r7, #12]
 8017efa:	697b      	ldr	r3, [r7, #20]
 8017efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017efe:	4a84      	ldr	r2, [pc, #528]	; (8018110 <UART_SetConfig+0x5c4>)
 8017f00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017f04:	b29b      	uxth	r3, r3
 8017f06:	2200      	movs	r2, #0
 8017f08:	603b      	str	r3, [r7, #0]
 8017f0a:	607a      	str	r2, [r7, #4]
 8017f0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017f10:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8017f14:	f7f6 fa52 	bl	800e3bc <__aeabi_uldivmod>
 8017f18:	4602      	mov	r2, r0
 8017f1a:	460b      	mov	r3, r1
 8017f1c:	4610      	mov	r0, r2
 8017f1e:	4619      	mov	r1, r3
 8017f20:	f04f 0200 	mov.w	r2, #0
 8017f24:	f04f 0300 	mov.w	r3, #0
 8017f28:	020b      	lsls	r3, r1, #8
 8017f2a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8017f2e:	0202      	lsls	r2, r0, #8
 8017f30:	6979      	ldr	r1, [r7, #20]
 8017f32:	6849      	ldr	r1, [r1, #4]
 8017f34:	0849      	lsrs	r1, r1, #1
 8017f36:	2000      	movs	r0, #0
 8017f38:	460c      	mov	r4, r1
 8017f3a:	4605      	mov	r5, r0
 8017f3c:	eb12 0804 	adds.w	r8, r2, r4
 8017f40:	eb43 0905 	adc.w	r9, r3, r5
 8017f44:	697b      	ldr	r3, [r7, #20]
 8017f46:	685b      	ldr	r3, [r3, #4]
 8017f48:	2200      	movs	r2, #0
 8017f4a:	469a      	mov	sl, r3
 8017f4c:	4693      	mov	fp, r2
 8017f4e:	4652      	mov	r2, sl
 8017f50:	465b      	mov	r3, fp
 8017f52:	4640      	mov	r0, r8
 8017f54:	4649      	mov	r1, r9
 8017f56:	f7f6 fa31 	bl	800e3bc <__aeabi_uldivmod>
 8017f5a:	4602      	mov	r2, r0
 8017f5c:	460b      	mov	r3, r1
 8017f5e:	4613      	mov	r3, r2
 8017f60:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8017f62:	6a3b      	ldr	r3, [r7, #32]
 8017f64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8017f68:	d308      	bcc.n	8017f7c <UART_SetConfig+0x430>
 8017f6a:	6a3b      	ldr	r3, [r7, #32]
 8017f6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8017f70:	d204      	bcs.n	8017f7c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8017f72:	697b      	ldr	r3, [r7, #20]
 8017f74:	681b      	ldr	r3, [r3, #0]
 8017f76:	6a3a      	ldr	r2, [r7, #32]
 8017f78:	60da      	str	r2, [r3, #12]
 8017f7a:	e0ce      	b.n	801811a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8017f7c:	2301      	movs	r3, #1
 8017f7e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8017f82:	e0ca      	b.n	801811a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8017f84:	697b      	ldr	r3, [r7, #20]
 8017f86:	69db      	ldr	r3, [r3, #28]
 8017f88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8017f8c:	d166      	bne.n	801805c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8017f8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017f92:	2b08      	cmp	r3, #8
 8017f94:	d827      	bhi.n	8017fe6 <UART_SetConfig+0x49a>
 8017f96:	a201      	add	r2, pc, #4	; (adr r2, 8017f9c <UART_SetConfig+0x450>)
 8017f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017f9c:	08017fc1 	.word	0x08017fc1
 8017fa0:	08017fc9 	.word	0x08017fc9
 8017fa4:	08017fd1 	.word	0x08017fd1
 8017fa8:	08017fe7 	.word	0x08017fe7
 8017fac:	08017fd7 	.word	0x08017fd7
 8017fb0:	08017fe7 	.word	0x08017fe7
 8017fb4:	08017fe7 	.word	0x08017fe7
 8017fb8:	08017fe7 	.word	0x08017fe7
 8017fbc:	08017fdf 	.word	0x08017fdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8017fc0:	f7fd fb02 	bl	80155c8 <HAL_RCC_GetPCLK1Freq>
 8017fc4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8017fc6:	e014      	b.n	8017ff2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8017fc8:	f7fd fb14 	bl	80155f4 <HAL_RCC_GetPCLK2Freq>
 8017fcc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8017fce:	e010      	b.n	8017ff2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8017fd0:	4b4e      	ldr	r3, [pc, #312]	; (801810c <UART_SetConfig+0x5c0>)
 8017fd2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8017fd4:	e00d      	b.n	8017ff2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8017fd6:	f7fd fa89 	bl	80154ec <HAL_RCC_GetSysClockFreq>
 8017fda:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8017fdc:	e009      	b.n	8017ff2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8017fde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017fe2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8017fe4:	e005      	b.n	8017ff2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8017fe6:	2300      	movs	r3, #0
 8017fe8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8017fea:	2301      	movs	r3, #1
 8017fec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8017ff0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8017ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	f000 8090 	beq.w	801811a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8017ffa:	697b      	ldr	r3, [r7, #20]
 8017ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ffe:	4a44      	ldr	r2, [pc, #272]	; (8018110 <UART_SetConfig+0x5c4>)
 8018000:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018004:	461a      	mov	r2, r3
 8018006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018008:	fbb3 f3f2 	udiv	r3, r3, r2
 801800c:	005a      	lsls	r2, r3, #1
 801800e:	697b      	ldr	r3, [r7, #20]
 8018010:	685b      	ldr	r3, [r3, #4]
 8018012:	085b      	lsrs	r3, r3, #1
 8018014:	441a      	add	r2, r3
 8018016:	697b      	ldr	r3, [r7, #20]
 8018018:	685b      	ldr	r3, [r3, #4]
 801801a:	fbb2 f3f3 	udiv	r3, r2, r3
 801801e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8018020:	6a3b      	ldr	r3, [r7, #32]
 8018022:	2b0f      	cmp	r3, #15
 8018024:	d916      	bls.n	8018054 <UART_SetConfig+0x508>
 8018026:	6a3b      	ldr	r3, [r7, #32]
 8018028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801802c:	d212      	bcs.n	8018054 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801802e:	6a3b      	ldr	r3, [r7, #32]
 8018030:	b29b      	uxth	r3, r3
 8018032:	f023 030f 	bic.w	r3, r3, #15
 8018036:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8018038:	6a3b      	ldr	r3, [r7, #32]
 801803a:	085b      	lsrs	r3, r3, #1
 801803c:	b29b      	uxth	r3, r3
 801803e:	f003 0307 	and.w	r3, r3, #7
 8018042:	b29a      	uxth	r2, r3
 8018044:	8bfb      	ldrh	r3, [r7, #30]
 8018046:	4313      	orrs	r3, r2
 8018048:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 801804a:	697b      	ldr	r3, [r7, #20]
 801804c:	681b      	ldr	r3, [r3, #0]
 801804e:	8bfa      	ldrh	r2, [r7, #30]
 8018050:	60da      	str	r2, [r3, #12]
 8018052:	e062      	b.n	801811a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8018054:	2301      	movs	r3, #1
 8018056:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801805a:	e05e      	b.n	801811a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 801805c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8018060:	2b08      	cmp	r3, #8
 8018062:	d828      	bhi.n	80180b6 <UART_SetConfig+0x56a>
 8018064:	a201      	add	r2, pc, #4	; (adr r2, 801806c <UART_SetConfig+0x520>)
 8018066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801806a:	bf00      	nop
 801806c:	08018091 	.word	0x08018091
 8018070:	08018099 	.word	0x08018099
 8018074:	080180a1 	.word	0x080180a1
 8018078:	080180b7 	.word	0x080180b7
 801807c:	080180a7 	.word	0x080180a7
 8018080:	080180b7 	.word	0x080180b7
 8018084:	080180b7 	.word	0x080180b7
 8018088:	080180b7 	.word	0x080180b7
 801808c:	080180af 	.word	0x080180af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8018090:	f7fd fa9a 	bl	80155c8 <HAL_RCC_GetPCLK1Freq>
 8018094:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8018096:	e014      	b.n	80180c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8018098:	f7fd faac 	bl	80155f4 <HAL_RCC_GetPCLK2Freq>
 801809c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801809e:	e010      	b.n	80180c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80180a0:	4b1a      	ldr	r3, [pc, #104]	; (801810c <UART_SetConfig+0x5c0>)
 80180a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80180a4:	e00d      	b.n	80180c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80180a6:	f7fd fa21 	bl	80154ec <HAL_RCC_GetSysClockFreq>
 80180aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80180ac:	e009      	b.n	80180c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80180ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80180b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80180b4:	e005      	b.n	80180c2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80180b6:	2300      	movs	r3, #0
 80180b8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80180ba:	2301      	movs	r3, #1
 80180bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80180c0:	bf00      	nop
    }

    if (pclk != 0U)
 80180c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	d028      	beq.n	801811a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80180c8:	697b      	ldr	r3, [r7, #20]
 80180ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80180cc:	4a10      	ldr	r2, [pc, #64]	; (8018110 <UART_SetConfig+0x5c4>)
 80180ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80180d2:	461a      	mov	r2, r3
 80180d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80180da:	697b      	ldr	r3, [r7, #20]
 80180dc:	685b      	ldr	r3, [r3, #4]
 80180de:	085b      	lsrs	r3, r3, #1
 80180e0:	441a      	add	r2, r3
 80180e2:	697b      	ldr	r3, [r7, #20]
 80180e4:	685b      	ldr	r3, [r3, #4]
 80180e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80180ea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80180ec:	6a3b      	ldr	r3, [r7, #32]
 80180ee:	2b0f      	cmp	r3, #15
 80180f0:	d910      	bls.n	8018114 <UART_SetConfig+0x5c8>
 80180f2:	6a3b      	ldr	r3, [r7, #32]
 80180f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80180f8:	d20c      	bcs.n	8018114 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80180fa:	6a3b      	ldr	r3, [r7, #32]
 80180fc:	b29a      	uxth	r2, r3
 80180fe:	697b      	ldr	r3, [r7, #20]
 8018100:	681b      	ldr	r3, [r3, #0]
 8018102:	60da      	str	r2, [r3, #12]
 8018104:	e009      	b.n	801811a <UART_SetConfig+0x5ce>
 8018106:	bf00      	nop
 8018108:	40008000 	.word	0x40008000
 801810c:	00f42400 	.word	0x00f42400
 8018110:	0801ca18 	.word	0x0801ca18
      }
      else
      {
        ret = HAL_ERROR;
 8018114:	2301      	movs	r3, #1
 8018116:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801811a:	697b      	ldr	r3, [r7, #20]
 801811c:	2201      	movs	r2, #1
 801811e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8018122:	697b      	ldr	r3, [r7, #20]
 8018124:	2201      	movs	r2, #1
 8018126:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801812a:	697b      	ldr	r3, [r7, #20]
 801812c:	2200      	movs	r2, #0
 801812e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8018130:	697b      	ldr	r3, [r7, #20]
 8018132:	2200      	movs	r2, #0
 8018134:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8018136:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 801813a:	4618      	mov	r0, r3
 801813c:	3730      	adds	r7, #48	; 0x30
 801813e:	46bd      	mov	sp, r7
 8018140:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08018144 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8018144:	b480      	push	{r7}
 8018146:	b083      	sub	sp, #12
 8018148:	af00      	add	r7, sp, #0
 801814a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018150:	f003 0301 	and.w	r3, r3, #1
 8018154:	2b00      	cmp	r3, #0
 8018156:	d00a      	beq.n	801816e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8018158:	687b      	ldr	r3, [r7, #4]
 801815a:	681b      	ldr	r3, [r3, #0]
 801815c:	685b      	ldr	r3, [r3, #4]
 801815e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8018162:	687b      	ldr	r3, [r7, #4]
 8018164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	681b      	ldr	r3, [r3, #0]
 801816a:	430a      	orrs	r2, r1
 801816c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018172:	f003 0302 	and.w	r3, r3, #2
 8018176:	2b00      	cmp	r3, #0
 8018178:	d00a      	beq.n	8018190 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	681b      	ldr	r3, [r3, #0]
 801817e:	685b      	ldr	r3, [r3, #4]
 8018180:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018188:	687b      	ldr	r3, [r7, #4]
 801818a:	681b      	ldr	r3, [r3, #0]
 801818c:	430a      	orrs	r2, r1
 801818e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8018190:	687b      	ldr	r3, [r7, #4]
 8018192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018194:	f003 0304 	and.w	r3, r3, #4
 8018198:	2b00      	cmp	r3, #0
 801819a:	d00a      	beq.n	80181b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801819c:	687b      	ldr	r3, [r7, #4]
 801819e:	681b      	ldr	r3, [r3, #0]
 80181a0:	685b      	ldr	r3, [r3, #4]
 80181a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	681b      	ldr	r3, [r3, #0]
 80181ae:	430a      	orrs	r2, r1
 80181b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80181b2:	687b      	ldr	r3, [r7, #4]
 80181b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80181b6:	f003 0308 	and.w	r3, r3, #8
 80181ba:	2b00      	cmp	r3, #0
 80181bc:	d00a      	beq.n	80181d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	681b      	ldr	r3, [r3, #0]
 80181c2:	685b      	ldr	r3, [r3, #4]
 80181c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80181cc:	687b      	ldr	r3, [r7, #4]
 80181ce:	681b      	ldr	r3, [r3, #0]
 80181d0:	430a      	orrs	r2, r1
 80181d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80181d8:	f003 0310 	and.w	r3, r3, #16
 80181dc:	2b00      	cmp	r3, #0
 80181de:	d00a      	beq.n	80181f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	681b      	ldr	r3, [r3, #0]
 80181e4:	689b      	ldr	r3, [r3, #8]
 80181e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80181ea:	687b      	ldr	r3, [r7, #4]
 80181ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	681b      	ldr	r3, [r3, #0]
 80181f2:	430a      	orrs	r2, r1
 80181f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80181f6:	687b      	ldr	r3, [r7, #4]
 80181f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80181fa:	f003 0320 	and.w	r3, r3, #32
 80181fe:	2b00      	cmp	r3, #0
 8018200:	d00a      	beq.n	8018218 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	681b      	ldr	r3, [r3, #0]
 8018206:	689b      	ldr	r3, [r3, #8]
 8018208:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801820c:	687b      	ldr	r3, [r7, #4]
 801820e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	681b      	ldr	r3, [r3, #0]
 8018214:	430a      	orrs	r2, r1
 8018216:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8018218:	687b      	ldr	r3, [r7, #4]
 801821a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801821c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018220:	2b00      	cmp	r3, #0
 8018222:	d01a      	beq.n	801825a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8018224:	687b      	ldr	r3, [r7, #4]
 8018226:	681b      	ldr	r3, [r3, #0]
 8018228:	685b      	ldr	r3, [r3, #4]
 801822a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801822e:	687b      	ldr	r3, [r7, #4]
 8018230:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	681b      	ldr	r3, [r3, #0]
 8018236:	430a      	orrs	r2, r1
 8018238:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801823a:	687b      	ldr	r3, [r7, #4]
 801823c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801823e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8018242:	d10a      	bne.n	801825a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	681b      	ldr	r3, [r3, #0]
 8018248:	685b      	ldr	r3, [r3, #4]
 801824a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8018252:	687b      	ldr	r3, [r7, #4]
 8018254:	681b      	ldr	r3, [r3, #0]
 8018256:	430a      	orrs	r2, r1
 8018258:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801825a:	687b      	ldr	r3, [r7, #4]
 801825c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801825e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018262:	2b00      	cmp	r3, #0
 8018264:	d00a      	beq.n	801827c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	681b      	ldr	r3, [r3, #0]
 801826a:	685b      	ldr	r3, [r3, #4]
 801826c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018274:	687b      	ldr	r3, [r7, #4]
 8018276:	681b      	ldr	r3, [r3, #0]
 8018278:	430a      	orrs	r2, r1
 801827a:	605a      	str	r2, [r3, #4]
  }
}
 801827c:	bf00      	nop
 801827e:	370c      	adds	r7, #12
 8018280:	46bd      	mov	sp, r7
 8018282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018286:	4770      	bx	lr

08018288 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8018288:	b580      	push	{r7, lr}
 801828a:	b086      	sub	sp, #24
 801828c:	af02      	add	r7, sp, #8
 801828e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018290:	687b      	ldr	r3, [r7, #4]
 8018292:	2200      	movs	r2, #0
 8018294:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8018298:	f7f9 fe12 	bl	8011ec0 <HAL_GetTick>
 801829c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801829e:	687b      	ldr	r3, [r7, #4]
 80182a0:	681b      	ldr	r3, [r3, #0]
 80182a2:	681b      	ldr	r3, [r3, #0]
 80182a4:	f003 0308 	and.w	r3, r3, #8
 80182a8:	2b08      	cmp	r3, #8
 80182aa:	d10e      	bne.n	80182ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80182ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80182b0:	9300      	str	r3, [sp, #0]
 80182b2:	68fb      	ldr	r3, [r7, #12]
 80182b4:	2200      	movs	r2, #0
 80182b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80182ba:	6878      	ldr	r0, [r7, #4]
 80182bc:	f000 f82f 	bl	801831e <UART_WaitOnFlagUntilTimeout>
 80182c0:	4603      	mov	r3, r0
 80182c2:	2b00      	cmp	r3, #0
 80182c4:	d001      	beq.n	80182ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80182c6:	2303      	movs	r3, #3
 80182c8:	e025      	b.n	8018316 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	681b      	ldr	r3, [r3, #0]
 80182ce:	681b      	ldr	r3, [r3, #0]
 80182d0:	f003 0304 	and.w	r3, r3, #4
 80182d4:	2b04      	cmp	r3, #4
 80182d6:	d10e      	bne.n	80182f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80182d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80182dc:	9300      	str	r3, [sp, #0]
 80182de:	68fb      	ldr	r3, [r7, #12]
 80182e0:	2200      	movs	r2, #0
 80182e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80182e6:	6878      	ldr	r0, [r7, #4]
 80182e8:	f000 f819 	bl	801831e <UART_WaitOnFlagUntilTimeout>
 80182ec:	4603      	mov	r3, r0
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	d001      	beq.n	80182f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80182f2:	2303      	movs	r3, #3
 80182f4:	e00f      	b.n	8018316 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80182f6:	687b      	ldr	r3, [r7, #4]
 80182f8:	2220      	movs	r2, #32
 80182fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80182fe:	687b      	ldr	r3, [r7, #4]
 8018300:	2220      	movs	r2, #32
 8018302:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018306:	687b      	ldr	r3, [r7, #4]
 8018308:	2200      	movs	r2, #0
 801830a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	2200      	movs	r2, #0
 8018310:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8018314:	2300      	movs	r3, #0
}
 8018316:	4618      	mov	r0, r3
 8018318:	3710      	adds	r7, #16
 801831a:	46bd      	mov	sp, r7
 801831c:	bd80      	pop	{r7, pc}

0801831e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801831e:	b580      	push	{r7, lr}
 8018320:	b09c      	sub	sp, #112	; 0x70
 8018322:	af00      	add	r7, sp, #0
 8018324:	60f8      	str	r0, [r7, #12]
 8018326:	60b9      	str	r1, [r7, #8]
 8018328:	603b      	str	r3, [r7, #0]
 801832a:	4613      	mov	r3, r2
 801832c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801832e:	e0a9      	b.n	8018484 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8018330:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8018332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018336:	f000 80a5 	beq.w	8018484 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801833a:	f7f9 fdc1 	bl	8011ec0 <HAL_GetTick>
 801833e:	4602      	mov	r2, r0
 8018340:	683b      	ldr	r3, [r7, #0]
 8018342:	1ad3      	subs	r3, r2, r3
 8018344:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8018346:	429a      	cmp	r2, r3
 8018348:	d302      	bcc.n	8018350 <UART_WaitOnFlagUntilTimeout+0x32>
 801834a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801834c:	2b00      	cmp	r3, #0
 801834e:	d140      	bne.n	80183d2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8018350:	68fb      	ldr	r3, [r7, #12]
 8018352:	681b      	ldr	r3, [r3, #0]
 8018354:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018356:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018358:	e853 3f00 	ldrex	r3, [r3]
 801835c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801835e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018360:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8018364:	667b      	str	r3, [r7, #100]	; 0x64
 8018366:	68fb      	ldr	r3, [r7, #12]
 8018368:	681b      	ldr	r3, [r3, #0]
 801836a:	461a      	mov	r2, r3
 801836c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801836e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8018370:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018372:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8018374:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8018376:	e841 2300 	strex	r3, r2, [r1]
 801837a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801837c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801837e:	2b00      	cmp	r3, #0
 8018380:	d1e6      	bne.n	8018350 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018382:	68fb      	ldr	r3, [r7, #12]
 8018384:	681b      	ldr	r3, [r3, #0]
 8018386:	3308      	adds	r3, #8
 8018388:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801838a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801838c:	e853 3f00 	ldrex	r3, [r3]
 8018390:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8018392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018394:	f023 0301 	bic.w	r3, r3, #1
 8018398:	663b      	str	r3, [r7, #96]	; 0x60
 801839a:	68fb      	ldr	r3, [r7, #12]
 801839c:	681b      	ldr	r3, [r3, #0]
 801839e:	3308      	adds	r3, #8
 80183a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80183a2:	64ba      	str	r2, [r7, #72]	; 0x48
 80183a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80183a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80183a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80183aa:	e841 2300 	strex	r3, r2, [r1]
 80183ae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80183b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80183b2:	2b00      	cmp	r3, #0
 80183b4:	d1e5      	bne.n	8018382 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80183b6:	68fb      	ldr	r3, [r7, #12]
 80183b8:	2220      	movs	r2, #32
 80183ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80183be:	68fb      	ldr	r3, [r7, #12]
 80183c0:	2220      	movs	r2, #32
 80183c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80183c6:	68fb      	ldr	r3, [r7, #12]
 80183c8:	2200      	movs	r2, #0
 80183ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80183ce:	2303      	movs	r3, #3
 80183d0:	e069      	b.n	80184a6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80183d2:	68fb      	ldr	r3, [r7, #12]
 80183d4:	681b      	ldr	r3, [r3, #0]
 80183d6:	681b      	ldr	r3, [r3, #0]
 80183d8:	f003 0304 	and.w	r3, r3, #4
 80183dc:	2b00      	cmp	r3, #0
 80183de:	d051      	beq.n	8018484 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80183e0:	68fb      	ldr	r3, [r7, #12]
 80183e2:	681b      	ldr	r3, [r3, #0]
 80183e4:	69db      	ldr	r3, [r3, #28]
 80183e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80183ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80183ee:	d149      	bne.n	8018484 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80183f0:	68fb      	ldr	r3, [r7, #12]
 80183f2:	681b      	ldr	r3, [r3, #0]
 80183f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80183f8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80183fa:	68fb      	ldr	r3, [r7, #12]
 80183fc:	681b      	ldr	r3, [r3, #0]
 80183fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018402:	e853 3f00 	ldrex	r3, [r3]
 8018406:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8018408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801840a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801840e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8018410:	68fb      	ldr	r3, [r7, #12]
 8018412:	681b      	ldr	r3, [r3, #0]
 8018414:	461a      	mov	r2, r3
 8018416:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018418:	637b      	str	r3, [r7, #52]	; 0x34
 801841a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801841c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801841e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018420:	e841 2300 	strex	r3, r2, [r1]
 8018424:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8018426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018428:	2b00      	cmp	r3, #0
 801842a:	d1e6      	bne.n	80183fa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801842c:	68fb      	ldr	r3, [r7, #12]
 801842e:	681b      	ldr	r3, [r3, #0]
 8018430:	3308      	adds	r3, #8
 8018432:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018434:	697b      	ldr	r3, [r7, #20]
 8018436:	e853 3f00 	ldrex	r3, [r3]
 801843a:	613b      	str	r3, [r7, #16]
   return(result);
 801843c:	693b      	ldr	r3, [r7, #16]
 801843e:	f023 0301 	bic.w	r3, r3, #1
 8018442:	66bb      	str	r3, [r7, #104]	; 0x68
 8018444:	68fb      	ldr	r3, [r7, #12]
 8018446:	681b      	ldr	r3, [r3, #0]
 8018448:	3308      	adds	r3, #8
 801844a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801844c:	623a      	str	r2, [r7, #32]
 801844e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018450:	69f9      	ldr	r1, [r7, #28]
 8018452:	6a3a      	ldr	r2, [r7, #32]
 8018454:	e841 2300 	strex	r3, r2, [r1]
 8018458:	61bb      	str	r3, [r7, #24]
   return(result);
 801845a:	69bb      	ldr	r3, [r7, #24]
 801845c:	2b00      	cmp	r3, #0
 801845e:	d1e5      	bne.n	801842c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8018460:	68fb      	ldr	r3, [r7, #12]
 8018462:	2220      	movs	r2, #32
 8018464:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8018468:	68fb      	ldr	r3, [r7, #12]
 801846a:	2220      	movs	r2, #32
 801846c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8018470:	68fb      	ldr	r3, [r7, #12]
 8018472:	2220      	movs	r2, #32
 8018474:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8018478:	68fb      	ldr	r3, [r7, #12]
 801847a:	2200      	movs	r2, #0
 801847c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8018480:	2303      	movs	r3, #3
 8018482:	e010      	b.n	80184a6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8018484:	68fb      	ldr	r3, [r7, #12]
 8018486:	681b      	ldr	r3, [r3, #0]
 8018488:	69da      	ldr	r2, [r3, #28]
 801848a:	68bb      	ldr	r3, [r7, #8]
 801848c:	4013      	ands	r3, r2
 801848e:	68ba      	ldr	r2, [r7, #8]
 8018490:	429a      	cmp	r2, r3
 8018492:	bf0c      	ite	eq
 8018494:	2301      	moveq	r3, #1
 8018496:	2300      	movne	r3, #0
 8018498:	b2db      	uxtb	r3, r3
 801849a:	461a      	mov	r2, r3
 801849c:	79fb      	ldrb	r3, [r7, #7]
 801849e:	429a      	cmp	r2, r3
 80184a0:	f43f af46 	beq.w	8018330 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80184a4:	2300      	movs	r3, #0
}
 80184a6:	4618      	mov	r0, r3
 80184a8:	3770      	adds	r7, #112	; 0x70
 80184aa:	46bd      	mov	sp, r7
 80184ac:	bd80      	pop	{r7, pc}
	...

080184b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80184b0:	b480      	push	{r7}
 80184b2:	b0a3      	sub	sp, #140	; 0x8c
 80184b4:	af00      	add	r7, sp, #0
 80184b6:	60f8      	str	r0, [r7, #12]
 80184b8:	60b9      	str	r1, [r7, #8]
 80184ba:	4613      	mov	r3, r2
 80184bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80184be:	68fb      	ldr	r3, [r7, #12]
 80184c0:	68ba      	ldr	r2, [r7, #8]
 80184c2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80184c4:	68fb      	ldr	r3, [r7, #12]
 80184c6:	88fa      	ldrh	r2, [r7, #6]
 80184c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80184cc:	68fb      	ldr	r3, [r7, #12]
 80184ce:	88fa      	ldrh	r2, [r7, #6]
 80184d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80184d4:	68fb      	ldr	r3, [r7, #12]
 80184d6:	2200      	movs	r2, #0
 80184d8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80184da:	68fb      	ldr	r3, [r7, #12]
 80184dc:	689b      	ldr	r3, [r3, #8]
 80184de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80184e2:	d10e      	bne.n	8018502 <UART_Start_Receive_IT+0x52>
 80184e4:	68fb      	ldr	r3, [r7, #12]
 80184e6:	691b      	ldr	r3, [r3, #16]
 80184e8:	2b00      	cmp	r3, #0
 80184ea:	d105      	bne.n	80184f8 <UART_Start_Receive_IT+0x48>
 80184ec:	68fb      	ldr	r3, [r7, #12]
 80184ee:	f240 12ff 	movw	r2, #511	; 0x1ff
 80184f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80184f6:	e02d      	b.n	8018554 <UART_Start_Receive_IT+0xa4>
 80184f8:	68fb      	ldr	r3, [r7, #12]
 80184fa:	22ff      	movs	r2, #255	; 0xff
 80184fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8018500:	e028      	b.n	8018554 <UART_Start_Receive_IT+0xa4>
 8018502:	68fb      	ldr	r3, [r7, #12]
 8018504:	689b      	ldr	r3, [r3, #8]
 8018506:	2b00      	cmp	r3, #0
 8018508:	d10d      	bne.n	8018526 <UART_Start_Receive_IT+0x76>
 801850a:	68fb      	ldr	r3, [r7, #12]
 801850c:	691b      	ldr	r3, [r3, #16]
 801850e:	2b00      	cmp	r3, #0
 8018510:	d104      	bne.n	801851c <UART_Start_Receive_IT+0x6c>
 8018512:	68fb      	ldr	r3, [r7, #12]
 8018514:	22ff      	movs	r2, #255	; 0xff
 8018516:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801851a:	e01b      	b.n	8018554 <UART_Start_Receive_IT+0xa4>
 801851c:	68fb      	ldr	r3, [r7, #12]
 801851e:	227f      	movs	r2, #127	; 0x7f
 8018520:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8018524:	e016      	b.n	8018554 <UART_Start_Receive_IT+0xa4>
 8018526:	68fb      	ldr	r3, [r7, #12]
 8018528:	689b      	ldr	r3, [r3, #8]
 801852a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801852e:	d10d      	bne.n	801854c <UART_Start_Receive_IT+0x9c>
 8018530:	68fb      	ldr	r3, [r7, #12]
 8018532:	691b      	ldr	r3, [r3, #16]
 8018534:	2b00      	cmp	r3, #0
 8018536:	d104      	bne.n	8018542 <UART_Start_Receive_IT+0x92>
 8018538:	68fb      	ldr	r3, [r7, #12]
 801853a:	227f      	movs	r2, #127	; 0x7f
 801853c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8018540:	e008      	b.n	8018554 <UART_Start_Receive_IT+0xa4>
 8018542:	68fb      	ldr	r3, [r7, #12]
 8018544:	223f      	movs	r2, #63	; 0x3f
 8018546:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801854a:	e003      	b.n	8018554 <UART_Start_Receive_IT+0xa4>
 801854c:	68fb      	ldr	r3, [r7, #12]
 801854e:	2200      	movs	r2, #0
 8018550:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018554:	68fb      	ldr	r3, [r7, #12]
 8018556:	2200      	movs	r2, #0
 8018558:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801855c:	68fb      	ldr	r3, [r7, #12]
 801855e:	2222      	movs	r2, #34	; 0x22
 8018560:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018564:	68fb      	ldr	r3, [r7, #12]
 8018566:	681b      	ldr	r3, [r3, #0]
 8018568:	3308      	adds	r3, #8
 801856a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801856c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801856e:	e853 3f00 	ldrex	r3, [r3]
 8018572:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8018574:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018576:	f043 0301 	orr.w	r3, r3, #1
 801857a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801857e:	68fb      	ldr	r3, [r7, #12]
 8018580:	681b      	ldr	r3, [r3, #0]
 8018582:	3308      	adds	r3, #8
 8018584:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8018588:	673a      	str	r2, [r7, #112]	; 0x70
 801858a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801858c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801858e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8018590:	e841 2300 	strex	r3, r2, [r1]
 8018594:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8018596:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018598:	2b00      	cmp	r3, #0
 801859a:	d1e3      	bne.n	8018564 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 801859c:	68fb      	ldr	r3, [r7, #12]
 801859e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80185a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80185a4:	d153      	bne.n	801864e <UART_Start_Receive_IT+0x19e>
 80185a6:	68fb      	ldr	r3, [r7, #12]
 80185a8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80185ac:	88fa      	ldrh	r2, [r7, #6]
 80185ae:	429a      	cmp	r2, r3
 80185b0:	d34d      	bcc.n	801864e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80185b2:	68fb      	ldr	r3, [r7, #12]
 80185b4:	689b      	ldr	r3, [r3, #8]
 80185b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80185ba:	d107      	bne.n	80185cc <UART_Start_Receive_IT+0x11c>
 80185bc:	68fb      	ldr	r3, [r7, #12]
 80185be:	691b      	ldr	r3, [r3, #16]
 80185c0:	2b00      	cmp	r3, #0
 80185c2:	d103      	bne.n	80185cc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80185c4:	68fb      	ldr	r3, [r7, #12]
 80185c6:	4a4b      	ldr	r2, [pc, #300]	; (80186f4 <UART_Start_Receive_IT+0x244>)
 80185c8:	671a      	str	r2, [r3, #112]	; 0x70
 80185ca:	e002      	b.n	80185d2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80185cc:	68fb      	ldr	r3, [r7, #12]
 80185ce:	4a4a      	ldr	r2, [pc, #296]	; (80186f8 <UART_Start_Receive_IT+0x248>)
 80185d0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80185d2:	68fb      	ldr	r3, [r7, #12]
 80185d4:	2200      	movs	r2, #0
 80185d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80185da:	68fb      	ldr	r3, [r7, #12]
 80185dc:	691b      	ldr	r3, [r3, #16]
 80185de:	2b00      	cmp	r3, #0
 80185e0:	d01a      	beq.n	8018618 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80185e2:	68fb      	ldr	r3, [r7, #12]
 80185e4:	681b      	ldr	r3, [r3, #0]
 80185e6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80185e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80185ea:	e853 3f00 	ldrex	r3, [r3]
 80185ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80185f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80185f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80185f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80185fa:	68fb      	ldr	r3, [r7, #12]
 80185fc:	681b      	ldr	r3, [r3, #0]
 80185fe:	461a      	mov	r2, r3
 8018600:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8018604:	65fb      	str	r3, [r7, #92]	; 0x5c
 8018606:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018608:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801860a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801860c:	e841 2300 	strex	r3, r2, [r1]
 8018610:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8018612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018614:	2b00      	cmp	r3, #0
 8018616:	d1e4      	bne.n	80185e2 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8018618:	68fb      	ldr	r3, [r7, #12]
 801861a:	681b      	ldr	r3, [r3, #0]
 801861c:	3308      	adds	r3, #8
 801861e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018622:	e853 3f00 	ldrex	r3, [r3]
 8018626:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8018628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801862a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801862e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8018630:	68fb      	ldr	r3, [r7, #12]
 8018632:	681b      	ldr	r3, [r3, #0]
 8018634:	3308      	adds	r3, #8
 8018636:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8018638:	64ba      	str	r2, [r7, #72]	; 0x48
 801863a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801863c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801863e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018640:	e841 2300 	strex	r3, r2, [r1]
 8018644:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8018646:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018648:	2b00      	cmp	r3, #0
 801864a:	d1e5      	bne.n	8018618 <UART_Start_Receive_IT+0x168>
 801864c:	e04a      	b.n	80186e4 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801864e:	68fb      	ldr	r3, [r7, #12]
 8018650:	689b      	ldr	r3, [r3, #8]
 8018652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8018656:	d107      	bne.n	8018668 <UART_Start_Receive_IT+0x1b8>
 8018658:	68fb      	ldr	r3, [r7, #12]
 801865a:	691b      	ldr	r3, [r3, #16]
 801865c:	2b00      	cmp	r3, #0
 801865e:	d103      	bne.n	8018668 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8018660:	68fb      	ldr	r3, [r7, #12]
 8018662:	4a26      	ldr	r2, [pc, #152]	; (80186fc <UART_Start_Receive_IT+0x24c>)
 8018664:	671a      	str	r2, [r3, #112]	; 0x70
 8018666:	e002      	b.n	801866e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8018668:	68fb      	ldr	r3, [r7, #12]
 801866a:	4a25      	ldr	r2, [pc, #148]	; (8018700 <UART_Start_Receive_IT+0x250>)
 801866c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 801866e:	68fb      	ldr	r3, [r7, #12]
 8018670:	2200      	movs	r2, #0
 8018672:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8018676:	68fb      	ldr	r3, [r7, #12]
 8018678:	691b      	ldr	r3, [r3, #16]
 801867a:	2b00      	cmp	r3, #0
 801867c:	d019      	beq.n	80186b2 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 801867e:	68fb      	ldr	r3, [r7, #12]
 8018680:	681b      	ldr	r3, [r3, #0]
 8018682:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018686:	e853 3f00 	ldrex	r3, [r3]
 801868a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801868c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801868e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8018692:	677b      	str	r3, [r7, #116]	; 0x74
 8018694:	68fb      	ldr	r3, [r7, #12]
 8018696:	681b      	ldr	r3, [r3, #0]
 8018698:	461a      	mov	r2, r3
 801869a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801869c:	637b      	str	r3, [r7, #52]	; 0x34
 801869e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80186a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80186a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80186a4:	e841 2300 	strex	r3, r2, [r1]
 80186a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80186aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186ac:	2b00      	cmp	r3, #0
 80186ae:	d1e6      	bne.n	801867e <UART_Start_Receive_IT+0x1ce>
 80186b0:	e018      	b.n	80186e4 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80186b2:	68fb      	ldr	r3, [r7, #12]
 80186b4:	681b      	ldr	r3, [r3, #0]
 80186b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80186b8:	697b      	ldr	r3, [r7, #20]
 80186ba:	e853 3f00 	ldrex	r3, [r3]
 80186be:	613b      	str	r3, [r7, #16]
   return(result);
 80186c0:	693b      	ldr	r3, [r7, #16]
 80186c2:	f043 0320 	orr.w	r3, r3, #32
 80186c6:	67bb      	str	r3, [r7, #120]	; 0x78
 80186c8:	68fb      	ldr	r3, [r7, #12]
 80186ca:	681b      	ldr	r3, [r3, #0]
 80186cc:	461a      	mov	r2, r3
 80186ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80186d0:	623b      	str	r3, [r7, #32]
 80186d2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80186d4:	69f9      	ldr	r1, [r7, #28]
 80186d6:	6a3a      	ldr	r2, [r7, #32]
 80186d8:	e841 2300 	strex	r3, r2, [r1]
 80186dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80186de:	69bb      	ldr	r3, [r7, #24]
 80186e0:	2b00      	cmp	r3, #0
 80186e2:	d1e6      	bne.n	80186b2 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80186e4:	2300      	movs	r3, #0
}
 80186e6:	4618      	mov	r0, r3
 80186e8:	378c      	adds	r7, #140	; 0x8c
 80186ea:	46bd      	mov	sp, r7
 80186ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186f0:	4770      	bx	lr
 80186f2:	bf00      	nop
 80186f4:	08018e0d 	.word	0x08018e0d
 80186f8:	08018b15 	.word	0x08018b15
 80186fc:	080189b3 	.word	0x080189b3
 8018700:	08018853 	.word	0x08018853

08018704 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8018704:	b480      	push	{r7}
 8018706:	b095      	sub	sp, #84	; 0x54
 8018708:	af00      	add	r7, sp, #0
 801870a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801870c:	687b      	ldr	r3, [r7, #4]
 801870e:	681b      	ldr	r3, [r3, #0]
 8018710:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018714:	e853 3f00 	ldrex	r3, [r3]
 8018718:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801871a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801871c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8018720:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018722:	687b      	ldr	r3, [r7, #4]
 8018724:	681b      	ldr	r3, [r3, #0]
 8018726:	461a      	mov	r2, r3
 8018728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801872a:	643b      	str	r3, [r7, #64]	; 0x40
 801872c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801872e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8018730:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018732:	e841 2300 	strex	r3, r2, [r1]
 8018736:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8018738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801873a:	2b00      	cmp	r3, #0
 801873c:	d1e6      	bne.n	801870c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801873e:	687b      	ldr	r3, [r7, #4]
 8018740:	681b      	ldr	r3, [r3, #0]
 8018742:	3308      	adds	r3, #8
 8018744:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018746:	6a3b      	ldr	r3, [r7, #32]
 8018748:	e853 3f00 	ldrex	r3, [r3]
 801874c:	61fb      	str	r3, [r7, #28]
   return(result);
 801874e:	69fb      	ldr	r3, [r7, #28]
 8018750:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8018754:	f023 0301 	bic.w	r3, r3, #1
 8018758:	64bb      	str	r3, [r7, #72]	; 0x48
 801875a:	687b      	ldr	r3, [r7, #4]
 801875c:	681b      	ldr	r3, [r3, #0]
 801875e:	3308      	adds	r3, #8
 8018760:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018762:	62fa      	str	r2, [r7, #44]	; 0x2c
 8018764:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018766:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018768:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801876a:	e841 2300 	strex	r3, r2, [r1]
 801876e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8018770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018772:	2b00      	cmp	r3, #0
 8018774:	d1e3      	bne.n	801873e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018776:	687b      	ldr	r3, [r7, #4]
 8018778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801877a:	2b01      	cmp	r3, #1
 801877c:	d118      	bne.n	80187b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801877e:	687b      	ldr	r3, [r7, #4]
 8018780:	681b      	ldr	r3, [r3, #0]
 8018782:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018784:	68fb      	ldr	r3, [r7, #12]
 8018786:	e853 3f00 	ldrex	r3, [r3]
 801878a:	60bb      	str	r3, [r7, #8]
   return(result);
 801878c:	68bb      	ldr	r3, [r7, #8]
 801878e:	f023 0310 	bic.w	r3, r3, #16
 8018792:	647b      	str	r3, [r7, #68]	; 0x44
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	681b      	ldr	r3, [r3, #0]
 8018798:	461a      	mov	r2, r3
 801879a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801879c:	61bb      	str	r3, [r7, #24]
 801879e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80187a0:	6979      	ldr	r1, [r7, #20]
 80187a2:	69ba      	ldr	r2, [r7, #24]
 80187a4:	e841 2300 	strex	r3, r2, [r1]
 80187a8:	613b      	str	r3, [r7, #16]
   return(result);
 80187aa:	693b      	ldr	r3, [r7, #16]
 80187ac:	2b00      	cmp	r3, #0
 80187ae:	d1e6      	bne.n	801877e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80187b0:	687b      	ldr	r3, [r7, #4]
 80187b2:	2220      	movs	r2, #32
 80187b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	2200      	movs	r2, #0
 80187bc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80187be:	687b      	ldr	r3, [r7, #4]
 80187c0:	2200      	movs	r2, #0
 80187c2:	671a      	str	r2, [r3, #112]	; 0x70
}
 80187c4:	bf00      	nop
 80187c6:	3754      	adds	r7, #84	; 0x54
 80187c8:	46bd      	mov	sp, r7
 80187ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187ce:	4770      	bx	lr

080187d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80187d0:	b580      	push	{r7, lr}
 80187d2:	b084      	sub	sp, #16
 80187d4:	af00      	add	r7, sp, #0
 80187d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80187d8:	687b      	ldr	r3, [r7, #4]
 80187da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80187dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80187de:	68fb      	ldr	r3, [r7, #12]
 80187e0:	2200      	movs	r2, #0
 80187e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80187e6:	68fb      	ldr	r3, [r7, #12]
 80187e8:	2200      	movs	r2, #0
 80187ea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80187ee:	68f8      	ldr	r0, [r7, #12]
 80187f0:	f7ff f996 	bl	8017b20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80187f4:	bf00      	nop
 80187f6:	3710      	adds	r7, #16
 80187f8:	46bd      	mov	sp, r7
 80187fa:	bd80      	pop	{r7, pc}

080187fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80187fc:	b580      	push	{r7, lr}
 80187fe:	b088      	sub	sp, #32
 8018800:	af00      	add	r7, sp, #0
 8018802:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	681b      	ldr	r3, [r3, #0]
 8018808:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801880a:	68fb      	ldr	r3, [r7, #12]
 801880c:	e853 3f00 	ldrex	r3, [r3]
 8018810:	60bb      	str	r3, [r7, #8]
   return(result);
 8018812:	68bb      	ldr	r3, [r7, #8]
 8018814:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8018818:	61fb      	str	r3, [r7, #28]
 801881a:	687b      	ldr	r3, [r7, #4]
 801881c:	681b      	ldr	r3, [r3, #0]
 801881e:	461a      	mov	r2, r3
 8018820:	69fb      	ldr	r3, [r7, #28]
 8018822:	61bb      	str	r3, [r7, #24]
 8018824:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018826:	6979      	ldr	r1, [r7, #20]
 8018828:	69ba      	ldr	r2, [r7, #24]
 801882a:	e841 2300 	strex	r3, r2, [r1]
 801882e:	613b      	str	r3, [r7, #16]
   return(result);
 8018830:	693b      	ldr	r3, [r7, #16]
 8018832:	2b00      	cmp	r3, #0
 8018834:	d1e6      	bne.n	8018804 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8018836:	687b      	ldr	r3, [r7, #4]
 8018838:	2220      	movs	r2, #32
 801883a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	2200      	movs	r2, #0
 8018842:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8018844:	6878      	ldr	r0, [r7, #4]
 8018846:	f7ff f957 	bl	8017af8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801884a:	bf00      	nop
 801884c:	3720      	adds	r7, #32
 801884e:	46bd      	mov	sp, r7
 8018850:	bd80      	pop	{r7, pc}

08018852 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8018852:	b580      	push	{r7, lr}
 8018854:	b096      	sub	sp, #88	; 0x58
 8018856:	af00      	add	r7, sp, #0
 8018858:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801885a:	687b      	ldr	r3, [r7, #4]
 801885c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018860:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801886a:	2b22      	cmp	r3, #34	; 0x22
 801886c:	f040 8095 	bne.w	801899a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	681b      	ldr	r3, [r3, #0]
 8018874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018876:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801887a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 801887e:	b2d9      	uxtb	r1, r3
 8018880:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8018884:	b2da      	uxtb	r2, r3
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801888a:	400a      	ands	r2, r1
 801888c:	b2d2      	uxtb	r2, r2
 801888e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018894:	1c5a      	adds	r2, r3, #1
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80188a0:	b29b      	uxth	r3, r3
 80188a2:	3b01      	subs	r3, #1
 80188a4:	b29a      	uxth	r2, r3
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80188b2:	b29b      	uxth	r3, r3
 80188b4:	2b00      	cmp	r3, #0
 80188b6:	d178      	bne.n	80189aa <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	681b      	ldr	r3, [r3, #0]
 80188bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80188be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188c0:	e853 3f00 	ldrex	r3, [r3]
 80188c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80188c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80188cc:	653b      	str	r3, [r7, #80]	; 0x50
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	681b      	ldr	r3, [r3, #0]
 80188d2:	461a      	mov	r2, r3
 80188d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80188d6:	647b      	str	r3, [r7, #68]	; 0x44
 80188d8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80188da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80188dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80188de:	e841 2300 	strex	r3, r2, [r1]
 80188e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80188e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	d1e6      	bne.n	80188b8 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80188ea:	687b      	ldr	r3, [r7, #4]
 80188ec:	681b      	ldr	r3, [r3, #0]
 80188ee:	3308      	adds	r3, #8
 80188f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80188f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188f4:	e853 3f00 	ldrex	r3, [r3]
 80188f8:	623b      	str	r3, [r7, #32]
   return(result);
 80188fa:	6a3b      	ldr	r3, [r7, #32]
 80188fc:	f023 0301 	bic.w	r3, r3, #1
 8018900:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018902:	687b      	ldr	r3, [r7, #4]
 8018904:	681b      	ldr	r3, [r3, #0]
 8018906:	3308      	adds	r3, #8
 8018908:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801890a:	633a      	str	r2, [r7, #48]	; 0x30
 801890c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801890e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018910:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018912:	e841 2300 	strex	r3, r2, [r1]
 8018916:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8018918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801891a:	2b00      	cmp	r3, #0
 801891c:	d1e5      	bne.n	80188ea <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801891e:	687b      	ldr	r3, [r7, #4]
 8018920:	2220      	movs	r2, #32
 8018922:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	2200      	movs	r2, #0
 801892a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018930:	2b01      	cmp	r3, #1
 8018932:	d12e      	bne.n	8018992 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018934:	687b      	ldr	r3, [r7, #4]
 8018936:	2200      	movs	r2, #0
 8018938:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801893a:	687b      	ldr	r3, [r7, #4]
 801893c:	681b      	ldr	r3, [r3, #0]
 801893e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018940:	693b      	ldr	r3, [r7, #16]
 8018942:	e853 3f00 	ldrex	r3, [r3]
 8018946:	60fb      	str	r3, [r7, #12]
   return(result);
 8018948:	68fb      	ldr	r3, [r7, #12]
 801894a:	f023 0310 	bic.w	r3, r3, #16
 801894e:	64bb      	str	r3, [r7, #72]	; 0x48
 8018950:	687b      	ldr	r3, [r7, #4]
 8018952:	681b      	ldr	r3, [r3, #0]
 8018954:	461a      	mov	r2, r3
 8018956:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018958:	61fb      	str	r3, [r7, #28]
 801895a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801895c:	69b9      	ldr	r1, [r7, #24]
 801895e:	69fa      	ldr	r2, [r7, #28]
 8018960:	e841 2300 	strex	r3, r2, [r1]
 8018964:	617b      	str	r3, [r7, #20]
   return(result);
 8018966:	697b      	ldr	r3, [r7, #20]
 8018968:	2b00      	cmp	r3, #0
 801896a:	d1e6      	bne.n	801893a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801896c:	687b      	ldr	r3, [r7, #4]
 801896e:	681b      	ldr	r3, [r3, #0]
 8018970:	69db      	ldr	r3, [r3, #28]
 8018972:	f003 0310 	and.w	r3, r3, #16
 8018976:	2b10      	cmp	r3, #16
 8018978:	d103      	bne.n	8018982 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801897a:	687b      	ldr	r3, [r7, #4]
 801897c:	681b      	ldr	r3, [r3, #0]
 801897e:	2210      	movs	r2, #16
 8018980:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8018982:	687b      	ldr	r3, [r7, #4]
 8018984:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8018988:	4619      	mov	r1, r3
 801898a:	6878      	ldr	r0, [r7, #4]
 801898c:	f7ff f8d2 	bl	8017b34 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8018990:	e00b      	b.n	80189aa <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8018992:	6878      	ldr	r0, [r7, #4]
 8018994:	f7ff f8ba 	bl	8017b0c <HAL_UART_RxCpltCallback>
}
 8018998:	e007      	b.n	80189aa <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801899a:	687b      	ldr	r3, [r7, #4]
 801899c:	681b      	ldr	r3, [r3, #0]
 801899e:	699a      	ldr	r2, [r3, #24]
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	681b      	ldr	r3, [r3, #0]
 80189a4:	f042 0208 	orr.w	r2, r2, #8
 80189a8:	619a      	str	r2, [r3, #24]
}
 80189aa:	bf00      	nop
 80189ac:	3758      	adds	r7, #88	; 0x58
 80189ae:	46bd      	mov	sp, r7
 80189b0:	bd80      	pop	{r7, pc}

080189b2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80189b2:	b580      	push	{r7, lr}
 80189b4:	b096      	sub	sp, #88	; 0x58
 80189b6:	af00      	add	r7, sp, #0
 80189b8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80189ba:	687b      	ldr	r3, [r7, #4]
 80189bc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80189c0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80189ca:	2b22      	cmp	r3, #34	; 0x22
 80189cc:	f040 8095 	bne.w	8018afa <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80189d0:	687b      	ldr	r3, [r7, #4]
 80189d2:	681b      	ldr	r3, [r3, #0]
 80189d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189d6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80189de:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80189e0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80189e4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80189e8:	4013      	ands	r3, r2
 80189ea:	b29a      	uxth	r2, r3
 80189ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80189ee:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80189f4:	1c9a      	adds	r2, r3, #2
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8018a00:	b29b      	uxth	r3, r3
 8018a02:	3b01      	subs	r3, #1
 8018a04:	b29a      	uxth	r2, r3
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8018a0c:	687b      	ldr	r3, [r7, #4]
 8018a0e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8018a12:	b29b      	uxth	r3, r3
 8018a14:	2b00      	cmp	r3, #0
 8018a16:	d178      	bne.n	8018b0a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	681b      	ldr	r3, [r3, #0]
 8018a1c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a20:	e853 3f00 	ldrex	r3, [r3]
 8018a24:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8018a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8018a2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018a2e:	687b      	ldr	r3, [r7, #4]
 8018a30:	681b      	ldr	r3, [r3, #0]
 8018a32:	461a      	mov	r2, r3
 8018a34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018a36:	643b      	str	r3, [r7, #64]	; 0x40
 8018a38:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018a3a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8018a3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018a3e:	e841 2300 	strex	r3, r2, [r1]
 8018a42:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8018a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a46:	2b00      	cmp	r3, #0
 8018a48:	d1e6      	bne.n	8018a18 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018a4a:	687b      	ldr	r3, [r7, #4]
 8018a4c:	681b      	ldr	r3, [r3, #0]
 8018a4e:	3308      	adds	r3, #8
 8018a50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018a52:	6a3b      	ldr	r3, [r7, #32]
 8018a54:	e853 3f00 	ldrex	r3, [r3]
 8018a58:	61fb      	str	r3, [r7, #28]
   return(result);
 8018a5a:	69fb      	ldr	r3, [r7, #28]
 8018a5c:	f023 0301 	bic.w	r3, r3, #1
 8018a60:	64bb      	str	r3, [r7, #72]	; 0x48
 8018a62:	687b      	ldr	r3, [r7, #4]
 8018a64:	681b      	ldr	r3, [r3, #0]
 8018a66:	3308      	adds	r3, #8
 8018a68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018a6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8018a6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018a6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018a70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018a72:	e841 2300 	strex	r3, r2, [r1]
 8018a76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8018a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a7a:	2b00      	cmp	r3, #0
 8018a7c:	d1e5      	bne.n	8018a4a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8018a7e:	687b      	ldr	r3, [r7, #4]
 8018a80:	2220      	movs	r2, #32
 8018a82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8018a86:	687b      	ldr	r3, [r7, #4]
 8018a88:	2200      	movs	r2, #0
 8018a8a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018a8c:	687b      	ldr	r3, [r7, #4]
 8018a8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018a90:	2b01      	cmp	r3, #1
 8018a92:	d12e      	bne.n	8018af2 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018a94:	687b      	ldr	r3, [r7, #4]
 8018a96:	2200      	movs	r2, #0
 8018a98:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018a9a:	687b      	ldr	r3, [r7, #4]
 8018a9c:	681b      	ldr	r3, [r3, #0]
 8018a9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018aa0:	68fb      	ldr	r3, [r7, #12]
 8018aa2:	e853 3f00 	ldrex	r3, [r3]
 8018aa6:	60bb      	str	r3, [r7, #8]
   return(result);
 8018aa8:	68bb      	ldr	r3, [r7, #8]
 8018aaa:	f023 0310 	bic.w	r3, r3, #16
 8018aae:	647b      	str	r3, [r7, #68]	; 0x44
 8018ab0:	687b      	ldr	r3, [r7, #4]
 8018ab2:	681b      	ldr	r3, [r3, #0]
 8018ab4:	461a      	mov	r2, r3
 8018ab6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018ab8:	61bb      	str	r3, [r7, #24]
 8018aba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018abc:	6979      	ldr	r1, [r7, #20]
 8018abe:	69ba      	ldr	r2, [r7, #24]
 8018ac0:	e841 2300 	strex	r3, r2, [r1]
 8018ac4:	613b      	str	r3, [r7, #16]
   return(result);
 8018ac6:	693b      	ldr	r3, [r7, #16]
 8018ac8:	2b00      	cmp	r3, #0
 8018aca:	d1e6      	bne.n	8018a9a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8018acc:	687b      	ldr	r3, [r7, #4]
 8018ace:	681b      	ldr	r3, [r3, #0]
 8018ad0:	69db      	ldr	r3, [r3, #28]
 8018ad2:	f003 0310 	and.w	r3, r3, #16
 8018ad6:	2b10      	cmp	r3, #16
 8018ad8:	d103      	bne.n	8018ae2 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8018ada:	687b      	ldr	r3, [r7, #4]
 8018adc:	681b      	ldr	r3, [r3, #0]
 8018ade:	2210      	movs	r2, #16
 8018ae0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8018ae2:	687b      	ldr	r3, [r7, #4]
 8018ae4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8018ae8:	4619      	mov	r1, r3
 8018aea:	6878      	ldr	r0, [r7, #4]
 8018aec:	f7ff f822 	bl	8017b34 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8018af0:	e00b      	b.n	8018b0a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8018af2:	6878      	ldr	r0, [r7, #4]
 8018af4:	f7ff f80a 	bl	8017b0c <HAL_UART_RxCpltCallback>
}
 8018af8:	e007      	b.n	8018b0a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8018afa:	687b      	ldr	r3, [r7, #4]
 8018afc:	681b      	ldr	r3, [r3, #0]
 8018afe:	699a      	ldr	r2, [r3, #24]
 8018b00:	687b      	ldr	r3, [r7, #4]
 8018b02:	681b      	ldr	r3, [r3, #0]
 8018b04:	f042 0208 	orr.w	r2, r2, #8
 8018b08:	619a      	str	r2, [r3, #24]
}
 8018b0a:	bf00      	nop
 8018b0c:	3758      	adds	r7, #88	; 0x58
 8018b0e:	46bd      	mov	sp, r7
 8018b10:	bd80      	pop	{r7, pc}
	...

08018b14 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8018b14:	b580      	push	{r7, lr}
 8018b16:	b0a6      	sub	sp, #152	; 0x98
 8018b18:	af00      	add	r7, sp, #0
 8018b1a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8018b1c:	687b      	ldr	r3, [r7, #4]
 8018b1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018b22:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	681b      	ldr	r3, [r3, #0]
 8018b2a:	69db      	ldr	r3, [r3, #28]
 8018b2c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8018b30:	687b      	ldr	r3, [r7, #4]
 8018b32:	681b      	ldr	r3, [r3, #0]
 8018b34:	681b      	ldr	r3, [r3, #0]
 8018b36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8018b3a:	687b      	ldr	r3, [r7, #4]
 8018b3c:	681b      	ldr	r3, [r3, #0]
 8018b3e:	689b      	ldr	r3, [r3, #8]
 8018b40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018b4a:	2b22      	cmp	r3, #34	; 0x22
 8018b4c:	f040 814f 	bne.w	8018dee <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8018b56:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8018b5a:	e0f6      	b.n	8018d4a <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8018b5c:	687b      	ldr	r3, [r7, #4]
 8018b5e:	681b      	ldr	r3, [r3, #0]
 8018b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b62:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8018b66:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8018b6a:	b2d9      	uxtb	r1, r3
 8018b6c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8018b70:	b2da      	uxtb	r2, r3
 8018b72:	687b      	ldr	r3, [r7, #4]
 8018b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018b76:	400a      	ands	r2, r1
 8018b78:	b2d2      	uxtb	r2, r2
 8018b7a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8018b7c:	687b      	ldr	r3, [r7, #4]
 8018b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018b80:	1c5a      	adds	r2, r3, #1
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8018b8c:	b29b      	uxth	r3, r3
 8018b8e:	3b01      	subs	r3, #1
 8018b90:	b29a      	uxth	r2, r3
 8018b92:	687b      	ldr	r3, [r7, #4]
 8018b94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8018b98:	687b      	ldr	r3, [r7, #4]
 8018b9a:	681b      	ldr	r3, [r3, #0]
 8018b9c:	69db      	ldr	r3, [r3, #28]
 8018b9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8018ba2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8018ba6:	f003 0307 	and.w	r3, r3, #7
 8018baa:	2b00      	cmp	r3, #0
 8018bac:	d053      	beq.n	8018c56 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8018bae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8018bb2:	f003 0301 	and.w	r3, r3, #1
 8018bb6:	2b00      	cmp	r3, #0
 8018bb8:	d011      	beq.n	8018bde <UART_RxISR_8BIT_FIFOEN+0xca>
 8018bba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8018bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018bc2:	2b00      	cmp	r3, #0
 8018bc4:	d00b      	beq.n	8018bde <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	681b      	ldr	r3, [r3, #0]
 8018bca:	2201      	movs	r2, #1
 8018bcc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8018bce:	687b      	ldr	r3, [r7, #4]
 8018bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018bd4:	f043 0201 	orr.w	r2, r3, #1
 8018bd8:	687b      	ldr	r3, [r7, #4]
 8018bda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8018bde:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8018be2:	f003 0302 	and.w	r3, r3, #2
 8018be6:	2b00      	cmp	r3, #0
 8018be8:	d011      	beq.n	8018c0e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8018bea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8018bee:	f003 0301 	and.w	r3, r3, #1
 8018bf2:	2b00      	cmp	r3, #0
 8018bf4:	d00b      	beq.n	8018c0e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8018bf6:	687b      	ldr	r3, [r7, #4]
 8018bf8:	681b      	ldr	r3, [r3, #0]
 8018bfa:	2202      	movs	r2, #2
 8018bfc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8018bfe:	687b      	ldr	r3, [r7, #4]
 8018c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018c04:	f043 0204 	orr.w	r2, r3, #4
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8018c0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8018c12:	f003 0304 	and.w	r3, r3, #4
 8018c16:	2b00      	cmp	r3, #0
 8018c18:	d011      	beq.n	8018c3e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8018c1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8018c1e:	f003 0301 	and.w	r3, r3, #1
 8018c22:	2b00      	cmp	r3, #0
 8018c24:	d00b      	beq.n	8018c3e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8018c26:	687b      	ldr	r3, [r7, #4]
 8018c28:	681b      	ldr	r3, [r3, #0]
 8018c2a:	2204      	movs	r2, #4
 8018c2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8018c2e:	687b      	ldr	r3, [r7, #4]
 8018c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018c34:	f043 0202 	orr.w	r2, r3, #2
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018c44:	2b00      	cmp	r3, #0
 8018c46:	d006      	beq.n	8018c56 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8018c48:	6878      	ldr	r0, [r7, #4]
 8018c4a:	f7fe ff69 	bl	8017b20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	2200      	movs	r2, #0
 8018c52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8018c56:	687b      	ldr	r3, [r7, #4]
 8018c58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8018c5c:	b29b      	uxth	r3, r3
 8018c5e:	2b00      	cmp	r3, #0
 8018c60:	d173      	bne.n	8018d4a <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8018c62:	687b      	ldr	r3, [r7, #4]
 8018c64:	681b      	ldr	r3, [r3, #0]
 8018c66:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018c68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018c6a:	e853 3f00 	ldrex	r3, [r3]
 8018c6e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8018c70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018c72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8018c76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8018c7a:	687b      	ldr	r3, [r7, #4]
 8018c7c:	681b      	ldr	r3, [r3, #0]
 8018c7e:	461a      	mov	r2, r3
 8018c80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8018c84:	66bb      	str	r3, [r7, #104]	; 0x68
 8018c86:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018c88:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8018c8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8018c8c:	e841 2300 	strex	r3, r2, [r1]
 8018c90:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8018c92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018c94:	2b00      	cmp	r3, #0
 8018c96:	d1e4      	bne.n	8018c62 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8018c98:	687b      	ldr	r3, [r7, #4]
 8018c9a:	681b      	ldr	r3, [r3, #0]
 8018c9c:	3308      	adds	r3, #8
 8018c9e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018ca0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018ca2:	e853 3f00 	ldrex	r3, [r3]
 8018ca6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8018ca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018caa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8018cae:	f023 0301 	bic.w	r3, r3, #1
 8018cb2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8018cb4:	687b      	ldr	r3, [r7, #4]
 8018cb6:	681b      	ldr	r3, [r3, #0]
 8018cb8:	3308      	adds	r3, #8
 8018cba:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8018cbc:	657a      	str	r2, [r7, #84]	; 0x54
 8018cbe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018cc0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018cc2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018cc4:	e841 2300 	strex	r3, r2, [r1]
 8018cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8018cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018ccc:	2b00      	cmp	r3, #0
 8018cce:	d1e3      	bne.n	8018c98 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	2220      	movs	r2, #32
 8018cd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8018cd8:	687b      	ldr	r3, [r7, #4]
 8018cda:	2200      	movs	r2, #0
 8018cdc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018ce2:	2b01      	cmp	r3, #1
 8018ce4:	d12e      	bne.n	8018d44 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	2200      	movs	r2, #0
 8018cea:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	681b      	ldr	r3, [r3, #0]
 8018cf0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018cf4:	e853 3f00 	ldrex	r3, [r3]
 8018cf8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8018cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018cfc:	f023 0310 	bic.w	r3, r3, #16
 8018d00:	67bb      	str	r3, [r7, #120]	; 0x78
 8018d02:	687b      	ldr	r3, [r7, #4]
 8018d04:	681b      	ldr	r3, [r3, #0]
 8018d06:	461a      	mov	r2, r3
 8018d08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8018d0a:	643b      	str	r3, [r7, #64]	; 0x40
 8018d0c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018d0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8018d10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018d12:	e841 2300 	strex	r3, r2, [r1]
 8018d16:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8018d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d1a:	2b00      	cmp	r3, #0
 8018d1c:	d1e6      	bne.n	8018cec <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8018d1e:	687b      	ldr	r3, [r7, #4]
 8018d20:	681b      	ldr	r3, [r3, #0]
 8018d22:	69db      	ldr	r3, [r3, #28]
 8018d24:	f003 0310 	and.w	r3, r3, #16
 8018d28:	2b10      	cmp	r3, #16
 8018d2a:	d103      	bne.n	8018d34 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	681b      	ldr	r3, [r3, #0]
 8018d30:	2210      	movs	r2, #16
 8018d32:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8018d34:	687b      	ldr	r3, [r7, #4]
 8018d36:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8018d3a:	4619      	mov	r1, r3
 8018d3c:	6878      	ldr	r0, [r7, #4]
 8018d3e:	f7fe fef9 	bl	8017b34 <HAL_UARTEx_RxEventCallback>
 8018d42:	e002      	b.n	8018d4a <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8018d44:	6878      	ldr	r0, [r7, #4]
 8018d46:	f7fe fee1 	bl	8017b0c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8018d4a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8018d4e:	2b00      	cmp	r3, #0
 8018d50:	d006      	beq.n	8018d60 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8018d52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8018d56:	f003 0320 	and.w	r3, r3, #32
 8018d5a:	2b00      	cmp	r3, #0
 8018d5c:	f47f aefe 	bne.w	8018b5c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8018d66:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8018d6a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8018d6e:	2b00      	cmp	r3, #0
 8018d70:	d045      	beq.n	8018dfe <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8018d72:	687b      	ldr	r3, [r7, #4]
 8018d74:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8018d78:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8018d7c:	429a      	cmp	r2, r3
 8018d7e:	d23e      	bcs.n	8018dfe <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	681b      	ldr	r3, [r3, #0]
 8018d84:	3308      	adds	r3, #8
 8018d86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018d88:	6a3b      	ldr	r3, [r7, #32]
 8018d8a:	e853 3f00 	ldrex	r3, [r3]
 8018d8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8018d90:	69fb      	ldr	r3, [r7, #28]
 8018d92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8018d96:	673b      	str	r3, [r7, #112]	; 0x70
 8018d98:	687b      	ldr	r3, [r7, #4]
 8018d9a:	681b      	ldr	r3, [r3, #0]
 8018d9c:	3308      	adds	r3, #8
 8018d9e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8018da0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8018da2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018da4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018da6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018da8:	e841 2300 	strex	r3, r2, [r1]
 8018dac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8018dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018db0:	2b00      	cmp	r3, #0
 8018db2:	d1e5      	bne.n	8018d80 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	4a14      	ldr	r2, [pc, #80]	; (8018e08 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8018db8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	681b      	ldr	r3, [r3, #0]
 8018dbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018dc0:	68fb      	ldr	r3, [r7, #12]
 8018dc2:	e853 3f00 	ldrex	r3, [r3]
 8018dc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8018dc8:	68bb      	ldr	r3, [r7, #8]
 8018dca:	f043 0320 	orr.w	r3, r3, #32
 8018dce:	66fb      	str	r3, [r7, #108]	; 0x6c
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	681b      	ldr	r3, [r3, #0]
 8018dd4:	461a      	mov	r2, r3
 8018dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018dd8:	61bb      	str	r3, [r7, #24]
 8018dda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018ddc:	6979      	ldr	r1, [r7, #20]
 8018dde:	69ba      	ldr	r2, [r7, #24]
 8018de0:	e841 2300 	strex	r3, r2, [r1]
 8018de4:	613b      	str	r3, [r7, #16]
   return(result);
 8018de6:	693b      	ldr	r3, [r7, #16]
 8018de8:	2b00      	cmp	r3, #0
 8018dea:	d1e6      	bne.n	8018dba <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8018dec:	e007      	b.n	8018dfe <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	681b      	ldr	r3, [r3, #0]
 8018df2:	699a      	ldr	r2, [r3, #24]
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	681b      	ldr	r3, [r3, #0]
 8018df8:	f042 0208 	orr.w	r2, r2, #8
 8018dfc:	619a      	str	r2, [r3, #24]
}
 8018dfe:	bf00      	nop
 8018e00:	3798      	adds	r7, #152	; 0x98
 8018e02:	46bd      	mov	sp, r7
 8018e04:	bd80      	pop	{r7, pc}
 8018e06:	bf00      	nop
 8018e08:	08018853 	.word	0x08018853

08018e0c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8018e0c:	b580      	push	{r7, lr}
 8018e0e:	b0a8      	sub	sp, #160	; 0xa0
 8018e10:	af00      	add	r7, sp, #0
 8018e12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8018e14:	687b      	ldr	r3, [r7, #4]
 8018e16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018e1a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8018e1e:	687b      	ldr	r3, [r7, #4]
 8018e20:	681b      	ldr	r3, [r3, #0]
 8018e22:	69db      	ldr	r3, [r3, #28]
 8018e24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	681b      	ldr	r3, [r3, #0]
 8018e2c:	681b      	ldr	r3, [r3, #0]
 8018e2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8018e32:	687b      	ldr	r3, [r7, #4]
 8018e34:	681b      	ldr	r3, [r3, #0]
 8018e36:	689b      	ldr	r3, [r3, #8]
 8018e38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8018e3c:	687b      	ldr	r3, [r7, #4]
 8018e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018e42:	2b22      	cmp	r3, #34	; 0x22
 8018e44:	f040 8153 	bne.w	80190ee <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8018e4e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8018e52:	e0fa      	b.n	801904a <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8018e54:	687b      	ldr	r3, [r7, #4]
 8018e56:	681b      	ldr	r3, [r3, #0]
 8018e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e5a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8018e5e:	687b      	ldr	r3, [r7, #4]
 8018e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018e62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8018e66:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8018e6a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8018e6e:	4013      	ands	r3, r2
 8018e70:	b29a      	uxth	r2, r3
 8018e72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8018e76:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8018e78:	687b      	ldr	r3, [r7, #4]
 8018e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018e7c:	1c9a      	adds	r2, r3, #2
 8018e7e:	687b      	ldr	r3, [r7, #4]
 8018e80:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8018e82:	687b      	ldr	r3, [r7, #4]
 8018e84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8018e88:	b29b      	uxth	r3, r3
 8018e8a:	3b01      	subs	r3, #1
 8018e8c:	b29a      	uxth	r2, r3
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	681b      	ldr	r3, [r3, #0]
 8018e98:	69db      	ldr	r3, [r3, #28]
 8018e9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8018e9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018ea2:	f003 0307 	and.w	r3, r3, #7
 8018ea6:	2b00      	cmp	r3, #0
 8018ea8:	d053      	beq.n	8018f52 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8018eaa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018eae:	f003 0301 	and.w	r3, r3, #1
 8018eb2:	2b00      	cmp	r3, #0
 8018eb4:	d011      	beq.n	8018eda <UART_RxISR_16BIT_FIFOEN+0xce>
 8018eb6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8018eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018ebe:	2b00      	cmp	r3, #0
 8018ec0:	d00b      	beq.n	8018eda <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	681b      	ldr	r3, [r3, #0]
 8018ec6:	2201      	movs	r2, #1
 8018ec8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8018eca:	687b      	ldr	r3, [r7, #4]
 8018ecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018ed0:	f043 0201 	orr.w	r2, r3, #1
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8018eda:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018ede:	f003 0302 	and.w	r3, r3, #2
 8018ee2:	2b00      	cmp	r3, #0
 8018ee4:	d011      	beq.n	8018f0a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8018ee6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018eea:	f003 0301 	and.w	r3, r3, #1
 8018eee:	2b00      	cmp	r3, #0
 8018ef0:	d00b      	beq.n	8018f0a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	681b      	ldr	r3, [r3, #0]
 8018ef6:	2202      	movs	r2, #2
 8018ef8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8018efa:	687b      	ldr	r3, [r7, #4]
 8018efc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018f00:	f043 0204 	orr.w	r2, r3, #4
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8018f0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018f0e:	f003 0304 	and.w	r3, r3, #4
 8018f12:	2b00      	cmp	r3, #0
 8018f14:	d011      	beq.n	8018f3a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8018f16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018f1a:	f003 0301 	and.w	r3, r3, #1
 8018f1e:	2b00      	cmp	r3, #0
 8018f20:	d00b      	beq.n	8018f3a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	681b      	ldr	r3, [r3, #0]
 8018f26:	2204      	movs	r2, #4
 8018f28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018f30:	f043 0202 	orr.w	r2, r3, #2
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8018f3a:	687b      	ldr	r3, [r7, #4]
 8018f3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018f40:	2b00      	cmp	r3, #0
 8018f42:	d006      	beq.n	8018f52 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8018f44:	6878      	ldr	r0, [r7, #4]
 8018f46:	f7fe fdeb 	bl	8017b20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018f4a:	687b      	ldr	r3, [r7, #4]
 8018f4c:	2200      	movs	r2, #0
 8018f4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8018f52:	687b      	ldr	r3, [r7, #4]
 8018f54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8018f58:	b29b      	uxth	r3, r3
 8018f5a:	2b00      	cmp	r3, #0
 8018f5c:	d175      	bne.n	801904a <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	681b      	ldr	r3, [r3, #0]
 8018f62:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018f64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018f66:	e853 3f00 	ldrex	r3, [r3]
 8018f6a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8018f6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018f6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8018f72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	681b      	ldr	r3, [r3, #0]
 8018f7a:	461a      	mov	r2, r3
 8018f7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8018f80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8018f82:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018f84:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8018f86:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8018f88:	e841 2300 	strex	r3, r2, [r1]
 8018f8c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8018f8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018f90:	2b00      	cmp	r3, #0
 8018f92:	d1e4      	bne.n	8018f5e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8018f94:	687b      	ldr	r3, [r7, #4]
 8018f96:	681b      	ldr	r3, [r3, #0]
 8018f98:	3308      	adds	r3, #8
 8018f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018f9e:	e853 3f00 	ldrex	r3, [r3]
 8018fa2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8018fa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018fa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8018faa:	f023 0301 	bic.w	r3, r3, #1
 8018fae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8018fb2:	687b      	ldr	r3, [r7, #4]
 8018fb4:	681b      	ldr	r3, [r3, #0]
 8018fb6:	3308      	adds	r3, #8
 8018fb8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8018fbc:	65ba      	str	r2, [r7, #88]	; 0x58
 8018fbe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018fc0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8018fc2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8018fc4:	e841 2300 	strex	r3, r2, [r1]
 8018fc8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8018fca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018fcc:	2b00      	cmp	r3, #0
 8018fce:	d1e1      	bne.n	8018f94 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	2220      	movs	r2, #32
 8018fd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8018fd8:	687b      	ldr	r3, [r7, #4]
 8018fda:	2200      	movs	r2, #0
 8018fdc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018fde:	687b      	ldr	r3, [r7, #4]
 8018fe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018fe2:	2b01      	cmp	r3, #1
 8018fe4:	d12e      	bne.n	8019044 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018fe6:	687b      	ldr	r3, [r7, #4]
 8018fe8:	2200      	movs	r2, #0
 8018fea:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018fec:	687b      	ldr	r3, [r7, #4]
 8018fee:	681b      	ldr	r3, [r3, #0]
 8018ff0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ff4:	e853 3f00 	ldrex	r3, [r3]
 8018ff8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8018ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018ffc:	f023 0310 	bic.w	r3, r3, #16
 8019000:	67fb      	str	r3, [r7, #124]	; 0x7c
 8019002:	687b      	ldr	r3, [r7, #4]
 8019004:	681b      	ldr	r3, [r3, #0]
 8019006:	461a      	mov	r2, r3
 8019008:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801900a:	647b      	str	r3, [r7, #68]	; 0x44
 801900c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801900e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8019010:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019012:	e841 2300 	strex	r3, r2, [r1]
 8019016:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8019018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801901a:	2b00      	cmp	r3, #0
 801901c:	d1e6      	bne.n	8018fec <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801901e:	687b      	ldr	r3, [r7, #4]
 8019020:	681b      	ldr	r3, [r3, #0]
 8019022:	69db      	ldr	r3, [r3, #28]
 8019024:	f003 0310 	and.w	r3, r3, #16
 8019028:	2b10      	cmp	r3, #16
 801902a:	d103      	bne.n	8019034 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801902c:	687b      	ldr	r3, [r7, #4]
 801902e:	681b      	ldr	r3, [r3, #0]
 8019030:	2210      	movs	r2, #16
 8019032:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8019034:	687b      	ldr	r3, [r7, #4]
 8019036:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801903a:	4619      	mov	r1, r3
 801903c:	6878      	ldr	r0, [r7, #4]
 801903e:	f7fe fd79 	bl	8017b34 <HAL_UARTEx_RxEventCallback>
 8019042:	e002      	b.n	801904a <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8019044:	6878      	ldr	r0, [r7, #4]
 8019046:	f7fe fd61 	bl	8017b0c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801904a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 801904e:	2b00      	cmp	r3, #0
 8019050:	d006      	beq.n	8019060 <UART_RxISR_16BIT_FIFOEN+0x254>
 8019052:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019056:	f003 0320 	and.w	r3, r3, #32
 801905a:	2b00      	cmp	r3, #0
 801905c:	f47f aefa 	bne.w	8018e54 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8019066:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801906a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801906e:	2b00      	cmp	r3, #0
 8019070:	d045      	beq.n	80190fe <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8019072:	687b      	ldr	r3, [r7, #4]
 8019074:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8019078:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 801907c:	429a      	cmp	r2, r3
 801907e:	d23e      	bcs.n	80190fe <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8019080:	687b      	ldr	r3, [r7, #4]
 8019082:	681b      	ldr	r3, [r3, #0]
 8019084:	3308      	adds	r3, #8
 8019086:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801908a:	e853 3f00 	ldrex	r3, [r3]
 801908e:	623b      	str	r3, [r7, #32]
   return(result);
 8019090:	6a3b      	ldr	r3, [r7, #32]
 8019092:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8019096:	677b      	str	r3, [r7, #116]	; 0x74
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	681b      	ldr	r3, [r3, #0]
 801909c:	3308      	adds	r3, #8
 801909e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80190a0:	633a      	str	r2, [r7, #48]	; 0x30
 80190a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80190a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80190a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80190a8:	e841 2300 	strex	r3, r2, [r1]
 80190ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80190ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190b0:	2b00      	cmp	r3, #0
 80190b2:	d1e5      	bne.n	8019080 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80190b4:	687b      	ldr	r3, [r7, #4]
 80190b6:	4a14      	ldr	r2, [pc, #80]	; (8019108 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80190b8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80190ba:	687b      	ldr	r3, [r7, #4]
 80190bc:	681b      	ldr	r3, [r3, #0]
 80190be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80190c0:	693b      	ldr	r3, [r7, #16]
 80190c2:	e853 3f00 	ldrex	r3, [r3]
 80190c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80190c8:	68fb      	ldr	r3, [r7, #12]
 80190ca:	f043 0320 	orr.w	r3, r3, #32
 80190ce:	673b      	str	r3, [r7, #112]	; 0x70
 80190d0:	687b      	ldr	r3, [r7, #4]
 80190d2:	681b      	ldr	r3, [r3, #0]
 80190d4:	461a      	mov	r2, r3
 80190d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80190d8:	61fb      	str	r3, [r7, #28]
 80190da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80190dc:	69b9      	ldr	r1, [r7, #24]
 80190de:	69fa      	ldr	r2, [r7, #28]
 80190e0:	e841 2300 	strex	r3, r2, [r1]
 80190e4:	617b      	str	r3, [r7, #20]
   return(result);
 80190e6:	697b      	ldr	r3, [r7, #20]
 80190e8:	2b00      	cmp	r3, #0
 80190ea:	d1e6      	bne.n	80190ba <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80190ec:	e007      	b.n	80190fe <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80190ee:	687b      	ldr	r3, [r7, #4]
 80190f0:	681b      	ldr	r3, [r3, #0]
 80190f2:	699a      	ldr	r2, [r3, #24]
 80190f4:	687b      	ldr	r3, [r7, #4]
 80190f6:	681b      	ldr	r3, [r3, #0]
 80190f8:	f042 0208 	orr.w	r2, r2, #8
 80190fc:	619a      	str	r2, [r3, #24]
}
 80190fe:	bf00      	nop
 8019100:	37a0      	adds	r7, #160	; 0xa0
 8019102:	46bd      	mov	sp, r7
 8019104:	bd80      	pop	{r7, pc}
 8019106:	bf00      	nop
 8019108:	080189b3 	.word	0x080189b3

0801910c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801910c:	b480      	push	{r7}
 801910e:	b083      	sub	sp, #12
 8019110:	af00      	add	r7, sp, #0
 8019112:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8019114:	bf00      	nop
 8019116:	370c      	adds	r7, #12
 8019118:	46bd      	mov	sp, r7
 801911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801911e:	4770      	bx	lr

08019120 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8019120:	b480      	push	{r7}
 8019122:	b083      	sub	sp, #12
 8019124:	af00      	add	r7, sp, #0
 8019126:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8019128:	bf00      	nop
 801912a:	370c      	adds	r7, #12
 801912c:	46bd      	mov	sp, r7
 801912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019132:	4770      	bx	lr

08019134 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8019134:	b480      	push	{r7}
 8019136:	b083      	sub	sp, #12
 8019138:	af00      	add	r7, sp, #0
 801913a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801913c:	bf00      	nop
 801913e:	370c      	adds	r7, #12
 8019140:	46bd      	mov	sp, r7
 8019142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019146:	4770      	bx	lr

08019148 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8019148:	b480      	push	{r7}
 801914a:	b085      	sub	sp, #20
 801914c:	af00      	add	r7, sp, #0
 801914e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8019150:	687b      	ldr	r3, [r7, #4]
 8019152:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8019156:	2b01      	cmp	r3, #1
 8019158:	d101      	bne.n	801915e <HAL_UARTEx_DisableFifoMode+0x16>
 801915a:	2302      	movs	r3, #2
 801915c:	e027      	b.n	80191ae <HAL_UARTEx_DisableFifoMode+0x66>
 801915e:	687b      	ldr	r3, [r7, #4]
 8019160:	2201      	movs	r2, #1
 8019162:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8019166:	687b      	ldr	r3, [r7, #4]
 8019168:	2224      	movs	r2, #36	; 0x24
 801916a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801916e:	687b      	ldr	r3, [r7, #4]
 8019170:	681b      	ldr	r3, [r3, #0]
 8019172:	681b      	ldr	r3, [r3, #0]
 8019174:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8019176:	687b      	ldr	r3, [r7, #4]
 8019178:	681b      	ldr	r3, [r3, #0]
 801917a:	681a      	ldr	r2, [r3, #0]
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	681b      	ldr	r3, [r3, #0]
 8019180:	f022 0201 	bic.w	r2, r2, #1
 8019184:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8019186:	68fb      	ldr	r3, [r7, #12]
 8019188:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801918c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801918e:	687b      	ldr	r3, [r7, #4]
 8019190:	2200      	movs	r2, #0
 8019192:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8019194:	687b      	ldr	r3, [r7, #4]
 8019196:	681b      	ldr	r3, [r3, #0]
 8019198:	68fa      	ldr	r2, [r7, #12]
 801919a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801919c:	687b      	ldr	r3, [r7, #4]
 801919e:	2220      	movs	r2, #32
 80191a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80191a4:	687b      	ldr	r3, [r7, #4]
 80191a6:	2200      	movs	r2, #0
 80191a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80191ac:	2300      	movs	r3, #0
}
 80191ae:	4618      	mov	r0, r3
 80191b0:	3714      	adds	r7, #20
 80191b2:	46bd      	mov	sp, r7
 80191b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191b8:	4770      	bx	lr

080191ba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80191ba:	b580      	push	{r7, lr}
 80191bc:	b084      	sub	sp, #16
 80191be:	af00      	add	r7, sp, #0
 80191c0:	6078      	str	r0, [r7, #4]
 80191c2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80191c4:	687b      	ldr	r3, [r7, #4]
 80191c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80191ca:	2b01      	cmp	r3, #1
 80191cc:	d101      	bne.n	80191d2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80191ce:	2302      	movs	r3, #2
 80191d0:	e02d      	b.n	801922e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80191d2:	687b      	ldr	r3, [r7, #4]
 80191d4:	2201      	movs	r2, #1
 80191d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80191da:	687b      	ldr	r3, [r7, #4]
 80191dc:	2224      	movs	r2, #36	; 0x24
 80191de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80191e2:	687b      	ldr	r3, [r7, #4]
 80191e4:	681b      	ldr	r3, [r3, #0]
 80191e6:	681b      	ldr	r3, [r3, #0]
 80191e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80191ea:	687b      	ldr	r3, [r7, #4]
 80191ec:	681b      	ldr	r3, [r3, #0]
 80191ee:	681a      	ldr	r2, [r3, #0]
 80191f0:	687b      	ldr	r3, [r7, #4]
 80191f2:	681b      	ldr	r3, [r3, #0]
 80191f4:	f022 0201 	bic.w	r2, r2, #1
 80191f8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80191fa:	687b      	ldr	r3, [r7, #4]
 80191fc:	681b      	ldr	r3, [r3, #0]
 80191fe:	689b      	ldr	r3, [r3, #8]
 8019200:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8019204:	687b      	ldr	r3, [r7, #4]
 8019206:	681b      	ldr	r3, [r3, #0]
 8019208:	683a      	ldr	r2, [r7, #0]
 801920a:	430a      	orrs	r2, r1
 801920c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801920e:	6878      	ldr	r0, [r7, #4]
 8019210:	f000 f850 	bl	80192b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8019214:	687b      	ldr	r3, [r7, #4]
 8019216:	681b      	ldr	r3, [r3, #0]
 8019218:	68fa      	ldr	r2, [r7, #12]
 801921a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801921c:	687b      	ldr	r3, [r7, #4]
 801921e:	2220      	movs	r2, #32
 8019220:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8019224:	687b      	ldr	r3, [r7, #4]
 8019226:	2200      	movs	r2, #0
 8019228:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801922c:	2300      	movs	r3, #0
}
 801922e:	4618      	mov	r0, r3
 8019230:	3710      	adds	r7, #16
 8019232:	46bd      	mov	sp, r7
 8019234:	bd80      	pop	{r7, pc}

08019236 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8019236:	b580      	push	{r7, lr}
 8019238:	b084      	sub	sp, #16
 801923a:	af00      	add	r7, sp, #0
 801923c:	6078      	str	r0, [r7, #4]
 801923e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8019240:	687b      	ldr	r3, [r7, #4]
 8019242:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8019246:	2b01      	cmp	r3, #1
 8019248:	d101      	bne.n	801924e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801924a:	2302      	movs	r3, #2
 801924c:	e02d      	b.n	80192aa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801924e:	687b      	ldr	r3, [r7, #4]
 8019250:	2201      	movs	r2, #1
 8019252:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8019256:	687b      	ldr	r3, [r7, #4]
 8019258:	2224      	movs	r2, #36	; 0x24
 801925a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801925e:	687b      	ldr	r3, [r7, #4]
 8019260:	681b      	ldr	r3, [r3, #0]
 8019262:	681b      	ldr	r3, [r3, #0]
 8019264:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8019266:	687b      	ldr	r3, [r7, #4]
 8019268:	681b      	ldr	r3, [r3, #0]
 801926a:	681a      	ldr	r2, [r3, #0]
 801926c:	687b      	ldr	r3, [r7, #4]
 801926e:	681b      	ldr	r3, [r3, #0]
 8019270:	f022 0201 	bic.w	r2, r2, #1
 8019274:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8019276:	687b      	ldr	r3, [r7, #4]
 8019278:	681b      	ldr	r3, [r3, #0]
 801927a:	689b      	ldr	r3, [r3, #8]
 801927c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8019280:	687b      	ldr	r3, [r7, #4]
 8019282:	681b      	ldr	r3, [r3, #0]
 8019284:	683a      	ldr	r2, [r7, #0]
 8019286:	430a      	orrs	r2, r1
 8019288:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801928a:	6878      	ldr	r0, [r7, #4]
 801928c:	f000 f812 	bl	80192b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8019290:	687b      	ldr	r3, [r7, #4]
 8019292:	681b      	ldr	r3, [r3, #0]
 8019294:	68fa      	ldr	r2, [r7, #12]
 8019296:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8019298:	687b      	ldr	r3, [r7, #4]
 801929a:	2220      	movs	r2, #32
 801929c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80192a0:	687b      	ldr	r3, [r7, #4]
 80192a2:	2200      	movs	r2, #0
 80192a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80192a8:	2300      	movs	r3, #0
}
 80192aa:	4618      	mov	r0, r3
 80192ac:	3710      	adds	r7, #16
 80192ae:	46bd      	mov	sp, r7
 80192b0:	bd80      	pop	{r7, pc}
	...

080192b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80192b4:	b480      	push	{r7}
 80192b6:	b085      	sub	sp, #20
 80192b8:	af00      	add	r7, sp, #0
 80192ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80192bc:	687b      	ldr	r3, [r7, #4]
 80192be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80192c0:	2b00      	cmp	r3, #0
 80192c2:	d108      	bne.n	80192d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80192c4:	687b      	ldr	r3, [r7, #4]
 80192c6:	2201      	movs	r2, #1
 80192c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	2201      	movs	r2, #1
 80192d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80192d4:	e031      	b.n	801933a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80192d6:	2308      	movs	r3, #8
 80192d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80192da:	2308      	movs	r3, #8
 80192dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80192de:	687b      	ldr	r3, [r7, #4]
 80192e0:	681b      	ldr	r3, [r3, #0]
 80192e2:	689b      	ldr	r3, [r3, #8]
 80192e4:	0e5b      	lsrs	r3, r3, #25
 80192e6:	b2db      	uxtb	r3, r3
 80192e8:	f003 0307 	and.w	r3, r3, #7
 80192ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80192ee:	687b      	ldr	r3, [r7, #4]
 80192f0:	681b      	ldr	r3, [r3, #0]
 80192f2:	689b      	ldr	r3, [r3, #8]
 80192f4:	0f5b      	lsrs	r3, r3, #29
 80192f6:	b2db      	uxtb	r3, r3
 80192f8:	f003 0307 	and.w	r3, r3, #7
 80192fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80192fe:	7bbb      	ldrb	r3, [r7, #14]
 8019300:	7b3a      	ldrb	r2, [r7, #12]
 8019302:	4911      	ldr	r1, [pc, #68]	; (8019348 <UARTEx_SetNbDataToProcess+0x94>)
 8019304:	5c8a      	ldrb	r2, [r1, r2]
 8019306:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801930a:	7b3a      	ldrb	r2, [r7, #12]
 801930c:	490f      	ldr	r1, [pc, #60]	; (801934c <UARTEx_SetNbDataToProcess+0x98>)
 801930e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8019310:	fb93 f3f2 	sdiv	r3, r3, r2
 8019314:	b29a      	uxth	r2, r3
 8019316:	687b      	ldr	r3, [r7, #4]
 8019318:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801931c:	7bfb      	ldrb	r3, [r7, #15]
 801931e:	7b7a      	ldrb	r2, [r7, #13]
 8019320:	4909      	ldr	r1, [pc, #36]	; (8019348 <UARTEx_SetNbDataToProcess+0x94>)
 8019322:	5c8a      	ldrb	r2, [r1, r2]
 8019324:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8019328:	7b7a      	ldrb	r2, [r7, #13]
 801932a:	4908      	ldr	r1, [pc, #32]	; (801934c <UARTEx_SetNbDataToProcess+0x98>)
 801932c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801932e:	fb93 f3f2 	sdiv	r3, r3, r2
 8019332:	b29a      	uxth	r2, r3
 8019334:	687b      	ldr	r3, [r7, #4]
 8019336:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801933a:	bf00      	nop
 801933c:	3714      	adds	r7, #20
 801933e:	46bd      	mov	sp, r7
 8019340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019344:	4770      	bx	lr
 8019346:	bf00      	nop
 8019348:	0801ca30 	.word	0x0801ca30
 801934c:	0801ca38 	.word	0x0801ca38

08019350 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8019350:	b480      	push	{r7}
 8019352:	b085      	sub	sp, #20
 8019354:	af00      	add	r7, sp, #0
 8019356:	4603      	mov	r3, r0
 8019358:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801935a:	2300      	movs	r3, #0
 801935c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801935e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019362:	2b84      	cmp	r3, #132	; 0x84
 8019364:	d005      	beq.n	8019372 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8019366:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801936a:	68fb      	ldr	r3, [r7, #12]
 801936c:	4413      	add	r3, r2
 801936e:	3303      	adds	r3, #3
 8019370:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8019372:	68fb      	ldr	r3, [r7, #12]
}
 8019374:	4618      	mov	r0, r3
 8019376:	3714      	adds	r7, #20
 8019378:	46bd      	mov	sp, r7
 801937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801937e:	4770      	bx	lr

08019380 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8019380:	b580      	push	{r7, lr}
 8019382:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8019384:	f000 fee8 	bl	801a158 <vTaskStartScheduler>
  
  return osOK;
 8019388:	2300      	movs	r3, #0
}
 801938a:	4618      	mov	r0, r3
 801938c:	bd80      	pop	{r7, pc}

0801938e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 801938e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019390:	b087      	sub	sp, #28
 8019392:	af02      	add	r7, sp, #8
 8019394:	6078      	str	r0, [r7, #4]
 8019396:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8019398:	687b      	ldr	r3, [r7, #4]
 801939a:	685c      	ldr	r4, [r3, #4]
 801939c:	687b      	ldr	r3, [r7, #4]
 801939e:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80193a0:	687b      	ldr	r3, [r7, #4]
 80193a2:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80193a4:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80193a6:	687b      	ldr	r3, [r7, #4]
 80193a8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80193ac:	4618      	mov	r0, r3
 80193ae:	f7ff ffcf 	bl	8019350 <makeFreeRtosPriority>
 80193b2:	4602      	mov	r2, r0
 80193b4:	f107 030c 	add.w	r3, r7, #12
 80193b8:	9301      	str	r3, [sp, #4]
 80193ba:	9200      	str	r2, [sp, #0]
 80193bc:	683b      	ldr	r3, [r7, #0]
 80193be:	4632      	mov	r2, r6
 80193c0:	4629      	mov	r1, r5
 80193c2:	4620      	mov	r0, r4
 80193c4:	f000 fd54 	bl	8019e70 <xTaskCreate>
 80193c8:	4603      	mov	r3, r0
 80193ca:	2b01      	cmp	r3, #1
 80193cc:	d001      	beq.n	80193d2 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80193ce:	2300      	movs	r3, #0
 80193d0:	e000      	b.n	80193d4 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80193d2:	68fb      	ldr	r3, [r7, #12]
}
 80193d4:	4618      	mov	r0, r3
 80193d6:	3714      	adds	r7, #20
 80193d8:	46bd      	mov	sp, r7
 80193da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080193dc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80193dc:	b580      	push	{r7, lr}
 80193de:	b084      	sub	sp, #16
 80193e0:	af00      	add	r7, sp, #0
 80193e2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80193e4:	687b      	ldr	r3, [r7, #4]
 80193e6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80193e8:	68fb      	ldr	r3, [r7, #12]
 80193ea:	2b00      	cmp	r3, #0
 80193ec:	d001      	beq.n	80193f2 <osDelay+0x16>
 80193ee:	68fb      	ldr	r3, [r7, #12]
 80193f0:	e000      	b.n	80193f4 <osDelay+0x18>
 80193f2:	2301      	movs	r3, #1
 80193f4:	4618      	mov	r0, r3
 80193f6:	f000 fe7b 	bl	801a0f0 <vTaskDelay>
  
  return osOK;
 80193fa:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80193fc:	4618      	mov	r0, r3
 80193fe:	3710      	adds	r7, #16
 8019400:	46bd      	mov	sp, r7
 8019402:	bd80      	pop	{r7, pc}

08019404 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8019404:	b580      	push	{r7, lr}
 8019406:	b082      	sub	sp, #8
 8019408:	af00      	add	r7, sp, #0
 801940a:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 801940c:	2001      	movs	r0, #1
 801940e:	f000 f9a1 	bl	8019754 <xQueueCreateMutex>
 8019412:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 8019414:	4618      	mov	r0, r3
 8019416:	3708      	adds	r7, #8
 8019418:	46bd      	mov	sp, r7
 801941a:	bd80      	pop	{r7, pc}

0801941c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 801941c:	b580      	push	{r7, lr}
 801941e:	b084      	sub	sp, #16
 8019420:	af00      	add	r7, sp, #0
 8019422:	6078      	str	r0, [r7, #4]
 8019424:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8019426:	683b      	ldr	r3, [r7, #0]
 8019428:	2b01      	cmp	r3, #1
 801942a:	d110      	bne.n	801944e <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 801942c:	2203      	movs	r2, #3
 801942e:	2100      	movs	r1, #0
 8019430:	2001      	movs	r0, #1
 8019432:	f000 f920 	bl	8019676 <xQueueGenericCreate>
 8019436:	60f8      	str	r0, [r7, #12]
 8019438:	68fb      	ldr	r3, [r7, #12]
 801943a:	2b00      	cmp	r3, #0
 801943c:	d005      	beq.n	801944a <osSemaphoreCreate+0x2e>
 801943e:	2300      	movs	r3, #0
 8019440:	2200      	movs	r2, #0
 8019442:	2100      	movs	r1, #0
 8019444:	68f8      	ldr	r0, [r7, #12]
 8019446:	f000 f99d 	bl	8019784 <xQueueGenericSend>
    return sema;
 801944a:	68fb      	ldr	r3, [r7, #12]
 801944c:	e000      	b.n	8019450 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 801944e:	2300      	movs	r3, #0
#endif
  }
#endif
}
 8019450:	4618      	mov	r0, r3
 8019452:	3710      	adds	r7, #16
 8019454:	46bd      	mov	sp, r7
 8019456:	bd80      	pop	{r7, pc}

08019458 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8019458:	b480      	push	{r7}
 801945a:	b083      	sub	sp, #12
 801945c:	af00      	add	r7, sp, #0
 801945e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019460:	687b      	ldr	r3, [r7, #4]
 8019462:	f103 0208 	add.w	r2, r3, #8
 8019466:	687b      	ldr	r3, [r7, #4]
 8019468:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801946a:	687b      	ldr	r3, [r7, #4]
 801946c:	f04f 32ff 	mov.w	r2, #4294967295
 8019470:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019472:	687b      	ldr	r3, [r7, #4]
 8019474:	f103 0208 	add.w	r2, r3, #8
 8019478:	687b      	ldr	r3, [r7, #4]
 801947a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	f103 0208 	add.w	r2, r3, #8
 8019482:	687b      	ldr	r3, [r7, #4]
 8019484:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8019486:	687b      	ldr	r3, [r7, #4]
 8019488:	2200      	movs	r2, #0
 801948a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801948c:	bf00      	nop
 801948e:	370c      	adds	r7, #12
 8019490:	46bd      	mov	sp, r7
 8019492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019496:	4770      	bx	lr

08019498 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8019498:	b480      	push	{r7}
 801949a:	b083      	sub	sp, #12
 801949c:	af00      	add	r7, sp, #0
 801949e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	2200      	movs	r2, #0
 80194a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80194a6:	bf00      	nop
 80194a8:	370c      	adds	r7, #12
 80194aa:	46bd      	mov	sp, r7
 80194ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194b0:	4770      	bx	lr

080194b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80194b2:	b480      	push	{r7}
 80194b4:	b085      	sub	sp, #20
 80194b6:	af00      	add	r7, sp, #0
 80194b8:	6078      	str	r0, [r7, #4]
 80194ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	685b      	ldr	r3, [r3, #4]
 80194c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80194c2:	683b      	ldr	r3, [r7, #0]
 80194c4:	68fa      	ldr	r2, [r7, #12]
 80194c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80194c8:	68fb      	ldr	r3, [r7, #12]
 80194ca:	689a      	ldr	r2, [r3, #8]
 80194cc:	683b      	ldr	r3, [r7, #0]
 80194ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80194d0:	68fb      	ldr	r3, [r7, #12]
 80194d2:	689b      	ldr	r3, [r3, #8]
 80194d4:	683a      	ldr	r2, [r7, #0]
 80194d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80194d8:	68fb      	ldr	r3, [r7, #12]
 80194da:	683a      	ldr	r2, [r7, #0]
 80194dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80194de:	683b      	ldr	r3, [r7, #0]
 80194e0:	687a      	ldr	r2, [r7, #4]
 80194e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80194e4:	687b      	ldr	r3, [r7, #4]
 80194e6:	681b      	ldr	r3, [r3, #0]
 80194e8:	1c5a      	adds	r2, r3, #1
 80194ea:	687b      	ldr	r3, [r7, #4]
 80194ec:	601a      	str	r2, [r3, #0]
}
 80194ee:	bf00      	nop
 80194f0:	3714      	adds	r7, #20
 80194f2:	46bd      	mov	sp, r7
 80194f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194f8:	4770      	bx	lr

080194fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80194fa:	b480      	push	{r7}
 80194fc:	b085      	sub	sp, #20
 80194fe:	af00      	add	r7, sp, #0
 8019500:	6078      	str	r0, [r7, #4]
 8019502:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8019504:	683b      	ldr	r3, [r7, #0]
 8019506:	681b      	ldr	r3, [r3, #0]
 8019508:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801950a:	68bb      	ldr	r3, [r7, #8]
 801950c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019510:	d103      	bne.n	801951a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8019512:	687b      	ldr	r3, [r7, #4]
 8019514:	691b      	ldr	r3, [r3, #16]
 8019516:	60fb      	str	r3, [r7, #12]
 8019518:	e00c      	b.n	8019534 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801951a:	687b      	ldr	r3, [r7, #4]
 801951c:	3308      	adds	r3, #8
 801951e:	60fb      	str	r3, [r7, #12]
 8019520:	e002      	b.n	8019528 <vListInsert+0x2e>
 8019522:	68fb      	ldr	r3, [r7, #12]
 8019524:	685b      	ldr	r3, [r3, #4]
 8019526:	60fb      	str	r3, [r7, #12]
 8019528:	68fb      	ldr	r3, [r7, #12]
 801952a:	685b      	ldr	r3, [r3, #4]
 801952c:	681b      	ldr	r3, [r3, #0]
 801952e:	68ba      	ldr	r2, [r7, #8]
 8019530:	429a      	cmp	r2, r3
 8019532:	d2f6      	bcs.n	8019522 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8019534:	68fb      	ldr	r3, [r7, #12]
 8019536:	685a      	ldr	r2, [r3, #4]
 8019538:	683b      	ldr	r3, [r7, #0]
 801953a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801953c:	683b      	ldr	r3, [r7, #0]
 801953e:	685b      	ldr	r3, [r3, #4]
 8019540:	683a      	ldr	r2, [r7, #0]
 8019542:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8019544:	683b      	ldr	r3, [r7, #0]
 8019546:	68fa      	ldr	r2, [r7, #12]
 8019548:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801954a:	68fb      	ldr	r3, [r7, #12]
 801954c:	683a      	ldr	r2, [r7, #0]
 801954e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8019550:	683b      	ldr	r3, [r7, #0]
 8019552:	687a      	ldr	r2, [r7, #4]
 8019554:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	681b      	ldr	r3, [r3, #0]
 801955a:	1c5a      	adds	r2, r3, #1
 801955c:	687b      	ldr	r3, [r7, #4]
 801955e:	601a      	str	r2, [r3, #0]
}
 8019560:	bf00      	nop
 8019562:	3714      	adds	r7, #20
 8019564:	46bd      	mov	sp, r7
 8019566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801956a:	4770      	bx	lr

0801956c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801956c:	b480      	push	{r7}
 801956e:	b085      	sub	sp, #20
 8019570:	af00      	add	r7, sp, #0
 8019572:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8019574:	687b      	ldr	r3, [r7, #4]
 8019576:	691b      	ldr	r3, [r3, #16]
 8019578:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	685b      	ldr	r3, [r3, #4]
 801957e:	687a      	ldr	r2, [r7, #4]
 8019580:	6892      	ldr	r2, [r2, #8]
 8019582:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	689b      	ldr	r3, [r3, #8]
 8019588:	687a      	ldr	r2, [r7, #4]
 801958a:	6852      	ldr	r2, [r2, #4]
 801958c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801958e:	68fb      	ldr	r3, [r7, #12]
 8019590:	685b      	ldr	r3, [r3, #4]
 8019592:	687a      	ldr	r2, [r7, #4]
 8019594:	429a      	cmp	r2, r3
 8019596:	d103      	bne.n	80195a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	689a      	ldr	r2, [r3, #8]
 801959c:	68fb      	ldr	r3, [r7, #12]
 801959e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80195a0:	687b      	ldr	r3, [r7, #4]
 80195a2:	2200      	movs	r2, #0
 80195a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80195a6:	68fb      	ldr	r3, [r7, #12]
 80195a8:	681b      	ldr	r3, [r3, #0]
 80195aa:	1e5a      	subs	r2, r3, #1
 80195ac:	68fb      	ldr	r3, [r7, #12]
 80195ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80195b0:	68fb      	ldr	r3, [r7, #12]
 80195b2:	681b      	ldr	r3, [r3, #0]
}
 80195b4:	4618      	mov	r0, r3
 80195b6:	3714      	adds	r7, #20
 80195b8:	46bd      	mov	sp, r7
 80195ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195be:	4770      	bx	lr

080195c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80195c0:	b580      	push	{r7, lr}
 80195c2:	b084      	sub	sp, #16
 80195c4:	af00      	add	r7, sp, #0
 80195c6:	6078      	str	r0, [r7, #4]
 80195c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80195ce:	68fb      	ldr	r3, [r7, #12]
 80195d0:	2b00      	cmp	r3, #0
 80195d2:	d10a      	bne.n	80195ea <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80195d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80195d8:	f383 8811 	msr	BASEPRI, r3
 80195dc:	f3bf 8f6f 	isb	sy
 80195e0:	f3bf 8f4f 	dsb	sy
 80195e4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80195e6:	bf00      	nop
 80195e8:	e7fe      	b.n	80195e8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80195ea:	f001 fcbb 	bl	801af64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80195ee:	68fb      	ldr	r3, [r7, #12]
 80195f0:	681a      	ldr	r2, [r3, #0]
 80195f2:	68fb      	ldr	r3, [r7, #12]
 80195f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80195f6:	68f9      	ldr	r1, [r7, #12]
 80195f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80195fa:	fb01 f303 	mul.w	r3, r1, r3
 80195fe:	441a      	add	r2, r3
 8019600:	68fb      	ldr	r3, [r7, #12]
 8019602:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8019604:	68fb      	ldr	r3, [r7, #12]
 8019606:	2200      	movs	r2, #0
 8019608:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801960a:	68fb      	ldr	r3, [r7, #12]
 801960c:	681a      	ldr	r2, [r3, #0]
 801960e:	68fb      	ldr	r3, [r7, #12]
 8019610:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8019612:	68fb      	ldr	r3, [r7, #12]
 8019614:	681a      	ldr	r2, [r3, #0]
 8019616:	68fb      	ldr	r3, [r7, #12]
 8019618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801961a:	3b01      	subs	r3, #1
 801961c:	68f9      	ldr	r1, [r7, #12]
 801961e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8019620:	fb01 f303 	mul.w	r3, r1, r3
 8019624:	441a      	add	r2, r3
 8019626:	68fb      	ldr	r3, [r7, #12]
 8019628:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801962a:	68fb      	ldr	r3, [r7, #12]
 801962c:	22ff      	movs	r2, #255	; 0xff
 801962e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8019632:	68fb      	ldr	r3, [r7, #12]
 8019634:	22ff      	movs	r2, #255	; 0xff
 8019636:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801963a:	683b      	ldr	r3, [r7, #0]
 801963c:	2b00      	cmp	r3, #0
 801963e:	d109      	bne.n	8019654 <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019640:	68fb      	ldr	r3, [r7, #12]
 8019642:	691b      	ldr	r3, [r3, #16]
 8019644:	2b00      	cmp	r3, #0
 8019646:	d00f      	beq.n	8019668 <xQueueGenericReset+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019648:	68fb      	ldr	r3, [r7, #12]
 801964a:	3310      	adds	r3, #16
 801964c:	4618      	mov	r0, r3
 801964e:	f000 ff8b 	bl	801a568 <xTaskRemoveFromEventList>
 8019652:	e009      	b.n	8019668 <xQueueGenericReset+0xa8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8019654:	68fb      	ldr	r3, [r7, #12]
 8019656:	3310      	adds	r3, #16
 8019658:	4618      	mov	r0, r3
 801965a:	f7ff fefd 	bl	8019458 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801965e:	68fb      	ldr	r3, [r7, #12]
 8019660:	3324      	adds	r3, #36	; 0x24
 8019662:	4618      	mov	r0, r3
 8019664:	f7ff fef8 	bl	8019458 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8019668:	f001 fcac 	bl	801afc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801966c:	2301      	movs	r3, #1
}
 801966e:	4618      	mov	r0, r3
 8019670:	3710      	adds	r7, #16
 8019672:	46bd      	mov	sp, r7
 8019674:	bd80      	pop	{r7, pc}

08019676 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8019676:	b580      	push	{r7, lr}
 8019678:	b08a      	sub	sp, #40	; 0x28
 801967a:	af02      	add	r7, sp, #8
 801967c:	60f8      	str	r0, [r7, #12]
 801967e:	60b9      	str	r1, [r7, #8]
 8019680:	4613      	mov	r3, r2
 8019682:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8019684:	68fb      	ldr	r3, [r7, #12]
 8019686:	2b00      	cmp	r3, #0
 8019688:	d10a      	bne.n	80196a0 <xQueueGenericCreate+0x2a>
	__asm volatile
 801968a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801968e:	f383 8811 	msr	BASEPRI, r3
 8019692:	f3bf 8f6f 	isb	sy
 8019696:	f3bf 8f4f 	dsb	sy
 801969a:	613b      	str	r3, [r7, #16]
}
 801969c:	bf00      	nop
 801969e:	e7fe      	b.n	801969e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80196a0:	68fb      	ldr	r3, [r7, #12]
 80196a2:	68ba      	ldr	r2, [r7, #8]
 80196a4:	fb02 f303 	mul.w	r3, r2, r3
 80196a8:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80196aa:	69fb      	ldr	r3, [r7, #28]
 80196ac:	3348      	adds	r3, #72	; 0x48
 80196ae:	4618      	mov	r0, r3
 80196b0:	f001 fd7a 	bl	801b1a8 <pvPortMalloc>
 80196b4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80196b6:	69bb      	ldr	r3, [r7, #24]
 80196b8:	2b00      	cmp	r3, #0
 80196ba:	d00d      	beq.n	80196d8 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80196bc:	69bb      	ldr	r3, [r7, #24]
 80196be:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80196c0:	697b      	ldr	r3, [r7, #20]
 80196c2:	3348      	adds	r3, #72	; 0x48
 80196c4:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80196c6:	79fa      	ldrb	r2, [r7, #7]
 80196c8:	69bb      	ldr	r3, [r7, #24]
 80196ca:	9300      	str	r3, [sp, #0]
 80196cc:	4613      	mov	r3, r2
 80196ce:	697a      	ldr	r2, [r7, #20]
 80196d0:	68b9      	ldr	r1, [r7, #8]
 80196d2:	68f8      	ldr	r0, [r7, #12]
 80196d4:	f000 f805 	bl	80196e2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80196d8:	69bb      	ldr	r3, [r7, #24]
	}
 80196da:	4618      	mov	r0, r3
 80196dc:	3720      	adds	r7, #32
 80196de:	46bd      	mov	sp, r7
 80196e0:	bd80      	pop	{r7, pc}

080196e2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80196e2:	b580      	push	{r7, lr}
 80196e4:	b084      	sub	sp, #16
 80196e6:	af00      	add	r7, sp, #0
 80196e8:	60f8      	str	r0, [r7, #12]
 80196ea:	60b9      	str	r1, [r7, #8]
 80196ec:	607a      	str	r2, [r7, #4]
 80196ee:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80196f0:	68bb      	ldr	r3, [r7, #8]
 80196f2:	2b00      	cmp	r3, #0
 80196f4:	d103      	bne.n	80196fe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80196f6:	69bb      	ldr	r3, [r7, #24]
 80196f8:	69ba      	ldr	r2, [r7, #24]
 80196fa:	601a      	str	r2, [r3, #0]
 80196fc:	e002      	b.n	8019704 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80196fe:	69bb      	ldr	r3, [r7, #24]
 8019700:	687a      	ldr	r2, [r7, #4]
 8019702:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8019704:	69bb      	ldr	r3, [r7, #24]
 8019706:	68fa      	ldr	r2, [r7, #12]
 8019708:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801970a:	69bb      	ldr	r3, [r7, #24]
 801970c:	68ba      	ldr	r2, [r7, #8]
 801970e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8019710:	2101      	movs	r1, #1
 8019712:	69b8      	ldr	r0, [r7, #24]
 8019714:	f7ff ff54 	bl	80195c0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8019718:	bf00      	nop
 801971a:	3710      	adds	r7, #16
 801971c:	46bd      	mov	sp, r7
 801971e:	bd80      	pop	{r7, pc}

08019720 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8019720:	b580      	push	{r7, lr}
 8019722:	b082      	sub	sp, #8
 8019724:	af00      	add	r7, sp, #0
 8019726:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8019728:	687b      	ldr	r3, [r7, #4]
 801972a:	2b00      	cmp	r3, #0
 801972c:	d00e      	beq.n	801974c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801972e:	687b      	ldr	r3, [r7, #4]
 8019730:	2200      	movs	r2, #0
 8019732:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8019734:	687b      	ldr	r3, [r7, #4]
 8019736:	2200      	movs	r2, #0
 8019738:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 801973a:	687b      	ldr	r3, [r7, #4]
 801973c:	2200      	movs	r2, #0
 801973e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8019740:	2300      	movs	r3, #0
 8019742:	2200      	movs	r2, #0
 8019744:	2100      	movs	r1, #0
 8019746:	6878      	ldr	r0, [r7, #4]
 8019748:	f000 f81c 	bl	8019784 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801974c:	bf00      	nop
 801974e:	3708      	adds	r7, #8
 8019750:	46bd      	mov	sp, r7
 8019752:	bd80      	pop	{r7, pc}

08019754 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8019754:	b580      	push	{r7, lr}
 8019756:	b086      	sub	sp, #24
 8019758:	af00      	add	r7, sp, #0
 801975a:	4603      	mov	r3, r0
 801975c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801975e:	2301      	movs	r3, #1
 8019760:	617b      	str	r3, [r7, #20]
 8019762:	2300      	movs	r3, #0
 8019764:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8019766:	79fb      	ldrb	r3, [r7, #7]
 8019768:	461a      	mov	r2, r3
 801976a:	6939      	ldr	r1, [r7, #16]
 801976c:	6978      	ldr	r0, [r7, #20]
 801976e:	f7ff ff82 	bl	8019676 <xQueueGenericCreate>
 8019772:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8019774:	68f8      	ldr	r0, [r7, #12]
 8019776:	f7ff ffd3 	bl	8019720 <prvInitialiseMutex>

		return xNewQueue;
 801977a:	68fb      	ldr	r3, [r7, #12]
	}
 801977c:	4618      	mov	r0, r3
 801977e:	3718      	adds	r7, #24
 8019780:	46bd      	mov	sp, r7
 8019782:	bd80      	pop	{r7, pc}

08019784 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8019784:	b580      	push	{r7, lr}
 8019786:	b08e      	sub	sp, #56	; 0x38
 8019788:	af00      	add	r7, sp, #0
 801978a:	60f8      	str	r0, [r7, #12]
 801978c:	60b9      	str	r1, [r7, #8]
 801978e:	607a      	str	r2, [r7, #4]
 8019790:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8019792:	2300      	movs	r3, #0
 8019794:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8019796:	68fb      	ldr	r3, [r7, #12]
 8019798:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801979a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801979c:	2b00      	cmp	r3, #0
 801979e:	d10a      	bne.n	80197b6 <xQueueGenericSend+0x32>
	__asm volatile
 80197a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80197a4:	f383 8811 	msr	BASEPRI, r3
 80197a8:	f3bf 8f6f 	isb	sy
 80197ac:	f3bf 8f4f 	dsb	sy
 80197b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80197b2:	bf00      	nop
 80197b4:	e7fe      	b.n	80197b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80197b6:	68bb      	ldr	r3, [r7, #8]
 80197b8:	2b00      	cmp	r3, #0
 80197ba:	d103      	bne.n	80197c4 <xQueueGenericSend+0x40>
 80197bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80197c0:	2b00      	cmp	r3, #0
 80197c2:	d101      	bne.n	80197c8 <xQueueGenericSend+0x44>
 80197c4:	2301      	movs	r3, #1
 80197c6:	e000      	b.n	80197ca <xQueueGenericSend+0x46>
 80197c8:	2300      	movs	r3, #0
 80197ca:	2b00      	cmp	r3, #0
 80197cc:	d10a      	bne.n	80197e4 <xQueueGenericSend+0x60>
	__asm volatile
 80197ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80197d2:	f383 8811 	msr	BASEPRI, r3
 80197d6:	f3bf 8f6f 	isb	sy
 80197da:	f3bf 8f4f 	dsb	sy
 80197de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80197e0:	bf00      	nop
 80197e2:	e7fe      	b.n	80197e2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80197e4:	683b      	ldr	r3, [r7, #0]
 80197e6:	2b02      	cmp	r3, #2
 80197e8:	d103      	bne.n	80197f2 <xQueueGenericSend+0x6e>
 80197ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80197ee:	2b01      	cmp	r3, #1
 80197f0:	d101      	bne.n	80197f6 <xQueueGenericSend+0x72>
 80197f2:	2301      	movs	r3, #1
 80197f4:	e000      	b.n	80197f8 <xQueueGenericSend+0x74>
 80197f6:	2300      	movs	r3, #0
 80197f8:	2b00      	cmp	r3, #0
 80197fa:	d10a      	bne.n	8019812 <xQueueGenericSend+0x8e>
	__asm volatile
 80197fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019800:	f383 8811 	msr	BASEPRI, r3
 8019804:	f3bf 8f6f 	isb	sy
 8019808:	f3bf 8f4f 	dsb	sy
 801980c:	623b      	str	r3, [r7, #32]
}
 801980e:	bf00      	nop
 8019810:	e7fe      	b.n	8019810 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019812:	f001 f855 	bl	801a8c0 <xTaskGetSchedulerState>
 8019816:	4603      	mov	r3, r0
 8019818:	2b00      	cmp	r3, #0
 801981a:	d102      	bne.n	8019822 <xQueueGenericSend+0x9e>
 801981c:	687b      	ldr	r3, [r7, #4]
 801981e:	2b00      	cmp	r3, #0
 8019820:	d101      	bne.n	8019826 <xQueueGenericSend+0xa2>
 8019822:	2301      	movs	r3, #1
 8019824:	e000      	b.n	8019828 <xQueueGenericSend+0xa4>
 8019826:	2300      	movs	r3, #0
 8019828:	2b00      	cmp	r3, #0
 801982a:	d10a      	bne.n	8019842 <xQueueGenericSend+0xbe>
	__asm volatile
 801982c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019830:	f383 8811 	msr	BASEPRI, r3
 8019834:	f3bf 8f6f 	isb	sy
 8019838:	f3bf 8f4f 	dsb	sy
 801983c:	61fb      	str	r3, [r7, #28]
}
 801983e:	bf00      	nop
 8019840:	e7fe      	b.n	8019840 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8019842:	f001 fb8f 	bl	801af64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8019846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019848:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801984a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801984c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801984e:	429a      	cmp	r2, r3
 8019850:	d302      	bcc.n	8019858 <xQueueGenericSend+0xd4>
 8019852:	683b      	ldr	r3, [r7, #0]
 8019854:	2b02      	cmp	r3, #2
 8019856:	d112      	bne.n	801987e <xQueueGenericSend+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8019858:	683a      	ldr	r2, [r7, #0]
 801985a:	68b9      	ldr	r1, [r7, #8]
 801985c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801985e:	f000 fa1d 	bl	8019c9c <prvCopyDataToQueue>
 8019862:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019868:	2b00      	cmp	r3, #0
 801986a:	d004      	beq.n	8019876 <xQueueGenericSend+0xf2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801986c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801986e:	3324      	adds	r3, #36	; 0x24
 8019870:	4618      	mov	r0, r3
 8019872:	f000 fe79 	bl	801a568 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8019876:	f001 fba5 	bl	801afc4 <vPortExitCritical>
				return pdPASS;
 801987a:	2301      	movs	r3, #1
 801987c:	e062      	b.n	8019944 <xQueueGenericSend+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	2b00      	cmp	r3, #0
 8019882:	d103      	bne.n	801988c <xQueueGenericSend+0x108>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8019884:	f001 fb9e 	bl	801afc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8019888:	2300      	movs	r3, #0
 801988a:	e05b      	b.n	8019944 <xQueueGenericSend+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801988c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801988e:	2b00      	cmp	r3, #0
 8019890:	d106      	bne.n	80198a0 <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8019892:	f107 0314 	add.w	r3, r7, #20
 8019896:	4618      	mov	r0, r3
 8019898:	f000 fec8 	bl	801a62c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801989c:	2301      	movs	r3, #1
 801989e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80198a0:	f001 fb90 	bl	801afc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80198a4:	f000 fca8 	bl	801a1f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80198a8:	f001 fb5c 	bl	801af64 <vPortEnterCritical>
 80198ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80198b2:	b25b      	sxtb	r3, r3
 80198b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80198b8:	d103      	bne.n	80198c2 <xQueueGenericSend+0x13e>
 80198ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198bc:	2200      	movs	r2, #0
 80198be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80198c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80198c8:	b25b      	sxtb	r3, r3
 80198ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80198ce:	d103      	bne.n	80198d8 <xQueueGenericSend+0x154>
 80198d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198d2:	2200      	movs	r2, #0
 80198d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80198d8:	f001 fb74 	bl	801afc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80198dc:	1d3a      	adds	r2, r7, #4
 80198de:	f107 0314 	add.w	r3, r7, #20
 80198e2:	4611      	mov	r1, r2
 80198e4:	4618      	mov	r0, r3
 80198e6:	f000 feb7 	bl	801a658 <xTaskCheckForTimeOut>
 80198ea:	4603      	mov	r3, r0
 80198ec:	2b00      	cmp	r3, #0
 80198ee:	d123      	bne.n	8019938 <xQueueGenericSend+0x1b4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80198f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80198f2:	f000 faa5 	bl	8019e40 <prvIsQueueFull>
 80198f6:	4603      	mov	r3, r0
 80198f8:	2b00      	cmp	r3, #0
 80198fa:	d017      	beq.n	801992c <xQueueGenericSend+0x1a8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80198fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198fe:	3310      	adds	r3, #16
 8019900:	687a      	ldr	r2, [r7, #4]
 8019902:	4611      	mov	r1, r2
 8019904:	4618      	mov	r0, r3
 8019906:	f000 fe0b 	bl	801a520 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801990a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801990c:	f000 fa30 	bl	8019d70 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8019910:	f000 fc80 	bl	801a214 <xTaskResumeAll>
 8019914:	4603      	mov	r3, r0
 8019916:	2b00      	cmp	r3, #0
 8019918:	d193      	bne.n	8019842 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801991a:	4b0c      	ldr	r3, [pc, #48]	; (801994c <xQueueGenericSend+0x1c8>)
 801991c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019920:	601a      	str	r2, [r3, #0]
 8019922:	f3bf 8f4f 	dsb	sy
 8019926:	f3bf 8f6f 	isb	sy
 801992a:	e78a      	b.n	8019842 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801992c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801992e:	f000 fa1f 	bl	8019d70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8019932:	f000 fc6f 	bl	801a214 <xTaskResumeAll>
 8019936:	e784      	b.n	8019842 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8019938:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801993a:	f000 fa19 	bl	8019d70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801993e:	f000 fc69 	bl	801a214 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8019942:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8019944:	4618      	mov	r0, r3
 8019946:	3738      	adds	r7, #56	; 0x38
 8019948:	46bd      	mov	sp, r7
 801994a:	bd80      	pop	{r7, pc}
 801994c:	e000ed04 	.word	0xe000ed04

08019950 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8019950:	b580      	push	{r7, lr}
 8019952:	b08e      	sub	sp, #56	; 0x38
 8019954:	af00      	add	r7, sp, #0
 8019956:	6078      	str	r0, [r7, #4]
 8019958:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801995a:	687b      	ldr	r3, [r7, #4]
 801995c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801995e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019960:	2b00      	cmp	r3, #0
 8019962:	d10a      	bne.n	801997a <xQueueGiveFromISR+0x2a>
	__asm volatile
 8019964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019968:	f383 8811 	msr	BASEPRI, r3
 801996c:	f3bf 8f6f 	isb	sy
 8019970:	f3bf 8f4f 	dsb	sy
 8019974:	623b      	str	r3, [r7, #32]
}
 8019976:	bf00      	nop
 8019978:	e7fe      	b.n	8019978 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801997a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801997c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801997e:	2b00      	cmp	r3, #0
 8019980:	d00a      	beq.n	8019998 <xQueueGiveFromISR+0x48>
	__asm volatile
 8019982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019986:	f383 8811 	msr	BASEPRI, r3
 801998a:	f3bf 8f6f 	isb	sy
 801998e:	f3bf 8f4f 	dsb	sy
 8019992:	61fb      	str	r3, [r7, #28]
}
 8019994:	bf00      	nop
 8019996:	e7fe      	b.n	8019996 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8019998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801999a:	681b      	ldr	r3, [r3, #0]
 801999c:	2b00      	cmp	r3, #0
 801999e:	d103      	bne.n	80199a8 <xQueueGiveFromISR+0x58>
 80199a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199a2:	689b      	ldr	r3, [r3, #8]
 80199a4:	2b00      	cmp	r3, #0
 80199a6:	d101      	bne.n	80199ac <xQueueGiveFromISR+0x5c>
 80199a8:	2301      	movs	r3, #1
 80199aa:	e000      	b.n	80199ae <xQueueGiveFromISR+0x5e>
 80199ac:	2300      	movs	r3, #0
 80199ae:	2b00      	cmp	r3, #0
 80199b0:	d10a      	bne.n	80199c8 <xQueueGiveFromISR+0x78>
	__asm volatile
 80199b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80199b6:	f383 8811 	msr	BASEPRI, r3
 80199ba:	f3bf 8f6f 	isb	sy
 80199be:	f3bf 8f4f 	dsb	sy
 80199c2:	61bb      	str	r3, [r7, #24]
}
 80199c4:	bf00      	nop
 80199c6:	e7fe      	b.n	80199c6 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80199c8:	f001 fbae 	bl	801b128 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80199cc:	f3ef 8211 	mrs	r2, BASEPRI
 80199d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80199d4:	f383 8811 	msr	BASEPRI, r3
 80199d8:	f3bf 8f6f 	isb	sy
 80199dc:	f3bf 8f4f 	dsb	sy
 80199e0:	617a      	str	r2, [r7, #20]
 80199e2:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80199e4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80199e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80199e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80199ec:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80199ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80199f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80199f4:	429a      	cmp	r2, r3
 80199f6:	d22b      	bcs.n	8019a50 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80199f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80199fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8019a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a04:	1c5a      	adds	r2, r3, #1
 8019a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a08:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8019a0a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019a12:	d112      	bne.n	8019a3a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a18:	2b00      	cmp	r3, #0
 8019a1a:	d016      	beq.n	8019a4a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a1e:	3324      	adds	r3, #36	; 0x24
 8019a20:	4618      	mov	r0, r3
 8019a22:	f000 fda1 	bl	801a568 <xTaskRemoveFromEventList>
 8019a26:	4603      	mov	r3, r0
 8019a28:	2b00      	cmp	r3, #0
 8019a2a:	d00e      	beq.n	8019a4a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8019a2c:	683b      	ldr	r3, [r7, #0]
 8019a2e:	2b00      	cmp	r3, #0
 8019a30:	d00b      	beq.n	8019a4a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8019a32:	683b      	ldr	r3, [r7, #0]
 8019a34:	2201      	movs	r2, #1
 8019a36:	601a      	str	r2, [r3, #0]
 8019a38:	e007      	b.n	8019a4a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8019a3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019a3e:	3301      	adds	r3, #1
 8019a40:	b2db      	uxtb	r3, r3
 8019a42:	b25a      	sxtb	r2, r3
 8019a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8019a4a:	2301      	movs	r3, #1
 8019a4c:	637b      	str	r3, [r7, #52]	; 0x34
 8019a4e:	e001      	b.n	8019a54 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8019a50:	2300      	movs	r3, #0
 8019a52:	637b      	str	r3, [r7, #52]	; 0x34
 8019a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a56:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8019a58:	68fb      	ldr	r3, [r7, #12]
 8019a5a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8019a5e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8019a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8019a62:	4618      	mov	r0, r3
 8019a64:	3738      	adds	r7, #56	; 0x38
 8019a66:	46bd      	mov	sp, r7
 8019a68:	bd80      	pop	{r7, pc}
	...

08019a6c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8019a6c:	b580      	push	{r7, lr}
 8019a6e:	b08e      	sub	sp, #56	; 0x38
 8019a70:	af00      	add	r7, sp, #0
 8019a72:	6078      	str	r0, [r7, #4]
 8019a74:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8019a76:	2300      	movs	r3, #0
 8019a78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8019a7a:	687b      	ldr	r3, [r7, #4]
 8019a7c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8019a7e:	2300      	movs	r3, #0
 8019a80:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8019a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a84:	2b00      	cmp	r3, #0
 8019a86:	d10a      	bne.n	8019a9e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8019a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a8c:	f383 8811 	msr	BASEPRI, r3
 8019a90:	f3bf 8f6f 	isb	sy
 8019a94:	f3bf 8f4f 	dsb	sy
 8019a98:	623b      	str	r3, [r7, #32]
}
 8019a9a:	bf00      	nop
 8019a9c:	e7fe      	b.n	8019a9c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8019a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019aa2:	2b00      	cmp	r3, #0
 8019aa4:	d00a      	beq.n	8019abc <xQueueSemaphoreTake+0x50>
	__asm volatile
 8019aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019aaa:	f383 8811 	msr	BASEPRI, r3
 8019aae:	f3bf 8f6f 	isb	sy
 8019ab2:	f3bf 8f4f 	dsb	sy
 8019ab6:	61fb      	str	r3, [r7, #28]
}
 8019ab8:	bf00      	nop
 8019aba:	e7fe      	b.n	8019aba <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019abc:	f000 ff00 	bl	801a8c0 <xTaskGetSchedulerState>
 8019ac0:	4603      	mov	r3, r0
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	d102      	bne.n	8019acc <xQueueSemaphoreTake+0x60>
 8019ac6:	683b      	ldr	r3, [r7, #0]
 8019ac8:	2b00      	cmp	r3, #0
 8019aca:	d101      	bne.n	8019ad0 <xQueueSemaphoreTake+0x64>
 8019acc:	2301      	movs	r3, #1
 8019ace:	e000      	b.n	8019ad2 <xQueueSemaphoreTake+0x66>
 8019ad0:	2300      	movs	r3, #0
 8019ad2:	2b00      	cmp	r3, #0
 8019ad4:	d10a      	bne.n	8019aec <xQueueSemaphoreTake+0x80>
	__asm volatile
 8019ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ada:	f383 8811 	msr	BASEPRI, r3
 8019ade:	f3bf 8f6f 	isb	sy
 8019ae2:	f3bf 8f4f 	dsb	sy
 8019ae6:	61bb      	str	r3, [r7, #24]
}
 8019ae8:	bf00      	nop
 8019aea:	e7fe      	b.n	8019aea <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8019aec:	f001 fa3a 	bl	801af64 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8019af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019af4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8019af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019af8:	2b00      	cmp	r3, #0
 8019afa:	d019      	beq.n	8019b30 <xQueueSemaphoreTake+0xc4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8019afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019afe:	1e5a      	subs	r2, r3, #1
 8019b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b02:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8019b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b06:	681b      	ldr	r3, [r3, #0]
 8019b08:	2b00      	cmp	r3, #0
 8019b0a:	d104      	bne.n	8019b16 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8019b0c:	f001 f880 	bl	801ac10 <pvTaskIncrementMutexHeldCount>
 8019b10:	4602      	mov	r2, r0
 8019b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b14:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b18:	691b      	ldr	r3, [r3, #16]
 8019b1a:	2b00      	cmp	r3, #0
 8019b1c:	d004      	beq.n	8019b28 <xQueueSemaphoreTake+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b20:	3310      	adds	r3, #16
 8019b22:	4618      	mov	r0, r3
 8019b24:	f000 fd20 	bl	801a568 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8019b28:	f001 fa4c 	bl	801afc4 <vPortExitCritical>
				return pdPASS;
 8019b2c:	2301      	movs	r3, #1
 8019b2e:	e097      	b.n	8019c60 <xQueueSemaphoreTake+0x1f4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8019b30:	683b      	ldr	r3, [r7, #0]
 8019b32:	2b00      	cmp	r3, #0
 8019b34:	d111      	bne.n	8019b5a <xQueueSemaphoreTake+0xee>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8019b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b38:	2b00      	cmp	r3, #0
 8019b3a:	d00a      	beq.n	8019b52 <xQueueSemaphoreTake+0xe6>
	__asm volatile
 8019b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b40:	f383 8811 	msr	BASEPRI, r3
 8019b44:	f3bf 8f6f 	isb	sy
 8019b48:	f3bf 8f4f 	dsb	sy
 8019b4c:	617b      	str	r3, [r7, #20]
}
 8019b4e:	bf00      	nop
 8019b50:	e7fe      	b.n	8019b50 <xQueueSemaphoreTake+0xe4>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8019b52:	f001 fa37 	bl	801afc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8019b56:	2300      	movs	r3, #0
 8019b58:	e082      	b.n	8019c60 <xQueueSemaphoreTake+0x1f4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8019b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019b5c:	2b00      	cmp	r3, #0
 8019b5e:	d106      	bne.n	8019b6e <xQueueSemaphoreTake+0x102>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8019b60:	f107 030c 	add.w	r3, r7, #12
 8019b64:	4618      	mov	r0, r3
 8019b66:	f000 fd61 	bl	801a62c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8019b6a:	2301      	movs	r3, #1
 8019b6c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8019b6e:	f001 fa29 	bl	801afc4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8019b72:	f000 fb41 	bl	801a1f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8019b76:	f001 f9f5 	bl	801af64 <vPortEnterCritical>
 8019b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019b80:	b25b      	sxtb	r3, r3
 8019b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019b86:	d103      	bne.n	8019b90 <xQueueSemaphoreTake+0x124>
 8019b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b8a:	2200      	movs	r2, #0
 8019b8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019b96:	b25b      	sxtb	r3, r3
 8019b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019b9c:	d103      	bne.n	8019ba6 <xQueueSemaphoreTake+0x13a>
 8019b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ba0:	2200      	movs	r2, #0
 8019ba2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019ba6:	f001 fa0d 	bl	801afc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019baa:	463a      	mov	r2, r7
 8019bac:	f107 030c 	add.w	r3, r7, #12
 8019bb0:	4611      	mov	r1, r2
 8019bb2:	4618      	mov	r0, r3
 8019bb4:	f000 fd50 	bl	801a658 <xTaskCheckForTimeOut>
 8019bb8:	4603      	mov	r3, r0
 8019bba:	2b00      	cmp	r3, #0
 8019bbc:	d132      	bne.n	8019c24 <xQueueSemaphoreTake+0x1b8>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019bbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019bc0:	f000 f928 	bl	8019e14 <prvIsQueueEmpty>
 8019bc4:	4603      	mov	r3, r0
 8019bc6:	2b00      	cmp	r3, #0
 8019bc8:	d026      	beq.n	8019c18 <xQueueSemaphoreTake+0x1ac>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8019bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019bcc:	681b      	ldr	r3, [r3, #0]
 8019bce:	2b00      	cmp	r3, #0
 8019bd0:	d109      	bne.n	8019be6 <xQueueSemaphoreTake+0x17a>
					{
						taskENTER_CRITICAL();
 8019bd2:	f001 f9c7 	bl	801af64 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8019bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019bd8:	689b      	ldr	r3, [r3, #8]
 8019bda:	4618      	mov	r0, r3
 8019bdc:	f000 fe8e 	bl	801a8fc <xTaskPriorityInherit>
 8019be0:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8019be2:	f001 f9ef 	bl	801afc4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8019be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019be8:	3324      	adds	r3, #36	; 0x24
 8019bea:	683a      	ldr	r2, [r7, #0]
 8019bec:	4611      	mov	r1, r2
 8019bee:	4618      	mov	r0, r3
 8019bf0:	f000 fc96 	bl	801a520 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8019bf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019bf6:	f000 f8bb 	bl	8019d70 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8019bfa:	f000 fb0b 	bl	801a214 <xTaskResumeAll>
 8019bfe:	4603      	mov	r3, r0
 8019c00:	2b00      	cmp	r3, #0
 8019c02:	f47f af73 	bne.w	8019aec <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8019c06:	4b18      	ldr	r3, [pc, #96]	; (8019c68 <xQueueSemaphoreTake+0x1fc>)
 8019c08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019c0c:	601a      	str	r2, [r3, #0]
 8019c0e:	f3bf 8f4f 	dsb	sy
 8019c12:	f3bf 8f6f 	isb	sy
 8019c16:	e769      	b.n	8019aec <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8019c18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019c1a:	f000 f8a9 	bl	8019d70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8019c1e:	f000 faf9 	bl	801a214 <xTaskResumeAll>
 8019c22:	e763      	b.n	8019aec <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8019c24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019c26:	f000 f8a3 	bl	8019d70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8019c2a:	f000 faf3 	bl	801a214 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019c2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019c30:	f000 f8f0 	bl	8019e14 <prvIsQueueEmpty>
 8019c34:	4603      	mov	r3, r0
 8019c36:	2b00      	cmp	r3, #0
 8019c38:	f43f af58 	beq.w	8019aec <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8019c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c3e:	2b00      	cmp	r3, #0
 8019c40:	d00d      	beq.n	8019c5e <xQueueSemaphoreTake+0x1f2>
					{
						taskENTER_CRITICAL();
 8019c42:	f001 f98f 	bl	801af64 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8019c46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019c48:	f000 f810 	bl	8019c6c <prvGetDisinheritPriorityAfterTimeout>
 8019c4c:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8019c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c50:	689b      	ldr	r3, [r3, #8]
 8019c52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019c54:	4618      	mov	r0, r3
 8019c56:	f000 ff4d 	bl	801aaf4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8019c5a:	f001 f9b3 	bl	801afc4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8019c5e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8019c60:	4618      	mov	r0, r3
 8019c62:	3738      	adds	r7, #56	; 0x38
 8019c64:	46bd      	mov	sp, r7
 8019c66:	bd80      	pop	{r7, pc}
 8019c68:	e000ed04 	.word	0xe000ed04

08019c6c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8019c6c:	b480      	push	{r7}
 8019c6e:	b085      	sub	sp, #20
 8019c70:	af00      	add	r7, sp, #0
 8019c72:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8019c74:	687b      	ldr	r3, [r7, #4]
 8019c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c78:	2b00      	cmp	r3, #0
 8019c7a:	d006      	beq.n	8019c8a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8019c7c:	687b      	ldr	r3, [r7, #4]
 8019c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019c80:	681b      	ldr	r3, [r3, #0]
 8019c82:	f1c3 0307 	rsb	r3, r3, #7
 8019c86:	60fb      	str	r3, [r7, #12]
 8019c88:	e001      	b.n	8019c8e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8019c8a:	2300      	movs	r3, #0
 8019c8c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8019c8e:	68fb      	ldr	r3, [r7, #12]
	}
 8019c90:	4618      	mov	r0, r3
 8019c92:	3714      	adds	r7, #20
 8019c94:	46bd      	mov	sp, r7
 8019c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c9a:	4770      	bx	lr

08019c9c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8019c9c:	b580      	push	{r7, lr}
 8019c9e:	b086      	sub	sp, #24
 8019ca0:	af00      	add	r7, sp, #0
 8019ca2:	60f8      	str	r0, [r7, #12]
 8019ca4:	60b9      	str	r1, [r7, #8]
 8019ca6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8019ca8:	2300      	movs	r3, #0
 8019caa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019cac:	68fb      	ldr	r3, [r7, #12]
 8019cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019cb0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8019cb2:	68fb      	ldr	r3, [r7, #12]
 8019cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019cb6:	2b00      	cmp	r3, #0
 8019cb8:	d10d      	bne.n	8019cd6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8019cba:	68fb      	ldr	r3, [r7, #12]
 8019cbc:	681b      	ldr	r3, [r3, #0]
 8019cbe:	2b00      	cmp	r3, #0
 8019cc0:	d14d      	bne.n	8019d5e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8019cc2:	68fb      	ldr	r3, [r7, #12]
 8019cc4:	689b      	ldr	r3, [r3, #8]
 8019cc6:	4618      	mov	r0, r3
 8019cc8:	f000 fe8e 	bl	801a9e8 <xTaskPriorityDisinherit>
 8019ccc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8019cce:	68fb      	ldr	r3, [r7, #12]
 8019cd0:	2200      	movs	r2, #0
 8019cd2:	609a      	str	r2, [r3, #8]
 8019cd4:	e043      	b.n	8019d5e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8019cd6:	687b      	ldr	r3, [r7, #4]
 8019cd8:	2b00      	cmp	r3, #0
 8019cda:	d119      	bne.n	8019d10 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8019cdc:	68fb      	ldr	r3, [r7, #12]
 8019cde:	6858      	ldr	r0, [r3, #4]
 8019ce0:	68fb      	ldr	r3, [r7, #12]
 8019ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019ce4:	461a      	mov	r2, r3
 8019ce6:	68b9      	ldr	r1, [r7, #8]
 8019ce8:	f001 fdde 	bl	801b8a8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8019cec:	68fb      	ldr	r3, [r7, #12]
 8019cee:	685a      	ldr	r2, [r3, #4]
 8019cf0:	68fb      	ldr	r3, [r7, #12]
 8019cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019cf4:	441a      	add	r2, r3
 8019cf6:	68fb      	ldr	r3, [r7, #12]
 8019cf8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8019cfa:	68fb      	ldr	r3, [r7, #12]
 8019cfc:	685a      	ldr	r2, [r3, #4]
 8019cfe:	68fb      	ldr	r3, [r7, #12]
 8019d00:	689b      	ldr	r3, [r3, #8]
 8019d02:	429a      	cmp	r2, r3
 8019d04:	d32b      	bcc.n	8019d5e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8019d06:	68fb      	ldr	r3, [r7, #12]
 8019d08:	681a      	ldr	r2, [r3, #0]
 8019d0a:	68fb      	ldr	r3, [r7, #12]
 8019d0c:	605a      	str	r2, [r3, #4]
 8019d0e:	e026      	b.n	8019d5e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8019d10:	68fb      	ldr	r3, [r7, #12]
 8019d12:	68d8      	ldr	r0, [r3, #12]
 8019d14:	68fb      	ldr	r3, [r7, #12]
 8019d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019d18:	461a      	mov	r2, r3
 8019d1a:	68b9      	ldr	r1, [r7, #8]
 8019d1c:	f001 fdc4 	bl	801b8a8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8019d20:	68fb      	ldr	r3, [r7, #12]
 8019d22:	68da      	ldr	r2, [r3, #12]
 8019d24:	68fb      	ldr	r3, [r7, #12]
 8019d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019d28:	425b      	negs	r3, r3
 8019d2a:	441a      	add	r2, r3
 8019d2c:	68fb      	ldr	r3, [r7, #12]
 8019d2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8019d30:	68fb      	ldr	r3, [r7, #12]
 8019d32:	68da      	ldr	r2, [r3, #12]
 8019d34:	68fb      	ldr	r3, [r7, #12]
 8019d36:	681b      	ldr	r3, [r3, #0]
 8019d38:	429a      	cmp	r2, r3
 8019d3a:	d207      	bcs.n	8019d4c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8019d3c:	68fb      	ldr	r3, [r7, #12]
 8019d3e:	689a      	ldr	r2, [r3, #8]
 8019d40:	68fb      	ldr	r3, [r7, #12]
 8019d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019d44:	425b      	negs	r3, r3
 8019d46:	441a      	add	r2, r3
 8019d48:	68fb      	ldr	r3, [r7, #12]
 8019d4a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8019d4c:	687b      	ldr	r3, [r7, #4]
 8019d4e:	2b02      	cmp	r3, #2
 8019d50:	d105      	bne.n	8019d5e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8019d52:	693b      	ldr	r3, [r7, #16]
 8019d54:	2b00      	cmp	r3, #0
 8019d56:	d002      	beq.n	8019d5e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8019d58:	693b      	ldr	r3, [r7, #16]
 8019d5a:	3b01      	subs	r3, #1
 8019d5c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8019d5e:	693b      	ldr	r3, [r7, #16]
 8019d60:	1c5a      	adds	r2, r3, #1
 8019d62:	68fb      	ldr	r3, [r7, #12]
 8019d64:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8019d66:	697b      	ldr	r3, [r7, #20]
}
 8019d68:	4618      	mov	r0, r3
 8019d6a:	3718      	adds	r7, #24
 8019d6c:	46bd      	mov	sp, r7
 8019d6e:	bd80      	pop	{r7, pc}

08019d70 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8019d70:	b580      	push	{r7, lr}
 8019d72:	b084      	sub	sp, #16
 8019d74:	af00      	add	r7, sp, #0
 8019d76:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8019d78:	f001 f8f4 	bl	801af64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8019d7c:	687b      	ldr	r3, [r7, #4]
 8019d7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019d82:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8019d84:	e011      	b.n	8019daa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019d86:	687b      	ldr	r3, [r7, #4]
 8019d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d8a:	2b00      	cmp	r3, #0
 8019d8c:	d012      	beq.n	8019db4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019d8e:	687b      	ldr	r3, [r7, #4]
 8019d90:	3324      	adds	r3, #36	; 0x24
 8019d92:	4618      	mov	r0, r3
 8019d94:	f000 fbe8 	bl	801a568 <xTaskRemoveFromEventList>
 8019d98:	4603      	mov	r3, r0
 8019d9a:	2b00      	cmp	r3, #0
 8019d9c:	d001      	beq.n	8019da2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8019d9e:	f000 fccd 	bl	801a73c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8019da2:	7bfb      	ldrb	r3, [r7, #15]
 8019da4:	3b01      	subs	r3, #1
 8019da6:	b2db      	uxtb	r3, r3
 8019da8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8019daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019dae:	2b00      	cmp	r3, #0
 8019db0:	dce9      	bgt.n	8019d86 <prvUnlockQueue+0x16>
 8019db2:	e000      	b.n	8019db6 <prvUnlockQueue+0x46>
					break;
 8019db4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8019db6:	687b      	ldr	r3, [r7, #4]
 8019db8:	22ff      	movs	r2, #255	; 0xff
 8019dba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8019dbe:	f001 f901 	bl	801afc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8019dc2:	f001 f8cf 	bl	801af64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8019dc6:	687b      	ldr	r3, [r7, #4]
 8019dc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019dcc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8019dce:	e011      	b.n	8019df4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019dd0:	687b      	ldr	r3, [r7, #4]
 8019dd2:	691b      	ldr	r3, [r3, #16]
 8019dd4:	2b00      	cmp	r3, #0
 8019dd6:	d012      	beq.n	8019dfe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	3310      	adds	r3, #16
 8019ddc:	4618      	mov	r0, r3
 8019dde:	f000 fbc3 	bl	801a568 <xTaskRemoveFromEventList>
 8019de2:	4603      	mov	r3, r0
 8019de4:	2b00      	cmp	r3, #0
 8019de6:	d001      	beq.n	8019dec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8019de8:	f000 fca8 	bl	801a73c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8019dec:	7bbb      	ldrb	r3, [r7, #14]
 8019dee:	3b01      	subs	r3, #1
 8019df0:	b2db      	uxtb	r3, r3
 8019df2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8019df4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019df8:	2b00      	cmp	r3, #0
 8019dfa:	dce9      	bgt.n	8019dd0 <prvUnlockQueue+0x60>
 8019dfc:	e000      	b.n	8019e00 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8019dfe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8019e00:	687b      	ldr	r3, [r7, #4]
 8019e02:	22ff      	movs	r2, #255	; 0xff
 8019e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8019e08:	f001 f8dc 	bl	801afc4 <vPortExitCritical>
}
 8019e0c:	bf00      	nop
 8019e0e:	3710      	adds	r7, #16
 8019e10:	46bd      	mov	sp, r7
 8019e12:	bd80      	pop	{r7, pc}

08019e14 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8019e14:	b580      	push	{r7, lr}
 8019e16:	b084      	sub	sp, #16
 8019e18:	af00      	add	r7, sp, #0
 8019e1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8019e1c:	f001 f8a2 	bl	801af64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8019e20:	687b      	ldr	r3, [r7, #4]
 8019e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019e24:	2b00      	cmp	r3, #0
 8019e26:	d102      	bne.n	8019e2e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8019e28:	2301      	movs	r3, #1
 8019e2a:	60fb      	str	r3, [r7, #12]
 8019e2c:	e001      	b.n	8019e32 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8019e2e:	2300      	movs	r3, #0
 8019e30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8019e32:	f001 f8c7 	bl	801afc4 <vPortExitCritical>

	return xReturn;
 8019e36:	68fb      	ldr	r3, [r7, #12]
}
 8019e38:	4618      	mov	r0, r3
 8019e3a:	3710      	adds	r7, #16
 8019e3c:	46bd      	mov	sp, r7
 8019e3e:	bd80      	pop	{r7, pc}

08019e40 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8019e40:	b580      	push	{r7, lr}
 8019e42:	b084      	sub	sp, #16
 8019e44:	af00      	add	r7, sp, #0
 8019e46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8019e48:	f001 f88c 	bl	801af64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8019e4c:	687b      	ldr	r3, [r7, #4]
 8019e4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019e50:	687b      	ldr	r3, [r7, #4]
 8019e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019e54:	429a      	cmp	r2, r3
 8019e56:	d102      	bne.n	8019e5e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8019e58:	2301      	movs	r3, #1
 8019e5a:	60fb      	str	r3, [r7, #12]
 8019e5c:	e001      	b.n	8019e62 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8019e5e:	2300      	movs	r3, #0
 8019e60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8019e62:	f001 f8af 	bl	801afc4 <vPortExitCritical>

	return xReturn;
 8019e66:	68fb      	ldr	r3, [r7, #12]
}
 8019e68:	4618      	mov	r0, r3
 8019e6a:	3710      	adds	r7, #16
 8019e6c:	46bd      	mov	sp, r7
 8019e6e:	bd80      	pop	{r7, pc}

08019e70 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8019e70:	b580      	push	{r7, lr}
 8019e72:	b08c      	sub	sp, #48	; 0x30
 8019e74:	af04      	add	r7, sp, #16
 8019e76:	60f8      	str	r0, [r7, #12]
 8019e78:	60b9      	str	r1, [r7, #8]
 8019e7a:	603b      	str	r3, [r7, #0]
 8019e7c:	4613      	mov	r3, r2
 8019e7e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8019e80:	88fb      	ldrh	r3, [r7, #6]
 8019e82:	009b      	lsls	r3, r3, #2
 8019e84:	4618      	mov	r0, r3
 8019e86:	f001 f98f 	bl	801b1a8 <pvPortMalloc>
 8019e8a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8019e8c:	697b      	ldr	r3, [r7, #20]
 8019e8e:	2b00      	cmp	r3, #0
 8019e90:	d00e      	beq.n	8019eb0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8019e92:	20a0      	movs	r0, #160	; 0xa0
 8019e94:	f001 f988 	bl	801b1a8 <pvPortMalloc>
 8019e98:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8019e9a:	69fb      	ldr	r3, [r7, #28]
 8019e9c:	2b00      	cmp	r3, #0
 8019e9e:	d003      	beq.n	8019ea8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8019ea0:	69fb      	ldr	r3, [r7, #28]
 8019ea2:	697a      	ldr	r2, [r7, #20]
 8019ea4:	631a      	str	r2, [r3, #48]	; 0x30
 8019ea6:	e005      	b.n	8019eb4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8019ea8:	6978      	ldr	r0, [r7, #20]
 8019eaa:	f001 fa49 	bl	801b340 <vPortFree>
 8019eae:	e001      	b.n	8019eb4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8019eb0:	2300      	movs	r3, #0
 8019eb2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8019eb4:	69fb      	ldr	r3, [r7, #28]
 8019eb6:	2b00      	cmp	r3, #0
 8019eb8:	d013      	beq.n	8019ee2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8019eba:	88fa      	ldrh	r2, [r7, #6]
 8019ebc:	2300      	movs	r3, #0
 8019ebe:	9303      	str	r3, [sp, #12]
 8019ec0:	69fb      	ldr	r3, [r7, #28]
 8019ec2:	9302      	str	r3, [sp, #8]
 8019ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ec6:	9301      	str	r3, [sp, #4]
 8019ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019eca:	9300      	str	r3, [sp, #0]
 8019ecc:	683b      	ldr	r3, [r7, #0]
 8019ece:	68b9      	ldr	r1, [r7, #8]
 8019ed0:	68f8      	ldr	r0, [r7, #12]
 8019ed2:	f000 f80f 	bl	8019ef4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8019ed6:	69f8      	ldr	r0, [r7, #28]
 8019ed8:	f000 f8ae 	bl	801a038 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8019edc:	2301      	movs	r3, #1
 8019ede:	61bb      	str	r3, [r7, #24]
 8019ee0:	e002      	b.n	8019ee8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8019ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8019ee6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8019ee8:	69bb      	ldr	r3, [r7, #24]
	}
 8019eea:	4618      	mov	r0, r3
 8019eec:	3720      	adds	r7, #32
 8019eee:	46bd      	mov	sp, r7
 8019ef0:	bd80      	pop	{r7, pc}
	...

08019ef4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8019ef4:	b580      	push	{r7, lr}
 8019ef6:	b088      	sub	sp, #32
 8019ef8:	af00      	add	r7, sp, #0
 8019efa:	60f8      	str	r0, [r7, #12]
 8019efc:	60b9      	str	r1, [r7, #8]
 8019efe:	607a      	str	r2, [r7, #4]
 8019f00:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8019f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019f06:	687b      	ldr	r3, [r7, #4]
 8019f08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8019f0c:	3b01      	subs	r3, #1
 8019f0e:	009b      	lsls	r3, r3, #2
 8019f10:	4413      	add	r3, r2
 8019f12:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8019f14:	69bb      	ldr	r3, [r7, #24]
 8019f16:	f023 0307 	bic.w	r3, r3, #7
 8019f1a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8019f1c:	69bb      	ldr	r3, [r7, #24]
 8019f1e:	f003 0307 	and.w	r3, r3, #7
 8019f22:	2b00      	cmp	r3, #0
 8019f24:	d00a      	beq.n	8019f3c <prvInitialiseNewTask+0x48>
	__asm volatile
 8019f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f2a:	f383 8811 	msr	BASEPRI, r3
 8019f2e:	f3bf 8f6f 	isb	sy
 8019f32:	f3bf 8f4f 	dsb	sy
 8019f36:	617b      	str	r3, [r7, #20]
}
 8019f38:	bf00      	nop
 8019f3a:	e7fe      	b.n	8019f3a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8019f3c:	68bb      	ldr	r3, [r7, #8]
 8019f3e:	2b00      	cmp	r3, #0
 8019f40:	d01f      	beq.n	8019f82 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8019f42:	2300      	movs	r3, #0
 8019f44:	61fb      	str	r3, [r7, #28]
 8019f46:	e012      	b.n	8019f6e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8019f48:	68ba      	ldr	r2, [r7, #8]
 8019f4a:	69fb      	ldr	r3, [r7, #28]
 8019f4c:	4413      	add	r3, r2
 8019f4e:	7819      	ldrb	r1, [r3, #0]
 8019f50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019f52:	69fb      	ldr	r3, [r7, #28]
 8019f54:	4413      	add	r3, r2
 8019f56:	3334      	adds	r3, #52	; 0x34
 8019f58:	460a      	mov	r2, r1
 8019f5a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8019f5c:	68ba      	ldr	r2, [r7, #8]
 8019f5e:	69fb      	ldr	r3, [r7, #28]
 8019f60:	4413      	add	r3, r2
 8019f62:	781b      	ldrb	r3, [r3, #0]
 8019f64:	2b00      	cmp	r3, #0
 8019f66:	d006      	beq.n	8019f76 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8019f68:	69fb      	ldr	r3, [r7, #28]
 8019f6a:	3301      	adds	r3, #1
 8019f6c:	61fb      	str	r3, [r7, #28]
 8019f6e:	69fb      	ldr	r3, [r7, #28]
 8019f70:	2b0f      	cmp	r3, #15
 8019f72:	d9e9      	bls.n	8019f48 <prvInitialiseNewTask+0x54>
 8019f74:	e000      	b.n	8019f78 <prvInitialiseNewTask+0x84>
			{
				break;
 8019f76:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8019f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f7a:	2200      	movs	r2, #0
 8019f7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8019f80:	e003      	b.n	8019f8a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8019f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f84:	2200      	movs	r2, #0
 8019f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8019f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f8c:	2b06      	cmp	r3, #6
 8019f8e:	d901      	bls.n	8019f94 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8019f90:	2306      	movs	r3, #6
 8019f92:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8019f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019f98:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8019f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019f9e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8019fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019fa2:	2200      	movs	r2, #0
 8019fa4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8019fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019fa8:	3304      	adds	r3, #4
 8019faa:	4618      	mov	r0, r3
 8019fac:	f7ff fa74 	bl	8019498 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8019fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019fb2:	3318      	adds	r3, #24
 8019fb4:	4618      	mov	r0, r3
 8019fb6:	f7ff fa6f 	bl	8019498 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8019fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019fbe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fc2:	f1c3 0207 	rsb	r2, r3, #7
 8019fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019fc8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8019fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019fcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019fce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8019fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019fd2:	2200      	movs	r2, #0
 8019fd4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8019fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019fda:	2200      	movs	r2, #0
 8019fdc:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8019fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019fe2:	334c      	adds	r3, #76	; 0x4c
 8019fe4:	224c      	movs	r2, #76	; 0x4c
 8019fe6:	2100      	movs	r1, #0
 8019fe8:	4618      	mov	r0, r3
 8019fea:	f001 fba1 	bl	801b730 <memset>
 8019fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ff0:	4a0e      	ldr	r2, [pc, #56]	; (801a02c <prvInitialiseNewTask+0x138>)
 8019ff2:	651a      	str	r2, [r3, #80]	; 0x50
 8019ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ff6:	4a0e      	ldr	r2, [pc, #56]	; (801a030 <prvInitialiseNewTask+0x13c>)
 8019ff8:	655a      	str	r2, [r3, #84]	; 0x54
 8019ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ffc:	4a0d      	ldr	r2, [pc, #52]	; (801a034 <prvInitialiseNewTask+0x140>)
 8019ffe:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 801a000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a002:	2200      	movs	r2, #0
 801a004:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801a008:	683a      	ldr	r2, [r7, #0]
 801a00a:	68f9      	ldr	r1, [r7, #12]
 801a00c:	69b8      	ldr	r0, [r7, #24]
 801a00e:	f000 fe7d 	bl	801ad0c <pxPortInitialiseStack>
 801a012:	4602      	mov	r2, r0
 801a014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a016:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801a018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a01a:	2b00      	cmp	r3, #0
 801a01c:	d002      	beq.n	801a024 <prvInitialiseNewTask+0x130>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801a01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a022:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a024:	bf00      	nop
 801a026:	3720      	adds	r7, #32
 801a028:	46bd      	mov	sp, r7
 801a02a:	bd80      	pop	{r7, pc}
 801a02c:	20003b80 	.word	0x20003b80
 801a030:	20003be8 	.word	0x20003be8
 801a034:	20003c50 	.word	0x20003c50

0801a038 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801a038:	b580      	push	{r7, lr}
 801a03a:	b082      	sub	sp, #8
 801a03c:	af00      	add	r7, sp, #0
 801a03e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801a040:	f000 ff90 	bl	801af64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801a044:	4b24      	ldr	r3, [pc, #144]	; (801a0d8 <prvAddNewTaskToReadyList+0xa0>)
 801a046:	681b      	ldr	r3, [r3, #0]
 801a048:	3301      	adds	r3, #1
 801a04a:	4a23      	ldr	r2, [pc, #140]	; (801a0d8 <prvAddNewTaskToReadyList+0xa0>)
 801a04c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801a04e:	4b23      	ldr	r3, [pc, #140]	; (801a0dc <prvAddNewTaskToReadyList+0xa4>)
 801a050:	681b      	ldr	r3, [r3, #0]
 801a052:	2b00      	cmp	r3, #0
 801a054:	d109      	bne.n	801a06a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801a056:	4a21      	ldr	r2, [pc, #132]	; (801a0dc <prvAddNewTaskToReadyList+0xa4>)
 801a058:	687b      	ldr	r3, [r7, #4]
 801a05a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801a05c:	4b1e      	ldr	r3, [pc, #120]	; (801a0d8 <prvAddNewTaskToReadyList+0xa0>)
 801a05e:	681b      	ldr	r3, [r3, #0]
 801a060:	2b01      	cmp	r3, #1
 801a062:	d110      	bne.n	801a086 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801a064:	f000 fb88 	bl	801a778 <prvInitialiseTaskLists>
 801a068:	e00d      	b.n	801a086 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801a06a:	4b1d      	ldr	r3, [pc, #116]	; (801a0e0 <prvAddNewTaskToReadyList+0xa8>)
 801a06c:	681b      	ldr	r3, [r3, #0]
 801a06e:	2b00      	cmp	r3, #0
 801a070:	d109      	bne.n	801a086 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801a072:	4b1a      	ldr	r3, [pc, #104]	; (801a0dc <prvAddNewTaskToReadyList+0xa4>)
 801a074:	681b      	ldr	r3, [r3, #0]
 801a076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a07c:	429a      	cmp	r2, r3
 801a07e:	d802      	bhi.n	801a086 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801a080:	4a16      	ldr	r2, [pc, #88]	; (801a0dc <prvAddNewTaskToReadyList+0xa4>)
 801a082:	687b      	ldr	r3, [r7, #4]
 801a084:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801a086:	4b17      	ldr	r3, [pc, #92]	; (801a0e4 <prvAddNewTaskToReadyList+0xac>)
 801a088:	681b      	ldr	r3, [r3, #0]
 801a08a:	3301      	adds	r3, #1
 801a08c:	4a15      	ldr	r2, [pc, #84]	; (801a0e4 <prvAddNewTaskToReadyList+0xac>)
 801a08e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801a090:	687b      	ldr	r3, [r7, #4]
 801a092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a094:	2201      	movs	r2, #1
 801a096:	409a      	lsls	r2, r3
 801a098:	4b13      	ldr	r3, [pc, #76]	; (801a0e8 <prvAddNewTaskToReadyList+0xb0>)
 801a09a:	681b      	ldr	r3, [r3, #0]
 801a09c:	4313      	orrs	r3, r2
 801a09e:	4a12      	ldr	r2, [pc, #72]	; (801a0e8 <prvAddNewTaskToReadyList+0xb0>)
 801a0a0:	6013      	str	r3, [r2, #0]
 801a0a2:	687b      	ldr	r3, [r7, #4]
 801a0a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a0a6:	4613      	mov	r3, r2
 801a0a8:	009b      	lsls	r3, r3, #2
 801a0aa:	4413      	add	r3, r2
 801a0ac:	009b      	lsls	r3, r3, #2
 801a0ae:	4a0f      	ldr	r2, [pc, #60]	; (801a0ec <prvAddNewTaskToReadyList+0xb4>)
 801a0b0:	441a      	add	r2, r3
 801a0b2:	687b      	ldr	r3, [r7, #4]
 801a0b4:	3304      	adds	r3, #4
 801a0b6:	4619      	mov	r1, r3
 801a0b8:	4610      	mov	r0, r2
 801a0ba:	f7ff f9fa 	bl	80194b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801a0be:	f000 ff81 	bl	801afc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801a0c2:	4b07      	ldr	r3, [pc, #28]	; (801a0e0 <prvAddNewTaskToReadyList+0xa8>)
 801a0c4:	681b      	ldr	r3, [r3, #0]
 801a0c6:	2b00      	cmp	r3, #0
 801a0c8:	d001      	beq.n	801a0ce <prvAddNewTaskToReadyList+0x96>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801a0ca:	4b04      	ldr	r3, [pc, #16]	; (801a0dc <prvAddNewTaskToReadyList+0xa4>)
 801a0cc:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a0ce:	bf00      	nop
 801a0d0:	3708      	adds	r7, #8
 801a0d2:	46bd      	mov	sp, r7
 801a0d4:	bd80      	pop	{r7, pc}
 801a0d6:	bf00      	nop
 801a0d8:	20000b24 	.word	0x20000b24
 801a0dc:	20000a24 	.word	0x20000a24
 801a0e0:	20000b30 	.word	0x20000b30
 801a0e4:	20000b40 	.word	0x20000b40
 801a0e8:	20000b2c 	.word	0x20000b2c
 801a0ec:	20000a28 	.word	0x20000a28

0801a0f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801a0f0:	b580      	push	{r7, lr}
 801a0f2:	b084      	sub	sp, #16
 801a0f4:	af00      	add	r7, sp, #0
 801a0f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801a0f8:	2300      	movs	r3, #0
 801a0fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801a0fc:	687b      	ldr	r3, [r7, #4]
 801a0fe:	2b00      	cmp	r3, #0
 801a100:	d017      	beq.n	801a132 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801a102:	4b13      	ldr	r3, [pc, #76]	; (801a150 <vTaskDelay+0x60>)
 801a104:	681b      	ldr	r3, [r3, #0]
 801a106:	2b00      	cmp	r3, #0
 801a108:	d00a      	beq.n	801a120 <vTaskDelay+0x30>
	__asm volatile
 801a10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a10e:	f383 8811 	msr	BASEPRI, r3
 801a112:	f3bf 8f6f 	isb	sy
 801a116:	f3bf 8f4f 	dsb	sy
 801a11a:	60bb      	str	r3, [r7, #8]
}
 801a11c:	bf00      	nop
 801a11e:	e7fe      	b.n	801a11e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801a120:	f000 f86a 	bl	801a1f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801a124:	2100      	movs	r1, #0
 801a126:	6878      	ldr	r0, [r7, #4]
 801a128:	f000 fd86 	bl	801ac38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801a12c:	f000 f872 	bl	801a214 <xTaskResumeAll>
 801a130:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801a132:	68fb      	ldr	r3, [r7, #12]
 801a134:	2b00      	cmp	r3, #0
 801a136:	d107      	bne.n	801a148 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801a138:	4b06      	ldr	r3, [pc, #24]	; (801a154 <vTaskDelay+0x64>)
 801a13a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a13e:	601a      	str	r2, [r3, #0]
 801a140:	f3bf 8f4f 	dsb	sy
 801a144:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801a148:	bf00      	nop
 801a14a:	3710      	adds	r7, #16
 801a14c:	46bd      	mov	sp, r7
 801a14e:	bd80      	pop	{r7, pc}
 801a150:	20000b4c 	.word	0x20000b4c
 801a154:	e000ed04 	.word	0xe000ed04

0801a158 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801a158:	b580      	push	{r7, lr}
 801a15a:	b086      	sub	sp, #24
 801a15c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 801a15e:	4b1e      	ldr	r3, [pc, #120]	; (801a1d8 <vTaskStartScheduler+0x80>)
 801a160:	9301      	str	r3, [sp, #4]
 801a162:	2300      	movs	r3, #0
 801a164:	9300      	str	r3, [sp, #0]
 801a166:	2300      	movs	r3, #0
 801a168:	2280      	movs	r2, #128	; 0x80
 801a16a:	491c      	ldr	r1, [pc, #112]	; (801a1dc <vTaskStartScheduler+0x84>)
 801a16c:	481c      	ldr	r0, [pc, #112]	; (801a1e0 <vTaskStartScheduler+0x88>)
 801a16e:	f7ff fe7f 	bl	8019e70 <xTaskCreate>
 801a172:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801a174:	68fb      	ldr	r3, [r7, #12]
 801a176:	2b01      	cmp	r3, #1
 801a178:	d11b      	bne.n	801a1b2 <vTaskStartScheduler+0x5a>
	__asm volatile
 801a17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a17e:	f383 8811 	msr	BASEPRI, r3
 801a182:	f3bf 8f6f 	isb	sy
 801a186:	f3bf 8f4f 	dsb	sy
 801a18a:	60bb      	str	r3, [r7, #8]
}
 801a18c:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801a18e:	4b15      	ldr	r3, [pc, #84]	; (801a1e4 <vTaskStartScheduler+0x8c>)
 801a190:	681b      	ldr	r3, [r3, #0]
 801a192:	334c      	adds	r3, #76	; 0x4c
 801a194:	4a14      	ldr	r2, [pc, #80]	; (801a1e8 <vTaskStartScheduler+0x90>)
 801a196:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801a198:	4b14      	ldr	r3, [pc, #80]	; (801a1ec <vTaskStartScheduler+0x94>)
 801a19a:	f04f 32ff 	mov.w	r2, #4294967295
 801a19e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801a1a0:	4b13      	ldr	r3, [pc, #76]	; (801a1f0 <vTaskStartScheduler+0x98>)
 801a1a2:	2201      	movs	r2, #1
 801a1a4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801a1a6:	4b13      	ldr	r3, [pc, #76]	; (801a1f4 <vTaskStartScheduler+0x9c>)
 801a1a8:	2200      	movs	r2, #0
 801a1aa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801a1ac:	f000 fe38 	bl	801ae20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801a1b0:	e00e      	b.n	801a1d0 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801a1b2:	68fb      	ldr	r3, [r7, #12]
 801a1b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a1b8:	d10a      	bne.n	801a1d0 <vTaskStartScheduler+0x78>
	__asm volatile
 801a1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a1be:	f383 8811 	msr	BASEPRI, r3
 801a1c2:	f3bf 8f6f 	isb	sy
 801a1c6:	f3bf 8f4f 	dsb	sy
 801a1ca:	607b      	str	r3, [r7, #4]
}
 801a1cc:	bf00      	nop
 801a1ce:	e7fe      	b.n	801a1ce <vTaskStartScheduler+0x76>
}
 801a1d0:	bf00      	nop
 801a1d2:	3710      	adds	r7, #16
 801a1d4:	46bd      	mov	sp, r7
 801a1d6:	bd80      	pop	{r7, pc}
 801a1d8:	20000b48 	.word	0x20000b48
 801a1dc:	0801c9f8 	.word	0x0801c9f8
 801a1e0:	0801a755 	.word	0x0801a755
 801a1e4:	20000a24 	.word	0x20000a24
 801a1e8:	20000060 	.word	0x20000060
 801a1ec:	20000b44 	.word	0x20000b44
 801a1f0:	20000b30 	.word	0x20000b30
 801a1f4:	20000b28 	.word	0x20000b28

0801a1f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801a1f8:	b480      	push	{r7}
 801a1fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801a1fc:	4b04      	ldr	r3, [pc, #16]	; (801a210 <vTaskSuspendAll+0x18>)
 801a1fe:	681b      	ldr	r3, [r3, #0]
 801a200:	3301      	adds	r3, #1
 801a202:	4a03      	ldr	r2, [pc, #12]	; (801a210 <vTaskSuspendAll+0x18>)
 801a204:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801a206:	bf00      	nop
 801a208:	46bd      	mov	sp, r7
 801a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a20e:	4770      	bx	lr
 801a210:	20000b4c 	.word	0x20000b4c

0801a214 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801a214:	b580      	push	{r7, lr}
 801a216:	b084      	sub	sp, #16
 801a218:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801a21a:	2300      	movs	r3, #0
 801a21c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801a21e:	2300      	movs	r3, #0
 801a220:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801a222:	4b3b      	ldr	r3, [pc, #236]	; (801a310 <xTaskResumeAll+0xfc>)
 801a224:	681b      	ldr	r3, [r3, #0]
 801a226:	2b00      	cmp	r3, #0
 801a228:	d10a      	bne.n	801a240 <xTaskResumeAll+0x2c>
	__asm volatile
 801a22a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a22e:	f383 8811 	msr	BASEPRI, r3
 801a232:	f3bf 8f6f 	isb	sy
 801a236:	f3bf 8f4f 	dsb	sy
 801a23a:	603b      	str	r3, [r7, #0]
}
 801a23c:	bf00      	nop
 801a23e:	e7fe      	b.n	801a23e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801a240:	f000 fe90 	bl	801af64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801a244:	4b32      	ldr	r3, [pc, #200]	; (801a310 <xTaskResumeAll+0xfc>)
 801a246:	681b      	ldr	r3, [r3, #0]
 801a248:	3b01      	subs	r3, #1
 801a24a:	4a31      	ldr	r2, [pc, #196]	; (801a310 <xTaskResumeAll+0xfc>)
 801a24c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a24e:	4b30      	ldr	r3, [pc, #192]	; (801a310 <xTaskResumeAll+0xfc>)
 801a250:	681b      	ldr	r3, [r3, #0]
 801a252:	2b00      	cmp	r3, #0
 801a254:	d155      	bne.n	801a302 <xTaskResumeAll+0xee>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801a256:	4b2f      	ldr	r3, [pc, #188]	; (801a314 <xTaskResumeAll+0x100>)
 801a258:	681b      	ldr	r3, [r3, #0]
 801a25a:	2b00      	cmp	r3, #0
 801a25c:	d051      	beq.n	801a302 <xTaskResumeAll+0xee>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801a25e:	e02e      	b.n	801a2be <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a260:	4b2d      	ldr	r3, [pc, #180]	; (801a318 <xTaskResumeAll+0x104>)
 801a262:	68db      	ldr	r3, [r3, #12]
 801a264:	68db      	ldr	r3, [r3, #12]
 801a266:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801a268:	68fb      	ldr	r3, [r7, #12]
 801a26a:	3318      	adds	r3, #24
 801a26c:	4618      	mov	r0, r3
 801a26e:	f7ff f97d 	bl	801956c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a272:	68fb      	ldr	r3, [r7, #12]
 801a274:	3304      	adds	r3, #4
 801a276:	4618      	mov	r0, r3
 801a278:	f7ff f978 	bl	801956c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801a27c:	68fb      	ldr	r3, [r7, #12]
 801a27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a280:	2201      	movs	r2, #1
 801a282:	409a      	lsls	r2, r3
 801a284:	4b25      	ldr	r3, [pc, #148]	; (801a31c <xTaskResumeAll+0x108>)
 801a286:	681b      	ldr	r3, [r3, #0]
 801a288:	4313      	orrs	r3, r2
 801a28a:	4a24      	ldr	r2, [pc, #144]	; (801a31c <xTaskResumeAll+0x108>)
 801a28c:	6013      	str	r3, [r2, #0]
 801a28e:	68fb      	ldr	r3, [r7, #12]
 801a290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a292:	4613      	mov	r3, r2
 801a294:	009b      	lsls	r3, r3, #2
 801a296:	4413      	add	r3, r2
 801a298:	009b      	lsls	r3, r3, #2
 801a29a:	4a21      	ldr	r2, [pc, #132]	; (801a320 <xTaskResumeAll+0x10c>)
 801a29c:	441a      	add	r2, r3
 801a29e:	68fb      	ldr	r3, [r7, #12]
 801a2a0:	3304      	adds	r3, #4
 801a2a2:	4619      	mov	r1, r3
 801a2a4:	4610      	mov	r0, r2
 801a2a6:	f7ff f904 	bl	80194b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801a2aa:	68fb      	ldr	r3, [r7, #12]
 801a2ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a2ae:	4b1d      	ldr	r3, [pc, #116]	; (801a324 <xTaskResumeAll+0x110>)
 801a2b0:	681b      	ldr	r3, [r3, #0]
 801a2b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a2b4:	429a      	cmp	r2, r3
 801a2b6:	d302      	bcc.n	801a2be <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 801a2b8:	4b1b      	ldr	r3, [pc, #108]	; (801a328 <xTaskResumeAll+0x114>)
 801a2ba:	2201      	movs	r2, #1
 801a2bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801a2be:	4b16      	ldr	r3, [pc, #88]	; (801a318 <xTaskResumeAll+0x104>)
 801a2c0:	681b      	ldr	r3, [r3, #0]
 801a2c2:	2b00      	cmp	r3, #0
 801a2c4:	d1cc      	bne.n	801a260 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801a2c6:	68fb      	ldr	r3, [r7, #12]
 801a2c8:	2b00      	cmp	r3, #0
 801a2ca:	d001      	beq.n	801a2d0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801a2cc:	f000 fad8 	bl	801a880 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801a2d0:	4b16      	ldr	r3, [pc, #88]	; (801a32c <xTaskResumeAll+0x118>)
 801a2d2:	681b      	ldr	r3, [r3, #0]
 801a2d4:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 801a2d6:	68bb      	ldr	r3, [r7, #8]
 801a2d8:	2b00      	cmp	r3, #0
 801a2da:	d010      	beq.n	801a2fe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801a2dc:	f000 f828 	bl	801a330 <xTaskIncrementTick>
 801a2e0:	4603      	mov	r3, r0
 801a2e2:	2b00      	cmp	r3, #0
 801a2e4:	d002      	beq.n	801a2ec <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801a2e6:	4b10      	ldr	r3, [pc, #64]	; (801a328 <xTaskResumeAll+0x114>)
 801a2e8:	2201      	movs	r2, #1
 801a2ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801a2ec:	68bb      	ldr	r3, [r7, #8]
 801a2ee:	3b01      	subs	r3, #1
 801a2f0:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801a2f2:	68bb      	ldr	r3, [r7, #8]
 801a2f4:	2b00      	cmp	r3, #0
 801a2f6:	d1f1      	bne.n	801a2dc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 801a2f8:	4b0c      	ldr	r3, [pc, #48]	; (801a32c <xTaskResumeAll+0x118>)
 801a2fa:	2200      	movs	r2, #0
 801a2fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801a2fe:	4b0a      	ldr	r3, [pc, #40]	; (801a328 <xTaskResumeAll+0x114>)
 801a300:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801a302:	f000 fe5f 	bl	801afc4 <vPortExitCritical>

	return xAlreadyYielded;
 801a306:	687b      	ldr	r3, [r7, #4]
}
 801a308:	4618      	mov	r0, r3
 801a30a:	3710      	adds	r7, #16
 801a30c:	46bd      	mov	sp, r7
 801a30e:	bd80      	pop	{r7, pc}
 801a310:	20000b4c 	.word	0x20000b4c
 801a314:	20000b24 	.word	0x20000b24
 801a318:	20000ae4 	.word	0x20000ae4
 801a31c:	20000b2c 	.word	0x20000b2c
 801a320:	20000a28 	.word	0x20000a28
 801a324:	20000a24 	.word	0x20000a24
 801a328:	20000b38 	.word	0x20000b38
 801a32c:	20000b34 	.word	0x20000b34

0801a330 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801a330:	b580      	push	{r7, lr}
 801a332:	b086      	sub	sp, #24
 801a334:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801a336:	2300      	movs	r3, #0
 801a338:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a33a:	4b3f      	ldr	r3, [pc, #252]	; (801a438 <xTaskIncrementTick+0x108>)
 801a33c:	681b      	ldr	r3, [r3, #0]
 801a33e:	2b00      	cmp	r3, #0
 801a340:	d16f      	bne.n	801a422 <xTaskIncrementTick+0xf2>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801a342:	4b3e      	ldr	r3, [pc, #248]	; (801a43c <xTaskIncrementTick+0x10c>)
 801a344:	681b      	ldr	r3, [r3, #0]
 801a346:	3301      	adds	r3, #1
 801a348:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801a34a:	4a3c      	ldr	r2, [pc, #240]	; (801a43c <xTaskIncrementTick+0x10c>)
 801a34c:	693b      	ldr	r3, [r7, #16]
 801a34e:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801a350:	693b      	ldr	r3, [r7, #16]
 801a352:	2b00      	cmp	r3, #0
 801a354:	d120      	bne.n	801a398 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 801a356:	4b3a      	ldr	r3, [pc, #232]	; (801a440 <xTaskIncrementTick+0x110>)
 801a358:	681b      	ldr	r3, [r3, #0]
 801a35a:	681b      	ldr	r3, [r3, #0]
 801a35c:	2b00      	cmp	r3, #0
 801a35e:	d00a      	beq.n	801a376 <xTaskIncrementTick+0x46>
	__asm volatile
 801a360:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a364:	f383 8811 	msr	BASEPRI, r3
 801a368:	f3bf 8f6f 	isb	sy
 801a36c:	f3bf 8f4f 	dsb	sy
 801a370:	603b      	str	r3, [r7, #0]
}
 801a372:	bf00      	nop
 801a374:	e7fe      	b.n	801a374 <xTaskIncrementTick+0x44>
 801a376:	4b32      	ldr	r3, [pc, #200]	; (801a440 <xTaskIncrementTick+0x110>)
 801a378:	681b      	ldr	r3, [r3, #0]
 801a37a:	60fb      	str	r3, [r7, #12]
 801a37c:	4b31      	ldr	r3, [pc, #196]	; (801a444 <xTaskIncrementTick+0x114>)
 801a37e:	681b      	ldr	r3, [r3, #0]
 801a380:	4a2f      	ldr	r2, [pc, #188]	; (801a440 <xTaskIncrementTick+0x110>)
 801a382:	6013      	str	r3, [r2, #0]
 801a384:	4a2f      	ldr	r2, [pc, #188]	; (801a444 <xTaskIncrementTick+0x114>)
 801a386:	68fb      	ldr	r3, [r7, #12]
 801a388:	6013      	str	r3, [r2, #0]
 801a38a:	4b2f      	ldr	r3, [pc, #188]	; (801a448 <xTaskIncrementTick+0x118>)
 801a38c:	681b      	ldr	r3, [r3, #0]
 801a38e:	3301      	adds	r3, #1
 801a390:	4a2d      	ldr	r2, [pc, #180]	; (801a448 <xTaskIncrementTick+0x118>)
 801a392:	6013      	str	r3, [r2, #0]
 801a394:	f000 fa74 	bl	801a880 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801a398:	4b2c      	ldr	r3, [pc, #176]	; (801a44c <xTaskIncrementTick+0x11c>)
 801a39a:	681b      	ldr	r3, [r3, #0]
 801a39c:	693a      	ldr	r2, [r7, #16]
 801a39e:	429a      	cmp	r2, r3
 801a3a0:	d344      	bcc.n	801a42c <xTaskIncrementTick+0xfc>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a3a2:	4b27      	ldr	r3, [pc, #156]	; (801a440 <xTaskIncrementTick+0x110>)
 801a3a4:	681b      	ldr	r3, [r3, #0]
 801a3a6:	681b      	ldr	r3, [r3, #0]
 801a3a8:	2b00      	cmp	r3, #0
 801a3aa:	d104      	bne.n	801a3b6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a3ac:	4b27      	ldr	r3, [pc, #156]	; (801a44c <xTaskIncrementTick+0x11c>)
 801a3ae:	f04f 32ff 	mov.w	r2, #4294967295
 801a3b2:	601a      	str	r2, [r3, #0]
					break;
 801a3b4:	e03a      	b.n	801a42c <xTaskIncrementTick+0xfc>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a3b6:	4b22      	ldr	r3, [pc, #136]	; (801a440 <xTaskIncrementTick+0x110>)
 801a3b8:	681b      	ldr	r3, [r3, #0]
 801a3ba:	68db      	ldr	r3, [r3, #12]
 801a3bc:	68db      	ldr	r3, [r3, #12]
 801a3be:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801a3c0:	68bb      	ldr	r3, [r7, #8]
 801a3c2:	685b      	ldr	r3, [r3, #4]
 801a3c4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801a3c6:	693a      	ldr	r2, [r7, #16]
 801a3c8:	687b      	ldr	r3, [r7, #4]
 801a3ca:	429a      	cmp	r2, r3
 801a3cc:	d203      	bcs.n	801a3d6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801a3ce:	4a1f      	ldr	r2, [pc, #124]	; (801a44c <xTaskIncrementTick+0x11c>)
 801a3d0:	687b      	ldr	r3, [r7, #4]
 801a3d2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801a3d4:	e02a      	b.n	801a42c <xTaskIncrementTick+0xfc>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a3d6:	68bb      	ldr	r3, [r7, #8]
 801a3d8:	3304      	adds	r3, #4
 801a3da:	4618      	mov	r0, r3
 801a3dc:	f7ff f8c6 	bl	801956c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801a3e0:	68bb      	ldr	r3, [r7, #8]
 801a3e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a3e4:	2b00      	cmp	r3, #0
 801a3e6:	d004      	beq.n	801a3f2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801a3e8:	68bb      	ldr	r3, [r7, #8]
 801a3ea:	3318      	adds	r3, #24
 801a3ec:	4618      	mov	r0, r3
 801a3ee:	f7ff f8bd 	bl	801956c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801a3f2:	68bb      	ldr	r3, [r7, #8]
 801a3f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a3f6:	2201      	movs	r2, #1
 801a3f8:	409a      	lsls	r2, r3
 801a3fa:	4b15      	ldr	r3, [pc, #84]	; (801a450 <xTaskIncrementTick+0x120>)
 801a3fc:	681b      	ldr	r3, [r3, #0]
 801a3fe:	4313      	orrs	r3, r2
 801a400:	4a13      	ldr	r2, [pc, #76]	; (801a450 <xTaskIncrementTick+0x120>)
 801a402:	6013      	str	r3, [r2, #0]
 801a404:	68bb      	ldr	r3, [r7, #8]
 801a406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a408:	4613      	mov	r3, r2
 801a40a:	009b      	lsls	r3, r3, #2
 801a40c:	4413      	add	r3, r2
 801a40e:	009b      	lsls	r3, r3, #2
 801a410:	4a10      	ldr	r2, [pc, #64]	; (801a454 <xTaskIncrementTick+0x124>)
 801a412:	441a      	add	r2, r3
 801a414:	68bb      	ldr	r3, [r7, #8]
 801a416:	3304      	adds	r3, #4
 801a418:	4619      	mov	r1, r3
 801a41a:	4610      	mov	r0, r2
 801a41c:	f7ff f849 	bl	80194b2 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a420:	e7bf      	b.n	801a3a2 <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801a422:	4b0d      	ldr	r3, [pc, #52]	; (801a458 <xTaskIncrementTick+0x128>)
 801a424:	681b      	ldr	r3, [r3, #0]
 801a426:	3301      	adds	r3, #1
 801a428:	4a0b      	ldr	r2, [pc, #44]	; (801a458 <xTaskIncrementTick+0x128>)
 801a42a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801a42c:	697b      	ldr	r3, [r7, #20]
}
 801a42e:	4618      	mov	r0, r3
 801a430:	3718      	adds	r7, #24
 801a432:	46bd      	mov	sp, r7
 801a434:	bd80      	pop	{r7, pc}
 801a436:	bf00      	nop
 801a438:	20000b4c 	.word	0x20000b4c
 801a43c:	20000b28 	.word	0x20000b28
 801a440:	20000adc 	.word	0x20000adc
 801a444:	20000ae0 	.word	0x20000ae0
 801a448:	20000b3c 	.word	0x20000b3c
 801a44c:	20000b44 	.word	0x20000b44
 801a450:	20000b2c 	.word	0x20000b2c
 801a454:	20000a28 	.word	0x20000a28
 801a458:	20000b34 	.word	0x20000b34

0801a45c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801a45c:	b480      	push	{r7}
 801a45e:	b087      	sub	sp, #28
 801a460:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801a462:	4b29      	ldr	r3, [pc, #164]	; (801a508 <vTaskSwitchContext+0xac>)
 801a464:	681b      	ldr	r3, [r3, #0]
 801a466:	2b00      	cmp	r3, #0
 801a468:	d003      	beq.n	801a472 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801a46a:	4b28      	ldr	r3, [pc, #160]	; (801a50c <vTaskSwitchContext+0xb0>)
 801a46c:	2201      	movs	r2, #1
 801a46e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801a470:	e044      	b.n	801a4fc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 801a472:	4b26      	ldr	r3, [pc, #152]	; (801a50c <vTaskSwitchContext+0xb0>)
 801a474:	2200      	movs	r2, #0
 801a476:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a478:	4b25      	ldr	r3, [pc, #148]	; (801a510 <vTaskSwitchContext+0xb4>)
 801a47a:	681b      	ldr	r3, [r3, #0]
 801a47c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801a47e:	68fb      	ldr	r3, [r7, #12]
 801a480:	fab3 f383 	clz	r3, r3
 801a484:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801a486:	7afb      	ldrb	r3, [r7, #11]
 801a488:	f1c3 031f 	rsb	r3, r3, #31
 801a48c:	617b      	str	r3, [r7, #20]
 801a48e:	4921      	ldr	r1, [pc, #132]	; (801a514 <vTaskSwitchContext+0xb8>)
 801a490:	697a      	ldr	r2, [r7, #20]
 801a492:	4613      	mov	r3, r2
 801a494:	009b      	lsls	r3, r3, #2
 801a496:	4413      	add	r3, r2
 801a498:	009b      	lsls	r3, r3, #2
 801a49a:	440b      	add	r3, r1
 801a49c:	681b      	ldr	r3, [r3, #0]
 801a49e:	2b00      	cmp	r3, #0
 801a4a0:	d10a      	bne.n	801a4b8 <vTaskSwitchContext+0x5c>
	__asm volatile
 801a4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a4a6:	f383 8811 	msr	BASEPRI, r3
 801a4aa:	f3bf 8f6f 	isb	sy
 801a4ae:	f3bf 8f4f 	dsb	sy
 801a4b2:	607b      	str	r3, [r7, #4]
}
 801a4b4:	bf00      	nop
 801a4b6:	e7fe      	b.n	801a4b6 <vTaskSwitchContext+0x5a>
 801a4b8:	697a      	ldr	r2, [r7, #20]
 801a4ba:	4613      	mov	r3, r2
 801a4bc:	009b      	lsls	r3, r3, #2
 801a4be:	4413      	add	r3, r2
 801a4c0:	009b      	lsls	r3, r3, #2
 801a4c2:	4a14      	ldr	r2, [pc, #80]	; (801a514 <vTaskSwitchContext+0xb8>)
 801a4c4:	4413      	add	r3, r2
 801a4c6:	613b      	str	r3, [r7, #16]
 801a4c8:	693b      	ldr	r3, [r7, #16]
 801a4ca:	685b      	ldr	r3, [r3, #4]
 801a4cc:	685a      	ldr	r2, [r3, #4]
 801a4ce:	693b      	ldr	r3, [r7, #16]
 801a4d0:	605a      	str	r2, [r3, #4]
 801a4d2:	693b      	ldr	r3, [r7, #16]
 801a4d4:	685a      	ldr	r2, [r3, #4]
 801a4d6:	693b      	ldr	r3, [r7, #16]
 801a4d8:	3308      	adds	r3, #8
 801a4da:	429a      	cmp	r2, r3
 801a4dc:	d104      	bne.n	801a4e8 <vTaskSwitchContext+0x8c>
 801a4de:	693b      	ldr	r3, [r7, #16]
 801a4e0:	685b      	ldr	r3, [r3, #4]
 801a4e2:	685a      	ldr	r2, [r3, #4]
 801a4e4:	693b      	ldr	r3, [r7, #16]
 801a4e6:	605a      	str	r2, [r3, #4]
 801a4e8:	693b      	ldr	r3, [r7, #16]
 801a4ea:	685b      	ldr	r3, [r3, #4]
 801a4ec:	68db      	ldr	r3, [r3, #12]
 801a4ee:	4a0a      	ldr	r2, [pc, #40]	; (801a518 <vTaskSwitchContext+0xbc>)
 801a4f0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801a4f2:	4b09      	ldr	r3, [pc, #36]	; (801a518 <vTaskSwitchContext+0xbc>)
 801a4f4:	681b      	ldr	r3, [r3, #0]
 801a4f6:	334c      	adds	r3, #76	; 0x4c
 801a4f8:	4a08      	ldr	r2, [pc, #32]	; (801a51c <vTaskSwitchContext+0xc0>)
 801a4fa:	6013      	str	r3, [r2, #0]
}
 801a4fc:	bf00      	nop
 801a4fe:	371c      	adds	r7, #28
 801a500:	46bd      	mov	sp, r7
 801a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a506:	4770      	bx	lr
 801a508:	20000b4c 	.word	0x20000b4c
 801a50c:	20000b38 	.word	0x20000b38
 801a510:	20000b2c 	.word	0x20000b2c
 801a514:	20000a28 	.word	0x20000a28
 801a518:	20000a24 	.word	0x20000a24
 801a51c:	20000060 	.word	0x20000060

0801a520 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801a520:	b580      	push	{r7, lr}
 801a522:	b084      	sub	sp, #16
 801a524:	af00      	add	r7, sp, #0
 801a526:	6078      	str	r0, [r7, #4]
 801a528:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801a52a:	687b      	ldr	r3, [r7, #4]
 801a52c:	2b00      	cmp	r3, #0
 801a52e:	d10a      	bne.n	801a546 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801a530:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a534:	f383 8811 	msr	BASEPRI, r3
 801a538:	f3bf 8f6f 	isb	sy
 801a53c:	f3bf 8f4f 	dsb	sy
 801a540:	60fb      	str	r3, [r7, #12]
}
 801a542:	bf00      	nop
 801a544:	e7fe      	b.n	801a544 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801a546:	4b07      	ldr	r3, [pc, #28]	; (801a564 <vTaskPlaceOnEventList+0x44>)
 801a548:	681b      	ldr	r3, [r3, #0]
 801a54a:	3318      	adds	r3, #24
 801a54c:	4619      	mov	r1, r3
 801a54e:	6878      	ldr	r0, [r7, #4]
 801a550:	f7fe ffd3 	bl	80194fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801a554:	2101      	movs	r1, #1
 801a556:	6838      	ldr	r0, [r7, #0]
 801a558:	f000 fb6e 	bl	801ac38 <prvAddCurrentTaskToDelayedList>
}
 801a55c:	bf00      	nop
 801a55e:	3710      	adds	r7, #16
 801a560:	46bd      	mov	sp, r7
 801a562:	bd80      	pop	{r7, pc}
 801a564:	20000a24 	.word	0x20000a24

0801a568 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801a568:	b580      	push	{r7, lr}
 801a56a:	b086      	sub	sp, #24
 801a56c:	af00      	add	r7, sp, #0
 801a56e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a570:	687b      	ldr	r3, [r7, #4]
 801a572:	68db      	ldr	r3, [r3, #12]
 801a574:	68db      	ldr	r3, [r3, #12]
 801a576:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801a578:	693b      	ldr	r3, [r7, #16]
 801a57a:	2b00      	cmp	r3, #0
 801a57c:	d10a      	bne.n	801a594 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801a57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a582:	f383 8811 	msr	BASEPRI, r3
 801a586:	f3bf 8f6f 	isb	sy
 801a58a:	f3bf 8f4f 	dsb	sy
 801a58e:	60fb      	str	r3, [r7, #12]
}
 801a590:	bf00      	nop
 801a592:	e7fe      	b.n	801a592 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801a594:	693b      	ldr	r3, [r7, #16]
 801a596:	3318      	adds	r3, #24
 801a598:	4618      	mov	r0, r3
 801a59a:	f7fe ffe7 	bl	801956c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a59e:	4b1d      	ldr	r3, [pc, #116]	; (801a614 <xTaskRemoveFromEventList+0xac>)
 801a5a0:	681b      	ldr	r3, [r3, #0]
 801a5a2:	2b00      	cmp	r3, #0
 801a5a4:	d11c      	bne.n	801a5e0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801a5a6:	693b      	ldr	r3, [r7, #16]
 801a5a8:	3304      	adds	r3, #4
 801a5aa:	4618      	mov	r0, r3
 801a5ac:	f7fe ffde 	bl	801956c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801a5b0:	693b      	ldr	r3, [r7, #16]
 801a5b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a5b4:	2201      	movs	r2, #1
 801a5b6:	409a      	lsls	r2, r3
 801a5b8:	4b17      	ldr	r3, [pc, #92]	; (801a618 <xTaskRemoveFromEventList+0xb0>)
 801a5ba:	681b      	ldr	r3, [r3, #0]
 801a5bc:	4313      	orrs	r3, r2
 801a5be:	4a16      	ldr	r2, [pc, #88]	; (801a618 <xTaskRemoveFromEventList+0xb0>)
 801a5c0:	6013      	str	r3, [r2, #0]
 801a5c2:	693b      	ldr	r3, [r7, #16]
 801a5c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a5c6:	4613      	mov	r3, r2
 801a5c8:	009b      	lsls	r3, r3, #2
 801a5ca:	4413      	add	r3, r2
 801a5cc:	009b      	lsls	r3, r3, #2
 801a5ce:	4a13      	ldr	r2, [pc, #76]	; (801a61c <xTaskRemoveFromEventList+0xb4>)
 801a5d0:	441a      	add	r2, r3
 801a5d2:	693b      	ldr	r3, [r7, #16]
 801a5d4:	3304      	adds	r3, #4
 801a5d6:	4619      	mov	r1, r3
 801a5d8:	4610      	mov	r0, r2
 801a5da:	f7fe ff6a 	bl	80194b2 <vListInsertEnd>
 801a5de:	e005      	b.n	801a5ec <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801a5e0:	693b      	ldr	r3, [r7, #16]
 801a5e2:	3318      	adds	r3, #24
 801a5e4:	4619      	mov	r1, r3
 801a5e6:	480e      	ldr	r0, [pc, #56]	; (801a620 <xTaskRemoveFromEventList+0xb8>)
 801a5e8:	f7fe ff63 	bl	80194b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801a5ec:	693b      	ldr	r3, [r7, #16]
 801a5ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a5f0:	4b0c      	ldr	r3, [pc, #48]	; (801a624 <xTaskRemoveFromEventList+0xbc>)
 801a5f2:	681b      	ldr	r3, [r3, #0]
 801a5f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a5f6:	429a      	cmp	r2, r3
 801a5f8:	d905      	bls.n	801a606 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801a5fa:	2301      	movs	r3, #1
 801a5fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801a5fe:	4b0a      	ldr	r3, [pc, #40]	; (801a628 <xTaskRemoveFromEventList+0xc0>)
 801a600:	2201      	movs	r2, #1
 801a602:	601a      	str	r2, [r3, #0]
 801a604:	e001      	b.n	801a60a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 801a606:	2300      	movs	r3, #0
 801a608:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801a60a:	697b      	ldr	r3, [r7, #20]
}
 801a60c:	4618      	mov	r0, r3
 801a60e:	3718      	adds	r7, #24
 801a610:	46bd      	mov	sp, r7
 801a612:	bd80      	pop	{r7, pc}
 801a614:	20000b4c 	.word	0x20000b4c
 801a618:	20000b2c 	.word	0x20000b2c
 801a61c:	20000a28 	.word	0x20000a28
 801a620:	20000ae4 	.word	0x20000ae4
 801a624:	20000a24 	.word	0x20000a24
 801a628:	20000b38 	.word	0x20000b38

0801a62c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801a62c:	b480      	push	{r7}
 801a62e:	b083      	sub	sp, #12
 801a630:	af00      	add	r7, sp, #0
 801a632:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801a634:	4b06      	ldr	r3, [pc, #24]	; (801a650 <vTaskInternalSetTimeOutState+0x24>)
 801a636:	681a      	ldr	r2, [r3, #0]
 801a638:	687b      	ldr	r3, [r7, #4]
 801a63a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801a63c:	4b05      	ldr	r3, [pc, #20]	; (801a654 <vTaskInternalSetTimeOutState+0x28>)
 801a63e:	681a      	ldr	r2, [r3, #0]
 801a640:	687b      	ldr	r3, [r7, #4]
 801a642:	605a      	str	r2, [r3, #4]
}
 801a644:	bf00      	nop
 801a646:	370c      	adds	r7, #12
 801a648:	46bd      	mov	sp, r7
 801a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a64e:	4770      	bx	lr
 801a650:	20000b3c 	.word	0x20000b3c
 801a654:	20000b28 	.word	0x20000b28

0801a658 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801a658:	b580      	push	{r7, lr}
 801a65a:	b088      	sub	sp, #32
 801a65c:	af00      	add	r7, sp, #0
 801a65e:	6078      	str	r0, [r7, #4]
 801a660:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801a662:	687b      	ldr	r3, [r7, #4]
 801a664:	2b00      	cmp	r3, #0
 801a666:	d10a      	bne.n	801a67e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801a668:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a66c:	f383 8811 	msr	BASEPRI, r3
 801a670:	f3bf 8f6f 	isb	sy
 801a674:	f3bf 8f4f 	dsb	sy
 801a678:	613b      	str	r3, [r7, #16]
}
 801a67a:	bf00      	nop
 801a67c:	e7fe      	b.n	801a67c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801a67e:	683b      	ldr	r3, [r7, #0]
 801a680:	2b00      	cmp	r3, #0
 801a682:	d10a      	bne.n	801a69a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801a684:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a688:	f383 8811 	msr	BASEPRI, r3
 801a68c:	f3bf 8f6f 	isb	sy
 801a690:	f3bf 8f4f 	dsb	sy
 801a694:	60fb      	str	r3, [r7, #12]
}
 801a696:	bf00      	nop
 801a698:	e7fe      	b.n	801a698 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801a69a:	f000 fc63 	bl	801af64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801a69e:	4b24      	ldr	r3, [pc, #144]	; (801a730 <xTaskCheckForTimeOut+0xd8>)
 801a6a0:	681b      	ldr	r3, [r3, #0]
 801a6a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801a6a4:	687b      	ldr	r3, [r7, #4]
 801a6a6:	685b      	ldr	r3, [r3, #4]
 801a6a8:	69ba      	ldr	r2, [r7, #24]
 801a6aa:	1ad3      	subs	r3, r2, r3
 801a6ac:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 801a6ae:	4b21      	ldr	r3, [pc, #132]	; (801a734 <xTaskCheckForTimeOut+0xdc>)
 801a6b0:	681b      	ldr	r3, [r3, #0]
 801a6b2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 801a6b6:	2b00      	cmp	r3, #0
 801a6b8:	d007      	beq.n	801a6ca <xTaskCheckForTimeOut+0x72>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 801a6ba:	4b1e      	ldr	r3, [pc, #120]	; (801a734 <xTaskCheckForTimeOut+0xdc>)
 801a6bc:	681b      	ldr	r3, [r3, #0]
 801a6be:	2200      	movs	r2, #0
 801a6c0:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
				xReturn = pdTRUE;
 801a6c4:	2301      	movs	r3, #1
 801a6c6:	61fb      	str	r3, [r7, #28]
 801a6c8:	e02b      	b.n	801a722 <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801a6ca:	683b      	ldr	r3, [r7, #0]
 801a6cc:	681b      	ldr	r3, [r3, #0]
 801a6ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a6d2:	d102      	bne.n	801a6da <xTaskCheckForTimeOut+0x82>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801a6d4:	2300      	movs	r3, #0
 801a6d6:	61fb      	str	r3, [r7, #28]
 801a6d8:	e023      	b.n	801a722 <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801a6da:	687b      	ldr	r3, [r7, #4]
 801a6dc:	681a      	ldr	r2, [r3, #0]
 801a6de:	4b16      	ldr	r3, [pc, #88]	; (801a738 <xTaskCheckForTimeOut+0xe0>)
 801a6e0:	681b      	ldr	r3, [r3, #0]
 801a6e2:	429a      	cmp	r2, r3
 801a6e4:	d007      	beq.n	801a6f6 <xTaskCheckForTimeOut+0x9e>
 801a6e6:	687b      	ldr	r3, [r7, #4]
 801a6e8:	685b      	ldr	r3, [r3, #4]
 801a6ea:	69ba      	ldr	r2, [r7, #24]
 801a6ec:	429a      	cmp	r2, r3
 801a6ee:	d302      	bcc.n	801a6f6 <xTaskCheckForTimeOut+0x9e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801a6f0:	2301      	movs	r3, #1
 801a6f2:	61fb      	str	r3, [r7, #28]
 801a6f4:	e015      	b.n	801a722 <xTaskCheckForTimeOut+0xca>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801a6f6:	683b      	ldr	r3, [r7, #0]
 801a6f8:	681b      	ldr	r3, [r3, #0]
 801a6fa:	697a      	ldr	r2, [r7, #20]
 801a6fc:	429a      	cmp	r2, r3
 801a6fe:	d20b      	bcs.n	801a718 <xTaskCheckForTimeOut+0xc0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801a700:	683b      	ldr	r3, [r7, #0]
 801a702:	681a      	ldr	r2, [r3, #0]
 801a704:	697b      	ldr	r3, [r7, #20]
 801a706:	1ad2      	subs	r2, r2, r3
 801a708:	683b      	ldr	r3, [r7, #0]
 801a70a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801a70c:	6878      	ldr	r0, [r7, #4]
 801a70e:	f7ff ff8d 	bl	801a62c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801a712:	2300      	movs	r3, #0
 801a714:	61fb      	str	r3, [r7, #28]
 801a716:	e004      	b.n	801a722 <xTaskCheckForTimeOut+0xca>
		}
		else
		{
			*pxTicksToWait = 0;
 801a718:	683b      	ldr	r3, [r7, #0]
 801a71a:	2200      	movs	r2, #0
 801a71c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801a71e:	2301      	movs	r3, #1
 801a720:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801a722:	f000 fc4f 	bl	801afc4 <vPortExitCritical>

	return xReturn;
 801a726:	69fb      	ldr	r3, [r7, #28]
}
 801a728:	4618      	mov	r0, r3
 801a72a:	3720      	adds	r7, #32
 801a72c:	46bd      	mov	sp, r7
 801a72e:	bd80      	pop	{r7, pc}
 801a730:	20000b28 	.word	0x20000b28
 801a734:	20000a24 	.word	0x20000a24
 801a738:	20000b3c 	.word	0x20000b3c

0801a73c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801a73c:	b480      	push	{r7}
 801a73e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801a740:	4b03      	ldr	r3, [pc, #12]	; (801a750 <vTaskMissedYield+0x14>)
 801a742:	2201      	movs	r2, #1
 801a744:	601a      	str	r2, [r3, #0]
}
 801a746:	bf00      	nop
 801a748:	46bd      	mov	sp, r7
 801a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a74e:	4770      	bx	lr
 801a750:	20000b38 	.word	0x20000b38

0801a754 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801a754:	b580      	push	{r7, lr}
 801a756:	b082      	sub	sp, #8
 801a758:	af00      	add	r7, sp, #0
 801a75a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801a75c:	f000 f84c 	bl	801a7f8 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 801a760:	4b04      	ldr	r3, [pc, #16]	; (801a774 <prvIdleTask+0x20>)
 801a762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a766:	601a      	str	r2, [r3, #0]
 801a768:	f3bf 8f4f 	dsb	sy
 801a76c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801a770:	e7f4      	b.n	801a75c <prvIdleTask+0x8>
 801a772:	bf00      	nop
 801a774:	e000ed04 	.word	0xe000ed04

0801a778 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801a778:	b580      	push	{r7, lr}
 801a77a:	b082      	sub	sp, #8
 801a77c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801a77e:	2300      	movs	r3, #0
 801a780:	607b      	str	r3, [r7, #4]
 801a782:	e00c      	b.n	801a79e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801a784:	687a      	ldr	r2, [r7, #4]
 801a786:	4613      	mov	r3, r2
 801a788:	009b      	lsls	r3, r3, #2
 801a78a:	4413      	add	r3, r2
 801a78c:	009b      	lsls	r3, r3, #2
 801a78e:	4a12      	ldr	r2, [pc, #72]	; (801a7d8 <prvInitialiseTaskLists+0x60>)
 801a790:	4413      	add	r3, r2
 801a792:	4618      	mov	r0, r3
 801a794:	f7fe fe60 	bl	8019458 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801a798:	687b      	ldr	r3, [r7, #4]
 801a79a:	3301      	adds	r3, #1
 801a79c:	607b      	str	r3, [r7, #4]
 801a79e:	687b      	ldr	r3, [r7, #4]
 801a7a0:	2b06      	cmp	r3, #6
 801a7a2:	d9ef      	bls.n	801a784 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801a7a4:	480d      	ldr	r0, [pc, #52]	; (801a7dc <prvInitialiseTaskLists+0x64>)
 801a7a6:	f7fe fe57 	bl	8019458 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801a7aa:	480d      	ldr	r0, [pc, #52]	; (801a7e0 <prvInitialiseTaskLists+0x68>)
 801a7ac:	f7fe fe54 	bl	8019458 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801a7b0:	480c      	ldr	r0, [pc, #48]	; (801a7e4 <prvInitialiseTaskLists+0x6c>)
 801a7b2:	f7fe fe51 	bl	8019458 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801a7b6:	480c      	ldr	r0, [pc, #48]	; (801a7e8 <prvInitialiseTaskLists+0x70>)
 801a7b8:	f7fe fe4e 	bl	8019458 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801a7bc:	480b      	ldr	r0, [pc, #44]	; (801a7ec <prvInitialiseTaskLists+0x74>)
 801a7be:	f7fe fe4b 	bl	8019458 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801a7c2:	4b0b      	ldr	r3, [pc, #44]	; (801a7f0 <prvInitialiseTaskLists+0x78>)
 801a7c4:	4a05      	ldr	r2, [pc, #20]	; (801a7dc <prvInitialiseTaskLists+0x64>)
 801a7c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801a7c8:	4b0a      	ldr	r3, [pc, #40]	; (801a7f4 <prvInitialiseTaskLists+0x7c>)
 801a7ca:	4a05      	ldr	r2, [pc, #20]	; (801a7e0 <prvInitialiseTaskLists+0x68>)
 801a7cc:	601a      	str	r2, [r3, #0]
}
 801a7ce:	bf00      	nop
 801a7d0:	3708      	adds	r7, #8
 801a7d2:	46bd      	mov	sp, r7
 801a7d4:	bd80      	pop	{r7, pc}
 801a7d6:	bf00      	nop
 801a7d8:	20000a28 	.word	0x20000a28
 801a7dc:	20000ab4 	.word	0x20000ab4
 801a7e0:	20000ac8 	.word	0x20000ac8
 801a7e4:	20000ae4 	.word	0x20000ae4
 801a7e8:	20000af8 	.word	0x20000af8
 801a7ec:	20000b10 	.word	0x20000b10
 801a7f0:	20000adc 	.word	0x20000adc
 801a7f4:	20000ae0 	.word	0x20000ae0

0801a7f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801a7f8:	b580      	push	{r7, lr}
 801a7fa:	b082      	sub	sp, #8
 801a7fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801a7fe:	e019      	b.n	801a834 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801a800:	f000 fbb0 	bl	801af64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a804:	4b10      	ldr	r3, [pc, #64]	; (801a848 <prvCheckTasksWaitingTermination+0x50>)
 801a806:	68db      	ldr	r3, [r3, #12]
 801a808:	68db      	ldr	r3, [r3, #12]
 801a80a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a80c:	687b      	ldr	r3, [r7, #4]
 801a80e:	3304      	adds	r3, #4
 801a810:	4618      	mov	r0, r3
 801a812:	f7fe feab 	bl	801956c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801a816:	4b0d      	ldr	r3, [pc, #52]	; (801a84c <prvCheckTasksWaitingTermination+0x54>)
 801a818:	681b      	ldr	r3, [r3, #0]
 801a81a:	3b01      	subs	r3, #1
 801a81c:	4a0b      	ldr	r2, [pc, #44]	; (801a84c <prvCheckTasksWaitingTermination+0x54>)
 801a81e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801a820:	4b0b      	ldr	r3, [pc, #44]	; (801a850 <prvCheckTasksWaitingTermination+0x58>)
 801a822:	681b      	ldr	r3, [r3, #0]
 801a824:	3b01      	subs	r3, #1
 801a826:	4a0a      	ldr	r2, [pc, #40]	; (801a850 <prvCheckTasksWaitingTermination+0x58>)
 801a828:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801a82a:	f000 fbcb 	bl	801afc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801a82e:	6878      	ldr	r0, [r7, #4]
 801a830:	f000 f810 	bl	801a854 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801a834:	4b06      	ldr	r3, [pc, #24]	; (801a850 <prvCheckTasksWaitingTermination+0x58>)
 801a836:	681b      	ldr	r3, [r3, #0]
 801a838:	2b00      	cmp	r3, #0
 801a83a:	d1e1      	bne.n	801a800 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801a83c:	bf00      	nop
 801a83e:	bf00      	nop
 801a840:	3708      	adds	r7, #8
 801a842:	46bd      	mov	sp, r7
 801a844:	bd80      	pop	{r7, pc}
 801a846:	bf00      	nop
 801a848:	20000af8 	.word	0x20000af8
 801a84c:	20000b24 	.word	0x20000b24
 801a850:	20000b0c 	.word	0x20000b0c

0801a854 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801a854:	b580      	push	{r7, lr}
 801a856:	b082      	sub	sp, #8
 801a858:	af00      	add	r7, sp, #0
 801a85a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801a85c:	687b      	ldr	r3, [r7, #4]
 801a85e:	334c      	adds	r3, #76	; 0x4c
 801a860:	4618      	mov	r0, r3
 801a862:	f000 ff8f 	bl	801b784 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 801a866:	687b      	ldr	r3, [r7, #4]
 801a868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a86a:	4618      	mov	r0, r3
 801a86c:	f000 fd68 	bl	801b340 <vPortFree>
			vPortFree( pxTCB );
 801a870:	6878      	ldr	r0, [r7, #4]
 801a872:	f000 fd65 	bl	801b340 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801a876:	bf00      	nop
 801a878:	3708      	adds	r7, #8
 801a87a:	46bd      	mov	sp, r7
 801a87c:	bd80      	pop	{r7, pc}
	...

0801a880 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801a880:	b480      	push	{r7}
 801a882:	b083      	sub	sp, #12
 801a884:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a886:	4b0c      	ldr	r3, [pc, #48]	; (801a8b8 <prvResetNextTaskUnblockTime+0x38>)
 801a888:	681b      	ldr	r3, [r3, #0]
 801a88a:	681b      	ldr	r3, [r3, #0]
 801a88c:	2b00      	cmp	r3, #0
 801a88e:	d104      	bne.n	801a89a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801a890:	4b0a      	ldr	r3, [pc, #40]	; (801a8bc <prvResetNextTaskUnblockTime+0x3c>)
 801a892:	f04f 32ff 	mov.w	r2, #4294967295
 801a896:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801a898:	e008      	b.n	801a8ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a89a:	4b07      	ldr	r3, [pc, #28]	; (801a8b8 <prvResetNextTaskUnblockTime+0x38>)
 801a89c:	681b      	ldr	r3, [r3, #0]
 801a89e:	68db      	ldr	r3, [r3, #12]
 801a8a0:	68db      	ldr	r3, [r3, #12]
 801a8a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801a8a4:	687b      	ldr	r3, [r7, #4]
 801a8a6:	685b      	ldr	r3, [r3, #4]
 801a8a8:	4a04      	ldr	r2, [pc, #16]	; (801a8bc <prvResetNextTaskUnblockTime+0x3c>)
 801a8aa:	6013      	str	r3, [r2, #0]
}
 801a8ac:	bf00      	nop
 801a8ae:	370c      	adds	r7, #12
 801a8b0:	46bd      	mov	sp, r7
 801a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8b6:	4770      	bx	lr
 801a8b8:	20000adc 	.word	0x20000adc
 801a8bc:	20000b44 	.word	0x20000b44

0801a8c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801a8c0:	b480      	push	{r7}
 801a8c2:	b083      	sub	sp, #12
 801a8c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801a8c6:	4b0b      	ldr	r3, [pc, #44]	; (801a8f4 <xTaskGetSchedulerState+0x34>)
 801a8c8:	681b      	ldr	r3, [r3, #0]
 801a8ca:	2b00      	cmp	r3, #0
 801a8cc:	d102      	bne.n	801a8d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801a8ce:	2301      	movs	r3, #1
 801a8d0:	607b      	str	r3, [r7, #4]
 801a8d2:	e008      	b.n	801a8e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a8d4:	4b08      	ldr	r3, [pc, #32]	; (801a8f8 <xTaskGetSchedulerState+0x38>)
 801a8d6:	681b      	ldr	r3, [r3, #0]
 801a8d8:	2b00      	cmp	r3, #0
 801a8da:	d102      	bne.n	801a8e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801a8dc:	2302      	movs	r3, #2
 801a8de:	607b      	str	r3, [r7, #4]
 801a8e0:	e001      	b.n	801a8e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801a8e2:	2300      	movs	r3, #0
 801a8e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801a8e6:	687b      	ldr	r3, [r7, #4]
	}
 801a8e8:	4618      	mov	r0, r3
 801a8ea:	370c      	adds	r7, #12
 801a8ec:	46bd      	mov	sp, r7
 801a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8f2:	4770      	bx	lr
 801a8f4:	20000b30 	.word	0x20000b30
 801a8f8:	20000b4c 	.word	0x20000b4c

0801a8fc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801a8fc:	b580      	push	{r7, lr}
 801a8fe:	b084      	sub	sp, #16
 801a900:	af00      	add	r7, sp, #0
 801a902:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801a904:	687b      	ldr	r3, [r7, #4]
 801a906:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801a908:	2300      	movs	r3, #0
 801a90a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801a90c:	687b      	ldr	r3, [r7, #4]
 801a90e:	2b00      	cmp	r3, #0
 801a910:	d05e      	beq.n	801a9d0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801a912:	68bb      	ldr	r3, [r7, #8]
 801a914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a916:	4b31      	ldr	r3, [pc, #196]	; (801a9dc <xTaskPriorityInherit+0xe0>)
 801a918:	681b      	ldr	r3, [r3, #0]
 801a91a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a91c:	429a      	cmp	r2, r3
 801a91e:	d24e      	bcs.n	801a9be <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801a920:	68bb      	ldr	r3, [r7, #8]
 801a922:	699b      	ldr	r3, [r3, #24]
 801a924:	2b00      	cmp	r3, #0
 801a926:	db06      	blt.n	801a936 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a928:	4b2c      	ldr	r3, [pc, #176]	; (801a9dc <xTaskPriorityInherit+0xe0>)
 801a92a:	681b      	ldr	r3, [r3, #0]
 801a92c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a92e:	f1c3 0207 	rsb	r2, r3, #7
 801a932:	68bb      	ldr	r3, [r7, #8]
 801a934:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801a936:	68bb      	ldr	r3, [r7, #8]
 801a938:	6959      	ldr	r1, [r3, #20]
 801a93a:	68bb      	ldr	r3, [r7, #8]
 801a93c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a93e:	4613      	mov	r3, r2
 801a940:	009b      	lsls	r3, r3, #2
 801a942:	4413      	add	r3, r2
 801a944:	009b      	lsls	r3, r3, #2
 801a946:	4a26      	ldr	r2, [pc, #152]	; (801a9e0 <xTaskPriorityInherit+0xe4>)
 801a948:	4413      	add	r3, r2
 801a94a:	4299      	cmp	r1, r3
 801a94c:	d12f      	bne.n	801a9ae <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a94e:	68bb      	ldr	r3, [r7, #8]
 801a950:	3304      	adds	r3, #4
 801a952:	4618      	mov	r0, r3
 801a954:	f7fe fe0a 	bl	801956c <uxListRemove>
 801a958:	4603      	mov	r3, r0
 801a95a:	2b00      	cmp	r3, #0
 801a95c:	d10a      	bne.n	801a974 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 801a95e:	68bb      	ldr	r3, [r7, #8]
 801a960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a962:	2201      	movs	r2, #1
 801a964:	fa02 f303 	lsl.w	r3, r2, r3
 801a968:	43da      	mvns	r2, r3
 801a96a:	4b1e      	ldr	r3, [pc, #120]	; (801a9e4 <xTaskPriorityInherit+0xe8>)
 801a96c:	681b      	ldr	r3, [r3, #0]
 801a96e:	4013      	ands	r3, r2
 801a970:	4a1c      	ldr	r2, [pc, #112]	; (801a9e4 <xTaskPriorityInherit+0xe8>)
 801a972:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801a974:	4b19      	ldr	r3, [pc, #100]	; (801a9dc <xTaskPriorityInherit+0xe0>)
 801a976:	681b      	ldr	r3, [r3, #0]
 801a978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a97a:	68bb      	ldr	r3, [r7, #8]
 801a97c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801a97e:	68bb      	ldr	r3, [r7, #8]
 801a980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a982:	2201      	movs	r2, #1
 801a984:	409a      	lsls	r2, r3
 801a986:	4b17      	ldr	r3, [pc, #92]	; (801a9e4 <xTaskPriorityInherit+0xe8>)
 801a988:	681b      	ldr	r3, [r3, #0]
 801a98a:	4313      	orrs	r3, r2
 801a98c:	4a15      	ldr	r2, [pc, #84]	; (801a9e4 <xTaskPriorityInherit+0xe8>)
 801a98e:	6013      	str	r3, [r2, #0]
 801a990:	68bb      	ldr	r3, [r7, #8]
 801a992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a994:	4613      	mov	r3, r2
 801a996:	009b      	lsls	r3, r3, #2
 801a998:	4413      	add	r3, r2
 801a99a:	009b      	lsls	r3, r3, #2
 801a99c:	4a10      	ldr	r2, [pc, #64]	; (801a9e0 <xTaskPriorityInherit+0xe4>)
 801a99e:	441a      	add	r2, r3
 801a9a0:	68bb      	ldr	r3, [r7, #8]
 801a9a2:	3304      	adds	r3, #4
 801a9a4:	4619      	mov	r1, r3
 801a9a6:	4610      	mov	r0, r2
 801a9a8:	f7fe fd83 	bl	80194b2 <vListInsertEnd>
 801a9ac:	e004      	b.n	801a9b8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801a9ae:	4b0b      	ldr	r3, [pc, #44]	; (801a9dc <xTaskPriorityInherit+0xe0>)
 801a9b0:	681b      	ldr	r3, [r3, #0]
 801a9b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a9b4:	68bb      	ldr	r3, [r7, #8]
 801a9b6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801a9b8:	2301      	movs	r3, #1
 801a9ba:	60fb      	str	r3, [r7, #12]
 801a9bc:	e008      	b.n	801a9d0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801a9be:	68bb      	ldr	r3, [r7, #8]
 801a9c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a9c2:	4b06      	ldr	r3, [pc, #24]	; (801a9dc <xTaskPriorityInherit+0xe0>)
 801a9c4:	681b      	ldr	r3, [r3, #0]
 801a9c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a9c8:	429a      	cmp	r2, r3
 801a9ca:	d201      	bcs.n	801a9d0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801a9cc:	2301      	movs	r3, #1
 801a9ce:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801a9d0:	68fb      	ldr	r3, [r7, #12]
	}
 801a9d2:	4618      	mov	r0, r3
 801a9d4:	3710      	adds	r7, #16
 801a9d6:	46bd      	mov	sp, r7
 801a9d8:	bd80      	pop	{r7, pc}
 801a9da:	bf00      	nop
 801a9dc:	20000a24 	.word	0x20000a24
 801a9e0:	20000a28 	.word	0x20000a28
 801a9e4:	20000b2c 	.word	0x20000b2c

0801a9e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801a9e8:	b580      	push	{r7, lr}
 801a9ea:	b086      	sub	sp, #24
 801a9ec:	af00      	add	r7, sp, #0
 801a9ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801a9f0:	687b      	ldr	r3, [r7, #4]
 801a9f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801a9f4:	2300      	movs	r3, #0
 801a9f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801a9f8:	687b      	ldr	r3, [r7, #4]
 801a9fa:	2b00      	cmp	r3, #0
 801a9fc:	d06e      	beq.n	801aadc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801a9fe:	4b3a      	ldr	r3, [pc, #232]	; (801aae8 <xTaskPriorityDisinherit+0x100>)
 801aa00:	681b      	ldr	r3, [r3, #0]
 801aa02:	693a      	ldr	r2, [r7, #16]
 801aa04:	429a      	cmp	r2, r3
 801aa06:	d00a      	beq.n	801aa1e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801aa08:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aa0c:	f383 8811 	msr	BASEPRI, r3
 801aa10:	f3bf 8f6f 	isb	sy
 801aa14:	f3bf 8f4f 	dsb	sy
 801aa18:	60fb      	str	r3, [r7, #12]
}
 801aa1a:	bf00      	nop
 801aa1c:	e7fe      	b.n	801aa1c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801aa1e:	693b      	ldr	r3, [r7, #16]
 801aa20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801aa22:	2b00      	cmp	r3, #0
 801aa24:	d10a      	bne.n	801aa3c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801aa26:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aa2a:	f383 8811 	msr	BASEPRI, r3
 801aa2e:	f3bf 8f6f 	isb	sy
 801aa32:	f3bf 8f4f 	dsb	sy
 801aa36:	60bb      	str	r3, [r7, #8]
}
 801aa38:	bf00      	nop
 801aa3a:	e7fe      	b.n	801aa3a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801aa3c:	693b      	ldr	r3, [r7, #16]
 801aa3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801aa40:	1e5a      	subs	r2, r3, #1
 801aa42:	693b      	ldr	r3, [r7, #16]
 801aa44:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801aa46:	693b      	ldr	r3, [r7, #16]
 801aa48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aa4a:	693b      	ldr	r3, [r7, #16]
 801aa4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801aa4e:	429a      	cmp	r2, r3
 801aa50:	d044      	beq.n	801aadc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801aa52:	693b      	ldr	r3, [r7, #16]
 801aa54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801aa56:	2b00      	cmp	r3, #0
 801aa58:	d140      	bne.n	801aadc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801aa5a:	693b      	ldr	r3, [r7, #16]
 801aa5c:	3304      	adds	r3, #4
 801aa5e:	4618      	mov	r0, r3
 801aa60:	f7fe fd84 	bl	801956c <uxListRemove>
 801aa64:	4603      	mov	r3, r0
 801aa66:	2b00      	cmp	r3, #0
 801aa68:	d115      	bne.n	801aa96 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801aa6a:	693b      	ldr	r3, [r7, #16]
 801aa6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aa6e:	491f      	ldr	r1, [pc, #124]	; (801aaec <xTaskPriorityDisinherit+0x104>)
 801aa70:	4613      	mov	r3, r2
 801aa72:	009b      	lsls	r3, r3, #2
 801aa74:	4413      	add	r3, r2
 801aa76:	009b      	lsls	r3, r3, #2
 801aa78:	440b      	add	r3, r1
 801aa7a:	681b      	ldr	r3, [r3, #0]
 801aa7c:	2b00      	cmp	r3, #0
 801aa7e:	d10a      	bne.n	801aa96 <xTaskPriorityDisinherit+0xae>
 801aa80:	693b      	ldr	r3, [r7, #16]
 801aa82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aa84:	2201      	movs	r2, #1
 801aa86:	fa02 f303 	lsl.w	r3, r2, r3
 801aa8a:	43da      	mvns	r2, r3
 801aa8c:	4b18      	ldr	r3, [pc, #96]	; (801aaf0 <xTaskPriorityDisinherit+0x108>)
 801aa8e:	681b      	ldr	r3, [r3, #0]
 801aa90:	4013      	ands	r3, r2
 801aa92:	4a17      	ldr	r2, [pc, #92]	; (801aaf0 <xTaskPriorityDisinherit+0x108>)
 801aa94:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801aa96:	693b      	ldr	r3, [r7, #16]
 801aa98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801aa9a:	693b      	ldr	r3, [r7, #16]
 801aa9c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801aa9e:	693b      	ldr	r3, [r7, #16]
 801aaa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aaa2:	f1c3 0207 	rsb	r2, r3, #7
 801aaa6:	693b      	ldr	r3, [r7, #16]
 801aaa8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801aaaa:	693b      	ldr	r3, [r7, #16]
 801aaac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aaae:	2201      	movs	r2, #1
 801aab0:	409a      	lsls	r2, r3
 801aab2:	4b0f      	ldr	r3, [pc, #60]	; (801aaf0 <xTaskPriorityDisinherit+0x108>)
 801aab4:	681b      	ldr	r3, [r3, #0]
 801aab6:	4313      	orrs	r3, r2
 801aab8:	4a0d      	ldr	r2, [pc, #52]	; (801aaf0 <xTaskPriorityDisinherit+0x108>)
 801aaba:	6013      	str	r3, [r2, #0]
 801aabc:	693b      	ldr	r3, [r7, #16]
 801aabe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aac0:	4613      	mov	r3, r2
 801aac2:	009b      	lsls	r3, r3, #2
 801aac4:	4413      	add	r3, r2
 801aac6:	009b      	lsls	r3, r3, #2
 801aac8:	4a08      	ldr	r2, [pc, #32]	; (801aaec <xTaskPriorityDisinherit+0x104>)
 801aaca:	441a      	add	r2, r3
 801aacc:	693b      	ldr	r3, [r7, #16]
 801aace:	3304      	adds	r3, #4
 801aad0:	4619      	mov	r1, r3
 801aad2:	4610      	mov	r0, r2
 801aad4:	f7fe fced 	bl	80194b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801aad8:	2301      	movs	r3, #1
 801aada:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801aadc:	697b      	ldr	r3, [r7, #20]
	}
 801aade:	4618      	mov	r0, r3
 801aae0:	3718      	adds	r7, #24
 801aae2:	46bd      	mov	sp, r7
 801aae4:	bd80      	pop	{r7, pc}
 801aae6:	bf00      	nop
 801aae8:	20000a24 	.word	0x20000a24
 801aaec:	20000a28 	.word	0x20000a28
 801aaf0:	20000b2c 	.word	0x20000b2c

0801aaf4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801aaf4:	b580      	push	{r7, lr}
 801aaf6:	b088      	sub	sp, #32
 801aaf8:	af00      	add	r7, sp, #0
 801aafa:	6078      	str	r0, [r7, #4]
 801aafc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801aafe:	687b      	ldr	r3, [r7, #4]
 801ab00:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801ab02:	2301      	movs	r3, #1
 801ab04:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801ab06:	687b      	ldr	r3, [r7, #4]
 801ab08:	2b00      	cmp	r3, #0
 801ab0a:	d077      	beq.n	801abfc <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801ab0c:	69bb      	ldr	r3, [r7, #24]
 801ab0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ab10:	2b00      	cmp	r3, #0
 801ab12:	d10a      	bne.n	801ab2a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 801ab14:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ab18:	f383 8811 	msr	BASEPRI, r3
 801ab1c:	f3bf 8f6f 	isb	sy
 801ab20:	f3bf 8f4f 	dsb	sy
 801ab24:	60fb      	str	r3, [r7, #12]
}
 801ab26:	bf00      	nop
 801ab28:	e7fe      	b.n	801ab28 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801ab2a:	69bb      	ldr	r3, [r7, #24]
 801ab2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ab2e:	683a      	ldr	r2, [r7, #0]
 801ab30:	429a      	cmp	r2, r3
 801ab32:	d902      	bls.n	801ab3a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801ab34:	683b      	ldr	r3, [r7, #0]
 801ab36:	61fb      	str	r3, [r7, #28]
 801ab38:	e002      	b.n	801ab40 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801ab3a:	69bb      	ldr	r3, [r7, #24]
 801ab3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ab3e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801ab40:	69bb      	ldr	r3, [r7, #24]
 801ab42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ab44:	69fa      	ldr	r2, [r7, #28]
 801ab46:	429a      	cmp	r2, r3
 801ab48:	d058      	beq.n	801abfc <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801ab4a:	69bb      	ldr	r3, [r7, #24]
 801ab4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ab4e:	697a      	ldr	r2, [r7, #20]
 801ab50:	429a      	cmp	r2, r3
 801ab52:	d153      	bne.n	801abfc <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801ab54:	4b2b      	ldr	r3, [pc, #172]	; (801ac04 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 801ab56:	681b      	ldr	r3, [r3, #0]
 801ab58:	69ba      	ldr	r2, [r7, #24]
 801ab5a:	429a      	cmp	r2, r3
 801ab5c:	d10a      	bne.n	801ab74 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801ab5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ab62:	f383 8811 	msr	BASEPRI, r3
 801ab66:	f3bf 8f6f 	isb	sy
 801ab6a:	f3bf 8f4f 	dsb	sy
 801ab6e:	60bb      	str	r3, [r7, #8]
}
 801ab70:	bf00      	nop
 801ab72:	e7fe      	b.n	801ab72 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801ab74:	69bb      	ldr	r3, [r7, #24]
 801ab76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ab78:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801ab7a:	69bb      	ldr	r3, [r7, #24]
 801ab7c:	69fa      	ldr	r2, [r7, #28]
 801ab7e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801ab80:	69bb      	ldr	r3, [r7, #24]
 801ab82:	699b      	ldr	r3, [r3, #24]
 801ab84:	2b00      	cmp	r3, #0
 801ab86:	db04      	blt.n	801ab92 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801ab88:	69fb      	ldr	r3, [r7, #28]
 801ab8a:	f1c3 0207 	rsb	r2, r3, #7
 801ab8e:	69bb      	ldr	r3, [r7, #24]
 801ab90:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801ab92:	69bb      	ldr	r3, [r7, #24]
 801ab94:	6959      	ldr	r1, [r3, #20]
 801ab96:	693a      	ldr	r2, [r7, #16]
 801ab98:	4613      	mov	r3, r2
 801ab9a:	009b      	lsls	r3, r3, #2
 801ab9c:	4413      	add	r3, r2
 801ab9e:	009b      	lsls	r3, r3, #2
 801aba0:	4a19      	ldr	r2, [pc, #100]	; (801ac08 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801aba2:	4413      	add	r3, r2
 801aba4:	4299      	cmp	r1, r3
 801aba6:	d129      	bne.n	801abfc <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801aba8:	69bb      	ldr	r3, [r7, #24]
 801abaa:	3304      	adds	r3, #4
 801abac:	4618      	mov	r0, r3
 801abae:	f7fe fcdd 	bl	801956c <uxListRemove>
 801abb2:	4603      	mov	r3, r0
 801abb4:	2b00      	cmp	r3, #0
 801abb6:	d10a      	bne.n	801abce <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 801abb8:	69bb      	ldr	r3, [r7, #24]
 801abba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801abbc:	2201      	movs	r2, #1
 801abbe:	fa02 f303 	lsl.w	r3, r2, r3
 801abc2:	43da      	mvns	r2, r3
 801abc4:	4b11      	ldr	r3, [pc, #68]	; (801ac0c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801abc6:	681b      	ldr	r3, [r3, #0]
 801abc8:	4013      	ands	r3, r2
 801abca:	4a10      	ldr	r2, [pc, #64]	; (801ac0c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801abcc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801abce:	69bb      	ldr	r3, [r7, #24]
 801abd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801abd2:	2201      	movs	r2, #1
 801abd4:	409a      	lsls	r2, r3
 801abd6:	4b0d      	ldr	r3, [pc, #52]	; (801ac0c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801abd8:	681b      	ldr	r3, [r3, #0]
 801abda:	4313      	orrs	r3, r2
 801abdc:	4a0b      	ldr	r2, [pc, #44]	; (801ac0c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801abde:	6013      	str	r3, [r2, #0]
 801abe0:	69bb      	ldr	r3, [r7, #24]
 801abe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801abe4:	4613      	mov	r3, r2
 801abe6:	009b      	lsls	r3, r3, #2
 801abe8:	4413      	add	r3, r2
 801abea:	009b      	lsls	r3, r3, #2
 801abec:	4a06      	ldr	r2, [pc, #24]	; (801ac08 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801abee:	441a      	add	r2, r3
 801abf0:	69bb      	ldr	r3, [r7, #24]
 801abf2:	3304      	adds	r3, #4
 801abf4:	4619      	mov	r1, r3
 801abf6:	4610      	mov	r0, r2
 801abf8:	f7fe fc5b 	bl	80194b2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801abfc:	bf00      	nop
 801abfe:	3720      	adds	r7, #32
 801ac00:	46bd      	mov	sp, r7
 801ac02:	bd80      	pop	{r7, pc}
 801ac04:	20000a24 	.word	0x20000a24
 801ac08:	20000a28 	.word	0x20000a28
 801ac0c:	20000b2c 	.word	0x20000b2c

0801ac10 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801ac10:	b480      	push	{r7}
 801ac12:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801ac14:	4b07      	ldr	r3, [pc, #28]	; (801ac34 <pvTaskIncrementMutexHeldCount+0x24>)
 801ac16:	681b      	ldr	r3, [r3, #0]
 801ac18:	2b00      	cmp	r3, #0
 801ac1a:	d004      	beq.n	801ac26 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801ac1c:	4b05      	ldr	r3, [pc, #20]	; (801ac34 <pvTaskIncrementMutexHeldCount+0x24>)
 801ac1e:	681b      	ldr	r3, [r3, #0]
 801ac20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801ac22:	3201      	adds	r2, #1
 801ac24:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 801ac26:	4b03      	ldr	r3, [pc, #12]	; (801ac34 <pvTaskIncrementMutexHeldCount+0x24>)
 801ac28:	681b      	ldr	r3, [r3, #0]
	}
 801ac2a:	4618      	mov	r0, r3
 801ac2c:	46bd      	mov	sp, r7
 801ac2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac32:	4770      	bx	lr
 801ac34:	20000a24 	.word	0x20000a24

0801ac38 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801ac38:	b580      	push	{r7, lr}
 801ac3a:	b084      	sub	sp, #16
 801ac3c:	af00      	add	r7, sp, #0
 801ac3e:	6078      	str	r0, [r7, #4]
 801ac40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801ac42:	4b2b      	ldr	r3, [pc, #172]	; (801acf0 <prvAddCurrentTaskToDelayedList+0xb8>)
 801ac44:	681b      	ldr	r3, [r3, #0]
 801ac46:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 801ac48:	4b2a      	ldr	r3, [pc, #168]	; (801acf4 <prvAddCurrentTaskToDelayedList+0xbc>)
 801ac4a:	681b      	ldr	r3, [r3, #0]
 801ac4c:	2200      	movs	r2, #0
 801ac4e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801ac52:	4b28      	ldr	r3, [pc, #160]	; (801acf4 <prvAddCurrentTaskToDelayedList+0xbc>)
 801ac54:	681b      	ldr	r3, [r3, #0]
 801ac56:	3304      	adds	r3, #4
 801ac58:	4618      	mov	r0, r3
 801ac5a:	f7fe fc87 	bl	801956c <uxListRemove>
 801ac5e:	4603      	mov	r3, r0
 801ac60:	2b00      	cmp	r3, #0
 801ac62:	d10b      	bne.n	801ac7c <prvAddCurrentTaskToDelayedList+0x44>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801ac64:	4b23      	ldr	r3, [pc, #140]	; (801acf4 <prvAddCurrentTaskToDelayedList+0xbc>)
 801ac66:	681b      	ldr	r3, [r3, #0]
 801ac68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ac6a:	2201      	movs	r2, #1
 801ac6c:	fa02 f303 	lsl.w	r3, r2, r3
 801ac70:	43da      	mvns	r2, r3
 801ac72:	4b21      	ldr	r3, [pc, #132]	; (801acf8 <prvAddCurrentTaskToDelayedList+0xc0>)
 801ac74:	681b      	ldr	r3, [r3, #0]
 801ac76:	4013      	ands	r3, r2
 801ac78:	4a1f      	ldr	r2, [pc, #124]	; (801acf8 <prvAddCurrentTaskToDelayedList+0xc0>)
 801ac7a:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801ac7c:	687b      	ldr	r3, [r7, #4]
 801ac7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ac82:	d10a      	bne.n	801ac9a <prvAddCurrentTaskToDelayedList+0x62>
 801ac84:	683b      	ldr	r3, [r7, #0]
 801ac86:	2b00      	cmp	r3, #0
 801ac88:	d007      	beq.n	801ac9a <prvAddCurrentTaskToDelayedList+0x62>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801ac8a:	4b1a      	ldr	r3, [pc, #104]	; (801acf4 <prvAddCurrentTaskToDelayedList+0xbc>)
 801ac8c:	681b      	ldr	r3, [r3, #0]
 801ac8e:	3304      	adds	r3, #4
 801ac90:	4619      	mov	r1, r3
 801ac92:	481a      	ldr	r0, [pc, #104]	; (801acfc <prvAddCurrentTaskToDelayedList+0xc4>)
 801ac94:	f7fe fc0d 	bl	80194b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801ac98:	e026      	b.n	801ace8 <prvAddCurrentTaskToDelayedList+0xb0>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801ac9a:	68fa      	ldr	r2, [r7, #12]
 801ac9c:	687b      	ldr	r3, [r7, #4]
 801ac9e:	4413      	add	r3, r2
 801aca0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801aca2:	4b14      	ldr	r3, [pc, #80]	; (801acf4 <prvAddCurrentTaskToDelayedList+0xbc>)
 801aca4:	681b      	ldr	r3, [r3, #0]
 801aca6:	68ba      	ldr	r2, [r7, #8]
 801aca8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801acaa:	68ba      	ldr	r2, [r7, #8]
 801acac:	68fb      	ldr	r3, [r7, #12]
 801acae:	429a      	cmp	r2, r3
 801acb0:	d209      	bcs.n	801acc6 <prvAddCurrentTaskToDelayedList+0x8e>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801acb2:	4b13      	ldr	r3, [pc, #76]	; (801ad00 <prvAddCurrentTaskToDelayedList+0xc8>)
 801acb4:	681a      	ldr	r2, [r3, #0]
 801acb6:	4b0f      	ldr	r3, [pc, #60]	; (801acf4 <prvAddCurrentTaskToDelayedList+0xbc>)
 801acb8:	681b      	ldr	r3, [r3, #0]
 801acba:	3304      	adds	r3, #4
 801acbc:	4619      	mov	r1, r3
 801acbe:	4610      	mov	r0, r2
 801acc0:	f7fe fc1b 	bl	80194fa <vListInsert>
}
 801acc4:	e010      	b.n	801ace8 <prvAddCurrentTaskToDelayedList+0xb0>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801acc6:	4b0f      	ldr	r3, [pc, #60]	; (801ad04 <prvAddCurrentTaskToDelayedList+0xcc>)
 801acc8:	681a      	ldr	r2, [r3, #0]
 801acca:	4b0a      	ldr	r3, [pc, #40]	; (801acf4 <prvAddCurrentTaskToDelayedList+0xbc>)
 801accc:	681b      	ldr	r3, [r3, #0]
 801acce:	3304      	adds	r3, #4
 801acd0:	4619      	mov	r1, r3
 801acd2:	4610      	mov	r0, r2
 801acd4:	f7fe fc11 	bl	80194fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801acd8:	4b0b      	ldr	r3, [pc, #44]	; (801ad08 <prvAddCurrentTaskToDelayedList+0xd0>)
 801acda:	681b      	ldr	r3, [r3, #0]
 801acdc:	68ba      	ldr	r2, [r7, #8]
 801acde:	429a      	cmp	r2, r3
 801ace0:	d202      	bcs.n	801ace8 <prvAddCurrentTaskToDelayedList+0xb0>
					xNextTaskUnblockTime = xTimeToWake;
 801ace2:	4a09      	ldr	r2, [pc, #36]	; (801ad08 <prvAddCurrentTaskToDelayedList+0xd0>)
 801ace4:	68bb      	ldr	r3, [r7, #8]
 801ace6:	6013      	str	r3, [r2, #0]
}
 801ace8:	bf00      	nop
 801acea:	3710      	adds	r7, #16
 801acec:	46bd      	mov	sp, r7
 801acee:	bd80      	pop	{r7, pc}
 801acf0:	20000b28 	.word	0x20000b28
 801acf4:	20000a24 	.word	0x20000a24
 801acf8:	20000b2c 	.word	0x20000b2c
 801acfc:	20000b10 	.word	0x20000b10
 801ad00:	20000ae0 	.word	0x20000ae0
 801ad04:	20000adc 	.word	0x20000adc
 801ad08:	20000b44 	.word	0x20000b44

0801ad0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801ad0c:	b480      	push	{r7}
 801ad0e:	b085      	sub	sp, #20
 801ad10:	af00      	add	r7, sp, #0
 801ad12:	60f8      	str	r0, [r7, #12]
 801ad14:	60b9      	str	r1, [r7, #8]
 801ad16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801ad18:	68fb      	ldr	r3, [r7, #12]
 801ad1a:	3b04      	subs	r3, #4
 801ad1c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801ad1e:	68fb      	ldr	r3, [r7, #12]
 801ad20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801ad24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801ad26:	68fb      	ldr	r3, [r7, #12]
 801ad28:	3b04      	subs	r3, #4
 801ad2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801ad2c:	68bb      	ldr	r3, [r7, #8]
 801ad2e:	f023 0201 	bic.w	r2, r3, #1
 801ad32:	68fb      	ldr	r3, [r7, #12]
 801ad34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801ad36:	68fb      	ldr	r3, [r7, #12]
 801ad38:	3b04      	subs	r3, #4
 801ad3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801ad3c:	4a0c      	ldr	r2, [pc, #48]	; (801ad70 <pxPortInitialiseStack+0x64>)
 801ad3e:	68fb      	ldr	r3, [r7, #12]
 801ad40:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801ad42:	68fb      	ldr	r3, [r7, #12]
 801ad44:	3b14      	subs	r3, #20
 801ad46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801ad48:	687a      	ldr	r2, [r7, #4]
 801ad4a:	68fb      	ldr	r3, [r7, #12]
 801ad4c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801ad4e:	68fb      	ldr	r3, [r7, #12]
 801ad50:	3b04      	subs	r3, #4
 801ad52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801ad54:	68fb      	ldr	r3, [r7, #12]
 801ad56:	f06f 0202 	mvn.w	r2, #2
 801ad5a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801ad5c:	68fb      	ldr	r3, [r7, #12]
 801ad5e:	3b20      	subs	r3, #32
 801ad60:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801ad62:	68fb      	ldr	r3, [r7, #12]
}
 801ad64:	4618      	mov	r0, r3
 801ad66:	3714      	adds	r7, #20
 801ad68:	46bd      	mov	sp, r7
 801ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad6e:	4770      	bx	lr
 801ad70:	0801ad75 	.word	0x0801ad75

0801ad74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801ad74:	b480      	push	{r7}
 801ad76:	b085      	sub	sp, #20
 801ad78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801ad7a:	2300      	movs	r3, #0
 801ad7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801ad7e:	4b12      	ldr	r3, [pc, #72]	; (801adc8 <prvTaskExitError+0x54>)
 801ad80:	681b      	ldr	r3, [r3, #0]
 801ad82:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ad86:	d00a      	beq.n	801ad9e <prvTaskExitError+0x2a>
	__asm volatile
 801ad88:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ad8c:	f383 8811 	msr	BASEPRI, r3
 801ad90:	f3bf 8f6f 	isb	sy
 801ad94:	f3bf 8f4f 	dsb	sy
 801ad98:	60fb      	str	r3, [r7, #12]
}
 801ad9a:	bf00      	nop
 801ad9c:	e7fe      	b.n	801ad9c <prvTaskExitError+0x28>
	__asm volatile
 801ad9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ada2:	f383 8811 	msr	BASEPRI, r3
 801ada6:	f3bf 8f6f 	isb	sy
 801adaa:	f3bf 8f4f 	dsb	sy
 801adae:	60bb      	str	r3, [r7, #8]
}
 801adb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801adb2:	bf00      	nop
 801adb4:	687b      	ldr	r3, [r7, #4]
 801adb6:	2b00      	cmp	r3, #0
 801adb8:	d0fc      	beq.n	801adb4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801adba:	bf00      	nop
 801adbc:	bf00      	nop
 801adbe:	3714      	adds	r7, #20
 801adc0:	46bd      	mov	sp, r7
 801adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adc6:	4770      	bx	lr
 801adc8:	20000010 	.word	0x20000010
 801adcc:	00000000 	.word	0x00000000

0801add0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801add0:	4b07      	ldr	r3, [pc, #28]	; (801adf0 <pxCurrentTCBConst2>)
 801add2:	6819      	ldr	r1, [r3, #0]
 801add4:	6808      	ldr	r0, [r1, #0]
 801add6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801adda:	f380 8809 	msr	PSP, r0
 801adde:	f3bf 8f6f 	isb	sy
 801ade2:	f04f 0000 	mov.w	r0, #0
 801ade6:	f380 8811 	msr	BASEPRI, r0
 801adea:	4770      	bx	lr
 801adec:	f3af 8000 	nop.w

0801adf0 <pxCurrentTCBConst2>:
 801adf0:	20000a24 	.word	0x20000a24
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801adf4:	bf00      	nop
 801adf6:	bf00      	nop

0801adf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801adf8:	4808      	ldr	r0, [pc, #32]	; (801ae1c <prvPortStartFirstTask+0x24>)
 801adfa:	6800      	ldr	r0, [r0, #0]
 801adfc:	6800      	ldr	r0, [r0, #0]
 801adfe:	f380 8808 	msr	MSP, r0
 801ae02:	f04f 0000 	mov.w	r0, #0
 801ae06:	f380 8814 	msr	CONTROL, r0
 801ae0a:	b662      	cpsie	i
 801ae0c:	b661      	cpsie	f
 801ae0e:	f3bf 8f4f 	dsb	sy
 801ae12:	f3bf 8f6f 	isb	sy
 801ae16:	df00      	svc	0
 801ae18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801ae1a:	bf00      	nop
 801ae1c:	e000ed08 	.word	0xe000ed08

0801ae20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801ae20:	b580      	push	{r7, lr}
 801ae22:	b086      	sub	sp, #24
 801ae24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801ae26:	4b46      	ldr	r3, [pc, #280]	; (801af40 <xPortStartScheduler+0x120>)
 801ae28:	681b      	ldr	r3, [r3, #0]
 801ae2a:	4a46      	ldr	r2, [pc, #280]	; (801af44 <xPortStartScheduler+0x124>)
 801ae2c:	4293      	cmp	r3, r2
 801ae2e:	d10a      	bne.n	801ae46 <xPortStartScheduler+0x26>
	__asm volatile
 801ae30:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ae34:	f383 8811 	msr	BASEPRI, r3
 801ae38:	f3bf 8f6f 	isb	sy
 801ae3c:	f3bf 8f4f 	dsb	sy
 801ae40:	613b      	str	r3, [r7, #16]
}
 801ae42:	bf00      	nop
 801ae44:	e7fe      	b.n	801ae44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801ae46:	4b3e      	ldr	r3, [pc, #248]	; (801af40 <xPortStartScheduler+0x120>)
 801ae48:	681b      	ldr	r3, [r3, #0]
 801ae4a:	4a3f      	ldr	r2, [pc, #252]	; (801af48 <xPortStartScheduler+0x128>)
 801ae4c:	4293      	cmp	r3, r2
 801ae4e:	d10a      	bne.n	801ae66 <xPortStartScheduler+0x46>
	__asm volatile
 801ae50:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ae54:	f383 8811 	msr	BASEPRI, r3
 801ae58:	f3bf 8f6f 	isb	sy
 801ae5c:	f3bf 8f4f 	dsb	sy
 801ae60:	60fb      	str	r3, [r7, #12]
}
 801ae62:	bf00      	nop
 801ae64:	e7fe      	b.n	801ae64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801ae66:	4b39      	ldr	r3, [pc, #228]	; (801af4c <xPortStartScheduler+0x12c>)
 801ae68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801ae6a:	697b      	ldr	r3, [r7, #20]
 801ae6c:	781b      	ldrb	r3, [r3, #0]
 801ae6e:	b2db      	uxtb	r3, r3
 801ae70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801ae72:	697b      	ldr	r3, [r7, #20]
 801ae74:	22ff      	movs	r2, #255	; 0xff
 801ae76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801ae78:	697b      	ldr	r3, [r7, #20]
 801ae7a:	781b      	ldrb	r3, [r3, #0]
 801ae7c:	b2db      	uxtb	r3, r3
 801ae7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801ae80:	78fb      	ldrb	r3, [r7, #3]
 801ae82:	b2db      	uxtb	r3, r3
 801ae84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801ae88:	b2da      	uxtb	r2, r3
 801ae8a:	4b31      	ldr	r3, [pc, #196]	; (801af50 <xPortStartScheduler+0x130>)
 801ae8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801ae8e:	4b31      	ldr	r3, [pc, #196]	; (801af54 <xPortStartScheduler+0x134>)
 801ae90:	2207      	movs	r2, #7
 801ae92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801ae94:	e009      	b.n	801aeaa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 801ae96:	4b2f      	ldr	r3, [pc, #188]	; (801af54 <xPortStartScheduler+0x134>)
 801ae98:	681b      	ldr	r3, [r3, #0]
 801ae9a:	3b01      	subs	r3, #1
 801ae9c:	4a2d      	ldr	r2, [pc, #180]	; (801af54 <xPortStartScheduler+0x134>)
 801ae9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801aea0:	78fb      	ldrb	r3, [r7, #3]
 801aea2:	b2db      	uxtb	r3, r3
 801aea4:	005b      	lsls	r3, r3, #1
 801aea6:	b2db      	uxtb	r3, r3
 801aea8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801aeaa:	78fb      	ldrb	r3, [r7, #3]
 801aeac:	b2db      	uxtb	r3, r3
 801aeae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801aeb2:	2b80      	cmp	r3, #128	; 0x80
 801aeb4:	d0ef      	beq.n	801ae96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801aeb6:	4b27      	ldr	r3, [pc, #156]	; (801af54 <xPortStartScheduler+0x134>)
 801aeb8:	681b      	ldr	r3, [r3, #0]
 801aeba:	f1c3 0307 	rsb	r3, r3, #7
 801aebe:	2b04      	cmp	r3, #4
 801aec0:	d00a      	beq.n	801aed8 <xPortStartScheduler+0xb8>
	__asm volatile
 801aec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aec6:	f383 8811 	msr	BASEPRI, r3
 801aeca:	f3bf 8f6f 	isb	sy
 801aece:	f3bf 8f4f 	dsb	sy
 801aed2:	60bb      	str	r3, [r7, #8]
}
 801aed4:	bf00      	nop
 801aed6:	e7fe      	b.n	801aed6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801aed8:	4b1e      	ldr	r3, [pc, #120]	; (801af54 <xPortStartScheduler+0x134>)
 801aeda:	681b      	ldr	r3, [r3, #0]
 801aedc:	021b      	lsls	r3, r3, #8
 801aede:	4a1d      	ldr	r2, [pc, #116]	; (801af54 <xPortStartScheduler+0x134>)
 801aee0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801aee2:	4b1c      	ldr	r3, [pc, #112]	; (801af54 <xPortStartScheduler+0x134>)
 801aee4:	681b      	ldr	r3, [r3, #0]
 801aee6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801aeea:	4a1a      	ldr	r2, [pc, #104]	; (801af54 <xPortStartScheduler+0x134>)
 801aeec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801aeee:	687b      	ldr	r3, [r7, #4]
 801aef0:	b2da      	uxtb	r2, r3
 801aef2:	697b      	ldr	r3, [r7, #20]
 801aef4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801aef6:	4b18      	ldr	r3, [pc, #96]	; (801af58 <xPortStartScheduler+0x138>)
 801aef8:	681b      	ldr	r3, [r3, #0]
 801aefa:	4a17      	ldr	r2, [pc, #92]	; (801af58 <xPortStartScheduler+0x138>)
 801aefc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801af00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801af02:	4b15      	ldr	r3, [pc, #84]	; (801af58 <xPortStartScheduler+0x138>)
 801af04:	681b      	ldr	r3, [r3, #0]
 801af06:	4a14      	ldr	r2, [pc, #80]	; (801af58 <xPortStartScheduler+0x138>)
 801af08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801af0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801af0e:	f000 f8dd 	bl	801b0cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801af12:	4b12      	ldr	r3, [pc, #72]	; (801af5c <xPortStartScheduler+0x13c>)
 801af14:	2200      	movs	r2, #0
 801af16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801af18:	f000 f8fc 	bl	801b114 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801af1c:	4b10      	ldr	r3, [pc, #64]	; (801af60 <xPortStartScheduler+0x140>)
 801af1e:	681b      	ldr	r3, [r3, #0]
 801af20:	4a0f      	ldr	r2, [pc, #60]	; (801af60 <xPortStartScheduler+0x140>)
 801af22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801af26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801af28:	f7ff ff66 	bl	801adf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801af2c:	f7ff fa96 	bl	801a45c <vTaskSwitchContext>
	prvTaskExitError();
 801af30:	f7ff ff20 	bl	801ad74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801af34:	2300      	movs	r3, #0
}
 801af36:	4618      	mov	r0, r3
 801af38:	3718      	adds	r7, #24
 801af3a:	46bd      	mov	sp, r7
 801af3c:	bd80      	pop	{r7, pc}
 801af3e:	bf00      	nop
 801af40:	e000ed00 	.word	0xe000ed00
 801af44:	410fc271 	.word	0x410fc271
 801af48:	410fc270 	.word	0x410fc270
 801af4c:	e000e400 	.word	0xe000e400
 801af50:	20000b50 	.word	0x20000b50
 801af54:	20000b54 	.word	0x20000b54
 801af58:	e000ed20 	.word	0xe000ed20
 801af5c:	20000010 	.word	0x20000010
 801af60:	e000ef34 	.word	0xe000ef34

0801af64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801af64:	b480      	push	{r7}
 801af66:	b083      	sub	sp, #12
 801af68:	af00      	add	r7, sp, #0
	__asm volatile
 801af6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801af6e:	f383 8811 	msr	BASEPRI, r3
 801af72:	f3bf 8f6f 	isb	sy
 801af76:	f3bf 8f4f 	dsb	sy
 801af7a:	607b      	str	r3, [r7, #4]
}
 801af7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801af7e:	4b0f      	ldr	r3, [pc, #60]	; (801afbc <vPortEnterCritical+0x58>)
 801af80:	681b      	ldr	r3, [r3, #0]
 801af82:	3301      	adds	r3, #1
 801af84:	4a0d      	ldr	r2, [pc, #52]	; (801afbc <vPortEnterCritical+0x58>)
 801af86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801af88:	4b0c      	ldr	r3, [pc, #48]	; (801afbc <vPortEnterCritical+0x58>)
 801af8a:	681b      	ldr	r3, [r3, #0]
 801af8c:	2b01      	cmp	r3, #1
 801af8e:	d10f      	bne.n	801afb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801af90:	4b0b      	ldr	r3, [pc, #44]	; (801afc0 <vPortEnterCritical+0x5c>)
 801af92:	681b      	ldr	r3, [r3, #0]
 801af94:	b2db      	uxtb	r3, r3
 801af96:	2b00      	cmp	r3, #0
 801af98:	d00a      	beq.n	801afb0 <vPortEnterCritical+0x4c>
	__asm volatile
 801af9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801af9e:	f383 8811 	msr	BASEPRI, r3
 801afa2:	f3bf 8f6f 	isb	sy
 801afa6:	f3bf 8f4f 	dsb	sy
 801afaa:	603b      	str	r3, [r7, #0]
}
 801afac:	bf00      	nop
 801afae:	e7fe      	b.n	801afae <vPortEnterCritical+0x4a>
	}
}
 801afb0:	bf00      	nop
 801afb2:	370c      	adds	r7, #12
 801afb4:	46bd      	mov	sp, r7
 801afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afba:	4770      	bx	lr
 801afbc:	20000010 	.word	0x20000010
 801afc0:	e000ed04 	.word	0xe000ed04

0801afc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801afc4:	b480      	push	{r7}
 801afc6:	b083      	sub	sp, #12
 801afc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801afca:	4b12      	ldr	r3, [pc, #72]	; (801b014 <vPortExitCritical+0x50>)
 801afcc:	681b      	ldr	r3, [r3, #0]
 801afce:	2b00      	cmp	r3, #0
 801afd0:	d10a      	bne.n	801afe8 <vPortExitCritical+0x24>
	__asm volatile
 801afd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801afd6:	f383 8811 	msr	BASEPRI, r3
 801afda:	f3bf 8f6f 	isb	sy
 801afde:	f3bf 8f4f 	dsb	sy
 801afe2:	607b      	str	r3, [r7, #4]
}
 801afe4:	bf00      	nop
 801afe6:	e7fe      	b.n	801afe6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801afe8:	4b0a      	ldr	r3, [pc, #40]	; (801b014 <vPortExitCritical+0x50>)
 801afea:	681b      	ldr	r3, [r3, #0]
 801afec:	3b01      	subs	r3, #1
 801afee:	4a09      	ldr	r2, [pc, #36]	; (801b014 <vPortExitCritical+0x50>)
 801aff0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801aff2:	4b08      	ldr	r3, [pc, #32]	; (801b014 <vPortExitCritical+0x50>)
 801aff4:	681b      	ldr	r3, [r3, #0]
 801aff6:	2b00      	cmp	r3, #0
 801aff8:	d105      	bne.n	801b006 <vPortExitCritical+0x42>
 801affa:	2300      	movs	r3, #0
 801affc:	603b      	str	r3, [r7, #0]
	__asm volatile
 801affe:	683b      	ldr	r3, [r7, #0]
 801b000:	f383 8811 	msr	BASEPRI, r3
}
 801b004:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801b006:	bf00      	nop
 801b008:	370c      	adds	r7, #12
 801b00a:	46bd      	mov	sp, r7
 801b00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b010:	4770      	bx	lr
 801b012:	bf00      	nop
 801b014:	20000010 	.word	0x20000010
	...

0801b020 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801b020:	f3ef 8009 	mrs	r0, PSP
 801b024:	f3bf 8f6f 	isb	sy
 801b028:	4b15      	ldr	r3, [pc, #84]	; (801b080 <pxCurrentTCBConst>)
 801b02a:	681a      	ldr	r2, [r3, #0]
 801b02c:	f01e 0f10 	tst.w	lr, #16
 801b030:	bf08      	it	eq
 801b032:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801b036:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b03a:	6010      	str	r0, [r2, #0]
 801b03c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801b040:	f04f 0050 	mov.w	r0, #80	; 0x50
 801b044:	f380 8811 	msr	BASEPRI, r0
 801b048:	f3bf 8f4f 	dsb	sy
 801b04c:	f3bf 8f6f 	isb	sy
 801b050:	f7ff fa04 	bl	801a45c <vTaskSwitchContext>
 801b054:	f04f 0000 	mov.w	r0, #0
 801b058:	f380 8811 	msr	BASEPRI, r0
 801b05c:	bc09      	pop	{r0, r3}
 801b05e:	6819      	ldr	r1, [r3, #0]
 801b060:	6808      	ldr	r0, [r1, #0]
 801b062:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b066:	f01e 0f10 	tst.w	lr, #16
 801b06a:	bf08      	it	eq
 801b06c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801b070:	f380 8809 	msr	PSP, r0
 801b074:	f3bf 8f6f 	isb	sy
 801b078:	4770      	bx	lr
 801b07a:	bf00      	nop
 801b07c:	f3af 8000 	nop.w

0801b080 <pxCurrentTCBConst>:
 801b080:	20000a24 	.word	0x20000a24
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801b084:	bf00      	nop
 801b086:	bf00      	nop

0801b088 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801b088:	b580      	push	{r7, lr}
 801b08a:	b082      	sub	sp, #8
 801b08c:	af00      	add	r7, sp, #0
	__asm volatile
 801b08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b092:	f383 8811 	msr	BASEPRI, r3
 801b096:	f3bf 8f6f 	isb	sy
 801b09a:	f3bf 8f4f 	dsb	sy
 801b09e:	607b      	str	r3, [r7, #4]
}
 801b0a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801b0a2:	f7ff f945 	bl	801a330 <xTaskIncrementTick>
 801b0a6:	4603      	mov	r3, r0
 801b0a8:	2b00      	cmp	r3, #0
 801b0aa:	d003      	beq.n	801b0b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801b0ac:	4b06      	ldr	r3, [pc, #24]	; (801b0c8 <SysTick_Handler+0x40>)
 801b0ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b0b2:	601a      	str	r2, [r3, #0]
 801b0b4:	2300      	movs	r3, #0
 801b0b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 801b0b8:	683b      	ldr	r3, [r7, #0]
 801b0ba:	f383 8811 	msr	BASEPRI, r3
}
 801b0be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801b0c0:	bf00      	nop
 801b0c2:	3708      	adds	r7, #8
 801b0c4:	46bd      	mov	sp, r7
 801b0c6:	bd80      	pop	{r7, pc}
 801b0c8:	e000ed04 	.word	0xe000ed04

0801b0cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801b0cc:	b480      	push	{r7}
 801b0ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801b0d0:	4b0b      	ldr	r3, [pc, #44]	; (801b100 <vPortSetupTimerInterrupt+0x34>)
 801b0d2:	2200      	movs	r2, #0
 801b0d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801b0d6:	4b0b      	ldr	r3, [pc, #44]	; (801b104 <vPortSetupTimerInterrupt+0x38>)
 801b0d8:	2200      	movs	r2, #0
 801b0da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801b0dc:	4b0a      	ldr	r3, [pc, #40]	; (801b108 <vPortSetupTimerInterrupt+0x3c>)
 801b0de:	681b      	ldr	r3, [r3, #0]
 801b0e0:	4a0a      	ldr	r2, [pc, #40]	; (801b10c <vPortSetupTimerInterrupt+0x40>)
 801b0e2:	fba2 2303 	umull	r2, r3, r2, r3
 801b0e6:	099b      	lsrs	r3, r3, #6
 801b0e8:	4a09      	ldr	r2, [pc, #36]	; (801b110 <vPortSetupTimerInterrupt+0x44>)
 801b0ea:	3b01      	subs	r3, #1
 801b0ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801b0ee:	4b04      	ldr	r3, [pc, #16]	; (801b100 <vPortSetupTimerInterrupt+0x34>)
 801b0f0:	2207      	movs	r2, #7
 801b0f2:	601a      	str	r2, [r3, #0]
}
 801b0f4:	bf00      	nop
 801b0f6:	46bd      	mov	sp, r7
 801b0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0fc:	4770      	bx	lr
 801b0fe:	bf00      	nop
 801b100:	e000e010 	.word	0xe000e010
 801b104:	e000e018 	.word	0xe000e018
 801b108:	20000004 	.word	0x20000004
 801b10c:	10624dd3 	.word	0x10624dd3
 801b110:	e000e014 	.word	0xe000e014

0801b114 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801b114:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801b124 <vPortEnableVFP+0x10>
 801b118:	6801      	ldr	r1, [r0, #0]
 801b11a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801b11e:	6001      	str	r1, [r0, #0]
 801b120:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801b122:	bf00      	nop
 801b124:	e000ed88 	.word	0xe000ed88

0801b128 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801b128:	b480      	push	{r7}
 801b12a:	b085      	sub	sp, #20
 801b12c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801b12e:	f3ef 8305 	mrs	r3, IPSR
 801b132:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801b134:	68fb      	ldr	r3, [r7, #12]
 801b136:	2b0f      	cmp	r3, #15
 801b138:	d914      	bls.n	801b164 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801b13a:	4a17      	ldr	r2, [pc, #92]	; (801b198 <vPortValidateInterruptPriority+0x70>)
 801b13c:	68fb      	ldr	r3, [r7, #12]
 801b13e:	4413      	add	r3, r2
 801b140:	781b      	ldrb	r3, [r3, #0]
 801b142:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801b144:	4b15      	ldr	r3, [pc, #84]	; (801b19c <vPortValidateInterruptPriority+0x74>)
 801b146:	781b      	ldrb	r3, [r3, #0]
 801b148:	7afa      	ldrb	r2, [r7, #11]
 801b14a:	429a      	cmp	r2, r3
 801b14c:	d20a      	bcs.n	801b164 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801b14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b152:	f383 8811 	msr	BASEPRI, r3
 801b156:	f3bf 8f6f 	isb	sy
 801b15a:	f3bf 8f4f 	dsb	sy
 801b15e:	607b      	str	r3, [r7, #4]
}
 801b160:	bf00      	nop
 801b162:	e7fe      	b.n	801b162 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801b164:	4b0e      	ldr	r3, [pc, #56]	; (801b1a0 <vPortValidateInterruptPriority+0x78>)
 801b166:	681b      	ldr	r3, [r3, #0]
 801b168:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801b16c:	4b0d      	ldr	r3, [pc, #52]	; (801b1a4 <vPortValidateInterruptPriority+0x7c>)
 801b16e:	681b      	ldr	r3, [r3, #0]
 801b170:	429a      	cmp	r2, r3
 801b172:	d90a      	bls.n	801b18a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801b174:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b178:	f383 8811 	msr	BASEPRI, r3
 801b17c:	f3bf 8f6f 	isb	sy
 801b180:	f3bf 8f4f 	dsb	sy
 801b184:	603b      	str	r3, [r7, #0]
}
 801b186:	bf00      	nop
 801b188:	e7fe      	b.n	801b188 <vPortValidateInterruptPriority+0x60>
	}
 801b18a:	bf00      	nop
 801b18c:	3714      	adds	r7, #20
 801b18e:	46bd      	mov	sp, r7
 801b190:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b194:	4770      	bx	lr
 801b196:	bf00      	nop
 801b198:	e000e3f0 	.word	0xe000e3f0
 801b19c:	20000b50 	.word	0x20000b50
 801b1a0:	e000ed0c 	.word	0xe000ed0c
 801b1a4:	20000b54 	.word	0x20000b54

0801b1a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801b1a8:	b580      	push	{r7, lr}
 801b1aa:	b08a      	sub	sp, #40	; 0x28
 801b1ac:	af00      	add	r7, sp, #0
 801b1ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801b1b0:	2300      	movs	r3, #0
 801b1b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801b1b4:	f7ff f820 	bl	801a1f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801b1b8:	4b5b      	ldr	r3, [pc, #364]	; (801b328 <pvPortMalloc+0x180>)
 801b1ba:	681b      	ldr	r3, [r3, #0]
 801b1bc:	2b00      	cmp	r3, #0
 801b1be:	d101      	bne.n	801b1c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801b1c0:	f000 f920 	bl	801b404 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801b1c4:	4b59      	ldr	r3, [pc, #356]	; (801b32c <pvPortMalloc+0x184>)
 801b1c6:	681a      	ldr	r2, [r3, #0]
 801b1c8:	687b      	ldr	r3, [r7, #4]
 801b1ca:	4013      	ands	r3, r2
 801b1cc:	2b00      	cmp	r3, #0
 801b1ce:	f040 8093 	bne.w	801b2f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801b1d2:	687b      	ldr	r3, [r7, #4]
 801b1d4:	2b00      	cmp	r3, #0
 801b1d6:	d01d      	beq.n	801b214 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801b1d8:	2208      	movs	r2, #8
 801b1da:	687b      	ldr	r3, [r7, #4]
 801b1dc:	4413      	add	r3, r2
 801b1de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801b1e0:	687b      	ldr	r3, [r7, #4]
 801b1e2:	f003 0307 	and.w	r3, r3, #7
 801b1e6:	2b00      	cmp	r3, #0
 801b1e8:	d014      	beq.n	801b214 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801b1ea:	687b      	ldr	r3, [r7, #4]
 801b1ec:	f023 0307 	bic.w	r3, r3, #7
 801b1f0:	3308      	adds	r3, #8
 801b1f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801b1f4:	687b      	ldr	r3, [r7, #4]
 801b1f6:	f003 0307 	and.w	r3, r3, #7
 801b1fa:	2b00      	cmp	r3, #0
 801b1fc:	d00a      	beq.n	801b214 <pvPortMalloc+0x6c>
	__asm volatile
 801b1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b202:	f383 8811 	msr	BASEPRI, r3
 801b206:	f3bf 8f6f 	isb	sy
 801b20a:	f3bf 8f4f 	dsb	sy
 801b20e:	617b      	str	r3, [r7, #20]
}
 801b210:	bf00      	nop
 801b212:	e7fe      	b.n	801b212 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801b214:	687b      	ldr	r3, [r7, #4]
 801b216:	2b00      	cmp	r3, #0
 801b218:	d06e      	beq.n	801b2f8 <pvPortMalloc+0x150>
 801b21a:	4b45      	ldr	r3, [pc, #276]	; (801b330 <pvPortMalloc+0x188>)
 801b21c:	681b      	ldr	r3, [r3, #0]
 801b21e:	687a      	ldr	r2, [r7, #4]
 801b220:	429a      	cmp	r2, r3
 801b222:	d869      	bhi.n	801b2f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801b224:	4b43      	ldr	r3, [pc, #268]	; (801b334 <pvPortMalloc+0x18c>)
 801b226:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801b228:	4b42      	ldr	r3, [pc, #264]	; (801b334 <pvPortMalloc+0x18c>)
 801b22a:	681b      	ldr	r3, [r3, #0]
 801b22c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801b22e:	e004      	b.n	801b23a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 801b230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b232:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801b234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b236:	681b      	ldr	r3, [r3, #0]
 801b238:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801b23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b23c:	685b      	ldr	r3, [r3, #4]
 801b23e:	687a      	ldr	r2, [r7, #4]
 801b240:	429a      	cmp	r2, r3
 801b242:	d903      	bls.n	801b24c <pvPortMalloc+0xa4>
 801b244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b246:	681b      	ldr	r3, [r3, #0]
 801b248:	2b00      	cmp	r3, #0
 801b24a:	d1f1      	bne.n	801b230 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801b24c:	4b36      	ldr	r3, [pc, #216]	; (801b328 <pvPortMalloc+0x180>)
 801b24e:	681b      	ldr	r3, [r3, #0]
 801b250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b252:	429a      	cmp	r2, r3
 801b254:	d050      	beq.n	801b2f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801b256:	6a3b      	ldr	r3, [r7, #32]
 801b258:	681b      	ldr	r3, [r3, #0]
 801b25a:	2208      	movs	r2, #8
 801b25c:	4413      	add	r3, r2
 801b25e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801b260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b262:	681a      	ldr	r2, [r3, #0]
 801b264:	6a3b      	ldr	r3, [r7, #32]
 801b266:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801b268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b26a:	685a      	ldr	r2, [r3, #4]
 801b26c:	687b      	ldr	r3, [r7, #4]
 801b26e:	1ad2      	subs	r2, r2, r3
 801b270:	2308      	movs	r3, #8
 801b272:	005b      	lsls	r3, r3, #1
 801b274:	429a      	cmp	r2, r3
 801b276:	d91f      	bls.n	801b2b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801b278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b27a:	687b      	ldr	r3, [r7, #4]
 801b27c:	4413      	add	r3, r2
 801b27e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801b280:	69bb      	ldr	r3, [r7, #24]
 801b282:	f003 0307 	and.w	r3, r3, #7
 801b286:	2b00      	cmp	r3, #0
 801b288:	d00a      	beq.n	801b2a0 <pvPortMalloc+0xf8>
	__asm volatile
 801b28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b28e:	f383 8811 	msr	BASEPRI, r3
 801b292:	f3bf 8f6f 	isb	sy
 801b296:	f3bf 8f4f 	dsb	sy
 801b29a:	613b      	str	r3, [r7, #16]
}
 801b29c:	bf00      	nop
 801b29e:	e7fe      	b.n	801b29e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801b2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2a2:	685a      	ldr	r2, [r3, #4]
 801b2a4:	687b      	ldr	r3, [r7, #4]
 801b2a6:	1ad2      	subs	r2, r2, r3
 801b2a8:	69bb      	ldr	r3, [r7, #24]
 801b2aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801b2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2ae:	687a      	ldr	r2, [r7, #4]
 801b2b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801b2b2:	69b8      	ldr	r0, [r7, #24]
 801b2b4:	f000 f908 	bl	801b4c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801b2b8:	4b1d      	ldr	r3, [pc, #116]	; (801b330 <pvPortMalloc+0x188>)
 801b2ba:	681a      	ldr	r2, [r3, #0]
 801b2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2be:	685b      	ldr	r3, [r3, #4]
 801b2c0:	1ad3      	subs	r3, r2, r3
 801b2c2:	4a1b      	ldr	r2, [pc, #108]	; (801b330 <pvPortMalloc+0x188>)
 801b2c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801b2c6:	4b1a      	ldr	r3, [pc, #104]	; (801b330 <pvPortMalloc+0x188>)
 801b2c8:	681a      	ldr	r2, [r3, #0]
 801b2ca:	4b1b      	ldr	r3, [pc, #108]	; (801b338 <pvPortMalloc+0x190>)
 801b2cc:	681b      	ldr	r3, [r3, #0]
 801b2ce:	429a      	cmp	r2, r3
 801b2d0:	d203      	bcs.n	801b2da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801b2d2:	4b17      	ldr	r3, [pc, #92]	; (801b330 <pvPortMalloc+0x188>)
 801b2d4:	681b      	ldr	r3, [r3, #0]
 801b2d6:	4a18      	ldr	r2, [pc, #96]	; (801b338 <pvPortMalloc+0x190>)
 801b2d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801b2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2dc:	685a      	ldr	r2, [r3, #4]
 801b2de:	4b13      	ldr	r3, [pc, #76]	; (801b32c <pvPortMalloc+0x184>)
 801b2e0:	681b      	ldr	r3, [r3, #0]
 801b2e2:	431a      	orrs	r2, r3
 801b2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801b2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2ea:	2200      	movs	r2, #0
 801b2ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801b2ee:	4b13      	ldr	r3, [pc, #76]	; (801b33c <pvPortMalloc+0x194>)
 801b2f0:	681b      	ldr	r3, [r3, #0]
 801b2f2:	3301      	adds	r3, #1
 801b2f4:	4a11      	ldr	r2, [pc, #68]	; (801b33c <pvPortMalloc+0x194>)
 801b2f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801b2f8:	f7fe ff8c 	bl	801a214 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801b2fc:	69fb      	ldr	r3, [r7, #28]
 801b2fe:	f003 0307 	and.w	r3, r3, #7
 801b302:	2b00      	cmp	r3, #0
 801b304:	d00a      	beq.n	801b31c <pvPortMalloc+0x174>
	__asm volatile
 801b306:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b30a:	f383 8811 	msr	BASEPRI, r3
 801b30e:	f3bf 8f6f 	isb	sy
 801b312:	f3bf 8f4f 	dsb	sy
 801b316:	60fb      	str	r3, [r7, #12]
}
 801b318:	bf00      	nop
 801b31a:	e7fe      	b.n	801b31a <pvPortMalloc+0x172>
	return pvReturn;
 801b31c:	69fb      	ldr	r3, [r7, #28]
}
 801b31e:	4618      	mov	r0, r3
 801b320:	3728      	adds	r7, #40	; 0x28
 801b322:	46bd      	mov	sp, r7
 801b324:	bd80      	pop	{r7, pc}
 801b326:	bf00      	nop
 801b328:	20003b60 	.word	0x20003b60
 801b32c:	20003b74 	.word	0x20003b74
 801b330:	20003b64 	.word	0x20003b64
 801b334:	20003b58 	.word	0x20003b58
 801b338:	20003b68 	.word	0x20003b68
 801b33c:	20003b6c 	.word	0x20003b6c

0801b340 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801b340:	b580      	push	{r7, lr}
 801b342:	b086      	sub	sp, #24
 801b344:	af00      	add	r7, sp, #0
 801b346:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801b348:	687b      	ldr	r3, [r7, #4]
 801b34a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801b34c:	687b      	ldr	r3, [r7, #4]
 801b34e:	2b00      	cmp	r3, #0
 801b350:	d04d      	beq.n	801b3ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801b352:	2308      	movs	r3, #8
 801b354:	425b      	negs	r3, r3
 801b356:	697a      	ldr	r2, [r7, #20]
 801b358:	4413      	add	r3, r2
 801b35a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801b35c:	697b      	ldr	r3, [r7, #20]
 801b35e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801b360:	693b      	ldr	r3, [r7, #16]
 801b362:	685a      	ldr	r2, [r3, #4]
 801b364:	4b24      	ldr	r3, [pc, #144]	; (801b3f8 <vPortFree+0xb8>)
 801b366:	681b      	ldr	r3, [r3, #0]
 801b368:	4013      	ands	r3, r2
 801b36a:	2b00      	cmp	r3, #0
 801b36c:	d10a      	bne.n	801b384 <vPortFree+0x44>
	__asm volatile
 801b36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b372:	f383 8811 	msr	BASEPRI, r3
 801b376:	f3bf 8f6f 	isb	sy
 801b37a:	f3bf 8f4f 	dsb	sy
 801b37e:	60fb      	str	r3, [r7, #12]
}
 801b380:	bf00      	nop
 801b382:	e7fe      	b.n	801b382 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801b384:	693b      	ldr	r3, [r7, #16]
 801b386:	681b      	ldr	r3, [r3, #0]
 801b388:	2b00      	cmp	r3, #0
 801b38a:	d00a      	beq.n	801b3a2 <vPortFree+0x62>
	__asm volatile
 801b38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b390:	f383 8811 	msr	BASEPRI, r3
 801b394:	f3bf 8f6f 	isb	sy
 801b398:	f3bf 8f4f 	dsb	sy
 801b39c:	60bb      	str	r3, [r7, #8]
}
 801b39e:	bf00      	nop
 801b3a0:	e7fe      	b.n	801b3a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801b3a2:	693b      	ldr	r3, [r7, #16]
 801b3a4:	685a      	ldr	r2, [r3, #4]
 801b3a6:	4b14      	ldr	r3, [pc, #80]	; (801b3f8 <vPortFree+0xb8>)
 801b3a8:	681b      	ldr	r3, [r3, #0]
 801b3aa:	4013      	ands	r3, r2
 801b3ac:	2b00      	cmp	r3, #0
 801b3ae:	d01e      	beq.n	801b3ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801b3b0:	693b      	ldr	r3, [r7, #16]
 801b3b2:	681b      	ldr	r3, [r3, #0]
 801b3b4:	2b00      	cmp	r3, #0
 801b3b6:	d11a      	bne.n	801b3ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801b3b8:	693b      	ldr	r3, [r7, #16]
 801b3ba:	685a      	ldr	r2, [r3, #4]
 801b3bc:	4b0e      	ldr	r3, [pc, #56]	; (801b3f8 <vPortFree+0xb8>)
 801b3be:	681b      	ldr	r3, [r3, #0]
 801b3c0:	43db      	mvns	r3, r3
 801b3c2:	401a      	ands	r2, r3
 801b3c4:	693b      	ldr	r3, [r7, #16]
 801b3c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801b3c8:	f7fe ff16 	bl	801a1f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801b3cc:	693b      	ldr	r3, [r7, #16]
 801b3ce:	685a      	ldr	r2, [r3, #4]
 801b3d0:	4b0a      	ldr	r3, [pc, #40]	; (801b3fc <vPortFree+0xbc>)
 801b3d2:	681b      	ldr	r3, [r3, #0]
 801b3d4:	4413      	add	r3, r2
 801b3d6:	4a09      	ldr	r2, [pc, #36]	; (801b3fc <vPortFree+0xbc>)
 801b3d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801b3da:	6938      	ldr	r0, [r7, #16]
 801b3dc:	f000 f874 	bl	801b4c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801b3e0:	4b07      	ldr	r3, [pc, #28]	; (801b400 <vPortFree+0xc0>)
 801b3e2:	681b      	ldr	r3, [r3, #0]
 801b3e4:	3301      	adds	r3, #1
 801b3e6:	4a06      	ldr	r2, [pc, #24]	; (801b400 <vPortFree+0xc0>)
 801b3e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801b3ea:	f7fe ff13 	bl	801a214 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801b3ee:	bf00      	nop
 801b3f0:	3718      	adds	r7, #24
 801b3f2:	46bd      	mov	sp, r7
 801b3f4:	bd80      	pop	{r7, pc}
 801b3f6:	bf00      	nop
 801b3f8:	20003b74 	.word	0x20003b74
 801b3fc:	20003b64 	.word	0x20003b64
 801b400:	20003b70 	.word	0x20003b70

0801b404 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801b404:	b480      	push	{r7}
 801b406:	b085      	sub	sp, #20
 801b408:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801b40a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 801b40e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801b410:	4b27      	ldr	r3, [pc, #156]	; (801b4b0 <prvHeapInit+0xac>)
 801b412:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801b414:	68fb      	ldr	r3, [r7, #12]
 801b416:	f003 0307 	and.w	r3, r3, #7
 801b41a:	2b00      	cmp	r3, #0
 801b41c:	d00c      	beq.n	801b438 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801b41e:	68fb      	ldr	r3, [r7, #12]
 801b420:	3307      	adds	r3, #7
 801b422:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801b424:	68fb      	ldr	r3, [r7, #12]
 801b426:	f023 0307 	bic.w	r3, r3, #7
 801b42a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801b42c:	68ba      	ldr	r2, [r7, #8]
 801b42e:	68fb      	ldr	r3, [r7, #12]
 801b430:	1ad3      	subs	r3, r2, r3
 801b432:	4a1f      	ldr	r2, [pc, #124]	; (801b4b0 <prvHeapInit+0xac>)
 801b434:	4413      	add	r3, r2
 801b436:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801b438:	68fb      	ldr	r3, [r7, #12]
 801b43a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801b43c:	4a1d      	ldr	r2, [pc, #116]	; (801b4b4 <prvHeapInit+0xb0>)
 801b43e:	687b      	ldr	r3, [r7, #4]
 801b440:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801b442:	4b1c      	ldr	r3, [pc, #112]	; (801b4b4 <prvHeapInit+0xb0>)
 801b444:	2200      	movs	r2, #0
 801b446:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801b448:	687b      	ldr	r3, [r7, #4]
 801b44a:	68ba      	ldr	r2, [r7, #8]
 801b44c:	4413      	add	r3, r2
 801b44e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801b450:	2208      	movs	r2, #8
 801b452:	68fb      	ldr	r3, [r7, #12]
 801b454:	1a9b      	subs	r3, r3, r2
 801b456:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801b458:	68fb      	ldr	r3, [r7, #12]
 801b45a:	f023 0307 	bic.w	r3, r3, #7
 801b45e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801b460:	68fb      	ldr	r3, [r7, #12]
 801b462:	4a15      	ldr	r2, [pc, #84]	; (801b4b8 <prvHeapInit+0xb4>)
 801b464:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801b466:	4b14      	ldr	r3, [pc, #80]	; (801b4b8 <prvHeapInit+0xb4>)
 801b468:	681b      	ldr	r3, [r3, #0]
 801b46a:	2200      	movs	r2, #0
 801b46c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801b46e:	4b12      	ldr	r3, [pc, #72]	; (801b4b8 <prvHeapInit+0xb4>)
 801b470:	681b      	ldr	r3, [r3, #0]
 801b472:	2200      	movs	r2, #0
 801b474:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801b476:	687b      	ldr	r3, [r7, #4]
 801b478:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801b47a:	683b      	ldr	r3, [r7, #0]
 801b47c:	68fa      	ldr	r2, [r7, #12]
 801b47e:	1ad2      	subs	r2, r2, r3
 801b480:	683b      	ldr	r3, [r7, #0]
 801b482:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801b484:	4b0c      	ldr	r3, [pc, #48]	; (801b4b8 <prvHeapInit+0xb4>)
 801b486:	681a      	ldr	r2, [r3, #0]
 801b488:	683b      	ldr	r3, [r7, #0]
 801b48a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801b48c:	683b      	ldr	r3, [r7, #0]
 801b48e:	685b      	ldr	r3, [r3, #4]
 801b490:	4a0a      	ldr	r2, [pc, #40]	; (801b4bc <prvHeapInit+0xb8>)
 801b492:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801b494:	683b      	ldr	r3, [r7, #0]
 801b496:	685b      	ldr	r3, [r3, #4]
 801b498:	4a09      	ldr	r2, [pc, #36]	; (801b4c0 <prvHeapInit+0xbc>)
 801b49a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801b49c:	4b09      	ldr	r3, [pc, #36]	; (801b4c4 <prvHeapInit+0xc0>)
 801b49e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801b4a2:	601a      	str	r2, [r3, #0]
}
 801b4a4:	bf00      	nop
 801b4a6:	3714      	adds	r7, #20
 801b4a8:	46bd      	mov	sp, r7
 801b4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4ae:	4770      	bx	lr
 801b4b0:	20000b58 	.word	0x20000b58
 801b4b4:	20003b58 	.word	0x20003b58
 801b4b8:	20003b60 	.word	0x20003b60
 801b4bc:	20003b68 	.word	0x20003b68
 801b4c0:	20003b64 	.word	0x20003b64
 801b4c4:	20003b74 	.word	0x20003b74

0801b4c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801b4c8:	b480      	push	{r7}
 801b4ca:	b085      	sub	sp, #20
 801b4cc:	af00      	add	r7, sp, #0
 801b4ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801b4d0:	4b28      	ldr	r3, [pc, #160]	; (801b574 <prvInsertBlockIntoFreeList+0xac>)
 801b4d2:	60fb      	str	r3, [r7, #12]
 801b4d4:	e002      	b.n	801b4dc <prvInsertBlockIntoFreeList+0x14>
 801b4d6:	68fb      	ldr	r3, [r7, #12]
 801b4d8:	681b      	ldr	r3, [r3, #0]
 801b4da:	60fb      	str	r3, [r7, #12]
 801b4dc:	68fb      	ldr	r3, [r7, #12]
 801b4de:	681b      	ldr	r3, [r3, #0]
 801b4e0:	687a      	ldr	r2, [r7, #4]
 801b4e2:	429a      	cmp	r2, r3
 801b4e4:	d8f7      	bhi.n	801b4d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801b4e6:	68fb      	ldr	r3, [r7, #12]
 801b4e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801b4ea:	68fb      	ldr	r3, [r7, #12]
 801b4ec:	685b      	ldr	r3, [r3, #4]
 801b4ee:	68ba      	ldr	r2, [r7, #8]
 801b4f0:	4413      	add	r3, r2
 801b4f2:	687a      	ldr	r2, [r7, #4]
 801b4f4:	429a      	cmp	r2, r3
 801b4f6:	d108      	bne.n	801b50a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801b4f8:	68fb      	ldr	r3, [r7, #12]
 801b4fa:	685a      	ldr	r2, [r3, #4]
 801b4fc:	687b      	ldr	r3, [r7, #4]
 801b4fe:	685b      	ldr	r3, [r3, #4]
 801b500:	441a      	add	r2, r3
 801b502:	68fb      	ldr	r3, [r7, #12]
 801b504:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801b506:	68fb      	ldr	r3, [r7, #12]
 801b508:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801b50a:	687b      	ldr	r3, [r7, #4]
 801b50c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801b50e:	687b      	ldr	r3, [r7, #4]
 801b510:	685b      	ldr	r3, [r3, #4]
 801b512:	68ba      	ldr	r2, [r7, #8]
 801b514:	441a      	add	r2, r3
 801b516:	68fb      	ldr	r3, [r7, #12]
 801b518:	681b      	ldr	r3, [r3, #0]
 801b51a:	429a      	cmp	r2, r3
 801b51c:	d118      	bne.n	801b550 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801b51e:	68fb      	ldr	r3, [r7, #12]
 801b520:	681a      	ldr	r2, [r3, #0]
 801b522:	4b15      	ldr	r3, [pc, #84]	; (801b578 <prvInsertBlockIntoFreeList+0xb0>)
 801b524:	681b      	ldr	r3, [r3, #0]
 801b526:	429a      	cmp	r2, r3
 801b528:	d00d      	beq.n	801b546 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801b52a:	687b      	ldr	r3, [r7, #4]
 801b52c:	685a      	ldr	r2, [r3, #4]
 801b52e:	68fb      	ldr	r3, [r7, #12]
 801b530:	681b      	ldr	r3, [r3, #0]
 801b532:	685b      	ldr	r3, [r3, #4]
 801b534:	441a      	add	r2, r3
 801b536:	687b      	ldr	r3, [r7, #4]
 801b538:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801b53a:	68fb      	ldr	r3, [r7, #12]
 801b53c:	681b      	ldr	r3, [r3, #0]
 801b53e:	681a      	ldr	r2, [r3, #0]
 801b540:	687b      	ldr	r3, [r7, #4]
 801b542:	601a      	str	r2, [r3, #0]
 801b544:	e008      	b.n	801b558 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801b546:	4b0c      	ldr	r3, [pc, #48]	; (801b578 <prvInsertBlockIntoFreeList+0xb0>)
 801b548:	681a      	ldr	r2, [r3, #0]
 801b54a:	687b      	ldr	r3, [r7, #4]
 801b54c:	601a      	str	r2, [r3, #0]
 801b54e:	e003      	b.n	801b558 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801b550:	68fb      	ldr	r3, [r7, #12]
 801b552:	681a      	ldr	r2, [r3, #0]
 801b554:	687b      	ldr	r3, [r7, #4]
 801b556:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801b558:	68fa      	ldr	r2, [r7, #12]
 801b55a:	687b      	ldr	r3, [r7, #4]
 801b55c:	429a      	cmp	r2, r3
 801b55e:	d002      	beq.n	801b566 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801b560:	68fb      	ldr	r3, [r7, #12]
 801b562:	687a      	ldr	r2, [r7, #4]
 801b564:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801b566:	bf00      	nop
 801b568:	3714      	adds	r7, #20
 801b56a:	46bd      	mov	sp, r7
 801b56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b570:	4770      	bx	lr
 801b572:	bf00      	nop
 801b574:	20003b58 	.word	0x20003b58
 801b578:	20003b60 	.word	0x20003b60

0801b57c <arm_pid_init_f32>:
 801b57c:	edd0 6a08 	vldr	s13, [r0, #32]
 801b580:	edd0 7a06 	vldr	s15, [r0, #24]
 801b584:	ed90 7a07 	vldr	s14, [r0, #28]
 801b588:	edc0 6a02 	vstr	s13, [r0, #8]
 801b58c:	ee37 7a87 	vadd.f32	s14, s15, s14
 801b590:	ee36 6aa6 	vadd.f32	s12, s13, s13
 801b594:	eef1 7a67 	vneg.f32	s15, s15
 801b598:	ee37 7a26 	vadd.f32	s14, s14, s13
 801b59c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801b5a0:	ed80 7a00 	vstr	s14, [r0]
 801b5a4:	edc0 7a01 	vstr	s15, [r0, #4]
 801b5a8:	b901      	cbnz	r1, 801b5ac <arm_pid_init_f32+0x30>
 801b5aa:	4770      	bx	lr
 801b5ac:	2300      	movs	r3, #0
 801b5ae:	60c3      	str	r3, [r0, #12]
 801b5b0:	6103      	str	r3, [r0, #16]
 801b5b2:	6143      	str	r3, [r0, #20]
 801b5b4:	4770      	bx	lr
 801b5b6:	bf00      	nop

0801b5b8 <malloc>:
 801b5b8:	4b02      	ldr	r3, [pc, #8]	; (801b5c4 <malloc+0xc>)
 801b5ba:	4601      	mov	r1, r0
 801b5bc:	6818      	ldr	r0, [r3, #0]
 801b5be:	f000 b82b 	b.w	801b618 <_malloc_r>
 801b5c2:	bf00      	nop
 801b5c4:	20000060 	.word	0x20000060

0801b5c8 <free>:
 801b5c8:	4b02      	ldr	r3, [pc, #8]	; (801b5d4 <free+0xc>)
 801b5ca:	4601      	mov	r1, r0
 801b5cc:	6818      	ldr	r0, [r3, #0]
 801b5ce:	f000 b979 	b.w	801b8c4 <_free_r>
 801b5d2:	bf00      	nop
 801b5d4:	20000060 	.word	0x20000060

0801b5d8 <sbrk_aligned>:
 801b5d8:	b570      	push	{r4, r5, r6, lr}
 801b5da:	4e0e      	ldr	r6, [pc, #56]	; (801b614 <sbrk_aligned+0x3c>)
 801b5dc:	460c      	mov	r4, r1
 801b5de:	6831      	ldr	r1, [r6, #0]
 801b5e0:	4605      	mov	r5, r0
 801b5e2:	b911      	cbnz	r1, 801b5ea <sbrk_aligned+0x12>
 801b5e4:	f000 f924 	bl	801b830 <_sbrk_r>
 801b5e8:	6030      	str	r0, [r6, #0]
 801b5ea:	4621      	mov	r1, r4
 801b5ec:	4628      	mov	r0, r5
 801b5ee:	f000 f91f 	bl	801b830 <_sbrk_r>
 801b5f2:	1c43      	adds	r3, r0, #1
 801b5f4:	d00a      	beq.n	801b60c <sbrk_aligned+0x34>
 801b5f6:	1cc4      	adds	r4, r0, #3
 801b5f8:	f024 0403 	bic.w	r4, r4, #3
 801b5fc:	42a0      	cmp	r0, r4
 801b5fe:	d007      	beq.n	801b610 <sbrk_aligned+0x38>
 801b600:	1a21      	subs	r1, r4, r0
 801b602:	4628      	mov	r0, r5
 801b604:	f000 f914 	bl	801b830 <_sbrk_r>
 801b608:	3001      	adds	r0, #1
 801b60a:	d101      	bne.n	801b610 <sbrk_aligned+0x38>
 801b60c:	f04f 34ff 	mov.w	r4, #4294967295
 801b610:	4620      	mov	r0, r4
 801b612:	bd70      	pop	{r4, r5, r6, pc}
 801b614:	20003b7c 	.word	0x20003b7c

0801b618 <_malloc_r>:
 801b618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b61c:	1ccd      	adds	r5, r1, #3
 801b61e:	f025 0503 	bic.w	r5, r5, #3
 801b622:	3508      	adds	r5, #8
 801b624:	2d0c      	cmp	r5, #12
 801b626:	bf38      	it	cc
 801b628:	250c      	movcc	r5, #12
 801b62a:	2d00      	cmp	r5, #0
 801b62c:	4607      	mov	r7, r0
 801b62e:	db01      	blt.n	801b634 <_malloc_r+0x1c>
 801b630:	42a9      	cmp	r1, r5
 801b632:	d905      	bls.n	801b640 <_malloc_r+0x28>
 801b634:	230c      	movs	r3, #12
 801b636:	603b      	str	r3, [r7, #0]
 801b638:	2600      	movs	r6, #0
 801b63a:	4630      	mov	r0, r6
 801b63c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b640:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801b714 <_malloc_r+0xfc>
 801b644:	f000 f868 	bl	801b718 <__malloc_lock>
 801b648:	f8d8 3000 	ldr.w	r3, [r8]
 801b64c:	461c      	mov	r4, r3
 801b64e:	bb5c      	cbnz	r4, 801b6a8 <_malloc_r+0x90>
 801b650:	4629      	mov	r1, r5
 801b652:	4638      	mov	r0, r7
 801b654:	f7ff ffc0 	bl	801b5d8 <sbrk_aligned>
 801b658:	1c43      	adds	r3, r0, #1
 801b65a:	4604      	mov	r4, r0
 801b65c:	d155      	bne.n	801b70a <_malloc_r+0xf2>
 801b65e:	f8d8 4000 	ldr.w	r4, [r8]
 801b662:	4626      	mov	r6, r4
 801b664:	2e00      	cmp	r6, #0
 801b666:	d145      	bne.n	801b6f4 <_malloc_r+0xdc>
 801b668:	2c00      	cmp	r4, #0
 801b66a:	d048      	beq.n	801b6fe <_malloc_r+0xe6>
 801b66c:	6823      	ldr	r3, [r4, #0]
 801b66e:	4631      	mov	r1, r6
 801b670:	4638      	mov	r0, r7
 801b672:	eb04 0903 	add.w	r9, r4, r3
 801b676:	f000 f8db 	bl	801b830 <_sbrk_r>
 801b67a:	4581      	cmp	r9, r0
 801b67c:	d13f      	bne.n	801b6fe <_malloc_r+0xe6>
 801b67e:	6821      	ldr	r1, [r4, #0]
 801b680:	1a6d      	subs	r5, r5, r1
 801b682:	4629      	mov	r1, r5
 801b684:	4638      	mov	r0, r7
 801b686:	f7ff ffa7 	bl	801b5d8 <sbrk_aligned>
 801b68a:	3001      	adds	r0, #1
 801b68c:	d037      	beq.n	801b6fe <_malloc_r+0xe6>
 801b68e:	6823      	ldr	r3, [r4, #0]
 801b690:	442b      	add	r3, r5
 801b692:	6023      	str	r3, [r4, #0]
 801b694:	f8d8 3000 	ldr.w	r3, [r8]
 801b698:	2b00      	cmp	r3, #0
 801b69a:	d038      	beq.n	801b70e <_malloc_r+0xf6>
 801b69c:	685a      	ldr	r2, [r3, #4]
 801b69e:	42a2      	cmp	r2, r4
 801b6a0:	d12b      	bne.n	801b6fa <_malloc_r+0xe2>
 801b6a2:	2200      	movs	r2, #0
 801b6a4:	605a      	str	r2, [r3, #4]
 801b6a6:	e00f      	b.n	801b6c8 <_malloc_r+0xb0>
 801b6a8:	6822      	ldr	r2, [r4, #0]
 801b6aa:	1b52      	subs	r2, r2, r5
 801b6ac:	d41f      	bmi.n	801b6ee <_malloc_r+0xd6>
 801b6ae:	2a0b      	cmp	r2, #11
 801b6b0:	d917      	bls.n	801b6e2 <_malloc_r+0xca>
 801b6b2:	1961      	adds	r1, r4, r5
 801b6b4:	42a3      	cmp	r3, r4
 801b6b6:	6025      	str	r5, [r4, #0]
 801b6b8:	bf18      	it	ne
 801b6ba:	6059      	strne	r1, [r3, #4]
 801b6bc:	6863      	ldr	r3, [r4, #4]
 801b6be:	bf08      	it	eq
 801b6c0:	f8c8 1000 	streq.w	r1, [r8]
 801b6c4:	5162      	str	r2, [r4, r5]
 801b6c6:	604b      	str	r3, [r1, #4]
 801b6c8:	4638      	mov	r0, r7
 801b6ca:	f104 060b 	add.w	r6, r4, #11
 801b6ce:	f000 f829 	bl	801b724 <__malloc_unlock>
 801b6d2:	f026 0607 	bic.w	r6, r6, #7
 801b6d6:	1d23      	adds	r3, r4, #4
 801b6d8:	1af2      	subs	r2, r6, r3
 801b6da:	d0ae      	beq.n	801b63a <_malloc_r+0x22>
 801b6dc:	1b9b      	subs	r3, r3, r6
 801b6de:	50a3      	str	r3, [r4, r2]
 801b6e0:	e7ab      	b.n	801b63a <_malloc_r+0x22>
 801b6e2:	42a3      	cmp	r3, r4
 801b6e4:	6862      	ldr	r2, [r4, #4]
 801b6e6:	d1dd      	bne.n	801b6a4 <_malloc_r+0x8c>
 801b6e8:	f8c8 2000 	str.w	r2, [r8]
 801b6ec:	e7ec      	b.n	801b6c8 <_malloc_r+0xb0>
 801b6ee:	4623      	mov	r3, r4
 801b6f0:	6864      	ldr	r4, [r4, #4]
 801b6f2:	e7ac      	b.n	801b64e <_malloc_r+0x36>
 801b6f4:	4634      	mov	r4, r6
 801b6f6:	6876      	ldr	r6, [r6, #4]
 801b6f8:	e7b4      	b.n	801b664 <_malloc_r+0x4c>
 801b6fa:	4613      	mov	r3, r2
 801b6fc:	e7cc      	b.n	801b698 <_malloc_r+0x80>
 801b6fe:	230c      	movs	r3, #12
 801b700:	603b      	str	r3, [r7, #0]
 801b702:	4638      	mov	r0, r7
 801b704:	f000 f80e 	bl	801b724 <__malloc_unlock>
 801b708:	e797      	b.n	801b63a <_malloc_r+0x22>
 801b70a:	6025      	str	r5, [r4, #0]
 801b70c:	e7dc      	b.n	801b6c8 <_malloc_r+0xb0>
 801b70e:	605b      	str	r3, [r3, #4]
 801b710:	deff      	udf	#255	; 0xff
 801b712:	bf00      	nop
 801b714:	20003b78 	.word	0x20003b78

0801b718 <__malloc_lock>:
 801b718:	4801      	ldr	r0, [pc, #4]	; (801b720 <__malloc_lock+0x8>)
 801b71a:	f000 b8c3 	b.w	801b8a4 <__retarget_lock_acquire_recursive>
 801b71e:	bf00      	nop
 801b720:	20003cbc 	.word	0x20003cbc

0801b724 <__malloc_unlock>:
 801b724:	4801      	ldr	r0, [pc, #4]	; (801b72c <__malloc_unlock+0x8>)
 801b726:	f000 b8be 	b.w	801b8a6 <__retarget_lock_release_recursive>
 801b72a:	bf00      	nop
 801b72c:	20003cbc 	.word	0x20003cbc

0801b730 <memset>:
 801b730:	4402      	add	r2, r0
 801b732:	4603      	mov	r3, r0
 801b734:	4293      	cmp	r3, r2
 801b736:	d100      	bne.n	801b73a <memset+0xa>
 801b738:	4770      	bx	lr
 801b73a:	f803 1b01 	strb.w	r1, [r3], #1
 801b73e:	e7f9      	b.n	801b734 <memset+0x4>

0801b740 <strcat>:
 801b740:	b510      	push	{r4, lr}
 801b742:	4602      	mov	r2, r0
 801b744:	7814      	ldrb	r4, [r2, #0]
 801b746:	4613      	mov	r3, r2
 801b748:	3201      	adds	r2, #1
 801b74a:	2c00      	cmp	r4, #0
 801b74c:	d1fa      	bne.n	801b744 <strcat+0x4>
 801b74e:	3b01      	subs	r3, #1
 801b750:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b754:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b758:	2a00      	cmp	r2, #0
 801b75a:	d1f9      	bne.n	801b750 <strcat+0x10>
 801b75c:	bd10      	pop	{r4, pc}

0801b75e <strncat>:
 801b75e:	b530      	push	{r4, r5, lr}
 801b760:	4604      	mov	r4, r0
 801b762:	7825      	ldrb	r5, [r4, #0]
 801b764:	4623      	mov	r3, r4
 801b766:	3401      	adds	r4, #1
 801b768:	2d00      	cmp	r5, #0
 801b76a:	d1fa      	bne.n	801b762 <strncat+0x4>
 801b76c:	3a01      	subs	r2, #1
 801b76e:	d304      	bcc.n	801b77a <strncat+0x1c>
 801b770:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b774:	f803 4b01 	strb.w	r4, [r3], #1
 801b778:	b904      	cbnz	r4, 801b77c <strncat+0x1e>
 801b77a:	bd30      	pop	{r4, r5, pc}
 801b77c:	2a00      	cmp	r2, #0
 801b77e:	d1f5      	bne.n	801b76c <strncat+0xe>
 801b780:	701a      	strb	r2, [r3, #0]
 801b782:	e7f3      	b.n	801b76c <strncat+0xe>

0801b784 <_reclaim_reent>:
 801b784:	4b29      	ldr	r3, [pc, #164]	; (801b82c <_reclaim_reent+0xa8>)
 801b786:	681b      	ldr	r3, [r3, #0]
 801b788:	4283      	cmp	r3, r0
 801b78a:	b570      	push	{r4, r5, r6, lr}
 801b78c:	4604      	mov	r4, r0
 801b78e:	d04b      	beq.n	801b828 <_reclaim_reent+0xa4>
 801b790:	69c3      	ldr	r3, [r0, #28]
 801b792:	b143      	cbz	r3, 801b7a6 <_reclaim_reent+0x22>
 801b794:	68db      	ldr	r3, [r3, #12]
 801b796:	2b00      	cmp	r3, #0
 801b798:	d144      	bne.n	801b824 <_reclaim_reent+0xa0>
 801b79a:	69e3      	ldr	r3, [r4, #28]
 801b79c:	6819      	ldr	r1, [r3, #0]
 801b79e:	b111      	cbz	r1, 801b7a6 <_reclaim_reent+0x22>
 801b7a0:	4620      	mov	r0, r4
 801b7a2:	f000 f88f 	bl	801b8c4 <_free_r>
 801b7a6:	6961      	ldr	r1, [r4, #20]
 801b7a8:	b111      	cbz	r1, 801b7b0 <_reclaim_reent+0x2c>
 801b7aa:	4620      	mov	r0, r4
 801b7ac:	f000 f88a 	bl	801b8c4 <_free_r>
 801b7b0:	69e1      	ldr	r1, [r4, #28]
 801b7b2:	b111      	cbz	r1, 801b7ba <_reclaim_reent+0x36>
 801b7b4:	4620      	mov	r0, r4
 801b7b6:	f000 f885 	bl	801b8c4 <_free_r>
 801b7ba:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801b7bc:	b111      	cbz	r1, 801b7c4 <_reclaim_reent+0x40>
 801b7be:	4620      	mov	r0, r4
 801b7c0:	f000 f880 	bl	801b8c4 <_free_r>
 801b7c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b7c6:	b111      	cbz	r1, 801b7ce <_reclaim_reent+0x4a>
 801b7c8:	4620      	mov	r0, r4
 801b7ca:	f000 f87b 	bl	801b8c4 <_free_r>
 801b7ce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801b7d0:	b111      	cbz	r1, 801b7d8 <_reclaim_reent+0x54>
 801b7d2:	4620      	mov	r0, r4
 801b7d4:	f000 f876 	bl	801b8c4 <_free_r>
 801b7d8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801b7da:	b111      	cbz	r1, 801b7e2 <_reclaim_reent+0x5e>
 801b7dc:	4620      	mov	r0, r4
 801b7de:	f000 f871 	bl	801b8c4 <_free_r>
 801b7e2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801b7e4:	b111      	cbz	r1, 801b7ec <_reclaim_reent+0x68>
 801b7e6:	4620      	mov	r0, r4
 801b7e8:	f000 f86c 	bl	801b8c4 <_free_r>
 801b7ec:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801b7ee:	b111      	cbz	r1, 801b7f6 <_reclaim_reent+0x72>
 801b7f0:	4620      	mov	r0, r4
 801b7f2:	f000 f867 	bl	801b8c4 <_free_r>
 801b7f6:	6a23      	ldr	r3, [r4, #32]
 801b7f8:	b1b3      	cbz	r3, 801b828 <_reclaim_reent+0xa4>
 801b7fa:	4620      	mov	r0, r4
 801b7fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b800:	4718      	bx	r3
 801b802:	5949      	ldr	r1, [r1, r5]
 801b804:	b941      	cbnz	r1, 801b818 <_reclaim_reent+0x94>
 801b806:	3504      	adds	r5, #4
 801b808:	69e3      	ldr	r3, [r4, #28]
 801b80a:	2d80      	cmp	r5, #128	; 0x80
 801b80c:	68d9      	ldr	r1, [r3, #12]
 801b80e:	d1f8      	bne.n	801b802 <_reclaim_reent+0x7e>
 801b810:	4620      	mov	r0, r4
 801b812:	f000 f857 	bl	801b8c4 <_free_r>
 801b816:	e7c0      	b.n	801b79a <_reclaim_reent+0x16>
 801b818:	680e      	ldr	r6, [r1, #0]
 801b81a:	4620      	mov	r0, r4
 801b81c:	f000 f852 	bl	801b8c4 <_free_r>
 801b820:	4631      	mov	r1, r6
 801b822:	e7ef      	b.n	801b804 <_reclaim_reent+0x80>
 801b824:	2500      	movs	r5, #0
 801b826:	e7ef      	b.n	801b808 <_reclaim_reent+0x84>
 801b828:	bd70      	pop	{r4, r5, r6, pc}
 801b82a:	bf00      	nop
 801b82c:	20000060 	.word	0x20000060

0801b830 <_sbrk_r>:
 801b830:	b538      	push	{r3, r4, r5, lr}
 801b832:	4d06      	ldr	r5, [pc, #24]	; (801b84c <_sbrk_r+0x1c>)
 801b834:	2300      	movs	r3, #0
 801b836:	4604      	mov	r4, r0
 801b838:	4608      	mov	r0, r1
 801b83a:	602b      	str	r3, [r5, #0]
 801b83c:	f7f5 ff7a 	bl	8011734 <_sbrk>
 801b840:	1c43      	adds	r3, r0, #1
 801b842:	d102      	bne.n	801b84a <_sbrk_r+0x1a>
 801b844:	682b      	ldr	r3, [r5, #0]
 801b846:	b103      	cbz	r3, 801b84a <_sbrk_r+0x1a>
 801b848:	6023      	str	r3, [r4, #0]
 801b84a:	bd38      	pop	{r3, r4, r5, pc}
 801b84c:	20003cb8 	.word	0x20003cb8

0801b850 <__errno>:
 801b850:	4b01      	ldr	r3, [pc, #4]	; (801b858 <__errno+0x8>)
 801b852:	6818      	ldr	r0, [r3, #0]
 801b854:	4770      	bx	lr
 801b856:	bf00      	nop
 801b858:	20000060 	.word	0x20000060

0801b85c <__libc_init_array>:
 801b85c:	b570      	push	{r4, r5, r6, lr}
 801b85e:	4d0d      	ldr	r5, [pc, #52]	; (801b894 <__libc_init_array+0x38>)
 801b860:	4c0d      	ldr	r4, [pc, #52]	; (801b898 <__libc_init_array+0x3c>)
 801b862:	1b64      	subs	r4, r4, r5
 801b864:	10a4      	asrs	r4, r4, #2
 801b866:	2600      	movs	r6, #0
 801b868:	42a6      	cmp	r6, r4
 801b86a:	d109      	bne.n	801b880 <__libc_init_array+0x24>
 801b86c:	4d0b      	ldr	r5, [pc, #44]	; (801b89c <__libc_init_array+0x40>)
 801b86e:	4c0c      	ldr	r4, [pc, #48]	; (801b8a0 <__libc_init_array+0x44>)
 801b870:	f000 ffae 	bl	801c7d0 <_init>
 801b874:	1b64      	subs	r4, r4, r5
 801b876:	10a4      	asrs	r4, r4, #2
 801b878:	2600      	movs	r6, #0
 801b87a:	42a6      	cmp	r6, r4
 801b87c:	d105      	bne.n	801b88a <__libc_init_array+0x2e>
 801b87e:	bd70      	pop	{r4, r5, r6, pc}
 801b880:	f855 3b04 	ldr.w	r3, [r5], #4
 801b884:	4798      	blx	r3
 801b886:	3601      	adds	r6, #1
 801b888:	e7ee      	b.n	801b868 <__libc_init_array+0xc>
 801b88a:	f855 3b04 	ldr.w	r3, [r5], #4
 801b88e:	4798      	blx	r3
 801b890:	3601      	adds	r6, #1
 801b892:	e7f2      	b.n	801b87a <__libc_init_array+0x1e>
 801b894:	0801ca78 	.word	0x0801ca78
 801b898:	0801ca78 	.word	0x0801ca78
 801b89c:	0801ca78 	.word	0x0801ca78
 801b8a0:	0801ca7c 	.word	0x0801ca7c

0801b8a4 <__retarget_lock_acquire_recursive>:
 801b8a4:	4770      	bx	lr

0801b8a6 <__retarget_lock_release_recursive>:
 801b8a6:	4770      	bx	lr

0801b8a8 <memcpy>:
 801b8a8:	440a      	add	r2, r1
 801b8aa:	4291      	cmp	r1, r2
 801b8ac:	f100 33ff 	add.w	r3, r0, #4294967295
 801b8b0:	d100      	bne.n	801b8b4 <memcpy+0xc>
 801b8b2:	4770      	bx	lr
 801b8b4:	b510      	push	{r4, lr}
 801b8b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b8ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b8be:	4291      	cmp	r1, r2
 801b8c0:	d1f9      	bne.n	801b8b6 <memcpy+0xe>
 801b8c2:	bd10      	pop	{r4, pc}

0801b8c4 <_free_r>:
 801b8c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b8c6:	2900      	cmp	r1, #0
 801b8c8:	d044      	beq.n	801b954 <_free_r+0x90>
 801b8ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b8ce:	9001      	str	r0, [sp, #4]
 801b8d0:	2b00      	cmp	r3, #0
 801b8d2:	f1a1 0404 	sub.w	r4, r1, #4
 801b8d6:	bfb8      	it	lt
 801b8d8:	18e4      	addlt	r4, r4, r3
 801b8da:	f7ff ff1d 	bl	801b718 <__malloc_lock>
 801b8de:	4a1e      	ldr	r2, [pc, #120]	; (801b958 <_free_r+0x94>)
 801b8e0:	9801      	ldr	r0, [sp, #4]
 801b8e2:	6813      	ldr	r3, [r2, #0]
 801b8e4:	b933      	cbnz	r3, 801b8f4 <_free_r+0x30>
 801b8e6:	6063      	str	r3, [r4, #4]
 801b8e8:	6014      	str	r4, [r2, #0]
 801b8ea:	b003      	add	sp, #12
 801b8ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b8f0:	f7ff bf18 	b.w	801b724 <__malloc_unlock>
 801b8f4:	42a3      	cmp	r3, r4
 801b8f6:	d908      	bls.n	801b90a <_free_r+0x46>
 801b8f8:	6825      	ldr	r5, [r4, #0]
 801b8fa:	1961      	adds	r1, r4, r5
 801b8fc:	428b      	cmp	r3, r1
 801b8fe:	bf01      	itttt	eq
 801b900:	6819      	ldreq	r1, [r3, #0]
 801b902:	685b      	ldreq	r3, [r3, #4]
 801b904:	1949      	addeq	r1, r1, r5
 801b906:	6021      	streq	r1, [r4, #0]
 801b908:	e7ed      	b.n	801b8e6 <_free_r+0x22>
 801b90a:	461a      	mov	r2, r3
 801b90c:	685b      	ldr	r3, [r3, #4]
 801b90e:	b10b      	cbz	r3, 801b914 <_free_r+0x50>
 801b910:	42a3      	cmp	r3, r4
 801b912:	d9fa      	bls.n	801b90a <_free_r+0x46>
 801b914:	6811      	ldr	r1, [r2, #0]
 801b916:	1855      	adds	r5, r2, r1
 801b918:	42a5      	cmp	r5, r4
 801b91a:	d10b      	bne.n	801b934 <_free_r+0x70>
 801b91c:	6824      	ldr	r4, [r4, #0]
 801b91e:	4421      	add	r1, r4
 801b920:	1854      	adds	r4, r2, r1
 801b922:	42a3      	cmp	r3, r4
 801b924:	6011      	str	r1, [r2, #0]
 801b926:	d1e0      	bne.n	801b8ea <_free_r+0x26>
 801b928:	681c      	ldr	r4, [r3, #0]
 801b92a:	685b      	ldr	r3, [r3, #4]
 801b92c:	6053      	str	r3, [r2, #4]
 801b92e:	440c      	add	r4, r1
 801b930:	6014      	str	r4, [r2, #0]
 801b932:	e7da      	b.n	801b8ea <_free_r+0x26>
 801b934:	d902      	bls.n	801b93c <_free_r+0x78>
 801b936:	230c      	movs	r3, #12
 801b938:	6003      	str	r3, [r0, #0]
 801b93a:	e7d6      	b.n	801b8ea <_free_r+0x26>
 801b93c:	6825      	ldr	r5, [r4, #0]
 801b93e:	1961      	adds	r1, r4, r5
 801b940:	428b      	cmp	r3, r1
 801b942:	bf04      	itt	eq
 801b944:	6819      	ldreq	r1, [r3, #0]
 801b946:	685b      	ldreq	r3, [r3, #4]
 801b948:	6063      	str	r3, [r4, #4]
 801b94a:	bf04      	itt	eq
 801b94c:	1949      	addeq	r1, r1, r5
 801b94e:	6021      	streq	r1, [r4, #0]
 801b950:	6054      	str	r4, [r2, #4]
 801b952:	e7ca      	b.n	801b8ea <_free_r+0x26>
 801b954:	b003      	add	sp, #12
 801b956:	bd30      	pop	{r4, r5, pc}
 801b958:	20003b78 	.word	0x20003b78

0801b95c <pow>:
 801b95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b95e:	ed2d 8b02 	vpush	{d8}
 801b962:	eeb0 8a40 	vmov.f32	s16, s0
 801b966:	eef0 8a60 	vmov.f32	s17, s1
 801b96a:	ec55 4b11 	vmov	r4, r5, d1
 801b96e:	f000 f873 	bl	801ba58 <__ieee754_pow>
 801b972:	4622      	mov	r2, r4
 801b974:	462b      	mov	r3, r5
 801b976:	4620      	mov	r0, r4
 801b978:	4629      	mov	r1, r5
 801b97a:	ec57 6b10 	vmov	r6, r7, d0
 801b97e:	f7f2 fcb7 	bl	800e2f0 <__aeabi_dcmpun>
 801b982:	2800      	cmp	r0, #0
 801b984:	d13b      	bne.n	801b9fe <pow+0xa2>
 801b986:	ec51 0b18 	vmov	r0, r1, d8
 801b98a:	2200      	movs	r2, #0
 801b98c:	2300      	movs	r3, #0
 801b98e:	f7f2 fc7d 	bl	800e28c <__aeabi_dcmpeq>
 801b992:	b1b8      	cbz	r0, 801b9c4 <pow+0x68>
 801b994:	2200      	movs	r2, #0
 801b996:	2300      	movs	r3, #0
 801b998:	4620      	mov	r0, r4
 801b99a:	4629      	mov	r1, r5
 801b99c:	f7f2 fc76 	bl	800e28c <__aeabi_dcmpeq>
 801b9a0:	2800      	cmp	r0, #0
 801b9a2:	d146      	bne.n	801ba32 <pow+0xd6>
 801b9a4:	ec45 4b10 	vmov	d0, r4, r5
 801b9a8:	f000 f848 	bl	801ba3c <finite>
 801b9ac:	b338      	cbz	r0, 801b9fe <pow+0xa2>
 801b9ae:	2200      	movs	r2, #0
 801b9b0:	2300      	movs	r3, #0
 801b9b2:	4620      	mov	r0, r4
 801b9b4:	4629      	mov	r1, r5
 801b9b6:	f7f2 fc73 	bl	800e2a0 <__aeabi_dcmplt>
 801b9ba:	b300      	cbz	r0, 801b9fe <pow+0xa2>
 801b9bc:	f7ff ff48 	bl	801b850 <__errno>
 801b9c0:	2322      	movs	r3, #34	; 0x22
 801b9c2:	e01b      	b.n	801b9fc <pow+0xa0>
 801b9c4:	ec47 6b10 	vmov	d0, r6, r7
 801b9c8:	f000 f838 	bl	801ba3c <finite>
 801b9cc:	b9e0      	cbnz	r0, 801ba08 <pow+0xac>
 801b9ce:	eeb0 0a48 	vmov.f32	s0, s16
 801b9d2:	eef0 0a68 	vmov.f32	s1, s17
 801b9d6:	f000 f831 	bl	801ba3c <finite>
 801b9da:	b1a8      	cbz	r0, 801ba08 <pow+0xac>
 801b9dc:	ec45 4b10 	vmov	d0, r4, r5
 801b9e0:	f000 f82c 	bl	801ba3c <finite>
 801b9e4:	b180      	cbz	r0, 801ba08 <pow+0xac>
 801b9e6:	4632      	mov	r2, r6
 801b9e8:	463b      	mov	r3, r7
 801b9ea:	4630      	mov	r0, r6
 801b9ec:	4639      	mov	r1, r7
 801b9ee:	f7f2 fc7f 	bl	800e2f0 <__aeabi_dcmpun>
 801b9f2:	2800      	cmp	r0, #0
 801b9f4:	d0e2      	beq.n	801b9bc <pow+0x60>
 801b9f6:	f7ff ff2b 	bl	801b850 <__errno>
 801b9fa:	2321      	movs	r3, #33	; 0x21
 801b9fc:	6003      	str	r3, [r0, #0]
 801b9fe:	ecbd 8b02 	vpop	{d8}
 801ba02:	ec47 6b10 	vmov	d0, r6, r7
 801ba06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ba08:	2200      	movs	r2, #0
 801ba0a:	2300      	movs	r3, #0
 801ba0c:	4630      	mov	r0, r6
 801ba0e:	4639      	mov	r1, r7
 801ba10:	f7f2 fc3c 	bl	800e28c <__aeabi_dcmpeq>
 801ba14:	2800      	cmp	r0, #0
 801ba16:	d0f2      	beq.n	801b9fe <pow+0xa2>
 801ba18:	eeb0 0a48 	vmov.f32	s0, s16
 801ba1c:	eef0 0a68 	vmov.f32	s1, s17
 801ba20:	f000 f80c 	bl	801ba3c <finite>
 801ba24:	2800      	cmp	r0, #0
 801ba26:	d0ea      	beq.n	801b9fe <pow+0xa2>
 801ba28:	ec45 4b10 	vmov	d0, r4, r5
 801ba2c:	f000 f806 	bl	801ba3c <finite>
 801ba30:	e7c3      	b.n	801b9ba <pow+0x5e>
 801ba32:	4f01      	ldr	r7, [pc, #4]	; (801ba38 <pow+0xdc>)
 801ba34:	2600      	movs	r6, #0
 801ba36:	e7e2      	b.n	801b9fe <pow+0xa2>
 801ba38:	3ff00000 	.word	0x3ff00000

0801ba3c <finite>:
 801ba3c:	b082      	sub	sp, #8
 801ba3e:	ed8d 0b00 	vstr	d0, [sp]
 801ba42:	9801      	ldr	r0, [sp, #4]
 801ba44:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801ba48:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801ba4c:	0fc0      	lsrs	r0, r0, #31
 801ba4e:	b002      	add	sp, #8
 801ba50:	4770      	bx	lr
 801ba52:	0000      	movs	r0, r0
 801ba54:	0000      	movs	r0, r0
	...

0801ba58 <__ieee754_pow>:
 801ba58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba5c:	ed2d 8b06 	vpush	{d8-d10}
 801ba60:	b089      	sub	sp, #36	; 0x24
 801ba62:	ed8d 1b00 	vstr	d1, [sp]
 801ba66:	e9dd 2900 	ldrd	r2, r9, [sp]
 801ba6a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801ba6e:	ea58 0102 	orrs.w	r1, r8, r2
 801ba72:	ec57 6b10 	vmov	r6, r7, d0
 801ba76:	d115      	bne.n	801baa4 <__ieee754_pow+0x4c>
 801ba78:	19b3      	adds	r3, r6, r6
 801ba7a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801ba7e:	4152      	adcs	r2, r2
 801ba80:	4299      	cmp	r1, r3
 801ba82:	4b89      	ldr	r3, [pc, #548]	; (801bca8 <__ieee754_pow+0x250>)
 801ba84:	4193      	sbcs	r3, r2
 801ba86:	f080 84d1 	bcs.w	801c42c <__ieee754_pow+0x9d4>
 801ba8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ba8e:	4630      	mov	r0, r6
 801ba90:	4639      	mov	r1, r7
 801ba92:	f7f1 ffdd 	bl	800da50 <__adddf3>
 801ba96:	ec41 0b10 	vmov	d0, r0, r1
 801ba9a:	b009      	add	sp, #36	; 0x24
 801ba9c:	ecbd 8b06 	vpop	{d8-d10}
 801baa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801baa4:	4b81      	ldr	r3, [pc, #516]	; (801bcac <__ieee754_pow+0x254>)
 801baa6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801baaa:	429c      	cmp	r4, r3
 801baac:	ee10 aa10 	vmov	sl, s0
 801bab0:	463d      	mov	r5, r7
 801bab2:	dc06      	bgt.n	801bac2 <__ieee754_pow+0x6a>
 801bab4:	d101      	bne.n	801baba <__ieee754_pow+0x62>
 801bab6:	2e00      	cmp	r6, #0
 801bab8:	d1e7      	bne.n	801ba8a <__ieee754_pow+0x32>
 801baba:	4598      	cmp	r8, r3
 801babc:	dc01      	bgt.n	801bac2 <__ieee754_pow+0x6a>
 801babe:	d10f      	bne.n	801bae0 <__ieee754_pow+0x88>
 801bac0:	b172      	cbz	r2, 801bae0 <__ieee754_pow+0x88>
 801bac2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801bac6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801baca:	ea55 050a 	orrs.w	r5, r5, sl
 801bace:	d1dc      	bne.n	801ba8a <__ieee754_pow+0x32>
 801bad0:	e9dd 3200 	ldrd	r3, r2, [sp]
 801bad4:	18db      	adds	r3, r3, r3
 801bad6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801bada:	4152      	adcs	r2, r2
 801badc:	429d      	cmp	r5, r3
 801bade:	e7d0      	b.n	801ba82 <__ieee754_pow+0x2a>
 801bae0:	2d00      	cmp	r5, #0
 801bae2:	da3b      	bge.n	801bb5c <__ieee754_pow+0x104>
 801bae4:	4b72      	ldr	r3, [pc, #456]	; (801bcb0 <__ieee754_pow+0x258>)
 801bae6:	4598      	cmp	r8, r3
 801bae8:	dc51      	bgt.n	801bb8e <__ieee754_pow+0x136>
 801baea:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801baee:	4598      	cmp	r8, r3
 801baf0:	f340 84ab 	ble.w	801c44a <__ieee754_pow+0x9f2>
 801baf4:	ea4f 5328 	mov.w	r3, r8, asr #20
 801baf8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801bafc:	2b14      	cmp	r3, #20
 801bafe:	dd0f      	ble.n	801bb20 <__ieee754_pow+0xc8>
 801bb00:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801bb04:	fa22 f103 	lsr.w	r1, r2, r3
 801bb08:	fa01 f303 	lsl.w	r3, r1, r3
 801bb0c:	4293      	cmp	r3, r2
 801bb0e:	f040 849c 	bne.w	801c44a <__ieee754_pow+0x9f2>
 801bb12:	f001 0101 	and.w	r1, r1, #1
 801bb16:	f1c1 0302 	rsb	r3, r1, #2
 801bb1a:	9304      	str	r3, [sp, #16]
 801bb1c:	b182      	cbz	r2, 801bb40 <__ieee754_pow+0xe8>
 801bb1e:	e05f      	b.n	801bbe0 <__ieee754_pow+0x188>
 801bb20:	2a00      	cmp	r2, #0
 801bb22:	d15b      	bne.n	801bbdc <__ieee754_pow+0x184>
 801bb24:	f1c3 0314 	rsb	r3, r3, #20
 801bb28:	fa48 f103 	asr.w	r1, r8, r3
 801bb2c:	fa01 f303 	lsl.w	r3, r1, r3
 801bb30:	4543      	cmp	r3, r8
 801bb32:	f040 8487 	bne.w	801c444 <__ieee754_pow+0x9ec>
 801bb36:	f001 0101 	and.w	r1, r1, #1
 801bb3a:	f1c1 0302 	rsb	r3, r1, #2
 801bb3e:	9304      	str	r3, [sp, #16]
 801bb40:	4b5c      	ldr	r3, [pc, #368]	; (801bcb4 <__ieee754_pow+0x25c>)
 801bb42:	4598      	cmp	r8, r3
 801bb44:	d132      	bne.n	801bbac <__ieee754_pow+0x154>
 801bb46:	f1b9 0f00 	cmp.w	r9, #0
 801bb4a:	f280 8477 	bge.w	801c43c <__ieee754_pow+0x9e4>
 801bb4e:	4959      	ldr	r1, [pc, #356]	; (801bcb4 <__ieee754_pow+0x25c>)
 801bb50:	4632      	mov	r2, r6
 801bb52:	463b      	mov	r3, r7
 801bb54:	2000      	movs	r0, #0
 801bb56:	f7f2 fa5b 	bl	800e010 <__aeabi_ddiv>
 801bb5a:	e79c      	b.n	801ba96 <__ieee754_pow+0x3e>
 801bb5c:	2300      	movs	r3, #0
 801bb5e:	9304      	str	r3, [sp, #16]
 801bb60:	2a00      	cmp	r2, #0
 801bb62:	d13d      	bne.n	801bbe0 <__ieee754_pow+0x188>
 801bb64:	4b51      	ldr	r3, [pc, #324]	; (801bcac <__ieee754_pow+0x254>)
 801bb66:	4598      	cmp	r8, r3
 801bb68:	d1ea      	bne.n	801bb40 <__ieee754_pow+0xe8>
 801bb6a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801bb6e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801bb72:	ea53 030a 	orrs.w	r3, r3, sl
 801bb76:	f000 8459 	beq.w	801c42c <__ieee754_pow+0x9d4>
 801bb7a:	4b4f      	ldr	r3, [pc, #316]	; (801bcb8 <__ieee754_pow+0x260>)
 801bb7c:	429c      	cmp	r4, r3
 801bb7e:	dd08      	ble.n	801bb92 <__ieee754_pow+0x13a>
 801bb80:	f1b9 0f00 	cmp.w	r9, #0
 801bb84:	f2c0 8456 	blt.w	801c434 <__ieee754_pow+0x9dc>
 801bb88:	e9dd 0100 	ldrd	r0, r1, [sp]
 801bb8c:	e783      	b.n	801ba96 <__ieee754_pow+0x3e>
 801bb8e:	2302      	movs	r3, #2
 801bb90:	e7e5      	b.n	801bb5e <__ieee754_pow+0x106>
 801bb92:	f1b9 0f00 	cmp.w	r9, #0
 801bb96:	f04f 0000 	mov.w	r0, #0
 801bb9a:	f04f 0100 	mov.w	r1, #0
 801bb9e:	f6bf af7a 	bge.w	801ba96 <__ieee754_pow+0x3e>
 801bba2:	e9dd 0300 	ldrd	r0, r3, [sp]
 801bba6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801bbaa:	e774      	b.n	801ba96 <__ieee754_pow+0x3e>
 801bbac:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801bbb0:	d106      	bne.n	801bbc0 <__ieee754_pow+0x168>
 801bbb2:	4632      	mov	r2, r6
 801bbb4:	463b      	mov	r3, r7
 801bbb6:	4630      	mov	r0, r6
 801bbb8:	4639      	mov	r1, r7
 801bbba:	f7f2 f8ff 	bl	800ddbc <__aeabi_dmul>
 801bbbe:	e76a      	b.n	801ba96 <__ieee754_pow+0x3e>
 801bbc0:	4b3e      	ldr	r3, [pc, #248]	; (801bcbc <__ieee754_pow+0x264>)
 801bbc2:	4599      	cmp	r9, r3
 801bbc4:	d10c      	bne.n	801bbe0 <__ieee754_pow+0x188>
 801bbc6:	2d00      	cmp	r5, #0
 801bbc8:	db0a      	blt.n	801bbe0 <__ieee754_pow+0x188>
 801bbca:	ec47 6b10 	vmov	d0, r6, r7
 801bbce:	b009      	add	sp, #36	; 0x24
 801bbd0:	ecbd 8b06 	vpop	{d8-d10}
 801bbd4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bbd8:	f000 bd20 	b.w	801c61c <__ieee754_sqrt>
 801bbdc:	2300      	movs	r3, #0
 801bbde:	9304      	str	r3, [sp, #16]
 801bbe0:	ec47 6b10 	vmov	d0, r6, r7
 801bbe4:	f000 fc62 	bl	801c4ac <fabs>
 801bbe8:	ec51 0b10 	vmov	r0, r1, d0
 801bbec:	f1ba 0f00 	cmp.w	sl, #0
 801bbf0:	d129      	bne.n	801bc46 <__ieee754_pow+0x1ee>
 801bbf2:	b124      	cbz	r4, 801bbfe <__ieee754_pow+0x1a6>
 801bbf4:	4b2f      	ldr	r3, [pc, #188]	; (801bcb4 <__ieee754_pow+0x25c>)
 801bbf6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801bbfa:	429a      	cmp	r2, r3
 801bbfc:	d123      	bne.n	801bc46 <__ieee754_pow+0x1ee>
 801bbfe:	f1b9 0f00 	cmp.w	r9, #0
 801bc02:	da05      	bge.n	801bc10 <__ieee754_pow+0x1b8>
 801bc04:	4602      	mov	r2, r0
 801bc06:	460b      	mov	r3, r1
 801bc08:	2000      	movs	r0, #0
 801bc0a:	492a      	ldr	r1, [pc, #168]	; (801bcb4 <__ieee754_pow+0x25c>)
 801bc0c:	f7f2 fa00 	bl	800e010 <__aeabi_ddiv>
 801bc10:	2d00      	cmp	r5, #0
 801bc12:	f6bf af40 	bge.w	801ba96 <__ieee754_pow+0x3e>
 801bc16:	9b04      	ldr	r3, [sp, #16]
 801bc18:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801bc1c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801bc20:	431c      	orrs	r4, r3
 801bc22:	d108      	bne.n	801bc36 <__ieee754_pow+0x1de>
 801bc24:	4602      	mov	r2, r0
 801bc26:	460b      	mov	r3, r1
 801bc28:	4610      	mov	r0, r2
 801bc2a:	4619      	mov	r1, r3
 801bc2c:	f7f1 ff0e 	bl	800da4c <__aeabi_dsub>
 801bc30:	4602      	mov	r2, r0
 801bc32:	460b      	mov	r3, r1
 801bc34:	e78f      	b.n	801bb56 <__ieee754_pow+0xfe>
 801bc36:	9b04      	ldr	r3, [sp, #16]
 801bc38:	2b01      	cmp	r3, #1
 801bc3a:	f47f af2c 	bne.w	801ba96 <__ieee754_pow+0x3e>
 801bc3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bc42:	4619      	mov	r1, r3
 801bc44:	e727      	b.n	801ba96 <__ieee754_pow+0x3e>
 801bc46:	0feb      	lsrs	r3, r5, #31
 801bc48:	3b01      	subs	r3, #1
 801bc4a:	9306      	str	r3, [sp, #24]
 801bc4c:	9a06      	ldr	r2, [sp, #24]
 801bc4e:	9b04      	ldr	r3, [sp, #16]
 801bc50:	4313      	orrs	r3, r2
 801bc52:	d102      	bne.n	801bc5a <__ieee754_pow+0x202>
 801bc54:	4632      	mov	r2, r6
 801bc56:	463b      	mov	r3, r7
 801bc58:	e7e6      	b.n	801bc28 <__ieee754_pow+0x1d0>
 801bc5a:	4b19      	ldr	r3, [pc, #100]	; (801bcc0 <__ieee754_pow+0x268>)
 801bc5c:	4598      	cmp	r8, r3
 801bc5e:	f340 80fb 	ble.w	801be58 <__ieee754_pow+0x400>
 801bc62:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801bc66:	4598      	cmp	r8, r3
 801bc68:	4b13      	ldr	r3, [pc, #76]	; (801bcb8 <__ieee754_pow+0x260>)
 801bc6a:	dd0c      	ble.n	801bc86 <__ieee754_pow+0x22e>
 801bc6c:	429c      	cmp	r4, r3
 801bc6e:	dc0f      	bgt.n	801bc90 <__ieee754_pow+0x238>
 801bc70:	f1b9 0f00 	cmp.w	r9, #0
 801bc74:	da0f      	bge.n	801bc96 <__ieee754_pow+0x23e>
 801bc76:	2000      	movs	r0, #0
 801bc78:	b009      	add	sp, #36	; 0x24
 801bc7a:	ecbd 8b06 	vpop	{d8-d10}
 801bc7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc82:	f000 bcc2 	b.w	801c60a <__math_oflow>
 801bc86:	429c      	cmp	r4, r3
 801bc88:	dbf2      	blt.n	801bc70 <__ieee754_pow+0x218>
 801bc8a:	4b0a      	ldr	r3, [pc, #40]	; (801bcb4 <__ieee754_pow+0x25c>)
 801bc8c:	429c      	cmp	r4, r3
 801bc8e:	dd19      	ble.n	801bcc4 <__ieee754_pow+0x26c>
 801bc90:	f1b9 0f00 	cmp.w	r9, #0
 801bc94:	dcef      	bgt.n	801bc76 <__ieee754_pow+0x21e>
 801bc96:	2000      	movs	r0, #0
 801bc98:	b009      	add	sp, #36	; 0x24
 801bc9a:	ecbd 8b06 	vpop	{d8-d10}
 801bc9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bca2:	f000 bca9 	b.w	801c5f8 <__math_uflow>
 801bca6:	bf00      	nop
 801bca8:	fff00000 	.word	0xfff00000
 801bcac:	7ff00000 	.word	0x7ff00000
 801bcb0:	433fffff 	.word	0x433fffff
 801bcb4:	3ff00000 	.word	0x3ff00000
 801bcb8:	3fefffff 	.word	0x3fefffff
 801bcbc:	3fe00000 	.word	0x3fe00000
 801bcc0:	41e00000 	.word	0x41e00000
 801bcc4:	4b60      	ldr	r3, [pc, #384]	; (801be48 <__ieee754_pow+0x3f0>)
 801bcc6:	2200      	movs	r2, #0
 801bcc8:	f7f1 fec0 	bl	800da4c <__aeabi_dsub>
 801bccc:	a354      	add	r3, pc, #336	; (adr r3, 801be20 <__ieee754_pow+0x3c8>)
 801bcce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcd2:	4604      	mov	r4, r0
 801bcd4:	460d      	mov	r5, r1
 801bcd6:	f7f2 f871 	bl	800ddbc <__aeabi_dmul>
 801bcda:	a353      	add	r3, pc, #332	; (adr r3, 801be28 <__ieee754_pow+0x3d0>)
 801bcdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bce0:	4606      	mov	r6, r0
 801bce2:	460f      	mov	r7, r1
 801bce4:	4620      	mov	r0, r4
 801bce6:	4629      	mov	r1, r5
 801bce8:	f7f2 f868 	bl	800ddbc <__aeabi_dmul>
 801bcec:	4b57      	ldr	r3, [pc, #348]	; (801be4c <__ieee754_pow+0x3f4>)
 801bcee:	4682      	mov	sl, r0
 801bcf0:	468b      	mov	fp, r1
 801bcf2:	2200      	movs	r2, #0
 801bcf4:	4620      	mov	r0, r4
 801bcf6:	4629      	mov	r1, r5
 801bcf8:	f7f2 f860 	bl	800ddbc <__aeabi_dmul>
 801bcfc:	4602      	mov	r2, r0
 801bcfe:	460b      	mov	r3, r1
 801bd00:	a14b      	add	r1, pc, #300	; (adr r1, 801be30 <__ieee754_pow+0x3d8>)
 801bd02:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bd06:	f7f1 fea1 	bl	800da4c <__aeabi_dsub>
 801bd0a:	4622      	mov	r2, r4
 801bd0c:	462b      	mov	r3, r5
 801bd0e:	f7f2 f855 	bl	800ddbc <__aeabi_dmul>
 801bd12:	4602      	mov	r2, r0
 801bd14:	460b      	mov	r3, r1
 801bd16:	2000      	movs	r0, #0
 801bd18:	494d      	ldr	r1, [pc, #308]	; (801be50 <__ieee754_pow+0x3f8>)
 801bd1a:	f7f1 fe97 	bl	800da4c <__aeabi_dsub>
 801bd1e:	4622      	mov	r2, r4
 801bd20:	4680      	mov	r8, r0
 801bd22:	4689      	mov	r9, r1
 801bd24:	462b      	mov	r3, r5
 801bd26:	4620      	mov	r0, r4
 801bd28:	4629      	mov	r1, r5
 801bd2a:	f7f2 f847 	bl	800ddbc <__aeabi_dmul>
 801bd2e:	4602      	mov	r2, r0
 801bd30:	460b      	mov	r3, r1
 801bd32:	4640      	mov	r0, r8
 801bd34:	4649      	mov	r1, r9
 801bd36:	f7f2 f841 	bl	800ddbc <__aeabi_dmul>
 801bd3a:	a33f      	add	r3, pc, #252	; (adr r3, 801be38 <__ieee754_pow+0x3e0>)
 801bd3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd40:	f7f2 f83c 	bl	800ddbc <__aeabi_dmul>
 801bd44:	4602      	mov	r2, r0
 801bd46:	460b      	mov	r3, r1
 801bd48:	4650      	mov	r0, sl
 801bd4a:	4659      	mov	r1, fp
 801bd4c:	f7f1 fe7e 	bl	800da4c <__aeabi_dsub>
 801bd50:	4602      	mov	r2, r0
 801bd52:	460b      	mov	r3, r1
 801bd54:	4680      	mov	r8, r0
 801bd56:	4689      	mov	r9, r1
 801bd58:	4630      	mov	r0, r6
 801bd5a:	4639      	mov	r1, r7
 801bd5c:	f7f1 fe78 	bl	800da50 <__adddf3>
 801bd60:	2000      	movs	r0, #0
 801bd62:	4632      	mov	r2, r6
 801bd64:	463b      	mov	r3, r7
 801bd66:	4604      	mov	r4, r0
 801bd68:	460d      	mov	r5, r1
 801bd6a:	f7f1 fe6f 	bl	800da4c <__aeabi_dsub>
 801bd6e:	4602      	mov	r2, r0
 801bd70:	460b      	mov	r3, r1
 801bd72:	4640      	mov	r0, r8
 801bd74:	4649      	mov	r1, r9
 801bd76:	f7f1 fe69 	bl	800da4c <__aeabi_dsub>
 801bd7a:	9b04      	ldr	r3, [sp, #16]
 801bd7c:	9a06      	ldr	r2, [sp, #24]
 801bd7e:	3b01      	subs	r3, #1
 801bd80:	4313      	orrs	r3, r2
 801bd82:	4682      	mov	sl, r0
 801bd84:	468b      	mov	fp, r1
 801bd86:	f040 81e7 	bne.w	801c158 <__ieee754_pow+0x700>
 801bd8a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 801be40 <__ieee754_pow+0x3e8>
 801bd8e:	eeb0 8a47 	vmov.f32	s16, s14
 801bd92:	eef0 8a67 	vmov.f32	s17, s15
 801bd96:	e9dd 6700 	ldrd	r6, r7, [sp]
 801bd9a:	2600      	movs	r6, #0
 801bd9c:	4632      	mov	r2, r6
 801bd9e:	463b      	mov	r3, r7
 801bda0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801bda4:	f7f1 fe52 	bl	800da4c <__aeabi_dsub>
 801bda8:	4622      	mov	r2, r4
 801bdaa:	462b      	mov	r3, r5
 801bdac:	f7f2 f806 	bl	800ddbc <__aeabi_dmul>
 801bdb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bdb4:	4680      	mov	r8, r0
 801bdb6:	4689      	mov	r9, r1
 801bdb8:	4650      	mov	r0, sl
 801bdba:	4659      	mov	r1, fp
 801bdbc:	f7f1 fffe 	bl	800ddbc <__aeabi_dmul>
 801bdc0:	4602      	mov	r2, r0
 801bdc2:	460b      	mov	r3, r1
 801bdc4:	4640      	mov	r0, r8
 801bdc6:	4649      	mov	r1, r9
 801bdc8:	f7f1 fe42 	bl	800da50 <__adddf3>
 801bdcc:	4632      	mov	r2, r6
 801bdce:	463b      	mov	r3, r7
 801bdd0:	4680      	mov	r8, r0
 801bdd2:	4689      	mov	r9, r1
 801bdd4:	4620      	mov	r0, r4
 801bdd6:	4629      	mov	r1, r5
 801bdd8:	f7f1 fff0 	bl	800ddbc <__aeabi_dmul>
 801bddc:	460b      	mov	r3, r1
 801bdde:	4604      	mov	r4, r0
 801bde0:	460d      	mov	r5, r1
 801bde2:	4602      	mov	r2, r0
 801bde4:	4649      	mov	r1, r9
 801bde6:	4640      	mov	r0, r8
 801bde8:	f7f1 fe32 	bl	800da50 <__adddf3>
 801bdec:	4b19      	ldr	r3, [pc, #100]	; (801be54 <__ieee754_pow+0x3fc>)
 801bdee:	4299      	cmp	r1, r3
 801bdf0:	ec45 4b19 	vmov	d9, r4, r5
 801bdf4:	4606      	mov	r6, r0
 801bdf6:	460f      	mov	r7, r1
 801bdf8:	468b      	mov	fp, r1
 801bdfa:	f340 82f0 	ble.w	801c3de <__ieee754_pow+0x986>
 801bdfe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801be02:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801be06:	4303      	orrs	r3, r0
 801be08:	f000 81e4 	beq.w	801c1d4 <__ieee754_pow+0x77c>
 801be0c:	ec51 0b18 	vmov	r0, r1, d8
 801be10:	2200      	movs	r2, #0
 801be12:	2300      	movs	r3, #0
 801be14:	f7f2 fa44 	bl	800e2a0 <__aeabi_dcmplt>
 801be18:	3800      	subs	r0, #0
 801be1a:	bf18      	it	ne
 801be1c:	2001      	movne	r0, #1
 801be1e:	e72b      	b.n	801bc78 <__ieee754_pow+0x220>
 801be20:	60000000 	.word	0x60000000
 801be24:	3ff71547 	.word	0x3ff71547
 801be28:	f85ddf44 	.word	0xf85ddf44
 801be2c:	3e54ae0b 	.word	0x3e54ae0b
 801be30:	55555555 	.word	0x55555555
 801be34:	3fd55555 	.word	0x3fd55555
 801be38:	652b82fe 	.word	0x652b82fe
 801be3c:	3ff71547 	.word	0x3ff71547
 801be40:	00000000 	.word	0x00000000
 801be44:	bff00000 	.word	0xbff00000
 801be48:	3ff00000 	.word	0x3ff00000
 801be4c:	3fd00000 	.word	0x3fd00000
 801be50:	3fe00000 	.word	0x3fe00000
 801be54:	408fffff 	.word	0x408fffff
 801be58:	4bd5      	ldr	r3, [pc, #852]	; (801c1b0 <__ieee754_pow+0x758>)
 801be5a:	402b      	ands	r3, r5
 801be5c:	2200      	movs	r2, #0
 801be5e:	b92b      	cbnz	r3, 801be6c <__ieee754_pow+0x414>
 801be60:	4bd4      	ldr	r3, [pc, #848]	; (801c1b4 <__ieee754_pow+0x75c>)
 801be62:	f7f1 ffab 	bl	800ddbc <__aeabi_dmul>
 801be66:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801be6a:	460c      	mov	r4, r1
 801be6c:	1523      	asrs	r3, r4, #20
 801be6e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801be72:	4413      	add	r3, r2
 801be74:	9305      	str	r3, [sp, #20]
 801be76:	4bd0      	ldr	r3, [pc, #832]	; (801c1b8 <__ieee754_pow+0x760>)
 801be78:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801be7c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801be80:	429c      	cmp	r4, r3
 801be82:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801be86:	dd08      	ble.n	801be9a <__ieee754_pow+0x442>
 801be88:	4bcc      	ldr	r3, [pc, #816]	; (801c1bc <__ieee754_pow+0x764>)
 801be8a:	429c      	cmp	r4, r3
 801be8c:	f340 8162 	ble.w	801c154 <__ieee754_pow+0x6fc>
 801be90:	9b05      	ldr	r3, [sp, #20]
 801be92:	3301      	adds	r3, #1
 801be94:	9305      	str	r3, [sp, #20]
 801be96:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801be9a:	2400      	movs	r4, #0
 801be9c:	00e3      	lsls	r3, r4, #3
 801be9e:	9307      	str	r3, [sp, #28]
 801bea0:	4bc7      	ldr	r3, [pc, #796]	; (801c1c0 <__ieee754_pow+0x768>)
 801bea2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801bea6:	ed93 7b00 	vldr	d7, [r3]
 801beaa:	4629      	mov	r1, r5
 801beac:	ec53 2b17 	vmov	r2, r3, d7
 801beb0:	eeb0 9a47 	vmov.f32	s18, s14
 801beb4:	eef0 9a67 	vmov.f32	s19, s15
 801beb8:	4682      	mov	sl, r0
 801beba:	f7f1 fdc7 	bl	800da4c <__aeabi_dsub>
 801bebe:	4652      	mov	r2, sl
 801bec0:	4606      	mov	r6, r0
 801bec2:	460f      	mov	r7, r1
 801bec4:	462b      	mov	r3, r5
 801bec6:	ec51 0b19 	vmov	r0, r1, d9
 801beca:	f7f1 fdc1 	bl	800da50 <__adddf3>
 801bece:	4602      	mov	r2, r0
 801bed0:	460b      	mov	r3, r1
 801bed2:	2000      	movs	r0, #0
 801bed4:	49bb      	ldr	r1, [pc, #748]	; (801c1c4 <__ieee754_pow+0x76c>)
 801bed6:	f7f2 f89b 	bl	800e010 <__aeabi_ddiv>
 801beda:	ec41 0b1a 	vmov	d10, r0, r1
 801bede:	4602      	mov	r2, r0
 801bee0:	460b      	mov	r3, r1
 801bee2:	4630      	mov	r0, r6
 801bee4:	4639      	mov	r1, r7
 801bee6:	f7f1 ff69 	bl	800ddbc <__aeabi_dmul>
 801beea:	2300      	movs	r3, #0
 801beec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bef0:	9302      	str	r3, [sp, #8]
 801bef2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801bef6:	46ab      	mov	fp, r5
 801bef8:	106d      	asrs	r5, r5, #1
 801befa:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801befe:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801bf02:	ec41 0b18 	vmov	d8, r0, r1
 801bf06:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801bf0a:	2200      	movs	r2, #0
 801bf0c:	4640      	mov	r0, r8
 801bf0e:	4649      	mov	r1, r9
 801bf10:	4614      	mov	r4, r2
 801bf12:	461d      	mov	r5, r3
 801bf14:	f7f1 ff52 	bl	800ddbc <__aeabi_dmul>
 801bf18:	4602      	mov	r2, r0
 801bf1a:	460b      	mov	r3, r1
 801bf1c:	4630      	mov	r0, r6
 801bf1e:	4639      	mov	r1, r7
 801bf20:	f7f1 fd94 	bl	800da4c <__aeabi_dsub>
 801bf24:	ec53 2b19 	vmov	r2, r3, d9
 801bf28:	4606      	mov	r6, r0
 801bf2a:	460f      	mov	r7, r1
 801bf2c:	4620      	mov	r0, r4
 801bf2e:	4629      	mov	r1, r5
 801bf30:	f7f1 fd8c 	bl	800da4c <__aeabi_dsub>
 801bf34:	4602      	mov	r2, r0
 801bf36:	460b      	mov	r3, r1
 801bf38:	4650      	mov	r0, sl
 801bf3a:	4659      	mov	r1, fp
 801bf3c:	f7f1 fd86 	bl	800da4c <__aeabi_dsub>
 801bf40:	4642      	mov	r2, r8
 801bf42:	464b      	mov	r3, r9
 801bf44:	f7f1 ff3a 	bl	800ddbc <__aeabi_dmul>
 801bf48:	4602      	mov	r2, r0
 801bf4a:	460b      	mov	r3, r1
 801bf4c:	4630      	mov	r0, r6
 801bf4e:	4639      	mov	r1, r7
 801bf50:	f7f1 fd7c 	bl	800da4c <__aeabi_dsub>
 801bf54:	ec53 2b1a 	vmov	r2, r3, d10
 801bf58:	f7f1 ff30 	bl	800ddbc <__aeabi_dmul>
 801bf5c:	ec53 2b18 	vmov	r2, r3, d8
 801bf60:	ec41 0b19 	vmov	d9, r0, r1
 801bf64:	ec51 0b18 	vmov	r0, r1, d8
 801bf68:	f7f1 ff28 	bl	800ddbc <__aeabi_dmul>
 801bf6c:	a37c      	add	r3, pc, #496	; (adr r3, 801c160 <__ieee754_pow+0x708>)
 801bf6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf72:	4604      	mov	r4, r0
 801bf74:	460d      	mov	r5, r1
 801bf76:	f7f1 ff21 	bl	800ddbc <__aeabi_dmul>
 801bf7a:	a37b      	add	r3, pc, #492	; (adr r3, 801c168 <__ieee754_pow+0x710>)
 801bf7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf80:	f7f1 fd66 	bl	800da50 <__adddf3>
 801bf84:	4622      	mov	r2, r4
 801bf86:	462b      	mov	r3, r5
 801bf88:	f7f1 ff18 	bl	800ddbc <__aeabi_dmul>
 801bf8c:	a378      	add	r3, pc, #480	; (adr r3, 801c170 <__ieee754_pow+0x718>)
 801bf8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf92:	f7f1 fd5d 	bl	800da50 <__adddf3>
 801bf96:	4622      	mov	r2, r4
 801bf98:	462b      	mov	r3, r5
 801bf9a:	f7f1 ff0f 	bl	800ddbc <__aeabi_dmul>
 801bf9e:	a376      	add	r3, pc, #472	; (adr r3, 801c178 <__ieee754_pow+0x720>)
 801bfa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bfa4:	f7f1 fd54 	bl	800da50 <__adddf3>
 801bfa8:	4622      	mov	r2, r4
 801bfaa:	462b      	mov	r3, r5
 801bfac:	f7f1 ff06 	bl	800ddbc <__aeabi_dmul>
 801bfb0:	a373      	add	r3, pc, #460	; (adr r3, 801c180 <__ieee754_pow+0x728>)
 801bfb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bfb6:	f7f1 fd4b 	bl	800da50 <__adddf3>
 801bfba:	4622      	mov	r2, r4
 801bfbc:	462b      	mov	r3, r5
 801bfbe:	f7f1 fefd 	bl	800ddbc <__aeabi_dmul>
 801bfc2:	a371      	add	r3, pc, #452	; (adr r3, 801c188 <__ieee754_pow+0x730>)
 801bfc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bfc8:	f7f1 fd42 	bl	800da50 <__adddf3>
 801bfcc:	4622      	mov	r2, r4
 801bfce:	4606      	mov	r6, r0
 801bfd0:	460f      	mov	r7, r1
 801bfd2:	462b      	mov	r3, r5
 801bfd4:	4620      	mov	r0, r4
 801bfd6:	4629      	mov	r1, r5
 801bfd8:	f7f1 fef0 	bl	800ddbc <__aeabi_dmul>
 801bfdc:	4602      	mov	r2, r0
 801bfde:	460b      	mov	r3, r1
 801bfe0:	4630      	mov	r0, r6
 801bfe2:	4639      	mov	r1, r7
 801bfe4:	f7f1 feea 	bl	800ddbc <__aeabi_dmul>
 801bfe8:	4642      	mov	r2, r8
 801bfea:	4604      	mov	r4, r0
 801bfec:	460d      	mov	r5, r1
 801bfee:	464b      	mov	r3, r9
 801bff0:	ec51 0b18 	vmov	r0, r1, d8
 801bff4:	f7f1 fd2c 	bl	800da50 <__adddf3>
 801bff8:	ec53 2b19 	vmov	r2, r3, d9
 801bffc:	f7f1 fede 	bl	800ddbc <__aeabi_dmul>
 801c000:	4622      	mov	r2, r4
 801c002:	462b      	mov	r3, r5
 801c004:	f7f1 fd24 	bl	800da50 <__adddf3>
 801c008:	4642      	mov	r2, r8
 801c00a:	4682      	mov	sl, r0
 801c00c:	468b      	mov	fp, r1
 801c00e:	464b      	mov	r3, r9
 801c010:	4640      	mov	r0, r8
 801c012:	4649      	mov	r1, r9
 801c014:	f7f1 fed2 	bl	800ddbc <__aeabi_dmul>
 801c018:	4b6b      	ldr	r3, [pc, #428]	; (801c1c8 <__ieee754_pow+0x770>)
 801c01a:	2200      	movs	r2, #0
 801c01c:	4606      	mov	r6, r0
 801c01e:	460f      	mov	r7, r1
 801c020:	f7f1 fd16 	bl	800da50 <__adddf3>
 801c024:	4652      	mov	r2, sl
 801c026:	465b      	mov	r3, fp
 801c028:	f7f1 fd12 	bl	800da50 <__adddf3>
 801c02c:	2000      	movs	r0, #0
 801c02e:	4604      	mov	r4, r0
 801c030:	460d      	mov	r5, r1
 801c032:	4602      	mov	r2, r0
 801c034:	460b      	mov	r3, r1
 801c036:	4640      	mov	r0, r8
 801c038:	4649      	mov	r1, r9
 801c03a:	f7f1 febf 	bl	800ddbc <__aeabi_dmul>
 801c03e:	4b62      	ldr	r3, [pc, #392]	; (801c1c8 <__ieee754_pow+0x770>)
 801c040:	4680      	mov	r8, r0
 801c042:	4689      	mov	r9, r1
 801c044:	2200      	movs	r2, #0
 801c046:	4620      	mov	r0, r4
 801c048:	4629      	mov	r1, r5
 801c04a:	f7f1 fcff 	bl	800da4c <__aeabi_dsub>
 801c04e:	4632      	mov	r2, r6
 801c050:	463b      	mov	r3, r7
 801c052:	f7f1 fcfb 	bl	800da4c <__aeabi_dsub>
 801c056:	4602      	mov	r2, r0
 801c058:	460b      	mov	r3, r1
 801c05a:	4650      	mov	r0, sl
 801c05c:	4659      	mov	r1, fp
 801c05e:	f7f1 fcf5 	bl	800da4c <__aeabi_dsub>
 801c062:	ec53 2b18 	vmov	r2, r3, d8
 801c066:	f7f1 fea9 	bl	800ddbc <__aeabi_dmul>
 801c06a:	4622      	mov	r2, r4
 801c06c:	4606      	mov	r6, r0
 801c06e:	460f      	mov	r7, r1
 801c070:	462b      	mov	r3, r5
 801c072:	ec51 0b19 	vmov	r0, r1, d9
 801c076:	f7f1 fea1 	bl	800ddbc <__aeabi_dmul>
 801c07a:	4602      	mov	r2, r0
 801c07c:	460b      	mov	r3, r1
 801c07e:	4630      	mov	r0, r6
 801c080:	4639      	mov	r1, r7
 801c082:	f7f1 fce5 	bl	800da50 <__adddf3>
 801c086:	4606      	mov	r6, r0
 801c088:	460f      	mov	r7, r1
 801c08a:	4602      	mov	r2, r0
 801c08c:	460b      	mov	r3, r1
 801c08e:	4640      	mov	r0, r8
 801c090:	4649      	mov	r1, r9
 801c092:	f7f1 fcdd 	bl	800da50 <__adddf3>
 801c096:	a33e      	add	r3, pc, #248	; (adr r3, 801c190 <__ieee754_pow+0x738>)
 801c098:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c09c:	2000      	movs	r0, #0
 801c09e:	4604      	mov	r4, r0
 801c0a0:	460d      	mov	r5, r1
 801c0a2:	f7f1 fe8b 	bl	800ddbc <__aeabi_dmul>
 801c0a6:	4642      	mov	r2, r8
 801c0a8:	ec41 0b18 	vmov	d8, r0, r1
 801c0ac:	464b      	mov	r3, r9
 801c0ae:	4620      	mov	r0, r4
 801c0b0:	4629      	mov	r1, r5
 801c0b2:	f7f1 fccb 	bl	800da4c <__aeabi_dsub>
 801c0b6:	4602      	mov	r2, r0
 801c0b8:	460b      	mov	r3, r1
 801c0ba:	4630      	mov	r0, r6
 801c0bc:	4639      	mov	r1, r7
 801c0be:	f7f1 fcc5 	bl	800da4c <__aeabi_dsub>
 801c0c2:	a335      	add	r3, pc, #212	; (adr r3, 801c198 <__ieee754_pow+0x740>)
 801c0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0c8:	f7f1 fe78 	bl	800ddbc <__aeabi_dmul>
 801c0cc:	a334      	add	r3, pc, #208	; (adr r3, 801c1a0 <__ieee754_pow+0x748>)
 801c0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0d2:	4606      	mov	r6, r0
 801c0d4:	460f      	mov	r7, r1
 801c0d6:	4620      	mov	r0, r4
 801c0d8:	4629      	mov	r1, r5
 801c0da:	f7f1 fe6f 	bl	800ddbc <__aeabi_dmul>
 801c0de:	4602      	mov	r2, r0
 801c0e0:	460b      	mov	r3, r1
 801c0e2:	4630      	mov	r0, r6
 801c0e4:	4639      	mov	r1, r7
 801c0e6:	f7f1 fcb3 	bl	800da50 <__adddf3>
 801c0ea:	9a07      	ldr	r2, [sp, #28]
 801c0ec:	4b37      	ldr	r3, [pc, #220]	; (801c1cc <__ieee754_pow+0x774>)
 801c0ee:	4413      	add	r3, r2
 801c0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0f4:	f7f1 fcac 	bl	800da50 <__adddf3>
 801c0f8:	4682      	mov	sl, r0
 801c0fa:	9805      	ldr	r0, [sp, #20]
 801c0fc:	468b      	mov	fp, r1
 801c0fe:	f7f1 fdf3 	bl	800dce8 <__aeabi_i2d>
 801c102:	9a07      	ldr	r2, [sp, #28]
 801c104:	4b32      	ldr	r3, [pc, #200]	; (801c1d0 <__ieee754_pow+0x778>)
 801c106:	4413      	add	r3, r2
 801c108:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c10c:	4606      	mov	r6, r0
 801c10e:	460f      	mov	r7, r1
 801c110:	4652      	mov	r2, sl
 801c112:	465b      	mov	r3, fp
 801c114:	ec51 0b18 	vmov	r0, r1, d8
 801c118:	f7f1 fc9a 	bl	800da50 <__adddf3>
 801c11c:	4642      	mov	r2, r8
 801c11e:	464b      	mov	r3, r9
 801c120:	f7f1 fc96 	bl	800da50 <__adddf3>
 801c124:	4632      	mov	r2, r6
 801c126:	463b      	mov	r3, r7
 801c128:	f7f1 fc92 	bl	800da50 <__adddf3>
 801c12c:	2000      	movs	r0, #0
 801c12e:	4632      	mov	r2, r6
 801c130:	463b      	mov	r3, r7
 801c132:	4604      	mov	r4, r0
 801c134:	460d      	mov	r5, r1
 801c136:	f7f1 fc89 	bl	800da4c <__aeabi_dsub>
 801c13a:	4642      	mov	r2, r8
 801c13c:	464b      	mov	r3, r9
 801c13e:	f7f1 fc85 	bl	800da4c <__aeabi_dsub>
 801c142:	ec53 2b18 	vmov	r2, r3, d8
 801c146:	f7f1 fc81 	bl	800da4c <__aeabi_dsub>
 801c14a:	4602      	mov	r2, r0
 801c14c:	460b      	mov	r3, r1
 801c14e:	4650      	mov	r0, sl
 801c150:	4659      	mov	r1, fp
 801c152:	e610      	b.n	801bd76 <__ieee754_pow+0x31e>
 801c154:	2401      	movs	r4, #1
 801c156:	e6a1      	b.n	801be9c <__ieee754_pow+0x444>
 801c158:	ed9f 7b13 	vldr	d7, [pc, #76]	; 801c1a8 <__ieee754_pow+0x750>
 801c15c:	e617      	b.n	801bd8e <__ieee754_pow+0x336>
 801c15e:	bf00      	nop
 801c160:	4a454eef 	.word	0x4a454eef
 801c164:	3fca7e28 	.word	0x3fca7e28
 801c168:	93c9db65 	.word	0x93c9db65
 801c16c:	3fcd864a 	.word	0x3fcd864a
 801c170:	a91d4101 	.word	0xa91d4101
 801c174:	3fd17460 	.word	0x3fd17460
 801c178:	518f264d 	.word	0x518f264d
 801c17c:	3fd55555 	.word	0x3fd55555
 801c180:	db6fabff 	.word	0xdb6fabff
 801c184:	3fdb6db6 	.word	0x3fdb6db6
 801c188:	33333303 	.word	0x33333303
 801c18c:	3fe33333 	.word	0x3fe33333
 801c190:	e0000000 	.word	0xe0000000
 801c194:	3feec709 	.word	0x3feec709
 801c198:	dc3a03fd 	.word	0xdc3a03fd
 801c19c:	3feec709 	.word	0x3feec709
 801c1a0:	145b01f5 	.word	0x145b01f5
 801c1a4:	be3e2fe0 	.word	0xbe3e2fe0
 801c1a8:	00000000 	.word	0x00000000
 801c1ac:	3ff00000 	.word	0x3ff00000
 801c1b0:	7ff00000 	.word	0x7ff00000
 801c1b4:	43400000 	.word	0x43400000
 801c1b8:	0003988e 	.word	0x0003988e
 801c1bc:	000bb679 	.word	0x000bb679
 801c1c0:	0801ca40 	.word	0x0801ca40
 801c1c4:	3ff00000 	.word	0x3ff00000
 801c1c8:	40080000 	.word	0x40080000
 801c1cc:	0801ca60 	.word	0x0801ca60
 801c1d0:	0801ca50 	.word	0x0801ca50
 801c1d4:	a3b3      	add	r3, pc, #716	; (adr r3, 801c4a4 <__ieee754_pow+0xa4c>)
 801c1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1da:	4640      	mov	r0, r8
 801c1dc:	4649      	mov	r1, r9
 801c1de:	f7f1 fc37 	bl	800da50 <__adddf3>
 801c1e2:	4622      	mov	r2, r4
 801c1e4:	ec41 0b1a 	vmov	d10, r0, r1
 801c1e8:	462b      	mov	r3, r5
 801c1ea:	4630      	mov	r0, r6
 801c1ec:	4639      	mov	r1, r7
 801c1ee:	f7f1 fc2d 	bl	800da4c <__aeabi_dsub>
 801c1f2:	4602      	mov	r2, r0
 801c1f4:	460b      	mov	r3, r1
 801c1f6:	ec51 0b1a 	vmov	r0, r1, d10
 801c1fa:	f7f2 f86f 	bl	800e2dc <__aeabi_dcmpgt>
 801c1fe:	2800      	cmp	r0, #0
 801c200:	f47f ae04 	bne.w	801be0c <__ieee754_pow+0x3b4>
 801c204:	4aa2      	ldr	r2, [pc, #648]	; (801c490 <__ieee754_pow+0xa38>)
 801c206:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801c20a:	4293      	cmp	r3, r2
 801c20c:	f340 8107 	ble.w	801c41e <__ieee754_pow+0x9c6>
 801c210:	151b      	asrs	r3, r3, #20
 801c212:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801c216:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801c21a:	fa4a fa03 	asr.w	sl, sl, r3
 801c21e:	44da      	add	sl, fp
 801c220:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801c224:	489b      	ldr	r0, [pc, #620]	; (801c494 <__ieee754_pow+0xa3c>)
 801c226:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801c22a:	4108      	asrs	r0, r1
 801c22c:	ea00 030a 	and.w	r3, r0, sl
 801c230:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801c234:	f1c1 0114 	rsb	r1, r1, #20
 801c238:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801c23c:	fa4a fa01 	asr.w	sl, sl, r1
 801c240:	f1bb 0f00 	cmp.w	fp, #0
 801c244:	f04f 0200 	mov.w	r2, #0
 801c248:	4620      	mov	r0, r4
 801c24a:	4629      	mov	r1, r5
 801c24c:	bfb8      	it	lt
 801c24e:	f1ca 0a00 	rsblt	sl, sl, #0
 801c252:	f7f1 fbfb 	bl	800da4c <__aeabi_dsub>
 801c256:	ec41 0b19 	vmov	d9, r0, r1
 801c25a:	4642      	mov	r2, r8
 801c25c:	464b      	mov	r3, r9
 801c25e:	ec51 0b19 	vmov	r0, r1, d9
 801c262:	f7f1 fbf5 	bl	800da50 <__adddf3>
 801c266:	a37a      	add	r3, pc, #488	; (adr r3, 801c450 <__ieee754_pow+0x9f8>)
 801c268:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c26c:	2000      	movs	r0, #0
 801c26e:	4604      	mov	r4, r0
 801c270:	460d      	mov	r5, r1
 801c272:	f7f1 fda3 	bl	800ddbc <__aeabi_dmul>
 801c276:	ec53 2b19 	vmov	r2, r3, d9
 801c27a:	4606      	mov	r6, r0
 801c27c:	460f      	mov	r7, r1
 801c27e:	4620      	mov	r0, r4
 801c280:	4629      	mov	r1, r5
 801c282:	f7f1 fbe3 	bl	800da4c <__aeabi_dsub>
 801c286:	4602      	mov	r2, r0
 801c288:	460b      	mov	r3, r1
 801c28a:	4640      	mov	r0, r8
 801c28c:	4649      	mov	r1, r9
 801c28e:	f7f1 fbdd 	bl	800da4c <__aeabi_dsub>
 801c292:	a371      	add	r3, pc, #452	; (adr r3, 801c458 <__ieee754_pow+0xa00>)
 801c294:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c298:	f7f1 fd90 	bl	800ddbc <__aeabi_dmul>
 801c29c:	a370      	add	r3, pc, #448	; (adr r3, 801c460 <__ieee754_pow+0xa08>)
 801c29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2a2:	4680      	mov	r8, r0
 801c2a4:	4689      	mov	r9, r1
 801c2a6:	4620      	mov	r0, r4
 801c2a8:	4629      	mov	r1, r5
 801c2aa:	f7f1 fd87 	bl	800ddbc <__aeabi_dmul>
 801c2ae:	4602      	mov	r2, r0
 801c2b0:	460b      	mov	r3, r1
 801c2b2:	4640      	mov	r0, r8
 801c2b4:	4649      	mov	r1, r9
 801c2b6:	f7f1 fbcb 	bl	800da50 <__adddf3>
 801c2ba:	4604      	mov	r4, r0
 801c2bc:	460d      	mov	r5, r1
 801c2be:	4602      	mov	r2, r0
 801c2c0:	460b      	mov	r3, r1
 801c2c2:	4630      	mov	r0, r6
 801c2c4:	4639      	mov	r1, r7
 801c2c6:	f7f1 fbc3 	bl	800da50 <__adddf3>
 801c2ca:	4632      	mov	r2, r6
 801c2cc:	463b      	mov	r3, r7
 801c2ce:	4680      	mov	r8, r0
 801c2d0:	4689      	mov	r9, r1
 801c2d2:	f7f1 fbbb 	bl	800da4c <__aeabi_dsub>
 801c2d6:	4602      	mov	r2, r0
 801c2d8:	460b      	mov	r3, r1
 801c2da:	4620      	mov	r0, r4
 801c2dc:	4629      	mov	r1, r5
 801c2de:	f7f1 fbb5 	bl	800da4c <__aeabi_dsub>
 801c2e2:	4642      	mov	r2, r8
 801c2e4:	4606      	mov	r6, r0
 801c2e6:	460f      	mov	r7, r1
 801c2e8:	464b      	mov	r3, r9
 801c2ea:	4640      	mov	r0, r8
 801c2ec:	4649      	mov	r1, r9
 801c2ee:	f7f1 fd65 	bl	800ddbc <__aeabi_dmul>
 801c2f2:	a35d      	add	r3, pc, #372	; (adr r3, 801c468 <__ieee754_pow+0xa10>)
 801c2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2f8:	4604      	mov	r4, r0
 801c2fa:	460d      	mov	r5, r1
 801c2fc:	f7f1 fd5e 	bl	800ddbc <__aeabi_dmul>
 801c300:	a35b      	add	r3, pc, #364	; (adr r3, 801c470 <__ieee754_pow+0xa18>)
 801c302:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c306:	f7f1 fba1 	bl	800da4c <__aeabi_dsub>
 801c30a:	4622      	mov	r2, r4
 801c30c:	462b      	mov	r3, r5
 801c30e:	f7f1 fd55 	bl	800ddbc <__aeabi_dmul>
 801c312:	a359      	add	r3, pc, #356	; (adr r3, 801c478 <__ieee754_pow+0xa20>)
 801c314:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c318:	f7f1 fb9a 	bl	800da50 <__adddf3>
 801c31c:	4622      	mov	r2, r4
 801c31e:	462b      	mov	r3, r5
 801c320:	f7f1 fd4c 	bl	800ddbc <__aeabi_dmul>
 801c324:	a356      	add	r3, pc, #344	; (adr r3, 801c480 <__ieee754_pow+0xa28>)
 801c326:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c32a:	f7f1 fb8f 	bl	800da4c <__aeabi_dsub>
 801c32e:	4622      	mov	r2, r4
 801c330:	462b      	mov	r3, r5
 801c332:	f7f1 fd43 	bl	800ddbc <__aeabi_dmul>
 801c336:	a354      	add	r3, pc, #336	; (adr r3, 801c488 <__ieee754_pow+0xa30>)
 801c338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c33c:	f7f1 fb88 	bl	800da50 <__adddf3>
 801c340:	4622      	mov	r2, r4
 801c342:	462b      	mov	r3, r5
 801c344:	f7f1 fd3a 	bl	800ddbc <__aeabi_dmul>
 801c348:	4602      	mov	r2, r0
 801c34a:	460b      	mov	r3, r1
 801c34c:	4640      	mov	r0, r8
 801c34e:	4649      	mov	r1, r9
 801c350:	f7f1 fb7c 	bl	800da4c <__aeabi_dsub>
 801c354:	4604      	mov	r4, r0
 801c356:	460d      	mov	r5, r1
 801c358:	4602      	mov	r2, r0
 801c35a:	460b      	mov	r3, r1
 801c35c:	4640      	mov	r0, r8
 801c35e:	4649      	mov	r1, r9
 801c360:	f7f1 fd2c 	bl	800ddbc <__aeabi_dmul>
 801c364:	2200      	movs	r2, #0
 801c366:	ec41 0b19 	vmov	d9, r0, r1
 801c36a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801c36e:	4620      	mov	r0, r4
 801c370:	4629      	mov	r1, r5
 801c372:	f7f1 fb6b 	bl	800da4c <__aeabi_dsub>
 801c376:	4602      	mov	r2, r0
 801c378:	460b      	mov	r3, r1
 801c37a:	ec51 0b19 	vmov	r0, r1, d9
 801c37e:	f7f1 fe47 	bl	800e010 <__aeabi_ddiv>
 801c382:	4632      	mov	r2, r6
 801c384:	4604      	mov	r4, r0
 801c386:	460d      	mov	r5, r1
 801c388:	463b      	mov	r3, r7
 801c38a:	4640      	mov	r0, r8
 801c38c:	4649      	mov	r1, r9
 801c38e:	f7f1 fd15 	bl	800ddbc <__aeabi_dmul>
 801c392:	4632      	mov	r2, r6
 801c394:	463b      	mov	r3, r7
 801c396:	f7f1 fb5b 	bl	800da50 <__adddf3>
 801c39a:	4602      	mov	r2, r0
 801c39c:	460b      	mov	r3, r1
 801c39e:	4620      	mov	r0, r4
 801c3a0:	4629      	mov	r1, r5
 801c3a2:	f7f1 fb53 	bl	800da4c <__aeabi_dsub>
 801c3a6:	4642      	mov	r2, r8
 801c3a8:	464b      	mov	r3, r9
 801c3aa:	f7f1 fb4f 	bl	800da4c <__aeabi_dsub>
 801c3ae:	460b      	mov	r3, r1
 801c3b0:	4602      	mov	r2, r0
 801c3b2:	4939      	ldr	r1, [pc, #228]	; (801c498 <__ieee754_pow+0xa40>)
 801c3b4:	2000      	movs	r0, #0
 801c3b6:	f7f1 fb49 	bl	800da4c <__aeabi_dsub>
 801c3ba:	ec41 0b10 	vmov	d0, r0, r1
 801c3be:	ee10 3a90 	vmov	r3, s1
 801c3c2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801c3c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801c3ca:	da2b      	bge.n	801c424 <__ieee754_pow+0x9cc>
 801c3cc:	4650      	mov	r0, sl
 801c3ce:	f000 f877 	bl	801c4c0 <scalbn>
 801c3d2:	ec51 0b10 	vmov	r0, r1, d0
 801c3d6:	ec53 2b18 	vmov	r2, r3, d8
 801c3da:	f7ff bbee 	b.w	801bbba <__ieee754_pow+0x162>
 801c3de:	4b2f      	ldr	r3, [pc, #188]	; (801c49c <__ieee754_pow+0xa44>)
 801c3e0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801c3e4:	429e      	cmp	r6, r3
 801c3e6:	f77f af0d 	ble.w	801c204 <__ieee754_pow+0x7ac>
 801c3ea:	4b2d      	ldr	r3, [pc, #180]	; (801c4a0 <__ieee754_pow+0xa48>)
 801c3ec:	440b      	add	r3, r1
 801c3ee:	4303      	orrs	r3, r0
 801c3f0:	d009      	beq.n	801c406 <__ieee754_pow+0x9ae>
 801c3f2:	ec51 0b18 	vmov	r0, r1, d8
 801c3f6:	2200      	movs	r2, #0
 801c3f8:	2300      	movs	r3, #0
 801c3fa:	f7f1 ff51 	bl	800e2a0 <__aeabi_dcmplt>
 801c3fe:	3800      	subs	r0, #0
 801c400:	bf18      	it	ne
 801c402:	2001      	movne	r0, #1
 801c404:	e448      	b.n	801bc98 <__ieee754_pow+0x240>
 801c406:	4622      	mov	r2, r4
 801c408:	462b      	mov	r3, r5
 801c40a:	f7f1 fb1f 	bl	800da4c <__aeabi_dsub>
 801c40e:	4642      	mov	r2, r8
 801c410:	464b      	mov	r3, r9
 801c412:	f7f1 ff59 	bl	800e2c8 <__aeabi_dcmpge>
 801c416:	2800      	cmp	r0, #0
 801c418:	f43f aef4 	beq.w	801c204 <__ieee754_pow+0x7ac>
 801c41c:	e7e9      	b.n	801c3f2 <__ieee754_pow+0x99a>
 801c41e:	f04f 0a00 	mov.w	sl, #0
 801c422:	e71a      	b.n	801c25a <__ieee754_pow+0x802>
 801c424:	ec51 0b10 	vmov	r0, r1, d0
 801c428:	4619      	mov	r1, r3
 801c42a:	e7d4      	b.n	801c3d6 <__ieee754_pow+0x97e>
 801c42c:	491a      	ldr	r1, [pc, #104]	; (801c498 <__ieee754_pow+0xa40>)
 801c42e:	2000      	movs	r0, #0
 801c430:	f7ff bb31 	b.w	801ba96 <__ieee754_pow+0x3e>
 801c434:	2000      	movs	r0, #0
 801c436:	2100      	movs	r1, #0
 801c438:	f7ff bb2d 	b.w	801ba96 <__ieee754_pow+0x3e>
 801c43c:	4630      	mov	r0, r6
 801c43e:	4639      	mov	r1, r7
 801c440:	f7ff bb29 	b.w	801ba96 <__ieee754_pow+0x3e>
 801c444:	9204      	str	r2, [sp, #16]
 801c446:	f7ff bb7b 	b.w	801bb40 <__ieee754_pow+0xe8>
 801c44a:	2300      	movs	r3, #0
 801c44c:	f7ff bb65 	b.w	801bb1a <__ieee754_pow+0xc2>
 801c450:	00000000 	.word	0x00000000
 801c454:	3fe62e43 	.word	0x3fe62e43
 801c458:	fefa39ef 	.word	0xfefa39ef
 801c45c:	3fe62e42 	.word	0x3fe62e42
 801c460:	0ca86c39 	.word	0x0ca86c39
 801c464:	be205c61 	.word	0xbe205c61
 801c468:	72bea4d0 	.word	0x72bea4d0
 801c46c:	3e663769 	.word	0x3e663769
 801c470:	c5d26bf1 	.word	0xc5d26bf1
 801c474:	3ebbbd41 	.word	0x3ebbbd41
 801c478:	af25de2c 	.word	0xaf25de2c
 801c47c:	3f11566a 	.word	0x3f11566a
 801c480:	16bebd93 	.word	0x16bebd93
 801c484:	3f66c16c 	.word	0x3f66c16c
 801c488:	5555553e 	.word	0x5555553e
 801c48c:	3fc55555 	.word	0x3fc55555
 801c490:	3fe00000 	.word	0x3fe00000
 801c494:	fff00000 	.word	0xfff00000
 801c498:	3ff00000 	.word	0x3ff00000
 801c49c:	4090cbff 	.word	0x4090cbff
 801c4a0:	3f6f3400 	.word	0x3f6f3400
 801c4a4:	652b82fe 	.word	0x652b82fe
 801c4a8:	3c971547 	.word	0x3c971547

0801c4ac <fabs>:
 801c4ac:	ec51 0b10 	vmov	r0, r1, d0
 801c4b0:	ee10 2a10 	vmov	r2, s0
 801c4b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c4b8:	ec43 2b10 	vmov	d0, r2, r3
 801c4bc:	4770      	bx	lr
	...

0801c4c0 <scalbn>:
 801c4c0:	b570      	push	{r4, r5, r6, lr}
 801c4c2:	ec55 4b10 	vmov	r4, r5, d0
 801c4c6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801c4ca:	4606      	mov	r6, r0
 801c4cc:	462b      	mov	r3, r5
 801c4ce:	b999      	cbnz	r1, 801c4f8 <scalbn+0x38>
 801c4d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801c4d4:	4323      	orrs	r3, r4
 801c4d6:	d03f      	beq.n	801c558 <scalbn+0x98>
 801c4d8:	4b35      	ldr	r3, [pc, #212]	; (801c5b0 <scalbn+0xf0>)
 801c4da:	4629      	mov	r1, r5
 801c4dc:	ee10 0a10 	vmov	r0, s0
 801c4e0:	2200      	movs	r2, #0
 801c4e2:	f7f1 fc6b 	bl	800ddbc <__aeabi_dmul>
 801c4e6:	4b33      	ldr	r3, [pc, #204]	; (801c5b4 <scalbn+0xf4>)
 801c4e8:	429e      	cmp	r6, r3
 801c4ea:	4604      	mov	r4, r0
 801c4ec:	460d      	mov	r5, r1
 801c4ee:	da10      	bge.n	801c512 <scalbn+0x52>
 801c4f0:	a327      	add	r3, pc, #156	; (adr r3, 801c590 <scalbn+0xd0>)
 801c4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4f6:	e01f      	b.n	801c538 <scalbn+0x78>
 801c4f8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801c4fc:	4291      	cmp	r1, r2
 801c4fe:	d10c      	bne.n	801c51a <scalbn+0x5a>
 801c500:	ee10 2a10 	vmov	r2, s0
 801c504:	4620      	mov	r0, r4
 801c506:	4629      	mov	r1, r5
 801c508:	f7f1 faa2 	bl	800da50 <__adddf3>
 801c50c:	4604      	mov	r4, r0
 801c50e:	460d      	mov	r5, r1
 801c510:	e022      	b.n	801c558 <scalbn+0x98>
 801c512:	460b      	mov	r3, r1
 801c514:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801c518:	3936      	subs	r1, #54	; 0x36
 801c51a:	f24c 3250 	movw	r2, #50000	; 0xc350
 801c51e:	4296      	cmp	r6, r2
 801c520:	dd0d      	ble.n	801c53e <scalbn+0x7e>
 801c522:	2d00      	cmp	r5, #0
 801c524:	a11c      	add	r1, pc, #112	; (adr r1, 801c598 <scalbn+0xd8>)
 801c526:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c52a:	da02      	bge.n	801c532 <scalbn+0x72>
 801c52c:	a11c      	add	r1, pc, #112	; (adr r1, 801c5a0 <scalbn+0xe0>)
 801c52e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c532:	a319      	add	r3, pc, #100	; (adr r3, 801c598 <scalbn+0xd8>)
 801c534:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c538:	f7f1 fc40 	bl	800ddbc <__aeabi_dmul>
 801c53c:	e7e6      	b.n	801c50c <scalbn+0x4c>
 801c53e:	1872      	adds	r2, r6, r1
 801c540:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801c544:	428a      	cmp	r2, r1
 801c546:	dcec      	bgt.n	801c522 <scalbn+0x62>
 801c548:	2a00      	cmp	r2, #0
 801c54a:	dd08      	ble.n	801c55e <scalbn+0x9e>
 801c54c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c550:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801c554:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801c558:	ec45 4b10 	vmov	d0, r4, r5
 801c55c:	bd70      	pop	{r4, r5, r6, pc}
 801c55e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801c562:	da08      	bge.n	801c576 <scalbn+0xb6>
 801c564:	2d00      	cmp	r5, #0
 801c566:	a10a      	add	r1, pc, #40	; (adr r1, 801c590 <scalbn+0xd0>)
 801c568:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c56c:	dac0      	bge.n	801c4f0 <scalbn+0x30>
 801c56e:	a10e      	add	r1, pc, #56	; (adr r1, 801c5a8 <scalbn+0xe8>)
 801c570:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c574:	e7bc      	b.n	801c4f0 <scalbn+0x30>
 801c576:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c57a:	3236      	adds	r2, #54	; 0x36
 801c57c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801c580:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801c584:	4620      	mov	r0, r4
 801c586:	4b0c      	ldr	r3, [pc, #48]	; (801c5b8 <scalbn+0xf8>)
 801c588:	2200      	movs	r2, #0
 801c58a:	e7d5      	b.n	801c538 <scalbn+0x78>
 801c58c:	f3af 8000 	nop.w
 801c590:	c2f8f359 	.word	0xc2f8f359
 801c594:	01a56e1f 	.word	0x01a56e1f
 801c598:	8800759c 	.word	0x8800759c
 801c59c:	7e37e43c 	.word	0x7e37e43c
 801c5a0:	8800759c 	.word	0x8800759c
 801c5a4:	fe37e43c 	.word	0xfe37e43c
 801c5a8:	c2f8f359 	.word	0xc2f8f359
 801c5ac:	81a56e1f 	.word	0x81a56e1f
 801c5b0:	43500000 	.word	0x43500000
 801c5b4:	ffff3cb0 	.word	0xffff3cb0
 801c5b8:	3c900000 	.word	0x3c900000

0801c5bc <with_errno>:
 801c5bc:	b570      	push	{r4, r5, r6, lr}
 801c5be:	4604      	mov	r4, r0
 801c5c0:	460d      	mov	r5, r1
 801c5c2:	4616      	mov	r6, r2
 801c5c4:	f7ff f944 	bl	801b850 <__errno>
 801c5c8:	4629      	mov	r1, r5
 801c5ca:	6006      	str	r6, [r0, #0]
 801c5cc:	4620      	mov	r0, r4
 801c5ce:	bd70      	pop	{r4, r5, r6, pc}

0801c5d0 <xflow>:
 801c5d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c5d2:	4614      	mov	r4, r2
 801c5d4:	461d      	mov	r5, r3
 801c5d6:	b108      	cbz	r0, 801c5dc <xflow+0xc>
 801c5d8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801c5dc:	e9cd 2300 	strd	r2, r3, [sp]
 801c5e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c5e4:	4620      	mov	r0, r4
 801c5e6:	4629      	mov	r1, r5
 801c5e8:	f7f1 fbe8 	bl	800ddbc <__aeabi_dmul>
 801c5ec:	2222      	movs	r2, #34	; 0x22
 801c5ee:	b003      	add	sp, #12
 801c5f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c5f4:	f7ff bfe2 	b.w	801c5bc <with_errno>

0801c5f8 <__math_uflow>:
 801c5f8:	b508      	push	{r3, lr}
 801c5fa:	2200      	movs	r2, #0
 801c5fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801c600:	f7ff ffe6 	bl	801c5d0 <xflow>
 801c604:	ec41 0b10 	vmov	d0, r0, r1
 801c608:	bd08      	pop	{r3, pc}

0801c60a <__math_oflow>:
 801c60a:	b508      	push	{r3, lr}
 801c60c:	2200      	movs	r2, #0
 801c60e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801c612:	f7ff ffdd 	bl	801c5d0 <xflow>
 801c616:	ec41 0b10 	vmov	d0, r0, r1
 801c61a:	bd08      	pop	{r3, pc}

0801c61c <__ieee754_sqrt>:
 801c61c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c620:	ec55 4b10 	vmov	r4, r5, d0
 801c624:	4e67      	ldr	r6, [pc, #412]	; (801c7c4 <__ieee754_sqrt+0x1a8>)
 801c626:	43ae      	bics	r6, r5
 801c628:	ee10 0a10 	vmov	r0, s0
 801c62c:	ee10 2a10 	vmov	r2, s0
 801c630:	4629      	mov	r1, r5
 801c632:	462b      	mov	r3, r5
 801c634:	d10d      	bne.n	801c652 <__ieee754_sqrt+0x36>
 801c636:	f7f1 fbc1 	bl	800ddbc <__aeabi_dmul>
 801c63a:	4602      	mov	r2, r0
 801c63c:	460b      	mov	r3, r1
 801c63e:	4620      	mov	r0, r4
 801c640:	4629      	mov	r1, r5
 801c642:	f7f1 fa05 	bl	800da50 <__adddf3>
 801c646:	4604      	mov	r4, r0
 801c648:	460d      	mov	r5, r1
 801c64a:	ec45 4b10 	vmov	d0, r4, r5
 801c64e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c652:	2d00      	cmp	r5, #0
 801c654:	dc0b      	bgt.n	801c66e <__ieee754_sqrt+0x52>
 801c656:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801c65a:	4326      	orrs	r6, r4
 801c65c:	d0f5      	beq.n	801c64a <__ieee754_sqrt+0x2e>
 801c65e:	b135      	cbz	r5, 801c66e <__ieee754_sqrt+0x52>
 801c660:	f7f1 f9f4 	bl	800da4c <__aeabi_dsub>
 801c664:	4602      	mov	r2, r0
 801c666:	460b      	mov	r3, r1
 801c668:	f7f1 fcd2 	bl	800e010 <__aeabi_ddiv>
 801c66c:	e7eb      	b.n	801c646 <__ieee754_sqrt+0x2a>
 801c66e:	1509      	asrs	r1, r1, #20
 801c670:	f000 808d 	beq.w	801c78e <__ieee754_sqrt+0x172>
 801c674:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c678:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801c67c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801c680:	07c9      	lsls	r1, r1, #31
 801c682:	bf5c      	itt	pl
 801c684:	005b      	lslpl	r3, r3, #1
 801c686:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801c68a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801c68e:	bf58      	it	pl
 801c690:	0052      	lslpl	r2, r2, #1
 801c692:	2500      	movs	r5, #0
 801c694:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801c698:	1076      	asrs	r6, r6, #1
 801c69a:	0052      	lsls	r2, r2, #1
 801c69c:	f04f 0e16 	mov.w	lr, #22
 801c6a0:	46ac      	mov	ip, r5
 801c6a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801c6a6:	eb0c 0001 	add.w	r0, ip, r1
 801c6aa:	4298      	cmp	r0, r3
 801c6ac:	bfde      	ittt	le
 801c6ae:	1a1b      	suble	r3, r3, r0
 801c6b0:	eb00 0c01 	addle.w	ip, r0, r1
 801c6b4:	186d      	addle	r5, r5, r1
 801c6b6:	005b      	lsls	r3, r3, #1
 801c6b8:	f1be 0e01 	subs.w	lr, lr, #1
 801c6bc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801c6c0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801c6c4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801c6c8:	d1ed      	bne.n	801c6a6 <__ieee754_sqrt+0x8a>
 801c6ca:	4674      	mov	r4, lr
 801c6cc:	2720      	movs	r7, #32
 801c6ce:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801c6d2:	4563      	cmp	r3, ip
 801c6d4:	eb01 000e 	add.w	r0, r1, lr
 801c6d8:	dc02      	bgt.n	801c6e0 <__ieee754_sqrt+0xc4>
 801c6da:	d113      	bne.n	801c704 <__ieee754_sqrt+0xe8>
 801c6dc:	4290      	cmp	r0, r2
 801c6de:	d811      	bhi.n	801c704 <__ieee754_sqrt+0xe8>
 801c6e0:	2800      	cmp	r0, #0
 801c6e2:	eb00 0e01 	add.w	lr, r0, r1
 801c6e6:	da57      	bge.n	801c798 <__ieee754_sqrt+0x17c>
 801c6e8:	f1be 0f00 	cmp.w	lr, #0
 801c6ec:	db54      	blt.n	801c798 <__ieee754_sqrt+0x17c>
 801c6ee:	f10c 0801 	add.w	r8, ip, #1
 801c6f2:	eba3 030c 	sub.w	r3, r3, ip
 801c6f6:	4290      	cmp	r0, r2
 801c6f8:	bf88      	it	hi
 801c6fa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801c6fe:	1a12      	subs	r2, r2, r0
 801c700:	440c      	add	r4, r1
 801c702:	46c4      	mov	ip, r8
 801c704:	005b      	lsls	r3, r3, #1
 801c706:	3f01      	subs	r7, #1
 801c708:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801c70c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801c710:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801c714:	d1dd      	bne.n	801c6d2 <__ieee754_sqrt+0xb6>
 801c716:	4313      	orrs	r3, r2
 801c718:	d01b      	beq.n	801c752 <__ieee754_sqrt+0x136>
 801c71a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 801c7c8 <__ieee754_sqrt+0x1ac>
 801c71e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801c7cc <__ieee754_sqrt+0x1b0>
 801c722:	e9da 0100 	ldrd	r0, r1, [sl]
 801c726:	e9db 2300 	ldrd	r2, r3, [fp]
 801c72a:	f7f1 f98f 	bl	800da4c <__aeabi_dsub>
 801c72e:	e9da 8900 	ldrd	r8, r9, [sl]
 801c732:	4602      	mov	r2, r0
 801c734:	460b      	mov	r3, r1
 801c736:	4640      	mov	r0, r8
 801c738:	4649      	mov	r1, r9
 801c73a:	f7f1 fdbb 	bl	800e2b4 <__aeabi_dcmple>
 801c73e:	b140      	cbz	r0, 801c752 <__ieee754_sqrt+0x136>
 801c740:	f1b4 3fff 	cmp.w	r4, #4294967295
 801c744:	e9da 0100 	ldrd	r0, r1, [sl]
 801c748:	e9db 2300 	ldrd	r2, r3, [fp]
 801c74c:	d126      	bne.n	801c79c <__ieee754_sqrt+0x180>
 801c74e:	3501      	adds	r5, #1
 801c750:	463c      	mov	r4, r7
 801c752:	106a      	asrs	r2, r5, #1
 801c754:	0863      	lsrs	r3, r4, #1
 801c756:	07e9      	lsls	r1, r5, #31
 801c758:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801c75c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801c760:	bf48      	it	mi
 801c762:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801c766:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801c76a:	461c      	mov	r4, r3
 801c76c:	e76d      	b.n	801c64a <__ieee754_sqrt+0x2e>
 801c76e:	0ad3      	lsrs	r3, r2, #11
 801c770:	3815      	subs	r0, #21
 801c772:	0552      	lsls	r2, r2, #21
 801c774:	2b00      	cmp	r3, #0
 801c776:	d0fa      	beq.n	801c76e <__ieee754_sqrt+0x152>
 801c778:	02dc      	lsls	r4, r3, #11
 801c77a:	d50a      	bpl.n	801c792 <__ieee754_sqrt+0x176>
 801c77c:	f1c1 0420 	rsb	r4, r1, #32
 801c780:	fa22 f404 	lsr.w	r4, r2, r4
 801c784:	1e4d      	subs	r5, r1, #1
 801c786:	408a      	lsls	r2, r1
 801c788:	4323      	orrs	r3, r4
 801c78a:	1b41      	subs	r1, r0, r5
 801c78c:	e772      	b.n	801c674 <__ieee754_sqrt+0x58>
 801c78e:	4608      	mov	r0, r1
 801c790:	e7f0      	b.n	801c774 <__ieee754_sqrt+0x158>
 801c792:	005b      	lsls	r3, r3, #1
 801c794:	3101      	adds	r1, #1
 801c796:	e7ef      	b.n	801c778 <__ieee754_sqrt+0x15c>
 801c798:	46e0      	mov	r8, ip
 801c79a:	e7aa      	b.n	801c6f2 <__ieee754_sqrt+0xd6>
 801c79c:	f7f1 f958 	bl	800da50 <__adddf3>
 801c7a0:	e9da 8900 	ldrd	r8, r9, [sl]
 801c7a4:	4602      	mov	r2, r0
 801c7a6:	460b      	mov	r3, r1
 801c7a8:	4640      	mov	r0, r8
 801c7aa:	4649      	mov	r1, r9
 801c7ac:	f7f1 fd78 	bl	800e2a0 <__aeabi_dcmplt>
 801c7b0:	b120      	cbz	r0, 801c7bc <__ieee754_sqrt+0x1a0>
 801c7b2:	1ca0      	adds	r0, r4, #2
 801c7b4:	bf08      	it	eq
 801c7b6:	3501      	addeq	r5, #1
 801c7b8:	3402      	adds	r4, #2
 801c7ba:	e7ca      	b.n	801c752 <__ieee754_sqrt+0x136>
 801c7bc:	3401      	adds	r4, #1
 801c7be:	f024 0401 	bic.w	r4, r4, #1
 801c7c2:	e7c6      	b.n	801c752 <__ieee754_sqrt+0x136>
 801c7c4:	7ff00000 	.word	0x7ff00000
 801c7c8:	20000068 	.word	0x20000068
 801c7cc:	20000070 	.word	0x20000070

0801c7d0 <_init>:
 801c7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c7d2:	bf00      	nop
 801c7d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c7d6:	bc08      	pop	{r3}
 801c7d8:	469e      	mov	lr, r3
 801c7da:	4770      	bx	lr

0801c7dc <_fini>:
 801c7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c7de:	bf00      	nop
 801c7e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c7e2:	bc08      	pop	{r3}
 801c7e4:	469e      	mov	lr, r3
 801c7e6:	4770      	bx	lr
