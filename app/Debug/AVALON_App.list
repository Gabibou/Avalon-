
AVALON_App.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08004000  08004000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001491c  080041e0  080041e0  000041e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  08018b00  08018b00  00018b00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018d80  08018d80  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  08018d80  08018d80  00018d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018d88  08018d88  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018d88  08018d88  00018d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018d8c  08018d8c  00018d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08018d90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000054ec  200001f0  08018f80  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200056dc  08018f80  000256dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003788d  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007409  00000000  00000000  00057aad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000027f0  00000000  00000000  0005eeb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000024c8  00000000  00000000  000616a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000334d6  00000000  00000000  00063b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000376e2  00000000  00000000  00097046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001289d1  00000000  00000000  000ce728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  001f70f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000adec  00000000  00000000  001f71c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080041e0 <__do_global_dtors_aux>:
 80041e0:	b510      	push	{r4, lr}
 80041e2:	4c05      	ldr	r4, [pc, #20]	; (80041f8 <__do_global_dtors_aux+0x18>)
 80041e4:	7823      	ldrb	r3, [r4, #0]
 80041e6:	b933      	cbnz	r3, 80041f6 <__do_global_dtors_aux+0x16>
 80041e8:	4b04      	ldr	r3, [pc, #16]	; (80041fc <__do_global_dtors_aux+0x1c>)
 80041ea:	b113      	cbz	r3, 80041f2 <__do_global_dtors_aux+0x12>
 80041ec:	4804      	ldr	r0, [pc, #16]	; (8004200 <__do_global_dtors_aux+0x20>)
 80041ee:	f3af 8000 	nop.w
 80041f2:	2301      	movs	r3, #1
 80041f4:	7023      	strb	r3, [r4, #0]
 80041f6:	bd10      	pop	{r4, pc}
 80041f8:	200001f0 	.word	0x200001f0
 80041fc:	00000000 	.word	0x00000000
 8004200:	08018ae4 	.word	0x08018ae4

08004204 <frame_dummy>:
 8004204:	b508      	push	{r3, lr}
 8004206:	4b03      	ldr	r3, [pc, #12]	; (8004214 <frame_dummy+0x10>)
 8004208:	b11b      	cbz	r3, 8004212 <frame_dummy+0xe>
 800420a:	4903      	ldr	r1, [pc, #12]	; (8004218 <frame_dummy+0x14>)
 800420c:	4803      	ldr	r0, [pc, #12]	; (800421c <frame_dummy+0x18>)
 800420e:	f3af 8000 	nop.w
 8004212:	bd08      	pop	{r3, pc}
 8004214:	00000000 	.word	0x00000000
 8004218:	200001f4 	.word	0x200001f4
 800421c:	08018ae4 	.word	0x08018ae4

08004220 <strcmp>:
 8004220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004228:	2a01      	cmp	r2, #1
 800422a:	bf28      	it	cs
 800422c:	429a      	cmpcs	r2, r3
 800422e:	d0f7      	beq.n	8004220 <strcmp>
 8004230:	1ad0      	subs	r0, r2, r3
 8004232:	4770      	bx	lr

08004234 <strlen>:
 8004234:	4603      	mov	r3, r0
 8004236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800423a:	2a00      	cmp	r2, #0
 800423c:	d1fb      	bne.n	8004236 <strlen+0x2>
 800423e:	1a18      	subs	r0, r3, r0
 8004240:	3801      	subs	r0, #1
 8004242:	4770      	bx	lr

08004244 <__aeabi_drsub>:
 8004244:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8004248:	e002      	b.n	8004250 <__adddf3>
 800424a:	bf00      	nop

0800424c <__aeabi_dsub>:
 800424c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08004250 <__adddf3>:
 8004250:	b530      	push	{r4, r5, lr}
 8004252:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8004256:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800425a:	ea94 0f05 	teq	r4, r5
 800425e:	bf08      	it	eq
 8004260:	ea90 0f02 	teqeq	r0, r2
 8004264:	bf1f      	itttt	ne
 8004266:	ea54 0c00 	orrsne.w	ip, r4, r0
 800426a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800426e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8004272:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004276:	f000 80e2 	beq.w	800443e <__adddf3+0x1ee>
 800427a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800427e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8004282:	bfb8      	it	lt
 8004284:	426d      	neglt	r5, r5
 8004286:	dd0c      	ble.n	80042a2 <__adddf3+0x52>
 8004288:	442c      	add	r4, r5
 800428a:	ea80 0202 	eor.w	r2, r0, r2
 800428e:	ea81 0303 	eor.w	r3, r1, r3
 8004292:	ea82 0000 	eor.w	r0, r2, r0
 8004296:	ea83 0101 	eor.w	r1, r3, r1
 800429a:	ea80 0202 	eor.w	r2, r0, r2
 800429e:	ea81 0303 	eor.w	r3, r1, r3
 80042a2:	2d36      	cmp	r5, #54	; 0x36
 80042a4:	bf88      	it	hi
 80042a6:	bd30      	pophi	{r4, r5, pc}
 80042a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80042ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80042b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80042b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80042b8:	d002      	beq.n	80042c0 <__adddf3+0x70>
 80042ba:	4240      	negs	r0, r0
 80042bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80042c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80042c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80042c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80042cc:	d002      	beq.n	80042d4 <__adddf3+0x84>
 80042ce:	4252      	negs	r2, r2
 80042d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80042d4:	ea94 0f05 	teq	r4, r5
 80042d8:	f000 80a7 	beq.w	800442a <__adddf3+0x1da>
 80042dc:	f1a4 0401 	sub.w	r4, r4, #1
 80042e0:	f1d5 0e20 	rsbs	lr, r5, #32
 80042e4:	db0d      	blt.n	8004302 <__adddf3+0xb2>
 80042e6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80042ea:	fa22 f205 	lsr.w	r2, r2, r5
 80042ee:	1880      	adds	r0, r0, r2
 80042f0:	f141 0100 	adc.w	r1, r1, #0
 80042f4:	fa03 f20e 	lsl.w	r2, r3, lr
 80042f8:	1880      	adds	r0, r0, r2
 80042fa:	fa43 f305 	asr.w	r3, r3, r5
 80042fe:	4159      	adcs	r1, r3
 8004300:	e00e      	b.n	8004320 <__adddf3+0xd0>
 8004302:	f1a5 0520 	sub.w	r5, r5, #32
 8004306:	f10e 0e20 	add.w	lr, lr, #32
 800430a:	2a01      	cmp	r2, #1
 800430c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8004310:	bf28      	it	cs
 8004312:	f04c 0c02 	orrcs.w	ip, ip, #2
 8004316:	fa43 f305 	asr.w	r3, r3, r5
 800431a:	18c0      	adds	r0, r0, r3
 800431c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8004320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004324:	d507      	bpl.n	8004336 <__adddf3+0xe6>
 8004326:	f04f 0e00 	mov.w	lr, #0
 800432a:	f1dc 0c00 	rsbs	ip, ip, #0
 800432e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8004332:	eb6e 0101 	sbc.w	r1, lr, r1
 8004336:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800433a:	d31b      	bcc.n	8004374 <__adddf3+0x124>
 800433c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8004340:	d30c      	bcc.n	800435c <__adddf3+0x10c>
 8004342:	0849      	lsrs	r1, r1, #1
 8004344:	ea5f 0030 	movs.w	r0, r0, rrx
 8004348:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800434c:	f104 0401 	add.w	r4, r4, #1
 8004350:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8004354:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8004358:	f080 809a 	bcs.w	8004490 <__adddf3+0x240>
 800435c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8004360:	bf08      	it	eq
 8004362:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004366:	f150 0000 	adcs.w	r0, r0, #0
 800436a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800436e:	ea41 0105 	orr.w	r1, r1, r5
 8004372:	bd30      	pop	{r4, r5, pc}
 8004374:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8004378:	4140      	adcs	r0, r0
 800437a:	eb41 0101 	adc.w	r1, r1, r1
 800437e:	3c01      	subs	r4, #1
 8004380:	bf28      	it	cs
 8004382:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8004386:	d2e9      	bcs.n	800435c <__adddf3+0x10c>
 8004388:	f091 0f00 	teq	r1, #0
 800438c:	bf04      	itt	eq
 800438e:	4601      	moveq	r1, r0
 8004390:	2000      	moveq	r0, #0
 8004392:	fab1 f381 	clz	r3, r1
 8004396:	bf08      	it	eq
 8004398:	3320      	addeq	r3, #32
 800439a:	f1a3 030b 	sub.w	r3, r3, #11
 800439e:	f1b3 0220 	subs.w	r2, r3, #32
 80043a2:	da0c      	bge.n	80043be <__adddf3+0x16e>
 80043a4:	320c      	adds	r2, #12
 80043a6:	dd08      	ble.n	80043ba <__adddf3+0x16a>
 80043a8:	f102 0c14 	add.w	ip, r2, #20
 80043ac:	f1c2 020c 	rsb	r2, r2, #12
 80043b0:	fa01 f00c 	lsl.w	r0, r1, ip
 80043b4:	fa21 f102 	lsr.w	r1, r1, r2
 80043b8:	e00c      	b.n	80043d4 <__adddf3+0x184>
 80043ba:	f102 0214 	add.w	r2, r2, #20
 80043be:	bfd8      	it	le
 80043c0:	f1c2 0c20 	rsble	ip, r2, #32
 80043c4:	fa01 f102 	lsl.w	r1, r1, r2
 80043c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80043cc:	bfdc      	itt	le
 80043ce:	ea41 010c 	orrle.w	r1, r1, ip
 80043d2:	4090      	lslle	r0, r2
 80043d4:	1ae4      	subs	r4, r4, r3
 80043d6:	bfa2      	ittt	ge
 80043d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80043dc:	4329      	orrge	r1, r5
 80043de:	bd30      	popge	{r4, r5, pc}
 80043e0:	ea6f 0404 	mvn.w	r4, r4
 80043e4:	3c1f      	subs	r4, #31
 80043e6:	da1c      	bge.n	8004422 <__adddf3+0x1d2>
 80043e8:	340c      	adds	r4, #12
 80043ea:	dc0e      	bgt.n	800440a <__adddf3+0x1ba>
 80043ec:	f104 0414 	add.w	r4, r4, #20
 80043f0:	f1c4 0220 	rsb	r2, r4, #32
 80043f4:	fa20 f004 	lsr.w	r0, r0, r4
 80043f8:	fa01 f302 	lsl.w	r3, r1, r2
 80043fc:	ea40 0003 	orr.w	r0, r0, r3
 8004400:	fa21 f304 	lsr.w	r3, r1, r4
 8004404:	ea45 0103 	orr.w	r1, r5, r3
 8004408:	bd30      	pop	{r4, r5, pc}
 800440a:	f1c4 040c 	rsb	r4, r4, #12
 800440e:	f1c4 0220 	rsb	r2, r4, #32
 8004412:	fa20 f002 	lsr.w	r0, r0, r2
 8004416:	fa01 f304 	lsl.w	r3, r1, r4
 800441a:	ea40 0003 	orr.w	r0, r0, r3
 800441e:	4629      	mov	r1, r5
 8004420:	bd30      	pop	{r4, r5, pc}
 8004422:	fa21 f004 	lsr.w	r0, r1, r4
 8004426:	4629      	mov	r1, r5
 8004428:	bd30      	pop	{r4, r5, pc}
 800442a:	f094 0f00 	teq	r4, #0
 800442e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8004432:	bf06      	itte	eq
 8004434:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8004438:	3401      	addeq	r4, #1
 800443a:	3d01      	subne	r5, #1
 800443c:	e74e      	b.n	80042dc <__adddf3+0x8c>
 800443e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004442:	bf18      	it	ne
 8004444:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004448:	d029      	beq.n	800449e <__adddf3+0x24e>
 800444a:	ea94 0f05 	teq	r4, r5
 800444e:	bf08      	it	eq
 8004450:	ea90 0f02 	teqeq	r0, r2
 8004454:	d005      	beq.n	8004462 <__adddf3+0x212>
 8004456:	ea54 0c00 	orrs.w	ip, r4, r0
 800445a:	bf04      	itt	eq
 800445c:	4619      	moveq	r1, r3
 800445e:	4610      	moveq	r0, r2
 8004460:	bd30      	pop	{r4, r5, pc}
 8004462:	ea91 0f03 	teq	r1, r3
 8004466:	bf1e      	ittt	ne
 8004468:	2100      	movne	r1, #0
 800446a:	2000      	movne	r0, #0
 800446c:	bd30      	popne	{r4, r5, pc}
 800446e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8004472:	d105      	bne.n	8004480 <__adddf3+0x230>
 8004474:	0040      	lsls	r0, r0, #1
 8004476:	4149      	adcs	r1, r1
 8004478:	bf28      	it	cs
 800447a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800447e:	bd30      	pop	{r4, r5, pc}
 8004480:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8004484:	bf3c      	itt	cc
 8004486:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800448a:	bd30      	popcc	{r4, r5, pc}
 800448c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004490:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8004494:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004498:	f04f 0000 	mov.w	r0, #0
 800449c:	bd30      	pop	{r4, r5, pc}
 800449e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80044a2:	bf1a      	itte	ne
 80044a4:	4619      	movne	r1, r3
 80044a6:	4610      	movne	r0, r2
 80044a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80044ac:	bf1c      	itt	ne
 80044ae:	460b      	movne	r3, r1
 80044b0:	4602      	movne	r2, r0
 80044b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80044b6:	bf06      	itte	eq
 80044b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80044bc:	ea91 0f03 	teqeq	r1, r3
 80044c0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80044c4:	bd30      	pop	{r4, r5, pc}
 80044c6:	bf00      	nop

080044c8 <__aeabi_ui2d>:
 80044c8:	f090 0f00 	teq	r0, #0
 80044cc:	bf04      	itt	eq
 80044ce:	2100      	moveq	r1, #0
 80044d0:	4770      	bxeq	lr
 80044d2:	b530      	push	{r4, r5, lr}
 80044d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80044d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80044dc:	f04f 0500 	mov.w	r5, #0
 80044e0:	f04f 0100 	mov.w	r1, #0
 80044e4:	e750      	b.n	8004388 <__adddf3+0x138>
 80044e6:	bf00      	nop

080044e8 <__aeabi_i2d>:
 80044e8:	f090 0f00 	teq	r0, #0
 80044ec:	bf04      	itt	eq
 80044ee:	2100      	moveq	r1, #0
 80044f0:	4770      	bxeq	lr
 80044f2:	b530      	push	{r4, r5, lr}
 80044f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80044f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80044fc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8004500:	bf48      	it	mi
 8004502:	4240      	negmi	r0, r0
 8004504:	f04f 0100 	mov.w	r1, #0
 8004508:	e73e      	b.n	8004388 <__adddf3+0x138>
 800450a:	bf00      	nop

0800450c <__aeabi_f2d>:
 800450c:	0042      	lsls	r2, r0, #1
 800450e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8004512:	ea4f 0131 	mov.w	r1, r1, rrx
 8004516:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800451a:	bf1f      	itttt	ne
 800451c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8004520:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8004524:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8004528:	4770      	bxne	lr
 800452a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800452e:	bf08      	it	eq
 8004530:	4770      	bxeq	lr
 8004532:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8004536:	bf04      	itt	eq
 8004538:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800453c:	4770      	bxeq	lr
 800453e:	b530      	push	{r4, r5, lr}
 8004540:	f44f 7460 	mov.w	r4, #896	; 0x380
 8004544:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004548:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800454c:	e71c      	b.n	8004388 <__adddf3+0x138>
 800454e:	bf00      	nop

08004550 <__aeabi_ul2d>:
 8004550:	ea50 0201 	orrs.w	r2, r0, r1
 8004554:	bf08      	it	eq
 8004556:	4770      	bxeq	lr
 8004558:	b530      	push	{r4, r5, lr}
 800455a:	f04f 0500 	mov.w	r5, #0
 800455e:	e00a      	b.n	8004576 <__aeabi_l2d+0x16>

08004560 <__aeabi_l2d>:
 8004560:	ea50 0201 	orrs.w	r2, r0, r1
 8004564:	bf08      	it	eq
 8004566:	4770      	bxeq	lr
 8004568:	b530      	push	{r4, r5, lr}
 800456a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800456e:	d502      	bpl.n	8004576 <__aeabi_l2d+0x16>
 8004570:	4240      	negs	r0, r0
 8004572:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004576:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800457a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800457e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8004582:	f43f aed8 	beq.w	8004336 <__adddf3+0xe6>
 8004586:	f04f 0203 	mov.w	r2, #3
 800458a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800458e:	bf18      	it	ne
 8004590:	3203      	addne	r2, #3
 8004592:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8004596:	bf18      	it	ne
 8004598:	3203      	addne	r2, #3
 800459a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800459e:	f1c2 0320 	rsb	r3, r2, #32
 80045a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80045a6:	fa20 f002 	lsr.w	r0, r0, r2
 80045aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80045ae:	ea40 000e 	orr.w	r0, r0, lr
 80045b2:	fa21 f102 	lsr.w	r1, r1, r2
 80045b6:	4414      	add	r4, r2
 80045b8:	e6bd      	b.n	8004336 <__adddf3+0xe6>
 80045ba:	bf00      	nop

080045bc <__aeabi_dmul>:
 80045bc:	b570      	push	{r4, r5, r6, lr}
 80045be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80045c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80045c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80045ca:	bf1d      	ittte	ne
 80045cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80045d0:	ea94 0f0c 	teqne	r4, ip
 80045d4:	ea95 0f0c 	teqne	r5, ip
 80045d8:	f000 f8de 	bleq	8004798 <__aeabi_dmul+0x1dc>
 80045dc:	442c      	add	r4, r5
 80045de:	ea81 0603 	eor.w	r6, r1, r3
 80045e2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80045e6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80045ea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80045ee:	bf18      	it	ne
 80045f0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80045f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80045f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045fc:	d038      	beq.n	8004670 <__aeabi_dmul+0xb4>
 80045fe:	fba0 ce02 	umull	ip, lr, r0, r2
 8004602:	f04f 0500 	mov.w	r5, #0
 8004606:	fbe1 e502 	umlal	lr, r5, r1, r2
 800460a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800460e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8004612:	f04f 0600 	mov.w	r6, #0
 8004616:	fbe1 5603 	umlal	r5, r6, r1, r3
 800461a:	f09c 0f00 	teq	ip, #0
 800461e:	bf18      	it	ne
 8004620:	f04e 0e01 	orrne.w	lr, lr, #1
 8004624:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8004628:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800462c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8004630:	d204      	bcs.n	800463c <__aeabi_dmul+0x80>
 8004632:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8004636:	416d      	adcs	r5, r5
 8004638:	eb46 0606 	adc.w	r6, r6, r6
 800463c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8004640:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8004644:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8004648:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800464c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8004650:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8004654:	bf88      	it	hi
 8004656:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800465a:	d81e      	bhi.n	800469a <__aeabi_dmul+0xde>
 800465c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8004660:	bf08      	it	eq
 8004662:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8004666:	f150 0000 	adcs.w	r0, r0, #0
 800466a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800466e:	bd70      	pop	{r4, r5, r6, pc}
 8004670:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8004674:	ea46 0101 	orr.w	r1, r6, r1
 8004678:	ea40 0002 	orr.w	r0, r0, r2
 800467c:	ea81 0103 	eor.w	r1, r1, r3
 8004680:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8004684:	bfc2      	ittt	gt
 8004686:	ebd4 050c 	rsbsgt	r5, r4, ip
 800468a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800468e:	bd70      	popgt	{r4, r5, r6, pc}
 8004690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004694:	f04f 0e00 	mov.w	lr, #0
 8004698:	3c01      	subs	r4, #1
 800469a:	f300 80ab 	bgt.w	80047f4 <__aeabi_dmul+0x238>
 800469e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80046a2:	bfde      	ittt	le
 80046a4:	2000      	movle	r0, #0
 80046a6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80046aa:	bd70      	pople	{r4, r5, r6, pc}
 80046ac:	f1c4 0400 	rsb	r4, r4, #0
 80046b0:	3c20      	subs	r4, #32
 80046b2:	da35      	bge.n	8004720 <__aeabi_dmul+0x164>
 80046b4:	340c      	adds	r4, #12
 80046b6:	dc1b      	bgt.n	80046f0 <__aeabi_dmul+0x134>
 80046b8:	f104 0414 	add.w	r4, r4, #20
 80046bc:	f1c4 0520 	rsb	r5, r4, #32
 80046c0:	fa00 f305 	lsl.w	r3, r0, r5
 80046c4:	fa20 f004 	lsr.w	r0, r0, r4
 80046c8:	fa01 f205 	lsl.w	r2, r1, r5
 80046cc:	ea40 0002 	orr.w	r0, r0, r2
 80046d0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80046d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80046d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80046dc:	fa21 f604 	lsr.w	r6, r1, r4
 80046e0:	eb42 0106 	adc.w	r1, r2, r6
 80046e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80046e8:	bf08      	it	eq
 80046ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80046ee:	bd70      	pop	{r4, r5, r6, pc}
 80046f0:	f1c4 040c 	rsb	r4, r4, #12
 80046f4:	f1c4 0520 	rsb	r5, r4, #32
 80046f8:	fa00 f304 	lsl.w	r3, r0, r4
 80046fc:	fa20 f005 	lsr.w	r0, r0, r5
 8004700:	fa01 f204 	lsl.w	r2, r1, r4
 8004704:	ea40 0002 	orr.w	r0, r0, r2
 8004708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800470c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8004710:	f141 0100 	adc.w	r1, r1, #0
 8004714:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004718:	bf08      	it	eq
 800471a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800471e:	bd70      	pop	{r4, r5, r6, pc}
 8004720:	f1c4 0520 	rsb	r5, r4, #32
 8004724:	fa00 f205 	lsl.w	r2, r0, r5
 8004728:	ea4e 0e02 	orr.w	lr, lr, r2
 800472c:	fa20 f304 	lsr.w	r3, r0, r4
 8004730:	fa01 f205 	lsl.w	r2, r1, r5
 8004734:	ea43 0302 	orr.w	r3, r3, r2
 8004738:	fa21 f004 	lsr.w	r0, r1, r4
 800473c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004740:	fa21 f204 	lsr.w	r2, r1, r4
 8004744:	ea20 0002 	bic.w	r0, r0, r2
 8004748:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800474c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004750:	bf08      	it	eq
 8004752:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004756:	bd70      	pop	{r4, r5, r6, pc}
 8004758:	f094 0f00 	teq	r4, #0
 800475c:	d10f      	bne.n	800477e <__aeabi_dmul+0x1c2>
 800475e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8004762:	0040      	lsls	r0, r0, #1
 8004764:	eb41 0101 	adc.w	r1, r1, r1
 8004768:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800476c:	bf08      	it	eq
 800476e:	3c01      	subeq	r4, #1
 8004770:	d0f7      	beq.n	8004762 <__aeabi_dmul+0x1a6>
 8004772:	ea41 0106 	orr.w	r1, r1, r6
 8004776:	f095 0f00 	teq	r5, #0
 800477a:	bf18      	it	ne
 800477c:	4770      	bxne	lr
 800477e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8004782:	0052      	lsls	r2, r2, #1
 8004784:	eb43 0303 	adc.w	r3, r3, r3
 8004788:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800478c:	bf08      	it	eq
 800478e:	3d01      	subeq	r5, #1
 8004790:	d0f7      	beq.n	8004782 <__aeabi_dmul+0x1c6>
 8004792:	ea43 0306 	orr.w	r3, r3, r6
 8004796:	4770      	bx	lr
 8004798:	ea94 0f0c 	teq	r4, ip
 800479c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80047a0:	bf18      	it	ne
 80047a2:	ea95 0f0c 	teqne	r5, ip
 80047a6:	d00c      	beq.n	80047c2 <__aeabi_dmul+0x206>
 80047a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80047ac:	bf18      	it	ne
 80047ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80047b2:	d1d1      	bne.n	8004758 <__aeabi_dmul+0x19c>
 80047b4:	ea81 0103 	eor.w	r1, r1, r3
 80047b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80047bc:	f04f 0000 	mov.w	r0, #0
 80047c0:	bd70      	pop	{r4, r5, r6, pc}
 80047c2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80047c6:	bf06      	itte	eq
 80047c8:	4610      	moveq	r0, r2
 80047ca:	4619      	moveq	r1, r3
 80047cc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80047d0:	d019      	beq.n	8004806 <__aeabi_dmul+0x24a>
 80047d2:	ea94 0f0c 	teq	r4, ip
 80047d6:	d102      	bne.n	80047de <__aeabi_dmul+0x222>
 80047d8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80047dc:	d113      	bne.n	8004806 <__aeabi_dmul+0x24a>
 80047de:	ea95 0f0c 	teq	r5, ip
 80047e2:	d105      	bne.n	80047f0 <__aeabi_dmul+0x234>
 80047e4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80047e8:	bf1c      	itt	ne
 80047ea:	4610      	movne	r0, r2
 80047ec:	4619      	movne	r1, r3
 80047ee:	d10a      	bne.n	8004806 <__aeabi_dmul+0x24a>
 80047f0:	ea81 0103 	eor.w	r1, r1, r3
 80047f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80047f8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80047fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004800:	f04f 0000 	mov.w	r0, #0
 8004804:	bd70      	pop	{r4, r5, r6, pc}
 8004806:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800480a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800480e:	bd70      	pop	{r4, r5, r6, pc}

08004810 <__aeabi_ddiv>:
 8004810:	b570      	push	{r4, r5, r6, lr}
 8004812:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8004816:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800481a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800481e:	bf1d      	ittte	ne
 8004820:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8004824:	ea94 0f0c 	teqne	r4, ip
 8004828:	ea95 0f0c 	teqne	r5, ip
 800482c:	f000 f8a7 	bleq	800497e <__aeabi_ddiv+0x16e>
 8004830:	eba4 0405 	sub.w	r4, r4, r5
 8004834:	ea81 0e03 	eor.w	lr, r1, r3
 8004838:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800483c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8004840:	f000 8088 	beq.w	8004954 <__aeabi_ddiv+0x144>
 8004844:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004848:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800484c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8004850:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8004854:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8004858:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800485c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8004860:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8004864:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8004868:	429d      	cmp	r5, r3
 800486a:	bf08      	it	eq
 800486c:	4296      	cmpeq	r6, r2
 800486e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8004872:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8004876:	d202      	bcs.n	800487e <__aeabi_ddiv+0x6e>
 8004878:	085b      	lsrs	r3, r3, #1
 800487a:	ea4f 0232 	mov.w	r2, r2, rrx
 800487e:	1ab6      	subs	r6, r6, r2
 8004880:	eb65 0503 	sbc.w	r5, r5, r3
 8004884:	085b      	lsrs	r3, r3, #1
 8004886:	ea4f 0232 	mov.w	r2, r2, rrx
 800488a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800488e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8004892:	ebb6 0e02 	subs.w	lr, r6, r2
 8004896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800489a:	bf22      	ittt	cs
 800489c:	1ab6      	subcs	r6, r6, r2
 800489e:	4675      	movcs	r5, lr
 80048a0:	ea40 000c 	orrcs.w	r0, r0, ip
 80048a4:	085b      	lsrs	r3, r3, #1
 80048a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80048aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80048ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80048b2:	bf22      	ittt	cs
 80048b4:	1ab6      	subcs	r6, r6, r2
 80048b6:	4675      	movcs	r5, lr
 80048b8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80048bc:	085b      	lsrs	r3, r3, #1
 80048be:	ea4f 0232 	mov.w	r2, r2, rrx
 80048c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80048c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80048ca:	bf22      	ittt	cs
 80048cc:	1ab6      	subcs	r6, r6, r2
 80048ce:	4675      	movcs	r5, lr
 80048d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80048d4:	085b      	lsrs	r3, r3, #1
 80048d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80048da:	ebb6 0e02 	subs.w	lr, r6, r2
 80048de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80048e2:	bf22      	ittt	cs
 80048e4:	1ab6      	subcs	r6, r6, r2
 80048e6:	4675      	movcs	r5, lr
 80048e8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80048ec:	ea55 0e06 	orrs.w	lr, r5, r6
 80048f0:	d018      	beq.n	8004924 <__aeabi_ddiv+0x114>
 80048f2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80048f6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80048fa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80048fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8004902:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8004906:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800490a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800490e:	d1c0      	bne.n	8004892 <__aeabi_ddiv+0x82>
 8004910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004914:	d10b      	bne.n	800492e <__aeabi_ddiv+0x11e>
 8004916:	ea41 0100 	orr.w	r1, r1, r0
 800491a:	f04f 0000 	mov.w	r0, #0
 800491e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8004922:	e7b6      	b.n	8004892 <__aeabi_ddiv+0x82>
 8004924:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004928:	bf04      	itt	eq
 800492a:	4301      	orreq	r1, r0
 800492c:	2000      	moveq	r0, #0
 800492e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8004932:	bf88      	it	hi
 8004934:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8004938:	f63f aeaf 	bhi.w	800469a <__aeabi_dmul+0xde>
 800493c:	ebb5 0c03 	subs.w	ip, r5, r3
 8004940:	bf04      	itt	eq
 8004942:	ebb6 0c02 	subseq.w	ip, r6, r2
 8004946:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800494a:	f150 0000 	adcs.w	r0, r0, #0
 800494e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004952:	bd70      	pop	{r4, r5, r6, pc}
 8004954:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8004958:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800495c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8004960:	bfc2      	ittt	gt
 8004962:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004966:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800496a:	bd70      	popgt	{r4, r5, r6, pc}
 800496c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004970:	f04f 0e00 	mov.w	lr, #0
 8004974:	3c01      	subs	r4, #1
 8004976:	e690      	b.n	800469a <__aeabi_dmul+0xde>
 8004978:	ea45 0e06 	orr.w	lr, r5, r6
 800497c:	e68d      	b.n	800469a <__aeabi_dmul+0xde>
 800497e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8004982:	ea94 0f0c 	teq	r4, ip
 8004986:	bf08      	it	eq
 8004988:	ea95 0f0c 	teqeq	r5, ip
 800498c:	f43f af3b 	beq.w	8004806 <__aeabi_dmul+0x24a>
 8004990:	ea94 0f0c 	teq	r4, ip
 8004994:	d10a      	bne.n	80049ac <__aeabi_ddiv+0x19c>
 8004996:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800499a:	f47f af34 	bne.w	8004806 <__aeabi_dmul+0x24a>
 800499e:	ea95 0f0c 	teq	r5, ip
 80049a2:	f47f af25 	bne.w	80047f0 <__aeabi_dmul+0x234>
 80049a6:	4610      	mov	r0, r2
 80049a8:	4619      	mov	r1, r3
 80049aa:	e72c      	b.n	8004806 <__aeabi_dmul+0x24a>
 80049ac:	ea95 0f0c 	teq	r5, ip
 80049b0:	d106      	bne.n	80049c0 <__aeabi_ddiv+0x1b0>
 80049b2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80049b6:	f43f aefd 	beq.w	80047b4 <__aeabi_dmul+0x1f8>
 80049ba:	4610      	mov	r0, r2
 80049bc:	4619      	mov	r1, r3
 80049be:	e722      	b.n	8004806 <__aeabi_dmul+0x24a>
 80049c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80049c4:	bf18      	it	ne
 80049c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80049ca:	f47f aec5 	bne.w	8004758 <__aeabi_dmul+0x19c>
 80049ce:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80049d2:	f47f af0d 	bne.w	80047f0 <__aeabi_dmul+0x234>
 80049d6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80049da:	f47f aeeb 	bne.w	80047b4 <__aeabi_dmul+0x1f8>
 80049de:	e712      	b.n	8004806 <__aeabi_dmul+0x24a>

080049e0 <__gedf2>:
 80049e0:	f04f 3cff 	mov.w	ip, #4294967295
 80049e4:	e006      	b.n	80049f4 <__cmpdf2+0x4>
 80049e6:	bf00      	nop

080049e8 <__ledf2>:
 80049e8:	f04f 0c01 	mov.w	ip, #1
 80049ec:	e002      	b.n	80049f4 <__cmpdf2+0x4>
 80049ee:	bf00      	nop

080049f0 <__cmpdf2>:
 80049f0:	f04f 0c01 	mov.w	ip, #1
 80049f4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80049f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80049fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004a04:	bf18      	it	ne
 8004a06:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8004a0a:	d01b      	beq.n	8004a44 <__cmpdf2+0x54>
 8004a0c:	b001      	add	sp, #4
 8004a0e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8004a12:	bf0c      	ite	eq
 8004a14:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8004a18:	ea91 0f03 	teqne	r1, r3
 8004a1c:	bf02      	ittt	eq
 8004a1e:	ea90 0f02 	teqeq	r0, r2
 8004a22:	2000      	moveq	r0, #0
 8004a24:	4770      	bxeq	lr
 8004a26:	f110 0f00 	cmn.w	r0, #0
 8004a2a:	ea91 0f03 	teq	r1, r3
 8004a2e:	bf58      	it	pl
 8004a30:	4299      	cmppl	r1, r3
 8004a32:	bf08      	it	eq
 8004a34:	4290      	cmpeq	r0, r2
 8004a36:	bf2c      	ite	cs
 8004a38:	17d8      	asrcs	r0, r3, #31
 8004a3a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8004a3e:	f040 0001 	orr.w	r0, r0, #1
 8004a42:	4770      	bx	lr
 8004a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004a4c:	d102      	bne.n	8004a54 <__cmpdf2+0x64>
 8004a4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8004a52:	d107      	bne.n	8004a64 <__cmpdf2+0x74>
 8004a54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004a5c:	d1d6      	bne.n	8004a0c <__cmpdf2+0x1c>
 8004a5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8004a62:	d0d3      	beq.n	8004a0c <__cmpdf2+0x1c>
 8004a64:	f85d 0b04 	ldr.w	r0, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop

08004a6c <__aeabi_cdrcmple>:
 8004a6c:	4684      	mov	ip, r0
 8004a6e:	4610      	mov	r0, r2
 8004a70:	4662      	mov	r2, ip
 8004a72:	468c      	mov	ip, r1
 8004a74:	4619      	mov	r1, r3
 8004a76:	4663      	mov	r3, ip
 8004a78:	e000      	b.n	8004a7c <__aeabi_cdcmpeq>
 8004a7a:	bf00      	nop

08004a7c <__aeabi_cdcmpeq>:
 8004a7c:	b501      	push	{r0, lr}
 8004a7e:	f7ff ffb7 	bl	80049f0 <__cmpdf2>
 8004a82:	2800      	cmp	r0, #0
 8004a84:	bf48      	it	mi
 8004a86:	f110 0f00 	cmnmi.w	r0, #0
 8004a8a:	bd01      	pop	{r0, pc}

08004a8c <__aeabi_dcmpeq>:
 8004a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004a90:	f7ff fff4 	bl	8004a7c <__aeabi_cdcmpeq>
 8004a94:	bf0c      	ite	eq
 8004a96:	2001      	moveq	r0, #1
 8004a98:	2000      	movne	r0, #0
 8004a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8004a9e:	bf00      	nop

08004aa0 <__aeabi_dcmplt>:
 8004aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004aa4:	f7ff ffea 	bl	8004a7c <__aeabi_cdcmpeq>
 8004aa8:	bf34      	ite	cc
 8004aaa:	2001      	movcc	r0, #1
 8004aac:	2000      	movcs	r0, #0
 8004aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8004ab2:	bf00      	nop

08004ab4 <__aeabi_dcmple>:
 8004ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004ab8:	f7ff ffe0 	bl	8004a7c <__aeabi_cdcmpeq>
 8004abc:	bf94      	ite	ls
 8004abe:	2001      	movls	r0, #1
 8004ac0:	2000      	movhi	r0, #0
 8004ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8004ac6:	bf00      	nop

08004ac8 <__aeabi_dcmpge>:
 8004ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004acc:	f7ff ffce 	bl	8004a6c <__aeabi_cdrcmple>
 8004ad0:	bf94      	ite	ls
 8004ad2:	2001      	movls	r0, #1
 8004ad4:	2000      	movhi	r0, #0
 8004ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8004ada:	bf00      	nop

08004adc <__aeabi_dcmpgt>:
 8004adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004ae0:	f7ff ffc4 	bl	8004a6c <__aeabi_cdrcmple>
 8004ae4:	bf34      	ite	cc
 8004ae6:	2001      	movcc	r0, #1
 8004ae8:	2000      	movcs	r0, #0
 8004aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8004aee:	bf00      	nop

08004af0 <__aeabi_dcmpun>:
 8004af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004af8:	d102      	bne.n	8004b00 <__aeabi_dcmpun+0x10>
 8004afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8004afe:	d10a      	bne.n	8004b16 <__aeabi_dcmpun+0x26>
 8004b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004b08:	d102      	bne.n	8004b10 <__aeabi_dcmpun+0x20>
 8004b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8004b0e:	d102      	bne.n	8004b16 <__aeabi_dcmpun+0x26>
 8004b10:	f04f 0000 	mov.w	r0, #0
 8004b14:	4770      	bx	lr
 8004b16:	f04f 0001 	mov.w	r0, #1
 8004b1a:	4770      	bx	lr

08004b1c <__aeabi_d2f>:
 8004b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8004b20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8004b24:	bf24      	itt	cs
 8004b26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8004b2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8004b2e:	d90d      	bls.n	8004b4c <__aeabi_d2f+0x30>
 8004b30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8004b34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8004b38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8004b3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8004b40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8004b44:	bf08      	it	eq
 8004b46:	f020 0001 	biceq.w	r0, r0, #1
 8004b4a:	4770      	bx	lr
 8004b4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8004b50:	d121      	bne.n	8004b96 <__aeabi_d2f+0x7a>
 8004b52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8004b56:	bfbc      	itt	lt
 8004b58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8004b5c:	4770      	bxlt	lr
 8004b5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004b62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8004b66:	f1c2 0218 	rsb	r2, r2, #24
 8004b6a:	f1c2 0c20 	rsb	ip, r2, #32
 8004b6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8004b72:	fa20 f002 	lsr.w	r0, r0, r2
 8004b76:	bf18      	it	ne
 8004b78:	f040 0001 	orrne.w	r0, r0, #1
 8004b7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004b80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8004b84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8004b88:	ea40 000c 	orr.w	r0, r0, ip
 8004b8c:	fa23 f302 	lsr.w	r3, r3, r2
 8004b90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004b94:	e7cc      	b.n	8004b30 <__aeabi_d2f+0x14>
 8004b96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8004b9a:	d107      	bne.n	8004bac <__aeabi_d2f+0x90>
 8004b9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8004ba0:	bf1e      	ittt	ne
 8004ba2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8004ba6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8004baa:	4770      	bxne	lr
 8004bac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8004bb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8004bb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop

08004bbc <__aeabi_uldivmod>:
 8004bbc:	b953      	cbnz	r3, 8004bd4 <__aeabi_uldivmod+0x18>
 8004bbe:	b94a      	cbnz	r2, 8004bd4 <__aeabi_uldivmod+0x18>
 8004bc0:	2900      	cmp	r1, #0
 8004bc2:	bf08      	it	eq
 8004bc4:	2800      	cmpeq	r0, #0
 8004bc6:	bf1c      	itt	ne
 8004bc8:	f04f 31ff 	movne.w	r1, #4294967295
 8004bcc:	f04f 30ff 	movne.w	r0, #4294967295
 8004bd0:	f000 b974 	b.w	8004ebc <__aeabi_idiv0>
 8004bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8004bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8004bdc:	f000 f806 	bl	8004bec <__udivmoddi4>
 8004be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004be8:	b004      	add	sp, #16
 8004bea:	4770      	bx	lr

08004bec <__udivmoddi4>:
 8004bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bf0:	9d08      	ldr	r5, [sp, #32]
 8004bf2:	4604      	mov	r4, r0
 8004bf4:	468e      	mov	lr, r1
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d14d      	bne.n	8004c96 <__udivmoddi4+0xaa>
 8004bfa:	428a      	cmp	r2, r1
 8004bfc:	4694      	mov	ip, r2
 8004bfe:	d969      	bls.n	8004cd4 <__udivmoddi4+0xe8>
 8004c00:	fab2 f282 	clz	r2, r2
 8004c04:	b152      	cbz	r2, 8004c1c <__udivmoddi4+0x30>
 8004c06:	fa01 f302 	lsl.w	r3, r1, r2
 8004c0a:	f1c2 0120 	rsb	r1, r2, #32
 8004c0e:	fa20 f101 	lsr.w	r1, r0, r1
 8004c12:	fa0c fc02 	lsl.w	ip, ip, r2
 8004c16:	ea41 0e03 	orr.w	lr, r1, r3
 8004c1a:	4094      	lsls	r4, r2
 8004c1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8004c20:	0c21      	lsrs	r1, r4, #16
 8004c22:	fbbe f6f8 	udiv	r6, lr, r8
 8004c26:	fa1f f78c 	uxth.w	r7, ip
 8004c2a:	fb08 e316 	mls	r3, r8, r6, lr
 8004c2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004c32:	fb06 f107 	mul.w	r1, r6, r7
 8004c36:	4299      	cmp	r1, r3
 8004c38:	d90a      	bls.n	8004c50 <__udivmoddi4+0x64>
 8004c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8004c3e:	f106 30ff 	add.w	r0, r6, #4294967295
 8004c42:	f080 811f 	bcs.w	8004e84 <__udivmoddi4+0x298>
 8004c46:	4299      	cmp	r1, r3
 8004c48:	f240 811c 	bls.w	8004e84 <__udivmoddi4+0x298>
 8004c4c:	3e02      	subs	r6, #2
 8004c4e:	4463      	add	r3, ip
 8004c50:	1a5b      	subs	r3, r3, r1
 8004c52:	b2a4      	uxth	r4, r4
 8004c54:	fbb3 f0f8 	udiv	r0, r3, r8
 8004c58:	fb08 3310 	mls	r3, r8, r0, r3
 8004c5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8004c60:	fb00 f707 	mul.w	r7, r0, r7
 8004c64:	42a7      	cmp	r7, r4
 8004c66:	d90a      	bls.n	8004c7e <__udivmoddi4+0x92>
 8004c68:	eb1c 0404 	adds.w	r4, ip, r4
 8004c6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c70:	f080 810a 	bcs.w	8004e88 <__udivmoddi4+0x29c>
 8004c74:	42a7      	cmp	r7, r4
 8004c76:	f240 8107 	bls.w	8004e88 <__udivmoddi4+0x29c>
 8004c7a:	4464      	add	r4, ip
 8004c7c:	3802      	subs	r0, #2
 8004c7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8004c82:	1be4      	subs	r4, r4, r7
 8004c84:	2600      	movs	r6, #0
 8004c86:	b11d      	cbz	r5, 8004c90 <__udivmoddi4+0xa4>
 8004c88:	40d4      	lsrs	r4, r2
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	e9c5 4300 	strd	r4, r3, [r5]
 8004c90:	4631      	mov	r1, r6
 8004c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c96:	428b      	cmp	r3, r1
 8004c98:	d909      	bls.n	8004cae <__udivmoddi4+0xc2>
 8004c9a:	2d00      	cmp	r5, #0
 8004c9c:	f000 80ef 	beq.w	8004e7e <__udivmoddi4+0x292>
 8004ca0:	2600      	movs	r6, #0
 8004ca2:	e9c5 0100 	strd	r0, r1, [r5]
 8004ca6:	4630      	mov	r0, r6
 8004ca8:	4631      	mov	r1, r6
 8004caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cae:	fab3 f683 	clz	r6, r3
 8004cb2:	2e00      	cmp	r6, #0
 8004cb4:	d14a      	bne.n	8004d4c <__udivmoddi4+0x160>
 8004cb6:	428b      	cmp	r3, r1
 8004cb8:	d302      	bcc.n	8004cc0 <__udivmoddi4+0xd4>
 8004cba:	4282      	cmp	r2, r0
 8004cbc:	f200 80f9 	bhi.w	8004eb2 <__udivmoddi4+0x2c6>
 8004cc0:	1a84      	subs	r4, r0, r2
 8004cc2:	eb61 0303 	sbc.w	r3, r1, r3
 8004cc6:	2001      	movs	r0, #1
 8004cc8:	469e      	mov	lr, r3
 8004cca:	2d00      	cmp	r5, #0
 8004ccc:	d0e0      	beq.n	8004c90 <__udivmoddi4+0xa4>
 8004cce:	e9c5 4e00 	strd	r4, lr, [r5]
 8004cd2:	e7dd      	b.n	8004c90 <__udivmoddi4+0xa4>
 8004cd4:	b902      	cbnz	r2, 8004cd8 <__udivmoddi4+0xec>
 8004cd6:	deff      	udf	#255	; 0xff
 8004cd8:	fab2 f282 	clz	r2, r2
 8004cdc:	2a00      	cmp	r2, #0
 8004cde:	f040 8092 	bne.w	8004e06 <__udivmoddi4+0x21a>
 8004ce2:	eba1 010c 	sub.w	r1, r1, ip
 8004ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8004cea:	fa1f fe8c 	uxth.w	lr, ip
 8004cee:	2601      	movs	r6, #1
 8004cf0:	0c20      	lsrs	r0, r4, #16
 8004cf2:	fbb1 f3f7 	udiv	r3, r1, r7
 8004cf6:	fb07 1113 	mls	r1, r7, r3, r1
 8004cfa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8004cfe:	fb0e f003 	mul.w	r0, lr, r3
 8004d02:	4288      	cmp	r0, r1
 8004d04:	d908      	bls.n	8004d18 <__udivmoddi4+0x12c>
 8004d06:	eb1c 0101 	adds.w	r1, ip, r1
 8004d0a:	f103 38ff 	add.w	r8, r3, #4294967295
 8004d0e:	d202      	bcs.n	8004d16 <__udivmoddi4+0x12a>
 8004d10:	4288      	cmp	r0, r1
 8004d12:	f200 80cb 	bhi.w	8004eac <__udivmoddi4+0x2c0>
 8004d16:	4643      	mov	r3, r8
 8004d18:	1a09      	subs	r1, r1, r0
 8004d1a:	b2a4      	uxth	r4, r4
 8004d1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8004d20:	fb07 1110 	mls	r1, r7, r0, r1
 8004d24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8004d28:	fb0e fe00 	mul.w	lr, lr, r0
 8004d2c:	45a6      	cmp	lr, r4
 8004d2e:	d908      	bls.n	8004d42 <__udivmoddi4+0x156>
 8004d30:	eb1c 0404 	adds.w	r4, ip, r4
 8004d34:	f100 31ff 	add.w	r1, r0, #4294967295
 8004d38:	d202      	bcs.n	8004d40 <__udivmoddi4+0x154>
 8004d3a:	45a6      	cmp	lr, r4
 8004d3c:	f200 80bb 	bhi.w	8004eb6 <__udivmoddi4+0x2ca>
 8004d40:	4608      	mov	r0, r1
 8004d42:	eba4 040e 	sub.w	r4, r4, lr
 8004d46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8004d4a:	e79c      	b.n	8004c86 <__udivmoddi4+0x9a>
 8004d4c:	f1c6 0720 	rsb	r7, r6, #32
 8004d50:	40b3      	lsls	r3, r6
 8004d52:	fa22 fc07 	lsr.w	ip, r2, r7
 8004d56:	ea4c 0c03 	orr.w	ip, ip, r3
 8004d5a:	fa20 f407 	lsr.w	r4, r0, r7
 8004d5e:	fa01 f306 	lsl.w	r3, r1, r6
 8004d62:	431c      	orrs	r4, r3
 8004d64:	40f9      	lsrs	r1, r7
 8004d66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8004d6a:	fa00 f306 	lsl.w	r3, r0, r6
 8004d6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8004d72:	0c20      	lsrs	r0, r4, #16
 8004d74:	fa1f fe8c 	uxth.w	lr, ip
 8004d78:	fb09 1118 	mls	r1, r9, r8, r1
 8004d7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8004d80:	fb08 f00e 	mul.w	r0, r8, lr
 8004d84:	4288      	cmp	r0, r1
 8004d86:	fa02 f206 	lsl.w	r2, r2, r6
 8004d8a:	d90b      	bls.n	8004da4 <__udivmoddi4+0x1b8>
 8004d8c:	eb1c 0101 	adds.w	r1, ip, r1
 8004d90:	f108 3aff 	add.w	sl, r8, #4294967295
 8004d94:	f080 8088 	bcs.w	8004ea8 <__udivmoddi4+0x2bc>
 8004d98:	4288      	cmp	r0, r1
 8004d9a:	f240 8085 	bls.w	8004ea8 <__udivmoddi4+0x2bc>
 8004d9e:	f1a8 0802 	sub.w	r8, r8, #2
 8004da2:	4461      	add	r1, ip
 8004da4:	1a09      	subs	r1, r1, r0
 8004da6:	b2a4      	uxth	r4, r4
 8004da8:	fbb1 f0f9 	udiv	r0, r1, r9
 8004dac:	fb09 1110 	mls	r1, r9, r0, r1
 8004db0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8004db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8004db8:	458e      	cmp	lr, r1
 8004dba:	d908      	bls.n	8004dce <__udivmoddi4+0x1e2>
 8004dbc:	eb1c 0101 	adds.w	r1, ip, r1
 8004dc0:	f100 34ff 	add.w	r4, r0, #4294967295
 8004dc4:	d26c      	bcs.n	8004ea0 <__udivmoddi4+0x2b4>
 8004dc6:	458e      	cmp	lr, r1
 8004dc8:	d96a      	bls.n	8004ea0 <__udivmoddi4+0x2b4>
 8004dca:	3802      	subs	r0, #2
 8004dcc:	4461      	add	r1, ip
 8004dce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8004dd2:	fba0 9402 	umull	r9, r4, r0, r2
 8004dd6:	eba1 010e 	sub.w	r1, r1, lr
 8004dda:	42a1      	cmp	r1, r4
 8004ddc:	46c8      	mov	r8, r9
 8004dde:	46a6      	mov	lr, r4
 8004de0:	d356      	bcc.n	8004e90 <__udivmoddi4+0x2a4>
 8004de2:	d053      	beq.n	8004e8c <__udivmoddi4+0x2a0>
 8004de4:	b15d      	cbz	r5, 8004dfe <__udivmoddi4+0x212>
 8004de6:	ebb3 0208 	subs.w	r2, r3, r8
 8004dea:	eb61 010e 	sbc.w	r1, r1, lr
 8004dee:	fa01 f707 	lsl.w	r7, r1, r7
 8004df2:	fa22 f306 	lsr.w	r3, r2, r6
 8004df6:	40f1      	lsrs	r1, r6
 8004df8:	431f      	orrs	r7, r3
 8004dfa:	e9c5 7100 	strd	r7, r1, [r5]
 8004dfe:	2600      	movs	r6, #0
 8004e00:	4631      	mov	r1, r6
 8004e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e06:	f1c2 0320 	rsb	r3, r2, #32
 8004e0a:	40d8      	lsrs	r0, r3
 8004e0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8004e10:	fa21 f303 	lsr.w	r3, r1, r3
 8004e14:	4091      	lsls	r1, r2
 8004e16:	4301      	orrs	r1, r0
 8004e18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8004e1c:	fa1f fe8c 	uxth.w	lr, ip
 8004e20:	fbb3 f0f7 	udiv	r0, r3, r7
 8004e24:	fb07 3610 	mls	r6, r7, r0, r3
 8004e28:	0c0b      	lsrs	r3, r1, #16
 8004e2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8004e2e:	fb00 f60e 	mul.w	r6, r0, lr
 8004e32:	429e      	cmp	r6, r3
 8004e34:	fa04 f402 	lsl.w	r4, r4, r2
 8004e38:	d908      	bls.n	8004e4c <__udivmoddi4+0x260>
 8004e3a:	eb1c 0303 	adds.w	r3, ip, r3
 8004e3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8004e42:	d22f      	bcs.n	8004ea4 <__udivmoddi4+0x2b8>
 8004e44:	429e      	cmp	r6, r3
 8004e46:	d92d      	bls.n	8004ea4 <__udivmoddi4+0x2b8>
 8004e48:	3802      	subs	r0, #2
 8004e4a:	4463      	add	r3, ip
 8004e4c:	1b9b      	subs	r3, r3, r6
 8004e4e:	b289      	uxth	r1, r1
 8004e50:	fbb3 f6f7 	udiv	r6, r3, r7
 8004e54:	fb07 3316 	mls	r3, r7, r6, r3
 8004e58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8004e5c:	fb06 f30e 	mul.w	r3, r6, lr
 8004e60:	428b      	cmp	r3, r1
 8004e62:	d908      	bls.n	8004e76 <__udivmoddi4+0x28a>
 8004e64:	eb1c 0101 	adds.w	r1, ip, r1
 8004e68:	f106 38ff 	add.w	r8, r6, #4294967295
 8004e6c:	d216      	bcs.n	8004e9c <__udivmoddi4+0x2b0>
 8004e6e:	428b      	cmp	r3, r1
 8004e70:	d914      	bls.n	8004e9c <__udivmoddi4+0x2b0>
 8004e72:	3e02      	subs	r6, #2
 8004e74:	4461      	add	r1, ip
 8004e76:	1ac9      	subs	r1, r1, r3
 8004e78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8004e7c:	e738      	b.n	8004cf0 <__udivmoddi4+0x104>
 8004e7e:	462e      	mov	r6, r5
 8004e80:	4628      	mov	r0, r5
 8004e82:	e705      	b.n	8004c90 <__udivmoddi4+0xa4>
 8004e84:	4606      	mov	r6, r0
 8004e86:	e6e3      	b.n	8004c50 <__udivmoddi4+0x64>
 8004e88:	4618      	mov	r0, r3
 8004e8a:	e6f8      	b.n	8004c7e <__udivmoddi4+0x92>
 8004e8c:	454b      	cmp	r3, r9
 8004e8e:	d2a9      	bcs.n	8004de4 <__udivmoddi4+0x1f8>
 8004e90:	ebb9 0802 	subs.w	r8, r9, r2
 8004e94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8004e98:	3801      	subs	r0, #1
 8004e9a:	e7a3      	b.n	8004de4 <__udivmoddi4+0x1f8>
 8004e9c:	4646      	mov	r6, r8
 8004e9e:	e7ea      	b.n	8004e76 <__udivmoddi4+0x28a>
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	e794      	b.n	8004dce <__udivmoddi4+0x1e2>
 8004ea4:	4640      	mov	r0, r8
 8004ea6:	e7d1      	b.n	8004e4c <__udivmoddi4+0x260>
 8004ea8:	46d0      	mov	r8, sl
 8004eaa:	e77b      	b.n	8004da4 <__udivmoddi4+0x1b8>
 8004eac:	3b02      	subs	r3, #2
 8004eae:	4461      	add	r1, ip
 8004eb0:	e732      	b.n	8004d18 <__udivmoddi4+0x12c>
 8004eb2:	4630      	mov	r0, r6
 8004eb4:	e709      	b.n	8004cca <__udivmoddi4+0xde>
 8004eb6:	4464      	add	r4, ip
 8004eb8:	3802      	subs	r0, #2
 8004eba:	e742      	b.n	8004d42 <__udivmoddi4+0x156>

08004ebc <__aeabi_idiv0>:
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop

08004ec0 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b088      	sub	sp, #32
 8004ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004ec6:	463b      	mov	r3, r7
 8004ec8:	2220      	movs	r2, #32
 8004eca:	2100      	movs	r1, #0
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f012 fe23 	bl	8017b18 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8004ed2:	4b3a      	ldr	r3, [pc, #232]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004ed4:	4a3a      	ldr	r2, [pc, #232]	; (8004fc0 <MX_ADC2_Init+0x100>)
 8004ed6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV128;
 8004ed8:	4b38      	ldr	r3, [pc, #224]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004eda:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
 8004ede:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004ee0:	4b36      	ldr	r3, [pc, #216]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004ee6:	4b35      	ldr	r3, [pc, #212]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8004eec:	4b33      	ldr	r3, [pc, #204]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004eee:	2200      	movs	r2, #0
 8004ef0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004ef2:	4b32      	ldr	r3, [pc, #200]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004ef8:	4b30      	ldr	r3, [pc, #192]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004efa:	2204      	movs	r2, #4
 8004efc:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8004efe:	4b2f      	ldr	r3, [pc, #188]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004f04:	4b2d      	ldr	r3, [pc, #180]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004f06:	2201      	movs	r2, #1
 8004f08:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 3;
 8004f0a:	4b2c      	ldr	r3, [pc, #176]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004f0c:	2203      	movs	r2, #3
 8004f0e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004f10:	4b2a      	ldr	r3, [pc, #168]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004f18:	4b28      	ldr	r3, [pc, #160]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004f1e:	4b27      	ldr	r3, [pc, #156]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8004f24:	4b25      	ldr	r3, [pc, #148]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004f2c:	4b23      	ldr	r3, [pc, #140]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004f2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004f32:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8004f34:	4b21      	ldr	r3, [pc, #132]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004f3c:	481f      	ldr	r0, [pc, #124]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004f3e:	f003 fb85 	bl	800864c <HAL_ADC_Init>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d001      	beq.n	8004f4c <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 8004f48:	f002 f958 	bl	80071fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004f4c:	4b1d      	ldr	r3, [pc, #116]	; (8004fc4 <MX_ADC2_Init+0x104>)
 8004f4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004f50:	2306      	movs	r3, #6
 8004f52:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8004f54:	2304      	movs	r3, #4
 8004f56:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8004f58:	4b1b      	ldr	r3, [pc, #108]	; (8004fc8 <MX_ADC2_Init+0x108>)
 8004f5a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004f5c:	2304      	movs	r3, #4
 8004f5e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8004f60:	2300      	movs	r3, #0
 8004f62:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004f64:	463b      	mov	r3, r7
 8004f66:	4619      	mov	r1, r3
 8004f68:	4814      	ldr	r0, [pc, #80]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004f6a:	f003 fe23 	bl	8008bb4 <HAL_ADC_ConfigChannel>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d001      	beq.n	8004f78 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8004f74:	f002 f942 	bl	80071fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004f78:	4b14      	ldr	r3, [pc, #80]	; (8004fcc <MX_ADC2_Init+0x10c>)
 8004f7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004f7c:	230c      	movs	r3, #12
 8004f7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004f80:	463b      	mov	r3, r7
 8004f82:	4619      	mov	r1, r3
 8004f84:	480d      	ldr	r0, [pc, #52]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004f86:	f003 fe15 	bl	8008bb4 <HAL_ADC_ConfigChannel>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d001      	beq.n	8004f94 <MX_ADC2_Init+0xd4>
  {
    Error_Handler();
 8004f90:	f002 f934 	bl	80071fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8004f94:	4b0e      	ldr	r3, [pc, #56]	; (8004fd0 <MX_ADC2_Init+0x110>)
 8004f96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004f98:	2312      	movs	r3, #18
 8004f9a:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004f9c:	237f      	movs	r3, #127	; 0x7f
 8004f9e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004fa0:	463b      	mov	r3, r7
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	4805      	ldr	r0, [pc, #20]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004fa6:	f003 fe05 	bl	8008bb4 <HAL_ADC_ConfigChannel>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d001      	beq.n	8004fb4 <MX_ADC2_Init+0xf4>
  {
    Error_Handler();
 8004fb0:	f002 f924 	bl	80071fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004fb4:	bf00      	nop
 8004fb6:	3720      	adds	r7, #32
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	2000020c 	.word	0x2000020c
 8004fc0:	50000100 	.word	0x50000100
 8004fc4:	04300002 	.word	0x04300002
 8004fc8:	407f0000 	.word	0x407f0000
 8004fcc:	19200040 	.word	0x19200040
 8004fd0:	2a000400 	.word	0x2a000400

08004fd4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b0a0      	sub	sp, #128	; 0x80
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fdc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	601a      	str	r2, [r3, #0]
 8004fe4:	605a      	str	r2, [r3, #4]
 8004fe6:	609a      	str	r2, [r3, #8]
 8004fe8:	60da      	str	r2, [r3, #12]
 8004fea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004fec:	f107 0318 	add.w	r3, r7, #24
 8004ff0:	2254      	movs	r2, #84	; 0x54
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f012 fd8f 	bl	8017b18 <memset>
  if(adcHandle->Instance==ADC2)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a4c      	ldr	r2, [pc, #304]	; (8005130 <HAL_ADC_MspInit+0x15c>)
 8005000:	4293      	cmp	r3, r2
 8005002:	f040 8090 	bne.w	8005126 <HAL_ADC_MspInit+0x152>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8005006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800500a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800500c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005010:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005012:	f107 0318 	add.w	r3, r7, #24
 8005016:	4618      	mov	r0, r3
 8005018:	f008 fa22 	bl	800d460 <HAL_RCCEx_PeriphCLKConfig>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d001      	beq.n	8005026 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8005022:	f002 f8eb 	bl	80071fc <Error_Handler>
    }

    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8005026:	4b43      	ldr	r3, [pc, #268]	; (8005134 <HAL_ADC_MspInit+0x160>)
 8005028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800502a:	4a42      	ldr	r2, [pc, #264]	; (8005134 <HAL_ADC_MspInit+0x160>)
 800502c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005030:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005032:	4b40      	ldr	r3, [pc, #256]	; (8005134 <HAL_ADC_MspInit+0x160>)
 8005034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005036:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800503a:	617b      	str	r3, [r7, #20]
 800503c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800503e:	4b3d      	ldr	r3, [pc, #244]	; (8005134 <HAL_ADC_MspInit+0x160>)
 8005040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005042:	4a3c      	ldr	r2, [pc, #240]	; (8005134 <HAL_ADC_MspInit+0x160>)
 8005044:	f043 0320 	orr.w	r3, r3, #32
 8005048:	64d3      	str	r3, [r2, #76]	; 0x4c
 800504a:	4b3a      	ldr	r3, [pc, #232]	; (8005134 <HAL_ADC_MspInit+0x160>)
 800504c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800504e:	f003 0320 	and.w	r3, r3, #32
 8005052:	613b      	str	r3, [r7, #16]
 8005054:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005056:	4b37      	ldr	r3, [pc, #220]	; (8005134 <HAL_ADC_MspInit+0x160>)
 8005058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800505a:	4a36      	ldr	r2, [pc, #216]	; (8005134 <HAL_ADC_MspInit+0x160>)
 800505c:	f043 0304 	orr.w	r3, r3, #4
 8005060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005062:	4b34      	ldr	r3, [pc, #208]	; (8005134 <HAL_ADC_MspInit+0x160>)
 8005064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005066:	f003 0304 	and.w	r3, r3, #4
 800506a:	60fb      	str	r3, [r7, #12]
 800506c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800506e:	4b31      	ldr	r3, [pc, #196]	; (8005134 <HAL_ADC_MspInit+0x160>)
 8005070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005072:	4a30      	ldr	r2, [pc, #192]	; (8005134 <HAL_ADC_MspInit+0x160>)
 8005074:	f043 0301 	orr.w	r3, r3, #1
 8005078:	64d3      	str	r3, [r2, #76]	; 0x4c
 800507a:	4b2e      	ldr	r3, [pc, #184]	; (8005134 <HAL_ADC_MspInit+0x160>)
 800507c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	60bb      	str	r3, [r7, #8]
 8005084:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC2_IN6
    PC1     ------> ADC2_IN7
    PA0     ------> ADC2_IN1
    PA1     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005086:	2302      	movs	r3, #2
 8005088:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800508a:	2303      	movs	r3, #3
 800508c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800508e:	2300      	movs	r3, #0
 8005090:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005092:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005096:	4619      	mov	r1, r3
 8005098:	4827      	ldr	r0, [pc, #156]	; (8005138 <HAL_ADC_MspInit+0x164>)
 800509a:	f004 fed3 	bl	8009e44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800509e:	2303      	movs	r3, #3
 80050a0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050a2:	2303      	movs	r3, #3
 80050a4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a6:	2300      	movs	r3, #0
 80050a8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050aa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80050ae:	4619      	mov	r1, r3
 80050b0:	4822      	ldr	r0, [pc, #136]	; (800513c <HAL_ADC_MspInit+0x168>)
 80050b2:	f004 fec7 	bl	8009e44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80050b6:	2303      	movs	r3, #3
 80050b8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050ba:	2303      	movs	r3, #3
 80050bc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050be:	2300      	movs	r3, #0
 80050c0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050c2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80050c6:	4619      	mov	r1, r3
 80050c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050cc:	f004 feba 	bl	8009e44 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 80050d0:	4b1b      	ldr	r3, [pc, #108]	; (8005140 <HAL_ADC_MspInit+0x16c>)
 80050d2:	4a1c      	ldr	r2, [pc, #112]	; (8005144 <HAL_ADC_MspInit+0x170>)
 80050d4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80050d6:	4b1a      	ldr	r3, [pc, #104]	; (8005140 <HAL_ADC_MspInit+0x16c>)
 80050d8:	2224      	movs	r2, #36	; 0x24
 80050da:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80050dc:	4b18      	ldr	r3, [pc, #96]	; (8005140 <HAL_ADC_MspInit+0x16c>)
 80050de:	2200      	movs	r2, #0
 80050e0:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80050e2:	4b17      	ldr	r3, [pc, #92]	; (8005140 <HAL_ADC_MspInit+0x16c>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80050e8:	4b15      	ldr	r3, [pc, #84]	; (8005140 <HAL_ADC_MspInit+0x16c>)
 80050ea:	2280      	movs	r2, #128	; 0x80
 80050ec:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80050ee:	4b14      	ldr	r3, [pc, #80]	; (8005140 <HAL_ADC_MspInit+0x16c>)
 80050f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050f4:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80050f6:	4b12      	ldr	r3, [pc, #72]	; (8005140 <HAL_ADC_MspInit+0x16c>)
 80050f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050fc:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80050fe:	4b10      	ldr	r3, [pc, #64]	; (8005140 <HAL_ADC_MspInit+0x16c>)
 8005100:	2220      	movs	r2, #32
 8005102:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8005104:	4b0e      	ldr	r3, [pc, #56]	; (8005140 <HAL_ADC_MspInit+0x16c>)
 8005106:	2200      	movs	r2, #0
 8005108:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800510a:	480d      	ldr	r0, [pc, #52]	; (8005140 <HAL_ADC_MspInit+0x16c>)
 800510c:	f004 fb68 	bl	80097e0 <HAL_DMA_Init>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d001      	beq.n	800511a <HAL_ADC_MspInit+0x146>
    {
      Error_Handler();
 8005116:	f002 f871 	bl	80071fc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a08      	ldr	r2, [pc, #32]	; (8005140 <HAL_ADC_MspInit+0x16c>)
 800511e:	655a      	str	r2, [r3, #84]	; 0x54
 8005120:	4a07      	ldr	r2, [pc, #28]	; (8005140 <HAL_ADC_MspInit+0x16c>)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8005126:	bf00      	nop
 8005128:	3780      	adds	r7, #128	; 0x80
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	50000100 	.word	0x50000100
 8005134:	40021000 	.word	0x40021000
 8005138:	48001400 	.word	0x48001400
 800513c:	48000800 	.word	0x48000800
 8005140:	20000278 	.word	0x20000278
 8005144:	40020008 	.word	0x40020008

08005148 <Battery_ReadBatteryVoltage>:

#include "adc_voltage_current_measurement.h"



void Battery_ReadBatteryVoltage(Battery_t * battery_struct,uint16_t BatteryMonitoringData[]){
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
	battery_struct->BatteryVoltage = (BatteryMonitoringData[BATTERY_VOLTAGE_RANK]*ADC_VOLTAGE_REF)/ADC_BIT_VALUE;
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	3304      	adds	r3, #4
 8005156:	881b      	ldrh	r3, [r3, #0]
 8005158:	4618      	mov	r0, r3
 800515a:	f7ff f9c5 	bl	80044e8 <__aeabi_i2d>
 800515e:	a30f      	add	r3, pc, #60	; (adr r3, 800519c <Battery_ReadBatteryVoltage+0x54>)
 8005160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005164:	f7ff fa2a 	bl	80045bc <__aeabi_dmul>
 8005168:	4602      	mov	r2, r0
 800516a:	460b      	mov	r3, r1
 800516c:	4610      	mov	r0, r2
 800516e:	4619      	mov	r1, r3
 8005170:	f04f 0200 	mov.w	r2, #0
 8005174:	4b08      	ldr	r3, [pc, #32]	; (8005198 <Battery_ReadBatteryVoltage+0x50>)
 8005176:	f7ff fb4b 	bl	8004810 <__aeabi_ddiv>
 800517a:	4602      	mov	r2, r0
 800517c:	460b      	mov	r3, r1
 800517e:	4610      	mov	r0, r2
 8005180:	4619      	mov	r1, r3
 8005182:	f7ff fccb 	bl	8004b1c <__aeabi_d2f>
 8005186:	4602      	mov	r2, r0
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	601a      	str	r2, [r3, #0]
}
 800518c:	bf00      	nop
 800518e:	3708      	adds	r7, #8
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	f3af 8000 	nop.w
 8005198:	40b00000 	.word	0x40b00000
 800519c:	66666666 	.word	0x66666666
 80051a0:	400a6666 	.word	0x400a6666
 80051a4:	00000000 	.word	0x00000000

080051a8 <Battery_ReadCurrent3V3>:

void Battery_ReadCurrent3V3(Battery_t * battery_struct,uint16_t BatteryMonitoringData[]){
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
	float32_t shunt_resistor_voltage = (BatteryMonitoringData[BATTERY_3V3CURR_RANK]*ADC_VOLTAGE_REF)/ADC_BIT_VALUE;
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	3302      	adds	r3, #2
 80051b6:	881b      	ldrh	r3, [r3, #0]
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7ff f995 	bl	80044e8 <__aeabi_i2d>
 80051be:	a319      	add	r3, pc, #100	; (adr r3, 8005224 <Battery_ReadCurrent3V3+0x7c>)
 80051c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c4:	f7ff f9fa 	bl	80045bc <__aeabi_dmul>
 80051c8:	4602      	mov	r2, r0
 80051ca:	460b      	mov	r3, r1
 80051cc:	4610      	mov	r0, r2
 80051ce:	4619      	mov	r1, r3
 80051d0:	f04f 0200 	mov.w	r2, #0
 80051d4:	4b12      	ldr	r3, [pc, #72]	; (8005220 <Battery_ReadCurrent3V3+0x78>)
 80051d6:	f7ff fb1b 	bl	8004810 <__aeabi_ddiv>
 80051da:	4602      	mov	r2, r0
 80051dc:	460b      	mov	r3, r1
 80051de:	4610      	mov	r0, r2
 80051e0:	4619      	mov	r1, r3
 80051e2:	f7ff fc9b 	bl	8004b1c <__aeabi_d2f>
 80051e6:	4603      	mov	r3, r0
 80051e8:	60fb      	str	r3, [r7, #12]
	battery_struct->CurrentConsumption3V3 = shunt_resistor_voltage/SHUNT_RESISTOR_VALUE;
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f7ff f98e 	bl	800450c <__aeabi_f2d>
 80051f0:	a309      	add	r3, pc, #36	; (adr r3, 8005218 <Battery_ReadCurrent3V3+0x70>)
 80051f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f6:	f7ff fb0b 	bl	8004810 <__aeabi_ddiv>
 80051fa:	4602      	mov	r2, r0
 80051fc:	460b      	mov	r3, r1
 80051fe:	4610      	mov	r0, r2
 8005200:	4619      	mov	r1, r3
 8005202:	f7ff fc8b 	bl	8004b1c <__aeabi_d2f>
 8005206:	4602      	mov	r2, r0
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	605a      	str	r2, [r3, #4]
}
 800520c:	bf00      	nop
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	f3af 8000 	nop.w
 8005218:	d2f1a9fc 	.word	0xd2f1a9fc
 800521c:	3f60624d 	.word	0x3f60624d
 8005220:	40b00000 	.word	0x40b00000
 8005224:	66666666 	.word	0x66666666
 8005228:	400a6666 	.word	0x400a6666
 800522c:	00000000 	.word	0x00000000

08005230 <Battery_ReadCurrent5V>:

void Battery_ReadCurrent5V(Battery_t * battery_struct,uint16_t BatteryMonitoringData[]){
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
	float32_t shunt_resistor_voltage = (BatteryMonitoringData[BATTERY_5VCURR_RANK]*ADC_VOLTAGE_REF)/ADC_BIT_VALUE;
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	881b      	ldrh	r3, [r3, #0]
 800523e:	4618      	mov	r0, r3
 8005240:	f7ff f952 	bl	80044e8 <__aeabi_i2d>
 8005244:	a319      	add	r3, pc, #100	; (adr r3, 80052ac <Battery_ReadCurrent5V+0x7c>)
 8005246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524a:	f7ff f9b7 	bl	80045bc <__aeabi_dmul>
 800524e:	4602      	mov	r2, r0
 8005250:	460b      	mov	r3, r1
 8005252:	4610      	mov	r0, r2
 8005254:	4619      	mov	r1, r3
 8005256:	f04f 0200 	mov.w	r2, #0
 800525a:	4b13      	ldr	r3, [pc, #76]	; (80052a8 <Battery_ReadCurrent5V+0x78>)
 800525c:	f7ff fad8 	bl	8004810 <__aeabi_ddiv>
 8005260:	4602      	mov	r2, r0
 8005262:	460b      	mov	r3, r1
 8005264:	4610      	mov	r0, r2
 8005266:	4619      	mov	r1, r3
 8005268:	f7ff fc58 	bl	8004b1c <__aeabi_d2f>
 800526c:	4603      	mov	r3, r0
 800526e:	60fb      	str	r3, [r7, #12]
	battery_struct->CurrentConsumption5V = shunt_resistor_voltage/SHUNT_RESISTOR_VALUE;
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f7ff f94b 	bl	800450c <__aeabi_f2d>
 8005276:	a30a      	add	r3, pc, #40	; (adr r3, 80052a0 <Battery_ReadCurrent5V+0x70>)
 8005278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527c:	f7ff fac8 	bl	8004810 <__aeabi_ddiv>
 8005280:	4602      	mov	r2, r0
 8005282:	460b      	mov	r3, r1
 8005284:	4610      	mov	r0, r2
 8005286:	4619      	mov	r1, r3
 8005288:	f7ff fc48 	bl	8004b1c <__aeabi_d2f>
 800528c:	4602      	mov	r2, r0
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	609a      	str	r2, [r3, #8]
}
 8005292:	bf00      	nop
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	f3af 8000 	nop.w
 80052a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80052a4:	3f60624d 	.word	0x3f60624d
 80052a8:	40b00000 	.word	0x40b00000
 80052ac:	66666666 	.word	0x66666666
 80052b0:	400a6666 	.word	0x400a6666
 80052b4:	00000000 	.word	0x00000000

080052b8 <Battery_RemaningTime>:

void Battery_RemaningTime(Battery_t * battery_struct){
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]

	float32_t current_average = battery_struct->CurrentConsumption3V3 + battery_struct->CurrentConsumption5V;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	ed93 7a01 	vldr	s14, [r3, #4]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80052cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052d0:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t battery_remaining_hour = BATTERRY_CAPACITY/current_average;
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f7ff f919 	bl	800450c <__aeabi_f2d>
 80052da:	4602      	mov	r2, r0
 80052dc:	460b      	mov	r3, r1
 80052de:	a10f      	add	r1, pc, #60	; (adr r1, 800531c <Battery_RemaningTime+0x64>)
 80052e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052e4:	f7ff fa94 	bl	8004810 <__aeabi_ddiv>
 80052e8:	4602      	mov	r2, r0
 80052ea:	460b      	mov	r3, r1
 80052ec:	4610      	mov	r0, r2
 80052ee:	4619      	mov	r1, r3
 80052f0:	f7ff fc14 	bl	8004b1c <__aeabi_d2f>
 80052f4:	4603      	mov	r3, r0
 80052f6:	60bb      	str	r3, [r7, #8]
	battery_struct->battery_left_ms = (battery_remaining_hour*3600000);
 80052f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80052fc:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005318 <Battery_RemaningTime+0x60>
 8005300:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005304:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005308:	ee17 2a90 	vmov	r2, s15
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	60da      	str	r2, [r3, #12]
}
 8005310:	bf00      	nop
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	4a5bba00 	.word	0x4a5bba00
 800531c:	9999999a 	.word	0x9999999a
 8005320:	40019999 	.word	0x40019999

08005324 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8005324:	b5b0      	push	{r4, r5, r7, lr}
 8005326:	b0b8      	sub	sp, #224	; 0xe0
 8005328:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN Init */

	/*Configure output for timer*/
	PropulsionAndControl_Init(&HDW_CONTROLLER_struct, ESC_GPIO_PIN, ESC_GPIO_PORT, SERVO_LEFT_GPIO_PIN, SERVO_LEFT_GPIO_PORT, SERVO_RIGHT_GPIO_PIN, SERVO_RIGHT_GPIO_PORT, ESC_TIMER_CHANNEL_NBR, SERVO_LEFT_TIMER_CHANNEL_NBR, SERVO_RIGHT_TIMER_CHANNEL_NBR, &htim4);
 800532a:	4b6b      	ldr	r3, [pc, #428]	; (80054d8 <MX_FREERTOS_Init+0x1b4>)
 800532c:	9306      	str	r3, [sp, #24]
 800532e:	2302      	movs	r3, #2
 8005330:	9305      	str	r3, [sp, #20]
 8005332:	2301      	movs	r3, #1
 8005334:	9304      	str	r3, [sp, #16]
 8005336:	2304      	movs	r3, #4
 8005338:	9303      	str	r3, [sp, #12]
 800533a:	4b68      	ldr	r3, [pc, #416]	; (80054dc <MX_FREERTOS_Init+0x1b8>)
 800533c:	9302      	str	r3, [sp, #8]
 800533e:	2380      	movs	r3, #128	; 0x80
 8005340:	9301      	str	r3, [sp, #4]
 8005342:	4b66      	ldr	r3, [pc, #408]	; (80054dc <MX_FREERTOS_Init+0x1b8>)
 8005344:	9300      	str	r3, [sp, #0]
 8005346:	2340      	movs	r3, #64	; 0x40
 8005348:	4a64      	ldr	r2, [pc, #400]	; (80054dc <MX_FREERTOS_Init+0x1b8>)
 800534a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800534e:	4864      	ldr	r0, [pc, #400]	; (80054e0 <MX_FREERTOS_Init+0x1bc>)
 8005350:	f002 f9ca 	bl	80076e8 <PropulsionAndControl_Init>

	/*Init for IMU sensors*/
	BNO055_Init(&hi2c2, &IMU_BNO055_struct);
 8005354:	4963      	ldr	r1, [pc, #396]	; (80054e4 <MX_FREERTOS_Init+0x1c0>)
 8005356:	4864      	ldr	r0, [pc, #400]	; (80054e8 <MX_FREERTOS_Init+0x1c4>)
 8005358:	f000 fe2d 	bl	8005fb6 <BNO055_Init>


  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of I2C_Controller */
  osMutexDef(I2C_Controller);
 800535c:	2300      	movs	r3, #0
 800535e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  I2C_ControllerHandle = osMutexCreate(osMutex(I2C_Controller));
 8005362:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005366:	4618      	mov	r0, r3
 8005368:	f00f fddb 	bl	8014f22 <osMutexCreate>
 800536c:	4603      	mov	r3, r0
 800536e:	4a5f      	ldr	r2, [pc, #380]	; (80054ec <MX_FREERTOS_Init+0x1c8>)
 8005370:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of GPS_UART_Semaphore */
  osSemaphoreDef(GPS_UART_Semaphore);
 8005372:	2300      	movs	r3, #0
 8005374:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  GPS_UART_SemaphoreHandle = osSemaphoreCreate(osSemaphore(GPS_UART_Semaphore), 1);
 8005378:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800537c:	2101      	movs	r1, #1
 800537e:	4618      	mov	r0, r3
 8005380:	f00f fddb 	bl	8014f3a <osSemaphoreCreate>
 8005384:	4603      	mov	r3, r0
 8005386:	4a5a      	ldr	r2, [pc, #360]	; (80054f0 <MX_FREERTOS_Init+0x1cc>)
 8005388:	6013      	str	r3, [r2, #0]

  /* definition and creation of HG_PROTECTION_SEM */
  osSemaphoreDef(HG_PROTECTION_SEM);
 800538a:	2300      	movs	r3, #0
 800538c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  HG_PROTECTION_SEMHandle = osSemaphoreCreate(osSemaphore(HG_PROTECTION_SEM), 1);
 8005390:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005394:	2101      	movs	r1, #1
 8005396:	4618      	mov	r0, r3
 8005398:	f00f fdcf 	bl	8014f3a <osSemaphoreCreate>
 800539c:	4603      	mov	r3, r0
 800539e:	4a55      	ldr	r2, [pc, #340]	; (80054f4 <MX_FREERTOS_Init+0x1d0>)
 80053a0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of LedTask */
  osThreadDef(LedTask, StartLedTask, osPriorityNormal, 0, 128);
 80053a2:	4b55      	ldr	r3, [pc, #340]	; (80054f8 <MX_FREERTOS_Init+0x1d4>)
 80053a4:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 80053a8:	461d      	mov	r5, r3
 80053aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053ae:	682b      	ldr	r3, [r5, #0]
 80053b0:	6023      	str	r3, [r4, #0]
  LedTaskHandle = osThreadCreate(osThread(LedTask), NULL);
 80053b2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80053b6:	2100      	movs	r1, #0
 80053b8:	4618      	mov	r0, r3
 80053ba:	f00f fd77 	bl	8014eac <osThreadCreate>
 80053be:	4603      	mov	r3, r0
 80053c0:	4a4e      	ldr	r2, [pc, #312]	; (80054fc <MX_FREERTOS_Init+0x1d8>)
 80053c2:	6013      	str	r3, [r2, #0]

  /* definition and creation of Roll_PID */
  osThreadDef(Roll_PID, StartRoll_PID, osPriorityLow, 0, 128);
 80053c4:	4b4e      	ldr	r3, [pc, #312]	; (8005500 <MX_FREERTOS_Init+0x1dc>)
 80053c6:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80053ca:	461d      	mov	r5, r3
 80053cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053d0:	682b      	ldr	r3, [r5, #0]
 80053d2:	6023      	str	r3, [r4, #0]
  Roll_PIDHandle = osThreadCreate(osThread(Roll_PID), NULL);
 80053d4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80053d8:	2100      	movs	r1, #0
 80053da:	4618      	mov	r0, r3
 80053dc:	f00f fd66 	bl	8014eac <osThreadCreate>
 80053e0:	4603      	mov	r3, r0
 80053e2:	4a48      	ldr	r2, [pc, #288]	; (8005504 <MX_FREERTOS_Init+0x1e0>)
 80053e4:	6013      	str	r3, [r2, #0]

  /* definition and creation of Pitch_PID */
  osThreadDef(Pitch_PID, StartPitch_PID, osPriorityLow, 0, 128);
 80053e6:	4b48      	ldr	r3, [pc, #288]	; (8005508 <MX_FREERTOS_Init+0x1e4>)
 80053e8:	f107 0478 	add.w	r4, r7, #120	; 0x78
 80053ec:	461d      	mov	r5, r3
 80053ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053f2:	682b      	ldr	r3, [r5, #0]
 80053f4:	6023      	str	r3, [r4, #0]
  Pitch_PIDHandle = osThreadCreate(osThread(Pitch_PID), NULL);
 80053f6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80053fa:	2100      	movs	r1, #0
 80053fc:	4618      	mov	r0, r3
 80053fe:	f00f fd55 	bl	8014eac <osThreadCreate>
 8005402:	4603      	mov	r3, r0
 8005404:	4a41      	ldr	r2, [pc, #260]	; (800550c <MX_FREERTOS_Init+0x1e8>)
 8005406:	6013      	str	r3, [r2, #0]

  /* definition and creation of Yaw_PID */
  osThreadDef(Yaw_PID, StartYaw_PID, osPriorityLow, 0, 128);
 8005408:	4b41      	ldr	r3, [pc, #260]	; (8005510 <MX_FREERTOS_Init+0x1ec>)
 800540a:	f107 0464 	add.w	r4, r7, #100	; 0x64
 800540e:	461d      	mov	r5, r3
 8005410:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005414:	682b      	ldr	r3, [r5, #0]
 8005416:	6023      	str	r3, [r4, #0]
  Yaw_PIDHandle = osThreadCreate(osThread(Yaw_PID), NULL);
 8005418:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800541c:	2100      	movs	r1, #0
 800541e:	4618      	mov	r0, r3
 8005420:	f00f fd44 	bl	8014eac <osThreadCreate>
 8005424:	4603      	mov	r3, r0
 8005426:	4a3b      	ldr	r2, [pc, #236]	; (8005514 <MX_FREERTOS_Init+0x1f0>)
 8005428:	6013      	str	r3, [r2, #0]

  /* definition and creation of PressureMonitor */
  osThreadDef(PressureMonitor, StartPressureMonitor, osPriorityLow, 0, 128);
 800542a:	4b3b      	ldr	r3, [pc, #236]	; (8005518 <MX_FREERTOS_Init+0x1f4>)
 800542c:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8005430:	461d      	mov	r5, r3
 8005432:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005434:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005436:	682b      	ldr	r3, [r5, #0]
 8005438:	6023      	str	r3, [r4, #0]
  PressureMonitorHandle = osThreadCreate(osThread(PressureMonitor), NULL);
 800543a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800543e:	2100      	movs	r1, #0
 8005440:	4618      	mov	r0, r3
 8005442:	f00f fd33 	bl	8014eac <osThreadCreate>
 8005446:	4603      	mov	r3, r0
 8005448:	4a34      	ldr	r2, [pc, #208]	; (800551c <MX_FREERTOS_Init+0x1f8>)
 800544a:	6013      	str	r3, [r2, #0]

  /* definition and creation of GPS */
  osThreadDef(GPS, StartGPS, osPriorityLow, 0, 128);
 800544c:	4b34      	ldr	r3, [pc, #208]	; (8005520 <MX_FREERTOS_Init+0x1fc>)
 800544e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8005452:	461d      	mov	r5, r3
 8005454:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005456:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005458:	682b      	ldr	r3, [r5, #0]
 800545a:	6023      	str	r3, [r4, #0]
  GPSHandle = osThreadCreate(osThread(GPS), NULL);
 800545c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005460:	2100      	movs	r1, #0
 8005462:	4618      	mov	r0, r3
 8005464:	f00f fd22 	bl	8014eac <osThreadCreate>
 8005468:	4603      	mov	r3, r0
 800546a:	4a2e      	ldr	r2, [pc, #184]	; (8005524 <MX_FREERTOS_Init+0x200>)
 800546c:	6013      	str	r3, [r2, #0]

  /* definition and creation of MainTask */
  osThreadDef(MainTask, StartMainTask, osPriorityLow, 0, 256);
 800546e:	4b2e      	ldr	r3, [pc, #184]	; (8005528 <MX_FREERTOS_Init+0x204>)
 8005470:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005474:	461d      	mov	r5, r3
 8005476:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005478:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800547a:	682b      	ldr	r3, [r5, #0]
 800547c:	6023      	str	r3, [r4, #0]
  MainTaskHandle = osThreadCreate(osThread(MainTask), NULL);
 800547e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005482:	2100      	movs	r1, #0
 8005484:	4618      	mov	r0, r3
 8005486:	f00f fd11 	bl	8014eac <osThreadCreate>
 800548a:	4603      	mov	r3, r0
 800548c:	4a27      	ldr	r2, [pc, #156]	; (800552c <MX_FREERTOS_Init+0x208>)
 800548e:	6013      	str	r3, [r2, #0]

  /* definition and creation of BatteryMonitori */
  osThreadDef(BatteryMonitori, StartBatteryMonitoring, osPriorityLow, 0, 128);
 8005490:	4b27      	ldr	r3, [pc, #156]	; (8005530 <MX_FREERTOS_Init+0x20c>)
 8005492:	f107 0414 	add.w	r4, r7, #20
 8005496:	461d      	mov	r5, r3
 8005498:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800549a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800549c:	682b      	ldr	r3, [r5, #0]
 800549e:	6023      	str	r3, [r4, #0]
  BatteryMonitoriHandle = osThreadCreate(osThread(BatteryMonitori), NULL);
 80054a0:	f107 0314 	add.w	r3, r7, #20
 80054a4:	2100      	movs	r1, #0
 80054a6:	4618      	mov	r0, r3
 80054a8:	f00f fd00 	bl	8014eac <osThreadCreate>
 80054ac:	4603      	mov	r3, r0
 80054ae:	4a21      	ldr	r2, [pc, #132]	; (8005534 <MX_FREERTOS_Init+0x210>)
 80054b0:	6013      	str	r3, [r2, #0]

  /* definition and creation of Telemetry */
  osThreadDef(Telemetry, StartTelemetry, osPriorityIdle, 0, 256);
 80054b2:	4b21      	ldr	r3, [pc, #132]	; (8005538 <MX_FREERTOS_Init+0x214>)
 80054b4:	463c      	mov	r4, r7
 80054b6:	461d      	mov	r5, r3
 80054b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054bc:	682b      	ldr	r3, [r5, #0]
 80054be:	6023      	str	r3, [r4, #0]
  TelemetryHandle = osThreadCreate(osThread(Telemetry), NULL);
 80054c0:	463b      	mov	r3, r7
 80054c2:	2100      	movs	r1, #0
 80054c4:	4618      	mov	r0, r3
 80054c6:	f00f fcf1 	bl	8014eac <osThreadCreate>
 80054ca:	4603      	mov	r3, r0
 80054cc:	4a1b      	ldr	r2, [pc, #108]	; (800553c <MX_FREERTOS_Init+0x218>)
 80054ce:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80054d0:	bf00      	nop
 80054d2:	37c0      	adds	r7, #192	; 0xc0
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bdb0      	pop	{r4, r5, r7, pc}
 80054d8:	20000a28 	.word	0x20000a28
 80054dc:	48000400 	.word	0x48000400
 80054e0:	2000047c 	.word	0x2000047c
 80054e4:	200003c0 	.word	0x200003c0
 80054e8:	20000374 	.word	0x20000374
 80054ec:	20000368 	.word	0x20000368
 80054f0:	2000036c 	.word	0x2000036c
 80054f4:	20000370 	.word	0x20000370
 80054f8:	08018b64 	.word	0x08018b64
 80054fc:	20000344 	.word	0x20000344
 8005500:	08018b78 	.word	0x08018b78
 8005504:	20000348 	.word	0x20000348
 8005508:	08018b8c 	.word	0x08018b8c
 800550c:	2000034c 	.word	0x2000034c
 8005510:	08018ba0 	.word	0x08018ba0
 8005514:	20000350 	.word	0x20000350
 8005518:	08018bb4 	.word	0x08018bb4
 800551c:	20000354 	.word	0x20000354
 8005520:	08018bc8 	.word	0x08018bc8
 8005524:	20000358 	.word	0x20000358
 8005528:	08018bdc 	.word	0x08018bdc
 800552c:	2000035c 	.word	0x2000035c
 8005530:	08018bf0 	.word	0x08018bf0
 8005534:	20000360 	.word	0x20000360
 8005538:	08018c04 	.word	0x08018c04
 800553c:	20000364 	.word	0x20000364

08005540 <StartLedTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLedTask */
void StartLedTask(void const * argument)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	/*htim3.Instance->CCR1 = 1000;
	vTaskDelay(100);
	htim3.Instance->CCR1 = 0;*/
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8005548:	f44f 7100 	mov.w	r1, #512	; 0x200
 800554c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005550:	f004 fe12 	bl	800a178 <HAL_GPIO_TogglePin>
    vTaskDelay(5000);
 8005554:	f241 3088 	movw	r0, #5000	; 0x1388
 8005558:	f010 fb5a 	bl	8015c10 <vTaskDelay>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800555c:	e7f4      	b.n	8005548 <StartLedTask+0x8>
	...

08005560 <StartRoll_PID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRoll_PID */
void StartRoll_PID(void const * argument)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRoll_PID */


	/*PID factor init*/
	Pid_Init(&hpid_roll, PID_KP_ROLL, PID_KI_ROLL, PID_KD_ROLL);
 8005568:	ed9f 1a11 	vldr	s2, [pc, #68]	; 80055b0 <StartRoll_PID+0x50>
 800556c:	eddf 0a11 	vldr	s1, [pc, #68]	; 80055b4 <StartRoll_PID+0x54>
 8005570:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80055b8 <StartRoll_PID+0x58>
 8005574:	4811      	ldr	r0, [pc, #68]	; (80055bc <StartRoll_PID+0x5c>)
 8005576:	f001 fe91 	bl	800729c <Pid_Init>

  /* Infinite loop */
	for(;;)
	{	/*Read roll axis data*/
		xSemaphoreTake(I2C_ControllerHandle,25);
 800557a:	4b11      	ldr	r3, [pc, #68]	; (80055c0 <StartRoll_PID+0x60>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2119      	movs	r1, #25
 8005580:	4618      	mov	r0, r3
 8005582:	f010 f803 	bl	801558c <xQueueSemaphoreTake>
		BNO055_ReadEuler_Roll(&hi2c2, &IMU_BNO055_struct);
 8005586:	490f      	ldr	r1, [pc, #60]	; (80055c4 <StartRoll_PID+0x64>)
 8005588:	480f      	ldr	r0, [pc, #60]	; (80055c8 <StartRoll_PID+0x68>)
 800558a:	f000 fe8f 	bl	80062ac <BNO055_ReadEuler_Roll>
		xSemaphoreGive(I2C_ControllerHandle);
 800558e:	4b0c      	ldr	r3, [pc, #48]	; (80055c0 <StartRoll_PID+0x60>)
 8005590:	6818      	ldr	r0, [r3, #0]
 8005592:	2300      	movs	r3, #0
 8005594:	2200      	movs	r2, #0
 8005596:	2100      	movs	r1, #0
 8005598:	f00f fe84 	bl	80152a4 <xQueueGenericSend>

		/*Compensate PID*/
		Pid_CompensateRoll(&hpid_roll, &COMMAND_struct, &IMU_BNO055_struct, &HDW_CONTROLLER_struct);
 800559c:	4b0b      	ldr	r3, [pc, #44]	; (80055cc <StartRoll_PID+0x6c>)
 800559e:	4a09      	ldr	r2, [pc, #36]	; (80055c4 <StartRoll_PID+0x64>)
 80055a0:	490b      	ldr	r1, [pc, #44]	; (80055d0 <StartRoll_PID+0x70>)
 80055a2:	4806      	ldr	r0, [pc, #24]	; (80055bc <StartRoll_PID+0x5c>)
 80055a4:	f001 fed8 	bl	8007358 <Pid_CompensateRoll>
		vTaskDelay(150);
 80055a8:	2096      	movs	r0, #150	; 0x96
 80055aa:	f010 fb31 	bl	8015c10 <vTaskDelay>
		xSemaphoreTake(I2C_ControllerHandle,25);
 80055ae:	e7e4      	b.n	800557a <StartRoll_PID+0x1a>
 80055b0:	bdb15662 	.word	0xbdb15662
 80055b4:	bce59984 	.word	0xbce59984
 80055b8:	be07bf5a 	.word	0xbe07bf5a
 80055bc:	20000320 	.word	0x20000320
 80055c0:	20000368 	.word	0x20000368
 80055c4:	200003c0 	.word	0x200003c0
 80055c8:	20000374 	.word	0x20000374
 80055cc:	2000047c 	.word	0x2000047c
 80055d0:	20000468 	.word	0x20000468

080055d4 <StartPitch_PID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPitch_PID */
void StartPitch_PID(void const * argument)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPitch_PID */
	Pid_Init(&hpid_pitch, PID_KP_PITCH, PID_KI_PITCH, PID_KD_PITCH);
 80055dc:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 80055e0:	eddf 0a10 	vldr	s1, [pc, #64]	; 8005624 <StartPitch_PID+0x50>
 80055e4:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8005628 <StartPitch_PID+0x54>
 80055e8:	4810      	ldr	r0, [pc, #64]	; (800562c <StartPitch_PID+0x58>)
 80055ea:	f001 fe57 	bl	800729c <Pid_Init>
  /* Infinite loop */
  for(;;)
  {
	  	/*Read pitch axis data*/
		xSemaphoreTake(I2C_ControllerHandle,25);
 80055ee:	4b10      	ldr	r3, [pc, #64]	; (8005630 <StartPitch_PID+0x5c>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2119      	movs	r1, #25
 80055f4:	4618      	mov	r0, r3
 80055f6:	f00f ffc9 	bl	801558c <xQueueSemaphoreTake>
		BNO055_ReadEuler_Pitch(&hi2c2, &IMU_BNO055_struct);
 80055fa:	490e      	ldr	r1, [pc, #56]	; (8005634 <StartPitch_PID+0x60>)
 80055fc:	480e      	ldr	r0, [pc, #56]	; (8005638 <StartPitch_PID+0x64>)
 80055fe:	f000 fea7 	bl	8006350 <BNO055_ReadEuler_Pitch>
		xSemaphoreGive(I2C_ControllerHandle);
 8005602:	4b0b      	ldr	r3, [pc, #44]	; (8005630 <StartPitch_PID+0x5c>)
 8005604:	6818      	ldr	r0, [r3, #0]
 8005606:	2300      	movs	r3, #0
 8005608:	2200      	movs	r2, #0
 800560a:	2100      	movs	r1, #0
 800560c:	f00f fe4a 	bl	80152a4 <xQueueGenericSend>

		/*Compensate PID */
		Pid_CompensatePitch(&hpid_pitch, &COMMAND_struct, &IMU_BNO055_struct, &HDW_CONTROLLER_struct);
 8005610:	4b0a      	ldr	r3, [pc, #40]	; (800563c <StartPitch_PID+0x68>)
 8005612:	4a08      	ldr	r2, [pc, #32]	; (8005634 <StartPitch_PID+0x60>)
 8005614:	490a      	ldr	r1, [pc, #40]	; (8005640 <StartPitch_PID+0x6c>)
 8005616:	4805      	ldr	r0, [pc, #20]	; (800562c <StartPitch_PID+0x58>)
 8005618:	f001 ff64 	bl	80074e4 <Pid_CompensatePitch>
		vTaskDelay(150);
 800561c:	2096      	movs	r0, #150	; 0x96
 800561e:	f010 faf7 	bl	8015c10 <vTaskDelay>
		xSemaphoreTake(I2C_ControllerHandle,25);
 8005622:	e7e4      	b.n	80055ee <StartPitch_PID+0x1a>
 8005624:	3ccccccd 	.word	0x3ccccccd
 8005628:	42c80000 	.word	0x42c80000
 800562c:	200002d8 	.word	0x200002d8
 8005630:	20000368 	.word	0x20000368
 8005634:	200003c0 	.word	0x200003c0
 8005638:	20000374 	.word	0x20000374
 800563c:	2000047c 	.word	0x2000047c
 8005640:	20000468 	.word	0x20000468

08005644 <StartYaw_PID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartYaw_PID */
void StartYaw_PID(void const * argument)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartYaw_PID */
	Pid_Init(&hpid_yaw, PID_KP_YAW, PID_KI_YAW, PID_KD_YAW);
 800564c:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 8005650:	eddf 0a10 	vldr	s1, [pc, #64]	; 8005694 <StartYaw_PID+0x50>
 8005654:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8005698 <StartYaw_PID+0x54>
 8005658:	4810      	ldr	r0, [pc, #64]	; (800569c <StartYaw_PID+0x58>)
 800565a:	f001 fe1f 	bl	800729c <Pid_Init>
  /* Infinite loop */
  for(;;)
  {
	  	/*Read yaw axis data*/
		xSemaphoreTake(I2C_ControllerHandle,25);
 800565e:	4b10      	ldr	r3, [pc, #64]	; (80056a0 <StartYaw_PID+0x5c>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2119      	movs	r1, #25
 8005664:	4618      	mov	r0, r3
 8005666:	f00f ff91 	bl	801558c <xQueueSemaphoreTake>
		BNO055_ReadEuler_Yaw(&hi2c2, &IMU_BNO055_struct);
 800566a:	490e      	ldr	r1, [pc, #56]	; (80056a4 <StartYaw_PID+0x60>)
 800566c:	480e      	ldr	r0, [pc, #56]	; (80056a8 <StartYaw_PID+0x64>)
 800566e:	f000 fec1 	bl	80063f4 <BNO055_ReadEuler_Yaw>
		xSemaphoreGive(I2C_ControllerHandle);
 8005672:	4b0b      	ldr	r3, [pc, #44]	; (80056a0 <StartYaw_PID+0x5c>)
 8005674:	6818      	ldr	r0, [r3, #0]
 8005676:	2300      	movs	r3, #0
 8005678:	2200      	movs	r2, #0
 800567a:	2100      	movs	r1, #0
 800567c:	f00f fe12 	bl	80152a4 <xQueueGenericSend>

		/*Compensate PID step 1 - error calculation */
		Pid_CompensateYaw(&hpid_yaw, &COMMAND_struct, &IMU_BNO055_struct, &HDW_CONTROLLER_struct);
 8005680:	4b0a      	ldr	r3, [pc, #40]	; (80056ac <StartYaw_PID+0x68>)
 8005682:	4a08      	ldr	r2, [pc, #32]	; (80056a4 <StartYaw_PID+0x60>)
 8005684:	490a      	ldr	r1, [pc, #40]	; (80056b0 <StartYaw_PID+0x6c>)
 8005686:	4805      	ldr	r0, [pc, #20]	; (800569c <StartYaw_PID+0x58>)
 8005688:	f001 fe23 	bl	80072d2 <Pid_CompensateYaw>
		vTaskDelay(150);
 800568c:	2096      	movs	r0, #150	; 0x96
 800568e:	f010 fabf 	bl	8015c10 <vTaskDelay>
		xSemaphoreTake(I2C_ControllerHandle,25);
 8005692:	e7e4      	b.n	800565e <StartYaw_PID+0x1a>
 8005694:	3ccccccd 	.word	0x3ccccccd
 8005698:	42c80000 	.word	0x42c80000
 800569c:	200002fc 	.word	0x200002fc
 80056a0:	20000368 	.word	0x20000368
 80056a4:	200003c0 	.word	0x200003c0
 80056a8:	20000374 	.word	0x20000374
 80056ac:	2000047c 	.word	0x2000047c
 80056b0:	20000468 	.word	0x20000468

080056b4 <StartPressureMonitor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPressureMonitor */
void StartPressureMonitor(void const * argument)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPressureMonitor */
	BMP390_Init(&hi2c2);
 80056bc:	480f      	ldr	r0, [pc, #60]	; (80056fc <StartPressureMonitor+0x48>)
 80056be:	f000 f9ed 	bl	8005a9c <BMP390_Init>

	/*Barometer calibration*/
	BMP390_GetP0Pressure(&hi2c2, &ALTIMETER_struct, I2C_ControllerHandle);
 80056c2:	4b0f      	ldr	r3, [pc, #60]	; (8005700 <StartPressureMonitor+0x4c>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	461a      	mov	r2, r3
 80056c8:	490e      	ldr	r1, [pc, #56]	; (8005704 <StartPressureMonitor+0x50>)
 80056ca:	480c      	ldr	r0, [pc, #48]	; (80056fc <StartPressureMonitor+0x48>)
 80056cc:	f000 fa30 	bl	8005b30 <BMP390_GetP0Pressure>

  /* Infinite loop */
  for(;;)
  {
	  BMP390_ReadPress(&hi2c2,&ALTIMETER_struct, I2C_ControllerHandle);
 80056d0:	4b0b      	ldr	r3, [pc, #44]	; (8005700 <StartPressureMonitor+0x4c>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	461a      	mov	r2, r3
 80056d6:	490b      	ldr	r1, [pc, #44]	; (8005704 <StartPressureMonitor+0x50>)
 80056d8:	4808      	ldr	r0, [pc, #32]	; (80056fc <StartPressureMonitor+0x48>)
 80056da:	f000 f979 	bl	80059d0 <BMP390_ReadPress>
	  BMP390_ReadTemp(&hi2c2, &ALTIMETER_struct, I2C_ControllerHandle);
 80056de:	4b08      	ldr	r3, [pc, #32]	; (8005700 <StartPressureMonitor+0x4c>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	461a      	mov	r2, r3
 80056e4:	4907      	ldr	r1, [pc, #28]	; (8005704 <StartPressureMonitor+0x50>)
 80056e6:	4805      	ldr	r0, [pc, #20]	; (80056fc <StartPressureMonitor+0x48>)
 80056e8:	f000 f91c 	bl	8005924 <BMP390_ReadTemp>
	  BMP390_GetRelativeAltitude(&ALTIMETER_struct);
 80056ec:	4805      	ldr	r0, [pc, #20]	; (8005704 <StartPressureMonitor+0x50>)
 80056ee:	f000 fa4b 	bl	8005b88 <BMP390_GetRelativeAltitude>
	  /*Recalibrate sensor if gps data move too much*/
	  vTaskDelay(500);
 80056f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80056f6:	f010 fa8b 	bl	8015c10 <vTaskDelay>
	  BMP390_ReadPress(&hi2c2,&ALTIMETER_struct, I2C_ControllerHandle);
 80056fa:	e7e9      	b.n	80056d0 <StartPressureMonitor+0x1c>
 80056fc:	20000374 	.word	0x20000374
 8005700:	20000368 	.word	0x20000368
 8005704:	200004ac 	.word	0x200004ac

08005708 <StartGPS>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGPS */
void StartGPS(void const * argument)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  /*TO BE DONE marche pas trop */
	  /*When UART IT then block task until IT*/
	  HAL_UART_Receive_IT(&huart4, &gps_receive_rx, BUFFER_SIZE_NMEA);
 8005710:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005714:	4909      	ldr	r1, [pc, #36]	; (800573c <StartGPS+0x34>)
 8005716:	480a      	ldr	r0, [pc, #40]	; (8005740 <StartGPS+0x38>)
 8005718:	f009 fd28 	bl	800f16c <HAL_UART_Receive_IT>
	  xSemaphoreTake(GPS_UART_SemaphoreHandle,100000);
 800571c:	4b09      	ldr	r3, [pc, #36]	; (8005744 <StartGPS+0x3c>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4909      	ldr	r1, [pc, #36]	; (8005748 <StartGPS+0x40>)
 8005722:	4618      	mov	r0, r3
 8005724:	f00f ff32 	bl	801558c <xQueueSemaphoreTake>
	  gps_ReadNMEA(gps_receive_rx,&GPS_struct);
 8005728:	4908      	ldr	r1, [pc, #32]	; (800574c <StartGPS+0x44>)
 800572a:	4804      	ldr	r0, [pc, #16]	; (800573c <StartGPS+0x34>)
 800572c:	f001 f82a 	bl	8006784 <gps_ReadNMEA>
	  vTaskDelay(1000);
 8005730:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005734:	f010 fa6c 	bl	8015c10 <vTaskDelay>
	  HAL_UART_Receive_IT(&huart4, &gps_receive_rx, BUFFER_SIZE_NMEA);
 8005738:	e7ea      	b.n	8005710 <StartGPS+0x8>
 800573a:	bf00      	nop
 800573c:	200004f0 	.word	0x200004f0
 8005740:	20000a74 	.word	0x20000a74
 8005744:	2000036c 	.word	0x2000036c
 8005748:	000186a0 	.word	0x000186a0
 800574c:	200004c0 	.word	0x200004c0

08005750 <StartMainTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMainTask */
void StartMainTask(void const * argument)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b09c      	sub	sp, #112	; 0x70
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMainTask */
	  xSemaphoreTake(HG_PROTECTION_SEMHandle,9999999999999999);
 8005758:	4b19      	ldr	r3, [pc, #100]	; (80057c0 <StartMainTask+0x70>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4919      	ldr	r1, [pc, #100]	; (80057c4 <StartMainTask+0x74>)
 800575e:	4618      	mov	r0, r3
 8005760:	f00f ff14 	bl	801558c <xQueueSemaphoreTake>
	  xSemaphoreTake(HG_PROTECTION_SEMHandle,9999999999999999);
 8005764:	4b16      	ldr	r3, [pc, #88]	; (80057c0 <StartMainTask+0x70>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4916      	ldr	r1, [pc, #88]	; (80057c4 <StartMainTask+0x74>)
 800576a:	4618      	mov	r0, r3
 800576c:	f00f ff0e 	bl	801558c <xQueueSemaphoreTake>
	for(int i=0;i<5;i++){
 8005770:	2300      	movs	r3, #0
 8005772:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005774:	e011      	b.n	800579a <StartMainTask+0x4a>
		htim3.Instance->CCR1 = 1000;
 8005776:	4b14      	ldr	r3, [pc, #80]	; (80057c8 <StartMainTask+0x78>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800577e:	635a      	str	r2, [r3, #52]	; 0x34
		vTaskDelay(100);
 8005780:	2064      	movs	r0, #100	; 0x64
 8005782:	f010 fa45 	bl	8015c10 <vTaskDelay>
		htim3.Instance->CCR1 = 0;
 8005786:	4b10      	ldr	r3, [pc, #64]	; (80057c8 <StartMainTask+0x78>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2200      	movs	r2, #0
 800578c:	635a      	str	r2, [r3, #52]	; 0x34
		vTaskDelay(100);
 800578e:	2064      	movs	r0, #100	; 0x64
 8005790:	f010 fa3e 	bl	8015c10 <vTaskDelay>
	for(int i=0;i<5;i++){
 8005794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005796:	3301      	adds	r3, #1
 8005798:	66fb      	str	r3, [r7, #108]	; 0x6c
 800579a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800579c:	2b04      	cmp	r3, #4
 800579e:	ddea      	ble.n	8005776 <StartMainTask+0x26>
  /* Infinite loop */
  for(;;)
  {

//	  BNO055_ReadLina(&hi2c2, &IMU_BNO055_struct, I2C_ControllerHandle);
	  BNO055_ReadAccel(&hi2c2, &IMU_BNO055_struct, I2C_ControllerHandle);
 80057a0:	4b0a      	ldr	r3, [pc, #40]	; (80057cc <StartMainTask+0x7c>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	461a      	mov	r2, r3
 80057a6:	490a      	ldr	r1, [pc, #40]	; (80057d0 <StartMainTask+0x80>)
 80057a8:	480a      	ldr	r0, [pc, #40]	; (80057d4 <StartMainTask+0x84>)
 80057aa:	f000 fc61 	bl	8006070 <BNO055_ReadAccel>
	  BNO055_ComputeSpeed(&hi2c2, &IMU_BNO055_struct);
 80057ae:	4908      	ldr	r1, [pc, #32]	; (80057d0 <StartMainTask+0x80>)
 80057b0:	4808      	ldr	r0, [pc, #32]	; (80057d4 <StartMainTask+0x84>)
 80057b2:	f000 fe59 	bl	8006468 <BNO055_ComputeSpeed>


	  vTaskDelay(500);
 80057b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80057ba:	f010 fa29 	bl	8015c10 <vTaskDelay>
	  BNO055_ReadAccel(&hi2c2, &IMU_BNO055_struct, I2C_ControllerHandle);
 80057be:	e7ef      	b.n	80057a0 <StartMainTask+0x50>
 80057c0:	20000370 	.word	0x20000370
 80057c4:	6fc0ffff 	.word	0x6fc0ffff
 80057c8:	200009dc 	.word	0x200009dc
 80057cc:	20000368 	.word	0x20000368
 80057d0:	200003c0 	.word	0x200003c0
 80057d4:	20000374 	.word	0x20000374

080057d8 <StartBatteryMonitoring>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBatteryMonitoring */
void StartBatteryMonitoring(void const * argument)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBatteryMonitoring */
  /* Infinite loop */
  for(;;)
  {
	Battery_ReadBatteryVoltage(&BATTERY_Struct,BatteryMonitoringData);
 80057e0:	4909      	ldr	r1, [pc, #36]	; (8005808 <StartBatteryMonitoring+0x30>)
 80057e2:	480a      	ldr	r0, [pc, #40]	; (800580c <StartBatteryMonitoring+0x34>)
 80057e4:	f7ff fcb0 	bl	8005148 <Battery_ReadBatteryVoltage>
	Battery_ReadCurrent5V(&BATTERY_Struct, BatteryMonitoringData);
 80057e8:	4907      	ldr	r1, [pc, #28]	; (8005808 <StartBatteryMonitoring+0x30>)
 80057ea:	4808      	ldr	r0, [pc, #32]	; (800580c <StartBatteryMonitoring+0x34>)
 80057ec:	f7ff fd20 	bl	8005230 <Battery_ReadCurrent5V>
	Battery_ReadCurrent3V3(&BATTERY_Struct, BatteryMonitoringData);
 80057f0:	4905      	ldr	r1, [pc, #20]	; (8005808 <StartBatteryMonitoring+0x30>)
 80057f2:	4806      	ldr	r0, [pc, #24]	; (800580c <StartBatteryMonitoring+0x34>)
 80057f4:	f7ff fcd8 	bl	80051a8 <Battery_ReadCurrent3V3>
	Battery_RemaningTime(&BATTERY_Struct);
 80057f8:	4804      	ldr	r0, [pc, #16]	; (800580c <StartBatteryMonitoring+0x34>)
 80057fa:	f7ff fd5d 	bl	80052b8 <Battery_RemaningTime>
    vTaskDelay(5000);
 80057fe:	f241 3088 	movw	r0, #5000	; 0x1388
 8005802:	f010 fa05 	bl	8015c10 <vTaskDelay>
	Battery_ReadBatteryVoltage(&BATTERY_Struct,BatteryMonitoringData);
 8005806:	e7eb      	b.n	80057e0 <StartBatteryMonitoring+0x8>
 8005808:	200008d8 	.word	0x200008d8
 800580c:	200004e0 	.word	0x200004e0

08005810 <StartTelemetry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetry */
void StartTelemetry(void const * argument)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTelemetry */
	WIOE5_Init(&huart5);
 8005818:	4803      	ldr	r0, [pc, #12]	; (8005828 <StartTelemetry+0x18>)
 800581a:	f001 fb71 	bl	8006f00 <WIOE5_Init>
  /* Infinite loop */
  for(;;)
  {
	  vTaskDelay(1000);
 800581e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005822:	f010 f9f5 	bl	8015c10 <vTaskDelay>
 8005826:	e7fa      	b.n	800581e <StartTelemetry+0xe>
 8005828:	20000b04 	.word	0x20000b04

0800582c <BMP390_EnablePressureSensor>:
	//Clearing the register is done by reading it
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, STATUS_REG, 1, &data, 1, 10);
}

void BMP390_EnablePressureSensor(I2C_HandleTypeDef *I2C){
 800582c:	b580      	push	{r7, lr}
 800582e:	b088      	sub	sp, #32
 8005830:	af04      	add	r7, sp, #16
 8005832:	6078      	str	r0, [r7, #4]
	uint8_t reg_value;
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
 8005834:	230a      	movs	r3, #10
 8005836:	9302      	str	r3, [sp, #8]
 8005838:	2301      	movs	r3, #1
 800583a:	9301      	str	r3, [sp, #4]
 800583c:	f107 030f 	add.w	r3, r7, #15
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	2301      	movs	r3, #1
 8005844:	221b      	movs	r2, #27
 8005846:	21ec      	movs	r1, #236	; 0xec
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f004 fe75 	bl	800a538 <HAL_I2C_Mem_Read>
	data = (reg_value&0x32) + 0x01;
 800584e:	7bfb      	ldrb	r3, [r7, #15]
 8005850:	f003 0332 	and.w	r3, r3, #50	; 0x32
 8005854:	b2db      	uxtb	r3, r3
 8005856:	3301      	adds	r3, #1
 8005858:	b2db      	uxtb	r3, r3
 800585a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
 800585c:	230a      	movs	r3, #10
 800585e:	9302      	str	r3, [sp, #8]
 8005860:	2301      	movs	r3, #1
 8005862:	9301      	str	r3, [sp, #4]
 8005864:	f107 030e 	add.w	r3, r7, #14
 8005868:	9300      	str	r3, [sp, #0]
 800586a:	2301      	movs	r3, #1
 800586c:	221b      	movs	r2, #27
 800586e:	21ec      	movs	r1, #236	; 0xec
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f004 fd4d 	bl	800a310 <HAL_I2C_Mem_Write>
}
 8005876:	bf00      	nop
 8005878:	3710      	adds	r7, #16
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <BMP390_EnableTempSensor>:
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
	data = (reg_value&0x31);
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
}

void BMP390_EnableTempSensor(I2C_HandleTypeDef *I2C){
 800587e:	b580      	push	{r7, lr}
 8005880:	b088      	sub	sp, #32
 8005882:	af04      	add	r7, sp, #16
 8005884:	6078      	str	r0, [r7, #4]
	uint8_t reg_value;
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
 8005886:	230a      	movs	r3, #10
 8005888:	9302      	str	r3, [sp, #8]
 800588a:	2301      	movs	r3, #1
 800588c:	9301      	str	r3, [sp, #4]
 800588e:	f107 030f 	add.w	r3, r7, #15
 8005892:	9300      	str	r3, [sp, #0]
 8005894:	2301      	movs	r3, #1
 8005896:	221b      	movs	r2, #27
 8005898:	21ec      	movs	r1, #236	; 0xec
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f004 fe4c 	bl	800a538 <HAL_I2C_Mem_Read>
	data = (reg_value&0x31) + 0x01;
 80058a0:	7bfb      	ldrb	r3, [r7, #15]
 80058a2:	f003 0331 	and.w	r3, r3, #49	; 0x31
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	3301      	adds	r3, #1
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
 80058ae:	230a      	movs	r3, #10
 80058b0:	9302      	str	r3, [sp, #8]
 80058b2:	2301      	movs	r3, #1
 80058b4:	9301      	str	r3, [sp, #4]
 80058b6:	f107 030e 	add.w	r3, r7, #14
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	2301      	movs	r3, #1
 80058be:	221b      	movs	r2, #27
 80058c0:	21ec      	movs	r1, #236	; 0xec
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f004 fd24 	bl	800a310 <HAL_I2C_Mem_Write>
}
 80058c8:	bf00      	nop
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <BMP390_WakeUp>:
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
	data = (reg_value&0x03);
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
}

void BMP390_WakeUp(I2C_HandleTypeDef *I2C){
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b088      	sub	sp, #32
 80058d4:	af04      	add	r7, sp, #16
 80058d6:	6078      	str	r0, [r7, #4]
	uint8_t reg_value;
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
 80058d8:	230a      	movs	r3, #10
 80058da:	9302      	str	r3, [sp, #8]
 80058dc:	2301      	movs	r3, #1
 80058de:	9301      	str	r3, [sp, #4]
 80058e0:	f107 030f 	add.w	r3, r7, #15
 80058e4:	9300      	str	r3, [sp, #0]
 80058e6:	2301      	movs	r3, #1
 80058e8:	221b      	movs	r2, #27
 80058ea:	21ec      	movs	r1, #236	; 0xec
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f004 fe23 	bl	800a538 <HAL_I2C_Mem_Read>
	data = (reg_value&0x03) + 0x30;
 80058f2:	7bfb      	ldrb	r3, [r7, #15]
 80058f4:	f003 0303 	and.w	r3, r3, #3
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	3330      	adds	r3, #48	; 0x30
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
 8005900:	230a      	movs	r3, #10
 8005902:	9302      	str	r3, [sp, #8]
 8005904:	2301      	movs	r3, #1
 8005906:	9301      	str	r3, [sp, #4]
 8005908:	f107 030e 	add.w	r3, r7, #14
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	2301      	movs	r3, #1
 8005910:	221b      	movs	r2, #27
 8005912:	21ec      	movs	r1, #236	; 0xec
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f004 fcfb 	bl	800a310 <HAL_I2C_Mem_Write>
}
 800591a:	bf00      	nop
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
	...

08005924 <BMP390_ReadTemp>:
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, CONFIG_REG, 1, &reg_value, 1, 10);
	data = (reg_value&0x01) + (value<<1);
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, OSR_REG, 1, &data, 1, 10);
}

void BMP390_ReadTemp(I2C_HandleTypeDef *I2C,ALTIMETER_t *altimeter,osMutexId I2CControllerProtect){
 8005924:	b580      	push	{r7, lr}
 8005926:	b08a      	sub	sp, #40	; 0x28
 8005928:	af04      	add	r7, sp, #16
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
	uint8_t XLSB;
	uint8_t LSB;
	uint8_t MSB;
	uint32_t temp;

	xSemaphoreTake(I2CControllerProtect, 35);
 8005930:	2123      	movs	r1, #35	; 0x23
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f00f fe2a 	bl	801558c <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, TEMP_XLSB_REG, 1, &XLSB, 1, 10);
 8005938:	230a      	movs	r3, #10
 800593a:	9302      	str	r3, [sp, #8]
 800593c:	2301      	movs	r3, #1
 800593e:	9301      	str	r3, [sp, #4]
 8005940:	f107 0313 	add.w	r3, r7, #19
 8005944:	9300      	str	r3, [sp, #0]
 8005946:	2301      	movs	r3, #1
 8005948:	2207      	movs	r2, #7
 800594a:	21ec      	movs	r1, #236	; 0xec
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	f004 fdf3 	bl	800a538 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, TEMP_LSB_REG, 1, &LSB, 1, 10);
 8005952:	230a      	movs	r3, #10
 8005954:	9302      	str	r3, [sp, #8]
 8005956:	2301      	movs	r3, #1
 8005958:	9301      	str	r3, [sp, #4]
 800595a:	f107 0312 	add.w	r3, r7, #18
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	2301      	movs	r3, #1
 8005962:	2208      	movs	r2, #8
 8005964:	21ec      	movs	r1, #236	; 0xec
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	f004 fde6 	bl	800a538 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, TEMP_MSB_REG, 1, &MSB, 1, 10);
 800596c:	230a      	movs	r3, #10
 800596e:	9302      	str	r3, [sp, #8]
 8005970:	2301      	movs	r3, #1
 8005972:	9301      	str	r3, [sp, #4]
 8005974:	f107 0311 	add.w	r3, r7, #17
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	2301      	movs	r3, #1
 800597c:	2209      	movs	r2, #9
 800597e:	21ec      	movs	r1, #236	; 0xec
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f004 fdd9 	bl	800a538 <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 8005986:	2300      	movs	r3, #0
 8005988:	2200      	movs	r2, #0
 800598a:	2100      	movs	r1, #0
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f00f fc89 	bl	80152a4 <xQueueGenericSend>
	temp = XLSB + (LSB<<8) + (MSB<<16);
 8005992:	7cfb      	ldrb	r3, [r7, #19]
 8005994:	461a      	mov	r2, r3
 8005996:	7cbb      	ldrb	r3, [r7, #18]
 8005998:	021b      	lsls	r3, r3, #8
 800599a:	441a      	add	r2, r3
 800599c:	7c7b      	ldrb	r3, [r7, #17]
 800599e:	041b      	lsls	r3, r3, #16
 80059a0:	4413      	add	r3, r2
 80059a2:	617b      	str	r3, [r7, #20]
	altimeter->temp_data = (temp/258111);
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	4b09      	ldr	r3, [pc, #36]	; (80059cc <BMP390_ReadTemp+0xa8>)
 80059a8:	fba3 1302 	umull	r1, r3, r3, r2
 80059ac:	1ad2      	subs	r2, r2, r3
 80059ae:	0852      	lsrs	r2, r2, #1
 80059b0:	4413      	add	r3, r2
 80059b2:	0c5b      	lsrs	r3, r3, #17
 80059b4:	ee07 3a90 	vmov	s15, r3
 80059b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80059c2:	bf00      	nop
 80059c4:	3718      	adds	r7, #24
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	04000105 	.word	0x04000105

080059d0 <BMP390_ReadPress>:

void BMP390_ReadPress(I2C_HandleTypeDef *I2C,ALTIMETER_t *altimeter,osMutexId I2CControllerProtect){
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b08a      	sub	sp, #40	; 0x28
 80059d4:	af04      	add	r7, sp, #16
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
	uint8_t XLSB;
	uint8_t LSB;
	uint8_t MSB;
	uint32_t press;

	xSemaphoreTake(I2CControllerProtect, 35);
 80059dc:	2123      	movs	r1, #35	; 0x23
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f00f fdd4 	bl	801558c <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PRESS_XLSB_REG, 1, &XLSB, 1, 10);
 80059e4:	230a      	movs	r3, #10
 80059e6:	9302      	str	r3, [sp, #8]
 80059e8:	2301      	movs	r3, #1
 80059ea:	9301      	str	r3, [sp, #4]
 80059ec:	f107 0313 	add.w	r3, r7, #19
 80059f0:	9300      	str	r3, [sp, #0]
 80059f2:	2301      	movs	r3, #1
 80059f4:	2204      	movs	r2, #4
 80059f6:	21ec      	movs	r1, #236	; 0xec
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f004 fd9d 	bl	800a538 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PRESS_LSB_REG, 1, &LSB, 1, 10);
 80059fe:	230a      	movs	r3, #10
 8005a00:	9302      	str	r3, [sp, #8]
 8005a02:	2301      	movs	r3, #1
 8005a04:	9301      	str	r3, [sp, #4]
 8005a06:	f107 0312 	add.w	r3, r7, #18
 8005a0a:	9300      	str	r3, [sp, #0]
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	2205      	movs	r2, #5
 8005a10:	21ec      	movs	r1, #236	; 0xec
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f004 fd90 	bl	800a538 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PRESS_MSB_REG, 1, &MSB, 1, 10);
 8005a18:	230a      	movs	r3, #10
 8005a1a:	9302      	str	r3, [sp, #8]
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	9301      	str	r3, [sp, #4]
 8005a20:	f107 0311 	add.w	r3, r7, #17
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	2301      	movs	r3, #1
 8005a28:	2206      	movs	r2, #6
 8005a2a:	21ec      	movs	r1, #236	; 0xec
 8005a2c:	68f8      	ldr	r0, [r7, #12]
 8005a2e:	f004 fd83 	bl	800a538 <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 8005a32:	2300      	movs	r3, #0
 8005a34:	2200      	movs	r2, #0
 8005a36:	2100      	movs	r1, #0
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f00f fc33 	bl	80152a4 <xQueueGenericSend>
	press = XLSB + (LSB<<8) + (MSB<<16);
 8005a3e:	7cfb      	ldrb	r3, [r7, #19]
 8005a40:	461a      	mov	r2, r3
 8005a42:	7cbb      	ldrb	r3, [r7, #18]
 8005a44:	021b      	lsls	r3, r3, #8
 8005a46:	441a      	add	r2, r3
 8005a48:	7c7b      	ldrb	r3, [r7, #17]
 8005a4a:	041b      	lsls	r3, r3, #16
 8005a4c:	4413      	add	r3, r2
 8005a4e:	617b      	str	r3, [r7, #20]
	altimeter->pressure_hpa = (press*PRESS_STEP)+300;
 8005a50:	6978      	ldr	r0, [r7, #20]
 8005a52:	f7fe fd39 	bl	80044c8 <__aeabi_ui2d>
 8005a56:	f04f 0200 	mov.w	r2, #0
 8005a5a:	4b0f      	ldr	r3, [pc, #60]	; (8005a98 <BMP390_ReadPress+0xc8>)
 8005a5c:	f7fe fdae 	bl	80045bc <__aeabi_dmul>
 8005a60:	4602      	mov	r2, r0
 8005a62:	460b      	mov	r3, r1
 8005a64:	4610      	mov	r0, r2
 8005a66:	4619      	mov	r1, r3
 8005a68:	a309      	add	r3, pc, #36	; (adr r3, 8005a90 <BMP390_ReadPress+0xc0>)
 8005a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6e:	f7fe fbef 	bl	8004250 <__adddf3>
 8005a72:	4602      	mov	r2, r0
 8005a74:	460b      	mov	r3, r1
 8005a76:	4610      	mov	r0, r2
 8005a78:	4619      	mov	r1, r3
 8005a7a:	f7ff f84f 	bl	8004b1c <__aeabi_d2f>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	601a      	str	r2, [r3, #0]

}
 8005a84:	bf00      	nop
 8005a86:	3718      	adds	r7, #24
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	f3af 8000 	nop.w
 8005a90:	00000000 	.word	0x00000000
 8005a94:	4072c000 	.word	0x4072c000
 8005a98:	3f0db000 	.word	0x3f0db000

08005a9c <BMP390_Init>:
	xSemaphoreGive(I2CControllerProtect);
	time = XLSB + (LSB<<8) + (MSB<<16);
	altimeter->time_data = time;
}

uint8_t BMP390_Init(I2C_HandleTypeDef *I2C){
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b088      	sub	sp, #32
 8005aa0:	af04      	add	r7, sp, #16
 8005aa2:	6078      	str	r0, [r7, #4]

	uint8_t data;
	uint8_t res = 0;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	73fb      	strb	r3, [r7, #15]

	//Start by checking dev ID and REV iD
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, CHIP_ID_REG, 1, &data, 1, 10);
 8005aa8:	230a      	movs	r3, #10
 8005aaa:	9302      	str	r3, [sp, #8]
 8005aac:	2301      	movs	r3, #1
 8005aae:	9301      	str	r3, [sp, #4]
 8005ab0:	f107 030e 	add.w	r3, r7, #14
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	2200      	movs	r2, #0
 8005aba:	21ec      	movs	r1, #236	; 0xec
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f004 fd3b 	bl	800a538 <HAL_I2C_Mem_Read>
	if(data!=0x60){
 8005ac2:	7bbb      	ldrb	r3, [r7, #14]
 8005ac4:	2b60      	cmp	r3, #96	; 0x60
 8005ac6:	d001      	beq.n	8005acc <BMP390_Init+0x30>
		res = 1;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	73fb      	strb	r3, [r7, #15]
	}
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, REV_ID_REG, 1, &data, 1, 10);
 8005acc:	230a      	movs	r3, #10
 8005ace:	9302      	str	r3, [sp, #8]
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	9301      	str	r3, [sp, #4]
 8005ad4:	f107 030e 	add.w	r3, r7, #14
 8005ad8:	9300      	str	r3, [sp, #0]
 8005ada:	2301      	movs	r3, #1
 8005adc:	2201      	movs	r2, #1
 8005ade:	21ec      	movs	r1, #236	; 0xec
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f004 fd29 	bl	800a538 <HAL_I2C_Mem_Read>
	if(data!=0x01){
 8005ae6:	7bbb      	ldrb	r3, [r7, #14]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d001      	beq.n	8005af0 <BMP390_Init+0x54>
		res = 1;
 8005aec:	2301      	movs	r3, #1
 8005aee:	73fb      	strb	r3, [r7, #15]
	}

	//Enable all sensors
	BMP390_EnableTempSensor(I2C);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f7ff fec4 	bl	800587e <BMP390_EnableTempSensor>
	BMP390_EnablePressureSensor(I2C);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f7ff fe98 	bl	800582c <BMP390_EnablePressureSensor>

	BMP390_WakeUp(I2C);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f7ff fee7 	bl	80058d0 <BMP390_WakeUp>
	/*Wait until sensor wake up */
	HAL_Delay(5);
 8005b02:	2005      	movs	r0, #5
 8005b04:	f002 fb5e 	bl	80081c4 <HAL_Delay>

	//Set the IT pin on high level and enable with pressure/temp sensor
	data = 0x42;
 8005b08:	2342      	movs	r3, #66	; 0x42
 8005b0a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, INT_CTRL_REG, 1, &data, 1, 10);
 8005b0c:	230a      	movs	r3, #10
 8005b0e:	9302      	str	r3, [sp, #8]
 8005b10:	2301      	movs	r3, #1
 8005b12:	9301      	str	r3, [sp, #4]
 8005b14:	f107 030e 	add.w	r3, r7, #14
 8005b18:	9300      	str	r3, [sp, #0]
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	2219      	movs	r2, #25
 8005b1e:	21ec      	movs	r1, #236	; 0xec
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f004 fbf5 	bl	800a310 <HAL_I2C_Mem_Write>

	//Set Filter value
	//BMP390_SetFilter(I2C, 0x02);


	return res;
 8005b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <BMP390_GetP0Pressure>:

void BMP390_GetP0Pressure(I2C_HandleTypeDef *I2C,ALTIMETER_t *altimeter,osMutexId I2CControllerProtect){
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
	float P0;
	for(int i=0;i<STARTUP_PRESSURE_AVERAGE_COUNT;i++){
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	613b      	str	r3, [r7, #16]
 8005b40:	e010      	b.n	8005b64 <BMP390_GetP0Pressure+0x34>
		BMP390_ReadPress(I2C, altimeter, I2CControllerProtect);
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	68b9      	ldr	r1, [r7, #8]
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f7ff ff42 	bl	80059d0 <BMP390_ReadPress>
		P0 += altimeter->pressure_hpa;
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	edd3 7a00 	vldr	s15, [r3]
 8005b52:	ed97 7a05 	vldr	s14, [r7, #20]
 8005b56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b5a:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i=0;i<STARTUP_PRESSURE_AVERAGE_COUNT;i++){
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	3301      	adds	r3, #1
 8005b62:	613b      	str	r3, [r7, #16]
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	2b09      	cmp	r3, #9
 8005b68:	ddeb      	ble.n	8005b42 <BMP390_GetP0Pressure+0x12>
	}
	altimeter->calibration_pressure = (P0/STARTUP_PRESSURE_AVERAGE_COUNT);
 8005b6a:	ed97 7a05 	vldr	s14, [r7, #20]
 8005b6e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005b72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8005b7c:	bf00      	nop
 8005b7e:	3718      	adds	r7, #24
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	0000      	movs	r0, r0
	...

08005b88 <BMP390_GetRelativeAltitude>:

/*Function use to calculate relative altitude. In order to work properly it should'nt be call before a calibration*/
void BMP390_GetRelativeAltitude(ALTIMETER_t *altimeter){
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
	altimeter->differential_altitude = 44330.0 * (1.0 - pow(altimeter->pressure_hpa / altimeter->calibration_pressure, 0.1903));
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	ed93 7a00 	vldr	s14, [r3]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	edd3 7a03 	vldr	s15, [r3, #12]
 8005b9c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005ba0:	ee16 0a90 	vmov	r0, s13
 8005ba4:	f7fe fcb2 	bl	800450c <__aeabi_f2d>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	460b      	mov	r3, r1
 8005bac:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8005bf8 <BMP390_GetRelativeAltitude+0x70>
 8005bb0:	ec43 2b10 	vmov	d0, r2, r3
 8005bb4:	f012 f87a 	bl	8017cac <pow>
 8005bb8:	ec53 2b10 	vmov	r2, r3, d0
 8005bbc:	f04f 0000 	mov.w	r0, #0
 8005bc0:	4911      	ldr	r1, [pc, #68]	; (8005c08 <BMP390_GetRelativeAltitude+0x80>)
 8005bc2:	f7fe fb43 	bl	800424c <__aeabi_dsub>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	460b      	mov	r3, r1
 8005bca:	4610      	mov	r0, r2
 8005bcc:	4619      	mov	r1, r3
 8005bce:	a30c      	add	r3, pc, #48	; (adr r3, 8005c00 <BMP390_GetRelativeAltitude+0x78>)
 8005bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd4:	f7fe fcf2 	bl	80045bc <__aeabi_dmul>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	460b      	mov	r3, r1
 8005bdc:	4610      	mov	r0, r2
 8005bde:	4619      	mov	r1, r3
 8005be0:	f7fe ff9c 	bl	8004b1c <__aeabi_d2f>
 8005be4:	4602      	mov	r2, r0
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	611a      	str	r2, [r3, #16]
}
 8005bea:	bf00      	nop
 8005bec:	3708      	adds	r7, #8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	f3af 8000 	nop.w
 8005bf8:	1a36e2eb 	.word	0x1a36e2eb
 8005bfc:	3fc85bc0 	.word	0x3fc85bc0
 8005c00:	00000000 	.word	0x00000000
 8005c04:	40e5a540 	.word	0x40e5a540
 8005c08:	3ff00000 	.word	0x3ff00000

08005c0c <BNO055_SetPage>:
 * Method use to switch page in IMU memory
 * param: I2C --> pointer on I2C handle struct
 * param: page --> integer value range 0 to 1 include
 * note: If a page value is bigger than 1 then no error will be raise so be carefull
 */
void BNO055_SetPage(I2C_HandleTypeDef *I2C,uint8_t page){
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af04      	add	r7, sp, #16
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	460b      	mov	r3, r1
 8005c16:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_PAGE_ID, 1, &page, 1, 10);
 8005c18:	230a      	movs	r3, #10
 8005c1a:	9302      	str	r3, [sp, #8]
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	9301      	str	r3, [sp, #4]
 8005c20:	1cfb      	adds	r3, r7, #3
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	2301      	movs	r3, #1
 8005c26:	2207      	movs	r2, #7
 8005c28:	2150      	movs	r1, #80	; 0x50
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f004 fb70 	bl	800a310 <HAL_I2C_Mem_Write>
}
 8005c30:	bf00      	nop
 8005c32:	3708      	adds	r7, #8
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <BNO055_SetOperationMode>:
 * Method use to switch operation mode of IMU
 * param: I2C --> pointer on I2C handle struct
 * param: BNO055 --> pointer on IMU struct
 * param: mode --> operation mode already define in <bno055.h>
 */
void BNO055_SetOperationMode(I2C_HandleTypeDef *I2C,bno055_opmode_t mode,BNO055_t *BNO055){
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b088      	sub	sp, #32
 8005c3c:	af04      	add	r7, sp, #16
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	460b      	mov	r3, r1
 8005c42:	607a      	str	r2, [r7, #4]
 8005c44:	72fb      	strb	r3, [r7, #11]
	BNO055->operational_mode = mode;
 8005c46:	7afa      	ldrb	r2, [r7, #11]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_OPR_MODE, 1, &mode, 1, 10);
 8005c4e:	230a      	movs	r3, #10
 8005c50:	9302      	str	r3, [sp, #8]
 8005c52:	2301      	movs	r3, #1
 8005c54:	9301      	str	r3, [sp, #4]
 8005c56:	f107 030b 	add.w	r3, r7, #11
 8005c5a:	9300      	str	r3, [sp, #0]
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	223d      	movs	r2, #61	; 0x3d
 8005c60:	2150      	movs	r1, #80	; 0x50
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f004 fb54 	bl	800a310 <HAL_I2C_Mem_Write>
}
 8005c68:	bf00      	nop
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <BNO055_ReadSystemReg>:

/*
 * Function use read the system register
 * param: I2C --> pointer on I2C handle struct
 */
uint8_t BNO055_ReadSystemReg(I2C_HandleTypeDef *I2C){
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b088      	sub	sp, #32
 8005c74:	af04      	add	r7, sp, #16
 8005c76:	6078      	str	r0, [r7, #4]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &system_reg, 1, 100);
 8005c78:	2364      	movs	r3, #100	; 0x64
 8005c7a:	9302      	str	r3, [sp, #8]
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	9301      	str	r3, [sp, #4]
 8005c80:	f107 030f 	add.w	r3, r7, #15
 8005c84:	9300      	str	r3, [sp, #0]
 8005c86:	2301      	movs	r3, #1
 8005c88:	223f      	movs	r2, #63	; 0x3f
 8005c8a:	2150      	movs	r1, #80	; 0x50
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f004 fc53 	bl	800a538 <HAL_I2C_Mem_Read>
	return system_reg;
 8005c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3710      	adds	r7, #16
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <BNO055_ReadITStatus>:

/*
 * Function use to read interrupt register
 * param: I2C --> pointer on I2C handle struct
 */
uint8_t BNO055_ReadITStatus(I2C_HandleTypeDef * I2C){
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b088      	sub	sp, #32
 8005ca0:	af04      	add	r7, sp, #16
 8005ca2:	6078      	str	r0, [r7, #4]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_INT_STATUS, 1, &system_reg, 1, 100);
 8005ca4:	2364      	movs	r3, #100	; 0x64
 8005ca6:	9302      	str	r3, [sp, #8]
 8005ca8:	2301      	movs	r3, #1
 8005caa:	9301      	str	r3, [sp, #4]
 8005cac:	f107 030f 	add.w	r3, r7, #15
 8005cb0:	9300      	str	r3, [sp, #0]
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	2237      	movs	r2, #55	; 0x37
 8005cb6:	2150      	movs	r1, #80	; 0x50
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f004 fc3d 	bl	800a538 <HAL_I2C_Mem_Read>
	return system_reg;
 8005cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <BNO055_EnableAccHighG>:
/*
 * Method use to set high G acceleration interrupt
 * param: I2C --> pointer on I2C handle struct
 * note: This method should only be call after a SetPage(1)
 */
void BNO055_EnableAccHighG(I2C_HandleTypeDef *I2C){
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b088      	sub	sp, #32
 8005ccc:	af04      	add	r7, sp, #16
 8005cce:	6078      	str	r0, [r7, #4]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_INT_EN, 1, &system_reg, 1, 100);
 8005cd0:	2364      	movs	r3, #100	; 0x64
 8005cd2:	9302      	str	r3, [sp, #8]
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	9301      	str	r3, [sp, #4]
 8005cd8:	f107 030f 	add.w	r3, r7, #15
 8005cdc:	9300      	str	r3, [sp, #0]
 8005cde:	2301      	movs	r3, #1
 8005ce0:	2210      	movs	r2, #16
 8005ce2:	2150      	movs	r1, #80	; 0x50
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f004 fc27 	bl	800a538 <HAL_I2C_Mem_Read>
	system_reg|=1<<5;
 8005cea:	7bfb      	ldrb	r3, [r7, #15]
 8005cec:	f043 0320 	orr.w	r3, r3, #32
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_INT_EN, 1, &system_reg, 1, 10);
 8005cf4:	230a      	movs	r3, #10
 8005cf6:	9302      	str	r3, [sp, #8]
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	9301      	str	r3, [sp, #4]
 8005cfc:	f107 030f 	add.w	r3, r7, #15
 8005d00:	9300      	str	r3, [sp, #0]
 8005d02:	2301      	movs	r3, #1
 8005d04:	2210      	movs	r2, #16
 8005d06:	2150      	movs	r1, #80	; 0x50
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f004 fb01 	bl	800a310 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_INT_MSK, 1, &system_reg, 1, 100);
 8005d0e:	2364      	movs	r3, #100	; 0x64
 8005d10:	9302      	str	r3, [sp, #8]
 8005d12:	2301      	movs	r3, #1
 8005d14:	9301      	str	r3, [sp, #4]
 8005d16:	f107 030f 	add.w	r3, r7, #15
 8005d1a:	9300      	str	r3, [sp, #0]
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	220f      	movs	r2, #15
 8005d20:	2150      	movs	r1, #80	; 0x50
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f004 fc08 	bl	800a538 <HAL_I2C_Mem_Read>
	system_reg|=1<<5;
 8005d28:	7bfb      	ldrb	r3, [r7, #15]
 8005d2a:	f043 0320 	orr.w	r3, r3, #32
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_INT_MSK, 1, &system_reg, 1, 10);
 8005d32:	230a      	movs	r3, #10
 8005d34:	9302      	str	r3, [sp, #8]
 8005d36:	2301      	movs	r3, #1
 8005d38:	9301      	str	r3, [sp, #4]
 8005d3a:	f107 030f 	add.w	r3, r7, #15
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	2301      	movs	r3, #1
 8005d42:	220f      	movs	r2, #15
 8005d44:	2150      	movs	r1, #80	; 0x50
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f004 fae2 	bl	800a310 <HAL_I2C_Mem_Write>
}
 8005d4c:	bf00      	nop
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <BNO055_EnableHighGAcc>:
/*
 * Method use to set high G acceleration interrupt for each axis
 * param: I2C --> pointer on I2C handle struct
 * axis: --> char use to define an axis Eg: 'X' or 'Y' or 'Z'
 */
void BNO055_EnableHighGAcc(I2C_HandleTypeDef *I2C,char axis){
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b088      	sub	sp, #32
 8005d58:	af04      	add	r7, sp, #16
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	70fb      	strb	r3, [r7, #3]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_INT_SETTINGS, 1, &system_reg, 1, 100);
 8005d60:	2364      	movs	r3, #100	; 0x64
 8005d62:	9302      	str	r3, [sp, #8]
 8005d64:	2301      	movs	r3, #1
 8005d66:	9301      	str	r3, [sp, #4]
 8005d68:	f107 030f 	add.w	r3, r7, #15
 8005d6c:	9300      	str	r3, [sp, #0]
 8005d6e:	2301      	movs	r3, #1
 8005d70:	2212      	movs	r2, #18
 8005d72:	2150      	movs	r1, #80	; 0x50
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f004 fbdf 	bl	800a538 <HAL_I2C_Mem_Read>
	switch (axis) {
 8005d7a:	78fb      	ldrb	r3, [r7, #3]
 8005d7c:	2b5a      	cmp	r3, #90	; 0x5a
 8005d7e:	d012      	beq.n	8005da6 <BNO055_EnableHighGAcc+0x52>
 8005d80:	2b5a      	cmp	r3, #90	; 0x5a
 8005d82:	dc16      	bgt.n	8005db2 <BNO055_EnableHighGAcc+0x5e>
 8005d84:	2b58      	cmp	r3, #88	; 0x58
 8005d86:	d002      	beq.n	8005d8e <BNO055_EnableHighGAcc+0x3a>
 8005d88:	2b59      	cmp	r3, #89	; 0x59
 8005d8a:	d006      	beq.n	8005d9a <BNO055_EnableHighGAcc+0x46>
 8005d8c:	e011      	b.n	8005db2 <BNO055_EnableHighGAcc+0x5e>
		case 'X':
			system_reg|=1<<5;
 8005d8e:	7bfb      	ldrb	r3, [r7, #15]
 8005d90:	f043 0320 	orr.w	r3, r3, #32
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	73fb      	strb	r3, [r7, #15]
			break;
 8005d98:	e00b      	b.n	8005db2 <BNO055_EnableHighGAcc+0x5e>
		case 'Y':
			system_reg|=1<<6;
 8005d9a:	7bfb      	ldrb	r3, [r7, #15]
 8005d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	73fb      	strb	r3, [r7, #15]
			break;
 8005da4:	e005      	b.n	8005db2 <BNO055_EnableHighGAcc+0x5e>
		case 'Z':
			system_reg|=1<<7;
 8005da6:	7bfb      	ldrb	r3, [r7, #15]
 8005da8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	73fb      	strb	r3, [r7, #15]
			break;
 8005db0:	bf00      	nop
	}
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_ACC_INT_SETTINGS, 1, &system_reg, 1, 10);
 8005db2:	230a      	movs	r3, #10
 8005db4:	9302      	str	r3, [sp, #8]
 8005db6:	2301      	movs	r3, #1
 8005db8:	9301      	str	r3, [sp, #4]
 8005dba:	f107 030f 	add.w	r3, r7, #15
 8005dbe:	9300      	str	r3, [sp, #0]
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	2212      	movs	r2, #18
 8005dc4:	2150      	movs	r1, #80	; 0x50
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f004 faa2 	bl	800a310 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_INT_SETTINGS, 1, &system_reg, 1, 100);
 8005dcc:	2364      	movs	r3, #100	; 0x64
 8005dce:	9302      	str	r3, [sp, #8]
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	9301      	str	r3, [sp, #4]
 8005dd4:	f107 030f 	add.w	r3, r7, #15
 8005dd8:	9300      	str	r3, [sp, #0]
 8005dda:	2301      	movs	r3, #1
 8005ddc:	2212      	movs	r2, #18
 8005dde:	2150      	movs	r1, #80	; 0x50
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f004 fba9 	bl	800a538 <HAL_I2C_Mem_Read>
}
 8005de6:	bf00      	nop
 8005de8:	3710      	adds	r7, #16
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <BNO055_ClearIntFlag>:
/*
 * Method use to clear interrupt flag set by hardware
 * param: I2C --> pointer on I2C handle struct
 * note: if call in interrupt, you can find SPI pointer in IMU struct
 */
void BNO055_ClearIntFlag(I2C_HandleTypeDef *I2C){
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b088      	sub	sp, #32
 8005df2:	af04      	add	r7, sp, #16
 8005df4:	6078      	str	r0, [r7, #4]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &system_reg, 1, 100);
 8005df6:	2364      	movs	r3, #100	; 0x64
 8005df8:	9302      	str	r3, [sp, #8]
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	9301      	str	r3, [sp, #4]
 8005dfe:	f107 030f 	add.w	r3, r7, #15
 8005e02:	9300      	str	r3, [sp, #0]
 8005e04:	2301      	movs	r3, #1
 8005e06:	223f      	movs	r2, #63	; 0x3f
 8005e08:	2150      	movs	r1, #80	; 0x50
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f004 fb94 	bl	800a538 <HAL_I2C_Mem_Read>
	system_reg|=1<<6;
 8005e10:	7bfb      	ldrb	r3, [r7, #15]
 8005e12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &system_reg, 1, 10);
 8005e1a:	230a      	movs	r3, #10
 8005e1c:	9302      	str	r3, [sp, #8]
 8005e1e:	2301      	movs	r3, #1
 8005e20:	9301      	str	r3, [sp, #4]
 8005e22:	f107 030f 	add.w	r3, r7, #15
 8005e26:	9300      	str	r3, [sp, #0]
 8005e28:	2301      	movs	r3, #1
 8005e2a:	223f      	movs	r2, #63	; 0x3f
 8005e2c:	2150      	movs	r1, #80	; 0x50
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f004 fa6e 	bl	800a310 <HAL_I2C_Mem_Write>
	BNO055_ReadITStatus(I2C);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f7ff ff31 	bl	8005c9c <BNO055_ReadITStatus>
}
 8005e3a:	bf00      	nop
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <BNO055_EnableExtClock>:
/*
 * Method use to enable external clock for IMU
 * param: I2C --> pointer on I2C handle struct
 * note: If not clock selected then work with LSI else LSE
 */
void BNO055_EnableExtClock(I2C_HandleTypeDef *I2C){
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b088      	sub	sp, #32
 8005e46:	af04      	add	r7, sp, #16
 8005e48:	6078      	str	r0, [r7, #4]
	uint8_t actual_reg_value = BNO055_ReadSystemReg(I2C);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7ff ff10 	bl	8005c70 <BNO055_ReadSystemReg>
 8005e50:	4603      	mov	r3, r0
 8005e52:	73fb      	strb	r3, [r7, #15]
	//Change the 7th bit of this reg --> activate external clock
	uint8_t sys_reg_value = (actual_reg_value&0x7F) + (0x01<<7);
 8005e54:	7bfb      	ldrb	r3, [r7, #15]
 8005e56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	3b80      	subs	r3, #128	; 0x80
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &sys_reg_value, 1, 10);
 8005e62:	230a      	movs	r3, #10
 8005e64:	9302      	str	r3, [sp, #8]
 8005e66:	2301      	movs	r3, #1
 8005e68:	9301      	str	r3, [sp, #4]
 8005e6a:	f107 030e 	add.w	r3, r7, #14
 8005e6e:	9300      	str	r3, [sp, #0]
 8005e70:	2301      	movs	r3, #1
 8005e72:	223f      	movs	r2, #63	; 0x3f
 8005e74:	2150      	movs	r1, #80	; 0x50
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f004 fa4a 	bl	800a310 <HAL_I2C_Mem_Write>
}
 8005e7c:	bf00      	nop
 8005e7e:	3710      	adds	r7, #16
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <BNO055_TriggerSelfTest>:

/*
 * Method use to start a self test
 * param: I2C --> pointer on I2C handle struct
 */
void BNO055_TriggerSelfTest(I2C_HandleTypeDef *I2C){
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b088      	sub	sp, #32
 8005e88:	af04      	add	r7, sp, #16
 8005e8a:	6078      	str	r0, [r7, #4]
	uint8_t actual_reg_value = BNO055_ReadSystemReg(I2C);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f7ff feef 	bl	8005c70 <BNO055_ReadSystemReg>
 8005e92:	4603      	mov	r3, r0
 8005e94:	73fb      	strb	r3, [r7, #15]
	//Change the 7th bit of this reg --> activate external clock
	uint8_t sys_reg_value = (actual_reg_value&0xFE) + 0x01;
 8005e96:	7bfb      	ldrb	r3, [r7, #15]
 8005e98:	f023 0301 	bic.w	r3, r3, #1
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &sys_reg_value, 1, 10);
 8005ea4:	230a      	movs	r3, #10
 8005ea6:	9302      	str	r3, [sp, #8]
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	9301      	str	r3, [sp, #4]
 8005eac:	f107 030e 	add.w	r3, r7, #14
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	223f      	movs	r2, #63	; 0x3f
 8005eb6:	2150      	movs	r1, #80	; 0x50
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f004 fa29 	bl	800a310 <HAL_I2C_Mem_Write>
}
 8005ebe:	bf00      	nop
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <BNO055_CheckSelfTestResult>:
/*
 * Method use to check self test result
 * param: I2C --> pointer on I2C handle struct
 * param: BNO055 --> pointer on IMU struct
 */
uint8_t BNO055_CheckSelfTestResult(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b088      	sub	sp, #32
 8005eca:	af04      	add	r7, sp, #16
 8005ecc:	6078      	str	r0, [r7, #4]
 8005ece:	6039      	str	r1, [r7, #0]
	uint8_t res = 0;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_value;
	//Checking all self power on test result
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ST_RESULT, 1, &reg_value, 1, 10);
 8005ed4:	230a      	movs	r3, #10
 8005ed6:	9302      	str	r3, [sp, #8]
 8005ed8:	2301      	movs	r3, #1
 8005eda:	9301      	str	r3, [sp, #4]
 8005edc:	f107 030e 	add.w	r3, r7, #14
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	2236      	movs	r2, #54	; 0x36
 8005ee6:	2150      	movs	r1, #80	; 0x50
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f004 fb25 	bl	800a538 <HAL_I2C_Mem_Read>
	if((reg_value&0x0F)!=0x0F){
 8005eee:	7bbb      	ldrb	r3, [r7, #14]
 8005ef0:	f003 030f 	and.w	r3, r3, #15
 8005ef4:	2b0f      	cmp	r3, #15
 8005ef6:	d001      	beq.n	8005efc <BNO055_CheckSelfTestResult+0x36>
		res = 1;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	73fb      	strb	r3, [r7, #15]
	}
	//Trigger a test to ensure sensor is working properly
	BNO055_TriggerSelfTest(I2C);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f7ff ffc1 	bl	8005e84 <BNO055_TriggerSelfTest>
	//Wait some time to ensure test is done (made with hal delay because task hasn't started yet)
	osDelay(500);
 8005f02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005f06:	f00e fff8 	bl	8014efa <osDelay>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_ERR, 1, &reg_value, 1, 10);
 8005f0a:	230a      	movs	r3, #10
 8005f0c:	9302      	str	r3, [sp, #8]
 8005f0e:	2301      	movs	r3, #1
 8005f10:	9301      	str	r3, [sp, #4]
 8005f12:	f107 030e 	add.w	r3, r7, #14
 8005f16:	9300      	str	r3, [sp, #0]
 8005f18:	2301      	movs	r3, #1
 8005f1a:	223a      	movs	r2, #58	; 0x3a
 8005f1c:	2150      	movs	r1, #80	; 0x50
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f004 fb0a 	bl	800a538 <HAL_I2C_Mem_Read>
	if(reg_value!=0x00){
 8005f24:	7bbb      	ldrb	r3, [r7, #14]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d001      	beq.n	8005f2e <BNO055_CheckSelfTestResult+0x68>
		res = 1;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	73fb      	strb	r3, [r7, #15]
	}
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_STATUS, 1, &reg_value, 1, 10);
 8005f2e:	230a      	movs	r3, #10
 8005f30:	9302      	str	r3, [sp, #8]
 8005f32:	2301      	movs	r3, #1
 8005f34:	9301      	str	r3, [sp, #4]
 8005f36:	f107 030e 	add.w	r3, r7, #14
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	2239      	movs	r2, #57	; 0x39
 8005f40:	2150      	movs	r1, #80	; 0x50
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f004 faf8 	bl	800a538 <HAL_I2C_Mem_Read>

	return res;
 8005f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <BNO055_SetHighGThreshold>:
 * Method use to set the high g interrupt threshold
 * param: I2C --> pointer on I2C handle struct
 * param: threshold --> threshold in LSB (15.81mg = 1LSB)
 *  * note: need to be call after page(1)
 */
void BNO055_SetHighGThreshold(I2C_HandleTypeDef *I2C,uint8_t threshold){
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b088      	sub	sp, #32
 8005f56:	af04      	add	r7, sp, #16
 8005f58:	6078      	str	r0, [r7, #4]
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	70fb      	strb	r3, [r7, #3]
	uint8_t system_reg;
	system_reg = threshold;
 8005f5e:	78fb      	ldrb	r3, [r7, #3]
 8005f60:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_ACC_HG_THRESH, 1, &system_reg, 1, 10);
 8005f62:	230a      	movs	r3, #10
 8005f64:	9302      	str	r3, [sp, #8]
 8005f66:	2301      	movs	r3, #1
 8005f68:	9301      	str	r3, [sp, #4]
 8005f6a:	f107 030f 	add.w	r3, r7, #15
 8005f6e:	9300      	str	r3, [sp, #0]
 8005f70:	2301      	movs	r3, #1
 8005f72:	2214      	movs	r2, #20
 8005f74:	2150      	movs	r1, #80	; 0x50
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f004 f9ca 	bl	800a310 <HAL_I2C_Mem_Write>
}
 8005f7c:	bf00      	nop
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <BNO055_SetHighGDuration>:
 * Method use to set the high g interrupt duration
 * param: I2C --> pointer on I2C handle struct
 * param: duration --> duration in ms (1LSB = 2ms)
 *  * note: need to be call after page(1)
 */
void BNO055_SetHighGDuration(I2C_HandleTypeDef *I2C,uint8_t duration){
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b088      	sub	sp, #32
 8005f88:	af04      	add	r7, sp, #16
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	70fb      	strb	r3, [r7, #3]
	uint8_t system_reg;
	system_reg = duration;
 8005f90:	78fb      	ldrb	r3, [r7, #3]
 8005f92:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_ACC_HG_DURATION, 1, &system_reg, 1, 10);
 8005f94:	230a      	movs	r3, #10
 8005f96:	9302      	str	r3, [sp, #8]
 8005f98:	2301      	movs	r3, #1
 8005f9a:	9301      	str	r3, [sp, #4]
 8005f9c:	f107 030f 	add.w	r3, r7, #15
 8005fa0:	9300      	str	r3, [sp, #0]
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	2213      	movs	r2, #19
 8005fa6:	2150      	movs	r1, #80	; 0x50
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f004 f9b1 	bl	800a310 <HAL_I2C_Mem_Write>
}
 8005fae:	bf00      	nop
 8005fb0:	3710      	adds	r7, #16
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <BNO055_Init>:
/*
 * Init function for IMU, it enable it run self test
 * param: I2C --> pointer on I2C handle struct
 * param: BNO055 --> pointer on IMU struct
 */
uint8_t BNO055_Init(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b088      	sub	sp, #32
 8005fba:	af04      	add	r7, sp, #16
 8005fbc:	6078      	str	r0, [r7, #4]
 8005fbe:	6039      	str	r1, [r7, #0]

	uint8_t res = 0;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	73fb      	strb	r3, [r7, #15]
	uint8_t reg;

	//Reset the IMU error counter
	BNO055->self_test_error = 0;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

	//Add pointer into IMU struct
	BNO055->I2C_pt = I2C;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	//We need to select the page 1
	BNO055_SetPage(I2C,1);
 8005fd4:	2101      	movs	r1, #1
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f7ff fe18 	bl	8005c0c <BNO055_SetPage>

	//Enable High G accelerometer interrupt
	BNO055_EnableAccHighG(I2C);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f7ff fe73 	bl	8005cc8 <BNO055_EnableAccHighG>

	//Enable HIGH G for axis X/Y/Z
	BNO055_EnableHighGAcc(I2C, 'X');
 8005fe2:	2158      	movs	r1, #88	; 0x58
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f7ff feb5 	bl	8005d54 <BNO055_EnableHighGAcc>
	BNO055_EnableHighGAcc(I2C, 'Y');
 8005fea:	2159      	movs	r1, #89	; 0x59
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f7ff feb1 	bl	8005d54 <BNO055_EnableHighGAcc>
	BNO055_EnableHighGAcc(I2C, 'Z');
 8005ff2:	215a      	movs	r1, #90	; 0x5a
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f7ff fead 	bl	8005d54 <BNO055_EnableHighGAcc>

	//Set threshold
	BNO055_SetHighGThreshold(I2C, BNO055_HG_THRESHOLD);
 8005ffa:	2150      	movs	r1, #80	; 0x50
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f7ff ffa8 	bl	8005f52 <BNO055_SetHighGThreshold>

	//Set the duration
	BNO055_SetHighGDuration(I2C, BNO055_HG_DURATION);
 8006002:	2140      	movs	r1, #64	; 0x40
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f7ff ffbd 	bl	8005f84 <BNO055_SetHighGDuration>

	//We need to select the page 0
	BNO055_SetPage(I2C,0);
 800600a:	2100      	movs	r1, #0
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f7ff fdfd 	bl	8005c0c <BNO055_SetPage>

	//As the board have external 32.756 khz clock we use it
	BNO055_EnableExtClock(I2C);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7ff ff15 	bl	8005e42 <BNO055_EnableExtClock>
	/*Make BIST and power up test*/
	osDelay(200);
 8006018:	20c8      	movs	r0, #200	; 0xc8
 800601a:	f00e ff6e 	bl	8014efa <osDelay>
	reg = BNO055_CheckSelfTestResult(I2C, BNO055);
 800601e:	6839      	ldr	r1, [r7, #0]
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f7ff ff50 	bl	8005ec6 <BNO055_CheckSelfTestResult>
 8006026:	4603      	mov	r3, r0
 8006028:	73bb      	strb	r3, [r7, #14]
	if(reg != 0x00){
 800602a:	7bbb      	ldrb	r3, [r7, #14]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d001      	beq.n	8006034 <BNO055_Init+0x7e>
		res = 1;
 8006030:	2301      	movs	r3, #1
 8006032:	73fb      	strb	r3, [r7, #15]
	}

	//Select the operation mode (the NDOF use all 3 sensor and will calculate data using absolute orientation (USE BNO055_OPERATION_MODE_IMU if you want to have relative orientation)
	BNO055_SetOperationMode(I2C, BNO055_OPERATION_MODE_NDOF, BNO055);
 8006034:	683a      	ldr	r2, [r7, #0]
 8006036:	210c      	movs	r1, #12
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f7ff fdfd 	bl	8005c38 <BNO055_SetOperationMode>

	/*Check for writing problem of OPR_MODE_REG*/
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_OPR_MODE, 1, &reg, 1, 10);
 800603e:	230a      	movs	r3, #10
 8006040:	9302      	str	r3, [sp, #8]
 8006042:	2301      	movs	r3, #1
 8006044:	9301      	str	r3, [sp, #4]
 8006046:	f107 030e 	add.w	r3, r7, #14
 800604a:	9300      	str	r3, [sp, #0]
 800604c:	2301      	movs	r3, #1
 800604e:	223d      	movs	r2, #61	; 0x3d
 8006050:	2150      	movs	r1, #80	; 0x50
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f004 fa70 	bl	800a538 <HAL_I2C_Mem_Read>
	if( reg != BNO055_OPERATION_MODE_NDOF){
 8006058:	7bbb      	ldrb	r3, [r7, #14]
 800605a:	2b0c      	cmp	r3, #12
 800605c:	d001      	beq.n	8006062 <BNO055_Init+0xac>
		res = 1;
 800605e:	2301      	movs	r3, #1
 8006060:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006062:	7bfb      	ldrb	r3, [r7, #15]
}
 8006064:	4618      	mov	r0, r3
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	0000      	movs	r0, r0
	...

08006070 <BNO055_ReadAccel>:
 * Function use to read accelerometer data from IMU
 * param: I2C --> pointer on I2C handle struct
 * param: BNO055 --> pointer on IMU struct
 * param: I2CControllerProtect --> Semaphore use to protect I2C hardware from being modified by more than one task at the same time
 */
void BNO055_ReadAccel(I2C_HandleTypeDef *I2C,BNO055_t *BNO055,osMutexId I2CControllerProtect){
 8006070:	b580      	push	{r7, lr}
 8006072:	b08a      	sub	sp, #40	; 0x28
 8006074:	af04      	add	r7, sp, #16
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
	//Read gyroscope value
	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;


	xSemaphoreTake(I2CControllerProtect,25);
 800607c:	2119      	movs	r1, #25
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f00f fa84 	bl	801558c <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_X_LSB, 1, &reg_value_lsb, 1, 10);
 8006084:	230a      	movs	r3, #10
 8006086:	9302      	str	r3, [sp, #8]
 8006088:	2301      	movs	r3, #1
 800608a:	9301      	str	r3, [sp, #4]
 800608c:	f107 0317 	add.w	r3, r7, #23
 8006090:	9300      	str	r3, [sp, #0]
 8006092:	2301      	movs	r3, #1
 8006094:	2208      	movs	r2, #8
 8006096:	2150      	movs	r1, #80	; 0x50
 8006098:	68f8      	ldr	r0, [r7, #12]
 800609a:	f004 fa4d 	bl	800a538 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_X_MSB, 1, &reg_value_msb, 1, 10);
 800609e:	230a      	movs	r3, #10
 80060a0:	9302      	str	r3, [sp, #8]
 80060a2:	2301      	movs	r3, #1
 80060a4:	9301      	str	r3, [sp, #4]
 80060a6:	f107 0316 	add.w	r3, r7, #22
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	2301      	movs	r3, #1
 80060ae:	2209      	movs	r2, #9
 80060b0:	2150      	movs	r1, #80	; 0x50
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f004 fa40 	bl	800a538 <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 80060b8:	2300      	movs	r3, #0
 80060ba:	2200      	movs	r2, #0
 80060bc:	2100      	movs	r1, #0
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f00f f8f0 	bl	80152a4 <xQueueGenericSend>
	BNO055->raw_data.accelerometer.x = ((float)(reg_value_lsb + (reg_value_msb<<8))/ (float) accelScale);	//The minus sign is only use to sync axis value to board schematic
 80060c4:	7dfb      	ldrb	r3, [r7, #23]
 80060c6:	461a      	mov	r2, r3
 80060c8:	7dbb      	ldrb	r3, [r7, #22]
 80060ca:	021b      	lsls	r3, r3, #8
 80060cc:	4413      	add	r3, r2
 80060ce:	ee07 3a90 	vmov	s15, r3
 80060d2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80060d6:	4b74      	ldr	r3, [pc, #464]	; (80062a8 <BNO055_ReadAccel+0x238>)
 80060d8:	881b      	ldrh	r3, [r3, #0]
 80060da:	ee07 3a90 	vmov	s15, r3
 80060de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80060e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	edc3 7a03 	vstr	s15, [r3, #12]

	/*In order to scale the acceleration correclty on -327m/s^2 to +327m/s^2*/
	if(BNO055->raw_data.accelerometer.x > 327.68){
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7fe fa0b 	bl	800450c <__aeabi_f2d>
 80060f6:	a368      	add	r3, pc, #416	; (adr r3, 8006298 <BNO055_ReadAccel+0x228>)
 80060f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fc:	f7fe fcee 	bl	8004adc <__aeabi_dcmpgt>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d012      	beq.n	800612c <BNO055_ReadAccel+0xbc>
		BNO055->raw_data.accelerometer.x = BNO055->raw_data.accelerometer.x - 655.36;
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	4618      	mov	r0, r3
 800610c:	f7fe f9fe 	bl	800450c <__aeabi_f2d>
 8006110:	a363      	add	r3, pc, #396	; (adr r3, 80062a0 <BNO055_ReadAccel+0x230>)
 8006112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006116:	f7fe f899 	bl	800424c <__aeabi_dsub>
 800611a:	4602      	mov	r2, r0
 800611c:	460b      	mov	r3, r1
 800611e:	4610      	mov	r0, r2
 8006120:	4619      	mov	r1, r3
 8006122:	f7fe fcfb 	bl	8004b1c <__aeabi_d2f>
 8006126:	4602      	mov	r2, r0
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	60da      	str	r2, [r3, #12]
	}

	xSemaphoreTake(I2CControllerProtect,25);
 800612c:	2119      	movs	r1, #25
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f00f fa2c 	bl	801558c <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_Y_LSB, 1, &reg_value_lsb, 1, 10);
 8006134:	230a      	movs	r3, #10
 8006136:	9302      	str	r3, [sp, #8]
 8006138:	2301      	movs	r3, #1
 800613a:	9301      	str	r3, [sp, #4]
 800613c:	f107 0317 	add.w	r3, r7, #23
 8006140:	9300      	str	r3, [sp, #0]
 8006142:	2301      	movs	r3, #1
 8006144:	220a      	movs	r2, #10
 8006146:	2150      	movs	r1, #80	; 0x50
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f004 f9f5 	bl	800a538 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_Y_MSB, 1, &reg_value_msb, 1, 10);
 800614e:	230a      	movs	r3, #10
 8006150:	9302      	str	r3, [sp, #8]
 8006152:	2301      	movs	r3, #1
 8006154:	9301      	str	r3, [sp, #4]
 8006156:	f107 0316 	add.w	r3, r7, #22
 800615a:	9300      	str	r3, [sp, #0]
 800615c:	2301      	movs	r3, #1
 800615e:	220b      	movs	r2, #11
 8006160:	2150      	movs	r1, #80	; 0x50
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f004 f9e8 	bl	800a538 <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 8006168:	2300      	movs	r3, #0
 800616a:	2200      	movs	r2, #0
 800616c:	2100      	movs	r1, #0
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f00f f898 	bl	80152a4 <xQueueGenericSend>
	BNO055->raw_data.accelerometer.y = ((float)(reg_value_lsb + (reg_value_msb<<8))/ (float) accelScale);
 8006174:	7dfb      	ldrb	r3, [r7, #23]
 8006176:	461a      	mov	r2, r3
 8006178:	7dbb      	ldrb	r3, [r7, #22]
 800617a:	021b      	lsls	r3, r3, #8
 800617c:	4413      	add	r3, r2
 800617e:	ee07 3a90 	vmov	s15, r3
 8006182:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006186:	4b48      	ldr	r3, [pc, #288]	; (80062a8 <BNO055_ReadAccel+0x238>)
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	ee07 3a90 	vmov	s15, r3
 800618e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006192:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	edc3 7a04 	vstr	s15, [r3, #16]

	if(BNO055->raw_data.accelerometer.y > 327.68){
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7fe f9b3 	bl	800450c <__aeabi_f2d>
 80061a6:	a33c      	add	r3, pc, #240	; (adr r3, 8006298 <BNO055_ReadAccel+0x228>)
 80061a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ac:	f7fe fc96 	bl	8004adc <__aeabi_dcmpgt>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d012      	beq.n	80061dc <BNO055_ReadAccel+0x16c>
		BNO055->raw_data.accelerometer.y = BNO055->raw_data.accelerometer.y - 655.36;
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7fe f9a6 	bl	800450c <__aeabi_f2d>
 80061c0:	a337      	add	r3, pc, #220	; (adr r3, 80062a0 <BNO055_ReadAccel+0x230>)
 80061c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c6:	f7fe f841 	bl	800424c <__aeabi_dsub>
 80061ca:	4602      	mov	r2, r0
 80061cc:	460b      	mov	r3, r1
 80061ce:	4610      	mov	r0, r2
 80061d0:	4619      	mov	r1, r3
 80061d2:	f7fe fca3 	bl	8004b1c <__aeabi_d2f>
 80061d6:	4602      	mov	r2, r0
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	611a      	str	r2, [r3, #16]
	}


	xSemaphoreTake(I2CControllerProtect,25);
 80061dc:	2119      	movs	r1, #25
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f00f f9d4 	bl	801558c <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_Z_LSB, 1, &reg_value_lsb, 1, 10);
 80061e4:	230a      	movs	r3, #10
 80061e6:	9302      	str	r3, [sp, #8]
 80061e8:	2301      	movs	r3, #1
 80061ea:	9301      	str	r3, [sp, #4]
 80061ec:	f107 0317 	add.w	r3, r7, #23
 80061f0:	9300      	str	r3, [sp, #0]
 80061f2:	2301      	movs	r3, #1
 80061f4:	220c      	movs	r2, #12
 80061f6:	2150      	movs	r1, #80	; 0x50
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f004 f99d 	bl	800a538 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_Z_MSB, 1, &reg_value_msb, 1, 10);
 80061fe:	230a      	movs	r3, #10
 8006200:	9302      	str	r3, [sp, #8]
 8006202:	2301      	movs	r3, #1
 8006204:	9301      	str	r3, [sp, #4]
 8006206:	f107 0316 	add.w	r3, r7, #22
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	2301      	movs	r3, #1
 800620e:	220d      	movs	r2, #13
 8006210:	2150      	movs	r1, #80	; 0x50
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f004 f990 	bl	800a538 <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 8006218:	2300      	movs	r3, #0
 800621a:	2200      	movs	r2, #0
 800621c:	2100      	movs	r1, #0
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f00f f840 	bl	80152a4 <xQueueGenericSend>
	BNO055->raw_data.accelerometer.z = ((float)(reg_value_lsb + (reg_value_msb<<8))/ (float) accelScale);
 8006224:	7dfb      	ldrb	r3, [r7, #23]
 8006226:	461a      	mov	r2, r3
 8006228:	7dbb      	ldrb	r3, [r7, #22]
 800622a:	021b      	lsls	r3, r3, #8
 800622c:	4413      	add	r3, r2
 800622e:	ee07 3a90 	vmov	s15, r3
 8006232:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006236:	4b1c      	ldr	r3, [pc, #112]	; (80062a8 <BNO055_ReadAccel+0x238>)
 8006238:	881b      	ldrh	r3, [r3, #0]
 800623a:	ee07 3a90 	vmov	s15, r3
 800623e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006242:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	edc3 7a05 	vstr	s15, [r3, #20]

	if(BNO055->raw_data.accelerometer.z > 327.68){
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	695b      	ldr	r3, [r3, #20]
 8006250:	4618      	mov	r0, r3
 8006252:	f7fe f95b 	bl	800450c <__aeabi_f2d>
 8006256:	a310      	add	r3, pc, #64	; (adr r3, 8006298 <BNO055_ReadAccel+0x228>)
 8006258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625c:	f7fe fc3e 	bl	8004adc <__aeabi_dcmpgt>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d100      	bne.n	8006268 <BNO055_ReadAccel+0x1f8>
		BNO055->raw_data.accelerometer.z = BNO055->raw_data.accelerometer.z - 655.36;
	}
}
 8006266:	e012      	b.n	800628e <BNO055_ReadAccel+0x21e>
		BNO055->raw_data.accelerometer.z = BNO055->raw_data.accelerometer.z - 655.36;
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	695b      	ldr	r3, [r3, #20]
 800626c:	4618      	mov	r0, r3
 800626e:	f7fe f94d 	bl	800450c <__aeabi_f2d>
 8006272:	a30b      	add	r3, pc, #44	; (adr r3, 80062a0 <BNO055_ReadAccel+0x230>)
 8006274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006278:	f7fd ffe8 	bl	800424c <__aeabi_dsub>
 800627c:	4602      	mov	r2, r0
 800627e:	460b      	mov	r3, r1
 8006280:	4610      	mov	r0, r2
 8006282:	4619      	mov	r1, r3
 8006284:	f7fe fc4a 	bl	8004b1c <__aeabi_d2f>
 8006288:	4602      	mov	r2, r0
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	615a      	str	r2, [r3, #20]
}
 800628e:	bf00      	nop
 8006290:	3718      	adds	r7, #24
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	47ae147b 	.word	0x47ae147b
 800629c:	40747ae1 	.word	0x40747ae1
 80062a0:	47ae147b 	.word	0x47ae147b
 80062a4:	40847ae1 	.word	0x40847ae1
 80062a8:	20000000 	.word	0x20000000

080062ac <BNO055_ReadEuler_Roll>:
 * @INPUT - I2C interface struct
 * @INPUT - IMU struc
 * @OUTPUT - None
 * @INFORMATIONS - If use with freertos or other reeltime os please use a semaphore/mutex to protect I2C interface
 */
void BNO055_ReadEuler_Roll(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b088      	sub	sp, #32
 80062b0:	af04      	add	r7, sp, #16
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]

	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;

	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_ROLL_LSB, 1, &reg_value_lsb, 1, 10);
 80062b6:	230a      	movs	r3, #10
 80062b8:	9302      	str	r3, [sp, #8]
 80062ba:	2301      	movs	r3, #1
 80062bc:	9301      	str	r3, [sp, #4]
 80062be:	f107 030f 	add.w	r3, r7, #15
 80062c2:	9300      	str	r3, [sp, #0]
 80062c4:	2301      	movs	r3, #1
 80062c6:	221c      	movs	r2, #28
 80062c8:	2150      	movs	r1, #80	; 0x50
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f004 f934 	bl	800a538 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_ROLL_MSB, 1, &reg_value_msb, 1, 10);
 80062d0:	230a      	movs	r3, #10
 80062d2:	9302      	str	r3, [sp, #8]
 80062d4:	2301      	movs	r3, #1
 80062d6:	9301      	str	r3, [sp, #4]
 80062d8:	f107 030e 	add.w	r3, r7, #14
 80062dc:	9300      	str	r3, [sp, #0]
 80062de:	2301      	movs	r3, #1
 80062e0:	221d      	movs	r2, #29
 80062e2:	2150      	movs	r1, #80	; 0x50
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f004 f927 	bl	800a538 <HAL_I2C_Mem_Read>
	BNO055->processed_data.euler_angles.y = (float) ((reg_value_lsb + (reg_value_msb<<8))/ (float) eulerScale);
 80062ea:	7bfb      	ldrb	r3, [r7, #15]
 80062ec:	461a      	mov	r2, r3
 80062ee:	7bbb      	ldrb	r3, [r7, #14]
 80062f0:	021b      	lsls	r3, r3, #8
 80062f2:	4413      	add	r3, r2
 80062f4:	ee07 3a90 	vmov	s15, r3
 80062f8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80062fc:	4b11      	ldr	r3, [pc, #68]	; (8006344 <BNO055_ReadEuler_Roll+0x98>)
 80062fe:	881b      	ldrh	r3, [r3, #0]
 8006300:	ee07 3a90 	vmov	s15, r3
 8006304:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006308:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	/*Make sure the data are rotating clockwise*/
	if(BNO055->processed_data.euler_angles.y > 2000){
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8006318:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8006348 <BNO055_ReadEuler_Roll+0x9c>
 800631c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006324:	dc00      	bgt.n	8006328 <BNO055_ReadEuler_Roll+0x7c>
		BNO055->processed_data.euler_angles.y = BNO055->processed_data.euler_angles.y - 4096;
	}
}
 8006326:	e009      	b.n	800633c <BNO055_ReadEuler_Roll+0x90>
		BNO055->processed_data.euler_angles.y = BNO055->processed_data.euler_angles.y - 4096;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800632e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800634c <BNO055_ReadEuler_Roll+0xa0>
 8006332:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 800633c:	bf00      	nop
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	20000002 	.word	0x20000002
 8006348:	44fa0000 	.word	0x44fa0000
 800634c:	45800000 	.word	0x45800000

08006350 <BNO055_ReadEuler_Pitch>:
 * @INPUT - I2C interface struct
 * @INPUT - IMU struc
 * @OUTPUT - None
 * @INFORMATIONS - If use with freertos or other reeltime os please use a semaphore/mutex to protect I2C interface
 */
void BNO055_ReadEuler_Pitch(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8006350:	b580      	push	{r7, lr}
 8006352:	b088      	sub	sp, #32
 8006354:	af04      	add	r7, sp, #16
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]

	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;

	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_PITCH_LSB, 1, &reg_value_lsb, 1, 10);
 800635a:	230a      	movs	r3, #10
 800635c:	9302      	str	r3, [sp, #8]
 800635e:	2301      	movs	r3, #1
 8006360:	9301      	str	r3, [sp, #4]
 8006362:	f107 030f 	add.w	r3, r7, #15
 8006366:	9300      	str	r3, [sp, #0]
 8006368:	2301      	movs	r3, #1
 800636a:	221e      	movs	r2, #30
 800636c:	2150      	movs	r1, #80	; 0x50
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f004 f8e2 	bl	800a538 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_PITCH_MSB, 1, &reg_value_msb, 1, 10);
 8006374:	230a      	movs	r3, #10
 8006376:	9302      	str	r3, [sp, #8]
 8006378:	2301      	movs	r3, #1
 800637a:	9301      	str	r3, [sp, #4]
 800637c:	f107 030e 	add.w	r3, r7, #14
 8006380:	9300      	str	r3, [sp, #0]
 8006382:	2301      	movs	r3, #1
 8006384:	221f      	movs	r2, #31
 8006386:	2150      	movs	r1, #80	; 0x50
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f004 f8d5 	bl	800a538 <HAL_I2C_Mem_Read>
	BNO055->processed_data.euler_angles.x = (float) ((reg_value_lsb + (reg_value_msb<<8))/(float) eulerScale);
 800638e:	7bfb      	ldrb	r3, [r7, #15]
 8006390:	461a      	mov	r2, r3
 8006392:	7bbb      	ldrb	r3, [r7, #14]
 8006394:	021b      	lsls	r3, r3, #8
 8006396:	4413      	add	r3, r2
 8006398:	ee07 3a90 	vmov	s15, r3
 800639c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80063a0:	4b11      	ldr	r3, [pc, #68]	; (80063e8 <BNO055_ReadEuler_Pitch+0x98>)
 80063a2:	881b      	ldrh	r3, [r3, #0]
 80063a4:	ee07 3a90 	vmov	s15, r3
 80063a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80063ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	/*Make sure the data are rotating clockwise*/
	if(BNO055->processed_data.euler_angles.x > 2000){
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80063bc:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80063ec <BNO055_ReadEuler_Pitch+0x9c>
 80063c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063c8:	dc00      	bgt.n	80063cc <BNO055_ReadEuler_Pitch+0x7c>
		BNO055->processed_data.euler_angles.x = BNO055->processed_data.euler_angles.x - 4096;
	}
}
 80063ca:	e009      	b.n	80063e0 <BNO055_ReadEuler_Pitch+0x90>
		BNO055->processed_data.euler_angles.x = BNO055->processed_data.euler_angles.x - 4096;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80063d2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80063f0 <BNO055_ReadEuler_Pitch+0xa0>
 80063d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 80063e0:	bf00      	nop
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	20000002 	.word	0x20000002
 80063ec:	44fa0000 	.word	0x44fa0000
 80063f0:	45800000 	.word	0x45800000

080063f4 <BNO055_ReadEuler_Yaw>:
 * @INPUT - I2C interface struct
 * @INPUT - IMU struct
 * @OUTPUT - None
 * @INFORMATIONS - If use with freertos or other reeltime os please use a semaphore/mutex to protect I2C interface
 */
void BNO055_ReadEuler_Yaw(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b088      	sub	sp, #32
 80063f8:	af04      	add	r7, sp, #16
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]

	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;

	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_HEADING_LSB, 1, &reg_value_lsb, 1, 10);
 80063fe:	230a      	movs	r3, #10
 8006400:	9302      	str	r3, [sp, #8]
 8006402:	2301      	movs	r3, #1
 8006404:	9301      	str	r3, [sp, #4]
 8006406:	f107 030f 	add.w	r3, r7, #15
 800640a:	9300      	str	r3, [sp, #0]
 800640c:	2301      	movs	r3, #1
 800640e:	221a      	movs	r2, #26
 8006410:	2150      	movs	r1, #80	; 0x50
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f004 f890 	bl	800a538 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_HEADING_MSB, 1, &reg_value_msb, 1, 10);
 8006418:	230a      	movs	r3, #10
 800641a:	9302      	str	r3, [sp, #8]
 800641c:	2301      	movs	r3, #1
 800641e:	9301      	str	r3, [sp, #4]
 8006420:	f107 030e 	add.w	r3, r7, #14
 8006424:	9300      	str	r3, [sp, #0]
 8006426:	2301      	movs	r3, #1
 8006428:	221b      	movs	r2, #27
 800642a:	2150      	movs	r1, #80	; 0x50
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f004 f883 	bl	800a538 <HAL_I2C_Mem_Read>
	BNO055->processed_data.euler_angles.z = (float) ((reg_value_lsb + (reg_value_msb<<8))/ (float) eulerScale);
 8006432:	7bfb      	ldrb	r3, [r7, #15]
 8006434:	461a      	mov	r2, r3
 8006436:	7bbb      	ldrb	r3, [r7, #14]
 8006438:	021b      	lsls	r3, r3, #8
 800643a:	4413      	add	r3, r2
 800643c:	ee07 3a90 	vmov	s15, r3
 8006440:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006444:	4b07      	ldr	r3, [pc, #28]	; (8006464 <BNO055_ReadEuler_Yaw+0x70>)
 8006446:	881b      	ldrh	r3, [r3, #0]
 8006448:	ee07 3a90 	vmov	s15, r3
 800644c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006450:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 800645a:	bf00      	nop
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	20000002 	.word	0x20000002

08006468 <BNO055_ComputeSpeed>:
 * @INPUT - I2C interface struct
 * @INPUT - IMU struct
 * @INFORMATIONS - Need to be call after a ReadAccel function in order to work correctly
 * Tick should be increment every ms in order to gather correct data
 */
void BNO055_ComputeSpeed(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8006468:	b580      	push	{r7, lr}
 800646a:	b088      	sub	sp, #32
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]

	float speed_vector_x;
	float current_acceleration =BNO055->raw_data.accelerometer.x;
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	61fb      	str	r3, [r7, #28]
	uint32_t current_tick = HAL_GetTick();
 8006478:	f001 fe98 	bl	80081ac <HAL_GetTick>
 800647c:	61b8      	str	r0, [r7, #24]
	float delta_acceleration = (current_acceleration - BNO055->reserved_for_operation.previous_acceleration.x);
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8006484:	ed97 7a07 	vldr	s14, [r7, #28]
 8006488:	ee77 7a67 	vsub.f32	s15, s14, s15
 800648c:	edc7 7a05 	vstr	s15, [r7, #20]
	uint32_t delta_tick = (current_tick - BNO055->reserved_for_operation.last_call_tick.x);
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006496:	69ba      	ldr	r2, [r7, #24]
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	613b      	str	r3, [r7, #16]


	speed_vector_x = (float)(delta_tick/1000)*current_acceleration;
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	4a0a      	ldr	r2, [pc, #40]	; (80064c8 <BNO055_ComputeSpeed+0x60>)
 80064a0:	fba2 2303 	umull	r2, r3, r2, r3
 80064a4:	099b      	lsrs	r3, r3, #6
 80064a6:	ee07 3a90 	vmov	s15, r3
 80064aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ae:	ed97 7a07 	vldr	s14, [r7, #28]
 80064b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064b6:	edc7 7a03 	vstr	s15, [r7, #12]
	BNO055->processed_data.speed_vector.x = speed_vector_x;
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80064c0:	bf00      	nop
 80064c2:	3720      	adds	r7, #32
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	10624dd3 	.word	0x10624dd3

080064cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80064d2:	4b12      	ldr	r3, [pc, #72]	; (800651c <MX_DMA_Init+0x50>)
 80064d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064d6:	4a11      	ldr	r2, [pc, #68]	; (800651c <MX_DMA_Init+0x50>)
 80064d8:	f043 0304 	orr.w	r3, r3, #4
 80064dc:	6493      	str	r3, [r2, #72]	; 0x48
 80064de:	4b0f      	ldr	r3, [pc, #60]	; (800651c <MX_DMA_Init+0x50>)
 80064e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064e2:	f003 0304 	and.w	r3, r3, #4
 80064e6:	607b      	str	r3, [r7, #4]
 80064e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80064ea:	4b0c      	ldr	r3, [pc, #48]	; (800651c <MX_DMA_Init+0x50>)
 80064ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064ee:	4a0b      	ldr	r2, [pc, #44]	; (800651c <MX_DMA_Init+0x50>)
 80064f0:	f043 0301 	orr.w	r3, r3, #1
 80064f4:	6493      	str	r3, [r2, #72]	; 0x48
 80064f6:	4b09      	ldr	r3, [pc, #36]	; (800651c <MX_DMA_Init+0x50>)
 80064f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064fa:	f003 0301 	and.w	r3, r3, #1
 80064fe:	603b      	str	r3, [r7, #0]
 8006500:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8006502:	2200      	movs	r2, #0
 8006504:	2105      	movs	r1, #5
 8006506:	200b      	movs	r0, #11
 8006508:	f003 f942 	bl	8009790 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800650c:	200b      	movs	r0, #11
 800650e:	f003 f959 	bl	80097c4 <HAL_NVIC_EnableIRQ>

}
 8006512:	bf00      	nop
 8006514:	3708      	adds	r7, #8
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	40021000 	.word	0x40021000

08006520 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b08a      	sub	sp, #40	; 0x28
 8006524:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006526:	f107 0314 	add.w	r3, r7, #20
 800652a:	2200      	movs	r2, #0
 800652c:	601a      	str	r2, [r3, #0]
 800652e:	605a      	str	r2, [r3, #4]
 8006530:	609a      	str	r2, [r3, #8]
 8006532:	60da      	str	r2, [r3, #12]
 8006534:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006536:	4b37      	ldr	r3, [pc, #220]	; (8006614 <MX_GPIO_Init+0xf4>)
 8006538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800653a:	4a36      	ldr	r2, [pc, #216]	; (8006614 <MX_GPIO_Init+0xf4>)
 800653c:	f043 0320 	orr.w	r3, r3, #32
 8006540:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006542:	4b34      	ldr	r3, [pc, #208]	; (8006614 <MX_GPIO_Init+0xf4>)
 8006544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006546:	f003 0320 	and.w	r3, r3, #32
 800654a:	613b      	str	r3, [r7, #16]
 800654c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800654e:	4b31      	ldr	r3, [pc, #196]	; (8006614 <MX_GPIO_Init+0xf4>)
 8006550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006552:	4a30      	ldr	r2, [pc, #192]	; (8006614 <MX_GPIO_Init+0xf4>)
 8006554:	f043 0304 	orr.w	r3, r3, #4
 8006558:	64d3      	str	r3, [r2, #76]	; 0x4c
 800655a:	4b2e      	ldr	r3, [pc, #184]	; (8006614 <MX_GPIO_Init+0xf4>)
 800655c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800655e:	f003 0304 	and.w	r3, r3, #4
 8006562:	60fb      	str	r3, [r7, #12]
 8006564:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006566:	4b2b      	ldr	r3, [pc, #172]	; (8006614 <MX_GPIO_Init+0xf4>)
 8006568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800656a:	4a2a      	ldr	r2, [pc, #168]	; (8006614 <MX_GPIO_Init+0xf4>)
 800656c:	f043 0301 	orr.w	r3, r3, #1
 8006570:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006572:	4b28      	ldr	r3, [pc, #160]	; (8006614 <MX_GPIO_Init+0xf4>)
 8006574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006576:	f003 0301 	and.w	r3, r3, #1
 800657a:	60bb      	str	r3, [r7, #8]
 800657c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800657e:	4b25      	ldr	r3, [pc, #148]	; (8006614 <MX_GPIO_Init+0xf4>)
 8006580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006582:	4a24      	ldr	r2, [pc, #144]	; (8006614 <MX_GPIO_Init+0xf4>)
 8006584:	f043 0308 	orr.w	r3, r3, #8
 8006588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800658a:	4b22      	ldr	r3, [pc, #136]	; (8006614 <MX_GPIO_Init+0xf4>)
 800658c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800658e:	f003 0308 	and.w	r3, r3, #8
 8006592:	607b      	str	r3, [r7, #4]
 8006594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006596:	4b1f      	ldr	r3, [pc, #124]	; (8006614 <MX_GPIO_Init+0xf4>)
 8006598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800659a:	4a1e      	ldr	r2, [pc, #120]	; (8006614 <MX_GPIO_Init+0xf4>)
 800659c:	f043 0302 	orr.w	r3, r3, #2
 80065a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80065a2:	4b1c      	ldr	r3, [pc, #112]	; (8006614 <MX_GPIO_Init+0xf4>)
 80065a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065a6:	f003 0302 	and.w	r3, r3, #2
 80065aa:	603b      	str	r3, [r7, #0]
 80065ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80065ae:	2200      	movs	r2, #0
 80065b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80065b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80065b8:	f003 fdc6 	bl	800a148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80065bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80065c2:	2301      	movs	r3, #1
 80065c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065c6:	2300      	movs	r3, #0
 80065c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065ca:	2300      	movs	r3, #0
 80065cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80065ce:	f107 0314 	add.w	r3, r7, #20
 80065d2:	4619      	mov	r1, r3
 80065d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80065d8:	f003 fc34 	bl	8009e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_IT_Pin;
 80065dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80065e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80065e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065e8:	2300      	movs	r3, #0
 80065ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_IT_GPIO_Port, &GPIO_InitStruct);
 80065ec:	f107 0314 	add.w	r3, r7, #20
 80065f0:	4619      	mov	r1, r3
 80065f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80065f6:	f003 fc25 	bl	8009e44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80065fa:	2200      	movs	r2, #0
 80065fc:	2105      	movs	r1, #5
 80065fe:	2028      	movs	r0, #40	; 0x28
 8006600:	f003 f8c6 	bl	8009790 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006604:	2028      	movs	r0, #40	; 0x28
 8006606:	f003 f8dd 	bl	80097c4 <HAL_NVIC_EnableIRQ>

}
 800660a:	bf00      	nop
 800660c:	3728      	adds	r7, #40	; 0x28
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	40021000 	.word	0x40021000

08006618 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800661c:	4b1b      	ldr	r3, [pc, #108]	; (800668c <MX_I2C2_Init+0x74>)
 800661e:	4a1c      	ldr	r2, [pc, #112]	; (8006690 <MX_I2C2_Init+0x78>)
 8006620:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20C0EDFF;
 8006622:	4b1a      	ldr	r3, [pc, #104]	; (800668c <MX_I2C2_Init+0x74>)
 8006624:	4a1b      	ldr	r2, [pc, #108]	; (8006694 <MX_I2C2_Init+0x7c>)
 8006626:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8006628:	4b18      	ldr	r3, [pc, #96]	; (800668c <MX_I2C2_Init+0x74>)
 800662a:	2200      	movs	r2, #0
 800662c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800662e:	4b17      	ldr	r3, [pc, #92]	; (800668c <MX_I2C2_Init+0x74>)
 8006630:	2201      	movs	r2, #1
 8006632:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006634:	4b15      	ldr	r3, [pc, #84]	; (800668c <MX_I2C2_Init+0x74>)
 8006636:	2200      	movs	r2, #0
 8006638:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800663a:	4b14      	ldr	r3, [pc, #80]	; (800668c <MX_I2C2_Init+0x74>)
 800663c:	2200      	movs	r2, #0
 800663e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006640:	4b12      	ldr	r3, [pc, #72]	; (800668c <MX_I2C2_Init+0x74>)
 8006642:	2200      	movs	r2, #0
 8006644:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006646:	4b11      	ldr	r3, [pc, #68]	; (800668c <MX_I2C2_Init+0x74>)
 8006648:	2200      	movs	r2, #0
 800664a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800664c:	4b0f      	ldr	r3, [pc, #60]	; (800668c <MX_I2C2_Init+0x74>)
 800664e:	2200      	movs	r2, #0
 8006650:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006652:	480e      	ldr	r0, [pc, #56]	; (800668c <MX_I2C2_Init+0x74>)
 8006654:	f003 fdcd 	bl	800a1f2 <HAL_I2C_Init>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d001      	beq.n	8006662 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800665e:	f000 fdcd 	bl	80071fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006662:	2100      	movs	r1, #0
 8006664:	4809      	ldr	r0, [pc, #36]	; (800668c <MX_I2C2_Init+0x74>)
 8006666:	f004 fb27 	bl	800acb8 <HAL_I2CEx_ConfigAnalogFilter>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d001      	beq.n	8006674 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8006670:	f000 fdc4 	bl	80071fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006674:	2100      	movs	r1, #0
 8006676:	4805      	ldr	r0, [pc, #20]	; (800668c <MX_I2C2_Init+0x74>)
 8006678:	f004 fb69 	bl	800ad4e <HAL_I2CEx_ConfigDigitalFilter>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d001      	beq.n	8006686 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8006682:	f000 fdbb 	bl	80071fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006686:	bf00      	nop
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	20000374 	.word	0x20000374
 8006690:	40005800 	.word	0x40005800
 8006694:	20c0edff 	.word	0x20c0edff

08006698 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b0a0      	sub	sp, #128	; 0x80
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066a0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80066a4:	2200      	movs	r2, #0
 80066a6:	601a      	str	r2, [r3, #0]
 80066a8:	605a      	str	r2, [r3, #4]
 80066aa:	609a      	str	r2, [r3, #8]
 80066ac:	60da      	str	r2, [r3, #12]
 80066ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80066b0:	f107 0318 	add.w	r3, r7, #24
 80066b4:	2254      	movs	r2, #84	; 0x54
 80066b6:	2100      	movs	r1, #0
 80066b8:	4618      	mov	r0, r3
 80066ba:	f011 fa2d 	bl	8017b18 <memset>
  if(i2cHandle->Instance==I2C2)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a2c      	ldr	r2, [pc, #176]	; (8006774 <HAL_I2C_MspInit+0xdc>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d151      	bne.n	800676c <HAL_I2C_MspInit+0xd4>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80066c8:	2380      	movs	r3, #128	; 0x80
 80066ca:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80066cc:	2300      	movs	r3, #0
 80066ce:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80066d0:	f107 0318 	add.w	r3, r7, #24
 80066d4:	4618      	mov	r0, r3
 80066d6:	f006 fec3 	bl	800d460 <HAL_RCCEx_PeriphCLKConfig>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d001      	beq.n	80066e4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80066e0:	f000 fd8c 	bl	80071fc <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80066e4:	4b24      	ldr	r3, [pc, #144]	; (8006778 <HAL_I2C_MspInit+0xe0>)
 80066e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066e8:	4a23      	ldr	r2, [pc, #140]	; (8006778 <HAL_I2C_MspInit+0xe0>)
 80066ea:	f043 0320 	orr.w	r3, r3, #32
 80066ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80066f0:	4b21      	ldr	r3, [pc, #132]	; (8006778 <HAL_I2C_MspInit+0xe0>)
 80066f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066f4:	f003 0320 	and.w	r3, r3, #32
 80066f8:	617b      	str	r3, [r7, #20]
 80066fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80066fc:	4b1e      	ldr	r3, [pc, #120]	; (8006778 <HAL_I2C_MspInit+0xe0>)
 80066fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006700:	4a1d      	ldr	r2, [pc, #116]	; (8006778 <HAL_I2C_MspInit+0xe0>)
 8006702:	f043 0304 	orr.w	r3, r3, #4
 8006706:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006708:	4b1b      	ldr	r3, [pc, #108]	; (8006778 <HAL_I2C_MspInit+0xe0>)
 800670a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800670c:	f003 0304 	and.w	r3, r3, #4
 8006710:	613b      	str	r3, [r7, #16]
 8006712:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0-OSC_IN     ------> I2C2_SDA
    PC4     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006714:	2301      	movs	r3, #1
 8006716:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006718:	2312      	movs	r3, #18
 800671a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800671c:	2300      	movs	r3, #0
 800671e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006720:	2300      	movs	r3, #0
 8006722:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006724:	2304      	movs	r3, #4
 8006726:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006728:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800672c:	4619      	mov	r1, r3
 800672e:	4813      	ldr	r0, [pc, #76]	; (800677c <HAL_I2C_MspInit+0xe4>)
 8006730:	f003 fb88 	bl	8009e44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006734:	2310      	movs	r3, #16
 8006736:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006738:	2312      	movs	r3, #18
 800673a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800673c:	2300      	movs	r3, #0
 800673e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006740:	2300      	movs	r3, #0
 8006742:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006744:	2304      	movs	r3, #4
 8006746:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006748:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800674c:	4619      	mov	r1, r3
 800674e:	480c      	ldr	r0, [pc, #48]	; (8006780 <HAL_I2C_MspInit+0xe8>)
 8006750:	f003 fb78 	bl	8009e44 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006754:	4b08      	ldr	r3, [pc, #32]	; (8006778 <HAL_I2C_MspInit+0xe0>)
 8006756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006758:	4a07      	ldr	r2, [pc, #28]	; (8006778 <HAL_I2C_MspInit+0xe0>)
 800675a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800675e:	6593      	str	r3, [r2, #88]	; 0x58
 8006760:	4b05      	ldr	r3, [pc, #20]	; (8006778 <HAL_I2C_MspInit+0xe0>)
 8006762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006764:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006768:	60fb      	str	r3, [r7, #12]
 800676a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800676c:	bf00      	nop
 800676e:	3780      	adds	r7, #128	; 0x80
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	40005800 	.word	0x40005800
 8006778:	40021000 	.word	0x40021000
 800677c:	48001400 	.word	0x48001400
 8006780:	48000800 	.word	0x48000800

08006784 <gps_ReadNMEA>:
 */

#include "l80-m39.h"


void gps_ReadNMEA(uint8_t nmea_data[],GPS_t *gps_struct){
 8006784:	b580      	push	{r7, lr}
 8006786:	b08e      	sub	sp, #56	; 0x38
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]

	uint8_t string_nmea[6];
	uint8_t gpgga_nmea[6] = "GPGGA\0";
 800678e:	4a70      	ldr	r2, [pc, #448]	; (8006950 <gps_ReadNMEA+0x1cc>)
 8006790:	f107 0318 	add.w	r3, r7, #24
 8006794:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006798:	6018      	str	r0, [r3, #0]
 800679a:	3304      	adds	r3, #4
 800679c:	8019      	strh	r1, [r3, #0]
	uint8_t readed_data[12];
	uint8_t delta;
	uint8_t begin_offset;
	uint8_t processing_offset = 0;
 800679e:	2300      	movs	r3, #0
 80067a0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	//Loop for all the nmea data
	for(int i=0;i<BUFFER_SIZE_NMEA;i++){
 80067a4:	2300      	movs	r3, #0
 80067a6:	633b      	str	r3, [r7, #48]	; 0x30
 80067a8:	e0c8      	b.n	800693c <gps_ReadNMEA+0x1b8>
		/*only look for a data beginin symbol = $ */
		if(nmea_data[i] == '$'){
 80067aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	4413      	add	r3, r2
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	2b24      	cmp	r3, #36	; 0x24
 80067b4:	f040 80bf 	bne.w	8006936 <gps_ReadNMEA+0x1b2>
			/*Check if we have $GPGGA*/
			for(int j=0;j<5;j++){
 80067b8:	2300      	movs	r3, #0
 80067ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067bc:	e00f      	b.n	80067de <gps_ReadNMEA+0x5a>
				string_nmea[j] = nmea_data[(i+j+1)];
 80067be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c2:	4413      	add	r3, r2
 80067c4:	3301      	adds	r3, #1
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	4413      	add	r3, r2
 80067ca:	7819      	ldrb	r1, [r3, #0]
 80067cc:	f107 0220 	add.w	r2, r7, #32
 80067d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d2:	4413      	add	r3, r2
 80067d4:	460a      	mov	r2, r1
 80067d6:	701a      	strb	r2, [r3, #0]
			for(int j=0;j<5;j++){
 80067d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067da:	3301      	adds	r3, #1
 80067dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e0:	2b04      	cmp	r3, #4
 80067e2:	ddec      	ble.n	80067be <gps_ReadNMEA+0x3a>
			}
			string_nmea[5] = 0;
 80067e4:	2300      	movs	r3, #0
 80067e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			/*Be aware that input string of strcmp need to end on \0 If not the result will probably be random value*/
			if(strcmp(string_nmea,gpgga_nmea) == 0){
 80067ea:	f107 0218 	add.w	r2, r7, #24
 80067ee:	f107 0320 	add.w	r3, r7, #32
 80067f2:	4611      	mov	r1, r2
 80067f4:	4618      	mov	r0, r3
 80067f6:	f7fd fd13 	bl	8004220 <strcmp>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f040 809a 	bne.w	8006936 <gps_ReadNMEA+0x1b2>
				i+=6;	/*Skip GPGGA,*/
 8006802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006804:	3306      	adds	r3, #6
 8006806:	633b      	str	r3, [r7, #48]	; 0x30
				for(int k=0;k<12;k++){
 8006808:	2300      	movs	r3, #0
 800680a:	62bb      	str	r3, [r7, #40]	; 0x28
 800680c:	e08e      	b.n	800692c <gps_ReadNMEA+0x1a8>

					/*Read a part of the incomming data*/
					i++;	/*skip ','*/
 800680e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006810:	3301      	adds	r3, #1
 8006812:	633b      	str	r3, [r7, #48]	; 0x30
					begin_offset = i;
 8006814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006816:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					delta = 0;
 800681a:	2300      	movs	r3, #0
 800681c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

					while((nmea_data[i] !='\0' )&&( nmea_data[i] != ',')){
 8006820:	e013      	b.n	800684a <gps_ReadNMEA+0xc6>
						readed_data[delta] = nmea_data[i];
 8006822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	441a      	add	r2, r3
 8006828:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800682c:	7812      	ldrb	r2, [r2, #0]
 800682e:	3338      	adds	r3, #56	; 0x38
 8006830:	443b      	add	r3, r7
 8006832:	f803 2c2c 	strb.w	r2, [r3, #-44]
						i++;
 8006836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006838:	3301      	adds	r3, #1
 800683a:	633b      	str	r3, [r7, #48]	; 0x30
						delta = i - begin_offset;
 800683c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683e:	b2da      	uxtb	r2, r3
 8006840:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					while((nmea_data[i] !='\0' )&&( nmea_data[i] != ',')){
 800684a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	4413      	add	r3, r2
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d005      	beq.n	8006862 <gps_ReadNMEA+0xde>
 8006856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	4413      	add	r3, r2
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	2b2c      	cmp	r3, #44	; 0x2c
 8006860:	d1df      	bne.n	8006822 <gps_ReadNMEA+0x9e>
					}
					processing_offset++;
 8006862:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006866:	3301      	adds	r3, #1
 8006868:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					/*Process incomming data*/
					switch (processing_offset) {
 800686c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006870:	3b01      	subs	r3, #1
 8006872:	2b0a      	cmp	r3, #10
 8006874:	d857      	bhi.n	8006926 <gps_ReadNMEA+0x1a2>
 8006876:	a201      	add	r2, pc, #4	; (adr r2, 800687c <gps_ReadNMEA+0xf8>)
 8006878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687c:	080068a9 	.word	0x080068a9
 8006880:	080068b7 	.word	0x080068b7
 8006884:	080068c5 	.word	0x080068c5
 8006888:	080068d3 	.word	0x080068d3
 800688c:	080068e1 	.word	0x080068e1
 8006890:	080068ef 	.word	0x080068ef
 8006894:	080068fd 	.word	0x080068fd
 8006898:	08006927 	.word	0x08006927
 800689c:	0800690b 	.word	0x0800690b
 80068a0:	08006927 	.word	0x08006927
 80068a4:	08006919 	.word	0x08006919
						/*UTC*/
						case 1:
							gps_ProcessUTC(readed_data, gps_struct);
 80068a8:	f107 030c 	add.w	r3, r7, #12
 80068ac:	6839      	ldr	r1, [r7, #0]
 80068ae:	4618      	mov	r0, r3
 80068b0:	f000 f850 	bl	8006954 <gps_ProcessUTC>
							break;
 80068b4:	e037      	b.n	8006926 <gps_ReadNMEA+0x1a2>

						/*LATITUDE*/
						case 2:
							gps_ProcessLatitude(readed_data, gps_struct);
 80068b6:	f107 030c 	add.w	r3, r7, #12
 80068ba:	6839      	ldr	r1, [r7, #0]
 80068bc:	4618      	mov	r0, r3
 80068be:	f000 f887 	bl	80069d0 <gps_ProcessLatitude>
							break;
 80068c2:	e030      	b.n	8006926 <gps_ReadNMEA+0x1a2>

						/*NORTH - SOUTH*/
						case 3:
							gps_ProcessNorthSouth(readed_data, gps_struct);
 80068c4:	f107 030c 	add.w	r3, r7, #12
 80068c8:	6839      	ldr	r1, [r7, #0]
 80068ca:	4618      	mov	r0, r3
 80068cc:	f000 f9fa 	bl	8006cc4 <gps_ProcessNorthSouth>
							break;
 80068d0:	e029      	b.n	8006926 <gps_ReadNMEA+0x1a2>

						/*LONGITUDE*/
						case 4:
							gps_ProcessLongitude(readed_data, gps_struct);
 80068d2:	f107 030c 	add.w	r3, r7, #12
 80068d6:	6839      	ldr	r1, [r7, #0]
 80068d8:	4618      	mov	r0, r3
 80068da:	f000 f935 	bl	8006b48 <gps_ProcessLongitude>
							break;
 80068de:	e022      	b.n	8006926 <gps_ReadNMEA+0x1a2>

						/*EAST - WEST*/
						case 5:
							gps_ProcessEastWest(readed_data,gps_struct);
 80068e0:	f107 030c 	add.w	r3, r7, #12
 80068e4:	6839      	ldr	r1, [r7, #0]
 80068e6:	4618      	mov	r0, r3
 80068e8:	f000 fa02 	bl	8006cf0 <gps_ProcessEastWest>
							break;
 80068ec:	e01b      	b.n	8006926 <gps_ReadNMEA+0x1a2>

						/*FIX QUALIFICATION*/
						case 6:
							gps_ProcessFix(readed_data, gps_struct);
 80068ee:	f107 030c 	add.w	r3, r7, #12
 80068f2:	6839      	ldr	r1, [r7, #0]
 80068f4:	4618      	mov	r0, r3
 80068f6:	f000 fa11 	bl	8006d1c <gps_ProcessFix>
							break;
 80068fa:	e014      	b.n	8006926 <gps_ReadNMEA+0x1a2>

						/*SATELLITES COUNT */
						case 7:
							gps_ProcessSatelliteCount(readed_data, gps_struct);
 80068fc:	f107 030c 	add.w	r3, r7, #12
 8006900:	6839      	ldr	r1, [r7, #0]
 8006902:	4618      	mov	r0, r3
 8006904:	f000 fa28 	bl	8006d58 <gps_ProcessSatelliteCount>
							break;
 8006908:	e00d      	b.n	8006926 <gps_ReadNMEA+0x1a2>

						/*MSL ALTITUDE*/
						case 9:
							gps_ProcessAltitude(readed_data, gps_struct);
 800690a:	f107 030c 	add.w	r3, r7, #12
 800690e:	6839      	ldr	r1, [r7, #0]
 8006910:	4618      	mov	r0, r3
 8006912:	f000 fa3d 	bl	8006d90 <gps_ProcessAltitude>
							break;
 8006916:	e006      	b.n	8006926 <gps_ReadNMEA+0x1a2>

						/*ELLIPTICAL CORRECTION */
						case 11:
							gps_ProcessAltitudeCorre(readed_data, gps_struct);	//Can be use to process altitude correction as well
 8006918:	f107 030c 	add.w	r3, r7, #12
 800691c:	6839      	ldr	r1, [r7, #0]
 800691e:	4618      	mov	r0, r3
 8006920:	f000 fa92 	bl	8006e48 <gps_ProcessAltitudeCorre>
							break;
 8006924:	bf00      	nop
				for(int k=0;k<12;k++){
 8006926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006928:	3301      	adds	r3, #1
 800692a:	62bb      	str	r3, [r7, #40]	; 0x28
 800692c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692e:	2b0b      	cmp	r3, #11
 8006930:	f77f af6d 	ble.w	800680e <gps_ReadNMEA+0x8a>
					}
				}
				/*After the first $GPGGA read we need to quit the current reading process*/
				break;
 8006934:	e008      	b.n	8006948 <gps_ReadNMEA+0x1c4>
	for(int i=0;i<BUFFER_SIZE_NMEA;i++){
 8006936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006938:	3301      	adds	r3, #1
 800693a:	633b      	str	r3, [r7, #48]	; 0x30
 800693c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006942:	f6ff af32 	blt.w	80067aa <gps_ReadNMEA+0x26>

			}
		}
	}
}
 8006946:	bf00      	nop
 8006948:	bf00      	nop
 800694a:	3738      	adds	r7, #56	; 0x38
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	08018c18 	.word	0x08018c18

08006954 <gps_ProcessUTC>:

void gps_ProcessUTC(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
	gps_struct->utc_time.hour = ((utc_incomming[0] - '0')*10) + (utc_incomming[1] - '0');
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	461a      	mov	r2, r3
 8006964:	0092      	lsls	r2, r2, #2
 8006966:	4413      	add	r3, r2
 8006968:	005b      	lsls	r3, r3, #1
 800696a:	b2da      	uxtb	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	3301      	adds	r3, #1
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	4413      	add	r3, r2
 8006974:	b2db      	uxtb	r3, r3
 8006976:	3b10      	subs	r3, #16
 8006978:	b2da      	uxtb	r2, r3
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	761a      	strb	r2, [r3, #24]
	gps_struct->utc_time.minute = ((utc_incomming[2] - '0')*10) + (utc_incomming[3] - '0');
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	3302      	adds	r3, #2
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	461a      	mov	r2, r3
 8006986:	0092      	lsls	r2, r2, #2
 8006988:	4413      	add	r3, r2
 800698a:	005b      	lsls	r3, r3, #1
 800698c:	b2da      	uxtb	r2, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	3303      	adds	r3, #3
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	4413      	add	r3, r2
 8006996:	b2db      	uxtb	r3, r3
 8006998:	3b10      	subs	r3, #16
 800699a:	b2da      	uxtb	r2, r3
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	765a      	strb	r2, [r3, #25]
	gps_struct->utc_time.second = ((utc_incomming[4] - '0')*10) + (utc_incomming[5] - '0');
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	3304      	adds	r3, #4
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	461a      	mov	r2, r3
 80069a8:	0092      	lsls	r2, r2, #2
 80069aa:	4413      	add	r3, r2
 80069ac:	005b      	lsls	r3, r3, #1
 80069ae:	b2da      	uxtb	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	3305      	adds	r3, #5
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	4413      	add	r3, r2
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	3b10      	subs	r3, #16
 80069bc:	b2da      	uxtb	r2, r3
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	769a      	strb	r2, [r3, #26]
}
 80069c2:	bf00      	nop
 80069c4:	370c      	adds	r7, #12
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
	...

080069d0 <gps_ProcessLatitude>:

void gps_ProcessLatitude(uint8_t utc_incomming[],GPS_t *gps_struct){
 80069d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80069d4:	b084      	sub	sp, #16
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
 80069da:	6039      	str	r1, [r7, #0]

	int8_t degree_DMm = 0;
 80069dc:	2300      	movs	r3, #0
 80069de:	73fb      	strb	r3, [r7, #15]
	float minute_DMm = 0;
 80069e0:	f04f 0300 	mov.w	r3, #0
 80069e4:	60bb      	str	r3, [r7, #8]

	/*Add reader degree*/
	degree_DMm = ((utc_incomming[0] - '0')*10) + (utc_incomming[1] - '0');
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	3b30      	subs	r3, #48	; 0x30
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	461a      	mov	r2, r3
 80069f0:	0092      	lsls	r2, r2, #2
 80069f2:	4413      	add	r3, r2
 80069f4:	005b      	lsls	r3, r3, #1
 80069f6:	b2da      	uxtb	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	3301      	adds	r3, #1
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	4413      	add	r3, r2
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	3b30      	subs	r3, #48	; 0x30
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	73fb      	strb	r3, [r7, #15]
	/*Add first part of minutes*/
	minute_DMm = ((utc_incomming[2] - '0')*10) + (utc_incomming[3] - '0');
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	3302      	adds	r3, #2
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006a12:	4613      	mov	r3, r2
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	4413      	add	r3, r2
 8006a18:	005b      	lsls	r3, r3, #1
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	3303      	adds	r3, #3
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	3b30      	subs	r3, #48	; 0x30
 8006a24:	4413      	add	r3, r2
 8006a26:	ee07 3a90 	vmov	s15, r3
 8006a2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a2e:	edc7 7a02 	vstr	s15, [r7, #8]
	minute_DMm += ((utc_incomming[5] - '0')*0.1) + ((utc_incomming[6] - '0')*0.01) + ((utc_incomming[7] - '0')*0.001) + ((utc_incomming[8] - '0')*0.0001);
 8006a32:	68b8      	ldr	r0, [r7, #8]
 8006a34:	f7fd fd6a 	bl	800450c <__aeabi_f2d>
 8006a38:	4604      	mov	r4, r0
 8006a3a:	460d      	mov	r5, r1
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	3305      	adds	r3, #5
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	3b30      	subs	r3, #48	; 0x30
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7fd fd4f 	bl	80044e8 <__aeabi_i2d>
 8006a4a:	a336      	add	r3, pc, #216	; (adr r3, 8006b24 <gps_ProcessLatitude+0x154>)
 8006a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a50:	f7fd fdb4 	bl	80045bc <__aeabi_dmul>
 8006a54:	4602      	mov	r2, r0
 8006a56:	460b      	mov	r3, r1
 8006a58:	4690      	mov	r8, r2
 8006a5a:	4699      	mov	r9, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	3306      	adds	r3, #6
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	3b30      	subs	r3, #48	; 0x30
 8006a64:	4618      	mov	r0, r3
 8006a66:	f7fd fd3f 	bl	80044e8 <__aeabi_i2d>
 8006a6a:	a330      	add	r3, pc, #192	; (adr r3, 8006b2c <gps_ProcessLatitude+0x15c>)
 8006a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a70:	f7fd fda4 	bl	80045bc <__aeabi_dmul>
 8006a74:	4602      	mov	r2, r0
 8006a76:	460b      	mov	r3, r1
 8006a78:	4640      	mov	r0, r8
 8006a7a:	4649      	mov	r1, r9
 8006a7c:	f7fd fbe8 	bl	8004250 <__adddf3>
 8006a80:	4602      	mov	r2, r0
 8006a82:	460b      	mov	r3, r1
 8006a84:	4690      	mov	r8, r2
 8006a86:	4699      	mov	r9, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	3307      	adds	r3, #7
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	3b30      	subs	r3, #48	; 0x30
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7fd fd29 	bl	80044e8 <__aeabi_i2d>
 8006a96:	a327      	add	r3, pc, #156	; (adr r3, 8006b34 <gps_ProcessLatitude+0x164>)
 8006a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9c:	f7fd fd8e 	bl	80045bc <__aeabi_dmul>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	4640      	mov	r0, r8
 8006aa6:	4649      	mov	r1, r9
 8006aa8:	f7fd fbd2 	bl	8004250 <__adddf3>
 8006aac:	4602      	mov	r2, r0
 8006aae:	460b      	mov	r3, r1
 8006ab0:	4690      	mov	r8, r2
 8006ab2:	4699      	mov	r9, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	3308      	adds	r3, #8
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	3b30      	subs	r3, #48	; 0x30
 8006abc:	4618      	mov	r0, r3
 8006abe:	f7fd fd13 	bl	80044e8 <__aeabi_i2d>
 8006ac2:	a31e      	add	r3, pc, #120	; (adr r3, 8006b3c <gps_ProcessLatitude+0x16c>)
 8006ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac8:	f7fd fd78 	bl	80045bc <__aeabi_dmul>
 8006acc:	4602      	mov	r2, r0
 8006ace:	460b      	mov	r3, r1
 8006ad0:	4640      	mov	r0, r8
 8006ad2:	4649      	mov	r1, r9
 8006ad4:	f7fd fbbc 	bl	8004250 <__adddf3>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	460b      	mov	r3, r1
 8006adc:	4620      	mov	r0, r4
 8006ade:	4629      	mov	r1, r5
 8006ae0:	f7fd fbb6 	bl	8004250 <__adddf3>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	4610      	mov	r0, r2
 8006aea:	4619      	mov	r1, r3
 8006aec:	f7fe f816 	bl	8004b1c <__aeabi_d2f>
 8006af0:	4603      	mov	r3, r0
 8006af2:	60bb      	str	r3, [r7, #8]

	gps_struct->latitude_deg_s = (degree_DMm + (minute_DMm/60));
 8006af4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006af8:	ee07 3a90 	vmov	s15, r3
 8006afc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b00:	edd7 6a02 	vldr	s13, [r7, #8]
 8006b04:	ed9f 6a06 	vldr	s12, [pc, #24]	; 8006b20 <gps_ProcessLatitude+0x150>
 8006b08:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8006b0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	edc3 7a00 	vstr	s15, [r3]
}
 8006b16:	bf00      	nop
 8006b18:	3710      	adds	r7, #16
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006b20:	42700000 	.word	0x42700000
 8006b24:	9999999a 	.word	0x9999999a
 8006b28:	3fb99999 	.word	0x3fb99999
 8006b2c:	47ae147b 	.word	0x47ae147b
 8006b30:	3f847ae1 	.word	0x3f847ae1
 8006b34:	d2f1a9fc 	.word	0xd2f1a9fc
 8006b38:	3f50624d 	.word	0x3f50624d
 8006b3c:	eb1c432d 	.word	0xeb1c432d
 8006b40:	3f1a36e2 	.word	0x3f1a36e2
 8006b44:	00000000 	.word	0x00000000

08006b48 <gps_ProcessLongitude>:

void gps_ProcessLongitude(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006b48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006b4c:	b084      	sub	sp, #16
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
 8006b52:	6039      	str	r1, [r7, #0]

	int8_t degree_DMm = 0;
 8006b54:	2300      	movs	r3, #0
 8006b56:	73fb      	strb	r3, [r7, #15]
	float minute_DMm = 0;
 8006b58:	f04f 0300 	mov.w	r3, #0
 8006b5c:	60bb      	str	r3, [r7, #8]

	/*Add reader degree*/
	degree_DMm = ((utc_incomming[1] - '0')*10) + (utc_incomming[2] - '0');
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	3301      	adds	r3, #1
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	3b30      	subs	r3, #48	; 0x30
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	461a      	mov	r2, r3
 8006b6a:	0092      	lsls	r2, r2, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	005b      	lsls	r3, r3, #1
 8006b70:	b2da      	uxtb	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	3302      	adds	r3, #2
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	4413      	add	r3, r2
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	3b30      	subs	r3, #48	; 0x30
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	73fb      	strb	r3, [r7, #15]
	/*Add first part of minutes*/
	minute_DMm = ((utc_incomming[3] - '0')*10) + (utc_incomming[4] - '0');
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	3303      	adds	r3, #3
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	4413      	add	r3, r2
 8006b92:	005b      	lsls	r3, r3, #1
 8006b94:	461a      	mov	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	3304      	adds	r3, #4
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	3b30      	subs	r3, #48	; 0x30
 8006b9e:	4413      	add	r3, r2
 8006ba0:	ee07 3a90 	vmov	s15, r3
 8006ba4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ba8:	edc7 7a02 	vstr	s15, [r7, #8]
	minute_DMm += ((utc_incomming[5] - '0')*0.1) + ((utc_incomming[6] - '0')*0.01) + ((utc_incomming[7] - '0')*0.001) + ((utc_incomming[8] - '0')*0.0001);
 8006bac:	68b8      	ldr	r0, [r7, #8]
 8006bae:	f7fd fcad 	bl	800450c <__aeabi_f2d>
 8006bb2:	4604      	mov	r4, r0
 8006bb4:	460d      	mov	r5, r1
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	3305      	adds	r3, #5
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	3b30      	subs	r3, #48	; 0x30
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f7fd fc92 	bl	80044e8 <__aeabi_i2d>
 8006bc4:	a337      	add	r3, pc, #220	; (adr r3, 8006ca4 <gps_ProcessLongitude+0x15c>)
 8006bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bca:	f7fd fcf7 	bl	80045bc <__aeabi_dmul>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	4690      	mov	r8, r2
 8006bd4:	4699      	mov	r9, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	3306      	adds	r3, #6
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	3b30      	subs	r3, #48	; 0x30
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7fd fc82 	bl	80044e8 <__aeabi_i2d>
 8006be4:	a331      	add	r3, pc, #196	; (adr r3, 8006cac <gps_ProcessLongitude+0x164>)
 8006be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bea:	f7fd fce7 	bl	80045bc <__aeabi_dmul>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	4640      	mov	r0, r8
 8006bf4:	4649      	mov	r1, r9
 8006bf6:	f7fd fb2b 	bl	8004250 <__adddf3>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	4690      	mov	r8, r2
 8006c00:	4699      	mov	r9, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	3307      	adds	r3, #7
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	3b30      	subs	r3, #48	; 0x30
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f7fd fc6c 	bl	80044e8 <__aeabi_i2d>
 8006c10:	a328      	add	r3, pc, #160	; (adr r3, 8006cb4 <gps_ProcessLongitude+0x16c>)
 8006c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c16:	f7fd fcd1 	bl	80045bc <__aeabi_dmul>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	4640      	mov	r0, r8
 8006c20:	4649      	mov	r1, r9
 8006c22:	f7fd fb15 	bl	8004250 <__adddf3>
 8006c26:	4602      	mov	r2, r0
 8006c28:	460b      	mov	r3, r1
 8006c2a:	4690      	mov	r8, r2
 8006c2c:	4699      	mov	r9, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	3308      	adds	r3, #8
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	3b30      	subs	r3, #48	; 0x30
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7fd fc56 	bl	80044e8 <__aeabi_i2d>
 8006c3c:	a31f      	add	r3, pc, #124	; (adr r3, 8006cbc <gps_ProcessLongitude+0x174>)
 8006c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c42:	f7fd fcbb 	bl	80045bc <__aeabi_dmul>
 8006c46:	4602      	mov	r2, r0
 8006c48:	460b      	mov	r3, r1
 8006c4a:	4640      	mov	r0, r8
 8006c4c:	4649      	mov	r1, r9
 8006c4e:	f7fd faff 	bl	8004250 <__adddf3>
 8006c52:	4602      	mov	r2, r0
 8006c54:	460b      	mov	r3, r1
 8006c56:	4620      	mov	r0, r4
 8006c58:	4629      	mov	r1, r5
 8006c5a:	f7fd faf9 	bl	8004250 <__adddf3>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	460b      	mov	r3, r1
 8006c62:	4610      	mov	r0, r2
 8006c64:	4619      	mov	r1, r3
 8006c66:	f7fd ff59 	bl	8004b1c <__aeabi_d2f>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	60bb      	str	r3, [r7, #8]

	gps_struct->longitude_deg_s = (degree_DMm + (minute_DMm/60));
 8006c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c72:	ee07 3a90 	vmov	s15, r3
 8006c76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c7a:	edd7 6a02 	vldr	s13, [r7, #8]
 8006c7e:	ed9f 6a08 	vldr	s12, [pc, #32]	; 8006ca0 <gps_ProcessLongitude+0x158>
 8006c82:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8006c86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8006c90:	bf00      	nop
 8006c92:	3710      	adds	r7, #16
 8006c94:	46bd      	mov	sp, r7
 8006c96:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006c9a:	bf00      	nop
 8006c9c:	f3af 8000 	nop.w
 8006ca0:	42700000 	.word	0x42700000
 8006ca4:	9999999a 	.word	0x9999999a
 8006ca8:	3fb99999 	.word	0x3fb99999
 8006cac:	47ae147b 	.word	0x47ae147b
 8006cb0:	3f847ae1 	.word	0x3f847ae1
 8006cb4:	d2f1a9fc 	.word	0xd2f1a9fc
 8006cb8:	3f50624d 	.word	0x3f50624d
 8006cbc:	eb1c432d 	.word	0xeb1c432d
 8006cc0:	3f1a36e2 	.word	0x3f1a36e2

08006cc4 <gps_ProcessNorthSouth>:

void gps_ProcessNorthSouth(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]

	if(utc_incomming[0] == 'N'){
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	2b4e      	cmp	r3, #78	; 0x4e
 8006cd4:	d103      	bne.n	8006cde <gps_ProcessNorthSouth+0x1a>
		gps_struct->north_south = north;
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	741a      	strb	r2, [r3, #16]
	}
	else{
		gps_struct->north_south = south;
	}
}
 8006cdc:	e002      	b.n	8006ce4 <gps_ProcessNorthSouth+0x20>
		gps_struct->north_south = south;
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	741a      	strb	r2, [r3, #16]
}
 8006ce4:	bf00      	nop
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <gps_ProcessEastWest>:

void gps_ProcessEastWest(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]

	if(utc_incomming[0] == 'E'){
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	2b45      	cmp	r3, #69	; 0x45
 8006d00:	d103      	bne.n	8006d0a <gps_ProcessEastWest+0x1a>
		gps_struct->east_west = east;
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	2202      	movs	r2, #2
 8006d06:	745a      	strb	r2, [r3, #17]
	}
	else{
		gps_struct->east_west = west;
	}
}
 8006d08:	e002      	b.n	8006d10 <gps_ProcessEastWest+0x20>
		gps_struct->east_west = west;
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	2203      	movs	r2, #3
 8006d0e:	745a      	strb	r2, [r3, #17]
}
 8006d10:	bf00      	nop
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <gps_ProcessFix>:

void gps_ProcessFix(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]

	if(utc_incomming[0] == '1'){
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	2b31      	cmp	r3, #49	; 0x31
 8006d2c:	d103      	bne.n	8006d36 <gps_ProcessFix+0x1a>
		gps_struct->qualification = fix_gps;
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	2201      	movs	r2, #1
 8006d32:	771a      	strb	r2, [r3, #28]
		}
		else{
			gps_struct->qualification = unvalid;
		}
	}
}
 8006d34:	e00a      	b.n	8006d4c <gps_ProcessFix+0x30>
		if(utc_incomming[0] == '2'){
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	2b32      	cmp	r3, #50	; 0x32
 8006d3c:	d103      	bne.n	8006d46 <gps_ProcessFix+0x2a>
			gps_struct->qualification = fix_dgps;
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	2202      	movs	r2, #2
 8006d42:	771a      	strb	r2, [r3, #28]
}
 8006d44:	e002      	b.n	8006d4c <gps_ProcessFix+0x30>
			gps_struct->qualification = unvalid;
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	771a      	strb	r2, [r3, #28]
}
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <gps_ProcessSatelliteCount>:

void gps_ProcessSatelliteCount(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]

	gps_struct->satelite_number = ((utc_incomming[0] - '0')*10) + (utc_incomming[1] - '0');
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	461a      	mov	r2, r3
 8006d68:	0092      	lsls	r2, r2, #2
 8006d6a:	4413      	add	r3, r2
 8006d6c:	005b      	lsls	r3, r3, #1
 8006d6e:	b2da      	uxtb	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	3301      	adds	r3, #1
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	4413      	add	r3, r2
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	3b10      	subs	r3, #16
 8006d7c:	b2da      	uxtb	r2, r3
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	76da      	strb	r2, [r3, #27]
}
 8006d82:	bf00      	nop
 8006d84:	370c      	adds	r7, #12
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr
	...

08006d90 <gps_ProcessAltitude>:

void gps_ProcessAltitude(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b086      	sub	sp, #24
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]

	float altitude = 0;
 8006d9a:	f04f 0300 	mov.w	r3, #0
 8006d9e:	617b      	str	r3, [r7, #20]
	uint8_t dot_find = 0;
 8006da0:	2300      	movs	r3, #0
 8006da2:	74fb      	strb	r3, [r7, #19]
	for(int i=0;i<sizeof(utc_incomming);i++){
 8006da4:	2300      	movs	r3, #0
 8006da6:	60fb      	str	r3, [r7, #12]
 8006da8:	e03f      	b.n	8006e2a <gps_ProcessAltitude+0x9a>

		if(utc_incomming[i] == '.'){
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	4413      	add	r3, r2
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	2b2e      	cmp	r3, #46	; 0x2e
 8006db4:	d104      	bne.n	8006dc0 <gps_ProcessAltitude+0x30>
			dot_find = 1;
 8006db6:	2301      	movs	r3, #1
 8006db8:	74fb      	strb	r3, [r7, #19]
			i++;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	60fb      	str	r3, [r7, #12]
		}

		if(dot_find){
 8006dc0:	7cfb      	ldrb	r3, [r7, #19]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d01b      	beq.n	8006dfe <gps_ProcessAltitude+0x6e>
			altitude +=  (float)((utc_incomming[i] - '0')*0.1);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	4413      	add	r3, r2
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	3b30      	subs	r3, #48	; 0x30
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f7fd fb89 	bl	80044e8 <__aeabi_i2d>
 8006dd6:	a31a      	add	r3, pc, #104	; (adr r3, 8006e40 <gps_ProcessAltitude+0xb0>)
 8006dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ddc:	f7fd fbee 	bl	80045bc <__aeabi_dmul>
 8006de0:	4602      	mov	r2, r0
 8006de2:	460b      	mov	r3, r1
 8006de4:	4610      	mov	r0, r2
 8006de6:	4619      	mov	r1, r3
 8006de8:	f7fd fe98 	bl	8004b1c <__aeabi_d2f>
 8006dec:	ee07 0a10 	vmov	s14, r0
 8006df0:	edd7 7a05 	vldr	s15, [r7, #20]
 8006df4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006df8:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8006dfc:	e018      	b.n	8006e30 <gps_ProcessAltitude+0xa0>

		}
		else{
			altitude = (altitude*10) + (utc_incomming[i] - '0');
 8006dfe:	edd7 7a05 	vldr	s15, [r7, #20]
 8006e02:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006e06:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	4413      	add	r3, r2
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	3b30      	subs	r3, #48	; 0x30
 8006e14:	ee07 3a90 	vmov	s15, r3
 8006e18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e20:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i=0;i<sizeof(utc_incomming);i++){
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	3301      	adds	r3, #1
 8006e28:	60fb      	str	r3, [r7, #12]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2b03      	cmp	r3, #3
 8006e2e:	d9bc      	bls.n	8006daa <gps_ProcessAltitude+0x1a>
		}

	}
	gps_struct->altitude_deg_s = altitude;
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	697a      	ldr	r2, [r7, #20]
 8006e34:	609a      	str	r2, [r3, #8]
}
 8006e36:	bf00      	nop
 8006e38:	3718      	adds	r7, #24
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	9999999a 	.word	0x9999999a
 8006e44:	3fb99999 	.word	0x3fb99999

08006e48 <gps_ProcessAltitudeCorre>:

void gps_ProcessAltitudeCorre(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b086      	sub	sp, #24
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]

	float altitude = 0;
 8006e52:	f04f 0300 	mov.w	r3, #0
 8006e56:	617b      	str	r3, [r7, #20]
	uint8_t dot_find = 0;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	74fb      	strb	r3, [r7, #19]
	for(int i=0;i<sizeof(utc_incomming);i++){
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	60fb      	str	r3, [r7, #12]
 8006e60:	e03f      	b.n	8006ee2 <gps_ProcessAltitudeCorre+0x9a>

		if(utc_incomming[i] == '.'){
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	4413      	add	r3, r2
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	2b2e      	cmp	r3, #46	; 0x2e
 8006e6c:	d104      	bne.n	8006e78 <gps_ProcessAltitudeCorre+0x30>
			dot_find = 1;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	74fb      	strb	r3, [r7, #19]
			i++;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	3301      	adds	r3, #1
 8006e76:	60fb      	str	r3, [r7, #12]
		}

		if(dot_find){
 8006e78:	7cfb      	ldrb	r3, [r7, #19]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d01b      	beq.n	8006eb6 <gps_ProcessAltitudeCorre+0x6e>
			altitude +=  (float)((utc_incomming[i] - '0')*0.1);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	4413      	add	r3, r2
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	3b30      	subs	r3, #48	; 0x30
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7fd fb2d 	bl	80044e8 <__aeabi_i2d>
 8006e8e:	a31a      	add	r3, pc, #104	; (adr r3, 8006ef8 <gps_ProcessAltitudeCorre+0xb0>)
 8006e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e94:	f7fd fb92 	bl	80045bc <__aeabi_dmul>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	4610      	mov	r0, r2
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	f7fd fe3c 	bl	8004b1c <__aeabi_d2f>
 8006ea4:	ee07 0a10 	vmov	s14, r0
 8006ea8:	edd7 7a05 	vldr	s15, [r7, #20]
 8006eac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006eb0:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8006eb4:	e018      	b.n	8006ee8 <gps_ProcessAltitudeCorre+0xa0>

		}
		else{
			altitude = (altitude*10) + (utc_incomming[i] - '0');
 8006eb6:	edd7 7a05 	vldr	s15, [r7, #20]
 8006eba:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006ebe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	3b30      	subs	r3, #48	; 0x30
 8006ecc:	ee07 3a90 	vmov	s15, r3
 8006ed0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ed4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ed8:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i=0;i<sizeof(utc_incomming);i++){
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	60fb      	str	r3, [r7, #12]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2b03      	cmp	r3, #3
 8006ee6:	d9bc      	bls.n	8006e62 <gps_ProcessAltitudeCorre+0x1a>
		}

	}
	gps_struct->altitude_correction = altitude;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	697a      	ldr	r2, [r7, #20]
 8006eec:	60da      	str	r2, [r3, #12]
}
 8006eee:	bf00      	nop
 8006ef0:	3718      	adds	r7, #24
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	9999999a 	.word	0x9999999a
 8006efc:	3fb99999 	.word	0x3fb99999

08006f00 <WIOE5_Init>:
 *    @huart is a pointer on uart handdle
 *
 * OUTPUT:
 * 	  @res is an integer use to count the number of error reported during initialisation
 * */
uint8_t WIOE5_Init(UART_HandleTypeDef *huart){
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b0a0      	sub	sp, #128	; 0x80
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]

	uint8_t res = 0;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint8_t string[100] = {0};
 8006f0e:	2300      	movs	r3, #0
 8006f10:	61bb      	str	r3, [r7, #24]
 8006f12:	f107 031c 	add.w	r3, r7, #28
 8006f16:	2260      	movs	r2, #96	; 0x60
 8006f18:	2100      	movs	r1, #0
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f010 fdfc 	bl	8017b18 <memset>
	uint8_t firmware_version[10] = {0};
 8006f20:	2300      	movs	r3, #0
 8006f22:	60fb      	str	r3, [r7, #12]
 8006f24:	f107 0310 	add.w	r3, r7, #16
 8006f28:	2200      	movs	r2, #0
 8006f2a:	601a      	str	r2, [r3, #0]
 8006f2c:	809a      	strh	r2, [r3, #4]

	/*Check for correct wiring*/
	HAL_UART_Transmit(huart, "AT\r\n", 8, 100);
 8006f2e:	2364      	movs	r3, #100	; 0x64
 8006f30:	2208      	movs	r2, #8
 8006f32:	4915      	ldr	r1, [pc, #84]	; (8006f88 <WIOE5_Init+0x88>)
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f007 ffaf 	bl	800ee98 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, string, 100,1000);
 8006f3a:	f107 0118 	add.w	r1, r7, #24
 8006f3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006f42:	2264      	movs	r2, #100	; 0x64
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f008 f83d 	bl	800efc4 <HAL_UART_Receive>
	if(strcmp(string,"+AT: OK\r\n") != 0x0){
 8006f4a:	f107 0318 	add.w	r3, r7, #24
 8006f4e:	490f      	ldr	r1, [pc, #60]	; (8006f8c <WIOE5_Init+0x8c>)
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7fd f965 	bl	8004220 <strcmp>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d004      	beq.n	8006f66 <WIOE5_Init+0x66>
		res++;
 8006f5c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006f60:	3301      	adds	r3, #1
 8006f62:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	}

	WIOE5_ReadFirmwareVersion(firmware_version, huart);
 8006f66:	f107 030c 	add.w	r3, r7, #12
 8006f6a:	6879      	ldr	r1, [r7, #4]
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f000 f861 	bl	8007034 <WIOE5_ReadFirmwareVersion>


	WIOE5_ChannelSwitch(LORA_CHANNEL_INIT,huart);
 8006f72:	6879      	ldr	r1, [r7, #4]
 8006f74:	2003      	movs	r0, #3
 8006f76:	f000 f80b 	bl	8006f90 <WIOE5_ChannelSwitch>

	return res;
 8006f7a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3780      	adds	r7, #128	; 0x80
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	08018c20 	.word	0x08018c20
 8006f8c:	08018c28 	.word	0x08018c28

08006f90 <WIOE5_ChannelSwitch>:
 *    @channel is an integer that define the channel number (Should be between 0 and 2 for EU868 Mhz version
 *	  @huart is a pointer on uart handdle
 * OUTPUT:
 * 	  @res is an integer use to check error
 * */
uint8_t WIOE5_ChannelSwitch(uint8_t channel,UART_HandleTypeDef *huart){
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b0a2      	sub	sp, #136	; 0x88
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	4603      	mov	r3, r0
 8006f98:	6039      	str	r1, [r7, #0]
 8006f9a:	71fb      	strb	r3, [r7, #7]

	uint8_t querry[25] = "AT+CH=";
 8006f9c:	4a23      	ldr	r2, [pc, #140]	; (800702c <WIOE5_ChannelSwitch+0x9c>)
 8006f9e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006fa2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006fa6:	6018      	str	r0, [r3, #0]
 8006fa8:	3304      	adds	r3, #4
 8006faa:	8019      	strh	r1, [r3, #0]
 8006fac:	3302      	adds	r3, #2
 8006fae:	0c0a      	lsrs	r2, r1, #16
 8006fb0:	701a      	strb	r2, [r3, #0]
 8006fb2:	f107 0373 	add.w	r3, r7, #115	; 0x73
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	601a      	str	r2, [r3, #0]
 8006fba:	605a      	str	r2, [r3, #4]
 8006fbc:	609a      	str	r2, [r3, #8]
 8006fbe:	60da      	str	r2, [r3, #12]
 8006fc0:	821a      	strh	r2, [r3, #16]
	querry[6] =  (channel+'0');
 8006fc2:	79fb      	ldrb	r3, [r7, #7]
 8006fc4:	3330      	adds	r3, #48	; 0x30
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
	uint8_t string[100];
	uint8_t res = 0;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	strcat(querry, "\r\n");
 8006fd2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7fd f92c 	bl	8004234 <strlen>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	461a      	mov	r2, r3
 8006fe0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006fe4:	4413      	add	r3, r2
 8006fe6:	4a12      	ldr	r2, [pc, #72]	; (8007030 <WIOE5_ChannelSwitch+0xa0>)
 8006fe8:	8811      	ldrh	r1, [r2, #0]
 8006fea:	7892      	ldrb	r2, [r2, #2]
 8006fec:	8019      	strh	r1, [r3, #0]
 8006fee:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(huart, querry, sizeof(querry), 100);
 8006ff0:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8006ff4:	2364      	movs	r3, #100	; 0x64
 8006ff6:	2219      	movs	r2, #25
 8006ff8:	6838      	ldr	r0, [r7, #0]
 8006ffa:	f007 ff4d 	bl	800ee98 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, string, 100,1000);
 8006ffe:	f107 0108 	add.w	r1, r7, #8
 8007002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007006:	2264      	movs	r2, #100	; 0x64
 8007008:	6838      	ldr	r0, [r7, #0]
 800700a:	f007 ffdb 	bl	800efc4 <HAL_UART_Receive>
	if(string[0]!='+'){
 800700e:	7a3b      	ldrb	r3, [r7, #8]
 8007010:	2b2b      	cmp	r3, #43	; 0x2b
 8007012:	d004      	beq.n	800701e <WIOE5_ChannelSwitch+0x8e>
		res++;
 8007014:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8007018:	3301      	adds	r3, #1
 800701a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	}
	return res;
 800701e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8007022:	4618      	mov	r0, r3
 8007024:	3788      	adds	r7, #136	; 0x88
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	08018c38 	.word	0x08018c38
 8007030:	08018c34 	.word	0x08018c34

08007034 <WIOE5_ReadFirmwareVersion>:
 *    @version_output is an array of
 *	  @huart is a pointer on uart handdle
 * OUTPUT:
 * 	  @res is an integer use to check error
 * */
void WIOE5_ReadFirmwareVersion(uint8_t version_output[],UART_HandleTypeDef *huart){
 8007034:	b580      	push	{r7, lr}
 8007036:	b09c      	sub	sp, #112	; 0x70
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]

	uint8_t string[100];
	uint8_t index = 5;
 800703e:	2305      	movs	r3, #5
 8007040:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	HAL_UART_Transmit(huart, "AT+VER\r\n", sizeof("AT+VER\r\n"), 100);
 8007044:	2364      	movs	r3, #100	; 0x64
 8007046:	2209      	movs	r2, #9
 8007048:	4917      	ldr	r1, [pc, #92]	; (80070a8 <WIOE5_ReadFirmwareVersion+0x74>)
 800704a:	6838      	ldr	r0, [r7, #0]
 800704c:	f007 ff24 	bl	800ee98 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, string, 100,1000);
 8007050:	f107 0108 	add.w	r1, r7, #8
 8007054:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007058:	2264      	movs	r2, #100	; 0x64
 800705a:	6838      	ldr	r0, [r7, #0]
 800705c:	f007 ffb2 	bl	800efc4 <HAL_UART_Receive>

	while((string[index] != '\r') || (index > sizeof(string))){
 8007060:	e010      	b.n	8007084 <WIOE5_ReadFirmwareVersion+0x50>
		version_output[index-5] = string[index];
 8007062:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8007066:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800706a:	3b05      	subs	r3, #5
 800706c:	6879      	ldr	r1, [r7, #4]
 800706e:	440b      	add	r3, r1
 8007070:	3270      	adds	r2, #112	; 0x70
 8007072:	443a      	add	r2, r7
 8007074:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 8007078:	701a      	strb	r2, [r3, #0]
		index++;
 800707a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800707e:	3301      	adds	r3, #1
 8007080:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	while((string[index] != '\r') || (index > sizeof(string))){
 8007084:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007088:	3370      	adds	r3, #112	; 0x70
 800708a:	443b      	add	r3, r7
 800708c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8007090:	2b0d      	cmp	r3, #13
 8007092:	d1e6      	bne.n	8007062 <WIOE5_ReadFirmwareVersion+0x2e>
 8007094:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007098:	2b64      	cmp	r3, #100	; 0x64
 800709a:	d8e2      	bhi.n	8007062 <WIOE5_ReadFirmwareVersion+0x2e>
	}
}
 800709c:	bf00      	nop
 800709e:	bf00      	nop
 80070a0:	3770      	adds	r7, #112	; 0x70
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	08018c54 	.word	0x08018c54

080070ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	SCB->VTOR = 0x08004000;
 80070b0:	4b1c      	ldr	r3, [pc, #112]	; (8007124 <main+0x78>)
 80070b2:	4a1d      	ldr	r2, [pc, #116]	; (8007128 <main+0x7c>)
 80070b4:	609a      	str	r2, [r3, #8]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80070b6:	b662      	cpsie	i
}
 80070b8:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80070ba:	f001 f84c 	bl	8008156 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80070be:	f000 f83d 	bl	800713c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80070c2:	f7ff fa2d 	bl	8006520 <MX_GPIO_Init>
  MX_DMA_Init();
 80070c6:	f7ff fa01 	bl	80064cc <MX_DMA_Init>
  MX_I2C2_Init();
 80070ca:	f7ff faa5 	bl	8006618 <MX_I2C2_Init>
  MX_TIM2_Init();
 80070ce:	f000 fcf3 	bl	8007ab8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80070d2:	f000 fd49 	bl	8007b68 <MX_TIM3_Init>
  MX_TIM4_Init();
 80070d6:	f000 fda1 	bl	8007c1c <MX_TIM4_Init>
  MX_UART4_Init();
 80070da:	f000 feb7 	bl	8007e4c <MX_UART4_Init>
  MX_UART5_Init();
 80070de:	f000 ff01 	bl	8007ee4 <MX_UART5_Init>
  MX_ADC2_Init();
 80070e2:	f7fd feed 	bl	8004ec0 <MX_ADC2_Init>
  MX_USB_Device_Init();
 80070e6:	f00f ffd9 	bl	801709c <MX_USB_Device_Init>
  MX_SPI1_Init();
 80070ea:	f000 fb5f 	bl	80077ac <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /*Timer start flaps and throttle + buzzer*/
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80070ee:	2100      	movs	r1, #0
 80070f0:	480e      	ldr	r0, [pc, #56]	; (800712c <main+0x80>)
 80070f2:	f006 fddf 	bl	800dcb4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80070f6:	2100      	movs	r1, #0
 80070f8:	480d      	ldr	r0, [pc, #52]	; (8007130 <main+0x84>)
 80070fa:	f006 fddb 	bl	800dcb4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80070fe:	2104      	movs	r1, #4
 8007100:	480b      	ldr	r0, [pc, #44]	; (8007130 <main+0x84>)
 8007102:	f006 fdd7 	bl	800dcb4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8007106:	210c      	movs	r1, #12
 8007108:	4809      	ldr	r0, [pc, #36]	; (8007130 <main+0x84>)
 800710a:	f006 fdd3 	bl	800dcb4 <HAL_TIM_PWM_Start>

  /*Start ADC conversion with DMA request*/
  HAL_ADC_Start_DMA(&hadc2, &BatteryMonitoringData, CONVERSION_COUNT);
 800710e:	2203      	movs	r2, #3
 8007110:	4908      	ldr	r1, [pc, #32]	; (8007134 <main+0x88>)
 8007112:	4809      	ldr	r0, [pc, #36]	; (8007138 <main+0x8c>)
 8007114:	f001 fc5c 	bl	80089d0 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8007118:	f7fe f904 	bl	8005324 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800711c:	f00d febf 	bl	8014e9e <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8007120:	e7fe      	b.n	8007120 <main+0x74>
 8007122:	bf00      	nop
 8007124:	e000ed00 	.word	0xe000ed00
 8007128:	08004000 	.word	0x08004000
 800712c:	200009dc 	.word	0x200009dc
 8007130:	20000a28 	.word	0x20000a28
 8007134:	200008d8 	.word	0x200008d8
 8007138:	2000020c 	.word	0x2000020c

0800713c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b094      	sub	sp, #80	; 0x50
 8007140:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007142:	f107 0318 	add.w	r3, r7, #24
 8007146:	2238      	movs	r2, #56	; 0x38
 8007148:	2100      	movs	r1, #0
 800714a:	4618      	mov	r0, r3
 800714c:	f010 fce4 	bl	8017b18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007150:	1d3b      	adds	r3, r7, #4
 8007152:	2200      	movs	r2, #0
 8007154:	601a      	str	r2, [r3, #0]
 8007156:	605a      	str	r2, [r3, #4]
 8007158:	609a      	str	r2, [r3, #8]
 800715a:	60da      	str	r2, [r3, #12]
 800715c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800715e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007162:	f005 fb73 	bl	800c84c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8007166:	2322      	movs	r3, #34	; 0x22
 8007168:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800716a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800716e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007170:	2340      	movs	r3, #64	; 0x40
 8007172:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8007174:	2301      	movs	r3, #1
 8007176:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007178:	2302      	movs	r3, #2
 800717a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800717c:	2302      	movs	r3, #2
 800717e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8007180:	2304      	movs	r3, #4
 8007182:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8007184:	234b      	movs	r3, #75	; 0x4b
 8007186:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007188:	2302      	movs	r3, #2
 800718a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800718c:	2302      	movs	r3, #2
 800718e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007190:	2302      	movs	r3, #2
 8007192:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007194:	f107 0318 	add.w	r3, r7, #24
 8007198:	4618      	mov	r0, r3
 800719a:	f005 fbfb 	bl	800c994 <HAL_RCC_OscConfig>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d001      	beq.n	80071a8 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80071a4:	f000 f82a 	bl	80071fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80071a8:	230f      	movs	r3, #15
 80071aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80071ac:	2303      	movs	r3, #3
 80071ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80071b0:	2300      	movs	r3, #0
 80071b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80071b4:	2300      	movs	r3, #0
 80071b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80071b8:	2300      	movs	r3, #0
 80071ba:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80071bc:	1d3b      	adds	r3, r7, #4
 80071be:	2104      	movs	r1, #4
 80071c0:	4618      	mov	r0, r3
 80071c2:	f005 feff 	bl	800cfc4 <HAL_RCC_ClockConfig>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d001      	beq.n	80071d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80071cc:	f000 f816 	bl	80071fc <Error_Handler>
  }
}
 80071d0:	bf00      	nop
 80071d2:	3750      	adds	r7, #80	; 0x50
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a04      	ldr	r2, [pc, #16]	; (80071f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d101      	bne.n	80071ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80071ea:	f000 ffcd 	bl	8008188 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80071ee:	bf00      	nop
 80071f0:	3708      	adds	r7, #8
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	40012c00 	.word	0x40012c00

080071fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80071fc:	b480      	push	{r7}
 80071fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007200:	b672      	cpsid	i
}
 8007202:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007204:	e7fe      	b.n	8007204 <Error_Handler+0x8>

08007206 <Pid_CalculatePitchError>:
DESCRIPTION - Basic driver for the mpu6050 accelerometer.
*******************************************************)*/
#include "main.h"

//As the gyro got the front at x axis then rotation on X mean roll / rotation on Y mean pitch and rotation on Z mean yaw
float32_t Pid_CalculatePitchError(COMMAND_t *command,BNO055_t *Accelerometer){
 8007206:	b480      	push	{r7}
 8007208:	b085      	sub	sp, #20
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
 800720e:	6039      	str	r1, [r7, #0]
	float32_t res = (Accelerometer->processed_data.euler_angles.x)-(command->pitch_angle);
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	edd3 7a02 	vldr	s15, [r3, #8]
 800721c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007220:	edc7 7a03 	vstr	s15, [r7, #12]
	return res;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	ee07 3a90 	vmov	s15, r3
}
 800722a:	eeb0 0a67 	vmov.f32	s0, s15
 800722e:	3714      	adds	r7, #20
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <Pid_CalculateYawError>:

float32_t Pid_CalculateYawError(COMMAND_t *command,BNO055_t *Accelerometer){
 8007238:	b480      	push	{r7}
 800723a:	b085      	sub	sp, #20
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
	float32_t res = (Accelerometer->processed_data.euler_angles.z)-(command->yaw_angle);
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	edd3 7a03 	vldr	s15, [r3, #12]
 800724e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007252:	edc7 7a03 	vstr	s15, [r7, #12]
	return res;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	ee07 3a90 	vmov	s15, r3
}
 800725c:	eeb0 0a67 	vmov.f32	s0, s15
 8007260:	3714      	adds	r7, #20
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr

0800726a <Pid_CalculateRollError>:

float32_t Pid_CalculateRollError(COMMAND_t *command,BNO055_t *Accelerometer){
 800726a:	b480      	push	{r7}
 800726c:	b085      	sub	sp, #20
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
 8007272:	6039      	str	r1, [r7, #0]
	float32_t res = (Accelerometer->processed_data.euler_angles.y)-(command->roll_angle);
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	edd3 7a04 	vldr	s15, [r3, #16]
 8007280:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007284:	edc7 7a03 	vstr	s15, [r7, #12]
	return res;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	ee07 3a90 	vmov	s15, r3
}
 800728e:	eeb0 0a67 	vmov.f32	s0, s15
 8007292:	3714      	adds	r7, #20
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <Pid_Init>:

void Pid_Init(arm_pid_instance_f32 *PID,float32_t KP,float32_t KI,float32_t KD){
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	ed87 0a02 	vstr	s0, [r7, #8]
 80072a8:	edc7 0a01 	vstr	s1, [r7, #4]
 80072ac:	ed87 1a00 	vstr	s2, [r7]

	//Set PID gain
	PID->Kp = KP;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	68ba      	ldr	r2, [r7, #8]
 80072b4:	619a      	str	r2, [r3, #24]
	PID->Ki = KI;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	61da      	str	r2, [r3, #28]
	PID->Kd = KD;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	683a      	ldr	r2, [r7, #0]
 80072c0:	621a      	str	r2, [r3, #32]

	//Set the PID
	arm_pid_init_f32(PID, 1);
 80072c2:	2101      	movs	r1, #1
 80072c4:	68f8      	ldr	r0, [r7, #12]
 80072c6:	f010 fbcf 	bl	8017a68 <arm_pid_init_f32>

}
 80072ca:	bf00      	nop
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <Pid_CompensateYaw>:

//Function use to compensate a roatation on yaw axis --> make sure to update accelerometer before reading and compensate
void Pid_CompensateYaw(arm_pid_instance_f32 *PID,COMMAND_t *command,BNO055_t *Accelerometer,PROPULSION_t *propulsion){
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b08a      	sub	sp, #40	; 0x28
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	60f8      	str	r0, [r7, #12]
 80072da:	60b9      	str	r1, [r7, #8]
 80072dc:	607a      	str	r2, [r7, #4]
 80072de:	603b      	str	r3, [r7, #0]
	float32_t error;
	float32_t pid_value;
	//Calculate the erro in °/s around yaw/z axis
	error = Pid_CalculateYawError(command, Accelerometer);
 80072e0:	6879      	ldr	r1, [r7, #4]
 80072e2:	68b8      	ldr	r0, [r7, #8]
 80072e4:	f7ff ffa8 	bl	8007238 <Pid_CalculateYawError>
 80072e8:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	61fb      	str	r3, [r7, #28]
 80072f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f2:	61bb      	str	r3, [r7, #24]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	ed93 7a00 	vldr	s14, [r3]
 80072fa:	edd7 7a06 	vldr	s15, [r7, #24]
 80072fe:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8007302:	69fb      	ldr	r3, [r7, #28]
 8007304:	edd3 6a01 	vldr	s13, [r3, #4]
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	edd3 7a03 	vldr	s15, [r3, #12]
 800730e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8007312:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	edd3 6a02 	vldr	s13, [r3, #8]
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	edd3 7a04 	vldr	s15, [r3, #16]
 8007322:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007326:	ee37 7a27 	vadd.f32	s14, s14, s15
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8007330:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007334:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Update state */
    S->state[1] = S->state[0];
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	68da      	ldr	r2, [r3, #12]
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	69ba      	ldr	r2, [r7, #24]
 8007344:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	697a      	ldr	r2, [r7, #20]
 800734a:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 800734c:	697b      	ldr	r3, [r7, #20]
	//calculate the amount of mouve needed to force back the plane
	pid_value = arm_pid_f32(PID, error);
 800734e:	623b      	str	r3, [r7, #32]

	//Ase the plane is a fixed wing we can't compensate move on yaw axis ...
	//If you have different plane make sure to create a thing to do here
}
 8007350:	bf00      	nop
 8007352:	3728      	adds	r7, #40	; 0x28
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <Pid_CompensateRoll>:

//Function use to compensate a roatation on Roll axis --> make sure to update accelerometer before reading and compensate
void Pid_CompensateRoll(arm_pid_instance_f32 *PID,COMMAND_t *command,BNO055_t *Accelerometer,PROPULSION_t *propulsion){
 8007358:	b580      	push	{r7, lr}
 800735a:	b08a      	sub	sp, #40	; 0x28
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	607a      	str	r2, [r7, #4]
 8007364:	603b      	str	r3, [r7, #0]

	float32_t error;
	float32_t pid_value;
	//Calculate the erro in °/s around yaw/z axis
	error = Pid_CalculateRollError(command, Accelerometer);
 8007366:	6879      	ldr	r1, [r7, #4]
 8007368:	68b8      	ldr	r0, [r7, #8]
 800736a:	f7ff ff7e 	bl	800726a <Pid_CalculateRollError>
 800736e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	61fb      	str	r3, [r7, #28]
 8007376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007378:	61bb      	str	r3, [r7, #24]
    out = (S->A0 * in) +
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	ed93 7a00 	vldr	s14, [r3]
 8007380:	edd7 7a06 	vldr	s15, [r7, #24]
 8007384:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	edd3 6a01 	vldr	s13, [r3, #4]
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	edd3 7a03 	vldr	s15, [r3, #12]
 8007394:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8007398:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	edd3 6a02 	vldr	s13, [r3, #8]
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	edd3 7a04 	vldr	s15, [r3, #16]
 80073a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80073ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80073b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80073ba:	edc7 7a05 	vstr	s15, [r7, #20]
    S->state[1] = S->state[0];
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	68da      	ldr	r2, [r3, #12]
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	69ba      	ldr	r2, [r7, #24]
 80073ca:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	697a      	ldr	r2, [r7, #20]
 80073d0:	615a      	str	r2, [r3, #20]
    return (out);
 80073d2:	697b      	ldr	r3, [r7, #20]
	//calculate the amount of mouve needed to force back the plane
	pid_value = arm_pid_f32(PID, error);
 80073d4:	623b      	str	r3, [r7, #32]

	/*Left flaps up and right flaps down*/


#ifndef SERVO_LEFT_REVERSED
	if((propulsion->servo_left_timer_val + pid_value)>MAX_LEFT_EXTENSION){
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073da:	ee07 3a90 	vmov	s15, r3
 80073de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80073e2:	edd7 7a08 	vldr	s15, [r7, #32]
 80073e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80073ea:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80074dc <Pid_CompensateRoll+0x184>
 80073ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073f6:	dd04      	ble.n	8007402 <Pid_CompensateRoll+0xaa>
		propulsion->servo_left_timer_val = MAX_LEFT_EXTENSION;
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	f640 52ac 	movw	r2, #3500	; 0xdac
 80073fe:	625a      	str	r2, [r3, #36]	; 0x24
 8007400:	e025      	b.n	800744e <Pid_CompensateRoll+0xf6>
	}
	else{
		if((propulsion->servo_left_timer_val + pid_value)<MIN_LEFT_EXTENSION){
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007406:	ee07 3a90 	vmov	s15, r3
 800740a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800740e:	edd7 7a08 	vldr	s15, [r7, #32]
 8007412:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007416:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80074e0 <Pid_CompensateRoll+0x188>
 800741a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800741e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007422:	d504      	bpl.n	800742e <Pid_CompensateRoll+0xd6>
			propulsion->servo_left_timer_val = MIN_LEFT_EXTENSION;
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	f240 5214 	movw	r2, #1300	; 0x514
 800742a:	625a      	str	r2, [r3, #36]	; 0x24
 800742c:	e00f      	b.n	800744e <Pid_CompensateRoll+0xf6>
		}
		else{
			propulsion->servo_left_timer_val += pid_value;
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007432:	ee07 3a90 	vmov	s15, r3
 8007436:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800743a:	edd7 7a08 	vldr	s15, [r7, #32]
 800743e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007442:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007446:	ee17 2a90 	vmov	r2, s15
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	625a      	str	r2, [r3, #36]	; 0x24
			propulsion->servo_right_timer_val -= pid_value;
		}
	}
#endif
#ifdef SERVO_RIGHT_REVERSED
	if((propulsion->servo_right_timer_val + pid_value)>MIN_RIGHT_EXTENSION){
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007452:	ee07 3a90 	vmov	s15, r3
 8007456:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800745a:	edd7 7a08 	vldr	s15, [r7, #32]
 800745e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007462:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80074dc <Pid_CompensateRoll+0x184>
 8007466:	eef4 7ac7 	vcmpe.f32	s15, s14
 800746a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800746e:	dd04      	ble.n	800747a <Pid_CompensateRoll+0x122>
		propulsion->servo_right_timer_val = MIN_RIGHT_EXTENSION;
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	f640 52ac 	movw	r2, #3500	; 0xdac
 8007476:	629a      	str	r2, [r3, #40]	; 0x28
 8007478:	e025      	b.n	80074c6 <Pid_CompensateRoll+0x16e>
	}
	else{
		if((propulsion->servo_right_timer_val + pid_value)<MAX_RIGHT_EXTENSION){
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800747e:	ee07 3a90 	vmov	s15, r3
 8007482:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007486:	edd7 7a08 	vldr	s15, [r7, #32]
 800748a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800748e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80074e0 <Pid_CompensateRoll+0x188>
 8007492:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800749a:	d504      	bpl.n	80074a6 <Pid_CompensateRoll+0x14e>
			propulsion->servo_right_timer_val = MAX_RIGHT_EXTENSION;
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	f240 5214 	movw	r2, #1300	; 0x514
 80074a2:	629a      	str	r2, [r3, #40]	; 0x28
 80074a4:	e00f      	b.n	80074c6 <Pid_CompensateRoll+0x16e>
		}
		else{
			propulsion->servo_right_timer_val += pid_value;
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074aa:	ee07 3a90 	vmov	s15, r3
 80074ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80074b2:	edd7 7a08 	vldr	s15, [r7, #32]
 80074b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80074ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074be:	ee17 2a90 	vmov	r2, s15
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	629a      	str	r2, [r3, #40]	; 0x28
			propulsion->servo_left_timer_val -= pid_value;
		}
	}
#endif

	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 80074c6:	6838      	ldr	r0, [r7, #0]
 80074c8:	f000 f8d2 	bl	8007670 <PropulsionAndControl_UpdateLeftFlaps>
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 80074cc:	6838      	ldr	r0, [r7, #0]
 80074ce:	f000 f8ed 	bl	80076ac <PropulsionAndControl_UpdateRightFlaps>

}
 80074d2:	bf00      	nop
 80074d4:	3728      	adds	r7, #40	; 0x28
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	455ac000 	.word	0x455ac000
 80074e0:	44a28000 	.word	0x44a28000

080074e4 <Pid_CompensatePitch>:
//Function use to compensate a roatation on Pitch axis --> make sure to update accelerometer before reading and compensate
void Pid_CompensatePitch(arm_pid_instance_f32 *PID,COMMAND_t *command,BNO055_t *Accelerometer,PROPULSION_t *propulsion){
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b08a      	sub	sp, #40	; 0x28
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	607a      	str	r2, [r7, #4]
 80074f0:	603b      	str	r3, [r7, #0]

	float32_t error;
	float32_t pid_value;
	//Calculate the erro in °/s around yaw/z axis
	error = Pid_CalculatePitchError(command, Accelerometer);
 80074f2:	6879      	ldr	r1, [r7, #4]
 80074f4:	68b8      	ldr	r0, [r7, #8]
 80074f6:	f7ff fe86 	bl	8007206 <Pid_CalculatePitchError>
 80074fa:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	61fb      	str	r3, [r7, #28]
 8007502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007504:	61bb      	str	r3, [r7, #24]
    out = (S->A0 * in) +
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	ed93 7a00 	vldr	s14, [r3]
 800750c:	edd7 7a06 	vldr	s15, [r7, #24]
 8007510:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	edd3 6a01 	vldr	s13, [r3, #4]
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	edd3 7a03 	vldr	s15, [r3, #12]
 8007520:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8007524:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	edd3 6a02 	vldr	s13, [r3, #8]
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	edd3 7a04 	vldr	s15, [r3, #16]
 8007534:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007538:	ee37 7a27 	vadd.f32	s14, s14, s15
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8007542:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007546:	edc7 7a05 	vstr	s15, [r7, #20]
    S->state[1] = S->state[0];
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	68da      	ldr	r2, [r3, #12]
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	69ba      	ldr	r2, [r7, #24]
 8007556:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	697a      	ldr	r2, [r7, #20]
 800755c:	615a      	str	r2, [r3, #20]
    return (out);
 800755e:	697b      	ldr	r3, [r7, #20]
	//calculate the amount of mouve needed to force back the plane
	pid_value = arm_pid_f32(PID, error);
 8007560:	623b      	str	r3, [r7, #32]


#ifndef SERVO_LEFT_REVERSED
	if((propulsion->servo_left_timer_val + pid_value)>MAX_LEFT_EXTENSION){
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007566:	ee07 3a90 	vmov	s15, r3
 800756a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800756e:	edd7 7a08 	vldr	s15, [r7, #32]
 8007572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007576:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8007668 <Pid_CompensatePitch+0x184>
 800757a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800757e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007582:	dd04      	ble.n	800758e <Pid_CompensatePitch+0xaa>
		propulsion->servo_left_timer_val = MAX_LEFT_EXTENSION;
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	f640 52ac 	movw	r2, #3500	; 0xdac
 800758a:	625a      	str	r2, [r3, #36]	; 0x24
 800758c:	e025      	b.n	80075da <Pid_CompensatePitch+0xf6>
	}
	else{
		if((propulsion->servo_left_timer_val + pid_value)<MIN_LEFT_EXTENSION){
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007592:	ee07 3a90 	vmov	s15, r3
 8007596:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800759a:	edd7 7a08 	vldr	s15, [r7, #32]
 800759e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80075a2:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800766c <Pid_CompensatePitch+0x188>
 80075a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ae:	d504      	bpl.n	80075ba <Pid_CompensatePitch+0xd6>
			propulsion->servo_left_timer_val = MIN_LEFT_EXTENSION;
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	f240 5214 	movw	r2, #1300	; 0x514
 80075b6:	625a      	str	r2, [r3, #36]	; 0x24
 80075b8:	e00f      	b.n	80075da <Pid_CompensatePitch+0xf6>
		}
		else{
			propulsion->servo_left_timer_val += pid_value;
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075be:	ee07 3a90 	vmov	s15, r3
 80075c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80075c6:	edd7 7a08 	vldr	s15, [r7, #32]
 80075ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80075ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075d2:	ee17 2a90 	vmov	r2, s15
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	625a      	str	r2, [r3, #36]	; 0x24
			propulsion->servo_right_timer_val += pid_value;
		}
	}
#endif
#ifdef SERVO_RIGHT_REVERSED
	if((propulsion->servo_right_timer_val - pid_value)>MIN_RIGHT_EXTENSION){
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075de:	ee07 3a90 	vmov	s15, r3
 80075e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80075e6:	edd7 7a08 	vldr	s15, [r7, #32]
 80075ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80075ee:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8007668 <Pid_CompensatePitch+0x184>
 80075f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075fa:	dd04      	ble.n	8007606 <Pid_CompensatePitch+0x122>
		propulsion->servo_right_timer_val = MIN_RIGHT_EXTENSION;
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	f640 52ac 	movw	r2, #3500	; 0xdac
 8007602:	629a      	str	r2, [r3, #40]	; 0x28
 8007604:	e025      	b.n	8007652 <Pid_CompensatePitch+0x16e>
	}
	else{
		if((propulsion->servo_right_timer_val - pid_value)<MAX_RIGHT_EXTENSION){
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800760a:	ee07 3a90 	vmov	s15, r3
 800760e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007612:	edd7 7a08 	vldr	s15, [r7, #32]
 8007616:	ee77 7a67 	vsub.f32	s15, s14, s15
 800761a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800766c <Pid_CompensatePitch+0x188>
 800761e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007626:	d504      	bpl.n	8007632 <Pid_CompensatePitch+0x14e>
			propulsion->servo_right_timer_val = MAX_RIGHT_EXTENSION;
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	f240 5214 	movw	r2, #1300	; 0x514
 800762e:	629a      	str	r2, [r3, #40]	; 0x28
 8007630:	e00f      	b.n	8007652 <Pid_CompensatePitch+0x16e>
		}
		else{
			propulsion->servo_right_timer_val -= pid_value;
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007636:	ee07 3a90 	vmov	s15, r3
 800763a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800763e:	edd7 7a08 	vldr	s15, [r7, #32]
 8007642:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007646:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800764a:	ee17 2a90 	vmov	r2, s15
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	629a      	str	r2, [r3, #40]	; 0x28
		}
	}
#endif


	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 8007652:	6838      	ldr	r0, [r7, #0]
 8007654:	f000 f80c 	bl	8007670 <PropulsionAndControl_UpdateLeftFlaps>
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8007658:	6838      	ldr	r0, [r7, #0]
 800765a:	f000 f827 	bl	80076ac <PropulsionAndControl_UpdateRightFlaps>

}
 800765e:	bf00      	nop
 8007660:	3728      	adds	r7, #40	; 0x28
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	455ac000 	.word	0x455ac000
 800766c:	44a28000 	.word	0x44a28000

08007670 <PropulsionAndControl_UpdateLeftFlaps>:
void PropulsionAndControl_UpdateESC(PROPULSION_t *propulsion){
	uint32_t * timer_base_addr_ptr = &(propulsion->timer->Instance->CCR1);
	*(timer_base_addr_ptr + ((propulsion->esc_timer_channel-1))) = propulsion->esc_timer_val;
	propulsion->update_timer = 0x01;
}
void PropulsionAndControl_UpdateLeftFlaps(PROPULSION_t *propulsion){
 8007670:	b480      	push	{r7}
 8007672:	b085      	sub	sp, #20
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
	uint32_t * timer_base_addr_ptr = &(propulsion->timer->Instance->CCR1);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	699b      	ldr	r3, [r3, #24]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	3334      	adds	r3, #52	; 0x34
 8007680:	60fb      	str	r3, [r7, #12]
	*(timer_base_addr_ptr + ((propulsion->servo_left_timer_channel-1))) = propulsion->servo_left_timer_val;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	7f5b      	ldrb	r3, [r3, #29]
 8007686:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800768a:	3b01      	subs	r3, #1
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	4413      	add	r3, r2
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007696:	601a      	str	r2, [r3, #0]
	propulsion->update_timer = 0x01;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 80076a0:	bf00      	nop
 80076a2:	3714      	adds	r7, #20
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <PropulsionAndControl_UpdateRightFlaps>:
void PropulsionAndControl_UpdateRightFlaps(PROPULSION_t *propulsion){
 80076ac:	b480      	push	{r7}
 80076ae:	b085      	sub	sp, #20
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
	uint32_t * timer_base_addr_ptr = &(propulsion->timer->Instance->CCR1);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	699b      	ldr	r3, [r3, #24]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	3334      	adds	r3, #52	; 0x34
 80076bc:	60fb      	str	r3, [r7, #12]
	*(timer_base_addr_ptr + ((propulsion->servo_right_timer_channel-1))) = propulsion->servo_right_timer_val;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	7f9b      	ldrb	r3, [r3, #30]
 80076c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80076c6:	3b01      	subs	r3, #1
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	4413      	add	r3, r2
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80076d2:	601a      	str	r2, [r3, #0]
	propulsion->update_timer = 0x01;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 80076dc:	bf00      	nop
 80076de:	3714      	adds	r7, #20
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <PropulsionAndControl_Init>:

void PropulsionAndControl_Init(PROPULSION_t *propulsion,uint32_t esc_pin,GPIO_TypeDef *esc_port,uint32_t servo_left_pin,GPIO_TypeDef *servo_left_port,uint32_t servo_right_pin,GPIO_TypeDef *servo_right_port,uint32_t esc_channel,uint32_t servo_left_channel,uint32_t servo_right_channel,TIM_HandleTypeDef *timer_entity){
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	607a      	str	r2, [r7, #4]
 80076f4:	603b      	str	r3, [r7, #0]

	//Store all pins into the struct
	propulsion->esc_pin = esc_pin;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	611a      	str	r2, [r3, #16]
	propulsion->esc_port = esc_port;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	615a      	str	r2, [r3, #20]
	propulsion->esc_timer_channel = esc_channel;
 8007702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007704:	b2da      	uxtb	r2, r3
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	771a      	strb	r2, [r3, #28]

	propulsion->servo_left_pin = servo_left_pin;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	683a      	ldr	r2, [r7, #0]
 800770e:	601a      	str	r2, [r3, #0]
	propulsion->servo_left_port = servo_left_port;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	69ba      	ldr	r2, [r7, #24]
 8007714:	605a      	str	r2, [r3, #4]
	propulsion->servo_left_timer_channel = servo_left_channel;
 8007716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007718:	b2da      	uxtb	r2, r3
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	775a      	strb	r2, [r3, #29]

	propulsion->servo_right_pin = servo_right_pin;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	69fa      	ldr	r2, [r7, #28]
 8007722:	609a      	str	r2, [r3, #8]
	propulsion->servo_right_port = servo_right_port;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6a3a      	ldr	r2, [r7, #32]
 8007728:	60da      	str	r2, [r3, #12]
	propulsion->servo_right_timer_channel = servo_right_channel;
 800772a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772c:	b2da      	uxtb	r2, r3
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	779a      	strb	r2, [r3, #30]

	propulsion->timer = timer_entity;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007736:	619a      	str	r2, [r3, #24]

	//put the flaps at minimum
	HAL_Delay(20);
 8007738:	2014      	movs	r0, #20
 800773a:	f000 fd43 	bl	80081c4 <HAL_Delay>
	propulsion->servo_left_timer_val = MIN_LEFT_EXTENSION;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f240 5214 	movw	r2, #1300	; 0x514
 8007744:	625a      	str	r2, [r3, #36]	; 0x24
	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	f7ff ff92 	bl	8007670 <PropulsionAndControl_UpdateLeftFlaps>

	//put the flaps at minimum
	propulsion->servo_right_timer_val = MIN_RIGHT_EXTENSION;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f640 52ac 	movw	r2, #3500	; 0xdac
 8007752:	629a      	str	r2, [r3, #40]	; 0x28
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8007754:	68f8      	ldr	r0, [r7, #12]
 8007756:	f7ff ffa9 	bl	80076ac <PropulsionAndControl_UpdateRightFlaps>

	//put the flaps at maximum
	HAL_Delay(1500);
 800775a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800775e:	f000 fd31 	bl	80081c4 <HAL_Delay>
	propulsion->servo_left_timer_val = MAX_LEFT_EXTENSION;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f640 52ac 	movw	r2, #3500	; 0xdac
 8007768:	625a      	str	r2, [r3, #36]	; 0x24
	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f7ff ff80 	bl	8007670 <PropulsionAndControl_UpdateLeftFlaps>

	//put the flaps at maximum
	propulsion->servo_right_timer_val = MAX_RIGHT_EXTENSION;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f240 5214 	movw	r2, #1300	; 0x514
 8007776:	629a      	str	r2, [r3, #40]	; 0x28
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8007778:	68f8      	ldr	r0, [r7, #12]
 800777a:	f7ff ff97 	bl	80076ac <PropulsionAndControl_UpdateRightFlaps>

	HAL_Delay(1500);
 800777e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8007782:	f000 fd1f 	bl	80081c4 <HAL_Delay>
	propulsion->servo_left_timer_val = (MAX_LEFT_EXTENSION+MIN_LEFT_EXTENSION)/2;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f44f 6216 	mov.w	r2, #2400	; 0x960
 800778c:	625a      	str	r2, [r3, #36]	; 0x24
	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 800778e:	68f8      	ldr	r0, [r7, #12]
 8007790:	f7ff ff6e 	bl	8007670 <PropulsionAndControl_UpdateLeftFlaps>

	//put the flaps at minimum
	propulsion->servo_right_timer_val = (MAX_RIGHT_EXTENSION+MIN_RIGHT_EXTENSION)/2;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f44f 6216 	mov.w	r2, #2400	; 0x960
 800779a:	629a      	str	r2, [r3, #40]	; 0x28
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 800779c:	68f8      	ldr	r0, [r7, #12]
 800779e:	f7ff ff85 	bl	80076ac <PropulsionAndControl_UpdateRightFlaps>
}
 80077a2:	bf00      	nop
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
	...

080077ac <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80077b0:	4b1b      	ldr	r3, [pc, #108]	; (8007820 <MX_SPI1_Init+0x74>)
 80077b2:	4a1c      	ldr	r2, [pc, #112]	; (8007824 <MX_SPI1_Init+0x78>)
 80077b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80077b6:	4b1a      	ldr	r3, [pc, #104]	; (8007820 <MX_SPI1_Init+0x74>)
 80077b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80077bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80077be:	4b18      	ldr	r3, [pc, #96]	; (8007820 <MX_SPI1_Init+0x74>)
 80077c0:	2200      	movs	r2, #0
 80077c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80077c4:	4b16      	ldr	r3, [pc, #88]	; (8007820 <MX_SPI1_Init+0x74>)
 80077c6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80077ca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80077cc:	4b14      	ldr	r3, [pc, #80]	; (8007820 <MX_SPI1_Init+0x74>)
 80077ce:	2200      	movs	r2, #0
 80077d0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80077d2:	4b13      	ldr	r3, [pc, #76]	; (8007820 <MX_SPI1_Init+0x74>)
 80077d4:	2201      	movs	r2, #1
 80077d6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80077d8:	4b11      	ldr	r3, [pc, #68]	; (8007820 <MX_SPI1_Init+0x74>)
 80077da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077de:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80077e0:	4b0f      	ldr	r3, [pc, #60]	; (8007820 <MX_SPI1_Init+0x74>)
 80077e2:	2228      	movs	r2, #40	; 0x28
 80077e4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80077e6:	4b0e      	ldr	r3, [pc, #56]	; (8007820 <MX_SPI1_Init+0x74>)
 80077e8:	2200      	movs	r2, #0
 80077ea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80077ec:	4b0c      	ldr	r3, [pc, #48]	; (8007820 <MX_SPI1_Init+0x74>)
 80077ee:	2200      	movs	r2, #0
 80077f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077f2:	4b0b      	ldr	r3, [pc, #44]	; (8007820 <MX_SPI1_Init+0x74>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80077f8:	4b09      	ldr	r3, [pc, #36]	; (8007820 <MX_SPI1_Init+0x74>)
 80077fa:	2207      	movs	r2, #7
 80077fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80077fe:	4b08      	ldr	r3, [pc, #32]	; (8007820 <MX_SPI1_Init+0x74>)
 8007800:	2200      	movs	r2, #0
 8007802:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8007804:	4b06      	ldr	r3, [pc, #24]	; (8007820 <MX_SPI1_Init+0x74>)
 8007806:	2200      	movs	r2, #0
 8007808:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800780a:	4805      	ldr	r0, [pc, #20]	; (8007820 <MX_SPI1_Init+0x74>)
 800780c:	f006 f876 	bl	800d8fc <HAL_SPI_Init>
 8007810:	4603      	mov	r3, r0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d001      	beq.n	800781a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8007816:	f7ff fcf1 	bl	80071fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800781a:	bf00      	nop
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	200008e0 	.word	0x200008e0
 8007824:	40013000 	.word	0x40013000

08007828 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b08a      	sub	sp, #40	; 0x28
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007830:	f107 0314 	add.w	r3, r7, #20
 8007834:	2200      	movs	r2, #0
 8007836:	601a      	str	r2, [r3, #0]
 8007838:	605a      	str	r2, [r3, #4]
 800783a:	609a      	str	r2, [r3, #8]
 800783c:	60da      	str	r2, [r3, #12]
 800783e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a17      	ldr	r2, [pc, #92]	; (80078a4 <HAL_SPI_MspInit+0x7c>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d128      	bne.n	800789c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800784a:	4b17      	ldr	r3, [pc, #92]	; (80078a8 <HAL_SPI_MspInit+0x80>)
 800784c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800784e:	4a16      	ldr	r2, [pc, #88]	; (80078a8 <HAL_SPI_MspInit+0x80>)
 8007850:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007854:	6613      	str	r3, [r2, #96]	; 0x60
 8007856:	4b14      	ldr	r3, [pc, #80]	; (80078a8 <HAL_SPI_MspInit+0x80>)
 8007858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800785a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800785e:	613b      	str	r3, [r7, #16]
 8007860:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007862:	4b11      	ldr	r3, [pc, #68]	; (80078a8 <HAL_SPI_MspInit+0x80>)
 8007864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007866:	4a10      	ldr	r2, [pc, #64]	; (80078a8 <HAL_SPI_MspInit+0x80>)
 8007868:	f043 0301 	orr.w	r3, r3, #1
 800786c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800786e:	4b0e      	ldr	r3, [pc, #56]	; (80078a8 <HAL_SPI_MspInit+0x80>)
 8007870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007872:	f003 0301 	and.w	r3, r3, #1
 8007876:	60fb      	str	r3, [r7, #12]
 8007878:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800787a:	23e0      	movs	r3, #224	; 0xe0
 800787c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800787e:	2302      	movs	r3, #2
 8007880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007882:	2300      	movs	r3, #0
 8007884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007886:	2300      	movs	r3, #0
 8007888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800788a:	2305      	movs	r3, #5
 800788c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800788e:	f107 0314 	add.w	r3, r7, #20
 8007892:	4619      	mov	r1, r3
 8007894:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007898:	f002 fad4 	bl	8009e44 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800789c:	bf00      	nop
 800789e:	3728      	adds	r7, #40	; 0x28
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	40013000 	.word	0x40013000
 80078a8:	40021000 	.word	0x40021000

080078ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80078b2:	4b11      	ldr	r3, [pc, #68]	; (80078f8 <HAL_MspInit+0x4c>)
 80078b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078b6:	4a10      	ldr	r2, [pc, #64]	; (80078f8 <HAL_MspInit+0x4c>)
 80078b8:	f043 0301 	orr.w	r3, r3, #1
 80078bc:	6613      	str	r3, [r2, #96]	; 0x60
 80078be:	4b0e      	ldr	r3, [pc, #56]	; (80078f8 <HAL_MspInit+0x4c>)
 80078c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078c2:	f003 0301 	and.w	r3, r3, #1
 80078c6:	607b      	str	r3, [r7, #4]
 80078c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80078ca:	4b0b      	ldr	r3, [pc, #44]	; (80078f8 <HAL_MspInit+0x4c>)
 80078cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078ce:	4a0a      	ldr	r2, [pc, #40]	; (80078f8 <HAL_MspInit+0x4c>)
 80078d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078d4:	6593      	str	r3, [r2, #88]	; 0x58
 80078d6:	4b08      	ldr	r3, [pc, #32]	; (80078f8 <HAL_MspInit+0x4c>)
 80078d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078de:	603b      	str	r3, [r7, #0]
 80078e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80078e2:	2200      	movs	r2, #0
 80078e4:	210f      	movs	r1, #15
 80078e6:	f06f 0001 	mvn.w	r0, #1
 80078ea:	f001 ff51 	bl	8009790 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80078ee:	bf00      	nop
 80078f0:	3708      	adds	r7, #8
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	40021000 	.word	0x40021000

080078fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b08c      	sub	sp, #48	; 0x30
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8007904:	2300      	movs	r3, #0
 8007906:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8007908:	2300      	movs	r3, #0
 800790a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800790c:	4b2c      	ldr	r3, [pc, #176]	; (80079c0 <HAL_InitTick+0xc4>)
 800790e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007910:	4a2b      	ldr	r2, [pc, #172]	; (80079c0 <HAL_InitTick+0xc4>)
 8007912:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007916:	6613      	str	r3, [r2, #96]	; 0x60
 8007918:	4b29      	ldr	r3, [pc, #164]	; (80079c0 <HAL_InitTick+0xc4>)
 800791a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800791c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007920:	60bb      	str	r3, [r7, #8]
 8007922:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007924:	f107 020c 	add.w	r2, r7, #12
 8007928:	f107 0310 	add.w	r3, r7, #16
 800792c:	4611      	mov	r1, r2
 800792e:	4618      	mov	r0, r3
 8007930:	f005 fd1e 	bl	800d370 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8007934:	f005 fd06 	bl	800d344 <HAL_RCC_GetPCLK2Freq>
 8007938:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800793a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793c:	4a21      	ldr	r2, [pc, #132]	; (80079c4 <HAL_InitTick+0xc8>)
 800793e:	fba2 2303 	umull	r2, r3, r2, r3
 8007942:	0c9b      	lsrs	r3, r3, #18
 8007944:	3b01      	subs	r3, #1
 8007946:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8007948:	4b1f      	ldr	r3, [pc, #124]	; (80079c8 <HAL_InitTick+0xcc>)
 800794a:	4a20      	ldr	r2, [pc, #128]	; (80079cc <HAL_InitTick+0xd0>)
 800794c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800794e:	4b1e      	ldr	r3, [pc, #120]	; (80079c8 <HAL_InitTick+0xcc>)
 8007950:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007954:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8007956:	4a1c      	ldr	r2, [pc, #112]	; (80079c8 <HAL_InitTick+0xcc>)
 8007958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800795c:	4b1a      	ldr	r3, [pc, #104]	; (80079c8 <HAL_InitTick+0xcc>)
 800795e:	2200      	movs	r2, #0
 8007960:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007962:	4b19      	ldr	r3, [pc, #100]	; (80079c8 <HAL_InitTick+0xcc>)
 8007964:	2200      	movs	r2, #0
 8007966:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8007968:	4817      	ldr	r0, [pc, #92]	; (80079c8 <HAL_InitTick+0xcc>)
 800796a:	f006 f872 	bl	800da52 <HAL_TIM_Base_Init>
 800796e:	4603      	mov	r3, r0
 8007970:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8007974:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007978:	2b00      	cmp	r3, #0
 800797a:	d11b      	bne.n	80079b4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800797c:	4812      	ldr	r0, [pc, #72]	; (80079c8 <HAL_InitTick+0xcc>)
 800797e:	f006 f8c9 	bl	800db14 <HAL_TIM_Base_Start_IT>
 8007982:	4603      	mov	r3, r0
 8007984:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8007988:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800798c:	2b00      	cmp	r3, #0
 800798e:	d111      	bne.n	80079b4 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8007990:	2019      	movs	r0, #25
 8007992:	f001 ff17 	bl	80097c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2b0f      	cmp	r3, #15
 800799a:	d808      	bhi.n	80079ae <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800799c:	2200      	movs	r2, #0
 800799e:	6879      	ldr	r1, [r7, #4]
 80079a0:	2019      	movs	r0, #25
 80079a2:	f001 fef5 	bl	8009790 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80079a6:	4a0a      	ldr	r2, [pc, #40]	; (80079d0 <HAL_InitTick+0xd4>)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6013      	str	r3, [r2, #0]
 80079ac:	e002      	b.n	80079b4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80079b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3730      	adds	r7, #48	; 0x30
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	40021000 	.word	0x40021000
 80079c4:	431bde83 	.word	0x431bde83
 80079c8:	20000944 	.word	0x20000944
 80079cc:	40012c00 	.word	0x40012c00
 80079d0:	20000008 	.word	0x20000008

080079d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80079d4:	b480      	push	{r7}
 80079d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80079d8:	e7fe      	b.n	80079d8 <NMI_Handler+0x4>

080079da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80079da:	b480      	push	{r7}
 80079dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80079de:	e7fe      	b.n	80079de <HardFault_Handler+0x4>

080079e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80079e0:	b480      	push	{r7}
 80079e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80079e4:	e7fe      	b.n	80079e4 <MemManage_Handler+0x4>

080079e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80079e6:	b480      	push	{r7}
 80079e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80079ea:	e7fe      	b.n	80079ea <BusFault_Handler+0x4>

080079ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80079ec:	b480      	push	{r7}
 80079ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80079f0:	e7fe      	b.n	80079f0 <UsageFault_Handler+0x4>

080079f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80079f2:	b480      	push	{r7}
 80079f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80079f6:	bf00      	nop
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007a04:	4802      	ldr	r0, [pc, #8]	; (8007a10 <DMA1_Channel1_IRQHandler+0x10>)
 8007a06:	f002 f8ce 	bl	8009ba6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007a0a:	bf00      	nop
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	20000278 	.word	0x20000278

08007a14 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8007a18:	4802      	ldr	r0, [pc, #8]	; (8007a24 <USB_LP_IRQHandler+0x10>)
 8007a1a:	f003 faeb 	bl	800aff4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8007a1e:	bf00      	nop
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	200051c0 	.word	0x200051c0

08007a28 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007a2c:	4802      	ldr	r0, [pc, #8]	; (8007a38 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8007a2e:	f006 fa53 	bl	800ded8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8007a32:	bf00      	nop
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	20000944 	.word	0x20000944

08007a3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_IT_Pin);
 8007a40:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007a44:	f002 fbb2 	bl	800a1ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  BNO055_ClearIntFlag(&hi2c2);
 8007a48:	4805      	ldr	r0, [pc, #20]	; (8007a60 <EXTI15_10_IRQHandler+0x24>)
 8007a4a:	f7fe f9d0 	bl	8005dee <BNO055_ClearIntFlag>
  xSemaphoreGiveFromISR(HG_PROTECTION_SEMHandle,1);
 8007a4e:	4b05      	ldr	r3, [pc, #20]	; (8007a64 <EXTI15_10_IRQHandler+0x28>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2101      	movs	r1, #1
 8007a54:	4618      	mov	r0, r3
 8007a56:	f00d fd0b 	bl	8015470 <xQueueGiveFromISR>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007a5a:	bf00      	nop
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	20000374 	.word	0x20000374
 8007a64:	20000370 	.word	0x20000370

08007a68 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8007a6c:	4805      	ldr	r0, [pc, #20]	; (8007a84 <UART4_IRQHandler+0x1c>)
 8007a6e:	f007 fbd3 	bl	800f218 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  xSemaphoreGiveFromISR(GPS_UART_SemaphoreHandle,pdFALSE);
 8007a72:	4b05      	ldr	r3, [pc, #20]	; (8007a88 <UART4_IRQHandler+0x20>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2100      	movs	r1, #0
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f00d fcf9 	bl	8015470 <xQueueGiveFromISR>

  /* USER CODE END UART4_IRQn 1 */
}
 8007a7e:	bf00      	nop
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	20000a74 	.word	0x20000a74
 8007a88:	2000036c 	.word	0x2000036c

08007a8c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007a90:	4b08      	ldr	r3, [pc, #32]	; (8007ab4 <SystemInit+0x28>)
 8007a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a96:	4a07      	ldr	r2, [pc, #28]	; (8007ab4 <SystemInit+0x28>)
 8007a98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8007aa0:	4b04      	ldr	r3, [pc, #16]	; (8007ab4 <SystemInit+0x28>)
 8007aa2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007aa6:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007aa8:	bf00      	nop
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr
 8007ab2:	bf00      	nop
 8007ab4:	e000ed00 	.word	0xe000ed00

08007ab8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b08a      	sub	sp, #40	; 0x28
 8007abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007abe:	f107 031c 	add.w	r3, r7, #28
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	601a      	str	r2, [r3, #0]
 8007ac6:	605a      	str	r2, [r3, #4]
 8007ac8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007aca:	463b      	mov	r3, r7
 8007acc:	2200      	movs	r2, #0
 8007ace:	601a      	str	r2, [r3, #0]
 8007ad0:	605a      	str	r2, [r3, #4]
 8007ad2:	609a      	str	r2, [r3, #8]
 8007ad4:	60da      	str	r2, [r3, #12]
 8007ad6:	611a      	str	r2, [r3, #16]
 8007ad8:	615a      	str	r2, [r3, #20]
 8007ada:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007adc:	4b20      	ldr	r3, [pc, #128]	; (8007b60 <MX_TIM2_Init+0xa8>)
 8007ade:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007ae2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8007ae4:	4b1e      	ldr	r3, [pc, #120]	; (8007b60 <MX_TIM2_Init+0xa8>)
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007aea:	4b1d      	ldr	r3, [pc, #116]	; (8007b60 <MX_TIM2_Init+0xa8>)
 8007aec:	2200      	movs	r2, #0
 8007aee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1440000;
 8007af0:	4b1b      	ldr	r3, [pc, #108]	; (8007b60 <MX_TIM2_Init+0xa8>)
 8007af2:	4a1c      	ldr	r2, [pc, #112]	; (8007b64 <MX_TIM2_Init+0xac>)
 8007af4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007af6:	4b1a      	ldr	r3, [pc, #104]	; (8007b60 <MX_TIM2_Init+0xa8>)
 8007af8:	2200      	movs	r2, #0
 8007afa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007afc:	4b18      	ldr	r3, [pc, #96]	; (8007b60 <MX_TIM2_Init+0xa8>)
 8007afe:	2200      	movs	r2, #0
 8007b00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8007b02:	4817      	ldr	r0, [pc, #92]	; (8007b60 <MX_TIM2_Init+0xa8>)
 8007b04:	f006 f87e 	bl	800dc04 <HAL_TIM_PWM_Init>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d001      	beq.n	8007b12 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8007b0e:	f7ff fb75 	bl	80071fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007b12:	2300      	movs	r3, #0
 8007b14:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007b16:	2300      	movs	r3, #0
 8007b18:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007b1a:	f107 031c 	add.w	r3, r7, #28
 8007b1e:	4619      	mov	r1, r3
 8007b20:	480f      	ldr	r0, [pc, #60]	; (8007b60 <MX_TIM2_Init+0xa8>)
 8007b22:	f007 f88d 	bl	800ec40 <HAL_TIMEx_MasterConfigSynchronization>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d001      	beq.n	8007b30 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8007b2c:	f7ff fb66 	bl	80071fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007b30:	2360      	movs	r3, #96	; 0x60
 8007b32:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8007b34:	2300      	movs	r3, #0
 8007b36:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007b40:	463b      	mov	r3, r7
 8007b42:	2208      	movs	r2, #8
 8007b44:	4619      	mov	r1, r3
 8007b46:	4806      	ldr	r0, [pc, #24]	; (8007b60 <MX_TIM2_Init+0xa8>)
 8007b48:	f006 fb46 	bl	800e1d8 <HAL_TIM_PWM_ConfigChannel>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d001      	beq.n	8007b56 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8007b52:	f7ff fb53 	bl	80071fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8007b56:	bf00      	nop
 8007b58:	3728      	adds	r7, #40	; 0x28
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	20000990 	.word	0x20000990
 8007b64:	0015f900 	.word	0x0015f900

08007b68 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b08a      	sub	sp, #40	; 0x28
 8007b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007b6e:	f107 031c 	add.w	r3, r7, #28
 8007b72:	2200      	movs	r2, #0
 8007b74:	601a      	str	r2, [r3, #0]
 8007b76:	605a      	str	r2, [r3, #4]
 8007b78:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007b7a:	463b      	mov	r3, r7
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	601a      	str	r2, [r3, #0]
 8007b80:	605a      	str	r2, [r3, #4]
 8007b82:	609a      	str	r2, [r3, #8]
 8007b84:	60da      	str	r2, [r3, #12]
 8007b86:	611a      	str	r2, [r3, #16]
 8007b88:	615a      	str	r2, [r3, #20]
 8007b8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8007b8c:	4b21      	ldr	r3, [pc, #132]	; (8007c14 <MX_TIM3_Init+0xac>)
 8007b8e:	4a22      	ldr	r2, [pc, #136]	; (8007c18 <MX_TIM3_Init+0xb0>)
 8007b90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 50;
 8007b92:	4b20      	ldr	r3, [pc, #128]	; (8007c14 <MX_TIM3_Init+0xac>)
 8007b94:	2232      	movs	r2, #50	; 0x32
 8007b96:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007b98:	4b1e      	ldr	r3, [pc, #120]	; (8007c14 <MX_TIM3_Init+0xac>)
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7200;
 8007b9e:	4b1d      	ldr	r3, [pc, #116]	; (8007c14 <MX_TIM3_Init+0xac>)
 8007ba0:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8007ba4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007ba6:	4b1b      	ldr	r3, [pc, #108]	; (8007c14 <MX_TIM3_Init+0xac>)
 8007ba8:	2200      	movs	r2, #0
 8007baa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007bac:	4b19      	ldr	r3, [pc, #100]	; (8007c14 <MX_TIM3_Init+0xac>)
 8007bae:	2200      	movs	r2, #0
 8007bb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8007bb2:	4818      	ldr	r0, [pc, #96]	; (8007c14 <MX_TIM3_Init+0xac>)
 8007bb4:	f006 f826 	bl	800dc04 <HAL_TIM_PWM_Init>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d001      	beq.n	8007bc2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8007bbe:	f7ff fb1d 	bl	80071fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007bca:	f107 031c 	add.w	r3, r7, #28
 8007bce:	4619      	mov	r1, r3
 8007bd0:	4810      	ldr	r0, [pc, #64]	; (8007c14 <MX_TIM3_Init+0xac>)
 8007bd2:	f007 f835 	bl	800ec40 <HAL_TIMEx_MasterConfigSynchronization>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d001      	beq.n	8007be0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8007bdc:	f7ff fb0e 	bl	80071fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007be0:	2360      	movs	r3, #96	; 0x60
 8007be2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8007be4:	2300      	movs	r3, #0
 8007be6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007be8:	2300      	movs	r3, #0
 8007bea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007bec:	2300      	movs	r3, #0
 8007bee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007bf0:	463b      	mov	r3, r7
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	4807      	ldr	r0, [pc, #28]	; (8007c14 <MX_TIM3_Init+0xac>)
 8007bf8:	f006 faee 	bl	800e1d8 <HAL_TIM_PWM_ConfigChannel>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d001      	beq.n	8007c06 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8007c02:	f7ff fafb 	bl	80071fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8007c06:	4803      	ldr	r0, [pc, #12]	; (8007c14 <MX_TIM3_Init+0xac>)
 8007c08:	f000 f8c2 	bl	8007d90 <HAL_TIM_MspPostInit>

}
 8007c0c:	bf00      	nop
 8007c0e:	3728      	adds	r7, #40	; 0x28
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	200009dc 	.word	0x200009dc
 8007c18:	40000400 	.word	0x40000400

08007c1c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b08a      	sub	sp, #40	; 0x28
 8007c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007c22:	f107 031c 	add.w	r3, r7, #28
 8007c26:	2200      	movs	r2, #0
 8007c28:	601a      	str	r2, [r3, #0]
 8007c2a:	605a      	str	r2, [r3, #4]
 8007c2c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007c2e:	463b      	mov	r3, r7
 8007c30:	2200      	movs	r2, #0
 8007c32:	601a      	str	r2, [r3, #0]
 8007c34:	605a      	str	r2, [r3, #4]
 8007c36:	609a      	str	r2, [r3, #8]
 8007c38:	60da      	str	r2, [r3, #12]
 8007c3a:	611a      	str	r2, [r3, #16]
 8007c3c:	615a      	str	r2, [r3, #20]
 8007c3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8007c40:	4b2e      	ldr	r3, [pc, #184]	; (8007cfc <MX_TIM4_Init+0xe0>)
 8007c42:	4a2f      	ldr	r2, [pc, #188]	; (8007d00 <MX_TIM4_Init+0xe4>)
 8007c44:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 50;
 8007c46:	4b2d      	ldr	r3, [pc, #180]	; (8007cfc <MX_TIM4_Init+0xe0>)
 8007c48:	2232      	movs	r2, #50	; 0x32
 8007c4a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007c4c:	4b2b      	ldr	r3, [pc, #172]	; (8007cfc <MX_TIM4_Init+0xe0>)
 8007c4e:	2200      	movs	r2, #0
 8007c50:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000;
 8007c52:	4b2a      	ldr	r3, [pc, #168]	; (8007cfc <MX_TIM4_Init+0xe0>)
 8007c54:	f64e 2260 	movw	r2, #60000	; 0xea60
 8007c58:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007c5a:	4b28      	ldr	r3, [pc, #160]	; (8007cfc <MX_TIM4_Init+0xe0>)
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007c60:	4b26      	ldr	r3, [pc, #152]	; (8007cfc <MX_TIM4_Init+0xe0>)
 8007c62:	2200      	movs	r2, #0
 8007c64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8007c66:	4825      	ldr	r0, [pc, #148]	; (8007cfc <MX_TIM4_Init+0xe0>)
 8007c68:	f005 ffcc 	bl	800dc04 <HAL_TIM_PWM_Init>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d001      	beq.n	8007c76 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8007c72:	f7ff fac3 	bl	80071fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007c76:	2300      	movs	r3, #0
 8007c78:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8007c7e:	f107 031c 	add.w	r3, r7, #28
 8007c82:	4619      	mov	r1, r3
 8007c84:	481d      	ldr	r0, [pc, #116]	; (8007cfc <MX_TIM4_Init+0xe0>)
 8007c86:	f006 ffdb 	bl	800ec40 <HAL_TIMEx_MasterConfigSynchronization>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d001      	beq.n	8007c94 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8007c90:	f7ff fab4 	bl	80071fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007c94:	2360      	movs	r3, #96	; 0x60
 8007c96:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2880;
 8007c98:	f44f 6334 	mov.w	r3, #2880	; 0xb40
 8007c9c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007ca6:	463b      	mov	r3, r7
 8007ca8:	2200      	movs	r2, #0
 8007caa:	4619      	mov	r1, r3
 8007cac:	4813      	ldr	r0, [pc, #76]	; (8007cfc <MX_TIM4_Init+0xe0>)
 8007cae:	f006 fa93 	bl	800e1d8 <HAL_TIM_PWM_ConfigChannel>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d001      	beq.n	8007cbc <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8007cb8:	f7ff faa0 	bl	80071fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007cbc:	463b      	mov	r3, r7
 8007cbe:	2204      	movs	r2, #4
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	480e      	ldr	r0, [pc, #56]	; (8007cfc <MX_TIM4_Init+0xe0>)
 8007cc4:	f006 fa88 	bl	800e1d8 <HAL_TIM_PWM_ConfigChannel>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d001      	beq.n	8007cd2 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8007cce:	f7ff fa95 	bl	80071fc <Error_Handler>
  }
  sConfigOC.Pulse = 6000;
 8007cd2:	f241 7370 	movw	r3, #6000	; 0x1770
 8007cd6:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8007cd8:	463b      	mov	r3, r7
 8007cda:	220c      	movs	r2, #12
 8007cdc:	4619      	mov	r1, r3
 8007cde:	4807      	ldr	r0, [pc, #28]	; (8007cfc <MX_TIM4_Init+0xe0>)
 8007ce0:	f006 fa7a 	bl	800e1d8 <HAL_TIM_PWM_ConfigChannel>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d001      	beq.n	8007cee <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8007cea:	f7ff fa87 	bl	80071fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8007cee:	4803      	ldr	r0, [pc, #12]	; (8007cfc <MX_TIM4_Init+0xe0>)
 8007cf0:	f000 f84e 	bl	8007d90 <HAL_TIM_MspPostInit>

}
 8007cf4:	bf00      	nop
 8007cf6:	3728      	adds	r7, #40	; 0x28
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	20000a28 	.word	0x20000a28
 8007d00:	40000800 	.word	0x40000800

08007d04 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b087      	sub	sp, #28
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d14:	d10c      	bne.n	8007d30 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007d16:	4b1b      	ldr	r3, [pc, #108]	; (8007d84 <HAL_TIM_PWM_MspInit+0x80>)
 8007d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d1a:	4a1a      	ldr	r2, [pc, #104]	; (8007d84 <HAL_TIM_PWM_MspInit+0x80>)
 8007d1c:	f043 0301 	orr.w	r3, r3, #1
 8007d20:	6593      	str	r3, [r2, #88]	; 0x58
 8007d22:	4b18      	ldr	r3, [pc, #96]	; (8007d84 <HAL_TIM_PWM_MspInit+0x80>)
 8007d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d26:	f003 0301 	and.w	r3, r3, #1
 8007d2a:	617b      	str	r3, [r7, #20]
 8007d2c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8007d2e:	e022      	b.n	8007d76 <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM3)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a14      	ldr	r2, [pc, #80]	; (8007d88 <HAL_TIM_PWM_MspInit+0x84>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d10c      	bne.n	8007d54 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007d3a:	4b12      	ldr	r3, [pc, #72]	; (8007d84 <HAL_TIM_PWM_MspInit+0x80>)
 8007d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d3e:	4a11      	ldr	r2, [pc, #68]	; (8007d84 <HAL_TIM_PWM_MspInit+0x80>)
 8007d40:	f043 0302 	orr.w	r3, r3, #2
 8007d44:	6593      	str	r3, [r2, #88]	; 0x58
 8007d46:	4b0f      	ldr	r3, [pc, #60]	; (8007d84 <HAL_TIM_PWM_MspInit+0x80>)
 8007d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d4a:	f003 0302 	and.w	r3, r3, #2
 8007d4e:	613b      	str	r3, [r7, #16]
 8007d50:	693b      	ldr	r3, [r7, #16]
}
 8007d52:	e010      	b.n	8007d76 <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM4)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a0c      	ldr	r2, [pc, #48]	; (8007d8c <HAL_TIM_PWM_MspInit+0x88>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d10b      	bne.n	8007d76 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007d5e:	4b09      	ldr	r3, [pc, #36]	; (8007d84 <HAL_TIM_PWM_MspInit+0x80>)
 8007d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d62:	4a08      	ldr	r2, [pc, #32]	; (8007d84 <HAL_TIM_PWM_MspInit+0x80>)
 8007d64:	f043 0304 	orr.w	r3, r3, #4
 8007d68:	6593      	str	r3, [r2, #88]	; 0x58
 8007d6a:	4b06      	ldr	r3, [pc, #24]	; (8007d84 <HAL_TIM_PWM_MspInit+0x80>)
 8007d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d6e:	f003 0304 	and.w	r3, r3, #4
 8007d72:	60fb      	str	r3, [r7, #12]
 8007d74:	68fb      	ldr	r3, [r7, #12]
}
 8007d76:	bf00      	nop
 8007d78:	371c      	adds	r7, #28
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr
 8007d82:	bf00      	nop
 8007d84:	40021000 	.word	0x40021000
 8007d88:	40000400 	.word	0x40000400
 8007d8c:	40000800 	.word	0x40000800

08007d90 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b08a      	sub	sp, #40	; 0x28
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d98:	f107 0314 	add.w	r3, r7, #20
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	601a      	str	r2, [r3, #0]
 8007da0:	605a      	str	r2, [r3, #4]
 8007da2:	609a      	str	r2, [r3, #8]
 8007da4:	60da      	str	r2, [r3, #12]
 8007da6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a22      	ldr	r2, [pc, #136]	; (8007e38 <HAL_TIM_MspPostInit+0xa8>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d11c      	bne.n	8007dec <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007db2:	4b22      	ldr	r3, [pc, #136]	; (8007e3c <HAL_TIM_MspPostInit+0xac>)
 8007db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007db6:	4a21      	ldr	r2, [pc, #132]	; (8007e3c <HAL_TIM_MspPostInit+0xac>)
 8007db8:	f043 0304 	orr.w	r3, r3, #4
 8007dbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007dbe:	4b1f      	ldr	r3, [pc, #124]	; (8007e3c <HAL_TIM_MspPostInit+0xac>)
 8007dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dc2:	f003 0304 	and.w	r3, r3, #4
 8007dc6:	613b      	str	r3, [r7, #16]
 8007dc8:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007dca:	2340      	movs	r3, #64	; 0x40
 8007dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dce:	2302      	movs	r3, #2
 8007dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007dda:	2302      	movs	r3, #2
 8007ddc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007dde:	f107 0314 	add.w	r3, r7, #20
 8007de2:	4619      	mov	r1, r3
 8007de4:	4816      	ldr	r0, [pc, #88]	; (8007e40 <HAL_TIM_MspPostInit+0xb0>)
 8007de6:	f002 f82d 	bl	8009e44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8007dea:	e021      	b.n	8007e30 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM4)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a14      	ldr	r2, [pc, #80]	; (8007e44 <HAL_TIM_MspPostInit+0xb4>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d11c      	bne.n	8007e30 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007df6:	4b11      	ldr	r3, [pc, #68]	; (8007e3c <HAL_TIM_MspPostInit+0xac>)
 8007df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dfa:	4a10      	ldr	r2, [pc, #64]	; (8007e3c <HAL_TIM_MspPostInit+0xac>)
 8007dfc:	f043 0302 	orr.w	r3, r3, #2
 8007e00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007e02:	4b0e      	ldr	r3, [pc, #56]	; (8007e3c <HAL_TIM_MspPostInit+0xac>)
 8007e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e06:	f003 0302 	and.w	r3, r3, #2
 8007e0a:	60fb      	str	r3, [r7, #12]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8007e0e:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8007e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e14:	2302      	movs	r3, #2
 8007e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007e20:	2302      	movs	r3, #2
 8007e22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e24:	f107 0314 	add.w	r3, r7, #20
 8007e28:	4619      	mov	r1, r3
 8007e2a:	4807      	ldr	r0, [pc, #28]	; (8007e48 <HAL_TIM_MspPostInit+0xb8>)
 8007e2c:	f002 f80a 	bl	8009e44 <HAL_GPIO_Init>
}
 8007e30:	bf00      	nop
 8007e32:	3728      	adds	r7, #40	; 0x28
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	40000400 	.word	0x40000400
 8007e3c:	40021000 	.word	0x40021000
 8007e40:	48000800 	.word	0x48000800
 8007e44:	40000800 	.word	0x40000800
 8007e48:	48000400 	.word	0x48000400

08007e4c <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart5;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8007e50:	4b22      	ldr	r3, [pc, #136]	; (8007edc <MX_UART4_Init+0x90>)
 8007e52:	4a23      	ldr	r2, [pc, #140]	; (8007ee0 <MX_UART4_Init+0x94>)
 8007e54:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8007e56:	4b21      	ldr	r3, [pc, #132]	; (8007edc <MX_UART4_Init+0x90>)
 8007e58:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8007e5c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8007e5e:	4b1f      	ldr	r3, [pc, #124]	; (8007edc <MX_UART4_Init+0x90>)
 8007e60:	2200      	movs	r2, #0
 8007e62:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8007e64:	4b1d      	ldr	r3, [pc, #116]	; (8007edc <MX_UART4_Init+0x90>)
 8007e66:	2200      	movs	r2, #0
 8007e68:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8007e6a:	4b1c      	ldr	r3, [pc, #112]	; (8007edc <MX_UART4_Init+0x90>)
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8007e70:	4b1a      	ldr	r3, [pc, #104]	; (8007edc <MX_UART4_Init+0x90>)
 8007e72:	220c      	movs	r2, #12
 8007e74:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007e76:	4b19      	ldr	r3, [pc, #100]	; (8007edc <MX_UART4_Init+0x90>)
 8007e78:	2200      	movs	r2, #0
 8007e7a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8007e7c:	4b17      	ldr	r3, [pc, #92]	; (8007edc <MX_UART4_Init+0x90>)
 8007e7e:	2200      	movs	r2, #0
 8007e80:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007e82:	4b16      	ldr	r3, [pc, #88]	; (8007edc <MX_UART4_Init+0x90>)
 8007e84:	2200      	movs	r2, #0
 8007e86:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007e88:	4b14      	ldr	r3, [pc, #80]	; (8007edc <MX_UART4_Init+0x90>)
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007e8e:	4b13      	ldr	r3, [pc, #76]	; (8007edc <MX_UART4_Init+0x90>)
 8007e90:	2200      	movs	r2, #0
 8007e92:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8007e94:	4811      	ldr	r0, [pc, #68]	; (8007edc <MX_UART4_Init+0x90>)
 8007e96:	f006 ffaf 	bl	800edf8 <HAL_UART_Init>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d001      	beq.n	8007ea4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8007ea0:	f7ff f9ac 	bl	80071fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007ea4:	2100      	movs	r1, #0
 8007ea6:	480d      	ldr	r0, [pc, #52]	; (8007edc <MX_UART4_Init+0x90>)
 8007ea8:	f009 f82f 	bl	8010f0a <HAL_UARTEx_SetTxFifoThreshold>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d001      	beq.n	8007eb6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8007eb2:	f7ff f9a3 	bl	80071fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007eb6:	2100      	movs	r1, #0
 8007eb8:	4808      	ldr	r0, [pc, #32]	; (8007edc <MX_UART4_Init+0x90>)
 8007eba:	f009 f864 	bl	8010f86 <HAL_UARTEx_SetRxFifoThreshold>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d001      	beq.n	8007ec8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8007ec4:	f7ff f99a 	bl	80071fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8007ec8:	4804      	ldr	r0, [pc, #16]	; (8007edc <MX_UART4_Init+0x90>)
 8007eca:	f008 ffe5 	bl	8010e98 <HAL_UARTEx_DisableFifoMode>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d001      	beq.n	8007ed8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8007ed4:	f7ff f992 	bl	80071fc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8007ed8:	bf00      	nop
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	20000a74 	.word	0x20000a74
 8007ee0:	40004c00 	.word	0x40004c00

08007ee4 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8007ee8:	4b22      	ldr	r3, [pc, #136]	; (8007f74 <MX_UART5_Init+0x90>)
 8007eea:	4a23      	ldr	r2, [pc, #140]	; (8007f78 <MX_UART5_Init+0x94>)
 8007eec:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8007eee:	4b21      	ldr	r3, [pc, #132]	; (8007f74 <MX_UART5_Init+0x90>)
 8007ef0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8007ef4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8007ef6:	4b1f      	ldr	r3, [pc, #124]	; (8007f74 <MX_UART5_Init+0x90>)
 8007ef8:	2200      	movs	r2, #0
 8007efa:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8007efc:	4b1d      	ldr	r3, [pc, #116]	; (8007f74 <MX_UART5_Init+0x90>)
 8007efe:	2200      	movs	r2, #0
 8007f00:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8007f02:	4b1c      	ldr	r3, [pc, #112]	; (8007f74 <MX_UART5_Init+0x90>)
 8007f04:	2200      	movs	r2, #0
 8007f06:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8007f08:	4b1a      	ldr	r3, [pc, #104]	; (8007f74 <MX_UART5_Init+0x90>)
 8007f0a:	220c      	movs	r2, #12
 8007f0c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007f0e:	4b19      	ldr	r3, [pc, #100]	; (8007f74 <MX_UART5_Init+0x90>)
 8007f10:	2200      	movs	r2, #0
 8007f12:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8007f14:	4b17      	ldr	r3, [pc, #92]	; (8007f74 <MX_UART5_Init+0x90>)
 8007f16:	2200      	movs	r2, #0
 8007f18:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007f1a:	4b16      	ldr	r3, [pc, #88]	; (8007f74 <MX_UART5_Init+0x90>)
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007f20:	4b14      	ldr	r3, [pc, #80]	; (8007f74 <MX_UART5_Init+0x90>)
 8007f22:	2200      	movs	r2, #0
 8007f24:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007f26:	4b13      	ldr	r3, [pc, #76]	; (8007f74 <MX_UART5_Init+0x90>)
 8007f28:	2200      	movs	r2, #0
 8007f2a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8007f2c:	4811      	ldr	r0, [pc, #68]	; (8007f74 <MX_UART5_Init+0x90>)
 8007f2e:	f006 ff63 	bl	800edf8 <HAL_UART_Init>
 8007f32:	4603      	mov	r3, r0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d001      	beq.n	8007f3c <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8007f38:	f7ff f960 	bl	80071fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007f3c:	2100      	movs	r1, #0
 8007f3e:	480d      	ldr	r0, [pc, #52]	; (8007f74 <MX_UART5_Init+0x90>)
 8007f40:	f008 ffe3 	bl	8010f0a <HAL_UARTEx_SetTxFifoThreshold>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d001      	beq.n	8007f4e <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8007f4a:	f7ff f957 	bl	80071fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007f4e:	2100      	movs	r1, #0
 8007f50:	4808      	ldr	r0, [pc, #32]	; (8007f74 <MX_UART5_Init+0x90>)
 8007f52:	f009 f818 	bl	8010f86 <HAL_UARTEx_SetRxFifoThreshold>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d001      	beq.n	8007f60 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8007f5c:	f7ff f94e 	bl	80071fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8007f60:	4804      	ldr	r0, [pc, #16]	; (8007f74 <MX_UART5_Init+0x90>)
 8007f62:	f008 ff99 	bl	8010e98 <HAL_UARTEx_DisableFifoMode>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d001      	beq.n	8007f70 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8007f6c:	f7ff f946 	bl	80071fc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8007f70:	bf00      	nop
 8007f72:	bd80      	pop	{r7, pc}
 8007f74:	20000b04 	.word	0x20000b04
 8007f78:	40005000 	.word	0x40005000

08007f7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b0a2      	sub	sp, #136	; 0x88
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f84:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007f88:	2200      	movs	r2, #0
 8007f8a:	601a      	str	r2, [r3, #0]
 8007f8c:	605a      	str	r2, [r3, #4]
 8007f8e:	609a      	str	r2, [r3, #8]
 8007f90:	60da      	str	r2, [r3, #12]
 8007f92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007f94:	f107 0320 	add.w	r3, r7, #32
 8007f98:	2254      	movs	r2, #84	; 0x54
 8007f9a:	2100      	movs	r1, #0
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f00f fdbb 	bl	8017b18 <memset>
  if(uartHandle->Instance==UART4)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a52      	ldr	r2, [pc, #328]	; (80080f0 <HAL_UART_MspInit+0x174>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d141      	bne.n	8008030 <HAL_UART_MspInit+0xb4>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8007fac:	2308      	movs	r3, #8
 8007fae:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007fb4:	f107 0320 	add.w	r3, r7, #32
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f005 fa51 	bl	800d460 <HAL_RCCEx_PeriphCLKConfig>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d001      	beq.n	8007fc8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8007fc4:	f7ff f91a 	bl	80071fc <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8007fc8:	4b4a      	ldr	r3, [pc, #296]	; (80080f4 <HAL_UART_MspInit+0x178>)
 8007fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fcc:	4a49      	ldr	r2, [pc, #292]	; (80080f4 <HAL_UART_MspInit+0x178>)
 8007fce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007fd2:	6593      	str	r3, [r2, #88]	; 0x58
 8007fd4:	4b47      	ldr	r3, [pc, #284]	; (80080f4 <HAL_UART_MspInit+0x178>)
 8007fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007fdc:	61fb      	str	r3, [r7, #28]
 8007fde:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007fe0:	4b44      	ldr	r3, [pc, #272]	; (80080f4 <HAL_UART_MspInit+0x178>)
 8007fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fe4:	4a43      	ldr	r2, [pc, #268]	; (80080f4 <HAL_UART_MspInit+0x178>)
 8007fe6:	f043 0304 	orr.w	r3, r3, #4
 8007fea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007fec:	4b41      	ldr	r3, [pc, #260]	; (80080f4 <HAL_UART_MspInit+0x178>)
 8007fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ff0:	f003 0304 	and.w	r3, r3, #4
 8007ff4:	61bb      	str	r3, [r7, #24]
 8007ff6:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007ff8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007ffc:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ffe:	2302      	movs	r3, #2
 8008000:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008002:	2300      	movs	r3, #0
 8008004:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008006:	2300      	movs	r3, #0
 8008008:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 800800c:	2305      	movs	r3, #5
 800800e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008012:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008016:	4619      	mov	r1, r3
 8008018:	4837      	ldr	r0, [pc, #220]	; (80080f8 <HAL_UART_MspInit+0x17c>)
 800801a:	f001 ff13 	bl	8009e44 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800801e:	2200      	movs	r2, #0
 8008020:	2105      	movs	r1, #5
 8008022:	2034      	movs	r0, #52	; 0x34
 8008024:	f001 fbb4 	bl	8009790 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8008028:	2034      	movs	r0, #52	; 0x34
 800802a:	f001 fbcb 	bl	80097c4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 800802e:	e05b      	b.n	80080e8 <HAL_UART_MspInit+0x16c>
  else if(uartHandle->Instance==UART5)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a31      	ldr	r2, [pc, #196]	; (80080fc <HAL_UART_MspInit+0x180>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d156      	bne.n	80080e8 <HAL_UART_MspInit+0x16c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800803a:	2310      	movs	r3, #16
 800803c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800803e:	2300      	movs	r3, #0
 8008040:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008042:	f107 0320 	add.w	r3, r7, #32
 8008046:	4618      	mov	r0, r3
 8008048:	f005 fa0a 	bl	800d460 <HAL_RCCEx_PeriphCLKConfig>
 800804c:	4603      	mov	r3, r0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d001      	beq.n	8008056 <HAL_UART_MspInit+0xda>
      Error_Handler();
 8008052:	f7ff f8d3 	bl	80071fc <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8008056:	4b27      	ldr	r3, [pc, #156]	; (80080f4 <HAL_UART_MspInit+0x178>)
 8008058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800805a:	4a26      	ldr	r2, [pc, #152]	; (80080f4 <HAL_UART_MspInit+0x178>)
 800805c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008060:	6593      	str	r3, [r2, #88]	; 0x58
 8008062:	4b24      	ldr	r3, [pc, #144]	; (80080f4 <HAL_UART_MspInit+0x178>)
 8008064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008066:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800806a:	617b      	str	r3, [r7, #20]
 800806c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800806e:	4b21      	ldr	r3, [pc, #132]	; (80080f4 <HAL_UART_MspInit+0x178>)
 8008070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008072:	4a20      	ldr	r2, [pc, #128]	; (80080f4 <HAL_UART_MspInit+0x178>)
 8008074:	f043 0304 	orr.w	r3, r3, #4
 8008078:	64d3      	str	r3, [r2, #76]	; 0x4c
 800807a:	4b1e      	ldr	r3, [pc, #120]	; (80080f4 <HAL_UART_MspInit+0x178>)
 800807c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800807e:	f003 0304 	and.w	r3, r3, #4
 8008082:	613b      	str	r3, [r7, #16]
 8008084:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008086:	4b1b      	ldr	r3, [pc, #108]	; (80080f4 <HAL_UART_MspInit+0x178>)
 8008088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800808a:	4a1a      	ldr	r2, [pc, #104]	; (80080f4 <HAL_UART_MspInit+0x178>)
 800808c:	f043 0308 	orr.w	r3, r3, #8
 8008090:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008092:	4b18      	ldr	r3, [pc, #96]	; (80080f4 <HAL_UART_MspInit+0x178>)
 8008094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008096:	f003 0308 	and.w	r3, r3, #8
 800809a:	60fb      	str	r3, [r7, #12]
 800809c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800809e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080a2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080a4:	2302      	movs	r3, #2
 80080a6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080a8:	2300      	movs	r3, #0
 80080aa:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080ac:	2300      	movs	r3, #0
 80080ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80080b2:	2305      	movs	r3, #5
 80080b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80080b8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80080bc:	4619      	mov	r1, r3
 80080be:	480e      	ldr	r0, [pc, #56]	; (80080f8 <HAL_UART_MspInit+0x17c>)
 80080c0:	f001 fec0 	bl	8009e44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80080c4:	2304      	movs	r3, #4
 80080c6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080c8:	2302      	movs	r3, #2
 80080ca:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080cc:	2300      	movs	r3, #0
 80080ce:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080d0:	2300      	movs	r3, #0
 80080d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80080d6:	2305      	movs	r3, #5
 80080d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80080dc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80080e0:	4619      	mov	r1, r3
 80080e2:	4807      	ldr	r0, [pc, #28]	; (8008100 <HAL_UART_MspInit+0x184>)
 80080e4:	f001 feae 	bl	8009e44 <HAL_GPIO_Init>
}
 80080e8:	bf00      	nop
 80080ea:	3788      	adds	r7, #136	; 0x88
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}
 80080f0:	40004c00 	.word	0x40004c00
 80080f4:	40021000 	.word	0x40021000
 80080f8:	48000800 	.word	0x48000800
 80080fc:	40005000 	.word	0x40005000
 8008100:	48000c00 	.word	0x48000c00

08008104 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008104:	480d      	ldr	r0, [pc, #52]	; (800813c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008106:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008108:	480d      	ldr	r0, [pc, #52]	; (8008140 <LoopForever+0x6>)
  ldr r1, =_edata
 800810a:	490e      	ldr	r1, [pc, #56]	; (8008144 <LoopForever+0xa>)
  ldr r2, =_sidata
 800810c:	4a0e      	ldr	r2, [pc, #56]	; (8008148 <LoopForever+0xe>)
  movs r3, #0
 800810e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8008110:	e002      	b.n	8008118 <LoopCopyDataInit>

08008112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008116:	3304      	adds	r3, #4

08008118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800811a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800811c:	d3f9      	bcc.n	8008112 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800811e:	4a0b      	ldr	r2, [pc, #44]	; (800814c <LoopForever+0x12>)
  ldr r4, =_ebss
 8008120:	4c0b      	ldr	r4, [pc, #44]	; (8008150 <LoopForever+0x16>)
  movs r3, #0
 8008122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008124:	e001      	b.n	800812a <LoopFillZerobss>

08008126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008128:	3204      	adds	r2, #4

0800812a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800812a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800812c:	d3fb      	bcc.n	8008126 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800812e:	f7ff fcad 	bl	8007a8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008132:	f00f fcbd 	bl	8017ab0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008136:	f7fe ffb9 	bl	80070ac <main>

0800813a <LoopForever>:

LoopForever:
    b LoopForever
 800813a:	e7fe      	b.n	800813a <LoopForever>
  ldr   r0, =_estack
 800813c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008144:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8008148:	08018d90 	.word	0x08018d90
  ldr r2, =_sbss
 800814c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8008150:	200056dc 	.word	0x200056dc

08008154 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008154:	e7fe      	b.n	8008154 <ADC1_2_IRQHandler>

08008156 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008156:	b580      	push	{r7, lr}
 8008158:	b082      	sub	sp, #8
 800815a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800815c:	2300      	movs	r3, #0
 800815e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008160:	2003      	movs	r0, #3
 8008162:	f001 fb0a 	bl	800977a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008166:	200f      	movs	r0, #15
 8008168:	f7ff fbc8 	bl	80078fc <HAL_InitTick>
 800816c:	4603      	mov	r3, r0
 800816e:	2b00      	cmp	r3, #0
 8008170:	d002      	beq.n	8008178 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	71fb      	strb	r3, [r7, #7]
 8008176:	e001      	b.n	800817c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008178:	f7ff fb98 	bl	80078ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800817c:	79fb      	ldrb	r3, [r7, #7]

}
 800817e:	4618      	mov	r0, r3
 8008180:	3708      	adds	r7, #8
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
	...

08008188 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008188:	b480      	push	{r7}
 800818a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800818c:	4b05      	ldr	r3, [pc, #20]	; (80081a4 <HAL_IncTick+0x1c>)
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	4b05      	ldr	r3, [pc, #20]	; (80081a8 <HAL_IncTick+0x20>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4413      	add	r3, r2
 8008196:	4a03      	ldr	r2, [pc, #12]	; (80081a4 <HAL_IncTick+0x1c>)
 8008198:	6013      	str	r3, [r2, #0]
}
 800819a:	bf00      	nop
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr
 80081a4:	20000b94 	.word	0x20000b94
 80081a8:	2000000c 	.word	0x2000000c

080081ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80081ac:	b480      	push	{r7}
 80081ae:	af00      	add	r7, sp, #0
  return uwTick;
 80081b0:	4b03      	ldr	r3, [pc, #12]	; (80081c0 <HAL_GetTick+0x14>)
 80081b2:	681b      	ldr	r3, [r3, #0]
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop
 80081c0:	20000b94 	.word	0x20000b94

080081c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80081cc:	f7ff ffee 	bl	80081ac <HAL_GetTick>
 80081d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081dc:	d004      	beq.n	80081e8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80081de:	4b09      	ldr	r3, [pc, #36]	; (8008204 <HAL_Delay+0x40>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	68fa      	ldr	r2, [r7, #12]
 80081e4:	4413      	add	r3, r2
 80081e6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80081e8:	bf00      	nop
 80081ea:	f7ff ffdf 	bl	80081ac <HAL_GetTick>
 80081ee:	4602      	mov	r2, r0
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	1ad3      	subs	r3, r2, r3
 80081f4:	68fa      	ldr	r2, [r7, #12]
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d8f7      	bhi.n	80081ea <HAL_Delay+0x26>
  {
  }
}
 80081fa:	bf00      	nop
 80081fc:	bf00      	nop
 80081fe:	3710      	adds	r7, #16
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}
 8008204:	2000000c 	.word	0x2000000c

08008208 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	431a      	orrs	r2, r3
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	609a      	str	r2, [r3, #8]
}
 8008222:	bf00      	nop
 8008224:	370c      	adds	r7, #12
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr

0800822e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800822e:	b480      	push	{r7}
 8008230:	b083      	sub	sp, #12
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
 8008236:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	431a      	orrs	r2, r3
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	609a      	str	r2, [r3, #8]
}
 8008248:	bf00      	nop
 800824a:	370c      	adds	r7, #12
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr

08008254 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008254:	b480      	push	{r7}
 8008256:	b083      	sub	sp, #12
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8008264:	4618      	mov	r0, r3
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8008270:	b480      	push	{r7}
 8008272:	b087      	sub	sp, #28
 8008274:	af00      	add	r7, sp, #0
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	60b9      	str	r1, [r7, #8]
 800827a:	607a      	str	r2, [r7, #4]
 800827c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	3360      	adds	r3, #96	; 0x60
 8008282:	461a      	mov	r2, r3
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	4413      	add	r3, r2
 800828a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	4b08      	ldr	r3, [pc, #32]	; (80082b4 <LL_ADC_SetOffset+0x44>)
 8008292:	4013      	ands	r3, r2
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800829a:	683a      	ldr	r2, [r7, #0]
 800829c:	430a      	orrs	r2, r1
 800829e:	4313      	orrs	r3, r2
 80082a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80082a8:	bf00      	nop
 80082aa:	371c      	adds	r7, #28
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr
 80082b4:	03fff000 	.word	0x03fff000

080082b8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b085      	sub	sp, #20
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	3360      	adds	r3, #96	; 0x60
 80082c6:	461a      	mov	r2, r3
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	4413      	add	r3, r2
 80082ce:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3714      	adds	r7, #20
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr

080082e4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b087      	sub	sp, #28
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	60b9      	str	r1, [r7, #8]
 80082ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	3360      	adds	r3, #96	; 0x60
 80082f4:	461a      	mov	r2, r3
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	4413      	add	r3, r2
 80082fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	431a      	orrs	r2, r3
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800830e:	bf00      	nop
 8008310:	371c      	adds	r7, #28
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr

0800831a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800831a:	b480      	push	{r7}
 800831c:	b087      	sub	sp, #28
 800831e:	af00      	add	r7, sp, #0
 8008320:	60f8      	str	r0, [r7, #12]
 8008322:	60b9      	str	r1, [r7, #8]
 8008324:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	3360      	adds	r3, #96	; 0x60
 800832a:	461a      	mov	r2, r3
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	4413      	add	r3, r2
 8008332:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	431a      	orrs	r2, r3
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8008344:	bf00      	nop
 8008346:	371c      	adds	r7, #28
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8008350:	b480      	push	{r7}
 8008352:	b087      	sub	sp, #28
 8008354:	af00      	add	r7, sp, #0
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	3360      	adds	r3, #96	; 0x60
 8008360:	461a      	mov	r2, r3
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	4413      	add	r3, r2
 8008368:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	431a      	orrs	r2, r3
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800837a:	bf00      	nop
 800837c:	371c      	adds	r7, #28
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr

08008386 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8008386:	b480      	push	{r7}
 8008388:	b083      	sub	sp, #12
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
 800838e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	695b      	ldr	r3, [r3, #20]
 8008394:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	431a      	orrs	r2, r3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	615a      	str	r2, [r3, #20]
}
 80083a0:	bf00      	nop
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr

080083ac <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b083      	sub	sp, #12
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	68db      	ldr	r3, [r3, #12]
 80083b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d101      	bne.n	80083c4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80083c0:	2301      	movs	r3, #1
 80083c2:	e000      	b.n	80083c6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	370c      	adds	r7, #12
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr

080083d2 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80083d2:	b480      	push	{r7}
 80083d4:	b087      	sub	sp, #28
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	60f8      	str	r0, [r7, #12]
 80083da:	60b9      	str	r1, [r7, #8]
 80083dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	3330      	adds	r3, #48	; 0x30
 80083e2:	461a      	mov	r2, r3
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	0a1b      	lsrs	r3, r3, #8
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	f003 030c 	and.w	r3, r3, #12
 80083ee:	4413      	add	r3, r2
 80083f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	f003 031f 	and.w	r3, r3, #31
 80083fc:	211f      	movs	r1, #31
 80083fe:	fa01 f303 	lsl.w	r3, r1, r3
 8008402:	43db      	mvns	r3, r3
 8008404:	401a      	ands	r2, r3
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	0e9b      	lsrs	r3, r3, #26
 800840a:	f003 011f 	and.w	r1, r3, #31
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	f003 031f 	and.w	r3, r3, #31
 8008414:	fa01 f303 	lsl.w	r3, r1, r3
 8008418:	431a      	orrs	r2, r3
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800841e:	bf00      	nop
 8008420:	371c      	adds	r7, #28
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr

0800842a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800842a:	b480      	push	{r7}
 800842c:	b087      	sub	sp, #28
 800842e:	af00      	add	r7, sp, #0
 8008430:	60f8      	str	r0, [r7, #12]
 8008432:	60b9      	str	r1, [r7, #8]
 8008434:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	3314      	adds	r3, #20
 800843a:	461a      	mov	r2, r3
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	0e5b      	lsrs	r3, r3, #25
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	f003 0304 	and.w	r3, r3, #4
 8008446:	4413      	add	r3, r2
 8008448:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	0d1b      	lsrs	r3, r3, #20
 8008452:	f003 031f 	and.w	r3, r3, #31
 8008456:	2107      	movs	r1, #7
 8008458:	fa01 f303 	lsl.w	r3, r1, r3
 800845c:	43db      	mvns	r3, r3
 800845e:	401a      	ands	r2, r3
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	0d1b      	lsrs	r3, r3, #20
 8008464:	f003 031f 	and.w	r3, r3, #31
 8008468:	6879      	ldr	r1, [r7, #4]
 800846a:	fa01 f303 	lsl.w	r3, r1, r3
 800846e:	431a      	orrs	r2, r3
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8008474:	bf00      	nop
 8008476:	371c      	adds	r7, #28
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8008480:	b480      	push	{r7}
 8008482:	b085      	sub	sp, #20
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	4a0f      	ldr	r2, [pc, #60]	; (80084cc <LL_ADC_SetChannelSingleDiff+0x4c>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d10a      	bne.n	80084aa <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084a0:	431a      	orrs	r2, r3
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80084a8:	e00a      	b.n	80084c0 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084b6:	43db      	mvns	r3, r3
 80084b8:	401a      	ands	r2, r3
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80084c0:	bf00      	nop
 80084c2:	3714      	adds	r7, #20
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr
 80084cc:	407f0000 	.word	0x407f0000

080084d0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	f003 031f 	and.w	r3, r3, #31
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	370c      	adds	r7, #12
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr

080084ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b083      	sub	sp, #12
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80084fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	6093      	str	r3, [r2, #8]
}
 8008504:	bf00      	nop
 8008506:	370c      	adds	r7, #12
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr

08008510 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8008510:	b480      	push	{r7}
 8008512:	b083      	sub	sp, #12
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008520:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008524:	d101      	bne.n	800852a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8008526:	2301      	movs	r3, #1
 8008528:	e000      	b.n	800852c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800852a:	2300      	movs	r3, #0
}
 800852c:	4618      	mov	r0, r3
 800852e:	370c      	adds	r7, #12
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8008548:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800854c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8008554:	bf00      	nop
 8008556:	370c      	adds	r7, #12
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008570:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008574:	d101      	bne.n	800857a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8008576:	2301      	movs	r3, #1
 8008578:	e000      	b.n	800857c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800857a:	2300      	movs	r3, #0
}
 800857c:	4618      	mov	r0, r3
 800857e:	370c      	adds	r7, #12
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr

08008588 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008598:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800859c:	f043 0201 	orr.w	r2, r3, #1
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80085a4:	bf00      	nop
 80085a6:	370c      	adds	r7, #12
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	f003 0301 	and.w	r3, r3, #1
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d101      	bne.n	80085c8 <LL_ADC_IsEnabled+0x18>
 80085c4:	2301      	movs	r3, #1
 80085c6:	e000      	b.n	80085ca <LL_ADC_IsEnabled+0x1a>
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	370c      	adds	r7, #12
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr

080085d6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80085d6:	b480      	push	{r7}
 80085d8:	b083      	sub	sp, #12
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80085e6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80085ea:	f043 0204 	orr.w	r2, r3, #4
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80085f2:	bf00      	nop
 80085f4:	370c      	adds	r7, #12
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr

080085fe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80085fe:	b480      	push	{r7}
 8008600:	b083      	sub	sp, #12
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	f003 0304 	and.w	r3, r3, #4
 800860e:	2b04      	cmp	r3, #4
 8008610:	d101      	bne.n	8008616 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008612:	2301      	movs	r3, #1
 8008614:	e000      	b.n	8008618 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008616:	2300      	movs	r3, #0
}
 8008618:	4618      	mov	r0, r3
 800861a:	370c      	adds	r7, #12
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8008624:	b480      	push	{r7}
 8008626:	b083      	sub	sp, #12
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	f003 0308 	and.w	r3, r3, #8
 8008634:	2b08      	cmp	r3, #8
 8008636:	d101      	bne.n	800863c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008638:	2301      	movs	r3, #1
 800863a:	e000      	b.n	800863e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800863c:	2300      	movs	r3, #0
}
 800863e:	4618      	mov	r0, r3
 8008640:	370c      	adds	r7, #12
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr
	...

0800864c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800864c:	b590      	push	{r4, r7, lr}
 800864e:	b089      	sub	sp, #36	; 0x24
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008654:	2300      	movs	r3, #0
 8008656:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8008658:	2300      	movs	r3, #0
 800865a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d101      	bne.n	8008666 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	e1af      	b.n	80089c6 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	695b      	ldr	r3, [r3, #20]
 800866a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008670:	2b00      	cmp	r3, #0
 8008672:	d109      	bne.n	8008688 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f7fc fcad 	bl	8004fd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2200      	movs	r2, #0
 800867e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2200      	movs	r2, #0
 8008684:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4618      	mov	r0, r3
 800868e:	f7ff ff3f 	bl	8008510 <LL_ADC_IsDeepPowerDownEnabled>
 8008692:	4603      	mov	r3, r0
 8008694:	2b00      	cmp	r3, #0
 8008696:	d004      	beq.n	80086a2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4618      	mov	r0, r3
 800869e:	f7ff ff25 	bl	80084ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4618      	mov	r0, r3
 80086a8:	f7ff ff5a 	bl	8008560 <LL_ADC_IsInternalRegulatorEnabled>
 80086ac:	4603      	mov	r3, r0
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d115      	bne.n	80086de <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7ff ff3e 	bl	8008538 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80086bc:	4b9f      	ldr	r3, [pc, #636]	; (800893c <HAL_ADC_Init+0x2f0>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	099b      	lsrs	r3, r3, #6
 80086c2:	4a9f      	ldr	r2, [pc, #636]	; (8008940 <HAL_ADC_Init+0x2f4>)
 80086c4:	fba2 2303 	umull	r2, r3, r2, r3
 80086c8:	099b      	lsrs	r3, r3, #6
 80086ca:	3301      	adds	r3, #1
 80086cc:	005b      	lsls	r3, r3, #1
 80086ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80086d0:	e002      	b.n	80086d8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	3b01      	subs	r3, #1
 80086d6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d1f9      	bne.n	80086d2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7ff ff3c 	bl	8008560 <LL_ADC_IsInternalRegulatorEnabled>
 80086e8:	4603      	mov	r3, r0
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d10d      	bne.n	800870a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086f2:	f043 0210 	orr.w	r2, r3, #16
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086fe:	f043 0201 	orr.w	r2, r3, #1
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8008706:	2301      	movs	r3, #1
 8008708:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4618      	mov	r0, r3
 8008710:	f7ff ff75 	bl	80085fe <LL_ADC_REG_IsConversionOngoing>
 8008714:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800871a:	f003 0310 	and.w	r3, r3, #16
 800871e:	2b00      	cmp	r3, #0
 8008720:	f040 8148 	bne.w	80089b4 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	2b00      	cmp	r3, #0
 8008728:	f040 8144 	bne.w	80089b4 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008730:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8008734:	f043 0202 	orr.w	r2, r3, #2
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4618      	mov	r0, r3
 8008742:	f7ff ff35 	bl	80085b0 <LL_ADC_IsEnabled>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d141      	bne.n	80087d0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008754:	d004      	beq.n	8008760 <HAL_ADC_Init+0x114>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a7a      	ldr	r2, [pc, #488]	; (8008944 <HAL_ADC_Init+0x2f8>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d10f      	bne.n	8008780 <HAL_ADC_Init+0x134>
 8008760:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008764:	f7ff ff24 	bl	80085b0 <LL_ADC_IsEnabled>
 8008768:	4604      	mov	r4, r0
 800876a:	4876      	ldr	r0, [pc, #472]	; (8008944 <HAL_ADC_Init+0x2f8>)
 800876c:	f7ff ff20 	bl	80085b0 <LL_ADC_IsEnabled>
 8008770:	4603      	mov	r3, r0
 8008772:	4323      	orrs	r3, r4
 8008774:	2b00      	cmp	r3, #0
 8008776:	bf0c      	ite	eq
 8008778:	2301      	moveq	r3, #1
 800877a:	2300      	movne	r3, #0
 800877c:	b2db      	uxtb	r3, r3
 800877e:	e012      	b.n	80087a6 <HAL_ADC_Init+0x15a>
 8008780:	4871      	ldr	r0, [pc, #452]	; (8008948 <HAL_ADC_Init+0x2fc>)
 8008782:	f7ff ff15 	bl	80085b0 <LL_ADC_IsEnabled>
 8008786:	4604      	mov	r4, r0
 8008788:	4870      	ldr	r0, [pc, #448]	; (800894c <HAL_ADC_Init+0x300>)
 800878a:	f7ff ff11 	bl	80085b0 <LL_ADC_IsEnabled>
 800878e:	4603      	mov	r3, r0
 8008790:	431c      	orrs	r4, r3
 8008792:	486f      	ldr	r0, [pc, #444]	; (8008950 <HAL_ADC_Init+0x304>)
 8008794:	f7ff ff0c 	bl	80085b0 <LL_ADC_IsEnabled>
 8008798:	4603      	mov	r3, r0
 800879a:	4323      	orrs	r3, r4
 800879c:	2b00      	cmp	r3, #0
 800879e:	bf0c      	ite	eq
 80087a0:	2301      	moveq	r3, #1
 80087a2:	2300      	movne	r3, #0
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d012      	beq.n	80087d0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087b2:	d004      	beq.n	80087be <HAL_ADC_Init+0x172>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a62      	ldr	r2, [pc, #392]	; (8008944 <HAL_ADC_Init+0x2f8>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d101      	bne.n	80087c2 <HAL_ADC_Init+0x176>
 80087be:	4a65      	ldr	r2, [pc, #404]	; (8008954 <HAL_ADC_Init+0x308>)
 80087c0:	e000      	b.n	80087c4 <HAL_ADC_Init+0x178>
 80087c2:	4a65      	ldr	r2, [pc, #404]	; (8008958 <HAL_ADC_Init+0x30c>)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	4619      	mov	r1, r3
 80087ca:	4610      	mov	r0, r2
 80087cc:	f7ff fd1c 	bl	8008208 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	7f5b      	ldrb	r3, [r3, #29]
 80087d4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80087da:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80087e0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80087e6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80087ee:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80087f0:	4313      	orrs	r3, r2
 80087f2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d106      	bne.n	800880c <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008802:	3b01      	subs	r3, #1
 8008804:	045b      	lsls	r3, r3, #17
 8008806:	69ba      	ldr	r2, [r7, #24]
 8008808:	4313      	orrs	r3, r2
 800880a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008810:	2b00      	cmp	r3, #0
 8008812:	d009      	beq.n	8008828 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008818:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008820:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008822:	69ba      	ldr	r2, [r7, #24]
 8008824:	4313      	orrs	r3, r2
 8008826:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	68da      	ldr	r2, [r3, #12]
 800882e:	4b4b      	ldr	r3, [pc, #300]	; (800895c <HAL_ADC_Init+0x310>)
 8008830:	4013      	ands	r3, r2
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	6812      	ldr	r2, [r2, #0]
 8008836:	69b9      	ldr	r1, [r7, #24]
 8008838:	430b      	orrs	r3, r1
 800883a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	430a      	orrs	r2, r1
 8008850:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4618      	mov	r0, r3
 8008858:	f7ff fed1 	bl	80085fe <LL_ADC_REG_IsConversionOngoing>
 800885c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4618      	mov	r0, r3
 8008864:	f7ff fede 	bl	8008624 <LL_ADC_INJ_IsConversionOngoing>
 8008868:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d17f      	bne.n	8008970 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d17c      	bne.n	8008970 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800887a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008882:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008884:	4313      	orrs	r3, r2
 8008886:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	68db      	ldr	r3, [r3, #12]
 800888e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008892:	f023 0302 	bic.w	r3, r3, #2
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	6812      	ldr	r2, [r2, #0]
 800889a:	69b9      	ldr	r1, [r7, #24]
 800889c:	430b      	orrs	r3, r1
 800889e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	691b      	ldr	r3, [r3, #16]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d017      	beq.n	80088d8 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	691a      	ldr	r2, [r3, #16]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80088b6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80088c0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80088c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	6911      	ldr	r1, [r2, #16]
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	6812      	ldr	r2, [r2, #0]
 80088d0:	430b      	orrs	r3, r1
 80088d2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80088d6:	e013      	b.n	8008900 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	691a      	ldr	r2, [r3, #16]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80088e6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	6812      	ldr	r2, [r2, #0]
 80088f4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80088f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80088fc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008906:	2b01      	cmp	r3, #1
 8008908:	d12a      	bne.n	8008960 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	691b      	ldr	r3, [r3, #16]
 8008910:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008914:	f023 0304 	bic.w	r3, r3, #4
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800891c:	687a      	ldr	r2, [r7, #4]
 800891e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008920:	4311      	orrs	r1, r2
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008926:	4311      	orrs	r1, r2
 8008928:	687a      	ldr	r2, [r7, #4]
 800892a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800892c:	430a      	orrs	r2, r1
 800892e:	431a      	orrs	r2, r3
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f042 0201 	orr.w	r2, r2, #1
 8008938:	611a      	str	r2, [r3, #16]
 800893a:	e019      	b.n	8008970 <HAL_ADC_Init+0x324>
 800893c:	20000004 	.word	0x20000004
 8008940:	053e2d63 	.word	0x053e2d63
 8008944:	50000100 	.word	0x50000100
 8008948:	50000400 	.word	0x50000400
 800894c:	50000500 	.word	0x50000500
 8008950:	50000600 	.word	0x50000600
 8008954:	50000300 	.word	0x50000300
 8008958:	50000700 	.word	0x50000700
 800895c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	691a      	ldr	r2, [r3, #16]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f022 0201 	bic.w	r2, r2, #1
 800896e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	695b      	ldr	r3, [r3, #20]
 8008974:	2b01      	cmp	r3, #1
 8008976:	d10c      	bne.n	8008992 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800897e:	f023 010f 	bic.w	r1, r3, #15
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6a1b      	ldr	r3, [r3, #32]
 8008986:	1e5a      	subs	r2, r3, #1
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	430a      	orrs	r2, r1
 800898e:	631a      	str	r2, [r3, #48]	; 0x30
 8008990:	e007      	b.n	80089a2 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f022 020f 	bic.w	r2, r2, #15
 80089a0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089a6:	f023 0303 	bic.w	r3, r3, #3
 80089aa:	f043 0201 	orr.w	r2, r3, #1
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	65da      	str	r2, [r3, #92]	; 0x5c
 80089b2:	e007      	b.n	80089c4 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089b8:	f043 0210 	orr.w	r2, r3, #16
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80089c0:	2301      	movs	r3, #1
 80089c2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80089c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3724      	adds	r7, #36	; 0x24
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd90      	pop	{r4, r7, pc}
 80089ce:	bf00      	nop

080089d0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b086      	sub	sp, #24
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	60f8      	str	r0, [r7, #12]
 80089d8:	60b9      	str	r1, [r7, #8]
 80089da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80089e4:	d004      	beq.n	80089f0 <HAL_ADC_Start_DMA+0x20>
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a5a      	ldr	r2, [pc, #360]	; (8008b54 <HAL_ADC_Start_DMA+0x184>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d101      	bne.n	80089f4 <HAL_ADC_Start_DMA+0x24>
 80089f0:	4b59      	ldr	r3, [pc, #356]	; (8008b58 <HAL_ADC_Start_DMA+0x188>)
 80089f2:	e000      	b.n	80089f6 <HAL_ADC_Start_DMA+0x26>
 80089f4:	4b59      	ldr	r3, [pc, #356]	; (8008b5c <HAL_ADC_Start_DMA+0x18c>)
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7ff fd6a 	bl	80084d0 <LL_ADC_GetMultimode>
 80089fc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7ff fdfb 	bl	80085fe <LL_ADC_REG_IsConversionOngoing>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	f040 809b 	bne.w	8008b46 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d101      	bne.n	8008a1e <HAL_ADC_Start_DMA+0x4e>
 8008a1a:	2302      	movs	r3, #2
 8008a1c:	e096      	b.n	8008b4c <HAL_ADC_Start_DMA+0x17c>
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2201      	movs	r2, #1
 8008a22:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a4d      	ldr	r2, [pc, #308]	; (8008b60 <HAL_ADC_Start_DMA+0x190>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d008      	beq.n	8008a42 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d005      	beq.n	8008a42 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	2b05      	cmp	r3, #5
 8008a3a:	d002      	beq.n	8008a42 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	2b09      	cmp	r3, #9
 8008a40:	d17a      	bne.n	8008b38 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8008a42:	68f8      	ldr	r0, [r7, #12]
 8008a44:	f000 fcf6 	bl	8009434 <ADC_Enable>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8008a4c:	7dfb      	ldrb	r3, [r7, #23]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d16d      	bne.n	8008b2e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a56:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008a5a:	f023 0301 	bic.w	r3, r3, #1
 8008a5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a3a      	ldr	r2, [pc, #232]	; (8008b54 <HAL_ADC_Start_DMA+0x184>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d009      	beq.n	8008a84 <HAL_ADC_Start_DMA+0xb4>
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a3b      	ldr	r2, [pc, #236]	; (8008b64 <HAL_ADC_Start_DMA+0x194>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d002      	beq.n	8008a80 <HAL_ADC_Start_DMA+0xb0>
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	e003      	b.n	8008a88 <HAL_ADC_Start_DMA+0xb8>
 8008a80:	4b39      	ldr	r3, [pc, #228]	; (8008b68 <HAL_ADC_Start_DMA+0x198>)
 8008a82:	e001      	b.n	8008a88 <HAL_ADC_Start_DMA+0xb8>
 8008a84:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8008a88:	68fa      	ldr	r2, [r7, #12]
 8008a8a:	6812      	ldr	r2, [r2, #0]
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d002      	beq.n	8008a96 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d105      	bne.n	8008aa2 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a9a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008aa6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d006      	beq.n	8008abc <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ab2:	f023 0206 	bic.w	r2, r3, #6
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	661a      	str	r2, [r3, #96]	; 0x60
 8008aba:	e002      	b.n	8008ac2 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ac6:	4a29      	ldr	r2, [pc, #164]	; (8008b6c <HAL_ADC_Start_DMA+0x19c>)
 8008ac8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ace:	4a28      	ldr	r2, [pc, #160]	; (8008b70 <HAL_ADC_Start_DMA+0x1a0>)
 8008ad0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ad6:	4a27      	ldr	r2, [pc, #156]	; (8008b74 <HAL_ADC_Start_DMA+0x1a4>)
 8008ad8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	221c      	movs	r2, #28
 8008ae0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	685a      	ldr	r2, [r3, #4]
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f042 0210 	orr.w	r2, r2, #16
 8008af8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	68da      	ldr	r2, [r3, #12]
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f042 0201 	orr.w	r2, r2, #1
 8008b08:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	3340      	adds	r3, #64	; 0x40
 8008b14:	4619      	mov	r1, r3
 8008b16:	68ba      	ldr	r2, [r7, #8]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f000 ff09 	bl	8009930 <HAL_DMA_Start_IT>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7ff fd55 	bl	80085d6 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8008b2c:	e00d      	b.n	8008b4a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2200      	movs	r2, #0
 8008b32:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8008b36:	e008      	b.n	8008b4a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8008b44:	e001      	b.n	8008b4a <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8008b46:	2302      	movs	r3, #2
 8008b48:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8008b4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3718      	adds	r7, #24
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}
 8008b54:	50000100 	.word	0x50000100
 8008b58:	50000300 	.word	0x50000300
 8008b5c:	50000700 	.word	0x50000700
 8008b60:	50000600 	.word	0x50000600
 8008b64:	50000500 	.word	0x50000500
 8008b68:	50000400 	.word	0x50000400
 8008b6c:	080094f9 	.word	0x080094f9
 8008b70:	080095d1 	.word	0x080095d1
 8008b74:	080095ed 	.word	0x080095ed

08008b78 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b083      	sub	sp, #12
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8008b80:	bf00      	nop
 8008b82:	370c      	adds	r7, #12
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b083      	sub	sp, #12
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8008b94:	bf00      	nop
 8008b96:	370c      	adds	r7, #12
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr

08008ba0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8008ba8:	bf00      	nop
 8008baa:	370c      	adds	r7, #12
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b0b6      	sub	sp, #216	; 0xd8
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d102      	bne.n	8008bd8 <HAL_ADC_ConfigChannel+0x24>
 8008bd2:	2302      	movs	r3, #2
 8008bd4:	f000 bc13 	b.w	80093fe <HAL_ADC_ConfigChannel+0x84a>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4618      	mov	r0, r3
 8008be6:	f7ff fd0a 	bl	80085fe <LL_ADC_REG_IsConversionOngoing>
 8008bea:	4603      	mov	r3, r0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	f040 83f3 	bne.w	80093d8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6818      	ldr	r0, [r3, #0]
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	6859      	ldr	r1, [r3, #4]
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	461a      	mov	r2, r3
 8008c00:	f7ff fbe7 	bl	80083d2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f7ff fcf8 	bl	80085fe <LL_ADC_REG_IsConversionOngoing>
 8008c0e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4618      	mov	r0, r3
 8008c18:	f7ff fd04 	bl	8008624 <LL_ADC_INJ_IsConversionOngoing>
 8008c1c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008c20:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	f040 81d9 	bne.w	8008fdc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008c2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	f040 81d4 	bne.w	8008fdc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	689b      	ldr	r3, [r3, #8]
 8008c38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c3c:	d10f      	bne.n	8008c5e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6818      	ldr	r0, [r3, #0]
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	2200      	movs	r2, #0
 8008c48:	4619      	mov	r1, r3
 8008c4a:	f7ff fbee 	bl	800842a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008c56:	4618      	mov	r0, r3
 8008c58:	f7ff fb95 	bl	8008386 <LL_ADC_SetSamplingTimeCommonConfig>
 8008c5c:	e00e      	b.n	8008c7c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6818      	ldr	r0, [r3, #0]
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	6819      	ldr	r1, [r3, #0]
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	689b      	ldr	r3, [r3, #8]
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	f7ff fbdd 	bl	800842a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	2100      	movs	r1, #0
 8008c76:	4618      	mov	r0, r3
 8008c78:	f7ff fb85 	bl	8008386 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	695a      	ldr	r2, [r3, #20]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	68db      	ldr	r3, [r3, #12]
 8008c86:	08db      	lsrs	r3, r3, #3
 8008c88:	f003 0303 	and.w	r3, r3, #3
 8008c8c:	005b      	lsls	r3, r3, #1
 8008c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	691b      	ldr	r3, [r3, #16]
 8008c9a:	2b04      	cmp	r3, #4
 8008c9c:	d022      	beq.n	8008ce4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6818      	ldr	r0, [r3, #0]
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	6919      	ldr	r1, [r3, #16]
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008cae:	f7ff fadf 	bl	8008270 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6818      	ldr	r0, [r3, #0]
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	6919      	ldr	r1, [r3, #16]
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	699b      	ldr	r3, [r3, #24]
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	f7ff fb2b 	bl	800831a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6818      	ldr	r0, [r3, #0]
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	6919      	ldr	r1, [r3, #16]
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	7f1b      	ldrb	r3, [r3, #28]
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d102      	bne.n	8008cda <HAL_ADC_ConfigChannel+0x126>
 8008cd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008cd8:	e000      	b.n	8008cdc <HAL_ADC_ConfigChannel+0x128>
 8008cda:	2300      	movs	r3, #0
 8008cdc:	461a      	mov	r2, r3
 8008cde:	f7ff fb37 	bl	8008350 <LL_ADC_SetOffsetSaturation>
 8008ce2:	e17b      	b.n	8008fdc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	2100      	movs	r1, #0
 8008cea:	4618      	mov	r0, r3
 8008cec:	f7ff fae4 	bl	80082b8 <LL_ADC_GetOffsetChannel>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d10a      	bne.n	8008d10 <HAL_ADC_ConfigChannel+0x15c>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	2100      	movs	r1, #0
 8008d00:	4618      	mov	r0, r3
 8008d02:	f7ff fad9 	bl	80082b8 <LL_ADC_GetOffsetChannel>
 8008d06:	4603      	mov	r3, r0
 8008d08:	0e9b      	lsrs	r3, r3, #26
 8008d0a:	f003 021f 	and.w	r2, r3, #31
 8008d0e:	e01e      	b.n	8008d4e <HAL_ADC_ConfigChannel+0x19a>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	2100      	movs	r1, #0
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7ff face 	bl	80082b8 <LL_ADC_GetOffsetChannel>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008d26:	fa93 f3a3 	rbit	r3, r3
 8008d2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8008d2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008d32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8008d36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d101      	bne.n	8008d42 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8008d3e:	2320      	movs	r3, #32
 8008d40:	e004      	b.n	8008d4c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8008d42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008d46:	fab3 f383 	clz	r3, r3
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d105      	bne.n	8008d66 <HAL_ADC_ConfigChannel+0x1b2>
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	0e9b      	lsrs	r3, r3, #26
 8008d60:	f003 031f 	and.w	r3, r3, #31
 8008d64:	e018      	b.n	8008d98 <HAL_ADC_ConfigChannel+0x1e4>
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008d72:	fa93 f3a3 	rbit	r3, r3
 8008d76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8008d7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8008d82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d101      	bne.n	8008d8e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8008d8a:	2320      	movs	r3, #32
 8008d8c:	e004      	b.n	8008d98 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8008d8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008d92:	fab3 f383 	clz	r3, r3
 8008d96:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d106      	bne.n	8008daa <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	2200      	movs	r2, #0
 8008da2:	2100      	movs	r1, #0
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7ff fa9d 	bl	80082e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2101      	movs	r1, #1
 8008db0:	4618      	mov	r0, r3
 8008db2:	f7ff fa81 	bl	80082b8 <LL_ADC_GetOffsetChannel>
 8008db6:	4603      	mov	r3, r0
 8008db8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d10a      	bne.n	8008dd6 <HAL_ADC_ConfigChannel+0x222>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	2101      	movs	r1, #1
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f7ff fa76 	bl	80082b8 <LL_ADC_GetOffsetChannel>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	0e9b      	lsrs	r3, r3, #26
 8008dd0:	f003 021f 	and.w	r2, r3, #31
 8008dd4:	e01e      	b.n	8008e14 <HAL_ADC_ConfigChannel+0x260>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	2101      	movs	r1, #1
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f7ff fa6b 	bl	80082b8 <LL_ADC_GetOffsetChannel>
 8008de2:	4603      	mov	r3, r0
 8008de4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008de8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008dec:	fa93 f3a3 	rbit	r3, r3
 8008df0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8008df4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008df8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8008dfc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d101      	bne.n	8008e08 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8008e04:	2320      	movs	r3, #32
 8008e06:	e004      	b.n	8008e12 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8008e08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008e0c:	fab3 f383 	clz	r3, r3
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d105      	bne.n	8008e2c <HAL_ADC_ConfigChannel+0x278>
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	0e9b      	lsrs	r3, r3, #26
 8008e26:	f003 031f 	and.w	r3, r3, #31
 8008e2a:	e018      	b.n	8008e5e <HAL_ADC_ConfigChannel+0x2aa>
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008e38:	fa93 f3a3 	rbit	r3, r3
 8008e3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8008e40:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008e44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8008e48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d101      	bne.n	8008e54 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8008e50:	2320      	movs	r3, #32
 8008e52:	e004      	b.n	8008e5e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8008e54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008e58:	fab3 f383 	clz	r3, r3
 8008e5c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d106      	bne.n	8008e70 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	2200      	movs	r2, #0
 8008e68:	2101      	movs	r1, #1
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f7ff fa3a 	bl	80082e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	2102      	movs	r1, #2
 8008e76:	4618      	mov	r0, r3
 8008e78:	f7ff fa1e 	bl	80082b8 <LL_ADC_GetOffsetChannel>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d10a      	bne.n	8008e9c <HAL_ADC_ConfigChannel+0x2e8>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	2102      	movs	r1, #2
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f7ff fa13 	bl	80082b8 <LL_ADC_GetOffsetChannel>
 8008e92:	4603      	mov	r3, r0
 8008e94:	0e9b      	lsrs	r3, r3, #26
 8008e96:	f003 021f 	and.w	r2, r3, #31
 8008e9a:	e01e      	b.n	8008eda <HAL_ADC_ConfigChannel+0x326>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2102      	movs	r1, #2
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f7ff fa08 	bl	80082b8 <LL_ADC_GetOffsetChannel>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008eae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008eb2:	fa93 f3a3 	rbit	r3, r3
 8008eb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8008eba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008ebe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8008ec2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d101      	bne.n	8008ece <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8008eca:	2320      	movs	r3, #32
 8008ecc:	e004      	b.n	8008ed8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8008ece:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008ed2:	fab3 f383 	clz	r3, r3
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d105      	bne.n	8008ef2 <HAL_ADC_ConfigChannel+0x33e>
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	0e9b      	lsrs	r3, r3, #26
 8008eec:	f003 031f 	and.w	r3, r3, #31
 8008ef0:	e016      	b.n	8008f20 <HAL_ADC_ConfigChannel+0x36c>
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008efa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008efe:	fa93 f3a3 	rbit	r3, r3
 8008f02:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8008f04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008f06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8008f0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d101      	bne.n	8008f16 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8008f12:	2320      	movs	r3, #32
 8008f14:	e004      	b.n	8008f20 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8008f16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f1a:	fab3 f383 	clz	r3, r3
 8008f1e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d106      	bne.n	8008f32 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	2102      	movs	r1, #2
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f7ff f9d9 	bl	80082e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	2103      	movs	r1, #3
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f7ff f9bd 	bl	80082b8 <LL_ADC_GetOffsetChannel>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d10a      	bne.n	8008f5e <HAL_ADC_ConfigChannel+0x3aa>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	2103      	movs	r1, #3
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f7ff f9b2 	bl	80082b8 <LL_ADC_GetOffsetChannel>
 8008f54:	4603      	mov	r3, r0
 8008f56:	0e9b      	lsrs	r3, r3, #26
 8008f58:	f003 021f 	and.w	r2, r3, #31
 8008f5c:	e017      	b.n	8008f8e <HAL_ADC_ConfigChannel+0x3da>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	2103      	movs	r1, #3
 8008f64:	4618      	mov	r0, r3
 8008f66:	f7ff f9a7 	bl	80082b8 <LL_ADC_GetOffsetChannel>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f70:	fa93 f3a3 	rbit	r3, r3
 8008f74:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8008f76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f78:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8008f7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d101      	bne.n	8008f84 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8008f80:	2320      	movs	r3, #32
 8008f82:	e003      	b.n	8008f8c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8008f84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f86:	fab3 f383 	clz	r3, r3
 8008f8a:	b2db      	uxtb	r3, r3
 8008f8c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d105      	bne.n	8008fa6 <HAL_ADC_ConfigChannel+0x3f2>
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	0e9b      	lsrs	r3, r3, #26
 8008fa0:	f003 031f 	and.w	r3, r3, #31
 8008fa4:	e011      	b.n	8008fca <HAL_ADC_ConfigChannel+0x416>
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008fae:	fa93 f3a3 	rbit	r3, r3
 8008fb2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8008fb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008fb6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8008fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d101      	bne.n	8008fc2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8008fbe:	2320      	movs	r3, #32
 8008fc0:	e003      	b.n	8008fca <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8008fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fc4:	fab3 f383 	clz	r3, r3
 8008fc8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d106      	bne.n	8008fdc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	2103      	movs	r1, #3
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7ff f984 	bl	80082e4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f7ff fae5 	bl	80085b0 <LL_ADC_IsEnabled>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	f040 813d 	bne.w	8009268 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6818      	ldr	r0, [r3, #0]
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	6819      	ldr	r1, [r3, #0]
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	f7ff fa40 	bl	8008480 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	4aa2      	ldr	r2, [pc, #648]	; (8009290 <HAL_ADC_ConfigChannel+0x6dc>)
 8009006:	4293      	cmp	r3, r2
 8009008:	f040 812e 	bne.w	8009268 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009018:	2b00      	cmp	r3, #0
 800901a:	d10b      	bne.n	8009034 <HAL_ADC_ConfigChannel+0x480>
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	0e9b      	lsrs	r3, r3, #26
 8009022:	3301      	adds	r3, #1
 8009024:	f003 031f 	and.w	r3, r3, #31
 8009028:	2b09      	cmp	r3, #9
 800902a:	bf94      	ite	ls
 800902c:	2301      	movls	r3, #1
 800902e:	2300      	movhi	r3, #0
 8009030:	b2db      	uxtb	r3, r3
 8009032:	e019      	b.n	8009068 <HAL_ADC_ConfigChannel+0x4b4>
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800903a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800903c:	fa93 f3a3 	rbit	r3, r3
 8009040:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8009042:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009044:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8009046:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009048:	2b00      	cmp	r3, #0
 800904a:	d101      	bne.n	8009050 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800904c:	2320      	movs	r3, #32
 800904e:	e003      	b.n	8009058 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8009050:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009052:	fab3 f383 	clz	r3, r3
 8009056:	b2db      	uxtb	r3, r3
 8009058:	3301      	adds	r3, #1
 800905a:	f003 031f 	and.w	r3, r3, #31
 800905e:	2b09      	cmp	r3, #9
 8009060:	bf94      	ite	ls
 8009062:	2301      	movls	r3, #1
 8009064:	2300      	movhi	r3, #0
 8009066:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009068:	2b00      	cmp	r3, #0
 800906a:	d079      	beq.n	8009160 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009074:	2b00      	cmp	r3, #0
 8009076:	d107      	bne.n	8009088 <HAL_ADC_ConfigChannel+0x4d4>
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	0e9b      	lsrs	r3, r3, #26
 800907e:	3301      	adds	r3, #1
 8009080:	069b      	lsls	r3, r3, #26
 8009082:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009086:	e015      	b.n	80090b4 <HAL_ADC_ConfigChannel+0x500>
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800908e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009090:	fa93 f3a3 	rbit	r3, r3
 8009094:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8009096:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009098:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800909a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800909c:	2b00      	cmp	r3, #0
 800909e:	d101      	bne.n	80090a4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80090a0:	2320      	movs	r3, #32
 80090a2:	e003      	b.n	80090ac <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80090a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090a6:	fab3 f383 	clz	r3, r3
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	3301      	adds	r3, #1
 80090ae:	069b      	lsls	r3, r3, #26
 80090b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d109      	bne.n	80090d4 <HAL_ADC_ConfigChannel+0x520>
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	0e9b      	lsrs	r3, r3, #26
 80090c6:	3301      	adds	r3, #1
 80090c8:	f003 031f 	and.w	r3, r3, #31
 80090cc:	2101      	movs	r1, #1
 80090ce:	fa01 f303 	lsl.w	r3, r1, r3
 80090d2:	e017      	b.n	8009104 <HAL_ADC_ConfigChannel+0x550>
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090dc:	fa93 f3a3 	rbit	r3, r3
 80090e0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80090e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090e4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80090e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d101      	bne.n	80090f0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80090ec:	2320      	movs	r3, #32
 80090ee:	e003      	b.n	80090f8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80090f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090f2:	fab3 f383 	clz	r3, r3
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	3301      	adds	r3, #1
 80090fa:	f003 031f 	and.w	r3, r3, #31
 80090fe:	2101      	movs	r1, #1
 8009100:	fa01 f303 	lsl.w	r3, r1, r3
 8009104:	ea42 0103 	orr.w	r1, r2, r3
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009110:	2b00      	cmp	r3, #0
 8009112:	d10a      	bne.n	800912a <HAL_ADC_ConfigChannel+0x576>
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	0e9b      	lsrs	r3, r3, #26
 800911a:	3301      	adds	r3, #1
 800911c:	f003 021f 	and.w	r2, r3, #31
 8009120:	4613      	mov	r3, r2
 8009122:	005b      	lsls	r3, r3, #1
 8009124:	4413      	add	r3, r2
 8009126:	051b      	lsls	r3, r3, #20
 8009128:	e018      	b.n	800915c <HAL_ADC_ConfigChannel+0x5a8>
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009132:	fa93 f3a3 	rbit	r3, r3
 8009136:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8009138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800913a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800913c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800913e:	2b00      	cmp	r3, #0
 8009140:	d101      	bne.n	8009146 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8009142:	2320      	movs	r3, #32
 8009144:	e003      	b.n	800914e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8009146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009148:	fab3 f383 	clz	r3, r3
 800914c:	b2db      	uxtb	r3, r3
 800914e:	3301      	adds	r3, #1
 8009150:	f003 021f 	and.w	r2, r3, #31
 8009154:	4613      	mov	r3, r2
 8009156:	005b      	lsls	r3, r3, #1
 8009158:	4413      	add	r3, r2
 800915a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800915c:	430b      	orrs	r3, r1
 800915e:	e07e      	b.n	800925e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009168:	2b00      	cmp	r3, #0
 800916a:	d107      	bne.n	800917c <HAL_ADC_ConfigChannel+0x5c8>
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	0e9b      	lsrs	r3, r3, #26
 8009172:	3301      	adds	r3, #1
 8009174:	069b      	lsls	r3, r3, #26
 8009176:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800917a:	e015      	b.n	80091a8 <HAL_ADC_ConfigChannel+0x5f4>
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009184:	fa93 f3a3 	rbit	r3, r3
 8009188:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800918a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800918c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800918e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009190:	2b00      	cmp	r3, #0
 8009192:	d101      	bne.n	8009198 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8009194:	2320      	movs	r3, #32
 8009196:	e003      	b.n	80091a0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8009198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800919a:	fab3 f383 	clz	r3, r3
 800919e:	b2db      	uxtb	r3, r3
 80091a0:	3301      	adds	r3, #1
 80091a2:	069b      	lsls	r3, r3, #26
 80091a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d109      	bne.n	80091c8 <HAL_ADC_ConfigChannel+0x614>
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	0e9b      	lsrs	r3, r3, #26
 80091ba:	3301      	adds	r3, #1
 80091bc:	f003 031f 	and.w	r3, r3, #31
 80091c0:	2101      	movs	r1, #1
 80091c2:	fa01 f303 	lsl.w	r3, r1, r3
 80091c6:	e017      	b.n	80091f8 <HAL_ADC_ConfigChannel+0x644>
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091ce:	6a3b      	ldr	r3, [r7, #32]
 80091d0:	fa93 f3a3 	rbit	r3, r3
 80091d4:	61fb      	str	r3, [r7, #28]
  return result;
 80091d6:	69fb      	ldr	r3, [r7, #28]
 80091d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80091da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d101      	bne.n	80091e4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80091e0:	2320      	movs	r3, #32
 80091e2:	e003      	b.n	80091ec <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80091e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e6:	fab3 f383 	clz	r3, r3
 80091ea:	b2db      	uxtb	r3, r3
 80091ec:	3301      	adds	r3, #1
 80091ee:	f003 031f 	and.w	r3, r3, #31
 80091f2:	2101      	movs	r1, #1
 80091f4:	fa01 f303 	lsl.w	r3, r1, r3
 80091f8:	ea42 0103 	orr.w	r1, r2, r3
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009204:	2b00      	cmp	r3, #0
 8009206:	d10d      	bne.n	8009224 <HAL_ADC_ConfigChannel+0x670>
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	0e9b      	lsrs	r3, r3, #26
 800920e:	3301      	adds	r3, #1
 8009210:	f003 021f 	and.w	r2, r3, #31
 8009214:	4613      	mov	r3, r2
 8009216:	005b      	lsls	r3, r3, #1
 8009218:	4413      	add	r3, r2
 800921a:	3b1e      	subs	r3, #30
 800921c:	051b      	lsls	r3, r3, #20
 800921e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009222:	e01b      	b.n	800925c <HAL_ADC_ConfigChannel+0x6a8>
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	fa93 f3a3 	rbit	r3, r3
 8009230:	613b      	str	r3, [r7, #16]
  return result;
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009236:	69bb      	ldr	r3, [r7, #24]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d101      	bne.n	8009240 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800923c:	2320      	movs	r3, #32
 800923e:	e003      	b.n	8009248 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8009240:	69bb      	ldr	r3, [r7, #24]
 8009242:	fab3 f383 	clz	r3, r3
 8009246:	b2db      	uxtb	r3, r3
 8009248:	3301      	adds	r3, #1
 800924a:	f003 021f 	and.w	r2, r3, #31
 800924e:	4613      	mov	r3, r2
 8009250:	005b      	lsls	r3, r3, #1
 8009252:	4413      	add	r3, r2
 8009254:	3b1e      	subs	r3, #30
 8009256:	051b      	lsls	r3, r3, #20
 8009258:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800925c:	430b      	orrs	r3, r1
 800925e:	683a      	ldr	r2, [r7, #0]
 8009260:	6892      	ldr	r2, [r2, #8]
 8009262:	4619      	mov	r1, r3
 8009264:	f7ff f8e1 	bl	800842a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	4b09      	ldr	r3, [pc, #36]	; (8009294 <HAL_ADC_ConfigChannel+0x6e0>)
 800926e:	4013      	ands	r3, r2
 8009270:	2b00      	cmp	r3, #0
 8009272:	f000 80be 	beq.w	80093f2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800927e:	d004      	beq.n	800928a <HAL_ADC_ConfigChannel+0x6d6>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a04      	ldr	r2, [pc, #16]	; (8009298 <HAL_ADC_ConfigChannel+0x6e4>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d10a      	bne.n	80092a0 <HAL_ADC_ConfigChannel+0x6ec>
 800928a:	4b04      	ldr	r3, [pc, #16]	; (800929c <HAL_ADC_ConfigChannel+0x6e8>)
 800928c:	e009      	b.n	80092a2 <HAL_ADC_ConfigChannel+0x6ee>
 800928e:	bf00      	nop
 8009290:	407f0000 	.word	0x407f0000
 8009294:	80080000 	.word	0x80080000
 8009298:	50000100 	.word	0x50000100
 800929c:	50000300 	.word	0x50000300
 80092a0:	4b59      	ldr	r3, [pc, #356]	; (8009408 <HAL_ADC_ConfigChannel+0x854>)
 80092a2:	4618      	mov	r0, r3
 80092a4:	f7fe ffd6 	bl	8008254 <LL_ADC_GetCommonPathInternalCh>
 80092a8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a56      	ldr	r2, [pc, #344]	; (800940c <HAL_ADC_ConfigChannel+0x858>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d004      	beq.n	80092c0 <HAL_ADC_ConfigChannel+0x70c>
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a55      	ldr	r2, [pc, #340]	; (8009410 <HAL_ADC_ConfigChannel+0x85c>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d13a      	bne.n	8009336 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80092c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80092c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d134      	bne.n	8009336 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092d4:	d005      	beq.n	80092e2 <HAL_ADC_ConfigChannel+0x72e>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a4e      	ldr	r2, [pc, #312]	; (8009414 <HAL_ADC_ConfigChannel+0x860>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	f040 8085 	bne.w	80093ec <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092ea:	d004      	beq.n	80092f6 <HAL_ADC_ConfigChannel+0x742>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a49      	ldr	r2, [pc, #292]	; (8009418 <HAL_ADC_ConfigChannel+0x864>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d101      	bne.n	80092fa <HAL_ADC_ConfigChannel+0x746>
 80092f6:	4a49      	ldr	r2, [pc, #292]	; (800941c <HAL_ADC_ConfigChannel+0x868>)
 80092f8:	e000      	b.n	80092fc <HAL_ADC_ConfigChannel+0x748>
 80092fa:	4a43      	ldr	r2, [pc, #268]	; (8009408 <HAL_ADC_ConfigChannel+0x854>)
 80092fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009300:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009304:	4619      	mov	r1, r3
 8009306:	4610      	mov	r0, r2
 8009308:	f7fe ff91 	bl	800822e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800930c:	4b44      	ldr	r3, [pc, #272]	; (8009420 <HAL_ADC_ConfigChannel+0x86c>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	099b      	lsrs	r3, r3, #6
 8009312:	4a44      	ldr	r2, [pc, #272]	; (8009424 <HAL_ADC_ConfigChannel+0x870>)
 8009314:	fba2 2303 	umull	r2, r3, r2, r3
 8009318:	099b      	lsrs	r3, r3, #6
 800931a:	1c5a      	adds	r2, r3, #1
 800931c:	4613      	mov	r3, r2
 800931e:	005b      	lsls	r3, r3, #1
 8009320:	4413      	add	r3, r2
 8009322:	009b      	lsls	r3, r3, #2
 8009324:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8009326:	e002      	b.n	800932e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	3b01      	subs	r3, #1
 800932c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d1f9      	bne.n	8009328 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009334:	e05a      	b.n	80093ec <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a3b      	ldr	r2, [pc, #236]	; (8009428 <HAL_ADC_ConfigChannel+0x874>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d125      	bne.n	800938c <HAL_ADC_ConfigChannel+0x7d8>
 8009340:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009344:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009348:	2b00      	cmp	r3, #0
 800934a:	d11f      	bne.n	800938c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4a31      	ldr	r2, [pc, #196]	; (8009418 <HAL_ADC_ConfigChannel+0x864>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d104      	bne.n	8009360 <HAL_ADC_ConfigChannel+0x7ac>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4a34      	ldr	r2, [pc, #208]	; (800942c <HAL_ADC_ConfigChannel+0x878>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d047      	beq.n	80093f0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009368:	d004      	beq.n	8009374 <HAL_ADC_ConfigChannel+0x7c0>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4a2a      	ldr	r2, [pc, #168]	; (8009418 <HAL_ADC_ConfigChannel+0x864>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d101      	bne.n	8009378 <HAL_ADC_ConfigChannel+0x7c4>
 8009374:	4a29      	ldr	r2, [pc, #164]	; (800941c <HAL_ADC_ConfigChannel+0x868>)
 8009376:	e000      	b.n	800937a <HAL_ADC_ConfigChannel+0x7c6>
 8009378:	4a23      	ldr	r2, [pc, #140]	; (8009408 <HAL_ADC_ConfigChannel+0x854>)
 800937a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800937e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009382:	4619      	mov	r1, r3
 8009384:	4610      	mov	r0, r2
 8009386:	f7fe ff52 	bl	800822e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800938a:	e031      	b.n	80093f0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a27      	ldr	r2, [pc, #156]	; (8009430 <HAL_ADC_ConfigChannel+0x87c>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d12d      	bne.n	80093f2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8009396:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800939a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d127      	bne.n	80093f2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4a1c      	ldr	r2, [pc, #112]	; (8009418 <HAL_ADC_ConfigChannel+0x864>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d022      	beq.n	80093f2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093b4:	d004      	beq.n	80093c0 <HAL_ADC_ConfigChannel+0x80c>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a17      	ldr	r2, [pc, #92]	; (8009418 <HAL_ADC_ConfigChannel+0x864>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d101      	bne.n	80093c4 <HAL_ADC_ConfigChannel+0x810>
 80093c0:	4a16      	ldr	r2, [pc, #88]	; (800941c <HAL_ADC_ConfigChannel+0x868>)
 80093c2:	e000      	b.n	80093c6 <HAL_ADC_ConfigChannel+0x812>
 80093c4:	4a10      	ldr	r2, [pc, #64]	; (8009408 <HAL_ADC_ConfigChannel+0x854>)
 80093c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80093ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80093ce:	4619      	mov	r1, r3
 80093d0:	4610      	mov	r0, r2
 80093d2:	f7fe ff2c 	bl	800822e <LL_ADC_SetCommonPathInternalCh>
 80093d6:	e00c      	b.n	80093f2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093dc:	f043 0220 	orr.w	r2, r3, #32
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80093e4:	2301      	movs	r3, #1
 80093e6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80093ea:	e002      	b.n	80093f2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80093ec:	bf00      	nop
 80093ee:	e000      	b.n	80093f2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80093f0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2200      	movs	r2, #0
 80093f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80093fa:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80093fe:	4618      	mov	r0, r3
 8009400:	37d8      	adds	r7, #216	; 0xd8
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	50000700 	.word	0x50000700
 800940c:	c3210000 	.word	0xc3210000
 8009410:	90c00010 	.word	0x90c00010
 8009414:	50000600 	.word	0x50000600
 8009418:	50000100 	.word	0x50000100
 800941c:	50000300 	.word	0x50000300
 8009420:	20000004 	.word	0x20000004
 8009424:	053e2d63 	.word	0x053e2d63
 8009428:	c7520000 	.word	0xc7520000
 800942c:	50000500 	.word	0x50000500
 8009430:	cb840000 	.word	0xcb840000

08009434 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b084      	sub	sp, #16
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4618      	mov	r0, r3
 8009442:	f7ff f8b5 	bl	80085b0 <LL_ADC_IsEnabled>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d14d      	bne.n	80094e8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	689a      	ldr	r2, [r3, #8]
 8009452:	4b28      	ldr	r3, [pc, #160]	; (80094f4 <ADC_Enable+0xc0>)
 8009454:	4013      	ands	r3, r2
 8009456:	2b00      	cmp	r3, #0
 8009458:	d00d      	beq.n	8009476 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800945e:	f043 0210 	orr.w	r2, r3, #16
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800946a:	f043 0201 	orr.w	r2, r3, #1
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8009472:	2301      	movs	r3, #1
 8009474:	e039      	b.n	80094ea <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4618      	mov	r0, r3
 800947c:	f7ff f884 	bl	8008588 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8009480:	f7fe fe94 	bl	80081ac <HAL_GetTick>
 8009484:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009486:	e028      	b.n	80094da <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4618      	mov	r0, r3
 800948e:	f7ff f88f 	bl	80085b0 <LL_ADC_IsEnabled>
 8009492:	4603      	mov	r3, r0
 8009494:	2b00      	cmp	r3, #0
 8009496:	d104      	bne.n	80094a2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4618      	mov	r0, r3
 800949e:	f7ff f873 	bl	8008588 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80094a2:	f7fe fe83 	bl	80081ac <HAL_GetTick>
 80094a6:	4602      	mov	r2, r0
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	1ad3      	subs	r3, r2, r3
 80094ac:	2b02      	cmp	r3, #2
 80094ae:	d914      	bls.n	80094da <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f003 0301 	and.w	r3, r3, #1
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	d00d      	beq.n	80094da <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094c2:	f043 0210 	orr.w	r2, r3, #16
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094ce:	f043 0201 	orr.w	r2, r3, #1
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80094d6:	2301      	movs	r3, #1
 80094d8:	e007      	b.n	80094ea <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f003 0301 	and.w	r3, r3, #1
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d1cf      	bne.n	8009488 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80094e8:	2300      	movs	r3, #0
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3710      	adds	r7, #16
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	8000003f 	.word	0x8000003f

080094f8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009504:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800950a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800950e:	2b00      	cmp	r3, #0
 8009510:	d14b      	bne.n	80095aa <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009516:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f003 0308 	and.w	r3, r3, #8
 8009528:	2b00      	cmp	r3, #0
 800952a:	d021      	beq.n	8009570 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4618      	mov	r0, r3
 8009532:	f7fe ff3b 	bl	80083ac <LL_ADC_REG_IsTriggerSourceSWStart>
 8009536:	4603      	mov	r3, r0
 8009538:	2b00      	cmp	r3, #0
 800953a:	d032      	beq.n	80095a2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	68db      	ldr	r3, [r3, #12]
 8009542:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009546:	2b00      	cmp	r3, #0
 8009548:	d12b      	bne.n	80095a2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800954e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800955a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800955e:	2b00      	cmp	r3, #0
 8009560:	d11f      	bne.n	80095a2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009566:	f043 0201 	orr.w	r2, r3, #1
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	65da      	str	r2, [r3, #92]	; 0x5c
 800956e:	e018      	b.n	80095a2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	68db      	ldr	r3, [r3, #12]
 8009576:	f003 0302 	and.w	r3, r3, #2
 800957a:	2b00      	cmp	r3, #0
 800957c:	d111      	bne.n	80095a2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009582:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800958e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009592:	2b00      	cmp	r3, #0
 8009594:	d105      	bne.n	80095a2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800959a:	f043 0201 	orr.w	r2, r3, #1
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80095a2:	68f8      	ldr	r0, [r7, #12]
 80095a4:	f7ff fae8 	bl	8008b78 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80095a8:	e00e      	b.n	80095c8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095ae:	f003 0310 	and.w	r3, r3, #16
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d003      	beq.n	80095be <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80095b6:	68f8      	ldr	r0, [r7, #12]
 80095b8:	f7ff faf2 	bl	8008ba0 <HAL_ADC_ErrorCallback>
}
 80095bc:	e004      	b.n	80095c8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	4798      	blx	r3
}
 80095c8:	bf00      	nop
 80095ca:	3710      	adds	r7, #16
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095dc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80095de:	68f8      	ldr	r0, [r7, #12]
 80095e0:	f7ff fad4 	bl	8008b8c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80095e4:	bf00      	nop
 80095e6:	3710      	adds	r7, #16
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095f8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800960a:	f043 0204 	orr.w	r2, r3, #4
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8009612:	68f8      	ldr	r0, [r7, #12]
 8009614:	f7ff fac4 	bl	8008ba0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009618:	bf00      	nop
 800961a:	3710      	adds	r7, #16
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}

08009620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009620:	b480      	push	{r7}
 8009622:	b085      	sub	sp, #20
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f003 0307 	and.w	r3, r3, #7
 800962e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009630:	4b0c      	ldr	r3, [pc, #48]	; (8009664 <__NVIC_SetPriorityGrouping+0x44>)
 8009632:	68db      	ldr	r3, [r3, #12]
 8009634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009636:	68ba      	ldr	r2, [r7, #8]
 8009638:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800963c:	4013      	ands	r3, r2
 800963e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009648:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800964c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009652:	4a04      	ldr	r2, [pc, #16]	; (8009664 <__NVIC_SetPriorityGrouping+0x44>)
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	60d3      	str	r3, [r2, #12]
}
 8009658:	bf00      	nop
 800965a:	3714      	adds	r7, #20
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr
 8009664:	e000ed00 	.word	0xe000ed00

08009668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009668:	b480      	push	{r7}
 800966a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800966c:	4b04      	ldr	r3, [pc, #16]	; (8009680 <__NVIC_GetPriorityGrouping+0x18>)
 800966e:	68db      	ldr	r3, [r3, #12]
 8009670:	0a1b      	lsrs	r3, r3, #8
 8009672:	f003 0307 	and.w	r3, r3, #7
}
 8009676:	4618      	mov	r0, r3
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr
 8009680:	e000ed00 	.word	0xe000ed00

08009684 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009684:	b480      	push	{r7}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
 800968a:	4603      	mov	r3, r0
 800968c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800968e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009692:	2b00      	cmp	r3, #0
 8009694:	db0b      	blt.n	80096ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009696:	79fb      	ldrb	r3, [r7, #7]
 8009698:	f003 021f 	and.w	r2, r3, #31
 800969c:	4907      	ldr	r1, [pc, #28]	; (80096bc <__NVIC_EnableIRQ+0x38>)
 800969e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096a2:	095b      	lsrs	r3, r3, #5
 80096a4:	2001      	movs	r0, #1
 80096a6:	fa00 f202 	lsl.w	r2, r0, r2
 80096aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80096ae:	bf00      	nop
 80096b0:	370c      	adds	r7, #12
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr
 80096ba:	bf00      	nop
 80096bc:	e000e100 	.word	0xe000e100

080096c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b083      	sub	sp, #12
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	4603      	mov	r3, r0
 80096c8:	6039      	str	r1, [r7, #0]
 80096ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80096cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	db0a      	blt.n	80096ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	b2da      	uxtb	r2, r3
 80096d8:	490c      	ldr	r1, [pc, #48]	; (800970c <__NVIC_SetPriority+0x4c>)
 80096da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096de:	0112      	lsls	r2, r2, #4
 80096e0:	b2d2      	uxtb	r2, r2
 80096e2:	440b      	add	r3, r1
 80096e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80096e8:	e00a      	b.n	8009700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	b2da      	uxtb	r2, r3
 80096ee:	4908      	ldr	r1, [pc, #32]	; (8009710 <__NVIC_SetPriority+0x50>)
 80096f0:	79fb      	ldrb	r3, [r7, #7]
 80096f2:	f003 030f 	and.w	r3, r3, #15
 80096f6:	3b04      	subs	r3, #4
 80096f8:	0112      	lsls	r2, r2, #4
 80096fa:	b2d2      	uxtb	r2, r2
 80096fc:	440b      	add	r3, r1
 80096fe:	761a      	strb	r2, [r3, #24]
}
 8009700:	bf00      	nop
 8009702:	370c      	adds	r7, #12
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr
 800970c:	e000e100 	.word	0xe000e100
 8009710:	e000ed00 	.word	0xe000ed00

08009714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009714:	b480      	push	{r7}
 8009716:	b089      	sub	sp, #36	; 0x24
 8009718:	af00      	add	r7, sp, #0
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	60b9      	str	r1, [r7, #8]
 800971e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f003 0307 	and.w	r3, r3, #7
 8009726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009728:	69fb      	ldr	r3, [r7, #28]
 800972a:	f1c3 0307 	rsb	r3, r3, #7
 800972e:	2b04      	cmp	r3, #4
 8009730:	bf28      	it	cs
 8009732:	2304      	movcs	r3, #4
 8009734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009736:	69fb      	ldr	r3, [r7, #28]
 8009738:	3304      	adds	r3, #4
 800973a:	2b06      	cmp	r3, #6
 800973c:	d902      	bls.n	8009744 <NVIC_EncodePriority+0x30>
 800973e:	69fb      	ldr	r3, [r7, #28]
 8009740:	3b03      	subs	r3, #3
 8009742:	e000      	b.n	8009746 <NVIC_EncodePriority+0x32>
 8009744:	2300      	movs	r3, #0
 8009746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009748:	f04f 32ff 	mov.w	r2, #4294967295
 800974c:	69bb      	ldr	r3, [r7, #24]
 800974e:	fa02 f303 	lsl.w	r3, r2, r3
 8009752:	43da      	mvns	r2, r3
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	401a      	ands	r2, r3
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800975c:	f04f 31ff 	mov.w	r1, #4294967295
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	fa01 f303 	lsl.w	r3, r1, r3
 8009766:	43d9      	mvns	r1, r3
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800976c:	4313      	orrs	r3, r2
         );
}
 800976e:	4618      	mov	r0, r3
 8009770:	3724      	adds	r7, #36	; 0x24
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr

0800977a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800977a:	b580      	push	{r7, lr}
 800977c:	b082      	sub	sp, #8
 800977e:	af00      	add	r7, sp, #0
 8009780:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f7ff ff4c 	bl	8009620 <__NVIC_SetPriorityGrouping>
}
 8009788:	bf00      	nop
 800978a:	3708      	adds	r7, #8
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}

08009790 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b086      	sub	sp, #24
 8009794:	af00      	add	r7, sp, #0
 8009796:	4603      	mov	r3, r0
 8009798:	60b9      	str	r1, [r7, #8]
 800979a:	607a      	str	r2, [r7, #4]
 800979c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800979e:	f7ff ff63 	bl	8009668 <__NVIC_GetPriorityGrouping>
 80097a2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	68b9      	ldr	r1, [r7, #8]
 80097a8:	6978      	ldr	r0, [r7, #20]
 80097aa:	f7ff ffb3 	bl	8009714 <NVIC_EncodePriority>
 80097ae:	4602      	mov	r2, r0
 80097b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097b4:	4611      	mov	r1, r2
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7ff ff82 	bl	80096c0 <__NVIC_SetPriority>
}
 80097bc:	bf00      	nop
 80097be:	3718      	adds	r7, #24
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b082      	sub	sp, #8
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	4603      	mov	r3, r0
 80097cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80097ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097d2:	4618      	mov	r0, r3
 80097d4:	f7ff ff56 	bl	8009684 <__NVIC_EnableIRQ>
}
 80097d8:	bf00      	nop
 80097da:	3708      	adds	r7, #8
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}

080097e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d101      	bne.n	80097f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80097ee:	2301      	movs	r3, #1
 80097f0:	e08d      	b.n	800990e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	461a      	mov	r2, r3
 80097f8:	4b47      	ldr	r3, [pc, #284]	; (8009918 <HAL_DMA_Init+0x138>)
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d80f      	bhi.n	800981e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	461a      	mov	r2, r3
 8009804:	4b45      	ldr	r3, [pc, #276]	; (800991c <HAL_DMA_Init+0x13c>)
 8009806:	4413      	add	r3, r2
 8009808:	4a45      	ldr	r2, [pc, #276]	; (8009920 <HAL_DMA_Init+0x140>)
 800980a:	fba2 2303 	umull	r2, r3, r2, r3
 800980e:	091b      	lsrs	r3, r3, #4
 8009810:	009a      	lsls	r2, r3, #2
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	4a42      	ldr	r2, [pc, #264]	; (8009924 <HAL_DMA_Init+0x144>)
 800981a:	641a      	str	r2, [r3, #64]	; 0x40
 800981c:	e00e      	b.n	800983c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	461a      	mov	r2, r3
 8009824:	4b40      	ldr	r3, [pc, #256]	; (8009928 <HAL_DMA_Init+0x148>)
 8009826:	4413      	add	r3, r2
 8009828:	4a3d      	ldr	r2, [pc, #244]	; (8009920 <HAL_DMA_Init+0x140>)
 800982a:	fba2 2303 	umull	r2, r3, r2, r3
 800982e:	091b      	lsrs	r3, r3, #4
 8009830:	009a      	lsls	r2, r3, #2
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	4a3c      	ldr	r2, [pc, #240]	; (800992c <HAL_DMA_Init+0x14c>)
 800983a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2202      	movs	r2, #2
 8009840:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009856:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009860:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	691b      	ldr	r3, [r3, #16]
 8009866:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800986c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	699b      	ldr	r3, [r3, #24]
 8009872:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009878:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6a1b      	ldr	r3, [r3, #32]
 800987e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009880:	68fa      	ldr	r2, [r7, #12]
 8009882:	4313      	orrs	r3, r2
 8009884:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	68fa      	ldr	r2, [r7, #12]
 800988c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 fa76 	bl	8009d80 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800989c:	d102      	bne.n	80098a4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2200      	movs	r2, #0
 80098a2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	685a      	ldr	r2, [r3, #4]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098ac:	b2d2      	uxtb	r2, r2
 80098ae:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098b4:	687a      	ldr	r2, [r7, #4]
 80098b6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80098b8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	685b      	ldr	r3, [r3, #4]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d010      	beq.n	80098e4 <HAL_DMA_Init+0x104>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	2b04      	cmp	r3, #4
 80098c8:	d80c      	bhi.n	80098e4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 fa96 	bl	8009dfc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098d4:	2200      	movs	r2, #0
 80098d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098dc:	687a      	ldr	r2, [r7, #4]
 80098de:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80098e0:	605a      	str	r2, [r3, #4]
 80098e2:	e008      	b.n	80098f6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2200      	movs	r2, #0
 80098e8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2200      	movs	r2, #0
 80098ee:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2200      	movs	r2, #0
 80098f4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2200      	movs	r2, #0
 80098fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2201      	movs	r2, #1
 8009900:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2200      	movs	r2, #0
 8009908:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800990c:	2300      	movs	r3, #0
}
 800990e:	4618      	mov	r0, r3
 8009910:	3710      	adds	r7, #16
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
 8009916:	bf00      	nop
 8009918:	40020407 	.word	0x40020407
 800991c:	bffdfff8 	.word	0xbffdfff8
 8009920:	cccccccd 	.word	0xcccccccd
 8009924:	40020000 	.word	0x40020000
 8009928:	bffdfbf8 	.word	0xbffdfbf8
 800992c:	40020400 	.word	0x40020400

08009930 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b086      	sub	sp, #24
 8009934:	af00      	add	r7, sp, #0
 8009936:	60f8      	str	r0, [r7, #12]
 8009938:	60b9      	str	r1, [r7, #8]
 800993a:	607a      	str	r2, [r7, #4]
 800993c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800993e:	2300      	movs	r3, #0
 8009940:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009948:	2b01      	cmp	r3, #1
 800994a:	d101      	bne.n	8009950 <HAL_DMA_Start_IT+0x20>
 800994c:	2302      	movs	r3, #2
 800994e:	e066      	b.n	8009a1e <HAL_DMA_Start_IT+0xee>
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2201      	movs	r2, #1
 8009954:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800995e:	b2db      	uxtb	r3, r3
 8009960:	2b01      	cmp	r3, #1
 8009962:	d155      	bne.n	8009a10 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2202      	movs	r2, #2
 8009968:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2200      	movs	r2, #0
 8009970:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	681a      	ldr	r2, [r3, #0]
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f022 0201 	bic.w	r2, r2, #1
 8009980:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	68b9      	ldr	r1, [r7, #8]
 8009988:	68f8      	ldr	r0, [r7, #12]
 800998a:	f000 f9bb 	bl	8009d04 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009992:	2b00      	cmp	r3, #0
 8009994:	d008      	beq.n	80099a8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	681a      	ldr	r2, [r3, #0]
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f042 020e 	orr.w	r2, r2, #14
 80099a4:	601a      	str	r2, [r3, #0]
 80099a6:	e00f      	b.n	80099c8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	681a      	ldr	r2, [r3, #0]
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f022 0204 	bic.w	r2, r2, #4
 80099b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	681a      	ldr	r2, [r3, #0]
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f042 020a 	orr.w	r2, r2, #10
 80099c6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d007      	beq.n	80099e6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099da:	681a      	ldr	r2, [r3, #0]
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099e4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d007      	beq.n	80099fe <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099f2:	681a      	ldr	r2, [r3, #0]
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099fc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	681a      	ldr	r2, [r3, #0]
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f042 0201 	orr.w	r2, r2, #1
 8009a0c:	601a      	str	r2, [r3, #0]
 8009a0e:	e005      	b.n	8009a1c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2200      	movs	r2, #0
 8009a14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009a18:	2302      	movs	r3, #2
 8009a1a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8009a1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3718      	adds	r7, #24
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}

08009a26 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009a26:	b480      	push	{r7}
 8009a28:	b085      	sub	sp, #20
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	2b02      	cmp	r3, #2
 8009a3c:	d005      	beq.n	8009a4a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2204      	movs	r2, #4
 8009a42:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009a44:	2301      	movs	r3, #1
 8009a46:	73fb      	strb	r3, [r7, #15]
 8009a48:	e037      	b.n	8009aba <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f022 020e 	bic.w	r2, r2, #14
 8009a58:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a5e:	681a      	ldr	r2, [r3, #0]
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009a68:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	681a      	ldr	r2, [r3, #0]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f022 0201 	bic.w	r2, r2, #1
 8009a78:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a7e:	f003 021f 	and.w	r2, r3, #31
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a86:	2101      	movs	r1, #1
 8009a88:	fa01 f202 	lsl.w	r2, r1, r2
 8009a8c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a92:	687a      	ldr	r2, [r7, #4]
 8009a94:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009a96:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d00c      	beq.n	8009aba <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009aa4:	681a      	ldr	r2, [r3, #0]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009aaa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009aae:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009ab8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2201      	movs	r2, #1
 8009abe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8009aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3714      	adds	r7, #20
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad6:	4770      	bx	lr

08009ad8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b084      	sub	sp, #16
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009aea:	b2db      	uxtb	r3, r3
 8009aec:	2b02      	cmp	r3, #2
 8009aee:	d00d      	beq.n	8009b0c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2204      	movs	r2, #4
 8009af4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2201      	movs	r2, #1
 8009afa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2200      	movs	r2, #0
 8009b02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8009b06:	2301      	movs	r3, #1
 8009b08:	73fb      	strb	r3, [r7, #15]
 8009b0a:	e047      	b.n	8009b9c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f022 020e 	bic.w	r2, r2, #14
 8009b1a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f022 0201 	bic.w	r2, r2, #1
 8009b2a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b30:	681a      	ldr	r2, [r3, #0]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009b3a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b40:	f003 021f 	and.w	r2, r3, #31
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b48:	2101      	movs	r1, #1
 8009b4a:	fa01 f202 	lsl.w	r2, r1, r2
 8009b4e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b54:	687a      	ldr	r2, [r7, #4]
 8009b56:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009b58:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d00c      	beq.n	8009b7c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b66:	681a      	ldr	r2, [r3, #0]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009b70:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009b7a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d003      	beq.n	8009b9c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	4798      	blx	r3
    }
  }
  return status;
 8009b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3710      	adds	r7, #16
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}

08009ba6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009ba6:	b580      	push	{r7, lr}
 8009ba8:	b084      	sub	sp, #16
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bc2:	f003 031f 	and.w	r3, r3, #31
 8009bc6:	2204      	movs	r2, #4
 8009bc8:	409a      	lsls	r2, r3
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	4013      	ands	r3, r2
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d026      	beq.n	8009c20 <HAL_DMA_IRQHandler+0x7a>
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	f003 0304 	and.w	r3, r3, #4
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d021      	beq.n	8009c20 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f003 0320 	and.w	r3, r3, #32
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d107      	bne.n	8009bfa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	681a      	ldr	r2, [r3, #0]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f022 0204 	bic.w	r2, r2, #4
 8009bf8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bfe:	f003 021f 	and.w	r2, r3, #31
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c06:	2104      	movs	r1, #4
 8009c08:	fa01 f202 	lsl.w	r2, r1, r2
 8009c0c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d071      	beq.n	8009cfa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8009c1e:	e06c      	b.n	8009cfa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c24:	f003 031f 	and.w	r3, r3, #31
 8009c28:	2202      	movs	r2, #2
 8009c2a:	409a      	lsls	r2, r3
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	4013      	ands	r3, r2
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d02e      	beq.n	8009c92 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	f003 0302 	and.w	r3, r3, #2
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d029      	beq.n	8009c92 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f003 0320 	and.w	r3, r3, #32
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d10b      	bne.n	8009c64 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	681a      	ldr	r2, [r3, #0]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f022 020a 	bic.w	r2, r2, #10
 8009c5a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2201      	movs	r2, #1
 8009c60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c68:	f003 021f 	and.w	r2, r3, #31
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c70:	2102      	movs	r1, #2
 8009c72:	fa01 f202 	lsl.w	r2, r1, r2
 8009c76:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d038      	beq.n	8009cfa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8009c90:	e033      	b.n	8009cfa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c96:	f003 031f 	and.w	r3, r3, #31
 8009c9a:	2208      	movs	r2, #8
 8009c9c:	409a      	lsls	r2, r3
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	4013      	ands	r3, r2
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d02a      	beq.n	8009cfc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	f003 0308 	and.w	r3, r3, #8
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d025      	beq.n	8009cfc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	681a      	ldr	r2, [r3, #0]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f022 020e 	bic.w	r2, r2, #14
 8009cbe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cc4:	f003 021f 	and.w	r2, r3, #31
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ccc:	2101      	movs	r1, #1
 8009cce:	fa01 f202 	lsl.w	r2, r1, r2
 8009cd2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2201      	movs	r2, #1
 8009cde:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d004      	beq.n	8009cfc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009cfa:	bf00      	nop
 8009cfc:	bf00      	nop
}
 8009cfe:	3710      	adds	r7, #16
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b085      	sub	sp, #20
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	60f8      	str	r0, [r7, #12]
 8009d0c:	60b9      	str	r1, [r7, #8]
 8009d0e:	607a      	str	r2, [r7, #4]
 8009d10:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d16:	68fa      	ldr	r2, [r7, #12]
 8009d18:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009d1a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d004      	beq.n	8009d2e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d28:	68fa      	ldr	r2, [r7, #12]
 8009d2a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009d2c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d32:	f003 021f 	and.w	r2, r3, #31
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d3a:	2101      	movs	r1, #1
 8009d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8009d40:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	683a      	ldr	r2, [r7, #0]
 8009d48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	689b      	ldr	r3, [r3, #8]
 8009d4e:	2b10      	cmp	r3, #16
 8009d50:	d108      	bne.n	8009d64 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	687a      	ldr	r2, [r7, #4]
 8009d58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	68ba      	ldr	r2, [r7, #8]
 8009d60:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009d62:	e007      	b.n	8009d74 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	68ba      	ldr	r2, [r7, #8]
 8009d6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	60da      	str	r2, [r3, #12]
}
 8009d74:	bf00      	nop
 8009d76:	3714      	adds	r7, #20
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr

08009d80 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b087      	sub	sp, #28
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	4b16      	ldr	r3, [pc, #88]	; (8009de8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d802      	bhi.n	8009d9a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8009d94:	4b15      	ldr	r3, [pc, #84]	; (8009dec <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8009d96:	617b      	str	r3, [r7, #20]
 8009d98:	e001      	b.n	8009d9e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8009d9a:	4b15      	ldr	r3, [pc, #84]	; (8009df0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8009d9c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	b2db      	uxtb	r3, r3
 8009da8:	3b08      	subs	r3, #8
 8009daa:	4a12      	ldr	r2, [pc, #72]	; (8009df4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8009dac:	fba2 2303 	umull	r2, r3, r2, r3
 8009db0:	091b      	lsrs	r3, r3, #4
 8009db2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009db8:	089b      	lsrs	r3, r3, #2
 8009dba:	009a      	lsls	r2, r3, #2
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	4413      	add	r3, r2
 8009dc0:	461a      	mov	r2, r3
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	4a0b      	ldr	r2, [pc, #44]	; (8009df8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8009dca:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f003 031f 	and.w	r3, r3, #31
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	409a      	lsls	r2, r3
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8009dda:	bf00      	nop
 8009ddc:	371c      	adds	r7, #28
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr
 8009de6:	bf00      	nop
 8009de8:	40020407 	.word	0x40020407
 8009dec:	40020800 	.word	0x40020800
 8009df0:	40020820 	.word	0x40020820
 8009df4:	cccccccd 	.word	0xcccccccd
 8009df8:	40020880 	.word	0x40020880

08009dfc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b085      	sub	sp, #20
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	b2db      	uxtb	r3, r3
 8009e0a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009e0c:	68fa      	ldr	r2, [r7, #12]
 8009e0e:	4b0b      	ldr	r3, [pc, #44]	; (8009e3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8009e10:	4413      	add	r3, r2
 8009e12:	009b      	lsls	r3, r3, #2
 8009e14:	461a      	mov	r2, r3
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	4a08      	ldr	r2, [pc, #32]	; (8009e40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8009e1e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	3b01      	subs	r3, #1
 8009e24:	f003 031f 	and.w	r3, r3, #31
 8009e28:	2201      	movs	r2, #1
 8009e2a:	409a      	lsls	r2, r3
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8009e30:	bf00      	nop
 8009e32:	3714      	adds	r7, #20
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr
 8009e3c:	1000823f 	.word	0x1000823f
 8009e40:	40020940 	.word	0x40020940

08009e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b087      	sub	sp, #28
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009e52:	e15a      	b.n	800a10a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	681a      	ldr	r2, [r3, #0]
 8009e58:	2101      	movs	r1, #1
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8009e60:	4013      	ands	r3, r2
 8009e62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	f000 814c 	beq.w	800a104 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	f003 0303 	and.w	r3, r3, #3
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	d005      	beq.n	8009e84 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009e80:	2b02      	cmp	r3, #2
 8009e82:	d130      	bne.n	8009ee6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	689b      	ldr	r3, [r3, #8]
 8009e88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009e8a:	697b      	ldr	r3, [r7, #20]
 8009e8c:	005b      	lsls	r3, r3, #1
 8009e8e:	2203      	movs	r2, #3
 8009e90:	fa02 f303 	lsl.w	r3, r2, r3
 8009e94:	43db      	mvns	r3, r3
 8009e96:	693a      	ldr	r2, [r7, #16]
 8009e98:	4013      	ands	r3, r2
 8009e9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	68da      	ldr	r2, [r3, #12]
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	005b      	lsls	r3, r3, #1
 8009ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ea8:	693a      	ldr	r2, [r7, #16]
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	693a      	ldr	r2, [r7, #16]
 8009eb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009eba:	2201      	movs	r2, #1
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8009ec2:	43db      	mvns	r3, r3
 8009ec4:	693a      	ldr	r2, [r7, #16]
 8009ec6:	4013      	ands	r3, r2
 8009ec8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	091b      	lsrs	r3, r3, #4
 8009ed0:	f003 0201 	and.w	r2, r3, #1
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8009eda:	693a      	ldr	r2, [r7, #16]
 8009edc:	4313      	orrs	r3, r2
 8009ede:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	693a      	ldr	r2, [r7, #16]
 8009ee4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	f003 0303 	and.w	r3, r3, #3
 8009eee:	2b03      	cmp	r3, #3
 8009ef0:	d017      	beq.n	8009f22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	68db      	ldr	r3, [r3, #12]
 8009ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	005b      	lsls	r3, r3, #1
 8009efc:	2203      	movs	r2, #3
 8009efe:	fa02 f303 	lsl.w	r3, r2, r3
 8009f02:	43db      	mvns	r3, r3
 8009f04:	693a      	ldr	r2, [r7, #16]
 8009f06:	4013      	ands	r3, r2
 8009f08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	689a      	ldr	r2, [r3, #8]
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	005b      	lsls	r3, r3, #1
 8009f12:	fa02 f303 	lsl.w	r3, r2, r3
 8009f16:	693a      	ldr	r2, [r7, #16]
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	693a      	ldr	r2, [r7, #16]
 8009f20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	685b      	ldr	r3, [r3, #4]
 8009f26:	f003 0303 	and.w	r3, r3, #3
 8009f2a:	2b02      	cmp	r3, #2
 8009f2c:	d123      	bne.n	8009f76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	08da      	lsrs	r2, r3, #3
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	3208      	adds	r2, #8
 8009f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	f003 0307 	and.w	r3, r3, #7
 8009f42:	009b      	lsls	r3, r3, #2
 8009f44:	220f      	movs	r2, #15
 8009f46:	fa02 f303 	lsl.w	r3, r2, r3
 8009f4a:	43db      	mvns	r3, r3
 8009f4c:	693a      	ldr	r2, [r7, #16]
 8009f4e:	4013      	ands	r3, r2
 8009f50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	691a      	ldr	r2, [r3, #16]
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	f003 0307 	and.w	r3, r3, #7
 8009f5c:	009b      	lsls	r3, r3, #2
 8009f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8009f62:	693a      	ldr	r2, [r7, #16]
 8009f64:	4313      	orrs	r3, r2
 8009f66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	08da      	lsrs	r2, r3, #3
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	3208      	adds	r2, #8
 8009f70:	6939      	ldr	r1, [r7, #16]
 8009f72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	005b      	lsls	r3, r3, #1
 8009f80:	2203      	movs	r2, #3
 8009f82:	fa02 f303 	lsl.w	r3, r2, r3
 8009f86:	43db      	mvns	r3, r3
 8009f88:	693a      	ldr	r2, [r7, #16]
 8009f8a:	4013      	ands	r3, r2
 8009f8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	f003 0203 	and.w	r2, r3, #3
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	005b      	lsls	r3, r3, #1
 8009f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8009f9e:	693a      	ldr	r2, [r7, #16]
 8009fa0:	4313      	orrs	r3, r2
 8009fa2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	693a      	ldr	r2, [r7, #16]
 8009fa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	f000 80a6 	beq.w	800a104 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009fb8:	4b5b      	ldr	r3, [pc, #364]	; (800a128 <HAL_GPIO_Init+0x2e4>)
 8009fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fbc:	4a5a      	ldr	r2, [pc, #360]	; (800a128 <HAL_GPIO_Init+0x2e4>)
 8009fbe:	f043 0301 	orr.w	r3, r3, #1
 8009fc2:	6613      	str	r3, [r2, #96]	; 0x60
 8009fc4:	4b58      	ldr	r3, [pc, #352]	; (800a128 <HAL_GPIO_Init+0x2e4>)
 8009fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fc8:	f003 0301 	and.w	r3, r3, #1
 8009fcc:	60bb      	str	r3, [r7, #8]
 8009fce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009fd0:	4a56      	ldr	r2, [pc, #344]	; (800a12c <HAL_GPIO_Init+0x2e8>)
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	089b      	lsrs	r3, r3, #2
 8009fd6:	3302      	adds	r3, #2
 8009fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	f003 0303 	and.w	r3, r3, #3
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	220f      	movs	r2, #15
 8009fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8009fec:	43db      	mvns	r3, r3
 8009fee:	693a      	ldr	r2, [r7, #16]
 8009ff0:	4013      	ands	r3, r2
 8009ff2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009ffa:	d01f      	beq.n	800a03c <HAL_GPIO_Init+0x1f8>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	4a4c      	ldr	r2, [pc, #304]	; (800a130 <HAL_GPIO_Init+0x2ec>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d019      	beq.n	800a038 <HAL_GPIO_Init+0x1f4>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	4a4b      	ldr	r2, [pc, #300]	; (800a134 <HAL_GPIO_Init+0x2f0>)
 800a008:	4293      	cmp	r3, r2
 800a00a:	d013      	beq.n	800a034 <HAL_GPIO_Init+0x1f0>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	4a4a      	ldr	r2, [pc, #296]	; (800a138 <HAL_GPIO_Init+0x2f4>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d00d      	beq.n	800a030 <HAL_GPIO_Init+0x1ec>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	4a49      	ldr	r2, [pc, #292]	; (800a13c <HAL_GPIO_Init+0x2f8>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d007      	beq.n	800a02c <HAL_GPIO_Init+0x1e8>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	4a48      	ldr	r2, [pc, #288]	; (800a140 <HAL_GPIO_Init+0x2fc>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d101      	bne.n	800a028 <HAL_GPIO_Init+0x1e4>
 800a024:	2305      	movs	r3, #5
 800a026:	e00a      	b.n	800a03e <HAL_GPIO_Init+0x1fa>
 800a028:	2306      	movs	r3, #6
 800a02a:	e008      	b.n	800a03e <HAL_GPIO_Init+0x1fa>
 800a02c:	2304      	movs	r3, #4
 800a02e:	e006      	b.n	800a03e <HAL_GPIO_Init+0x1fa>
 800a030:	2303      	movs	r3, #3
 800a032:	e004      	b.n	800a03e <HAL_GPIO_Init+0x1fa>
 800a034:	2302      	movs	r3, #2
 800a036:	e002      	b.n	800a03e <HAL_GPIO_Init+0x1fa>
 800a038:	2301      	movs	r3, #1
 800a03a:	e000      	b.n	800a03e <HAL_GPIO_Init+0x1fa>
 800a03c:	2300      	movs	r3, #0
 800a03e:	697a      	ldr	r2, [r7, #20]
 800a040:	f002 0203 	and.w	r2, r2, #3
 800a044:	0092      	lsls	r2, r2, #2
 800a046:	4093      	lsls	r3, r2
 800a048:	693a      	ldr	r2, [r7, #16]
 800a04a:	4313      	orrs	r3, r2
 800a04c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a04e:	4937      	ldr	r1, [pc, #220]	; (800a12c <HAL_GPIO_Init+0x2e8>)
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	089b      	lsrs	r3, r3, #2
 800a054:	3302      	adds	r3, #2
 800a056:	693a      	ldr	r2, [r7, #16]
 800a058:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a05c:	4b39      	ldr	r3, [pc, #228]	; (800a144 <HAL_GPIO_Init+0x300>)
 800a05e:	689b      	ldr	r3, [r3, #8]
 800a060:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	43db      	mvns	r3, r3
 800a066:	693a      	ldr	r2, [r7, #16]
 800a068:	4013      	ands	r3, r2
 800a06a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a074:	2b00      	cmp	r3, #0
 800a076:	d003      	beq.n	800a080 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800a078:	693a      	ldr	r2, [r7, #16]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	4313      	orrs	r3, r2
 800a07e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a080:	4a30      	ldr	r2, [pc, #192]	; (800a144 <HAL_GPIO_Init+0x300>)
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a086:	4b2f      	ldr	r3, [pc, #188]	; (800a144 <HAL_GPIO_Init+0x300>)
 800a088:	68db      	ldr	r3, [r3, #12]
 800a08a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	43db      	mvns	r3, r3
 800a090:	693a      	ldr	r2, [r7, #16]
 800a092:	4013      	ands	r3, r2
 800a094:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d003      	beq.n	800a0aa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800a0a2:	693a      	ldr	r2, [r7, #16]
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a0aa:	4a26      	ldr	r2, [pc, #152]	; (800a144 <HAL_GPIO_Init+0x300>)
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800a0b0:	4b24      	ldr	r3, [pc, #144]	; (800a144 <HAL_GPIO_Init+0x300>)
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	43db      	mvns	r3, r3
 800a0ba:	693a      	ldr	r2, [r7, #16]
 800a0bc:	4013      	ands	r3, r2
 800a0be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d003      	beq.n	800a0d4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800a0cc:	693a      	ldr	r2, [r7, #16]
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a0d4:	4a1b      	ldr	r2, [pc, #108]	; (800a144 <HAL_GPIO_Init+0x300>)
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a0da:	4b1a      	ldr	r3, [pc, #104]	; (800a144 <HAL_GPIO_Init+0x300>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	43db      	mvns	r3, r3
 800a0e4:	693a      	ldr	r2, [r7, #16]
 800a0e6:	4013      	ands	r3, r2
 800a0e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d003      	beq.n	800a0fe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800a0f6:	693a      	ldr	r2, [r7, #16]
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a0fe:	4a11      	ldr	r2, [pc, #68]	; (800a144 <HAL_GPIO_Init+0x300>)
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	3301      	adds	r3, #1
 800a108:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	681a      	ldr	r2, [r3, #0]
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	fa22 f303 	lsr.w	r3, r2, r3
 800a114:	2b00      	cmp	r3, #0
 800a116:	f47f ae9d 	bne.w	8009e54 <HAL_GPIO_Init+0x10>
  }
}
 800a11a:	bf00      	nop
 800a11c:	bf00      	nop
 800a11e:	371c      	adds	r7, #28
 800a120:	46bd      	mov	sp, r7
 800a122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a126:	4770      	bx	lr
 800a128:	40021000 	.word	0x40021000
 800a12c:	40010000 	.word	0x40010000
 800a130:	48000400 	.word	0x48000400
 800a134:	48000800 	.word	0x48000800
 800a138:	48000c00 	.word	0x48000c00
 800a13c:	48001000 	.word	0x48001000
 800a140:	48001400 	.word	0x48001400
 800a144:	40010400 	.word	0x40010400

0800a148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a148:	b480      	push	{r7}
 800a14a:	b083      	sub	sp, #12
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	460b      	mov	r3, r1
 800a152:	807b      	strh	r3, [r7, #2]
 800a154:	4613      	mov	r3, r2
 800a156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a158:	787b      	ldrb	r3, [r7, #1]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d003      	beq.n	800a166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a15e:	887a      	ldrh	r2, [r7, #2]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a164:	e002      	b.n	800a16c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a166:	887a      	ldrh	r2, [r7, #2]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a16c:	bf00      	nop
 800a16e:	370c      	adds	r7, #12
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr

0800a178 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a178:	b480      	push	{r7}
 800a17a:	b085      	sub	sp, #20
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	460b      	mov	r3, r1
 800a182:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	695b      	ldr	r3, [r3, #20]
 800a188:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a18a:	887a      	ldrh	r2, [r7, #2]
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	4013      	ands	r3, r2
 800a190:	041a      	lsls	r2, r3, #16
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	43d9      	mvns	r1, r3
 800a196:	887b      	ldrh	r3, [r7, #2]
 800a198:	400b      	ands	r3, r1
 800a19a:	431a      	orrs	r2, r3
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	619a      	str	r2, [r3, #24]
}
 800a1a0:	bf00      	nop
 800a1a2:	3714      	adds	r7, #20
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr

0800a1ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b082      	sub	sp, #8
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800a1b6:	4b08      	ldr	r3, [pc, #32]	; (800a1d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a1b8:	695a      	ldr	r2, [r3, #20]
 800a1ba:	88fb      	ldrh	r3, [r7, #6]
 800a1bc:	4013      	ands	r3, r2
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d006      	beq.n	800a1d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a1c2:	4a05      	ldr	r2, [pc, #20]	; (800a1d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a1c4:	88fb      	ldrh	r3, [r7, #6]
 800a1c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a1c8:	88fb      	ldrh	r3, [r7, #6]
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f000 f806 	bl	800a1dc <HAL_GPIO_EXTI_Callback>
  }
}
 800a1d0:	bf00      	nop
 800a1d2:	3708      	adds	r7, #8
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}
 800a1d8:	40010400 	.word	0x40010400

0800a1dc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b083      	sub	sp, #12
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800a1e6:	bf00      	nop
 800a1e8:	370c      	adds	r7, #12
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f0:	4770      	bx	lr

0800a1f2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a1f2:	b580      	push	{r7, lr}
 800a1f4:	b082      	sub	sp, #8
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d101      	bne.n	800a204 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a200:	2301      	movs	r3, #1
 800a202:	e081      	b.n	800a308 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a20a:	b2db      	uxtb	r3, r3
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d106      	bne.n	800a21e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2200      	movs	r2, #0
 800a214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f7fc fa3d 	bl	8006698 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2224      	movs	r2, #36	; 0x24
 800a222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	681a      	ldr	r2, [r3, #0]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f022 0201 	bic.w	r2, r2, #1
 800a234:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	685a      	ldr	r2, [r3, #4]
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a242:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	689a      	ldr	r2, [r3, #8]
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a252:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	2b01      	cmp	r3, #1
 800a25a:	d107      	bne.n	800a26c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	689a      	ldr	r2, [r3, #8]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a268:	609a      	str	r2, [r3, #8]
 800a26a:	e006      	b.n	800a27a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	689a      	ldr	r2, [r3, #8]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a278:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	68db      	ldr	r3, [r3, #12]
 800a27e:	2b02      	cmp	r3, #2
 800a280:	d104      	bne.n	800a28c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a28a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	685b      	ldr	r3, [r3, #4]
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	6812      	ldr	r2, [r2, #0]
 800a296:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a29a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a29e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	68da      	ldr	r2, [r3, #12]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a2ae:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	691a      	ldr	r2, [r3, #16]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	695b      	ldr	r3, [r3, #20]
 800a2b8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	699b      	ldr	r3, [r3, #24]
 800a2c0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	430a      	orrs	r2, r1
 800a2c8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	69d9      	ldr	r1, [r3, #28]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6a1a      	ldr	r2, [r3, #32]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	430a      	orrs	r2, r1
 800a2d8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	681a      	ldr	r2, [r3, #0]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f042 0201 	orr.w	r2, r2, #1
 800a2e8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2220      	movs	r2, #32
 800a2f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2200      	movs	r2, #0
 800a302:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a306:	2300      	movs	r3, #0
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3708      	adds	r7, #8
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b088      	sub	sp, #32
 800a314:	af02      	add	r7, sp, #8
 800a316:	60f8      	str	r0, [r7, #12]
 800a318:	4608      	mov	r0, r1
 800a31a:	4611      	mov	r1, r2
 800a31c:	461a      	mov	r2, r3
 800a31e:	4603      	mov	r3, r0
 800a320:	817b      	strh	r3, [r7, #10]
 800a322:	460b      	mov	r3, r1
 800a324:	813b      	strh	r3, [r7, #8]
 800a326:	4613      	mov	r3, r2
 800a328:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a330:	b2db      	uxtb	r3, r3
 800a332:	2b20      	cmp	r3, #32
 800a334:	f040 80f9 	bne.w	800a52a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a338:	6a3b      	ldr	r3, [r7, #32]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d002      	beq.n	800a344 <HAL_I2C_Mem_Write+0x34>
 800a33e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a340:	2b00      	cmp	r3, #0
 800a342:	d105      	bne.n	800a350 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a34a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a34c:	2301      	movs	r3, #1
 800a34e:	e0ed      	b.n	800a52c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a356:	2b01      	cmp	r3, #1
 800a358:	d101      	bne.n	800a35e <HAL_I2C_Mem_Write+0x4e>
 800a35a:	2302      	movs	r3, #2
 800a35c:	e0e6      	b.n	800a52c <HAL_I2C_Mem_Write+0x21c>
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2201      	movs	r2, #1
 800a362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a366:	f7fd ff21 	bl	80081ac <HAL_GetTick>
 800a36a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	9300      	str	r3, [sp, #0]
 800a370:	2319      	movs	r3, #25
 800a372:	2201      	movs	r2, #1
 800a374:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a378:	68f8      	ldr	r0, [r7, #12]
 800a37a:	f000 fac3 	bl	800a904 <I2C_WaitOnFlagUntilTimeout>
 800a37e:	4603      	mov	r3, r0
 800a380:	2b00      	cmp	r3, #0
 800a382:	d001      	beq.n	800a388 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800a384:	2301      	movs	r3, #1
 800a386:	e0d1      	b.n	800a52c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	2221      	movs	r2, #33	; 0x21
 800a38c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2240      	movs	r2, #64	; 0x40
 800a394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2200      	movs	r2, #0
 800a39c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	6a3a      	ldr	r2, [r7, #32]
 800a3a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a3a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a3b0:	88f8      	ldrh	r0, [r7, #6]
 800a3b2:	893a      	ldrh	r2, [r7, #8]
 800a3b4:	8979      	ldrh	r1, [r7, #10]
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	9301      	str	r3, [sp, #4]
 800a3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3bc:	9300      	str	r3, [sp, #0]
 800a3be:	4603      	mov	r3, r0
 800a3c0:	68f8      	ldr	r0, [r7, #12]
 800a3c2:	f000 f9d3 	bl	800a76c <I2C_RequestMemoryWrite>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d005      	beq.n	800a3d8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	e0a9      	b.n	800a52c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	2bff      	cmp	r3, #255	; 0xff
 800a3e0:	d90e      	bls.n	800a400 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	22ff      	movs	r2, #255	; 0xff
 800a3e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3ec:	b2da      	uxtb	r2, r3
 800a3ee:	8979      	ldrh	r1, [r7, #10]
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	9300      	str	r3, [sp, #0]
 800a3f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a3f8:	68f8      	ldr	r0, [r7, #12]
 800a3fa:	f000 fc2b 	bl	800ac54 <I2C_TransferConfig>
 800a3fe:	e00f      	b.n	800a420 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a404:	b29a      	uxth	r2, r3
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a40e:	b2da      	uxtb	r2, r3
 800a410:	8979      	ldrh	r1, [r7, #10]
 800a412:	2300      	movs	r3, #0
 800a414:	9300      	str	r3, [sp, #0]
 800a416:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a41a:	68f8      	ldr	r0, [r7, #12]
 800a41c:	f000 fc1a 	bl	800ac54 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a420:	697a      	ldr	r2, [r7, #20]
 800a422:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a424:	68f8      	ldr	r0, [r7, #12]
 800a426:	f000 faad 	bl	800a984 <I2C_WaitOnTXISFlagUntilTimeout>
 800a42a:	4603      	mov	r3, r0
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d001      	beq.n	800a434 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800a430:	2301      	movs	r3, #1
 800a432:	e07b      	b.n	800a52c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a438:	781a      	ldrb	r2, [r3, #0]
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a444:	1c5a      	adds	r2, r3, #1
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a44e:	b29b      	uxth	r3, r3
 800a450:	3b01      	subs	r3, #1
 800a452:	b29a      	uxth	r2, r3
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a45c:	3b01      	subs	r3, #1
 800a45e:	b29a      	uxth	r2, r3
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a468:	b29b      	uxth	r3, r3
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d034      	beq.n	800a4d8 <HAL_I2C_Mem_Write+0x1c8>
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a472:	2b00      	cmp	r3, #0
 800a474:	d130      	bne.n	800a4d8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	9300      	str	r3, [sp, #0]
 800a47a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a47c:	2200      	movs	r2, #0
 800a47e:	2180      	movs	r1, #128	; 0x80
 800a480:	68f8      	ldr	r0, [r7, #12]
 800a482:	f000 fa3f 	bl	800a904 <I2C_WaitOnFlagUntilTimeout>
 800a486:	4603      	mov	r3, r0
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d001      	beq.n	800a490 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800a48c:	2301      	movs	r3, #1
 800a48e:	e04d      	b.n	800a52c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a494:	b29b      	uxth	r3, r3
 800a496:	2bff      	cmp	r3, #255	; 0xff
 800a498:	d90e      	bls.n	800a4b8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	22ff      	movs	r2, #255	; 0xff
 800a49e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4a4:	b2da      	uxtb	r2, r3
 800a4a6:	8979      	ldrh	r1, [r7, #10]
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	9300      	str	r3, [sp, #0]
 800a4ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a4b0:	68f8      	ldr	r0, [r7, #12]
 800a4b2:	f000 fbcf 	bl	800ac54 <I2C_TransferConfig>
 800a4b6:	e00f      	b.n	800a4d8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4bc:	b29a      	uxth	r2, r3
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4c6:	b2da      	uxtb	r2, r3
 800a4c8:	8979      	ldrh	r1, [r7, #10]
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	9300      	str	r3, [sp, #0]
 800a4ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a4d2:	68f8      	ldr	r0, [r7, #12]
 800a4d4:	f000 fbbe 	bl	800ac54 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d19e      	bne.n	800a420 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a4e2:	697a      	ldr	r2, [r7, #20]
 800a4e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a4e6:	68f8      	ldr	r0, [r7, #12]
 800a4e8:	f000 fa8c 	bl	800aa04 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d001      	beq.n	800a4f6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	e01a      	b.n	800a52c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	2220      	movs	r2, #32
 800a4fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	6859      	ldr	r1, [r3, #4]
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681a      	ldr	r2, [r3, #0]
 800a508:	4b0a      	ldr	r3, [pc, #40]	; (800a534 <HAL_I2C_Mem_Write+0x224>)
 800a50a:	400b      	ands	r3, r1
 800a50c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2220      	movs	r2, #32
 800a512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2200      	movs	r2, #0
 800a51a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	2200      	movs	r2, #0
 800a522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a526:	2300      	movs	r3, #0
 800a528:	e000      	b.n	800a52c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800a52a:	2302      	movs	r3, #2
  }
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3718      	adds	r7, #24
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}
 800a534:	fe00e800 	.word	0xfe00e800

0800a538 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b088      	sub	sp, #32
 800a53c:	af02      	add	r7, sp, #8
 800a53e:	60f8      	str	r0, [r7, #12]
 800a540:	4608      	mov	r0, r1
 800a542:	4611      	mov	r1, r2
 800a544:	461a      	mov	r2, r3
 800a546:	4603      	mov	r3, r0
 800a548:	817b      	strh	r3, [r7, #10]
 800a54a:	460b      	mov	r3, r1
 800a54c:	813b      	strh	r3, [r7, #8]
 800a54e:	4613      	mov	r3, r2
 800a550:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a558:	b2db      	uxtb	r3, r3
 800a55a:	2b20      	cmp	r3, #32
 800a55c:	f040 80fd 	bne.w	800a75a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800a560:	6a3b      	ldr	r3, [r7, #32]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d002      	beq.n	800a56c <HAL_I2C_Mem_Read+0x34>
 800a566:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d105      	bne.n	800a578 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a572:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a574:	2301      	movs	r3, #1
 800a576:	e0f1      	b.n	800a75c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a57e:	2b01      	cmp	r3, #1
 800a580:	d101      	bne.n	800a586 <HAL_I2C_Mem_Read+0x4e>
 800a582:	2302      	movs	r3, #2
 800a584:	e0ea      	b.n	800a75c <HAL_I2C_Mem_Read+0x224>
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2201      	movs	r2, #1
 800a58a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a58e:	f7fd fe0d 	bl	80081ac <HAL_GetTick>
 800a592:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	9300      	str	r3, [sp, #0]
 800a598:	2319      	movs	r3, #25
 800a59a:	2201      	movs	r2, #1
 800a59c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a5a0:	68f8      	ldr	r0, [r7, #12]
 800a5a2:	f000 f9af 	bl	800a904 <I2C_WaitOnFlagUntilTimeout>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d001      	beq.n	800a5b0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	e0d5      	b.n	800a75c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2222      	movs	r2, #34	; 0x22
 800a5b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2240      	movs	r2, #64	; 0x40
 800a5bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	6a3a      	ldr	r2, [r7, #32]
 800a5ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a5d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a5d8:	88f8      	ldrh	r0, [r7, #6]
 800a5da:	893a      	ldrh	r2, [r7, #8]
 800a5dc:	8979      	ldrh	r1, [r7, #10]
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	9301      	str	r3, [sp, #4]
 800a5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e4:	9300      	str	r3, [sp, #0]
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	68f8      	ldr	r0, [r7, #12]
 800a5ea:	f000 f913 	bl	800a814 <I2C_RequestMemoryRead>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d005      	beq.n	800a600 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	e0ad      	b.n	800a75c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a604:	b29b      	uxth	r3, r3
 800a606:	2bff      	cmp	r3, #255	; 0xff
 800a608:	d90e      	bls.n	800a628 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	22ff      	movs	r2, #255	; 0xff
 800a60e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a614:	b2da      	uxtb	r2, r3
 800a616:	8979      	ldrh	r1, [r7, #10]
 800a618:	4b52      	ldr	r3, [pc, #328]	; (800a764 <HAL_I2C_Mem_Read+0x22c>)
 800a61a:	9300      	str	r3, [sp, #0]
 800a61c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a620:	68f8      	ldr	r0, [r7, #12]
 800a622:	f000 fb17 	bl	800ac54 <I2C_TransferConfig>
 800a626:	e00f      	b.n	800a648 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a62c:	b29a      	uxth	r2, r3
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a636:	b2da      	uxtb	r2, r3
 800a638:	8979      	ldrh	r1, [r7, #10]
 800a63a:	4b4a      	ldr	r3, [pc, #296]	; (800a764 <HAL_I2C_Mem_Read+0x22c>)
 800a63c:	9300      	str	r3, [sp, #0]
 800a63e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a642:	68f8      	ldr	r0, [r7, #12]
 800a644:	f000 fb06 	bl	800ac54 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	9300      	str	r3, [sp, #0]
 800a64c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a64e:	2200      	movs	r2, #0
 800a650:	2104      	movs	r1, #4
 800a652:	68f8      	ldr	r0, [r7, #12]
 800a654:	f000 f956 	bl	800a904 <I2C_WaitOnFlagUntilTimeout>
 800a658:	4603      	mov	r3, r0
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d001      	beq.n	800a662 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800a65e:	2301      	movs	r3, #1
 800a660:	e07c      	b.n	800a75c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a66c:	b2d2      	uxtb	r2, r2
 800a66e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a674:	1c5a      	adds	r2, r3, #1
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a67e:	3b01      	subs	r3, #1
 800a680:	b29a      	uxth	r2, r3
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a68a:	b29b      	uxth	r3, r3
 800a68c:	3b01      	subs	r3, #1
 800a68e:	b29a      	uxth	r2, r3
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a698:	b29b      	uxth	r3, r3
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d034      	beq.n	800a708 <HAL_I2C_Mem_Read+0x1d0>
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d130      	bne.n	800a708 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	9300      	str	r3, [sp, #0]
 800a6aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	2180      	movs	r1, #128	; 0x80
 800a6b0:	68f8      	ldr	r0, [r7, #12]
 800a6b2:	f000 f927 	bl	800a904 <I2C_WaitOnFlagUntilTimeout>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d001      	beq.n	800a6c0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800a6bc:	2301      	movs	r3, #1
 800a6be:	e04d      	b.n	800a75c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6c4:	b29b      	uxth	r3, r3
 800a6c6:	2bff      	cmp	r3, #255	; 0xff
 800a6c8:	d90e      	bls.n	800a6e8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	22ff      	movs	r2, #255	; 0xff
 800a6ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6d4:	b2da      	uxtb	r2, r3
 800a6d6:	8979      	ldrh	r1, [r7, #10]
 800a6d8:	2300      	movs	r3, #0
 800a6da:	9300      	str	r3, [sp, #0]
 800a6dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a6e0:	68f8      	ldr	r0, [r7, #12]
 800a6e2:	f000 fab7 	bl	800ac54 <I2C_TransferConfig>
 800a6e6:	e00f      	b.n	800a708 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6ec:	b29a      	uxth	r2, r3
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6f6:	b2da      	uxtb	r2, r3
 800a6f8:	8979      	ldrh	r1, [r7, #10]
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	9300      	str	r3, [sp, #0]
 800a6fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a702:	68f8      	ldr	r0, [r7, #12]
 800a704:	f000 faa6 	bl	800ac54 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a70c:	b29b      	uxth	r3, r3
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d19a      	bne.n	800a648 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a712:	697a      	ldr	r2, [r7, #20]
 800a714:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a716:	68f8      	ldr	r0, [r7, #12]
 800a718:	f000 f974 	bl	800aa04 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a71c:	4603      	mov	r3, r0
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d001      	beq.n	800a726 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800a722:	2301      	movs	r3, #1
 800a724:	e01a      	b.n	800a75c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	2220      	movs	r2, #32
 800a72c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	6859      	ldr	r1, [r3, #4]
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681a      	ldr	r2, [r3, #0]
 800a738:	4b0b      	ldr	r3, [pc, #44]	; (800a768 <HAL_I2C_Mem_Read+0x230>)
 800a73a:	400b      	ands	r3, r1
 800a73c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2220      	movs	r2, #32
 800a742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	2200      	movs	r2, #0
 800a74a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	2200      	movs	r2, #0
 800a752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a756:	2300      	movs	r3, #0
 800a758:	e000      	b.n	800a75c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800a75a:	2302      	movs	r3, #2
  }
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3718      	adds	r7, #24
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}
 800a764:	80002400 	.word	0x80002400
 800a768:	fe00e800 	.word	0xfe00e800

0800a76c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b086      	sub	sp, #24
 800a770:	af02      	add	r7, sp, #8
 800a772:	60f8      	str	r0, [r7, #12]
 800a774:	4608      	mov	r0, r1
 800a776:	4611      	mov	r1, r2
 800a778:	461a      	mov	r2, r3
 800a77a:	4603      	mov	r3, r0
 800a77c:	817b      	strh	r3, [r7, #10]
 800a77e:	460b      	mov	r3, r1
 800a780:	813b      	strh	r3, [r7, #8]
 800a782:	4613      	mov	r3, r2
 800a784:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a786:	88fb      	ldrh	r3, [r7, #6]
 800a788:	b2da      	uxtb	r2, r3
 800a78a:	8979      	ldrh	r1, [r7, #10]
 800a78c:	4b20      	ldr	r3, [pc, #128]	; (800a810 <I2C_RequestMemoryWrite+0xa4>)
 800a78e:	9300      	str	r3, [sp, #0]
 800a790:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a794:	68f8      	ldr	r0, [r7, #12]
 800a796:	f000 fa5d 	bl	800ac54 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a79a:	69fa      	ldr	r2, [r7, #28]
 800a79c:	69b9      	ldr	r1, [r7, #24]
 800a79e:	68f8      	ldr	r0, [r7, #12]
 800a7a0:	f000 f8f0 	bl	800a984 <I2C_WaitOnTXISFlagUntilTimeout>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d001      	beq.n	800a7ae <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	e02c      	b.n	800a808 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a7ae:	88fb      	ldrh	r3, [r7, #6]
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	d105      	bne.n	800a7c0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a7b4:	893b      	ldrh	r3, [r7, #8]
 800a7b6:	b2da      	uxtb	r2, r3
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	629a      	str	r2, [r3, #40]	; 0x28
 800a7be:	e015      	b.n	800a7ec <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a7c0:	893b      	ldrh	r3, [r7, #8]
 800a7c2:	0a1b      	lsrs	r3, r3, #8
 800a7c4:	b29b      	uxth	r3, r3
 800a7c6:	b2da      	uxtb	r2, r3
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a7ce:	69fa      	ldr	r2, [r7, #28]
 800a7d0:	69b9      	ldr	r1, [r7, #24]
 800a7d2:	68f8      	ldr	r0, [r7, #12]
 800a7d4:	f000 f8d6 	bl	800a984 <I2C_WaitOnTXISFlagUntilTimeout>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d001      	beq.n	800a7e2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800a7de:	2301      	movs	r3, #1
 800a7e0:	e012      	b.n	800a808 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a7e2:	893b      	ldrh	r3, [r7, #8]
 800a7e4:	b2da      	uxtb	r2, r3
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a7ec:	69fb      	ldr	r3, [r7, #28]
 800a7ee:	9300      	str	r3, [sp, #0]
 800a7f0:	69bb      	ldr	r3, [r7, #24]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	2180      	movs	r1, #128	; 0x80
 800a7f6:	68f8      	ldr	r0, [r7, #12]
 800a7f8:	f000 f884 	bl	800a904 <I2C_WaitOnFlagUntilTimeout>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d001      	beq.n	800a806 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800a802:	2301      	movs	r3, #1
 800a804:	e000      	b.n	800a808 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800a806:	2300      	movs	r3, #0
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3710      	adds	r7, #16
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}
 800a810:	80002000 	.word	0x80002000

0800a814 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b086      	sub	sp, #24
 800a818:	af02      	add	r7, sp, #8
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	4608      	mov	r0, r1
 800a81e:	4611      	mov	r1, r2
 800a820:	461a      	mov	r2, r3
 800a822:	4603      	mov	r3, r0
 800a824:	817b      	strh	r3, [r7, #10]
 800a826:	460b      	mov	r3, r1
 800a828:	813b      	strh	r3, [r7, #8]
 800a82a:	4613      	mov	r3, r2
 800a82c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a82e:	88fb      	ldrh	r3, [r7, #6]
 800a830:	b2da      	uxtb	r2, r3
 800a832:	8979      	ldrh	r1, [r7, #10]
 800a834:	4b20      	ldr	r3, [pc, #128]	; (800a8b8 <I2C_RequestMemoryRead+0xa4>)
 800a836:	9300      	str	r3, [sp, #0]
 800a838:	2300      	movs	r3, #0
 800a83a:	68f8      	ldr	r0, [r7, #12]
 800a83c:	f000 fa0a 	bl	800ac54 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a840:	69fa      	ldr	r2, [r7, #28]
 800a842:	69b9      	ldr	r1, [r7, #24]
 800a844:	68f8      	ldr	r0, [r7, #12]
 800a846:	f000 f89d 	bl	800a984 <I2C_WaitOnTXISFlagUntilTimeout>
 800a84a:	4603      	mov	r3, r0
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d001      	beq.n	800a854 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a850:	2301      	movs	r3, #1
 800a852:	e02c      	b.n	800a8ae <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a854:	88fb      	ldrh	r3, [r7, #6]
 800a856:	2b01      	cmp	r3, #1
 800a858:	d105      	bne.n	800a866 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a85a:	893b      	ldrh	r3, [r7, #8]
 800a85c:	b2da      	uxtb	r2, r3
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	629a      	str	r2, [r3, #40]	; 0x28
 800a864:	e015      	b.n	800a892 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a866:	893b      	ldrh	r3, [r7, #8]
 800a868:	0a1b      	lsrs	r3, r3, #8
 800a86a:	b29b      	uxth	r3, r3
 800a86c:	b2da      	uxtb	r2, r3
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a874:	69fa      	ldr	r2, [r7, #28]
 800a876:	69b9      	ldr	r1, [r7, #24]
 800a878:	68f8      	ldr	r0, [r7, #12]
 800a87a:	f000 f883 	bl	800a984 <I2C_WaitOnTXISFlagUntilTimeout>
 800a87e:	4603      	mov	r3, r0
 800a880:	2b00      	cmp	r3, #0
 800a882:	d001      	beq.n	800a888 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a884:	2301      	movs	r3, #1
 800a886:	e012      	b.n	800a8ae <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a888:	893b      	ldrh	r3, [r7, #8]
 800a88a:	b2da      	uxtb	r2, r3
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a892:	69fb      	ldr	r3, [r7, #28]
 800a894:	9300      	str	r3, [sp, #0]
 800a896:	69bb      	ldr	r3, [r7, #24]
 800a898:	2200      	movs	r2, #0
 800a89a:	2140      	movs	r1, #64	; 0x40
 800a89c:	68f8      	ldr	r0, [r7, #12]
 800a89e:	f000 f831 	bl	800a904 <I2C_WaitOnFlagUntilTimeout>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d001      	beq.n	800a8ac <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	e000      	b.n	800a8ae <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a8ac:	2300      	movs	r3, #0
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3710      	adds	r7, #16
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}
 800a8b6:	bf00      	nop
 800a8b8:	80002000 	.word	0x80002000

0800a8bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b083      	sub	sp, #12
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	699b      	ldr	r3, [r3, #24]
 800a8ca:	f003 0302 	and.w	r3, r3, #2
 800a8ce:	2b02      	cmp	r3, #2
 800a8d0:	d103      	bne.n	800a8da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	699b      	ldr	r3, [r3, #24]
 800a8e0:	f003 0301 	and.w	r3, r3, #1
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	d007      	beq.n	800a8f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	699a      	ldr	r2, [r3, #24]
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f042 0201 	orr.w	r2, r2, #1
 800a8f6:	619a      	str	r2, [r3, #24]
  }
}
 800a8f8:	bf00      	nop
 800a8fa:	370c      	adds	r7, #12
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a902:	4770      	bx	lr

0800a904 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b084      	sub	sp, #16
 800a908:	af00      	add	r7, sp, #0
 800a90a:	60f8      	str	r0, [r7, #12]
 800a90c:	60b9      	str	r1, [r7, #8]
 800a90e:	603b      	str	r3, [r7, #0]
 800a910:	4613      	mov	r3, r2
 800a912:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a914:	e022      	b.n	800a95c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a91c:	d01e      	beq.n	800a95c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a91e:	f7fd fc45 	bl	80081ac <HAL_GetTick>
 800a922:	4602      	mov	r2, r0
 800a924:	69bb      	ldr	r3, [r7, #24]
 800a926:	1ad3      	subs	r3, r2, r3
 800a928:	683a      	ldr	r2, [r7, #0]
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d302      	bcc.n	800a934 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d113      	bne.n	800a95c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a938:	f043 0220 	orr.w	r2, r3, #32
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	2220      	movs	r2, #32
 800a944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	2200      	movs	r2, #0
 800a94c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2200      	movs	r2, #0
 800a954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a958:	2301      	movs	r3, #1
 800a95a:	e00f      	b.n	800a97c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	699a      	ldr	r2, [r3, #24]
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	4013      	ands	r3, r2
 800a966:	68ba      	ldr	r2, [r7, #8]
 800a968:	429a      	cmp	r2, r3
 800a96a:	bf0c      	ite	eq
 800a96c:	2301      	moveq	r3, #1
 800a96e:	2300      	movne	r3, #0
 800a970:	b2db      	uxtb	r3, r3
 800a972:	461a      	mov	r2, r3
 800a974:	79fb      	ldrb	r3, [r7, #7]
 800a976:	429a      	cmp	r2, r3
 800a978:	d0cd      	beq.n	800a916 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a97a:	2300      	movs	r3, #0
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3710      	adds	r7, #16
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}

0800a984 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b084      	sub	sp, #16
 800a988:	af00      	add	r7, sp, #0
 800a98a:	60f8      	str	r0, [r7, #12]
 800a98c:	60b9      	str	r1, [r7, #8]
 800a98e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a990:	e02c      	b.n	800a9ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a992:	687a      	ldr	r2, [r7, #4]
 800a994:	68b9      	ldr	r1, [r7, #8]
 800a996:	68f8      	ldr	r0, [r7, #12]
 800a998:	f000 f870 	bl	800aa7c <I2C_IsErrorOccurred>
 800a99c:	4603      	mov	r3, r0
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d001      	beq.n	800a9a6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	e02a      	b.n	800a9fc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9ac:	d01e      	beq.n	800a9ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a9ae:	f7fd fbfd 	bl	80081ac <HAL_GetTick>
 800a9b2:	4602      	mov	r2, r0
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	1ad3      	subs	r3, r2, r3
 800a9b8:	68ba      	ldr	r2, [r7, #8]
 800a9ba:	429a      	cmp	r2, r3
 800a9bc:	d302      	bcc.n	800a9c4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d113      	bne.n	800a9ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9c8:	f043 0220 	orr.w	r2, r3, #32
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	2220      	movs	r2, #32
 800a9d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	e007      	b.n	800a9fc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	699b      	ldr	r3, [r3, #24]
 800a9f2:	f003 0302 	and.w	r3, r3, #2
 800a9f6:	2b02      	cmp	r3, #2
 800a9f8:	d1cb      	bne.n	800a992 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a9fa:	2300      	movs	r3, #0
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3710      	adds	r7, #16
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b084      	sub	sp, #16
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	60f8      	str	r0, [r7, #12]
 800aa0c:	60b9      	str	r1, [r7, #8]
 800aa0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800aa10:	e028      	b.n	800aa64 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800aa12:	687a      	ldr	r2, [r7, #4]
 800aa14:	68b9      	ldr	r1, [r7, #8]
 800aa16:	68f8      	ldr	r0, [r7, #12]
 800aa18:	f000 f830 	bl	800aa7c <I2C_IsErrorOccurred>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d001      	beq.n	800aa26 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800aa22:	2301      	movs	r3, #1
 800aa24:	e026      	b.n	800aa74 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa26:	f7fd fbc1 	bl	80081ac <HAL_GetTick>
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	1ad3      	subs	r3, r2, r3
 800aa30:	68ba      	ldr	r2, [r7, #8]
 800aa32:	429a      	cmp	r2, r3
 800aa34:	d302      	bcc.n	800aa3c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d113      	bne.n	800aa64 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa40:	f043 0220 	orr.w	r2, r3, #32
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2220      	movs	r2, #32
 800aa4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	2200      	movs	r2, #0
 800aa54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800aa60:	2301      	movs	r3, #1
 800aa62:	e007      	b.n	800aa74 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	699b      	ldr	r3, [r3, #24]
 800aa6a:	f003 0320 	and.w	r3, r3, #32
 800aa6e:	2b20      	cmp	r3, #32
 800aa70:	d1cf      	bne.n	800aa12 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800aa72:	2300      	movs	r3, #0
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3710      	adds	r7, #16
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b08a      	sub	sp, #40	; 0x28
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	60f8      	str	r0, [r7, #12]
 800aa84:	60b9      	str	r1, [r7, #8]
 800aa86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	699b      	ldr	r3, [r3, #24]
 800aa94:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800aa96:	2300      	movs	r3, #0
 800aa98:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800aa9e:	69bb      	ldr	r3, [r7, #24]
 800aaa0:	f003 0310 	and.w	r3, r3, #16
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d075      	beq.n	800ab94 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	2210      	movs	r2, #16
 800aaae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800aab0:	e056      	b.n	800ab60 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aab8:	d052      	beq.n	800ab60 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800aaba:	f7fd fb77 	bl	80081ac <HAL_GetTick>
 800aabe:	4602      	mov	r2, r0
 800aac0:	69fb      	ldr	r3, [r7, #28]
 800aac2:	1ad3      	subs	r3, r2, r3
 800aac4:	68ba      	ldr	r2, [r7, #8]
 800aac6:	429a      	cmp	r2, r3
 800aac8:	d302      	bcc.n	800aad0 <I2C_IsErrorOccurred+0x54>
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d147      	bne.n	800ab60 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	685b      	ldr	r3, [r3, #4]
 800aad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aada:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800aae2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	699b      	ldr	r3, [r3, #24]
 800aaea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aaee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aaf2:	d12e      	bne.n	800ab52 <I2C_IsErrorOccurred+0xd6>
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aafa:	d02a      	beq.n	800ab52 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800aafc:	7cfb      	ldrb	r3, [r7, #19]
 800aafe:	2b20      	cmp	r3, #32
 800ab00:	d027      	beq.n	800ab52 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	685a      	ldr	r2, [r3, #4]
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ab10:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800ab12:	f7fd fb4b 	bl	80081ac <HAL_GetTick>
 800ab16:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ab18:	e01b      	b.n	800ab52 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800ab1a:	f7fd fb47 	bl	80081ac <HAL_GetTick>
 800ab1e:	4602      	mov	r2, r0
 800ab20:	69fb      	ldr	r3, [r7, #28]
 800ab22:	1ad3      	subs	r3, r2, r3
 800ab24:	2b19      	cmp	r3, #25
 800ab26:	d914      	bls.n	800ab52 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab2c:	f043 0220 	orr.w	r2, r3, #32
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	2220      	movs	r2, #32
 800ab38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	2200      	movs	r2, #0
 800ab48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	699b      	ldr	r3, [r3, #24]
 800ab58:	f003 0320 	and.w	r3, r3, #32
 800ab5c:	2b20      	cmp	r3, #32
 800ab5e:	d1dc      	bne.n	800ab1a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	699b      	ldr	r3, [r3, #24]
 800ab66:	f003 0320 	and.w	r3, r3, #32
 800ab6a:	2b20      	cmp	r3, #32
 800ab6c:	d003      	beq.n	800ab76 <I2C_IsErrorOccurred+0xfa>
 800ab6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d09d      	beq.n	800aab2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800ab76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d103      	bne.n	800ab86 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	2220      	movs	r2, #32
 800ab84:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800ab86:	6a3b      	ldr	r3, [r7, #32]
 800ab88:	f043 0304 	orr.w	r3, r3, #4
 800ab8c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800ab8e:	2301      	movs	r3, #1
 800ab90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	699b      	ldr	r3, [r3, #24]
 800ab9a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800ab9c:	69bb      	ldr	r3, [r7, #24]
 800ab9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d00b      	beq.n	800abbe <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800aba6:	6a3b      	ldr	r3, [r7, #32]
 800aba8:	f043 0301 	orr.w	r3, r3, #1
 800abac:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800abb6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800abb8:	2301      	movs	r3, #1
 800abba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800abbe:	69bb      	ldr	r3, [r7, #24]
 800abc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d00b      	beq.n	800abe0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800abc8:	6a3b      	ldr	r3, [r7, #32]
 800abca:	f043 0308 	orr.w	r3, r3, #8
 800abce:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800abd8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800abda:	2301      	movs	r3, #1
 800abdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800abe0:	69bb      	ldr	r3, [r7, #24]
 800abe2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d00b      	beq.n	800ac02 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800abea:	6a3b      	ldr	r3, [r7, #32]
 800abec:	f043 0302 	orr.w	r3, r3, #2
 800abf0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800abfa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800abfc:	2301      	movs	r3, #1
 800abfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800ac02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d01c      	beq.n	800ac44 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ac0a:	68f8      	ldr	r0, [r7, #12]
 800ac0c:	f7ff fe56 	bl	800a8bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	6859      	ldr	r1, [r3, #4]
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681a      	ldr	r2, [r3, #0]
 800ac1a:	4b0d      	ldr	r3, [pc, #52]	; (800ac50 <I2C_IsErrorOccurred+0x1d4>)
 800ac1c:	400b      	ands	r3, r1
 800ac1e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac24:	6a3b      	ldr	r3, [r7, #32]
 800ac26:	431a      	orrs	r2, r3
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2220      	movs	r2, #32
 800ac30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2200      	movs	r2, #0
 800ac38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800ac44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3728      	adds	r7, #40	; 0x28
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}
 800ac50:	fe00e800 	.word	0xfe00e800

0800ac54 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b087      	sub	sp, #28
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	60f8      	str	r0, [r7, #12]
 800ac5c:	607b      	str	r3, [r7, #4]
 800ac5e:	460b      	mov	r3, r1
 800ac60:	817b      	strh	r3, [r7, #10]
 800ac62:	4613      	mov	r3, r2
 800ac64:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ac66:	897b      	ldrh	r3, [r7, #10]
 800ac68:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ac6c:	7a7b      	ldrb	r3, [r7, #9]
 800ac6e:	041b      	lsls	r3, r3, #16
 800ac70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ac74:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ac7a:	6a3b      	ldr	r3, [r7, #32]
 800ac7c:	4313      	orrs	r3, r2
 800ac7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac82:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	685a      	ldr	r2, [r3, #4]
 800ac8a:	6a3b      	ldr	r3, [r7, #32]
 800ac8c:	0d5b      	lsrs	r3, r3, #21
 800ac8e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800ac92:	4b08      	ldr	r3, [pc, #32]	; (800acb4 <I2C_TransferConfig+0x60>)
 800ac94:	430b      	orrs	r3, r1
 800ac96:	43db      	mvns	r3, r3
 800ac98:	ea02 0103 	and.w	r1, r2, r3
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	697a      	ldr	r2, [r7, #20]
 800aca2:	430a      	orrs	r2, r1
 800aca4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800aca6:	bf00      	nop
 800aca8:	371c      	adds	r7, #28
 800acaa:	46bd      	mov	sp, r7
 800acac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb0:	4770      	bx	lr
 800acb2:	bf00      	nop
 800acb4:	03ff63ff 	.word	0x03ff63ff

0800acb8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800acb8:	b480      	push	{r7}
 800acba:	b083      	sub	sp, #12
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800acc8:	b2db      	uxtb	r3, r3
 800acca:	2b20      	cmp	r3, #32
 800accc:	d138      	bne.n	800ad40 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d101      	bne.n	800acdc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800acd8:	2302      	movs	r3, #2
 800acda:	e032      	b.n	800ad42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2201      	movs	r2, #1
 800ace0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2224      	movs	r2, #36	; 0x24
 800ace8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	681a      	ldr	r2, [r3, #0]
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f022 0201 	bic.w	r2, r2, #1
 800acfa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	681a      	ldr	r2, [r3, #0]
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ad0a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	6819      	ldr	r1, [r3, #0]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	683a      	ldr	r2, [r7, #0]
 800ad18:	430a      	orrs	r2, r1
 800ad1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	681a      	ldr	r2, [r3, #0]
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f042 0201 	orr.w	r2, r2, #1
 800ad2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2220      	movs	r2, #32
 800ad30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2200      	movs	r2, #0
 800ad38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	e000      	b.n	800ad42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ad40:	2302      	movs	r3, #2
  }
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	370c      	adds	r7, #12
 800ad46:	46bd      	mov	sp, r7
 800ad48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4c:	4770      	bx	lr

0800ad4e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ad4e:	b480      	push	{r7}
 800ad50:	b085      	sub	sp, #20
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	6078      	str	r0, [r7, #4]
 800ad56:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad5e:	b2db      	uxtb	r3, r3
 800ad60:	2b20      	cmp	r3, #32
 800ad62:	d139      	bne.n	800add8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ad6a:	2b01      	cmp	r3, #1
 800ad6c:	d101      	bne.n	800ad72 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ad6e:	2302      	movs	r3, #2
 800ad70:	e033      	b.n	800adda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2201      	movs	r2, #1
 800ad76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2224      	movs	r2, #36	; 0x24
 800ad7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	681a      	ldr	r2, [r3, #0]
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f022 0201 	bic.w	r2, r2, #1
 800ad90:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ada0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	021b      	lsls	r3, r3, #8
 800ada6:	68fa      	ldr	r2, [r7, #12]
 800ada8:	4313      	orrs	r3, r2
 800adaa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	68fa      	ldr	r2, [r7, #12]
 800adb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	681a      	ldr	r2, [r3, #0]
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f042 0201 	orr.w	r2, r2, #1
 800adc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2220      	movs	r2, #32
 800adc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2200      	movs	r2, #0
 800add0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800add4:	2300      	movs	r3, #0
 800add6:	e000      	b.n	800adda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800add8:	2302      	movs	r3, #2
  }
}
 800adda:	4618      	mov	r0, r3
 800addc:	3714      	adds	r7, #20
 800adde:	46bd      	mov	sp, r7
 800ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade4:	4770      	bx	lr

0800ade6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800ade6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ade8:	b08b      	sub	sp, #44	; 0x2c
 800adea:	af06      	add	r7, sp, #24
 800adec:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d101      	bne.n	800adf8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800adf4:	2301      	movs	r3, #1
 800adf6:	e0d7      	b.n	800afa8 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800adfe:	b2db      	uxtb	r3, r3
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d106      	bne.n	800ae12 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2200      	movs	r2, #0
 800ae08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f00c fb25 	bl	801745c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2203      	movs	r2, #3
 800ae16:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f006 f955 	bl	80110ce <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ae24:	2300      	movs	r3, #0
 800ae26:	73fb      	strb	r3, [r7, #15]
 800ae28:	e04c      	b.n	800aec4 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800ae2a:	7bfb      	ldrb	r3, [r7, #15]
 800ae2c:	6879      	ldr	r1, [r7, #4]
 800ae2e:	1c5a      	adds	r2, r3, #1
 800ae30:	4613      	mov	r3, r2
 800ae32:	009b      	lsls	r3, r3, #2
 800ae34:	4413      	add	r3, r2
 800ae36:	00db      	lsls	r3, r3, #3
 800ae38:	440b      	add	r3, r1
 800ae3a:	3301      	adds	r3, #1
 800ae3c:	2201      	movs	r2, #1
 800ae3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800ae40:	7bfb      	ldrb	r3, [r7, #15]
 800ae42:	6879      	ldr	r1, [r7, #4]
 800ae44:	1c5a      	adds	r2, r3, #1
 800ae46:	4613      	mov	r3, r2
 800ae48:	009b      	lsls	r3, r3, #2
 800ae4a:	4413      	add	r3, r2
 800ae4c:	00db      	lsls	r3, r3, #3
 800ae4e:	440b      	add	r3, r1
 800ae50:	7bfa      	ldrb	r2, [r7, #15]
 800ae52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800ae54:	7bfa      	ldrb	r2, [r7, #15]
 800ae56:	7bfb      	ldrb	r3, [r7, #15]
 800ae58:	b298      	uxth	r0, r3
 800ae5a:	6879      	ldr	r1, [r7, #4]
 800ae5c:	4613      	mov	r3, r2
 800ae5e:	009b      	lsls	r3, r3, #2
 800ae60:	4413      	add	r3, r2
 800ae62:	00db      	lsls	r3, r3, #3
 800ae64:	440b      	add	r3, r1
 800ae66:	3336      	adds	r3, #54	; 0x36
 800ae68:	4602      	mov	r2, r0
 800ae6a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ae6c:	7bfb      	ldrb	r3, [r7, #15]
 800ae6e:	6879      	ldr	r1, [r7, #4]
 800ae70:	1c5a      	adds	r2, r3, #1
 800ae72:	4613      	mov	r3, r2
 800ae74:	009b      	lsls	r3, r3, #2
 800ae76:	4413      	add	r3, r2
 800ae78:	00db      	lsls	r3, r3, #3
 800ae7a:	440b      	add	r3, r1
 800ae7c:	3303      	adds	r3, #3
 800ae7e:	2200      	movs	r2, #0
 800ae80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800ae82:	7bfa      	ldrb	r2, [r7, #15]
 800ae84:	6879      	ldr	r1, [r7, #4]
 800ae86:	4613      	mov	r3, r2
 800ae88:	009b      	lsls	r3, r3, #2
 800ae8a:	4413      	add	r3, r2
 800ae8c:	00db      	lsls	r3, r3, #3
 800ae8e:	440b      	add	r3, r1
 800ae90:	3338      	adds	r3, #56	; 0x38
 800ae92:	2200      	movs	r2, #0
 800ae94:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800ae96:	7bfa      	ldrb	r2, [r7, #15]
 800ae98:	6879      	ldr	r1, [r7, #4]
 800ae9a:	4613      	mov	r3, r2
 800ae9c:	009b      	lsls	r3, r3, #2
 800ae9e:	4413      	add	r3, r2
 800aea0:	00db      	lsls	r3, r3, #3
 800aea2:	440b      	add	r3, r1
 800aea4:	333c      	adds	r3, #60	; 0x3c
 800aea6:	2200      	movs	r2, #0
 800aea8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800aeaa:	7bfa      	ldrb	r2, [r7, #15]
 800aeac:	6879      	ldr	r1, [r7, #4]
 800aeae:	4613      	mov	r3, r2
 800aeb0:	009b      	lsls	r3, r3, #2
 800aeb2:	4413      	add	r3, r2
 800aeb4:	00db      	lsls	r3, r3, #3
 800aeb6:	440b      	add	r3, r1
 800aeb8:	3340      	adds	r3, #64	; 0x40
 800aeba:	2200      	movs	r2, #0
 800aebc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aebe:	7bfb      	ldrb	r3, [r7, #15]
 800aec0:	3301      	adds	r3, #1
 800aec2:	73fb      	strb	r3, [r7, #15]
 800aec4:	7bfa      	ldrb	r2, [r7, #15]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d3ad      	bcc.n	800ae2a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aece:	2300      	movs	r3, #0
 800aed0:	73fb      	strb	r3, [r7, #15]
 800aed2:	e044      	b.n	800af5e <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800aed4:	7bfa      	ldrb	r2, [r7, #15]
 800aed6:	6879      	ldr	r1, [r7, #4]
 800aed8:	4613      	mov	r3, r2
 800aeda:	009b      	lsls	r3, r3, #2
 800aedc:	4413      	add	r3, r2
 800aede:	00db      	lsls	r3, r3, #3
 800aee0:	440b      	add	r3, r1
 800aee2:	f203 1369 	addw	r3, r3, #361	; 0x169
 800aee6:	2200      	movs	r2, #0
 800aee8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800aeea:	7bfa      	ldrb	r2, [r7, #15]
 800aeec:	6879      	ldr	r1, [r7, #4]
 800aeee:	4613      	mov	r3, r2
 800aef0:	009b      	lsls	r3, r3, #2
 800aef2:	4413      	add	r3, r2
 800aef4:	00db      	lsls	r3, r3, #3
 800aef6:	440b      	add	r3, r1
 800aef8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800aefc:	7bfa      	ldrb	r2, [r7, #15]
 800aefe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800af00:	7bfa      	ldrb	r2, [r7, #15]
 800af02:	6879      	ldr	r1, [r7, #4]
 800af04:	4613      	mov	r3, r2
 800af06:	009b      	lsls	r3, r3, #2
 800af08:	4413      	add	r3, r2
 800af0a:	00db      	lsls	r3, r3, #3
 800af0c:	440b      	add	r3, r1
 800af0e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800af12:	2200      	movs	r2, #0
 800af14:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800af16:	7bfa      	ldrb	r2, [r7, #15]
 800af18:	6879      	ldr	r1, [r7, #4]
 800af1a:	4613      	mov	r3, r2
 800af1c:	009b      	lsls	r3, r3, #2
 800af1e:	4413      	add	r3, r2
 800af20:	00db      	lsls	r3, r3, #3
 800af22:	440b      	add	r3, r1
 800af24:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800af28:	2200      	movs	r2, #0
 800af2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800af2c:	7bfa      	ldrb	r2, [r7, #15]
 800af2e:	6879      	ldr	r1, [r7, #4]
 800af30:	4613      	mov	r3, r2
 800af32:	009b      	lsls	r3, r3, #2
 800af34:	4413      	add	r3, r2
 800af36:	00db      	lsls	r3, r3, #3
 800af38:	440b      	add	r3, r1
 800af3a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800af3e:	2200      	movs	r2, #0
 800af40:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800af42:	7bfa      	ldrb	r2, [r7, #15]
 800af44:	6879      	ldr	r1, [r7, #4]
 800af46:	4613      	mov	r3, r2
 800af48:	009b      	lsls	r3, r3, #2
 800af4a:	4413      	add	r3, r2
 800af4c:	00db      	lsls	r3, r3, #3
 800af4e:	440b      	add	r3, r1
 800af50:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800af54:	2200      	movs	r2, #0
 800af56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800af58:	7bfb      	ldrb	r3, [r7, #15]
 800af5a:	3301      	adds	r3, #1
 800af5c:	73fb      	strb	r3, [r7, #15]
 800af5e:	7bfa      	ldrb	r2, [r7, #15]
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	685b      	ldr	r3, [r3, #4]
 800af64:	429a      	cmp	r2, r3
 800af66:	d3b5      	bcc.n	800aed4 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	603b      	str	r3, [r7, #0]
 800af6e:	687e      	ldr	r6, [r7, #4]
 800af70:	466d      	mov	r5, sp
 800af72:	f106 0410 	add.w	r4, r6, #16
 800af76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800af78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800af7a:	6823      	ldr	r3, [r4, #0]
 800af7c:	602b      	str	r3, [r5, #0]
 800af7e:	1d33      	adds	r3, r6, #4
 800af80:	cb0e      	ldmia	r3, {r1, r2, r3}
 800af82:	6838      	ldr	r0, [r7, #0]
 800af84:	f006 f8be 	bl	8011104 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2200      	movs	r2, #0
 800af8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2201      	movs	r2, #1
 800af94:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	69db      	ldr	r3, [r3, #28]
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d102      	bne.n	800afa6 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f001 fc29 	bl	800c7f8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800afa6:	2300      	movs	r3, #0
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	3714      	adds	r7, #20
 800afac:	46bd      	mov	sp, r7
 800afae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800afb0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b082      	sub	sp, #8
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	d101      	bne.n	800afc6 <HAL_PCD_Start+0x16>
 800afc2:	2302      	movs	r3, #2
 800afc4:	e012      	b.n	800afec <HAL_PCD_Start+0x3c>
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2201      	movs	r2, #1
 800afca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	4618      	mov	r0, r3
 800afd4:	f006 f864 	bl	80110a0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	4618      	mov	r0, r3
 800afde:	f008 fa7d 	bl	80134dc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2200      	movs	r2, #0
 800afe6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800afea:	2300      	movs	r3, #0
}
 800afec:	4618      	mov	r0, r3
 800afee:	3708      	adds	r7, #8
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}

0800aff4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b084      	sub	sp, #16
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	4618      	mov	r0, r3
 800b002:	f008 fa82 	bl	801350a <USB_ReadInterrupts>
 800b006:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d003      	beq.n	800b01a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f000 fb26 	bl	800b664 <PCD_EP_ISR_Handler>

    return;
 800b018:	e110      	b.n	800b23c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b020:	2b00      	cmp	r3, #0
 800b022:	d013      	beq.n	800b04c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b02c:	b29a      	uxth	r2, r3
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b036:	b292      	uxth	r2, r2
 800b038:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f00c fa9e 	bl	801757e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800b042:	2100      	movs	r1, #0
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f000 f8fc 	bl	800b242 <HAL_PCD_SetAddress>

    return;
 800b04a:	e0f7      	b.n	800b23c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b052:	2b00      	cmp	r3, #0
 800b054:	d00c      	beq.n	800b070 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b05e:	b29a      	uxth	r2, r3
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b068:	b292      	uxth	r2, r2
 800b06a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800b06e:	e0e5      	b.n	800b23c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b076:	2b00      	cmp	r3, #0
 800b078:	d00c      	beq.n	800b094 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b082:	b29a      	uxth	r2, r3
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b08c:	b292      	uxth	r2, r2
 800b08e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800b092:	e0d3      	b.n	800b23c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d034      	beq.n	800b108 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b0a6:	b29a      	uxth	r2, r3
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f022 0204 	bic.w	r2, r2, #4
 800b0b0:	b292      	uxth	r2, r2
 800b0b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b0be:	b29a      	uxth	r2, r3
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f022 0208 	bic.w	r2, r2, #8
 800b0c8:	b292      	uxth	r2, r2
 800b0ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800b0d4:	2b01      	cmp	r3, #1
 800b0d6:	d107      	bne.n	800b0e8 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b0e0:	2100      	movs	r1, #0
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	f00c fc40 	bl	8017968 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f00c fa81 	bl	80175f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b0f6:	b29a      	uxth	r2, r3
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b100:	b292      	uxth	r2, r2
 800b102:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800b106:	e099      	b.n	800b23c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d027      	beq.n	800b162 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b11a:	b29a      	uxth	r2, r3
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	f042 0208 	orr.w	r2, r2, #8
 800b124:	b292      	uxth	r2, r2
 800b126:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b132:	b29a      	uxth	r2, r3
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b13c:	b292      	uxth	r2, r2
 800b13e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b14a:	b29a      	uxth	r2, r3
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f042 0204 	orr.w	r2, r2, #4
 800b154:	b292      	uxth	r2, r2
 800b156:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f00c fa2e 	bl	80175bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800b160:	e06c      	b.n	800b23c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d040      	beq.n	800b1ee <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b174:	b29a      	uxth	r2, r3
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b17e:	b292      	uxth	r2, r2
 800b180:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d12b      	bne.n	800b1e6 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b196:	b29a      	uxth	r2, r3
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f042 0204 	orr.w	r2, r2, #4
 800b1a0:	b292      	uxth	r2, r2
 800b1a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b1ae:	b29a      	uxth	r2, r3
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f042 0208 	orr.w	r2, r2, #8
 800b1b8:	b292      	uxth	r2, r2
 800b1ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2201      	movs	r2, #1
 800b1c2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800b1ce:	b29b      	uxth	r3, r3
 800b1d0:	089b      	lsrs	r3, r3, #2
 800b1d2:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800b1dc:	2101      	movs	r1, #1
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f00c fbc2 	bl	8017968 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800b1e4:	e02a      	b.n	800b23c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f00c f9e8 	bl	80175bc <HAL_PCD_SuspendCallback>
    return;
 800b1ec:	e026      	b.n	800b23c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d00f      	beq.n	800b218 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b200:	b29a      	uxth	r2, r3
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b20a:	b292      	uxth	r2, r2
 800b20c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f00c f9a6 	bl	8017562 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800b216:	e011      	b.n	800b23c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d00c      	beq.n	800b23c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b22a:	b29a      	uxth	r2, r3
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b234:	b292      	uxth	r2, r2
 800b236:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800b23a:	bf00      	nop
  }
}
 800b23c:	3710      	adds	r7, #16
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}

0800b242 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b242:	b580      	push	{r7, lr}
 800b244:	b082      	sub	sp, #8
 800b246:	af00      	add	r7, sp, #0
 800b248:	6078      	str	r0, [r7, #4]
 800b24a:	460b      	mov	r3, r1
 800b24c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b254:	2b01      	cmp	r3, #1
 800b256:	d101      	bne.n	800b25c <HAL_PCD_SetAddress+0x1a>
 800b258:	2302      	movs	r3, #2
 800b25a:	e013      	b.n	800b284 <HAL_PCD_SetAddress+0x42>
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2201      	movs	r2, #1
 800b260:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	78fa      	ldrb	r2, [r7, #3]
 800b268:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	78fa      	ldrb	r2, [r7, #3]
 800b272:	4611      	mov	r1, r2
 800b274:	4618      	mov	r0, r3
 800b276:	f008 f91d 	bl	80134b4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2200      	movs	r2, #0
 800b27e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800b282:	2300      	movs	r3, #0
}
 800b284:	4618      	mov	r0, r3
 800b286:	3708      	adds	r7, #8
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}

0800b28c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b084      	sub	sp, #16
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
 800b294:	4608      	mov	r0, r1
 800b296:	4611      	mov	r1, r2
 800b298:	461a      	mov	r2, r3
 800b29a:	4603      	mov	r3, r0
 800b29c:	70fb      	strb	r3, [r7, #3]
 800b29e:	460b      	mov	r3, r1
 800b2a0:	803b      	strh	r3, [r7, #0]
 800b2a2:	4613      	mov	r3, r2
 800b2a4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b2aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	da0e      	bge.n	800b2d0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b2b2:	78fb      	ldrb	r3, [r7, #3]
 800b2b4:	f003 0307 	and.w	r3, r3, #7
 800b2b8:	1c5a      	adds	r2, r3, #1
 800b2ba:	4613      	mov	r3, r2
 800b2bc:	009b      	lsls	r3, r3, #2
 800b2be:	4413      	add	r3, r2
 800b2c0:	00db      	lsls	r3, r3, #3
 800b2c2:	687a      	ldr	r2, [r7, #4]
 800b2c4:	4413      	add	r3, r2
 800b2c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	705a      	strb	r2, [r3, #1]
 800b2ce:	e00e      	b.n	800b2ee <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b2d0:	78fb      	ldrb	r3, [r7, #3]
 800b2d2:	f003 0207 	and.w	r2, r3, #7
 800b2d6:	4613      	mov	r3, r2
 800b2d8:	009b      	lsls	r3, r3, #2
 800b2da:	4413      	add	r3, r2
 800b2dc:	00db      	lsls	r3, r3, #3
 800b2de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b2e2:	687a      	ldr	r2, [r7, #4]
 800b2e4:	4413      	add	r3, r2
 800b2e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b2ee:	78fb      	ldrb	r3, [r7, #3]
 800b2f0:	f003 0307 	and.w	r3, r3, #7
 800b2f4:	b2da      	uxtb	r2, r3
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800b2fa:	883a      	ldrh	r2, [r7, #0]
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	78ba      	ldrb	r2, [r7, #2]
 800b304:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	785b      	ldrb	r3, [r3, #1]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d004      	beq.n	800b318 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	781b      	ldrb	r3, [r3, #0]
 800b312:	b29a      	uxth	r2, r3
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b318:	78bb      	ldrb	r3, [r7, #2]
 800b31a:	2b02      	cmp	r3, #2
 800b31c:	d102      	bne.n	800b324 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	2200      	movs	r2, #0
 800b322:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b32a:	2b01      	cmp	r3, #1
 800b32c:	d101      	bne.n	800b332 <HAL_PCD_EP_Open+0xa6>
 800b32e:	2302      	movs	r3, #2
 800b330:	e00e      	b.n	800b350 <HAL_PCD_EP_Open+0xc4>
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2201      	movs	r2, #1
 800b336:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	68f9      	ldr	r1, [r7, #12]
 800b340:	4618      	mov	r0, r3
 800b342:	f005 ff01 	bl	8011148 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2200      	movs	r2, #0
 800b34a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800b34e:	7afb      	ldrb	r3, [r7, #11]
}
 800b350:	4618      	mov	r0, r3
 800b352:	3710      	adds	r7, #16
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}

0800b358 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b084      	sub	sp, #16
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	460b      	mov	r3, r1
 800b362:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b364:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	da0e      	bge.n	800b38a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b36c:	78fb      	ldrb	r3, [r7, #3]
 800b36e:	f003 0307 	and.w	r3, r3, #7
 800b372:	1c5a      	adds	r2, r3, #1
 800b374:	4613      	mov	r3, r2
 800b376:	009b      	lsls	r3, r3, #2
 800b378:	4413      	add	r3, r2
 800b37a:	00db      	lsls	r3, r3, #3
 800b37c:	687a      	ldr	r2, [r7, #4]
 800b37e:	4413      	add	r3, r2
 800b380:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	2201      	movs	r2, #1
 800b386:	705a      	strb	r2, [r3, #1]
 800b388:	e00e      	b.n	800b3a8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b38a:	78fb      	ldrb	r3, [r7, #3]
 800b38c:	f003 0207 	and.w	r2, r3, #7
 800b390:	4613      	mov	r3, r2
 800b392:	009b      	lsls	r3, r3, #2
 800b394:	4413      	add	r3, r2
 800b396:	00db      	lsls	r3, r3, #3
 800b398:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b39c:	687a      	ldr	r2, [r7, #4]
 800b39e:	4413      	add	r3, r2
 800b3a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800b3a8:	78fb      	ldrb	r3, [r7, #3]
 800b3aa:	f003 0307 	and.w	r3, r3, #7
 800b3ae:	b2da      	uxtb	r2, r3
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b3ba:	2b01      	cmp	r3, #1
 800b3bc:	d101      	bne.n	800b3c2 <HAL_PCD_EP_Close+0x6a>
 800b3be:	2302      	movs	r3, #2
 800b3c0:	e00e      	b.n	800b3e0 <HAL_PCD_EP_Close+0x88>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2201      	movs	r2, #1
 800b3c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	68f9      	ldr	r1, [r7, #12]
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f006 fa4d 	bl	8011870 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800b3de:	2300      	movs	r3, #0
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3710      	adds	r7, #16
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}

0800b3e8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b086      	sub	sp, #24
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	60f8      	str	r0, [r7, #12]
 800b3f0:	607a      	str	r2, [r7, #4]
 800b3f2:	603b      	str	r3, [r7, #0]
 800b3f4:	460b      	mov	r3, r1
 800b3f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b3f8:	7afb      	ldrb	r3, [r7, #11]
 800b3fa:	f003 0207 	and.w	r2, r3, #7
 800b3fe:	4613      	mov	r3, r2
 800b400:	009b      	lsls	r3, r3, #2
 800b402:	4413      	add	r3, r2
 800b404:	00db      	lsls	r3, r3, #3
 800b406:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b40a:	68fa      	ldr	r2, [r7, #12]
 800b40c:	4413      	add	r3, r2
 800b40e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	687a      	ldr	r2, [r7, #4]
 800b414:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	683a      	ldr	r2, [r7, #0]
 800b41a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	2200      	movs	r2, #0
 800b420:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	2200      	movs	r2, #0
 800b426:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b428:	7afb      	ldrb	r3, [r7, #11]
 800b42a:	f003 0307 	and.w	r3, r3, #7
 800b42e:	b2da      	uxtb	r2, r3
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b434:	7afb      	ldrb	r3, [r7, #11]
 800b436:	f003 0307 	and.w	r3, r3, #7
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d106      	bne.n	800b44c <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	6979      	ldr	r1, [r7, #20]
 800b444:	4618      	mov	r0, r3
 800b446:	f006 fc00 	bl	8011c4a <USB_EPStartXfer>
 800b44a:	e005      	b.n	800b458 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	6979      	ldr	r1, [r7, #20]
 800b452:	4618      	mov	r0, r3
 800b454:	f006 fbf9 	bl	8011c4a <USB_EPStartXfer>
  }

  return HAL_OK;
 800b458:	2300      	movs	r3, #0
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3718      	adds	r7, #24
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}

0800b462 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b462:	b480      	push	{r7}
 800b464:	b083      	sub	sp, #12
 800b466:	af00      	add	r7, sp, #0
 800b468:	6078      	str	r0, [r7, #4]
 800b46a:	460b      	mov	r3, r1
 800b46c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b46e:	78fb      	ldrb	r3, [r7, #3]
 800b470:	f003 0207 	and.w	r2, r3, #7
 800b474:	6879      	ldr	r1, [r7, #4]
 800b476:	4613      	mov	r3, r2
 800b478:	009b      	lsls	r3, r3, #2
 800b47a:	4413      	add	r3, r2
 800b47c:	00db      	lsls	r3, r3, #3
 800b47e:	440b      	add	r3, r1
 800b480:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800b484:	681b      	ldr	r3, [r3, #0]
}
 800b486:	4618      	mov	r0, r3
 800b488:	370c      	adds	r7, #12
 800b48a:	46bd      	mov	sp, r7
 800b48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b490:	4770      	bx	lr

0800b492 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b492:	b580      	push	{r7, lr}
 800b494:	b086      	sub	sp, #24
 800b496:	af00      	add	r7, sp, #0
 800b498:	60f8      	str	r0, [r7, #12]
 800b49a:	607a      	str	r2, [r7, #4]
 800b49c:	603b      	str	r3, [r7, #0]
 800b49e:	460b      	mov	r3, r1
 800b4a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b4a2:	7afb      	ldrb	r3, [r7, #11]
 800b4a4:	f003 0307 	and.w	r3, r3, #7
 800b4a8:	1c5a      	adds	r2, r3, #1
 800b4aa:	4613      	mov	r3, r2
 800b4ac:	009b      	lsls	r3, r3, #2
 800b4ae:	4413      	add	r3, r2
 800b4b0:	00db      	lsls	r3, r3, #3
 800b4b2:	68fa      	ldr	r2, [r7, #12]
 800b4b4:	4413      	add	r3, r2
 800b4b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	687a      	ldr	r2, [r7, #4]
 800b4bc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800b4be:	697b      	ldr	r3, [r7, #20]
 800b4c0:	683a      	ldr	r2, [r7, #0]
 800b4c2:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	683a      	ldr	r2, [r7, #0]
 800b4d0:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	2201      	movs	r2, #1
 800b4dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b4de:	7afb      	ldrb	r3, [r7, #11]
 800b4e0:	f003 0307 	and.w	r3, r3, #7
 800b4e4:	b2da      	uxtb	r2, r3
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b4ea:	7afb      	ldrb	r3, [r7, #11]
 800b4ec:	f003 0307 	and.w	r3, r3, #7
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d106      	bne.n	800b502 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	6979      	ldr	r1, [r7, #20]
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f006 fba5 	bl	8011c4a <USB_EPStartXfer>
 800b500:	e005      	b.n	800b50e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	6979      	ldr	r1, [r7, #20]
 800b508:	4618      	mov	r0, r3
 800b50a:	f006 fb9e 	bl	8011c4a <USB_EPStartXfer>
  }

  return HAL_OK;
 800b50e:	2300      	movs	r3, #0
}
 800b510:	4618      	mov	r0, r3
 800b512:	3718      	adds	r7, #24
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b084      	sub	sp, #16
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	460b      	mov	r3, r1
 800b522:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b524:	78fb      	ldrb	r3, [r7, #3]
 800b526:	f003 0207 	and.w	r2, r3, #7
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	685b      	ldr	r3, [r3, #4]
 800b52e:	429a      	cmp	r2, r3
 800b530:	d901      	bls.n	800b536 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800b532:	2301      	movs	r3, #1
 800b534:	e03e      	b.n	800b5b4 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b536:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	da0e      	bge.n	800b55c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b53e:	78fb      	ldrb	r3, [r7, #3]
 800b540:	f003 0307 	and.w	r3, r3, #7
 800b544:	1c5a      	adds	r2, r3, #1
 800b546:	4613      	mov	r3, r2
 800b548:	009b      	lsls	r3, r3, #2
 800b54a:	4413      	add	r3, r2
 800b54c:	00db      	lsls	r3, r3, #3
 800b54e:	687a      	ldr	r2, [r7, #4]
 800b550:	4413      	add	r3, r2
 800b552:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	2201      	movs	r2, #1
 800b558:	705a      	strb	r2, [r3, #1]
 800b55a:	e00c      	b.n	800b576 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b55c:	78fa      	ldrb	r2, [r7, #3]
 800b55e:	4613      	mov	r3, r2
 800b560:	009b      	lsls	r3, r3, #2
 800b562:	4413      	add	r3, r2
 800b564:	00db      	lsls	r3, r3, #3
 800b566:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b56a:	687a      	ldr	r2, [r7, #4]
 800b56c:	4413      	add	r3, r2
 800b56e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	2200      	movs	r2, #0
 800b574:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	2201      	movs	r2, #1
 800b57a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b57c:	78fb      	ldrb	r3, [r7, #3]
 800b57e:	f003 0307 	and.w	r3, r3, #7
 800b582:	b2da      	uxtb	r2, r3
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b58e:	2b01      	cmp	r3, #1
 800b590:	d101      	bne.n	800b596 <HAL_PCD_EP_SetStall+0x7e>
 800b592:	2302      	movs	r3, #2
 800b594:	e00e      	b.n	800b5b4 <HAL_PCD_EP_SetStall+0x9c>
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2201      	movs	r2, #1
 800b59a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	68f9      	ldr	r1, [r7, #12]
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f007 fe86 	bl	80132b6 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800b5b2:	2300      	movs	r3, #0
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	3710      	adds	r7, #16
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}

0800b5bc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b084      	sub	sp, #16
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
 800b5c4:	460b      	mov	r3, r1
 800b5c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b5c8:	78fb      	ldrb	r3, [r7, #3]
 800b5ca:	f003 020f 	and.w	r2, r3, #15
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	685b      	ldr	r3, [r3, #4]
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d901      	bls.n	800b5da <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	e040      	b.n	800b65c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b5da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	da0e      	bge.n	800b600 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b5e2:	78fb      	ldrb	r3, [r7, #3]
 800b5e4:	f003 0307 	and.w	r3, r3, #7
 800b5e8:	1c5a      	adds	r2, r3, #1
 800b5ea:	4613      	mov	r3, r2
 800b5ec:	009b      	lsls	r3, r3, #2
 800b5ee:	4413      	add	r3, r2
 800b5f0:	00db      	lsls	r3, r3, #3
 800b5f2:	687a      	ldr	r2, [r7, #4]
 800b5f4:	4413      	add	r3, r2
 800b5f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	705a      	strb	r2, [r3, #1]
 800b5fe:	e00e      	b.n	800b61e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b600:	78fb      	ldrb	r3, [r7, #3]
 800b602:	f003 0207 	and.w	r2, r3, #7
 800b606:	4613      	mov	r3, r2
 800b608:	009b      	lsls	r3, r3, #2
 800b60a:	4413      	add	r3, r2
 800b60c:	00db      	lsls	r3, r3, #3
 800b60e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b612:	687a      	ldr	r2, [r7, #4]
 800b614:	4413      	add	r3, r2
 800b616:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	2200      	movs	r2, #0
 800b61c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	2200      	movs	r2, #0
 800b622:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b624:	78fb      	ldrb	r3, [r7, #3]
 800b626:	f003 0307 	and.w	r3, r3, #7
 800b62a:	b2da      	uxtb	r2, r3
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b636:	2b01      	cmp	r3, #1
 800b638:	d101      	bne.n	800b63e <HAL_PCD_EP_ClrStall+0x82>
 800b63a:	2302      	movs	r3, #2
 800b63c:	e00e      	b.n	800b65c <HAL_PCD_EP_ClrStall+0xa0>
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2201      	movs	r2, #1
 800b642:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	68f9      	ldr	r1, [r7, #12]
 800b64c:	4618      	mov	r0, r3
 800b64e:	f007 fe83 	bl	8013358 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2200      	movs	r2, #0
 800b656:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800b65a:	2300      	movs	r3, #0
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3710      	adds	r7, #16
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}

0800b664 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b096      	sub	sp, #88	; 0x58
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800b66c:	e39c      	b.n	800bda8 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b676:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800b67a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b67e:	b2db      	uxtb	r3, r3
 800b680:	f003 030f 	and.w	r3, r3, #15
 800b684:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 800b688:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	f040 815e 	bne.w	800b94e <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800b692:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b696:	f003 0310 	and.w	r3, r3, #16
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d150      	bne.n	800b740 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	881b      	ldrh	r3, [r3, #0]
 800b6a4:	b29b      	uxth	r3, r3
 800b6a6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800b6aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6ae:	81fb      	strh	r3, [r7, #14]
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681a      	ldr	r2, [r3, #0]
 800b6b4:	89fb      	ldrh	r3, [r7, #14]
 800b6b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b6ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b6be:	b29b      	uxth	r3, r3
 800b6c0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	3328      	adds	r3, #40	; 0x28
 800b6c6:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b6d0:	b29b      	uxth	r3, r3
 800b6d2:	461a      	mov	r2, r3
 800b6d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6d6:	781b      	ldrb	r3, [r3, #0]
 800b6d8:	00db      	lsls	r3, r3, #3
 800b6da:	4413      	add	r3, r2
 800b6dc:	687a      	ldr	r2, [r7, #4]
 800b6de:	6812      	ldr	r2, [r2, #0]
 800b6e0:	4413      	add	r3, r2
 800b6e2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b6e6:	881b      	ldrh	r3, [r3, #0]
 800b6e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b6ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6ee:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800b6f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6f2:	695a      	ldr	r2, [r3, #20]
 800b6f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6f6:	69db      	ldr	r3, [r3, #28]
 800b6f8:	441a      	add	r2, r3
 800b6fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6fc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800b6fe:	2100      	movs	r1, #0
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f00b ff14 	bl	801752e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b70c:	b2db      	uxtb	r3, r3
 800b70e:	2b00      	cmp	r3, #0
 800b710:	f000 834a 	beq.w	800bda8 <PCD_EP_ISR_Handler+0x744>
 800b714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b716:	699b      	ldr	r3, [r3, #24]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	f040 8345 	bne.w	800bda8 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b724:	b2db      	uxtb	r3, r3
 800b726:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b72a:	b2da      	uxtb	r2, r3
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	b292      	uxth	r2, r2
 800b732:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2200      	movs	r2, #0
 800b73a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800b73e:	e333      	b.n	800bda8 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b746:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	881b      	ldrh	r3, [r3, #0]
 800b74e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800b752:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800b756:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d032      	beq.n	800b7c4 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b766:	b29b      	uxth	r3, r3
 800b768:	461a      	mov	r2, r3
 800b76a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b76c:	781b      	ldrb	r3, [r3, #0]
 800b76e:	00db      	lsls	r3, r3, #3
 800b770:	4413      	add	r3, r2
 800b772:	687a      	ldr	r2, [r7, #4]
 800b774:	6812      	ldr	r2, [r2, #0]
 800b776:	4413      	add	r3, r2
 800b778:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b77c:	881b      	ldrh	r3, [r3, #0]
 800b77e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b784:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6818      	ldr	r0, [r3, #0]
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800b790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b792:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800b794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b796:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800b798:	b29b      	uxth	r3, r3
 800b79a:	f007 ff08 	bl	80135ae <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	881b      	ldrh	r3, [r3, #0]
 800b7a4:	b29a      	uxth	r2, r3
 800b7a6:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b7aa:	4013      	ands	r3, r2
 800b7ac:	823b      	strh	r3, [r7, #16]
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	8a3a      	ldrh	r2, [r7, #16]
 800b7b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b7b8:	b292      	uxth	r2, r2
 800b7ba:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f00b fe89 	bl	80174d4 <HAL_PCD_SetupStageCallback>
 800b7c2:	e2f1      	b.n	800bda8 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800b7c4:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	f280 82ed 	bge.w	800bda8 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	881b      	ldrh	r3, [r3, #0]
 800b7d4:	b29a      	uxth	r2, r3
 800b7d6:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b7da:	4013      	ands	r3, r2
 800b7dc:	83fb      	strh	r3, [r7, #30]
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	8bfa      	ldrh	r2, [r7, #30]
 800b7e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b7e8:	b292      	uxth	r2, r2
 800b7ea:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b7f4:	b29b      	uxth	r3, r3
 800b7f6:	461a      	mov	r2, r3
 800b7f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7fa:	781b      	ldrb	r3, [r3, #0]
 800b7fc:	00db      	lsls	r3, r3, #3
 800b7fe:	4413      	add	r3, r2
 800b800:	687a      	ldr	r2, [r7, #4]
 800b802:	6812      	ldr	r2, [r2, #0]
 800b804:	4413      	add	r3, r2
 800b806:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b80a:	881b      	ldrh	r3, [r3, #0]
 800b80c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b812:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800b814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b816:	69db      	ldr	r3, [r3, #28]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d019      	beq.n	800b850 <PCD_EP_ISR_Handler+0x1ec>
 800b81c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b81e:	695b      	ldr	r3, [r3, #20]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d015      	beq.n	800b850 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6818      	ldr	r0, [r3, #0]
 800b828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b82a:	6959      	ldr	r1, [r3, #20]
 800b82c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b82e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800b830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b832:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800b834:	b29b      	uxth	r3, r3
 800b836:	f007 feba 	bl	80135ae <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800b83a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b83c:	695a      	ldr	r2, [r3, #20]
 800b83e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b840:	69db      	ldr	r3, [r3, #28]
 800b842:	441a      	add	r2, r3
 800b844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b846:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800b848:	2100      	movs	r1, #0
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f00b fe54 	bl	80174f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	881b      	ldrh	r3, [r3, #0]
 800b856:	b29b      	uxth	r3, r3
 800b858:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	f040 82a3 	bne.w	800bda8 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	61bb      	str	r3, [r7, #24]
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b870:	b29b      	uxth	r3, r3
 800b872:	461a      	mov	r2, r3
 800b874:	69bb      	ldr	r3, [r7, #24]
 800b876:	4413      	add	r3, r2
 800b878:	61bb      	str	r3, [r7, #24]
 800b87a:	69bb      	ldr	r3, [r7, #24]
 800b87c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b880:	617b      	str	r3, [r7, #20]
 800b882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b884:	691b      	ldr	r3, [r3, #16]
 800b886:	2b3e      	cmp	r3, #62	; 0x3e
 800b888:	d918      	bls.n	800b8bc <PCD_EP_ISR_Handler+0x258>
 800b88a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b88c:	691b      	ldr	r3, [r3, #16]
 800b88e:	095b      	lsrs	r3, r3, #5
 800b890:	647b      	str	r3, [r7, #68]	; 0x44
 800b892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b894:	691b      	ldr	r3, [r3, #16]
 800b896:	f003 031f 	and.w	r3, r3, #31
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d102      	bne.n	800b8a4 <PCD_EP_ISR_Handler+0x240>
 800b89e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8a0:	3b01      	subs	r3, #1
 800b8a2:	647b      	str	r3, [r7, #68]	; 0x44
 800b8a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8a6:	b29b      	uxth	r3, r3
 800b8a8:	029b      	lsls	r3, r3, #10
 800b8aa:	b29b      	uxth	r3, r3
 800b8ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8b4:	b29a      	uxth	r2, r3
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	801a      	strh	r2, [r3, #0]
 800b8ba:	e029      	b.n	800b910 <PCD_EP_ISR_Handler+0x2ac>
 800b8bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8be:	691b      	ldr	r3, [r3, #16]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d112      	bne.n	800b8ea <PCD_EP_ISR_Handler+0x286>
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	881b      	ldrh	r3, [r3, #0]
 800b8c8:	b29b      	uxth	r3, r3
 800b8ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b8ce:	b29a      	uxth	r2, r3
 800b8d0:	697b      	ldr	r3, [r7, #20]
 800b8d2:	801a      	strh	r2, [r3, #0]
 800b8d4:	697b      	ldr	r3, [r7, #20]
 800b8d6:	881b      	ldrh	r3, [r3, #0]
 800b8d8:	b29b      	uxth	r3, r3
 800b8da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8e2:	b29a      	uxth	r2, r3
 800b8e4:	697b      	ldr	r3, [r7, #20]
 800b8e6:	801a      	strh	r2, [r3, #0]
 800b8e8:	e012      	b.n	800b910 <PCD_EP_ISR_Handler+0x2ac>
 800b8ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8ec:	691b      	ldr	r3, [r3, #16]
 800b8ee:	085b      	lsrs	r3, r3, #1
 800b8f0:	647b      	str	r3, [r7, #68]	; 0x44
 800b8f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8f4:	691b      	ldr	r3, [r3, #16]
 800b8f6:	f003 0301 	and.w	r3, r3, #1
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d002      	beq.n	800b904 <PCD_EP_ISR_Handler+0x2a0>
 800b8fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b900:	3301      	adds	r3, #1
 800b902:	647b      	str	r3, [r7, #68]	; 0x44
 800b904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b906:	b29b      	uxth	r3, r3
 800b908:	029b      	lsls	r3, r3, #10
 800b90a:	b29a      	uxth	r2, r3
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	881b      	ldrh	r3, [r3, #0]
 800b916:	b29b      	uxth	r3, r3
 800b918:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b91c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b920:	827b      	strh	r3, [r7, #18]
 800b922:	8a7b      	ldrh	r3, [r7, #18]
 800b924:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b928:	827b      	strh	r3, [r7, #18]
 800b92a:	8a7b      	ldrh	r3, [r7, #18]
 800b92c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b930:	827b      	strh	r3, [r7, #18]
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681a      	ldr	r2, [r3, #0]
 800b936:	8a7b      	ldrh	r3, [r7, #18]
 800b938:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b93c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b940:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b948:	b29b      	uxth	r3, r3
 800b94a:	8013      	strh	r3, [r2, #0]
 800b94c:	e22c      	b.n	800bda8 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	461a      	mov	r2, r3
 800b954:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800b958:	009b      	lsls	r3, r3, #2
 800b95a:	4413      	add	r3, r2
 800b95c:	881b      	ldrh	r3, [r3, #0]
 800b95e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800b962:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800b966:	2b00      	cmp	r3, #0
 800b968:	f280 80f6 	bge.w	800bb58 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	461a      	mov	r2, r3
 800b972:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800b976:	009b      	lsls	r3, r3, #2
 800b978:	4413      	add	r3, r2
 800b97a:	881b      	ldrh	r3, [r3, #0]
 800b97c:	b29a      	uxth	r2, r3
 800b97e:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b982:	4013      	ands	r3, r2
 800b984:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	461a      	mov	r2, r3
 800b98e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800b992:	009b      	lsls	r3, r3, #2
 800b994:	4413      	add	r3, r2
 800b996:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800b99a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b99e:	b292      	uxth	r2, r2
 800b9a0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800b9a2:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800b9a6:	4613      	mov	r3, r2
 800b9a8:	009b      	lsls	r3, r3, #2
 800b9aa:	4413      	add	r3, r2
 800b9ac:	00db      	lsls	r3, r3, #3
 800b9ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b9b2:	687a      	ldr	r2, [r7, #4]
 800b9b4:	4413      	add	r3, r2
 800b9b6:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800b9b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9ba:	7b1b      	ldrb	r3, [r3, #12]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d123      	bne.n	800ba08 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9c8:	b29b      	uxth	r3, r3
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9ce:	781b      	ldrb	r3, [r3, #0]
 800b9d0:	00db      	lsls	r3, r3, #3
 800b9d2:	4413      	add	r3, r2
 800b9d4:	687a      	ldr	r2, [r7, #4]
 800b9d6:	6812      	ldr	r2, [r2, #0]
 800b9d8:	4413      	add	r3, r2
 800b9da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b9de:	881b      	ldrh	r3, [r3, #0]
 800b9e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b9e4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 800b9e8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	f000 808e 	beq.w	800bb0e <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6818      	ldr	r0, [r3, #0]
 800b9f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9f8:	6959      	ldr	r1, [r3, #20]
 800b9fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9fc:	88da      	ldrh	r2, [r3, #6]
 800b9fe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ba02:	f007 fdd4 	bl	80135ae <USB_ReadPMA>
 800ba06:	e082      	b.n	800bb0e <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800ba08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba0a:	78db      	ldrb	r3, [r3, #3]
 800ba0c:	2b02      	cmp	r3, #2
 800ba0e:	d10a      	bne.n	800ba26 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800ba10:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800ba14:	461a      	mov	r2, r3
 800ba16:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f000 f9d3 	bl	800bdc4 <HAL_PCD_EP_DB_Receive>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800ba24:	e073      	b.n	800bb0e <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba2e:	781b      	ldrb	r3, [r3, #0]
 800ba30:	009b      	lsls	r3, r3, #2
 800ba32:	4413      	add	r3, r2
 800ba34:	881b      	ldrh	r3, [r3, #0]
 800ba36:	b29b      	uxth	r3, r3
 800ba38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba40:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	461a      	mov	r2, r3
 800ba4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba4c:	781b      	ldrb	r3, [r3, #0]
 800ba4e:	009b      	lsls	r3, r3, #2
 800ba50:	441a      	add	r2, r3
 800ba52:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ba56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ba5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba62:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ba66:	b29b      	uxth	r3, r3
 800ba68:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	461a      	mov	r2, r3
 800ba70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba72:	781b      	ldrb	r3, [r3, #0]
 800ba74:	009b      	lsls	r3, r3, #2
 800ba76:	4413      	add	r3, r2
 800ba78:	881b      	ldrh	r3, [r3, #0]
 800ba7a:	b29b      	uxth	r3, r3
 800ba7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d022      	beq.n	800baca <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba8c:	b29b      	uxth	r3, r3
 800ba8e:	461a      	mov	r2, r3
 800ba90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba92:	781b      	ldrb	r3, [r3, #0]
 800ba94:	00db      	lsls	r3, r3, #3
 800ba96:	4413      	add	r3, r2
 800ba98:	687a      	ldr	r2, [r7, #4]
 800ba9a:	6812      	ldr	r2, [r2, #0]
 800ba9c:	4413      	add	r3, r2
 800ba9e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800baa2:	881b      	ldrh	r3, [r3, #0]
 800baa4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800baa8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800baac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d02c      	beq.n	800bb0e <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6818      	ldr	r0, [r3, #0]
 800bab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800baba:	6959      	ldr	r1, [r3, #20]
 800babc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800babe:	891a      	ldrh	r2, [r3, #8]
 800bac0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800bac4:	f007 fd73 	bl	80135ae <USB_ReadPMA>
 800bac8:	e021      	b.n	800bb0e <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bad2:	b29b      	uxth	r3, r3
 800bad4:	461a      	mov	r2, r3
 800bad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bad8:	781b      	ldrb	r3, [r3, #0]
 800bada:	00db      	lsls	r3, r3, #3
 800badc:	4413      	add	r3, r2
 800bade:	687a      	ldr	r2, [r7, #4]
 800bae0:	6812      	ldr	r2, [r2, #0]
 800bae2:	4413      	add	r3, r2
 800bae4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bae8:	881b      	ldrh	r3, [r3, #0]
 800baea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800baee:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800baf2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d009      	beq.n	800bb0e <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6818      	ldr	r0, [r3, #0]
 800bafe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb00:	6959      	ldr	r1, [r3, #20]
 800bb02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb04:	895a      	ldrh	r2, [r3, #10]
 800bb06:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800bb0a:	f007 fd50 	bl	80135ae <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800bb0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb10:	69da      	ldr	r2, [r3, #28]
 800bb12:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800bb16:	441a      	add	r2, r3
 800bb18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb1a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800bb1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb1e:	695a      	ldr	r2, [r3, #20]
 800bb20:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800bb24:	441a      	add	r2, r3
 800bb26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb28:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800bb2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb2c:	699b      	ldr	r3, [r3, #24]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d005      	beq.n	800bb3e <PCD_EP_ISR_Handler+0x4da>
 800bb32:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800bb36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb38:	691b      	ldr	r3, [r3, #16]
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	d206      	bcs.n	800bb4c <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800bb3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb40:	781b      	ldrb	r3, [r3, #0]
 800bb42:	4619      	mov	r1, r3
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f00b fcd7 	bl	80174f8 <HAL_PCD_DataOutStageCallback>
 800bb4a:	e005      	b.n	800bb58 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bb52:	4618      	mov	r0, r3
 800bb54:	f006 f879 	bl	8011c4a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800bb58:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800bb5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	f000 8121 	beq.w	800bda8 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 800bb66:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800bb6a:	1c5a      	adds	r2, r3, #1
 800bb6c:	4613      	mov	r3, r2
 800bb6e:	009b      	lsls	r3, r3, #2
 800bb70:	4413      	add	r3, r2
 800bb72:	00db      	lsls	r3, r3, #3
 800bb74:	687a      	ldr	r2, [r7, #4]
 800bb76:	4413      	add	r3, r2
 800bb78:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	461a      	mov	r2, r3
 800bb80:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800bb84:	009b      	lsls	r3, r3, #2
 800bb86:	4413      	add	r3, r2
 800bb88:	881b      	ldrh	r3, [r3, #0]
 800bb8a:	b29b      	uxth	r3, r3
 800bb8c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800bb90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb94:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	461a      	mov	r2, r3
 800bb9e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800bba2:	009b      	lsls	r3, r3, #2
 800bba4:	441a      	add	r2, r3
 800bba6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bbaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bbae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bbb2:	b29b      	uxth	r3, r3
 800bbb4:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 800bbb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbb8:	78db      	ldrb	r3, [r3, #3]
 800bbba:	2b02      	cmp	r3, #2
 800bbbc:	f000 80a2 	beq.w	800bd04 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 800bbc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800bbc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbc8:	7b1b      	ldrb	r3, [r3, #12]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	f000 8093 	beq.w	800bcf6 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800bbd0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800bbd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d046      	beq.n	800bc6a <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bbdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbde:	785b      	ldrb	r3, [r3, #1]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d126      	bne.n	800bc32 <PCD_EP_ISR_Handler+0x5ce>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	627b      	str	r3, [r7, #36]	; 0x24
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bbf2:	b29b      	uxth	r3, r3
 800bbf4:	461a      	mov	r2, r3
 800bbf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf8:	4413      	add	r3, r2
 800bbfa:	627b      	str	r3, [r7, #36]	; 0x24
 800bbfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbfe:	781b      	ldrb	r3, [r3, #0]
 800bc00:	00da      	lsls	r2, r3, #3
 800bc02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc04:	4413      	add	r3, r2
 800bc06:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bc0a:	623b      	str	r3, [r7, #32]
 800bc0c:	6a3b      	ldr	r3, [r7, #32]
 800bc0e:	881b      	ldrh	r3, [r3, #0]
 800bc10:	b29b      	uxth	r3, r3
 800bc12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bc16:	b29a      	uxth	r2, r3
 800bc18:	6a3b      	ldr	r3, [r7, #32]
 800bc1a:	801a      	strh	r2, [r3, #0]
 800bc1c:	6a3b      	ldr	r3, [r7, #32]
 800bc1e:	881b      	ldrh	r3, [r3, #0]
 800bc20:	b29b      	uxth	r3, r3
 800bc22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc2a:	b29a      	uxth	r2, r3
 800bc2c:	6a3b      	ldr	r3, [r7, #32]
 800bc2e:	801a      	strh	r2, [r3, #0]
 800bc30:	e061      	b.n	800bcf6 <PCD_EP_ISR_Handler+0x692>
 800bc32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc34:	785b      	ldrb	r3, [r3, #1]
 800bc36:	2b01      	cmp	r3, #1
 800bc38:	d15d      	bne.n	800bcf6 <PCD_EP_ISR_Handler+0x692>
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc48:	b29b      	uxth	r3, r3
 800bc4a:	461a      	mov	r2, r3
 800bc4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc4e:	4413      	add	r3, r2
 800bc50:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc54:	781b      	ldrb	r3, [r3, #0]
 800bc56:	00da      	lsls	r2, r3, #3
 800bc58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc5a:	4413      	add	r3, r2
 800bc5c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bc60:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc64:	2200      	movs	r2, #0
 800bc66:	801a      	strh	r2, [r3, #0]
 800bc68:	e045      	b.n	800bcf6 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc72:	785b      	ldrb	r3, [r3, #1]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d126      	bne.n	800bcc6 <PCD_EP_ISR_Handler+0x662>
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	637b      	str	r3, [r7, #52]	; 0x34
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc86:	b29b      	uxth	r3, r3
 800bc88:	461a      	mov	r2, r3
 800bc8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc8c:	4413      	add	r3, r2
 800bc8e:	637b      	str	r3, [r7, #52]	; 0x34
 800bc90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc92:	781b      	ldrb	r3, [r3, #0]
 800bc94:	00da      	lsls	r2, r3, #3
 800bc96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc98:	4413      	add	r3, r2
 800bc9a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bc9e:	633b      	str	r3, [r7, #48]	; 0x30
 800bca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bca2:	881b      	ldrh	r3, [r3, #0]
 800bca4:	b29b      	uxth	r3, r3
 800bca6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bcaa:	b29a      	uxth	r2, r3
 800bcac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcae:	801a      	strh	r2, [r3, #0]
 800bcb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcb2:	881b      	ldrh	r3, [r3, #0]
 800bcb4:	b29b      	uxth	r3, r3
 800bcb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bcba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bcbe:	b29a      	uxth	r2, r3
 800bcc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc2:	801a      	strh	r2, [r3, #0]
 800bcc4:	e017      	b.n	800bcf6 <PCD_EP_ISR_Handler+0x692>
 800bcc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcc8:	785b      	ldrb	r3, [r3, #1]
 800bcca:	2b01      	cmp	r3, #1
 800bccc:	d113      	bne.n	800bcf6 <PCD_EP_ISR_Handler+0x692>
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bcd6:	b29b      	uxth	r3, r3
 800bcd8:	461a      	mov	r2, r3
 800bcda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcdc:	4413      	add	r3, r2
 800bcde:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bce2:	781b      	ldrb	r3, [r3, #0]
 800bce4:	00da      	lsls	r2, r3, #3
 800bce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bce8:	4413      	add	r3, r2
 800bcea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bcee:	63bb      	str	r3, [r7, #56]	; 0x38
 800bcf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800bcf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcf8:	781b      	ldrb	r3, [r3, #0]
 800bcfa:	4619      	mov	r1, r3
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f00b fc16 	bl	801752e <HAL_PCD_DataInStageCallback>
 800bd02:	e051      	b.n	800bda8 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800bd04:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800bd08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d144      	bne.n	800bd9a <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd18:	b29b      	uxth	r3, r3
 800bd1a:	461a      	mov	r2, r3
 800bd1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd1e:	781b      	ldrb	r3, [r3, #0]
 800bd20:	00db      	lsls	r3, r3, #3
 800bd22:	4413      	add	r3, r2
 800bd24:	687a      	ldr	r2, [r7, #4]
 800bd26:	6812      	ldr	r2, [r2, #0]
 800bd28:	4413      	add	r3, r2
 800bd2a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bd2e:	881b      	ldrh	r3, [r3, #0]
 800bd30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bd34:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800bd38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd3a:	699a      	ldr	r2, [r3, #24]
 800bd3c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bd40:	429a      	cmp	r2, r3
 800bd42:	d907      	bls.n	800bd54 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 800bd44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd46:	699a      	ldr	r2, [r3, #24]
 800bd48:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bd4c:	1ad2      	subs	r2, r2, r3
 800bd4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd50:	619a      	str	r2, [r3, #24]
 800bd52:	e002      	b.n	800bd5a <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 800bd54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd56:	2200      	movs	r2, #0
 800bd58:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800bd5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd5c:	699b      	ldr	r3, [r3, #24]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d106      	bne.n	800bd70 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800bd62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd64:	781b      	ldrb	r3, [r3, #0]
 800bd66:	4619      	mov	r1, r3
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f00b fbe0 	bl	801752e <HAL_PCD_DataInStageCallback>
 800bd6e:	e01b      	b.n	800bda8 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800bd70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd72:	695a      	ldr	r2, [r3, #20]
 800bd74:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bd78:	441a      	add	r2, r3
 800bd7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd7c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800bd7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd80:	69da      	ldr	r2, [r3, #28]
 800bd82:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bd86:	441a      	add	r2, r3
 800bd88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd8a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bd92:	4618      	mov	r0, r3
 800bd94:	f005 ff59 	bl	8011c4a <USB_EPStartXfer>
 800bd98:	e006      	b.n	800bda8 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800bd9a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800bd9e:	461a      	mov	r2, r3
 800bda0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f000 f917 	bl	800bfd6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bdb0:	b29b      	uxth	r3, r3
 800bdb2:	b21b      	sxth	r3, r3
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	f6ff ac5a 	blt.w	800b66e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800bdba:	2300      	movs	r3, #0
}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3758      	adds	r7, #88	; 0x58
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}

0800bdc4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b088      	sub	sp, #32
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	60f8      	str	r0, [r7, #12]
 800bdcc:	60b9      	str	r1, [r7, #8]
 800bdce:	4613      	mov	r3, r2
 800bdd0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800bdd2:	88fb      	ldrh	r3, [r7, #6]
 800bdd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d07c      	beq.n	800bed6 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bde4:	b29b      	uxth	r3, r3
 800bde6:	461a      	mov	r2, r3
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	781b      	ldrb	r3, [r3, #0]
 800bdec:	00db      	lsls	r3, r3, #3
 800bdee:	4413      	add	r3, r2
 800bdf0:	68fa      	ldr	r2, [r7, #12]
 800bdf2:	6812      	ldr	r2, [r2, #0]
 800bdf4:	4413      	add	r3, r2
 800bdf6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bdfa:	881b      	ldrh	r3, [r3, #0]
 800bdfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800be00:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	699a      	ldr	r2, [r3, #24]
 800be06:	8b7b      	ldrh	r3, [r7, #26]
 800be08:	429a      	cmp	r2, r3
 800be0a:	d306      	bcc.n	800be1a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	699a      	ldr	r2, [r3, #24]
 800be10:	8b7b      	ldrh	r3, [r7, #26]
 800be12:	1ad2      	subs	r2, r2, r3
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	619a      	str	r2, [r3, #24]
 800be18:	e002      	b.n	800be20 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	2200      	movs	r2, #0
 800be1e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	699b      	ldr	r3, [r3, #24]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d123      	bne.n	800be70 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	461a      	mov	r2, r3
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	781b      	ldrb	r3, [r3, #0]
 800be32:	009b      	lsls	r3, r3, #2
 800be34:	4413      	add	r3, r2
 800be36:	881b      	ldrh	r3, [r3, #0]
 800be38:	b29b      	uxth	r3, r3
 800be3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800be3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be42:	833b      	strh	r3, [r7, #24]
 800be44:	8b3b      	ldrh	r3, [r7, #24]
 800be46:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800be4a:	833b      	strh	r3, [r7, #24]
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	461a      	mov	r2, r3
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	009b      	lsls	r3, r3, #2
 800be58:	441a      	add	r2, r3
 800be5a:	8b3b      	ldrh	r3, [r7, #24]
 800be5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be6c:	b29b      	uxth	r3, r3
 800be6e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800be70:	88fb      	ldrh	r3, [r7, #6]
 800be72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be76:	2b00      	cmp	r3, #0
 800be78:	d01f      	beq.n	800beba <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	461a      	mov	r2, r3
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	781b      	ldrb	r3, [r3, #0]
 800be84:	009b      	lsls	r3, r3, #2
 800be86:	4413      	add	r3, r2
 800be88:	881b      	ldrh	r3, [r3, #0]
 800be8a:	b29b      	uxth	r3, r3
 800be8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800be90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be94:	82fb      	strh	r3, [r7, #22]
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	461a      	mov	r2, r3
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	781b      	ldrb	r3, [r3, #0]
 800bea0:	009b      	lsls	r3, r3, #2
 800bea2:	441a      	add	r2, r3
 800bea4:	8afb      	ldrh	r3, [r7, #22]
 800bea6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800beaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800beae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800beb2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800beb6:	b29b      	uxth	r3, r3
 800beb8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800beba:	8b7b      	ldrh	r3, [r7, #26]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	f000 8085 	beq.w	800bfcc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	6818      	ldr	r0, [r3, #0]
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	6959      	ldr	r1, [r3, #20]
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	891a      	ldrh	r2, [r3, #8]
 800bece:	8b7b      	ldrh	r3, [r7, #26]
 800bed0:	f007 fb6d 	bl	80135ae <USB_ReadPMA>
 800bed4:	e07a      	b.n	800bfcc <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bede:	b29b      	uxth	r3, r3
 800bee0:	461a      	mov	r2, r3
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	781b      	ldrb	r3, [r3, #0]
 800bee6:	00db      	lsls	r3, r3, #3
 800bee8:	4413      	add	r3, r2
 800beea:	68fa      	ldr	r2, [r7, #12]
 800beec:	6812      	ldr	r2, [r2, #0]
 800beee:	4413      	add	r3, r2
 800bef0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bef4:	881b      	ldrh	r3, [r3, #0]
 800bef6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800befa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	699a      	ldr	r2, [r3, #24]
 800bf00:	8b7b      	ldrh	r3, [r7, #26]
 800bf02:	429a      	cmp	r2, r3
 800bf04:	d306      	bcc.n	800bf14 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	699a      	ldr	r2, [r3, #24]
 800bf0a:	8b7b      	ldrh	r3, [r7, #26]
 800bf0c:	1ad2      	subs	r2, r2, r3
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	619a      	str	r2, [r3, #24]
 800bf12:	e002      	b.n	800bf1a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	2200      	movs	r2, #0
 800bf18:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	699b      	ldr	r3, [r3, #24]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d123      	bne.n	800bf6a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	461a      	mov	r2, r3
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	781b      	ldrb	r3, [r3, #0]
 800bf2c:	009b      	lsls	r3, r3, #2
 800bf2e:	4413      	add	r3, r2
 800bf30:	881b      	ldrh	r3, [r3, #0]
 800bf32:	b29b      	uxth	r3, r3
 800bf34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bf38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf3c:	83fb      	strh	r3, [r7, #30]
 800bf3e:	8bfb      	ldrh	r3, [r7, #30]
 800bf40:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800bf44:	83fb      	strh	r3, [r7, #30]
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	461a      	mov	r2, r3
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	781b      	ldrb	r3, [r3, #0]
 800bf50:	009b      	lsls	r3, r3, #2
 800bf52:	441a      	add	r2, r3
 800bf54:	8bfb      	ldrh	r3, [r7, #30]
 800bf56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bf5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bf5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf66:	b29b      	uxth	r3, r3
 800bf68:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800bf6a:	88fb      	ldrh	r3, [r7, #6]
 800bf6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d11f      	bne.n	800bfb4 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	461a      	mov	r2, r3
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	781b      	ldrb	r3, [r3, #0]
 800bf7e:	009b      	lsls	r3, r3, #2
 800bf80:	4413      	add	r3, r2
 800bf82:	881b      	ldrh	r3, [r3, #0]
 800bf84:	b29b      	uxth	r3, r3
 800bf86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bf8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf8e:	83bb      	strh	r3, [r7, #28]
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	461a      	mov	r2, r3
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	781b      	ldrb	r3, [r3, #0]
 800bf9a:	009b      	lsls	r3, r3, #2
 800bf9c:	441a      	add	r2, r3
 800bf9e:	8bbb      	ldrh	r3, [r7, #28]
 800bfa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bfa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bfa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bfac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bfb0:	b29b      	uxth	r3, r3
 800bfb2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800bfb4:	8b7b      	ldrh	r3, [r7, #26]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d008      	beq.n	800bfcc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	6818      	ldr	r0, [r3, #0]
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	6959      	ldr	r1, [r3, #20]
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	895a      	ldrh	r2, [r3, #10]
 800bfc6:	8b7b      	ldrh	r3, [r7, #26]
 800bfc8:	f007 faf1 	bl	80135ae <USB_ReadPMA>
    }
  }

  return count;
 800bfcc:	8b7b      	ldrh	r3, [r7, #26]
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	3720      	adds	r7, #32
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}

0800bfd6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800bfd6:	b580      	push	{r7, lr}
 800bfd8:	b0a2      	sub	sp, #136	; 0x88
 800bfda:	af00      	add	r7, sp, #0
 800bfdc:	60f8      	str	r0, [r7, #12]
 800bfde:	60b9      	str	r1, [r7, #8]
 800bfe0:	4613      	mov	r3, r2
 800bfe2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800bfe4:	88fb      	ldrh	r3, [r7, #6]
 800bfe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	f000 81c5 	beq.w	800c37a <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bff8:	b29b      	uxth	r3, r3
 800bffa:	461a      	mov	r2, r3
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	781b      	ldrb	r3, [r3, #0]
 800c000:	00db      	lsls	r3, r3, #3
 800c002:	4413      	add	r3, r2
 800c004:	68fa      	ldr	r2, [r7, #12]
 800c006:	6812      	ldr	r2, [r2, #0]
 800c008:	4413      	add	r3, r2
 800c00a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c00e:	881b      	ldrh	r3, [r3, #0]
 800c010:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c014:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	699a      	ldr	r2, [r3, #24]
 800c01c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c020:	429a      	cmp	r2, r3
 800c022:	d907      	bls.n	800c034 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	699a      	ldr	r2, [r3, #24]
 800c028:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c02c:	1ad2      	subs	r2, r2, r3
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	619a      	str	r2, [r3, #24]
 800c032:	e002      	b.n	800c03a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	2200      	movs	r2, #0
 800c038:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	699b      	ldr	r3, [r3, #24]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	f040 80b9 	bne.w	800c1b6 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c044:	68bb      	ldr	r3, [r7, #8]
 800c046:	785b      	ldrb	r3, [r3, #1]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d126      	bne.n	800c09a <HAL_PCD_EP_DB_Transmit+0xc4>
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	62bb      	str	r3, [r7, #40]	; 0x28
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	461a      	mov	r2, r3
 800c05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c060:	4413      	add	r3, r2
 800c062:	62bb      	str	r3, [r7, #40]	; 0x28
 800c064:	68bb      	ldr	r3, [r7, #8]
 800c066:	781b      	ldrb	r3, [r3, #0]
 800c068:	00da      	lsls	r2, r3, #3
 800c06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c06c:	4413      	add	r3, r2
 800c06e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c072:	627b      	str	r3, [r7, #36]	; 0x24
 800c074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c076:	881b      	ldrh	r3, [r3, #0]
 800c078:	b29b      	uxth	r3, r3
 800c07a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c07e:	b29a      	uxth	r2, r3
 800c080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c082:	801a      	strh	r2, [r3, #0]
 800c084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c086:	881b      	ldrh	r3, [r3, #0]
 800c088:	b29b      	uxth	r3, r3
 800c08a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c08e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c092:	b29a      	uxth	r2, r3
 800c094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c096:	801a      	strh	r2, [r3, #0]
 800c098:	e01a      	b.n	800c0d0 <HAL_PCD_EP_DB_Transmit+0xfa>
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	785b      	ldrb	r3, [r3, #1]
 800c09e:	2b01      	cmp	r3, #1
 800c0a0:	d116      	bne.n	800c0d0 <HAL_PCD_EP_DB_Transmit+0xfa>
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	633b      	str	r3, [r7, #48]	; 0x30
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c0b0:	b29b      	uxth	r3, r3
 800c0b2:	461a      	mov	r2, r3
 800c0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b6:	4413      	add	r3, r2
 800c0b8:	633b      	str	r3, [r7, #48]	; 0x30
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	781b      	ldrb	r3, [r3, #0]
 800c0be:	00da      	lsls	r2, r3, #3
 800c0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c2:	4413      	add	r3, r2
 800c0c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c0c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	623b      	str	r3, [r7, #32]
 800c0d6:	68bb      	ldr	r3, [r7, #8]
 800c0d8:	785b      	ldrb	r3, [r3, #1]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d126      	bne.n	800c12c <HAL_PCD_EP_DB_Transmit+0x156>
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	61bb      	str	r3, [r7, #24]
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c0ec:	b29b      	uxth	r3, r3
 800c0ee:	461a      	mov	r2, r3
 800c0f0:	69bb      	ldr	r3, [r7, #24]
 800c0f2:	4413      	add	r3, r2
 800c0f4:	61bb      	str	r3, [r7, #24]
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	781b      	ldrb	r3, [r3, #0]
 800c0fa:	00da      	lsls	r2, r3, #3
 800c0fc:	69bb      	ldr	r3, [r7, #24]
 800c0fe:	4413      	add	r3, r2
 800c100:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c104:	617b      	str	r3, [r7, #20]
 800c106:	697b      	ldr	r3, [r7, #20]
 800c108:	881b      	ldrh	r3, [r3, #0]
 800c10a:	b29b      	uxth	r3, r3
 800c10c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c110:	b29a      	uxth	r2, r3
 800c112:	697b      	ldr	r3, [r7, #20]
 800c114:	801a      	strh	r2, [r3, #0]
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	881b      	ldrh	r3, [r3, #0]
 800c11a:	b29b      	uxth	r3, r3
 800c11c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c120:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c124:	b29a      	uxth	r2, r3
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	801a      	strh	r2, [r3, #0]
 800c12a:	e017      	b.n	800c15c <HAL_PCD_EP_DB_Transmit+0x186>
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	785b      	ldrb	r3, [r3, #1]
 800c130:	2b01      	cmp	r3, #1
 800c132:	d113      	bne.n	800c15c <HAL_PCD_EP_DB_Transmit+0x186>
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c13c:	b29b      	uxth	r3, r3
 800c13e:	461a      	mov	r2, r3
 800c140:	6a3b      	ldr	r3, [r7, #32]
 800c142:	4413      	add	r3, r2
 800c144:	623b      	str	r3, [r7, #32]
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	781b      	ldrb	r3, [r3, #0]
 800c14a:	00da      	lsls	r2, r3, #3
 800c14c:	6a3b      	ldr	r3, [r7, #32]
 800c14e:	4413      	add	r3, r2
 800c150:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c154:	61fb      	str	r3, [r7, #28]
 800c156:	69fb      	ldr	r3, [r7, #28]
 800c158:	2200      	movs	r2, #0
 800c15a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	781b      	ldrb	r3, [r3, #0]
 800c160:	4619      	mov	r1, r3
 800c162:	68f8      	ldr	r0, [r7, #12]
 800c164:	f00b f9e3 	bl	801752e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c168:	88fb      	ldrh	r3, [r7, #6]
 800c16a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c16e:	2b00      	cmp	r3, #0
 800c170:	f000 82d2 	beq.w	800c718 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	461a      	mov	r2, r3
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	781b      	ldrb	r3, [r3, #0]
 800c17e:	009b      	lsls	r3, r3, #2
 800c180:	4413      	add	r3, r2
 800c182:	881b      	ldrh	r3, [r3, #0]
 800c184:	b29b      	uxth	r3, r3
 800c186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c18a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c18e:	827b      	strh	r3, [r7, #18]
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	461a      	mov	r2, r3
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	781b      	ldrb	r3, [r3, #0]
 800c19a:	009b      	lsls	r3, r3, #2
 800c19c:	441a      	add	r2, r3
 800c19e:	8a7b      	ldrh	r3, [r7, #18]
 800c1a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c1a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c1a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c1ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1b0:	b29b      	uxth	r3, r3
 800c1b2:	8013      	strh	r3, [r2, #0]
 800c1b4:	e2b0      	b.n	800c718 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c1b6:	88fb      	ldrh	r3, [r7, #6]
 800c1b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d021      	beq.n	800c204 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	461a      	mov	r2, r3
 800c1c6:	68bb      	ldr	r3, [r7, #8]
 800c1c8:	781b      	ldrb	r3, [r3, #0]
 800c1ca:	009b      	lsls	r3, r3, #2
 800c1cc:	4413      	add	r3, r2
 800c1ce:	881b      	ldrh	r3, [r3, #0]
 800c1d0:	b29b      	uxth	r3, r3
 800c1d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c1d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1da:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	461a      	mov	r2, r3
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	781b      	ldrb	r3, [r3, #0]
 800c1e8:	009b      	lsls	r3, r3, #2
 800c1ea:	441a      	add	r2, r3
 800c1ec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c1f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c1f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c1f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c1fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c200:	b29b      	uxth	r3, r3
 800c202:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c20a:	2b01      	cmp	r3, #1
 800c20c:	f040 8284 	bne.w	800c718 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	695a      	ldr	r2, [r3, #20]
 800c214:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c218:	441a      	add	r2, r3
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	69da      	ldr	r2, [r3, #28]
 800c222:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c226:	441a      	add	r2, r3
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	6a1a      	ldr	r2, [r3, #32]
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	691b      	ldr	r3, [r3, #16]
 800c234:	429a      	cmp	r2, r3
 800c236:	d309      	bcc.n	800c24c <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	691b      	ldr	r3, [r3, #16]
 800c23c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	6a1a      	ldr	r2, [r3, #32]
 800c242:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c244:	1ad2      	subs	r2, r2, r3
 800c246:	68bb      	ldr	r3, [r7, #8]
 800c248:	621a      	str	r2, [r3, #32]
 800c24a:	e015      	b.n	800c278 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	6a1b      	ldr	r3, [r3, #32]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d107      	bne.n	800c264 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800c254:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c258:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800c25a:	68bb      	ldr	r3, [r7, #8]
 800c25c:	2200      	movs	r2, #0
 800c25e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800c262:	e009      	b.n	800c278 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	2200      	movs	r2, #0
 800c268:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	6a1b      	ldr	r3, [r3, #32]
 800c270:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	2200      	movs	r2, #0
 800c276:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	785b      	ldrb	r3, [r3, #1]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d155      	bne.n	800c32c <HAL_PCD_EP_DB_Transmit+0x356>
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	63bb      	str	r3, [r7, #56]	; 0x38
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c28e:	b29b      	uxth	r3, r3
 800c290:	461a      	mov	r2, r3
 800c292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c294:	4413      	add	r3, r2
 800c296:	63bb      	str	r3, [r7, #56]	; 0x38
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	781b      	ldrb	r3, [r3, #0]
 800c29c:	00da      	lsls	r2, r3, #3
 800c29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2a0:	4413      	add	r3, r2
 800c2a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c2a6:	637b      	str	r3, [r7, #52]	; 0x34
 800c2a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2aa:	2b3e      	cmp	r3, #62	; 0x3e
 800c2ac:	d916      	bls.n	800c2dc <HAL_PCD_EP_DB_Transmit+0x306>
 800c2ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2b0:	095b      	lsrs	r3, r3, #5
 800c2b2:	64bb      	str	r3, [r7, #72]	; 0x48
 800c2b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2b6:	f003 031f 	and.w	r3, r3, #31
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d102      	bne.n	800c2c4 <HAL_PCD_EP_DB_Transmit+0x2ee>
 800c2be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c2c0:	3b01      	subs	r3, #1
 800c2c2:	64bb      	str	r3, [r7, #72]	; 0x48
 800c2c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c2c6:	b29b      	uxth	r3, r3
 800c2c8:	029b      	lsls	r3, r3, #10
 800c2ca:	b29b      	uxth	r3, r3
 800c2cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c2d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c2d4:	b29a      	uxth	r2, r3
 800c2d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2d8:	801a      	strh	r2, [r3, #0]
 800c2da:	e043      	b.n	800c364 <HAL_PCD_EP_DB_Transmit+0x38e>
 800c2dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d112      	bne.n	800c308 <HAL_PCD_EP_DB_Transmit+0x332>
 800c2e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2e4:	881b      	ldrh	r3, [r3, #0]
 800c2e6:	b29b      	uxth	r3, r3
 800c2e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c2ec:	b29a      	uxth	r2, r3
 800c2ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2f0:	801a      	strh	r2, [r3, #0]
 800c2f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2f4:	881b      	ldrh	r3, [r3, #0]
 800c2f6:	b29b      	uxth	r3, r3
 800c2f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c2fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c300:	b29a      	uxth	r2, r3
 800c302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c304:	801a      	strh	r2, [r3, #0]
 800c306:	e02d      	b.n	800c364 <HAL_PCD_EP_DB_Transmit+0x38e>
 800c308:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c30a:	085b      	lsrs	r3, r3, #1
 800c30c:	64bb      	str	r3, [r7, #72]	; 0x48
 800c30e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c310:	f003 0301 	and.w	r3, r3, #1
 800c314:	2b00      	cmp	r3, #0
 800c316:	d002      	beq.n	800c31e <HAL_PCD_EP_DB_Transmit+0x348>
 800c318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c31a:	3301      	adds	r3, #1
 800c31c:	64bb      	str	r3, [r7, #72]	; 0x48
 800c31e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c320:	b29b      	uxth	r3, r3
 800c322:	029b      	lsls	r3, r3, #10
 800c324:	b29a      	uxth	r2, r3
 800c326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c328:	801a      	strh	r2, [r3, #0]
 800c32a:	e01b      	b.n	800c364 <HAL_PCD_EP_DB_Transmit+0x38e>
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	785b      	ldrb	r3, [r3, #1]
 800c330:	2b01      	cmp	r3, #1
 800c332:	d117      	bne.n	800c364 <HAL_PCD_EP_DB_Transmit+0x38e>
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	643b      	str	r3, [r7, #64]	; 0x40
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c342:	b29b      	uxth	r3, r3
 800c344:	461a      	mov	r2, r3
 800c346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c348:	4413      	add	r3, r2
 800c34a:	643b      	str	r3, [r7, #64]	; 0x40
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	781b      	ldrb	r3, [r3, #0]
 800c350:	00da      	lsls	r2, r3, #3
 800c352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c354:	4413      	add	r3, r2
 800c356:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c35a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c35c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c35e:	b29a      	uxth	r2, r3
 800c360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c362:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	6818      	ldr	r0, [r3, #0]
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	6959      	ldr	r1, [r3, #20]
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	891a      	ldrh	r2, [r3, #8]
 800c370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c372:	b29b      	uxth	r3, r3
 800c374:	f007 f8d9 	bl	801352a <USB_WritePMA>
 800c378:	e1ce      	b.n	800c718 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c382:	b29b      	uxth	r3, r3
 800c384:	461a      	mov	r2, r3
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	781b      	ldrb	r3, [r3, #0]
 800c38a:	00db      	lsls	r3, r3, #3
 800c38c:	4413      	add	r3, r2
 800c38e:	68fa      	ldr	r2, [r7, #12]
 800c390:	6812      	ldr	r2, [r2, #0]
 800c392:	4413      	add	r3, r2
 800c394:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c398:	881b      	ldrh	r3, [r3, #0]
 800c39a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c39e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	699a      	ldr	r2, [r3, #24]
 800c3a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	d307      	bcc.n	800c3be <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	699a      	ldr	r2, [r3, #24]
 800c3b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c3b6:	1ad2      	subs	r2, r2, r3
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	619a      	str	r2, [r3, #24]
 800c3bc:	e002      	b.n	800c3c4 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	699b      	ldr	r3, [r3, #24]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	f040 80c4 	bne.w	800c556 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	785b      	ldrb	r3, [r3, #1]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d126      	bne.n	800c424 <HAL_PCD_EP_DB_Transmit+0x44e>
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	66bb      	str	r3, [r7, #104]	; 0x68
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c3e4:	b29b      	uxth	r3, r3
 800c3e6:	461a      	mov	r2, r3
 800c3e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c3ea:	4413      	add	r3, r2
 800c3ec:	66bb      	str	r3, [r7, #104]	; 0x68
 800c3ee:	68bb      	ldr	r3, [r7, #8]
 800c3f0:	781b      	ldrb	r3, [r3, #0]
 800c3f2:	00da      	lsls	r2, r3, #3
 800c3f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c3f6:	4413      	add	r3, r2
 800c3f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c3fc:	667b      	str	r3, [r7, #100]	; 0x64
 800c3fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c400:	881b      	ldrh	r3, [r3, #0]
 800c402:	b29b      	uxth	r3, r3
 800c404:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c408:	b29a      	uxth	r2, r3
 800c40a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c40c:	801a      	strh	r2, [r3, #0]
 800c40e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c410:	881b      	ldrh	r3, [r3, #0]
 800c412:	b29b      	uxth	r3, r3
 800c414:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c418:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c41c:	b29a      	uxth	r2, r3
 800c41e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c420:	801a      	strh	r2, [r3, #0]
 800c422:	e01a      	b.n	800c45a <HAL_PCD_EP_DB_Transmit+0x484>
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	785b      	ldrb	r3, [r3, #1]
 800c428:	2b01      	cmp	r3, #1
 800c42a:	d116      	bne.n	800c45a <HAL_PCD_EP_DB_Transmit+0x484>
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	673b      	str	r3, [r7, #112]	; 0x70
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c43a:	b29b      	uxth	r3, r3
 800c43c:	461a      	mov	r2, r3
 800c43e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c440:	4413      	add	r3, r2
 800c442:	673b      	str	r3, [r7, #112]	; 0x70
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	781b      	ldrb	r3, [r3, #0]
 800c448:	00da      	lsls	r2, r3, #3
 800c44a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c44c:	4413      	add	r3, r2
 800c44e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c452:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c456:	2200      	movs	r2, #0
 800c458:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	785b      	ldrb	r3, [r3, #1]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d12f      	bne.n	800c4c8 <HAL_PCD_EP_DB_Transmit+0x4f2>
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c478:	b29b      	uxth	r3, r3
 800c47a:	461a      	mov	r2, r3
 800c47c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c480:	4413      	add	r3, r2
 800c482:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	781b      	ldrb	r3, [r3, #0]
 800c48a:	00da      	lsls	r2, r3, #3
 800c48c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c490:	4413      	add	r3, r2
 800c492:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c496:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c49a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c49e:	881b      	ldrh	r3, [r3, #0]
 800c4a0:	b29b      	uxth	r3, r3
 800c4a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c4a6:	b29a      	uxth	r2, r3
 800c4a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c4ac:	801a      	strh	r2, [r3, #0]
 800c4ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c4b2:	881b      	ldrh	r3, [r3, #0]
 800c4b4:	b29b      	uxth	r3, r3
 800c4b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c4ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c4be:	b29a      	uxth	r2, r3
 800c4c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c4c4:	801a      	strh	r2, [r3, #0]
 800c4c6:	e017      	b.n	800c4f8 <HAL_PCD_EP_DB_Transmit+0x522>
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	785b      	ldrb	r3, [r3, #1]
 800c4cc:	2b01      	cmp	r3, #1
 800c4ce:	d113      	bne.n	800c4f8 <HAL_PCD_EP_DB_Transmit+0x522>
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c4d8:	b29b      	uxth	r3, r3
 800c4da:	461a      	mov	r2, r3
 800c4dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c4de:	4413      	add	r3, r2
 800c4e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c4e2:	68bb      	ldr	r3, [r7, #8]
 800c4e4:	781b      	ldrb	r3, [r3, #0]
 800c4e6:	00da      	lsls	r2, r3, #3
 800c4e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c4ea:	4413      	add	r3, r2
 800c4ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c4f0:	67bb      	str	r3, [r7, #120]	; 0x78
 800c4f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	781b      	ldrb	r3, [r3, #0]
 800c4fc:	4619      	mov	r1, r3
 800c4fe:	68f8      	ldr	r0, [r7, #12]
 800c500:	f00b f815 	bl	801752e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800c504:	88fb      	ldrh	r3, [r7, #6]
 800c506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	f040 8104 	bne.w	800c718 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	461a      	mov	r2, r3
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	781b      	ldrb	r3, [r3, #0]
 800c51a:	009b      	lsls	r3, r3, #2
 800c51c:	4413      	add	r3, r2
 800c51e:	881b      	ldrh	r3, [r3, #0]
 800c520:	b29b      	uxth	r3, r3
 800c522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c52a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	461a      	mov	r2, r3
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	781b      	ldrb	r3, [r3, #0]
 800c538:	009b      	lsls	r3, r3, #2
 800c53a:	441a      	add	r2, r3
 800c53c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c540:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c544:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c548:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c54c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c550:	b29b      	uxth	r3, r3
 800c552:	8013      	strh	r3, [r2, #0]
 800c554:	e0e0      	b.n	800c718 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800c556:	88fb      	ldrh	r3, [r7, #6]
 800c558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d121      	bne.n	800c5a4 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	461a      	mov	r2, r3
 800c566:	68bb      	ldr	r3, [r7, #8]
 800c568:	781b      	ldrb	r3, [r3, #0]
 800c56a:	009b      	lsls	r3, r3, #2
 800c56c:	4413      	add	r3, r2
 800c56e:	881b      	ldrh	r3, [r3, #0]
 800c570:	b29b      	uxth	r3, r3
 800c572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c57a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	461a      	mov	r2, r3
 800c584:	68bb      	ldr	r3, [r7, #8]
 800c586:	781b      	ldrb	r3, [r3, #0]
 800c588:	009b      	lsls	r3, r3, #2
 800c58a:	441a      	add	r2, r3
 800c58c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800c590:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c594:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c598:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c59c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5a0:	b29b      	uxth	r3, r3
 800c5a2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c5aa:	2b01      	cmp	r3, #1
 800c5ac:	f040 80b4 	bne.w	800c718 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	695a      	ldr	r2, [r3, #20]
 800c5b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c5b8:	441a      	add	r2, r3
 800c5ba:	68bb      	ldr	r3, [r7, #8]
 800c5bc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	69da      	ldr	r2, [r3, #28]
 800c5c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c5c6:	441a      	add	r2, r3
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	6a1a      	ldr	r2, [r3, #32]
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	691b      	ldr	r3, [r3, #16]
 800c5d4:	429a      	cmp	r2, r3
 800c5d6:	d309      	bcc.n	800c5ec <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	691b      	ldr	r3, [r3, #16]
 800c5dc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	6a1a      	ldr	r2, [r3, #32]
 800c5e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5e4:	1ad2      	subs	r2, r2, r3
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	621a      	str	r2, [r3, #32]
 800c5ea:	e015      	b.n	800c618 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	6a1b      	ldr	r3, [r3, #32]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d107      	bne.n	800c604 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 800c5f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c5f8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800c602:	e009      	b.n	800c618 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	6a1b      	ldr	r3, [r3, #32]
 800c608:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	2200      	movs	r2, #0
 800c60e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	2200      	movs	r2, #0
 800c614:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	663b      	str	r3, [r7, #96]	; 0x60
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	785b      	ldrb	r3, [r3, #1]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d155      	bne.n	800c6d2 <HAL_PCD_EP_DB_Transmit+0x6fc>
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	65bb      	str	r3, [r7, #88]	; 0x58
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c634:	b29b      	uxth	r3, r3
 800c636:	461a      	mov	r2, r3
 800c638:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c63a:	4413      	add	r3, r2
 800c63c:	65bb      	str	r3, [r7, #88]	; 0x58
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	781b      	ldrb	r3, [r3, #0]
 800c642:	00da      	lsls	r2, r3, #3
 800c644:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c646:	4413      	add	r3, r2
 800c648:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c64c:	657b      	str	r3, [r7, #84]	; 0x54
 800c64e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c650:	2b3e      	cmp	r3, #62	; 0x3e
 800c652:	d916      	bls.n	800c682 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800c654:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c656:	095b      	lsrs	r3, r3, #5
 800c658:	677b      	str	r3, [r7, #116]	; 0x74
 800c65a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c65c:	f003 031f 	and.w	r3, r3, #31
 800c660:	2b00      	cmp	r3, #0
 800c662:	d102      	bne.n	800c66a <HAL_PCD_EP_DB_Transmit+0x694>
 800c664:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c666:	3b01      	subs	r3, #1
 800c668:	677b      	str	r3, [r7, #116]	; 0x74
 800c66a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c66c:	b29b      	uxth	r3, r3
 800c66e:	029b      	lsls	r3, r3, #10
 800c670:	b29b      	uxth	r3, r3
 800c672:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c676:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c67a:	b29a      	uxth	r2, r3
 800c67c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c67e:	801a      	strh	r2, [r3, #0]
 800c680:	e040      	b.n	800c704 <HAL_PCD_EP_DB_Transmit+0x72e>
 800c682:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c684:	2b00      	cmp	r3, #0
 800c686:	d112      	bne.n	800c6ae <HAL_PCD_EP_DB_Transmit+0x6d8>
 800c688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c68a:	881b      	ldrh	r3, [r3, #0]
 800c68c:	b29b      	uxth	r3, r3
 800c68e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c692:	b29a      	uxth	r2, r3
 800c694:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c696:	801a      	strh	r2, [r3, #0]
 800c698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c69a:	881b      	ldrh	r3, [r3, #0]
 800c69c:	b29b      	uxth	r3, r3
 800c69e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c6a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c6a6:	b29a      	uxth	r2, r3
 800c6a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c6aa:	801a      	strh	r2, [r3, #0]
 800c6ac:	e02a      	b.n	800c704 <HAL_PCD_EP_DB_Transmit+0x72e>
 800c6ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c6b0:	085b      	lsrs	r3, r3, #1
 800c6b2:	677b      	str	r3, [r7, #116]	; 0x74
 800c6b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c6b6:	f003 0301 	and.w	r3, r3, #1
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d002      	beq.n	800c6c4 <HAL_PCD_EP_DB_Transmit+0x6ee>
 800c6be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c6c0:	3301      	adds	r3, #1
 800c6c2:	677b      	str	r3, [r7, #116]	; 0x74
 800c6c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c6c6:	b29b      	uxth	r3, r3
 800c6c8:	029b      	lsls	r3, r3, #10
 800c6ca:	b29a      	uxth	r2, r3
 800c6cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c6ce:	801a      	strh	r2, [r3, #0]
 800c6d0:	e018      	b.n	800c704 <HAL_PCD_EP_DB_Transmit+0x72e>
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	785b      	ldrb	r3, [r3, #1]
 800c6d6:	2b01      	cmp	r3, #1
 800c6d8:	d114      	bne.n	800c704 <HAL_PCD_EP_DB_Transmit+0x72e>
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c6e2:	b29b      	uxth	r3, r3
 800c6e4:	461a      	mov	r2, r3
 800c6e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c6e8:	4413      	add	r3, r2
 800c6ea:	663b      	str	r3, [r7, #96]	; 0x60
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	00da      	lsls	r2, r3, #3
 800c6f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c6f4:	4413      	add	r3, r2
 800c6f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c6fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c6fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c6fe:	b29a      	uxth	r2, r3
 800c700:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c702:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	6818      	ldr	r0, [r3, #0]
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	6959      	ldr	r1, [r3, #20]
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	895a      	ldrh	r2, [r3, #10]
 800c710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c712:	b29b      	uxth	r3, r3
 800c714:	f006 ff09 	bl	801352a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	461a      	mov	r2, r3
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	781b      	ldrb	r3, [r3, #0]
 800c722:	009b      	lsls	r3, r3, #2
 800c724:	4413      	add	r3, r2
 800c726:	881b      	ldrh	r3, [r3, #0]
 800c728:	b29b      	uxth	r3, r3
 800c72a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c72e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c732:	823b      	strh	r3, [r7, #16]
 800c734:	8a3b      	ldrh	r3, [r7, #16]
 800c736:	f083 0310 	eor.w	r3, r3, #16
 800c73a:	823b      	strh	r3, [r7, #16]
 800c73c:	8a3b      	ldrh	r3, [r7, #16]
 800c73e:	f083 0320 	eor.w	r3, r3, #32
 800c742:	823b      	strh	r3, [r7, #16]
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	461a      	mov	r2, r3
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	781b      	ldrb	r3, [r3, #0]
 800c74e:	009b      	lsls	r3, r3, #2
 800c750:	441a      	add	r2, r3
 800c752:	8a3b      	ldrh	r3, [r7, #16]
 800c754:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c758:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c75c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c764:	b29b      	uxth	r3, r3
 800c766:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800c768:	2300      	movs	r3, #0
}
 800c76a:	4618      	mov	r0, r3
 800c76c:	3788      	adds	r7, #136	; 0x88
 800c76e:	46bd      	mov	sp, r7
 800c770:	bd80      	pop	{r7, pc}

0800c772 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800c772:	b480      	push	{r7}
 800c774:	b087      	sub	sp, #28
 800c776:	af00      	add	r7, sp, #0
 800c778:	60f8      	str	r0, [r7, #12]
 800c77a:	607b      	str	r3, [r7, #4]
 800c77c:	460b      	mov	r3, r1
 800c77e:	817b      	strh	r3, [r7, #10]
 800c780:	4613      	mov	r3, r2
 800c782:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800c784:	897b      	ldrh	r3, [r7, #10]
 800c786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c78a:	b29b      	uxth	r3, r3
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d00b      	beq.n	800c7a8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c790:	897b      	ldrh	r3, [r7, #10]
 800c792:	f003 0307 	and.w	r3, r3, #7
 800c796:	1c5a      	adds	r2, r3, #1
 800c798:	4613      	mov	r3, r2
 800c79a:	009b      	lsls	r3, r3, #2
 800c79c:	4413      	add	r3, r2
 800c79e:	00db      	lsls	r3, r3, #3
 800c7a0:	68fa      	ldr	r2, [r7, #12]
 800c7a2:	4413      	add	r3, r2
 800c7a4:	617b      	str	r3, [r7, #20]
 800c7a6:	e009      	b.n	800c7bc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c7a8:	897a      	ldrh	r2, [r7, #10]
 800c7aa:	4613      	mov	r3, r2
 800c7ac:	009b      	lsls	r3, r3, #2
 800c7ae:	4413      	add	r3, r2
 800c7b0:	00db      	lsls	r3, r3, #3
 800c7b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800c7b6:	68fa      	ldr	r2, [r7, #12]
 800c7b8:	4413      	add	r3, r2
 800c7ba:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800c7bc:	893b      	ldrh	r3, [r7, #8]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d107      	bne.n	800c7d2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	b29a      	uxth	r2, r3
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	80da      	strh	r2, [r3, #6]
 800c7d0:	e00b      	b.n	800c7ea <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800c7d2:	697b      	ldr	r3, [r7, #20]
 800c7d4:	2201      	movs	r2, #1
 800c7d6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	b29a      	uxth	r2, r3
 800c7dc:	697b      	ldr	r3, [r7, #20]
 800c7de:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	0c1b      	lsrs	r3, r3, #16
 800c7e4:	b29a      	uxth	r2, r3
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c7ea:	2300      	movs	r3, #0
}
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	371c      	adds	r7, #28
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f6:	4770      	bx	lr

0800c7f8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800c7f8:	b480      	push	{r7}
 800c7fa:	b085      	sub	sp, #20
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2201      	movs	r2, #1
 800c80a:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2200      	movs	r2, #0
 800c812:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800c81c:	b29b      	uxth	r3, r3
 800c81e:	f043 0301 	orr.w	r3, r3, #1
 800c822:	b29a      	uxth	r2, r3
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800c830:	b29b      	uxth	r3, r3
 800c832:	f043 0302 	orr.w	r3, r3, #2
 800c836:	b29a      	uxth	r2, r3
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800c83e:	2300      	movs	r3, #0
}
 800c840:	4618      	mov	r0, r3
 800c842:	3714      	adds	r7, #20
 800c844:	46bd      	mov	sp, r7
 800c846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84a:	4770      	bx	lr

0800c84c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c84c:	b480      	push	{r7}
 800c84e:	b085      	sub	sp, #20
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d141      	bne.n	800c8de <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c85a:	4b4b      	ldr	r3, [pc, #300]	; (800c988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c866:	d131      	bne.n	800c8cc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c868:	4b47      	ldr	r3, [pc, #284]	; (800c988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c86a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c86e:	4a46      	ldr	r2, [pc, #280]	; (800c988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c870:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c874:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c878:	4b43      	ldr	r3, [pc, #268]	; (800c988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c880:	4a41      	ldr	r2, [pc, #260]	; (800c988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c882:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c886:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c888:	4b40      	ldr	r3, [pc, #256]	; (800c98c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	2232      	movs	r2, #50	; 0x32
 800c88e:	fb02 f303 	mul.w	r3, r2, r3
 800c892:	4a3f      	ldr	r2, [pc, #252]	; (800c990 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c894:	fba2 2303 	umull	r2, r3, r2, r3
 800c898:	0c9b      	lsrs	r3, r3, #18
 800c89a:	3301      	adds	r3, #1
 800c89c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c89e:	e002      	b.n	800c8a6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	3b01      	subs	r3, #1
 800c8a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c8a6:	4b38      	ldr	r3, [pc, #224]	; (800c988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c8a8:	695b      	ldr	r3, [r3, #20]
 800c8aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c8ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c8b2:	d102      	bne.n	800c8ba <HAL_PWREx_ControlVoltageScaling+0x6e>
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d1f2      	bne.n	800c8a0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c8ba:	4b33      	ldr	r3, [pc, #204]	; (800c988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c8bc:	695b      	ldr	r3, [r3, #20]
 800c8be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c8c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c8c6:	d158      	bne.n	800c97a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c8c8:	2303      	movs	r3, #3
 800c8ca:	e057      	b.n	800c97c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c8cc:	4b2e      	ldr	r3, [pc, #184]	; (800c988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c8ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c8d2:	4a2d      	ldr	r2, [pc, #180]	; (800c988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c8d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c8d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800c8dc:	e04d      	b.n	800c97a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8e4:	d141      	bne.n	800c96a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c8e6:	4b28      	ldr	r3, [pc, #160]	; (800c988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c8ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c8f2:	d131      	bne.n	800c958 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c8f4:	4b24      	ldr	r3, [pc, #144]	; (800c988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c8f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c8fa:	4a23      	ldr	r2, [pc, #140]	; (800c988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c8fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c900:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c904:	4b20      	ldr	r3, [pc, #128]	; (800c988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c90c:	4a1e      	ldr	r2, [pc, #120]	; (800c988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c90e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c912:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c914:	4b1d      	ldr	r3, [pc, #116]	; (800c98c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	2232      	movs	r2, #50	; 0x32
 800c91a:	fb02 f303 	mul.w	r3, r2, r3
 800c91e:	4a1c      	ldr	r2, [pc, #112]	; (800c990 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c920:	fba2 2303 	umull	r2, r3, r2, r3
 800c924:	0c9b      	lsrs	r3, r3, #18
 800c926:	3301      	adds	r3, #1
 800c928:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c92a:	e002      	b.n	800c932 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	3b01      	subs	r3, #1
 800c930:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c932:	4b15      	ldr	r3, [pc, #84]	; (800c988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c934:	695b      	ldr	r3, [r3, #20]
 800c936:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c93a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c93e:	d102      	bne.n	800c946 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d1f2      	bne.n	800c92c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c946:	4b10      	ldr	r3, [pc, #64]	; (800c988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c948:	695b      	ldr	r3, [r3, #20]
 800c94a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c94e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c952:	d112      	bne.n	800c97a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c954:	2303      	movs	r3, #3
 800c956:	e011      	b.n	800c97c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c958:	4b0b      	ldr	r3, [pc, #44]	; (800c988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c95a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c95e:	4a0a      	ldr	r2, [pc, #40]	; (800c988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c964:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800c968:	e007      	b.n	800c97a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800c96a:	4b07      	ldr	r3, [pc, #28]	; (800c988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c972:	4a05      	ldr	r2, [pc, #20]	; (800c988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c974:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c978:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800c97a:	2300      	movs	r3, #0
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3714      	adds	r7, #20
 800c980:	46bd      	mov	sp, r7
 800c982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c986:	4770      	bx	lr
 800c988:	40007000 	.word	0x40007000
 800c98c:	20000004 	.word	0x20000004
 800c990:	431bde83 	.word	0x431bde83

0800c994 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b088      	sub	sp, #32
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d101      	bne.n	800c9a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	e306      	b.n	800cfb4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	f003 0301 	and.w	r3, r3, #1
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d075      	beq.n	800ca9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c9b2:	4b97      	ldr	r3, [pc, #604]	; (800cc10 <HAL_RCC_OscConfig+0x27c>)
 800c9b4:	689b      	ldr	r3, [r3, #8]
 800c9b6:	f003 030c 	and.w	r3, r3, #12
 800c9ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c9bc:	4b94      	ldr	r3, [pc, #592]	; (800cc10 <HAL_RCC_OscConfig+0x27c>)
 800c9be:	68db      	ldr	r3, [r3, #12]
 800c9c0:	f003 0303 	and.w	r3, r3, #3
 800c9c4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800c9c6:	69bb      	ldr	r3, [r7, #24]
 800c9c8:	2b0c      	cmp	r3, #12
 800c9ca:	d102      	bne.n	800c9d2 <HAL_RCC_OscConfig+0x3e>
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	2b03      	cmp	r3, #3
 800c9d0:	d002      	beq.n	800c9d8 <HAL_RCC_OscConfig+0x44>
 800c9d2:	69bb      	ldr	r3, [r7, #24]
 800c9d4:	2b08      	cmp	r3, #8
 800c9d6:	d10b      	bne.n	800c9f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c9d8:	4b8d      	ldr	r3, [pc, #564]	; (800cc10 <HAL_RCC_OscConfig+0x27c>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d05b      	beq.n	800ca9c <HAL_RCC_OscConfig+0x108>
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	685b      	ldr	r3, [r3, #4]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d157      	bne.n	800ca9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	e2e1      	b.n	800cfb4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	685b      	ldr	r3, [r3, #4]
 800c9f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9f8:	d106      	bne.n	800ca08 <HAL_RCC_OscConfig+0x74>
 800c9fa:	4b85      	ldr	r3, [pc, #532]	; (800cc10 <HAL_RCC_OscConfig+0x27c>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	4a84      	ldr	r2, [pc, #528]	; (800cc10 <HAL_RCC_OscConfig+0x27c>)
 800ca00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ca04:	6013      	str	r3, [r2, #0]
 800ca06:	e01d      	b.n	800ca44 <HAL_RCC_OscConfig+0xb0>
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	685b      	ldr	r3, [r3, #4]
 800ca0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ca10:	d10c      	bne.n	800ca2c <HAL_RCC_OscConfig+0x98>
 800ca12:	4b7f      	ldr	r3, [pc, #508]	; (800cc10 <HAL_RCC_OscConfig+0x27c>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	4a7e      	ldr	r2, [pc, #504]	; (800cc10 <HAL_RCC_OscConfig+0x27c>)
 800ca18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ca1c:	6013      	str	r3, [r2, #0]
 800ca1e:	4b7c      	ldr	r3, [pc, #496]	; (800cc10 <HAL_RCC_OscConfig+0x27c>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	4a7b      	ldr	r2, [pc, #492]	; (800cc10 <HAL_RCC_OscConfig+0x27c>)
 800ca24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ca28:	6013      	str	r3, [r2, #0]
 800ca2a:	e00b      	b.n	800ca44 <HAL_RCC_OscConfig+0xb0>
 800ca2c:	4b78      	ldr	r3, [pc, #480]	; (800cc10 <HAL_RCC_OscConfig+0x27c>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	4a77      	ldr	r2, [pc, #476]	; (800cc10 <HAL_RCC_OscConfig+0x27c>)
 800ca32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ca36:	6013      	str	r3, [r2, #0]
 800ca38:	4b75      	ldr	r3, [pc, #468]	; (800cc10 <HAL_RCC_OscConfig+0x27c>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	4a74      	ldr	r2, [pc, #464]	; (800cc10 <HAL_RCC_OscConfig+0x27c>)
 800ca3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ca42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	685b      	ldr	r3, [r3, #4]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d013      	beq.n	800ca74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca4c:	f7fb fbae 	bl	80081ac <HAL_GetTick>
 800ca50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ca52:	e008      	b.n	800ca66 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ca54:	f7fb fbaa 	bl	80081ac <HAL_GetTick>
 800ca58:	4602      	mov	r2, r0
 800ca5a:	693b      	ldr	r3, [r7, #16]
 800ca5c:	1ad3      	subs	r3, r2, r3
 800ca5e:	2b64      	cmp	r3, #100	; 0x64
 800ca60:	d901      	bls.n	800ca66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ca62:	2303      	movs	r3, #3
 800ca64:	e2a6      	b.n	800cfb4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ca66:	4b6a      	ldr	r3, [pc, #424]	; (800cc10 <HAL_RCC_OscConfig+0x27c>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d0f0      	beq.n	800ca54 <HAL_RCC_OscConfig+0xc0>
 800ca72:	e014      	b.n	800ca9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca74:	f7fb fb9a 	bl	80081ac <HAL_GetTick>
 800ca78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ca7a:	e008      	b.n	800ca8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ca7c:	f7fb fb96 	bl	80081ac <HAL_GetTick>
 800ca80:	4602      	mov	r2, r0
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	1ad3      	subs	r3, r2, r3
 800ca86:	2b64      	cmp	r3, #100	; 0x64
 800ca88:	d901      	bls.n	800ca8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ca8a:	2303      	movs	r3, #3
 800ca8c:	e292      	b.n	800cfb4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ca8e:	4b60      	ldr	r3, [pc, #384]	; (800cc10 <HAL_RCC_OscConfig+0x27c>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d1f0      	bne.n	800ca7c <HAL_RCC_OscConfig+0xe8>
 800ca9a:	e000      	b.n	800ca9e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ca9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	f003 0302 	and.w	r3, r3, #2
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d075      	beq.n	800cb96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800caaa:	4b59      	ldr	r3, [pc, #356]	; (800cc10 <HAL_RCC_OscConfig+0x27c>)
 800caac:	689b      	ldr	r3, [r3, #8]
 800caae:	f003 030c 	and.w	r3, r3, #12
 800cab2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800cab4:	4b56      	ldr	r3, [pc, #344]	; (800cc10 <HAL_RCC_OscConfig+0x27c>)
 800cab6:	68db      	ldr	r3, [r3, #12]
 800cab8:	f003 0303 	and.w	r3, r3, #3
 800cabc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800cabe:	69bb      	ldr	r3, [r7, #24]
 800cac0:	2b0c      	cmp	r3, #12
 800cac2:	d102      	bne.n	800caca <HAL_RCC_OscConfig+0x136>
 800cac4:	697b      	ldr	r3, [r7, #20]
 800cac6:	2b02      	cmp	r3, #2
 800cac8:	d002      	beq.n	800cad0 <HAL_RCC_OscConfig+0x13c>
 800caca:	69bb      	ldr	r3, [r7, #24]
 800cacc:	2b04      	cmp	r3, #4
 800cace:	d11f      	bne.n	800cb10 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cad0:	4b4f      	ldr	r3, [pc, #316]	; (800cc10 <HAL_RCC_OscConfig+0x27c>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d005      	beq.n	800cae8 <HAL_RCC_OscConfig+0x154>
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	68db      	ldr	r3, [r3, #12]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d101      	bne.n	800cae8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800cae4:	2301      	movs	r3, #1
 800cae6:	e265      	b.n	800cfb4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cae8:	4b49      	ldr	r3, [pc, #292]	; (800cc10 <HAL_RCC_OscConfig+0x27c>)
 800caea:	685b      	ldr	r3, [r3, #4]
 800caec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	691b      	ldr	r3, [r3, #16]
 800caf4:	061b      	lsls	r3, r3, #24
 800caf6:	4946      	ldr	r1, [pc, #280]	; (800cc10 <HAL_RCC_OscConfig+0x27c>)
 800caf8:	4313      	orrs	r3, r2
 800cafa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800cafc:	4b45      	ldr	r3, [pc, #276]	; (800cc14 <HAL_RCC_OscConfig+0x280>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	4618      	mov	r0, r3
 800cb02:	f7fa fefb 	bl	80078fc <HAL_InitTick>
 800cb06:	4603      	mov	r3, r0
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d043      	beq.n	800cb94 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800cb0c:	2301      	movs	r3, #1
 800cb0e:	e251      	b.n	800cfb4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	68db      	ldr	r3, [r3, #12]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d023      	beq.n	800cb60 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cb18:	4b3d      	ldr	r3, [pc, #244]	; (800cc10 <HAL_RCC_OscConfig+0x27c>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	4a3c      	ldr	r2, [pc, #240]	; (800cc10 <HAL_RCC_OscConfig+0x27c>)
 800cb1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb24:	f7fb fb42 	bl	80081ac <HAL_GetTick>
 800cb28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cb2a:	e008      	b.n	800cb3e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cb2c:	f7fb fb3e 	bl	80081ac <HAL_GetTick>
 800cb30:	4602      	mov	r2, r0
 800cb32:	693b      	ldr	r3, [r7, #16]
 800cb34:	1ad3      	subs	r3, r2, r3
 800cb36:	2b02      	cmp	r3, #2
 800cb38:	d901      	bls.n	800cb3e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800cb3a:	2303      	movs	r3, #3
 800cb3c:	e23a      	b.n	800cfb4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cb3e:	4b34      	ldr	r3, [pc, #208]	; (800cc10 <HAL_RCC_OscConfig+0x27c>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d0f0      	beq.n	800cb2c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cb4a:	4b31      	ldr	r3, [pc, #196]	; (800cc10 <HAL_RCC_OscConfig+0x27c>)
 800cb4c:	685b      	ldr	r3, [r3, #4]
 800cb4e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	691b      	ldr	r3, [r3, #16]
 800cb56:	061b      	lsls	r3, r3, #24
 800cb58:	492d      	ldr	r1, [pc, #180]	; (800cc10 <HAL_RCC_OscConfig+0x27c>)
 800cb5a:	4313      	orrs	r3, r2
 800cb5c:	604b      	str	r3, [r1, #4]
 800cb5e:	e01a      	b.n	800cb96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cb60:	4b2b      	ldr	r3, [pc, #172]	; (800cc10 <HAL_RCC_OscConfig+0x27c>)
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	4a2a      	ldr	r2, [pc, #168]	; (800cc10 <HAL_RCC_OscConfig+0x27c>)
 800cb66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cb6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb6c:	f7fb fb1e 	bl	80081ac <HAL_GetTick>
 800cb70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800cb72:	e008      	b.n	800cb86 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cb74:	f7fb fb1a 	bl	80081ac <HAL_GetTick>
 800cb78:	4602      	mov	r2, r0
 800cb7a:	693b      	ldr	r3, [r7, #16]
 800cb7c:	1ad3      	subs	r3, r2, r3
 800cb7e:	2b02      	cmp	r3, #2
 800cb80:	d901      	bls.n	800cb86 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800cb82:	2303      	movs	r3, #3
 800cb84:	e216      	b.n	800cfb4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800cb86:	4b22      	ldr	r3, [pc, #136]	; (800cc10 <HAL_RCC_OscConfig+0x27c>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d1f0      	bne.n	800cb74 <HAL_RCC_OscConfig+0x1e0>
 800cb92:	e000      	b.n	800cb96 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cb94:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	f003 0308 	and.w	r3, r3, #8
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d041      	beq.n	800cc26 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	695b      	ldr	r3, [r3, #20]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d01c      	beq.n	800cbe4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cbaa:	4b19      	ldr	r3, [pc, #100]	; (800cc10 <HAL_RCC_OscConfig+0x27c>)
 800cbac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cbb0:	4a17      	ldr	r2, [pc, #92]	; (800cc10 <HAL_RCC_OscConfig+0x27c>)
 800cbb2:	f043 0301 	orr.w	r3, r3, #1
 800cbb6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cbba:	f7fb faf7 	bl	80081ac <HAL_GetTick>
 800cbbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800cbc0:	e008      	b.n	800cbd4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cbc2:	f7fb faf3 	bl	80081ac <HAL_GetTick>
 800cbc6:	4602      	mov	r2, r0
 800cbc8:	693b      	ldr	r3, [r7, #16]
 800cbca:	1ad3      	subs	r3, r2, r3
 800cbcc:	2b02      	cmp	r3, #2
 800cbce:	d901      	bls.n	800cbd4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800cbd0:	2303      	movs	r3, #3
 800cbd2:	e1ef      	b.n	800cfb4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800cbd4:	4b0e      	ldr	r3, [pc, #56]	; (800cc10 <HAL_RCC_OscConfig+0x27c>)
 800cbd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cbda:	f003 0302 	and.w	r3, r3, #2
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d0ef      	beq.n	800cbc2 <HAL_RCC_OscConfig+0x22e>
 800cbe2:	e020      	b.n	800cc26 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cbe4:	4b0a      	ldr	r3, [pc, #40]	; (800cc10 <HAL_RCC_OscConfig+0x27c>)
 800cbe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cbea:	4a09      	ldr	r2, [pc, #36]	; (800cc10 <HAL_RCC_OscConfig+0x27c>)
 800cbec:	f023 0301 	bic.w	r3, r3, #1
 800cbf0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cbf4:	f7fb fada 	bl	80081ac <HAL_GetTick>
 800cbf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800cbfa:	e00d      	b.n	800cc18 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cbfc:	f7fb fad6 	bl	80081ac <HAL_GetTick>
 800cc00:	4602      	mov	r2, r0
 800cc02:	693b      	ldr	r3, [r7, #16]
 800cc04:	1ad3      	subs	r3, r2, r3
 800cc06:	2b02      	cmp	r3, #2
 800cc08:	d906      	bls.n	800cc18 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800cc0a:	2303      	movs	r3, #3
 800cc0c:	e1d2      	b.n	800cfb4 <HAL_RCC_OscConfig+0x620>
 800cc0e:	bf00      	nop
 800cc10:	40021000 	.word	0x40021000
 800cc14:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800cc18:	4b8c      	ldr	r3, [pc, #560]	; (800ce4c <HAL_RCC_OscConfig+0x4b8>)
 800cc1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cc1e:	f003 0302 	and.w	r3, r3, #2
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d1ea      	bne.n	800cbfc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	f003 0304 	and.w	r3, r3, #4
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	f000 80a6 	beq.w	800cd80 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cc34:	2300      	movs	r3, #0
 800cc36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800cc38:	4b84      	ldr	r3, [pc, #528]	; (800ce4c <HAL_RCC_OscConfig+0x4b8>)
 800cc3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d101      	bne.n	800cc48 <HAL_RCC_OscConfig+0x2b4>
 800cc44:	2301      	movs	r3, #1
 800cc46:	e000      	b.n	800cc4a <HAL_RCC_OscConfig+0x2b6>
 800cc48:	2300      	movs	r3, #0
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d00d      	beq.n	800cc6a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cc4e:	4b7f      	ldr	r3, [pc, #508]	; (800ce4c <HAL_RCC_OscConfig+0x4b8>)
 800cc50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc52:	4a7e      	ldr	r2, [pc, #504]	; (800ce4c <HAL_RCC_OscConfig+0x4b8>)
 800cc54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cc58:	6593      	str	r3, [r2, #88]	; 0x58
 800cc5a:	4b7c      	ldr	r3, [pc, #496]	; (800ce4c <HAL_RCC_OscConfig+0x4b8>)
 800cc5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cc62:	60fb      	str	r3, [r7, #12]
 800cc64:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800cc66:	2301      	movs	r3, #1
 800cc68:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cc6a:	4b79      	ldr	r3, [pc, #484]	; (800ce50 <HAL_RCC_OscConfig+0x4bc>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d118      	bne.n	800cca8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cc76:	4b76      	ldr	r3, [pc, #472]	; (800ce50 <HAL_RCC_OscConfig+0x4bc>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	4a75      	ldr	r2, [pc, #468]	; (800ce50 <HAL_RCC_OscConfig+0x4bc>)
 800cc7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cc82:	f7fb fa93 	bl	80081ac <HAL_GetTick>
 800cc86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cc88:	e008      	b.n	800cc9c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cc8a:	f7fb fa8f 	bl	80081ac <HAL_GetTick>
 800cc8e:	4602      	mov	r2, r0
 800cc90:	693b      	ldr	r3, [r7, #16]
 800cc92:	1ad3      	subs	r3, r2, r3
 800cc94:	2b02      	cmp	r3, #2
 800cc96:	d901      	bls.n	800cc9c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800cc98:	2303      	movs	r3, #3
 800cc9a:	e18b      	b.n	800cfb4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cc9c:	4b6c      	ldr	r3, [pc, #432]	; (800ce50 <HAL_RCC_OscConfig+0x4bc>)
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d0f0      	beq.n	800cc8a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	689b      	ldr	r3, [r3, #8]
 800ccac:	2b01      	cmp	r3, #1
 800ccae:	d108      	bne.n	800ccc2 <HAL_RCC_OscConfig+0x32e>
 800ccb0:	4b66      	ldr	r3, [pc, #408]	; (800ce4c <HAL_RCC_OscConfig+0x4b8>)
 800ccb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ccb6:	4a65      	ldr	r2, [pc, #404]	; (800ce4c <HAL_RCC_OscConfig+0x4b8>)
 800ccb8:	f043 0301 	orr.w	r3, r3, #1
 800ccbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ccc0:	e024      	b.n	800cd0c <HAL_RCC_OscConfig+0x378>
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	689b      	ldr	r3, [r3, #8]
 800ccc6:	2b05      	cmp	r3, #5
 800ccc8:	d110      	bne.n	800ccec <HAL_RCC_OscConfig+0x358>
 800ccca:	4b60      	ldr	r3, [pc, #384]	; (800ce4c <HAL_RCC_OscConfig+0x4b8>)
 800cccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ccd0:	4a5e      	ldr	r2, [pc, #376]	; (800ce4c <HAL_RCC_OscConfig+0x4b8>)
 800ccd2:	f043 0304 	orr.w	r3, r3, #4
 800ccd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ccda:	4b5c      	ldr	r3, [pc, #368]	; (800ce4c <HAL_RCC_OscConfig+0x4b8>)
 800ccdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cce0:	4a5a      	ldr	r2, [pc, #360]	; (800ce4c <HAL_RCC_OscConfig+0x4b8>)
 800cce2:	f043 0301 	orr.w	r3, r3, #1
 800cce6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ccea:	e00f      	b.n	800cd0c <HAL_RCC_OscConfig+0x378>
 800ccec:	4b57      	ldr	r3, [pc, #348]	; (800ce4c <HAL_RCC_OscConfig+0x4b8>)
 800ccee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ccf2:	4a56      	ldr	r2, [pc, #344]	; (800ce4c <HAL_RCC_OscConfig+0x4b8>)
 800ccf4:	f023 0301 	bic.w	r3, r3, #1
 800ccf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ccfc:	4b53      	ldr	r3, [pc, #332]	; (800ce4c <HAL_RCC_OscConfig+0x4b8>)
 800ccfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd02:	4a52      	ldr	r2, [pc, #328]	; (800ce4c <HAL_RCC_OscConfig+0x4b8>)
 800cd04:	f023 0304 	bic.w	r3, r3, #4
 800cd08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	689b      	ldr	r3, [r3, #8]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d016      	beq.n	800cd42 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd14:	f7fb fa4a 	bl	80081ac <HAL_GetTick>
 800cd18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cd1a:	e00a      	b.n	800cd32 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cd1c:	f7fb fa46 	bl	80081ac <HAL_GetTick>
 800cd20:	4602      	mov	r2, r0
 800cd22:	693b      	ldr	r3, [r7, #16]
 800cd24:	1ad3      	subs	r3, r2, r3
 800cd26:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd2a:	4293      	cmp	r3, r2
 800cd2c:	d901      	bls.n	800cd32 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800cd2e:	2303      	movs	r3, #3
 800cd30:	e140      	b.n	800cfb4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cd32:	4b46      	ldr	r3, [pc, #280]	; (800ce4c <HAL_RCC_OscConfig+0x4b8>)
 800cd34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd38:	f003 0302 	and.w	r3, r3, #2
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d0ed      	beq.n	800cd1c <HAL_RCC_OscConfig+0x388>
 800cd40:	e015      	b.n	800cd6e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd42:	f7fb fa33 	bl	80081ac <HAL_GetTick>
 800cd46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800cd48:	e00a      	b.n	800cd60 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cd4a:	f7fb fa2f 	bl	80081ac <HAL_GetTick>
 800cd4e:	4602      	mov	r2, r0
 800cd50:	693b      	ldr	r3, [r7, #16]
 800cd52:	1ad3      	subs	r3, r2, r3
 800cd54:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd58:	4293      	cmp	r3, r2
 800cd5a:	d901      	bls.n	800cd60 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800cd5c:	2303      	movs	r3, #3
 800cd5e:	e129      	b.n	800cfb4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800cd60:	4b3a      	ldr	r3, [pc, #232]	; (800ce4c <HAL_RCC_OscConfig+0x4b8>)
 800cd62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd66:	f003 0302 	and.w	r3, r3, #2
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d1ed      	bne.n	800cd4a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800cd6e:	7ffb      	ldrb	r3, [r7, #31]
 800cd70:	2b01      	cmp	r3, #1
 800cd72:	d105      	bne.n	800cd80 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cd74:	4b35      	ldr	r3, [pc, #212]	; (800ce4c <HAL_RCC_OscConfig+0x4b8>)
 800cd76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd78:	4a34      	ldr	r2, [pc, #208]	; (800ce4c <HAL_RCC_OscConfig+0x4b8>)
 800cd7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cd7e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	f003 0320 	and.w	r3, r3, #32
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d03c      	beq.n	800ce06 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	699b      	ldr	r3, [r3, #24]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d01c      	beq.n	800cdce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800cd94:	4b2d      	ldr	r3, [pc, #180]	; (800ce4c <HAL_RCC_OscConfig+0x4b8>)
 800cd96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cd9a:	4a2c      	ldr	r2, [pc, #176]	; (800ce4c <HAL_RCC_OscConfig+0x4b8>)
 800cd9c:	f043 0301 	orr.w	r3, r3, #1
 800cda0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cda4:	f7fb fa02 	bl	80081ac <HAL_GetTick>
 800cda8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800cdaa:	e008      	b.n	800cdbe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cdac:	f7fb f9fe 	bl	80081ac <HAL_GetTick>
 800cdb0:	4602      	mov	r2, r0
 800cdb2:	693b      	ldr	r3, [r7, #16]
 800cdb4:	1ad3      	subs	r3, r2, r3
 800cdb6:	2b02      	cmp	r3, #2
 800cdb8:	d901      	bls.n	800cdbe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800cdba:	2303      	movs	r3, #3
 800cdbc:	e0fa      	b.n	800cfb4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800cdbe:	4b23      	ldr	r3, [pc, #140]	; (800ce4c <HAL_RCC_OscConfig+0x4b8>)
 800cdc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cdc4:	f003 0302 	and.w	r3, r3, #2
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d0ef      	beq.n	800cdac <HAL_RCC_OscConfig+0x418>
 800cdcc:	e01b      	b.n	800ce06 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800cdce:	4b1f      	ldr	r3, [pc, #124]	; (800ce4c <HAL_RCC_OscConfig+0x4b8>)
 800cdd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cdd4:	4a1d      	ldr	r2, [pc, #116]	; (800ce4c <HAL_RCC_OscConfig+0x4b8>)
 800cdd6:	f023 0301 	bic.w	r3, r3, #1
 800cdda:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cdde:	f7fb f9e5 	bl	80081ac <HAL_GetTick>
 800cde2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800cde4:	e008      	b.n	800cdf8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cde6:	f7fb f9e1 	bl	80081ac <HAL_GetTick>
 800cdea:	4602      	mov	r2, r0
 800cdec:	693b      	ldr	r3, [r7, #16]
 800cdee:	1ad3      	subs	r3, r2, r3
 800cdf0:	2b02      	cmp	r3, #2
 800cdf2:	d901      	bls.n	800cdf8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800cdf4:	2303      	movs	r3, #3
 800cdf6:	e0dd      	b.n	800cfb4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800cdf8:	4b14      	ldr	r3, [pc, #80]	; (800ce4c <HAL_RCC_OscConfig+0x4b8>)
 800cdfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cdfe:	f003 0302 	and.w	r3, r3, #2
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d1ef      	bne.n	800cde6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	69db      	ldr	r3, [r3, #28]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	f000 80d1 	beq.w	800cfb2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ce10:	4b0e      	ldr	r3, [pc, #56]	; (800ce4c <HAL_RCC_OscConfig+0x4b8>)
 800ce12:	689b      	ldr	r3, [r3, #8]
 800ce14:	f003 030c 	and.w	r3, r3, #12
 800ce18:	2b0c      	cmp	r3, #12
 800ce1a:	f000 808b 	beq.w	800cf34 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	69db      	ldr	r3, [r3, #28]
 800ce22:	2b02      	cmp	r3, #2
 800ce24:	d15e      	bne.n	800cee4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ce26:	4b09      	ldr	r3, [pc, #36]	; (800ce4c <HAL_RCC_OscConfig+0x4b8>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	4a08      	ldr	r2, [pc, #32]	; (800ce4c <HAL_RCC_OscConfig+0x4b8>)
 800ce2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ce30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce32:	f7fb f9bb 	bl	80081ac <HAL_GetTick>
 800ce36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ce38:	e00c      	b.n	800ce54 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ce3a:	f7fb f9b7 	bl	80081ac <HAL_GetTick>
 800ce3e:	4602      	mov	r2, r0
 800ce40:	693b      	ldr	r3, [r7, #16]
 800ce42:	1ad3      	subs	r3, r2, r3
 800ce44:	2b02      	cmp	r3, #2
 800ce46:	d905      	bls.n	800ce54 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800ce48:	2303      	movs	r3, #3
 800ce4a:	e0b3      	b.n	800cfb4 <HAL_RCC_OscConfig+0x620>
 800ce4c:	40021000 	.word	0x40021000
 800ce50:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ce54:	4b59      	ldr	r3, [pc, #356]	; (800cfbc <HAL_RCC_OscConfig+0x628>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d1ec      	bne.n	800ce3a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ce60:	4b56      	ldr	r3, [pc, #344]	; (800cfbc <HAL_RCC_OscConfig+0x628>)
 800ce62:	68da      	ldr	r2, [r3, #12]
 800ce64:	4b56      	ldr	r3, [pc, #344]	; (800cfc0 <HAL_RCC_OscConfig+0x62c>)
 800ce66:	4013      	ands	r3, r2
 800ce68:	687a      	ldr	r2, [r7, #4]
 800ce6a:	6a11      	ldr	r1, [r2, #32]
 800ce6c:	687a      	ldr	r2, [r7, #4]
 800ce6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ce70:	3a01      	subs	r2, #1
 800ce72:	0112      	lsls	r2, r2, #4
 800ce74:	4311      	orrs	r1, r2
 800ce76:	687a      	ldr	r2, [r7, #4]
 800ce78:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800ce7a:	0212      	lsls	r2, r2, #8
 800ce7c:	4311      	orrs	r1, r2
 800ce7e:	687a      	ldr	r2, [r7, #4]
 800ce80:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ce82:	0852      	lsrs	r2, r2, #1
 800ce84:	3a01      	subs	r2, #1
 800ce86:	0552      	lsls	r2, r2, #21
 800ce88:	4311      	orrs	r1, r2
 800ce8a:	687a      	ldr	r2, [r7, #4]
 800ce8c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ce8e:	0852      	lsrs	r2, r2, #1
 800ce90:	3a01      	subs	r2, #1
 800ce92:	0652      	lsls	r2, r2, #25
 800ce94:	4311      	orrs	r1, r2
 800ce96:	687a      	ldr	r2, [r7, #4]
 800ce98:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ce9a:	06d2      	lsls	r2, r2, #27
 800ce9c:	430a      	orrs	r2, r1
 800ce9e:	4947      	ldr	r1, [pc, #284]	; (800cfbc <HAL_RCC_OscConfig+0x628>)
 800cea0:	4313      	orrs	r3, r2
 800cea2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cea4:	4b45      	ldr	r3, [pc, #276]	; (800cfbc <HAL_RCC_OscConfig+0x628>)
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	4a44      	ldr	r2, [pc, #272]	; (800cfbc <HAL_RCC_OscConfig+0x628>)
 800ceaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ceae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ceb0:	4b42      	ldr	r3, [pc, #264]	; (800cfbc <HAL_RCC_OscConfig+0x628>)
 800ceb2:	68db      	ldr	r3, [r3, #12]
 800ceb4:	4a41      	ldr	r2, [pc, #260]	; (800cfbc <HAL_RCC_OscConfig+0x628>)
 800ceb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ceba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cebc:	f7fb f976 	bl	80081ac <HAL_GetTick>
 800cec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cec2:	e008      	b.n	800ced6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cec4:	f7fb f972 	bl	80081ac <HAL_GetTick>
 800cec8:	4602      	mov	r2, r0
 800ceca:	693b      	ldr	r3, [r7, #16]
 800cecc:	1ad3      	subs	r3, r2, r3
 800cece:	2b02      	cmp	r3, #2
 800ced0:	d901      	bls.n	800ced6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800ced2:	2303      	movs	r3, #3
 800ced4:	e06e      	b.n	800cfb4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ced6:	4b39      	ldr	r3, [pc, #228]	; (800cfbc <HAL_RCC_OscConfig+0x628>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d0f0      	beq.n	800cec4 <HAL_RCC_OscConfig+0x530>
 800cee2:	e066      	b.n	800cfb2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cee4:	4b35      	ldr	r3, [pc, #212]	; (800cfbc <HAL_RCC_OscConfig+0x628>)
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	4a34      	ldr	r2, [pc, #208]	; (800cfbc <HAL_RCC_OscConfig+0x628>)
 800ceea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ceee:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800cef0:	4b32      	ldr	r3, [pc, #200]	; (800cfbc <HAL_RCC_OscConfig+0x628>)
 800cef2:	68db      	ldr	r3, [r3, #12]
 800cef4:	4a31      	ldr	r2, [pc, #196]	; (800cfbc <HAL_RCC_OscConfig+0x628>)
 800cef6:	f023 0303 	bic.w	r3, r3, #3
 800cefa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800cefc:	4b2f      	ldr	r3, [pc, #188]	; (800cfbc <HAL_RCC_OscConfig+0x628>)
 800cefe:	68db      	ldr	r3, [r3, #12]
 800cf00:	4a2e      	ldr	r2, [pc, #184]	; (800cfbc <HAL_RCC_OscConfig+0x628>)
 800cf02:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800cf06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cf0a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf0c:	f7fb f94e 	bl	80081ac <HAL_GetTick>
 800cf10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cf12:	e008      	b.n	800cf26 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cf14:	f7fb f94a 	bl	80081ac <HAL_GetTick>
 800cf18:	4602      	mov	r2, r0
 800cf1a:	693b      	ldr	r3, [r7, #16]
 800cf1c:	1ad3      	subs	r3, r2, r3
 800cf1e:	2b02      	cmp	r3, #2
 800cf20:	d901      	bls.n	800cf26 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800cf22:	2303      	movs	r3, #3
 800cf24:	e046      	b.n	800cfb4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cf26:	4b25      	ldr	r3, [pc, #148]	; (800cfbc <HAL_RCC_OscConfig+0x628>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d1f0      	bne.n	800cf14 <HAL_RCC_OscConfig+0x580>
 800cf32:	e03e      	b.n	800cfb2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	69db      	ldr	r3, [r3, #28]
 800cf38:	2b01      	cmp	r3, #1
 800cf3a:	d101      	bne.n	800cf40 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800cf3c:	2301      	movs	r3, #1
 800cf3e:	e039      	b.n	800cfb4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800cf40:	4b1e      	ldr	r3, [pc, #120]	; (800cfbc <HAL_RCC_OscConfig+0x628>)
 800cf42:	68db      	ldr	r3, [r3, #12]
 800cf44:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cf46:	697b      	ldr	r3, [r7, #20]
 800cf48:	f003 0203 	and.w	r2, r3, #3
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	6a1b      	ldr	r3, [r3, #32]
 800cf50:	429a      	cmp	r2, r3
 800cf52:	d12c      	bne.n	800cfae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800cf54:	697b      	ldr	r3, [r7, #20]
 800cf56:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf5e:	3b01      	subs	r3, #1
 800cf60:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cf62:	429a      	cmp	r2, r3
 800cf64:	d123      	bne.n	800cfae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800cf66:	697b      	ldr	r3, [r7, #20]
 800cf68:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf70:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800cf72:	429a      	cmp	r2, r3
 800cf74:	d11b      	bne.n	800cfae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf80:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800cf82:	429a      	cmp	r2, r3
 800cf84:	d113      	bne.n	800cfae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf90:	085b      	lsrs	r3, r3, #1
 800cf92:	3b01      	subs	r3, #1
 800cf94:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800cf96:	429a      	cmp	r2, r3
 800cf98:	d109      	bne.n	800cfae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800cf9a:	697b      	ldr	r3, [r7, #20]
 800cf9c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfa4:	085b      	lsrs	r3, r3, #1
 800cfa6:	3b01      	subs	r3, #1
 800cfa8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cfaa:	429a      	cmp	r2, r3
 800cfac:	d001      	beq.n	800cfb2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800cfae:	2301      	movs	r3, #1
 800cfb0:	e000      	b.n	800cfb4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800cfb2:	2300      	movs	r3, #0
}
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	3720      	adds	r7, #32
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}
 800cfbc:	40021000 	.word	0x40021000
 800cfc0:	019f800c 	.word	0x019f800c

0800cfc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b086      	sub	sp, #24
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
 800cfcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d101      	bne.n	800cfdc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800cfd8:	2301      	movs	r3, #1
 800cfda:	e11e      	b.n	800d21a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800cfdc:	4b91      	ldr	r3, [pc, #580]	; (800d224 <HAL_RCC_ClockConfig+0x260>)
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	f003 030f 	and.w	r3, r3, #15
 800cfe4:	683a      	ldr	r2, [r7, #0]
 800cfe6:	429a      	cmp	r2, r3
 800cfe8:	d910      	bls.n	800d00c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cfea:	4b8e      	ldr	r3, [pc, #568]	; (800d224 <HAL_RCC_ClockConfig+0x260>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	f023 020f 	bic.w	r2, r3, #15
 800cff2:	498c      	ldr	r1, [pc, #560]	; (800d224 <HAL_RCC_ClockConfig+0x260>)
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	4313      	orrs	r3, r2
 800cff8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cffa:	4b8a      	ldr	r3, [pc, #552]	; (800d224 <HAL_RCC_ClockConfig+0x260>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	f003 030f 	and.w	r3, r3, #15
 800d002:	683a      	ldr	r2, [r7, #0]
 800d004:	429a      	cmp	r2, r3
 800d006:	d001      	beq.n	800d00c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800d008:	2301      	movs	r3, #1
 800d00a:	e106      	b.n	800d21a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	f003 0301 	and.w	r3, r3, #1
 800d014:	2b00      	cmp	r3, #0
 800d016:	d073      	beq.n	800d100 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	685b      	ldr	r3, [r3, #4]
 800d01c:	2b03      	cmp	r3, #3
 800d01e:	d129      	bne.n	800d074 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d020:	4b81      	ldr	r3, [pc, #516]	; (800d228 <HAL_RCC_ClockConfig+0x264>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d101      	bne.n	800d030 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800d02c:	2301      	movs	r3, #1
 800d02e:	e0f4      	b.n	800d21a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800d030:	f000 f9d0 	bl	800d3d4 <RCC_GetSysClockFreqFromPLLSource>
 800d034:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800d036:	693b      	ldr	r3, [r7, #16]
 800d038:	4a7c      	ldr	r2, [pc, #496]	; (800d22c <HAL_RCC_ClockConfig+0x268>)
 800d03a:	4293      	cmp	r3, r2
 800d03c:	d93f      	bls.n	800d0be <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800d03e:	4b7a      	ldr	r3, [pc, #488]	; (800d228 <HAL_RCC_ClockConfig+0x264>)
 800d040:	689b      	ldr	r3, [r3, #8]
 800d042:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d046:	2b00      	cmp	r3, #0
 800d048:	d009      	beq.n	800d05e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800d052:	2b00      	cmp	r3, #0
 800d054:	d033      	beq.n	800d0be <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d12f      	bne.n	800d0be <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800d05e:	4b72      	ldr	r3, [pc, #456]	; (800d228 <HAL_RCC_ClockConfig+0x264>)
 800d060:	689b      	ldr	r3, [r3, #8]
 800d062:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d066:	4a70      	ldr	r2, [pc, #448]	; (800d228 <HAL_RCC_ClockConfig+0x264>)
 800d068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d06c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800d06e:	2380      	movs	r3, #128	; 0x80
 800d070:	617b      	str	r3, [r7, #20]
 800d072:	e024      	b.n	800d0be <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	685b      	ldr	r3, [r3, #4]
 800d078:	2b02      	cmp	r3, #2
 800d07a:	d107      	bne.n	800d08c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d07c:	4b6a      	ldr	r3, [pc, #424]	; (800d228 <HAL_RCC_ClockConfig+0x264>)
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d084:	2b00      	cmp	r3, #0
 800d086:	d109      	bne.n	800d09c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800d088:	2301      	movs	r3, #1
 800d08a:	e0c6      	b.n	800d21a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d08c:	4b66      	ldr	r3, [pc, #408]	; (800d228 <HAL_RCC_ClockConfig+0x264>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d094:	2b00      	cmp	r3, #0
 800d096:	d101      	bne.n	800d09c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800d098:	2301      	movs	r3, #1
 800d09a:	e0be      	b.n	800d21a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800d09c:	f000 f8ce 	bl	800d23c <HAL_RCC_GetSysClockFreq>
 800d0a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800d0a2:	693b      	ldr	r3, [r7, #16]
 800d0a4:	4a61      	ldr	r2, [pc, #388]	; (800d22c <HAL_RCC_ClockConfig+0x268>)
 800d0a6:	4293      	cmp	r3, r2
 800d0a8:	d909      	bls.n	800d0be <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800d0aa:	4b5f      	ldr	r3, [pc, #380]	; (800d228 <HAL_RCC_ClockConfig+0x264>)
 800d0ac:	689b      	ldr	r3, [r3, #8]
 800d0ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d0b2:	4a5d      	ldr	r2, [pc, #372]	; (800d228 <HAL_RCC_ClockConfig+0x264>)
 800d0b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0b8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800d0ba:	2380      	movs	r3, #128	; 0x80
 800d0bc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d0be:	4b5a      	ldr	r3, [pc, #360]	; (800d228 <HAL_RCC_ClockConfig+0x264>)
 800d0c0:	689b      	ldr	r3, [r3, #8]
 800d0c2:	f023 0203 	bic.w	r2, r3, #3
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	685b      	ldr	r3, [r3, #4]
 800d0ca:	4957      	ldr	r1, [pc, #348]	; (800d228 <HAL_RCC_ClockConfig+0x264>)
 800d0cc:	4313      	orrs	r3, r2
 800d0ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d0d0:	f7fb f86c 	bl	80081ac <HAL_GetTick>
 800d0d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d0d6:	e00a      	b.n	800d0ee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d0d8:	f7fb f868 	bl	80081ac <HAL_GetTick>
 800d0dc:	4602      	mov	r2, r0
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	1ad3      	subs	r3, r2, r3
 800d0e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d0e6:	4293      	cmp	r3, r2
 800d0e8:	d901      	bls.n	800d0ee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800d0ea:	2303      	movs	r3, #3
 800d0ec:	e095      	b.n	800d21a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d0ee:	4b4e      	ldr	r3, [pc, #312]	; (800d228 <HAL_RCC_ClockConfig+0x264>)
 800d0f0:	689b      	ldr	r3, [r3, #8]
 800d0f2:	f003 020c 	and.w	r2, r3, #12
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	685b      	ldr	r3, [r3, #4]
 800d0fa:	009b      	lsls	r3, r3, #2
 800d0fc:	429a      	cmp	r2, r3
 800d0fe:	d1eb      	bne.n	800d0d8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	f003 0302 	and.w	r3, r3, #2
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d023      	beq.n	800d154 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	f003 0304 	and.w	r3, r3, #4
 800d114:	2b00      	cmp	r3, #0
 800d116:	d005      	beq.n	800d124 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d118:	4b43      	ldr	r3, [pc, #268]	; (800d228 <HAL_RCC_ClockConfig+0x264>)
 800d11a:	689b      	ldr	r3, [r3, #8]
 800d11c:	4a42      	ldr	r2, [pc, #264]	; (800d228 <HAL_RCC_ClockConfig+0x264>)
 800d11e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800d122:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	f003 0308 	and.w	r3, r3, #8
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d007      	beq.n	800d140 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800d130:	4b3d      	ldr	r3, [pc, #244]	; (800d228 <HAL_RCC_ClockConfig+0x264>)
 800d132:	689b      	ldr	r3, [r3, #8]
 800d134:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d138:	4a3b      	ldr	r2, [pc, #236]	; (800d228 <HAL_RCC_ClockConfig+0x264>)
 800d13a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800d13e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d140:	4b39      	ldr	r3, [pc, #228]	; (800d228 <HAL_RCC_ClockConfig+0x264>)
 800d142:	689b      	ldr	r3, [r3, #8]
 800d144:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	689b      	ldr	r3, [r3, #8]
 800d14c:	4936      	ldr	r1, [pc, #216]	; (800d228 <HAL_RCC_ClockConfig+0x264>)
 800d14e:	4313      	orrs	r3, r2
 800d150:	608b      	str	r3, [r1, #8]
 800d152:	e008      	b.n	800d166 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800d154:	697b      	ldr	r3, [r7, #20]
 800d156:	2b80      	cmp	r3, #128	; 0x80
 800d158:	d105      	bne.n	800d166 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800d15a:	4b33      	ldr	r3, [pc, #204]	; (800d228 <HAL_RCC_ClockConfig+0x264>)
 800d15c:	689b      	ldr	r3, [r3, #8]
 800d15e:	4a32      	ldr	r2, [pc, #200]	; (800d228 <HAL_RCC_ClockConfig+0x264>)
 800d160:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d164:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d166:	4b2f      	ldr	r3, [pc, #188]	; (800d224 <HAL_RCC_ClockConfig+0x260>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	f003 030f 	and.w	r3, r3, #15
 800d16e:	683a      	ldr	r2, [r7, #0]
 800d170:	429a      	cmp	r2, r3
 800d172:	d21d      	bcs.n	800d1b0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d174:	4b2b      	ldr	r3, [pc, #172]	; (800d224 <HAL_RCC_ClockConfig+0x260>)
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	f023 020f 	bic.w	r2, r3, #15
 800d17c:	4929      	ldr	r1, [pc, #164]	; (800d224 <HAL_RCC_ClockConfig+0x260>)
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	4313      	orrs	r3, r2
 800d182:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800d184:	f7fb f812 	bl	80081ac <HAL_GetTick>
 800d188:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d18a:	e00a      	b.n	800d1a2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d18c:	f7fb f80e 	bl	80081ac <HAL_GetTick>
 800d190:	4602      	mov	r2, r0
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	1ad3      	subs	r3, r2, r3
 800d196:	f241 3288 	movw	r2, #5000	; 0x1388
 800d19a:	4293      	cmp	r3, r2
 800d19c:	d901      	bls.n	800d1a2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800d19e:	2303      	movs	r3, #3
 800d1a0:	e03b      	b.n	800d21a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d1a2:	4b20      	ldr	r3, [pc, #128]	; (800d224 <HAL_RCC_ClockConfig+0x260>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	f003 030f 	and.w	r3, r3, #15
 800d1aa:	683a      	ldr	r2, [r7, #0]
 800d1ac:	429a      	cmp	r2, r3
 800d1ae:	d1ed      	bne.n	800d18c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	f003 0304 	and.w	r3, r3, #4
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d008      	beq.n	800d1ce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d1bc:	4b1a      	ldr	r3, [pc, #104]	; (800d228 <HAL_RCC_ClockConfig+0x264>)
 800d1be:	689b      	ldr	r3, [r3, #8]
 800d1c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	68db      	ldr	r3, [r3, #12]
 800d1c8:	4917      	ldr	r1, [pc, #92]	; (800d228 <HAL_RCC_ClockConfig+0x264>)
 800d1ca:	4313      	orrs	r3, r2
 800d1cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	f003 0308 	and.w	r3, r3, #8
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d009      	beq.n	800d1ee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d1da:	4b13      	ldr	r3, [pc, #76]	; (800d228 <HAL_RCC_ClockConfig+0x264>)
 800d1dc:	689b      	ldr	r3, [r3, #8]
 800d1de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	691b      	ldr	r3, [r3, #16]
 800d1e6:	00db      	lsls	r3, r3, #3
 800d1e8:	490f      	ldr	r1, [pc, #60]	; (800d228 <HAL_RCC_ClockConfig+0x264>)
 800d1ea:	4313      	orrs	r3, r2
 800d1ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800d1ee:	f000 f825 	bl	800d23c <HAL_RCC_GetSysClockFreq>
 800d1f2:	4602      	mov	r2, r0
 800d1f4:	4b0c      	ldr	r3, [pc, #48]	; (800d228 <HAL_RCC_ClockConfig+0x264>)
 800d1f6:	689b      	ldr	r3, [r3, #8]
 800d1f8:	091b      	lsrs	r3, r3, #4
 800d1fa:	f003 030f 	and.w	r3, r3, #15
 800d1fe:	490c      	ldr	r1, [pc, #48]	; (800d230 <HAL_RCC_ClockConfig+0x26c>)
 800d200:	5ccb      	ldrb	r3, [r1, r3]
 800d202:	f003 031f 	and.w	r3, r3, #31
 800d206:	fa22 f303 	lsr.w	r3, r2, r3
 800d20a:	4a0a      	ldr	r2, [pc, #40]	; (800d234 <HAL_RCC_ClockConfig+0x270>)
 800d20c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800d20e:	4b0a      	ldr	r3, [pc, #40]	; (800d238 <HAL_RCC_ClockConfig+0x274>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	4618      	mov	r0, r3
 800d214:	f7fa fb72 	bl	80078fc <HAL_InitTick>
 800d218:	4603      	mov	r3, r0
}
 800d21a:	4618      	mov	r0, r3
 800d21c:	3718      	adds	r7, #24
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}
 800d222:	bf00      	nop
 800d224:	40022000 	.word	0x40022000
 800d228:	40021000 	.word	0x40021000
 800d22c:	04c4b400 	.word	0x04c4b400
 800d230:	08018cb0 	.word	0x08018cb0
 800d234:	20000004 	.word	0x20000004
 800d238:	20000008 	.word	0x20000008

0800d23c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d23c:	b480      	push	{r7}
 800d23e:	b087      	sub	sp, #28
 800d240:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800d242:	4b2c      	ldr	r3, [pc, #176]	; (800d2f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d244:	689b      	ldr	r3, [r3, #8]
 800d246:	f003 030c 	and.w	r3, r3, #12
 800d24a:	2b04      	cmp	r3, #4
 800d24c:	d102      	bne.n	800d254 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d24e:	4b2a      	ldr	r3, [pc, #168]	; (800d2f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800d250:	613b      	str	r3, [r7, #16]
 800d252:	e047      	b.n	800d2e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800d254:	4b27      	ldr	r3, [pc, #156]	; (800d2f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d256:	689b      	ldr	r3, [r3, #8]
 800d258:	f003 030c 	and.w	r3, r3, #12
 800d25c:	2b08      	cmp	r3, #8
 800d25e:	d102      	bne.n	800d266 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800d260:	4b26      	ldr	r3, [pc, #152]	; (800d2fc <HAL_RCC_GetSysClockFreq+0xc0>)
 800d262:	613b      	str	r3, [r7, #16]
 800d264:	e03e      	b.n	800d2e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800d266:	4b23      	ldr	r3, [pc, #140]	; (800d2f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d268:	689b      	ldr	r3, [r3, #8]
 800d26a:	f003 030c 	and.w	r3, r3, #12
 800d26e:	2b0c      	cmp	r3, #12
 800d270:	d136      	bne.n	800d2e0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d272:	4b20      	ldr	r3, [pc, #128]	; (800d2f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d274:	68db      	ldr	r3, [r3, #12]
 800d276:	f003 0303 	and.w	r3, r3, #3
 800d27a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d27c:	4b1d      	ldr	r3, [pc, #116]	; (800d2f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d27e:	68db      	ldr	r3, [r3, #12]
 800d280:	091b      	lsrs	r3, r3, #4
 800d282:	f003 030f 	and.w	r3, r3, #15
 800d286:	3301      	adds	r3, #1
 800d288:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	2b03      	cmp	r3, #3
 800d28e:	d10c      	bne.n	800d2aa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d290:	4a1a      	ldr	r2, [pc, #104]	; (800d2fc <HAL_RCC_GetSysClockFreq+0xc0>)
 800d292:	68bb      	ldr	r3, [r7, #8]
 800d294:	fbb2 f3f3 	udiv	r3, r2, r3
 800d298:	4a16      	ldr	r2, [pc, #88]	; (800d2f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d29a:	68d2      	ldr	r2, [r2, #12]
 800d29c:	0a12      	lsrs	r2, r2, #8
 800d29e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d2a2:	fb02 f303 	mul.w	r3, r2, r3
 800d2a6:	617b      	str	r3, [r7, #20]
      break;
 800d2a8:	e00c      	b.n	800d2c4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d2aa:	4a13      	ldr	r2, [pc, #76]	; (800d2f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2b2:	4a10      	ldr	r2, [pc, #64]	; (800d2f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d2b4:	68d2      	ldr	r2, [r2, #12]
 800d2b6:	0a12      	lsrs	r2, r2, #8
 800d2b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d2bc:	fb02 f303 	mul.w	r3, r2, r3
 800d2c0:	617b      	str	r3, [r7, #20]
      break;
 800d2c2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d2c4:	4b0b      	ldr	r3, [pc, #44]	; (800d2f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d2c6:	68db      	ldr	r3, [r3, #12]
 800d2c8:	0e5b      	lsrs	r3, r3, #25
 800d2ca:	f003 0303 	and.w	r3, r3, #3
 800d2ce:	3301      	adds	r3, #1
 800d2d0:	005b      	lsls	r3, r3, #1
 800d2d2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800d2d4:	697a      	ldr	r2, [r7, #20]
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2dc:	613b      	str	r3, [r7, #16]
 800d2de:	e001      	b.n	800d2e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800d2e4:	693b      	ldr	r3, [r7, #16]
}
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	371c      	adds	r7, #28
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f0:	4770      	bx	lr
 800d2f2:	bf00      	nop
 800d2f4:	40021000 	.word	0x40021000
 800d2f8:	00f42400 	.word	0x00f42400
 800d2fc:	007a1200 	.word	0x007a1200

0800d300 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d300:	b480      	push	{r7}
 800d302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d304:	4b03      	ldr	r3, [pc, #12]	; (800d314 <HAL_RCC_GetHCLKFreq+0x14>)
 800d306:	681b      	ldr	r3, [r3, #0]
}
 800d308:	4618      	mov	r0, r3
 800d30a:	46bd      	mov	sp, r7
 800d30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d310:	4770      	bx	lr
 800d312:	bf00      	nop
 800d314:	20000004 	.word	0x20000004

0800d318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800d31c:	f7ff fff0 	bl	800d300 <HAL_RCC_GetHCLKFreq>
 800d320:	4602      	mov	r2, r0
 800d322:	4b06      	ldr	r3, [pc, #24]	; (800d33c <HAL_RCC_GetPCLK1Freq+0x24>)
 800d324:	689b      	ldr	r3, [r3, #8]
 800d326:	0a1b      	lsrs	r3, r3, #8
 800d328:	f003 0307 	and.w	r3, r3, #7
 800d32c:	4904      	ldr	r1, [pc, #16]	; (800d340 <HAL_RCC_GetPCLK1Freq+0x28>)
 800d32e:	5ccb      	ldrb	r3, [r1, r3]
 800d330:	f003 031f 	and.w	r3, r3, #31
 800d334:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d338:	4618      	mov	r0, r3
 800d33a:	bd80      	pop	{r7, pc}
 800d33c:	40021000 	.word	0x40021000
 800d340:	08018cc0 	.word	0x08018cc0

0800d344 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d344:	b580      	push	{r7, lr}
 800d346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800d348:	f7ff ffda 	bl	800d300 <HAL_RCC_GetHCLKFreq>
 800d34c:	4602      	mov	r2, r0
 800d34e:	4b06      	ldr	r3, [pc, #24]	; (800d368 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d350:	689b      	ldr	r3, [r3, #8]
 800d352:	0adb      	lsrs	r3, r3, #11
 800d354:	f003 0307 	and.w	r3, r3, #7
 800d358:	4904      	ldr	r1, [pc, #16]	; (800d36c <HAL_RCC_GetPCLK2Freq+0x28>)
 800d35a:	5ccb      	ldrb	r3, [r1, r3]
 800d35c:	f003 031f 	and.w	r3, r3, #31
 800d360:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d364:	4618      	mov	r0, r3
 800d366:	bd80      	pop	{r7, pc}
 800d368:	40021000 	.word	0x40021000
 800d36c:	08018cc0 	.word	0x08018cc0

0800d370 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800d370:	b480      	push	{r7}
 800d372:	b083      	sub	sp, #12
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
 800d378:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	220f      	movs	r2, #15
 800d37e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800d380:	4b12      	ldr	r3, [pc, #72]	; (800d3cc <HAL_RCC_GetClockConfig+0x5c>)
 800d382:	689b      	ldr	r3, [r3, #8]
 800d384:	f003 0203 	and.w	r2, r3, #3
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800d38c:	4b0f      	ldr	r3, [pc, #60]	; (800d3cc <HAL_RCC_GetClockConfig+0x5c>)
 800d38e:	689b      	ldr	r3, [r3, #8]
 800d390:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800d398:	4b0c      	ldr	r3, [pc, #48]	; (800d3cc <HAL_RCC_GetClockConfig+0x5c>)
 800d39a:	689b      	ldr	r3, [r3, #8]
 800d39c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800d3a4:	4b09      	ldr	r3, [pc, #36]	; (800d3cc <HAL_RCC_GetClockConfig+0x5c>)
 800d3a6:	689b      	ldr	r3, [r3, #8]
 800d3a8:	08db      	lsrs	r3, r3, #3
 800d3aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800d3b2:	4b07      	ldr	r3, [pc, #28]	; (800d3d0 <HAL_RCC_GetClockConfig+0x60>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	f003 020f 	and.w	r2, r3, #15
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	601a      	str	r2, [r3, #0]
}
 800d3be:	bf00      	nop
 800d3c0:	370c      	adds	r7, #12
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c8:	4770      	bx	lr
 800d3ca:	bf00      	nop
 800d3cc:	40021000 	.word	0x40021000
 800d3d0:	40022000 	.word	0x40022000

0800d3d4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b087      	sub	sp, #28
 800d3d8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d3da:	4b1e      	ldr	r3, [pc, #120]	; (800d454 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d3dc:	68db      	ldr	r3, [r3, #12]
 800d3de:	f003 0303 	and.w	r3, r3, #3
 800d3e2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d3e4:	4b1b      	ldr	r3, [pc, #108]	; (800d454 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d3e6:	68db      	ldr	r3, [r3, #12]
 800d3e8:	091b      	lsrs	r3, r3, #4
 800d3ea:	f003 030f 	and.w	r3, r3, #15
 800d3ee:	3301      	adds	r3, #1
 800d3f0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800d3f2:	693b      	ldr	r3, [r7, #16]
 800d3f4:	2b03      	cmp	r3, #3
 800d3f6:	d10c      	bne.n	800d412 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d3f8:	4a17      	ldr	r2, [pc, #92]	; (800d458 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d400:	4a14      	ldr	r2, [pc, #80]	; (800d454 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d402:	68d2      	ldr	r2, [r2, #12]
 800d404:	0a12      	lsrs	r2, r2, #8
 800d406:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d40a:	fb02 f303 	mul.w	r3, r2, r3
 800d40e:	617b      	str	r3, [r7, #20]
    break;
 800d410:	e00c      	b.n	800d42c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d412:	4a12      	ldr	r2, [pc, #72]	; (800d45c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	fbb2 f3f3 	udiv	r3, r2, r3
 800d41a:	4a0e      	ldr	r2, [pc, #56]	; (800d454 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d41c:	68d2      	ldr	r2, [r2, #12]
 800d41e:	0a12      	lsrs	r2, r2, #8
 800d420:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d424:	fb02 f303 	mul.w	r3, r2, r3
 800d428:	617b      	str	r3, [r7, #20]
    break;
 800d42a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d42c:	4b09      	ldr	r3, [pc, #36]	; (800d454 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d42e:	68db      	ldr	r3, [r3, #12]
 800d430:	0e5b      	lsrs	r3, r3, #25
 800d432:	f003 0303 	and.w	r3, r3, #3
 800d436:	3301      	adds	r3, #1
 800d438:	005b      	lsls	r3, r3, #1
 800d43a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800d43c:	697a      	ldr	r2, [r7, #20]
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	fbb2 f3f3 	udiv	r3, r2, r3
 800d444:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800d446:	687b      	ldr	r3, [r7, #4]
}
 800d448:	4618      	mov	r0, r3
 800d44a:	371c      	adds	r7, #28
 800d44c:	46bd      	mov	sp, r7
 800d44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d452:	4770      	bx	lr
 800d454:	40021000 	.word	0x40021000
 800d458:	007a1200 	.word	0x007a1200
 800d45c:	00f42400 	.word	0x00f42400

0800d460 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b086      	sub	sp, #24
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d468:	2300      	movs	r3, #0
 800d46a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d46c:	2300      	movs	r3, #0
 800d46e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d478:	2b00      	cmp	r3, #0
 800d47a:	f000 8098 	beq.w	800d5ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d47e:	2300      	movs	r3, #0
 800d480:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d482:	4b43      	ldr	r3, [pc, #268]	; (800d590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d10d      	bne.n	800d4aa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d48e:	4b40      	ldr	r3, [pc, #256]	; (800d590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d492:	4a3f      	ldr	r2, [pc, #252]	; (800d590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d498:	6593      	str	r3, [r2, #88]	; 0x58
 800d49a:	4b3d      	ldr	r3, [pc, #244]	; (800d590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d49c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d49e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d4a2:	60bb      	str	r3, [r7, #8]
 800d4a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d4a6:	2301      	movs	r3, #1
 800d4a8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d4aa:	4b3a      	ldr	r3, [pc, #232]	; (800d594 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	4a39      	ldr	r2, [pc, #228]	; (800d594 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d4b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d4b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d4b6:	f7fa fe79 	bl	80081ac <HAL_GetTick>
 800d4ba:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d4bc:	e009      	b.n	800d4d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d4be:	f7fa fe75 	bl	80081ac <HAL_GetTick>
 800d4c2:	4602      	mov	r2, r0
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	1ad3      	subs	r3, r2, r3
 800d4c8:	2b02      	cmp	r3, #2
 800d4ca:	d902      	bls.n	800d4d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800d4cc:	2303      	movs	r3, #3
 800d4ce:	74fb      	strb	r3, [r7, #19]
        break;
 800d4d0:	e005      	b.n	800d4de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d4d2:	4b30      	ldr	r3, [pc, #192]	; (800d594 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d0ef      	beq.n	800d4be <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800d4de:	7cfb      	ldrb	r3, [r7, #19]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d159      	bne.n	800d598 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d4e4:	4b2a      	ldr	r3, [pc, #168]	; (800d590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d4e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d4ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d4ee:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800d4f0:	697b      	ldr	r3, [r7, #20]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d01e      	beq.n	800d534 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4fa:	697a      	ldr	r2, [r7, #20]
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	d019      	beq.n	800d534 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d500:	4b23      	ldr	r3, [pc, #140]	; (800d590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d506:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d50a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d50c:	4b20      	ldr	r3, [pc, #128]	; (800d590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d50e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d512:	4a1f      	ldr	r2, [pc, #124]	; (800d590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d518:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d51c:	4b1c      	ldr	r3, [pc, #112]	; (800d590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d51e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d522:	4a1b      	ldr	r2, [pc, #108]	; (800d590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d524:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d528:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d52c:	4a18      	ldr	r2, [pc, #96]	; (800d590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d52e:	697b      	ldr	r3, [r7, #20]
 800d530:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d534:	697b      	ldr	r3, [r7, #20]
 800d536:	f003 0301 	and.w	r3, r3, #1
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d016      	beq.n	800d56c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d53e:	f7fa fe35 	bl	80081ac <HAL_GetTick>
 800d542:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d544:	e00b      	b.n	800d55e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d546:	f7fa fe31 	bl	80081ac <HAL_GetTick>
 800d54a:	4602      	mov	r2, r0
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	1ad3      	subs	r3, r2, r3
 800d550:	f241 3288 	movw	r2, #5000	; 0x1388
 800d554:	4293      	cmp	r3, r2
 800d556:	d902      	bls.n	800d55e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800d558:	2303      	movs	r3, #3
 800d55a:	74fb      	strb	r3, [r7, #19]
            break;
 800d55c:	e006      	b.n	800d56c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d55e:	4b0c      	ldr	r3, [pc, #48]	; (800d590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d564:	f003 0302 	and.w	r3, r3, #2
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d0ec      	beq.n	800d546 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800d56c:	7cfb      	ldrb	r3, [r7, #19]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d10b      	bne.n	800d58a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d572:	4b07      	ldr	r3, [pc, #28]	; (800d590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d578:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d580:	4903      	ldr	r1, [pc, #12]	; (800d590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d582:	4313      	orrs	r3, r2
 800d584:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800d588:	e008      	b.n	800d59c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d58a:	7cfb      	ldrb	r3, [r7, #19]
 800d58c:	74bb      	strb	r3, [r7, #18]
 800d58e:	e005      	b.n	800d59c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800d590:	40021000 	.word	0x40021000
 800d594:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d598:	7cfb      	ldrb	r3, [r7, #19]
 800d59a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d59c:	7c7b      	ldrb	r3, [r7, #17]
 800d59e:	2b01      	cmp	r3, #1
 800d5a0:	d105      	bne.n	800d5ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d5a2:	4ba7      	ldr	r3, [pc, #668]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d5a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5a6:	4aa6      	ldr	r2, [pc, #664]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d5a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d5ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	f003 0301 	and.w	r3, r3, #1
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d00a      	beq.n	800d5d0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d5ba:	4ba1      	ldr	r3, [pc, #644]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d5bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5c0:	f023 0203 	bic.w	r2, r3, #3
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	685b      	ldr	r3, [r3, #4]
 800d5c8:	499d      	ldr	r1, [pc, #628]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d5ca:	4313      	orrs	r3, r2
 800d5cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	f003 0302 	and.w	r3, r3, #2
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d00a      	beq.n	800d5f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d5dc:	4b98      	ldr	r3, [pc, #608]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d5de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5e2:	f023 020c 	bic.w	r2, r3, #12
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	689b      	ldr	r3, [r3, #8]
 800d5ea:	4995      	ldr	r1, [pc, #596]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d5ec:	4313      	orrs	r3, r2
 800d5ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	f003 0304 	and.w	r3, r3, #4
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d00a      	beq.n	800d614 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d5fe:	4b90      	ldr	r3, [pc, #576]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d604:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	68db      	ldr	r3, [r3, #12]
 800d60c:	498c      	ldr	r1, [pc, #560]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d60e:	4313      	orrs	r3, r2
 800d610:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	f003 0308 	and.w	r3, r3, #8
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d00a      	beq.n	800d636 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d620:	4b87      	ldr	r3, [pc, #540]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d626:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	691b      	ldr	r3, [r3, #16]
 800d62e:	4984      	ldr	r1, [pc, #528]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d630:	4313      	orrs	r3, r2
 800d632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	f003 0310 	and.w	r3, r3, #16
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d00a      	beq.n	800d658 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d642:	4b7f      	ldr	r3, [pc, #508]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d648:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	695b      	ldr	r3, [r3, #20]
 800d650:	497b      	ldr	r1, [pc, #492]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d652:	4313      	orrs	r3, r2
 800d654:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	f003 0320 	and.w	r3, r3, #32
 800d660:	2b00      	cmp	r3, #0
 800d662:	d00a      	beq.n	800d67a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d664:	4b76      	ldr	r3, [pc, #472]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d66a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	699b      	ldr	r3, [r3, #24]
 800d672:	4973      	ldr	r1, [pc, #460]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d674:	4313      	orrs	r3, r2
 800d676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d682:	2b00      	cmp	r3, #0
 800d684:	d00a      	beq.n	800d69c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d686:	4b6e      	ldr	r3, [pc, #440]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d68c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	69db      	ldr	r3, [r3, #28]
 800d694:	496a      	ldr	r1, [pc, #424]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d696:	4313      	orrs	r3, r2
 800d698:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d00a      	beq.n	800d6be <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d6a8:	4b65      	ldr	r3, [pc, #404]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d6aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d6ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	6a1b      	ldr	r3, [r3, #32]
 800d6b6:	4962      	ldr	r1, [pc, #392]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d6b8:	4313      	orrs	r3, r2
 800d6ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d00a      	beq.n	800d6e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d6ca:	4b5d      	ldr	r3, [pc, #372]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d6cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d6d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6d8:	4959      	ldr	r1, [pc, #356]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d6da:	4313      	orrs	r3, r2
 800d6dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d00a      	beq.n	800d702 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d6ec:	4b54      	ldr	r3, [pc, #336]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d6ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d6f2:	f023 0203 	bic.w	r2, r3, #3
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6fa:	4951      	ldr	r1, [pc, #324]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d6fc:	4313      	orrs	r3, r2
 800d6fe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d00a      	beq.n	800d724 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d70e:	4b4c      	ldr	r3, [pc, #304]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d714:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d71c:	4948      	ldr	r1, [pc, #288]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d71e:	4313      	orrs	r3, r2
 800d720:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d015      	beq.n	800d75c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d730:	4b43      	ldr	r3, [pc, #268]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d736:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d73e:	4940      	ldr	r1, [pc, #256]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d740:	4313      	orrs	r3, r2
 800d742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d74a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d74e:	d105      	bne.n	800d75c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d750:	4b3b      	ldr	r3, [pc, #236]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d752:	68db      	ldr	r3, [r3, #12]
 800d754:	4a3a      	ldr	r2, [pc, #232]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d756:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d75a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d764:	2b00      	cmp	r3, #0
 800d766:	d015      	beq.n	800d794 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d768:	4b35      	ldr	r3, [pc, #212]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d76a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d76e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d776:	4932      	ldr	r1, [pc, #200]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d778:	4313      	orrs	r3, r2
 800d77a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d782:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d786:	d105      	bne.n	800d794 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d788:	4b2d      	ldr	r3, [pc, #180]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d78a:	68db      	ldr	r3, [r3, #12]
 800d78c:	4a2c      	ldr	r2, [pc, #176]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d78e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d792:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d015      	beq.n	800d7cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d7a0:	4b27      	ldr	r3, [pc, #156]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d7a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d7a6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7ae:	4924      	ldr	r1, [pc, #144]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d7b0:	4313      	orrs	r3, r2
 800d7b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d7be:	d105      	bne.n	800d7cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d7c0:	4b1f      	ldr	r3, [pc, #124]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d7c2:	68db      	ldr	r3, [r3, #12]
 800d7c4:	4a1e      	ldr	r2, [pc, #120]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d7c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d7ca:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d015      	beq.n	800d804 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d7d8:	4b19      	ldr	r3, [pc, #100]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d7da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d7de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7e6:	4916      	ldr	r1, [pc, #88]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d7e8:	4313      	orrs	r3, r2
 800d7ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d7f6:	d105      	bne.n	800d804 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d7f8:	4b11      	ldr	r3, [pc, #68]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d7fa:	68db      	ldr	r3, [r3, #12]
 800d7fc:	4a10      	ldr	r2, [pc, #64]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d7fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d802:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d019      	beq.n	800d844 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d810:	4b0b      	ldr	r3, [pc, #44]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d816:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d81e:	4908      	ldr	r1, [pc, #32]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d820:	4313      	orrs	r3, r2
 800d822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d82a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d82e:	d109      	bne.n	800d844 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d830:	4b03      	ldr	r3, [pc, #12]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d832:	68db      	ldr	r3, [r3, #12]
 800d834:	4a02      	ldr	r2, [pc, #8]	; (800d840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d836:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d83a:	60d3      	str	r3, [r2, #12]
 800d83c:	e002      	b.n	800d844 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800d83e:	bf00      	nop
 800d840:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d015      	beq.n	800d87c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800d850:	4b29      	ldr	r3, [pc, #164]	; (800d8f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d856:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d85e:	4926      	ldr	r1, [pc, #152]	; (800d8f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d860:	4313      	orrs	r3, r2
 800d862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d86a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d86e:	d105      	bne.n	800d87c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d870:	4b21      	ldr	r3, [pc, #132]	; (800d8f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d872:	68db      	ldr	r3, [r3, #12]
 800d874:	4a20      	ldr	r2, [pc, #128]	; (800d8f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d87a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d884:	2b00      	cmp	r3, #0
 800d886:	d015      	beq.n	800d8b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800d888:	4b1b      	ldr	r3, [pc, #108]	; (800d8f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d88a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d88e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d896:	4918      	ldr	r1, [pc, #96]	; (800d8f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d898:	4313      	orrs	r3, r2
 800d89a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d8a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d8a6:	d105      	bne.n	800d8b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d8a8:	4b13      	ldr	r3, [pc, #76]	; (800d8f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d8aa:	68db      	ldr	r3, [r3, #12]
 800d8ac:	4a12      	ldr	r2, [pc, #72]	; (800d8f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d8ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d8b2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d015      	beq.n	800d8ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800d8c0:	4b0d      	ldr	r3, [pc, #52]	; (800d8f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d8c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d8c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d8ce:	490a      	ldr	r1, [pc, #40]	; (800d8f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d8d0:	4313      	orrs	r3, r2
 800d8d2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d8da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d8de:	d105      	bne.n	800d8ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d8e0:	4b05      	ldr	r3, [pc, #20]	; (800d8f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d8e2:	68db      	ldr	r3, [r3, #12]
 800d8e4:	4a04      	ldr	r2, [pc, #16]	; (800d8f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d8e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d8ea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800d8ec:	7cbb      	ldrb	r3, [r7, #18]
}
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	3718      	adds	r7, #24
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd80      	pop	{r7, pc}
 800d8f6:	bf00      	nop
 800d8f8:	40021000 	.word	0x40021000

0800d8fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b084      	sub	sp, #16
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d101      	bne.n	800d90e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d90a:	2301      	movs	r3, #1
 800d90c:	e09d      	b.n	800da4a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d912:	2b00      	cmp	r3, #0
 800d914:	d108      	bne.n	800d928 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	685b      	ldr	r3, [r3, #4]
 800d91a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d91e:	d009      	beq.n	800d934 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	2200      	movs	r2, #0
 800d924:	61da      	str	r2, [r3, #28]
 800d926:	e005      	b.n	800d934 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2200      	movs	r2, #0
 800d92c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	2200      	movs	r2, #0
 800d932:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2200      	movs	r2, #0
 800d938:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d940:	b2db      	uxtb	r3, r3
 800d942:	2b00      	cmp	r3, #0
 800d944:	d106      	bne.n	800d954 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2200      	movs	r2, #0
 800d94a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d94e:	6878      	ldr	r0, [r7, #4]
 800d950:	f7f9 ff6a 	bl	8007828 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2202      	movs	r2, #2
 800d958:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	681a      	ldr	r2, [r3, #0]
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d96a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	68db      	ldr	r3, [r3, #12]
 800d970:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d974:	d902      	bls.n	800d97c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d976:	2300      	movs	r3, #0
 800d978:	60fb      	str	r3, [r7, #12]
 800d97a:	e002      	b.n	800d982 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d97c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d980:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	68db      	ldr	r3, [r3, #12]
 800d986:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800d98a:	d007      	beq.n	800d99c <HAL_SPI_Init+0xa0>
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	68db      	ldr	r3, [r3, #12]
 800d990:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d994:	d002      	beq.n	800d99c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2200      	movs	r2, #0
 800d99a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	685b      	ldr	r3, [r3, #4]
 800d9a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	689b      	ldr	r3, [r3, #8]
 800d9a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800d9ac:	431a      	orrs	r2, r3
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	691b      	ldr	r3, [r3, #16]
 800d9b2:	f003 0302 	and.w	r3, r3, #2
 800d9b6:	431a      	orrs	r2, r3
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	695b      	ldr	r3, [r3, #20]
 800d9bc:	f003 0301 	and.w	r3, r3, #1
 800d9c0:	431a      	orrs	r2, r3
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	699b      	ldr	r3, [r3, #24]
 800d9c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d9ca:	431a      	orrs	r2, r3
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	69db      	ldr	r3, [r3, #28]
 800d9d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d9d4:	431a      	orrs	r2, r3
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6a1b      	ldr	r3, [r3, #32]
 800d9da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d9de:	ea42 0103 	orr.w	r1, r2, r3
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9e6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	430a      	orrs	r2, r1
 800d9f0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	699b      	ldr	r3, [r3, #24]
 800d9f6:	0c1b      	lsrs	r3, r3, #16
 800d9f8:	f003 0204 	and.w	r2, r3, #4
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da00:	f003 0310 	and.w	r3, r3, #16
 800da04:	431a      	orrs	r2, r3
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da0a:	f003 0308 	and.w	r3, r3, #8
 800da0e:	431a      	orrs	r2, r3
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	68db      	ldr	r3, [r3, #12]
 800da14:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800da18:	ea42 0103 	orr.w	r1, r2, r3
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	430a      	orrs	r2, r1
 800da28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	69da      	ldr	r2, [r3, #28]
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800da38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	2200      	movs	r2, #0
 800da3e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2201      	movs	r2, #1
 800da44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800da48:	2300      	movs	r3, #0
}
 800da4a:	4618      	mov	r0, r3
 800da4c:	3710      	adds	r7, #16
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd80      	pop	{r7, pc}

0800da52 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800da52:	b580      	push	{r7, lr}
 800da54:	b082      	sub	sp, #8
 800da56:	af00      	add	r7, sp, #0
 800da58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d101      	bne.n	800da64 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800da60:	2301      	movs	r3, #1
 800da62:	e049      	b.n	800daf8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da6a:	b2db      	uxtb	r3, r3
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d106      	bne.n	800da7e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	2200      	movs	r2, #0
 800da74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800da78:	6878      	ldr	r0, [r7, #4]
 800da7a:	f000 f841 	bl	800db00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	2202      	movs	r2, #2
 800da82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681a      	ldr	r2, [r3, #0]
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	3304      	adds	r3, #4
 800da8e:	4619      	mov	r1, r3
 800da90:	4610      	mov	r0, r2
 800da92:	f000 fcdd 	bl	800e450 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2201      	movs	r2, #1
 800da9a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2201      	movs	r2, #1
 800daa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	2201      	movs	r2, #1
 800daaa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	2201      	movs	r2, #1
 800dab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2201      	movs	r2, #1
 800daba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2201      	movs	r2, #1
 800dac2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2201      	movs	r2, #1
 800daca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2201      	movs	r2, #1
 800dad2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	2201      	movs	r2, #1
 800dada:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	2201      	movs	r2, #1
 800dae2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2201      	movs	r2, #1
 800daea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2201      	movs	r2, #1
 800daf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800daf6:	2300      	movs	r3, #0
}
 800daf8:	4618      	mov	r0, r3
 800dafa:	3708      	adds	r7, #8
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}

0800db00 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800db00:	b480      	push	{r7}
 800db02:	b083      	sub	sp, #12
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800db08:	bf00      	nop
 800db0a:	370c      	adds	r7, #12
 800db0c:	46bd      	mov	sp, r7
 800db0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db12:	4770      	bx	lr

0800db14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800db14:	b480      	push	{r7}
 800db16:	b085      	sub	sp, #20
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db22:	b2db      	uxtb	r3, r3
 800db24:	2b01      	cmp	r3, #1
 800db26:	d001      	beq.n	800db2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800db28:	2301      	movs	r3, #1
 800db2a:	e054      	b.n	800dbd6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2202      	movs	r2, #2
 800db30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	68da      	ldr	r2, [r3, #12]
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	f042 0201 	orr.w	r2, r2, #1
 800db42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	4a26      	ldr	r2, [pc, #152]	; (800dbe4 <HAL_TIM_Base_Start_IT+0xd0>)
 800db4a:	4293      	cmp	r3, r2
 800db4c:	d022      	beq.n	800db94 <HAL_TIM_Base_Start_IT+0x80>
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db56:	d01d      	beq.n	800db94 <HAL_TIM_Base_Start_IT+0x80>
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	4a22      	ldr	r2, [pc, #136]	; (800dbe8 <HAL_TIM_Base_Start_IT+0xd4>)
 800db5e:	4293      	cmp	r3, r2
 800db60:	d018      	beq.n	800db94 <HAL_TIM_Base_Start_IT+0x80>
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	4a21      	ldr	r2, [pc, #132]	; (800dbec <HAL_TIM_Base_Start_IT+0xd8>)
 800db68:	4293      	cmp	r3, r2
 800db6a:	d013      	beq.n	800db94 <HAL_TIM_Base_Start_IT+0x80>
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	4a1f      	ldr	r2, [pc, #124]	; (800dbf0 <HAL_TIM_Base_Start_IT+0xdc>)
 800db72:	4293      	cmp	r3, r2
 800db74:	d00e      	beq.n	800db94 <HAL_TIM_Base_Start_IT+0x80>
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	4a1e      	ldr	r2, [pc, #120]	; (800dbf4 <HAL_TIM_Base_Start_IT+0xe0>)
 800db7c:	4293      	cmp	r3, r2
 800db7e:	d009      	beq.n	800db94 <HAL_TIM_Base_Start_IT+0x80>
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	4a1c      	ldr	r2, [pc, #112]	; (800dbf8 <HAL_TIM_Base_Start_IT+0xe4>)
 800db86:	4293      	cmp	r3, r2
 800db88:	d004      	beq.n	800db94 <HAL_TIM_Base_Start_IT+0x80>
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	4a1b      	ldr	r2, [pc, #108]	; (800dbfc <HAL_TIM_Base_Start_IT+0xe8>)
 800db90:	4293      	cmp	r3, r2
 800db92:	d115      	bne.n	800dbc0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	689a      	ldr	r2, [r3, #8]
 800db9a:	4b19      	ldr	r3, [pc, #100]	; (800dc00 <HAL_TIM_Base_Start_IT+0xec>)
 800db9c:	4013      	ands	r3, r2
 800db9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	2b06      	cmp	r3, #6
 800dba4:	d015      	beq.n	800dbd2 <HAL_TIM_Base_Start_IT+0xbe>
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dbac:	d011      	beq.n	800dbd2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	681a      	ldr	r2, [r3, #0]
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	f042 0201 	orr.w	r2, r2, #1
 800dbbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dbbe:	e008      	b.n	800dbd2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	681a      	ldr	r2, [r3, #0]
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	f042 0201 	orr.w	r2, r2, #1
 800dbce:	601a      	str	r2, [r3, #0]
 800dbd0:	e000      	b.n	800dbd4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dbd2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dbd4:	2300      	movs	r3, #0
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	3714      	adds	r7, #20
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe0:	4770      	bx	lr
 800dbe2:	bf00      	nop
 800dbe4:	40012c00 	.word	0x40012c00
 800dbe8:	40000400 	.word	0x40000400
 800dbec:	40000800 	.word	0x40000800
 800dbf0:	40000c00 	.word	0x40000c00
 800dbf4:	40013400 	.word	0x40013400
 800dbf8:	40014000 	.word	0x40014000
 800dbfc:	40015000 	.word	0x40015000
 800dc00:	00010007 	.word	0x00010007

0800dc04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b082      	sub	sp, #8
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d101      	bne.n	800dc16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800dc12:	2301      	movs	r3, #1
 800dc14:	e049      	b.n	800dcaa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dc1c:	b2db      	uxtb	r3, r3
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d106      	bne.n	800dc30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	2200      	movs	r2, #0
 800dc26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f7fa f86a 	bl	8007d04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2202      	movs	r2, #2
 800dc34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681a      	ldr	r2, [r3, #0]
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	3304      	adds	r3, #4
 800dc40:	4619      	mov	r1, r3
 800dc42:	4610      	mov	r0, r2
 800dc44:	f000 fc04 	bl	800e450 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2201      	movs	r2, #1
 800dc4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2201      	movs	r2, #1
 800dc54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2201      	movs	r2, #1
 800dc5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2201      	movs	r2, #1
 800dc64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	2201      	movs	r2, #1
 800dc6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2201      	movs	r2, #1
 800dc74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2201      	movs	r2, #1
 800dc7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	2201      	movs	r2, #1
 800dc84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	2201      	movs	r2, #1
 800dc8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2201      	movs	r2, #1
 800dc94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2201      	movs	r2, #1
 800dc9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	2201      	movs	r2, #1
 800dca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dca8:	2300      	movs	r3, #0
}
 800dcaa:	4618      	mov	r0, r3
 800dcac:	3708      	adds	r7, #8
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}
	...

0800dcb4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b084      	sub	sp, #16
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
 800dcbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d109      	bne.n	800dcd8 <HAL_TIM_PWM_Start+0x24>
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800dcca:	b2db      	uxtb	r3, r3
 800dccc:	2b01      	cmp	r3, #1
 800dcce:	bf14      	ite	ne
 800dcd0:	2301      	movne	r3, #1
 800dcd2:	2300      	moveq	r3, #0
 800dcd4:	b2db      	uxtb	r3, r3
 800dcd6:	e03c      	b.n	800dd52 <HAL_TIM_PWM_Start+0x9e>
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	2b04      	cmp	r3, #4
 800dcdc:	d109      	bne.n	800dcf2 <HAL_TIM_PWM_Start+0x3e>
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800dce4:	b2db      	uxtb	r3, r3
 800dce6:	2b01      	cmp	r3, #1
 800dce8:	bf14      	ite	ne
 800dcea:	2301      	movne	r3, #1
 800dcec:	2300      	moveq	r3, #0
 800dcee:	b2db      	uxtb	r3, r3
 800dcf0:	e02f      	b.n	800dd52 <HAL_TIM_PWM_Start+0x9e>
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	2b08      	cmp	r3, #8
 800dcf6:	d109      	bne.n	800dd0c <HAL_TIM_PWM_Start+0x58>
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dcfe:	b2db      	uxtb	r3, r3
 800dd00:	2b01      	cmp	r3, #1
 800dd02:	bf14      	ite	ne
 800dd04:	2301      	movne	r3, #1
 800dd06:	2300      	moveq	r3, #0
 800dd08:	b2db      	uxtb	r3, r3
 800dd0a:	e022      	b.n	800dd52 <HAL_TIM_PWM_Start+0x9e>
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	2b0c      	cmp	r3, #12
 800dd10:	d109      	bne.n	800dd26 <HAL_TIM_PWM_Start+0x72>
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dd18:	b2db      	uxtb	r3, r3
 800dd1a:	2b01      	cmp	r3, #1
 800dd1c:	bf14      	ite	ne
 800dd1e:	2301      	movne	r3, #1
 800dd20:	2300      	moveq	r3, #0
 800dd22:	b2db      	uxtb	r3, r3
 800dd24:	e015      	b.n	800dd52 <HAL_TIM_PWM_Start+0x9e>
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	2b10      	cmp	r3, #16
 800dd2a:	d109      	bne.n	800dd40 <HAL_TIM_PWM_Start+0x8c>
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dd32:	b2db      	uxtb	r3, r3
 800dd34:	2b01      	cmp	r3, #1
 800dd36:	bf14      	ite	ne
 800dd38:	2301      	movne	r3, #1
 800dd3a:	2300      	moveq	r3, #0
 800dd3c:	b2db      	uxtb	r3, r3
 800dd3e:	e008      	b.n	800dd52 <HAL_TIM_PWM_Start+0x9e>
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800dd46:	b2db      	uxtb	r3, r3
 800dd48:	2b01      	cmp	r3, #1
 800dd4a:	bf14      	ite	ne
 800dd4c:	2301      	movne	r3, #1
 800dd4e:	2300      	moveq	r3, #0
 800dd50:	b2db      	uxtb	r3, r3
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d001      	beq.n	800dd5a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800dd56:	2301      	movs	r3, #1
 800dd58:	e0a6      	b.n	800dea8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d104      	bne.n	800dd6a <HAL_TIM_PWM_Start+0xb6>
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2202      	movs	r2, #2
 800dd64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dd68:	e023      	b.n	800ddb2 <HAL_TIM_PWM_Start+0xfe>
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	2b04      	cmp	r3, #4
 800dd6e:	d104      	bne.n	800dd7a <HAL_TIM_PWM_Start+0xc6>
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2202      	movs	r2, #2
 800dd74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dd78:	e01b      	b.n	800ddb2 <HAL_TIM_PWM_Start+0xfe>
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	2b08      	cmp	r3, #8
 800dd7e:	d104      	bne.n	800dd8a <HAL_TIM_PWM_Start+0xd6>
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2202      	movs	r2, #2
 800dd84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dd88:	e013      	b.n	800ddb2 <HAL_TIM_PWM_Start+0xfe>
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	2b0c      	cmp	r3, #12
 800dd8e:	d104      	bne.n	800dd9a <HAL_TIM_PWM_Start+0xe6>
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2202      	movs	r2, #2
 800dd94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dd98:	e00b      	b.n	800ddb2 <HAL_TIM_PWM_Start+0xfe>
 800dd9a:	683b      	ldr	r3, [r7, #0]
 800dd9c:	2b10      	cmp	r3, #16
 800dd9e:	d104      	bne.n	800ddaa <HAL_TIM_PWM_Start+0xf6>
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2202      	movs	r2, #2
 800dda4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dda8:	e003      	b.n	800ddb2 <HAL_TIM_PWM_Start+0xfe>
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	2202      	movs	r2, #2
 800ddae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	2201      	movs	r2, #1
 800ddb8:	6839      	ldr	r1, [r7, #0]
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f000 ff1a 	bl	800ebf4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	4a3a      	ldr	r2, [pc, #232]	; (800deb0 <HAL_TIM_PWM_Start+0x1fc>)
 800ddc6:	4293      	cmp	r3, r2
 800ddc8:	d018      	beq.n	800ddfc <HAL_TIM_PWM_Start+0x148>
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	4a39      	ldr	r2, [pc, #228]	; (800deb4 <HAL_TIM_PWM_Start+0x200>)
 800ddd0:	4293      	cmp	r3, r2
 800ddd2:	d013      	beq.n	800ddfc <HAL_TIM_PWM_Start+0x148>
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	4a37      	ldr	r2, [pc, #220]	; (800deb8 <HAL_TIM_PWM_Start+0x204>)
 800ddda:	4293      	cmp	r3, r2
 800dddc:	d00e      	beq.n	800ddfc <HAL_TIM_PWM_Start+0x148>
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	4a36      	ldr	r2, [pc, #216]	; (800debc <HAL_TIM_PWM_Start+0x208>)
 800dde4:	4293      	cmp	r3, r2
 800dde6:	d009      	beq.n	800ddfc <HAL_TIM_PWM_Start+0x148>
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	4a34      	ldr	r2, [pc, #208]	; (800dec0 <HAL_TIM_PWM_Start+0x20c>)
 800ddee:	4293      	cmp	r3, r2
 800ddf0:	d004      	beq.n	800ddfc <HAL_TIM_PWM_Start+0x148>
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	4a33      	ldr	r2, [pc, #204]	; (800dec4 <HAL_TIM_PWM_Start+0x210>)
 800ddf8:	4293      	cmp	r3, r2
 800ddfa:	d101      	bne.n	800de00 <HAL_TIM_PWM_Start+0x14c>
 800ddfc:	2301      	movs	r3, #1
 800ddfe:	e000      	b.n	800de02 <HAL_TIM_PWM_Start+0x14e>
 800de00:	2300      	movs	r3, #0
 800de02:	2b00      	cmp	r3, #0
 800de04:	d007      	beq.n	800de16 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800de14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	4a25      	ldr	r2, [pc, #148]	; (800deb0 <HAL_TIM_PWM_Start+0x1fc>)
 800de1c:	4293      	cmp	r3, r2
 800de1e:	d022      	beq.n	800de66 <HAL_TIM_PWM_Start+0x1b2>
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de28:	d01d      	beq.n	800de66 <HAL_TIM_PWM_Start+0x1b2>
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	4a26      	ldr	r2, [pc, #152]	; (800dec8 <HAL_TIM_PWM_Start+0x214>)
 800de30:	4293      	cmp	r3, r2
 800de32:	d018      	beq.n	800de66 <HAL_TIM_PWM_Start+0x1b2>
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	4a24      	ldr	r2, [pc, #144]	; (800decc <HAL_TIM_PWM_Start+0x218>)
 800de3a:	4293      	cmp	r3, r2
 800de3c:	d013      	beq.n	800de66 <HAL_TIM_PWM_Start+0x1b2>
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	4a23      	ldr	r2, [pc, #140]	; (800ded0 <HAL_TIM_PWM_Start+0x21c>)
 800de44:	4293      	cmp	r3, r2
 800de46:	d00e      	beq.n	800de66 <HAL_TIM_PWM_Start+0x1b2>
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	4a19      	ldr	r2, [pc, #100]	; (800deb4 <HAL_TIM_PWM_Start+0x200>)
 800de4e:	4293      	cmp	r3, r2
 800de50:	d009      	beq.n	800de66 <HAL_TIM_PWM_Start+0x1b2>
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	4a18      	ldr	r2, [pc, #96]	; (800deb8 <HAL_TIM_PWM_Start+0x204>)
 800de58:	4293      	cmp	r3, r2
 800de5a:	d004      	beq.n	800de66 <HAL_TIM_PWM_Start+0x1b2>
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	4a18      	ldr	r2, [pc, #96]	; (800dec4 <HAL_TIM_PWM_Start+0x210>)
 800de62:	4293      	cmp	r3, r2
 800de64:	d115      	bne.n	800de92 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	689a      	ldr	r2, [r3, #8]
 800de6c:	4b19      	ldr	r3, [pc, #100]	; (800ded4 <HAL_TIM_PWM_Start+0x220>)
 800de6e:	4013      	ands	r3, r2
 800de70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	2b06      	cmp	r3, #6
 800de76:	d015      	beq.n	800dea4 <HAL_TIM_PWM_Start+0x1f0>
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de7e:	d011      	beq.n	800dea4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	681a      	ldr	r2, [r3, #0]
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	f042 0201 	orr.w	r2, r2, #1
 800de8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800de90:	e008      	b.n	800dea4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	681a      	ldr	r2, [r3, #0]
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	f042 0201 	orr.w	r2, r2, #1
 800dea0:	601a      	str	r2, [r3, #0]
 800dea2:	e000      	b.n	800dea6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dea4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dea6:	2300      	movs	r3, #0
}
 800dea8:	4618      	mov	r0, r3
 800deaa:	3710      	adds	r7, #16
 800deac:	46bd      	mov	sp, r7
 800deae:	bd80      	pop	{r7, pc}
 800deb0:	40012c00 	.word	0x40012c00
 800deb4:	40013400 	.word	0x40013400
 800deb8:	40014000 	.word	0x40014000
 800debc:	40014400 	.word	0x40014400
 800dec0:	40014800 	.word	0x40014800
 800dec4:	40015000 	.word	0x40015000
 800dec8:	40000400 	.word	0x40000400
 800decc:	40000800 	.word	0x40000800
 800ded0:	40000c00 	.word	0x40000c00
 800ded4:	00010007 	.word	0x00010007

0800ded8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b082      	sub	sp, #8
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	691b      	ldr	r3, [r3, #16]
 800dee6:	f003 0302 	and.w	r3, r3, #2
 800deea:	2b02      	cmp	r3, #2
 800deec:	d122      	bne.n	800df34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	68db      	ldr	r3, [r3, #12]
 800def4:	f003 0302 	and.w	r3, r3, #2
 800def8:	2b02      	cmp	r3, #2
 800defa:	d11b      	bne.n	800df34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	f06f 0202 	mvn.w	r2, #2
 800df04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	2201      	movs	r2, #1
 800df0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	699b      	ldr	r3, [r3, #24]
 800df12:	f003 0303 	and.w	r3, r3, #3
 800df16:	2b00      	cmp	r3, #0
 800df18:	d003      	beq.n	800df22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800df1a:	6878      	ldr	r0, [r7, #4]
 800df1c:	f000 fa7a 	bl	800e414 <HAL_TIM_IC_CaptureCallback>
 800df20:	e005      	b.n	800df2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800df22:	6878      	ldr	r0, [r7, #4]
 800df24:	f000 fa6c 	bl	800e400 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800df28:	6878      	ldr	r0, [r7, #4]
 800df2a:	f000 fa7d 	bl	800e428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	2200      	movs	r2, #0
 800df32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	691b      	ldr	r3, [r3, #16]
 800df3a:	f003 0304 	and.w	r3, r3, #4
 800df3e:	2b04      	cmp	r3, #4
 800df40:	d122      	bne.n	800df88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	68db      	ldr	r3, [r3, #12]
 800df48:	f003 0304 	and.w	r3, r3, #4
 800df4c:	2b04      	cmp	r3, #4
 800df4e:	d11b      	bne.n	800df88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	f06f 0204 	mvn.w	r2, #4
 800df58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2202      	movs	r2, #2
 800df5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	699b      	ldr	r3, [r3, #24]
 800df66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d003      	beq.n	800df76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800df6e:	6878      	ldr	r0, [r7, #4]
 800df70:	f000 fa50 	bl	800e414 <HAL_TIM_IC_CaptureCallback>
 800df74:	e005      	b.n	800df82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800df76:	6878      	ldr	r0, [r7, #4]
 800df78:	f000 fa42 	bl	800e400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800df7c:	6878      	ldr	r0, [r7, #4]
 800df7e:	f000 fa53 	bl	800e428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	2200      	movs	r2, #0
 800df86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	691b      	ldr	r3, [r3, #16]
 800df8e:	f003 0308 	and.w	r3, r3, #8
 800df92:	2b08      	cmp	r3, #8
 800df94:	d122      	bne.n	800dfdc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	68db      	ldr	r3, [r3, #12]
 800df9c:	f003 0308 	and.w	r3, r3, #8
 800dfa0:	2b08      	cmp	r3, #8
 800dfa2:	d11b      	bne.n	800dfdc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	f06f 0208 	mvn.w	r2, #8
 800dfac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	2204      	movs	r2, #4
 800dfb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	69db      	ldr	r3, [r3, #28]
 800dfba:	f003 0303 	and.w	r3, r3, #3
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d003      	beq.n	800dfca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dfc2:	6878      	ldr	r0, [r7, #4]
 800dfc4:	f000 fa26 	bl	800e414 <HAL_TIM_IC_CaptureCallback>
 800dfc8:	e005      	b.n	800dfd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dfca:	6878      	ldr	r0, [r7, #4]
 800dfcc:	f000 fa18 	bl	800e400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	f000 fa29 	bl	800e428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	2200      	movs	r2, #0
 800dfda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	691b      	ldr	r3, [r3, #16]
 800dfe2:	f003 0310 	and.w	r3, r3, #16
 800dfe6:	2b10      	cmp	r3, #16
 800dfe8:	d122      	bne.n	800e030 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	68db      	ldr	r3, [r3, #12]
 800dff0:	f003 0310 	and.w	r3, r3, #16
 800dff4:	2b10      	cmp	r3, #16
 800dff6:	d11b      	bne.n	800e030 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	f06f 0210 	mvn.w	r2, #16
 800e000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	2208      	movs	r2, #8
 800e006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	69db      	ldr	r3, [r3, #28]
 800e00e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e012:	2b00      	cmp	r3, #0
 800e014:	d003      	beq.n	800e01e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e016:	6878      	ldr	r0, [r7, #4]
 800e018:	f000 f9fc 	bl	800e414 <HAL_TIM_IC_CaptureCallback>
 800e01c:	e005      	b.n	800e02a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e01e:	6878      	ldr	r0, [r7, #4]
 800e020:	f000 f9ee 	bl	800e400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	f000 f9ff 	bl	800e428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	2200      	movs	r2, #0
 800e02e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	691b      	ldr	r3, [r3, #16]
 800e036:	f003 0301 	and.w	r3, r3, #1
 800e03a:	2b01      	cmp	r3, #1
 800e03c:	d10e      	bne.n	800e05c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	68db      	ldr	r3, [r3, #12]
 800e044:	f003 0301 	and.w	r3, r3, #1
 800e048:	2b01      	cmp	r3, #1
 800e04a:	d107      	bne.n	800e05c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	f06f 0201 	mvn.w	r2, #1
 800e054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	f7f9 f8be 	bl	80071d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	691b      	ldr	r3, [r3, #16]
 800e062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e066:	2b80      	cmp	r3, #128	; 0x80
 800e068:	d10e      	bne.n	800e088 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	68db      	ldr	r3, [r3, #12]
 800e070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e074:	2b80      	cmp	r3, #128	; 0x80
 800e076:	d107      	bne.n	800e088 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e082:	6878      	ldr	r0, [r7, #4]
 800e084:	f000 fe7c 	bl	800ed80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	691b      	ldr	r3, [r3, #16]
 800e08e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e096:	d10e      	bne.n	800e0b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	68db      	ldr	r3, [r3, #12]
 800e09e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e0a2:	2b80      	cmp	r3, #128	; 0x80
 800e0a4:	d107      	bne.n	800e0b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e0ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e0b0:	6878      	ldr	r0, [r7, #4]
 800e0b2:	f000 fe6f 	bl	800ed94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	691b      	ldr	r3, [r3, #16]
 800e0bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0c0:	2b40      	cmp	r3, #64	; 0x40
 800e0c2:	d10e      	bne.n	800e0e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	68db      	ldr	r3, [r3, #12]
 800e0ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0ce:	2b40      	cmp	r3, #64	; 0x40
 800e0d0:	d107      	bne.n	800e0e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e0da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e0dc:	6878      	ldr	r0, [r7, #4]
 800e0de:	f000 f9ad 	bl	800e43c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	691b      	ldr	r3, [r3, #16]
 800e0e8:	f003 0320 	and.w	r3, r3, #32
 800e0ec:	2b20      	cmp	r3, #32
 800e0ee:	d10e      	bne.n	800e10e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	68db      	ldr	r3, [r3, #12]
 800e0f6:	f003 0320 	and.w	r3, r3, #32
 800e0fa:	2b20      	cmp	r3, #32
 800e0fc:	d107      	bne.n	800e10e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	f06f 0220 	mvn.w	r2, #32
 800e106:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e108:	6878      	ldr	r0, [r7, #4]
 800e10a:	f000 fe2f 	bl	800ed6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	691b      	ldr	r3, [r3, #16]
 800e114:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e118:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e11c:	d10f      	bne.n	800e13e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	68db      	ldr	r3, [r3, #12]
 800e124:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e128:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e12c:	d107      	bne.n	800e13e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800e136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800e138:	6878      	ldr	r0, [r7, #4]
 800e13a:	f000 fe35 	bl	800eda8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	691b      	ldr	r3, [r3, #16]
 800e144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e148:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e14c:	d10f      	bne.n	800e16e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	68db      	ldr	r3, [r3, #12]
 800e154:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e158:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e15c:	d107      	bne.n	800e16e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800e166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800e168:	6878      	ldr	r0, [r7, #4]
 800e16a:	f000 fe27 	bl	800edbc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	691b      	ldr	r3, [r3, #16]
 800e174:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e178:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e17c:	d10f      	bne.n	800e19e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	68db      	ldr	r3, [r3, #12]
 800e184:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e188:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e18c:	d107      	bne.n	800e19e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800e196:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800e198:	6878      	ldr	r0, [r7, #4]
 800e19a:	f000 fe19 	bl	800edd0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	691b      	ldr	r3, [r3, #16]
 800e1a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e1a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e1ac:	d10f      	bne.n	800e1ce <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	68db      	ldr	r3, [r3, #12]
 800e1b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e1b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e1bc:	d107      	bne.n	800e1ce <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800e1c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800e1c8:	6878      	ldr	r0, [r7, #4]
 800e1ca:	f000 fe0b 	bl	800ede4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e1ce:	bf00      	nop
 800e1d0:	3708      	adds	r7, #8
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}
	...

0800e1d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b086      	sub	sp, #24
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	60f8      	str	r0, [r7, #12]
 800e1e0:	60b9      	str	r1, [r7, #8]
 800e1e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e1ee:	2b01      	cmp	r3, #1
 800e1f0:	d101      	bne.n	800e1f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e1f2:	2302      	movs	r3, #2
 800e1f4:	e0ff      	b.n	800e3f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	2201      	movs	r2, #1
 800e1fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	2b14      	cmp	r3, #20
 800e202:	f200 80f0 	bhi.w	800e3e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e206:	a201      	add	r2, pc, #4	; (adr r2, 800e20c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e20c:	0800e261 	.word	0x0800e261
 800e210:	0800e3e7 	.word	0x0800e3e7
 800e214:	0800e3e7 	.word	0x0800e3e7
 800e218:	0800e3e7 	.word	0x0800e3e7
 800e21c:	0800e2a1 	.word	0x0800e2a1
 800e220:	0800e3e7 	.word	0x0800e3e7
 800e224:	0800e3e7 	.word	0x0800e3e7
 800e228:	0800e3e7 	.word	0x0800e3e7
 800e22c:	0800e2e3 	.word	0x0800e2e3
 800e230:	0800e3e7 	.word	0x0800e3e7
 800e234:	0800e3e7 	.word	0x0800e3e7
 800e238:	0800e3e7 	.word	0x0800e3e7
 800e23c:	0800e323 	.word	0x0800e323
 800e240:	0800e3e7 	.word	0x0800e3e7
 800e244:	0800e3e7 	.word	0x0800e3e7
 800e248:	0800e3e7 	.word	0x0800e3e7
 800e24c:	0800e365 	.word	0x0800e365
 800e250:	0800e3e7 	.word	0x0800e3e7
 800e254:	0800e3e7 	.word	0x0800e3e7
 800e258:	0800e3e7 	.word	0x0800e3e7
 800e25c:	0800e3a5 	.word	0x0800e3a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	68b9      	ldr	r1, [r7, #8]
 800e266:	4618      	mov	r0, r3
 800e268:	f000 f99a 	bl	800e5a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	699a      	ldr	r2, [r3, #24]
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	f042 0208 	orr.w	r2, r2, #8
 800e27a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	699a      	ldr	r2, [r3, #24]
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	f022 0204 	bic.w	r2, r2, #4
 800e28a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	6999      	ldr	r1, [r3, #24]
 800e292:	68bb      	ldr	r3, [r7, #8]
 800e294:	691a      	ldr	r2, [r3, #16]
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	430a      	orrs	r2, r1
 800e29c:	619a      	str	r2, [r3, #24]
      break;
 800e29e:	e0a5      	b.n	800e3ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	68b9      	ldr	r1, [r7, #8]
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	f000 fa14 	bl	800e6d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	699a      	ldr	r2, [r3, #24]
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e2ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	699a      	ldr	r2, [r3, #24]
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e2ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	6999      	ldr	r1, [r3, #24]
 800e2d2:	68bb      	ldr	r3, [r7, #8]
 800e2d4:	691b      	ldr	r3, [r3, #16]
 800e2d6:	021a      	lsls	r2, r3, #8
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	430a      	orrs	r2, r1
 800e2de:	619a      	str	r2, [r3, #24]
      break;
 800e2e0:	e084      	b.n	800e3ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	68b9      	ldr	r1, [r7, #8]
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f000 fa87 	bl	800e7fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	69da      	ldr	r2, [r3, #28]
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	f042 0208 	orr.w	r2, r2, #8
 800e2fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	69da      	ldr	r2, [r3, #28]
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	f022 0204 	bic.w	r2, r2, #4
 800e30c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	69d9      	ldr	r1, [r3, #28]
 800e314:	68bb      	ldr	r3, [r7, #8]
 800e316:	691a      	ldr	r2, [r3, #16]
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	430a      	orrs	r2, r1
 800e31e:	61da      	str	r2, [r3, #28]
      break;
 800e320:	e064      	b.n	800e3ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	68b9      	ldr	r1, [r7, #8]
 800e328:	4618      	mov	r0, r3
 800e32a:	f000 faf9 	bl	800e920 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	69da      	ldr	r2, [r3, #28]
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e33c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	69da      	ldr	r2, [r3, #28]
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e34c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	69d9      	ldr	r1, [r3, #28]
 800e354:	68bb      	ldr	r3, [r7, #8]
 800e356:	691b      	ldr	r3, [r3, #16]
 800e358:	021a      	lsls	r2, r3, #8
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	430a      	orrs	r2, r1
 800e360:	61da      	str	r2, [r3, #28]
      break;
 800e362:	e043      	b.n	800e3ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	68b9      	ldr	r1, [r7, #8]
 800e36a:	4618      	mov	r0, r3
 800e36c:	f000 fb6c 	bl	800ea48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	f042 0208 	orr.w	r2, r2, #8
 800e37e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	f022 0204 	bic.w	r2, r2, #4
 800e38e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800e396:	68bb      	ldr	r3, [r7, #8]
 800e398:	691a      	ldr	r2, [r3, #16]
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	430a      	orrs	r2, r1
 800e3a0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800e3a2:	e023      	b.n	800e3ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	68b9      	ldr	r1, [r7, #8]
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	f000 fbb6 	bl	800eb1c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e3be:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e3ce:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800e3d6:	68bb      	ldr	r3, [r7, #8]
 800e3d8:	691b      	ldr	r3, [r3, #16]
 800e3da:	021a      	lsls	r2, r3, #8
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	430a      	orrs	r2, r1
 800e3e2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800e3e4:	e002      	b.n	800e3ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e3e6:	2301      	movs	r3, #1
 800e3e8:	75fb      	strb	r3, [r7, #23]
      break;
 800e3ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e3f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	3718      	adds	r7, #24
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	bd80      	pop	{r7, pc}
 800e3fe:	bf00      	nop

0800e400 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e400:	b480      	push	{r7}
 800e402:	b083      	sub	sp, #12
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e408:	bf00      	nop
 800e40a:	370c      	adds	r7, #12
 800e40c:	46bd      	mov	sp, r7
 800e40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e412:	4770      	bx	lr

0800e414 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e414:	b480      	push	{r7}
 800e416:	b083      	sub	sp, #12
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e41c:	bf00      	nop
 800e41e:	370c      	adds	r7, #12
 800e420:	46bd      	mov	sp, r7
 800e422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e426:	4770      	bx	lr

0800e428 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e428:	b480      	push	{r7}
 800e42a:	b083      	sub	sp, #12
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e430:	bf00      	nop
 800e432:	370c      	adds	r7, #12
 800e434:	46bd      	mov	sp, r7
 800e436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43a:	4770      	bx	lr

0800e43c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e43c:	b480      	push	{r7}
 800e43e:	b083      	sub	sp, #12
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e444:	bf00      	nop
 800e446:	370c      	adds	r7, #12
 800e448:	46bd      	mov	sp, r7
 800e44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44e:	4770      	bx	lr

0800e450 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e450:	b480      	push	{r7}
 800e452:	b085      	sub	sp, #20
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
 800e458:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	4a46      	ldr	r2, [pc, #280]	; (800e57c <TIM_Base_SetConfig+0x12c>)
 800e464:	4293      	cmp	r3, r2
 800e466:	d017      	beq.n	800e498 <TIM_Base_SetConfig+0x48>
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e46e:	d013      	beq.n	800e498 <TIM_Base_SetConfig+0x48>
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	4a43      	ldr	r2, [pc, #268]	; (800e580 <TIM_Base_SetConfig+0x130>)
 800e474:	4293      	cmp	r3, r2
 800e476:	d00f      	beq.n	800e498 <TIM_Base_SetConfig+0x48>
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	4a42      	ldr	r2, [pc, #264]	; (800e584 <TIM_Base_SetConfig+0x134>)
 800e47c:	4293      	cmp	r3, r2
 800e47e:	d00b      	beq.n	800e498 <TIM_Base_SetConfig+0x48>
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	4a41      	ldr	r2, [pc, #260]	; (800e588 <TIM_Base_SetConfig+0x138>)
 800e484:	4293      	cmp	r3, r2
 800e486:	d007      	beq.n	800e498 <TIM_Base_SetConfig+0x48>
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	4a40      	ldr	r2, [pc, #256]	; (800e58c <TIM_Base_SetConfig+0x13c>)
 800e48c:	4293      	cmp	r3, r2
 800e48e:	d003      	beq.n	800e498 <TIM_Base_SetConfig+0x48>
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	4a3f      	ldr	r2, [pc, #252]	; (800e590 <TIM_Base_SetConfig+0x140>)
 800e494:	4293      	cmp	r3, r2
 800e496:	d108      	bne.n	800e4aa <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e49e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	685b      	ldr	r3, [r3, #4]
 800e4a4:	68fa      	ldr	r2, [r7, #12]
 800e4a6:	4313      	orrs	r3, r2
 800e4a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	4a33      	ldr	r2, [pc, #204]	; (800e57c <TIM_Base_SetConfig+0x12c>)
 800e4ae:	4293      	cmp	r3, r2
 800e4b0:	d023      	beq.n	800e4fa <TIM_Base_SetConfig+0xaa>
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e4b8:	d01f      	beq.n	800e4fa <TIM_Base_SetConfig+0xaa>
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	4a30      	ldr	r2, [pc, #192]	; (800e580 <TIM_Base_SetConfig+0x130>)
 800e4be:	4293      	cmp	r3, r2
 800e4c0:	d01b      	beq.n	800e4fa <TIM_Base_SetConfig+0xaa>
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	4a2f      	ldr	r2, [pc, #188]	; (800e584 <TIM_Base_SetConfig+0x134>)
 800e4c6:	4293      	cmp	r3, r2
 800e4c8:	d017      	beq.n	800e4fa <TIM_Base_SetConfig+0xaa>
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	4a2e      	ldr	r2, [pc, #184]	; (800e588 <TIM_Base_SetConfig+0x138>)
 800e4ce:	4293      	cmp	r3, r2
 800e4d0:	d013      	beq.n	800e4fa <TIM_Base_SetConfig+0xaa>
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	4a2d      	ldr	r2, [pc, #180]	; (800e58c <TIM_Base_SetConfig+0x13c>)
 800e4d6:	4293      	cmp	r3, r2
 800e4d8:	d00f      	beq.n	800e4fa <TIM_Base_SetConfig+0xaa>
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	4a2d      	ldr	r2, [pc, #180]	; (800e594 <TIM_Base_SetConfig+0x144>)
 800e4de:	4293      	cmp	r3, r2
 800e4e0:	d00b      	beq.n	800e4fa <TIM_Base_SetConfig+0xaa>
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	4a2c      	ldr	r2, [pc, #176]	; (800e598 <TIM_Base_SetConfig+0x148>)
 800e4e6:	4293      	cmp	r3, r2
 800e4e8:	d007      	beq.n	800e4fa <TIM_Base_SetConfig+0xaa>
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	4a2b      	ldr	r2, [pc, #172]	; (800e59c <TIM_Base_SetConfig+0x14c>)
 800e4ee:	4293      	cmp	r3, r2
 800e4f0:	d003      	beq.n	800e4fa <TIM_Base_SetConfig+0xaa>
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	4a26      	ldr	r2, [pc, #152]	; (800e590 <TIM_Base_SetConfig+0x140>)
 800e4f6:	4293      	cmp	r3, r2
 800e4f8:	d108      	bne.n	800e50c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e502:	683b      	ldr	r3, [r7, #0]
 800e504:	68db      	ldr	r3, [r3, #12]
 800e506:	68fa      	ldr	r2, [r7, #12]
 800e508:	4313      	orrs	r3, r2
 800e50a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	695b      	ldr	r3, [r3, #20]
 800e516:	4313      	orrs	r3, r2
 800e518:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	68fa      	ldr	r2, [r7, #12]
 800e51e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e520:	683b      	ldr	r3, [r7, #0]
 800e522:	689a      	ldr	r2, [r3, #8]
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e528:	683b      	ldr	r3, [r7, #0]
 800e52a:	681a      	ldr	r2, [r3, #0]
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	4a12      	ldr	r2, [pc, #72]	; (800e57c <TIM_Base_SetConfig+0x12c>)
 800e534:	4293      	cmp	r3, r2
 800e536:	d013      	beq.n	800e560 <TIM_Base_SetConfig+0x110>
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	4a14      	ldr	r2, [pc, #80]	; (800e58c <TIM_Base_SetConfig+0x13c>)
 800e53c:	4293      	cmp	r3, r2
 800e53e:	d00f      	beq.n	800e560 <TIM_Base_SetConfig+0x110>
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	4a14      	ldr	r2, [pc, #80]	; (800e594 <TIM_Base_SetConfig+0x144>)
 800e544:	4293      	cmp	r3, r2
 800e546:	d00b      	beq.n	800e560 <TIM_Base_SetConfig+0x110>
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	4a13      	ldr	r2, [pc, #76]	; (800e598 <TIM_Base_SetConfig+0x148>)
 800e54c:	4293      	cmp	r3, r2
 800e54e:	d007      	beq.n	800e560 <TIM_Base_SetConfig+0x110>
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	4a12      	ldr	r2, [pc, #72]	; (800e59c <TIM_Base_SetConfig+0x14c>)
 800e554:	4293      	cmp	r3, r2
 800e556:	d003      	beq.n	800e560 <TIM_Base_SetConfig+0x110>
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	4a0d      	ldr	r2, [pc, #52]	; (800e590 <TIM_Base_SetConfig+0x140>)
 800e55c:	4293      	cmp	r3, r2
 800e55e:	d103      	bne.n	800e568 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e560:	683b      	ldr	r3, [r7, #0]
 800e562:	691a      	ldr	r2, [r3, #16]
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2201      	movs	r2, #1
 800e56c:	615a      	str	r2, [r3, #20]
}
 800e56e:	bf00      	nop
 800e570:	3714      	adds	r7, #20
 800e572:	46bd      	mov	sp, r7
 800e574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e578:	4770      	bx	lr
 800e57a:	bf00      	nop
 800e57c:	40012c00 	.word	0x40012c00
 800e580:	40000400 	.word	0x40000400
 800e584:	40000800 	.word	0x40000800
 800e588:	40000c00 	.word	0x40000c00
 800e58c:	40013400 	.word	0x40013400
 800e590:	40015000 	.word	0x40015000
 800e594:	40014000 	.word	0x40014000
 800e598:	40014400 	.word	0x40014400
 800e59c:	40014800 	.word	0x40014800

0800e5a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e5a0:	b480      	push	{r7}
 800e5a2:	b087      	sub	sp, #28
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]
 800e5a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	6a1b      	ldr	r3, [r3, #32]
 800e5ae:	f023 0201 	bic.w	r2, r3, #1
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	6a1b      	ldr	r3, [r3, #32]
 800e5ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	685b      	ldr	r3, [r3, #4]
 800e5c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	699b      	ldr	r3, [r3, #24]
 800e5c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e5ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e5d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	f023 0303 	bic.w	r3, r3, #3
 800e5da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e5dc:	683b      	ldr	r3, [r7, #0]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	68fa      	ldr	r2, [r7, #12]
 800e5e2:	4313      	orrs	r3, r2
 800e5e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e5e6:	697b      	ldr	r3, [r7, #20]
 800e5e8:	f023 0302 	bic.w	r3, r3, #2
 800e5ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e5ee:	683b      	ldr	r3, [r7, #0]
 800e5f0:	689b      	ldr	r3, [r3, #8]
 800e5f2:	697a      	ldr	r2, [r7, #20]
 800e5f4:	4313      	orrs	r3, r2
 800e5f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	4a30      	ldr	r2, [pc, #192]	; (800e6bc <TIM_OC1_SetConfig+0x11c>)
 800e5fc:	4293      	cmp	r3, r2
 800e5fe:	d013      	beq.n	800e628 <TIM_OC1_SetConfig+0x88>
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	4a2f      	ldr	r2, [pc, #188]	; (800e6c0 <TIM_OC1_SetConfig+0x120>)
 800e604:	4293      	cmp	r3, r2
 800e606:	d00f      	beq.n	800e628 <TIM_OC1_SetConfig+0x88>
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	4a2e      	ldr	r2, [pc, #184]	; (800e6c4 <TIM_OC1_SetConfig+0x124>)
 800e60c:	4293      	cmp	r3, r2
 800e60e:	d00b      	beq.n	800e628 <TIM_OC1_SetConfig+0x88>
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	4a2d      	ldr	r2, [pc, #180]	; (800e6c8 <TIM_OC1_SetConfig+0x128>)
 800e614:	4293      	cmp	r3, r2
 800e616:	d007      	beq.n	800e628 <TIM_OC1_SetConfig+0x88>
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	4a2c      	ldr	r2, [pc, #176]	; (800e6cc <TIM_OC1_SetConfig+0x12c>)
 800e61c:	4293      	cmp	r3, r2
 800e61e:	d003      	beq.n	800e628 <TIM_OC1_SetConfig+0x88>
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	4a2b      	ldr	r2, [pc, #172]	; (800e6d0 <TIM_OC1_SetConfig+0x130>)
 800e624:	4293      	cmp	r3, r2
 800e626:	d10c      	bne.n	800e642 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e628:	697b      	ldr	r3, [r7, #20]
 800e62a:	f023 0308 	bic.w	r3, r3, #8
 800e62e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e630:	683b      	ldr	r3, [r7, #0]
 800e632:	68db      	ldr	r3, [r3, #12]
 800e634:	697a      	ldr	r2, [r7, #20]
 800e636:	4313      	orrs	r3, r2
 800e638:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e63a:	697b      	ldr	r3, [r7, #20]
 800e63c:	f023 0304 	bic.w	r3, r3, #4
 800e640:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	4a1d      	ldr	r2, [pc, #116]	; (800e6bc <TIM_OC1_SetConfig+0x11c>)
 800e646:	4293      	cmp	r3, r2
 800e648:	d013      	beq.n	800e672 <TIM_OC1_SetConfig+0xd2>
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	4a1c      	ldr	r2, [pc, #112]	; (800e6c0 <TIM_OC1_SetConfig+0x120>)
 800e64e:	4293      	cmp	r3, r2
 800e650:	d00f      	beq.n	800e672 <TIM_OC1_SetConfig+0xd2>
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	4a1b      	ldr	r2, [pc, #108]	; (800e6c4 <TIM_OC1_SetConfig+0x124>)
 800e656:	4293      	cmp	r3, r2
 800e658:	d00b      	beq.n	800e672 <TIM_OC1_SetConfig+0xd2>
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	4a1a      	ldr	r2, [pc, #104]	; (800e6c8 <TIM_OC1_SetConfig+0x128>)
 800e65e:	4293      	cmp	r3, r2
 800e660:	d007      	beq.n	800e672 <TIM_OC1_SetConfig+0xd2>
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	4a19      	ldr	r2, [pc, #100]	; (800e6cc <TIM_OC1_SetConfig+0x12c>)
 800e666:	4293      	cmp	r3, r2
 800e668:	d003      	beq.n	800e672 <TIM_OC1_SetConfig+0xd2>
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	4a18      	ldr	r2, [pc, #96]	; (800e6d0 <TIM_OC1_SetConfig+0x130>)
 800e66e:	4293      	cmp	r3, r2
 800e670:	d111      	bne.n	800e696 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e672:	693b      	ldr	r3, [r7, #16]
 800e674:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e678:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e67a:	693b      	ldr	r3, [r7, #16]
 800e67c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e680:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e682:	683b      	ldr	r3, [r7, #0]
 800e684:	695b      	ldr	r3, [r3, #20]
 800e686:	693a      	ldr	r2, [r7, #16]
 800e688:	4313      	orrs	r3, r2
 800e68a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	699b      	ldr	r3, [r3, #24]
 800e690:	693a      	ldr	r2, [r7, #16]
 800e692:	4313      	orrs	r3, r2
 800e694:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	693a      	ldr	r2, [r7, #16]
 800e69a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	68fa      	ldr	r2, [r7, #12]
 800e6a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e6a2:	683b      	ldr	r3, [r7, #0]
 800e6a4:	685a      	ldr	r2, [r3, #4]
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	697a      	ldr	r2, [r7, #20]
 800e6ae:	621a      	str	r2, [r3, #32]
}
 800e6b0:	bf00      	nop
 800e6b2:	371c      	adds	r7, #28
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ba:	4770      	bx	lr
 800e6bc:	40012c00 	.word	0x40012c00
 800e6c0:	40013400 	.word	0x40013400
 800e6c4:	40014000 	.word	0x40014000
 800e6c8:	40014400 	.word	0x40014400
 800e6cc:	40014800 	.word	0x40014800
 800e6d0:	40015000 	.word	0x40015000

0800e6d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e6d4:	b480      	push	{r7}
 800e6d6:	b087      	sub	sp, #28
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
 800e6dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	6a1b      	ldr	r3, [r3, #32]
 800e6e2:	f023 0210 	bic.w	r2, r3, #16
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	6a1b      	ldr	r3, [r3, #32]
 800e6ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	685b      	ldr	r3, [r3, #4]
 800e6f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	699b      	ldr	r3, [r3, #24]
 800e6fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e70e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e710:	683b      	ldr	r3, [r7, #0]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	021b      	lsls	r3, r3, #8
 800e716:	68fa      	ldr	r2, [r7, #12]
 800e718:	4313      	orrs	r3, r2
 800e71a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e71c:	697b      	ldr	r3, [r7, #20]
 800e71e:	f023 0320 	bic.w	r3, r3, #32
 800e722:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e724:	683b      	ldr	r3, [r7, #0]
 800e726:	689b      	ldr	r3, [r3, #8]
 800e728:	011b      	lsls	r3, r3, #4
 800e72a:	697a      	ldr	r2, [r7, #20]
 800e72c:	4313      	orrs	r3, r2
 800e72e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	4a2c      	ldr	r2, [pc, #176]	; (800e7e4 <TIM_OC2_SetConfig+0x110>)
 800e734:	4293      	cmp	r3, r2
 800e736:	d007      	beq.n	800e748 <TIM_OC2_SetConfig+0x74>
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	4a2b      	ldr	r2, [pc, #172]	; (800e7e8 <TIM_OC2_SetConfig+0x114>)
 800e73c:	4293      	cmp	r3, r2
 800e73e:	d003      	beq.n	800e748 <TIM_OC2_SetConfig+0x74>
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	4a2a      	ldr	r2, [pc, #168]	; (800e7ec <TIM_OC2_SetConfig+0x118>)
 800e744:	4293      	cmp	r3, r2
 800e746:	d10d      	bne.n	800e764 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e748:	697b      	ldr	r3, [r7, #20]
 800e74a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e74e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e750:	683b      	ldr	r3, [r7, #0]
 800e752:	68db      	ldr	r3, [r3, #12]
 800e754:	011b      	lsls	r3, r3, #4
 800e756:	697a      	ldr	r2, [r7, #20]
 800e758:	4313      	orrs	r3, r2
 800e75a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e75c:	697b      	ldr	r3, [r7, #20]
 800e75e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e762:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	4a1f      	ldr	r2, [pc, #124]	; (800e7e4 <TIM_OC2_SetConfig+0x110>)
 800e768:	4293      	cmp	r3, r2
 800e76a:	d013      	beq.n	800e794 <TIM_OC2_SetConfig+0xc0>
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	4a1e      	ldr	r2, [pc, #120]	; (800e7e8 <TIM_OC2_SetConfig+0x114>)
 800e770:	4293      	cmp	r3, r2
 800e772:	d00f      	beq.n	800e794 <TIM_OC2_SetConfig+0xc0>
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	4a1e      	ldr	r2, [pc, #120]	; (800e7f0 <TIM_OC2_SetConfig+0x11c>)
 800e778:	4293      	cmp	r3, r2
 800e77a:	d00b      	beq.n	800e794 <TIM_OC2_SetConfig+0xc0>
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	4a1d      	ldr	r2, [pc, #116]	; (800e7f4 <TIM_OC2_SetConfig+0x120>)
 800e780:	4293      	cmp	r3, r2
 800e782:	d007      	beq.n	800e794 <TIM_OC2_SetConfig+0xc0>
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	4a1c      	ldr	r2, [pc, #112]	; (800e7f8 <TIM_OC2_SetConfig+0x124>)
 800e788:	4293      	cmp	r3, r2
 800e78a:	d003      	beq.n	800e794 <TIM_OC2_SetConfig+0xc0>
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	4a17      	ldr	r2, [pc, #92]	; (800e7ec <TIM_OC2_SetConfig+0x118>)
 800e790:	4293      	cmp	r3, r2
 800e792:	d113      	bne.n	800e7bc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e794:	693b      	ldr	r3, [r7, #16]
 800e796:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e79a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e79c:	693b      	ldr	r3, [r7, #16]
 800e79e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e7a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	695b      	ldr	r3, [r3, #20]
 800e7a8:	009b      	lsls	r3, r3, #2
 800e7aa:	693a      	ldr	r2, [r7, #16]
 800e7ac:	4313      	orrs	r3, r2
 800e7ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e7b0:	683b      	ldr	r3, [r7, #0]
 800e7b2:	699b      	ldr	r3, [r3, #24]
 800e7b4:	009b      	lsls	r3, r3, #2
 800e7b6:	693a      	ldr	r2, [r7, #16]
 800e7b8:	4313      	orrs	r3, r2
 800e7ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	693a      	ldr	r2, [r7, #16]
 800e7c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	68fa      	ldr	r2, [r7, #12]
 800e7c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	685a      	ldr	r2, [r3, #4]
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	697a      	ldr	r2, [r7, #20]
 800e7d4:	621a      	str	r2, [r3, #32]
}
 800e7d6:	bf00      	nop
 800e7d8:	371c      	adds	r7, #28
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e0:	4770      	bx	lr
 800e7e2:	bf00      	nop
 800e7e4:	40012c00 	.word	0x40012c00
 800e7e8:	40013400 	.word	0x40013400
 800e7ec:	40015000 	.word	0x40015000
 800e7f0:	40014000 	.word	0x40014000
 800e7f4:	40014400 	.word	0x40014400
 800e7f8:	40014800 	.word	0x40014800

0800e7fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e7fc:	b480      	push	{r7}
 800e7fe:	b087      	sub	sp, #28
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
 800e804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	6a1b      	ldr	r3, [r3, #32]
 800e80a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	6a1b      	ldr	r3, [r3, #32]
 800e816:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	685b      	ldr	r3, [r3, #4]
 800e81c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	69db      	ldr	r3, [r3, #28]
 800e822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e82a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e82e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	f023 0303 	bic.w	r3, r3, #3
 800e836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	68fa      	ldr	r2, [r7, #12]
 800e83e:	4313      	orrs	r3, r2
 800e840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e842:	697b      	ldr	r3, [r7, #20]
 800e844:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e848:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	689b      	ldr	r3, [r3, #8]
 800e84e:	021b      	lsls	r3, r3, #8
 800e850:	697a      	ldr	r2, [r7, #20]
 800e852:	4313      	orrs	r3, r2
 800e854:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	4a2b      	ldr	r2, [pc, #172]	; (800e908 <TIM_OC3_SetConfig+0x10c>)
 800e85a:	4293      	cmp	r3, r2
 800e85c:	d007      	beq.n	800e86e <TIM_OC3_SetConfig+0x72>
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	4a2a      	ldr	r2, [pc, #168]	; (800e90c <TIM_OC3_SetConfig+0x110>)
 800e862:	4293      	cmp	r3, r2
 800e864:	d003      	beq.n	800e86e <TIM_OC3_SetConfig+0x72>
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	4a29      	ldr	r2, [pc, #164]	; (800e910 <TIM_OC3_SetConfig+0x114>)
 800e86a:	4293      	cmp	r3, r2
 800e86c:	d10d      	bne.n	800e88a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e86e:	697b      	ldr	r3, [r7, #20]
 800e870:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e874:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e876:	683b      	ldr	r3, [r7, #0]
 800e878:	68db      	ldr	r3, [r3, #12]
 800e87a:	021b      	lsls	r3, r3, #8
 800e87c:	697a      	ldr	r2, [r7, #20]
 800e87e:	4313      	orrs	r3, r2
 800e880:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e882:	697b      	ldr	r3, [r7, #20]
 800e884:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e888:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	4a1e      	ldr	r2, [pc, #120]	; (800e908 <TIM_OC3_SetConfig+0x10c>)
 800e88e:	4293      	cmp	r3, r2
 800e890:	d013      	beq.n	800e8ba <TIM_OC3_SetConfig+0xbe>
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	4a1d      	ldr	r2, [pc, #116]	; (800e90c <TIM_OC3_SetConfig+0x110>)
 800e896:	4293      	cmp	r3, r2
 800e898:	d00f      	beq.n	800e8ba <TIM_OC3_SetConfig+0xbe>
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	4a1d      	ldr	r2, [pc, #116]	; (800e914 <TIM_OC3_SetConfig+0x118>)
 800e89e:	4293      	cmp	r3, r2
 800e8a0:	d00b      	beq.n	800e8ba <TIM_OC3_SetConfig+0xbe>
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	4a1c      	ldr	r2, [pc, #112]	; (800e918 <TIM_OC3_SetConfig+0x11c>)
 800e8a6:	4293      	cmp	r3, r2
 800e8a8:	d007      	beq.n	800e8ba <TIM_OC3_SetConfig+0xbe>
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	4a1b      	ldr	r2, [pc, #108]	; (800e91c <TIM_OC3_SetConfig+0x120>)
 800e8ae:	4293      	cmp	r3, r2
 800e8b0:	d003      	beq.n	800e8ba <TIM_OC3_SetConfig+0xbe>
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	4a16      	ldr	r2, [pc, #88]	; (800e910 <TIM_OC3_SetConfig+0x114>)
 800e8b6:	4293      	cmp	r3, r2
 800e8b8:	d113      	bne.n	800e8e2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e8ba:	693b      	ldr	r3, [r7, #16]
 800e8bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e8c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e8c2:	693b      	ldr	r3, [r7, #16]
 800e8c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e8c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e8ca:	683b      	ldr	r3, [r7, #0]
 800e8cc:	695b      	ldr	r3, [r3, #20]
 800e8ce:	011b      	lsls	r3, r3, #4
 800e8d0:	693a      	ldr	r2, [r7, #16]
 800e8d2:	4313      	orrs	r3, r2
 800e8d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e8d6:	683b      	ldr	r3, [r7, #0]
 800e8d8:	699b      	ldr	r3, [r3, #24]
 800e8da:	011b      	lsls	r3, r3, #4
 800e8dc:	693a      	ldr	r2, [r7, #16]
 800e8de:	4313      	orrs	r3, r2
 800e8e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	693a      	ldr	r2, [r7, #16]
 800e8e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	68fa      	ldr	r2, [r7, #12]
 800e8ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e8ee:	683b      	ldr	r3, [r7, #0]
 800e8f0:	685a      	ldr	r2, [r3, #4]
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	697a      	ldr	r2, [r7, #20]
 800e8fa:	621a      	str	r2, [r3, #32]
}
 800e8fc:	bf00      	nop
 800e8fe:	371c      	adds	r7, #28
 800e900:	46bd      	mov	sp, r7
 800e902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e906:	4770      	bx	lr
 800e908:	40012c00 	.word	0x40012c00
 800e90c:	40013400 	.word	0x40013400
 800e910:	40015000 	.word	0x40015000
 800e914:	40014000 	.word	0x40014000
 800e918:	40014400 	.word	0x40014400
 800e91c:	40014800 	.word	0x40014800

0800e920 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e920:	b480      	push	{r7}
 800e922:	b087      	sub	sp, #28
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
 800e928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	6a1b      	ldr	r3, [r3, #32]
 800e92e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	6a1b      	ldr	r3, [r3, #32]
 800e93a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	685b      	ldr	r3, [r3, #4]
 800e940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	69db      	ldr	r3, [r3, #28]
 800e946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e94e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e95a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	021b      	lsls	r3, r3, #8
 800e962:	68fa      	ldr	r2, [r7, #12]
 800e964:	4313      	orrs	r3, r2
 800e966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e968:	697b      	ldr	r3, [r7, #20]
 800e96a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e96e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	689b      	ldr	r3, [r3, #8]
 800e974:	031b      	lsls	r3, r3, #12
 800e976:	697a      	ldr	r2, [r7, #20]
 800e978:	4313      	orrs	r3, r2
 800e97a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	4a2c      	ldr	r2, [pc, #176]	; (800ea30 <TIM_OC4_SetConfig+0x110>)
 800e980:	4293      	cmp	r3, r2
 800e982:	d007      	beq.n	800e994 <TIM_OC4_SetConfig+0x74>
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	4a2b      	ldr	r2, [pc, #172]	; (800ea34 <TIM_OC4_SetConfig+0x114>)
 800e988:	4293      	cmp	r3, r2
 800e98a:	d003      	beq.n	800e994 <TIM_OC4_SetConfig+0x74>
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	4a2a      	ldr	r2, [pc, #168]	; (800ea38 <TIM_OC4_SetConfig+0x118>)
 800e990:	4293      	cmp	r3, r2
 800e992:	d10d      	bne.n	800e9b0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800e994:	697b      	ldr	r3, [r7, #20]
 800e996:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e99a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	68db      	ldr	r3, [r3, #12]
 800e9a0:	031b      	lsls	r3, r3, #12
 800e9a2:	697a      	ldr	r2, [r7, #20]
 800e9a4:	4313      	orrs	r3, r2
 800e9a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800e9a8:	697b      	ldr	r3, [r7, #20]
 800e9aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e9ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	4a1f      	ldr	r2, [pc, #124]	; (800ea30 <TIM_OC4_SetConfig+0x110>)
 800e9b4:	4293      	cmp	r3, r2
 800e9b6:	d013      	beq.n	800e9e0 <TIM_OC4_SetConfig+0xc0>
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	4a1e      	ldr	r2, [pc, #120]	; (800ea34 <TIM_OC4_SetConfig+0x114>)
 800e9bc:	4293      	cmp	r3, r2
 800e9be:	d00f      	beq.n	800e9e0 <TIM_OC4_SetConfig+0xc0>
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	4a1e      	ldr	r2, [pc, #120]	; (800ea3c <TIM_OC4_SetConfig+0x11c>)
 800e9c4:	4293      	cmp	r3, r2
 800e9c6:	d00b      	beq.n	800e9e0 <TIM_OC4_SetConfig+0xc0>
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	4a1d      	ldr	r2, [pc, #116]	; (800ea40 <TIM_OC4_SetConfig+0x120>)
 800e9cc:	4293      	cmp	r3, r2
 800e9ce:	d007      	beq.n	800e9e0 <TIM_OC4_SetConfig+0xc0>
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	4a1c      	ldr	r2, [pc, #112]	; (800ea44 <TIM_OC4_SetConfig+0x124>)
 800e9d4:	4293      	cmp	r3, r2
 800e9d6:	d003      	beq.n	800e9e0 <TIM_OC4_SetConfig+0xc0>
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	4a17      	ldr	r2, [pc, #92]	; (800ea38 <TIM_OC4_SetConfig+0x118>)
 800e9dc:	4293      	cmp	r3, r2
 800e9de:	d113      	bne.n	800ea08 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e9e0:	693b      	ldr	r3, [r7, #16]
 800e9e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e9e6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800e9e8:	693b      	ldr	r3, [r7, #16]
 800e9ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e9ee:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	695b      	ldr	r3, [r3, #20]
 800e9f4:	019b      	lsls	r3, r3, #6
 800e9f6:	693a      	ldr	r2, [r7, #16]
 800e9f8:	4313      	orrs	r3, r2
 800e9fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	699b      	ldr	r3, [r3, #24]
 800ea00:	019b      	lsls	r3, r3, #6
 800ea02:	693a      	ldr	r2, [r7, #16]
 800ea04:	4313      	orrs	r3, r2
 800ea06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	693a      	ldr	r2, [r7, #16]
 800ea0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	68fa      	ldr	r2, [r7, #12]
 800ea12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ea14:	683b      	ldr	r3, [r7, #0]
 800ea16:	685a      	ldr	r2, [r3, #4]
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	697a      	ldr	r2, [r7, #20]
 800ea20:	621a      	str	r2, [r3, #32]
}
 800ea22:	bf00      	nop
 800ea24:	371c      	adds	r7, #28
 800ea26:	46bd      	mov	sp, r7
 800ea28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2c:	4770      	bx	lr
 800ea2e:	bf00      	nop
 800ea30:	40012c00 	.word	0x40012c00
 800ea34:	40013400 	.word	0x40013400
 800ea38:	40015000 	.word	0x40015000
 800ea3c:	40014000 	.word	0x40014000
 800ea40:	40014400 	.word	0x40014400
 800ea44:	40014800 	.word	0x40014800

0800ea48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ea48:	b480      	push	{r7}
 800ea4a:	b087      	sub	sp, #28
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
 800ea50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	6a1b      	ldr	r3, [r3, #32]
 800ea56:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	6a1b      	ldr	r3, [r3, #32]
 800ea62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	685b      	ldr	r3, [r3, #4]
 800ea68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ea76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ea7c:	683b      	ldr	r3, [r7, #0]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	68fa      	ldr	r2, [r7, #12]
 800ea82:	4313      	orrs	r3, r2
 800ea84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ea86:	693b      	ldr	r3, [r7, #16]
 800ea88:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ea8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	689b      	ldr	r3, [r3, #8]
 800ea92:	041b      	lsls	r3, r3, #16
 800ea94:	693a      	ldr	r2, [r7, #16]
 800ea96:	4313      	orrs	r3, r2
 800ea98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	4a19      	ldr	r2, [pc, #100]	; (800eb04 <TIM_OC5_SetConfig+0xbc>)
 800ea9e:	4293      	cmp	r3, r2
 800eaa0:	d013      	beq.n	800eaca <TIM_OC5_SetConfig+0x82>
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	4a18      	ldr	r2, [pc, #96]	; (800eb08 <TIM_OC5_SetConfig+0xc0>)
 800eaa6:	4293      	cmp	r3, r2
 800eaa8:	d00f      	beq.n	800eaca <TIM_OC5_SetConfig+0x82>
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	4a17      	ldr	r2, [pc, #92]	; (800eb0c <TIM_OC5_SetConfig+0xc4>)
 800eaae:	4293      	cmp	r3, r2
 800eab0:	d00b      	beq.n	800eaca <TIM_OC5_SetConfig+0x82>
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	4a16      	ldr	r2, [pc, #88]	; (800eb10 <TIM_OC5_SetConfig+0xc8>)
 800eab6:	4293      	cmp	r3, r2
 800eab8:	d007      	beq.n	800eaca <TIM_OC5_SetConfig+0x82>
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	4a15      	ldr	r2, [pc, #84]	; (800eb14 <TIM_OC5_SetConfig+0xcc>)
 800eabe:	4293      	cmp	r3, r2
 800eac0:	d003      	beq.n	800eaca <TIM_OC5_SetConfig+0x82>
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	4a14      	ldr	r2, [pc, #80]	; (800eb18 <TIM_OC5_SetConfig+0xd0>)
 800eac6:	4293      	cmp	r3, r2
 800eac8:	d109      	bne.n	800eade <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800eaca:	697b      	ldr	r3, [r7, #20]
 800eacc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ead0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ead2:	683b      	ldr	r3, [r7, #0]
 800ead4:	695b      	ldr	r3, [r3, #20]
 800ead6:	021b      	lsls	r3, r3, #8
 800ead8:	697a      	ldr	r2, [r7, #20]
 800eada:	4313      	orrs	r3, r2
 800eadc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	697a      	ldr	r2, [r7, #20]
 800eae2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	68fa      	ldr	r2, [r7, #12]
 800eae8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800eaea:	683b      	ldr	r3, [r7, #0]
 800eaec:	685a      	ldr	r2, [r3, #4]
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	693a      	ldr	r2, [r7, #16]
 800eaf6:	621a      	str	r2, [r3, #32]
}
 800eaf8:	bf00      	nop
 800eafa:	371c      	adds	r7, #28
 800eafc:	46bd      	mov	sp, r7
 800eafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb02:	4770      	bx	lr
 800eb04:	40012c00 	.word	0x40012c00
 800eb08:	40013400 	.word	0x40013400
 800eb0c:	40014000 	.word	0x40014000
 800eb10:	40014400 	.word	0x40014400
 800eb14:	40014800 	.word	0x40014800
 800eb18:	40015000 	.word	0x40015000

0800eb1c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800eb1c:	b480      	push	{r7}
 800eb1e:	b087      	sub	sp, #28
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
 800eb24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	6a1b      	ldr	r3, [r3, #32]
 800eb2a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	6a1b      	ldr	r3, [r3, #32]
 800eb36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	685b      	ldr	r3, [r3, #4]
 800eb3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800eb4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eb4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	021b      	lsls	r3, r3, #8
 800eb56:	68fa      	ldr	r2, [r7, #12]
 800eb58:	4313      	orrs	r3, r2
 800eb5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800eb5c:	693b      	ldr	r3, [r7, #16]
 800eb5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800eb62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800eb64:	683b      	ldr	r3, [r7, #0]
 800eb66:	689b      	ldr	r3, [r3, #8]
 800eb68:	051b      	lsls	r3, r3, #20
 800eb6a:	693a      	ldr	r2, [r7, #16]
 800eb6c:	4313      	orrs	r3, r2
 800eb6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	4a1a      	ldr	r2, [pc, #104]	; (800ebdc <TIM_OC6_SetConfig+0xc0>)
 800eb74:	4293      	cmp	r3, r2
 800eb76:	d013      	beq.n	800eba0 <TIM_OC6_SetConfig+0x84>
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	4a19      	ldr	r2, [pc, #100]	; (800ebe0 <TIM_OC6_SetConfig+0xc4>)
 800eb7c:	4293      	cmp	r3, r2
 800eb7e:	d00f      	beq.n	800eba0 <TIM_OC6_SetConfig+0x84>
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	4a18      	ldr	r2, [pc, #96]	; (800ebe4 <TIM_OC6_SetConfig+0xc8>)
 800eb84:	4293      	cmp	r3, r2
 800eb86:	d00b      	beq.n	800eba0 <TIM_OC6_SetConfig+0x84>
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	4a17      	ldr	r2, [pc, #92]	; (800ebe8 <TIM_OC6_SetConfig+0xcc>)
 800eb8c:	4293      	cmp	r3, r2
 800eb8e:	d007      	beq.n	800eba0 <TIM_OC6_SetConfig+0x84>
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	4a16      	ldr	r2, [pc, #88]	; (800ebec <TIM_OC6_SetConfig+0xd0>)
 800eb94:	4293      	cmp	r3, r2
 800eb96:	d003      	beq.n	800eba0 <TIM_OC6_SetConfig+0x84>
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	4a15      	ldr	r2, [pc, #84]	; (800ebf0 <TIM_OC6_SetConfig+0xd4>)
 800eb9c:	4293      	cmp	r3, r2
 800eb9e:	d109      	bne.n	800ebb4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800eba0:	697b      	ldr	r3, [r7, #20]
 800eba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800eba6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	695b      	ldr	r3, [r3, #20]
 800ebac:	029b      	lsls	r3, r3, #10
 800ebae:	697a      	ldr	r2, [r7, #20]
 800ebb0:	4313      	orrs	r3, r2
 800ebb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	697a      	ldr	r2, [r7, #20]
 800ebb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	68fa      	ldr	r2, [r7, #12]
 800ebbe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	685a      	ldr	r2, [r3, #4]
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	693a      	ldr	r2, [r7, #16]
 800ebcc:	621a      	str	r2, [r3, #32]
}
 800ebce:	bf00      	nop
 800ebd0:	371c      	adds	r7, #28
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd8:	4770      	bx	lr
 800ebda:	bf00      	nop
 800ebdc:	40012c00 	.word	0x40012c00
 800ebe0:	40013400 	.word	0x40013400
 800ebe4:	40014000 	.word	0x40014000
 800ebe8:	40014400 	.word	0x40014400
 800ebec:	40014800 	.word	0x40014800
 800ebf0:	40015000 	.word	0x40015000

0800ebf4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ebf4:	b480      	push	{r7}
 800ebf6:	b087      	sub	sp, #28
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	60f8      	str	r0, [r7, #12]
 800ebfc:	60b9      	str	r1, [r7, #8]
 800ebfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ec00:	68bb      	ldr	r3, [r7, #8]
 800ec02:	f003 031f 	and.w	r3, r3, #31
 800ec06:	2201      	movs	r2, #1
 800ec08:	fa02 f303 	lsl.w	r3, r2, r3
 800ec0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	6a1a      	ldr	r2, [r3, #32]
 800ec12:	697b      	ldr	r3, [r7, #20]
 800ec14:	43db      	mvns	r3, r3
 800ec16:	401a      	ands	r2, r3
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	6a1a      	ldr	r2, [r3, #32]
 800ec20:	68bb      	ldr	r3, [r7, #8]
 800ec22:	f003 031f 	and.w	r3, r3, #31
 800ec26:	6879      	ldr	r1, [r7, #4]
 800ec28:	fa01 f303 	lsl.w	r3, r1, r3
 800ec2c:	431a      	orrs	r2, r3
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	621a      	str	r2, [r3, #32]
}
 800ec32:	bf00      	nop
 800ec34:	371c      	adds	r7, #28
 800ec36:	46bd      	mov	sp, r7
 800ec38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3c:	4770      	bx	lr
	...

0800ec40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ec40:	b480      	push	{r7}
 800ec42:	b085      	sub	sp, #20
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
 800ec48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ec50:	2b01      	cmp	r3, #1
 800ec52:	d101      	bne.n	800ec58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ec54:	2302      	movs	r3, #2
 800ec56:	e074      	b.n	800ed42 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2201      	movs	r2, #1
 800ec5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	2202      	movs	r2, #2
 800ec64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	685b      	ldr	r3, [r3, #4]
 800ec6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	689b      	ldr	r3, [r3, #8]
 800ec76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	4a34      	ldr	r2, [pc, #208]	; (800ed50 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ec7e:	4293      	cmp	r3, r2
 800ec80:	d009      	beq.n	800ec96 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	4a33      	ldr	r2, [pc, #204]	; (800ed54 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ec88:	4293      	cmp	r3, r2
 800ec8a:	d004      	beq.n	800ec96 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	4a31      	ldr	r2, [pc, #196]	; (800ed58 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ec92:	4293      	cmp	r3, r2
 800ec94:	d108      	bne.n	800eca8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ec9c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ec9e:	683b      	ldr	r3, [r7, #0]
 800eca0:	685b      	ldr	r3, [r3, #4]
 800eca2:	68fa      	ldr	r2, [r7, #12]
 800eca4:	4313      	orrs	r3, r2
 800eca6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800ecae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ecb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	68fa      	ldr	r2, [r7, #12]
 800ecba:	4313      	orrs	r3, r2
 800ecbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	68fa      	ldr	r2, [r7, #12]
 800ecc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	4a21      	ldr	r2, [pc, #132]	; (800ed50 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800eccc:	4293      	cmp	r3, r2
 800ecce:	d022      	beq.n	800ed16 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ecd8:	d01d      	beq.n	800ed16 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	4a1f      	ldr	r2, [pc, #124]	; (800ed5c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ece0:	4293      	cmp	r3, r2
 800ece2:	d018      	beq.n	800ed16 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	4a1d      	ldr	r2, [pc, #116]	; (800ed60 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ecea:	4293      	cmp	r3, r2
 800ecec:	d013      	beq.n	800ed16 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	4a1c      	ldr	r2, [pc, #112]	; (800ed64 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ecf4:	4293      	cmp	r3, r2
 800ecf6:	d00e      	beq.n	800ed16 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	4a15      	ldr	r2, [pc, #84]	; (800ed54 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ecfe:	4293      	cmp	r3, r2
 800ed00:	d009      	beq.n	800ed16 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	4a18      	ldr	r2, [pc, #96]	; (800ed68 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ed08:	4293      	cmp	r3, r2
 800ed0a:	d004      	beq.n	800ed16 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	4a11      	ldr	r2, [pc, #68]	; (800ed58 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ed12:	4293      	cmp	r3, r2
 800ed14:	d10c      	bne.n	800ed30 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ed16:	68bb      	ldr	r3, [r7, #8]
 800ed18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ed1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ed1e:	683b      	ldr	r3, [r7, #0]
 800ed20:	689b      	ldr	r3, [r3, #8]
 800ed22:	68ba      	ldr	r2, [r7, #8]
 800ed24:	4313      	orrs	r3, r2
 800ed26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	68ba      	ldr	r2, [r7, #8]
 800ed2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	2201      	movs	r2, #1
 800ed34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ed40:	2300      	movs	r3, #0
}
 800ed42:	4618      	mov	r0, r3
 800ed44:	3714      	adds	r7, #20
 800ed46:	46bd      	mov	sp, r7
 800ed48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4c:	4770      	bx	lr
 800ed4e:	bf00      	nop
 800ed50:	40012c00 	.word	0x40012c00
 800ed54:	40013400 	.word	0x40013400
 800ed58:	40015000 	.word	0x40015000
 800ed5c:	40000400 	.word	0x40000400
 800ed60:	40000800 	.word	0x40000800
 800ed64:	40000c00 	.word	0x40000c00
 800ed68:	40014000 	.word	0x40014000

0800ed6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ed6c:	b480      	push	{r7}
 800ed6e:	b083      	sub	sp, #12
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ed74:	bf00      	nop
 800ed76:	370c      	adds	r7, #12
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7e:	4770      	bx	lr

0800ed80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ed80:	b480      	push	{r7}
 800ed82:	b083      	sub	sp, #12
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ed88:	bf00      	nop
 800ed8a:	370c      	adds	r7, #12
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed92:	4770      	bx	lr

0800ed94 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ed94:	b480      	push	{r7}
 800ed96:	b083      	sub	sp, #12
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ed9c:	bf00      	nop
 800ed9e:	370c      	adds	r7, #12
 800eda0:	46bd      	mov	sp, r7
 800eda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda6:	4770      	bx	lr

0800eda8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800eda8:	b480      	push	{r7}
 800edaa:	b083      	sub	sp, #12
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800edb0:	bf00      	nop
 800edb2:	370c      	adds	r7, #12
 800edb4:	46bd      	mov	sp, r7
 800edb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edba:	4770      	bx	lr

0800edbc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800edbc:	b480      	push	{r7}
 800edbe:	b083      	sub	sp, #12
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800edc4:	bf00      	nop
 800edc6:	370c      	adds	r7, #12
 800edc8:	46bd      	mov	sp, r7
 800edca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edce:	4770      	bx	lr

0800edd0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800edd0:	b480      	push	{r7}
 800edd2:	b083      	sub	sp, #12
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800edd8:	bf00      	nop
 800edda:	370c      	adds	r7, #12
 800eddc:	46bd      	mov	sp, r7
 800edde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede2:	4770      	bx	lr

0800ede4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ede4:	b480      	push	{r7}
 800ede6:	b083      	sub	sp, #12
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800edec:	bf00      	nop
 800edee:	370c      	adds	r7, #12
 800edf0:	46bd      	mov	sp, r7
 800edf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf6:	4770      	bx	lr

0800edf8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b082      	sub	sp, #8
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d101      	bne.n	800ee0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ee06:	2301      	movs	r3, #1
 800ee08:	e042      	b.n	800ee90 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d106      	bne.n	800ee22 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	2200      	movs	r2, #0
 800ee18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ee1c:	6878      	ldr	r0, [r7, #4]
 800ee1e:	f7f9 f8ad 	bl	8007f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	2224      	movs	r2, #36	; 0x24
 800ee26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	681a      	ldr	r2, [r3, #0]
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	f022 0201 	bic.w	r2, r2, #1
 800ee38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ee3a:	6878      	ldr	r0, [r7, #4]
 800ee3c:	f000 fd2e 	bl	800f89c <UART_SetConfig>
 800ee40:	4603      	mov	r3, r0
 800ee42:	2b01      	cmp	r3, #1
 800ee44:	d101      	bne.n	800ee4a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ee46:	2301      	movs	r3, #1
 800ee48:	e022      	b.n	800ee90 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d002      	beq.n	800ee58 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ee52:	6878      	ldr	r0, [r7, #4]
 800ee54:	f001 f81e 	bl	800fe94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	685a      	ldr	r2, [r3, #4]
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ee66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	689a      	ldr	r2, [r3, #8]
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ee76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	681a      	ldr	r2, [r3, #0]
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	f042 0201 	orr.w	r2, r2, #1
 800ee86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ee88:	6878      	ldr	r0, [r7, #4]
 800ee8a:	f001 f8a5 	bl	800ffd8 <UART_CheckIdleState>
 800ee8e:	4603      	mov	r3, r0
}
 800ee90:	4618      	mov	r0, r3
 800ee92:	3708      	adds	r7, #8
 800ee94:	46bd      	mov	sp, r7
 800ee96:	bd80      	pop	{r7, pc}

0800ee98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b08a      	sub	sp, #40	; 0x28
 800ee9c:	af02      	add	r7, sp, #8
 800ee9e:	60f8      	str	r0, [r7, #12]
 800eea0:	60b9      	str	r1, [r7, #8]
 800eea2:	603b      	str	r3, [r7, #0]
 800eea4:	4613      	mov	r3, r2
 800eea6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eeae:	2b20      	cmp	r3, #32
 800eeb0:	f040 8083 	bne.w	800efba <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800eeb4:	68bb      	ldr	r3, [r7, #8]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d002      	beq.n	800eec0 <HAL_UART_Transmit+0x28>
 800eeba:	88fb      	ldrh	r3, [r7, #6]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d101      	bne.n	800eec4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800eec0:	2301      	movs	r3, #1
 800eec2:	e07b      	b.n	800efbc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eeca:	2b01      	cmp	r3, #1
 800eecc:	d101      	bne.n	800eed2 <HAL_UART_Transmit+0x3a>
 800eece:	2302      	movs	r3, #2
 800eed0:	e074      	b.n	800efbc <HAL_UART_Transmit+0x124>
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	2201      	movs	r2, #1
 800eed6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	2200      	movs	r2, #0
 800eede:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	2221      	movs	r2, #33	; 0x21
 800eee6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800eeea:	f7f9 f95f 	bl	80081ac <HAL_GetTick>
 800eeee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	88fa      	ldrh	r2, [r7, #6]
 800eef4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	88fa      	ldrh	r2, [r7, #6]
 800eefc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	689b      	ldr	r3, [r3, #8]
 800ef04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef08:	d108      	bne.n	800ef1c <HAL_UART_Transmit+0x84>
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	691b      	ldr	r3, [r3, #16]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d104      	bne.n	800ef1c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800ef12:	2300      	movs	r3, #0
 800ef14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ef16:	68bb      	ldr	r3, [r7, #8]
 800ef18:	61bb      	str	r3, [r7, #24]
 800ef1a:	e003      	b.n	800ef24 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800ef1c:	68bb      	ldr	r3, [r7, #8]
 800ef1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ef20:	2300      	movs	r3, #0
 800ef22:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	2200      	movs	r2, #0
 800ef28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800ef2c:	e02c      	b.n	800ef88 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ef2e:	683b      	ldr	r3, [r7, #0]
 800ef30:	9300      	str	r3, [sp, #0]
 800ef32:	697b      	ldr	r3, [r7, #20]
 800ef34:	2200      	movs	r2, #0
 800ef36:	2180      	movs	r1, #128	; 0x80
 800ef38:	68f8      	ldr	r0, [r7, #12]
 800ef3a:	f001 f898 	bl	801006e <UART_WaitOnFlagUntilTimeout>
 800ef3e:	4603      	mov	r3, r0
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d001      	beq.n	800ef48 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800ef44:	2303      	movs	r3, #3
 800ef46:	e039      	b.n	800efbc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800ef48:	69fb      	ldr	r3, [r7, #28]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d10b      	bne.n	800ef66 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ef4e:	69bb      	ldr	r3, [r7, #24]
 800ef50:	881b      	ldrh	r3, [r3, #0]
 800ef52:	461a      	mov	r2, r3
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ef5c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ef5e:	69bb      	ldr	r3, [r7, #24]
 800ef60:	3302      	adds	r3, #2
 800ef62:	61bb      	str	r3, [r7, #24]
 800ef64:	e007      	b.n	800ef76 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ef66:	69fb      	ldr	r3, [r7, #28]
 800ef68:	781a      	ldrb	r2, [r3, #0]
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ef70:	69fb      	ldr	r3, [r7, #28]
 800ef72:	3301      	adds	r3, #1
 800ef74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ef7c:	b29b      	uxth	r3, r3
 800ef7e:	3b01      	subs	r3, #1
 800ef80:	b29a      	uxth	r2, r3
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ef8e:	b29b      	uxth	r3, r3
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d1cc      	bne.n	800ef2e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ef94:	683b      	ldr	r3, [r7, #0]
 800ef96:	9300      	str	r3, [sp, #0]
 800ef98:	697b      	ldr	r3, [r7, #20]
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	2140      	movs	r1, #64	; 0x40
 800ef9e:	68f8      	ldr	r0, [r7, #12]
 800efa0:	f001 f865 	bl	801006e <UART_WaitOnFlagUntilTimeout>
 800efa4:	4603      	mov	r3, r0
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d001      	beq.n	800efae <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800efaa:	2303      	movs	r3, #3
 800efac:	e006      	b.n	800efbc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	2220      	movs	r2, #32
 800efb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800efb6:	2300      	movs	r3, #0
 800efb8:	e000      	b.n	800efbc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800efba:	2302      	movs	r3, #2
  }
}
 800efbc:	4618      	mov	r0, r3
 800efbe:	3720      	adds	r7, #32
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}

0800efc4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b08a      	sub	sp, #40	; 0x28
 800efc8:	af02      	add	r7, sp, #8
 800efca:	60f8      	str	r0, [r7, #12]
 800efcc:	60b9      	str	r1, [r7, #8]
 800efce:	603b      	str	r3, [r7, #0]
 800efd0:	4613      	mov	r3, r2
 800efd2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800efda:	2b20      	cmp	r3, #32
 800efdc:	f040 80c0 	bne.w	800f160 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800efe0:	68bb      	ldr	r3, [r7, #8]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d002      	beq.n	800efec <HAL_UART_Receive+0x28>
 800efe6:	88fb      	ldrh	r3, [r7, #6]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d101      	bne.n	800eff0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800efec:	2301      	movs	r3, #1
 800efee:	e0b8      	b.n	800f162 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eff6:	2b01      	cmp	r3, #1
 800eff8:	d101      	bne.n	800effe <HAL_UART_Receive+0x3a>
 800effa:	2302      	movs	r3, #2
 800effc:	e0b1      	b.n	800f162 <HAL_UART_Receive+0x19e>
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	2201      	movs	r2, #1
 800f002:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	2200      	movs	r2, #0
 800f00a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	2222      	movs	r2, #34	; 0x22
 800f012:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	2200      	movs	r2, #0
 800f01a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f01c:	f7f9 f8c6 	bl	80081ac <HAL_GetTick>
 800f020:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	88fa      	ldrh	r2, [r7, #6]
 800f026:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	88fa      	ldrh	r2, [r7, #6]
 800f02e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	689b      	ldr	r3, [r3, #8]
 800f036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f03a:	d10e      	bne.n	800f05a <HAL_UART_Receive+0x96>
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	691b      	ldr	r3, [r3, #16]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d105      	bne.n	800f050 <HAL_UART_Receive+0x8c>
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f04a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f04e:	e02d      	b.n	800f0ac <HAL_UART_Receive+0xe8>
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	22ff      	movs	r2, #255	; 0xff
 800f054:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f058:	e028      	b.n	800f0ac <HAL_UART_Receive+0xe8>
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	689b      	ldr	r3, [r3, #8]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d10d      	bne.n	800f07e <HAL_UART_Receive+0xba>
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	691b      	ldr	r3, [r3, #16]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d104      	bne.n	800f074 <HAL_UART_Receive+0xb0>
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	22ff      	movs	r2, #255	; 0xff
 800f06e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f072:	e01b      	b.n	800f0ac <HAL_UART_Receive+0xe8>
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	227f      	movs	r2, #127	; 0x7f
 800f078:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f07c:	e016      	b.n	800f0ac <HAL_UART_Receive+0xe8>
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	689b      	ldr	r3, [r3, #8]
 800f082:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f086:	d10d      	bne.n	800f0a4 <HAL_UART_Receive+0xe0>
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	691b      	ldr	r3, [r3, #16]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d104      	bne.n	800f09a <HAL_UART_Receive+0xd6>
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	227f      	movs	r2, #127	; 0x7f
 800f094:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f098:	e008      	b.n	800f0ac <HAL_UART_Receive+0xe8>
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	223f      	movs	r2, #63	; 0x3f
 800f09e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f0a2:	e003      	b.n	800f0ac <HAL_UART_Receive+0xe8>
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f0b2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	689b      	ldr	r3, [r3, #8]
 800f0b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f0bc:	d108      	bne.n	800f0d0 <HAL_UART_Receive+0x10c>
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	691b      	ldr	r3, [r3, #16]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d104      	bne.n	800f0d0 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f0ca:	68bb      	ldr	r3, [r7, #8]
 800f0cc:	61bb      	str	r3, [r7, #24]
 800f0ce:	e003      	b.n	800f0d8 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800f0d0:	68bb      	ldr	r3, [r7, #8]
 800f0d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	2200      	movs	r2, #0
 800f0dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800f0e0:	e032      	b.n	800f148 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800f0e2:	683b      	ldr	r3, [r7, #0]
 800f0e4:	9300      	str	r3, [sp, #0]
 800f0e6:	697b      	ldr	r3, [r7, #20]
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	2120      	movs	r1, #32
 800f0ec:	68f8      	ldr	r0, [r7, #12]
 800f0ee:	f000 ffbe 	bl	801006e <UART_WaitOnFlagUntilTimeout>
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d001      	beq.n	800f0fc <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800f0f8:	2303      	movs	r3, #3
 800f0fa:	e032      	b.n	800f162 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800f0fc:	69fb      	ldr	r3, [r7, #28]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d10c      	bne.n	800f11c <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f108:	b29a      	uxth	r2, r3
 800f10a:	8a7b      	ldrh	r3, [r7, #18]
 800f10c:	4013      	ands	r3, r2
 800f10e:	b29a      	uxth	r2, r3
 800f110:	69bb      	ldr	r3, [r7, #24]
 800f112:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800f114:	69bb      	ldr	r3, [r7, #24]
 800f116:	3302      	adds	r3, #2
 800f118:	61bb      	str	r3, [r7, #24]
 800f11a:	e00c      	b.n	800f136 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f122:	b2da      	uxtb	r2, r3
 800f124:	8a7b      	ldrh	r3, [r7, #18]
 800f126:	b2db      	uxtb	r3, r3
 800f128:	4013      	ands	r3, r2
 800f12a:	b2da      	uxtb	r2, r3
 800f12c:	69fb      	ldr	r3, [r7, #28]
 800f12e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800f130:	69fb      	ldr	r3, [r7, #28]
 800f132:	3301      	adds	r3, #1
 800f134:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f13c:	b29b      	uxth	r3, r3
 800f13e:	3b01      	subs	r3, #1
 800f140:	b29a      	uxth	r2, r3
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f14e:	b29b      	uxth	r3, r3
 800f150:	2b00      	cmp	r3, #0
 800f152:	d1c6      	bne.n	800f0e2 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	2220      	movs	r2, #32
 800f158:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800f15c:	2300      	movs	r3, #0
 800f15e:	e000      	b.n	800f162 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800f160:	2302      	movs	r3, #2
  }
}
 800f162:	4618      	mov	r0, r3
 800f164:	3720      	adds	r7, #32
 800f166:	46bd      	mov	sp, r7
 800f168:	bd80      	pop	{r7, pc}
	...

0800f16c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b08a      	sub	sp, #40	; 0x28
 800f170:	af00      	add	r7, sp, #0
 800f172:	60f8      	str	r0, [r7, #12]
 800f174:	60b9      	str	r1, [r7, #8]
 800f176:	4613      	mov	r3, r2
 800f178:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f180:	2b20      	cmp	r3, #32
 800f182:	d142      	bne.n	800f20a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800f184:	68bb      	ldr	r3, [r7, #8]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d002      	beq.n	800f190 <HAL_UART_Receive_IT+0x24>
 800f18a:	88fb      	ldrh	r3, [r7, #6]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d101      	bne.n	800f194 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800f190:	2301      	movs	r3, #1
 800f192:	e03b      	b.n	800f20c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f19a:	2b01      	cmp	r3, #1
 800f19c:	d101      	bne.n	800f1a2 <HAL_UART_Receive_IT+0x36>
 800f19e:	2302      	movs	r3, #2
 800f1a0:	e034      	b.n	800f20c <HAL_UART_Receive_IT+0xa0>
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	2201      	movs	r2, #1
 800f1a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	4a17      	ldr	r2, [pc, #92]	; (800f214 <HAL_UART_Receive_IT+0xa8>)
 800f1b6:	4293      	cmp	r3, r2
 800f1b8:	d01f      	beq.n	800f1fa <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	685b      	ldr	r3, [r3, #4]
 800f1c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d018      	beq.n	800f1fa <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1ce:	697b      	ldr	r3, [r7, #20]
 800f1d0:	e853 3f00 	ldrex	r3, [r3]
 800f1d4:	613b      	str	r3, [r7, #16]
   return(result);
 800f1d6:	693b      	ldr	r3, [r7, #16]
 800f1d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f1dc:	627b      	str	r3, [r7, #36]	; 0x24
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	461a      	mov	r2, r3
 800f1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1e6:	623b      	str	r3, [r7, #32]
 800f1e8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1ea:	69f9      	ldr	r1, [r7, #28]
 800f1ec:	6a3a      	ldr	r2, [r7, #32]
 800f1ee:	e841 2300 	strex	r3, r2, [r1]
 800f1f2:	61bb      	str	r3, [r7, #24]
   return(result);
 800f1f4:	69bb      	ldr	r3, [r7, #24]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d1e6      	bne.n	800f1c8 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800f1fa:	88fb      	ldrh	r3, [r7, #6]
 800f1fc:	461a      	mov	r2, r3
 800f1fe:	68b9      	ldr	r1, [r7, #8]
 800f200:	68f8      	ldr	r0, [r7, #12]
 800f202:	f000 fffd 	bl	8010200 <UART_Start_Receive_IT>
 800f206:	4603      	mov	r3, r0
 800f208:	e000      	b.n	800f20c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800f20a:	2302      	movs	r3, #2
  }
}
 800f20c:	4618      	mov	r0, r3
 800f20e:	3728      	adds	r7, #40	; 0x28
 800f210:	46bd      	mov	sp, r7
 800f212:	bd80      	pop	{r7, pc}
 800f214:	40008000 	.word	0x40008000

0800f218 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b0ba      	sub	sp, #232	; 0xe8
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	69db      	ldr	r3, [r3, #28]
 800f226:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	689b      	ldr	r3, [r3, #8]
 800f23a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f23e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800f242:	f640 030f 	movw	r3, #2063	; 0x80f
 800f246:	4013      	ands	r3, r2
 800f248:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800f24c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f250:	2b00      	cmp	r3, #0
 800f252:	d11b      	bne.n	800f28c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f258:	f003 0320 	and.w	r3, r3, #32
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d015      	beq.n	800f28c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f264:	f003 0320 	and.w	r3, r3, #32
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d105      	bne.n	800f278 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f26c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f274:	2b00      	cmp	r3, #0
 800f276:	d009      	beq.n	800f28c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	f000 82d6 	beq.w	800f82e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f286:	6878      	ldr	r0, [r7, #4]
 800f288:	4798      	blx	r3
      }
      return;
 800f28a:	e2d0      	b.n	800f82e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f28c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f290:	2b00      	cmp	r3, #0
 800f292:	f000 811f 	beq.w	800f4d4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f296:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f29a:	4b8b      	ldr	r3, [pc, #556]	; (800f4c8 <HAL_UART_IRQHandler+0x2b0>)
 800f29c:	4013      	ands	r3, r2
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d106      	bne.n	800f2b0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f2a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800f2a6:	4b89      	ldr	r3, [pc, #548]	; (800f4cc <HAL_UART_IRQHandler+0x2b4>)
 800f2a8:	4013      	ands	r3, r2
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	f000 8112 	beq.w	800f4d4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f2b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f2b4:	f003 0301 	and.w	r3, r3, #1
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d011      	beq.n	800f2e0 <HAL_UART_IRQHandler+0xc8>
 800f2bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f2c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d00b      	beq.n	800f2e0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	2201      	movs	r2, #1
 800f2ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f2d6:	f043 0201 	orr.w	r2, r3, #1
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f2e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f2e4:	f003 0302 	and.w	r3, r3, #2
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d011      	beq.n	800f310 <HAL_UART_IRQHandler+0xf8>
 800f2ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f2f0:	f003 0301 	and.w	r3, r3, #1
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d00b      	beq.n	800f310 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	2202      	movs	r2, #2
 800f2fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f306:	f043 0204 	orr.w	r2, r3, #4
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f314:	f003 0304 	and.w	r3, r3, #4
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d011      	beq.n	800f340 <HAL_UART_IRQHandler+0x128>
 800f31c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f320:	f003 0301 	and.w	r3, r3, #1
 800f324:	2b00      	cmp	r3, #0
 800f326:	d00b      	beq.n	800f340 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	2204      	movs	r2, #4
 800f32e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f336:	f043 0202 	orr.w	r2, r3, #2
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f344:	f003 0308 	and.w	r3, r3, #8
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d017      	beq.n	800f37c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f34c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f350:	f003 0320 	and.w	r3, r3, #32
 800f354:	2b00      	cmp	r3, #0
 800f356:	d105      	bne.n	800f364 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f358:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f35c:	4b5a      	ldr	r3, [pc, #360]	; (800f4c8 <HAL_UART_IRQHandler+0x2b0>)
 800f35e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f360:	2b00      	cmp	r3, #0
 800f362:	d00b      	beq.n	800f37c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	2208      	movs	r2, #8
 800f36a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f372:	f043 0208 	orr.w	r2, r3, #8
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f37c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f380:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f384:	2b00      	cmp	r3, #0
 800f386:	d012      	beq.n	800f3ae <HAL_UART_IRQHandler+0x196>
 800f388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f38c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f390:	2b00      	cmp	r3, #0
 800f392:	d00c      	beq.n	800f3ae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f39c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f3a4:	f043 0220 	orr.w	r2, r3, #32
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	f000 823c 	beq.w	800f832 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f3ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f3be:	f003 0320 	and.w	r3, r3, #32
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d013      	beq.n	800f3ee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f3c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f3ca:	f003 0320 	and.w	r3, r3, #32
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d105      	bne.n	800f3de <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f3d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f3d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d007      	beq.n	800f3ee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d003      	beq.n	800f3ee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3ea:	6878      	ldr	r0, [r7, #4]
 800f3ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f3f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	689b      	ldr	r3, [r3, #8]
 800f3fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f402:	2b40      	cmp	r3, #64	; 0x40
 800f404:	d005      	beq.n	800f412 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f406:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f40a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d04f      	beq.n	800f4b2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f412:	6878      	ldr	r0, [r7, #4]
 800f414:	f001 f81e 	bl	8010454 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	689b      	ldr	r3, [r3, #8]
 800f41e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f422:	2b40      	cmp	r3, #64	; 0x40
 800f424:	d141      	bne.n	800f4aa <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	3308      	adds	r3, #8
 800f42c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f430:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f434:	e853 3f00 	ldrex	r3, [r3]
 800f438:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800f43c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f440:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f444:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	3308      	adds	r3, #8
 800f44e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800f452:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800f456:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f45a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800f45e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f462:	e841 2300 	strex	r3, r2, [r1]
 800f466:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800f46a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d1d9      	bne.n	800f426 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f476:	2b00      	cmp	r3, #0
 800f478:	d013      	beq.n	800f4a2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f47e:	4a14      	ldr	r2, [pc, #80]	; (800f4d0 <HAL_UART_IRQHandler+0x2b8>)
 800f480:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f486:	4618      	mov	r0, r3
 800f488:	f7fa fb26 	bl	8009ad8 <HAL_DMA_Abort_IT>
 800f48c:	4603      	mov	r3, r0
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d017      	beq.n	800f4c2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f498:	687a      	ldr	r2, [r7, #4]
 800f49a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800f49c:	4610      	mov	r0, r2
 800f49e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f4a0:	e00f      	b.n	800f4c2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f4a2:	6878      	ldr	r0, [r7, #4]
 800f4a4:	f000 f9e4 	bl	800f870 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f4a8:	e00b      	b.n	800f4c2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f4aa:	6878      	ldr	r0, [r7, #4]
 800f4ac:	f000 f9e0 	bl	800f870 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f4b0:	e007      	b.n	800f4c2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f4b2:	6878      	ldr	r0, [r7, #4]
 800f4b4:	f000 f9dc 	bl	800f870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	2200      	movs	r2, #0
 800f4bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800f4c0:	e1b7      	b.n	800f832 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f4c2:	bf00      	nop
    return;
 800f4c4:	e1b5      	b.n	800f832 <HAL_UART_IRQHandler+0x61a>
 800f4c6:	bf00      	nop
 800f4c8:	10000001 	.word	0x10000001
 800f4cc:	04000120 	.word	0x04000120
 800f4d0:	08010521 	.word	0x08010521

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4d8:	2b01      	cmp	r3, #1
 800f4da:	f040 814a 	bne.w	800f772 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f4de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f4e2:	f003 0310 	and.w	r3, r3, #16
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	f000 8143 	beq.w	800f772 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f4ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f4f0:	f003 0310 	and.w	r3, r3, #16
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	f000 813c 	beq.w	800f772 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	2210      	movs	r2, #16
 800f500:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	689b      	ldr	r3, [r3, #8]
 800f508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f50c:	2b40      	cmp	r3, #64	; 0x40
 800f50e:	f040 80b5 	bne.w	800f67c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	685b      	ldr	r3, [r3, #4]
 800f51a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f51e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800f522:	2b00      	cmp	r3, #0
 800f524:	f000 8187 	beq.w	800f836 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f52e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f532:	429a      	cmp	r2, r3
 800f534:	f080 817f 	bcs.w	800f836 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f53e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	f003 0320 	and.w	r3, r3, #32
 800f54e:	2b00      	cmp	r3, #0
 800f550:	f040 8086 	bne.w	800f660 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f55c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f560:	e853 3f00 	ldrex	r3, [r3]
 800f564:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800f568:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f56c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f570:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	461a      	mov	r2, r3
 800f57a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f57e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f582:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f586:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f58a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f58e:	e841 2300 	strex	r3, r2, [r1]
 800f592:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800f596:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d1da      	bne.n	800f554 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	3308      	adds	r3, #8
 800f5a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f5a8:	e853 3f00 	ldrex	r3, [r3]
 800f5ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f5ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f5b0:	f023 0301 	bic.w	r3, r3, #1
 800f5b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	3308      	adds	r3, #8
 800f5be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f5c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800f5c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f5ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f5ce:	e841 2300 	strex	r3, r2, [r1]
 800f5d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f5d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d1e1      	bne.n	800f59e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	3308      	adds	r3, #8
 800f5e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f5e4:	e853 3f00 	ldrex	r3, [r3]
 800f5e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f5ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f5ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f5f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	3308      	adds	r3, #8
 800f5fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f5fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f600:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f602:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f604:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f606:	e841 2300 	strex	r3, r2, [r1]
 800f60a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f60c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d1e3      	bne.n	800f5da <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	2220      	movs	r2, #32
 800f616:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	2200      	movs	r2, #0
 800f61e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f628:	e853 3f00 	ldrex	r3, [r3]
 800f62c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f62e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f630:	f023 0310 	bic.w	r3, r3, #16
 800f634:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	461a      	mov	r2, r3
 800f63e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f642:	65bb      	str	r3, [r7, #88]	; 0x58
 800f644:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f646:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f648:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f64a:	e841 2300 	strex	r3, r2, [r1]
 800f64e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f650:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f652:	2b00      	cmp	r3, #0
 800f654:	d1e4      	bne.n	800f620 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f65a:	4618      	mov	r0, r3
 800f65c:	f7fa f9e3 	bl	8009a26 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f66c:	b29b      	uxth	r3, r3
 800f66e:	1ad3      	subs	r3, r2, r3
 800f670:	b29b      	uxth	r3, r3
 800f672:	4619      	mov	r1, r3
 800f674:	6878      	ldr	r0, [r7, #4]
 800f676:	f000 f905 	bl	800f884 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f67a:	e0dc      	b.n	800f836 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f688:	b29b      	uxth	r3, r3
 800f68a:	1ad3      	subs	r3, r2, r3
 800f68c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f696:	b29b      	uxth	r3, r3
 800f698:	2b00      	cmp	r3, #0
 800f69a:	f000 80ce 	beq.w	800f83a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800f69e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	f000 80c9 	beq.w	800f83a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6b0:	e853 3f00 	ldrex	r3, [r3]
 800f6b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f6b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f6bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	461a      	mov	r2, r3
 800f6c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f6ca:	647b      	str	r3, [r7, #68]	; 0x44
 800f6cc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f6d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f6d2:	e841 2300 	strex	r3, r2, [r1]
 800f6d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f6d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d1e4      	bne.n	800f6a8 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	3308      	adds	r3, #8
 800f6e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6e8:	e853 3f00 	ldrex	r3, [r3]
 800f6ec:	623b      	str	r3, [r7, #32]
   return(result);
 800f6ee:	6a3b      	ldr	r3, [r7, #32]
 800f6f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f6f4:	f023 0301 	bic.w	r3, r3, #1
 800f6f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	3308      	adds	r3, #8
 800f702:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f706:	633a      	str	r2, [r7, #48]	; 0x30
 800f708:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f70a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f70c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f70e:	e841 2300 	strex	r3, r2, [r1]
 800f712:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f716:	2b00      	cmp	r3, #0
 800f718:	d1e1      	bne.n	800f6de <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	2220      	movs	r2, #32
 800f71e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	2200      	movs	r2, #0
 800f726:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	2200      	movs	r2, #0
 800f72c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f734:	693b      	ldr	r3, [r7, #16]
 800f736:	e853 3f00 	ldrex	r3, [r3]
 800f73a:	60fb      	str	r3, [r7, #12]
   return(result);
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	f023 0310 	bic.w	r3, r3, #16
 800f742:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	461a      	mov	r2, r3
 800f74c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f750:	61fb      	str	r3, [r7, #28]
 800f752:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f754:	69b9      	ldr	r1, [r7, #24]
 800f756:	69fa      	ldr	r2, [r7, #28]
 800f758:	e841 2300 	strex	r3, r2, [r1]
 800f75c:	617b      	str	r3, [r7, #20]
   return(result);
 800f75e:	697b      	ldr	r3, [r7, #20]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d1e4      	bne.n	800f72e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f764:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f768:	4619      	mov	r1, r3
 800f76a:	6878      	ldr	r0, [r7, #4]
 800f76c:	f000 f88a 	bl	800f884 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f770:	e063      	b.n	800f83a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f776:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d00e      	beq.n	800f79c <HAL_UART_IRQHandler+0x584>
 800f77e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f786:	2b00      	cmp	r3, #0
 800f788:	d008      	beq.n	800f79c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f792:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f794:	6878      	ldr	r0, [r7, #4]
 800f796:	f001 fb61 	bl	8010e5c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f79a:	e051      	b.n	800f840 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f79c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f7a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d014      	beq.n	800f7d2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f7a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f7ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d105      	bne.n	800f7c0 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f7b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f7b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d008      	beq.n	800f7d2 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d03a      	beq.n	800f83e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f7cc:	6878      	ldr	r0, [r7, #4]
 800f7ce:	4798      	blx	r3
    }
    return;
 800f7d0:	e035      	b.n	800f83e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f7d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f7d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d009      	beq.n	800f7f2 <HAL_UART_IRQHandler+0x5da>
 800f7de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f7e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d003      	beq.n	800f7f2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800f7ea:	6878      	ldr	r0, [r7, #4]
 800f7ec:	f000 feae 	bl	801054c <UART_EndTransmit_IT>
    return;
 800f7f0:	e026      	b.n	800f840 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f7f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f7f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d009      	beq.n	800f812 <HAL_UART_IRQHandler+0x5fa>
 800f7fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f802:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f806:	2b00      	cmp	r3, #0
 800f808:	d003      	beq.n	800f812 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f80a:	6878      	ldr	r0, [r7, #4]
 800f80c:	f001 fb3a 	bl	8010e84 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f810:	e016      	b.n	800f840 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f816:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d010      	beq.n	800f840 <HAL_UART_IRQHandler+0x628>
 800f81e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f822:	2b00      	cmp	r3, #0
 800f824:	da0c      	bge.n	800f840 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f826:	6878      	ldr	r0, [r7, #4]
 800f828:	f001 fb22 	bl	8010e70 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f82c:	e008      	b.n	800f840 <HAL_UART_IRQHandler+0x628>
      return;
 800f82e:	bf00      	nop
 800f830:	e006      	b.n	800f840 <HAL_UART_IRQHandler+0x628>
    return;
 800f832:	bf00      	nop
 800f834:	e004      	b.n	800f840 <HAL_UART_IRQHandler+0x628>
      return;
 800f836:	bf00      	nop
 800f838:	e002      	b.n	800f840 <HAL_UART_IRQHandler+0x628>
      return;
 800f83a:	bf00      	nop
 800f83c:	e000      	b.n	800f840 <HAL_UART_IRQHandler+0x628>
    return;
 800f83e:	bf00      	nop
  }
}
 800f840:	37e8      	adds	r7, #232	; 0xe8
 800f842:	46bd      	mov	sp, r7
 800f844:	bd80      	pop	{r7, pc}
 800f846:	bf00      	nop

0800f848 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f848:	b480      	push	{r7}
 800f84a:	b083      	sub	sp, #12
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f850:	bf00      	nop
 800f852:	370c      	adds	r7, #12
 800f854:	46bd      	mov	sp, r7
 800f856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85a:	4770      	bx	lr

0800f85c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800f85c:	b480      	push	{r7}
 800f85e:	b083      	sub	sp, #12
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800f864:	bf00      	nop
 800f866:	370c      	adds	r7, #12
 800f868:	46bd      	mov	sp, r7
 800f86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86e:	4770      	bx	lr

0800f870 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f870:	b480      	push	{r7}
 800f872:	b083      	sub	sp, #12
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f878:	bf00      	nop
 800f87a:	370c      	adds	r7, #12
 800f87c:	46bd      	mov	sp, r7
 800f87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f882:	4770      	bx	lr

0800f884 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f884:	b480      	push	{r7}
 800f886:	b083      	sub	sp, #12
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
 800f88c:	460b      	mov	r3, r1
 800f88e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f890:	bf00      	nop
 800f892:	370c      	adds	r7, #12
 800f894:	46bd      	mov	sp, r7
 800f896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f89a:	4770      	bx	lr

0800f89c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f89c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f8a0:	b08c      	sub	sp, #48	; 0x30
 800f8a2:	af00      	add	r7, sp, #0
 800f8a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f8a6:	2300      	movs	r3, #0
 800f8a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f8ac:	697b      	ldr	r3, [r7, #20]
 800f8ae:	689a      	ldr	r2, [r3, #8]
 800f8b0:	697b      	ldr	r3, [r7, #20]
 800f8b2:	691b      	ldr	r3, [r3, #16]
 800f8b4:	431a      	orrs	r2, r3
 800f8b6:	697b      	ldr	r3, [r7, #20]
 800f8b8:	695b      	ldr	r3, [r3, #20]
 800f8ba:	431a      	orrs	r2, r3
 800f8bc:	697b      	ldr	r3, [r7, #20]
 800f8be:	69db      	ldr	r3, [r3, #28]
 800f8c0:	4313      	orrs	r3, r2
 800f8c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f8c4:	697b      	ldr	r3, [r7, #20]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	681a      	ldr	r2, [r3, #0]
 800f8ca:	4baa      	ldr	r3, [pc, #680]	; (800fb74 <UART_SetConfig+0x2d8>)
 800f8cc:	4013      	ands	r3, r2
 800f8ce:	697a      	ldr	r2, [r7, #20]
 800f8d0:	6812      	ldr	r2, [r2, #0]
 800f8d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f8d4:	430b      	orrs	r3, r1
 800f8d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f8d8:	697b      	ldr	r3, [r7, #20]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	685b      	ldr	r3, [r3, #4]
 800f8de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f8e2:	697b      	ldr	r3, [r7, #20]
 800f8e4:	68da      	ldr	r2, [r3, #12]
 800f8e6:	697b      	ldr	r3, [r7, #20]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	430a      	orrs	r2, r1
 800f8ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f8ee:	697b      	ldr	r3, [r7, #20]
 800f8f0:	699b      	ldr	r3, [r3, #24]
 800f8f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f8f4:	697b      	ldr	r3, [r7, #20]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	4a9f      	ldr	r2, [pc, #636]	; (800fb78 <UART_SetConfig+0x2dc>)
 800f8fa:	4293      	cmp	r3, r2
 800f8fc:	d004      	beq.n	800f908 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f8fe:	697b      	ldr	r3, [r7, #20]
 800f900:	6a1b      	ldr	r3, [r3, #32]
 800f902:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f904:	4313      	orrs	r3, r2
 800f906:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f908:	697b      	ldr	r3, [r7, #20]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	689b      	ldr	r3, [r3, #8]
 800f90e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800f912:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800f916:	697a      	ldr	r2, [r7, #20]
 800f918:	6812      	ldr	r2, [r2, #0]
 800f91a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f91c:	430b      	orrs	r3, r1
 800f91e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f920:	697b      	ldr	r3, [r7, #20]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f926:	f023 010f 	bic.w	r1, r3, #15
 800f92a:	697b      	ldr	r3, [r7, #20]
 800f92c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f92e:	697b      	ldr	r3, [r7, #20]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	430a      	orrs	r2, r1
 800f934:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f936:	697b      	ldr	r3, [r7, #20]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	4a90      	ldr	r2, [pc, #576]	; (800fb7c <UART_SetConfig+0x2e0>)
 800f93c:	4293      	cmp	r3, r2
 800f93e:	d125      	bne.n	800f98c <UART_SetConfig+0xf0>
 800f940:	4b8f      	ldr	r3, [pc, #572]	; (800fb80 <UART_SetConfig+0x2e4>)
 800f942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f946:	f003 0303 	and.w	r3, r3, #3
 800f94a:	2b03      	cmp	r3, #3
 800f94c:	d81a      	bhi.n	800f984 <UART_SetConfig+0xe8>
 800f94e:	a201      	add	r2, pc, #4	; (adr r2, 800f954 <UART_SetConfig+0xb8>)
 800f950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f954:	0800f965 	.word	0x0800f965
 800f958:	0800f975 	.word	0x0800f975
 800f95c:	0800f96d 	.word	0x0800f96d
 800f960:	0800f97d 	.word	0x0800f97d
 800f964:	2301      	movs	r3, #1
 800f966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f96a:	e116      	b.n	800fb9a <UART_SetConfig+0x2fe>
 800f96c:	2302      	movs	r3, #2
 800f96e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f972:	e112      	b.n	800fb9a <UART_SetConfig+0x2fe>
 800f974:	2304      	movs	r3, #4
 800f976:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f97a:	e10e      	b.n	800fb9a <UART_SetConfig+0x2fe>
 800f97c:	2308      	movs	r3, #8
 800f97e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f982:	e10a      	b.n	800fb9a <UART_SetConfig+0x2fe>
 800f984:	2310      	movs	r3, #16
 800f986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f98a:	e106      	b.n	800fb9a <UART_SetConfig+0x2fe>
 800f98c:	697b      	ldr	r3, [r7, #20]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	4a7c      	ldr	r2, [pc, #496]	; (800fb84 <UART_SetConfig+0x2e8>)
 800f992:	4293      	cmp	r3, r2
 800f994:	d138      	bne.n	800fa08 <UART_SetConfig+0x16c>
 800f996:	4b7a      	ldr	r3, [pc, #488]	; (800fb80 <UART_SetConfig+0x2e4>)
 800f998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f99c:	f003 030c 	and.w	r3, r3, #12
 800f9a0:	2b0c      	cmp	r3, #12
 800f9a2:	d82d      	bhi.n	800fa00 <UART_SetConfig+0x164>
 800f9a4:	a201      	add	r2, pc, #4	; (adr r2, 800f9ac <UART_SetConfig+0x110>)
 800f9a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9aa:	bf00      	nop
 800f9ac:	0800f9e1 	.word	0x0800f9e1
 800f9b0:	0800fa01 	.word	0x0800fa01
 800f9b4:	0800fa01 	.word	0x0800fa01
 800f9b8:	0800fa01 	.word	0x0800fa01
 800f9bc:	0800f9f1 	.word	0x0800f9f1
 800f9c0:	0800fa01 	.word	0x0800fa01
 800f9c4:	0800fa01 	.word	0x0800fa01
 800f9c8:	0800fa01 	.word	0x0800fa01
 800f9cc:	0800f9e9 	.word	0x0800f9e9
 800f9d0:	0800fa01 	.word	0x0800fa01
 800f9d4:	0800fa01 	.word	0x0800fa01
 800f9d8:	0800fa01 	.word	0x0800fa01
 800f9dc:	0800f9f9 	.word	0x0800f9f9
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f9e6:	e0d8      	b.n	800fb9a <UART_SetConfig+0x2fe>
 800f9e8:	2302      	movs	r3, #2
 800f9ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f9ee:	e0d4      	b.n	800fb9a <UART_SetConfig+0x2fe>
 800f9f0:	2304      	movs	r3, #4
 800f9f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f9f6:	e0d0      	b.n	800fb9a <UART_SetConfig+0x2fe>
 800f9f8:	2308      	movs	r3, #8
 800f9fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f9fe:	e0cc      	b.n	800fb9a <UART_SetConfig+0x2fe>
 800fa00:	2310      	movs	r3, #16
 800fa02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fa06:	e0c8      	b.n	800fb9a <UART_SetConfig+0x2fe>
 800fa08:	697b      	ldr	r3, [r7, #20]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	4a5e      	ldr	r2, [pc, #376]	; (800fb88 <UART_SetConfig+0x2ec>)
 800fa0e:	4293      	cmp	r3, r2
 800fa10:	d125      	bne.n	800fa5e <UART_SetConfig+0x1c2>
 800fa12:	4b5b      	ldr	r3, [pc, #364]	; (800fb80 <UART_SetConfig+0x2e4>)
 800fa14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fa18:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800fa1c:	2b30      	cmp	r3, #48	; 0x30
 800fa1e:	d016      	beq.n	800fa4e <UART_SetConfig+0x1b2>
 800fa20:	2b30      	cmp	r3, #48	; 0x30
 800fa22:	d818      	bhi.n	800fa56 <UART_SetConfig+0x1ba>
 800fa24:	2b20      	cmp	r3, #32
 800fa26:	d00a      	beq.n	800fa3e <UART_SetConfig+0x1a2>
 800fa28:	2b20      	cmp	r3, #32
 800fa2a:	d814      	bhi.n	800fa56 <UART_SetConfig+0x1ba>
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d002      	beq.n	800fa36 <UART_SetConfig+0x19a>
 800fa30:	2b10      	cmp	r3, #16
 800fa32:	d008      	beq.n	800fa46 <UART_SetConfig+0x1aa>
 800fa34:	e00f      	b.n	800fa56 <UART_SetConfig+0x1ba>
 800fa36:	2300      	movs	r3, #0
 800fa38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fa3c:	e0ad      	b.n	800fb9a <UART_SetConfig+0x2fe>
 800fa3e:	2302      	movs	r3, #2
 800fa40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fa44:	e0a9      	b.n	800fb9a <UART_SetConfig+0x2fe>
 800fa46:	2304      	movs	r3, #4
 800fa48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fa4c:	e0a5      	b.n	800fb9a <UART_SetConfig+0x2fe>
 800fa4e:	2308      	movs	r3, #8
 800fa50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fa54:	e0a1      	b.n	800fb9a <UART_SetConfig+0x2fe>
 800fa56:	2310      	movs	r3, #16
 800fa58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fa5c:	e09d      	b.n	800fb9a <UART_SetConfig+0x2fe>
 800fa5e:	697b      	ldr	r3, [r7, #20]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	4a4a      	ldr	r2, [pc, #296]	; (800fb8c <UART_SetConfig+0x2f0>)
 800fa64:	4293      	cmp	r3, r2
 800fa66:	d125      	bne.n	800fab4 <UART_SetConfig+0x218>
 800fa68:	4b45      	ldr	r3, [pc, #276]	; (800fb80 <UART_SetConfig+0x2e4>)
 800fa6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fa6e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800fa72:	2bc0      	cmp	r3, #192	; 0xc0
 800fa74:	d016      	beq.n	800faa4 <UART_SetConfig+0x208>
 800fa76:	2bc0      	cmp	r3, #192	; 0xc0
 800fa78:	d818      	bhi.n	800faac <UART_SetConfig+0x210>
 800fa7a:	2b80      	cmp	r3, #128	; 0x80
 800fa7c:	d00a      	beq.n	800fa94 <UART_SetConfig+0x1f8>
 800fa7e:	2b80      	cmp	r3, #128	; 0x80
 800fa80:	d814      	bhi.n	800faac <UART_SetConfig+0x210>
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d002      	beq.n	800fa8c <UART_SetConfig+0x1f0>
 800fa86:	2b40      	cmp	r3, #64	; 0x40
 800fa88:	d008      	beq.n	800fa9c <UART_SetConfig+0x200>
 800fa8a:	e00f      	b.n	800faac <UART_SetConfig+0x210>
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fa92:	e082      	b.n	800fb9a <UART_SetConfig+0x2fe>
 800fa94:	2302      	movs	r3, #2
 800fa96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fa9a:	e07e      	b.n	800fb9a <UART_SetConfig+0x2fe>
 800fa9c:	2304      	movs	r3, #4
 800fa9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800faa2:	e07a      	b.n	800fb9a <UART_SetConfig+0x2fe>
 800faa4:	2308      	movs	r3, #8
 800faa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800faaa:	e076      	b.n	800fb9a <UART_SetConfig+0x2fe>
 800faac:	2310      	movs	r3, #16
 800faae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fab2:	e072      	b.n	800fb9a <UART_SetConfig+0x2fe>
 800fab4:	697b      	ldr	r3, [r7, #20]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	4a35      	ldr	r2, [pc, #212]	; (800fb90 <UART_SetConfig+0x2f4>)
 800faba:	4293      	cmp	r3, r2
 800fabc:	d12a      	bne.n	800fb14 <UART_SetConfig+0x278>
 800fabe:	4b30      	ldr	r3, [pc, #192]	; (800fb80 <UART_SetConfig+0x2e4>)
 800fac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fac4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fac8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800facc:	d01a      	beq.n	800fb04 <UART_SetConfig+0x268>
 800face:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fad2:	d81b      	bhi.n	800fb0c <UART_SetConfig+0x270>
 800fad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fad8:	d00c      	beq.n	800faf4 <UART_SetConfig+0x258>
 800fada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fade:	d815      	bhi.n	800fb0c <UART_SetConfig+0x270>
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d003      	beq.n	800faec <UART_SetConfig+0x250>
 800fae4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fae8:	d008      	beq.n	800fafc <UART_SetConfig+0x260>
 800faea:	e00f      	b.n	800fb0c <UART_SetConfig+0x270>
 800faec:	2300      	movs	r3, #0
 800faee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800faf2:	e052      	b.n	800fb9a <UART_SetConfig+0x2fe>
 800faf4:	2302      	movs	r3, #2
 800faf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fafa:	e04e      	b.n	800fb9a <UART_SetConfig+0x2fe>
 800fafc:	2304      	movs	r3, #4
 800fafe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fb02:	e04a      	b.n	800fb9a <UART_SetConfig+0x2fe>
 800fb04:	2308      	movs	r3, #8
 800fb06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fb0a:	e046      	b.n	800fb9a <UART_SetConfig+0x2fe>
 800fb0c:	2310      	movs	r3, #16
 800fb0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fb12:	e042      	b.n	800fb9a <UART_SetConfig+0x2fe>
 800fb14:	697b      	ldr	r3, [r7, #20]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	4a17      	ldr	r2, [pc, #92]	; (800fb78 <UART_SetConfig+0x2dc>)
 800fb1a:	4293      	cmp	r3, r2
 800fb1c:	d13a      	bne.n	800fb94 <UART_SetConfig+0x2f8>
 800fb1e:	4b18      	ldr	r3, [pc, #96]	; (800fb80 <UART_SetConfig+0x2e4>)
 800fb20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fb24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800fb28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fb2c:	d01a      	beq.n	800fb64 <UART_SetConfig+0x2c8>
 800fb2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fb32:	d81b      	bhi.n	800fb6c <UART_SetConfig+0x2d0>
 800fb34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fb38:	d00c      	beq.n	800fb54 <UART_SetConfig+0x2b8>
 800fb3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fb3e:	d815      	bhi.n	800fb6c <UART_SetConfig+0x2d0>
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d003      	beq.n	800fb4c <UART_SetConfig+0x2b0>
 800fb44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fb48:	d008      	beq.n	800fb5c <UART_SetConfig+0x2c0>
 800fb4a:	e00f      	b.n	800fb6c <UART_SetConfig+0x2d0>
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fb52:	e022      	b.n	800fb9a <UART_SetConfig+0x2fe>
 800fb54:	2302      	movs	r3, #2
 800fb56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fb5a:	e01e      	b.n	800fb9a <UART_SetConfig+0x2fe>
 800fb5c:	2304      	movs	r3, #4
 800fb5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fb62:	e01a      	b.n	800fb9a <UART_SetConfig+0x2fe>
 800fb64:	2308      	movs	r3, #8
 800fb66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fb6a:	e016      	b.n	800fb9a <UART_SetConfig+0x2fe>
 800fb6c:	2310      	movs	r3, #16
 800fb6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fb72:	e012      	b.n	800fb9a <UART_SetConfig+0x2fe>
 800fb74:	cfff69f3 	.word	0xcfff69f3
 800fb78:	40008000 	.word	0x40008000
 800fb7c:	40013800 	.word	0x40013800
 800fb80:	40021000 	.word	0x40021000
 800fb84:	40004400 	.word	0x40004400
 800fb88:	40004800 	.word	0x40004800
 800fb8c:	40004c00 	.word	0x40004c00
 800fb90:	40005000 	.word	0x40005000
 800fb94:	2310      	movs	r3, #16
 800fb96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fb9a:	697b      	ldr	r3, [r7, #20]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	4aae      	ldr	r2, [pc, #696]	; (800fe58 <UART_SetConfig+0x5bc>)
 800fba0:	4293      	cmp	r3, r2
 800fba2:	f040 8097 	bne.w	800fcd4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fba6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fbaa:	2b08      	cmp	r3, #8
 800fbac:	d823      	bhi.n	800fbf6 <UART_SetConfig+0x35a>
 800fbae:	a201      	add	r2, pc, #4	; (adr r2, 800fbb4 <UART_SetConfig+0x318>)
 800fbb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbb4:	0800fbd9 	.word	0x0800fbd9
 800fbb8:	0800fbf7 	.word	0x0800fbf7
 800fbbc:	0800fbe1 	.word	0x0800fbe1
 800fbc0:	0800fbf7 	.word	0x0800fbf7
 800fbc4:	0800fbe7 	.word	0x0800fbe7
 800fbc8:	0800fbf7 	.word	0x0800fbf7
 800fbcc:	0800fbf7 	.word	0x0800fbf7
 800fbd0:	0800fbf7 	.word	0x0800fbf7
 800fbd4:	0800fbef 	.word	0x0800fbef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fbd8:	f7fd fb9e 	bl	800d318 <HAL_RCC_GetPCLK1Freq>
 800fbdc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fbde:	e010      	b.n	800fc02 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fbe0:	4b9e      	ldr	r3, [pc, #632]	; (800fe5c <UART_SetConfig+0x5c0>)
 800fbe2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800fbe4:	e00d      	b.n	800fc02 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fbe6:	f7fd fb29 	bl	800d23c <HAL_RCC_GetSysClockFreq>
 800fbea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fbec:	e009      	b.n	800fc02 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fbee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fbf2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800fbf4:	e005      	b.n	800fc02 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800fbfa:	2301      	movs	r3, #1
 800fbfc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800fc00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fc02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	f000 8130 	beq.w	800fe6a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fc0a:	697b      	ldr	r3, [r7, #20]
 800fc0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc0e:	4a94      	ldr	r2, [pc, #592]	; (800fe60 <UART_SetConfig+0x5c4>)
 800fc10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc14:	461a      	mov	r2, r3
 800fc16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc18:	fbb3 f3f2 	udiv	r3, r3, r2
 800fc1c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fc1e:	697b      	ldr	r3, [r7, #20]
 800fc20:	685a      	ldr	r2, [r3, #4]
 800fc22:	4613      	mov	r3, r2
 800fc24:	005b      	lsls	r3, r3, #1
 800fc26:	4413      	add	r3, r2
 800fc28:	69ba      	ldr	r2, [r7, #24]
 800fc2a:	429a      	cmp	r2, r3
 800fc2c:	d305      	bcc.n	800fc3a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fc2e:	697b      	ldr	r3, [r7, #20]
 800fc30:	685b      	ldr	r3, [r3, #4]
 800fc32:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fc34:	69ba      	ldr	r2, [r7, #24]
 800fc36:	429a      	cmp	r2, r3
 800fc38:	d903      	bls.n	800fc42 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800fc3a:	2301      	movs	r3, #1
 800fc3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800fc40:	e113      	b.n	800fe6a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc44:	2200      	movs	r2, #0
 800fc46:	60bb      	str	r3, [r7, #8]
 800fc48:	60fa      	str	r2, [r7, #12]
 800fc4a:	697b      	ldr	r3, [r7, #20]
 800fc4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc4e:	4a84      	ldr	r2, [pc, #528]	; (800fe60 <UART_SetConfig+0x5c4>)
 800fc50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc54:	b29b      	uxth	r3, r3
 800fc56:	2200      	movs	r2, #0
 800fc58:	603b      	str	r3, [r7, #0]
 800fc5a:	607a      	str	r2, [r7, #4]
 800fc5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc60:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fc64:	f7f4 ffaa 	bl	8004bbc <__aeabi_uldivmod>
 800fc68:	4602      	mov	r2, r0
 800fc6a:	460b      	mov	r3, r1
 800fc6c:	4610      	mov	r0, r2
 800fc6e:	4619      	mov	r1, r3
 800fc70:	f04f 0200 	mov.w	r2, #0
 800fc74:	f04f 0300 	mov.w	r3, #0
 800fc78:	020b      	lsls	r3, r1, #8
 800fc7a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fc7e:	0202      	lsls	r2, r0, #8
 800fc80:	6979      	ldr	r1, [r7, #20]
 800fc82:	6849      	ldr	r1, [r1, #4]
 800fc84:	0849      	lsrs	r1, r1, #1
 800fc86:	2000      	movs	r0, #0
 800fc88:	460c      	mov	r4, r1
 800fc8a:	4605      	mov	r5, r0
 800fc8c:	eb12 0804 	adds.w	r8, r2, r4
 800fc90:	eb43 0905 	adc.w	r9, r3, r5
 800fc94:	697b      	ldr	r3, [r7, #20]
 800fc96:	685b      	ldr	r3, [r3, #4]
 800fc98:	2200      	movs	r2, #0
 800fc9a:	469a      	mov	sl, r3
 800fc9c:	4693      	mov	fp, r2
 800fc9e:	4652      	mov	r2, sl
 800fca0:	465b      	mov	r3, fp
 800fca2:	4640      	mov	r0, r8
 800fca4:	4649      	mov	r1, r9
 800fca6:	f7f4 ff89 	bl	8004bbc <__aeabi_uldivmod>
 800fcaa:	4602      	mov	r2, r0
 800fcac:	460b      	mov	r3, r1
 800fcae:	4613      	mov	r3, r2
 800fcb0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fcb2:	6a3b      	ldr	r3, [r7, #32]
 800fcb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fcb8:	d308      	bcc.n	800fccc <UART_SetConfig+0x430>
 800fcba:	6a3b      	ldr	r3, [r7, #32]
 800fcbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fcc0:	d204      	bcs.n	800fccc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800fcc2:	697b      	ldr	r3, [r7, #20]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	6a3a      	ldr	r2, [r7, #32]
 800fcc8:	60da      	str	r2, [r3, #12]
 800fcca:	e0ce      	b.n	800fe6a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800fccc:	2301      	movs	r3, #1
 800fcce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800fcd2:	e0ca      	b.n	800fe6a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fcd4:	697b      	ldr	r3, [r7, #20]
 800fcd6:	69db      	ldr	r3, [r3, #28]
 800fcd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fcdc:	d166      	bne.n	800fdac <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800fcde:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fce2:	2b08      	cmp	r3, #8
 800fce4:	d827      	bhi.n	800fd36 <UART_SetConfig+0x49a>
 800fce6:	a201      	add	r2, pc, #4	; (adr r2, 800fcec <UART_SetConfig+0x450>)
 800fce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcec:	0800fd11 	.word	0x0800fd11
 800fcf0:	0800fd19 	.word	0x0800fd19
 800fcf4:	0800fd21 	.word	0x0800fd21
 800fcf8:	0800fd37 	.word	0x0800fd37
 800fcfc:	0800fd27 	.word	0x0800fd27
 800fd00:	0800fd37 	.word	0x0800fd37
 800fd04:	0800fd37 	.word	0x0800fd37
 800fd08:	0800fd37 	.word	0x0800fd37
 800fd0c:	0800fd2f 	.word	0x0800fd2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fd10:	f7fd fb02 	bl	800d318 <HAL_RCC_GetPCLK1Freq>
 800fd14:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fd16:	e014      	b.n	800fd42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fd18:	f7fd fb14 	bl	800d344 <HAL_RCC_GetPCLK2Freq>
 800fd1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fd1e:	e010      	b.n	800fd42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fd20:	4b4e      	ldr	r3, [pc, #312]	; (800fe5c <UART_SetConfig+0x5c0>)
 800fd22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800fd24:	e00d      	b.n	800fd42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fd26:	f7fd fa89 	bl	800d23c <HAL_RCC_GetSysClockFreq>
 800fd2a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fd2c:	e009      	b.n	800fd42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fd2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fd32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800fd34:	e005      	b.n	800fd42 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800fd36:	2300      	movs	r3, #0
 800fd38:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800fd3a:	2301      	movs	r3, #1
 800fd3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800fd40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fd42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	f000 8090 	beq.w	800fe6a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fd4a:	697b      	ldr	r3, [r7, #20]
 800fd4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd4e:	4a44      	ldr	r2, [pc, #272]	; (800fe60 <UART_SetConfig+0x5c4>)
 800fd50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fd54:	461a      	mov	r2, r3
 800fd56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd58:	fbb3 f3f2 	udiv	r3, r3, r2
 800fd5c:	005a      	lsls	r2, r3, #1
 800fd5e:	697b      	ldr	r3, [r7, #20]
 800fd60:	685b      	ldr	r3, [r3, #4]
 800fd62:	085b      	lsrs	r3, r3, #1
 800fd64:	441a      	add	r2, r3
 800fd66:	697b      	ldr	r3, [r7, #20]
 800fd68:	685b      	ldr	r3, [r3, #4]
 800fd6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd6e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fd70:	6a3b      	ldr	r3, [r7, #32]
 800fd72:	2b0f      	cmp	r3, #15
 800fd74:	d916      	bls.n	800fda4 <UART_SetConfig+0x508>
 800fd76:	6a3b      	ldr	r3, [r7, #32]
 800fd78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fd7c:	d212      	bcs.n	800fda4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fd7e:	6a3b      	ldr	r3, [r7, #32]
 800fd80:	b29b      	uxth	r3, r3
 800fd82:	f023 030f 	bic.w	r3, r3, #15
 800fd86:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fd88:	6a3b      	ldr	r3, [r7, #32]
 800fd8a:	085b      	lsrs	r3, r3, #1
 800fd8c:	b29b      	uxth	r3, r3
 800fd8e:	f003 0307 	and.w	r3, r3, #7
 800fd92:	b29a      	uxth	r2, r3
 800fd94:	8bfb      	ldrh	r3, [r7, #30]
 800fd96:	4313      	orrs	r3, r2
 800fd98:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800fd9a:	697b      	ldr	r3, [r7, #20]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	8bfa      	ldrh	r2, [r7, #30]
 800fda0:	60da      	str	r2, [r3, #12]
 800fda2:	e062      	b.n	800fe6a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800fda4:	2301      	movs	r3, #1
 800fda6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800fdaa:	e05e      	b.n	800fe6a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800fdac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fdb0:	2b08      	cmp	r3, #8
 800fdb2:	d828      	bhi.n	800fe06 <UART_SetConfig+0x56a>
 800fdb4:	a201      	add	r2, pc, #4	; (adr r2, 800fdbc <UART_SetConfig+0x520>)
 800fdb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdba:	bf00      	nop
 800fdbc:	0800fde1 	.word	0x0800fde1
 800fdc0:	0800fde9 	.word	0x0800fde9
 800fdc4:	0800fdf1 	.word	0x0800fdf1
 800fdc8:	0800fe07 	.word	0x0800fe07
 800fdcc:	0800fdf7 	.word	0x0800fdf7
 800fdd0:	0800fe07 	.word	0x0800fe07
 800fdd4:	0800fe07 	.word	0x0800fe07
 800fdd8:	0800fe07 	.word	0x0800fe07
 800fddc:	0800fdff 	.word	0x0800fdff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fde0:	f7fd fa9a 	bl	800d318 <HAL_RCC_GetPCLK1Freq>
 800fde4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fde6:	e014      	b.n	800fe12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fde8:	f7fd faac 	bl	800d344 <HAL_RCC_GetPCLK2Freq>
 800fdec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fdee:	e010      	b.n	800fe12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fdf0:	4b1a      	ldr	r3, [pc, #104]	; (800fe5c <UART_SetConfig+0x5c0>)
 800fdf2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800fdf4:	e00d      	b.n	800fe12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fdf6:	f7fd fa21 	bl	800d23c <HAL_RCC_GetSysClockFreq>
 800fdfa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fdfc:	e009      	b.n	800fe12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fdfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fe02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800fe04:	e005      	b.n	800fe12 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800fe06:	2300      	movs	r3, #0
 800fe08:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800fe0a:	2301      	movs	r3, #1
 800fe0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800fe10:	bf00      	nop
    }

    if (pclk != 0U)
 800fe12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d028      	beq.n	800fe6a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fe18:	697b      	ldr	r3, [r7, #20]
 800fe1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe1c:	4a10      	ldr	r2, [pc, #64]	; (800fe60 <UART_SetConfig+0x5c4>)
 800fe1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fe22:	461a      	mov	r2, r3
 800fe24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe26:	fbb3 f2f2 	udiv	r2, r3, r2
 800fe2a:	697b      	ldr	r3, [r7, #20]
 800fe2c:	685b      	ldr	r3, [r3, #4]
 800fe2e:	085b      	lsrs	r3, r3, #1
 800fe30:	441a      	add	r2, r3
 800fe32:	697b      	ldr	r3, [r7, #20]
 800fe34:	685b      	ldr	r3, [r3, #4]
 800fe36:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe3a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fe3c:	6a3b      	ldr	r3, [r7, #32]
 800fe3e:	2b0f      	cmp	r3, #15
 800fe40:	d910      	bls.n	800fe64 <UART_SetConfig+0x5c8>
 800fe42:	6a3b      	ldr	r3, [r7, #32]
 800fe44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fe48:	d20c      	bcs.n	800fe64 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fe4a:	6a3b      	ldr	r3, [r7, #32]
 800fe4c:	b29a      	uxth	r2, r3
 800fe4e:	697b      	ldr	r3, [r7, #20]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	60da      	str	r2, [r3, #12]
 800fe54:	e009      	b.n	800fe6a <UART_SetConfig+0x5ce>
 800fe56:	bf00      	nop
 800fe58:	40008000 	.word	0x40008000
 800fe5c:	00f42400 	.word	0x00f42400
 800fe60:	08018cc8 	.word	0x08018cc8
      }
      else
      {
        ret = HAL_ERROR;
 800fe64:	2301      	movs	r3, #1
 800fe66:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fe6a:	697b      	ldr	r3, [r7, #20]
 800fe6c:	2201      	movs	r2, #1
 800fe6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800fe72:	697b      	ldr	r3, [r7, #20]
 800fe74:	2201      	movs	r2, #1
 800fe76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fe7a:	697b      	ldr	r3, [r7, #20]
 800fe7c:	2200      	movs	r2, #0
 800fe7e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800fe80:	697b      	ldr	r3, [r7, #20]
 800fe82:	2200      	movs	r2, #0
 800fe84:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800fe86:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	3730      	adds	r7, #48	; 0x30
 800fe8e:	46bd      	mov	sp, r7
 800fe90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800fe94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fe94:	b480      	push	{r7}
 800fe96:	b083      	sub	sp, #12
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fea0:	f003 0301 	and.w	r3, r3, #1
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d00a      	beq.n	800febe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	685b      	ldr	r3, [r3, #4]
 800feae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	430a      	orrs	r2, r1
 800febc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fec2:	f003 0302 	and.w	r3, r3, #2
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d00a      	beq.n	800fee0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	685b      	ldr	r3, [r3, #4]
 800fed0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	430a      	orrs	r2, r1
 800fede:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fee4:	f003 0304 	and.w	r3, r3, #4
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d00a      	beq.n	800ff02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	685b      	ldr	r3, [r3, #4]
 800fef2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	430a      	orrs	r2, r1
 800ff00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff06:	f003 0308 	and.w	r3, r3, #8
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d00a      	beq.n	800ff24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	685b      	ldr	r3, [r3, #4]
 800ff14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	430a      	orrs	r2, r1
 800ff22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff28:	f003 0310 	and.w	r3, r3, #16
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d00a      	beq.n	800ff46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	689b      	ldr	r3, [r3, #8]
 800ff36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	430a      	orrs	r2, r1
 800ff44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff4a:	f003 0320 	and.w	r3, r3, #32
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d00a      	beq.n	800ff68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	689b      	ldr	r3, [r3, #8]
 800ff58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	430a      	orrs	r2, r1
 800ff66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d01a      	beq.n	800ffaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	685b      	ldr	r3, [r3, #4]
 800ff7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	430a      	orrs	r2, r1
 800ff88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ff92:	d10a      	bne.n	800ffaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	685b      	ldr	r3, [r3, #4]
 800ff9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	430a      	orrs	r2, r1
 800ffa8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d00a      	beq.n	800ffcc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	685b      	ldr	r3, [r3, #4]
 800ffbc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	430a      	orrs	r2, r1
 800ffca:	605a      	str	r2, [r3, #4]
  }
}
 800ffcc:	bf00      	nop
 800ffce:	370c      	adds	r7, #12
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd6:	4770      	bx	lr

0800ffd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b086      	sub	sp, #24
 800ffdc:	af02      	add	r7, sp, #8
 800ffde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ffe8:	f7f8 f8e0 	bl	80081ac <HAL_GetTick>
 800ffec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	f003 0308 	and.w	r3, r3, #8
 800fff8:	2b08      	cmp	r3, #8
 800fffa:	d10e      	bne.n	801001a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fffc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010000:	9300      	str	r3, [sp, #0]
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	2200      	movs	r2, #0
 8010006:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801000a:	6878      	ldr	r0, [r7, #4]
 801000c:	f000 f82f 	bl	801006e <UART_WaitOnFlagUntilTimeout>
 8010010:	4603      	mov	r3, r0
 8010012:	2b00      	cmp	r3, #0
 8010014:	d001      	beq.n	801001a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010016:	2303      	movs	r3, #3
 8010018:	e025      	b.n	8010066 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	f003 0304 	and.w	r3, r3, #4
 8010024:	2b04      	cmp	r3, #4
 8010026:	d10e      	bne.n	8010046 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010028:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801002c:	9300      	str	r3, [sp, #0]
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	2200      	movs	r2, #0
 8010032:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010036:	6878      	ldr	r0, [r7, #4]
 8010038:	f000 f819 	bl	801006e <UART_WaitOnFlagUntilTimeout>
 801003c:	4603      	mov	r3, r0
 801003e:	2b00      	cmp	r3, #0
 8010040:	d001      	beq.n	8010046 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010042:	2303      	movs	r3, #3
 8010044:	e00f      	b.n	8010066 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	2220      	movs	r2, #32
 801004a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	2220      	movs	r2, #32
 8010052:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	2200      	movs	r2, #0
 801005a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	2200      	movs	r2, #0
 8010060:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010064:	2300      	movs	r3, #0
}
 8010066:	4618      	mov	r0, r3
 8010068:	3710      	adds	r7, #16
 801006a:	46bd      	mov	sp, r7
 801006c:	bd80      	pop	{r7, pc}

0801006e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801006e:	b580      	push	{r7, lr}
 8010070:	b09c      	sub	sp, #112	; 0x70
 8010072:	af00      	add	r7, sp, #0
 8010074:	60f8      	str	r0, [r7, #12]
 8010076:	60b9      	str	r1, [r7, #8]
 8010078:	603b      	str	r3, [r7, #0]
 801007a:	4613      	mov	r3, r2
 801007c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801007e:	e0a9      	b.n	80101d4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010080:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010086:	f000 80a5 	beq.w	80101d4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801008a:	f7f8 f88f 	bl	80081ac <HAL_GetTick>
 801008e:	4602      	mov	r2, r0
 8010090:	683b      	ldr	r3, [r7, #0]
 8010092:	1ad3      	subs	r3, r2, r3
 8010094:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010096:	429a      	cmp	r2, r3
 8010098:	d302      	bcc.n	80100a0 <UART_WaitOnFlagUntilTimeout+0x32>
 801009a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801009c:	2b00      	cmp	r3, #0
 801009e:	d140      	bne.n	8010122 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100a8:	e853 3f00 	ldrex	r3, [r3]
 80100ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80100ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80100b4:	667b      	str	r3, [r7, #100]	; 0x64
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	461a      	mov	r2, r3
 80100bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80100be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80100c0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80100c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80100c6:	e841 2300 	strex	r3, r2, [r1]
 80100ca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80100cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d1e6      	bne.n	80100a0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	3308      	adds	r3, #8
 80100d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100dc:	e853 3f00 	ldrex	r3, [r3]
 80100e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80100e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100e4:	f023 0301 	bic.w	r3, r3, #1
 80100e8:	663b      	str	r3, [r7, #96]	; 0x60
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	3308      	adds	r3, #8
 80100f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80100f2:	64ba      	str	r2, [r7, #72]	; 0x48
 80100f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80100f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80100fa:	e841 2300 	strex	r3, r2, [r1]
 80100fe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010100:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010102:	2b00      	cmp	r3, #0
 8010104:	d1e5      	bne.n	80100d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	2220      	movs	r2, #32
 801010a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	2220      	movs	r2, #32
 8010112:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	2200      	movs	r2, #0
 801011a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 801011e:	2303      	movs	r3, #3
 8010120:	e069      	b.n	80101f6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	f003 0304 	and.w	r3, r3, #4
 801012c:	2b00      	cmp	r3, #0
 801012e:	d051      	beq.n	80101d4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	69db      	ldr	r3, [r3, #28]
 8010136:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801013a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801013e:	d149      	bne.n	80101d4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010148:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010152:	e853 3f00 	ldrex	r3, [r3]
 8010156:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801015a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801015e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	461a      	mov	r2, r3
 8010166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010168:	637b      	str	r3, [r7, #52]	; 0x34
 801016a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801016c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801016e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010170:	e841 2300 	strex	r3, r2, [r1]
 8010174:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8010176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010178:	2b00      	cmp	r3, #0
 801017a:	d1e6      	bne.n	801014a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	3308      	adds	r3, #8
 8010182:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010184:	697b      	ldr	r3, [r7, #20]
 8010186:	e853 3f00 	ldrex	r3, [r3]
 801018a:	613b      	str	r3, [r7, #16]
   return(result);
 801018c:	693b      	ldr	r3, [r7, #16]
 801018e:	f023 0301 	bic.w	r3, r3, #1
 8010192:	66bb      	str	r3, [r7, #104]	; 0x68
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	3308      	adds	r3, #8
 801019a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801019c:	623a      	str	r2, [r7, #32]
 801019e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101a0:	69f9      	ldr	r1, [r7, #28]
 80101a2:	6a3a      	ldr	r2, [r7, #32]
 80101a4:	e841 2300 	strex	r3, r2, [r1]
 80101a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80101aa:	69bb      	ldr	r3, [r7, #24]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d1e5      	bne.n	801017c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	2220      	movs	r2, #32
 80101b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	2220      	movs	r2, #32
 80101bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	2220      	movs	r2, #32
 80101c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	2200      	movs	r2, #0
 80101cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80101d0:	2303      	movs	r3, #3
 80101d2:	e010      	b.n	80101f6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	69da      	ldr	r2, [r3, #28]
 80101da:	68bb      	ldr	r3, [r7, #8]
 80101dc:	4013      	ands	r3, r2
 80101de:	68ba      	ldr	r2, [r7, #8]
 80101e0:	429a      	cmp	r2, r3
 80101e2:	bf0c      	ite	eq
 80101e4:	2301      	moveq	r3, #1
 80101e6:	2300      	movne	r3, #0
 80101e8:	b2db      	uxtb	r3, r3
 80101ea:	461a      	mov	r2, r3
 80101ec:	79fb      	ldrb	r3, [r7, #7]
 80101ee:	429a      	cmp	r2, r3
 80101f0:	f43f af46 	beq.w	8010080 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80101f4:	2300      	movs	r3, #0
}
 80101f6:	4618      	mov	r0, r3
 80101f8:	3770      	adds	r7, #112	; 0x70
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd80      	pop	{r7, pc}
	...

08010200 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010200:	b480      	push	{r7}
 8010202:	b0a3      	sub	sp, #140	; 0x8c
 8010204:	af00      	add	r7, sp, #0
 8010206:	60f8      	str	r0, [r7, #12]
 8010208:	60b9      	str	r1, [r7, #8]
 801020a:	4613      	mov	r3, r2
 801020c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	68ba      	ldr	r2, [r7, #8]
 8010212:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	88fa      	ldrh	r2, [r7, #6]
 8010218:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	88fa      	ldrh	r2, [r7, #6]
 8010220:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	2200      	movs	r2, #0
 8010228:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	689b      	ldr	r3, [r3, #8]
 801022e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010232:	d10e      	bne.n	8010252 <UART_Start_Receive_IT+0x52>
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	691b      	ldr	r3, [r3, #16]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d105      	bne.n	8010248 <UART_Start_Receive_IT+0x48>
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8010242:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010246:	e02d      	b.n	80102a4 <UART_Start_Receive_IT+0xa4>
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	22ff      	movs	r2, #255	; 0xff
 801024c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010250:	e028      	b.n	80102a4 <UART_Start_Receive_IT+0xa4>
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	689b      	ldr	r3, [r3, #8]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d10d      	bne.n	8010276 <UART_Start_Receive_IT+0x76>
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	691b      	ldr	r3, [r3, #16]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d104      	bne.n	801026c <UART_Start_Receive_IT+0x6c>
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	22ff      	movs	r2, #255	; 0xff
 8010266:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801026a:	e01b      	b.n	80102a4 <UART_Start_Receive_IT+0xa4>
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	227f      	movs	r2, #127	; 0x7f
 8010270:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010274:	e016      	b.n	80102a4 <UART_Start_Receive_IT+0xa4>
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	689b      	ldr	r3, [r3, #8]
 801027a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801027e:	d10d      	bne.n	801029c <UART_Start_Receive_IT+0x9c>
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	691b      	ldr	r3, [r3, #16]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d104      	bne.n	8010292 <UART_Start_Receive_IT+0x92>
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	227f      	movs	r2, #127	; 0x7f
 801028c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010290:	e008      	b.n	80102a4 <UART_Start_Receive_IT+0xa4>
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	223f      	movs	r2, #63	; 0x3f
 8010296:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801029a:	e003      	b.n	80102a4 <UART_Start_Receive_IT+0xa4>
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	2200      	movs	r2, #0
 80102a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	2200      	movs	r2, #0
 80102a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	2222      	movs	r2, #34	; 0x22
 80102b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	3308      	adds	r3, #8
 80102ba:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80102be:	e853 3f00 	ldrex	r3, [r3]
 80102c2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80102c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80102c6:	f043 0301 	orr.w	r3, r3, #1
 80102ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	3308      	adds	r3, #8
 80102d4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80102d8:	673a      	str	r2, [r7, #112]	; 0x70
 80102da:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102dc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80102de:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80102e0:	e841 2300 	strex	r3, r2, [r1]
 80102e4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80102e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d1e3      	bne.n	80102b4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80102f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80102f4:	d153      	bne.n	801039e <UART_Start_Receive_IT+0x19e>
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80102fc:	88fa      	ldrh	r2, [r7, #6]
 80102fe:	429a      	cmp	r2, r3
 8010300:	d34d      	bcc.n	801039e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	689b      	ldr	r3, [r3, #8]
 8010306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801030a:	d107      	bne.n	801031c <UART_Start_Receive_IT+0x11c>
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	691b      	ldr	r3, [r3, #16]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d103      	bne.n	801031c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	4a4b      	ldr	r2, [pc, #300]	; (8010444 <UART_Start_Receive_IT+0x244>)
 8010318:	671a      	str	r2, [r3, #112]	; 0x70
 801031a:	e002      	b.n	8010322 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	4a4a      	ldr	r2, [pc, #296]	; (8010448 <UART_Start_Receive_IT+0x248>)
 8010320:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	2200      	movs	r2, #0
 8010326:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	691b      	ldr	r3, [r3, #16]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d01a      	beq.n	8010368 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801033a:	e853 3f00 	ldrex	r3, [r3]
 801033e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010346:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	461a      	mov	r2, r3
 8010350:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010354:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010356:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010358:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801035a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801035c:	e841 2300 	strex	r3, r2, [r1]
 8010360:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8010362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010364:	2b00      	cmp	r3, #0
 8010366:	d1e4      	bne.n	8010332 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	3308      	adds	r3, #8
 801036e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010372:	e853 3f00 	ldrex	r3, [r3]
 8010376:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801037a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801037e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	3308      	adds	r3, #8
 8010386:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010388:	64ba      	str	r2, [r7, #72]	; 0x48
 801038a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801038c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801038e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010390:	e841 2300 	strex	r3, r2, [r1]
 8010394:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010398:	2b00      	cmp	r3, #0
 801039a:	d1e5      	bne.n	8010368 <UART_Start_Receive_IT+0x168>
 801039c:	e04a      	b.n	8010434 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	689b      	ldr	r3, [r3, #8]
 80103a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80103a6:	d107      	bne.n	80103b8 <UART_Start_Receive_IT+0x1b8>
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	691b      	ldr	r3, [r3, #16]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d103      	bne.n	80103b8 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	4a26      	ldr	r2, [pc, #152]	; (801044c <UART_Start_Receive_IT+0x24c>)
 80103b4:	671a      	str	r2, [r3, #112]	; 0x70
 80103b6:	e002      	b.n	80103be <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	4a25      	ldr	r2, [pc, #148]	; (8010450 <UART_Start_Receive_IT+0x250>)
 80103bc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	2200      	movs	r2, #0
 80103c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	691b      	ldr	r3, [r3, #16]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d019      	beq.n	8010402 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103d6:	e853 3f00 	ldrex	r3, [r3]
 80103da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80103dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103de:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80103e2:	677b      	str	r3, [r7, #116]	; 0x74
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	461a      	mov	r2, r3
 80103ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80103ec:	637b      	str	r3, [r7, #52]	; 0x34
 80103ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80103f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80103f4:	e841 2300 	strex	r3, r2, [r1]
 80103f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80103fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d1e6      	bne.n	80103ce <UART_Start_Receive_IT+0x1ce>
 8010400:	e018      	b.n	8010434 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010408:	697b      	ldr	r3, [r7, #20]
 801040a:	e853 3f00 	ldrex	r3, [r3]
 801040e:	613b      	str	r3, [r7, #16]
   return(result);
 8010410:	693b      	ldr	r3, [r7, #16]
 8010412:	f043 0320 	orr.w	r3, r3, #32
 8010416:	67bb      	str	r3, [r7, #120]	; 0x78
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	461a      	mov	r2, r3
 801041e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010420:	623b      	str	r3, [r7, #32]
 8010422:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010424:	69f9      	ldr	r1, [r7, #28]
 8010426:	6a3a      	ldr	r2, [r7, #32]
 8010428:	e841 2300 	strex	r3, r2, [r1]
 801042c:	61bb      	str	r3, [r7, #24]
   return(result);
 801042e:	69bb      	ldr	r3, [r7, #24]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d1e6      	bne.n	8010402 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8010434:	2300      	movs	r3, #0
}
 8010436:	4618      	mov	r0, r3
 8010438:	378c      	adds	r7, #140	; 0x8c
 801043a:	46bd      	mov	sp, r7
 801043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010440:	4770      	bx	lr
 8010442:	bf00      	nop
 8010444:	08010b5d 	.word	0x08010b5d
 8010448:	08010865 	.word	0x08010865
 801044c:	08010703 	.word	0x08010703
 8010450:	080105a3 	.word	0x080105a3

08010454 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010454:	b480      	push	{r7}
 8010456:	b095      	sub	sp, #84	; 0x54
 8010458:	af00      	add	r7, sp, #0
 801045a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010464:	e853 3f00 	ldrex	r3, [r3]
 8010468:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801046a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801046c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010470:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	461a      	mov	r2, r3
 8010478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801047a:	643b      	str	r3, [r7, #64]	; 0x40
 801047c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801047e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010480:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010482:	e841 2300 	strex	r3, r2, [r1]
 8010486:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801048a:	2b00      	cmp	r3, #0
 801048c:	d1e6      	bne.n	801045c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	3308      	adds	r3, #8
 8010494:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010496:	6a3b      	ldr	r3, [r7, #32]
 8010498:	e853 3f00 	ldrex	r3, [r3]
 801049c:	61fb      	str	r3, [r7, #28]
   return(result);
 801049e:	69fb      	ldr	r3, [r7, #28]
 80104a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80104a4:	f023 0301 	bic.w	r3, r3, #1
 80104a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	3308      	adds	r3, #8
 80104b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80104b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80104b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80104b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80104ba:	e841 2300 	strex	r3, r2, [r1]
 80104be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80104c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d1e3      	bne.n	801048e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104ca:	2b01      	cmp	r3, #1
 80104cc:	d118      	bne.n	8010500 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	e853 3f00 	ldrex	r3, [r3]
 80104da:	60bb      	str	r3, [r7, #8]
   return(result);
 80104dc:	68bb      	ldr	r3, [r7, #8]
 80104de:	f023 0310 	bic.w	r3, r3, #16
 80104e2:	647b      	str	r3, [r7, #68]	; 0x44
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	461a      	mov	r2, r3
 80104ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80104ec:	61bb      	str	r3, [r7, #24]
 80104ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104f0:	6979      	ldr	r1, [r7, #20]
 80104f2:	69ba      	ldr	r2, [r7, #24]
 80104f4:	e841 2300 	strex	r3, r2, [r1]
 80104f8:	613b      	str	r3, [r7, #16]
   return(result);
 80104fa:	693b      	ldr	r3, [r7, #16]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d1e6      	bne.n	80104ce <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	2220      	movs	r2, #32
 8010504:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	2200      	movs	r2, #0
 801050c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	2200      	movs	r2, #0
 8010512:	671a      	str	r2, [r3, #112]	; 0x70
}
 8010514:	bf00      	nop
 8010516:	3754      	adds	r7, #84	; 0x54
 8010518:	46bd      	mov	sp, r7
 801051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801051e:	4770      	bx	lr

08010520 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010520:	b580      	push	{r7, lr}
 8010522:	b084      	sub	sp, #16
 8010524:	af00      	add	r7, sp, #0
 8010526:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801052c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	2200      	movs	r2, #0
 8010532:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	2200      	movs	r2, #0
 801053a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801053e:	68f8      	ldr	r0, [r7, #12]
 8010540:	f7ff f996 	bl	800f870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010544:	bf00      	nop
 8010546:	3710      	adds	r7, #16
 8010548:	46bd      	mov	sp, r7
 801054a:	bd80      	pop	{r7, pc}

0801054c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801054c:	b580      	push	{r7, lr}
 801054e:	b088      	sub	sp, #32
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	e853 3f00 	ldrex	r3, [r3]
 8010560:	60bb      	str	r3, [r7, #8]
   return(result);
 8010562:	68bb      	ldr	r3, [r7, #8]
 8010564:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010568:	61fb      	str	r3, [r7, #28]
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	461a      	mov	r2, r3
 8010570:	69fb      	ldr	r3, [r7, #28]
 8010572:	61bb      	str	r3, [r7, #24]
 8010574:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010576:	6979      	ldr	r1, [r7, #20]
 8010578:	69ba      	ldr	r2, [r7, #24]
 801057a:	e841 2300 	strex	r3, r2, [r1]
 801057e:	613b      	str	r3, [r7, #16]
   return(result);
 8010580:	693b      	ldr	r3, [r7, #16]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d1e6      	bne.n	8010554 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	2220      	movs	r2, #32
 801058a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	2200      	movs	r2, #0
 8010592:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010594:	6878      	ldr	r0, [r7, #4]
 8010596:	f7ff f957 	bl	800f848 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801059a:	bf00      	nop
 801059c:	3720      	adds	r7, #32
 801059e:	46bd      	mov	sp, r7
 80105a0:	bd80      	pop	{r7, pc}

080105a2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80105a2:	b580      	push	{r7, lr}
 80105a4:	b096      	sub	sp, #88	; 0x58
 80105a6:	af00      	add	r7, sp, #0
 80105a8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80105b0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80105ba:	2b22      	cmp	r3, #34	; 0x22
 80105bc:	f040 8095 	bne.w	80106ea <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105c6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80105ca:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80105ce:	b2d9      	uxtb	r1, r3
 80105d0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80105d4:	b2da      	uxtb	r2, r3
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80105da:	400a      	ands	r2, r1
 80105dc:	b2d2      	uxtb	r2, r2
 80105de:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80105e4:	1c5a      	adds	r2, r3, #1
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80105f0:	b29b      	uxth	r3, r3
 80105f2:	3b01      	subs	r3, #1
 80105f4:	b29a      	uxth	r2, r3
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010602:	b29b      	uxth	r3, r3
 8010604:	2b00      	cmp	r3, #0
 8010606:	d178      	bne.n	80106fa <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801060e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010610:	e853 3f00 	ldrex	r3, [r3]
 8010614:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010618:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801061c:	653b      	str	r3, [r7, #80]	; 0x50
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	461a      	mov	r2, r3
 8010624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010626:	647b      	str	r3, [r7, #68]	; 0x44
 8010628:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801062a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801062c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801062e:	e841 2300 	strex	r3, r2, [r1]
 8010632:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010636:	2b00      	cmp	r3, #0
 8010638:	d1e6      	bne.n	8010608 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	3308      	adds	r3, #8
 8010640:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010644:	e853 3f00 	ldrex	r3, [r3]
 8010648:	623b      	str	r3, [r7, #32]
   return(result);
 801064a:	6a3b      	ldr	r3, [r7, #32]
 801064c:	f023 0301 	bic.w	r3, r3, #1
 8010650:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	3308      	adds	r3, #8
 8010658:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801065a:	633a      	str	r2, [r7, #48]	; 0x30
 801065c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801065e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010662:	e841 2300 	strex	r3, r2, [r1]
 8010666:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801066a:	2b00      	cmp	r3, #0
 801066c:	d1e5      	bne.n	801063a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	2220      	movs	r2, #32
 8010672:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	2200      	movs	r2, #0
 801067a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010680:	2b01      	cmp	r3, #1
 8010682:	d12e      	bne.n	80106e2 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	2200      	movs	r2, #0
 8010688:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010690:	693b      	ldr	r3, [r7, #16]
 8010692:	e853 3f00 	ldrex	r3, [r3]
 8010696:	60fb      	str	r3, [r7, #12]
   return(result);
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	f023 0310 	bic.w	r3, r3, #16
 801069e:	64bb      	str	r3, [r7, #72]	; 0x48
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	461a      	mov	r2, r3
 80106a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80106a8:	61fb      	str	r3, [r7, #28]
 80106aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106ac:	69b9      	ldr	r1, [r7, #24]
 80106ae:	69fa      	ldr	r2, [r7, #28]
 80106b0:	e841 2300 	strex	r3, r2, [r1]
 80106b4:	617b      	str	r3, [r7, #20]
   return(result);
 80106b6:	697b      	ldr	r3, [r7, #20]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d1e6      	bne.n	801068a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	69db      	ldr	r3, [r3, #28]
 80106c2:	f003 0310 	and.w	r3, r3, #16
 80106c6:	2b10      	cmp	r3, #16
 80106c8:	d103      	bne.n	80106d2 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	2210      	movs	r2, #16
 80106d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80106d8:	4619      	mov	r1, r3
 80106da:	6878      	ldr	r0, [r7, #4]
 80106dc:	f7ff f8d2 	bl	800f884 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80106e0:	e00b      	b.n	80106fa <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80106e2:	6878      	ldr	r0, [r7, #4]
 80106e4:	f7ff f8ba 	bl	800f85c <HAL_UART_RxCpltCallback>
}
 80106e8:	e007      	b.n	80106fa <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	699a      	ldr	r2, [r3, #24]
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	f042 0208 	orr.w	r2, r2, #8
 80106f8:	619a      	str	r2, [r3, #24]
}
 80106fa:	bf00      	nop
 80106fc:	3758      	adds	r7, #88	; 0x58
 80106fe:	46bd      	mov	sp, r7
 8010700:	bd80      	pop	{r7, pc}

08010702 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8010702:	b580      	push	{r7, lr}
 8010704:	b096      	sub	sp, #88	; 0x58
 8010706:	af00      	add	r7, sp, #0
 8010708:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010710:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801071a:	2b22      	cmp	r3, #34	; 0x22
 801071c:	f040 8095 	bne.w	801084a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010726:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801072e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8010730:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8010734:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8010738:	4013      	ands	r3, r2
 801073a:	b29a      	uxth	r2, r3
 801073c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801073e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010744:	1c9a      	adds	r2, r3, #2
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010750:	b29b      	uxth	r3, r3
 8010752:	3b01      	subs	r3, #1
 8010754:	b29a      	uxth	r2, r3
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010762:	b29b      	uxth	r3, r3
 8010764:	2b00      	cmp	r3, #0
 8010766:	d178      	bne.n	801085a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801076e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010770:	e853 3f00 	ldrex	r3, [r3]
 8010774:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010778:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801077c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	461a      	mov	r2, r3
 8010784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010786:	643b      	str	r3, [r7, #64]	; 0x40
 8010788:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801078a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801078c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801078e:	e841 2300 	strex	r3, r2, [r1]
 8010792:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010796:	2b00      	cmp	r3, #0
 8010798:	d1e6      	bne.n	8010768 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	3308      	adds	r3, #8
 80107a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107a2:	6a3b      	ldr	r3, [r7, #32]
 80107a4:	e853 3f00 	ldrex	r3, [r3]
 80107a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80107aa:	69fb      	ldr	r3, [r7, #28]
 80107ac:	f023 0301 	bic.w	r3, r3, #1
 80107b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	3308      	adds	r3, #8
 80107b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80107ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80107bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80107c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107c2:	e841 2300 	strex	r3, r2, [r1]
 80107c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80107c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d1e5      	bne.n	801079a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	2220      	movs	r2, #32
 80107d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	2200      	movs	r2, #0
 80107da:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107e0:	2b01      	cmp	r3, #1
 80107e2:	d12e      	bne.n	8010842 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	2200      	movs	r2, #0
 80107e8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	e853 3f00 	ldrex	r3, [r3]
 80107f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80107f8:	68bb      	ldr	r3, [r7, #8]
 80107fa:	f023 0310 	bic.w	r3, r3, #16
 80107fe:	647b      	str	r3, [r7, #68]	; 0x44
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	461a      	mov	r2, r3
 8010806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010808:	61bb      	str	r3, [r7, #24]
 801080a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801080c:	6979      	ldr	r1, [r7, #20]
 801080e:	69ba      	ldr	r2, [r7, #24]
 8010810:	e841 2300 	strex	r3, r2, [r1]
 8010814:	613b      	str	r3, [r7, #16]
   return(result);
 8010816:	693b      	ldr	r3, [r7, #16]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d1e6      	bne.n	80107ea <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	69db      	ldr	r3, [r3, #28]
 8010822:	f003 0310 	and.w	r3, r3, #16
 8010826:	2b10      	cmp	r3, #16
 8010828:	d103      	bne.n	8010832 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	2210      	movs	r2, #16
 8010830:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010838:	4619      	mov	r1, r3
 801083a:	6878      	ldr	r0, [r7, #4]
 801083c:	f7ff f822 	bl	800f884 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010840:	e00b      	b.n	801085a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8010842:	6878      	ldr	r0, [r7, #4]
 8010844:	f7ff f80a 	bl	800f85c <HAL_UART_RxCpltCallback>
}
 8010848:	e007      	b.n	801085a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	699a      	ldr	r2, [r3, #24]
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	f042 0208 	orr.w	r2, r2, #8
 8010858:	619a      	str	r2, [r3, #24]
}
 801085a:	bf00      	nop
 801085c:	3758      	adds	r7, #88	; 0x58
 801085e:	46bd      	mov	sp, r7
 8010860:	bd80      	pop	{r7, pc}
	...

08010864 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010864:	b580      	push	{r7, lr}
 8010866:	b0a6      	sub	sp, #152	; 0x98
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010872:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	69db      	ldr	r3, [r3, #28]
 801087c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	689b      	ldr	r3, [r3, #8]
 8010890:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801089a:	2b22      	cmp	r3, #34	; 0x22
 801089c:	f040 814f 	bne.w	8010b3e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80108a6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80108aa:	e0f6      	b.n	8010a9a <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108b2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80108b6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80108ba:	b2d9      	uxtb	r1, r3
 80108bc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80108c0:	b2da      	uxtb	r2, r3
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80108c6:	400a      	ands	r2, r1
 80108c8:	b2d2      	uxtb	r2, r2
 80108ca:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80108d0:	1c5a      	adds	r2, r3, #1
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80108dc:	b29b      	uxth	r3, r3
 80108de:	3b01      	subs	r3, #1
 80108e0:	b29a      	uxth	r2, r3
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	69db      	ldr	r3, [r3, #28]
 80108ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80108f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80108f6:	f003 0307 	and.w	r3, r3, #7
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d053      	beq.n	80109a6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80108fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010902:	f003 0301 	and.w	r3, r3, #1
 8010906:	2b00      	cmp	r3, #0
 8010908:	d011      	beq.n	801092e <UART_RxISR_8BIT_FIFOEN+0xca>
 801090a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801090e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010912:	2b00      	cmp	r3, #0
 8010914:	d00b      	beq.n	801092e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	2201      	movs	r2, #1
 801091c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010924:	f043 0201 	orr.w	r2, r3, #1
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801092e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010932:	f003 0302 	and.w	r3, r3, #2
 8010936:	2b00      	cmp	r3, #0
 8010938:	d011      	beq.n	801095e <UART_RxISR_8BIT_FIFOEN+0xfa>
 801093a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801093e:	f003 0301 	and.w	r3, r3, #1
 8010942:	2b00      	cmp	r3, #0
 8010944:	d00b      	beq.n	801095e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	2202      	movs	r2, #2
 801094c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010954:	f043 0204 	orr.w	r2, r3, #4
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801095e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010962:	f003 0304 	and.w	r3, r3, #4
 8010966:	2b00      	cmp	r3, #0
 8010968:	d011      	beq.n	801098e <UART_RxISR_8BIT_FIFOEN+0x12a>
 801096a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801096e:	f003 0301 	and.w	r3, r3, #1
 8010972:	2b00      	cmp	r3, #0
 8010974:	d00b      	beq.n	801098e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	2204      	movs	r2, #4
 801097c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010984:	f043 0202 	orr.w	r2, r3, #2
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010994:	2b00      	cmp	r3, #0
 8010996:	d006      	beq.n	80109a6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010998:	6878      	ldr	r0, [r7, #4]
 801099a:	f7fe ff69 	bl	800f870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	2200      	movs	r2, #0
 80109a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80109ac:	b29b      	uxth	r3, r3
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d173      	bne.n	8010a9a <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80109ba:	e853 3f00 	ldrex	r3, [r3]
 80109be:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80109c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80109c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80109c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	461a      	mov	r2, r3
 80109d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80109d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80109d6:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109d8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80109da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80109dc:	e841 2300 	strex	r3, r2, [r1]
 80109e0:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80109e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d1e4      	bne.n	80109b2 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	3308      	adds	r3, #8
 80109ee:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80109f2:	e853 3f00 	ldrex	r3, [r3]
 80109f6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80109f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80109fe:	f023 0301 	bic.w	r3, r3, #1
 8010a02:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	3308      	adds	r3, #8
 8010a0a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010a0c:	657a      	str	r2, [r7, #84]	; 0x54
 8010a0e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a10:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010a12:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010a14:	e841 2300 	strex	r3, r2, [r1]
 8010a18:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010a1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d1e3      	bne.n	80109e8 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	2220      	movs	r2, #32
 8010a24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	2200      	movs	r2, #0
 8010a2c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a32:	2b01      	cmp	r3, #1
 8010a34:	d12e      	bne.n	8010a94 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	2200      	movs	r2, #0
 8010a3a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a44:	e853 3f00 	ldrex	r3, [r3]
 8010a48:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a4c:	f023 0310 	bic.w	r3, r3, #16
 8010a50:	67bb      	str	r3, [r7, #120]	; 0x78
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	461a      	mov	r2, r3
 8010a58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010a5a:	643b      	str	r3, [r7, #64]	; 0x40
 8010a5c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a5e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010a60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010a62:	e841 2300 	strex	r3, r2, [r1]
 8010a66:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d1e6      	bne.n	8010a3c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	69db      	ldr	r3, [r3, #28]
 8010a74:	f003 0310 	and.w	r3, r3, #16
 8010a78:	2b10      	cmp	r3, #16
 8010a7a:	d103      	bne.n	8010a84 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	2210      	movs	r2, #16
 8010a82:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010a8a:	4619      	mov	r1, r3
 8010a8c:	6878      	ldr	r0, [r7, #4]
 8010a8e:	f7fe fef9 	bl	800f884 <HAL_UARTEx_RxEventCallback>
 8010a92:	e002      	b.n	8010a9a <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010a94:	6878      	ldr	r0, [r7, #4]
 8010a96:	f7fe fee1 	bl	800f85c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010a9a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d006      	beq.n	8010ab0 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8010aa2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010aa6:	f003 0320 	and.w	r3, r3, #32
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	f47f aefe 	bne.w	80108ac <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010ab6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010aba:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d045      	beq.n	8010b4e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010ac8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010acc:	429a      	cmp	r2, r3
 8010ace:	d23e      	bcs.n	8010b4e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	3308      	adds	r3, #8
 8010ad6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ad8:	6a3b      	ldr	r3, [r7, #32]
 8010ada:	e853 3f00 	ldrex	r3, [r3]
 8010ade:	61fb      	str	r3, [r7, #28]
   return(result);
 8010ae0:	69fb      	ldr	r3, [r7, #28]
 8010ae2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010ae6:	673b      	str	r3, [r7, #112]	; 0x70
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	3308      	adds	r3, #8
 8010aee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010af0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010af2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010af4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010af6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010af8:	e841 2300 	strex	r3, r2, [r1]
 8010afc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d1e5      	bne.n	8010ad0 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	4a14      	ldr	r2, [pc, #80]	; (8010b58 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8010b08:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	e853 3f00 	ldrex	r3, [r3]
 8010b16:	60bb      	str	r3, [r7, #8]
   return(result);
 8010b18:	68bb      	ldr	r3, [r7, #8]
 8010b1a:	f043 0320 	orr.w	r3, r3, #32
 8010b1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	461a      	mov	r2, r3
 8010b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010b28:	61bb      	str	r3, [r7, #24]
 8010b2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b2c:	6979      	ldr	r1, [r7, #20]
 8010b2e:	69ba      	ldr	r2, [r7, #24]
 8010b30:	e841 2300 	strex	r3, r2, [r1]
 8010b34:	613b      	str	r3, [r7, #16]
   return(result);
 8010b36:	693b      	ldr	r3, [r7, #16]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d1e6      	bne.n	8010b0a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010b3c:	e007      	b.n	8010b4e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	699a      	ldr	r2, [r3, #24]
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	f042 0208 	orr.w	r2, r2, #8
 8010b4c:	619a      	str	r2, [r3, #24]
}
 8010b4e:	bf00      	nop
 8010b50:	3798      	adds	r7, #152	; 0x98
 8010b52:	46bd      	mov	sp, r7
 8010b54:	bd80      	pop	{r7, pc}
 8010b56:	bf00      	nop
 8010b58:	080105a3 	.word	0x080105a3

08010b5c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	b0a8      	sub	sp, #160	; 0xa0
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010b6a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	69db      	ldr	r3, [r3, #28]
 8010b74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	689b      	ldr	r3, [r3, #8]
 8010b88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010b92:	2b22      	cmp	r3, #34	; 0x22
 8010b94:	f040 8153 	bne.w	8010e3e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010b9e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010ba2:	e0fa      	b.n	8010d9a <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010baa:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010bb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8010bb6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8010bba:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8010bbe:	4013      	ands	r3, r2
 8010bc0:	b29a      	uxth	r2, r3
 8010bc2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010bc6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010bcc:	1c9a      	adds	r2, r3, #2
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010bd8:	b29b      	uxth	r3, r3
 8010bda:	3b01      	subs	r3, #1
 8010bdc:	b29a      	uxth	r2, r3
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	69db      	ldr	r3, [r3, #28]
 8010bea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010bee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010bf2:	f003 0307 	and.w	r3, r3, #7
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d053      	beq.n	8010ca2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010bfa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010bfe:	f003 0301 	and.w	r3, r3, #1
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d011      	beq.n	8010c2a <UART_RxISR_16BIT_FIFOEN+0xce>
 8010c06:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d00b      	beq.n	8010c2a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	2201      	movs	r2, #1
 8010c18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010c20:	f043 0201 	orr.w	r2, r3, #1
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010c2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010c2e:	f003 0302 	and.w	r3, r3, #2
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d011      	beq.n	8010c5a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8010c36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010c3a:	f003 0301 	and.w	r3, r3, #1
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d00b      	beq.n	8010c5a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	2202      	movs	r2, #2
 8010c48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010c50:	f043 0204 	orr.w	r2, r3, #4
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010c5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010c5e:	f003 0304 	and.w	r3, r3, #4
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d011      	beq.n	8010c8a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8010c66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010c6a:	f003 0301 	and.w	r3, r3, #1
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d00b      	beq.n	8010c8a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	2204      	movs	r2, #4
 8010c78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010c80:	f043 0202 	orr.w	r2, r3, #2
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d006      	beq.n	8010ca2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010c94:	6878      	ldr	r0, [r7, #4]
 8010c96:	f7fe fdeb 	bl	800f870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	2200      	movs	r2, #0
 8010c9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010ca8:	b29b      	uxth	r3, r3
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d175      	bne.n	8010d9a <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010cb6:	e853 3f00 	ldrex	r3, [r3]
 8010cba:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010cbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010cbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010cc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	461a      	mov	r2, r3
 8010ccc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010cd0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010cd2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cd4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010cd6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010cd8:	e841 2300 	strex	r3, r2, [r1]
 8010cdc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010cde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d1e4      	bne.n	8010cae <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	3308      	adds	r3, #8
 8010cea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cee:	e853 3f00 	ldrex	r3, [r3]
 8010cf2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010cf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010cf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010cfa:	f023 0301 	bic.w	r3, r3, #1
 8010cfe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	3308      	adds	r3, #8
 8010d08:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010d0c:	65ba      	str	r2, [r7, #88]	; 0x58
 8010d0e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010d12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010d14:	e841 2300 	strex	r3, r2, [r1]
 8010d18:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d1e1      	bne.n	8010ce4 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	2220      	movs	r2, #32
 8010d24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	2200      	movs	r2, #0
 8010d2c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d32:	2b01      	cmp	r3, #1
 8010d34:	d12e      	bne.n	8010d94 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	2200      	movs	r2, #0
 8010d3a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d44:	e853 3f00 	ldrex	r3, [r3]
 8010d48:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d4c:	f023 0310 	bic.w	r3, r3, #16
 8010d50:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	461a      	mov	r2, r3
 8010d58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010d5a:	647b      	str	r3, [r7, #68]	; 0x44
 8010d5c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010d60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010d62:	e841 2300 	strex	r3, r2, [r1]
 8010d66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d1e6      	bne.n	8010d3c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	69db      	ldr	r3, [r3, #28]
 8010d74:	f003 0310 	and.w	r3, r3, #16
 8010d78:	2b10      	cmp	r3, #16
 8010d7a:	d103      	bne.n	8010d84 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	2210      	movs	r2, #16
 8010d82:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010d8a:	4619      	mov	r1, r3
 8010d8c:	6878      	ldr	r0, [r7, #4]
 8010d8e:	f7fe fd79 	bl	800f884 <HAL_UARTEx_RxEventCallback>
 8010d92:	e002      	b.n	8010d9a <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010d94:	6878      	ldr	r0, [r7, #4]
 8010d96:	f7fe fd61 	bl	800f85c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010d9a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d006      	beq.n	8010db0 <UART_RxISR_16BIT_FIFOEN+0x254>
 8010da2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010da6:	f003 0320 	and.w	r3, r3, #32
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	f47f aefa 	bne.w	8010ba4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010db6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010dba:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d045      	beq.n	8010e4e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010dc8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8010dcc:	429a      	cmp	r2, r3
 8010dce:	d23e      	bcs.n	8010e4e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	3308      	adds	r3, #8
 8010dd6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dda:	e853 3f00 	ldrex	r3, [r3]
 8010dde:	623b      	str	r3, [r7, #32]
   return(result);
 8010de0:	6a3b      	ldr	r3, [r7, #32]
 8010de2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010de6:	677b      	str	r3, [r7, #116]	; 0x74
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	3308      	adds	r3, #8
 8010dee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010df0:	633a      	str	r2, [r7, #48]	; 0x30
 8010df2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010df4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010df6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010df8:	e841 2300 	strex	r3, r2, [r1]
 8010dfc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d1e5      	bne.n	8010dd0 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	4a14      	ldr	r2, [pc, #80]	; (8010e58 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8010e08:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e10:	693b      	ldr	r3, [r7, #16]
 8010e12:	e853 3f00 	ldrex	r3, [r3]
 8010e16:	60fb      	str	r3, [r7, #12]
   return(result);
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	f043 0320 	orr.w	r3, r3, #32
 8010e1e:	673b      	str	r3, [r7, #112]	; 0x70
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	461a      	mov	r2, r3
 8010e26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010e28:	61fb      	str	r3, [r7, #28]
 8010e2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e2c:	69b9      	ldr	r1, [r7, #24]
 8010e2e:	69fa      	ldr	r2, [r7, #28]
 8010e30:	e841 2300 	strex	r3, r2, [r1]
 8010e34:	617b      	str	r3, [r7, #20]
   return(result);
 8010e36:	697b      	ldr	r3, [r7, #20]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d1e6      	bne.n	8010e0a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010e3c:	e007      	b.n	8010e4e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	699a      	ldr	r2, [r3, #24]
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	f042 0208 	orr.w	r2, r2, #8
 8010e4c:	619a      	str	r2, [r3, #24]
}
 8010e4e:	bf00      	nop
 8010e50:	37a0      	adds	r7, #160	; 0xa0
 8010e52:	46bd      	mov	sp, r7
 8010e54:	bd80      	pop	{r7, pc}
 8010e56:	bf00      	nop
 8010e58:	08010703 	.word	0x08010703

08010e5c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010e5c:	b480      	push	{r7}
 8010e5e:	b083      	sub	sp, #12
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010e64:	bf00      	nop
 8010e66:	370c      	adds	r7, #12
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e6e:	4770      	bx	lr

08010e70 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010e70:	b480      	push	{r7}
 8010e72:	b083      	sub	sp, #12
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010e78:	bf00      	nop
 8010e7a:	370c      	adds	r7, #12
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e82:	4770      	bx	lr

08010e84 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010e84:	b480      	push	{r7}
 8010e86:	b083      	sub	sp, #12
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010e8c:	bf00      	nop
 8010e8e:	370c      	adds	r7, #12
 8010e90:	46bd      	mov	sp, r7
 8010e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e96:	4770      	bx	lr

08010e98 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010e98:	b480      	push	{r7}
 8010e9a:	b085      	sub	sp, #20
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010ea6:	2b01      	cmp	r3, #1
 8010ea8:	d101      	bne.n	8010eae <HAL_UARTEx_DisableFifoMode+0x16>
 8010eaa:	2302      	movs	r3, #2
 8010eac:	e027      	b.n	8010efe <HAL_UARTEx_DisableFifoMode+0x66>
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	2201      	movs	r2, #1
 8010eb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	2224      	movs	r2, #36	; 0x24
 8010eba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	681a      	ldr	r2, [r3, #0]
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	f022 0201 	bic.w	r2, r2, #1
 8010ed4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010edc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	68fa      	ldr	r2, [r7, #12]
 8010eea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	2220      	movs	r2, #32
 8010ef0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	2200      	movs	r2, #0
 8010ef8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010efc:	2300      	movs	r3, #0
}
 8010efe:	4618      	mov	r0, r3
 8010f00:	3714      	adds	r7, #20
 8010f02:	46bd      	mov	sp, r7
 8010f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f08:	4770      	bx	lr

08010f0a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010f0a:	b580      	push	{r7, lr}
 8010f0c:	b084      	sub	sp, #16
 8010f0e:	af00      	add	r7, sp, #0
 8010f10:	6078      	str	r0, [r7, #4]
 8010f12:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010f1a:	2b01      	cmp	r3, #1
 8010f1c:	d101      	bne.n	8010f22 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010f1e:	2302      	movs	r3, #2
 8010f20:	e02d      	b.n	8010f7e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	2201      	movs	r2, #1
 8010f26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	2224      	movs	r2, #36	; 0x24
 8010f2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	681a      	ldr	r2, [r3, #0]
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	f022 0201 	bic.w	r2, r2, #1
 8010f48:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	689b      	ldr	r3, [r3, #8]
 8010f50:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	683a      	ldr	r2, [r7, #0]
 8010f5a:	430a      	orrs	r2, r1
 8010f5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010f5e:	6878      	ldr	r0, [r7, #4]
 8010f60:	f000 f850 	bl	8011004 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	68fa      	ldr	r2, [r7, #12]
 8010f6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	2220      	movs	r2, #32
 8010f70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	2200      	movs	r2, #0
 8010f78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010f7c:	2300      	movs	r3, #0
}
 8010f7e:	4618      	mov	r0, r3
 8010f80:	3710      	adds	r7, #16
 8010f82:	46bd      	mov	sp, r7
 8010f84:	bd80      	pop	{r7, pc}

08010f86 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010f86:	b580      	push	{r7, lr}
 8010f88:	b084      	sub	sp, #16
 8010f8a:	af00      	add	r7, sp, #0
 8010f8c:	6078      	str	r0, [r7, #4]
 8010f8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010f96:	2b01      	cmp	r3, #1
 8010f98:	d101      	bne.n	8010f9e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010f9a:	2302      	movs	r3, #2
 8010f9c:	e02d      	b.n	8010ffa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	2201      	movs	r2, #1
 8010fa2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	2224      	movs	r2, #36	; 0x24
 8010faa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	681a      	ldr	r2, [r3, #0]
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	f022 0201 	bic.w	r2, r2, #1
 8010fc4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	689b      	ldr	r3, [r3, #8]
 8010fcc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	683a      	ldr	r2, [r7, #0]
 8010fd6:	430a      	orrs	r2, r1
 8010fd8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010fda:	6878      	ldr	r0, [r7, #4]
 8010fdc:	f000 f812 	bl	8011004 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	68fa      	ldr	r2, [r7, #12]
 8010fe6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	2220      	movs	r2, #32
 8010fec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	2200      	movs	r2, #0
 8010ff4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010ff8:	2300      	movs	r3, #0
}
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	3710      	adds	r7, #16
 8010ffe:	46bd      	mov	sp, r7
 8011000:	bd80      	pop	{r7, pc}
	...

08011004 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011004:	b480      	push	{r7}
 8011006:	b085      	sub	sp, #20
 8011008:	af00      	add	r7, sp, #0
 801100a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011010:	2b00      	cmp	r3, #0
 8011012:	d108      	bne.n	8011026 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	2201      	movs	r2, #1
 8011018:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	2201      	movs	r2, #1
 8011020:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011024:	e031      	b.n	801108a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011026:	2308      	movs	r3, #8
 8011028:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801102a:	2308      	movs	r3, #8
 801102c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	689b      	ldr	r3, [r3, #8]
 8011034:	0e5b      	lsrs	r3, r3, #25
 8011036:	b2db      	uxtb	r3, r3
 8011038:	f003 0307 	and.w	r3, r3, #7
 801103c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	689b      	ldr	r3, [r3, #8]
 8011044:	0f5b      	lsrs	r3, r3, #29
 8011046:	b2db      	uxtb	r3, r3
 8011048:	f003 0307 	and.w	r3, r3, #7
 801104c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801104e:	7bbb      	ldrb	r3, [r7, #14]
 8011050:	7b3a      	ldrb	r2, [r7, #12]
 8011052:	4911      	ldr	r1, [pc, #68]	; (8011098 <UARTEx_SetNbDataToProcess+0x94>)
 8011054:	5c8a      	ldrb	r2, [r1, r2]
 8011056:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801105a:	7b3a      	ldrb	r2, [r7, #12]
 801105c:	490f      	ldr	r1, [pc, #60]	; (801109c <UARTEx_SetNbDataToProcess+0x98>)
 801105e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011060:	fb93 f3f2 	sdiv	r3, r3, r2
 8011064:	b29a      	uxth	r2, r3
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801106c:	7bfb      	ldrb	r3, [r7, #15]
 801106e:	7b7a      	ldrb	r2, [r7, #13]
 8011070:	4909      	ldr	r1, [pc, #36]	; (8011098 <UARTEx_SetNbDataToProcess+0x94>)
 8011072:	5c8a      	ldrb	r2, [r1, r2]
 8011074:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011078:	7b7a      	ldrb	r2, [r7, #13]
 801107a:	4908      	ldr	r1, [pc, #32]	; (801109c <UARTEx_SetNbDataToProcess+0x98>)
 801107c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801107e:	fb93 f3f2 	sdiv	r3, r3, r2
 8011082:	b29a      	uxth	r2, r3
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801108a:	bf00      	nop
 801108c:	3714      	adds	r7, #20
 801108e:	46bd      	mov	sp, r7
 8011090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011094:	4770      	bx	lr
 8011096:	bf00      	nop
 8011098:	08018ce0 	.word	0x08018ce0
 801109c:	08018ce8 	.word	0x08018ce8

080110a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80110a0:	b480      	push	{r7}
 80110a2:	b085      	sub	sp, #20
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	2200      	movs	r2, #0
 80110ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80110b0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80110b4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	b29a      	uxth	r2, r3
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80110c0:	2300      	movs	r3, #0
}
 80110c2:	4618      	mov	r0, r3
 80110c4:	3714      	adds	r7, #20
 80110c6:	46bd      	mov	sp, r7
 80110c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110cc:	4770      	bx	lr

080110ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80110ce:	b480      	push	{r7}
 80110d0:	b085      	sub	sp, #20
 80110d2:	af00      	add	r7, sp, #0
 80110d4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80110d6:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80110da:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80110e2:	b29a      	uxth	r2, r3
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	b29b      	uxth	r3, r3
 80110e8:	43db      	mvns	r3, r3
 80110ea:	b29b      	uxth	r3, r3
 80110ec:	4013      	ands	r3, r2
 80110ee:	b29a      	uxth	r2, r3
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80110f6:	2300      	movs	r3, #0
}
 80110f8:	4618      	mov	r0, r3
 80110fa:	3714      	adds	r7, #20
 80110fc:	46bd      	mov	sp, r7
 80110fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011102:	4770      	bx	lr

08011104 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8011104:	b084      	sub	sp, #16
 8011106:	b480      	push	{r7}
 8011108:	b083      	sub	sp, #12
 801110a:	af00      	add	r7, sp, #0
 801110c:	6078      	str	r0, [r7, #4]
 801110e:	f107 0014 	add.w	r0, r7, #20
 8011112:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	2201      	movs	r2, #1
 801111a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	2200      	movs	r2, #0
 8011122:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	2200      	movs	r2, #0
 801112a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	2200      	movs	r2, #0
 8011132:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8011136:	2300      	movs	r3, #0
}
 8011138:	4618      	mov	r0, r3
 801113a:	370c      	adds	r7, #12
 801113c:	46bd      	mov	sp, r7
 801113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011142:	b004      	add	sp, #16
 8011144:	4770      	bx	lr
	...

08011148 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011148:	b480      	push	{r7}
 801114a:	b09d      	sub	sp, #116	; 0x74
 801114c:	af00      	add	r7, sp, #0
 801114e:	6078      	str	r0, [r7, #4]
 8011150:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8011152:	2300      	movs	r3, #0
 8011154:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8011158:	687a      	ldr	r2, [r7, #4]
 801115a:	683b      	ldr	r3, [r7, #0]
 801115c:	781b      	ldrb	r3, [r3, #0]
 801115e:	009b      	lsls	r3, r3, #2
 8011160:	4413      	add	r3, r2
 8011162:	881b      	ldrh	r3, [r3, #0]
 8011164:	b29b      	uxth	r3, r3
 8011166:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 801116a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801116e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8011172:	683b      	ldr	r3, [r7, #0]
 8011174:	78db      	ldrb	r3, [r3, #3]
 8011176:	2b03      	cmp	r3, #3
 8011178:	d81f      	bhi.n	80111ba <USB_ActivateEndpoint+0x72>
 801117a:	a201      	add	r2, pc, #4	; (adr r2, 8011180 <USB_ActivateEndpoint+0x38>)
 801117c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011180:	08011191 	.word	0x08011191
 8011184:	080111ad 	.word	0x080111ad
 8011188:	080111c3 	.word	0x080111c3
 801118c:	0801119f 	.word	0x0801119f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8011190:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8011194:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011198:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 801119c:	e012      	b.n	80111c4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801119e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80111a2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80111a6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80111aa:	e00b      	b.n	80111c4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80111ac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80111b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80111b4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80111b8:	e004      	b.n	80111c4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80111ba:	2301      	movs	r3, #1
 80111bc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80111c0:	e000      	b.n	80111c4 <USB_ActivateEndpoint+0x7c>
      break;
 80111c2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80111c4:	687a      	ldr	r2, [r7, #4]
 80111c6:	683b      	ldr	r3, [r7, #0]
 80111c8:	781b      	ldrb	r3, [r3, #0]
 80111ca:	009b      	lsls	r3, r3, #2
 80111cc:	441a      	add	r2, r3
 80111ce:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80111d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80111d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80111da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80111de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80111e2:	b29b      	uxth	r3, r3
 80111e4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80111e6:	687a      	ldr	r2, [r7, #4]
 80111e8:	683b      	ldr	r3, [r7, #0]
 80111ea:	781b      	ldrb	r3, [r3, #0]
 80111ec:	009b      	lsls	r3, r3, #2
 80111ee:	4413      	add	r3, r2
 80111f0:	881b      	ldrh	r3, [r3, #0]
 80111f2:	b29b      	uxth	r3, r3
 80111f4:	b21b      	sxth	r3, r3
 80111f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80111fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80111fe:	b21a      	sxth	r2, r3
 8011200:	683b      	ldr	r3, [r7, #0]
 8011202:	781b      	ldrb	r3, [r3, #0]
 8011204:	b21b      	sxth	r3, r3
 8011206:	4313      	orrs	r3, r2
 8011208:	b21b      	sxth	r3, r3
 801120a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 801120e:	687a      	ldr	r2, [r7, #4]
 8011210:	683b      	ldr	r3, [r7, #0]
 8011212:	781b      	ldrb	r3, [r3, #0]
 8011214:	009b      	lsls	r3, r3, #2
 8011216:	441a      	add	r2, r3
 8011218:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801121c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011220:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011224:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801122c:	b29b      	uxth	r3, r3
 801122e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8011230:	683b      	ldr	r3, [r7, #0]
 8011232:	7b1b      	ldrb	r3, [r3, #12]
 8011234:	2b00      	cmp	r3, #0
 8011236:	f040 8149 	bne.w	80114cc <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 801123a:	683b      	ldr	r3, [r7, #0]
 801123c:	785b      	ldrb	r3, [r3, #1]
 801123e:	2b00      	cmp	r3, #0
 8011240:	f000 8084 	beq.w	801134c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	61bb      	str	r3, [r7, #24]
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801124e:	b29b      	uxth	r3, r3
 8011250:	461a      	mov	r2, r3
 8011252:	69bb      	ldr	r3, [r7, #24]
 8011254:	4413      	add	r3, r2
 8011256:	61bb      	str	r3, [r7, #24]
 8011258:	683b      	ldr	r3, [r7, #0]
 801125a:	781b      	ldrb	r3, [r3, #0]
 801125c:	00da      	lsls	r2, r3, #3
 801125e:	69bb      	ldr	r3, [r7, #24]
 8011260:	4413      	add	r3, r2
 8011262:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011266:	617b      	str	r3, [r7, #20]
 8011268:	683b      	ldr	r3, [r7, #0]
 801126a:	88db      	ldrh	r3, [r3, #6]
 801126c:	085b      	lsrs	r3, r3, #1
 801126e:	b29b      	uxth	r3, r3
 8011270:	005b      	lsls	r3, r3, #1
 8011272:	b29a      	uxth	r2, r3
 8011274:	697b      	ldr	r3, [r7, #20]
 8011276:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011278:	687a      	ldr	r2, [r7, #4]
 801127a:	683b      	ldr	r3, [r7, #0]
 801127c:	781b      	ldrb	r3, [r3, #0]
 801127e:	009b      	lsls	r3, r3, #2
 8011280:	4413      	add	r3, r2
 8011282:	881b      	ldrh	r3, [r3, #0]
 8011284:	827b      	strh	r3, [r7, #18]
 8011286:	8a7b      	ldrh	r3, [r7, #18]
 8011288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801128c:	2b00      	cmp	r3, #0
 801128e:	d01b      	beq.n	80112c8 <USB_ActivateEndpoint+0x180>
 8011290:	687a      	ldr	r2, [r7, #4]
 8011292:	683b      	ldr	r3, [r7, #0]
 8011294:	781b      	ldrb	r3, [r3, #0]
 8011296:	009b      	lsls	r3, r3, #2
 8011298:	4413      	add	r3, r2
 801129a:	881b      	ldrh	r3, [r3, #0]
 801129c:	b29b      	uxth	r3, r3
 801129e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80112a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80112a6:	823b      	strh	r3, [r7, #16]
 80112a8:	687a      	ldr	r2, [r7, #4]
 80112aa:	683b      	ldr	r3, [r7, #0]
 80112ac:	781b      	ldrb	r3, [r3, #0]
 80112ae:	009b      	lsls	r3, r3, #2
 80112b0:	441a      	add	r2, r3
 80112b2:	8a3b      	ldrh	r3, [r7, #16]
 80112b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80112b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80112bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80112c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80112c4:	b29b      	uxth	r3, r3
 80112c6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80112c8:	683b      	ldr	r3, [r7, #0]
 80112ca:	78db      	ldrb	r3, [r3, #3]
 80112cc:	2b01      	cmp	r3, #1
 80112ce:	d020      	beq.n	8011312 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80112d0:	687a      	ldr	r2, [r7, #4]
 80112d2:	683b      	ldr	r3, [r7, #0]
 80112d4:	781b      	ldrb	r3, [r3, #0]
 80112d6:	009b      	lsls	r3, r3, #2
 80112d8:	4413      	add	r3, r2
 80112da:	881b      	ldrh	r3, [r3, #0]
 80112dc:	b29b      	uxth	r3, r3
 80112de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80112e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80112e6:	81bb      	strh	r3, [r7, #12]
 80112e8:	89bb      	ldrh	r3, [r7, #12]
 80112ea:	f083 0320 	eor.w	r3, r3, #32
 80112ee:	81bb      	strh	r3, [r7, #12]
 80112f0:	687a      	ldr	r2, [r7, #4]
 80112f2:	683b      	ldr	r3, [r7, #0]
 80112f4:	781b      	ldrb	r3, [r3, #0]
 80112f6:	009b      	lsls	r3, r3, #2
 80112f8:	441a      	add	r2, r3
 80112fa:	89bb      	ldrh	r3, [r7, #12]
 80112fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011300:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011304:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801130c:	b29b      	uxth	r3, r3
 801130e:	8013      	strh	r3, [r2, #0]
 8011310:	e2a6      	b.n	8011860 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011312:	687a      	ldr	r2, [r7, #4]
 8011314:	683b      	ldr	r3, [r7, #0]
 8011316:	781b      	ldrb	r3, [r3, #0]
 8011318:	009b      	lsls	r3, r3, #2
 801131a:	4413      	add	r3, r2
 801131c:	881b      	ldrh	r3, [r3, #0]
 801131e:	b29b      	uxth	r3, r3
 8011320:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011324:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011328:	81fb      	strh	r3, [r7, #14]
 801132a:	687a      	ldr	r2, [r7, #4]
 801132c:	683b      	ldr	r3, [r7, #0]
 801132e:	781b      	ldrb	r3, [r3, #0]
 8011330:	009b      	lsls	r3, r3, #2
 8011332:	441a      	add	r2, r3
 8011334:	89fb      	ldrh	r3, [r7, #14]
 8011336:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801133a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801133e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011346:	b29b      	uxth	r3, r3
 8011348:	8013      	strh	r3, [r2, #0]
 801134a:	e289      	b.n	8011860 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	633b      	str	r3, [r7, #48]	; 0x30
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011356:	b29b      	uxth	r3, r3
 8011358:	461a      	mov	r2, r3
 801135a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801135c:	4413      	add	r3, r2
 801135e:	633b      	str	r3, [r7, #48]	; 0x30
 8011360:	683b      	ldr	r3, [r7, #0]
 8011362:	781b      	ldrb	r3, [r3, #0]
 8011364:	00da      	lsls	r2, r3, #3
 8011366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011368:	4413      	add	r3, r2
 801136a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801136e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011370:	683b      	ldr	r3, [r7, #0]
 8011372:	88db      	ldrh	r3, [r3, #6]
 8011374:	085b      	lsrs	r3, r3, #1
 8011376:	b29b      	uxth	r3, r3
 8011378:	005b      	lsls	r3, r3, #1
 801137a:	b29a      	uxth	r2, r3
 801137c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801137e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	62bb      	str	r3, [r7, #40]	; 0x28
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801138a:	b29b      	uxth	r3, r3
 801138c:	461a      	mov	r2, r3
 801138e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011390:	4413      	add	r3, r2
 8011392:	62bb      	str	r3, [r7, #40]	; 0x28
 8011394:	683b      	ldr	r3, [r7, #0]
 8011396:	781b      	ldrb	r3, [r3, #0]
 8011398:	00da      	lsls	r2, r3, #3
 801139a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801139c:	4413      	add	r3, r2
 801139e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80113a2:	627b      	str	r3, [r7, #36]	; 0x24
 80113a4:	683b      	ldr	r3, [r7, #0]
 80113a6:	691b      	ldr	r3, [r3, #16]
 80113a8:	2b3e      	cmp	r3, #62	; 0x3e
 80113aa:	d918      	bls.n	80113de <USB_ActivateEndpoint+0x296>
 80113ac:	683b      	ldr	r3, [r7, #0]
 80113ae:	691b      	ldr	r3, [r3, #16]
 80113b0:	095b      	lsrs	r3, r3, #5
 80113b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80113b4:	683b      	ldr	r3, [r7, #0]
 80113b6:	691b      	ldr	r3, [r3, #16]
 80113b8:	f003 031f 	and.w	r3, r3, #31
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d102      	bne.n	80113c6 <USB_ActivateEndpoint+0x27e>
 80113c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80113c2:	3b01      	subs	r3, #1
 80113c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80113c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80113c8:	b29b      	uxth	r3, r3
 80113ca:	029b      	lsls	r3, r3, #10
 80113cc:	b29b      	uxth	r3, r3
 80113ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80113d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80113d6:	b29a      	uxth	r2, r3
 80113d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113da:	801a      	strh	r2, [r3, #0]
 80113dc:	e029      	b.n	8011432 <USB_ActivateEndpoint+0x2ea>
 80113de:	683b      	ldr	r3, [r7, #0]
 80113e0:	691b      	ldr	r3, [r3, #16]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d112      	bne.n	801140c <USB_ActivateEndpoint+0x2c4>
 80113e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113e8:	881b      	ldrh	r3, [r3, #0]
 80113ea:	b29b      	uxth	r3, r3
 80113ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80113f0:	b29a      	uxth	r2, r3
 80113f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113f4:	801a      	strh	r2, [r3, #0]
 80113f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113f8:	881b      	ldrh	r3, [r3, #0]
 80113fa:	b29b      	uxth	r3, r3
 80113fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011400:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011404:	b29a      	uxth	r2, r3
 8011406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011408:	801a      	strh	r2, [r3, #0]
 801140a:	e012      	b.n	8011432 <USB_ActivateEndpoint+0x2ea>
 801140c:	683b      	ldr	r3, [r7, #0]
 801140e:	691b      	ldr	r3, [r3, #16]
 8011410:	085b      	lsrs	r3, r3, #1
 8011412:	66bb      	str	r3, [r7, #104]	; 0x68
 8011414:	683b      	ldr	r3, [r7, #0]
 8011416:	691b      	ldr	r3, [r3, #16]
 8011418:	f003 0301 	and.w	r3, r3, #1
 801141c:	2b00      	cmp	r3, #0
 801141e:	d002      	beq.n	8011426 <USB_ActivateEndpoint+0x2de>
 8011420:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011422:	3301      	adds	r3, #1
 8011424:	66bb      	str	r3, [r7, #104]	; 0x68
 8011426:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011428:	b29b      	uxth	r3, r3
 801142a:	029b      	lsls	r3, r3, #10
 801142c:	b29a      	uxth	r2, r3
 801142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011430:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011432:	687a      	ldr	r2, [r7, #4]
 8011434:	683b      	ldr	r3, [r7, #0]
 8011436:	781b      	ldrb	r3, [r3, #0]
 8011438:	009b      	lsls	r3, r3, #2
 801143a:	4413      	add	r3, r2
 801143c:	881b      	ldrh	r3, [r3, #0]
 801143e:	847b      	strh	r3, [r7, #34]	; 0x22
 8011440:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011442:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011446:	2b00      	cmp	r3, #0
 8011448:	d01b      	beq.n	8011482 <USB_ActivateEndpoint+0x33a>
 801144a:	687a      	ldr	r2, [r7, #4]
 801144c:	683b      	ldr	r3, [r7, #0]
 801144e:	781b      	ldrb	r3, [r3, #0]
 8011450:	009b      	lsls	r3, r3, #2
 8011452:	4413      	add	r3, r2
 8011454:	881b      	ldrh	r3, [r3, #0]
 8011456:	b29b      	uxth	r3, r3
 8011458:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801145c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011460:	843b      	strh	r3, [r7, #32]
 8011462:	687a      	ldr	r2, [r7, #4]
 8011464:	683b      	ldr	r3, [r7, #0]
 8011466:	781b      	ldrb	r3, [r3, #0]
 8011468:	009b      	lsls	r3, r3, #2
 801146a:	441a      	add	r2, r3
 801146c:	8c3b      	ldrh	r3, [r7, #32]
 801146e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011472:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011476:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801147a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801147e:	b29b      	uxth	r3, r3
 8011480:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011482:	687a      	ldr	r2, [r7, #4]
 8011484:	683b      	ldr	r3, [r7, #0]
 8011486:	781b      	ldrb	r3, [r3, #0]
 8011488:	009b      	lsls	r3, r3, #2
 801148a:	4413      	add	r3, r2
 801148c:	881b      	ldrh	r3, [r3, #0]
 801148e:	b29b      	uxth	r3, r3
 8011490:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011498:	83fb      	strh	r3, [r7, #30]
 801149a:	8bfb      	ldrh	r3, [r7, #30]
 801149c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80114a0:	83fb      	strh	r3, [r7, #30]
 80114a2:	8bfb      	ldrh	r3, [r7, #30]
 80114a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80114a8:	83fb      	strh	r3, [r7, #30]
 80114aa:	687a      	ldr	r2, [r7, #4]
 80114ac:	683b      	ldr	r3, [r7, #0]
 80114ae:	781b      	ldrb	r3, [r3, #0]
 80114b0:	009b      	lsls	r3, r3, #2
 80114b2:	441a      	add	r2, r3
 80114b4:	8bfb      	ldrh	r3, [r7, #30]
 80114b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80114ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80114be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80114c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80114c6:	b29b      	uxth	r3, r3
 80114c8:	8013      	strh	r3, [r2, #0]
 80114ca:	e1c9      	b.n	8011860 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80114cc:	683b      	ldr	r3, [r7, #0]
 80114ce:	78db      	ldrb	r3, [r3, #3]
 80114d0:	2b02      	cmp	r3, #2
 80114d2:	d11e      	bne.n	8011512 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80114d4:	687a      	ldr	r2, [r7, #4]
 80114d6:	683b      	ldr	r3, [r7, #0]
 80114d8:	781b      	ldrb	r3, [r3, #0]
 80114da:	009b      	lsls	r3, r3, #2
 80114dc:	4413      	add	r3, r2
 80114de:	881b      	ldrh	r3, [r3, #0]
 80114e0:	b29b      	uxth	r3, r3
 80114e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80114e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80114ea:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80114ee:	687a      	ldr	r2, [r7, #4]
 80114f0:	683b      	ldr	r3, [r7, #0]
 80114f2:	781b      	ldrb	r3, [r3, #0]
 80114f4:	009b      	lsls	r3, r3, #2
 80114f6:	441a      	add	r2, r3
 80114f8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80114fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011500:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011504:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8011508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801150c:	b29b      	uxth	r3, r3
 801150e:	8013      	strh	r3, [r2, #0]
 8011510:	e01d      	b.n	801154e <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8011512:	687a      	ldr	r2, [r7, #4]
 8011514:	683b      	ldr	r3, [r7, #0]
 8011516:	781b      	ldrb	r3, [r3, #0]
 8011518:	009b      	lsls	r3, r3, #2
 801151a:	4413      	add	r3, r2
 801151c:	881b      	ldrh	r3, [r3, #0]
 801151e:	b29b      	uxth	r3, r3
 8011520:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8011524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011528:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 801152c:	687a      	ldr	r2, [r7, #4]
 801152e:	683b      	ldr	r3, [r7, #0]
 8011530:	781b      	ldrb	r3, [r3, #0]
 8011532:	009b      	lsls	r3, r3, #2
 8011534:	441a      	add	r2, r3
 8011536:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801153a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801153e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801154a:	b29b      	uxth	r3, r3
 801154c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011558:	b29b      	uxth	r3, r3
 801155a:	461a      	mov	r2, r3
 801155c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801155e:	4413      	add	r3, r2
 8011560:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011562:	683b      	ldr	r3, [r7, #0]
 8011564:	781b      	ldrb	r3, [r3, #0]
 8011566:	00da      	lsls	r2, r3, #3
 8011568:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801156a:	4413      	add	r3, r2
 801156c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011570:	65bb      	str	r3, [r7, #88]	; 0x58
 8011572:	683b      	ldr	r3, [r7, #0]
 8011574:	891b      	ldrh	r3, [r3, #8]
 8011576:	085b      	lsrs	r3, r3, #1
 8011578:	b29b      	uxth	r3, r3
 801157a:	005b      	lsls	r3, r3, #1
 801157c:	b29a      	uxth	r2, r3
 801157e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011580:	801a      	strh	r2, [r3, #0]
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	657b      	str	r3, [r7, #84]	; 0x54
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801158c:	b29b      	uxth	r3, r3
 801158e:	461a      	mov	r2, r3
 8011590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011592:	4413      	add	r3, r2
 8011594:	657b      	str	r3, [r7, #84]	; 0x54
 8011596:	683b      	ldr	r3, [r7, #0]
 8011598:	781b      	ldrb	r3, [r3, #0]
 801159a:	00da      	lsls	r2, r3, #3
 801159c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801159e:	4413      	add	r3, r2
 80115a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80115a4:	653b      	str	r3, [r7, #80]	; 0x50
 80115a6:	683b      	ldr	r3, [r7, #0]
 80115a8:	895b      	ldrh	r3, [r3, #10]
 80115aa:	085b      	lsrs	r3, r3, #1
 80115ac:	b29b      	uxth	r3, r3
 80115ae:	005b      	lsls	r3, r3, #1
 80115b0:	b29a      	uxth	r2, r3
 80115b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115b4:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80115b6:	683b      	ldr	r3, [r7, #0]
 80115b8:	785b      	ldrb	r3, [r3, #1]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	f040 8093 	bne.w	80116e6 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80115c0:	687a      	ldr	r2, [r7, #4]
 80115c2:	683b      	ldr	r3, [r7, #0]
 80115c4:	781b      	ldrb	r3, [r3, #0]
 80115c6:	009b      	lsls	r3, r3, #2
 80115c8:	4413      	add	r3, r2
 80115ca:	881b      	ldrh	r3, [r3, #0]
 80115cc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80115d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80115d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d01b      	beq.n	8011614 <USB_ActivateEndpoint+0x4cc>
 80115dc:	687a      	ldr	r2, [r7, #4]
 80115de:	683b      	ldr	r3, [r7, #0]
 80115e0:	781b      	ldrb	r3, [r3, #0]
 80115e2:	009b      	lsls	r3, r3, #2
 80115e4:	4413      	add	r3, r2
 80115e6:	881b      	ldrh	r3, [r3, #0]
 80115e8:	b29b      	uxth	r3, r3
 80115ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80115ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80115f2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80115f4:	687a      	ldr	r2, [r7, #4]
 80115f6:	683b      	ldr	r3, [r7, #0]
 80115f8:	781b      	ldrb	r3, [r3, #0]
 80115fa:	009b      	lsls	r3, r3, #2
 80115fc:	441a      	add	r2, r3
 80115fe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011600:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011604:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011608:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801160c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011610:	b29b      	uxth	r3, r3
 8011612:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011614:	687a      	ldr	r2, [r7, #4]
 8011616:	683b      	ldr	r3, [r7, #0]
 8011618:	781b      	ldrb	r3, [r3, #0]
 801161a:	009b      	lsls	r3, r3, #2
 801161c:	4413      	add	r3, r2
 801161e:	881b      	ldrh	r3, [r3, #0]
 8011620:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8011622:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011628:	2b00      	cmp	r3, #0
 801162a:	d01b      	beq.n	8011664 <USB_ActivateEndpoint+0x51c>
 801162c:	687a      	ldr	r2, [r7, #4]
 801162e:	683b      	ldr	r3, [r7, #0]
 8011630:	781b      	ldrb	r3, [r3, #0]
 8011632:	009b      	lsls	r3, r3, #2
 8011634:	4413      	add	r3, r2
 8011636:	881b      	ldrh	r3, [r3, #0]
 8011638:	b29b      	uxth	r3, r3
 801163a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801163e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011642:	877b      	strh	r3, [r7, #58]	; 0x3a
 8011644:	687a      	ldr	r2, [r7, #4]
 8011646:	683b      	ldr	r3, [r7, #0]
 8011648:	781b      	ldrb	r3, [r3, #0]
 801164a:	009b      	lsls	r3, r3, #2
 801164c:	441a      	add	r2, r3
 801164e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011650:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011654:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011658:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801165c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011660:	b29b      	uxth	r3, r3
 8011662:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011664:	687a      	ldr	r2, [r7, #4]
 8011666:	683b      	ldr	r3, [r7, #0]
 8011668:	781b      	ldrb	r3, [r3, #0]
 801166a:	009b      	lsls	r3, r3, #2
 801166c:	4413      	add	r3, r2
 801166e:	881b      	ldrh	r3, [r3, #0]
 8011670:	b29b      	uxth	r3, r3
 8011672:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801167a:	873b      	strh	r3, [r7, #56]	; 0x38
 801167c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801167e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8011682:	873b      	strh	r3, [r7, #56]	; 0x38
 8011684:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8011686:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 801168a:	873b      	strh	r3, [r7, #56]	; 0x38
 801168c:	687a      	ldr	r2, [r7, #4]
 801168e:	683b      	ldr	r3, [r7, #0]
 8011690:	781b      	ldrb	r3, [r3, #0]
 8011692:	009b      	lsls	r3, r3, #2
 8011694:	441a      	add	r2, r3
 8011696:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8011698:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801169c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80116a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80116a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80116a8:	b29b      	uxth	r3, r3
 80116aa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80116ac:	687a      	ldr	r2, [r7, #4]
 80116ae:	683b      	ldr	r3, [r7, #0]
 80116b0:	781b      	ldrb	r3, [r3, #0]
 80116b2:	009b      	lsls	r3, r3, #2
 80116b4:	4413      	add	r3, r2
 80116b6:	881b      	ldrh	r3, [r3, #0]
 80116b8:	b29b      	uxth	r3, r3
 80116ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80116be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80116c2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80116c4:	687a      	ldr	r2, [r7, #4]
 80116c6:	683b      	ldr	r3, [r7, #0]
 80116c8:	781b      	ldrb	r3, [r3, #0]
 80116ca:	009b      	lsls	r3, r3, #2
 80116cc:	441a      	add	r2, r3
 80116ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80116d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80116d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80116d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80116dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80116e0:	b29b      	uxth	r3, r3
 80116e2:	8013      	strh	r3, [r2, #0]
 80116e4:	e0bc      	b.n	8011860 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80116e6:	687a      	ldr	r2, [r7, #4]
 80116e8:	683b      	ldr	r3, [r7, #0]
 80116ea:	781b      	ldrb	r3, [r3, #0]
 80116ec:	009b      	lsls	r3, r3, #2
 80116ee:	4413      	add	r3, r2
 80116f0:	881b      	ldrh	r3, [r3, #0]
 80116f2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80116f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80116fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d01d      	beq.n	801173e <USB_ActivateEndpoint+0x5f6>
 8011702:	687a      	ldr	r2, [r7, #4]
 8011704:	683b      	ldr	r3, [r7, #0]
 8011706:	781b      	ldrb	r3, [r3, #0]
 8011708:	009b      	lsls	r3, r3, #2
 801170a:	4413      	add	r3, r2
 801170c:	881b      	ldrh	r3, [r3, #0]
 801170e:	b29b      	uxth	r3, r3
 8011710:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011718:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 801171c:	687a      	ldr	r2, [r7, #4]
 801171e:	683b      	ldr	r3, [r7, #0]
 8011720:	781b      	ldrb	r3, [r3, #0]
 8011722:	009b      	lsls	r3, r3, #2
 8011724:	441a      	add	r2, r3
 8011726:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 801172a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801172e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011732:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801173a:	b29b      	uxth	r3, r3
 801173c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801173e:	687a      	ldr	r2, [r7, #4]
 8011740:	683b      	ldr	r3, [r7, #0]
 8011742:	781b      	ldrb	r3, [r3, #0]
 8011744:	009b      	lsls	r3, r3, #2
 8011746:	4413      	add	r3, r2
 8011748:	881b      	ldrh	r3, [r3, #0]
 801174a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 801174e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8011752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011756:	2b00      	cmp	r3, #0
 8011758:	d01d      	beq.n	8011796 <USB_ActivateEndpoint+0x64e>
 801175a:	687a      	ldr	r2, [r7, #4]
 801175c:	683b      	ldr	r3, [r7, #0]
 801175e:	781b      	ldrb	r3, [r3, #0]
 8011760:	009b      	lsls	r3, r3, #2
 8011762:	4413      	add	r3, r2
 8011764:	881b      	ldrh	r3, [r3, #0]
 8011766:	b29b      	uxth	r3, r3
 8011768:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801176c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011770:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8011774:	687a      	ldr	r2, [r7, #4]
 8011776:	683b      	ldr	r3, [r7, #0]
 8011778:	781b      	ldrb	r3, [r3, #0]
 801177a:	009b      	lsls	r3, r3, #2
 801177c:	441a      	add	r2, r3
 801177e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8011782:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011786:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801178a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801178e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011792:	b29b      	uxth	r3, r3
 8011794:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011796:	683b      	ldr	r3, [r7, #0]
 8011798:	78db      	ldrb	r3, [r3, #3]
 801179a:	2b01      	cmp	r3, #1
 801179c:	d024      	beq.n	80117e8 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801179e:	687a      	ldr	r2, [r7, #4]
 80117a0:	683b      	ldr	r3, [r7, #0]
 80117a2:	781b      	ldrb	r3, [r3, #0]
 80117a4:	009b      	lsls	r3, r3, #2
 80117a6:	4413      	add	r3, r2
 80117a8:	881b      	ldrh	r3, [r3, #0]
 80117aa:	b29b      	uxth	r3, r3
 80117ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80117b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80117b4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80117b8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80117bc:	f083 0320 	eor.w	r3, r3, #32
 80117c0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80117c4:	687a      	ldr	r2, [r7, #4]
 80117c6:	683b      	ldr	r3, [r7, #0]
 80117c8:	781b      	ldrb	r3, [r3, #0]
 80117ca:	009b      	lsls	r3, r3, #2
 80117cc:	441a      	add	r2, r3
 80117ce:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80117d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80117d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80117da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80117de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80117e2:	b29b      	uxth	r3, r3
 80117e4:	8013      	strh	r3, [r2, #0]
 80117e6:	e01d      	b.n	8011824 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80117e8:	687a      	ldr	r2, [r7, #4]
 80117ea:	683b      	ldr	r3, [r7, #0]
 80117ec:	781b      	ldrb	r3, [r3, #0]
 80117ee:	009b      	lsls	r3, r3, #2
 80117f0:	4413      	add	r3, r2
 80117f2:	881b      	ldrh	r3, [r3, #0]
 80117f4:	b29b      	uxth	r3, r3
 80117f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80117fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80117fe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8011802:	687a      	ldr	r2, [r7, #4]
 8011804:	683b      	ldr	r3, [r7, #0]
 8011806:	781b      	ldrb	r3, [r3, #0]
 8011808:	009b      	lsls	r3, r3, #2
 801180a:	441a      	add	r2, r3
 801180c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011810:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011814:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011818:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801181c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011820:	b29b      	uxth	r3, r3
 8011822:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011824:	687a      	ldr	r2, [r7, #4]
 8011826:	683b      	ldr	r3, [r7, #0]
 8011828:	781b      	ldrb	r3, [r3, #0]
 801182a:	009b      	lsls	r3, r3, #2
 801182c:	4413      	add	r3, r2
 801182e:	881b      	ldrh	r3, [r3, #0]
 8011830:	b29b      	uxth	r3, r3
 8011832:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801183a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801183e:	687a      	ldr	r2, [r7, #4]
 8011840:	683b      	ldr	r3, [r7, #0]
 8011842:	781b      	ldrb	r3, [r3, #0]
 8011844:	009b      	lsls	r3, r3, #2
 8011846:	441a      	add	r2, r3
 8011848:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801184c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011850:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011854:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801185c:	b29b      	uxth	r3, r3
 801185e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8011860:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8011864:	4618      	mov	r0, r3
 8011866:	3774      	adds	r7, #116	; 0x74
 8011868:	46bd      	mov	sp, r7
 801186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801186e:	4770      	bx	lr

08011870 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011870:	b480      	push	{r7}
 8011872:	b08d      	sub	sp, #52	; 0x34
 8011874:	af00      	add	r7, sp, #0
 8011876:	6078      	str	r0, [r7, #4]
 8011878:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801187a:	683b      	ldr	r3, [r7, #0]
 801187c:	7b1b      	ldrb	r3, [r3, #12]
 801187e:	2b00      	cmp	r3, #0
 8011880:	f040 808e 	bne.w	80119a0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8011884:	683b      	ldr	r3, [r7, #0]
 8011886:	785b      	ldrb	r3, [r3, #1]
 8011888:	2b00      	cmp	r3, #0
 801188a:	d044      	beq.n	8011916 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801188c:	687a      	ldr	r2, [r7, #4]
 801188e:	683b      	ldr	r3, [r7, #0]
 8011890:	781b      	ldrb	r3, [r3, #0]
 8011892:	009b      	lsls	r3, r3, #2
 8011894:	4413      	add	r3, r2
 8011896:	881b      	ldrh	r3, [r3, #0]
 8011898:	81bb      	strh	r3, [r7, #12]
 801189a:	89bb      	ldrh	r3, [r7, #12]
 801189c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d01b      	beq.n	80118dc <USB_DeactivateEndpoint+0x6c>
 80118a4:	687a      	ldr	r2, [r7, #4]
 80118a6:	683b      	ldr	r3, [r7, #0]
 80118a8:	781b      	ldrb	r3, [r3, #0]
 80118aa:	009b      	lsls	r3, r3, #2
 80118ac:	4413      	add	r3, r2
 80118ae:	881b      	ldrh	r3, [r3, #0]
 80118b0:	b29b      	uxth	r3, r3
 80118b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80118b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80118ba:	817b      	strh	r3, [r7, #10]
 80118bc:	687a      	ldr	r2, [r7, #4]
 80118be:	683b      	ldr	r3, [r7, #0]
 80118c0:	781b      	ldrb	r3, [r3, #0]
 80118c2:	009b      	lsls	r3, r3, #2
 80118c4:	441a      	add	r2, r3
 80118c6:	897b      	ldrh	r3, [r7, #10]
 80118c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80118cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80118d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80118d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80118d8:	b29b      	uxth	r3, r3
 80118da:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80118dc:	687a      	ldr	r2, [r7, #4]
 80118de:	683b      	ldr	r3, [r7, #0]
 80118e0:	781b      	ldrb	r3, [r3, #0]
 80118e2:	009b      	lsls	r3, r3, #2
 80118e4:	4413      	add	r3, r2
 80118e6:	881b      	ldrh	r3, [r3, #0]
 80118e8:	b29b      	uxth	r3, r3
 80118ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80118ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80118f2:	813b      	strh	r3, [r7, #8]
 80118f4:	687a      	ldr	r2, [r7, #4]
 80118f6:	683b      	ldr	r3, [r7, #0]
 80118f8:	781b      	ldrb	r3, [r3, #0]
 80118fa:	009b      	lsls	r3, r3, #2
 80118fc:	441a      	add	r2, r3
 80118fe:	893b      	ldrh	r3, [r7, #8]
 8011900:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011904:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011908:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801190c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011910:	b29b      	uxth	r3, r3
 8011912:	8013      	strh	r3, [r2, #0]
 8011914:	e192      	b.n	8011c3c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011916:	687a      	ldr	r2, [r7, #4]
 8011918:	683b      	ldr	r3, [r7, #0]
 801191a:	781b      	ldrb	r3, [r3, #0]
 801191c:	009b      	lsls	r3, r3, #2
 801191e:	4413      	add	r3, r2
 8011920:	881b      	ldrh	r3, [r3, #0]
 8011922:	827b      	strh	r3, [r7, #18]
 8011924:	8a7b      	ldrh	r3, [r7, #18]
 8011926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801192a:	2b00      	cmp	r3, #0
 801192c:	d01b      	beq.n	8011966 <USB_DeactivateEndpoint+0xf6>
 801192e:	687a      	ldr	r2, [r7, #4]
 8011930:	683b      	ldr	r3, [r7, #0]
 8011932:	781b      	ldrb	r3, [r3, #0]
 8011934:	009b      	lsls	r3, r3, #2
 8011936:	4413      	add	r3, r2
 8011938:	881b      	ldrh	r3, [r3, #0]
 801193a:	b29b      	uxth	r3, r3
 801193c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011944:	823b      	strh	r3, [r7, #16]
 8011946:	687a      	ldr	r2, [r7, #4]
 8011948:	683b      	ldr	r3, [r7, #0]
 801194a:	781b      	ldrb	r3, [r3, #0]
 801194c:	009b      	lsls	r3, r3, #2
 801194e:	441a      	add	r2, r3
 8011950:	8a3b      	ldrh	r3, [r7, #16]
 8011952:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011956:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801195a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801195e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011962:	b29b      	uxth	r3, r3
 8011964:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011966:	687a      	ldr	r2, [r7, #4]
 8011968:	683b      	ldr	r3, [r7, #0]
 801196a:	781b      	ldrb	r3, [r3, #0]
 801196c:	009b      	lsls	r3, r3, #2
 801196e:	4413      	add	r3, r2
 8011970:	881b      	ldrh	r3, [r3, #0]
 8011972:	b29b      	uxth	r3, r3
 8011974:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801197c:	81fb      	strh	r3, [r7, #14]
 801197e:	687a      	ldr	r2, [r7, #4]
 8011980:	683b      	ldr	r3, [r7, #0]
 8011982:	781b      	ldrb	r3, [r3, #0]
 8011984:	009b      	lsls	r3, r3, #2
 8011986:	441a      	add	r2, r3
 8011988:	89fb      	ldrh	r3, [r7, #14]
 801198a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801198e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801199a:	b29b      	uxth	r3, r3
 801199c:	8013      	strh	r3, [r2, #0]
 801199e:	e14d      	b.n	8011c3c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80119a0:	683b      	ldr	r3, [r7, #0]
 80119a2:	785b      	ldrb	r3, [r3, #1]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	f040 80a5 	bne.w	8011af4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80119aa:	687a      	ldr	r2, [r7, #4]
 80119ac:	683b      	ldr	r3, [r7, #0]
 80119ae:	781b      	ldrb	r3, [r3, #0]
 80119b0:	009b      	lsls	r3, r3, #2
 80119b2:	4413      	add	r3, r2
 80119b4:	881b      	ldrh	r3, [r3, #0]
 80119b6:	843b      	strh	r3, [r7, #32]
 80119b8:	8c3b      	ldrh	r3, [r7, #32]
 80119ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d01b      	beq.n	80119fa <USB_DeactivateEndpoint+0x18a>
 80119c2:	687a      	ldr	r2, [r7, #4]
 80119c4:	683b      	ldr	r3, [r7, #0]
 80119c6:	781b      	ldrb	r3, [r3, #0]
 80119c8:	009b      	lsls	r3, r3, #2
 80119ca:	4413      	add	r3, r2
 80119cc:	881b      	ldrh	r3, [r3, #0]
 80119ce:	b29b      	uxth	r3, r3
 80119d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80119d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80119d8:	83fb      	strh	r3, [r7, #30]
 80119da:	687a      	ldr	r2, [r7, #4]
 80119dc:	683b      	ldr	r3, [r7, #0]
 80119de:	781b      	ldrb	r3, [r3, #0]
 80119e0:	009b      	lsls	r3, r3, #2
 80119e2:	441a      	add	r2, r3
 80119e4:	8bfb      	ldrh	r3, [r7, #30]
 80119e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80119ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80119ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80119f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80119f6:	b29b      	uxth	r3, r3
 80119f8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80119fa:	687a      	ldr	r2, [r7, #4]
 80119fc:	683b      	ldr	r3, [r7, #0]
 80119fe:	781b      	ldrb	r3, [r3, #0]
 8011a00:	009b      	lsls	r3, r3, #2
 8011a02:	4413      	add	r3, r2
 8011a04:	881b      	ldrh	r3, [r3, #0]
 8011a06:	83bb      	strh	r3, [r7, #28]
 8011a08:	8bbb      	ldrh	r3, [r7, #28]
 8011a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d01b      	beq.n	8011a4a <USB_DeactivateEndpoint+0x1da>
 8011a12:	687a      	ldr	r2, [r7, #4]
 8011a14:	683b      	ldr	r3, [r7, #0]
 8011a16:	781b      	ldrb	r3, [r3, #0]
 8011a18:	009b      	lsls	r3, r3, #2
 8011a1a:	4413      	add	r3, r2
 8011a1c:	881b      	ldrh	r3, [r3, #0]
 8011a1e:	b29b      	uxth	r3, r3
 8011a20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011a28:	837b      	strh	r3, [r7, #26]
 8011a2a:	687a      	ldr	r2, [r7, #4]
 8011a2c:	683b      	ldr	r3, [r7, #0]
 8011a2e:	781b      	ldrb	r3, [r3, #0]
 8011a30:	009b      	lsls	r3, r3, #2
 8011a32:	441a      	add	r2, r3
 8011a34:	8b7b      	ldrh	r3, [r7, #26]
 8011a36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011a3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011a3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011a42:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011a46:	b29b      	uxth	r3, r3
 8011a48:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8011a4a:	687a      	ldr	r2, [r7, #4]
 8011a4c:	683b      	ldr	r3, [r7, #0]
 8011a4e:	781b      	ldrb	r3, [r3, #0]
 8011a50:	009b      	lsls	r3, r3, #2
 8011a52:	4413      	add	r3, r2
 8011a54:	881b      	ldrh	r3, [r3, #0]
 8011a56:	b29b      	uxth	r3, r3
 8011a58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011a60:	833b      	strh	r3, [r7, #24]
 8011a62:	687a      	ldr	r2, [r7, #4]
 8011a64:	683b      	ldr	r3, [r7, #0]
 8011a66:	781b      	ldrb	r3, [r3, #0]
 8011a68:	009b      	lsls	r3, r3, #2
 8011a6a:	441a      	add	r2, r3
 8011a6c:	8b3b      	ldrh	r3, [r7, #24]
 8011a6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011a72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011a7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011a7e:	b29b      	uxth	r3, r3
 8011a80:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011a82:	687a      	ldr	r2, [r7, #4]
 8011a84:	683b      	ldr	r3, [r7, #0]
 8011a86:	781b      	ldrb	r3, [r3, #0]
 8011a88:	009b      	lsls	r3, r3, #2
 8011a8a:	4413      	add	r3, r2
 8011a8c:	881b      	ldrh	r3, [r3, #0]
 8011a8e:	b29b      	uxth	r3, r3
 8011a90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011a94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011a98:	82fb      	strh	r3, [r7, #22]
 8011a9a:	687a      	ldr	r2, [r7, #4]
 8011a9c:	683b      	ldr	r3, [r7, #0]
 8011a9e:	781b      	ldrb	r3, [r3, #0]
 8011aa0:	009b      	lsls	r3, r3, #2
 8011aa2:	441a      	add	r2, r3
 8011aa4:	8afb      	ldrh	r3, [r7, #22]
 8011aa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011aaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011aae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ab6:	b29b      	uxth	r3, r3
 8011ab8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011aba:	687a      	ldr	r2, [r7, #4]
 8011abc:	683b      	ldr	r3, [r7, #0]
 8011abe:	781b      	ldrb	r3, [r3, #0]
 8011ac0:	009b      	lsls	r3, r3, #2
 8011ac2:	4413      	add	r3, r2
 8011ac4:	881b      	ldrh	r3, [r3, #0]
 8011ac6:	b29b      	uxth	r3, r3
 8011ac8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011acc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011ad0:	82bb      	strh	r3, [r7, #20]
 8011ad2:	687a      	ldr	r2, [r7, #4]
 8011ad4:	683b      	ldr	r3, [r7, #0]
 8011ad6:	781b      	ldrb	r3, [r3, #0]
 8011ad8:	009b      	lsls	r3, r3, #2
 8011ada:	441a      	add	r2, r3
 8011adc:	8abb      	ldrh	r3, [r7, #20]
 8011ade:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011ae2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011aee:	b29b      	uxth	r3, r3
 8011af0:	8013      	strh	r3, [r2, #0]
 8011af2:	e0a3      	b.n	8011c3c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011af4:	687a      	ldr	r2, [r7, #4]
 8011af6:	683b      	ldr	r3, [r7, #0]
 8011af8:	781b      	ldrb	r3, [r3, #0]
 8011afa:	009b      	lsls	r3, r3, #2
 8011afc:	4413      	add	r3, r2
 8011afe:	881b      	ldrh	r3, [r3, #0]
 8011b00:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8011b02:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011b04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d01b      	beq.n	8011b44 <USB_DeactivateEndpoint+0x2d4>
 8011b0c:	687a      	ldr	r2, [r7, #4]
 8011b0e:	683b      	ldr	r3, [r7, #0]
 8011b10:	781b      	ldrb	r3, [r3, #0]
 8011b12:	009b      	lsls	r3, r3, #2
 8011b14:	4413      	add	r3, r2
 8011b16:	881b      	ldrh	r3, [r3, #0]
 8011b18:	b29b      	uxth	r3, r3
 8011b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011b22:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8011b24:	687a      	ldr	r2, [r7, #4]
 8011b26:	683b      	ldr	r3, [r7, #0]
 8011b28:	781b      	ldrb	r3, [r3, #0]
 8011b2a:	009b      	lsls	r3, r3, #2
 8011b2c:	441a      	add	r2, r3
 8011b2e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011b30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011b34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011b38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b40:	b29b      	uxth	r3, r3
 8011b42:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011b44:	687a      	ldr	r2, [r7, #4]
 8011b46:	683b      	ldr	r3, [r7, #0]
 8011b48:	781b      	ldrb	r3, [r3, #0]
 8011b4a:	009b      	lsls	r3, r3, #2
 8011b4c:	4413      	add	r3, r2
 8011b4e:	881b      	ldrh	r3, [r3, #0]
 8011b50:	857b      	strh	r3, [r7, #42]	; 0x2a
 8011b52:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d01b      	beq.n	8011b94 <USB_DeactivateEndpoint+0x324>
 8011b5c:	687a      	ldr	r2, [r7, #4]
 8011b5e:	683b      	ldr	r3, [r7, #0]
 8011b60:	781b      	ldrb	r3, [r3, #0]
 8011b62:	009b      	lsls	r3, r3, #2
 8011b64:	4413      	add	r3, r2
 8011b66:	881b      	ldrh	r3, [r3, #0]
 8011b68:	b29b      	uxth	r3, r3
 8011b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011b72:	853b      	strh	r3, [r7, #40]	; 0x28
 8011b74:	687a      	ldr	r2, [r7, #4]
 8011b76:	683b      	ldr	r3, [r7, #0]
 8011b78:	781b      	ldrb	r3, [r3, #0]
 8011b7a:	009b      	lsls	r3, r3, #2
 8011b7c:	441a      	add	r2, r3
 8011b7e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011b80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011b84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011b88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011b8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011b90:	b29b      	uxth	r3, r3
 8011b92:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8011b94:	687a      	ldr	r2, [r7, #4]
 8011b96:	683b      	ldr	r3, [r7, #0]
 8011b98:	781b      	ldrb	r3, [r3, #0]
 8011b9a:	009b      	lsls	r3, r3, #2
 8011b9c:	4413      	add	r3, r2
 8011b9e:	881b      	ldrh	r3, [r3, #0]
 8011ba0:	b29b      	uxth	r3, r3
 8011ba2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011baa:	84fb      	strh	r3, [r7, #38]	; 0x26
 8011bac:	687a      	ldr	r2, [r7, #4]
 8011bae:	683b      	ldr	r3, [r7, #0]
 8011bb0:	781b      	ldrb	r3, [r3, #0]
 8011bb2:	009b      	lsls	r3, r3, #2
 8011bb4:	441a      	add	r2, r3
 8011bb6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011bb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011bbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011bc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011bc8:	b29b      	uxth	r3, r3
 8011bca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011bcc:	687a      	ldr	r2, [r7, #4]
 8011bce:	683b      	ldr	r3, [r7, #0]
 8011bd0:	781b      	ldrb	r3, [r3, #0]
 8011bd2:	009b      	lsls	r3, r3, #2
 8011bd4:	4413      	add	r3, r2
 8011bd6:	881b      	ldrh	r3, [r3, #0]
 8011bd8:	b29b      	uxth	r3, r3
 8011bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011bde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011be2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8011be4:	687a      	ldr	r2, [r7, #4]
 8011be6:	683b      	ldr	r3, [r7, #0]
 8011be8:	781b      	ldrb	r3, [r3, #0]
 8011bea:	009b      	lsls	r3, r3, #2
 8011bec:	441a      	add	r2, r3
 8011bee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011bf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011bf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011bf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c00:	b29b      	uxth	r3, r3
 8011c02:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011c04:	687a      	ldr	r2, [r7, #4]
 8011c06:	683b      	ldr	r3, [r7, #0]
 8011c08:	781b      	ldrb	r3, [r3, #0]
 8011c0a:	009b      	lsls	r3, r3, #2
 8011c0c:	4413      	add	r3, r2
 8011c0e:	881b      	ldrh	r3, [r3, #0]
 8011c10:	b29b      	uxth	r3, r3
 8011c12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011c1a:	847b      	strh	r3, [r7, #34]	; 0x22
 8011c1c:	687a      	ldr	r2, [r7, #4]
 8011c1e:	683b      	ldr	r3, [r7, #0]
 8011c20:	781b      	ldrb	r3, [r3, #0]
 8011c22:	009b      	lsls	r3, r3, #2
 8011c24:	441a      	add	r2, r3
 8011c26:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011c28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011c2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011c30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c38:	b29b      	uxth	r3, r3
 8011c3a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8011c3c:	2300      	movs	r3, #0
}
 8011c3e:	4618      	mov	r0, r3
 8011c40:	3734      	adds	r7, #52	; 0x34
 8011c42:	46bd      	mov	sp, r7
 8011c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c48:	4770      	bx	lr

08011c4a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011c4a:	b580      	push	{r7, lr}
 8011c4c:	b0c2      	sub	sp, #264	; 0x108
 8011c4e:	af00      	add	r7, sp, #0
 8011c50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011c58:	6018      	str	r0, [r3, #0]
 8011c5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c62:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011c64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	785b      	ldrb	r3, [r3, #1]
 8011c70:	2b01      	cmp	r3, #1
 8011c72:	f040 867b 	bne.w	801296c <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8011c76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	699a      	ldr	r2, [r3, #24]
 8011c82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	691b      	ldr	r3, [r3, #16]
 8011c8e:	429a      	cmp	r2, r3
 8011c90:	d908      	bls.n	8011ca4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8011c92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	691b      	ldr	r3, [r3, #16]
 8011c9e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8011ca2:	e007      	b.n	8011cb4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8011ca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ca8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	699b      	ldr	r3, [r3, #24]
 8011cb0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8011cb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	7b1b      	ldrb	r3, [r3, #12]
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d13a      	bne.n	8011d3a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8011cc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	6959      	ldr	r1, [r3, #20]
 8011cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	88da      	ldrh	r2, [r3, #6]
 8011cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011ce0:	b29b      	uxth	r3, r3
 8011ce2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011ce6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011cea:	6800      	ldr	r0, [r0, #0]
 8011cec:	f001 fc1d 	bl	801352a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8011cf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cf4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	613b      	str	r3, [r7, #16]
 8011cfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011d0a:	b29b      	uxth	r3, r3
 8011d0c:	461a      	mov	r2, r3
 8011d0e:	693b      	ldr	r3, [r7, #16]
 8011d10:	4413      	add	r3, r2
 8011d12:	613b      	str	r3, [r7, #16]
 8011d14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	781b      	ldrb	r3, [r3, #0]
 8011d20:	00da      	lsls	r2, r3, #3
 8011d22:	693b      	ldr	r3, [r7, #16]
 8011d24:	4413      	add	r3, r2
 8011d26:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011d2a:	60fb      	str	r3, [r7, #12]
 8011d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d30:	b29a      	uxth	r2, r3
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	801a      	strh	r2, [r3, #0]
 8011d36:	f000 bde3 	b.w	8012900 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8011d3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	78db      	ldrb	r3, [r3, #3]
 8011d46:	2b02      	cmp	r3, #2
 8011d48:	f040 843a 	bne.w	80125c0 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8011d4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	6a1a      	ldr	r2, [r3, #32]
 8011d58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	691b      	ldr	r3, [r3, #16]
 8011d64:	429a      	cmp	r2, r3
 8011d66:	f240 83b7 	bls.w	80124d8 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8011d6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011d72:	681a      	ldr	r2, [r3, #0]
 8011d74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	781b      	ldrb	r3, [r3, #0]
 8011d80:	009b      	lsls	r3, r3, #2
 8011d82:	4413      	add	r3, r2
 8011d84:	881b      	ldrh	r3, [r3, #0]
 8011d86:	b29b      	uxth	r3, r3
 8011d88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011d90:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8011d94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011d9c:	681a      	ldr	r2, [r3, #0]
 8011d9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011da2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	781b      	ldrb	r3, [r3, #0]
 8011daa:	009b      	lsls	r3, r3, #2
 8011dac:	441a      	add	r2, r3
 8011dae:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8011db2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011db6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011dba:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8011dbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011dc2:	b29b      	uxth	r3, r3
 8011dc4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8011dc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011dca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	6a1a      	ldr	r2, [r3, #32]
 8011dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011dd6:	1ad2      	subs	r2, r2, r3
 8011dd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ddc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8011de4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011de8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011dec:	681a      	ldr	r2, [r3, #0]
 8011dee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011df2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	781b      	ldrb	r3, [r3, #0]
 8011dfa:	009b      	lsls	r3, r3, #2
 8011dfc:	4413      	add	r3, r2
 8011dfe:	881b      	ldrh	r3, [r3, #0]
 8011e00:	b29b      	uxth	r3, r3
 8011e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	f000 81b3 	beq.w	8012172 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011e0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	633b      	str	r3, [r7, #48]	; 0x30
 8011e18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	785b      	ldrb	r3, [r3, #1]
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d16d      	bne.n	8011f04 <USB_EPStartXfer+0x2ba>
 8011e28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	62bb      	str	r3, [r7, #40]	; 0x28
 8011e34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011e42:	b29b      	uxth	r3, r3
 8011e44:	461a      	mov	r2, r3
 8011e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e48:	4413      	add	r3, r2
 8011e4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8011e4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	781b      	ldrb	r3, [r3, #0]
 8011e58:	00da      	lsls	r2, r3, #3
 8011e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e5c:	4413      	add	r3, r2
 8011e5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011e62:	627b      	str	r3, [r7, #36]	; 0x24
 8011e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e68:	2b3e      	cmp	r3, #62	; 0x3e
 8011e6a:	d91c      	bls.n	8011ea6 <USB_EPStartXfer+0x25c>
 8011e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e70:	095b      	lsrs	r3, r3, #5
 8011e72:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8011e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e7a:	f003 031f 	and.w	r3, r3, #31
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d104      	bne.n	8011e8c <USB_EPStartXfer+0x242>
 8011e82:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011e86:	3b01      	subs	r3, #1
 8011e88:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8011e8c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011e90:	b29b      	uxth	r3, r3
 8011e92:	029b      	lsls	r3, r3, #10
 8011e94:	b29b      	uxth	r3, r3
 8011e96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011e9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011e9e:	b29a      	uxth	r2, r3
 8011ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ea2:	801a      	strh	r2, [r3, #0]
 8011ea4:	e053      	b.n	8011f4e <USB_EPStartXfer+0x304>
 8011ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d112      	bne.n	8011ed4 <USB_EPStartXfer+0x28a>
 8011eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eb0:	881b      	ldrh	r3, [r3, #0]
 8011eb2:	b29b      	uxth	r3, r3
 8011eb4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8011eb8:	b29a      	uxth	r2, r3
 8011eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ebc:	801a      	strh	r2, [r3, #0]
 8011ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ec0:	881b      	ldrh	r3, [r3, #0]
 8011ec2:	b29b      	uxth	r3, r3
 8011ec4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011ec8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011ecc:	b29a      	uxth	r2, r3
 8011ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ed0:	801a      	strh	r2, [r3, #0]
 8011ed2:	e03c      	b.n	8011f4e <USB_EPStartXfer+0x304>
 8011ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011ed8:	085b      	lsrs	r3, r3, #1
 8011eda:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8011ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011ee2:	f003 0301 	and.w	r3, r3, #1
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d004      	beq.n	8011ef4 <USB_EPStartXfer+0x2aa>
 8011eea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011eee:	3301      	adds	r3, #1
 8011ef0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8011ef4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011ef8:	b29b      	uxth	r3, r3
 8011efa:	029b      	lsls	r3, r3, #10
 8011efc:	b29a      	uxth	r2, r3
 8011efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f00:	801a      	strh	r2, [r3, #0]
 8011f02:	e024      	b.n	8011f4e <USB_EPStartXfer+0x304>
 8011f04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	785b      	ldrb	r3, [r3, #1]
 8011f10:	2b01      	cmp	r3, #1
 8011f12:	d11c      	bne.n	8011f4e <USB_EPStartXfer+0x304>
 8011f14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011f22:	b29b      	uxth	r3, r3
 8011f24:	461a      	mov	r2, r3
 8011f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f28:	4413      	add	r3, r2
 8011f2a:	633b      	str	r3, [r7, #48]	; 0x30
 8011f2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	781b      	ldrb	r3, [r3, #0]
 8011f38:	00da      	lsls	r2, r3, #3
 8011f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f3c:	4413      	add	r3, r2
 8011f3e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011f42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011f48:	b29a      	uxth	r2, r3
 8011f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f4c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8011f4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	895b      	ldrh	r3, [r3, #10]
 8011f5a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011f5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	6959      	ldr	r1, [r3, #20]
 8011f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011f6e:	b29b      	uxth	r3, r3
 8011f70:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011f74:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011f78:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011f7c:	6800      	ldr	r0, [r0, #0]
 8011f7e:	f001 fad4 	bl	801352a <USB_WritePMA>
            ep->xfer_buff += len;
 8011f82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	695a      	ldr	r2, [r3, #20]
 8011f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011f92:	441a      	add	r2, r3
 8011f94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8011fa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	6a1a      	ldr	r2, [r3, #32]
 8011fac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	691b      	ldr	r3, [r3, #16]
 8011fb8:	429a      	cmp	r2, r3
 8011fba:	d90f      	bls.n	8011fdc <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8011fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	6a1a      	ldr	r2, [r3, #32]
 8011fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011fcc:	1ad2      	subs	r2, r2, r3
 8011fce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	621a      	str	r2, [r3, #32]
 8011fda:	e00e      	b.n	8011ffa <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8011fdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fe0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	6a1b      	ldr	r3, [r3, #32]
 8011fe8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8011fec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ff0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	2200      	movs	r2, #0
 8011ff8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8011ffa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ffe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	785b      	ldrb	r3, [r3, #1]
 8012006:	2b00      	cmp	r3, #0
 8012008:	d16d      	bne.n	80120e6 <USB_EPStartXfer+0x49c>
 801200a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801200e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	61bb      	str	r3, [r7, #24]
 8012016:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801201a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012024:	b29b      	uxth	r3, r3
 8012026:	461a      	mov	r2, r3
 8012028:	69bb      	ldr	r3, [r7, #24]
 801202a:	4413      	add	r3, r2
 801202c:	61bb      	str	r3, [r7, #24]
 801202e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012032:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	781b      	ldrb	r3, [r3, #0]
 801203a:	00da      	lsls	r2, r3, #3
 801203c:	69bb      	ldr	r3, [r7, #24]
 801203e:	4413      	add	r3, r2
 8012040:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012044:	617b      	str	r3, [r7, #20]
 8012046:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801204a:	2b3e      	cmp	r3, #62	; 0x3e
 801204c:	d91c      	bls.n	8012088 <USB_EPStartXfer+0x43e>
 801204e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012052:	095b      	lsrs	r3, r3, #5
 8012054:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8012058:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801205c:	f003 031f 	and.w	r3, r3, #31
 8012060:	2b00      	cmp	r3, #0
 8012062:	d104      	bne.n	801206e <USB_EPStartXfer+0x424>
 8012064:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012068:	3b01      	subs	r3, #1
 801206a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801206e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012072:	b29b      	uxth	r3, r3
 8012074:	029b      	lsls	r3, r3, #10
 8012076:	b29b      	uxth	r3, r3
 8012078:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801207c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012080:	b29a      	uxth	r2, r3
 8012082:	697b      	ldr	r3, [r7, #20]
 8012084:	801a      	strh	r2, [r3, #0]
 8012086:	e059      	b.n	801213c <USB_EPStartXfer+0x4f2>
 8012088:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801208c:	2b00      	cmp	r3, #0
 801208e:	d112      	bne.n	80120b6 <USB_EPStartXfer+0x46c>
 8012090:	697b      	ldr	r3, [r7, #20]
 8012092:	881b      	ldrh	r3, [r3, #0]
 8012094:	b29b      	uxth	r3, r3
 8012096:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801209a:	b29a      	uxth	r2, r3
 801209c:	697b      	ldr	r3, [r7, #20]
 801209e:	801a      	strh	r2, [r3, #0]
 80120a0:	697b      	ldr	r3, [r7, #20]
 80120a2:	881b      	ldrh	r3, [r3, #0]
 80120a4:	b29b      	uxth	r3, r3
 80120a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80120aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80120ae:	b29a      	uxth	r2, r3
 80120b0:	697b      	ldr	r3, [r7, #20]
 80120b2:	801a      	strh	r2, [r3, #0]
 80120b4:	e042      	b.n	801213c <USB_EPStartXfer+0x4f2>
 80120b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80120ba:	085b      	lsrs	r3, r3, #1
 80120bc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80120c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80120c4:	f003 0301 	and.w	r3, r3, #1
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d004      	beq.n	80120d6 <USB_EPStartXfer+0x48c>
 80120cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80120d0:	3301      	adds	r3, #1
 80120d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80120d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80120da:	b29b      	uxth	r3, r3
 80120dc:	029b      	lsls	r3, r3, #10
 80120de:	b29a      	uxth	r2, r3
 80120e0:	697b      	ldr	r3, [r7, #20]
 80120e2:	801a      	strh	r2, [r3, #0]
 80120e4:	e02a      	b.n	801213c <USB_EPStartXfer+0x4f2>
 80120e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80120ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	785b      	ldrb	r3, [r3, #1]
 80120f2:	2b01      	cmp	r3, #1
 80120f4:	d122      	bne.n	801213c <USB_EPStartXfer+0x4f2>
 80120f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80120fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	623b      	str	r3, [r7, #32]
 8012102:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012106:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012110:	b29b      	uxth	r3, r3
 8012112:	461a      	mov	r2, r3
 8012114:	6a3b      	ldr	r3, [r7, #32]
 8012116:	4413      	add	r3, r2
 8012118:	623b      	str	r3, [r7, #32]
 801211a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801211e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	781b      	ldrb	r3, [r3, #0]
 8012126:	00da      	lsls	r2, r3, #3
 8012128:	6a3b      	ldr	r3, [r7, #32]
 801212a:	4413      	add	r3, r2
 801212c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012130:	61fb      	str	r3, [r7, #28]
 8012132:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012136:	b29a      	uxth	r2, r3
 8012138:	69fb      	ldr	r3, [r7, #28]
 801213a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801213c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012140:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	891b      	ldrh	r3, [r3, #8]
 8012148:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801214c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012150:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	6959      	ldr	r1, [r3, #20]
 8012158:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801215c:	b29b      	uxth	r3, r3
 801215e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8012162:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8012166:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801216a:	6800      	ldr	r0, [r0, #0]
 801216c:	f001 f9dd 	bl	801352a <USB_WritePMA>
 8012170:	e3c6      	b.n	8012900 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8012172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012176:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	785b      	ldrb	r3, [r3, #1]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d16d      	bne.n	801225e <USB_EPStartXfer+0x614>
 8012182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012186:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	64bb      	str	r3, [r7, #72]	; 0x48
 801218e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012192:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801219c:	b29b      	uxth	r3, r3
 801219e:	461a      	mov	r2, r3
 80121a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80121a2:	4413      	add	r3, r2
 80121a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80121a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	781b      	ldrb	r3, [r3, #0]
 80121b2:	00da      	lsls	r2, r3, #3
 80121b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80121b6:	4413      	add	r3, r2
 80121b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80121bc:	647b      	str	r3, [r7, #68]	; 0x44
 80121be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80121c2:	2b3e      	cmp	r3, #62	; 0x3e
 80121c4:	d91c      	bls.n	8012200 <USB_EPStartXfer+0x5b6>
 80121c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80121ca:	095b      	lsrs	r3, r3, #5
 80121cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80121d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80121d4:	f003 031f 	and.w	r3, r3, #31
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d104      	bne.n	80121e6 <USB_EPStartXfer+0x59c>
 80121dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80121e0:	3b01      	subs	r3, #1
 80121e2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80121e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80121ea:	b29b      	uxth	r3, r3
 80121ec:	029b      	lsls	r3, r3, #10
 80121ee:	b29b      	uxth	r3, r3
 80121f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80121f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80121f8:	b29a      	uxth	r2, r3
 80121fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80121fc:	801a      	strh	r2, [r3, #0]
 80121fe:	e059      	b.n	80122b4 <USB_EPStartXfer+0x66a>
 8012200:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012204:	2b00      	cmp	r3, #0
 8012206:	d112      	bne.n	801222e <USB_EPStartXfer+0x5e4>
 8012208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801220a:	881b      	ldrh	r3, [r3, #0]
 801220c:	b29b      	uxth	r3, r3
 801220e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8012212:	b29a      	uxth	r2, r3
 8012214:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012216:	801a      	strh	r2, [r3, #0]
 8012218:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801221a:	881b      	ldrh	r3, [r3, #0]
 801221c:	b29b      	uxth	r3, r3
 801221e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012222:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012226:	b29a      	uxth	r2, r3
 8012228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801222a:	801a      	strh	r2, [r3, #0]
 801222c:	e042      	b.n	80122b4 <USB_EPStartXfer+0x66a>
 801222e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012232:	085b      	lsrs	r3, r3, #1
 8012234:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8012238:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801223c:	f003 0301 	and.w	r3, r3, #1
 8012240:	2b00      	cmp	r3, #0
 8012242:	d004      	beq.n	801224e <USB_EPStartXfer+0x604>
 8012244:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8012248:	3301      	adds	r3, #1
 801224a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801224e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8012252:	b29b      	uxth	r3, r3
 8012254:	029b      	lsls	r3, r3, #10
 8012256:	b29a      	uxth	r2, r3
 8012258:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801225a:	801a      	strh	r2, [r3, #0]
 801225c:	e02a      	b.n	80122b4 <USB_EPStartXfer+0x66a>
 801225e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012262:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	785b      	ldrb	r3, [r3, #1]
 801226a:	2b01      	cmp	r3, #1
 801226c:	d122      	bne.n	80122b4 <USB_EPStartXfer+0x66a>
 801226e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012272:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	653b      	str	r3, [r7, #80]	; 0x50
 801227a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801227e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012288:	b29b      	uxth	r3, r3
 801228a:	461a      	mov	r2, r3
 801228c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801228e:	4413      	add	r3, r2
 8012290:	653b      	str	r3, [r7, #80]	; 0x50
 8012292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012296:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	781b      	ldrb	r3, [r3, #0]
 801229e:	00da      	lsls	r2, r3, #3
 80122a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122a2:	4413      	add	r3, r2
 80122a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80122a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80122aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80122ae:	b29a      	uxth	r2, r3
 80122b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122b2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80122b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	891b      	ldrh	r3, [r3, #8]
 80122c0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80122c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	6959      	ldr	r1, [r3, #20]
 80122d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80122d4:	b29b      	uxth	r3, r3
 80122d6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80122da:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80122de:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80122e2:	6800      	ldr	r0, [r0, #0]
 80122e4:	f001 f921 	bl	801352a <USB_WritePMA>
            ep->xfer_buff += len;
 80122e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	695a      	ldr	r2, [r3, #20]
 80122f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80122f8:	441a      	add	r2, r3
 80122fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8012306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801230a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	6a1a      	ldr	r2, [r3, #32]
 8012312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012316:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	691b      	ldr	r3, [r3, #16]
 801231e:	429a      	cmp	r2, r3
 8012320:	d90f      	bls.n	8012342 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8012322:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012326:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	6a1a      	ldr	r2, [r3, #32]
 801232e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012332:	1ad2      	subs	r2, r2, r3
 8012334:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012338:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	621a      	str	r2, [r3, #32]
 8012340:	e00e      	b.n	8012360 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8012342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012346:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	6a1b      	ldr	r3, [r3, #32]
 801234e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8012352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012356:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	2200      	movs	r2, #0
 801235e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8012360:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012364:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	643b      	str	r3, [r7, #64]	; 0x40
 801236c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012370:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	785b      	ldrb	r3, [r3, #1]
 8012378:	2b00      	cmp	r3, #0
 801237a:	d16d      	bne.n	8012458 <USB_EPStartXfer+0x80e>
 801237c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012380:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	63bb      	str	r3, [r7, #56]	; 0x38
 8012388:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801238c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012396:	b29b      	uxth	r3, r3
 8012398:	461a      	mov	r2, r3
 801239a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801239c:	4413      	add	r3, r2
 801239e:	63bb      	str	r3, [r7, #56]	; 0x38
 80123a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80123a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	781b      	ldrb	r3, [r3, #0]
 80123ac:	00da      	lsls	r2, r3, #3
 80123ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123b0:	4413      	add	r3, r2
 80123b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80123b6:	637b      	str	r3, [r7, #52]	; 0x34
 80123b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80123bc:	2b3e      	cmp	r3, #62	; 0x3e
 80123be:	d91c      	bls.n	80123fa <USB_EPStartXfer+0x7b0>
 80123c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80123c4:	095b      	lsrs	r3, r3, #5
 80123c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80123ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80123ce:	f003 031f 	and.w	r3, r3, #31
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d104      	bne.n	80123e0 <USB_EPStartXfer+0x796>
 80123d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80123da:	3b01      	subs	r3, #1
 80123dc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80123e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80123e4:	b29b      	uxth	r3, r3
 80123e6:	029b      	lsls	r3, r3, #10
 80123e8:	b29b      	uxth	r3, r3
 80123ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80123ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80123f2:	b29a      	uxth	r2, r3
 80123f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123f6:	801a      	strh	r2, [r3, #0]
 80123f8:	e053      	b.n	80124a2 <USB_EPStartXfer+0x858>
 80123fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d112      	bne.n	8012428 <USB_EPStartXfer+0x7de>
 8012402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012404:	881b      	ldrh	r3, [r3, #0]
 8012406:	b29b      	uxth	r3, r3
 8012408:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801240c:	b29a      	uxth	r2, r3
 801240e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012410:	801a      	strh	r2, [r3, #0]
 8012412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012414:	881b      	ldrh	r3, [r3, #0]
 8012416:	b29b      	uxth	r3, r3
 8012418:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801241c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012420:	b29a      	uxth	r2, r3
 8012422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012424:	801a      	strh	r2, [r3, #0]
 8012426:	e03c      	b.n	80124a2 <USB_EPStartXfer+0x858>
 8012428:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801242c:	085b      	lsrs	r3, r3, #1
 801242e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8012432:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012436:	f003 0301 	and.w	r3, r3, #1
 801243a:	2b00      	cmp	r3, #0
 801243c:	d004      	beq.n	8012448 <USB_EPStartXfer+0x7fe>
 801243e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012442:	3301      	adds	r3, #1
 8012444:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8012448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801244c:	b29b      	uxth	r3, r3
 801244e:	029b      	lsls	r3, r3, #10
 8012450:	b29a      	uxth	r2, r3
 8012452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012454:	801a      	strh	r2, [r3, #0]
 8012456:	e024      	b.n	80124a2 <USB_EPStartXfer+0x858>
 8012458:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801245c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	785b      	ldrb	r3, [r3, #1]
 8012464:	2b01      	cmp	r3, #1
 8012466:	d11c      	bne.n	80124a2 <USB_EPStartXfer+0x858>
 8012468:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801246c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012476:	b29b      	uxth	r3, r3
 8012478:	461a      	mov	r2, r3
 801247a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801247c:	4413      	add	r3, r2
 801247e:	643b      	str	r3, [r7, #64]	; 0x40
 8012480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012484:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	781b      	ldrb	r3, [r3, #0]
 801248c:	00da      	lsls	r2, r3, #3
 801248e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012490:	4413      	add	r3, r2
 8012492:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012496:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012498:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801249c:	b29a      	uxth	r2, r3
 801249e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80124a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80124a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	895b      	ldrh	r3, [r3, #10]
 80124ae:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80124b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80124b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	6959      	ldr	r1, [r3, #20]
 80124be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80124c2:	b29b      	uxth	r3, r3
 80124c4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80124c8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80124cc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80124d0:	6800      	ldr	r0, [r0, #0]
 80124d2:	f001 f82a 	bl	801352a <USB_WritePMA>
 80124d6:	e213      	b.n	8012900 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80124d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80124dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	6a1b      	ldr	r3, [r3, #32]
 80124e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80124e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80124ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80124f0:	681a      	ldr	r2, [r3, #0]
 80124f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80124f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	781b      	ldrb	r3, [r3, #0]
 80124fe:	009b      	lsls	r3, r3, #2
 8012500:	4413      	add	r3, r2
 8012502:	881b      	ldrh	r3, [r3, #0]
 8012504:	b29b      	uxth	r3, r3
 8012506:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 801250a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801250e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8012512:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012516:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801251a:	681a      	ldr	r2, [r3, #0]
 801251c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012520:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	781b      	ldrb	r3, [r3, #0]
 8012528:	009b      	lsls	r3, r3, #2
 801252a:	441a      	add	r2, r3
 801252c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8012530:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012534:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012538:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801253c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012540:	b29b      	uxth	r3, r3
 8012542:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8012544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012548:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012554:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801255e:	b29b      	uxth	r3, r3
 8012560:	461a      	mov	r2, r3
 8012562:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012564:	4413      	add	r3, r2
 8012566:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801256c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	781b      	ldrb	r3, [r3, #0]
 8012574:	00da      	lsls	r2, r3, #3
 8012576:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012578:	4413      	add	r3, r2
 801257a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801257e:	65bb      	str	r3, [r7, #88]	; 0x58
 8012580:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012584:	b29a      	uxth	r2, r3
 8012586:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012588:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801258a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801258e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	891b      	ldrh	r3, [r3, #8]
 8012596:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801259a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801259e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	6959      	ldr	r1, [r3, #20]
 80125a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80125aa:	b29b      	uxth	r3, r3
 80125ac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80125b0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80125b4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80125b8:	6800      	ldr	r0, [r0, #0]
 80125ba:	f000 ffb6 	bl	801352a <USB_WritePMA>
 80125be:	e19f      	b.n	8012900 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80125c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80125c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	6a1a      	ldr	r2, [r3, #32]
 80125cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80125d0:	1ad2      	subs	r2, r2, r3
 80125d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80125d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80125de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80125e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80125e6:	681a      	ldr	r2, [r3, #0]
 80125e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80125ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	781b      	ldrb	r3, [r3, #0]
 80125f4:	009b      	lsls	r3, r3, #2
 80125f6:	4413      	add	r3, r2
 80125f8:	881b      	ldrh	r3, [r3, #0]
 80125fa:	b29b      	uxth	r3, r3
 80125fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012600:	2b00      	cmp	r3, #0
 8012602:	f000 80bc 	beq.w	801277e <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8012606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801260a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	673b      	str	r3, [r7, #112]	; 0x70
 8012612:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012616:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	785b      	ldrb	r3, [r3, #1]
 801261e:	2b00      	cmp	r3, #0
 8012620:	d16d      	bne.n	80126fe <USB_EPStartXfer+0xab4>
 8012622:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012626:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	66bb      	str	r3, [r7, #104]	; 0x68
 801262e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012632:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801263c:	b29b      	uxth	r3, r3
 801263e:	461a      	mov	r2, r3
 8012640:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012642:	4413      	add	r3, r2
 8012644:	66bb      	str	r3, [r7, #104]	; 0x68
 8012646:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801264a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	781b      	ldrb	r3, [r3, #0]
 8012652:	00da      	lsls	r2, r3, #3
 8012654:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012656:	4413      	add	r3, r2
 8012658:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801265c:	667b      	str	r3, [r7, #100]	; 0x64
 801265e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012662:	2b3e      	cmp	r3, #62	; 0x3e
 8012664:	d91c      	bls.n	80126a0 <USB_EPStartXfer+0xa56>
 8012666:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801266a:	095b      	lsrs	r3, r3, #5
 801266c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8012670:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012674:	f003 031f 	and.w	r3, r3, #31
 8012678:	2b00      	cmp	r3, #0
 801267a:	d104      	bne.n	8012686 <USB_EPStartXfer+0xa3c>
 801267c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8012680:	3b01      	subs	r3, #1
 8012682:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8012686:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801268a:	b29b      	uxth	r3, r3
 801268c:	029b      	lsls	r3, r3, #10
 801268e:	b29b      	uxth	r3, r3
 8012690:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012694:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012698:	b29a      	uxth	r2, r3
 801269a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801269c:	801a      	strh	r2, [r3, #0]
 801269e:	e053      	b.n	8012748 <USB_EPStartXfer+0xafe>
 80126a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d112      	bne.n	80126ce <USB_EPStartXfer+0xa84>
 80126a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80126aa:	881b      	ldrh	r3, [r3, #0]
 80126ac:	b29b      	uxth	r3, r3
 80126ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80126b2:	b29a      	uxth	r2, r3
 80126b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80126b6:	801a      	strh	r2, [r3, #0]
 80126b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80126ba:	881b      	ldrh	r3, [r3, #0]
 80126bc:	b29b      	uxth	r3, r3
 80126be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80126c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80126c6:	b29a      	uxth	r2, r3
 80126c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80126ca:	801a      	strh	r2, [r3, #0]
 80126cc:	e03c      	b.n	8012748 <USB_EPStartXfer+0xafe>
 80126ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80126d2:	085b      	lsrs	r3, r3, #1
 80126d4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80126d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80126dc:	f003 0301 	and.w	r3, r3, #1
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d004      	beq.n	80126ee <USB_EPStartXfer+0xaa4>
 80126e4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80126e8:	3301      	adds	r3, #1
 80126ea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80126ee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80126f2:	b29b      	uxth	r3, r3
 80126f4:	029b      	lsls	r3, r3, #10
 80126f6:	b29a      	uxth	r2, r3
 80126f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80126fa:	801a      	strh	r2, [r3, #0]
 80126fc:	e024      	b.n	8012748 <USB_EPStartXfer+0xafe>
 80126fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012702:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	785b      	ldrb	r3, [r3, #1]
 801270a:	2b01      	cmp	r3, #1
 801270c:	d11c      	bne.n	8012748 <USB_EPStartXfer+0xafe>
 801270e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012712:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801271c:	b29b      	uxth	r3, r3
 801271e:	461a      	mov	r2, r3
 8012720:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012722:	4413      	add	r3, r2
 8012724:	673b      	str	r3, [r7, #112]	; 0x70
 8012726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801272a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	781b      	ldrb	r3, [r3, #0]
 8012732:	00da      	lsls	r2, r3, #3
 8012734:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012736:	4413      	add	r3, r2
 8012738:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801273c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801273e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012742:	b29a      	uxth	r2, r3
 8012744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012746:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8012748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801274c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	895b      	ldrh	r3, [r3, #10]
 8012754:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801275c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	6959      	ldr	r1, [r3, #20]
 8012764:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012768:	b29b      	uxth	r3, r3
 801276a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801276e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8012772:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8012776:	6800      	ldr	r0, [r0, #0]
 8012778:	f000 fed7 	bl	801352a <USB_WritePMA>
 801277c:	e0c0      	b.n	8012900 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801277e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012782:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	785b      	ldrb	r3, [r3, #1]
 801278a:	2b00      	cmp	r3, #0
 801278c:	d16d      	bne.n	801286a <USB_EPStartXfer+0xc20>
 801278e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012792:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	67fb      	str	r3, [r7, #124]	; 0x7c
 801279a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801279e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80127a8:	b29b      	uxth	r3, r3
 80127aa:	461a      	mov	r2, r3
 80127ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80127ae:	4413      	add	r3, r2
 80127b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80127b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80127b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	781b      	ldrb	r3, [r3, #0]
 80127be:	00da      	lsls	r2, r3, #3
 80127c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80127c2:	4413      	add	r3, r2
 80127c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80127c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80127ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80127ce:	2b3e      	cmp	r3, #62	; 0x3e
 80127d0:	d91c      	bls.n	801280c <USB_EPStartXfer+0xbc2>
 80127d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80127d6:	095b      	lsrs	r3, r3, #5
 80127d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80127dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80127e0:	f003 031f 	and.w	r3, r3, #31
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d104      	bne.n	80127f2 <USB_EPStartXfer+0xba8>
 80127e8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80127ec:	3b01      	subs	r3, #1
 80127ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80127f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80127f6:	b29b      	uxth	r3, r3
 80127f8:	029b      	lsls	r3, r3, #10
 80127fa:	b29b      	uxth	r3, r3
 80127fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012800:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012804:	b29a      	uxth	r2, r3
 8012806:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012808:	801a      	strh	r2, [r3, #0]
 801280a:	e05f      	b.n	80128cc <USB_EPStartXfer+0xc82>
 801280c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012810:	2b00      	cmp	r3, #0
 8012812:	d112      	bne.n	801283a <USB_EPStartXfer+0xbf0>
 8012814:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012816:	881b      	ldrh	r3, [r3, #0]
 8012818:	b29b      	uxth	r3, r3
 801281a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801281e:	b29a      	uxth	r2, r3
 8012820:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012822:	801a      	strh	r2, [r3, #0]
 8012824:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012826:	881b      	ldrh	r3, [r3, #0]
 8012828:	b29b      	uxth	r3, r3
 801282a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801282e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012832:	b29a      	uxth	r2, r3
 8012834:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012836:	801a      	strh	r2, [r3, #0]
 8012838:	e048      	b.n	80128cc <USB_EPStartXfer+0xc82>
 801283a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801283e:	085b      	lsrs	r3, r3, #1
 8012840:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8012844:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012848:	f003 0301 	and.w	r3, r3, #1
 801284c:	2b00      	cmp	r3, #0
 801284e:	d004      	beq.n	801285a <USB_EPStartXfer+0xc10>
 8012850:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012854:	3301      	adds	r3, #1
 8012856:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801285a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801285e:	b29b      	uxth	r3, r3
 8012860:	029b      	lsls	r3, r3, #10
 8012862:	b29a      	uxth	r2, r3
 8012864:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012866:	801a      	strh	r2, [r3, #0]
 8012868:	e030      	b.n	80128cc <USB_EPStartXfer+0xc82>
 801286a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801286e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	785b      	ldrb	r3, [r3, #1]
 8012876:	2b01      	cmp	r3, #1
 8012878:	d128      	bne.n	80128cc <USB_EPStartXfer+0xc82>
 801287a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801287e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012888:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801288c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012896:	b29b      	uxth	r3, r3
 8012898:	461a      	mov	r2, r3
 801289a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801289e:	4413      	add	r3, r2
 80128a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80128a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80128a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	781b      	ldrb	r3, [r3, #0]
 80128b0:	00da      	lsls	r2, r3, #3
 80128b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80128b6:	4413      	add	r3, r2
 80128b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80128bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80128c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80128c4:	b29a      	uxth	r2, r3
 80128c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80128ca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80128cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80128d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	891b      	ldrh	r3, [r3, #8]
 80128d8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80128dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80128e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	6959      	ldr	r1, [r3, #20]
 80128e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80128ec:	b29b      	uxth	r3, r3
 80128ee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80128f2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80128f6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80128fa:	6800      	ldr	r0, [r0, #0]
 80128fc:	f000 fe15 	bl	801352a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8012900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012904:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012908:	681a      	ldr	r2, [r3, #0]
 801290a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801290e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	781b      	ldrb	r3, [r3, #0]
 8012916:	009b      	lsls	r3, r3, #2
 8012918:	4413      	add	r3, r2
 801291a:	881b      	ldrh	r3, [r3, #0]
 801291c:	b29b      	uxth	r3, r3
 801291e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012922:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012926:	817b      	strh	r3, [r7, #10]
 8012928:	897b      	ldrh	r3, [r7, #10]
 801292a:	f083 0310 	eor.w	r3, r3, #16
 801292e:	817b      	strh	r3, [r7, #10]
 8012930:	897b      	ldrh	r3, [r7, #10]
 8012932:	f083 0320 	eor.w	r3, r3, #32
 8012936:	817b      	strh	r3, [r7, #10]
 8012938:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801293c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012940:	681a      	ldr	r2, [r3, #0]
 8012942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012946:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	781b      	ldrb	r3, [r3, #0]
 801294e:	009b      	lsls	r3, r3, #2
 8012950:	441a      	add	r2, r3
 8012952:	897b      	ldrh	r3, [r7, #10]
 8012954:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012958:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801295c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012964:	b29b      	uxth	r3, r3
 8012966:	8013      	strh	r3, [r2, #0]
 8012968:	f000 bc9f 	b.w	80132aa <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 801296c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012970:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	7b1b      	ldrb	r3, [r3, #12]
 8012978:	2b00      	cmp	r3, #0
 801297a:	f040 80ae 	bne.w	8012ada <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801297e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012982:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	699a      	ldr	r2, [r3, #24]
 801298a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801298e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	691b      	ldr	r3, [r3, #16]
 8012996:	429a      	cmp	r2, r3
 8012998:	d917      	bls.n	80129ca <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 801299a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801299e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	691b      	ldr	r3, [r3, #16]
 80129a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80129aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80129ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	699a      	ldr	r2, [r3, #24]
 80129b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80129ba:	1ad2      	subs	r2, r2, r3
 80129bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80129c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	619a      	str	r2, [r3, #24]
 80129c8:	e00e      	b.n	80129e8 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 80129ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80129ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	699b      	ldr	r3, [r3, #24]
 80129d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80129da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80129de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	2200      	movs	r2, #0
 80129e6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80129e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80129ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80129f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80129fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012a04:	b29b      	uxth	r3, r3
 8012a06:	461a      	mov	r2, r3
 8012a08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012a0c:	4413      	add	r3, r2
 8012a0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012a12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012a16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	781b      	ldrb	r3, [r3, #0]
 8012a1e:	00da      	lsls	r2, r3, #3
 8012a20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012a24:	4413      	add	r3, r2
 8012a26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012a2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8012a2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012a32:	2b3e      	cmp	r3, #62	; 0x3e
 8012a34:	d91d      	bls.n	8012a72 <USB_EPStartXfer+0xe28>
 8012a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012a3a:	095b      	lsrs	r3, r3, #5
 8012a3c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8012a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012a44:	f003 031f 	and.w	r3, r3, #31
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d104      	bne.n	8012a56 <USB_EPStartXfer+0xe0c>
 8012a4c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012a50:	3b01      	subs	r3, #1
 8012a52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8012a56:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012a5a:	b29b      	uxth	r3, r3
 8012a5c:	029b      	lsls	r3, r3, #10
 8012a5e:	b29b      	uxth	r3, r3
 8012a60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012a64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012a68:	b29a      	uxth	r2, r3
 8012a6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012a6e:	801a      	strh	r2, [r3, #0]
 8012a70:	e3e1      	b.n	8013236 <USB_EPStartXfer+0x15ec>
 8012a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d116      	bne.n	8012aa8 <USB_EPStartXfer+0xe5e>
 8012a7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012a7e:	881b      	ldrh	r3, [r3, #0]
 8012a80:	b29b      	uxth	r3, r3
 8012a82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8012a86:	b29a      	uxth	r2, r3
 8012a88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012a8c:	801a      	strh	r2, [r3, #0]
 8012a8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012a92:	881b      	ldrh	r3, [r3, #0]
 8012a94:	b29b      	uxth	r3, r3
 8012a96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012a9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012a9e:	b29a      	uxth	r2, r3
 8012aa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012aa4:	801a      	strh	r2, [r3, #0]
 8012aa6:	e3c6      	b.n	8013236 <USB_EPStartXfer+0x15ec>
 8012aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012aac:	085b      	lsrs	r3, r3, #1
 8012aae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8012ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012ab6:	f003 0301 	and.w	r3, r3, #1
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d004      	beq.n	8012ac8 <USB_EPStartXfer+0xe7e>
 8012abe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012ac2:	3301      	adds	r3, #1
 8012ac4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8012ac8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012acc:	b29b      	uxth	r3, r3
 8012ace:	029b      	lsls	r3, r3, #10
 8012ad0:	b29a      	uxth	r2, r3
 8012ad2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012ad6:	801a      	strh	r2, [r3, #0]
 8012ad8:	e3ad      	b.n	8013236 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8012ada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ade:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	78db      	ldrb	r3, [r3, #3]
 8012ae6:	2b02      	cmp	r3, #2
 8012ae8:	f040 8200 	bne.w	8012eec <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8012aec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012af0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	785b      	ldrb	r3, [r3, #1]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	f040 8091 	bne.w	8012c20 <USB_EPStartXfer+0xfd6>
 8012afe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8012b0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012b1a:	b29b      	uxth	r3, r3
 8012b1c:	461a      	mov	r2, r3
 8012b1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012b22:	4413      	add	r3, r2
 8012b24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8012b28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	781b      	ldrb	r3, [r3, #0]
 8012b34:	00da      	lsls	r2, r3, #3
 8012b36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012b3a:	4413      	add	r3, r2
 8012b3c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012b40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8012b44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	691b      	ldr	r3, [r3, #16]
 8012b50:	2b3e      	cmp	r3, #62	; 0x3e
 8012b52:	d925      	bls.n	8012ba0 <USB_EPStartXfer+0xf56>
 8012b54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	691b      	ldr	r3, [r3, #16]
 8012b60:	095b      	lsrs	r3, r3, #5
 8012b62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8012b66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	691b      	ldr	r3, [r3, #16]
 8012b72:	f003 031f 	and.w	r3, r3, #31
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d104      	bne.n	8012b84 <USB_EPStartXfer+0xf3a>
 8012b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012b7e:	3b01      	subs	r3, #1
 8012b80:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8012b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012b88:	b29b      	uxth	r3, r3
 8012b8a:	029b      	lsls	r3, r3, #10
 8012b8c:	b29b      	uxth	r3, r3
 8012b8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012b92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012b96:	b29a      	uxth	r2, r3
 8012b98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012b9c:	801a      	strh	r2, [r3, #0]
 8012b9e:	e074      	b.n	8012c8a <USB_EPStartXfer+0x1040>
 8012ba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ba4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	691b      	ldr	r3, [r3, #16]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d116      	bne.n	8012bde <USB_EPStartXfer+0xf94>
 8012bb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012bb4:	881b      	ldrh	r3, [r3, #0]
 8012bb6:	b29b      	uxth	r3, r3
 8012bb8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8012bbc:	b29a      	uxth	r2, r3
 8012bbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012bc2:	801a      	strh	r2, [r3, #0]
 8012bc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012bc8:	881b      	ldrh	r3, [r3, #0]
 8012bca:	b29b      	uxth	r3, r3
 8012bcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012bd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012bd4:	b29a      	uxth	r2, r3
 8012bd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012bda:	801a      	strh	r2, [r3, #0]
 8012bdc:	e055      	b.n	8012c8a <USB_EPStartXfer+0x1040>
 8012bde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012be2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	691b      	ldr	r3, [r3, #16]
 8012bea:	085b      	lsrs	r3, r3, #1
 8012bec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8012bf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012bf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	691b      	ldr	r3, [r3, #16]
 8012bfc:	f003 0301 	and.w	r3, r3, #1
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d004      	beq.n	8012c0e <USB_EPStartXfer+0xfc4>
 8012c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012c08:	3301      	adds	r3, #1
 8012c0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8012c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012c12:	b29b      	uxth	r3, r3
 8012c14:	029b      	lsls	r3, r3, #10
 8012c16:	b29a      	uxth	r2, r3
 8012c18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012c1c:	801a      	strh	r2, [r3, #0]
 8012c1e:	e034      	b.n	8012c8a <USB_EPStartXfer+0x1040>
 8012c20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	785b      	ldrb	r3, [r3, #1]
 8012c2c:	2b01      	cmp	r3, #1
 8012c2e:	d12c      	bne.n	8012c8a <USB_EPStartXfer+0x1040>
 8012c30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012c3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012c4c:	b29b      	uxth	r3, r3
 8012c4e:	461a      	mov	r2, r3
 8012c50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012c54:	4413      	add	r3, r2
 8012c56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012c5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	781b      	ldrb	r3, [r3, #0]
 8012c66:	00da      	lsls	r2, r3, #3
 8012c68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012c6c:	4413      	add	r3, r2
 8012c6e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012c72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8012c76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	691b      	ldr	r3, [r3, #16]
 8012c82:	b29a      	uxth	r2, r3
 8012c84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8012c88:	801a      	strh	r2, [r3, #0]
 8012c8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8012c98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	785b      	ldrb	r3, [r3, #1]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	f040 8091 	bne.w	8012dcc <USB_EPStartXfer+0x1182>
 8012caa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012cae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012cb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012cbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012cc6:	b29b      	uxth	r3, r3
 8012cc8:	461a      	mov	r2, r3
 8012cca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012cce:	4413      	add	r3, r2
 8012cd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012cd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012cd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	781b      	ldrb	r3, [r3, #0]
 8012ce0:	00da      	lsls	r2, r3, #3
 8012ce2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012ce6:	4413      	add	r3, r2
 8012ce8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012cec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012cf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012cf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	691b      	ldr	r3, [r3, #16]
 8012cfc:	2b3e      	cmp	r3, #62	; 0x3e
 8012cfe:	d925      	bls.n	8012d4c <USB_EPStartXfer+0x1102>
 8012d00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012d04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	691b      	ldr	r3, [r3, #16]
 8012d0c:	095b      	lsrs	r3, r3, #5
 8012d0e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8012d12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012d16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	691b      	ldr	r3, [r3, #16]
 8012d1e:	f003 031f 	and.w	r3, r3, #31
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d104      	bne.n	8012d30 <USB_EPStartXfer+0x10e6>
 8012d26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012d2a:	3b01      	subs	r3, #1
 8012d2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8012d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012d34:	b29b      	uxth	r3, r3
 8012d36:	029b      	lsls	r3, r3, #10
 8012d38:	b29b      	uxth	r3, r3
 8012d3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012d3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012d42:	b29a      	uxth	r2, r3
 8012d44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012d48:	801a      	strh	r2, [r3, #0]
 8012d4a:	e06d      	b.n	8012e28 <USB_EPStartXfer+0x11de>
 8012d4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012d50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	691b      	ldr	r3, [r3, #16]
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d116      	bne.n	8012d8a <USB_EPStartXfer+0x1140>
 8012d5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012d60:	881b      	ldrh	r3, [r3, #0]
 8012d62:	b29b      	uxth	r3, r3
 8012d64:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8012d68:	b29a      	uxth	r2, r3
 8012d6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012d6e:	801a      	strh	r2, [r3, #0]
 8012d70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012d74:	881b      	ldrh	r3, [r3, #0]
 8012d76:	b29b      	uxth	r3, r3
 8012d78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012d7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012d80:	b29a      	uxth	r2, r3
 8012d82:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012d86:	801a      	strh	r2, [r3, #0]
 8012d88:	e04e      	b.n	8012e28 <USB_EPStartXfer+0x11de>
 8012d8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012d8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	691b      	ldr	r3, [r3, #16]
 8012d96:	085b      	lsrs	r3, r3, #1
 8012d98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8012d9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012da0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	691b      	ldr	r3, [r3, #16]
 8012da8:	f003 0301 	and.w	r3, r3, #1
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d004      	beq.n	8012dba <USB_EPStartXfer+0x1170>
 8012db0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012db4:	3301      	adds	r3, #1
 8012db6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8012dba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012dbe:	b29b      	uxth	r3, r3
 8012dc0:	029b      	lsls	r3, r3, #10
 8012dc2:	b29a      	uxth	r2, r3
 8012dc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012dc8:	801a      	strh	r2, [r3, #0]
 8012dca:	e02d      	b.n	8012e28 <USB_EPStartXfer+0x11de>
 8012dcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012dd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	785b      	ldrb	r3, [r3, #1]
 8012dd8:	2b01      	cmp	r3, #1
 8012dda:	d125      	bne.n	8012e28 <USB_EPStartXfer+0x11de>
 8012ddc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012de0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012dea:	b29b      	uxth	r3, r3
 8012dec:	461a      	mov	r2, r3
 8012dee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012df2:	4413      	add	r3, r2
 8012df4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8012df8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012dfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	781b      	ldrb	r3, [r3, #0]
 8012e04:	00da      	lsls	r2, r3, #3
 8012e06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012e0a:	4413      	add	r3, r2
 8012e0c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012e10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8012e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	691b      	ldr	r3, [r3, #16]
 8012e20:	b29a      	uxth	r2, r3
 8012e22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012e26:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8012e28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	69db      	ldr	r3, [r3, #28]
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	f000 81fe 	beq.w	8013236 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8012e3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012e42:	681a      	ldr	r2, [r3, #0]
 8012e44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	781b      	ldrb	r3, [r3, #0]
 8012e50:	009b      	lsls	r3, r3, #2
 8012e52:	4413      	add	r3, r2
 8012e54:	881b      	ldrh	r3, [r3, #0]
 8012e56:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8012e5a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8012e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d005      	beq.n	8012e72 <USB_EPStartXfer+0x1228>
 8012e66:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8012e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d10d      	bne.n	8012e8e <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8012e72:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8012e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	f040 81db 	bne.w	8013236 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8012e80:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8012e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	f040 81d4 	bne.w	8013236 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8012e8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012e96:	681a      	ldr	r2, [r3, #0]
 8012e98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	781b      	ldrb	r3, [r3, #0]
 8012ea4:	009b      	lsls	r3, r3, #2
 8012ea6:	4413      	add	r3, r2
 8012ea8:	881b      	ldrh	r3, [r3, #0]
 8012eaa:	b29b      	uxth	r3, r3
 8012eac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012eb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012eb4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8012eb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ebc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012ec0:	681a      	ldr	r2, [r3, #0]
 8012ec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	781b      	ldrb	r3, [r3, #0]
 8012ece:	009b      	lsls	r3, r3, #2
 8012ed0:	441a      	add	r2, r3
 8012ed2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8012ed6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012eda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012ee2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8012ee6:	b29b      	uxth	r3, r3
 8012ee8:	8013      	strh	r3, [r2, #0]
 8012eea:	e1a4      	b.n	8013236 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8012eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ef0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	78db      	ldrb	r3, [r3, #3]
 8012ef8:	2b01      	cmp	r3, #1
 8012efa:	f040 819a 	bne.w	8013232 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8012efe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	699a      	ldr	r2, [r3, #24]
 8012f0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	691b      	ldr	r3, [r3, #16]
 8012f16:	429a      	cmp	r2, r3
 8012f18:	d917      	bls.n	8012f4a <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8012f1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	691b      	ldr	r3, [r3, #16]
 8012f26:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8012f2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	699a      	ldr	r2, [r3, #24]
 8012f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012f3a:	1ad2      	subs	r2, r2, r3
 8012f3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	619a      	str	r2, [r3, #24]
 8012f48:	e00e      	b.n	8012f68 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8012f4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	699b      	ldr	r3, [r3, #24]
 8012f56:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8012f5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012f62:	681b      	ldr	r3, [r3, #0]
 8012f64:	2200      	movs	r2, #0
 8012f66:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8012f68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	785b      	ldrb	r3, [r3, #1]
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d178      	bne.n	801306a <USB_EPStartXfer+0x1420>
 8012f78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8012f86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012f94:	b29b      	uxth	r3, r3
 8012f96:	461a      	mov	r2, r3
 8012f98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8012f9c:	4413      	add	r3, r2
 8012f9e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8012fa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012fa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	781b      	ldrb	r3, [r3, #0]
 8012fae:	00da      	lsls	r2, r3, #3
 8012fb0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8012fb4:	4413      	add	r3, r2
 8012fb6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012fba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8012fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012fc2:	2b3e      	cmp	r3, #62	; 0x3e
 8012fc4:	d91d      	bls.n	8013002 <USB_EPStartXfer+0x13b8>
 8012fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012fca:	095b      	lsrs	r3, r3, #5
 8012fcc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8012fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012fd4:	f003 031f 	and.w	r3, r3, #31
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d104      	bne.n	8012fe6 <USB_EPStartXfer+0x139c>
 8012fdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012fe0:	3b01      	subs	r3, #1
 8012fe2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8012fe6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012fea:	b29b      	uxth	r3, r3
 8012fec:	029b      	lsls	r3, r3, #10
 8012fee:	b29b      	uxth	r3, r3
 8012ff0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012ff4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012ff8:	b29a      	uxth	r2, r3
 8012ffa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012ffe:	801a      	strh	r2, [r3, #0]
 8013000:	e064      	b.n	80130cc <USB_EPStartXfer+0x1482>
 8013002:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013006:	2b00      	cmp	r3, #0
 8013008:	d116      	bne.n	8013038 <USB_EPStartXfer+0x13ee>
 801300a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801300e:	881b      	ldrh	r3, [r3, #0]
 8013010:	b29b      	uxth	r3, r3
 8013012:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8013016:	b29a      	uxth	r2, r3
 8013018:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801301c:	801a      	strh	r2, [r3, #0]
 801301e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8013022:	881b      	ldrh	r3, [r3, #0]
 8013024:	b29b      	uxth	r3, r3
 8013026:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801302a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801302e:	b29a      	uxth	r2, r3
 8013030:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8013034:	801a      	strh	r2, [r3, #0]
 8013036:	e049      	b.n	80130cc <USB_EPStartXfer+0x1482>
 8013038:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801303c:	085b      	lsrs	r3, r3, #1
 801303e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8013042:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013046:	f003 0301 	and.w	r3, r3, #1
 801304a:	2b00      	cmp	r3, #0
 801304c:	d004      	beq.n	8013058 <USB_EPStartXfer+0x140e>
 801304e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013052:	3301      	adds	r3, #1
 8013054:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8013058:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801305c:	b29b      	uxth	r3, r3
 801305e:	029b      	lsls	r3, r3, #10
 8013060:	b29a      	uxth	r2, r3
 8013062:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8013066:	801a      	strh	r2, [r3, #0]
 8013068:	e030      	b.n	80130cc <USB_EPStartXfer+0x1482>
 801306a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801306e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013072:	681b      	ldr	r3, [r3, #0]
 8013074:	785b      	ldrb	r3, [r3, #1]
 8013076:	2b01      	cmp	r3, #1
 8013078:	d128      	bne.n	80130cc <USB_EPStartXfer+0x1482>
 801307a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801307e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8013088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801308c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013096:	b29b      	uxth	r3, r3
 8013098:	461a      	mov	r2, r3
 801309a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801309e:	4413      	add	r3, r2
 80130a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80130a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80130a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	781b      	ldrb	r3, [r3, #0]
 80130b0:	00da      	lsls	r2, r3, #3
 80130b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80130b6:	4413      	add	r3, r2
 80130b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80130bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80130c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80130c4:	b29a      	uxth	r2, r3
 80130c6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80130ca:	801a      	strh	r2, [r3, #0]
 80130cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80130d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80130da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80130de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	785b      	ldrb	r3, [r3, #1]
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d178      	bne.n	80131dc <USB_EPStartXfer+0x1592>
 80130ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80130ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80130f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80130fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013106:	b29b      	uxth	r3, r3
 8013108:	461a      	mov	r2, r3
 801310a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801310e:	4413      	add	r3, r2
 8013110:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8013114:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013118:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	781b      	ldrb	r3, [r3, #0]
 8013120:	00da      	lsls	r2, r3, #3
 8013122:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013126:	4413      	add	r3, r2
 8013128:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801312c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8013130:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013134:	2b3e      	cmp	r3, #62	; 0x3e
 8013136:	d91d      	bls.n	8013174 <USB_EPStartXfer+0x152a>
 8013138:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801313c:	095b      	lsrs	r3, r3, #5
 801313e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8013142:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013146:	f003 031f 	and.w	r3, r3, #31
 801314a:	2b00      	cmp	r3, #0
 801314c:	d104      	bne.n	8013158 <USB_EPStartXfer+0x150e>
 801314e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013152:	3b01      	subs	r3, #1
 8013154:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8013158:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801315c:	b29b      	uxth	r3, r3
 801315e:	029b      	lsls	r3, r3, #10
 8013160:	b29b      	uxth	r3, r3
 8013162:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013166:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801316a:	b29a      	uxth	r2, r3
 801316c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013170:	801a      	strh	r2, [r3, #0]
 8013172:	e060      	b.n	8013236 <USB_EPStartXfer+0x15ec>
 8013174:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013178:	2b00      	cmp	r3, #0
 801317a:	d116      	bne.n	80131aa <USB_EPStartXfer+0x1560>
 801317c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013180:	881b      	ldrh	r3, [r3, #0]
 8013182:	b29b      	uxth	r3, r3
 8013184:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8013188:	b29a      	uxth	r2, r3
 801318a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801318e:	801a      	strh	r2, [r3, #0]
 8013190:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013194:	881b      	ldrh	r3, [r3, #0]
 8013196:	b29b      	uxth	r3, r3
 8013198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801319c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80131a0:	b29a      	uxth	r2, r3
 80131a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80131a6:	801a      	strh	r2, [r3, #0]
 80131a8:	e045      	b.n	8013236 <USB_EPStartXfer+0x15ec>
 80131aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80131ae:	085b      	lsrs	r3, r3, #1
 80131b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80131b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80131b8:	f003 0301 	and.w	r3, r3, #1
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d004      	beq.n	80131ca <USB_EPStartXfer+0x1580>
 80131c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80131c4:	3301      	adds	r3, #1
 80131c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80131ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80131ce:	b29b      	uxth	r3, r3
 80131d0:	029b      	lsls	r3, r3, #10
 80131d2:	b29a      	uxth	r2, r3
 80131d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80131d8:	801a      	strh	r2, [r3, #0]
 80131da:	e02c      	b.n	8013236 <USB_EPStartXfer+0x15ec>
 80131dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80131e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	785b      	ldrb	r3, [r3, #1]
 80131e8:	2b01      	cmp	r3, #1
 80131ea:	d124      	bne.n	8013236 <USB_EPStartXfer+0x15ec>
 80131ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80131f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80131fa:	b29b      	uxth	r3, r3
 80131fc:	461a      	mov	r2, r3
 80131fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013202:	4413      	add	r3, r2
 8013204:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8013208:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801320c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	781b      	ldrb	r3, [r3, #0]
 8013214:	00da      	lsls	r2, r3, #3
 8013216:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801321a:	4413      	add	r3, r2
 801321c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8013220:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8013224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013228:	b29a      	uxth	r2, r3
 801322a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801322e:	801a      	strh	r2, [r3, #0]
 8013230:	e001      	b.n	8013236 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8013232:	2301      	movs	r3, #1
 8013234:	e03a      	b.n	80132ac <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8013236:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801323a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801323e:	681a      	ldr	r2, [r3, #0]
 8013240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013244:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	781b      	ldrb	r3, [r3, #0]
 801324c:	009b      	lsls	r3, r3, #2
 801324e:	4413      	add	r3, r2
 8013250:	881b      	ldrh	r3, [r3, #0]
 8013252:	b29b      	uxth	r3, r3
 8013254:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801325c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8013260:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8013264:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8013268:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 801326c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8013270:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8013274:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8013278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801327c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013280:	681a      	ldr	r2, [r3, #0]
 8013282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013286:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	781b      	ldrb	r3, [r3, #0]
 801328e:	009b      	lsls	r3, r3, #2
 8013290:	441a      	add	r2, r3
 8013292:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8013296:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801329a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801329e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80132a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80132a6:	b29b      	uxth	r3, r3
 80132a8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80132aa:	2300      	movs	r3, #0
}
 80132ac:	4618      	mov	r0, r3
 80132ae:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80132b2:	46bd      	mov	sp, r7
 80132b4:	bd80      	pop	{r7, pc}

080132b6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80132b6:	b480      	push	{r7}
 80132b8:	b085      	sub	sp, #20
 80132ba:	af00      	add	r7, sp, #0
 80132bc:	6078      	str	r0, [r7, #4]
 80132be:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80132c0:	683b      	ldr	r3, [r7, #0]
 80132c2:	785b      	ldrb	r3, [r3, #1]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d020      	beq.n	801330a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80132c8:	687a      	ldr	r2, [r7, #4]
 80132ca:	683b      	ldr	r3, [r7, #0]
 80132cc:	781b      	ldrb	r3, [r3, #0]
 80132ce:	009b      	lsls	r3, r3, #2
 80132d0:	4413      	add	r3, r2
 80132d2:	881b      	ldrh	r3, [r3, #0]
 80132d4:	b29b      	uxth	r3, r3
 80132d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80132da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80132de:	81bb      	strh	r3, [r7, #12]
 80132e0:	89bb      	ldrh	r3, [r7, #12]
 80132e2:	f083 0310 	eor.w	r3, r3, #16
 80132e6:	81bb      	strh	r3, [r7, #12]
 80132e8:	687a      	ldr	r2, [r7, #4]
 80132ea:	683b      	ldr	r3, [r7, #0]
 80132ec:	781b      	ldrb	r3, [r3, #0]
 80132ee:	009b      	lsls	r3, r3, #2
 80132f0:	441a      	add	r2, r3
 80132f2:	89bb      	ldrh	r3, [r7, #12]
 80132f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80132f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80132fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013304:	b29b      	uxth	r3, r3
 8013306:	8013      	strh	r3, [r2, #0]
 8013308:	e01f      	b.n	801334a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801330a:	687a      	ldr	r2, [r7, #4]
 801330c:	683b      	ldr	r3, [r7, #0]
 801330e:	781b      	ldrb	r3, [r3, #0]
 8013310:	009b      	lsls	r3, r3, #2
 8013312:	4413      	add	r3, r2
 8013314:	881b      	ldrh	r3, [r3, #0]
 8013316:	b29b      	uxth	r3, r3
 8013318:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801331c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013320:	81fb      	strh	r3, [r7, #14]
 8013322:	89fb      	ldrh	r3, [r7, #14]
 8013324:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8013328:	81fb      	strh	r3, [r7, #14]
 801332a:	687a      	ldr	r2, [r7, #4]
 801332c:	683b      	ldr	r3, [r7, #0]
 801332e:	781b      	ldrb	r3, [r3, #0]
 8013330:	009b      	lsls	r3, r3, #2
 8013332:	441a      	add	r2, r3
 8013334:	89fb      	ldrh	r3, [r7, #14]
 8013336:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801333a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801333e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013346:	b29b      	uxth	r3, r3
 8013348:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 801334a:	2300      	movs	r3, #0
}
 801334c:	4618      	mov	r0, r3
 801334e:	3714      	adds	r7, #20
 8013350:	46bd      	mov	sp, r7
 8013352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013356:	4770      	bx	lr

08013358 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8013358:	b480      	push	{r7}
 801335a:	b087      	sub	sp, #28
 801335c:	af00      	add	r7, sp, #0
 801335e:	6078      	str	r0, [r7, #4]
 8013360:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8013362:	683b      	ldr	r3, [r7, #0]
 8013364:	7b1b      	ldrb	r3, [r3, #12]
 8013366:	2b00      	cmp	r3, #0
 8013368:	f040 809d 	bne.w	80134a6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 801336c:	683b      	ldr	r3, [r7, #0]
 801336e:	785b      	ldrb	r3, [r3, #1]
 8013370:	2b00      	cmp	r3, #0
 8013372:	d04c      	beq.n	801340e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013374:	687a      	ldr	r2, [r7, #4]
 8013376:	683b      	ldr	r3, [r7, #0]
 8013378:	781b      	ldrb	r3, [r3, #0]
 801337a:	009b      	lsls	r3, r3, #2
 801337c:	4413      	add	r3, r2
 801337e:	881b      	ldrh	r3, [r3, #0]
 8013380:	823b      	strh	r3, [r7, #16]
 8013382:	8a3b      	ldrh	r3, [r7, #16]
 8013384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013388:	2b00      	cmp	r3, #0
 801338a:	d01b      	beq.n	80133c4 <USB_EPClearStall+0x6c>
 801338c:	687a      	ldr	r2, [r7, #4]
 801338e:	683b      	ldr	r3, [r7, #0]
 8013390:	781b      	ldrb	r3, [r3, #0]
 8013392:	009b      	lsls	r3, r3, #2
 8013394:	4413      	add	r3, r2
 8013396:	881b      	ldrh	r3, [r3, #0]
 8013398:	b29b      	uxth	r3, r3
 801339a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801339e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80133a2:	81fb      	strh	r3, [r7, #14]
 80133a4:	687a      	ldr	r2, [r7, #4]
 80133a6:	683b      	ldr	r3, [r7, #0]
 80133a8:	781b      	ldrb	r3, [r3, #0]
 80133aa:	009b      	lsls	r3, r3, #2
 80133ac:	441a      	add	r2, r3
 80133ae:	89fb      	ldrh	r3, [r7, #14]
 80133b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80133b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80133b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80133bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80133c0:	b29b      	uxth	r3, r3
 80133c2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80133c4:	683b      	ldr	r3, [r7, #0]
 80133c6:	78db      	ldrb	r3, [r3, #3]
 80133c8:	2b01      	cmp	r3, #1
 80133ca:	d06c      	beq.n	80134a6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80133cc:	687a      	ldr	r2, [r7, #4]
 80133ce:	683b      	ldr	r3, [r7, #0]
 80133d0:	781b      	ldrb	r3, [r3, #0]
 80133d2:	009b      	lsls	r3, r3, #2
 80133d4:	4413      	add	r3, r2
 80133d6:	881b      	ldrh	r3, [r3, #0]
 80133d8:	b29b      	uxth	r3, r3
 80133da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80133de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80133e2:	81bb      	strh	r3, [r7, #12]
 80133e4:	89bb      	ldrh	r3, [r7, #12]
 80133e6:	f083 0320 	eor.w	r3, r3, #32
 80133ea:	81bb      	strh	r3, [r7, #12]
 80133ec:	687a      	ldr	r2, [r7, #4]
 80133ee:	683b      	ldr	r3, [r7, #0]
 80133f0:	781b      	ldrb	r3, [r3, #0]
 80133f2:	009b      	lsls	r3, r3, #2
 80133f4:	441a      	add	r2, r3
 80133f6:	89bb      	ldrh	r3, [r7, #12]
 80133f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80133fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013400:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013408:	b29b      	uxth	r3, r3
 801340a:	8013      	strh	r3, [r2, #0]
 801340c:	e04b      	b.n	80134a6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801340e:	687a      	ldr	r2, [r7, #4]
 8013410:	683b      	ldr	r3, [r7, #0]
 8013412:	781b      	ldrb	r3, [r3, #0]
 8013414:	009b      	lsls	r3, r3, #2
 8013416:	4413      	add	r3, r2
 8013418:	881b      	ldrh	r3, [r3, #0]
 801341a:	82fb      	strh	r3, [r7, #22]
 801341c:	8afb      	ldrh	r3, [r7, #22]
 801341e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013422:	2b00      	cmp	r3, #0
 8013424:	d01b      	beq.n	801345e <USB_EPClearStall+0x106>
 8013426:	687a      	ldr	r2, [r7, #4]
 8013428:	683b      	ldr	r3, [r7, #0]
 801342a:	781b      	ldrb	r3, [r3, #0]
 801342c:	009b      	lsls	r3, r3, #2
 801342e:	4413      	add	r3, r2
 8013430:	881b      	ldrh	r3, [r3, #0]
 8013432:	b29b      	uxth	r3, r3
 8013434:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801343c:	82bb      	strh	r3, [r7, #20]
 801343e:	687a      	ldr	r2, [r7, #4]
 8013440:	683b      	ldr	r3, [r7, #0]
 8013442:	781b      	ldrb	r3, [r3, #0]
 8013444:	009b      	lsls	r3, r3, #2
 8013446:	441a      	add	r2, r3
 8013448:	8abb      	ldrh	r3, [r7, #20]
 801344a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801344e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013452:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8013456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801345a:	b29b      	uxth	r3, r3
 801345c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801345e:	687a      	ldr	r2, [r7, #4]
 8013460:	683b      	ldr	r3, [r7, #0]
 8013462:	781b      	ldrb	r3, [r3, #0]
 8013464:	009b      	lsls	r3, r3, #2
 8013466:	4413      	add	r3, r2
 8013468:	881b      	ldrh	r3, [r3, #0]
 801346a:	b29b      	uxth	r3, r3
 801346c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013474:	827b      	strh	r3, [r7, #18]
 8013476:	8a7b      	ldrh	r3, [r7, #18]
 8013478:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 801347c:	827b      	strh	r3, [r7, #18]
 801347e:	8a7b      	ldrh	r3, [r7, #18]
 8013480:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8013484:	827b      	strh	r3, [r7, #18]
 8013486:	687a      	ldr	r2, [r7, #4]
 8013488:	683b      	ldr	r3, [r7, #0]
 801348a:	781b      	ldrb	r3, [r3, #0]
 801348c:	009b      	lsls	r3, r3, #2
 801348e:	441a      	add	r2, r3
 8013490:	8a7b      	ldrh	r3, [r7, #18]
 8013492:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013496:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801349a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801349e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80134a2:	b29b      	uxth	r3, r3
 80134a4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80134a6:	2300      	movs	r3, #0
}
 80134a8:	4618      	mov	r0, r3
 80134aa:	371c      	adds	r7, #28
 80134ac:	46bd      	mov	sp, r7
 80134ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134b2:	4770      	bx	lr

080134b4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80134b4:	b480      	push	{r7}
 80134b6:	b083      	sub	sp, #12
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	6078      	str	r0, [r7, #4]
 80134bc:	460b      	mov	r3, r1
 80134be:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80134c0:	78fb      	ldrb	r3, [r7, #3]
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d103      	bne.n	80134ce <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	2280      	movs	r2, #128	; 0x80
 80134ca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80134ce:	2300      	movs	r3, #0
}
 80134d0:	4618      	mov	r0, r3
 80134d2:	370c      	adds	r7, #12
 80134d4:	46bd      	mov	sp, r7
 80134d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134da:	4770      	bx	lr

080134dc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80134dc:	b480      	push	{r7}
 80134de:	b083      	sub	sp, #12
 80134e0:	af00      	add	r7, sp, #0
 80134e2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80134ea:	b29b      	uxth	r3, r3
 80134ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80134f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80134f4:	b29a      	uxth	r2, r3
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80134fc:	2300      	movs	r3, #0
}
 80134fe:	4618      	mov	r0, r3
 8013500:	370c      	adds	r7, #12
 8013502:	46bd      	mov	sp, r7
 8013504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013508:	4770      	bx	lr

0801350a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 801350a:	b480      	push	{r7}
 801350c:	b085      	sub	sp, #20
 801350e:	af00      	add	r7, sp, #0
 8013510:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8013518:	b29b      	uxth	r3, r3
 801351a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801351c:	68fb      	ldr	r3, [r7, #12]
}
 801351e:	4618      	mov	r0, r3
 8013520:	3714      	adds	r7, #20
 8013522:	46bd      	mov	sp, r7
 8013524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013528:	4770      	bx	lr

0801352a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801352a:	b480      	push	{r7}
 801352c:	b08d      	sub	sp, #52	; 0x34
 801352e:	af00      	add	r7, sp, #0
 8013530:	60f8      	str	r0, [r7, #12]
 8013532:	60b9      	str	r1, [r7, #8]
 8013534:	4611      	mov	r1, r2
 8013536:	461a      	mov	r2, r3
 8013538:	460b      	mov	r3, r1
 801353a:	80fb      	strh	r3, [r7, #6]
 801353c:	4613      	mov	r3, r2
 801353e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8013540:	88bb      	ldrh	r3, [r7, #4]
 8013542:	3301      	adds	r3, #1
 8013544:	085b      	lsrs	r3, r3, #1
 8013546:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801354c:	68bb      	ldr	r3, [r7, #8]
 801354e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8013550:	88fa      	ldrh	r2, [r7, #6]
 8013552:	69fb      	ldr	r3, [r7, #28]
 8013554:	4413      	add	r3, r2
 8013556:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801355a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 801355c:	6a3b      	ldr	r3, [r7, #32]
 801355e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013560:	e01b      	b.n	801359a <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8013562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013564:	781b      	ldrb	r3, [r3, #0]
 8013566:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8013568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801356a:	3301      	adds	r3, #1
 801356c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 801356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013570:	781b      	ldrb	r3, [r3, #0]
 8013572:	b29b      	uxth	r3, r3
 8013574:	021b      	lsls	r3, r3, #8
 8013576:	b29b      	uxth	r3, r3
 8013578:	461a      	mov	r2, r3
 801357a:	69bb      	ldr	r3, [r7, #24]
 801357c:	4313      	orrs	r3, r2
 801357e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8013580:	697b      	ldr	r3, [r7, #20]
 8013582:	b29a      	uxth	r2, r3
 8013584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013586:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8013588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801358a:	3302      	adds	r3, #2
 801358c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 801358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013590:	3301      	adds	r3, #1
 8013592:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8013594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013596:	3b01      	subs	r3, #1
 8013598:	62fb      	str	r3, [r7, #44]	; 0x2c
 801359a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801359c:	2b00      	cmp	r3, #0
 801359e:	d1e0      	bne.n	8013562 <USB_WritePMA+0x38>
  }
}
 80135a0:	bf00      	nop
 80135a2:	bf00      	nop
 80135a4:	3734      	adds	r7, #52	; 0x34
 80135a6:	46bd      	mov	sp, r7
 80135a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ac:	4770      	bx	lr

080135ae <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80135ae:	b480      	push	{r7}
 80135b0:	b08b      	sub	sp, #44	; 0x2c
 80135b2:	af00      	add	r7, sp, #0
 80135b4:	60f8      	str	r0, [r7, #12]
 80135b6:	60b9      	str	r1, [r7, #8]
 80135b8:	4611      	mov	r1, r2
 80135ba:	461a      	mov	r2, r3
 80135bc:	460b      	mov	r3, r1
 80135be:	80fb      	strh	r3, [r7, #6]
 80135c0:	4613      	mov	r3, r2
 80135c2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80135c4:	88bb      	ldrh	r3, [r7, #4]
 80135c6:	085b      	lsrs	r3, r3, #1
 80135c8:	b29b      	uxth	r3, r3
 80135ca:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80135d0:	68bb      	ldr	r3, [r7, #8]
 80135d2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80135d4:	88fa      	ldrh	r2, [r7, #6]
 80135d6:	697b      	ldr	r3, [r7, #20]
 80135d8:	4413      	add	r3, r2
 80135da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80135de:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80135e0:	69bb      	ldr	r3, [r7, #24]
 80135e2:	627b      	str	r3, [r7, #36]	; 0x24
 80135e4:	e018      	b.n	8013618 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80135e6:	6a3b      	ldr	r3, [r7, #32]
 80135e8:	881b      	ldrh	r3, [r3, #0]
 80135ea:	b29b      	uxth	r3, r3
 80135ec:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80135ee:	6a3b      	ldr	r3, [r7, #32]
 80135f0:	3302      	adds	r3, #2
 80135f2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80135f4:	693b      	ldr	r3, [r7, #16]
 80135f6:	b2da      	uxtb	r2, r3
 80135f8:	69fb      	ldr	r3, [r7, #28]
 80135fa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80135fc:	69fb      	ldr	r3, [r7, #28]
 80135fe:	3301      	adds	r3, #1
 8013600:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8013602:	693b      	ldr	r3, [r7, #16]
 8013604:	0a1b      	lsrs	r3, r3, #8
 8013606:	b2da      	uxtb	r2, r3
 8013608:	69fb      	ldr	r3, [r7, #28]
 801360a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801360c:	69fb      	ldr	r3, [r7, #28]
 801360e:	3301      	adds	r3, #1
 8013610:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8013612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013614:	3b01      	subs	r3, #1
 8013616:	627b      	str	r3, [r7, #36]	; 0x24
 8013618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801361a:	2b00      	cmp	r3, #0
 801361c:	d1e3      	bne.n	80135e6 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 801361e:	88bb      	ldrh	r3, [r7, #4]
 8013620:	f003 0301 	and.w	r3, r3, #1
 8013624:	b29b      	uxth	r3, r3
 8013626:	2b00      	cmp	r3, #0
 8013628:	d007      	beq.n	801363a <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 801362a:	6a3b      	ldr	r3, [r7, #32]
 801362c:	881b      	ldrh	r3, [r3, #0]
 801362e:	b29b      	uxth	r3, r3
 8013630:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8013632:	693b      	ldr	r3, [r7, #16]
 8013634:	b2da      	uxtb	r2, r3
 8013636:	69fb      	ldr	r3, [r7, #28]
 8013638:	701a      	strb	r2, [r3, #0]
  }
}
 801363a:	bf00      	nop
 801363c:	372c      	adds	r7, #44	; 0x2c
 801363e:	46bd      	mov	sp, r7
 8013640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013644:	4770      	bx	lr

08013646 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013646:	b580      	push	{r7, lr}
 8013648:	b084      	sub	sp, #16
 801364a:	af00      	add	r7, sp, #0
 801364c:	6078      	str	r0, [r7, #4]
 801364e:	460b      	mov	r3, r1
 8013650:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8013652:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8013656:	f004 f9bd 	bl	80179d4 <USBD_static_malloc>
 801365a:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	2b00      	cmp	r3, #0
 8013660:	d105      	bne.n	801366e <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	2200      	movs	r2, #0
 8013666:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 801366a:	2302      	movs	r3, #2
 801366c:	e066      	b.n	801373c <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	68fa      	ldr	r2, [r7, #12]
 8013672:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	7c1b      	ldrb	r3, [r3, #16]
 801367a:	2b00      	cmp	r3, #0
 801367c:	d119      	bne.n	80136b2 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801367e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013682:	2202      	movs	r2, #2
 8013684:	2181      	movs	r1, #129	; 0x81
 8013686:	6878      	ldr	r0, [r7, #4]
 8013688:	f004 f849 	bl	801771e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	2201      	movs	r2, #1
 8013690:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8013692:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013696:	2202      	movs	r2, #2
 8013698:	2101      	movs	r1, #1
 801369a:	6878      	ldr	r0, [r7, #4]
 801369c:	f004 f83f 	bl	801771e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	2201      	movs	r2, #1
 80136a4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	2210      	movs	r2, #16
 80136ac:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80136b0:	e016      	b.n	80136e0 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80136b2:	2340      	movs	r3, #64	; 0x40
 80136b4:	2202      	movs	r2, #2
 80136b6:	2181      	movs	r1, #129	; 0x81
 80136b8:	6878      	ldr	r0, [r7, #4]
 80136ba:	f004 f830 	bl	801771e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	2201      	movs	r2, #1
 80136c2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80136c4:	2340      	movs	r3, #64	; 0x40
 80136c6:	2202      	movs	r2, #2
 80136c8:	2101      	movs	r1, #1
 80136ca:	6878      	ldr	r0, [r7, #4]
 80136cc:	f004 f827 	bl	801771e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	2201      	movs	r2, #1
 80136d4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	2210      	movs	r2, #16
 80136dc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80136e0:	2308      	movs	r3, #8
 80136e2:	2203      	movs	r2, #3
 80136e4:	2182      	movs	r1, #130	; 0x82
 80136e6:	6878      	ldr	r0, [r7, #4]
 80136e8:	f004 f819 	bl	801771e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	2201      	movs	r2, #1
 80136f0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80136fa:	681b      	ldr	r3, [r3, #0]
 80136fc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	2200      	movs	r2, #0
 8013702:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	2200      	movs	r2, #0
 801370a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	7c1b      	ldrb	r3, [r3, #16]
 8013712:	2b00      	cmp	r3, #0
 8013714:	d109      	bne.n	801372a <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801371c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013720:	2101      	movs	r1, #1
 8013722:	6878      	ldr	r0, [r7, #4]
 8013724:	f004 f8eb 	bl	80178fe <USBD_LL_PrepareReceive>
 8013728:	e007      	b.n	801373a <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013730:	2340      	movs	r3, #64	; 0x40
 8013732:	2101      	movs	r1, #1
 8013734:	6878      	ldr	r0, [r7, #4]
 8013736:	f004 f8e2 	bl	80178fe <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801373a:	2300      	movs	r3, #0
}
 801373c:	4618      	mov	r0, r3
 801373e:	3710      	adds	r7, #16
 8013740:	46bd      	mov	sp, r7
 8013742:	bd80      	pop	{r7, pc}

08013744 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013744:	b580      	push	{r7, lr}
 8013746:	b082      	sub	sp, #8
 8013748:	af00      	add	r7, sp, #0
 801374a:	6078      	str	r0, [r7, #4]
 801374c:	460b      	mov	r3, r1
 801374e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8013750:	2181      	movs	r1, #129	; 0x81
 8013752:	6878      	ldr	r0, [r7, #4]
 8013754:	f004 f809 	bl	801776a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	2200      	movs	r2, #0
 801375c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801375e:	2101      	movs	r1, #1
 8013760:	6878      	ldr	r0, [r7, #4]
 8013762:	f004 f802 	bl	801776a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	2200      	movs	r2, #0
 801376a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801376e:	2182      	movs	r1, #130	; 0x82
 8013770:	6878      	ldr	r0, [r7, #4]
 8013772:	f003 fffa 	bl	801776a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	2200      	movs	r2, #0
 801377a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	2200      	movs	r2, #0
 8013782:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801378c:	2b00      	cmp	r3, #0
 801378e:	d00e      	beq.n	80137ae <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013796:	685b      	ldr	r3, [r3, #4]
 8013798:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80137a0:	4618      	mov	r0, r3
 80137a2:	f004 f925 	bl	80179f0 <USBD_static_free>
    pdev->pClassData = NULL;
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	2200      	movs	r2, #0
 80137aa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80137ae:	2300      	movs	r3, #0
}
 80137b0:	4618      	mov	r0, r3
 80137b2:	3708      	adds	r7, #8
 80137b4:	46bd      	mov	sp, r7
 80137b6:	bd80      	pop	{r7, pc}

080137b8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80137b8:	b580      	push	{r7, lr}
 80137ba:	b086      	sub	sp, #24
 80137bc:	af00      	add	r7, sp, #0
 80137be:	6078      	str	r0, [r7, #4]
 80137c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80137c8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80137ca:	2300      	movs	r3, #0
 80137cc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80137ce:	2300      	movs	r3, #0
 80137d0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80137d2:	2300      	movs	r3, #0
 80137d4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80137d6:	693b      	ldr	r3, [r7, #16]
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d101      	bne.n	80137e0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80137dc:	2303      	movs	r3, #3
 80137de:	e0af      	b.n	8013940 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80137e0:	683b      	ldr	r3, [r7, #0]
 80137e2:	781b      	ldrb	r3, [r3, #0]
 80137e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d03f      	beq.n	801386c <USBD_CDC_Setup+0xb4>
 80137ec:	2b20      	cmp	r3, #32
 80137ee:	f040 809f 	bne.w	8013930 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80137f2:	683b      	ldr	r3, [r7, #0]
 80137f4:	88db      	ldrh	r3, [r3, #6]
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d02e      	beq.n	8013858 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80137fa:	683b      	ldr	r3, [r7, #0]
 80137fc:	781b      	ldrb	r3, [r3, #0]
 80137fe:	b25b      	sxtb	r3, r3
 8013800:	2b00      	cmp	r3, #0
 8013802:	da16      	bge.n	8013832 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801380a:	689b      	ldr	r3, [r3, #8]
 801380c:	683a      	ldr	r2, [r7, #0]
 801380e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8013810:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013812:	683a      	ldr	r2, [r7, #0]
 8013814:	88d2      	ldrh	r2, [r2, #6]
 8013816:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8013818:	683b      	ldr	r3, [r7, #0]
 801381a:	88db      	ldrh	r3, [r3, #6]
 801381c:	2b07      	cmp	r3, #7
 801381e:	bf28      	it	cs
 8013820:	2307      	movcs	r3, #7
 8013822:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8013824:	693b      	ldr	r3, [r7, #16]
 8013826:	89fa      	ldrh	r2, [r7, #14]
 8013828:	4619      	mov	r1, r3
 801382a:	6878      	ldr	r0, [r7, #4]
 801382c:	f001 fa9f 	bl	8014d6e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8013830:	e085      	b.n	801393e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8013832:	683b      	ldr	r3, [r7, #0]
 8013834:	785a      	ldrb	r2, [r3, #1]
 8013836:	693b      	ldr	r3, [r7, #16]
 8013838:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 801383c:	683b      	ldr	r3, [r7, #0]
 801383e:	88db      	ldrh	r3, [r3, #6]
 8013840:	b2da      	uxtb	r2, r3
 8013842:	693b      	ldr	r3, [r7, #16]
 8013844:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8013848:	6939      	ldr	r1, [r7, #16]
 801384a:	683b      	ldr	r3, [r7, #0]
 801384c:	88db      	ldrh	r3, [r3, #6]
 801384e:	461a      	mov	r2, r3
 8013850:	6878      	ldr	r0, [r7, #4]
 8013852:	f001 fab8 	bl	8014dc6 <USBD_CtlPrepareRx>
      break;
 8013856:	e072      	b.n	801393e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801385e:	689b      	ldr	r3, [r3, #8]
 8013860:	683a      	ldr	r2, [r7, #0]
 8013862:	7850      	ldrb	r0, [r2, #1]
 8013864:	2200      	movs	r2, #0
 8013866:	6839      	ldr	r1, [r7, #0]
 8013868:	4798      	blx	r3
      break;
 801386a:	e068      	b.n	801393e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801386c:	683b      	ldr	r3, [r7, #0]
 801386e:	785b      	ldrb	r3, [r3, #1]
 8013870:	2b0b      	cmp	r3, #11
 8013872:	d852      	bhi.n	801391a <USBD_CDC_Setup+0x162>
 8013874:	a201      	add	r2, pc, #4	; (adr r2, 801387c <USBD_CDC_Setup+0xc4>)
 8013876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801387a:	bf00      	nop
 801387c:	080138ad 	.word	0x080138ad
 8013880:	08013929 	.word	0x08013929
 8013884:	0801391b 	.word	0x0801391b
 8013888:	0801391b 	.word	0x0801391b
 801388c:	0801391b 	.word	0x0801391b
 8013890:	0801391b 	.word	0x0801391b
 8013894:	0801391b 	.word	0x0801391b
 8013898:	0801391b 	.word	0x0801391b
 801389c:	0801391b 	.word	0x0801391b
 80138a0:	0801391b 	.word	0x0801391b
 80138a4:	080138d7 	.word	0x080138d7
 80138a8:	08013901 	.word	0x08013901
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80138b2:	b2db      	uxtb	r3, r3
 80138b4:	2b03      	cmp	r3, #3
 80138b6:	d107      	bne.n	80138c8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80138b8:	f107 030a 	add.w	r3, r7, #10
 80138bc:	2202      	movs	r2, #2
 80138be:	4619      	mov	r1, r3
 80138c0:	6878      	ldr	r0, [r7, #4]
 80138c2:	f001 fa54 	bl	8014d6e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80138c6:	e032      	b.n	801392e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80138c8:	6839      	ldr	r1, [r7, #0]
 80138ca:	6878      	ldr	r0, [r7, #4]
 80138cc:	f001 f9de 	bl	8014c8c <USBD_CtlError>
            ret = USBD_FAIL;
 80138d0:	2303      	movs	r3, #3
 80138d2:	75fb      	strb	r3, [r7, #23]
          break;
 80138d4:	e02b      	b.n	801392e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80138dc:	b2db      	uxtb	r3, r3
 80138de:	2b03      	cmp	r3, #3
 80138e0:	d107      	bne.n	80138f2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80138e2:	f107 030d 	add.w	r3, r7, #13
 80138e6:	2201      	movs	r2, #1
 80138e8:	4619      	mov	r1, r3
 80138ea:	6878      	ldr	r0, [r7, #4]
 80138ec:	f001 fa3f 	bl	8014d6e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80138f0:	e01d      	b.n	801392e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80138f2:	6839      	ldr	r1, [r7, #0]
 80138f4:	6878      	ldr	r0, [r7, #4]
 80138f6:	f001 f9c9 	bl	8014c8c <USBD_CtlError>
            ret = USBD_FAIL;
 80138fa:	2303      	movs	r3, #3
 80138fc:	75fb      	strb	r3, [r7, #23]
          break;
 80138fe:	e016      	b.n	801392e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013906:	b2db      	uxtb	r3, r3
 8013908:	2b03      	cmp	r3, #3
 801390a:	d00f      	beq.n	801392c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 801390c:	6839      	ldr	r1, [r7, #0]
 801390e:	6878      	ldr	r0, [r7, #4]
 8013910:	f001 f9bc 	bl	8014c8c <USBD_CtlError>
            ret = USBD_FAIL;
 8013914:	2303      	movs	r3, #3
 8013916:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8013918:	e008      	b.n	801392c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801391a:	6839      	ldr	r1, [r7, #0]
 801391c:	6878      	ldr	r0, [r7, #4]
 801391e:	f001 f9b5 	bl	8014c8c <USBD_CtlError>
          ret = USBD_FAIL;
 8013922:	2303      	movs	r3, #3
 8013924:	75fb      	strb	r3, [r7, #23]
          break;
 8013926:	e002      	b.n	801392e <USBD_CDC_Setup+0x176>
          break;
 8013928:	bf00      	nop
 801392a:	e008      	b.n	801393e <USBD_CDC_Setup+0x186>
          break;
 801392c:	bf00      	nop
      }
      break;
 801392e:	e006      	b.n	801393e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8013930:	6839      	ldr	r1, [r7, #0]
 8013932:	6878      	ldr	r0, [r7, #4]
 8013934:	f001 f9aa 	bl	8014c8c <USBD_CtlError>
      ret = USBD_FAIL;
 8013938:	2303      	movs	r3, #3
 801393a:	75fb      	strb	r3, [r7, #23]
      break;
 801393c:	bf00      	nop
  }

  return (uint8_t)ret;
 801393e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013940:	4618      	mov	r0, r3
 8013942:	3718      	adds	r7, #24
 8013944:	46bd      	mov	sp, r7
 8013946:	bd80      	pop	{r7, pc}

08013948 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013948:	b580      	push	{r7, lr}
 801394a:	b084      	sub	sp, #16
 801394c:	af00      	add	r7, sp, #0
 801394e:	6078      	str	r0, [r7, #4]
 8013950:	460b      	mov	r3, r1
 8013952:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801395a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013962:	2b00      	cmp	r3, #0
 8013964:	d101      	bne.n	801396a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8013966:	2303      	movs	r3, #3
 8013968:	e04f      	b.n	8013a0a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013970:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8013972:	78fa      	ldrb	r2, [r7, #3]
 8013974:	6879      	ldr	r1, [r7, #4]
 8013976:	4613      	mov	r3, r2
 8013978:	009b      	lsls	r3, r3, #2
 801397a:	4413      	add	r3, r2
 801397c:	009b      	lsls	r3, r3, #2
 801397e:	440b      	add	r3, r1
 8013980:	3318      	adds	r3, #24
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	2b00      	cmp	r3, #0
 8013986:	d029      	beq.n	80139dc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8013988:	78fa      	ldrb	r2, [r7, #3]
 801398a:	6879      	ldr	r1, [r7, #4]
 801398c:	4613      	mov	r3, r2
 801398e:	009b      	lsls	r3, r3, #2
 8013990:	4413      	add	r3, r2
 8013992:	009b      	lsls	r3, r3, #2
 8013994:	440b      	add	r3, r1
 8013996:	3318      	adds	r3, #24
 8013998:	681a      	ldr	r2, [r3, #0]
 801399a:	78f9      	ldrb	r1, [r7, #3]
 801399c:	68f8      	ldr	r0, [r7, #12]
 801399e:	460b      	mov	r3, r1
 80139a0:	009b      	lsls	r3, r3, #2
 80139a2:	440b      	add	r3, r1
 80139a4:	00db      	lsls	r3, r3, #3
 80139a6:	4403      	add	r3, r0
 80139a8:	3338      	adds	r3, #56	; 0x38
 80139aa:	681b      	ldr	r3, [r3, #0]
 80139ac:	fbb2 f1f3 	udiv	r1, r2, r3
 80139b0:	fb01 f303 	mul.w	r3, r1, r3
 80139b4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d110      	bne.n	80139dc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80139ba:	78fa      	ldrb	r2, [r7, #3]
 80139bc:	6879      	ldr	r1, [r7, #4]
 80139be:	4613      	mov	r3, r2
 80139c0:	009b      	lsls	r3, r3, #2
 80139c2:	4413      	add	r3, r2
 80139c4:	009b      	lsls	r3, r3, #2
 80139c6:	440b      	add	r3, r1
 80139c8:	3318      	adds	r3, #24
 80139ca:	2200      	movs	r2, #0
 80139cc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80139ce:	78f9      	ldrb	r1, [r7, #3]
 80139d0:	2300      	movs	r3, #0
 80139d2:	2200      	movs	r2, #0
 80139d4:	6878      	ldr	r0, [r7, #4]
 80139d6:	f003 ff71 	bl	80178bc <USBD_LL_Transmit>
 80139da:	e015      	b.n	8013a08 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80139dc:	68bb      	ldr	r3, [r7, #8]
 80139de:	2200      	movs	r2, #0
 80139e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80139ea:	691b      	ldr	r3, [r3, #16]
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d00b      	beq.n	8013a08 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80139f6:	691b      	ldr	r3, [r3, #16]
 80139f8:	68ba      	ldr	r2, [r7, #8]
 80139fa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80139fe:	68ba      	ldr	r2, [r7, #8]
 8013a00:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8013a04:	78fa      	ldrb	r2, [r7, #3]
 8013a06:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8013a08:	2300      	movs	r3, #0
}
 8013a0a:	4618      	mov	r0, r3
 8013a0c:	3710      	adds	r7, #16
 8013a0e:	46bd      	mov	sp, r7
 8013a10:	bd80      	pop	{r7, pc}

08013a12 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013a12:	b580      	push	{r7, lr}
 8013a14:	b084      	sub	sp, #16
 8013a16:	af00      	add	r7, sp, #0
 8013a18:	6078      	str	r0, [r7, #4]
 8013a1a:	460b      	mov	r3, r1
 8013a1c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013a24:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d101      	bne.n	8013a34 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8013a30:	2303      	movs	r3, #3
 8013a32:	e015      	b.n	8013a60 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013a34:	78fb      	ldrb	r3, [r7, #3]
 8013a36:	4619      	mov	r1, r3
 8013a38:	6878      	ldr	r0, [r7, #4]
 8013a3a:	f003 ff81 	bl	8017940 <USBD_LL_GetRxDataSize>
 8013a3e:	4602      	mov	r2, r0
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013a4c:	68db      	ldr	r3, [r3, #12]
 8013a4e:	68fa      	ldr	r2, [r7, #12]
 8013a50:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8013a54:	68fa      	ldr	r2, [r7, #12]
 8013a56:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8013a5a:	4611      	mov	r1, r2
 8013a5c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8013a5e:	2300      	movs	r3, #0
}
 8013a60:	4618      	mov	r0, r3
 8013a62:	3710      	adds	r7, #16
 8013a64:	46bd      	mov	sp, r7
 8013a66:	bd80      	pop	{r7, pc}

08013a68 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8013a68:	b580      	push	{r7, lr}
 8013a6a:	b084      	sub	sp, #16
 8013a6c:	af00      	add	r7, sp, #0
 8013a6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013a76:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d101      	bne.n	8013a82 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8013a7e:	2303      	movs	r3, #3
 8013a80:	e01b      	b.n	8013aba <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d015      	beq.n	8013ab8 <USBD_CDC_EP0_RxReady+0x50>
 8013a8c:	68fb      	ldr	r3, [r7, #12]
 8013a8e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8013a92:	2bff      	cmp	r3, #255	; 0xff
 8013a94:	d010      	beq.n	8013ab8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013a9c:	689b      	ldr	r3, [r3, #8]
 8013a9e:	68fa      	ldr	r2, [r7, #12]
 8013aa0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8013aa4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8013aa6:	68fa      	ldr	r2, [r7, #12]
 8013aa8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8013aac:	b292      	uxth	r2, r2
 8013aae:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8013ab0:	68fb      	ldr	r3, [r7, #12]
 8013ab2:	22ff      	movs	r2, #255	; 0xff
 8013ab4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8013ab8:	2300      	movs	r3, #0
}
 8013aba:	4618      	mov	r0, r3
 8013abc:	3710      	adds	r7, #16
 8013abe:	46bd      	mov	sp, r7
 8013ac0:	bd80      	pop	{r7, pc}
	...

08013ac4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8013ac4:	b480      	push	{r7}
 8013ac6:	b083      	sub	sp, #12
 8013ac8:	af00      	add	r7, sp, #0
 8013aca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	2243      	movs	r2, #67	; 0x43
 8013ad0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8013ad2:	4b03      	ldr	r3, [pc, #12]	; (8013ae0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8013ad4:	4618      	mov	r0, r3
 8013ad6:	370c      	adds	r7, #12
 8013ad8:	46bd      	mov	sp, r7
 8013ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ade:	4770      	bx	lr
 8013ae0:	20000098 	.word	0x20000098

08013ae4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8013ae4:	b480      	push	{r7}
 8013ae6:	b083      	sub	sp, #12
 8013ae8:	af00      	add	r7, sp, #0
 8013aea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	2243      	movs	r2, #67	; 0x43
 8013af0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8013af2:	4b03      	ldr	r3, [pc, #12]	; (8013b00 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8013af4:	4618      	mov	r0, r3
 8013af6:	370c      	adds	r7, #12
 8013af8:	46bd      	mov	sp, r7
 8013afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013afe:	4770      	bx	lr
 8013b00:	20000054 	.word	0x20000054

08013b04 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8013b04:	b480      	push	{r7}
 8013b06:	b083      	sub	sp, #12
 8013b08:	af00      	add	r7, sp, #0
 8013b0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	2243      	movs	r2, #67	; 0x43
 8013b10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8013b12:	4b03      	ldr	r3, [pc, #12]	; (8013b20 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8013b14:	4618      	mov	r0, r3
 8013b16:	370c      	adds	r7, #12
 8013b18:	46bd      	mov	sp, r7
 8013b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b1e:	4770      	bx	lr
 8013b20:	200000dc 	.word	0x200000dc

08013b24 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013b24:	b480      	push	{r7}
 8013b26:	b083      	sub	sp, #12
 8013b28:	af00      	add	r7, sp, #0
 8013b2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	220a      	movs	r2, #10
 8013b30:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8013b32:	4b03      	ldr	r3, [pc, #12]	; (8013b40 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8013b34:	4618      	mov	r0, r3
 8013b36:	370c      	adds	r7, #12
 8013b38:	46bd      	mov	sp, r7
 8013b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b3e:	4770      	bx	lr
 8013b40:	20000010 	.word	0x20000010

08013b44 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8013b44:	b480      	push	{r7}
 8013b46:	b083      	sub	sp, #12
 8013b48:	af00      	add	r7, sp, #0
 8013b4a:	6078      	str	r0, [r7, #4]
 8013b4c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8013b4e:	683b      	ldr	r3, [r7, #0]
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d101      	bne.n	8013b58 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8013b54:	2303      	movs	r3, #3
 8013b56:	e004      	b.n	8013b62 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	683a      	ldr	r2, [r7, #0]
 8013b5c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8013b60:	2300      	movs	r3, #0
}
 8013b62:	4618      	mov	r0, r3
 8013b64:	370c      	adds	r7, #12
 8013b66:	46bd      	mov	sp, r7
 8013b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b6c:	4770      	bx	lr

08013b6e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8013b6e:	b480      	push	{r7}
 8013b70:	b087      	sub	sp, #28
 8013b72:	af00      	add	r7, sp, #0
 8013b74:	60f8      	str	r0, [r7, #12]
 8013b76:	60b9      	str	r1, [r7, #8]
 8013b78:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013b80:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8013b82:	697b      	ldr	r3, [r7, #20]
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d101      	bne.n	8013b8c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8013b88:	2303      	movs	r3, #3
 8013b8a:	e008      	b.n	8013b9e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8013b8c:	697b      	ldr	r3, [r7, #20]
 8013b8e:	68ba      	ldr	r2, [r7, #8]
 8013b90:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8013b94:	697b      	ldr	r3, [r7, #20]
 8013b96:	687a      	ldr	r2, [r7, #4]
 8013b98:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8013b9c:	2300      	movs	r3, #0
}
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	371c      	adds	r7, #28
 8013ba2:	46bd      	mov	sp, r7
 8013ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ba8:	4770      	bx	lr

08013baa <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8013baa:	b480      	push	{r7}
 8013bac:	b085      	sub	sp, #20
 8013bae:	af00      	add	r7, sp, #0
 8013bb0:	6078      	str	r0, [r7, #4]
 8013bb2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013bba:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d101      	bne.n	8013bc6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8013bc2:	2303      	movs	r3, #3
 8013bc4:	e004      	b.n	8013bd0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	683a      	ldr	r2, [r7, #0]
 8013bca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8013bce:	2300      	movs	r3, #0
}
 8013bd0:	4618      	mov	r0, r3
 8013bd2:	3714      	adds	r7, #20
 8013bd4:	46bd      	mov	sp, r7
 8013bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bda:	4770      	bx	lr

08013bdc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8013bdc:	b580      	push	{r7, lr}
 8013bde:	b084      	sub	sp, #16
 8013be0:	af00      	add	r7, sp, #0
 8013be2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013bea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d101      	bne.n	8013bfa <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8013bf6:	2303      	movs	r3, #3
 8013bf8:	e016      	b.n	8013c28 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	7c1b      	ldrb	r3, [r3, #16]
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d109      	bne.n	8013c16 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013c08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013c0c:	2101      	movs	r1, #1
 8013c0e:	6878      	ldr	r0, [r7, #4]
 8013c10:	f003 fe75 	bl	80178fe <USBD_LL_PrepareReceive>
 8013c14:	e007      	b.n	8013c26 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013c1c:	2340      	movs	r3, #64	; 0x40
 8013c1e:	2101      	movs	r1, #1
 8013c20:	6878      	ldr	r0, [r7, #4]
 8013c22:	f003 fe6c 	bl	80178fe <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013c26:	2300      	movs	r3, #0
}
 8013c28:	4618      	mov	r0, r3
 8013c2a:	3710      	adds	r7, #16
 8013c2c:	46bd      	mov	sp, r7
 8013c2e:	bd80      	pop	{r7, pc}

08013c30 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013c30:	b580      	push	{r7, lr}
 8013c32:	b086      	sub	sp, #24
 8013c34:	af00      	add	r7, sp, #0
 8013c36:	60f8      	str	r0, [r7, #12]
 8013c38:	60b9      	str	r1, [r7, #8]
 8013c3a:	4613      	mov	r3, r2
 8013c3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013c3e:	68fb      	ldr	r3, [r7, #12]
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d101      	bne.n	8013c48 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8013c44:	2303      	movs	r3, #3
 8013c46:	e01f      	b.n	8013c88 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	2200      	movs	r2, #0
 8013c4c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8013c50:	68fb      	ldr	r3, [r7, #12]
 8013c52:	2200      	movs	r2, #0
 8013c54:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8013c58:	68fb      	ldr	r3, [r7, #12]
 8013c5a:	2200      	movs	r2, #0
 8013c5c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013c60:	68bb      	ldr	r3, [r7, #8]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d003      	beq.n	8013c6e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8013c66:	68fb      	ldr	r3, [r7, #12]
 8013c68:	68ba      	ldr	r2, [r7, #8]
 8013c6a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	2201      	movs	r2, #1
 8013c72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	79fa      	ldrb	r2, [r7, #7]
 8013c7a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8013c7c:	68f8      	ldr	r0, [r7, #12]
 8013c7e:	f003 fcd3 	bl	8017628 <USBD_LL_Init>
 8013c82:	4603      	mov	r3, r0
 8013c84:	75fb      	strb	r3, [r7, #23]

  return ret;
 8013c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c88:	4618      	mov	r0, r3
 8013c8a:	3718      	adds	r7, #24
 8013c8c:	46bd      	mov	sp, r7
 8013c8e:	bd80      	pop	{r7, pc}

08013c90 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013c90:	b580      	push	{r7, lr}
 8013c92:	b084      	sub	sp, #16
 8013c94:	af00      	add	r7, sp, #0
 8013c96:	6078      	str	r0, [r7, #4]
 8013c98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013c9a:	2300      	movs	r3, #0
 8013c9c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8013c9e:	683b      	ldr	r3, [r7, #0]
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d101      	bne.n	8013ca8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8013ca4:	2303      	movs	r3, #3
 8013ca6:	e016      	b.n	8013cd6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	683a      	ldr	r2, [r7, #0]
 8013cac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d00b      	beq.n	8013cd4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cc4:	f107 020e 	add.w	r2, r7, #14
 8013cc8:	4610      	mov	r0, r2
 8013cca:	4798      	blx	r3
 8013ccc:	4602      	mov	r2, r0
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8013cd4:	2300      	movs	r3, #0
}
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	3710      	adds	r7, #16
 8013cda:	46bd      	mov	sp, r7
 8013cdc:	bd80      	pop	{r7, pc}

08013cde <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013cde:	b580      	push	{r7, lr}
 8013ce0:	b082      	sub	sp, #8
 8013ce2:	af00      	add	r7, sp, #0
 8013ce4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013ce6:	6878      	ldr	r0, [r7, #4]
 8013ce8:	f003 fcfe 	bl	80176e8 <USBD_LL_Start>
 8013cec:	4603      	mov	r3, r0
}
 8013cee:	4618      	mov	r0, r3
 8013cf0:	3708      	adds	r7, #8
 8013cf2:	46bd      	mov	sp, r7
 8013cf4:	bd80      	pop	{r7, pc}

08013cf6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8013cf6:	b480      	push	{r7}
 8013cf8:	b083      	sub	sp, #12
 8013cfa:	af00      	add	r7, sp, #0
 8013cfc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013cfe:	2300      	movs	r3, #0
}
 8013d00:	4618      	mov	r0, r3
 8013d02:	370c      	adds	r7, #12
 8013d04:	46bd      	mov	sp, r7
 8013d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d0a:	4770      	bx	lr

08013d0c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013d0c:	b580      	push	{r7, lr}
 8013d0e:	b084      	sub	sp, #16
 8013d10:	af00      	add	r7, sp, #0
 8013d12:	6078      	str	r0, [r7, #4]
 8013d14:	460b      	mov	r3, r1
 8013d16:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8013d18:	2303      	movs	r3, #3
 8013d1a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d009      	beq.n	8013d3a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	78fa      	ldrb	r2, [r7, #3]
 8013d30:	4611      	mov	r1, r2
 8013d32:	6878      	ldr	r0, [r7, #4]
 8013d34:	4798      	blx	r3
 8013d36:	4603      	mov	r3, r0
 8013d38:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8013d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d3c:	4618      	mov	r0, r3
 8013d3e:	3710      	adds	r7, #16
 8013d40:	46bd      	mov	sp, r7
 8013d42:	bd80      	pop	{r7, pc}

08013d44 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013d44:	b580      	push	{r7, lr}
 8013d46:	b082      	sub	sp, #8
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	6078      	str	r0, [r7, #4]
 8013d4c:	460b      	mov	r3, r1
 8013d4e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d007      	beq.n	8013d6a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d60:	685b      	ldr	r3, [r3, #4]
 8013d62:	78fa      	ldrb	r2, [r7, #3]
 8013d64:	4611      	mov	r1, r2
 8013d66:	6878      	ldr	r0, [r7, #4]
 8013d68:	4798      	blx	r3
  }

  return USBD_OK;
 8013d6a:	2300      	movs	r3, #0
}
 8013d6c:	4618      	mov	r0, r3
 8013d6e:	3708      	adds	r7, #8
 8013d70:	46bd      	mov	sp, r7
 8013d72:	bd80      	pop	{r7, pc}

08013d74 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013d74:	b580      	push	{r7, lr}
 8013d76:	b084      	sub	sp, #16
 8013d78:	af00      	add	r7, sp, #0
 8013d7a:	6078      	str	r0, [r7, #4]
 8013d7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013d84:	6839      	ldr	r1, [r7, #0]
 8013d86:	4618      	mov	r0, r3
 8013d88:	f000 ff46 	bl	8014c18 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	2201      	movs	r2, #1
 8013d90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8013d9a:	461a      	mov	r2, r3
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013da8:	f003 031f 	and.w	r3, r3, #31
 8013dac:	2b02      	cmp	r3, #2
 8013dae:	d01a      	beq.n	8013de6 <USBD_LL_SetupStage+0x72>
 8013db0:	2b02      	cmp	r3, #2
 8013db2:	d822      	bhi.n	8013dfa <USBD_LL_SetupStage+0x86>
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d002      	beq.n	8013dbe <USBD_LL_SetupStage+0x4a>
 8013db8:	2b01      	cmp	r3, #1
 8013dba:	d00a      	beq.n	8013dd2 <USBD_LL_SetupStage+0x5e>
 8013dbc:	e01d      	b.n	8013dfa <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013dc4:	4619      	mov	r1, r3
 8013dc6:	6878      	ldr	r0, [r7, #4]
 8013dc8:	f000 f9ee 	bl	80141a8 <USBD_StdDevReq>
 8013dcc:	4603      	mov	r3, r0
 8013dce:	73fb      	strb	r3, [r7, #15]
      break;
 8013dd0:	e020      	b.n	8013e14 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013dd8:	4619      	mov	r1, r3
 8013dda:	6878      	ldr	r0, [r7, #4]
 8013ddc:	f000 fa52 	bl	8014284 <USBD_StdItfReq>
 8013de0:	4603      	mov	r3, r0
 8013de2:	73fb      	strb	r3, [r7, #15]
      break;
 8013de4:	e016      	b.n	8013e14 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013dec:	4619      	mov	r1, r3
 8013dee:	6878      	ldr	r0, [r7, #4]
 8013df0:	f000 fa91 	bl	8014316 <USBD_StdEPReq>
 8013df4:	4603      	mov	r3, r0
 8013df6:	73fb      	strb	r3, [r7, #15]
      break;
 8013df8:	e00c      	b.n	8013e14 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013e00:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013e04:	b2db      	uxtb	r3, r3
 8013e06:	4619      	mov	r1, r3
 8013e08:	6878      	ldr	r0, [r7, #4]
 8013e0a:	f003 fccd 	bl	80177a8 <USBD_LL_StallEP>
 8013e0e:	4603      	mov	r3, r0
 8013e10:	73fb      	strb	r3, [r7, #15]
      break;
 8013e12:	bf00      	nop
  }

  return ret;
 8013e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e16:	4618      	mov	r0, r3
 8013e18:	3710      	adds	r7, #16
 8013e1a:	46bd      	mov	sp, r7
 8013e1c:	bd80      	pop	{r7, pc}

08013e1e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013e1e:	b580      	push	{r7, lr}
 8013e20:	b086      	sub	sp, #24
 8013e22:	af00      	add	r7, sp, #0
 8013e24:	60f8      	str	r0, [r7, #12]
 8013e26:	460b      	mov	r3, r1
 8013e28:	607a      	str	r2, [r7, #4]
 8013e2a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8013e2c:	7afb      	ldrb	r3, [r7, #11]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d138      	bne.n	8013ea4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8013e38:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013e40:	2b03      	cmp	r3, #3
 8013e42:	d14a      	bne.n	8013eda <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8013e44:	693b      	ldr	r3, [r7, #16]
 8013e46:	689a      	ldr	r2, [r3, #8]
 8013e48:	693b      	ldr	r3, [r7, #16]
 8013e4a:	68db      	ldr	r3, [r3, #12]
 8013e4c:	429a      	cmp	r2, r3
 8013e4e:	d913      	bls.n	8013e78 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013e50:	693b      	ldr	r3, [r7, #16]
 8013e52:	689a      	ldr	r2, [r3, #8]
 8013e54:	693b      	ldr	r3, [r7, #16]
 8013e56:	68db      	ldr	r3, [r3, #12]
 8013e58:	1ad2      	subs	r2, r2, r3
 8013e5a:	693b      	ldr	r3, [r7, #16]
 8013e5c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013e5e:	693b      	ldr	r3, [r7, #16]
 8013e60:	68da      	ldr	r2, [r3, #12]
 8013e62:	693b      	ldr	r3, [r7, #16]
 8013e64:	689b      	ldr	r3, [r3, #8]
 8013e66:	4293      	cmp	r3, r2
 8013e68:	bf28      	it	cs
 8013e6a:	4613      	movcs	r3, r2
 8013e6c:	461a      	mov	r2, r3
 8013e6e:	6879      	ldr	r1, [r7, #4]
 8013e70:	68f8      	ldr	r0, [r7, #12]
 8013e72:	f000 ffc5 	bl	8014e00 <USBD_CtlContinueRx>
 8013e76:	e030      	b.n	8013eda <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013e7e:	b2db      	uxtb	r3, r3
 8013e80:	2b03      	cmp	r3, #3
 8013e82:	d10b      	bne.n	8013e9c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013e8a:	691b      	ldr	r3, [r3, #16]
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d005      	beq.n	8013e9c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013e96:	691b      	ldr	r3, [r3, #16]
 8013e98:	68f8      	ldr	r0, [r7, #12]
 8013e9a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8013e9c:	68f8      	ldr	r0, [r7, #12]
 8013e9e:	f000 ffc0 	bl	8014e22 <USBD_CtlSendStatus>
 8013ea2:	e01a      	b.n	8013eda <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013ea4:	68fb      	ldr	r3, [r7, #12]
 8013ea6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013eaa:	b2db      	uxtb	r3, r3
 8013eac:	2b03      	cmp	r3, #3
 8013eae:	d114      	bne.n	8013eda <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013eb6:	699b      	ldr	r3, [r3, #24]
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d00e      	beq.n	8013eda <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013ec2:	699b      	ldr	r3, [r3, #24]
 8013ec4:	7afa      	ldrb	r2, [r7, #11]
 8013ec6:	4611      	mov	r1, r2
 8013ec8:	68f8      	ldr	r0, [r7, #12]
 8013eca:	4798      	blx	r3
 8013ecc:	4603      	mov	r3, r0
 8013ece:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8013ed0:	7dfb      	ldrb	r3, [r7, #23]
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d001      	beq.n	8013eda <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8013ed6:	7dfb      	ldrb	r3, [r7, #23]
 8013ed8:	e000      	b.n	8013edc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8013eda:	2300      	movs	r3, #0
}
 8013edc:	4618      	mov	r0, r3
 8013ede:	3718      	adds	r7, #24
 8013ee0:	46bd      	mov	sp, r7
 8013ee2:	bd80      	pop	{r7, pc}

08013ee4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013ee4:	b580      	push	{r7, lr}
 8013ee6:	b086      	sub	sp, #24
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	60f8      	str	r0, [r7, #12]
 8013eec:	460b      	mov	r3, r1
 8013eee:	607a      	str	r2, [r7, #4]
 8013ef0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8013ef2:	7afb      	ldrb	r3, [r7, #11]
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d16b      	bne.n	8013fd0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	3314      	adds	r3, #20
 8013efc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013f04:	2b02      	cmp	r3, #2
 8013f06:	d156      	bne.n	8013fb6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8013f08:	693b      	ldr	r3, [r7, #16]
 8013f0a:	689a      	ldr	r2, [r3, #8]
 8013f0c:	693b      	ldr	r3, [r7, #16]
 8013f0e:	68db      	ldr	r3, [r3, #12]
 8013f10:	429a      	cmp	r2, r3
 8013f12:	d914      	bls.n	8013f3e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013f14:	693b      	ldr	r3, [r7, #16]
 8013f16:	689a      	ldr	r2, [r3, #8]
 8013f18:	693b      	ldr	r3, [r7, #16]
 8013f1a:	68db      	ldr	r3, [r3, #12]
 8013f1c:	1ad2      	subs	r2, r2, r3
 8013f1e:	693b      	ldr	r3, [r7, #16]
 8013f20:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013f22:	693b      	ldr	r3, [r7, #16]
 8013f24:	689b      	ldr	r3, [r3, #8]
 8013f26:	461a      	mov	r2, r3
 8013f28:	6879      	ldr	r1, [r7, #4]
 8013f2a:	68f8      	ldr	r0, [r7, #12]
 8013f2c:	f000 ff3a 	bl	8014da4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013f30:	2300      	movs	r3, #0
 8013f32:	2200      	movs	r2, #0
 8013f34:	2100      	movs	r1, #0
 8013f36:	68f8      	ldr	r0, [r7, #12]
 8013f38:	f003 fce1 	bl	80178fe <USBD_LL_PrepareReceive>
 8013f3c:	e03b      	b.n	8013fb6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013f3e:	693b      	ldr	r3, [r7, #16]
 8013f40:	68da      	ldr	r2, [r3, #12]
 8013f42:	693b      	ldr	r3, [r7, #16]
 8013f44:	689b      	ldr	r3, [r3, #8]
 8013f46:	429a      	cmp	r2, r3
 8013f48:	d11c      	bne.n	8013f84 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013f4a:	693b      	ldr	r3, [r7, #16]
 8013f4c:	685a      	ldr	r2, [r3, #4]
 8013f4e:	693b      	ldr	r3, [r7, #16]
 8013f50:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013f52:	429a      	cmp	r2, r3
 8013f54:	d316      	bcc.n	8013f84 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8013f56:	693b      	ldr	r3, [r7, #16]
 8013f58:	685a      	ldr	r2, [r3, #4]
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013f60:	429a      	cmp	r2, r3
 8013f62:	d20f      	bcs.n	8013f84 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013f64:	2200      	movs	r2, #0
 8013f66:	2100      	movs	r1, #0
 8013f68:	68f8      	ldr	r0, [r7, #12]
 8013f6a:	f000 ff1b 	bl	8014da4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	2200      	movs	r2, #0
 8013f72:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013f76:	2300      	movs	r3, #0
 8013f78:	2200      	movs	r2, #0
 8013f7a:	2100      	movs	r1, #0
 8013f7c:	68f8      	ldr	r0, [r7, #12]
 8013f7e:	f003 fcbe 	bl	80178fe <USBD_LL_PrepareReceive>
 8013f82:	e018      	b.n	8013fb6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013f84:	68fb      	ldr	r3, [r7, #12]
 8013f86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013f8a:	b2db      	uxtb	r3, r3
 8013f8c:	2b03      	cmp	r3, #3
 8013f8e:	d10b      	bne.n	8013fa8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f96:	68db      	ldr	r3, [r3, #12]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d005      	beq.n	8013fa8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013fa2:	68db      	ldr	r3, [r3, #12]
 8013fa4:	68f8      	ldr	r0, [r7, #12]
 8013fa6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8013fa8:	2180      	movs	r1, #128	; 0x80
 8013faa:	68f8      	ldr	r0, [r7, #12]
 8013fac:	f003 fbfc 	bl	80177a8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013fb0:	68f8      	ldr	r0, [r7, #12]
 8013fb2:	f000 ff49 	bl	8014e48 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8013fbc:	2b01      	cmp	r3, #1
 8013fbe:	d122      	bne.n	8014006 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8013fc0:	68f8      	ldr	r0, [r7, #12]
 8013fc2:	f7ff fe98 	bl	8013cf6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013fc6:	68fb      	ldr	r3, [r7, #12]
 8013fc8:	2200      	movs	r2, #0
 8013fca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8013fce:	e01a      	b.n	8014006 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013fd6:	b2db      	uxtb	r3, r3
 8013fd8:	2b03      	cmp	r3, #3
 8013fda:	d114      	bne.n	8014006 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013fe2:	695b      	ldr	r3, [r3, #20]
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d00e      	beq.n	8014006 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013fee:	695b      	ldr	r3, [r3, #20]
 8013ff0:	7afa      	ldrb	r2, [r7, #11]
 8013ff2:	4611      	mov	r1, r2
 8013ff4:	68f8      	ldr	r0, [r7, #12]
 8013ff6:	4798      	blx	r3
 8013ff8:	4603      	mov	r3, r0
 8013ffa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8013ffc:	7dfb      	ldrb	r3, [r7, #23]
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d001      	beq.n	8014006 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8014002:	7dfb      	ldrb	r3, [r7, #23]
 8014004:	e000      	b.n	8014008 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8014006:	2300      	movs	r3, #0
}
 8014008:	4618      	mov	r0, r3
 801400a:	3718      	adds	r7, #24
 801400c:	46bd      	mov	sp, r7
 801400e:	bd80      	pop	{r7, pc}

08014010 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8014010:	b580      	push	{r7, lr}
 8014012:	b082      	sub	sp, #8
 8014014:	af00      	add	r7, sp, #0
 8014016:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	2201      	movs	r2, #1
 801401c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	2200      	movs	r2, #0
 8014024:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	2200      	movs	r2, #0
 801402c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	2200      	movs	r2, #0
 8014032:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801403c:	2b00      	cmp	r3, #0
 801403e:	d101      	bne.n	8014044 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8014040:	2303      	movs	r3, #3
 8014042:	e02f      	b.n	80140a4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801404a:	2b00      	cmp	r3, #0
 801404c:	d00f      	beq.n	801406e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014054:	685b      	ldr	r3, [r3, #4]
 8014056:	2b00      	cmp	r3, #0
 8014058:	d009      	beq.n	801406e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014060:	685b      	ldr	r3, [r3, #4]
 8014062:	687a      	ldr	r2, [r7, #4]
 8014064:	6852      	ldr	r2, [r2, #4]
 8014066:	b2d2      	uxtb	r2, r2
 8014068:	4611      	mov	r1, r2
 801406a:	6878      	ldr	r0, [r7, #4]
 801406c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801406e:	2340      	movs	r3, #64	; 0x40
 8014070:	2200      	movs	r2, #0
 8014072:	2100      	movs	r1, #0
 8014074:	6878      	ldr	r0, [r7, #4]
 8014076:	f003 fb52 	bl	801771e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	2201      	movs	r2, #1
 801407e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	2240      	movs	r2, #64	; 0x40
 8014086:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801408a:	2340      	movs	r3, #64	; 0x40
 801408c:	2200      	movs	r2, #0
 801408e:	2180      	movs	r1, #128	; 0x80
 8014090:	6878      	ldr	r0, [r7, #4]
 8014092:	f003 fb44 	bl	801771e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	2201      	movs	r2, #1
 801409a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	2240      	movs	r2, #64	; 0x40
 80140a0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80140a2:	2300      	movs	r3, #0
}
 80140a4:	4618      	mov	r0, r3
 80140a6:	3708      	adds	r7, #8
 80140a8:	46bd      	mov	sp, r7
 80140aa:	bd80      	pop	{r7, pc}

080140ac <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80140ac:	b480      	push	{r7}
 80140ae:	b083      	sub	sp, #12
 80140b0:	af00      	add	r7, sp, #0
 80140b2:	6078      	str	r0, [r7, #4]
 80140b4:	460b      	mov	r3, r1
 80140b6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	78fa      	ldrb	r2, [r7, #3]
 80140bc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80140be:	2300      	movs	r3, #0
}
 80140c0:	4618      	mov	r0, r3
 80140c2:	370c      	adds	r7, #12
 80140c4:	46bd      	mov	sp, r7
 80140c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ca:	4770      	bx	lr

080140cc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80140cc:	b480      	push	{r7}
 80140ce:	b083      	sub	sp, #12
 80140d0:	af00      	add	r7, sp, #0
 80140d2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80140da:	b2da      	uxtb	r2, r3
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	2204      	movs	r2, #4
 80140e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80140ea:	2300      	movs	r3, #0
}
 80140ec:	4618      	mov	r0, r3
 80140ee:	370c      	adds	r7, #12
 80140f0:	46bd      	mov	sp, r7
 80140f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140f6:	4770      	bx	lr

080140f8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80140f8:	b480      	push	{r7}
 80140fa:	b083      	sub	sp, #12
 80140fc:	af00      	add	r7, sp, #0
 80140fe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014106:	b2db      	uxtb	r3, r3
 8014108:	2b04      	cmp	r3, #4
 801410a:	d106      	bne.n	801411a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8014112:	b2da      	uxtb	r2, r3
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801411a:	2300      	movs	r3, #0
}
 801411c:	4618      	mov	r0, r3
 801411e:	370c      	adds	r7, #12
 8014120:	46bd      	mov	sp, r7
 8014122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014126:	4770      	bx	lr

08014128 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8014128:	b580      	push	{r7, lr}
 801412a:	b082      	sub	sp, #8
 801412c:	af00      	add	r7, sp, #0
 801412e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014136:	2b00      	cmp	r3, #0
 8014138:	d101      	bne.n	801413e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 801413a:	2303      	movs	r3, #3
 801413c:	e012      	b.n	8014164 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014144:	b2db      	uxtb	r3, r3
 8014146:	2b03      	cmp	r3, #3
 8014148:	d10b      	bne.n	8014162 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014150:	69db      	ldr	r3, [r3, #28]
 8014152:	2b00      	cmp	r3, #0
 8014154:	d005      	beq.n	8014162 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801415c:	69db      	ldr	r3, [r3, #28]
 801415e:	6878      	ldr	r0, [r7, #4]
 8014160:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014162:	2300      	movs	r3, #0
}
 8014164:	4618      	mov	r0, r3
 8014166:	3708      	adds	r7, #8
 8014168:	46bd      	mov	sp, r7
 801416a:	bd80      	pop	{r7, pc}

0801416c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801416c:	b480      	push	{r7}
 801416e:	b087      	sub	sp, #28
 8014170:	af00      	add	r7, sp, #0
 8014172:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8014178:	697b      	ldr	r3, [r7, #20]
 801417a:	781b      	ldrb	r3, [r3, #0]
 801417c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801417e:	697b      	ldr	r3, [r7, #20]
 8014180:	3301      	adds	r3, #1
 8014182:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8014184:	697b      	ldr	r3, [r7, #20]
 8014186:	781b      	ldrb	r3, [r3, #0]
 8014188:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801418a:	8a3b      	ldrh	r3, [r7, #16]
 801418c:	021b      	lsls	r3, r3, #8
 801418e:	b21a      	sxth	r2, r3
 8014190:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014194:	4313      	orrs	r3, r2
 8014196:	b21b      	sxth	r3, r3
 8014198:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801419a:	89fb      	ldrh	r3, [r7, #14]
}
 801419c:	4618      	mov	r0, r3
 801419e:	371c      	adds	r7, #28
 80141a0:	46bd      	mov	sp, r7
 80141a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141a6:	4770      	bx	lr

080141a8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80141a8:	b580      	push	{r7, lr}
 80141aa:	b084      	sub	sp, #16
 80141ac:	af00      	add	r7, sp, #0
 80141ae:	6078      	str	r0, [r7, #4]
 80141b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80141b2:	2300      	movs	r3, #0
 80141b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80141b6:	683b      	ldr	r3, [r7, #0]
 80141b8:	781b      	ldrb	r3, [r3, #0]
 80141ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80141be:	2b40      	cmp	r3, #64	; 0x40
 80141c0:	d005      	beq.n	80141ce <USBD_StdDevReq+0x26>
 80141c2:	2b40      	cmp	r3, #64	; 0x40
 80141c4:	d853      	bhi.n	801426e <USBD_StdDevReq+0xc6>
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d00b      	beq.n	80141e2 <USBD_StdDevReq+0x3a>
 80141ca:	2b20      	cmp	r3, #32
 80141cc:	d14f      	bne.n	801426e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80141d4:	689b      	ldr	r3, [r3, #8]
 80141d6:	6839      	ldr	r1, [r7, #0]
 80141d8:	6878      	ldr	r0, [r7, #4]
 80141da:	4798      	blx	r3
 80141dc:	4603      	mov	r3, r0
 80141de:	73fb      	strb	r3, [r7, #15]
      break;
 80141e0:	e04a      	b.n	8014278 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80141e2:	683b      	ldr	r3, [r7, #0]
 80141e4:	785b      	ldrb	r3, [r3, #1]
 80141e6:	2b09      	cmp	r3, #9
 80141e8:	d83b      	bhi.n	8014262 <USBD_StdDevReq+0xba>
 80141ea:	a201      	add	r2, pc, #4	; (adr r2, 80141f0 <USBD_StdDevReq+0x48>)
 80141ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141f0:	08014245 	.word	0x08014245
 80141f4:	08014259 	.word	0x08014259
 80141f8:	08014263 	.word	0x08014263
 80141fc:	0801424f 	.word	0x0801424f
 8014200:	08014263 	.word	0x08014263
 8014204:	08014223 	.word	0x08014223
 8014208:	08014219 	.word	0x08014219
 801420c:	08014263 	.word	0x08014263
 8014210:	0801423b 	.word	0x0801423b
 8014214:	0801422d 	.word	0x0801422d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8014218:	6839      	ldr	r1, [r7, #0]
 801421a:	6878      	ldr	r0, [r7, #4]
 801421c:	f000 f9de 	bl	80145dc <USBD_GetDescriptor>
          break;
 8014220:	e024      	b.n	801426c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8014222:	6839      	ldr	r1, [r7, #0]
 8014224:	6878      	ldr	r0, [r7, #4]
 8014226:	f000 fb6d 	bl	8014904 <USBD_SetAddress>
          break;
 801422a:	e01f      	b.n	801426c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801422c:	6839      	ldr	r1, [r7, #0]
 801422e:	6878      	ldr	r0, [r7, #4]
 8014230:	f000 fbac 	bl	801498c <USBD_SetConfig>
 8014234:	4603      	mov	r3, r0
 8014236:	73fb      	strb	r3, [r7, #15]
          break;
 8014238:	e018      	b.n	801426c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801423a:	6839      	ldr	r1, [r7, #0]
 801423c:	6878      	ldr	r0, [r7, #4]
 801423e:	f000 fc4b 	bl	8014ad8 <USBD_GetConfig>
          break;
 8014242:	e013      	b.n	801426c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8014244:	6839      	ldr	r1, [r7, #0]
 8014246:	6878      	ldr	r0, [r7, #4]
 8014248:	f000 fc7c 	bl	8014b44 <USBD_GetStatus>
          break;
 801424c:	e00e      	b.n	801426c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801424e:	6839      	ldr	r1, [r7, #0]
 8014250:	6878      	ldr	r0, [r7, #4]
 8014252:	f000 fcab 	bl	8014bac <USBD_SetFeature>
          break;
 8014256:	e009      	b.n	801426c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014258:	6839      	ldr	r1, [r7, #0]
 801425a:	6878      	ldr	r0, [r7, #4]
 801425c:	f000 fcba 	bl	8014bd4 <USBD_ClrFeature>
          break;
 8014260:	e004      	b.n	801426c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8014262:	6839      	ldr	r1, [r7, #0]
 8014264:	6878      	ldr	r0, [r7, #4]
 8014266:	f000 fd11 	bl	8014c8c <USBD_CtlError>
          break;
 801426a:	bf00      	nop
      }
      break;
 801426c:	e004      	b.n	8014278 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801426e:	6839      	ldr	r1, [r7, #0]
 8014270:	6878      	ldr	r0, [r7, #4]
 8014272:	f000 fd0b 	bl	8014c8c <USBD_CtlError>
      break;
 8014276:	bf00      	nop
  }

  return ret;
 8014278:	7bfb      	ldrb	r3, [r7, #15]
}
 801427a:	4618      	mov	r0, r3
 801427c:	3710      	adds	r7, #16
 801427e:	46bd      	mov	sp, r7
 8014280:	bd80      	pop	{r7, pc}
 8014282:	bf00      	nop

08014284 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014284:	b580      	push	{r7, lr}
 8014286:	b084      	sub	sp, #16
 8014288:	af00      	add	r7, sp, #0
 801428a:	6078      	str	r0, [r7, #4]
 801428c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801428e:	2300      	movs	r3, #0
 8014290:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014292:	683b      	ldr	r3, [r7, #0]
 8014294:	781b      	ldrb	r3, [r3, #0]
 8014296:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801429a:	2b40      	cmp	r3, #64	; 0x40
 801429c:	d005      	beq.n	80142aa <USBD_StdItfReq+0x26>
 801429e:	2b40      	cmp	r3, #64	; 0x40
 80142a0:	d82f      	bhi.n	8014302 <USBD_StdItfReq+0x7e>
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d001      	beq.n	80142aa <USBD_StdItfReq+0x26>
 80142a6:	2b20      	cmp	r3, #32
 80142a8:	d12b      	bne.n	8014302 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80142b0:	b2db      	uxtb	r3, r3
 80142b2:	3b01      	subs	r3, #1
 80142b4:	2b02      	cmp	r3, #2
 80142b6:	d81d      	bhi.n	80142f4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80142b8:	683b      	ldr	r3, [r7, #0]
 80142ba:	889b      	ldrh	r3, [r3, #4]
 80142bc:	b2db      	uxtb	r3, r3
 80142be:	2b01      	cmp	r3, #1
 80142c0:	d813      	bhi.n	80142ea <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80142c8:	689b      	ldr	r3, [r3, #8]
 80142ca:	6839      	ldr	r1, [r7, #0]
 80142cc:	6878      	ldr	r0, [r7, #4]
 80142ce:	4798      	blx	r3
 80142d0:	4603      	mov	r3, r0
 80142d2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80142d4:	683b      	ldr	r3, [r7, #0]
 80142d6:	88db      	ldrh	r3, [r3, #6]
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d110      	bne.n	80142fe <USBD_StdItfReq+0x7a>
 80142dc:	7bfb      	ldrb	r3, [r7, #15]
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d10d      	bne.n	80142fe <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80142e2:	6878      	ldr	r0, [r7, #4]
 80142e4:	f000 fd9d 	bl	8014e22 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80142e8:	e009      	b.n	80142fe <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80142ea:	6839      	ldr	r1, [r7, #0]
 80142ec:	6878      	ldr	r0, [r7, #4]
 80142ee:	f000 fccd 	bl	8014c8c <USBD_CtlError>
          break;
 80142f2:	e004      	b.n	80142fe <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80142f4:	6839      	ldr	r1, [r7, #0]
 80142f6:	6878      	ldr	r0, [r7, #4]
 80142f8:	f000 fcc8 	bl	8014c8c <USBD_CtlError>
          break;
 80142fc:	e000      	b.n	8014300 <USBD_StdItfReq+0x7c>
          break;
 80142fe:	bf00      	nop
      }
      break;
 8014300:	e004      	b.n	801430c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8014302:	6839      	ldr	r1, [r7, #0]
 8014304:	6878      	ldr	r0, [r7, #4]
 8014306:	f000 fcc1 	bl	8014c8c <USBD_CtlError>
      break;
 801430a:	bf00      	nop
  }

  return ret;
 801430c:	7bfb      	ldrb	r3, [r7, #15]
}
 801430e:	4618      	mov	r0, r3
 8014310:	3710      	adds	r7, #16
 8014312:	46bd      	mov	sp, r7
 8014314:	bd80      	pop	{r7, pc}

08014316 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014316:	b580      	push	{r7, lr}
 8014318:	b084      	sub	sp, #16
 801431a:	af00      	add	r7, sp, #0
 801431c:	6078      	str	r0, [r7, #4]
 801431e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8014320:	2300      	movs	r3, #0
 8014322:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8014324:	683b      	ldr	r3, [r7, #0]
 8014326:	889b      	ldrh	r3, [r3, #4]
 8014328:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801432a:	683b      	ldr	r3, [r7, #0]
 801432c:	781b      	ldrb	r3, [r3, #0]
 801432e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014332:	2b40      	cmp	r3, #64	; 0x40
 8014334:	d007      	beq.n	8014346 <USBD_StdEPReq+0x30>
 8014336:	2b40      	cmp	r3, #64	; 0x40
 8014338:	f200 8145 	bhi.w	80145c6 <USBD_StdEPReq+0x2b0>
 801433c:	2b00      	cmp	r3, #0
 801433e:	d00c      	beq.n	801435a <USBD_StdEPReq+0x44>
 8014340:	2b20      	cmp	r3, #32
 8014342:	f040 8140 	bne.w	80145c6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801434c:	689b      	ldr	r3, [r3, #8]
 801434e:	6839      	ldr	r1, [r7, #0]
 8014350:	6878      	ldr	r0, [r7, #4]
 8014352:	4798      	blx	r3
 8014354:	4603      	mov	r3, r0
 8014356:	73fb      	strb	r3, [r7, #15]
      break;
 8014358:	e13a      	b.n	80145d0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801435a:	683b      	ldr	r3, [r7, #0]
 801435c:	785b      	ldrb	r3, [r3, #1]
 801435e:	2b03      	cmp	r3, #3
 8014360:	d007      	beq.n	8014372 <USBD_StdEPReq+0x5c>
 8014362:	2b03      	cmp	r3, #3
 8014364:	f300 8129 	bgt.w	80145ba <USBD_StdEPReq+0x2a4>
 8014368:	2b00      	cmp	r3, #0
 801436a:	d07f      	beq.n	801446c <USBD_StdEPReq+0x156>
 801436c:	2b01      	cmp	r3, #1
 801436e:	d03c      	beq.n	80143ea <USBD_StdEPReq+0xd4>
 8014370:	e123      	b.n	80145ba <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014378:	b2db      	uxtb	r3, r3
 801437a:	2b02      	cmp	r3, #2
 801437c:	d002      	beq.n	8014384 <USBD_StdEPReq+0x6e>
 801437e:	2b03      	cmp	r3, #3
 8014380:	d016      	beq.n	80143b0 <USBD_StdEPReq+0x9a>
 8014382:	e02c      	b.n	80143de <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014384:	7bbb      	ldrb	r3, [r7, #14]
 8014386:	2b00      	cmp	r3, #0
 8014388:	d00d      	beq.n	80143a6 <USBD_StdEPReq+0x90>
 801438a:	7bbb      	ldrb	r3, [r7, #14]
 801438c:	2b80      	cmp	r3, #128	; 0x80
 801438e:	d00a      	beq.n	80143a6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014390:	7bbb      	ldrb	r3, [r7, #14]
 8014392:	4619      	mov	r1, r3
 8014394:	6878      	ldr	r0, [r7, #4]
 8014396:	f003 fa07 	bl	80177a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801439a:	2180      	movs	r1, #128	; 0x80
 801439c:	6878      	ldr	r0, [r7, #4]
 801439e:	f003 fa03 	bl	80177a8 <USBD_LL_StallEP>
 80143a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80143a4:	e020      	b.n	80143e8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80143a6:	6839      	ldr	r1, [r7, #0]
 80143a8:	6878      	ldr	r0, [r7, #4]
 80143aa:	f000 fc6f 	bl	8014c8c <USBD_CtlError>
              break;
 80143ae:	e01b      	b.n	80143e8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80143b0:	683b      	ldr	r3, [r7, #0]
 80143b2:	885b      	ldrh	r3, [r3, #2]
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d10e      	bne.n	80143d6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80143b8:	7bbb      	ldrb	r3, [r7, #14]
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d00b      	beq.n	80143d6 <USBD_StdEPReq+0xc0>
 80143be:	7bbb      	ldrb	r3, [r7, #14]
 80143c0:	2b80      	cmp	r3, #128	; 0x80
 80143c2:	d008      	beq.n	80143d6 <USBD_StdEPReq+0xc0>
 80143c4:	683b      	ldr	r3, [r7, #0]
 80143c6:	88db      	ldrh	r3, [r3, #6]
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d104      	bne.n	80143d6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80143cc:	7bbb      	ldrb	r3, [r7, #14]
 80143ce:	4619      	mov	r1, r3
 80143d0:	6878      	ldr	r0, [r7, #4]
 80143d2:	f003 f9e9 	bl	80177a8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80143d6:	6878      	ldr	r0, [r7, #4]
 80143d8:	f000 fd23 	bl	8014e22 <USBD_CtlSendStatus>

              break;
 80143dc:	e004      	b.n	80143e8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80143de:	6839      	ldr	r1, [r7, #0]
 80143e0:	6878      	ldr	r0, [r7, #4]
 80143e2:	f000 fc53 	bl	8014c8c <USBD_CtlError>
              break;
 80143e6:	bf00      	nop
          }
          break;
 80143e8:	e0ec      	b.n	80145c4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80143f0:	b2db      	uxtb	r3, r3
 80143f2:	2b02      	cmp	r3, #2
 80143f4:	d002      	beq.n	80143fc <USBD_StdEPReq+0xe6>
 80143f6:	2b03      	cmp	r3, #3
 80143f8:	d016      	beq.n	8014428 <USBD_StdEPReq+0x112>
 80143fa:	e030      	b.n	801445e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80143fc:	7bbb      	ldrb	r3, [r7, #14]
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d00d      	beq.n	801441e <USBD_StdEPReq+0x108>
 8014402:	7bbb      	ldrb	r3, [r7, #14]
 8014404:	2b80      	cmp	r3, #128	; 0x80
 8014406:	d00a      	beq.n	801441e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014408:	7bbb      	ldrb	r3, [r7, #14]
 801440a:	4619      	mov	r1, r3
 801440c:	6878      	ldr	r0, [r7, #4]
 801440e:	f003 f9cb 	bl	80177a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014412:	2180      	movs	r1, #128	; 0x80
 8014414:	6878      	ldr	r0, [r7, #4]
 8014416:	f003 f9c7 	bl	80177a8 <USBD_LL_StallEP>
 801441a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801441c:	e025      	b.n	801446a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 801441e:	6839      	ldr	r1, [r7, #0]
 8014420:	6878      	ldr	r0, [r7, #4]
 8014422:	f000 fc33 	bl	8014c8c <USBD_CtlError>
              break;
 8014426:	e020      	b.n	801446a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014428:	683b      	ldr	r3, [r7, #0]
 801442a:	885b      	ldrh	r3, [r3, #2]
 801442c:	2b00      	cmp	r3, #0
 801442e:	d11b      	bne.n	8014468 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8014430:	7bbb      	ldrb	r3, [r7, #14]
 8014432:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014436:	2b00      	cmp	r3, #0
 8014438:	d004      	beq.n	8014444 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801443a:	7bbb      	ldrb	r3, [r7, #14]
 801443c:	4619      	mov	r1, r3
 801443e:	6878      	ldr	r0, [r7, #4]
 8014440:	f003 f9d1 	bl	80177e6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8014444:	6878      	ldr	r0, [r7, #4]
 8014446:	f000 fcec 	bl	8014e22 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014450:	689b      	ldr	r3, [r3, #8]
 8014452:	6839      	ldr	r1, [r7, #0]
 8014454:	6878      	ldr	r0, [r7, #4]
 8014456:	4798      	blx	r3
 8014458:	4603      	mov	r3, r0
 801445a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 801445c:	e004      	b.n	8014468 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 801445e:	6839      	ldr	r1, [r7, #0]
 8014460:	6878      	ldr	r0, [r7, #4]
 8014462:	f000 fc13 	bl	8014c8c <USBD_CtlError>
              break;
 8014466:	e000      	b.n	801446a <USBD_StdEPReq+0x154>
              break;
 8014468:	bf00      	nop
          }
          break;
 801446a:	e0ab      	b.n	80145c4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014472:	b2db      	uxtb	r3, r3
 8014474:	2b02      	cmp	r3, #2
 8014476:	d002      	beq.n	801447e <USBD_StdEPReq+0x168>
 8014478:	2b03      	cmp	r3, #3
 801447a:	d032      	beq.n	80144e2 <USBD_StdEPReq+0x1cc>
 801447c:	e097      	b.n	80145ae <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801447e:	7bbb      	ldrb	r3, [r7, #14]
 8014480:	2b00      	cmp	r3, #0
 8014482:	d007      	beq.n	8014494 <USBD_StdEPReq+0x17e>
 8014484:	7bbb      	ldrb	r3, [r7, #14]
 8014486:	2b80      	cmp	r3, #128	; 0x80
 8014488:	d004      	beq.n	8014494 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 801448a:	6839      	ldr	r1, [r7, #0]
 801448c:	6878      	ldr	r0, [r7, #4]
 801448e:	f000 fbfd 	bl	8014c8c <USBD_CtlError>
                break;
 8014492:	e091      	b.n	80145b8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014494:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014498:	2b00      	cmp	r3, #0
 801449a:	da0b      	bge.n	80144b4 <USBD_StdEPReq+0x19e>
 801449c:	7bbb      	ldrb	r3, [r7, #14]
 801449e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80144a2:	4613      	mov	r3, r2
 80144a4:	009b      	lsls	r3, r3, #2
 80144a6:	4413      	add	r3, r2
 80144a8:	009b      	lsls	r3, r3, #2
 80144aa:	3310      	adds	r3, #16
 80144ac:	687a      	ldr	r2, [r7, #4]
 80144ae:	4413      	add	r3, r2
 80144b0:	3304      	adds	r3, #4
 80144b2:	e00b      	b.n	80144cc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80144b4:	7bbb      	ldrb	r3, [r7, #14]
 80144b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80144ba:	4613      	mov	r3, r2
 80144bc:	009b      	lsls	r3, r3, #2
 80144be:	4413      	add	r3, r2
 80144c0:	009b      	lsls	r3, r3, #2
 80144c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80144c6:	687a      	ldr	r2, [r7, #4]
 80144c8:	4413      	add	r3, r2
 80144ca:	3304      	adds	r3, #4
 80144cc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80144ce:	68bb      	ldr	r3, [r7, #8]
 80144d0:	2200      	movs	r2, #0
 80144d2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80144d4:	68bb      	ldr	r3, [r7, #8]
 80144d6:	2202      	movs	r2, #2
 80144d8:	4619      	mov	r1, r3
 80144da:	6878      	ldr	r0, [r7, #4]
 80144dc:	f000 fc47 	bl	8014d6e <USBD_CtlSendData>
              break;
 80144e0:	e06a      	b.n	80145b8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80144e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	da11      	bge.n	801450e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80144ea:	7bbb      	ldrb	r3, [r7, #14]
 80144ec:	f003 020f 	and.w	r2, r3, #15
 80144f0:	6879      	ldr	r1, [r7, #4]
 80144f2:	4613      	mov	r3, r2
 80144f4:	009b      	lsls	r3, r3, #2
 80144f6:	4413      	add	r3, r2
 80144f8:	009b      	lsls	r3, r3, #2
 80144fa:	440b      	add	r3, r1
 80144fc:	3324      	adds	r3, #36	; 0x24
 80144fe:	881b      	ldrh	r3, [r3, #0]
 8014500:	2b00      	cmp	r3, #0
 8014502:	d117      	bne.n	8014534 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8014504:	6839      	ldr	r1, [r7, #0]
 8014506:	6878      	ldr	r0, [r7, #4]
 8014508:	f000 fbc0 	bl	8014c8c <USBD_CtlError>
                  break;
 801450c:	e054      	b.n	80145b8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801450e:	7bbb      	ldrb	r3, [r7, #14]
 8014510:	f003 020f 	and.w	r2, r3, #15
 8014514:	6879      	ldr	r1, [r7, #4]
 8014516:	4613      	mov	r3, r2
 8014518:	009b      	lsls	r3, r3, #2
 801451a:	4413      	add	r3, r2
 801451c:	009b      	lsls	r3, r3, #2
 801451e:	440b      	add	r3, r1
 8014520:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014524:	881b      	ldrh	r3, [r3, #0]
 8014526:	2b00      	cmp	r3, #0
 8014528:	d104      	bne.n	8014534 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801452a:	6839      	ldr	r1, [r7, #0]
 801452c:	6878      	ldr	r0, [r7, #4]
 801452e:	f000 fbad 	bl	8014c8c <USBD_CtlError>
                  break;
 8014532:	e041      	b.n	80145b8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014534:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014538:	2b00      	cmp	r3, #0
 801453a:	da0b      	bge.n	8014554 <USBD_StdEPReq+0x23e>
 801453c:	7bbb      	ldrb	r3, [r7, #14]
 801453e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014542:	4613      	mov	r3, r2
 8014544:	009b      	lsls	r3, r3, #2
 8014546:	4413      	add	r3, r2
 8014548:	009b      	lsls	r3, r3, #2
 801454a:	3310      	adds	r3, #16
 801454c:	687a      	ldr	r2, [r7, #4]
 801454e:	4413      	add	r3, r2
 8014550:	3304      	adds	r3, #4
 8014552:	e00b      	b.n	801456c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014554:	7bbb      	ldrb	r3, [r7, #14]
 8014556:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801455a:	4613      	mov	r3, r2
 801455c:	009b      	lsls	r3, r3, #2
 801455e:	4413      	add	r3, r2
 8014560:	009b      	lsls	r3, r3, #2
 8014562:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014566:	687a      	ldr	r2, [r7, #4]
 8014568:	4413      	add	r3, r2
 801456a:	3304      	adds	r3, #4
 801456c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801456e:	7bbb      	ldrb	r3, [r7, #14]
 8014570:	2b00      	cmp	r3, #0
 8014572:	d002      	beq.n	801457a <USBD_StdEPReq+0x264>
 8014574:	7bbb      	ldrb	r3, [r7, #14]
 8014576:	2b80      	cmp	r3, #128	; 0x80
 8014578:	d103      	bne.n	8014582 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 801457a:	68bb      	ldr	r3, [r7, #8]
 801457c:	2200      	movs	r2, #0
 801457e:	601a      	str	r2, [r3, #0]
 8014580:	e00e      	b.n	80145a0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014582:	7bbb      	ldrb	r3, [r7, #14]
 8014584:	4619      	mov	r1, r3
 8014586:	6878      	ldr	r0, [r7, #4]
 8014588:	f003 f94c 	bl	8017824 <USBD_LL_IsStallEP>
 801458c:	4603      	mov	r3, r0
 801458e:	2b00      	cmp	r3, #0
 8014590:	d003      	beq.n	801459a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8014592:	68bb      	ldr	r3, [r7, #8]
 8014594:	2201      	movs	r2, #1
 8014596:	601a      	str	r2, [r3, #0]
 8014598:	e002      	b.n	80145a0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 801459a:	68bb      	ldr	r3, [r7, #8]
 801459c:	2200      	movs	r2, #0
 801459e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80145a0:	68bb      	ldr	r3, [r7, #8]
 80145a2:	2202      	movs	r2, #2
 80145a4:	4619      	mov	r1, r3
 80145a6:	6878      	ldr	r0, [r7, #4]
 80145a8:	f000 fbe1 	bl	8014d6e <USBD_CtlSendData>
              break;
 80145ac:	e004      	b.n	80145b8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80145ae:	6839      	ldr	r1, [r7, #0]
 80145b0:	6878      	ldr	r0, [r7, #4]
 80145b2:	f000 fb6b 	bl	8014c8c <USBD_CtlError>
              break;
 80145b6:	bf00      	nop
          }
          break;
 80145b8:	e004      	b.n	80145c4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80145ba:	6839      	ldr	r1, [r7, #0]
 80145bc:	6878      	ldr	r0, [r7, #4]
 80145be:	f000 fb65 	bl	8014c8c <USBD_CtlError>
          break;
 80145c2:	bf00      	nop
      }
      break;
 80145c4:	e004      	b.n	80145d0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80145c6:	6839      	ldr	r1, [r7, #0]
 80145c8:	6878      	ldr	r0, [r7, #4]
 80145ca:	f000 fb5f 	bl	8014c8c <USBD_CtlError>
      break;
 80145ce:	bf00      	nop
  }

  return ret;
 80145d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80145d2:	4618      	mov	r0, r3
 80145d4:	3710      	adds	r7, #16
 80145d6:	46bd      	mov	sp, r7
 80145d8:	bd80      	pop	{r7, pc}
	...

080145dc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80145dc:	b580      	push	{r7, lr}
 80145de:	b084      	sub	sp, #16
 80145e0:	af00      	add	r7, sp, #0
 80145e2:	6078      	str	r0, [r7, #4]
 80145e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80145e6:	2300      	movs	r3, #0
 80145e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80145ea:	2300      	movs	r3, #0
 80145ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80145ee:	2300      	movs	r3, #0
 80145f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80145f2:	683b      	ldr	r3, [r7, #0]
 80145f4:	885b      	ldrh	r3, [r3, #2]
 80145f6:	0a1b      	lsrs	r3, r3, #8
 80145f8:	b29b      	uxth	r3, r3
 80145fa:	3b01      	subs	r3, #1
 80145fc:	2b0e      	cmp	r3, #14
 80145fe:	f200 8152 	bhi.w	80148a6 <USBD_GetDescriptor+0x2ca>
 8014602:	a201      	add	r2, pc, #4	; (adr r2, 8014608 <USBD_GetDescriptor+0x2c>)
 8014604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014608:	08014679 	.word	0x08014679
 801460c:	08014691 	.word	0x08014691
 8014610:	080146d1 	.word	0x080146d1
 8014614:	080148a7 	.word	0x080148a7
 8014618:	080148a7 	.word	0x080148a7
 801461c:	08014847 	.word	0x08014847
 8014620:	08014873 	.word	0x08014873
 8014624:	080148a7 	.word	0x080148a7
 8014628:	080148a7 	.word	0x080148a7
 801462c:	080148a7 	.word	0x080148a7
 8014630:	080148a7 	.word	0x080148a7
 8014634:	080148a7 	.word	0x080148a7
 8014638:	080148a7 	.word	0x080148a7
 801463c:	080148a7 	.word	0x080148a7
 8014640:	08014645 	.word	0x08014645
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801464a:	69db      	ldr	r3, [r3, #28]
 801464c:	2b00      	cmp	r3, #0
 801464e:	d00b      	beq.n	8014668 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014656:	69db      	ldr	r3, [r3, #28]
 8014658:	687a      	ldr	r2, [r7, #4]
 801465a:	7c12      	ldrb	r2, [r2, #16]
 801465c:	f107 0108 	add.w	r1, r7, #8
 8014660:	4610      	mov	r0, r2
 8014662:	4798      	blx	r3
 8014664:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014666:	e126      	b.n	80148b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014668:	6839      	ldr	r1, [r7, #0]
 801466a:	6878      	ldr	r0, [r7, #4]
 801466c:	f000 fb0e 	bl	8014c8c <USBD_CtlError>
        err++;
 8014670:	7afb      	ldrb	r3, [r7, #11]
 8014672:	3301      	adds	r3, #1
 8014674:	72fb      	strb	r3, [r7, #11]
      break;
 8014676:	e11e      	b.n	80148b6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801467e:	681b      	ldr	r3, [r3, #0]
 8014680:	687a      	ldr	r2, [r7, #4]
 8014682:	7c12      	ldrb	r2, [r2, #16]
 8014684:	f107 0108 	add.w	r1, r7, #8
 8014688:	4610      	mov	r0, r2
 801468a:	4798      	blx	r3
 801468c:	60f8      	str	r0, [r7, #12]
      break;
 801468e:	e112      	b.n	80148b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	7c1b      	ldrb	r3, [r3, #16]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d10d      	bne.n	80146b4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801469e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80146a0:	f107 0208 	add.w	r2, r7, #8
 80146a4:	4610      	mov	r0, r2
 80146a6:	4798      	blx	r3
 80146a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80146aa:	68fb      	ldr	r3, [r7, #12]
 80146ac:	3301      	adds	r3, #1
 80146ae:	2202      	movs	r2, #2
 80146b0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80146b2:	e100      	b.n	80148b6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80146ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146bc:	f107 0208 	add.w	r2, r7, #8
 80146c0:	4610      	mov	r0, r2
 80146c2:	4798      	blx	r3
 80146c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	3301      	adds	r3, #1
 80146ca:	2202      	movs	r2, #2
 80146cc:	701a      	strb	r2, [r3, #0]
      break;
 80146ce:	e0f2      	b.n	80148b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80146d0:	683b      	ldr	r3, [r7, #0]
 80146d2:	885b      	ldrh	r3, [r3, #2]
 80146d4:	b2db      	uxtb	r3, r3
 80146d6:	2b05      	cmp	r3, #5
 80146d8:	f200 80ac 	bhi.w	8014834 <USBD_GetDescriptor+0x258>
 80146dc:	a201      	add	r2, pc, #4	; (adr r2, 80146e4 <USBD_GetDescriptor+0x108>)
 80146de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146e2:	bf00      	nop
 80146e4:	080146fd 	.word	0x080146fd
 80146e8:	08014731 	.word	0x08014731
 80146ec:	08014765 	.word	0x08014765
 80146f0:	08014799 	.word	0x08014799
 80146f4:	080147cd 	.word	0x080147cd
 80146f8:	08014801 	.word	0x08014801
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014702:	685b      	ldr	r3, [r3, #4]
 8014704:	2b00      	cmp	r3, #0
 8014706:	d00b      	beq.n	8014720 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801470e:	685b      	ldr	r3, [r3, #4]
 8014710:	687a      	ldr	r2, [r7, #4]
 8014712:	7c12      	ldrb	r2, [r2, #16]
 8014714:	f107 0108 	add.w	r1, r7, #8
 8014718:	4610      	mov	r0, r2
 801471a:	4798      	blx	r3
 801471c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801471e:	e091      	b.n	8014844 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014720:	6839      	ldr	r1, [r7, #0]
 8014722:	6878      	ldr	r0, [r7, #4]
 8014724:	f000 fab2 	bl	8014c8c <USBD_CtlError>
            err++;
 8014728:	7afb      	ldrb	r3, [r7, #11]
 801472a:	3301      	adds	r3, #1
 801472c:	72fb      	strb	r3, [r7, #11]
          break;
 801472e:	e089      	b.n	8014844 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014736:	689b      	ldr	r3, [r3, #8]
 8014738:	2b00      	cmp	r3, #0
 801473a:	d00b      	beq.n	8014754 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014742:	689b      	ldr	r3, [r3, #8]
 8014744:	687a      	ldr	r2, [r7, #4]
 8014746:	7c12      	ldrb	r2, [r2, #16]
 8014748:	f107 0108 	add.w	r1, r7, #8
 801474c:	4610      	mov	r0, r2
 801474e:	4798      	blx	r3
 8014750:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014752:	e077      	b.n	8014844 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014754:	6839      	ldr	r1, [r7, #0]
 8014756:	6878      	ldr	r0, [r7, #4]
 8014758:	f000 fa98 	bl	8014c8c <USBD_CtlError>
            err++;
 801475c:	7afb      	ldrb	r3, [r7, #11]
 801475e:	3301      	adds	r3, #1
 8014760:	72fb      	strb	r3, [r7, #11]
          break;
 8014762:	e06f      	b.n	8014844 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801476a:	68db      	ldr	r3, [r3, #12]
 801476c:	2b00      	cmp	r3, #0
 801476e:	d00b      	beq.n	8014788 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014776:	68db      	ldr	r3, [r3, #12]
 8014778:	687a      	ldr	r2, [r7, #4]
 801477a:	7c12      	ldrb	r2, [r2, #16]
 801477c:	f107 0108 	add.w	r1, r7, #8
 8014780:	4610      	mov	r0, r2
 8014782:	4798      	blx	r3
 8014784:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014786:	e05d      	b.n	8014844 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014788:	6839      	ldr	r1, [r7, #0]
 801478a:	6878      	ldr	r0, [r7, #4]
 801478c:	f000 fa7e 	bl	8014c8c <USBD_CtlError>
            err++;
 8014790:	7afb      	ldrb	r3, [r7, #11]
 8014792:	3301      	adds	r3, #1
 8014794:	72fb      	strb	r3, [r7, #11]
          break;
 8014796:	e055      	b.n	8014844 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801479e:	691b      	ldr	r3, [r3, #16]
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d00b      	beq.n	80147bc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80147aa:	691b      	ldr	r3, [r3, #16]
 80147ac:	687a      	ldr	r2, [r7, #4]
 80147ae:	7c12      	ldrb	r2, [r2, #16]
 80147b0:	f107 0108 	add.w	r1, r7, #8
 80147b4:	4610      	mov	r0, r2
 80147b6:	4798      	blx	r3
 80147b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80147ba:	e043      	b.n	8014844 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80147bc:	6839      	ldr	r1, [r7, #0]
 80147be:	6878      	ldr	r0, [r7, #4]
 80147c0:	f000 fa64 	bl	8014c8c <USBD_CtlError>
            err++;
 80147c4:	7afb      	ldrb	r3, [r7, #11]
 80147c6:	3301      	adds	r3, #1
 80147c8:	72fb      	strb	r3, [r7, #11]
          break;
 80147ca:	e03b      	b.n	8014844 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80147d2:	695b      	ldr	r3, [r3, #20]
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d00b      	beq.n	80147f0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80147de:	695b      	ldr	r3, [r3, #20]
 80147e0:	687a      	ldr	r2, [r7, #4]
 80147e2:	7c12      	ldrb	r2, [r2, #16]
 80147e4:	f107 0108 	add.w	r1, r7, #8
 80147e8:	4610      	mov	r0, r2
 80147ea:	4798      	blx	r3
 80147ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80147ee:	e029      	b.n	8014844 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80147f0:	6839      	ldr	r1, [r7, #0]
 80147f2:	6878      	ldr	r0, [r7, #4]
 80147f4:	f000 fa4a 	bl	8014c8c <USBD_CtlError>
            err++;
 80147f8:	7afb      	ldrb	r3, [r7, #11]
 80147fa:	3301      	adds	r3, #1
 80147fc:	72fb      	strb	r3, [r7, #11]
          break;
 80147fe:	e021      	b.n	8014844 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014806:	699b      	ldr	r3, [r3, #24]
 8014808:	2b00      	cmp	r3, #0
 801480a:	d00b      	beq.n	8014824 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014812:	699b      	ldr	r3, [r3, #24]
 8014814:	687a      	ldr	r2, [r7, #4]
 8014816:	7c12      	ldrb	r2, [r2, #16]
 8014818:	f107 0108 	add.w	r1, r7, #8
 801481c:	4610      	mov	r0, r2
 801481e:	4798      	blx	r3
 8014820:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014822:	e00f      	b.n	8014844 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014824:	6839      	ldr	r1, [r7, #0]
 8014826:	6878      	ldr	r0, [r7, #4]
 8014828:	f000 fa30 	bl	8014c8c <USBD_CtlError>
            err++;
 801482c:	7afb      	ldrb	r3, [r7, #11]
 801482e:	3301      	adds	r3, #1
 8014830:	72fb      	strb	r3, [r7, #11]
          break;
 8014832:	e007      	b.n	8014844 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8014834:	6839      	ldr	r1, [r7, #0]
 8014836:	6878      	ldr	r0, [r7, #4]
 8014838:	f000 fa28 	bl	8014c8c <USBD_CtlError>
          err++;
 801483c:	7afb      	ldrb	r3, [r7, #11]
 801483e:	3301      	adds	r3, #1
 8014840:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8014842:	bf00      	nop
      }
      break;
 8014844:	e037      	b.n	80148b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	7c1b      	ldrb	r3, [r3, #16]
 801484a:	2b00      	cmp	r3, #0
 801484c:	d109      	bne.n	8014862 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014856:	f107 0208 	add.w	r2, r7, #8
 801485a:	4610      	mov	r0, r2
 801485c:	4798      	blx	r3
 801485e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014860:	e029      	b.n	80148b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014862:	6839      	ldr	r1, [r7, #0]
 8014864:	6878      	ldr	r0, [r7, #4]
 8014866:	f000 fa11 	bl	8014c8c <USBD_CtlError>
        err++;
 801486a:	7afb      	ldrb	r3, [r7, #11]
 801486c:	3301      	adds	r3, #1
 801486e:	72fb      	strb	r3, [r7, #11]
      break;
 8014870:	e021      	b.n	80148b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	7c1b      	ldrb	r3, [r3, #16]
 8014876:	2b00      	cmp	r3, #0
 8014878:	d10d      	bne.n	8014896 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014882:	f107 0208 	add.w	r2, r7, #8
 8014886:	4610      	mov	r0, r2
 8014888:	4798      	blx	r3
 801488a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	3301      	adds	r3, #1
 8014890:	2207      	movs	r2, #7
 8014892:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014894:	e00f      	b.n	80148b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014896:	6839      	ldr	r1, [r7, #0]
 8014898:	6878      	ldr	r0, [r7, #4]
 801489a:	f000 f9f7 	bl	8014c8c <USBD_CtlError>
        err++;
 801489e:	7afb      	ldrb	r3, [r7, #11]
 80148a0:	3301      	adds	r3, #1
 80148a2:	72fb      	strb	r3, [r7, #11]
      break;
 80148a4:	e007      	b.n	80148b6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80148a6:	6839      	ldr	r1, [r7, #0]
 80148a8:	6878      	ldr	r0, [r7, #4]
 80148aa:	f000 f9ef 	bl	8014c8c <USBD_CtlError>
      err++;
 80148ae:	7afb      	ldrb	r3, [r7, #11]
 80148b0:	3301      	adds	r3, #1
 80148b2:	72fb      	strb	r3, [r7, #11]
      break;
 80148b4:	bf00      	nop
  }

  if (err != 0U)
 80148b6:	7afb      	ldrb	r3, [r7, #11]
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d11e      	bne.n	80148fa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80148bc:	683b      	ldr	r3, [r7, #0]
 80148be:	88db      	ldrh	r3, [r3, #6]
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d016      	beq.n	80148f2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80148c4:	893b      	ldrh	r3, [r7, #8]
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d00e      	beq.n	80148e8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80148ca:	683b      	ldr	r3, [r7, #0]
 80148cc:	88da      	ldrh	r2, [r3, #6]
 80148ce:	893b      	ldrh	r3, [r7, #8]
 80148d0:	4293      	cmp	r3, r2
 80148d2:	bf28      	it	cs
 80148d4:	4613      	movcs	r3, r2
 80148d6:	b29b      	uxth	r3, r3
 80148d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80148da:	893b      	ldrh	r3, [r7, #8]
 80148dc:	461a      	mov	r2, r3
 80148de:	68f9      	ldr	r1, [r7, #12]
 80148e0:	6878      	ldr	r0, [r7, #4]
 80148e2:	f000 fa44 	bl	8014d6e <USBD_CtlSendData>
 80148e6:	e009      	b.n	80148fc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80148e8:	6839      	ldr	r1, [r7, #0]
 80148ea:	6878      	ldr	r0, [r7, #4]
 80148ec:	f000 f9ce 	bl	8014c8c <USBD_CtlError>
 80148f0:	e004      	b.n	80148fc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80148f2:	6878      	ldr	r0, [r7, #4]
 80148f4:	f000 fa95 	bl	8014e22 <USBD_CtlSendStatus>
 80148f8:	e000      	b.n	80148fc <USBD_GetDescriptor+0x320>
    return;
 80148fa:	bf00      	nop
  }
}
 80148fc:	3710      	adds	r7, #16
 80148fe:	46bd      	mov	sp, r7
 8014900:	bd80      	pop	{r7, pc}
 8014902:	bf00      	nop

08014904 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014904:	b580      	push	{r7, lr}
 8014906:	b084      	sub	sp, #16
 8014908:	af00      	add	r7, sp, #0
 801490a:	6078      	str	r0, [r7, #4]
 801490c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801490e:	683b      	ldr	r3, [r7, #0]
 8014910:	889b      	ldrh	r3, [r3, #4]
 8014912:	2b00      	cmp	r3, #0
 8014914:	d131      	bne.n	801497a <USBD_SetAddress+0x76>
 8014916:	683b      	ldr	r3, [r7, #0]
 8014918:	88db      	ldrh	r3, [r3, #6]
 801491a:	2b00      	cmp	r3, #0
 801491c:	d12d      	bne.n	801497a <USBD_SetAddress+0x76>
 801491e:	683b      	ldr	r3, [r7, #0]
 8014920:	885b      	ldrh	r3, [r3, #2]
 8014922:	2b7f      	cmp	r3, #127	; 0x7f
 8014924:	d829      	bhi.n	801497a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014926:	683b      	ldr	r3, [r7, #0]
 8014928:	885b      	ldrh	r3, [r3, #2]
 801492a:	b2db      	uxtb	r3, r3
 801492c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014930:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014938:	b2db      	uxtb	r3, r3
 801493a:	2b03      	cmp	r3, #3
 801493c:	d104      	bne.n	8014948 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801493e:	6839      	ldr	r1, [r7, #0]
 8014940:	6878      	ldr	r0, [r7, #4]
 8014942:	f000 f9a3 	bl	8014c8c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014946:	e01d      	b.n	8014984 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	7bfa      	ldrb	r2, [r7, #15]
 801494c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014950:	7bfb      	ldrb	r3, [r7, #15]
 8014952:	4619      	mov	r1, r3
 8014954:	6878      	ldr	r0, [r7, #4]
 8014956:	f002 ff92 	bl	801787e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801495a:	6878      	ldr	r0, [r7, #4]
 801495c:	f000 fa61 	bl	8014e22 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014960:	7bfb      	ldrb	r3, [r7, #15]
 8014962:	2b00      	cmp	r3, #0
 8014964:	d004      	beq.n	8014970 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	2202      	movs	r2, #2
 801496a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801496e:	e009      	b.n	8014984 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	2201      	movs	r2, #1
 8014974:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014978:	e004      	b.n	8014984 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801497a:	6839      	ldr	r1, [r7, #0]
 801497c:	6878      	ldr	r0, [r7, #4]
 801497e:	f000 f985 	bl	8014c8c <USBD_CtlError>
  }
}
 8014982:	bf00      	nop
 8014984:	bf00      	nop
 8014986:	3710      	adds	r7, #16
 8014988:	46bd      	mov	sp, r7
 801498a:	bd80      	pop	{r7, pc}

0801498c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801498c:	b580      	push	{r7, lr}
 801498e:	b084      	sub	sp, #16
 8014990:	af00      	add	r7, sp, #0
 8014992:	6078      	str	r0, [r7, #4]
 8014994:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014996:	2300      	movs	r3, #0
 8014998:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801499a:	683b      	ldr	r3, [r7, #0]
 801499c:	885b      	ldrh	r3, [r3, #2]
 801499e:	b2da      	uxtb	r2, r3
 80149a0:	4b4c      	ldr	r3, [pc, #304]	; (8014ad4 <USBD_SetConfig+0x148>)
 80149a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80149a4:	4b4b      	ldr	r3, [pc, #300]	; (8014ad4 <USBD_SetConfig+0x148>)
 80149a6:	781b      	ldrb	r3, [r3, #0]
 80149a8:	2b01      	cmp	r3, #1
 80149aa:	d905      	bls.n	80149b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80149ac:	6839      	ldr	r1, [r7, #0]
 80149ae:	6878      	ldr	r0, [r7, #4]
 80149b0:	f000 f96c 	bl	8014c8c <USBD_CtlError>
    return USBD_FAIL;
 80149b4:	2303      	movs	r3, #3
 80149b6:	e088      	b.n	8014aca <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80149be:	b2db      	uxtb	r3, r3
 80149c0:	2b02      	cmp	r3, #2
 80149c2:	d002      	beq.n	80149ca <USBD_SetConfig+0x3e>
 80149c4:	2b03      	cmp	r3, #3
 80149c6:	d025      	beq.n	8014a14 <USBD_SetConfig+0x88>
 80149c8:	e071      	b.n	8014aae <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80149ca:	4b42      	ldr	r3, [pc, #264]	; (8014ad4 <USBD_SetConfig+0x148>)
 80149cc:	781b      	ldrb	r3, [r3, #0]
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d01c      	beq.n	8014a0c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80149d2:	4b40      	ldr	r3, [pc, #256]	; (8014ad4 <USBD_SetConfig+0x148>)
 80149d4:	781b      	ldrb	r3, [r3, #0]
 80149d6:	461a      	mov	r2, r3
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80149dc:	4b3d      	ldr	r3, [pc, #244]	; (8014ad4 <USBD_SetConfig+0x148>)
 80149de:	781b      	ldrb	r3, [r3, #0]
 80149e0:	4619      	mov	r1, r3
 80149e2:	6878      	ldr	r0, [r7, #4]
 80149e4:	f7ff f992 	bl	8013d0c <USBD_SetClassConfig>
 80149e8:	4603      	mov	r3, r0
 80149ea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80149ec:	7bfb      	ldrb	r3, [r7, #15]
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d004      	beq.n	80149fc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80149f2:	6839      	ldr	r1, [r7, #0]
 80149f4:	6878      	ldr	r0, [r7, #4]
 80149f6:	f000 f949 	bl	8014c8c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80149fa:	e065      	b.n	8014ac8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80149fc:	6878      	ldr	r0, [r7, #4]
 80149fe:	f000 fa10 	bl	8014e22 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	2203      	movs	r2, #3
 8014a06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8014a0a:	e05d      	b.n	8014ac8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8014a0c:	6878      	ldr	r0, [r7, #4]
 8014a0e:	f000 fa08 	bl	8014e22 <USBD_CtlSendStatus>
      break;
 8014a12:	e059      	b.n	8014ac8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8014a14:	4b2f      	ldr	r3, [pc, #188]	; (8014ad4 <USBD_SetConfig+0x148>)
 8014a16:	781b      	ldrb	r3, [r3, #0]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d112      	bne.n	8014a42 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	2202      	movs	r2, #2
 8014a20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8014a24:	4b2b      	ldr	r3, [pc, #172]	; (8014ad4 <USBD_SetConfig+0x148>)
 8014a26:	781b      	ldrb	r3, [r3, #0]
 8014a28:	461a      	mov	r2, r3
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014a2e:	4b29      	ldr	r3, [pc, #164]	; (8014ad4 <USBD_SetConfig+0x148>)
 8014a30:	781b      	ldrb	r3, [r3, #0]
 8014a32:	4619      	mov	r1, r3
 8014a34:	6878      	ldr	r0, [r7, #4]
 8014a36:	f7ff f985 	bl	8013d44 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8014a3a:	6878      	ldr	r0, [r7, #4]
 8014a3c:	f000 f9f1 	bl	8014e22 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014a40:	e042      	b.n	8014ac8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8014a42:	4b24      	ldr	r3, [pc, #144]	; (8014ad4 <USBD_SetConfig+0x148>)
 8014a44:	781b      	ldrb	r3, [r3, #0]
 8014a46:	461a      	mov	r2, r3
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	685b      	ldr	r3, [r3, #4]
 8014a4c:	429a      	cmp	r2, r3
 8014a4e:	d02a      	beq.n	8014aa6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	685b      	ldr	r3, [r3, #4]
 8014a54:	b2db      	uxtb	r3, r3
 8014a56:	4619      	mov	r1, r3
 8014a58:	6878      	ldr	r0, [r7, #4]
 8014a5a:	f7ff f973 	bl	8013d44 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8014a5e:	4b1d      	ldr	r3, [pc, #116]	; (8014ad4 <USBD_SetConfig+0x148>)
 8014a60:	781b      	ldrb	r3, [r3, #0]
 8014a62:	461a      	mov	r2, r3
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014a68:	4b1a      	ldr	r3, [pc, #104]	; (8014ad4 <USBD_SetConfig+0x148>)
 8014a6a:	781b      	ldrb	r3, [r3, #0]
 8014a6c:	4619      	mov	r1, r3
 8014a6e:	6878      	ldr	r0, [r7, #4]
 8014a70:	f7ff f94c 	bl	8013d0c <USBD_SetClassConfig>
 8014a74:	4603      	mov	r3, r0
 8014a76:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8014a78:	7bfb      	ldrb	r3, [r7, #15]
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d00f      	beq.n	8014a9e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8014a7e:	6839      	ldr	r1, [r7, #0]
 8014a80:	6878      	ldr	r0, [r7, #4]
 8014a82:	f000 f903 	bl	8014c8c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	685b      	ldr	r3, [r3, #4]
 8014a8a:	b2db      	uxtb	r3, r3
 8014a8c:	4619      	mov	r1, r3
 8014a8e:	6878      	ldr	r0, [r7, #4]
 8014a90:	f7ff f958 	bl	8013d44 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	2202      	movs	r2, #2
 8014a98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8014a9c:	e014      	b.n	8014ac8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8014a9e:	6878      	ldr	r0, [r7, #4]
 8014aa0:	f000 f9bf 	bl	8014e22 <USBD_CtlSendStatus>
      break;
 8014aa4:	e010      	b.n	8014ac8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8014aa6:	6878      	ldr	r0, [r7, #4]
 8014aa8:	f000 f9bb 	bl	8014e22 <USBD_CtlSendStatus>
      break;
 8014aac:	e00c      	b.n	8014ac8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8014aae:	6839      	ldr	r1, [r7, #0]
 8014ab0:	6878      	ldr	r0, [r7, #4]
 8014ab2:	f000 f8eb 	bl	8014c8c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014ab6:	4b07      	ldr	r3, [pc, #28]	; (8014ad4 <USBD_SetConfig+0x148>)
 8014ab8:	781b      	ldrb	r3, [r3, #0]
 8014aba:	4619      	mov	r1, r3
 8014abc:	6878      	ldr	r0, [r7, #4]
 8014abe:	f7ff f941 	bl	8013d44 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8014ac2:	2303      	movs	r3, #3
 8014ac4:	73fb      	strb	r3, [r7, #15]
      break;
 8014ac6:	bf00      	nop
  }

  return ret;
 8014ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8014aca:	4618      	mov	r0, r3
 8014acc:	3710      	adds	r7, #16
 8014ace:	46bd      	mov	sp, r7
 8014ad0:	bd80      	pop	{r7, pc}
 8014ad2:	bf00      	nop
 8014ad4:	20000b98 	.word	0x20000b98

08014ad8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014ad8:	b580      	push	{r7, lr}
 8014ada:	b082      	sub	sp, #8
 8014adc:	af00      	add	r7, sp, #0
 8014ade:	6078      	str	r0, [r7, #4]
 8014ae0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8014ae2:	683b      	ldr	r3, [r7, #0]
 8014ae4:	88db      	ldrh	r3, [r3, #6]
 8014ae6:	2b01      	cmp	r3, #1
 8014ae8:	d004      	beq.n	8014af4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014aea:	6839      	ldr	r1, [r7, #0]
 8014aec:	6878      	ldr	r0, [r7, #4]
 8014aee:	f000 f8cd 	bl	8014c8c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8014af2:	e023      	b.n	8014b3c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014afa:	b2db      	uxtb	r3, r3
 8014afc:	2b02      	cmp	r3, #2
 8014afe:	dc02      	bgt.n	8014b06 <USBD_GetConfig+0x2e>
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	dc03      	bgt.n	8014b0c <USBD_GetConfig+0x34>
 8014b04:	e015      	b.n	8014b32 <USBD_GetConfig+0x5a>
 8014b06:	2b03      	cmp	r3, #3
 8014b08:	d00b      	beq.n	8014b22 <USBD_GetConfig+0x4a>
 8014b0a:	e012      	b.n	8014b32 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	2200      	movs	r2, #0
 8014b10:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	3308      	adds	r3, #8
 8014b16:	2201      	movs	r2, #1
 8014b18:	4619      	mov	r1, r3
 8014b1a:	6878      	ldr	r0, [r7, #4]
 8014b1c:	f000 f927 	bl	8014d6e <USBD_CtlSendData>
        break;
 8014b20:	e00c      	b.n	8014b3c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	3304      	adds	r3, #4
 8014b26:	2201      	movs	r2, #1
 8014b28:	4619      	mov	r1, r3
 8014b2a:	6878      	ldr	r0, [r7, #4]
 8014b2c:	f000 f91f 	bl	8014d6e <USBD_CtlSendData>
        break;
 8014b30:	e004      	b.n	8014b3c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8014b32:	6839      	ldr	r1, [r7, #0]
 8014b34:	6878      	ldr	r0, [r7, #4]
 8014b36:	f000 f8a9 	bl	8014c8c <USBD_CtlError>
        break;
 8014b3a:	bf00      	nop
}
 8014b3c:	bf00      	nop
 8014b3e:	3708      	adds	r7, #8
 8014b40:	46bd      	mov	sp, r7
 8014b42:	bd80      	pop	{r7, pc}

08014b44 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014b44:	b580      	push	{r7, lr}
 8014b46:	b082      	sub	sp, #8
 8014b48:	af00      	add	r7, sp, #0
 8014b4a:	6078      	str	r0, [r7, #4]
 8014b4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014b54:	b2db      	uxtb	r3, r3
 8014b56:	3b01      	subs	r3, #1
 8014b58:	2b02      	cmp	r3, #2
 8014b5a:	d81e      	bhi.n	8014b9a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014b5c:	683b      	ldr	r3, [r7, #0]
 8014b5e:	88db      	ldrh	r3, [r3, #6]
 8014b60:	2b02      	cmp	r3, #2
 8014b62:	d004      	beq.n	8014b6e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8014b64:	6839      	ldr	r1, [r7, #0]
 8014b66:	6878      	ldr	r0, [r7, #4]
 8014b68:	f000 f890 	bl	8014c8c <USBD_CtlError>
        break;
 8014b6c:	e01a      	b.n	8014ba4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	2201      	movs	r2, #1
 8014b72:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d005      	beq.n	8014b8a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	68db      	ldr	r3, [r3, #12]
 8014b82:	f043 0202 	orr.w	r2, r3, #2
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	330c      	adds	r3, #12
 8014b8e:	2202      	movs	r2, #2
 8014b90:	4619      	mov	r1, r3
 8014b92:	6878      	ldr	r0, [r7, #4]
 8014b94:	f000 f8eb 	bl	8014d6e <USBD_CtlSendData>
      break;
 8014b98:	e004      	b.n	8014ba4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8014b9a:	6839      	ldr	r1, [r7, #0]
 8014b9c:	6878      	ldr	r0, [r7, #4]
 8014b9e:	f000 f875 	bl	8014c8c <USBD_CtlError>
      break;
 8014ba2:	bf00      	nop
  }
}
 8014ba4:	bf00      	nop
 8014ba6:	3708      	adds	r7, #8
 8014ba8:	46bd      	mov	sp, r7
 8014baa:	bd80      	pop	{r7, pc}

08014bac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014bac:	b580      	push	{r7, lr}
 8014bae:	b082      	sub	sp, #8
 8014bb0:	af00      	add	r7, sp, #0
 8014bb2:	6078      	str	r0, [r7, #4]
 8014bb4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014bb6:	683b      	ldr	r3, [r7, #0]
 8014bb8:	885b      	ldrh	r3, [r3, #2]
 8014bba:	2b01      	cmp	r3, #1
 8014bbc:	d106      	bne.n	8014bcc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	2201      	movs	r2, #1
 8014bc2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8014bc6:	6878      	ldr	r0, [r7, #4]
 8014bc8:	f000 f92b 	bl	8014e22 <USBD_CtlSendStatus>
  }
}
 8014bcc:	bf00      	nop
 8014bce:	3708      	adds	r7, #8
 8014bd0:	46bd      	mov	sp, r7
 8014bd2:	bd80      	pop	{r7, pc}

08014bd4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014bd4:	b580      	push	{r7, lr}
 8014bd6:	b082      	sub	sp, #8
 8014bd8:	af00      	add	r7, sp, #0
 8014bda:	6078      	str	r0, [r7, #4]
 8014bdc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014be4:	b2db      	uxtb	r3, r3
 8014be6:	3b01      	subs	r3, #1
 8014be8:	2b02      	cmp	r3, #2
 8014bea:	d80b      	bhi.n	8014c04 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014bec:	683b      	ldr	r3, [r7, #0]
 8014bee:	885b      	ldrh	r3, [r3, #2]
 8014bf0:	2b01      	cmp	r3, #1
 8014bf2:	d10c      	bne.n	8014c0e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	2200      	movs	r2, #0
 8014bf8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014bfc:	6878      	ldr	r0, [r7, #4]
 8014bfe:	f000 f910 	bl	8014e22 <USBD_CtlSendStatus>
      }
      break;
 8014c02:	e004      	b.n	8014c0e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8014c04:	6839      	ldr	r1, [r7, #0]
 8014c06:	6878      	ldr	r0, [r7, #4]
 8014c08:	f000 f840 	bl	8014c8c <USBD_CtlError>
      break;
 8014c0c:	e000      	b.n	8014c10 <USBD_ClrFeature+0x3c>
      break;
 8014c0e:	bf00      	nop
  }
}
 8014c10:	bf00      	nop
 8014c12:	3708      	adds	r7, #8
 8014c14:	46bd      	mov	sp, r7
 8014c16:	bd80      	pop	{r7, pc}

08014c18 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8014c18:	b580      	push	{r7, lr}
 8014c1a:	b084      	sub	sp, #16
 8014c1c:	af00      	add	r7, sp, #0
 8014c1e:	6078      	str	r0, [r7, #4]
 8014c20:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014c22:	683b      	ldr	r3, [r7, #0]
 8014c24:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	781a      	ldrb	r2, [r3, #0]
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	3301      	adds	r3, #1
 8014c32:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	781a      	ldrb	r2, [r3, #0]
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	3301      	adds	r3, #1
 8014c40:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014c42:	68f8      	ldr	r0, [r7, #12]
 8014c44:	f7ff fa92 	bl	801416c <SWAPBYTE>
 8014c48:	4603      	mov	r3, r0
 8014c4a:	461a      	mov	r2, r3
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	3301      	adds	r3, #1
 8014c54:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	3301      	adds	r3, #1
 8014c5a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8014c5c:	68f8      	ldr	r0, [r7, #12]
 8014c5e:	f7ff fa85 	bl	801416c <SWAPBYTE>
 8014c62:	4603      	mov	r3, r0
 8014c64:	461a      	mov	r2, r3
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	3301      	adds	r3, #1
 8014c6e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	3301      	adds	r3, #1
 8014c74:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014c76:	68f8      	ldr	r0, [r7, #12]
 8014c78:	f7ff fa78 	bl	801416c <SWAPBYTE>
 8014c7c:	4603      	mov	r3, r0
 8014c7e:	461a      	mov	r2, r3
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	80da      	strh	r2, [r3, #6]
}
 8014c84:	bf00      	nop
 8014c86:	3710      	adds	r7, #16
 8014c88:	46bd      	mov	sp, r7
 8014c8a:	bd80      	pop	{r7, pc}

08014c8c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014c8c:	b580      	push	{r7, lr}
 8014c8e:	b082      	sub	sp, #8
 8014c90:	af00      	add	r7, sp, #0
 8014c92:	6078      	str	r0, [r7, #4]
 8014c94:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014c96:	2180      	movs	r1, #128	; 0x80
 8014c98:	6878      	ldr	r0, [r7, #4]
 8014c9a:	f002 fd85 	bl	80177a8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014c9e:	2100      	movs	r1, #0
 8014ca0:	6878      	ldr	r0, [r7, #4]
 8014ca2:	f002 fd81 	bl	80177a8 <USBD_LL_StallEP>
}
 8014ca6:	bf00      	nop
 8014ca8:	3708      	adds	r7, #8
 8014caa:	46bd      	mov	sp, r7
 8014cac:	bd80      	pop	{r7, pc}

08014cae <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014cae:	b580      	push	{r7, lr}
 8014cb0:	b086      	sub	sp, #24
 8014cb2:	af00      	add	r7, sp, #0
 8014cb4:	60f8      	str	r0, [r7, #12]
 8014cb6:	60b9      	str	r1, [r7, #8]
 8014cb8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014cba:	2300      	movs	r3, #0
 8014cbc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d036      	beq.n	8014d32 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8014cc4:	68fb      	ldr	r3, [r7, #12]
 8014cc6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8014cc8:	6938      	ldr	r0, [r7, #16]
 8014cca:	f000 f836 	bl	8014d3a <USBD_GetLen>
 8014cce:	4603      	mov	r3, r0
 8014cd0:	3301      	adds	r3, #1
 8014cd2:	b29b      	uxth	r3, r3
 8014cd4:	005b      	lsls	r3, r3, #1
 8014cd6:	b29a      	uxth	r2, r3
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014cdc:	7dfb      	ldrb	r3, [r7, #23]
 8014cde:	68ba      	ldr	r2, [r7, #8]
 8014ce0:	4413      	add	r3, r2
 8014ce2:	687a      	ldr	r2, [r7, #4]
 8014ce4:	7812      	ldrb	r2, [r2, #0]
 8014ce6:	701a      	strb	r2, [r3, #0]
  idx++;
 8014ce8:	7dfb      	ldrb	r3, [r7, #23]
 8014cea:	3301      	adds	r3, #1
 8014cec:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014cee:	7dfb      	ldrb	r3, [r7, #23]
 8014cf0:	68ba      	ldr	r2, [r7, #8]
 8014cf2:	4413      	add	r3, r2
 8014cf4:	2203      	movs	r2, #3
 8014cf6:	701a      	strb	r2, [r3, #0]
  idx++;
 8014cf8:	7dfb      	ldrb	r3, [r7, #23]
 8014cfa:	3301      	adds	r3, #1
 8014cfc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014cfe:	e013      	b.n	8014d28 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8014d00:	7dfb      	ldrb	r3, [r7, #23]
 8014d02:	68ba      	ldr	r2, [r7, #8]
 8014d04:	4413      	add	r3, r2
 8014d06:	693a      	ldr	r2, [r7, #16]
 8014d08:	7812      	ldrb	r2, [r2, #0]
 8014d0a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8014d0c:	693b      	ldr	r3, [r7, #16]
 8014d0e:	3301      	adds	r3, #1
 8014d10:	613b      	str	r3, [r7, #16]
    idx++;
 8014d12:	7dfb      	ldrb	r3, [r7, #23]
 8014d14:	3301      	adds	r3, #1
 8014d16:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8014d18:	7dfb      	ldrb	r3, [r7, #23]
 8014d1a:	68ba      	ldr	r2, [r7, #8]
 8014d1c:	4413      	add	r3, r2
 8014d1e:	2200      	movs	r2, #0
 8014d20:	701a      	strb	r2, [r3, #0]
    idx++;
 8014d22:	7dfb      	ldrb	r3, [r7, #23]
 8014d24:	3301      	adds	r3, #1
 8014d26:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8014d28:	693b      	ldr	r3, [r7, #16]
 8014d2a:	781b      	ldrb	r3, [r3, #0]
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d1e7      	bne.n	8014d00 <USBD_GetString+0x52>
 8014d30:	e000      	b.n	8014d34 <USBD_GetString+0x86>
    return;
 8014d32:	bf00      	nop
  }
}
 8014d34:	3718      	adds	r7, #24
 8014d36:	46bd      	mov	sp, r7
 8014d38:	bd80      	pop	{r7, pc}

08014d3a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014d3a:	b480      	push	{r7}
 8014d3c:	b085      	sub	sp, #20
 8014d3e:	af00      	add	r7, sp, #0
 8014d40:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014d42:	2300      	movs	r3, #0
 8014d44:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8014d4a:	e005      	b.n	8014d58 <USBD_GetLen+0x1e>
  {
    len++;
 8014d4c:	7bfb      	ldrb	r3, [r7, #15]
 8014d4e:	3301      	adds	r3, #1
 8014d50:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8014d52:	68bb      	ldr	r3, [r7, #8]
 8014d54:	3301      	adds	r3, #1
 8014d56:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8014d58:	68bb      	ldr	r3, [r7, #8]
 8014d5a:	781b      	ldrb	r3, [r3, #0]
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d1f5      	bne.n	8014d4c <USBD_GetLen+0x12>
  }

  return len;
 8014d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d62:	4618      	mov	r0, r3
 8014d64:	3714      	adds	r7, #20
 8014d66:	46bd      	mov	sp, r7
 8014d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d6c:	4770      	bx	lr

08014d6e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014d6e:	b580      	push	{r7, lr}
 8014d70:	b084      	sub	sp, #16
 8014d72:	af00      	add	r7, sp, #0
 8014d74:	60f8      	str	r0, [r7, #12]
 8014d76:	60b9      	str	r1, [r7, #8]
 8014d78:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014d7a:	68fb      	ldr	r3, [r7, #12]
 8014d7c:	2202      	movs	r2, #2
 8014d7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	687a      	ldr	r2, [r7, #4]
 8014d86:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	687a      	ldr	r2, [r7, #4]
 8014d8c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	68ba      	ldr	r2, [r7, #8]
 8014d92:	2100      	movs	r1, #0
 8014d94:	68f8      	ldr	r0, [r7, #12]
 8014d96:	f002 fd91 	bl	80178bc <USBD_LL_Transmit>

  return USBD_OK;
 8014d9a:	2300      	movs	r3, #0
}
 8014d9c:	4618      	mov	r0, r3
 8014d9e:	3710      	adds	r7, #16
 8014da0:	46bd      	mov	sp, r7
 8014da2:	bd80      	pop	{r7, pc}

08014da4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8014da4:	b580      	push	{r7, lr}
 8014da6:	b084      	sub	sp, #16
 8014da8:	af00      	add	r7, sp, #0
 8014daa:	60f8      	str	r0, [r7, #12]
 8014dac:	60b9      	str	r1, [r7, #8]
 8014dae:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	68ba      	ldr	r2, [r7, #8]
 8014db4:	2100      	movs	r1, #0
 8014db6:	68f8      	ldr	r0, [r7, #12]
 8014db8:	f002 fd80 	bl	80178bc <USBD_LL_Transmit>

  return USBD_OK;
 8014dbc:	2300      	movs	r3, #0
}
 8014dbe:	4618      	mov	r0, r3
 8014dc0:	3710      	adds	r7, #16
 8014dc2:	46bd      	mov	sp, r7
 8014dc4:	bd80      	pop	{r7, pc}

08014dc6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8014dc6:	b580      	push	{r7, lr}
 8014dc8:	b084      	sub	sp, #16
 8014dca:	af00      	add	r7, sp, #0
 8014dcc:	60f8      	str	r0, [r7, #12]
 8014dce:	60b9      	str	r1, [r7, #8]
 8014dd0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	2203      	movs	r2, #3
 8014dd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8014dda:	68fb      	ldr	r3, [r7, #12]
 8014ddc:	687a      	ldr	r2, [r7, #4]
 8014dde:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	687a      	ldr	r2, [r7, #4]
 8014de6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	68ba      	ldr	r2, [r7, #8]
 8014dee:	2100      	movs	r1, #0
 8014df0:	68f8      	ldr	r0, [r7, #12]
 8014df2:	f002 fd84 	bl	80178fe <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014df6:	2300      	movs	r3, #0
}
 8014df8:	4618      	mov	r0, r3
 8014dfa:	3710      	adds	r7, #16
 8014dfc:	46bd      	mov	sp, r7
 8014dfe:	bd80      	pop	{r7, pc}

08014e00 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8014e00:	b580      	push	{r7, lr}
 8014e02:	b084      	sub	sp, #16
 8014e04:	af00      	add	r7, sp, #0
 8014e06:	60f8      	str	r0, [r7, #12]
 8014e08:	60b9      	str	r1, [r7, #8]
 8014e0a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	68ba      	ldr	r2, [r7, #8]
 8014e10:	2100      	movs	r1, #0
 8014e12:	68f8      	ldr	r0, [r7, #12]
 8014e14:	f002 fd73 	bl	80178fe <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014e18:	2300      	movs	r3, #0
}
 8014e1a:	4618      	mov	r0, r3
 8014e1c:	3710      	adds	r7, #16
 8014e1e:	46bd      	mov	sp, r7
 8014e20:	bd80      	pop	{r7, pc}

08014e22 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014e22:	b580      	push	{r7, lr}
 8014e24:	b082      	sub	sp, #8
 8014e26:	af00      	add	r7, sp, #0
 8014e28:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	2204      	movs	r2, #4
 8014e2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014e32:	2300      	movs	r3, #0
 8014e34:	2200      	movs	r2, #0
 8014e36:	2100      	movs	r1, #0
 8014e38:	6878      	ldr	r0, [r7, #4]
 8014e3a:	f002 fd3f 	bl	80178bc <USBD_LL_Transmit>

  return USBD_OK;
 8014e3e:	2300      	movs	r3, #0
}
 8014e40:	4618      	mov	r0, r3
 8014e42:	3708      	adds	r7, #8
 8014e44:	46bd      	mov	sp, r7
 8014e46:	bd80      	pop	{r7, pc}

08014e48 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014e48:	b580      	push	{r7, lr}
 8014e4a:	b082      	sub	sp, #8
 8014e4c:	af00      	add	r7, sp, #0
 8014e4e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	2205      	movs	r2, #5
 8014e54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014e58:	2300      	movs	r3, #0
 8014e5a:	2200      	movs	r2, #0
 8014e5c:	2100      	movs	r1, #0
 8014e5e:	6878      	ldr	r0, [r7, #4]
 8014e60:	f002 fd4d 	bl	80178fe <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014e64:	2300      	movs	r3, #0
}
 8014e66:	4618      	mov	r0, r3
 8014e68:	3708      	adds	r7, #8
 8014e6a:	46bd      	mov	sp, r7
 8014e6c:	bd80      	pop	{r7, pc}

08014e6e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8014e6e:	b480      	push	{r7}
 8014e70:	b085      	sub	sp, #20
 8014e72:	af00      	add	r7, sp, #0
 8014e74:	4603      	mov	r3, r0
 8014e76:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8014e78:	2300      	movs	r3, #0
 8014e7a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8014e7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014e80:	2b84      	cmp	r3, #132	; 0x84
 8014e82:	d005      	beq.n	8014e90 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8014e84:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014e88:	68fb      	ldr	r3, [r7, #12]
 8014e8a:	4413      	add	r3, r2
 8014e8c:	3303      	adds	r3, #3
 8014e8e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8014e90:	68fb      	ldr	r3, [r7, #12]
}
 8014e92:	4618      	mov	r0, r3
 8014e94:	3714      	adds	r7, #20
 8014e96:	46bd      	mov	sp, r7
 8014e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e9c:	4770      	bx	lr

08014e9e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8014e9e:	b580      	push	{r7, lr}
 8014ea0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8014ea2:	f000 fee9 	bl	8015c78 <vTaskStartScheduler>
  
  return osOK;
 8014ea6:	2300      	movs	r3, #0
}
 8014ea8:	4618      	mov	r0, r3
 8014eaa:	bd80      	pop	{r7, pc}

08014eac <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8014eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014eae:	b087      	sub	sp, #28
 8014eb0:	af02      	add	r7, sp, #8
 8014eb2:	6078      	str	r0, [r7, #4]
 8014eb4:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	685c      	ldr	r4, [r3, #4]
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014ec2:	b29e      	uxth	r6, r3
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8014eca:	4618      	mov	r0, r3
 8014ecc:	f7ff ffcf 	bl	8014e6e <makeFreeRtosPriority>
 8014ed0:	4602      	mov	r2, r0
 8014ed2:	f107 030c 	add.w	r3, r7, #12
 8014ed6:	9301      	str	r3, [sp, #4]
 8014ed8:	9200      	str	r2, [sp, #0]
 8014eda:	683b      	ldr	r3, [r7, #0]
 8014edc:	4632      	mov	r2, r6
 8014ede:	4629      	mov	r1, r5
 8014ee0:	4620      	mov	r0, r4
 8014ee2:	f000 fd55 	bl	8015990 <xTaskCreate>
 8014ee6:	4603      	mov	r3, r0
 8014ee8:	2b01      	cmp	r3, #1
 8014eea:	d001      	beq.n	8014ef0 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8014eec:	2300      	movs	r3, #0
 8014eee:	e000      	b.n	8014ef2 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8014ef0:	68fb      	ldr	r3, [r7, #12]
}
 8014ef2:	4618      	mov	r0, r3
 8014ef4:	3714      	adds	r7, #20
 8014ef6:	46bd      	mov	sp, r7
 8014ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014efa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8014efa:	b580      	push	{r7, lr}
 8014efc:	b084      	sub	sp, #16
 8014efe:	af00      	add	r7, sp, #0
 8014f00:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8014f06:	68fb      	ldr	r3, [r7, #12]
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d001      	beq.n	8014f10 <osDelay+0x16>
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	e000      	b.n	8014f12 <osDelay+0x18>
 8014f10:	2301      	movs	r3, #1
 8014f12:	4618      	mov	r0, r3
 8014f14:	f000 fe7c 	bl	8015c10 <vTaskDelay>
  
  return osOK;
 8014f18:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8014f1a:	4618      	mov	r0, r3
 8014f1c:	3710      	adds	r7, #16
 8014f1e:	46bd      	mov	sp, r7
 8014f20:	bd80      	pop	{r7, pc}

08014f22 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8014f22:	b580      	push	{r7, lr}
 8014f24:	b082      	sub	sp, #8
 8014f26:	af00      	add	r7, sp, #0
 8014f28:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8014f2a:	2001      	movs	r0, #1
 8014f2c:	f000 f9a1 	bl	8015272 <xQueueCreateMutex>
 8014f30:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 8014f32:	4618      	mov	r0, r3
 8014f34:	3708      	adds	r7, #8
 8014f36:	46bd      	mov	sp, r7
 8014f38:	bd80      	pop	{r7, pc}

08014f3a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8014f3a:	b580      	push	{r7, lr}
 8014f3c:	b084      	sub	sp, #16
 8014f3e:	af00      	add	r7, sp, #0
 8014f40:	6078      	str	r0, [r7, #4]
 8014f42:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8014f44:	683b      	ldr	r3, [r7, #0]
 8014f46:	2b01      	cmp	r3, #1
 8014f48:	d110      	bne.n	8014f6c <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8014f4a:	2203      	movs	r2, #3
 8014f4c:	2100      	movs	r1, #0
 8014f4e:	2001      	movs	r0, #1
 8014f50:	f000 f920 	bl	8015194 <xQueueGenericCreate>
 8014f54:	60f8      	str	r0, [r7, #12]
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d005      	beq.n	8014f68 <osSemaphoreCreate+0x2e>
 8014f5c:	2300      	movs	r3, #0
 8014f5e:	2200      	movs	r2, #0
 8014f60:	2100      	movs	r1, #0
 8014f62:	68f8      	ldr	r0, [r7, #12]
 8014f64:	f000 f99e 	bl	80152a4 <xQueueGenericSend>
    return sema;
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	e000      	b.n	8014f6e <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 8014f6c:	2300      	movs	r3, #0
#endif
  }
#endif
}
 8014f6e:	4618      	mov	r0, r3
 8014f70:	3710      	adds	r7, #16
 8014f72:	46bd      	mov	sp, r7
 8014f74:	bd80      	pop	{r7, pc}

08014f76 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014f76:	b480      	push	{r7}
 8014f78:	b083      	sub	sp, #12
 8014f7a:	af00      	add	r7, sp, #0
 8014f7c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	f103 0208 	add.w	r2, r3, #8
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8014f8e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	f103 0208 	add.w	r2, r3, #8
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	f103 0208 	add.w	r2, r3, #8
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	2200      	movs	r2, #0
 8014fa8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8014faa:	bf00      	nop
 8014fac:	370c      	adds	r7, #12
 8014fae:	46bd      	mov	sp, r7
 8014fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fb4:	4770      	bx	lr

08014fb6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8014fb6:	b480      	push	{r7}
 8014fb8:	b083      	sub	sp, #12
 8014fba:	af00      	add	r7, sp, #0
 8014fbc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	2200      	movs	r2, #0
 8014fc2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8014fc4:	bf00      	nop
 8014fc6:	370c      	adds	r7, #12
 8014fc8:	46bd      	mov	sp, r7
 8014fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fce:	4770      	bx	lr

08014fd0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014fd0:	b480      	push	{r7}
 8014fd2:	b085      	sub	sp, #20
 8014fd4:	af00      	add	r7, sp, #0
 8014fd6:	6078      	str	r0, [r7, #4]
 8014fd8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	685b      	ldr	r3, [r3, #4]
 8014fde:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8014fe0:	683b      	ldr	r3, [r7, #0]
 8014fe2:	68fa      	ldr	r2, [r7, #12]
 8014fe4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	689a      	ldr	r2, [r3, #8]
 8014fea:	683b      	ldr	r3, [r7, #0]
 8014fec:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014fee:	68fb      	ldr	r3, [r7, #12]
 8014ff0:	689b      	ldr	r3, [r3, #8]
 8014ff2:	683a      	ldr	r2, [r7, #0]
 8014ff4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	683a      	ldr	r2, [r7, #0]
 8014ffa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8014ffc:	683b      	ldr	r3, [r7, #0]
 8014ffe:	687a      	ldr	r2, [r7, #4]
 8015000:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	1c5a      	adds	r2, r3, #1
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	601a      	str	r2, [r3, #0]
}
 801500c:	bf00      	nop
 801500e:	3714      	adds	r7, #20
 8015010:	46bd      	mov	sp, r7
 8015012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015016:	4770      	bx	lr

08015018 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015018:	b480      	push	{r7}
 801501a:	b085      	sub	sp, #20
 801501c:	af00      	add	r7, sp, #0
 801501e:	6078      	str	r0, [r7, #4]
 8015020:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8015022:	683b      	ldr	r3, [r7, #0]
 8015024:	681b      	ldr	r3, [r3, #0]
 8015026:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8015028:	68bb      	ldr	r3, [r7, #8]
 801502a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801502e:	d103      	bne.n	8015038 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	691b      	ldr	r3, [r3, #16]
 8015034:	60fb      	str	r3, [r7, #12]
 8015036:	e00c      	b.n	8015052 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	3308      	adds	r3, #8
 801503c:	60fb      	str	r3, [r7, #12]
 801503e:	e002      	b.n	8015046 <vListInsert+0x2e>
 8015040:	68fb      	ldr	r3, [r7, #12]
 8015042:	685b      	ldr	r3, [r3, #4]
 8015044:	60fb      	str	r3, [r7, #12]
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	685b      	ldr	r3, [r3, #4]
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	68ba      	ldr	r2, [r7, #8]
 801504e:	429a      	cmp	r2, r3
 8015050:	d2f6      	bcs.n	8015040 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8015052:	68fb      	ldr	r3, [r7, #12]
 8015054:	685a      	ldr	r2, [r3, #4]
 8015056:	683b      	ldr	r3, [r7, #0]
 8015058:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801505a:	683b      	ldr	r3, [r7, #0]
 801505c:	685b      	ldr	r3, [r3, #4]
 801505e:	683a      	ldr	r2, [r7, #0]
 8015060:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8015062:	683b      	ldr	r3, [r7, #0]
 8015064:	68fa      	ldr	r2, [r7, #12]
 8015066:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8015068:	68fb      	ldr	r3, [r7, #12]
 801506a:	683a      	ldr	r2, [r7, #0]
 801506c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801506e:	683b      	ldr	r3, [r7, #0]
 8015070:	687a      	ldr	r2, [r7, #4]
 8015072:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	681b      	ldr	r3, [r3, #0]
 8015078:	1c5a      	adds	r2, r3, #1
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	601a      	str	r2, [r3, #0]
}
 801507e:	bf00      	nop
 8015080:	3714      	adds	r7, #20
 8015082:	46bd      	mov	sp, r7
 8015084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015088:	4770      	bx	lr

0801508a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801508a:	b480      	push	{r7}
 801508c:	b085      	sub	sp, #20
 801508e:	af00      	add	r7, sp, #0
 8015090:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	691b      	ldr	r3, [r3, #16]
 8015096:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	685b      	ldr	r3, [r3, #4]
 801509c:	687a      	ldr	r2, [r7, #4]
 801509e:	6892      	ldr	r2, [r2, #8]
 80150a0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	689b      	ldr	r3, [r3, #8]
 80150a6:	687a      	ldr	r2, [r7, #4]
 80150a8:	6852      	ldr	r2, [r2, #4]
 80150aa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80150ac:	68fb      	ldr	r3, [r7, #12]
 80150ae:	685b      	ldr	r3, [r3, #4]
 80150b0:	687a      	ldr	r2, [r7, #4]
 80150b2:	429a      	cmp	r2, r3
 80150b4:	d103      	bne.n	80150be <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	689a      	ldr	r2, [r3, #8]
 80150ba:	68fb      	ldr	r3, [r7, #12]
 80150bc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	2200      	movs	r2, #0
 80150c2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	1e5a      	subs	r2, r3, #1
 80150ca:	68fb      	ldr	r3, [r7, #12]
 80150cc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	681b      	ldr	r3, [r3, #0]
}
 80150d2:	4618      	mov	r0, r3
 80150d4:	3714      	adds	r7, #20
 80150d6:	46bd      	mov	sp, r7
 80150d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150dc:	4770      	bx	lr

080150de <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80150de:	b580      	push	{r7, lr}
 80150e0:	b084      	sub	sp, #16
 80150e2:	af00      	add	r7, sp, #0
 80150e4:	6078      	str	r0, [r7, #4]
 80150e6:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80150ec:	68fb      	ldr	r3, [r7, #12]
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d10a      	bne.n	8015108 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80150f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150f6:	f383 8811 	msr	BASEPRI, r3
 80150fa:	f3bf 8f6f 	isb	sy
 80150fe:	f3bf 8f4f 	dsb	sy
 8015102:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8015104:	bf00      	nop
 8015106:	e7fe      	b.n	8015106 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8015108:	f001 fcbc 	bl	8016a84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801510c:	68fb      	ldr	r3, [r7, #12]
 801510e:	681a      	ldr	r2, [r3, #0]
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015114:	68f9      	ldr	r1, [r7, #12]
 8015116:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015118:	fb01 f303 	mul.w	r3, r1, r3
 801511c:	441a      	add	r2, r3
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8015122:	68fb      	ldr	r3, [r7, #12]
 8015124:	2200      	movs	r2, #0
 8015126:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8015128:	68fb      	ldr	r3, [r7, #12]
 801512a:	681a      	ldr	r2, [r3, #0]
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	681a      	ldr	r2, [r3, #0]
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015138:	3b01      	subs	r3, #1
 801513a:	68f9      	ldr	r1, [r7, #12]
 801513c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801513e:	fb01 f303 	mul.w	r3, r1, r3
 8015142:	441a      	add	r2, r3
 8015144:	68fb      	ldr	r3, [r7, #12]
 8015146:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	22ff      	movs	r2, #255	; 0xff
 801514c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8015150:	68fb      	ldr	r3, [r7, #12]
 8015152:	22ff      	movs	r2, #255	; 0xff
 8015154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8015158:	683b      	ldr	r3, [r7, #0]
 801515a:	2b00      	cmp	r3, #0
 801515c:	d109      	bne.n	8015172 <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	691b      	ldr	r3, [r3, #16]
 8015162:	2b00      	cmp	r3, #0
 8015164:	d00f      	beq.n	8015186 <xQueueGenericReset+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015166:	68fb      	ldr	r3, [r7, #12]
 8015168:	3310      	adds	r3, #16
 801516a:	4618      	mov	r0, r3
 801516c:	f000 ff8c 	bl	8016088 <xTaskRemoveFromEventList>
 8015170:	e009      	b.n	8015186 <xQueueGenericReset+0xa8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8015172:	68fb      	ldr	r3, [r7, #12]
 8015174:	3310      	adds	r3, #16
 8015176:	4618      	mov	r0, r3
 8015178:	f7ff fefd 	bl	8014f76 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801517c:	68fb      	ldr	r3, [r7, #12]
 801517e:	3324      	adds	r3, #36	; 0x24
 8015180:	4618      	mov	r0, r3
 8015182:	f7ff fef8 	bl	8014f76 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8015186:	f001 fcad 	bl	8016ae4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801518a:	2301      	movs	r3, #1
}
 801518c:	4618      	mov	r0, r3
 801518e:	3710      	adds	r7, #16
 8015190:	46bd      	mov	sp, r7
 8015192:	bd80      	pop	{r7, pc}

08015194 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8015194:	b580      	push	{r7, lr}
 8015196:	b08a      	sub	sp, #40	; 0x28
 8015198:	af02      	add	r7, sp, #8
 801519a:	60f8      	str	r0, [r7, #12]
 801519c:	60b9      	str	r1, [r7, #8]
 801519e:	4613      	mov	r3, r2
 80151a0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80151a2:	68fb      	ldr	r3, [r7, #12]
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d10a      	bne.n	80151be <xQueueGenericCreate+0x2a>
	__asm volatile
 80151a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151ac:	f383 8811 	msr	BASEPRI, r3
 80151b0:	f3bf 8f6f 	isb	sy
 80151b4:	f3bf 8f4f 	dsb	sy
 80151b8:	613b      	str	r3, [r7, #16]
}
 80151ba:	bf00      	nop
 80151bc:	e7fe      	b.n	80151bc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80151be:	68fb      	ldr	r3, [r7, #12]
 80151c0:	68ba      	ldr	r2, [r7, #8]
 80151c2:	fb02 f303 	mul.w	r3, r2, r3
 80151c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80151c8:	69fb      	ldr	r3, [r7, #28]
 80151ca:	3348      	adds	r3, #72	; 0x48
 80151cc:	4618      	mov	r0, r3
 80151ce:	f001 fd7b 	bl	8016cc8 <pvPortMalloc>
 80151d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80151d4:	69bb      	ldr	r3, [r7, #24]
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d00d      	beq.n	80151f6 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80151da:	69bb      	ldr	r3, [r7, #24]
 80151dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80151de:	697b      	ldr	r3, [r7, #20]
 80151e0:	3348      	adds	r3, #72	; 0x48
 80151e2:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80151e4:	79fa      	ldrb	r2, [r7, #7]
 80151e6:	69bb      	ldr	r3, [r7, #24]
 80151e8:	9300      	str	r3, [sp, #0]
 80151ea:	4613      	mov	r3, r2
 80151ec:	697a      	ldr	r2, [r7, #20]
 80151ee:	68b9      	ldr	r1, [r7, #8]
 80151f0:	68f8      	ldr	r0, [r7, #12]
 80151f2:	f000 f805 	bl	8015200 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80151f6:	69bb      	ldr	r3, [r7, #24]
	}
 80151f8:	4618      	mov	r0, r3
 80151fa:	3720      	adds	r7, #32
 80151fc:	46bd      	mov	sp, r7
 80151fe:	bd80      	pop	{r7, pc}

08015200 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8015200:	b580      	push	{r7, lr}
 8015202:	b084      	sub	sp, #16
 8015204:	af00      	add	r7, sp, #0
 8015206:	60f8      	str	r0, [r7, #12]
 8015208:	60b9      	str	r1, [r7, #8]
 801520a:	607a      	str	r2, [r7, #4]
 801520c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801520e:	68bb      	ldr	r3, [r7, #8]
 8015210:	2b00      	cmp	r3, #0
 8015212:	d103      	bne.n	801521c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015214:	69bb      	ldr	r3, [r7, #24]
 8015216:	69ba      	ldr	r2, [r7, #24]
 8015218:	601a      	str	r2, [r3, #0]
 801521a:	e002      	b.n	8015222 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801521c:	69bb      	ldr	r3, [r7, #24]
 801521e:	687a      	ldr	r2, [r7, #4]
 8015220:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8015222:	69bb      	ldr	r3, [r7, #24]
 8015224:	68fa      	ldr	r2, [r7, #12]
 8015226:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8015228:	69bb      	ldr	r3, [r7, #24]
 801522a:	68ba      	ldr	r2, [r7, #8]
 801522c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801522e:	2101      	movs	r1, #1
 8015230:	69b8      	ldr	r0, [r7, #24]
 8015232:	f7ff ff54 	bl	80150de <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8015236:	bf00      	nop
 8015238:	3710      	adds	r7, #16
 801523a:	46bd      	mov	sp, r7
 801523c:	bd80      	pop	{r7, pc}

0801523e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801523e:	b580      	push	{r7, lr}
 8015240:	b082      	sub	sp, #8
 8015242:	af00      	add	r7, sp, #0
 8015244:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	2b00      	cmp	r3, #0
 801524a:	d00e      	beq.n	801526a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	2200      	movs	r2, #0
 8015250:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	2200      	movs	r2, #0
 8015256:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	2200      	movs	r2, #0
 801525c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801525e:	2300      	movs	r3, #0
 8015260:	2200      	movs	r2, #0
 8015262:	2100      	movs	r1, #0
 8015264:	6878      	ldr	r0, [r7, #4]
 8015266:	f000 f81d 	bl	80152a4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801526a:	bf00      	nop
 801526c:	3708      	adds	r7, #8
 801526e:	46bd      	mov	sp, r7
 8015270:	bd80      	pop	{r7, pc}

08015272 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8015272:	b580      	push	{r7, lr}
 8015274:	b086      	sub	sp, #24
 8015276:	af00      	add	r7, sp, #0
 8015278:	4603      	mov	r3, r0
 801527a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801527c:	2301      	movs	r3, #1
 801527e:	617b      	str	r3, [r7, #20]
 8015280:	2300      	movs	r3, #0
 8015282:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8015284:	79fb      	ldrb	r3, [r7, #7]
 8015286:	461a      	mov	r2, r3
 8015288:	6939      	ldr	r1, [r7, #16]
 801528a:	6978      	ldr	r0, [r7, #20]
 801528c:	f7ff ff82 	bl	8015194 <xQueueGenericCreate>
 8015290:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8015292:	68f8      	ldr	r0, [r7, #12]
 8015294:	f7ff ffd3 	bl	801523e <prvInitialiseMutex>

		return xNewQueue;
 8015298:	68fb      	ldr	r3, [r7, #12]
	}
 801529a:	4618      	mov	r0, r3
 801529c:	3718      	adds	r7, #24
 801529e:	46bd      	mov	sp, r7
 80152a0:	bd80      	pop	{r7, pc}
	...

080152a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80152a4:	b580      	push	{r7, lr}
 80152a6:	b08e      	sub	sp, #56	; 0x38
 80152a8:	af00      	add	r7, sp, #0
 80152aa:	60f8      	str	r0, [r7, #12]
 80152ac:	60b9      	str	r1, [r7, #8]
 80152ae:	607a      	str	r2, [r7, #4]
 80152b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80152b2:	2300      	movs	r3, #0
 80152b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80152b6:	68fb      	ldr	r3, [r7, #12]
 80152b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80152ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d10a      	bne.n	80152d6 <xQueueGenericSend+0x32>
	__asm volatile
 80152c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152c4:	f383 8811 	msr	BASEPRI, r3
 80152c8:	f3bf 8f6f 	isb	sy
 80152cc:	f3bf 8f4f 	dsb	sy
 80152d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80152d2:	bf00      	nop
 80152d4:	e7fe      	b.n	80152d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80152d6:	68bb      	ldr	r3, [r7, #8]
 80152d8:	2b00      	cmp	r3, #0
 80152da:	d103      	bne.n	80152e4 <xQueueGenericSend+0x40>
 80152dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	d101      	bne.n	80152e8 <xQueueGenericSend+0x44>
 80152e4:	2301      	movs	r3, #1
 80152e6:	e000      	b.n	80152ea <xQueueGenericSend+0x46>
 80152e8:	2300      	movs	r3, #0
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d10a      	bne.n	8015304 <xQueueGenericSend+0x60>
	__asm volatile
 80152ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152f2:	f383 8811 	msr	BASEPRI, r3
 80152f6:	f3bf 8f6f 	isb	sy
 80152fa:	f3bf 8f4f 	dsb	sy
 80152fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015300:	bf00      	nop
 8015302:	e7fe      	b.n	8015302 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015304:	683b      	ldr	r3, [r7, #0]
 8015306:	2b02      	cmp	r3, #2
 8015308:	d103      	bne.n	8015312 <xQueueGenericSend+0x6e>
 801530a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801530c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801530e:	2b01      	cmp	r3, #1
 8015310:	d101      	bne.n	8015316 <xQueueGenericSend+0x72>
 8015312:	2301      	movs	r3, #1
 8015314:	e000      	b.n	8015318 <xQueueGenericSend+0x74>
 8015316:	2300      	movs	r3, #0
 8015318:	2b00      	cmp	r3, #0
 801531a:	d10a      	bne.n	8015332 <xQueueGenericSend+0x8e>
	__asm volatile
 801531c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015320:	f383 8811 	msr	BASEPRI, r3
 8015324:	f3bf 8f6f 	isb	sy
 8015328:	f3bf 8f4f 	dsb	sy
 801532c:	623b      	str	r3, [r7, #32]
}
 801532e:	bf00      	nop
 8015330:	e7fe      	b.n	8015330 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015332:	f001 f855 	bl	80163e0 <xTaskGetSchedulerState>
 8015336:	4603      	mov	r3, r0
 8015338:	2b00      	cmp	r3, #0
 801533a:	d102      	bne.n	8015342 <xQueueGenericSend+0x9e>
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	2b00      	cmp	r3, #0
 8015340:	d101      	bne.n	8015346 <xQueueGenericSend+0xa2>
 8015342:	2301      	movs	r3, #1
 8015344:	e000      	b.n	8015348 <xQueueGenericSend+0xa4>
 8015346:	2300      	movs	r3, #0
 8015348:	2b00      	cmp	r3, #0
 801534a:	d10a      	bne.n	8015362 <xQueueGenericSend+0xbe>
	__asm volatile
 801534c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015350:	f383 8811 	msr	BASEPRI, r3
 8015354:	f3bf 8f6f 	isb	sy
 8015358:	f3bf 8f4f 	dsb	sy
 801535c:	61fb      	str	r3, [r7, #28]
}
 801535e:	bf00      	nop
 8015360:	e7fe      	b.n	8015360 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015362:	f001 fb8f 	bl	8016a84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015368:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801536a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801536c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801536e:	429a      	cmp	r2, r3
 8015370:	d302      	bcc.n	8015378 <xQueueGenericSend+0xd4>
 8015372:	683b      	ldr	r3, [r7, #0]
 8015374:	2b02      	cmp	r3, #2
 8015376:	d112      	bne.n	801539e <xQueueGenericSend+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015378:	683a      	ldr	r2, [r7, #0]
 801537a:	68b9      	ldr	r1, [r7, #8]
 801537c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801537e:	f000 fa1d 	bl	80157bc <prvCopyDataToQueue>
 8015382:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015388:	2b00      	cmp	r3, #0
 801538a:	d004      	beq.n	8015396 <xQueueGenericSend+0xf2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801538c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801538e:	3324      	adds	r3, #36	; 0x24
 8015390:	4618      	mov	r0, r3
 8015392:	f000 fe79 	bl	8016088 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8015396:	f001 fba5 	bl	8016ae4 <vPortExitCritical>
				return pdPASS;
 801539a:	2301      	movs	r3, #1
 801539c:	e062      	b.n	8015464 <xQueueGenericSend+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d103      	bne.n	80153ac <xQueueGenericSend+0x108>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80153a4:	f001 fb9e 	bl	8016ae4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80153a8:	2300      	movs	r3, #0
 80153aa:	e05b      	b.n	8015464 <xQueueGenericSend+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80153ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d106      	bne.n	80153c0 <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80153b2:	f107 0314 	add.w	r3, r7, #20
 80153b6:	4618      	mov	r0, r3
 80153b8:	f000 fec8 	bl	801614c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80153bc:	2301      	movs	r3, #1
 80153be:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80153c0:	f001 fb90 	bl	8016ae4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80153c4:	f000 fca8 	bl	8015d18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80153c8:	f001 fb5c 	bl	8016a84 <vPortEnterCritical>
 80153cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80153d2:	b25b      	sxtb	r3, r3
 80153d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153d8:	d103      	bne.n	80153e2 <xQueueGenericSend+0x13e>
 80153da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153dc:	2200      	movs	r2, #0
 80153de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80153e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80153e8:	b25b      	sxtb	r3, r3
 80153ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153ee:	d103      	bne.n	80153f8 <xQueueGenericSend+0x154>
 80153f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153f2:	2200      	movs	r2, #0
 80153f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80153f8:	f001 fb74 	bl	8016ae4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80153fc:	1d3a      	adds	r2, r7, #4
 80153fe:	f107 0314 	add.w	r3, r7, #20
 8015402:	4611      	mov	r1, r2
 8015404:	4618      	mov	r0, r3
 8015406:	f000 feb7 	bl	8016178 <xTaskCheckForTimeOut>
 801540a:	4603      	mov	r3, r0
 801540c:	2b00      	cmp	r3, #0
 801540e:	d123      	bne.n	8015458 <xQueueGenericSend+0x1b4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015410:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015412:	f000 faa5 	bl	8015960 <prvIsQueueFull>
 8015416:	4603      	mov	r3, r0
 8015418:	2b00      	cmp	r3, #0
 801541a:	d017      	beq.n	801544c <xQueueGenericSend+0x1a8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801541c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801541e:	3310      	adds	r3, #16
 8015420:	687a      	ldr	r2, [r7, #4]
 8015422:	4611      	mov	r1, r2
 8015424:	4618      	mov	r0, r3
 8015426:	f000 fe0b 	bl	8016040 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801542a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801542c:	f000 fa30 	bl	8015890 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8015430:	f000 fc80 	bl	8015d34 <xTaskResumeAll>
 8015434:	4603      	mov	r3, r0
 8015436:	2b00      	cmp	r3, #0
 8015438:	d193      	bne.n	8015362 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801543a:	4b0c      	ldr	r3, [pc, #48]	; (801546c <xQueueGenericSend+0x1c8>)
 801543c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015440:	601a      	str	r2, [r3, #0]
 8015442:	f3bf 8f4f 	dsb	sy
 8015446:	f3bf 8f6f 	isb	sy
 801544a:	e78a      	b.n	8015362 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801544c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801544e:	f000 fa1f 	bl	8015890 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015452:	f000 fc6f 	bl	8015d34 <xTaskResumeAll>
 8015456:	e784      	b.n	8015362 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8015458:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801545a:	f000 fa19 	bl	8015890 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801545e:	f000 fc69 	bl	8015d34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8015462:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8015464:	4618      	mov	r0, r3
 8015466:	3738      	adds	r7, #56	; 0x38
 8015468:	46bd      	mov	sp, r7
 801546a:	bd80      	pop	{r7, pc}
 801546c:	e000ed04 	.word	0xe000ed04

08015470 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015470:	b580      	push	{r7, lr}
 8015472:	b08e      	sub	sp, #56	; 0x38
 8015474:	af00      	add	r7, sp, #0
 8015476:	6078      	str	r0, [r7, #4]
 8015478:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801547e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015480:	2b00      	cmp	r3, #0
 8015482:	d10a      	bne.n	801549a <xQueueGiveFromISR+0x2a>
	__asm volatile
 8015484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015488:	f383 8811 	msr	BASEPRI, r3
 801548c:	f3bf 8f6f 	isb	sy
 8015490:	f3bf 8f4f 	dsb	sy
 8015494:	623b      	str	r3, [r7, #32]
}
 8015496:	bf00      	nop
 8015498:	e7fe      	b.n	8015498 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801549a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801549c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d00a      	beq.n	80154b8 <xQueueGiveFromISR+0x48>
	__asm volatile
 80154a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154a6:	f383 8811 	msr	BASEPRI, r3
 80154aa:	f3bf 8f6f 	isb	sy
 80154ae:	f3bf 8f4f 	dsb	sy
 80154b2:	61fb      	str	r3, [r7, #28]
}
 80154b4:	bf00      	nop
 80154b6:	e7fe      	b.n	80154b6 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80154b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154ba:	681b      	ldr	r3, [r3, #0]
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d103      	bne.n	80154c8 <xQueueGiveFromISR+0x58>
 80154c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154c2:	689b      	ldr	r3, [r3, #8]
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d101      	bne.n	80154cc <xQueueGiveFromISR+0x5c>
 80154c8:	2301      	movs	r3, #1
 80154ca:	e000      	b.n	80154ce <xQueueGiveFromISR+0x5e>
 80154cc:	2300      	movs	r3, #0
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d10a      	bne.n	80154e8 <xQueueGiveFromISR+0x78>
	__asm volatile
 80154d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154d6:	f383 8811 	msr	BASEPRI, r3
 80154da:	f3bf 8f6f 	isb	sy
 80154de:	f3bf 8f4f 	dsb	sy
 80154e2:	61bb      	str	r3, [r7, #24]
}
 80154e4:	bf00      	nop
 80154e6:	e7fe      	b.n	80154e6 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80154e8:	f001 fbae 	bl	8016c48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80154ec:	f3ef 8211 	mrs	r2, BASEPRI
 80154f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154f4:	f383 8811 	msr	BASEPRI, r3
 80154f8:	f3bf 8f6f 	isb	sy
 80154fc:	f3bf 8f4f 	dsb	sy
 8015500:	617a      	str	r2, [r7, #20]
 8015502:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8015504:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015506:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801550a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801550c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801550e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015512:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015514:	429a      	cmp	r2, r3
 8015516:	d22b      	bcs.n	8015570 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801551a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801551e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015524:	1c5a      	adds	r2, r3, #1
 8015526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015528:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801552a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801552e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015532:	d112      	bne.n	801555a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015538:	2b00      	cmp	r3, #0
 801553a:	d016      	beq.n	801556a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801553c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801553e:	3324      	adds	r3, #36	; 0x24
 8015540:	4618      	mov	r0, r3
 8015542:	f000 fda1 	bl	8016088 <xTaskRemoveFromEventList>
 8015546:	4603      	mov	r3, r0
 8015548:	2b00      	cmp	r3, #0
 801554a:	d00e      	beq.n	801556a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801554c:	683b      	ldr	r3, [r7, #0]
 801554e:	2b00      	cmp	r3, #0
 8015550:	d00b      	beq.n	801556a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015552:	683b      	ldr	r3, [r7, #0]
 8015554:	2201      	movs	r2, #1
 8015556:	601a      	str	r2, [r3, #0]
 8015558:	e007      	b.n	801556a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801555a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801555e:	3301      	adds	r3, #1
 8015560:	b2db      	uxtb	r3, r3
 8015562:	b25a      	sxtb	r2, r3
 8015564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015566:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801556a:	2301      	movs	r3, #1
 801556c:	637b      	str	r3, [r7, #52]	; 0x34
 801556e:	e001      	b.n	8015574 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015570:	2300      	movs	r3, #0
 8015572:	637b      	str	r3, [r7, #52]	; 0x34
 8015574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015576:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8015578:	68fb      	ldr	r3, [r7, #12]
 801557a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801557e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015582:	4618      	mov	r0, r3
 8015584:	3738      	adds	r7, #56	; 0x38
 8015586:	46bd      	mov	sp, r7
 8015588:	bd80      	pop	{r7, pc}
	...

0801558c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801558c:	b580      	push	{r7, lr}
 801558e:	b08e      	sub	sp, #56	; 0x38
 8015590:	af00      	add	r7, sp, #0
 8015592:	6078      	str	r0, [r7, #4]
 8015594:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8015596:	2300      	movs	r3, #0
 8015598:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801559e:	2300      	movs	r3, #0
 80155a0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80155a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d10a      	bne.n	80155be <xQueueSemaphoreTake+0x32>
	__asm volatile
 80155a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155ac:	f383 8811 	msr	BASEPRI, r3
 80155b0:	f3bf 8f6f 	isb	sy
 80155b4:	f3bf 8f4f 	dsb	sy
 80155b8:	623b      	str	r3, [r7, #32]
}
 80155ba:	bf00      	nop
 80155bc:	e7fe      	b.n	80155bc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80155be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	d00a      	beq.n	80155dc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80155c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155ca:	f383 8811 	msr	BASEPRI, r3
 80155ce:	f3bf 8f6f 	isb	sy
 80155d2:	f3bf 8f4f 	dsb	sy
 80155d6:	61fb      	str	r3, [r7, #28]
}
 80155d8:	bf00      	nop
 80155da:	e7fe      	b.n	80155da <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80155dc:	f000 ff00 	bl	80163e0 <xTaskGetSchedulerState>
 80155e0:	4603      	mov	r3, r0
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	d102      	bne.n	80155ec <xQueueSemaphoreTake+0x60>
 80155e6:	683b      	ldr	r3, [r7, #0]
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d101      	bne.n	80155f0 <xQueueSemaphoreTake+0x64>
 80155ec:	2301      	movs	r3, #1
 80155ee:	e000      	b.n	80155f2 <xQueueSemaphoreTake+0x66>
 80155f0:	2300      	movs	r3, #0
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d10a      	bne.n	801560c <xQueueSemaphoreTake+0x80>
	__asm volatile
 80155f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155fa:	f383 8811 	msr	BASEPRI, r3
 80155fe:	f3bf 8f6f 	isb	sy
 8015602:	f3bf 8f4f 	dsb	sy
 8015606:	61bb      	str	r3, [r7, #24]
}
 8015608:	bf00      	nop
 801560a:	e7fe      	b.n	801560a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801560c:	f001 fa3a 	bl	8016a84 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8015610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015614:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8015616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015618:	2b00      	cmp	r3, #0
 801561a:	d019      	beq.n	8015650 <xQueueSemaphoreTake+0xc4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801561c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801561e:	1e5a      	subs	r2, r3, #1
 8015620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015622:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015626:	681b      	ldr	r3, [r3, #0]
 8015628:	2b00      	cmp	r3, #0
 801562a:	d104      	bne.n	8015636 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801562c:	f001 f880 	bl	8016730 <pvTaskIncrementMutexHeldCount>
 8015630:	4602      	mov	r2, r0
 8015632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015634:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015638:	691b      	ldr	r3, [r3, #16]
 801563a:	2b00      	cmp	r3, #0
 801563c:	d004      	beq.n	8015648 <xQueueSemaphoreTake+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801563e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015640:	3310      	adds	r3, #16
 8015642:	4618      	mov	r0, r3
 8015644:	f000 fd20 	bl	8016088 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015648:	f001 fa4c 	bl	8016ae4 <vPortExitCritical>
				return pdPASS;
 801564c:	2301      	movs	r3, #1
 801564e:	e097      	b.n	8015780 <xQueueSemaphoreTake+0x1f4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015650:	683b      	ldr	r3, [r7, #0]
 8015652:	2b00      	cmp	r3, #0
 8015654:	d111      	bne.n	801567a <xQueueSemaphoreTake+0xee>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8015656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015658:	2b00      	cmp	r3, #0
 801565a:	d00a      	beq.n	8015672 <xQueueSemaphoreTake+0xe6>
	__asm volatile
 801565c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015660:	f383 8811 	msr	BASEPRI, r3
 8015664:	f3bf 8f6f 	isb	sy
 8015668:	f3bf 8f4f 	dsb	sy
 801566c:	617b      	str	r3, [r7, #20]
}
 801566e:	bf00      	nop
 8015670:	e7fe      	b.n	8015670 <xQueueSemaphoreTake+0xe4>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8015672:	f001 fa37 	bl	8016ae4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015676:	2300      	movs	r3, #0
 8015678:	e082      	b.n	8015780 <xQueueSemaphoreTake+0x1f4>
				}
				else if( xEntryTimeSet == pdFALSE )
 801567a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801567c:	2b00      	cmp	r3, #0
 801567e:	d106      	bne.n	801568e <xQueueSemaphoreTake+0x102>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015680:	f107 030c 	add.w	r3, r7, #12
 8015684:	4618      	mov	r0, r3
 8015686:	f000 fd61 	bl	801614c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801568a:	2301      	movs	r3, #1
 801568c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801568e:	f001 fa29 	bl	8016ae4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015692:	f000 fb41 	bl	8015d18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015696:	f001 f9f5 	bl	8016a84 <vPortEnterCritical>
 801569a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801569c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80156a0:	b25b      	sxtb	r3, r3
 80156a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80156a6:	d103      	bne.n	80156b0 <xQueueSemaphoreTake+0x124>
 80156a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156aa:	2200      	movs	r2, #0
 80156ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80156b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80156b6:	b25b      	sxtb	r3, r3
 80156b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80156bc:	d103      	bne.n	80156c6 <xQueueSemaphoreTake+0x13a>
 80156be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156c0:	2200      	movs	r2, #0
 80156c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80156c6:	f001 fa0d 	bl	8016ae4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80156ca:	463a      	mov	r2, r7
 80156cc:	f107 030c 	add.w	r3, r7, #12
 80156d0:	4611      	mov	r1, r2
 80156d2:	4618      	mov	r0, r3
 80156d4:	f000 fd50 	bl	8016178 <xTaskCheckForTimeOut>
 80156d8:	4603      	mov	r3, r0
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d132      	bne.n	8015744 <xQueueSemaphoreTake+0x1b8>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80156de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80156e0:	f000 f928 	bl	8015934 <prvIsQueueEmpty>
 80156e4:	4603      	mov	r3, r0
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d026      	beq.n	8015738 <xQueueSemaphoreTake+0x1ac>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80156ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156ec:	681b      	ldr	r3, [r3, #0]
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d109      	bne.n	8015706 <xQueueSemaphoreTake+0x17a>
					{
						taskENTER_CRITICAL();
 80156f2:	f001 f9c7 	bl	8016a84 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80156f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156f8:	689b      	ldr	r3, [r3, #8]
 80156fa:	4618      	mov	r0, r3
 80156fc:	f000 fe8e 	bl	801641c <xTaskPriorityInherit>
 8015700:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8015702:	f001 f9ef 	bl	8016ae4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015708:	3324      	adds	r3, #36	; 0x24
 801570a:	683a      	ldr	r2, [r7, #0]
 801570c:	4611      	mov	r1, r2
 801570e:	4618      	mov	r0, r3
 8015710:	f000 fc96 	bl	8016040 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015714:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015716:	f000 f8bb 	bl	8015890 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801571a:	f000 fb0b 	bl	8015d34 <xTaskResumeAll>
 801571e:	4603      	mov	r3, r0
 8015720:	2b00      	cmp	r3, #0
 8015722:	f47f af73 	bne.w	801560c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8015726:	4b18      	ldr	r3, [pc, #96]	; (8015788 <xQueueSemaphoreTake+0x1fc>)
 8015728:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801572c:	601a      	str	r2, [r3, #0]
 801572e:	f3bf 8f4f 	dsb	sy
 8015732:	f3bf 8f6f 	isb	sy
 8015736:	e769      	b.n	801560c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8015738:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801573a:	f000 f8a9 	bl	8015890 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801573e:	f000 faf9 	bl	8015d34 <xTaskResumeAll>
 8015742:	e763      	b.n	801560c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8015744:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015746:	f000 f8a3 	bl	8015890 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801574a:	f000 faf3 	bl	8015d34 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801574e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015750:	f000 f8f0 	bl	8015934 <prvIsQueueEmpty>
 8015754:	4603      	mov	r3, r0
 8015756:	2b00      	cmp	r3, #0
 8015758:	f43f af58 	beq.w	801560c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801575c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801575e:	2b00      	cmp	r3, #0
 8015760:	d00d      	beq.n	801577e <xQueueSemaphoreTake+0x1f2>
					{
						taskENTER_CRITICAL();
 8015762:	f001 f98f 	bl	8016a84 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8015766:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015768:	f000 f810 	bl	801578c <prvGetDisinheritPriorityAfterTimeout>
 801576c:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801576e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015770:	689b      	ldr	r3, [r3, #8]
 8015772:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015774:	4618      	mov	r0, r3
 8015776:	f000 ff4d 	bl	8016614 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801577a:	f001 f9b3 	bl	8016ae4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801577e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8015780:	4618      	mov	r0, r3
 8015782:	3738      	adds	r7, #56	; 0x38
 8015784:	46bd      	mov	sp, r7
 8015786:	bd80      	pop	{r7, pc}
 8015788:	e000ed04 	.word	0xe000ed04

0801578c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801578c:	b480      	push	{r7}
 801578e:	b085      	sub	sp, #20
 8015790:	af00      	add	r7, sp, #0
 8015792:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015798:	2b00      	cmp	r3, #0
 801579a:	d006      	beq.n	80157aa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80157a0:	681b      	ldr	r3, [r3, #0]
 80157a2:	f1c3 0307 	rsb	r3, r3, #7
 80157a6:	60fb      	str	r3, [r7, #12]
 80157a8:	e001      	b.n	80157ae <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80157aa:	2300      	movs	r3, #0
 80157ac:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80157ae:	68fb      	ldr	r3, [r7, #12]
	}
 80157b0:	4618      	mov	r0, r3
 80157b2:	3714      	adds	r7, #20
 80157b4:	46bd      	mov	sp, r7
 80157b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ba:	4770      	bx	lr

080157bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80157bc:	b580      	push	{r7, lr}
 80157be:	b086      	sub	sp, #24
 80157c0:	af00      	add	r7, sp, #0
 80157c2:	60f8      	str	r0, [r7, #12]
 80157c4:	60b9      	str	r1, [r7, #8]
 80157c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80157c8:	2300      	movs	r3, #0
 80157ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80157cc:	68fb      	ldr	r3, [r7, #12]
 80157ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80157d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80157d2:	68fb      	ldr	r3, [r7, #12]
 80157d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d10d      	bne.n	80157f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80157da:	68fb      	ldr	r3, [r7, #12]
 80157dc:	681b      	ldr	r3, [r3, #0]
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d14d      	bne.n	801587e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80157e2:	68fb      	ldr	r3, [r7, #12]
 80157e4:	689b      	ldr	r3, [r3, #8]
 80157e6:	4618      	mov	r0, r3
 80157e8:	f000 fe8e 	bl	8016508 <xTaskPriorityDisinherit>
 80157ec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	2200      	movs	r2, #0
 80157f2:	609a      	str	r2, [r3, #8]
 80157f4:	e043      	b.n	801587e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	d119      	bne.n	8015830 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80157fc:	68fb      	ldr	r3, [r7, #12]
 80157fe:	6858      	ldr	r0, [r3, #4]
 8015800:	68fb      	ldr	r3, [r7, #12]
 8015802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015804:	461a      	mov	r2, r3
 8015806:	68b9      	ldr	r1, [r7, #8]
 8015808:	f002 f978 	bl	8017afc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	685a      	ldr	r2, [r3, #4]
 8015810:	68fb      	ldr	r3, [r7, #12]
 8015812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015814:	441a      	add	r2, r3
 8015816:	68fb      	ldr	r3, [r7, #12]
 8015818:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	685a      	ldr	r2, [r3, #4]
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	689b      	ldr	r3, [r3, #8]
 8015822:	429a      	cmp	r2, r3
 8015824:	d32b      	bcc.n	801587e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	681a      	ldr	r2, [r3, #0]
 801582a:	68fb      	ldr	r3, [r7, #12]
 801582c:	605a      	str	r2, [r3, #4]
 801582e:	e026      	b.n	801587e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8015830:	68fb      	ldr	r3, [r7, #12]
 8015832:	68d8      	ldr	r0, [r3, #12]
 8015834:	68fb      	ldr	r3, [r7, #12]
 8015836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015838:	461a      	mov	r2, r3
 801583a:	68b9      	ldr	r1, [r7, #8]
 801583c:	f002 f95e 	bl	8017afc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8015840:	68fb      	ldr	r3, [r7, #12]
 8015842:	68da      	ldr	r2, [r3, #12]
 8015844:	68fb      	ldr	r3, [r7, #12]
 8015846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015848:	425b      	negs	r3, r3
 801584a:	441a      	add	r2, r3
 801584c:	68fb      	ldr	r3, [r7, #12]
 801584e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015850:	68fb      	ldr	r3, [r7, #12]
 8015852:	68da      	ldr	r2, [r3, #12]
 8015854:	68fb      	ldr	r3, [r7, #12]
 8015856:	681b      	ldr	r3, [r3, #0]
 8015858:	429a      	cmp	r2, r3
 801585a:	d207      	bcs.n	801586c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801585c:	68fb      	ldr	r3, [r7, #12]
 801585e:	689a      	ldr	r2, [r3, #8]
 8015860:	68fb      	ldr	r3, [r7, #12]
 8015862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015864:	425b      	negs	r3, r3
 8015866:	441a      	add	r2, r3
 8015868:	68fb      	ldr	r3, [r7, #12]
 801586a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	2b02      	cmp	r3, #2
 8015870:	d105      	bne.n	801587e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015872:	693b      	ldr	r3, [r7, #16]
 8015874:	2b00      	cmp	r3, #0
 8015876:	d002      	beq.n	801587e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8015878:	693b      	ldr	r3, [r7, #16]
 801587a:	3b01      	subs	r3, #1
 801587c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801587e:	693b      	ldr	r3, [r7, #16]
 8015880:	1c5a      	adds	r2, r3, #1
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8015886:	697b      	ldr	r3, [r7, #20]
}
 8015888:	4618      	mov	r0, r3
 801588a:	3718      	adds	r7, #24
 801588c:	46bd      	mov	sp, r7
 801588e:	bd80      	pop	{r7, pc}

08015890 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015890:	b580      	push	{r7, lr}
 8015892:	b084      	sub	sp, #16
 8015894:	af00      	add	r7, sp, #0
 8015896:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8015898:	f001 f8f4 	bl	8016a84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80158a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80158a4:	e011      	b.n	80158ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d012      	beq.n	80158d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	3324      	adds	r3, #36	; 0x24
 80158b2:	4618      	mov	r0, r3
 80158b4:	f000 fbe8 	bl	8016088 <xTaskRemoveFromEventList>
 80158b8:	4603      	mov	r3, r0
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d001      	beq.n	80158c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80158be:	f000 fccd 	bl	801625c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80158c2:	7bfb      	ldrb	r3, [r7, #15]
 80158c4:	3b01      	subs	r3, #1
 80158c6:	b2db      	uxtb	r3, r3
 80158c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80158ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	dce9      	bgt.n	80158a6 <prvUnlockQueue+0x16>
 80158d2:	e000      	b.n	80158d6 <prvUnlockQueue+0x46>
					break;
 80158d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	22ff      	movs	r2, #255	; 0xff
 80158da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80158de:	f001 f901 	bl	8016ae4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80158e2:	f001 f8cf 	bl	8016a84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80158ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80158ee:	e011      	b.n	8015914 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	691b      	ldr	r3, [r3, #16]
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d012      	beq.n	801591e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	3310      	adds	r3, #16
 80158fc:	4618      	mov	r0, r3
 80158fe:	f000 fbc3 	bl	8016088 <xTaskRemoveFromEventList>
 8015902:	4603      	mov	r3, r0
 8015904:	2b00      	cmp	r3, #0
 8015906:	d001      	beq.n	801590c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8015908:	f000 fca8 	bl	801625c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801590c:	7bbb      	ldrb	r3, [r7, #14]
 801590e:	3b01      	subs	r3, #1
 8015910:	b2db      	uxtb	r3, r3
 8015912:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015914:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015918:	2b00      	cmp	r3, #0
 801591a:	dce9      	bgt.n	80158f0 <prvUnlockQueue+0x60>
 801591c:	e000      	b.n	8015920 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801591e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	22ff      	movs	r2, #255	; 0xff
 8015924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8015928:	f001 f8dc 	bl	8016ae4 <vPortExitCritical>
}
 801592c:	bf00      	nop
 801592e:	3710      	adds	r7, #16
 8015930:	46bd      	mov	sp, r7
 8015932:	bd80      	pop	{r7, pc}

08015934 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015934:	b580      	push	{r7, lr}
 8015936:	b084      	sub	sp, #16
 8015938:	af00      	add	r7, sp, #0
 801593a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801593c:	f001 f8a2 	bl	8016a84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015944:	2b00      	cmp	r3, #0
 8015946:	d102      	bne.n	801594e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8015948:	2301      	movs	r3, #1
 801594a:	60fb      	str	r3, [r7, #12]
 801594c:	e001      	b.n	8015952 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801594e:	2300      	movs	r3, #0
 8015950:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015952:	f001 f8c7 	bl	8016ae4 <vPortExitCritical>

	return xReturn;
 8015956:	68fb      	ldr	r3, [r7, #12]
}
 8015958:	4618      	mov	r0, r3
 801595a:	3710      	adds	r7, #16
 801595c:	46bd      	mov	sp, r7
 801595e:	bd80      	pop	{r7, pc}

08015960 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8015960:	b580      	push	{r7, lr}
 8015962:	b084      	sub	sp, #16
 8015964:	af00      	add	r7, sp, #0
 8015966:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015968:	f001 f88c 	bl	8016a84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015974:	429a      	cmp	r2, r3
 8015976:	d102      	bne.n	801597e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8015978:	2301      	movs	r3, #1
 801597a:	60fb      	str	r3, [r7, #12]
 801597c:	e001      	b.n	8015982 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801597e:	2300      	movs	r3, #0
 8015980:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015982:	f001 f8af 	bl	8016ae4 <vPortExitCritical>

	return xReturn;
 8015986:	68fb      	ldr	r3, [r7, #12]
}
 8015988:	4618      	mov	r0, r3
 801598a:	3710      	adds	r7, #16
 801598c:	46bd      	mov	sp, r7
 801598e:	bd80      	pop	{r7, pc}

08015990 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8015990:	b580      	push	{r7, lr}
 8015992:	b08c      	sub	sp, #48	; 0x30
 8015994:	af04      	add	r7, sp, #16
 8015996:	60f8      	str	r0, [r7, #12]
 8015998:	60b9      	str	r1, [r7, #8]
 801599a:	603b      	str	r3, [r7, #0]
 801599c:	4613      	mov	r3, r2
 801599e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80159a0:	88fb      	ldrh	r3, [r7, #6]
 80159a2:	009b      	lsls	r3, r3, #2
 80159a4:	4618      	mov	r0, r3
 80159a6:	f001 f98f 	bl	8016cc8 <pvPortMalloc>
 80159aa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80159ac:	697b      	ldr	r3, [r7, #20]
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d00e      	beq.n	80159d0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80159b2:	20b4      	movs	r0, #180	; 0xb4
 80159b4:	f001 f988 	bl	8016cc8 <pvPortMalloc>
 80159b8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80159ba:	69fb      	ldr	r3, [r7, #28]
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d003      	beq.n	80159c8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80159c0:	69fb      	ldr	r3, [r7, #28]
 80159c2:	697a      	ldr	r2, [r7, #20]
 80159c4:	631a      	str	r2, [r3, #48]	; 0x30
 80159c6:	e005      	b.n	80159d4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80159c8:	6978      	ldr	r0, [r7, #20]
 80159ca:	f001 fa49 	bl	8016e60 <vPortFree>
 80159ce:	e001      	b.n	80159d4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80159d0:	2300      	movs	r3, #0
 80159d2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80159d4:	69fb      	ldr	r3, [r7, #28]
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	d013      	beq.n	8015a02 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80159da:	88fa      	ldrh	r2, [r7, #6]
 80159dc:	2300      	movs	r3, #0
 80159de:	9303      	str	r3, [sp, #12]
 80159e0:	69fb      	ldr	r3, [r7, #28]
 80159e2:	9302      	str	r3, [sp, #8]
 80159e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159e6:	9301      	str	r3, [sp, #4]
 80159e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159ea:	9300      	str	r3, [sp, #0]
 80159ec:	683b      	ldr	r3, [r7, #0]
 80159ee:	68b9      	ldr	r1, [r7, #8]
 80159f0:	68f8      	ldr	r0, [r7, #12]
 80159f2:	f000 f80f 	bl	8015a14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80159f6:	69f8      	ldr	r0, [r7, #28]
 80159f8:	f000 f8ae 	bl	8015b58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80159fc:	2301      	movs	r3, #1
 80159fe:	61bb      	str	r3, [r7, #24]
 8015a00:	e002      	b.n	8015a08 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8015a02:	f04f 33ff 	mov.w	r3, #4294967295
 8015a06:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8015a08:	69bb      	ldr	r3, [r7, #24]
	}
 8015a0a:	4618      	mov	r0, r3
 8015a0c:	3720      	adds	r7, #32
 8015a0e:	46bd      	mov	sp, r7
 8015a10:	bd80      	pop	{r7, pc}
	...

08015a14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8015a14:	b580      	push	{r7, lr}
 8015a16:	b088      	sub	sp, #32
 8015a18:	af00      	add	r7, sp, #0
 8015a1a:	60f8      	str	r0, [r7, #12]
 8015a1c:	60b9      	str	r1, [r7, #8]
 8015a1e:	607a      	str	r2, [r7, #4]
 8015a20:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8015a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8015a2c:	3b01      	subs	r3, #1
 8015a2e:	009b      	lsls	r3, r3, #2
 8015a30:	4413      	add	r3, r2
 8015a32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8015a34:	69bb      	ldr	r3, [r7, #24]
 8015a36:	f023 0307 	bic.w	r3, r3, #7
 8015a3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8015a3c:	69bb      	ldr	r3, [r7, #24]
 8015a3e:	f003 0307 	and.w	r3, r3, #7
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d00a      	beq.n	8015a5c <prvInitialiseNewTask+0x48>
	__asm volatile
 8015a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a4a:	f383 8811 	msr	BASEPRI, r3
 8015a4e:	f3bf 8f6f 	isb	sy
 8015a52:	f3bf 8f4f 	dsb	sy
 8015a56:	617b      	str	r3, [r7, #20]
}
 8015a58:	bf00      	nop
 8015a5a:	e7fe      	b.n	8015a5a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8015a5c:	68bb      	ldr	r3, [r7, #8]
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d01f      	beq.n	8015aa2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015a62:	2300      	movs	r3, #0
 8015a64:	61fb      	str	r3, [r7, #28]
 8015a66:	e012      	b.n	8015a8e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8015a68:	68ba      	ldr	r2, [r7, #8]
 8015a6a:	69fb      	ldr	r3, [r7, #28]
 8015a6c:	4413      	add	r3, r2
 8015a6e:	7819      	ldrb	r1, [r3, #0]
 8015a70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015a72:	69fb      	ldr	r3, [r7, #28]
 8015a74:	4413      	add	r3, r2
 8015a76:	3334      	adds	r3, #52	; 0x34
 8015a78:	460a      	mov	r2, r1
 8015a7a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8015a7c:	68ba      	ldr	r2, [r7, #8]
 8015a7e:	69fb      	ldr	r3, [r7, #28]
 8015a80:	4413      	add	r3, r2
 8015a82:	781b      	ldrb	r3, [r3, #0]
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	d006      	beq.n	8015a96 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015a88:	69fb      	ldr	r3, [r7, #28]
 8015a8a:	3301      	adds	r3, #1
 8015a8c:	61fb      	str	r3, [r7, #28]
 8015a8e:	69fb      	ldr	r3, [r7, #28]
 8015a90:	2b0f      	cmp	r3, #15
 8015a92:	d9e9      	bls.n	8015a68 <prvInitialiseNewTask+0x54>
 8015a94:	e000      	b.n	8015a98 <prvInitialiseNewTask+0x84>
			{
				break;
 8015a96:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8015a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a9a:	2200      	movs	r2, #0
 8015a9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8015aa0:	e003      	b.n	8015aaa <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8015aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015aa4:	2200      	movs	r2, #0
 8015aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8015aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015aac:	2b06      	cmp	r3, #6
 8015aae:	d901      	bls.n	8015ab4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8015ab0:	2306      	movs	r3, #6
 8015ab2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8015ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ab6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015ab8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8015aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015abc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015abe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8015ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ac2:	2200      	movs	r2, #0
 8015ac4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8015ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ac8:	3304      	adds	r3, #4
 8015aca:	4618      	mov	r0, r3
 8015acc:	f7ff fa73 	bl	8014fb6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8015ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ad2:	3318      	adds	r3, #24
 8015ad4:	4618      	mov	r0, r3
 8015ad6:	f7ff fa6e 	bl	8014fb6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8015ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015adc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015ade:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ae2:	f1c3 0207 	rsb	r2, r3, #7
 8015ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ae8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8015aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015aec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015aee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8015af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015af2:	2200      	movs	r2, #0
 8015af4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015afa:	2200      	movs	r2, #0
 8015afc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8015b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b02:	334c      	adds	r3, #76	; 0x4c
 8015b04:	2260      	movs	r2, #96	; 0x60
 8015b06:	2100      	movs	r1, #0
 8015b08:	4618      	mov	r0, r3
 8015b0a:	f002 f805 	bl	8017b18 <memset>
 8015b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b10:	4a0e      	ldr	r2, [pc, #56]	; (8015b4c <prvInitialiseNewTask+0x138>)
 8015b12:	651a      	str	r2, [r3, #80]	; 0x50
 8015b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b16:	4a0e      	ldr	r2, [pc, #56]	; (8015b50 <prvInitialiseNewTask+0x13c>)
 8015b18:	655a      	str	r2, [r3, #84]	; 0x54
 8015b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b1c:	4a0d      	ldr	r2, [pc, #52]	; (8015b54 <prvInitialiseNewTask+0x140>)
 8015b1e:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 8015b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b22:	2200      	movs	r2, #0
 8015b24:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8015b28:	683a      	ldr	r2, [r7, #0]
 8015b2a:	68f9      	ldr	r1, [r7, #12]
 8015b2c:	69b8      	ldr	r0, [r7, #24]
 8015b2e:	f000 fe7d 	bl	801682c <pxPortInitialiseStack>
 8015b32:	4602      	mov	r2, r0
 8015b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b36:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8015b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d002      	beq.n	8015b44 <prvInitialiseNewTask+0x130>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8015b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015b42:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015b44:	bf00      	nop
 8015b46:	3720      	adds	r7, #32
 8015b48:	46bd      	mov	sp, r7
 8015b4a:	bd80      	pop	{r7, pc}
 8015b4c:	08018d10 	.word	0x08018d10
 8015b50:	08018d30 	.word	0x08018d30
 8015b54:	08018cf0 	.word	0x08018cf0

08015b58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8015b58:	b580      	push	{r7, lr}
 8015b5a:	b082      	sub	sp, #8
 8015b5c:	af00      	add	r7, sp, #0
 8015b5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8015b60:	f000 ff90 	bl	8016a84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8015b64:	4b24      	ldr	r3, [pc, #144]	; (8015bf8 <prvAddNewTaskToReadyList+0xa0>)
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	3301      	adds	r3, #1
 8015b6a:	4a23      	ldr	r2, [pc, #140]	; (8015bf8 <prvAddNewTaskToReadyList+0xa0>)
 8015b6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8015b6e:	4b23      	ldr	r3, [pc, #140]	; (8015bfc <prvAddNewTaskToReadyList+0xa4>)
 8015b70:	681b      	ldr	r3, [r3, #0]
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d109      	bne.n	8015b8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8015b76:	4a21      	ldr	r2, [pc, #132]	; (8015bfc <prvAddNewTaskToReadyList+0xa4>)
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8015b7c:	4b1e      	ldr	r3, [pc, #120]	; (8015bf8 <prvAddNewTaskToReadyList+0xa0>)
 8015b7e:	681b      	ldr	r3, [r3, #0]
 8015b80:	2b01      	cmp	r3, #1
 8015b82:	d110      	bne.n	8015ba6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8015b84:	f000 fb88 	bl	8016298 <prvInitialiseTaskLists>
 8015b88:	e00d      	b.n	8015ba6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8015b8a:	4b1d      	ldr	r3, [pc, #116]	; (8015c00 <prvAddNewTaskToReadyList+0xa8>)
 8015b8c:	681b      	ldr	r3, [r3, #0]
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	d109      	bne.n	8015ba6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8015b92:	4b1a      	ldr	r3, [pc, #104]	; (8015bfc <prvAddNewTaskToReadyList+0xa4>)
 8015b94:	681b      	ldr	r3, [r3, #0]
 8015b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b9c:	429a      	cmp	r2, r3
 8015b9e:	d802      	bhi.n	8015ba6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8015ba0:	4a16      	ldr	r2, [pc, #88]	; (8015bfc <prvAddNewTaskToReadyList+0xa4>)
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8015ba6:	4b17      	ldr	r3, [pc, #92]	; (8015c04 <prvAddNewTaskToReadyList+0xac>)
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	3301      	adds	r3, #1
 8015bac:	4a15      	ldr	r2, [pc, #84]	; (8015c04 <prvAddNewTaskToReadyList+0xac>)
 8015bae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015bb4:	2201      	movs	r2, #1
 8015bb6:	409a      	lsls	r2, r3
 8015bb8:	4b13      	ldr	r3, [pc, #76]	; (8015c08 <prvAddNewTaskToReadyList+0xb0>)
 8015bba:	681b      	ldr	r3, [r3, #0]
 8015bbc:	4313      	orrs	r3, r2
 8015bbe:	4a12      	ldr	r2, [pc, #72]	; (8015c08 <prvAddNewTaskToReadyList+0xb0>)
 8015bc0:	6013      	str	r3, [r2, #0]
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015bc6:	4613      	mov	r3, r2
 8015bc8:	009b      	lsls	r3, r3, #2
 8015bca:	4413      	add	r3, r2
 8015bcc:	009b      	lsls	r3, r3, #2
 8015bce:	4a0f      	ldr	r2, [pc, #60]	; (8015c0c <prvAddNewTaskToReadyList+0xb4>)
 8015bd0:	441a      	add	r2, r3
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	3304      	adds	r3, #4
 8015bd6:	4619      	mov	r1, r3
 8015bd8:	4610      	mov	r0, r2
 8015bda:	f7ff f9f9 	bl	8014fd0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8015bde:	f000 ff81 	bl	8016ae4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8015be2:	4b07      	ldr	r3, [pc, #28]	; (8015c00 <prvAddNewTaskToReadyList+0xa8>)
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d001      	beq.n	8015bee <prvAddNewTaskToReadyList+0x96>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8015bea:	4b04      	ldr	r3, [pc, #16]	; (8015bfc <prvAddNewTaskToReadyList+0xa4>)
 8015bec:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015bee:	bf00      	nop
 8015bf0:	3708      	adds	r7, #8
 8015bf2:	46bd      	mov	sp, r7
 8015bf4:	bd80      	pop	{r7, pc}
 8015bf6:	bf00      	nop
 8015bf8:	20000c9c 	.word	0x20000c9c
 8015bfc:	20000b9c 	.word	0x20000b9c
 8015c00:	20000ca8 	.word	0x20000ca8
 8015c04:	20000cb8 	.word	0x20000cb8
 8015c08:	20000ca4 	.word	0x20000ca4
 8015c0c:	20000ba0 	.word	0x20000ba0

08015c10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8015c10:	b580      	push	{r7, lr}
 8015c12:	b084      	sub	sp, #16
 8015c14:	af00      	add	r7, sp, #0
 8015c16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8015c18:	2300      	movs	r3, #0
 8015c1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	d017      	beq.n	8015c52 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8015c22:	4b13      	ldr	r3, [pc, #76]	; (8015c70 <vTaskDelay+0x60>)
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d00a      	beq.n	8015c40 <vTaskDelay+0x30>
	__asm volatile
 8015c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c2e:	f383 8811 	msr	BASEPRI, r3
 8015c32:	f3bf 8f6f 	isb	sy
 8015c36:	f3bf 8f4f 	dsb	sy
 8015c3a:	60bb      	str	r3, [r7, #8]
}
 8015c3c:	bf00      	nop
 8015c3e:	e7fe      	b.n	8015c3e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8015c40:	f000 f86a 	bl	8015d18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8015c44:	2100      	movs	r1, #0
 8015c46:	6878      	ldr	r0, [r7, #4]
 8015c48:	f000 fd86 	bl	8016758 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8015c4c:	f000 f872 	bl	8015d34 <xTaskResumeAll>
 8015c50:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d107      	bne.n	8015c68 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8015c58:	4b06      	ldr	r3, [pc, #24]	; (8015c74 <vTaskDelay+0x64>)
 8015c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015c5e:	601a      	str	r2, [r3, #0]
 8015c60:	f3bf 8f4f 	dsb	sy
 8015c64:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015c68:	bf00      	nop
 8015c6a:	3710      	adds	r7, #16
 8015c6c:	46bd      	mov	sp, r7
 8015c6e:	bd80      	pop	{r7, pc}
 8015c70:	20000cc4 	.word	0x20000cc4
 8015c74:	e000ed04 	.word	0xe000ed04

08015c78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8015c78:	b580      	push	{r7, lr}
 8015c7a:	b086      	sub	sp, #24
 8015c7c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8015c7e:	4b1e      	ldr	r3, [pc, #120]	; (8015cf8 <vTaskStartScheduler+0x80>)
 8015c80:	9301      	str	r3, [sp, #4]
 8015c82:	2300      	movs	r3, #0
 8015c84:	9300      	str	r3, [sp, #0]
 8015c86:	2300      	movs	r3, #0
 8015c88:	2280      	movs	r2, #128	; 0x80
 8015c8a:	491c      	ldr	r1, [pc, #112]	; (8015cfc <vTaskStartScheduler+0x84>)
 8015c8c:	481c      	ldr	r0, [pc, #112]	; (8015d00 <vTaskStartScheduler+0x88>)
 8015c8e:	f7ff fe7f 	bl	8015990 <xTaskCreate>
 8015c92:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8015c94:	68fb      	ldr	r3, [r7, #12]
 8015c96:	2b01      	cmp	r3, #1
 8015c98:	d11b      	bne.n	8015cd2 <vTaskStartScheduler+0x5a>
	__asm volatile
 8015c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c9e:	f383 8811 	msr	BASEPRI, r3
 8015ca2:	f3bf 8f6f 	isb	sy
 8015ca6:	f3bf 8f4f 	dsb	sy
 8015caa:	60bb      	str	r3, [r7, #8]
}
 8015cac:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8015cae:	4b15      	ldr	r3, [pc, #84]	; (8015d04 <vTaskStartScheduler+0x8c>)
 8015cb0:	681b      	ldr	r3, [r3, #0]
 8015cb2:	334c      	adds	r3, #76	; 0x4c
 8015cb4:	4a14      	ldr	r2, [pc, #80]	; (8015d08 <vTaskStartScheduler+0x90>)
 8015cb6:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8015cb8:	4b14      	ldr	r3, [pc, #80]	; (8015d0c <vTaskStartScheduler+0x94>)
 8015cba:	f04f 32ff 	mov.w	r2, #4294967295
 8015cbe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8015cc0:	4b13      	ldr	r3, [pc, #76]	; (8015d10 <vTaskStartScheduler+0x98>)
 8015cc2:	2201      	movs	r2, #1
 8015cc4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8015cc6:	4b13      	ldr	r3, [pc, #76]	; (8015d14 <vTaskStartScheduler+0x9c>)
 8015cc8:	2200      	movs	r2, #0
 8015cca:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8015ccc:	f000 fe38 	bl	8016940 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8015cd0:	e00e      	b.n	8015cf0 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8015cd2:	68fb      	ldr	r3, [r7, #12]
 8015cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015cd8:	d10a      	bne.n	8015cf0 <vTaskStartScheduler+0x78>
	__asm volatile
 8015cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cde:	f383 8811 	msr	BASEPRI, r3
 8015ce2:	f3bf 8f6f 	isb	sy
 8015ce6:	f3bf 8f4f 	dsb	sy
 8015cea:	607b      	str	r3, [r7, #4]
}
 8015cec:	bf00      	nop
 8015cee:	e7fe      	b.n	8015cee <vTaskStartScheduler+0x76>
}
 8015cf0:	bf00      	nop
 8015cf2:	3710      	adds	r7, #16
 8015cf4:	46bd      	mov	sp, r7
 8015cf6:	bd80      	pop	{r7, pc}
 8015cf8:	20000cc0 	.word	0x20000cc0
 8015cfc:	08018c60 	.word	0x08018c60
 8015d00:	08016275 	.word	0x08016275
 8015d04:	20000b9c 	.word	0x20000b9c
 8015d08:	2000018c 	.word	0x2000018c
 8015d0c:	20000cbc 	.word	0x20000cbc
 8015d10:	20000ca8 	.word	0x20000ca8
 8015d14:	20000ca0 	.word	0x20000ca0

08015d18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8015d18:	b480      	push	{r7}
 8015d1a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8015d1c:	4b04      	ldr	r3, [pc, #16]	; (8015d30 <vTaskSuspendAll+0x18>)
 8015d1e:	681b      	ldr	r3, [r3, #0]
 8015d20:	3301      	adds	r3, #1
 8015d22:	4a03      	ldr	r2, [pc, #12]	; (8015d30 <vTaskSuspendAll+0x18>)
 8015d24:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8015d26:	bf00      	nop
 8015d28:	46bd      	mov	sp, r7
 8015d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d2e:	4770      	bx	lr
 8015d30:	20000cc4 	.word	0x20000cc4

08015d34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8015d34:	b580      	push	{r7, lr}
 8015d36:	b084      	sub	sp, #16
 8015d38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8015d3a:	2300      	movs	r3, #0
 8015d3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8015d3e:	2300      	movs	r3, #0
 8015d40:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8015d42:	4b3b      	ldr	r3, [pc, #236]	; (8015e30 <xTaskResumeAll+0xfc>)
 8015d44:	681b      	ldr	r3, [r3, #0]
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d10a      	bne.n	8015d60 <xTaskResumeAll+0x2c>
	__asm volatile
 8015d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d4e:	f383 8811 	msr	BASEPRI, r3
 8015d52:	f3bf 8f6f 	isb	sy
 8015d56:	f3bf 8f4f 	dsb	sy
 8015d5a:	603b      	str	r3, [r7, #0]
}
 8015d5c:	bf00      	nop
 8015d5e:	e7fe      	b.n	8015d5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8015d60:	f000 fe90 	bl	8016a84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8015d64:	4b32      	ldr	r3, [pc, #200]	; (8015e30 <xTaskResumeAll+0xfc>)
 8015d66:	681b      	ldr	r3, [r3, #0]
 8015d68:	3b01      	subs	r3, #1
 8015d6a:	4a31      	ldr	r2, [pc, #196]	; (8015e30 <xTaskResumeAll+0xfc>)
 8015d6c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015d6e:	4b30      	ldr	r3, [pc, #192]	; (8015e30 <xTaskResumeAll+0xfc>)
 8015d70:	681b      	ldr	r3, [r3, #0]
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d155      	bne.n	8015e22 <xTaskResumeAll+0xee>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8015d76:	4b2f      	ldr	r3, [pc, #188]	; (8015e34 <xTaskResumeAll+0x100>)
 8015d78:	681b      	ldr	r3, [r3, #0]
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d051      	beq.n	8015e22 <xTaskResumeAll+0xee>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015d7e:	e02e      	b.n	8015dde <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015d80:	4b2d      	ldr	r3, [pc, #180]	; (8015e38 <xTaskResumeAll+0x104>)
 8015d82:	68db      	ldr	r3, [r3, #12]
 8015d84:	68db      	ldr	r3, [r3, #12]
 8015d86:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015d88:	68fb      	ldr	r3, [r7, #12]
 8015d8a:	3318      	adds	r3, #24
 8015d8c:	4618      	mov	r0, r3
 8015d8e:	f7ff f97c 	bl	801508a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015d92:	68fb      	ldr	r3, [r7, #12]
 8015d94:	3304      	adds	r3, #4
 8015d96:	4618      	mov	r0, r3
 8015d98:	f7ff f977 	bl	801508a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015d9c:	68fb      	ldr	r3, [r7, #12]
 8015d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015da0:	2201      	movs	r2, #1
 8015da2:	409a      	lsls	r2, r3
 8015da4:	4b25      	ldr	r3, [pc, #148]	; (8015e3c <xTaskResumeAll+0x108>)
 8015da6:	681b      	ldr	r3, [r3, #0]
 8015da8:	4313      	orrs	r3, r2
 8015daa:	4a24      	ldr	r2, [pc, #144]	; (8015e3c <xTaskResumeAll+0x108>)
 8015dac:	6013      	str	r3, [r2, #0]
 8015dae:	68fb      	ldr	r3, [r7, #12]
 8015db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015db2:	4613      	mov	r3, r2
 8015db4:	009b      	lsls	r3, r3, #2
 8015db6:	4413      	add	r3, r2
 8015db8:	009b      	lsls	r3, r3, #2
 8015dba:	4a21      	ldr	r2, [pc, #132]	; (8015e40 <xTaskResumeAll+0x10c>)
 8015dbc:	441a      	add	r2, r3
 8015dbe:	68fb      	ldr	r3, [r7, #12]
 8015dc0:	3304      	adds	r3, #4
 8015dc2:	4619      	mov	r1, r3
 8015dc4:	4610      	mov	r0, r2
 8015dc6:	f7ff f903 	bl	8014fd0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015dca:	68fb      	ldr	r3, [r7, #12]
 8015dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015dce:	4b1d      	ldr	r3, [pc, #116]	; (8015e44 <xTaskResumeAll+0x110>)
 8015dd0:	681b      	ldr	r3, [r3, #0]
 8015dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015dd4:	429a      	cmp	r2, r3
 8015dd6:	d302      	bcc.n	8015dde <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8015dd8:	4b1b      	ldr	r3, [pc, #108]	; (8015e48 <xTaskResumeAll+0x114>)
 8015dda:	2201      	movs	r2, #1
 8015ddc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015dde:	4b16      	ldr	r3, [pc, #88]	; (8015e38 <xTaskResumeAll+0x104>)
 8015de0:	681b      	ldr	r3, [r3, #0]
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d1cc      	bne.n	8015d80 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8015de6:	68fb      	ldr	r3, [r7, #12]
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d001      	beq.n	8015df0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8015dec:	f000 fad8 	bl	80163a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8015df0:	4b16      	ldr	r3, [pc, #88]	; (8015e4c <xTaskResumeAll+0x118>)
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 8015df6:	68bb      	ldr	r3, [r7, #8]
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d010      	beq.n	8015e1e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8015dfc:	f000 f828 	bl	8015e50 <xTaskIncrementTick>
 8015e00:	4603      	mov	r3, r0
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d002      	beq.n	8015e0c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8015e06:	4b10      	ldr	r3, [pc, #64]	; (8015e48 <xTaskResumeAll+0x114>)
 8015e08:	2201      	movs	r2, #1
 8015e0a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8015e0c:	68bb      	ldr	r3, [r7, #8]
 8015e0e:	3b01      	subs	r3, #1
 8015e10:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8015e12:	68bb      	ldr	r3, [r7, #8]
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d1f1      	bne.n	8015dfc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8015e18:	4b0c      	ldr	r3, [pc, #48]	; (8015e4c <xTaskResumeAll+0x118>)
 8015e1a:	2200      	movs	r2, #0
 8015e1c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015e1e:	4b0a      	ldr	r3, [pc, #40]	; (8015e48 <xTaskResumeAll+0x114>)
 8015e20:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015e22:	f000 fe5f 	bl	8016ae4 <vPortExitCritical>

	return xAlreadyYielded;
 8015e26:	687b      	ldr	r3, [r7, #4]
}
 8015e28:	4618      	mov	r0, r3
 8015e2a:	3710      	adds	r7, #16
 8015e2c:	46bd      	mov	sp, r7
 8015e2e:	bd80      	pop	{r7, pc}
 8015e30:	20000cc4 	.word	0x20000cc4
 8015e34:	20000c9c 	.word	0x20000c9c
 8015e38:	20000c5c 	.word	0x20000c5c
 8015e3c:	20000ca4 	.word	0x20000ca4
 8015e40:	20000ba0 	.word	0x20000ba0
 8015e44:	20000b9c 	.word	0x20000b9c
 8015e48:	20000cb0 	.word	0x20000cb0
 8015e4c:	20000cac 	.word	0x20000cac

08015e50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015e50:	b580      	push	{r7, lr}
 8015e52:	b086      	sub	sp, #24
 8015e54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8015e56:	2300      	movs	r3, #0
 8015e58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015e5a:	4b3f      	ldr	r3, [pc, #252]	; (8015f58 <xTaskIncrementTick+0x108>)
 8015e5c:	681b      	ldr	r3, [r3, #0]
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d16f      	bne.n	8015f42 <xTaskIncrementTick+0xf2>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8015e62:	4b3e      	ldr	r3, [pc, #248]	; (8015f5c <xTaskIncrementTick+0x10c>)
 8015e64:	681b      	ldr	r3, [r3, #0]
 8015e66:	3301      	adds	r3, #1
 8015e68:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8015e6a:	4a3c      	ldr	r2, [pc, #240]	; (8015f5c <xTaskIncrementTick+0x10c>)
 8015e6c:	693b      	ldr	r3, [r7, #16]
 8015e6e:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8015e70:	693b      	ldr	r3, [r7, #16]
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d120      	bne.n	8015eb8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8015e76:	4b3a      	ldr	r3, [pc, #232]	; (8015f60 <xTaskIncrementTick+0x110>)
 8015e78:	681b      	ldr	r3, [r3, #0]
 8015e7a:	681b      	ldr	r3, [r3, #0]
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d00a      	beq.n	8015e96 <xTaskIncrementTick+0x46>
	__asm volatile
 8015e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e84:	f383 8811 	msr	BASEPRI, r3
 8015e88:	f3bf 8f6f 	isb	sy
 8015e8c:	f3bf 8f4f 	dsb	sy
 8015e90:	603b      	str	r3, [r7, #0]
}
 8015e92:	bf00      	nop
 8015e94:	e7fe      	b.n	8015e94 <xTaskIncrementTick+0x44>
 8015e96:	4b32      	ldr	r3, [pc, #200]	; (8015f60 <xTaskIncrementTick+0x110>)
 8015e98:	681b      	ldr	r3, [r3, #0]
 8015e9a:	60fb      	str	r3, [r7, #12]
 8015e9c:	4b31      	ldr	r3, [pc, #196]	; (8015f64 <xTaskIncrementTick+0x114>)
 8015e9e:	681b      	ldr	r3, [r3, #0]
 8015ea0:	4a2f      	ldr	r2, [pc, #188]	; (8015f60 <xTaskIncrementTick+0x110>)
 8015ea2:	6013      	str	r3, [r2, #0]
 8015ea4:	4a2f      	ldr	r2, [pc, #188]	; (8015f64 <xTaskIncrementTick+0x114>)
 8015ea6:	68fb      	ldr	r3, [r7, #12]
 8015ea8:	6013      	str	r3, [r2, #0]
 8015eaa:	4b2f      	ldr	r3, [pc, #188]	; (8015f68 <xTaskIncrementTick+0x118>)
 8015eac:	681b      	ldr	r3, [r3, #0]
 8015eae:	3301      	adds	r3, #1
 8015eb0:	4a2d      	ldr	r2, [pc, #180]	; (8015f68 <xTaskIncrementTick+0x118>)
 8015eb2:	6013      	str	r3, [r2, #0]
 8015eb4:	f000 fa74 	bl	80163a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8015eb8:	4b2c      	ldr	r3, [pc, #176]	; (8015f6c <xTaskIncrementTick+0x11c>)
 8015eba:	681b      	ldr	r3, [r3, #0]
 8015ebc:	693a      	ldr	r2, [r7, #16]
 8015ebe:	429a      	cmp	r2, r3
 8015ec0:	d344      	bcc.n	8015f4c <xTaskIncrementTick+0xfc>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015ec2:	4b27      	ldr	r3, [pc, #156]	; (8015f60 <xTaskIncrementTick+0x110>)
 8015ec4:	681b      	ldr	r3, [r3, #0]
 8015ec6:	681b      	ldr	r3, [r3, #0]
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d104      	bne.n	8015ed6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015ecc:	4b27      	ldr	r3, [pc, #156]	; (8015f6c <xTaskIncrementTick+0x11c>)
 8015ece:	f04f 32ff 	mov.w	r2, #4294967295
 8015ed2:	601a      	str	r2, [r3, #0]
					break;
 8015ed4:	e03a      	b.n	8015f4c <xTaskIncrementTick+0xfc>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015ed6:	4b22      	ldr	r3, [pc, #136]	; (8015f60 <xTaskIncrementTick+0x110>)
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	68db      	ldr	r3, [r3, #12]
 8015edc:	68db      	ldr	r3, [r3, #12]
 8015ede:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015ee0:	68bb      	ldr	r3, [r7, #8]
 8015ee2:	685b      	ldr	r3, [r3, #4]
 8015ee4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8015ee6:	693a      	ldr	r2, [r7, #16]
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	429a      	cmp	r2, r3
 8015eec:	d203      	bcs.n	8015ef6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015eee:	4a1f      	ldr	r2, [pc, #124]	; (8015f6c <xTaskIncrementTick+0x11c>)
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8015ef4:	e02a      	b.n	8015f4c <xTaskIncrementTick+0xfc>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015ef6:	68bb      	ldr	r3, [r7, #8]
 8015ef8:	3304      	adds	r3, #4
 8015efa:	4618      	mov	r0, r3
 8015efc:	f7ff f8c5 	bl	801508a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015f00:	68bb      	ldr	r3, [r7, #8]
 8015f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d004      	beq.n	8015f12 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015f08:	68bb      	ldr	r3, [r7, #8]
 8015f0a:	3318      	adds	r3, #24
 8015f0c:	4618      	mov	r0, r3
 8015f0e:	f7ff f8bc 	bl	801508a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8015f12:	68bb      	ldr	r3, [r7, #8]
 8015f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f16:	2201      	movs	r2, #1
 8015f18:	409a      	lsls	r2, r3
 8015f1a:	4b15      	ldr	r3, [pc, #84]	; (8015f70 <xTaskIncrementTick+0x120>)
 8015f1c:	681b      	ldr	r3, [r3, #0]
 8015f1e:	4313      	orrs	r3, r2
 8015f20:	4a13      	ldr	r2, [pc, #76]	; (8015f70 <xTaskIncrementTick+0x120>)
 8015f22:	6013      	str	r3, [r2, #0]
 8015f24:	68bb      	ldr	r3, [r7, #8]
 8015f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015f28:	4613      	mov	r3, r2
 8015f2a:	009b      	lsls	r3, r3, #2
 8015f2c:	4413      	add	r3, r2
 8015f2e:	009b      	lsls	r3, r3, #2
 8015f30:	4a10      	ldr	r2, [pc, #64]	; (8015f74 <xTaskIncrementTick+0x124>)
 8015f32:	441a      	add	r2, r3
 8015f34:	68bb      	ldr	r3, [r7, #8]
 8015f36:	3304      	adds	r3, #4
 8015f38:	4619      	mov	r1, r3
 8015f3a:	4610      	mov	r0, r2
 8015f3c:	f7ff f848 	bl	8014fd0 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015f40:	e7bf      	b.n	8015ec2 <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8015f42:	4b0d      	ldr	r3, [pc, #52]	; (8015f78 <xTaskIncrementTick+0x128>)
 8015f44:	681b      	ldr	r3, [r3, #0]
 8015f46:	3301      	adds	r3, #1
 8015f48:	4a0b      	ldr	r2, [pc, #44]	; (8015f78 <xTaskIncrementTick+0x128>)
 8015f4a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8015f4c:	697b      	ldr	r3, [r7, #20]
}
 8015f4e:	4618      	mov	r0, r3
 8015f50:	3718      	adds	r7, #24
 8015f52:	46bd      	mov	sp, r7
 8015f54:	bd80      	pop	{r7, pc}
 8015f56:	bf00      	nop
 8015f58:	20000cc4 	.word	0x20000cc4
 8015f5c:	20000ca0 	.word	0x20000ca0
 8015f60:	20000c54 	.word	0x20000c54
 8015f64:	20000c58 	.word	0x20000c58
 8015f68:	20000cb4 	.word	0x20000cb4
 8015f6c:	20000cbc 	.word	0x20000cbc
 8015f70:	20000ca4 	.word	0x20000ca4
 8015f74:	20000ba0 	.word	0x20000ba0
 8015f78:	20000cac 	.word	0x20000cac

08015f7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015f7c:	b480      	push	{r7}
 8015f7e:	b087      	sub	sp, #28
 8015f80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8015f82:	4b29      	ldr	r3, [pc, #164]	; (8016028 <vTaskSwitchContext+0xac>)
 8015f84:	681b      	ldr	r3, [r3, #0]
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	d003      	beq.n	8015f92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8015f8a:	4b28      	ldr	r3, [pc, #160]	; (801602c <vTaskSwitchContext+0xb0>)
 8015f8c:	2201      	movs	r2, #1
 8015f8e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015f90:	e044      	b.n	801601c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8015f92:	4b26      	ldr	r3, [pc, #152]	; (801602c <vTaskSwitchContext+0xb0>)
 8015f94:	2200      	movs	r2, #0
 8015f96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015f98:	4b25      	ldr	r3, [pc, #148]	; (8016030 <vTaskSwitchContext+0xb4>)
 8015f9a:	681b      	ldr	r3, [r3, #0]
 8015f9c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8015f9e:	68fb      	ldr	r3, [r7, #12]
 8015fa0:	fab3 f383 	clz	r3, r3
 8015fa4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8015fa6:	7afb      	ldrb	r3, [r7, #11]
 8015fa8:	f1c3 031f 	rsb	r3, r3, #31
 8015fac:	617b      	str	r3, [r7, #20]
 8015fae:	4921      	ldr	r1, [pc, #132]	; (8016034 <vTaskSwitchContext+0xb8>)
 8015fb0:	697a      	ldr	r2, [r7, #20]
 8015fb2:	4613      	mov	r3, r2
 8015fb4:	009b      	lsls	r3, r3, #2
 8015fb6:	4413      	add	r3, r2
 8015fb8:	009b      	lsls	r3, r3, #2
 8015fba:	440b      	add	r3, r1
 8015fbc:	681b      	ldr	r3, [r3, #0]
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d10a      	bne.n	8015fd8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8015fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fc6:	f383 8811 	msr	BASEPRI, r3
 8015fca:	f3bf 8f6f 	isb	sy
 8015fce:	f3bf 8f4f 	dsb	sy
 8015fd2:	607b      	str	r3, [r7, #4]
}
 8015fd4:	bf00      	nop
 8015fd6:	e7fe      	b.n	8015fd6 <vTaskSwitchContext+0x5a>
 8015fd8:	697a      	ldr	r2, [r7, #20]
 8015fda:	4613      	mov	r3, r2
 8015fdc:	009b      	lsls	r3, r3, #2
 8015fde:	4413      	add	r3, r2
 8015fe0:	009b      	lsls	r3, r3, #2
 8015fe2:	4a14      	ldr	r2, [pc, #80]	; (8016034 <vTaskSwitchContext+0xb8>)
 8015fe4:	4413      	add	r3, r2
 8015fe6:	613b      	str	r3, [r7, #16]
 8015fe8:	693b      	ldr	r3, [r7, #16]
 8015fea:	685b      	ldr	r3, [r3, #4]
 8015fec:	685a      	ldr	r2, [r3, #4]
 8015fee:	693b      	ldr	r3, [r7, #16]
 8015ff0:	605a      	str	r2, [r3, #4]
 8015ff2:	693b      	ldr	r3, [r7, #16]
 8015ff4:	685a      	ldr	r2, [r3, #4]
 8015ff6:	693b      	ldr	r3, [r7, #16]
 8015ff8:	3308      	adds	r3, #8
 8015ffa:	429a      	cmp	r2, r3
 8015ffc:	d104      	bne.n	8016008 <vTaskSwitchContext+0x8c>
 8015ffe:	693b      	ldr	r3, [r7, #16]
 8016000:	685b      	ldr	r3, [r3, #4]
 8016002:	685a      	ldr	r2, [r3, #4]
 8016004:	693b      	ldr	r3, [r7, #16]
 8016006:	605a      	str	r2, [r3, #4]
 8016008:	693b      	ldr	r3, [r7, #16]
 801600a:	685b      	ldr	r3, [r3, #4]
 801600c:	68db      	ldr	r3, [r3, #12]
 801600e:	4a0a      	ldr	r2, [pc, #40]	; (8016038 <vTaskSwitchContext+0xbc>)
 8016010:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8016012:	4b09      	ldr	r3, [pc, #36]	; (8016038 <vTaskSwitchContext+0xbc>)
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	334c      	adds	r3, #76	; 0x4c
 8016018:	4a08      	ldr	r2, [pc, #32]	; (801603c <vTaskSwitchContext+0xc0>)
 801601a:	6013      	str	r3, [r2, #0]
}
 801601c:	bf00      	nop
 801601e:	371c      	adds	r7, #28
 8016020:	46bd      	mov	sp, r7
 8016022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016026:	4770      	bx	lr
 8016028:	20000cc4 	.word	0x20000cc4
 801602c:	20000cb0 	.word	0x20000cb0
 8016030:	20000ca4 	.word	0x20000ca4
 8016034:	20000ba0 	.word	0x20000ba0
 8016038:	20000b9c 	.word	0x20000b9c
 801603c:	2000018c 	.word	0x2000018c

08016040 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8016040:	b580      	push	{r7, lr}
 8016042:	b084      	sub	sp, #16
 8016044:	af00      	add	r7, sp, #0
 8016046:	6078      	str	r0, [r7, #4]
 8016048:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	2b00      	cmp	r3, #0
 801604e:	d10a      	bne.n	8016066 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8016050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016054:	f383 8811 	msr	BASEPRI, r3
 8016058:	f3bf 8f6f 	isb	sy
 801605c:	f3bf 8f4f 	dsb	sy
 8016060:	60fb      	str	r3, [r7, #12]
}
 8016062:	bf00      	nop
 8016064:	e7fe      	b.n	8016064 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016066:	4b07      	ldr	r3, [pc, #28]	; (8016084 <vTaskPlaceOnEventList+0x44>)
 8016068:	681b      	ldr	r3, [r3, #0]
 801606a:	3318      	adds	r3, #24
 801606c:	4619      	mov	r1, r3
 801606e:	6878      	ldr	r0, [r7, #4]
 8016070:	f7fe ffd2 	bl	8015018 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016074:	2101      	movs	r1, #1
 8016076:	6838      	ldr	r0, [r7, #0]
 8016078:	f000 fb6e 	bl	8016758 <prvAddCurrentTaskToDelayedList>
}
 801607c:	bf00      	nop
 801607e:	3710      	adds	r7, #16
 8016080:	46bd      	mov	sp, r7
 8016082:	bd80      	pop	{r7, pc}
 8016084:	20000b9c 	.word	0x20000b9c

08016088 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8016088:	b580      	push	{r7, lr}
 801608a:	b086      	sub	sp, #24
 801608c:	af00      	add	r7, sp, #0
 801608e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	68db      	ldr	r3, [r3, #12]
 8016094:	68db      	ldr	r3, [r3, #12]
 8016096:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8016098:	693b      	ldr	r3, [r7, #16]
 801609a:	2b00      	cmp	r3, #0
 801609c:	d10a      	bne.n	80160b4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801609e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160a2:	f383 8811 	msr	BASEPRI, r3
 80160a6:	f3bf 8f6f 	isb	sy
 80160aa:	f3bf 8f4f 	dsb	sy
 80160ae:	60fb      	str	r3, [r7, #12]
}
 80160b0:	bf00      	nop
 80160b2:	e7fe      	b.n	80160b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80160b4:	693b      	ldr	r3, [r7, #16]
 80160b6:	3318      	adds	r3, #24
 80160b8:	4618      	mov	r0, r3
 80160ba:	f7fe ffe6 	bl	801508a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80160be:	4b1d      	ldr	r3, [pc, #116]	; (8016134 <xTaskRemoveFromEventList+0xac>)
 80160c0:	681b      	ldr	r3, [r3, #0]
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	d11c      	bne.n	8016100 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80160c6:	693b      	ldr	r3, [r7, #16]
 80160c8:	3304      	adds	r3, #4
 80160ca:	4618      	mov	r0, r3
 80160cc:	f7fe ffdd 	bl	801508a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80160d0:	693b      	ldr	r3, [r7, #16]
 80160d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80160d4:	2201      	movs	r2, #1
 80160d6:	409a      	lsls	r2, r3
 80160d8:	4b17      	ldr	r3, [pc, #92]	; (8016138 <xTaskRemoveFromEventList+0xb0>)
 80160da:	681b      	ldr	r3, [r3, #0]
 80160dc:	4313      	orrs	r3, r2
 80160de:	4a16      	ldr	r2, [pc, #88]	; (8016138 <xTaskRemoveFromEventList+0xb0>)
 80160e0:	6013      	str	r3, [r2, #0]
 80160e2:	693b      	ldr	r3, [r7, #16]
 80160e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80160e6:	4613      	mov	r3, r2
 80160e8:	009b      	lsls	r3, r3, #2
 80160ea:	4413      	add	r3, r2
 80160ec:	009b      	lsls	r3, r3, #2
 80160ee:	4a13      	ldr	r2, [pc, #76]	; (801613c <xTaskRemoveFromEventList+0xb4>)
 80160f0:	441a      	add	r2, r3
 80160f2:	693b      	ldr	r3, [r7, #16]
 80160f4:	3304      	adds	r3, #4
 80160f6:	4619      	mov	r1, r3
 80160f8:	4610      	mov	r0, r2
 80160fa:	f7fe ff69 	bl	8014fd0 <vListInsertEnd>
 80160fe:	e005      	b.n	801610c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8016100:	693b      	ldr	r3, [r7, #16]
 8016102:	3318      	adds	r3, #24
 8016104:	4619      	mov	r1, r3
 8016106:	480e      	ldr	r0, [pc, #56]	; (8016140 <xTaskRemoveFromEventList+0xb8>)
 8016108:	f7fe ff62 	bl	8014fd0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801610c:	693b      	ldr	r3, [r7, #16]
 801610e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016110:	4b0c      	ldr	r3, [pc, #48]	; (8016144 <xTaskRemoveFromEventList+0xbc>)
 8016112:	681b      	ldr	r3, [r3, #0]
 8016114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016116:	429a      	cmp	r2, r3
 8016118:	d905      	bls.n	8016126 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801611a:	2301      	movs	r3, #1
 801611c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801611e:	4b0a      	ldr	r3, [pc, #40]	; (8016148 <xTaskRemoveFromEventList+0xc0>)
 8016120:	2201      	movs	r2, #1
 8016122:	601a      	str	r2, [r3, #0]
 8016124:	e001      	b.n	801612a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8016126:	2300      	movs	r3, #0
 8016128:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801612a:	697b      	ldr	r3, [r7, #20]
}
 801612c:	4618      	mov	r0, r3
 801612e:	3718      	adds	r7, #24
 8016130:	46bd      	mov	sp, r7
 8016132:	bd80      	pop	{r7, pc}
 8016134:	20000cc4 	.word	0x20000cc4
 8016138:	20000ca4 	.word	0x20000ca4
 801613c:	20000ba0 	.word	0x20000ba0
 8016140:	20000c5c 	.word	0x20000c5c
 8016144:	20000b9c 	.word	0x20000b9c
 8016148:	20000cb0 	.word	0x20000cb0

0801614c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801614c:	b480      	push	{r7}
 801614e:	b083      	sub	sp, #12
 8016150:	af00      	add	r7, sp, #0
 8016152:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016154:	4b06      	ldr	r3, [pc, #24]	; (8016170 <vTaskInternalSetTimeOutState+0x24>)
 8016156:	681a      	ldr	r2, [r3, #0]
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801615c:	4b05      	ldr	r3, [pc, #20]	; (8016174 <vTaskInternalSetTimeOutState+0x28>)
 801615e:	681a      	ldr	r2, [r3, #0]
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	605a      	str	r2, [r3, #4]
}
 8016164:	bf00      	nop
 8016166:	370c      	adds	r7, #12
 8016168:	46bd      	mov	sp, r7
 801616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801616e:	4770      	bx	lr
 8016170:	20000cb4 	.word	0x20000cb4
 8016174:	20000ca0 	.word	0x20000ca0

08016178 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8016178:	b580      	push	{r7, lr}
 801617a:	b088      	sub	sp, #32
 801617c:	af00      	add	r7, sp, #0
 801617e:	6078      	str	r0, [r7, #4]
 8016180:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	2b00      	cmp	r3, #0
 8016186:	d10a      	bne.n	801619e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8016188:	f04f 0350 	mov.w	r3, #80	; 0x50
 801618c:	f383 8811 	msr	BASEPRI, r3
 8016190:	f3bf 8f6f 	isb	sy
 8016194:	f3bf 8f4f 	dsb	sy
 8016198:	613b      	str	r3, [r7, #16]
}
 801619a:	bf00      	nop
 801619c:	e7fe      	b.n	801619c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801619e:	683b      	ldr	r3, [r7, #0]
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	d10a      	bne.n	80161ba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80161a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161a8:	f383 8811 	msr	BASEPRI, r3
 80161ac:	f3bf 8f6f 	isb	sy
 80161b0:	f3bf 8f4f 	dsb	sy
 80161b4:	60fb      	str	r3, [r7, #12]
}
 80161b6:	bf00      	nop
 80161b8:	e7fe      	b.n	80161b8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80161ba:	f000 fc63 	bl	8016a84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80161be:	4b24      	ldr	r3, [pc, #144]	; (8016250 <xTaskCheckForTimeOut+0xd8>)
 80161c0:	681b      	ldr	r3, [r3, #0]
 80161c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	685b      	ldr	r3, [r3, #4]
 80161c8:	69ba      	ldr	r2, [r7, #24]
 80161ca:	1ad3      	subs	r3, r2, r3
 80161cc:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 80161ce:	4b21      	ldr	r3, [pc, #132]	; (8016254 <xTaskCheckForTimeOut+0xdc>)
 80161d0:	681b      	ldr	r3, [r3, #0]
 80161d2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80161d6:	2b00      	cmp	r3, #0
 80161d8:	d007      	beq.n	80161ea <xTaskCheckForTimeOut+0x72>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 80161da:	4b1e      	ldr	r3, [pc, #120]	; (8016254 <xTaskCheckForTimeOut+0xdc>)
 80161dc:	681b      	ldr	r3, [r3, #0]
 80161de:	2200      	movs	r2, #0
 80161e0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
				xReturn = pdTRUE;
 80161e4:	2301      	movs	r3, #1
 80161e6:	61fb      	str	r3, [r7, #28]
 80161e8:	e02b      	b.n	8016242 <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80161ea:	683b      	ldr	r3, [r7, #0]
 80161ec:	681b      	ldr	r3, [r3, #0]
 80161ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161f2:	d102      	bne.n	80161fa <xTaskCheckForTimeOut+0x82>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80161f4:	2300      	movs	r3, #0
 80161f6:	61fb      	str	r3, [r7, #28]
 80161f8:	e023      	b.n	8016242 <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	681a      	ldr	r2, [r3, #0]
 80161fe:	4b16      	ldr	r3, [pc, #88]	; (8016258 <xTaskCheckForTimeOut+0xe0>)
 8016200:	681b      	ldr	r3, [r3, #0]
 8016202:	429a      	cmp	r2, r3
 8016204:	d007      	beq.n	8016216 <xTaskCheckForTimeOut+0x9e>
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	685b      	ldr	r3, [r3, #4]
 801620a:	69ba      	ldr	r2, [r7, #24]
 801620c:	429a      	cmp	r2, r3
 801620e:	d302      	bcc.n	8016216 <xTaskCheckForTimeOut+0x9e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8016210:	2301      	movs	r3, #1
 8016212:	61fb      	str	r3, [r7, #28]
 8016214:	e015      	b.n	8016242 <xTaskCheckForTimeOut+0xca>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8016216:	683b      	ldr	r3, [r7, #0]
 8016218:	681b      	ldr	r3, [r3, #0]
 801621a:	697a      	ldr	r2, [r7, #20]
 801621c:	429a      	cmp	r2, r3
 801621e:	d20b      	bcs.n	8016238 <xTaskCheckForTimeOut+0xc0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8016220:	683b      	ldr	r3, [r7, #0]
 8016222:	681a      	ldr	r2, [r3, #0]
 8016224:	697b      	ldr	r3, [r7, #20]
 8016226:	1ad2      	subs	r2, r2, r3
 8016228:	683b      	ldr	r3, [r7, #0]
 801622a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801622c:	6878      	ldr	r0, [r7, #4]
 801622e:	f7ff ff8d 	bl	801614c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8016232:	2300      	movs	r3, #0
 8016234:	61fb      	str	r3, [r7, #28]
 8016236:	e004      	b.n	8016242 <xTaskCheckForTimeOut+0xca>
		}
		else
		{
			*pxTicksToWait = 0;
 8016238:	683b      	ldr	r3, [r7, #0]
 801623a:	2200      	movs	r2, #0
 801623c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801623e:	2301      	movs	r3, #1
 8016240:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8016242:	f000 fc4f 	bl	8016ae4 <vPortExitCritical>

	return xReturn;
 8016246:	69fb      	ldr	r3, [r7, #28]
}
 8016248:	4618      	mov	r0, r3
 801624a:	3720      	adds	r7, #32
 801624c:	46bd      	mov	sp, r7
 801624e:	bd80      	pop	{r7, pc}
 8016250:	20000ca0 	.word	0x20000ca0
 8016254:	20000b9c 	.word	0x20000b9c
 8016258:	20000cb4 	.word	0x20000cb4

0801625c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801625c:	b480      	push	{r7}
 801625e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8016260:	4b03      	ldr	r3, [pc, #12]	; (8016270 <vTaskMissedYield+0x14>)
 8016262:	2201      	movs	r2, #1
 8016264:	601a      	str	r2, [r3, #0]
}
 8016266:	bf00      	nop
 8016268:	46bd      	mov	sp, r7
 801626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801626e:	4770      	bx	lr
 8016270:	20000cb0 	.word	0x20000cb0

08016274 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8016274:	b580      	push	{r7, lr}
 8016276:	b082      	sub	sp, #8
 8016278:	af00      	add	r7, sp, #0
 801627a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801627c:	f000 f84c 	bl	8016318 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8016280:	4b04      	ldr	r3, [pc, #16]	; (8016294 <prvIdleTask+0x20>)
 8016282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016286:	601a      	str	r2, [r3, #0]
 8016288:	f3bf 8f4f 	dsb	sy
 801628c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8016290:	e7f4      	b.n	801627c <prvIdleTask+0x8>
 8016292:	bf00      	nop
 8016294:	e000ed04 	.word	0xe000ed04

08016298 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016298:	b580      	push	{r7, lr}
 801629a:	b082      	sub	sp, #8
 801629c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801629e:	2300      	movs	r3, #0
 80162a0:	607b      	str	r3, [r7, #4]
 80162a2:	e00c      	b.n	80162be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80162a4:	687a      	ldr	r2, [r7, #4]
 80162a6:	4613      	mov	r3, r2
 80162a8:	009b      	lsls	r3, r3, #2
 80162aa:	4413      	add	r3, r2
 80162ac:	009b      	lsls	r3, r3, #2
 80162ae:	4a12      	ldr	r2, [pc, #72]	; (80162f8 <prvInitialiseTaskLists+0x60>)
 80162b0:	4413      	add	r3, r2
 80162b2:	4618      	mov	r0, r3
 80162b4:	f7fe fe5f 	bl	8014f76 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	3301      	adds	r3, #1
 80162bc:	607b      	str	r3, [r7, #4]
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	2b06      	cmp	r3, #6
 80162c2:	d9ef      	bls.n	80162a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80162c4:	480d      	ldr	r0, [pc, #52]	; (80162fc <prvInitialiseTaskLists+0x64>)
 80162c6:	f7fe fe56 	bl	8014f76 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80162ca:	480d      	ldr	r0, [pc, #52]	; (8016300 <prvInitialiseTaskLists+0x68>)
 80162cc:	f7fe fe53 	bl	8014f76 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80162d0:	480c      	ldr	r0, [pc, #48]	; (8016304 <prvInitialiseTaskLists+0x6c>)
 80162d2:	f7fe fe50 	bl	8014f76 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80162d6:	480c      	ldr	r0, [pc, #48]	; (8016308 <prvInitialiseTaskLists+0x70>)
 80162d8:	f7fe fe4d 	bl	8014f76 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80162dc:	480b      	ldr	r0, [pc, #44]	; (801630c <prvInitialiseTaskLists+0x74>)
 80162de:	f7fe fe4a 	bl	8014f76 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80162e2:	4b0b      	ldr	r3, [pc, #44]	; (8016310 <prvInitialiseTaskLists+0x78>)
 80162e4:	4a05      	ldr	r2, [pc, #20]	; (80162fc <prvInitialiseTaskLists+0x64>)
 80162e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80162e8:	4b0a      	ldr	r3, [pc, #40]	; (8016314 <prvInitialiseTaskLists+0x7c>)
 80162ea:	4a05      	ldr	r2, [pc, #20]	; (8016300 <prvInitialiseTaskLists+0x68>)
 80162ec:	601a      	str	r2, [r3, #0]
}
 80162ee:	bf00      	nop
 80162f0:	3708      	adds	r7, #8
 80162f2:	46bd      	mov	sp, r7
 80162f4:	bd80      	pop	{r7, pc}
 80162f6:	bf00      	nop
 80162f8:	20000ba0 	.word	0x20000ba0
 80162fc:	20000c2c 	.word	0x20000c2c
 8016300:	20000c40 	.word	0x20000c40
 8016304:	20000c5c 	.word	0x20000c5c
 8016308:	20000c70 	.word	0x20000c70
 801630c:	20000c88 	.word	0x20000c88
 8016310:	20000c54 	.word	0x20000c54
 8016314:	20000c58 	.word	0x20000c58

08016318 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016318:	b580      	push	{r7, lr}
 801631a:	b082      	sub	sp, #8
 801631c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801631e:	e019      	b.n	8016354 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8016320:	f000 fbb0 	bl	8016a84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016324:	4b10      	ldr	r3, [pc, #64]	; (8016368 <prvCheckTasksWaitingTermination+0x50>)
 8016326:	68db      	ldr	r3, [r3, #12]
 8016328:	68db      	ldr	r3, [r3, #12]
 801632a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	3304      	adds	r3, #4
 8016330:	4618      	mov	r0, r3
 8016332:	f7fe feaa 	bl	801508a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8016336:	4b0d      	ldr	r3, [pc, #52]	; (801636c <prvCheckTasksWaitingTermination+0x54>)
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	3b01      	subs	r3, #1
 801633c:	4a0b      	ldr	r2, [pc, #44]	; (801636c <prvCheckTasksWaitingTermination+0x54>)
 801633e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8016340:	4b0b      	ldr	r3, [pc, #44]	; (8016370 <prvCheckTasksWaitingTermination+0x58>)
 8016342:	681b      	ldr	r3, [r3, #0]
 8016344:	3b01      	subs	r3, #1
 8016346:	4a0a      	ldr	r2, [pc, #40]	; (8016370 <prvCheckTasksWaitingTermination+0x58>)
 8016348:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801634a:	f000 fbcb 	bl	8016ae4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801634e:	6878      	ldr	r0, [r7, #4]
 8016350:	f000 f810 	bl	8016374 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016354:	4b06      	ldr	r3, [pc, #24]	; (8016370 <prvCheckTasksWaitingTermination+0x58>)
 8016356:	681b      	ldr	r3, [r3, #0]
 8016358:	2b00      	cmp	r3, #0
 801635a:	d1e1      	bne.n	8016320 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801635c:	bf00      	nop
 801635e:	bf00      	nop
 8016360:	3708      	adds	r7, #8
 8016362:	46bd      	mov	sp, r7
 8016364:	bd80      	pop	{r7, pc}
 8016366:	bf00      	nop
 8016368:	20000c70 	.word	0x20000c70
 801636c:	20000c9c 	.word	0x20000c9c
 8016370:	20000c84 	.word	0x20000c84

08016374 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8016374:	b580      	push	{r7, lr}
 8016376:	b082      	sub	sp, #8
 8016378:	af00      	add	r7, sp, #0
 801637a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	334c      	adds	r3, #76	; 0x4c
 8016380:	4618      	mov	r0, r3
 8016382:	f001 fbdf 	bl	8017b44 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801638a:	4618      	mov	r0, r3
 801638c:	f000 fd68 	bl	8016e60 <vPortFree>
			vPortFree( pxTCB );
 8016390:	6878      	ldr	r0, [r7, #4]
 8016392:	f000 fd65 	bl	8016e60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8016396:	bf00      	nop
 8016398:	3708      	adds	r7, #8
 801639a:	46bd      	mov	sp, r7
 801639c:	bd80      	pop	{r7, pc}
	...

080163a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80163a0:	b480      	push	{r7}
 80163a2:	b083      	sub	sp, #12
 80163a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80163a6:	4b0c      	ldr	r3, [pc, #48]	; (80163d8 <prvResetNextTaskUnblockTime+0x38>)
 80163a8:	681b      	ldr	r3, [r3, #0]
 80163aa:	681b      	ldr	r3, [r3, #0]
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	d104      	bne.n	80163ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80163b0:	4b0a      	ldr	r3, [pc, #40]	; (80163dc <prvResetNextTaskUnblockTime+0x3c>)
 80163b2:	f04f 32ff 	mov.w	r2, #4294967295
 80163b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80163b8:	e008      	b.n	80163cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80163ba:	4b07      	ldr	r3, [pc, #28]	; (80163d8 <prvResetNextTaskUnblockTime+0x38>)
 80163bc:	681b      	ldr	r3, [r3, #0]
 80163be:	68db      	ldr	r3, [r3, #12]
 80163c0:	68db      	ldr	r3, [r3, #12]
 80163c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	685b      	ldr	r3, [r3, #4]
 80163c8:	4a04      	ldr	r2, [pc, #16]	; (80163dc <prvResetNextTaskUnblockTime+0x3c>)
 80163ca:	6013      	str	r3, [r2, #0]
}
 80163cc:	bf00      	nop
 80163ce:	370c      	adds	r7, #12
 80163d0:	46bd      	mov	sp, r7
 80163d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163d6:	4770      	bx	lr
 80163d8:	20000c54 	.word	0x20000c54
 80163dc:	20000cbc 	.word	0x20000cbc

080163e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80163e0:	b480      	push	{r7}
 80163e2:	b083      	sub	sp, #12
 80163e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80163e6:	4b0b      	ldr	r3, [pc, #44]	; (8016414 <xTaskGetSchedulerState+0x34>)
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d102      	bne.n	80163f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80163ee:	2301      	movs	r3, #1
 80163f0:	607b      	str	r3, [r7, #4]
 80163f2:	e008      	b.n	8016406 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80163f4:	4b08      	ldr	r3, [pc, #32]	; (8016418 <xTaskGetSchedulerState+0x38>)
 80163f6:	681b      	ldr	r3, [r3, #0]
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d102      	bne.n	8016402 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80163fc:	2302      	movs	r3, #2
 80163fe:	607b      	str	r3, [r7, #4]
 8016400:	e001      	b.n	8016406 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8016402:	2300      	movs	r3, #0
 8016404:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8016406:	687b      	ldr	r3, [r7, #4]
	}
 8016408:	4618      	mov	r0, r3
 801640a:	370c      	adds	r7, #12
 801640c:	46bd      	mov	sp, r7
 801640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016412:	4770      	bx	lr
 8016414:	20000ca8 	.word	0x20000ca8
 8016418:	20000cc4 	.word	0x20000cc4

0801641c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801641c:	b580      	push	{r7, lr}
 801641e:	b084      	sub	sp, #16
 8016420:	af00      	add	r7, sp, #0
 8016422:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8016428:	2300      	movs	r3, #0
 801642a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	2b00      	cmp	r3, #0
 8016430:	d05e      	beq.n	80164f0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8016432:	68bb      	ldr	r3, [r7, #8]
 8016434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016436:	4b31      	ldr	r3, [pc, #196]	; (80164fc <xTaskPriorityInherit+0xe0>)
 8016438:	681b      	ldr	r3, [r3, #0]
 801643a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801643c:	429a      	cmp	r2, r3
 801643e:	d24e      	bcs.n	80164de <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016440:	68bb      	ldr	r3, [r7, #8]
 8016442:	699b      	ldr	r3, [r3, #24]
 8016444:	2b00      	cmp	r3, #0
 8016446:	db06      	blt.n	8016456 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016448:	4b2c      	ldr	r3, [pc, #176]	; (80164fc <xTaskPriorityInherit+0xe0>)
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801644e:	f1c3 0207 	rsb	r2, r3, #7
 8016452:	68bb      	ldr	r3, [r7, #8]
 8016454:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8016456:	68bb      	ldr	r3, [r7, #8]
 8016458:	6959      	ldr	r1, [r3, #20]
 801645a:	68bb      	ldr	r3, [r7, #8]
 801645c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801645e:	4613      	mov	r3, r2
 8016460:	009b      	lsls	r3, r3, #2
 8016462:	4413      	add	r3, r2
 8016464:	009b      	lsls	r3, r3, #2
 8016466:	4a26      	ldr	r2, [pc, #152]	; (8016500 <xTaskPriorityInherit+0xe4>)
 8016468:	4413      	add	r3, r2
 801646a:	4299      	cmp	r1, r3
 801646c:	d12f      	bne.n	80164ce <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801646e:	68bb      	ldr	r3, [r7, #8]
 8016470:	3304      	adds	r3, #4
 8016472:	4618      	mov	r0, r3
 8016474:	f7fe fe09 	bl	801508a <uxListRemove>
 8016478:	4603      	mov	r3, r0
 801647a:	2b00      	cmp	r3, #0
 801647c:	d10a      	bne.n	8016494 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 801647e:	68bb      	ldr	r3, [r7, #8]
 8016480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016482:	2201      	movs	r2, #1
 8016484:	fa02 f303 	lsl.w	r3, r2, r3
 8016488:	43da      	mvns	r2, r3
 801648a:	4b1e      	ldr	r3, [pc, #120]	; (8016504 <xTaskPriorityInherit+0xe8>)
 801648c:	681b      	ldr	r3, [r3, #0]
 801648e:	4013      	ands	r3, r2
 8016490:	4a1c      	ldr	r2, [pc, #112]	; (8016504 <xTaskPriorityInherit+0xe8>)
 8016492:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016494:	4b19      	ldr	r3, [pc, #100]	; (80164fc <xTaskPriorityInherit+0xe0>)
 8016496:	681b      	ldr	r3, [r3, #0]
 8016498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801649a:	68bb      	ldr	r3, [r7, #8]
 801649c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801649e:	68bb      	ldr	r3, [r7, #8]
 80164a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80164a2:	2201      	movs	r2, #1
 80164a4:	409a      	lsls	r2, r3
 80164a6:	4b17      	ldr	r3, [pc, #92]	; (8016504 <xTaskPriorityInherit+0xe8>)
 80164a8:	681b      	ldr	r3, [r3, #0]
 80164aa:	4313      	orrs	r3, r2
 80164ac:	4a15      	ldr	r2, [pc, #84]	; (8016504 <xTaskPriorityInherit+0xe8>)
 80164ae:	6013      	str	r3, [r2, #0]
 80164b0:	68bb      	ldr	r3, [r7, #8]
 80164b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80164b4:	4613      	mov	r3, r2
 80164b6:	009b      	lsls	r3, r3, #2
 80164b8:	4413      	add	r3, r2
 80164ba:	009b      	lsls	r3, r3, #2
 80164bc:	4a10      	ldr	r2, [pc, #64]	; (8016500 <xTaskPriorityInherit+0xe4>)
 80164be:	441a      	add	r2, r3
 80164c0:	68bb      	ldr	r3, [r7, #8]
 80164c2:	3304      	adds	r3, #4
 80164c4:	4619      	mov	r1, r3
 80164c6:	4610      	mov	r0, r2
 80164c8:	f7fe fd82 	bl	8014fd0 <vListInsertEnd>
 80164cc:	e004      	b.n	80164d8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80164ce:	4b0b      	ldr	r3, [pc, #44]	; (80164fc <xTaskPriorityInherit+0xe0>)
 80164d0:	681b      	ldr	r3, [r3, #0]
 80164d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80164d4:	68bb      	ldr	r3, [r7, #8]
 80164d6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80164d8:	2301      	movs	r3, #1
 80164da:	60fb      	str	r3, [r7, #12]
 80164dc:	e008      	b.n	80164f0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80164de:	68bb      	ldr	r3, [r7, #8]
 80164e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80164e2:	4b06      	ldr	r3, [pc, #24]	; (80164fc <xTaskPriorityInherit+0xe0>)
 80164e4:	681b      	ldr	r3, [r3, #0]
 80164e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80164e8:	429a      	cmp	r2, r3
 80164ea:	d201      	bcs.n	80164f0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80164ec:	2301      	movs	r3, #1
 80164ee:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80164f0:	68fb      	ldr	r3, [r7, #12]
	}
 80164f2:	4618      	mov	r0, r3
 80164f4:	3710      	adds	r7, #16
 80164f6:	46bd      	mov	sp, r7
 80164f8:	bd80      	pop	{r7, pc}
 80164fa:	bf00      	nop
 80164fc:	20000b9c 	.word	0x20000b9c
 8016500:	20000ba0 	.word	0x20000ba0
 8016504:	20000ca4 	.word	0x20000ca4

08016508 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8016508:	b580      	push	{r7, lr}
 801650a:	b086      	sub	sp, #24
 801650c:	af00      	add	r7, sp, #0
 801650e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8016514:	2300      	movs	r3, #0
 8016516:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	2b00      	cmp	r3, #0
 801651c:	d06e      	beq.n	80165fc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801651e:	4b3a      	ldr	r3, [pc, #232]	; (8016608 <xTaskPriorityDisinherit+0x100>)
 8016520:	681b      	ldr	r3, [r3, #0]
 8016522:	693a      	ldr	r2, [r7, #16]
 8016524:	429a      	cmp	r2, r3
 8016526:	d00a      	beq.n	801653e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8016528:	f04f 0350 	mov.w	r3, #80	; 0x50
 801652c:	f383 8811 	msr	BASEPRI, r3
 8016530:	f3bf 8f6f 	isb	sy
 8016534:	f3bf 8f4f 	dsb	sy
 8016538:	60fb      	str	r3, [r7, #12]
}
 801653a:	bf00      	nop
 801653c:	e7fe      	b.n	801653c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801653e:	693b      	ldr	r3, [r7, #16]
 8016540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016542:	2b00      	cmp	r3, #0
 8016544:	d10a      	bne.n	801655c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8016546:	f04f 0350 	mov.w	r3, #80	; 0x50
 801654a:	f383 8811 	msr	BASEPRI, r3
 801654e:	f3bf 8f6f 	isb	sy
 8016552:	f3bf 8f4f 	dsb	sy
 8016556:	60bb      	str	r3, [r7, #8]
}
 8016558:	bf00      	nop
 801655a:	e7fe      	b.n	801655a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801655c:	693b      	ldr	r3, [r7, #16]
 801655e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016560:	1e5a      	subs	r2, r3, #1
 8016562:	693b      	ldr	r3, [r7, #16]
 8016564:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016566:	693b      	ldr	r3, [r7, #16]
 8016568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801656a:	693b      	ldr	r3, [r7, #16]
 801656c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801656e:	429a      	cmp	r2, r3
 8016570:	d044      	beq.n	80165fc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8016572:	693b      	ldr	r3, [r7, #16]
 8016574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016576:	2b00      	cmp	r3, #0
 8016578:	d140      	bne.n	80165fc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801657a:	693b      	ldr	r3, [r7, #16]
 801657c:	3304      	adds	r3, #4
 801657e:	4618      	mov	r0, r3
 8016580:	f7fe fd83 	bl	801508a <uxListRemove>
 8016584:	4603      	mov	r3, r0
 8016586:	2b00      	cmp	r3, #0
 8016588:	d115      	bne.n	80165b6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801658a:	693b      	ldr	r3, [r7, #16]
 801658c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801658e:	491f      	ldr	r1, [pc, #124]	; (801660c <xTaskPriorityDisinherit+0x104>)
 8016590:	4613      	mov	r3, r2
 8016592:	009b      	lsls	r3, r3, #2
 8016594:	4413      	add	r3, r2
 8016596:	009b      	lsls	r3, r3, #2
 8016598:	440b      	add	r3, r1
 801659a:	681b      	ldr	r3, [r3, #0]
 801659c:	2b00      	cmp	r3, #0
 801659e:	d10a      	bne.n	80165b6 <xTaskPriorityDisinherit+0xae>
 80165a0:	693b      	ldr	r3, [r7, #16]
 80165a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80165a4:	2201      	movs	r2, #1
 80165a6:	fa02 f303 	lsl.w	r3, r2, r3
 80165aa:	43da      	mvns	r2, r3
 80165ac:	4b18      	ldr	r3, [pc, #96]	; (8016610 <xTaskPriorityDisinherit+0x108>)
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	4013      	ands	r3, r2
 80165b2:	4a17      	ldr	r2, [pc, #92]	; (8016610 <xTaskPriorityDisinherit+0x108>)
 80165b4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80165b6:	693b      	ldr	r3, [r7, #16]
 80165b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80165ba:	693b      	ldr	r3, [r7, #16]
 80165bc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80165be:	693b      	ldr	r3, [r7, #16]
 80165c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80165c2:	f1c3 0207 	rsb	r2, r3, #7
 80165c6:	693b      	ldr	r3, [r7, #16]
 80165c8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80165ca:	693b      	ldr	r3, [r7, #16]
 80165cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80165ce:	2201      	movs	r2, #1
 80165d0:	409a      	lsls	r2, r3
 80165d2:	4b0f      	ldr	r3, [pc, #60]	; (8016610 <xTaskPriorityDisinherit+0x108>)
 80165d4:	681b      	ldr	r3, [r3, #0]
 80165d6:	4313      	orrs	r3, r2
 80165d8:	4a0d      	ldr	r2, [pc, #52]	; (8016610 <xTaskPriorityDisinherit+0x108>)
 80165da:	6013      	str	r3, [r2, #0]
 80165dc:	693b      	ldr	r3, [r7, #16]
 80165de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80165e0:	4613      	mov	r3, r2
 80165e2:	009b      	lsls	r3, r3, #2
 80165e4:	4413      	add	r3, r2
 80165e6:	009b      	lsls	r3, r3, #2
 80165e8:	4a08      	ldr	r2, [pc, #32]	; (801660c <xTaskPriorityDisinherit+0x104>)
 80165ea:	441a      	add	r2, r3
 80165ec:	693b      	ldr	r3, [r7, #16]
 80165ee:	3304      	adds	r3, #4
 80165f0:	4619      	mov	r1, r3
 80165f2:	4610      	mov	r0, r2
 80165f4:	f7fe fcec 	bl	8014fd0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80165f8:	2301      	movs	r3, #1
 80165fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80165fc:	697b      	ldr	r3, [r7, #20]
	}
 80165fe:	4618      	mov	r0, r3
 8016600:	3718      	adds	r7, #24
 8016602:	46bd      	mov	sp, r7
 8016604:	bd80      	pop	{r7, pc}
 8016606:	bf00      	nop
 8016608:	20000b9c 	.word	0x20000b9c
 801660c:	20000ba0 	.word	0x20000ba0
 8016610:	20000ca4 	.word	0x20000ca4

08016614 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8016614:	b580      	push	{r7, lr}
 8016616:	b088      	sub	sp, #32
 8016618:	af00      	add	r7, sp, #0
 801661a:	6078      	str	r0, [r7, #4]
 801661c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8016622:	2301      	movs	r3, #1
 8016624:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	2b00      	cmp	r3, #0
 801662a:	d077      	beq.n	801671c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801662c:	69bb      	ldr	r3, [r7, #24]
 801662e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016630:	2b00      	cmp	r3, #0
 8016632:	d10a      	bne.n	801664a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8016634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016638:	f383 8811 	msr	BASEPRI, r3
 801663c:	f3bf 8f6f 	isb	sy
 8016640:	f3bf 8f4f 	dsb	sy
 8016644:	60fb      	str	r3, [r7, #12]
}
 8016646:	bf00      	nop
 8016648:	e7fe      	b.n	8016648 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801664a:	69bb      	ldr	r3, [r7, #24]
 801664c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801664e:	683a      	ldr	r2, [r7, #0]
 8016650:	429a      	cmp	r2, r3
 8016652:	d902      	bls.n	801665a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8016654:	683b      	ldr	r3, [r7, #0]
 8016656:	61fb      	str	r3, [r7, #28]
 8016658:	e002      	b.n	8016660 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801665a:	69bb      	ldr	r3, [r7, #24]
 801665c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801665e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8016660:	69bb      	ldr	r3, [r7, #24]
 8016662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016664:	69fa      	ldr	r2, [r7, #28]
 8016666:	429a      	cmp	r2, r3
 8016668:	d058      	beq.n	801671c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801666a:	69bb      	ldr	r3, [r7, #24]
 801666c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801666e:	697a      	ldr	r2, [r7, #20]
 8016670:	429a      	cmp	r2, r3
 8016672:	d153      	bne.n	801671c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8016674:	4b2b      	ldr	r3, [pc, #172]	; (8016724 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8016676:	681b      	ldr	r3, [r3, #0]
 8016678:	69ba      	ldr	r2, [r7, #24]
 801667a:	429a      	cmp	r2, r3
 801667c:	d10a      	bne.n	8016694 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801667e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016682:	f383 8811 	msr	BASEPRI, r3
 8016686:	f3bf 8f6f 	isb	sy
 801668a:	f3bf 8f4f 	dsb	sy
 801668e:	60bb      	str	r3, [r7, #8]
}
 8016690:	bf00      	nop
 8016692:	e7fe      	b.n	8016692 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8016694:	69bb      	ldr	r3, [r7, #24]
 8016696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016698:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801669a:	69bb      	ldr	r3, [r7, #24]
 801669c:	69fa      	ldr	r2, [r7, #28]
 801669e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80166a0:	69bb      	ldr	r3, [r7, #24]
 80166a2:	699b      	ldr	r3, [r3, #24]
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	db04      	blt.n	80166b2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80166a8:	69fb      	ldr	r3, [r7, #28]
 80166aa:	f1c3 0207 	rsb	r2, r3, #7
 80166ae:	69bb      	ldr	r3, [r7, #24]
 80166b0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80166b2:	69bb      	ldr	r3, [r7, #24]
 80166b4:	6959      	ldr	r1, [r3, #20]
 80166b6:	693a      	ldr	r2, [r7, #16]
 80166b8:	4613      	mov	r3, r2
 80166ba:	009b      	lsls	r3, r3, #2
 80166bc:	4413      	add	r3, r2
 80166be:	009b      	lsls	r3, r3, #2
 80166c0:	4a19      	ldr	r2, [pc, #100]	; (8016728 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80166c2:	4413      	add	r3, r2
 80166c4:	4299      	cmp	r1, r3
 80166c6:	d129      	bne.n	801671c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80166c8:	69bb      	ldr	r3, [r7, #24]
 80166ca:	3304      	adds	r3, #4
 80166cc:	4618      	mov	r0, r3
 80166ce:	f7fe fcdc 	bl	801508a <uxListRemove>
 80166d2:	4603      	mov	r3, r0
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	d10a      	bne.n	80166ee <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80166d8:	69bb      	ldr	r3, [r7, #24]
 80166da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80166dc:	2201      	movs	r2, #1
 80166de:	fa02 f303 	lsl.w	r3, r2, r3
 80166e2:	43da      	mvns	r2, r3
 80166e4:	4b11      	ldr	r3, [pc, #68]	; (801672c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80166e6:	681b      	ldr	r3, [r3, #0]
 80166e8:	4013      	ands	r3, r2
 80166ea:	4a10      	ldr	r2, [pc, #64]	; (801672c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80166ec:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80166ee:	69bb      	ldr	r3, [r7, #24]
 80166f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80166f2:	2201      	movs	r2, #1
 80166f4:	409a      	lsls	r2, r3
 80166f6:	4b0d      	ldr	r3, [pc, #52]	; (801672c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80166f8:	681b      	ldr	r3, [r3, #0]
 80166fa:	4313      	orrs	r3, r2
 80166fc:	4a0b      	ldr	r2, [pc, #44]	; (801672c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80166fe:	6013      	str	r3, [r2, #0]
 8016700:	69bb      	ldr	r3, [r7, #24]
 8016702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016704:	4613      	mov	r3, r2
 8016706:	009b      	lsls	r3, r3, #2
 8016708:	4413      	add	r3, r2
 801670a:	009b      	lsls	r3, r3, #2
 801670c:	4a06      	ldr	r2, [pc, #24]	; (8016728 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801670e:	441a      	add	r2, r3
 8016710:	69bb      	ldr	r3, [r7, #24]
 8016712:	3304      	adds	r3, #4
 8016714:	4619      	mov	r1, r3
 8016716:	4610      	mov	r0, r2
 8016718:	f7fe fc5a 	bl	8014fd0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801671c:	bf00      	nop
 801671e:	3720      	adds	r7, #32
 8016720:	46bd      	mov	sp, r7
 8016722:	bd80      	pop	{r7, pc}
 8016724:	20000b9c 	.word	0x20000b9c
 8016728:	20000ba0 	.word	0x20000ba0
 801672c:	20000ca4 	.word	0x20000ca4

08016730 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8016730:	b480      	push	{r7}
 8016732:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8016734:	4b07      	ldr	r3, [pc, #28]	; (8016754 <pvTaskIncrementMutexHeldCount+0x24>)
 8016736:	681b      	ldr	r3, [r3, #0]
 8016738:	2b00      	cmp	r3, #0
 801673a:	d004      	beq.n	8016746 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801673c:	4b05      	ldr	r3, [pc, #20]	; (8016754 <pvTaskIncrementMutexHeldCount+0x24>)
 801673e:	681b      	ldr	r3, [r3, #0]
 8016740:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8016742:	3201      	adds	r2, #1
 8016744:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8016746:	4b03      	ldr	r3, [pc, #12]	; (8016754 <pvTaskIncrementMutexHeldCount+0x24>)
 8016748:	681b      	ldr	r3, [r3, #0]
	}
 801674a:	4618      	mov	r0, r3
 801674c:	46bd      	mov	sp, r7
 801674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016752:	4770      	bx	lr
 8016754:	20000b9c 	.word	0x20000b9c

08016758 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016758:	b580      	push	{r7, lr}
 801675a:	b084      	sub	sp, #16
 801675c:	af00      	add	r7, sp, #0
 801675e:	6078      	str	r0, [r7, #4]
 8016760:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8016762:	4b2b      	ldr	r3, [pc, #172]	; (8016810 <prvAddCurrentTaskToDelayedList+0xb8>)
 8016764:	681b      	ldr	r3, [r3, #0]
 8016766:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8016768:	4b2a      	ldr	r3, [pc, #168]	; (8016814 <prvAddCurrentTaskToDelayedList+0xbc>)
 801676a:	681b      	ldr	r3, [r3, #0]
 801676c:	2200      	movs	r2, #0
 801676e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016772:	4b28      	ldr	r3, [pc, #160]	; (8016814 <prvAddCurrentTaskToDelayedList+0xbc>)
 8016774:	681b      	ldr	r3, [r3, #0]
 8016776:	3304      	adds	r3, #4
 8016778:	4618      	mov	r0, r3
 801677a:	f7fe fc86 	bl	801508a <uxListRemove>
 801677e:	4603      	mov	r3, r0
 8016780:	2b00      	cmp	r3, #0
 8016782:	d10b      	bne.n	801679c <prvAddCurrentTaskToDelayedList+0x44>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8016784:	4b23      	ldr	r3, [pc, #140]	; (8016814 <prvAddCurrentTaskToDelayedList+0xbc>)
 8016786:	681b      	ldr	r3, [r3, #0]
 8016788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801678a:	2201      	movs	r2, #1
 801678c:	fa02 f303 	lsl.w	r3, r2, r3
 8016790:	43da      	mvns	r2, r3
 8016792:	4b21      	ldr	r3, [pc, #132]	; (8016818 <prvAddCurrentTaskToDelayedList+0xc0>)
 8016794:	681b      	ldr	r3, [r3, #0]
 8016796:	4013      	ands	r3, r2
 8016798:	4a1f      	ldr	r2, [pc, #124]	; (8016818 <prvAddCurrentTaskToDelayedList+0xc0>)
 801679a:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80167a2:	d10a      	bne.n	80167ba <prvAddCurrentTaskToDelayedList+0x62>
 80167a4:	683b      	ldr	r3, [r7, #0]
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	d007      	beq.n	80167ba <prvAddCurrentTaskToDelayedList+0x62>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80167aa:	4b1a      	ldr	r3, [pc, #104]	; (8016814 <prvAddCurrentTaskToDelayedList+0xbc>)
 80167ac:	681b      	ldr	r3, [r3, #0]
 80167ae:	3304      	adds	r3, #4
 80167b0:	4619      	mov	r1, r3
 80167b2:	481a      	ldr	r0, [pc, #104]	; (801681c <prvAddCurrentTaskToDelayedList+0xc4>)
 80167b4:	f7fe fc0c 	bl	8014fd0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80167b8:	e026      	b.n	8016808 <prvAddCurrentTaskToDelayedList+0xb0>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80167ba:	68fa      	ldr	r2, [r7, #12]
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	4413      	add	r3, r2
 80167c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80167c2:	4b14      	ldr	r3, [pc, #80]	; (8016814 <prvAddCurrentTaskToDelayedList+0xbc>)
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	68ba      	ldr	r2, [r7, #8]
 80167c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80167ca:	68ba      	ldr	r2, [r7, #8]
 80167cc:	68fb      	ldr	r3, [r7, #12]
 80167ce:	429a      	cmp	r2, r3
 80167d0:	d209      	bcs.n	80167e6 <prvAddCurrentTaskToDelayedList+0x8e>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80167d2:	4b13      	ldr	r3, [pc, #76]	; (8016820 <prvAddCurrentTaskToDelayedList+0xc8>)
 80167d4:	681a      	ldr	r2, [r3, #0]
 80167d6:	4b0f      	ldr	r3, [pc, #60]	; (8016814 <prvAddCurrentTaskToDelayedList+0xbc>)
 80167d8:	681b      	ldr	r3, [r3, #0]
 80167da:	3304      	adds	r3, #4
 80167dc:	4619      	mov	r1, r3
 80167de:	4610      	mov	r0, r2
 80167e0:	f7fe fc1a 	bl	8015018 <vListInsert>
}
 80167e4:	e010      	b.n	8016808 <prvAddCurrentTaskToDelayedList+0xb0>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80167e6:	4b0f      	ldr	r3, [pc, #60]	; (8016824 <prvAddCurrentTaskToDelayedList+0xcc>)
 80167e8:	681a      	ldr	r2, [r3, #0]
 80167ea:	4b0a      	ldr	r3, [pc, #40]	; (8016814 <prvAddCurrentTaskToDelayedList+0xbc>)
 80167ec:	681b      	ldr	r3, [r3, #0]
 80167ee:	3304      	adds	r3, #4
 80167f0:	4619      	mov	r1, r3
 80167f2:	4610      	mov	r0, r2
 80167f4:	f7fe fc10 	bl	8015018 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80167f8:	4b0b      	ldr	r3, [pc, #44]	; (8016828 <prvAddCurrentTaskToDelayedList+0xd0>)
 80167fa:	681b      	ldr	r3, [r3, #0]
 80167fc:	68ba      	ldr	r2, [r7, #8]
 80167fe:	429a      	cmp	r2, r3
 8016800:	d202      	bcs.n	8016808 <prvAddCurrentTaskToDelayedList+0xb0>
					xNextTaskUnblockTime = xTimeToWake;
 8016802:	4a09      	ldr	r2, [pc, #36]	; (8016828 <prvAddCurrentTaskToDelayedList+0xd0>)
 8016804:	68bb      	ldr	r3, [r7, #8]
 8016806:	6013      	str	r3, [r2, #0]
}
 8016808:	bf00      	nop
 801680a:	3710      	adds	r7, #16
 801680c:	46bd      	mov	sp, r7
 801680e:	bd80      	pop	{r7, pc}
 8016810:	20000ca0 	.word	0x20000ca0
 8016814:	20000b9c 	.word	0x20000b9c
 8016818:	20000ca4 	.word	0x20000ca4
 801681c:	20000c88 	.word	0x20000c88
 8016820:	20000c58 	.word	0x20000c58
 8016824:	20000c54 	.word	0x20000c54
 8016828:	20000cbc 	.word	0x20000cbc

0801682c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801682c:	b480      	push	{r7}
 801682e:	b085      	sub	sp, #20
 8016830:	af00      	add	r7, sp, #0
 8016832:	60f8      	str	r0, [r7, #12]
 8016834:	60b9      	str	r1, [r7, #8]
 8016836:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016838:	68fb      	ldr	r3, [r7, #12]
 801683a:	3b04      	subs	r3, #4
 801683c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801683e:	68fb      	ldr	r3, [r7, #12]
 8016840:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8016844:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016846:	68fb      	ldr	r3, [r7, #12]
 8016848:	3b04      	subs	r3, #4
 801684a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801684c:	68bb      	ldr	r3, [r7, #8]
 801684e:	f023 0201 	bic.w	r2, r3, #1
 8016852:	68fb      	ldr	r3, [r7, #12]
 8016854:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016856:	68fb      	ldr	r3, [r7, #12]
 8016858:	3b04      	subs	r3, #4
 801685a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801685c:	4a0c      	ldr	r2, [pc, #48]	; (8016890 <pxPortInitialiseStack+0x64>)
 801685e:	68fb      	ldr	r3, [r7, #12]
 8016860:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8016862:	68fb      	ldr	r3, [r7, #12]
 8016864:	3b14      	subs	r3, #20
 8016866:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016868:	687a      	ldr	r2, [r7, #4]
 801686a:	68fb      	ldr	r3, [r7, #12]
 801686c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801686e:	68fb      	ldr	r3, [r7, #12]
 8016870:	3b04      	subs	r3, #4
 8016872:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016874:	68fb      	ldr	r3, [r7, #12]
 8016876:	f06f 0202 	mvn.w	r2, #2
 801687a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801687c:	68fb      	ldr	r3, [r7, #12]
 801687e:	3b20      	subs	r3, #32
 8016880:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8016882:	68fb      	ldr	r3, [r7, #12]
}
 8016884:	4618      	mov	r0, r3
 8016886:	3714      	adds	r7, #20
 8016888:	46bd      	mov	sp, r7
 801688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801688e:	4770      	bx	lr
 8016890:	08016895 	.word	0x08016895

08016894 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016894:	b480      	push	{r7}
 8016896:	b085      	sub	sp, #20
 8016898:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801689a:	2300      	movs	r3, #0
 801689c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801689e:	4b12      	ldr	r3, [pc, #72]	; (80168e8 <prvTaskExitError+0x54>)
 80168a0:	681b      	ldr	r3, [r3, #0]
 80168a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80168a6:	d00a      	beq.n	80168be <prvTaskExitError+0x2a>
	__asm volatile
 80168a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168ac:	f383 8811 	msr	BASEPRI, r3
 80168b0:	f3bf 8f6f 	isb	sy
 80168b4:	f3bf 8f4f 	dsb	sy
 80168b8:	60fb      	str	r3, [r7, #12]
}
 80168ba:	bf00      	nop
 80168bc:	e7fe      	b.n	80168bc <prvTaskExitError+0x28>
	__asm volatile
 80168be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168c2:	f383 8811 	msr	BASEPRI, r3
 80168c6:	f3bf 8f6f 	isb	sy
 80168ca:	f3bf 8f4f 	dsb	sy
 80168ce:	60bb      	str	r3, [r7, #8]
}
 80168d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80168d2:	bf00      	nop
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	2b00      	cmp	r3, #0
 80168d8:	d0fc      	beq.n	80168d4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80168da:	bf00      	nop
 80168dc:	bf00      	nop
 80168de:	3714      	adds	r7, #20
 80168e0:	46bd      	mov	sp, r7
 80168e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168e6:	4770      	bx	lr
 80168e8:	20000120 	.word	0x20000120
 80168ec:	00000000 	.word	0x00000000

080168f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80168f0:	4b07      	ldr	r3, [pc, #28]	; (8016910 <pxCurrentTCBConst2>)
 80168f2:	6819      	ldr	r1, [r3, #0]
 80168f4:	6808      	ldr	r0, [r1, #0]
 80168f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168fa:	f380 8809 	msr	PSP, r0
 80168fe:	f3bf 8f6f 	isb	sy
 8016902:	f04f 0000 	mov.w	r0, #0
 8016906:	f380 8811 	msr	BASEPRI, r0
 801690a:	4770      	bx	lr
 801690c:	f3af 8000 	nop.w

08016910 <pxCurrentTCBConst2>:
 8016910:	20000b9c 	.word	0x20000b9c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016914:	bf00      	nop
 8016916:	bf00      	nop

08016918 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016918:	4808      	ldr	r0, [pc, #32]	; (801693c <prvPortStartFirstTask+0x24>)
 801691a:	6800      	ldr	r0, [r0, #0]
 801691c:	6800      	ldr	r0, [r0, #0]
 801691e:	f380 8808 	msr	MSP, r0
 8016922:	f04f 0000 	mov.w	r0, #0
 8016926:	f380 8814 	msr	CONTROL, r0
 801692a:	b662      	cpsie	i
 801692c:	b661      	cpsie	f
 801692e:	f3bf 8f4f 	dsb	sy
 8016932:	f3bf 8f6f 	isb	sy
 8016936:	df00      	svc	0
 8016938:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801693a:	bf00      	nop
 801693c:	e000ed08 	.word	0xe000ed08

08016940 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016940:	b580      	push	{r7, lr}
 8016942:	b086      	sub	sp, #24
 8016944:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8016946:	4b46      	ldr	r3, [pc, #280]	; (8016a60 <xPortStartScheduler+0x120>)
 8016948:	681b      	ldr	r3, [r3, #0]
 801694a:	4a46      	ldr	r2, [pc, #280]	; (8016a64 <xPortStartScheduler+0x124>)
 801694c:	4293      	cmp	r3, r2
 801694e:	d10a      	bne.n	8016966 <xPortStartScheduler+0x26>
	__asm volatile
 8016950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016954:	f383 8811 	msr	BASEPRI, r3
 8016958:	f3bf 8f6f 	isb	sy
 801695c:	f3bf 8f4f 	dsb	sy
 8016960:	613b      	str	r3, [r7, #16]
}
 8016962:	bf00      	nop
 8016964:	e7fe      	b.n	8016964 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8016966:	4b3e      	ldr	r3, [pc, #248]	; (8016a60 <xPortStartScheduler+0x120>)
 8016968:	681b      	ldr	r3, [r3, #0]
 801696a:	4a3f      	ldr	r2, [pc, #252]	; (8016a68 <xPortStartScheduler+0x128>)
 801696c:	4293      	cmp	r3, r2
 801696e:	d10a      	bne.n	8016986 <xPortStartScheduler+0x46>
	__asm volatile
 8016970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016974:	f383 8811 	msr	BASEPRI, r3
 8016978:	f3bf 8f6f 	isb	sy
 801697c:	f3bf 8f4f 	dsb	sy
 8016980:	60fb      	str	r3, [r7, #12]
}
 8016982:	bf00      	nop
 8016984:	e7fe      	b.n	8016984 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016986:	4b39      	ldr	r3, [pc, #228]	; (8016a6c <xPortStartScheduler+0x12c>)
 8016988:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801698a:	697b      	ldr	r3, [r7, #20]
 801698c:	781b      	ldrb	r3, [r3, #0]
 801698e:	b2db      	uxtb	r3, r3
 8016990:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016992:	697b      	ldr	r3, [r7, #20]
 8016994:	22ff      	movs	r2, #255	; 0xff
 8016996:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016998:	697b      	ldr	r3, [r7, #20]
 801699a:	781b      	ldrb	r3, [r3, #0]
 801699c:	b2db      	uxtb	r3, r3
 801699e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80169a0:	78fb      	ldrb	r3, [r7, #3]
 80169a2:	b2db      	uxtb	r3, r3
 80169a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80169a8:	b2da      	uxtb	r2, r3
 80169aa:	4b31      	ldr	r3, [pc, #196]	; (8016a70 <xPortStartScheduler+0x130>)
 80169ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80169ae:	4b31      	ldr	r3, [pc, #196]	; (8016a74 <xPortStartScheduler+0x134>)
 80169b0:	2207      	movs	r2, #7
 80169b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80169b4:	e009      	b.n	80169ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80169b6:	4b2f      	ldr	r3, [pc, #188]	; (8016a74 <xPortStartScheduler+0x134>)
 80169b8:	681b      	ldr	r3, [r3, #0]
 80169ba:	3b01      	subs	r3, #1
 80169bc:	4a2d      	ldr	r2, [pc, #180]	; (8016a74 <xPortStartScheduler+0x134>)
 80169be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80169c0:	78fb      	ldrb	r3, [r7, #3]
 80169c2:	b2db      	uxtb	r3, r3
 80169c4:	005b      	lsls	r3, r3, #1
 80169c6:	b2db      	uxtb	r3, r3
 80169c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80169ca:	78fb      	ldrb	r3, [r7, #3]
 80169cc:	b2db      	uxtb	r3, r3
 80169ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80169d2:	2b80      	cmp	r3, #128	; 0x80
 80169d4:	d0ef      	beq.n	80169b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80169d6:	4b27      	ldr	r3, [pc, #156]	; (8016a74 <xPortStartScheduler+0x134>)
 80169d8:	681b      	ldr	r3, [r3, #0]
 80169da:	f1c3 0307 	rsb	r3, r3, #7
 80169de:	2b04      	cmp	r3, #4
 80169e0:	d00a      	beq.n	80169f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80169e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169e6:	f383 8811 	msr	BASEPRI, r3
 80169ea:	f3bf 8f6f 	isb	sy
 80169ee:	f3bf 8f4f 	dsb	sy
 80169f2:	60bb      	str	r3, [r7, #8]
}
 80169f4:	bf00      	nop
 80169f6:	e7fe      	b.n	80169f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80169f8:	4b1e      	ldr	r3, [pc, #120]	; (8016a74 <xPortStartScheduler+0x134>)
 80169fa:	681b      	ldr	r3, [r3, #0]
 80169fc:	021b      	lsls	r3, r3, #8
 80169fe:	4a1d      	ldr	r2, [pc, #116]	; (8016a74 <xPortStartScheduler+0x134>)
 8016a00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016a02:	4b1c      	ldr	r3, [pc, #112]	; (8016a74 <xPortStartScheduler+0x134>)
 8016a04:	681b      	ldr	r3, [r3, #0]
 8016a06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8016a0a:	4a1a      	ldr	r2, [pc, #104]	; (8016a74 <xPortStartScheduler+0x134>)
 8016a0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	b2da      	uxtb	r2, r3
 8016a12:	697b      	ldr	r3, [r7, #20]
 8016a14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016a16:	4b18      	ldr	r3, [pc, #96]	; (8016a78 <xPortStartScheduler+0x138>)
 8016a18:	681b      	ldr	r3, [r3, #0]
 8016a1a:	4a17      	ldr	r2, [pc, #92]	; (8016a78 <xPortStartScheduler+0x138>)
 8016a1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016a20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016a22:	4b15      	ldr	r3, [pc, #84]	; (8016a78 <xPortStartScheduler+0x138>)
 8016a24:	681b      	ldr	r3, [r3, #0]
 8016a26:	4a14      	ldr	r2, [pc, #80]	; (8016a78 <xPortStartScheduler+0x138>)
 8016a28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8016a2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8016a2e:	f000 f8dd 	bl	8016bec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016a32:	4b12      	ldr	r3, [pc, #72]	; (8016a7c <xPortStartScheduler+0x13c>)
 8016a34:	2200      	movs	r2, #0
 8016a36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8016a38:	f000 f8fc 	bl	8016c34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8016a3c:	4b10      	ldr	r3, [pc, #64]	; (8016a80 <xPortStartScheduler+0x140>)
 8016a3e:	681b      	ldr	r3, [r3, #0]
 8016a40:	4a0f      	ldr	r2, [pc, #60]	; (8016a80 <xPortStartScheduler+0x140>)
 8016a42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016a46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016a48:	f7ff ff66 	bl	8016918 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8016a4c:	f7ff fa96 	bl	8015f7c <vTaskSwitchContext>
	prvTaskExitError();
 8016a50:	f7ff ff20 	bl	8016894 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016a54:	2300      	movs	r3, #0
}
 8016a56:	4618      	mov	r0, r3
 8016a58:	3718      	adds	r7, #24
 8016a5a:	46bd      	mov	sp, r7
 8016a5c:	bd80      	pop	{r7, pc}
 8016a5e:	bf00      	nop
 8016a60:	e000ed00 	.word	0xe000ed00
 8016a64:	410fc271 	.word	0x410fc271
 8016a68:	410fc270 	.word	0x410fc270
 8016a6c:	e000e400 	.word	0xe000e400
 8016a70:	20000cc8 	.word	0x20000cc8
 8016a74:	20000ccc 	.word	0x20000ccc
 8016a78:	e000ed20 	.word	0xe000ed20
 8016a7c:	20000120 	.word	0x20000120
 8016a80:	e000ef34 	.word	0xe000ef34

08016a84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016a84:	b480      	push	{r7}
 8016a86:	b083      	sub	sp, #12
 8016a88:	af00      	add	r7, sp, #0
	__asm volatile
 8016a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a8e:	f383 8811 	msr	BASEPRI, r3
 8016a92:	f3bf 8f6f 	isb	sy
 8016a96:	f3bf 8f4f 	dsb	sy
 8016a9a:	607b      	str	r3, [r7, #4]
}
 8016a9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8016a9e:	4b0f      	ldr	r3, [pc, #60]	; (8016adc <vPortEnterCritical+0x58>)
 8016aa0:	681b      	ldr	r3, [r3, #0]
 8016aa2:	3301      	adds	r3, #1
 8016aa4:	4a0d      	ldr	r2, [pc, #52]	; (8016adc <vPortEnterCritical+0x58>)
 8016aa6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8016aa8:	4b0c      	ldr	r3, [pc, #48]	; (8016adc <vPortEnterCritical+0x58>)
 8016aaa:	681b      	ldr	r3, [r3, #0]
 8016aac:	2b01      	cmp	r3, #1
 8016aae:	d10f      	bne.n	8016ad0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016ab0:	4b0b      	ldr	r3, [pc, #44]	; (8016ae0 <vPortEnterCritical+0x5c>)
 8016ab2:	681b      	ldr	r3, [r3, #0]
 8016ab4:	b2db      	uxtb	r3, r3
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d00a      	beq.n	8016ad0 <vPortEnterCritical+0x4c>
	__asm volatile
 8016aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016abe:	f383 8811 	msr	BASEPRI, r3
 8016ac2:	f3bf 8f6f 	isb	sy
 8016ac6:	f3bf 8f4f 	dsb	sy
 8016aca:	603b      	str	r3, [r7, #0]
}
 8016acc:	bf00      	nop
 8016ace:	e7fe      	b.n	8016ace <vPortEnterCritical+0x4a>
	}
}
 8016ad0:	bf00      	nop
 8016ad2:	370c      	adds	r7, #12
 8016ad4:	46bd      	mov	sp, r7
 8016ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ada:	4770      	bx	lr
 8016adc:	20000120 	.word	0x20000120
 8016ae0:	e000ed04 	.word	0xe000ed04

08016ae4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016ae4:	b480      	push	{r7}
 8016ae6:	b083      	sub	sp, #12
 8016ae8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8016aea:	4b12      	ldr	r3, [pc, #72]	; (8016b34 <vPortExitCritical+0x50>)
 8016aec:	681b      	ldr	r3, [r3, #0]
 8016aee:	2b00      	cmp	r3, #0
 8016af0:	d10a      	bne.n	8016b08 <vPortExitCritical+0x24>
	__asm volatile
 8016af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016af6:	f383 8811 	msr	BASEPRI, r3
 8016afa:	f3bf 8f6f 	isb	sy
 8016afe:	f3bf 8f4f 	dsb	sy
 8016b02:	607b      	str	r3, [r7, #4]
}
 8016b04:	bf00      	nop
 8016b06:	e7fe      	b.n	8016b06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8016b08:	4b0a      	ldr	r3, [pc, #40]	; (8016b34 <vPortExitCritical+0x50>)
 8016b0a:	681b      	ldr	r3, [r3, #0]
 8016b0c:	3b01      	subs	r3, #1
 8016b0e:	4a09      	ldr	r2, [pc, #36]	; (8016b34 <vPortExitCritical+0x50>)
 8016b10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016b12:	4b08      	ldr	r3, [pc, #32]	; (8016b34 <vPortExitCritical+0x50>)
 8016b14:	681b      	ldr	r3, [r3, #0]
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d105      	bne.n	8016b26 <vPortExitCritical+0x42>
 8016b1a:	2300      	movs	r3, #0
 8016b1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016b1e:	683b      	ldr	r3, [r7, #0]
 8016b20:	f383 8811 	msr	BASEPRI, r3
}
 8016b24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8016b26:	bf00      	nop
 8016b28:	370c      	adds	r7, #12
 8016b2a:	46bd      	mov	sp, r7
 8016b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b30:	4770      	bx	lr
 8016b32:	bf00      	nop
 8016b34:	20000120 	.word	0x20000120
	...

08016b40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016b40:	f3ef 8009 	mrs	r0, PSP
 8016b44:	f3bf 8f6f 	isb	sy
 8016b48:	4b15      	ldr	r3, [pc, #84]	; (8016ba0 <pxCurrentTCBConst>)
 8016b4a:	681a      	ldr	r2, [r3, #0]
 8016b4c:	f01e 0f10 	tst.w	lr, #16
 8016b50:	bf08      	it	eq
 8016b52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016b56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b5a:	6010      	str	r0, [r2, #0]
 8016b5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016b60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016b64:	f380 8811 	msr	BASEPRI, r0
 8016b68:	f3bf 8f4f 	dsb	sy
 8016b6c:	f3bf 8f6f 	isb	sy
 8016b70:	f7ff fa04 	bl	8015f7c <vTaskSwitchContext>
 8016b74:	f04f 0000 	mov.w	r0, #0
 8016b78:	f380 8811 	msr	BASEPRI, r0
 8016b7c:	bc09      	pop	{r0, r3}
 8016b7e:	6819      	ldr	r1, [r3, #0]
 8016b80:	6808      	ldr	r0, [r1, #0]
 8016b82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b86:	f01e 0f10 	tst.w	lr, #16
 8016b8a:	bf08      	it	eq
 8016b8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016b90:	f380 8809 	msr	PSP, r0
 8016b94:	f3bf 8f6f 	isb	sy
 8016b98:	4770      	bx	lr
 8016b9a:	bf00      	nop
 8016b9c:	f3af 8000 	nop.w

08016ba0 <pxCurrentTCBConst>:
 8016ba0:	20000b9c 	.word	0x20000b9c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016ba4:	bf00      	nop
 8016ba6:	bf00      	nop

08016ba8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016ba8:	b580      	push	{r7, lr}
 8016baa:	b082      	sub	sp, #8
 8016bac:	af00      	add	r7, sp, #0
	__asm volatile
 8016bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bb2:	f383 8811 	msr	BASEPRI, r3
 8016bb6:	f3bf 8f6f 	isb	sy
 8016bba:	f3bf 8f4f 	dsb	sy
 8016bbe:	607b      	str	r3, [r7, #4]
}
 8016bc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016bc2:	f7ff f945 	bl	8015e50 <xTaskIncrementTick>
 8016bc6:	4603      	mov	r3, r0
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	d003      	beq.n	8016bd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8016bcc:	4b06      	ldr	r3, [pc, #24]	; (8016be8 <SysTick_Handler+0x40>)
 8016bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016bd2:	601a      	str	r2, [r3, #0]
 8016bd4:	2300      	movs	r3, #0
 8016bd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016bd8:	683b      	ldr	r3, [r7, #0]
 8016bda:	f383 8811 	msr	BASEPRI, r3
}
 8016bde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016be0:	bf00      	nop
 8016be2:	3708      	adds	r7, #8
 8016be4:	46bd      	mov	sp, r7
 8016be6:	bd80      	pop	{r7, pc}
 8016be8:	e000ed04 	.word	0xe000ed04

08016bec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8016bec:	b480      	push	{r7}
 8016bee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016bf0:	4b0b      	ldr	r3, [pc, #44]	; (8016c20 <vPortSetupTimerInterrupt+0x34>)
 8016bf2:	2200      	movs	r2, #0
 8016bf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016bf6:	4b0b      	ldr	r3, [pc, #44]	; (8016c24 <vPortSetupTimerInterrupt+0x38>)
 8016bf8:	2200      	movs	r2, #0
 8016bfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8016bfc:	4b0a      	ldr	r3, [pc, #40]	; (8016c28 <vPortSetupTimerInterrupt+0x3c>)
 8016bfe:	681b      	ldr	r3, [r3, #0]
 8016c00:	4a0a      	ldr	r2, [pc, #40]	; (8016c2c <vPortSetupTimerInterrupt+0x40>)
 8016c02:	fba2 2303 	umull	r2, r3, r2, r3
 8016c06:	099b      	lsrs	r3, r3, #6
 8016c08:	4a09      	ldr	r2, [pc, #36]	; (8016c30 <vPortSetupTimerInterrupt+0x44>)
 8016c0a:	3b01      	subs	r3, #1
 8016c0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8016c0e:	4b04      	ldr	r3, [pc, #16]	; (8016c20 <vPortSetupTimerInterrupt+0x34>)
 8016c10:	2207      	movs	r2, #7
 8016c12:	601a      	str	r2, [r3, #0]
}
 8016c14:	bf00      	nop
 8016c16:	46bd      	mov	sp, r7
 8016c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c1c:	4770      	bx	lr
 8016c1e:	bf00      	nop
 8016c20:	e000e010 	.word	0xe000e010
 8016c24:	e000e018 	.word	0xe000e018
 8016c28:	20000004 	.word	0x20000004
 8016c2c:	10624dd3 	.word	0x10624dd3
 8016c30:	e000e014 	.word	0xe000e014

08016c34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016c34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016c44 <vPortEnableVFP+0x10>
 8016c38:	6801      	ldr	r1, [r0, #0]
 8016c3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8016c3e:	6001      	str	r1, [r0, #0]
 8016c40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016c42:	bf00      	nop
 8016c44:	e000ed88 	.word	0xe000ed88

08016c48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016c48:	b480      	push	{r7}
 8016c4a:	b085      	sub	sp, #20
 8016c4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8016c4e:	f3ef 8305 	mrs	r3, IPSR
 8016c52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016c54:	68fb      	ldr	r3, [r7, #12]
 8016c56:	2b0f      	cmp	r3, #15
 8016c58:	d914      	bls.n	8016c84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8016c5a:	4a17      	ldr	r2, [pc, #92]	; (8016cb8 <vPortValidateInterruptPriority+0x70>)
 8016c5c:	68fb      	ldr	r3, [r7, #12]
 8016c5e:	4413      	add	r3, r2
 8016c60:	781b      	ldrb	r3, [r3, #0]
 8016c62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016c64:	4b15      	ldr	r3, [pc, #84]	; (8016cbc <vPortValidateInterruptPriority+0x74>)
 8016c66:	781b      	ldrb	r3, [r3, #0]
 8016c68:	7afa      	ldrb	r2, [r7, #11]
 8016c6a:	429a      	cmp	r2, r3
 8016c6c:	d20a      	bcs.n	8016c84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8016c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c72:	f383 8811 	msr	BASEPRI, r3
 8016c76:	f3bf 8f6f 	isb	sy
 8016c7a:	f3bf 8f4f 	dsb	sy
 8016c7e:	607b      	str	r3, [r7, #4]
}
 8016c80:	bf00      	nop
 8016c82:	e7fe      	b.n	8016c82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016c84:	4b0e      	ldr	r3, [pc, #56]	; (8016cc0 <vPortValidateInterruptPriority+0x78>)
 8016c86:	681b      	ldr	r3, [r3, #0]
 8016c88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8016c8c:	4b0d      	ldr	r3, [pc, #52]	; (8016cc4 <vPortValidateInterruptPriority+0x7c>)
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	429a      	cmp	r2, r3
 8016c92:	d90a      	bls.n	8016caa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8016c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c98:	f383 8811 	msr	BASEPRI, r3
 8016c9c:	f3bf 8f6f 	isb	sy
 8016ca0:	f3bf 8f4f 	dsb	sy
 8016ca4:	603b      	str	r3, [r7, #0]
}
 8016ca6:	bf00      	nop
 8016ca8:	e7fe      	b.n	8016ca8 <vPortValidateInterruptPriority+0x60>
	}
 8016caa:	bf00      	nop
 8016cac:	3714      	adds	r7, #20
 8016cae:	46bd      	mov	sp, r7
 8016cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cb4:	4770      	bx	lr
 8016cb6:	bf00      	nop
 8016cb8:	e000e3f0 	.word	0xe000e3f0
 8016cbc:	20000cc8 	.word	0x20000cc8
 8016cc0:	e000ed0c 	.word	0xe000ed0c
 8016cc4:	20000ccc 	.word	0x20000ccc

08016cc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016cc8:	b580      	push	{r7, lr}
 8016cca:	b08a      	sub	sp, #40	; 0x28
 8016ccc:	af00      	add	r7, sp, #0
 8016cce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016cd0:	2300      	movs	r3, #0
 8016cd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016cd4:	f7ff f820 	bl	8015d18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016cd8:	4b5b      	ldr	r3, [pc, #364]	; (8016e48 <pvPortMalloc+0x180>)
 8016cda:	681b      	ldr	r3, [r3, #0]
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d101      	bne.n	8016ce4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016ce0:	f000 f920 	bl	8016f24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016ce4:	4b59      	ldr	r3, [pc, #356]	; (8016e4c <pvPortMalloc+0x184>)
 8016ce6:	681a      	ldr	r2, [r3, #0]
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	4013      	ands	r3, r2
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	f040 8093 	bne.w	8016e18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	d01d      	beq.n	8016d34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8016cf8:	2208      	movs	r2, #8
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	4413      	add	r3, r2
 8016cfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	f003 0307 	and.w	r3, r3, #7
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	d014      	beq.n	8016d34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	f023 0307 	bic.w	r3, r3, #7
 8016d10:	3308      	adds	r3, #8
 8016d12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	f003 0307 	and.w	r3, r3, #7
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d00a      	beq.n	8016d34 <pvPortMalloc+0x6c>
	__asm volatile
 8016d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d22:	f383 8811 	msr	BASEPRI, r3
 8016d26:	f3bf 8f6f 	isb	sy
 8016d2a:	f3bf 8f4f 	dsb	sy
 8016d2e:	617b      	str	r3, [r7, #20]
}
 8016d30:	bf00      	nop
 8016d32:	e7fe      	b.n	8016d32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d06e      	beq.n	8016e18 <pvPortMalloc+0x150>
 8016d3a:	4b45      	ldr	r3, [pc, #276]	; (8016e50 <pvPortMalloc+0x188>)
 8016d3c:	681b      	ldr	r3, [r3, #0]
 8016d3e:	687a      	ldr	r2, [r7, #4]
 8016d40:	429a      	cmp	r2, r3
 8016d42:	d869      	bhi.n	8016e18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016d44:	4b43      	ldr	r3, [pc, #268]	; (8016e54 <pvPortMalloc+0x18c>)
 8016d46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016d48:	4b42      	ldr	r3, [pc, #264]	; (8016e54 <pvPortMalloc+0x18c>)
 8016d4a:	681b      	ldr	r3, [r3, #0]
 8016d4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016d4e:	e004      	b.n	8016d5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8016d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d56:	681b      	ldr	r3, [r3, #0]
 8016d58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d5c:	685b      	ldr	r3, [r3, #4]
 8016d5e:	687a      	ldr	r2, [r7, #4]
 8016d60:	429a      	cmp	r2, r3
 8016d62:	d903      	bls.n	8016d6c <pvPortMalloc+0xa4>
 8016d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d66:	681b      	ldr	r3, [r3, #0]
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	d1f1      	bne.n	8016d50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016d6c:	4b36      	ldr	r3, [pc, #216]	; (8016e48 <pvPortMalloc+0x180>)
 8016d6e:	681b      	ldr	r3, [r3, #0]
 8016d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016d72:	429a      	cmp	r2, r3
 8016d74:	d050      	beq.n	8016e18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016d76:	6a3b      	ldr	r3, [r7, #32]
 8016d78:	681b      	ldr	r3, [r3, #0]
 8016d7a:	2208      	movs	r2, #8
 8016d7c:	4413      	add	r3, r2
 8016d7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d82:	681a      	ldr	r2, [r3, #0]
 8016d84:	6a3b      	ldr	r3, [r7, #32]
 8016d86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d8a:	685a      	ldr	r2, [r3, #4]
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	1ad2      	subs	r2, r2, r3
 8016d90:	2308      	movs	r3, #8
 8016d92:	005b      	lsls	r3, r3, #1
 8016d94:	429a      	cmp	r2, r3
 8016d96:	d91f      	bls.n	8016dd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	4413      	add	r3, r2
 8016d9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016da0:	69bb      	ldr	r3, [r7, #24]
 8016da2:	f003 0307 	and.w	r3, r3, #7
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	d00a      	beq.n	8016dc0 <pvPortMalloc+0xf8>
	__asm volatile
 8016daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016dae:	f383 8811 	msr	BASEPRI, r3
 8016db2:	f3bf 8f6f 	isb	sy
 8016db6:	f3bf 8f4f 	dsb	sy
 8016dba:	613b      	str	r3, [r7, #16]
}
 8016dbc:	bf00      	nop
 8016dbe:	e7fe      	b.n	8016dbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dc2:	685a      	ldr	r2, [r3, #4]
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	1ad2      	subs	r2, r2, r3
 8016dc8:	69bb      	ldr	r3, [r7, #24]
 8016dca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dce:	687a      	ldr	r2, [r7, #4]
 8016dd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016dd2:	69b8      	ldr	r0, [r7, #24]
 8016dd4:	f000 f908 	bl	8016fe8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016dd8:	4b1d      	ldr	r3, [pc, #116]	; (8016e50 <pvPortMalloc+0x188>)
 8016dda:	681a      	ldr	r2, [r3, #0]
 8016ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dde:	685b      	ldr	r3, [r3, #4]
 8016de0:	1ad3      	subs	r3, r2, r3
 8016de2:	4a1b      	ldr	r2, [pc, #108]	; (8016e50 <pvPortMalloc+0x188>)
 8016de4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016de6:	4b1a      	ldr	r3, [pc, #104]	; (8016e50 <pvPortMalloc+0x188>)
 8016de8:	681a      	ldr	r2, [r3, #0]
 8016dea:	4b1b      	ldr	r3, [pc, #108]	; (8016e58 <pvPortMalloc+0x190>)
 8016dec:	681b      	ldr	r3, [r3, #0]
 8016dee:	429a      	cmp	r2, r3
 8016df0:	d203      	bcs.n	8016dfa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016df2:	4b17      	ldr	r3, [pc, #92]	; (8016e50 <pvPortMalloc+0x188>)
 8016df4:	681b      	ldr	r3, [r3, #0]
 8016df6:	4a18      	ldr	r2, [pc, #96]	; (8016e58 <pvPortMalloc+0x190>)
 8016df8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dfc:	685a      	ldr	r2, [r3, #4]
 8016dfe:	4b13      	ldr	r3, [pc, #76]	; (8016e4c <pvPortMalloc+0x184>)
 8016e00:	681b      	ldr	r3, [r3, #0]
 8016e02:	431a      	orrs	r2, r3
 8016e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e0a:	2200      	movs	r2, #0
 8016e0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8016e0e:	4b13      	ldr	r3, [pc, #76]	; (8016e5c <pvPortMalloc+0x194>)
 8016e10:	681b      	ldr	r3, [r3, #0]
 8016e12:	3301      	adds	r3, #1
 8016e14:	4a11      	ldr	r2, [pc, #68]	; (8016e5c <pvPortMalloc+0x194>)
 8016e16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016e18:	f7fe ff8c 	bl	8015d34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016e1c:	69fb      	ldr	r3, [r7, #28]
 8016e1e:	f003 0307 	and.w	r3, r3, #7
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	d00a      	beq.n	8016e3c <pvPortMalloc+0x174>
	__asm volatile
 8016e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e2a:	f383 8811 	msr	BASEPRI, r3
 8016e2e:	f3bf 8f6f 	isb	sy
 8016e32:	f3bf 8f4f 	dsb	sy
 8016e36:	60fb      	str	r3, [r7, #12]
}
 8016e38:	bf00      	nop
 8016e3a:	e7fe      	b.n	8016e3a <pvPortMalloc+0x172>
	return pvReturn;
 8016e3c:	69fb      	ldr	r3, [r7, #28]
}
 8016e3e:	4618      	mov	r0, r3
 8016e40:	3728      	adds	r7, #40	; 0x28
 8016e42:	46bd      	mov	sp, r7
 8016e44:	bd80      	pop	{r7, pc}
 8016e46:	bf00      	nop
 8016e48:	20003cd8 	.word	0x20003cd8
 8016e4c:	20003cec 	.word	0x20003cec
 8016e50:	20003cdc 	.word	0x20003cdc
 8016e54:	20003cd0 	.word	0x20003cd0
 8016e58:	20003ce0 	.word	0x20003ce0
 8016e5c:	20003ce4 	.word	0x20003ce4

08016e60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016e60:	b580      	push	{r7, lr}
 8016e62:	b086      	sub	sp, #24
 8016e64:	af00      	add	r7, sp, #0
 8016e66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016e68:	687b      	ldr	r3, [r7, #4]
 8016e6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d04d      	beq.n	8016f0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016e72:	2308      	movs	r3, #8
 8016e74:	425b      	negs	r3, r3
 8016e76:	697a      	ldr	r2, [r7, #20]
 8016e78:	4413      	add	r3, r2
 8016e7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016e7c:	697b      	ldr	r3, [r7, #20]
 8016e7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016e80:	693b      	ldr	r3, [r7, #16]
 8016e82:	685a      	ldr	r2, [r3, #4]
 8016e84:	4b24      	ldr	r3, [pc, #144]	; (8016f18 <vPortFree+0xb8>)
 8016e86:	681b      	ldr	r3, [r3, #0]
 8016e88:	4013      	ands	r3, r2
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	d10a      	bne.n	8016ea4 <vPortFree+0x44>
	__asm volatile
 8016e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e92:	f383 8811 	msr	BASEPRI, r3
 8016e96:	f3bf 8f6f 	isb	sy
 8016e9a:	f3bf 8f4f 	dsb	sy
 8016e9e:	60fb      	str	r3, [r7, #12]
}
 8016ea0:	bf00      	nop
 8016ea2:	e7fe      	b.n	8016ea2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016ea4:	693b      	ldr	r3, [r7, #16]
 8016ea6:	681b      	ldr	r3, [r3, #0]
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d00a      	beq.n	8016ec2 <vPortFree+0x62>
	__asm volatile
 8016eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016eb0:	f383 8811 	msr	BASEPRI, r3
 8016eb4:	f3bf 8f6f 	isb	sy
 8016eb8:	f3bf 8f4f 	dsb	sy
 8016ebc:	60bb      	str	r3, [r7, #8]
}
 8016ebe:	bf00      	nop
 8016ec0:	e7fe      	b.n	8016ec0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016ec2:	693b      	ldr	r3, [r7, #16]
 8016ec4:	685a      	ldr	r2, [r3, #4]
 8016ec6:	4b14      	ldr	r3, [pc, #80]	; (8016f18 <vPortFree+0xb8>)
 8016ec8:	681b      	ldr	r3, [r3, #0]
 8016eca:	4013      	ands	r3, r2
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	d01e      	beq.n	8016f0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016ed0:	693b      	ldr	r3, [r7, #16]
 8016ed2:	681b      	ldr	r3, [r3, #0]
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d11a      	bne.n	8016f0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016ed8:	693b      	ldr	r3, [r7, #16]
 8016eda:	685a      	ldr	r2, [r3, #4]
 8016edc:	4b0e      	ldr	r3, [pc, #56]	; (8016f18 <vPortFree+0xb8>)
 8016ede:	681b      	ldr	r3, [r3, #0]
 8016ee0:	43db      	mvns	r3, r3
 8016ee2:	401a      	ands	r2, r3
 8016ee4:	693b      	ldr	r3, [r7, #16]
 8016ee6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016ee8:	f7fe ff16 	bl	8015d18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016eec:	693b      	ldr	r3, [r7, #16]
 8016eee:	685a      	ldr	r2, [r3, #4]
 8016ef0:	4b0a      	ldr	r3, [pc, #40]	; (8016f1c <vPortFree+0xbc>)
 8016ef2:	681b      	ldr	r3, [r3, #0]
 8016ef4:	4413      	add	r3, r2
 8016ef6:	4a09      	ldr	r2, [pc, #36]	; (8016f1c <vPortFree+0xbc>)
 8016ef8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016efa:	6938      	ldr	r0, [r7, #16]
 8016efc:	f000 f874 	bl	8016fe8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8016f00:	4b07      	ldr	r3, [pc, #28]	; (8016f20 <vPortFree+0xc0>)
 8016f02:	681b      	ldr	r3, [r3, #0]
 8016f04:	3301      	adds	r3, #1
 8016f06:	4a06      	ldr	r2, [pc, #24]	; (8016f20 <vPortFree+0xc0>)
 8016f08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8016f0a:	f7fe ff13 	bl	8015d34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016f0e:	bf00      	nop
 8016f10:	3718      	adds	r7, #24
 8016f12:	46bd      	mov	sp, r7
 8016f14:	bd80      	pop	{r7, pc}
 8016f16:	bf00      	nop
 8016f18:	20003cec 	.word	0x20003cec
 8016f1c:	20003cdc 	.word	0x20003cdc
 8016f20:	20003ce8 	.word	0x20003ce8

08016f24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016f24:	b480      	push	{r7}
 8016f26:	b085      	sub	sp, #20
 8016f28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016f2a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8016f2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016f30:	4b27      	ldr	r3, [pc, #156]	; (8016fd0 <prvHeapInit+0xac>)
 8016f32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016f34:	68fb      	ldr	r3, [r7, #12]
 8016f36:	f003 0307 	and.w	r3, r3, #7
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	d00c      	beq.n	8016f58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016f3e:	68fb      	ldr	r3, [r7, #12]
 8016f40:	3307      	adds	r3, #7
 8016f42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016f44:	68fb      	ldr	r3, [r7, #12]
 8016f46:	f023 0307 	bic.w	r3, r3, #7
 8016f4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016f4c:	68ba      	ldr	r2, [r7, #8]
 8016f4e:	68fb      	ldr	r3, [r7, #12]
 8016f50:	1ad3      	subs	r3, r2, r3
 8016f52:	4a1f      	ldr	r2, [pc, #124]	; (8016fd0 <prvHeapInit+0xac>)
 8016f54:	4413      	add	r3, r2
 8016f56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016f58:	68fb      	ldr	r3, [r7, #12]
 8016f5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016f5c:	4a1d      	ldr	r2, [pc, #116]	; (8016fd4 <prvHeapInit+0xb0>)
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016f62:	4b1c      	ldr	r3, [pc, #112]	; (8016fd4 <prvHeapInit+0xb0>)
 8016f64:	2200      	movs	r2, #0
 8016f66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	68ba      	ldr	r2, [r7, #8]
 8016f6c:	4413      	add	r3, r2
 8016f6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016f70:	2208      	movs	r2, #8
 8016f72:	68fb      	ldr	r3, [r7, #12]
 8016f74:	1a9b      	subs	r3, r3, r2
 8016f76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016f78:	68fb      	ldr	r3, [r7, #12]
 8016f7a:	f023 0307 	bic.w	r3, r3, #7
 8016f7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016f80:	68fb      	ldr	r3, [r7, #12]
 8016f82:	4a15      	ldr	r2, [pc, #84]	; (8016fd8 <prvHeapInit+0xb4>)
 8016f84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016f86:	4b14      	ldr	r3, [pc, #80]	; (8016fd8 <prvHeapInit+0xb4>)
 8016f88:	681b      	ldr	r3, [r3, #0]
 8016f8a:	2200      	movs	r2, #0
 8016f8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8016f8e:	4b12      	ldr	r3, [pc, #72]	; (8016fd8 <prvHeapInit+0xb4>)
 8016f90:	681b      	ldr	r3, [r3, #0]
 8016f92:	2200      	movs	r2, #0
 8016f94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016f9a:	683b      	ldr	r3, [r7, #0]
 8016f9c:	68fa      	ldr	r2, [r7, #12]
 8016f9e:	1ad2      	subs	r2, r2, r3
 8016fa0:	683b      	ldr	r3, [r7, #0]
 8016fa2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016fa4:	4b0c      	ldr	r3, [pc, #48]	; (8016fd8 <prvHeapInit+0xb4>)
 8016fa6:	681a      	ldr	r2, [r3, #0]
 8016fa8:	683b      	ldr	r3, [r7, #0]
 8016faa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016fac:	683b      	ldr	r3, [r7, #0]
 8016fae:	685b      	ldr	r3, [r3, #4]
 8016fb0:	4a0a      	ldr	r2, [pc, #40]	; (8016fdc <prvHeapInit+0xb8>)
 8016fb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016fb4:	683b      	ldr	r3, [r7, #0]
 8016fb6:	685b      	ldr	r3, [r3, #4]
 8016fb8:	4a09      	ldr	r2, [pc, #36]	; (8016fe0 <prvHeapInit+0xbc>)
 8016fba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016fbc:	4b09      	ldr	r3, [pc, #36]	; (8016fe4 <prvHeapInit+0xc0>)
 8016fbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016fc2:	601a      	str	r2, [r3, #0]
}
 8016fc4:	bf00      	nop
 8016fc6:	3714      	adds	r7, #20
 8016fc8:	46bd      	mov	sp, r7
 8016fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fce:	4770      	bx	lr
 8016fd0:	20000cd0 	.word	0x20000cd0
 8016fd4:	20003cd0 	.word	0x20003cd0
 8016fd8:	20003cd8 	.word	0x20003cd8
 8016fdc:	20003ce0 	.word	0x20003ce0
 8016fe0:	20003cdc 	.word	0x20003cdc
 8016fe4:	20003cec 	.word	0x20003cec

08016fe8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016fe8:	b480      	push	{r7}
 8016fea:	b085      	sub	sp, #20
 8016fec:	af00      	add	r7, sp, #0
 8016fee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016ff0:	4b28      	ldr	r3, [pc, #160]	; (8017094 <prvInsertBlockIntoFreeList+0xac>)
 8016ff2:	60fb      	str	r3, [r7, #12]
 8016ff4:	e002      	b.n	8016ffc <prvInsertBlockIntoFreeList+0x14>
 8016ff6:	68fb      	ldr	r3, [r7, #12]
 8016ff8:	681b      	ldr	r3, [r3, #0]
 8016ffa:	60fb      	str	r3, [r7, #12]
 8016ffc:	68fb      	ldr	r3, [r7, #12]
 8016ffe:	681b      	ldr	r3, [r3, #0]
 8017000:	687a      	ldr	r2, [r7, #4]
 8017002:	429a      	cmp	r2, r3
 8017004:	d8f7      	bhi.n	8016ff6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8017006:	68fb      	ldr	r3, [r7, #12]
 8017008:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801700a:	68fb      	ldr	r3, [r7, #12]
 801700c:	685b      	ldr	r3, [r3, #4]
 801700e:	68ba      	ldr	r2, [r7, #8]
 8017010:	4413      	add	r3, r2
 8017012:	687a      	ldr	r2, [r7, #4]
 8017014:	429a      	cmp	r2, r3
 8017016:	d108      	bne.n	801702a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8017018:	68fb      	ldr	r3, [r7, #12]
 801701a:	685a      	ldr	r2, [r3, #4]
 801701c:	687b      	ldr	r3, [r7, #4]
 801701e:	685b      	ldr	r3, [r3, #4]
 8017020:	441a      	add	r2, r3
 8017022:	68fb      	ldr	r3, [r7, #12]
 8017024:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8017026:	68fb      	ldr	r3, [r7, #12]
 8017028:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801702e:	687b      	ldr	r3, [r7, #4]
 8017030:	685b      	ldr	r3, [r3, #4]
 8017032:	68ba      	ldr	r2, [r7, #8]
 8017034:	441a      	add	r2, r3
 8017036:	68fb      	ldr	r3, [r7, #12]
 8017038:	681b      	ldr	r3, [r3, #0]
 801703a:	429a      	cmp	r2, r3
 801703c:	d118      	bne.n	8017070 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801703e:	68fb      	ldr	r3, [r7, #12]
 8017040:	681a      	ldr	r2, [r3, #0]
 8017042:	4b15      	ldr	r3, [pc, #84]	; (8017098 <prvInsertBlockIntoFreeList+0xb0>)
 8017044:	681b      	ldr	r3, [r3, #0]
 8017046:	429a      	cmp	r2, r3
 8017048:	d00d      	beq.n	8017066 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	685a      	ldr	r2, [r3, #4]
 801704e:	68fb      	ldr	r3, [r7, #12]
 8017050:	681b      	ldr	r3, [r3, #0]
 8017052:	685b      	ldr	r3, [r3, #4]
 8017054:	441a      	add	r2, r3
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801705a:	68fb      	ldr	r3, [r7, #12]
 801705c:	681b      	ldr	r3, [r3, #0]
 801705e:	681a      	ldr	r2, [r3, #0]
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	601a      	str	r2, [r3, #0]
 8017064:	e008      	b.n	8017078 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8017066:	4b0c      	ldr	r3, [pc, #48]	; (8017098 <prvInsertBlockIntoFreeList+0xb0>)
 8017068:	681a      	ldr	r2, [r3, #0]
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	601a      	str	r2, [r3, #0]
 801706e:	e003      	b.n	8017078 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8017070:	68fb      	ldr	r3, [r7, #12]
 8017072:	681a      	ldr	r2, [r3, #0]
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8017078:	68fa      	ldr	r2, [r7, #12]
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	429a      	cmp	r2, r3
 801707e:	d002      	beq.n	8017086 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8017080:	68fb      	ldr	r3, [r7, #12]
 8017082:	687a      	ldr	r2, [r7, #4]
 8017084:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017086:	bf00      	nop
 8017088:	3714      	adds	r7, #20
 801708a:	46bd      	mov	sp, r7
 801708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017090:	4770      	bx	lr
 8017092:	bf00      	nop
 8017094:	20003cd0 	.word	0x20003cd0
 8017098:	20003cd8 	.word	0x20003cd8

0801709c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 801709c:	b580      	push	{r7, lr}
 801709e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80170a0:	2200      	movs	r2, #0
 80170a2:	4912      	ldr	r1, [pc, #72]	; (80170ec <MX_USB_Device_Init+0x50>)
 80170a4:	4812      	ldr	r0, [pc, #72]	; (80170f0 <MX_USB_Device_Init+0x54>)
 80170a6:	f7fc fdc3 	bl	8013c30 <USBD_Init>
 80170aa:	4603      	mov	r3, r0
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	d001      	beq.n	80170b4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80170b0:	f7f0 f8a4 	bl	80071fc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80170b4:	490f      	ldr	r1, [pc, #60]	; (80170f4 <MX_USB_Device_Init+0x58>)
 80170b6:	480e      	ldr	r0, [pc, #56]	; (80170f0 <MX_USB_Device_Init+0x54>)
 80170b8:	f7fc fdea 	bl	8013c90 <USBD_RegisterClass>
 80170bc:	4603      	mov	r3, r0
 80170be:	2b00      	cmp	r3, #0
 80170c0:	d001      	beq.n	80170c6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80170c2:	f7f0 f89b 	bl	80071fc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80170c6:	490c      	ldr	r1, [pc, #48]	; (80170f8 <MX_USB_Device_Init+0x5c>)
 80170c8:	4809      	ldr	r0, [pc, #36]	; (80170f0 <MX_USB_Device_Init+0x54>)
 80170ca:	f7fc fd3b 	bl	8013b44 <USBD_CDC_RegisterInterface>
 80170ce:	4603      	mov	r3, r0
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	d001      	beq.n	80170d8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80170d4:	f7f0 f892 	bl	80071fc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80170d8:	4805      	ldr	r0, [pc, #20]	; (80170f0 <MX_USB_Device_Init+0x54>)
 80170da:	f7fc fe00 	bl	8013cde <USBD_Start>
 80170de:	4603      	mov	r3, r0
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	d001      	beq.n	80170e8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80170e4:	f7f0 f88a 	bl	80071fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80170e8:	bf00      	nop
 80170ea:	bd80      	pop	{r7, pc}
 80170ec:	20000138 	.word	0x20000138
 80170f0:	20003cf0 	.word	0x20003cf0
 80170f4:	2000001c 	.word	0x2000001c
 80170f8:	20000124 	.word	0x20000124

080170fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80170fc:	b580      	push	{r7, lr}
 80170fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8017100:	2200      	movs	r2, #0
 8017102:	4905      	ldr	r1, [pc, #20]	; (8017118 <CDC_Init_FS+0x1c>)
 8017104:	4805      	ldr	r0, [pc, #20]	; (801711c <CDC_Init_FS+0x20>)
 8017106:	f7fc fd32 	bl	8013b6e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801710a:	4905      	ldr	r1, [pc, #20]	; (8017120 <CDC_Init_FS+0x24>)
 801710c:	4803      	ldr	r0, [pc, #12]	; (801711c <CDC_Init_FS+0x20>)
 801710e:	f7fc fd4c 	bl	8013baa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8017112:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8017114:	4618      	mov	r0, r3
 8017116:	bd80      	pop	{r7, pc}
 8017118:	200047c0 	.word	0x200047c0
 801711c:	20003cf0 	.word	0x20003cf0
 8017120:	20003fc0 	.word	0x20003fc0

08017124 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8017124:	b480      	push	{r7}
 8017126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8017128:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801712a:	4618      	mov	r0, r3
 801712c:	46bd      	mov	sp, r7
 801712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017132:	4770      	bx	lr

08017134 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8017134:	b480      	push	{r7}
 8017136:	b083      	sub	sp, #12
 8017138:	af00      	add	r7, sp, #0
 801713a:	4603      	mov	r3, r0
 801713c:	6039      	str	r1, [r7, #0]
 801713e:	71fb      	strb	r3, [r7, #7]
 8017140:	4613      	mov	r3, r2
 8017142:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8017144:	79fb      	ldrb	r3, [r7, #7]
 8017146:	2b23      	cmp	r3, #35	; 0x23
 8017148:	d84a      	bhi.n	80171e0 <CDC_Control_FS+0xac>
 801714a:	a201      	add	r2, pc, #4	; (adr r2, 8017150 <CDC_Control_FS+0x1c>)
 801714c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017150:	080171e1 	.word	0x080171e1
 8017154:	080171e1 	.word	0x080171e1
 8017158:	080171e1 	.word	0x080171e1
 801715c:	080171e1 	.word	0x080171e1
 8017160:	080171e1 	.word	0x080171e1
 8017164:	080171e1 	.word	0x080171e1
 8017168:	080171e1 	.word	0x080171e1
 801716c:	080171e1 	.word	0x080171e1
 8017170:	080171e1 	.word	0x080171e1
 8017174:	080171e1 	.word	0x080171e1
 8017178:	080171e1 	.word	0x080171e1
 801717c:	080171e1 	.word	0x080171e1
 8017180:	080171e1 	.word	0x080171e1
 8017184:	080171e1 	.word	0x080171e1
 8017188:	080171e1 	.word	0x080171e1
 801718c:	080171e1 	.word	0x080171e1
 8017190:	080171e1 	.word	0x080171e1
 8017194:	080171e1 	.word	0x080171e1
 8017198:	080171e1 	.word	0x080171e1
 801719c:	080171e1 	.word	0x080171e1
 80171a0:	080171e1 	.word	0x080171e1
 80171a4:	080171e1 	.word	0x080171e1
 80171a8:	080171e1 	.word	0x080171e1
 80171ac:	080171e1 	.word	0x080171e1
 80171b0:	080171e1 	.word	0x080171e1
 80171b4:	080171e1 	.word	0x080171e1
 80171b8:	080171e1 	.word	0x080171e1
 80171bc:	080171e1 	.word	0x080171e1
 80171c0:	080171e1 	.word	0x080171e1
 80171c4:	080171e1 	.word	0x080171e1
 80171c8:	080171e1 	.word	0x080171e1
 80171cc:	080171e1 	.word	0x080171e1
 80171d0:	080171e1 	.word	0x080171e1
 80171d4:	080171e1 	.word	0x080171e1
 80171d8:	080171e1 	.word	0x080171e1
 80171dc:	080171e1 	.word	0x080171e1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80171e0:	bf00      	nop
  }

  return (USBD_OK);
 80171e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80171e4:	4618      	mov	r0, r3
 80171e6:	370c      	adds	r7, #12
 80171e8:	46bd      	mov	sp, r7
 80171ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171ee:	4770      	bx	lr

080171f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80171f0:	b580      	push	{r7, lr}
 80171f2:	b082      	sub	sp, #8
 80171f4:	af00      	add	r7, sp, #0
 80171f6:	6078      	str	r0, [r7, #4]
 80171f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80171fa:	6879      	ldr	r1, [r7, #4]
 80171fc:	4805      	ldr	r0, [pc, #20]	; (8017214 <CDC_Receive_FS+0x24>)
 80171fe:	f7fc fcd4 	bl	8013baa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8017202:	4804      	ldr	r0, [pc, #16]	; (8017214 <CDC_Receive_FS+0x24>)
 8017204:	f7fc fcea 	bl	8013bdc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8017208:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801720a:	4618      	mov	r0, r3
 801720c:	3708      	adds	r7, #8
 801720e:	46bd      	mov	sp, r7
 8017210:	bd80      	pop	{r7, pc}
 8017212:	bf00      	nop
 8017214:	20003cf0 	.word	0x20003cf0

08017218 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8017218:	b480      	push	{r7}
 801721a:	b087      	sub	sp, #28
 801721c:	af00      	add	r7, sp, #0
 801721e:	60f8      	str	r0, [r7, #12]
 8017220:	60b9      	str	r1, [r7, #8]
 8017222:	4613      	mov	r3, r2
 8017224:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8017226:	2300      	movs	r3, #0
 8017228:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801722a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801722e:	4618      	mov	r0, r3
 8017230:	371c      	adds	r7, #28
 8017232:	46bd      	mov	sp, r7
 8017234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017238:	4770      	bx	lr
	...

0801723c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801723c:	b480      	push	{r7}
 801723e:	b083      	sub	sp, #12
 8017240:	af00      	add	r7, sp, #0
 8017242:	4603      	mov	r3, r0
 8017244:	6039      	str	r1, [r7, #0]
 8017246:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8017248:	683b      	ldr	r3, [r7, #0]
 801724a:	2212      	movs	r2, #18
 801724c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 801724e:	4b03      	ldr	r3, [pc, #12]	; (801725c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8017250:	4618      	mov	r0, r3
 8017252:	370c      	adds	r7, #12
 8017254:	46bd      	mov	sp, r7
 8017256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801725a:	4770      	bx	lr
 801725c:	20000158 	.word	0x20000158

08017260 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017260:	b480      	push	{r7}
 8017262:	b083      	sub	sp, #12
 8017264:	af00      	add	r7, sp, #0
 8017266:	4603      	mov	r3, r0
 8017268:	6039      	str	r1, [r7, #0]
 801726a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801726c:	683b      	ldr	r3, [r7, #0]
 801726e:	2204      	movs	r2, #4
 8017270:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017272:	4b03      	ldr	r3, [pc, #12]	; (8017280 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8017274:	4618      	mov	r0, r3
 8017276:	370c      	adds	r7, #12
 8017278:	46bd      	mov	sp, r7
 801727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801727e:	4770      	bx	lr
 8017280:	2000016c 	.word	0x2000016c

08017284 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017284:	b580      	push	{r7, lr}
 8017286:	b082      	sub	sp, #8
 8017288:	af00      	add	r7, sp, #0
 801728a:	4603      	mov	r3, r0
 801728c:	6039      	str	r1, [r7, #0]
 801728e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017290:	79fb      	ldrb	r3, [r7, #7]
 8017292:	2b00      	cmp	r3, #0
 8017294:	d105      	bne.n	80172a2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8017296:	683a      	ldr	r2, [r7, #0]
 8017298:	4907      	ldr	r1, [pc, #28]	; (80172b8 <USBD_CDC_ProductStrDescriptor+0x34>)
 801729a:	4808      	ldr	r0, [pc, #32]	; (80172bc <USBD_CDC_ProductStrDescriptor+0x38>)
 801729c:	f7fd fd07 	bl	8014cae <USBD_GetString>
 80172a0:	e004      	b.n	80172ac <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80172a2:	683a      	ldr	r2, [r7, #0]
 80172a4:	4904      	ldr	r1, [pc, #16]	; (80172b8 <USBD_CDC_ProductStrDescriptor+0x34>)
 80172a6:	4805      	ldr	r0, [pc, #20]	; (80172bc <USBD_CDC_ProductStrDescriptor+0x38>)
 80172a8:	f7fd fd01 	bl	8014cae <USBD_GetString>
  }
  return USBD_StrDesc;
 80172ac:	4b02      	ldr	r3, [pc, #8]	; (80172b8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80172ae:	4618      	mov	r0, r3
 80172b0:	3708      	adds	r7, #8
 80172b2:	46bd      	mov	sp, r7
 80172b4:	bd80      	pop	{r7, pc}
 80172b6:	bf00      	nop
 80172b8:	20004fc0 	.word	0x20004fc0
 80172bc:	08018c68 	.word	0x08018c68

080172c0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80172c0:	b580      	push	{r7, lr}
 80172c2:	b082      	sub	sp, #8
 80172c4:	af00      	add	r7, sp, #0
 80172c6:	4603      	mov	r3, r0
 80172c8:	6039      	str	r1, [r7, #0]
 80172ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80172cc:	683a      	ldr	r2, [r7, #0]
 80172ce:	4904      	ldr	r1, [pc, #16]	; (80172e0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80172d0:	4804      	ldr	r0, [pc, #16]	; (80172e4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80172d2:	f7fd fcec 	bl	8014cae <USBD_GetString>
  return USBD_StrDesc;
 80172d6:	4b02      	ldr	r3, [pc, #8]	; (80172e0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80172d8:	4618      	mov	r0, r3
 80172da:	3708      	adds	r7, #8
 80172dc:	46bd      	mov	sp, r7
 80172de:	bd80      	pop	{r7, pc}
 80172e0:	20004fc0 	.word	0x20004fc0
 80172e4:	08018c80 	.word	0x08018c80

080172e8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80172e8:	b580      	push	{r7, lr}
 80172ea:	b082      	sub	sp, #8
 80172ec:	af00      	add	r7, sp, #0
 80172ee:	4603      	mov	r3, r0
 80172f0:	6039      	str	r1, [r7, #0]
 80172f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80172f4:	683b      	ldr	r3, [r7, #0]
 80172f6:	221a      	movs	r2, #26
 80172f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80172fa:	f000 f843 	bl	8017384 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80172fe:	4b02      	ldr	r3, [pc, #8]	; (8017308 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8017300:	4618      	mov	r0, r3
 8017302:	3708      	adds	r7, #8
 8017304:	46bd      	mov	sp, r7
 8017306:	bd80      	pop	{r7, pc}
 8017308:	20000170 	.word	0x20000170

0801730c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801730c:	b580      	push	{r7, lr}
 801730e:	b082      	sub	sp, #8
 8017310:	af00      	add	r7, sp, #0
 8017312:	4603      	mov	r3, r0
 8017314:	6039      	str	r1, [r7, #0]
 8017316:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8017318:	79fb      	ldrb	r3, [r7, #7]
 801731a:	2b00      	cmp	r3, #0
 801731c:	d105      	bne.n	801732a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801731e:	683a      	ldr	r2, [r7, #0]
 8017320:	4907      	ldr	r1, [pc, #28]	; (8017340 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8017322:	4808      	ldr	r0, [pc, #32]	; (8017344 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8017324:	f7fd fcc3 	bl	8014cae <USBD_GetString>
 8017328:	e004      	b.n	8017334 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801732a:	683a      	ldr	r2, [r7, #0]
 801732c:	4904      	ldr	r1, [pc, #16]	; (8017340 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801732e:	4805      	ldr	r0, [pc, #20]	; (8017344 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8017330:	f7fd fcbd 	bl	8014cae <USBD_GetString>
  }
  return USBD_StrDesc;
 8017334:	4b02      	ldr	r3, [pc, #8]	; (8017340 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8017336:	4618      	mov	r0, r3
 8017338:	3708      	adds	r7, #8
 801733a:	46bd      	mov	sp, r7
 801733c:	bd80      	pop	{r7, pc}
 801733e:	bf00      	nop
 8017340:	20004fc0 	.word	0x20004fc0
 8017344:	08018c94 	.word	0x08018c94

08017348 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017348:	b580      	push	{r7, lr}
 801734a:	b082      	sub	sp, #8
 801734c:	af00      	add	r7, sp, #0
 801734e:	4603      	mov	r3, r0
 8017350:	6039      	str	r1, [r7, #0]
 8017352:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017354:	79fb      	ldrb	r3, [r7, #7]
 8017356:	2b00      	cmp	r3, #0
 8017358:	d105      	bne.n	8017366 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801735a:	683a      	ldr	r2, [r7, #0]
 801735c:	4907      	ldr	r1, [pc, #28]	; (801737c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801735e:	4808      	ldr	r0, [pc, #32]	; (8017380 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8017360:	f7fd fca5 	bl	8014cae <USBD_GetString>
 8017364:	e004      	b.n	8017370 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8017366:	683a      	ldr	r2, [r7, #0]
 8017368:	4904      	ldr	r1, [pc, #16]	; (801737c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801736a:	4805      	ldr	r0, [pc, #20]	; (8017380 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 801736c:	f7fd fc9f 	bl	8014cae <USBD_GetString>
  }
  return USBD_StrDesc;
 8017370:	4b02      	ldr	r3, [pc, #8]	; (801737c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8017372:	4618      	mov	r0, r3
 8017374:	3708      	adds	r7, #8
 8017376:	46bd      	mov	sp, r7
 8017378:	bd80      	pop	{r7, pc}
 801737a:	bf00      	nop
 801737c:	20004fc0 	.word	0x20004fc0
 8017380:	08018ca0 	.word	0x08018ca0

08017384 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017384:	b580      	push	{r7, lr}
 8017386:	b084      	sub	sp, #16
 8017388:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801738a:	4b0f      	ldr	r3, [pc, #60]	; (80173c8 <Get_SerialNum+0x44>)
 801738c:	681b      	ldr	r3, [r3, #0]
 801738e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017390:	4b0e      	ldr	r3, [pc, #56]	; (80173cc <Get_SerialNum+0x48>)
 8017392:	681b      	ldr	r3, [r3, #0]
 8017394:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8017396:	4b0e      	ldr	r3, [pc, #56]	; (80173d0 <Get_SerialNum+0x4c>)
 8017398:	681b      	ldr	r3, [r3, #0]
 801739a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801739c:	68fa      	ldr	r2, [r7, #12]
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	4413      	add	r3, r2
 80173a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80173a4:	68fb      	ldr	r3, [r7, #12]
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	d009      	beq.n	80173be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80173aa:	2208      	movs	r2, #8
 80173ac:	4909      	ldr	r1, [pc, #36]	; (80173d4 <Get_SerialNum+0x50>)
 80173ae:	68f8      	ldr	r0, [r7, #12]
 80173b0:	f000 f814 	bl	80173dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80173b4:	2204      	movs	r2, #4
 80173b6:	4908      	ldr	r1, [pc, #32]	; (80173d8 <Get_SerialNum+0x54>)
 80173b8:	68b8      	ldr	r0, [r7, #8]
 80173ba:	f000 f80f 	bl	80173dc <IntToUnicode>
  }
}
 80173be:	bf00      	nop
 80173c0:	3710      	adds	r7, #16
 80173c2:	46bd      	mov	sp, r7
 80173c4:	bd80      	pop	{r7, pc}
 80173c6:	bf00      	nop
 80173c8:	1fff7590 	.word	0x1fff7590
 80173cc:	1fff7594 	.word	0x1fff7594
 80173d0:	1fff7598 	.word	0x1fff7598
 80173d4:	20000172 	.word	0x20000172
 80173d8:	20000182 	.word	0x20000182

080173dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80173dc:	b480      	push	{r7}
 80173de:	b087      	sub	sp, #28
 80173e0:	af00      	add	r7, sp, #0
 80173e2:	60f8      	str	r0, [r7, #12]
 80173e4:	60b9      	str	r1, [r7, #8]
 80173e6:	4613      	mov	r3, r2
 80173e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80173ea:	2300      	movs	r3, #0
 80173ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80173ee:	2300      	movs	r3, #0
 80173f0:	75fb      	strb	r3, [r7, #23]
 80173f2:	e027      	b.n	8017444 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80173f4:	68fb      	ldr	r3, [r7, #12]
 80173f6:	0f1b      	lsrs	r3, r3, #28
 80173f8:	2b09      	cmp	r3, #9
 80173fa:	d80b      	bhi.n	8017414 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80173fc:	68fb      	ldr	r3, [r7, #12]
 80173fe:	0f1b      	lsrs	r3, r3, #28
 8017400:	b2da      	uxtb	r2, r3
 8017402:	7dfb      	ldrb	r3, [r7, #23]
 8017404:	005b      	lsls	r3, r3, #1
 8017406:	4619      	mov	r1, r3
 8017408:	68bb      	ldr	r3, [r7, #8]
 801740a:	440b      	add	r3, r1
 801740c:	3230      	adds	r2, #48	; 0x30
 801740e:	b2d2      	uxtb	r2, r2
 8017410:	701a      	strb	r2, [r3, #0]
 8017412:	e00a      	b.n	801742a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017414:	68fb      	ldr	r3, [r7, #12]
 8017416:	0f1b      	lsrs	r3, r3, #28
 8017418:	b2da      	uxtb	r2, r3
 801741a:	7dfb      	ldrb	r3, [r7, #23]
 801741c:	005b      	lsls	r3, r3, #1
 801741e:	4619      	mov	r1, r3
 8017420:	68bb      	ldr	r3, [r7, #8]
 8017422:	440b      	add	r3, r1
 8017424:	3237      	adds	r2, #55	; 0x37
 8017426:	b2d2      	uxtb	r2, r2
 8017428:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801742a:	68fb      	ldr	r3, [r7, #12]
 801742c:	011b      	lsls	r3, r3, #4
 801742e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017430:	7dfb      	ldrb	r3, [r7, #23]
 8017432:	005b      	lsls	r3, r3, #1
 8017434:	3301      	adds	r3, #1
 8017436:	68ba      	ldr	r2, [r7, #8]
 8017438:	4413      	add	r3, r2
 801743a:	2200      	movs	r2, #0
 801743c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801743e:	7dfb      	ldrb	r3, [r7, #23]
 8017440:	3301      	adds	r3, #1
 8017442:	75fb      	strb	r3, [r7, #23]
 8017444:	7dfa      	ldrb	r2, [r7, #23]
 8017446:	79fb      	ldrb	r3, [r7, #7]
 8017448:	429a      	cmp	r2, r3
 801744a:	d3d3      	bcc.n	80173f4 <IntToUnicode+0x18>
  }
}
 801744c:	bf00      	nop
 801744e:	bf00      	nop
 8017450:	371c      	adds	r7, #28
 8017452:	46bd      	mov	sp, r7
 8017454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017458:	4770      	bx	lr
	...

0801745c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801745c:	b580      	push	{r7, lr}
 801745e:	b098      	sub	sp, #96	; 0x60
 8017460:	af00      	add	r7, sp, #0
 8017462:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8017464:	f107 030c 	add.w	r3, r7, #12
 8017468:	2254      	movs	r2, #84	; 0x54
 801746a:	2100      	movs	r1, #0
 801746c:	4618      	mov	r0, r3
 801746e:	f000 fb53 	bl	8017b18 <memset>
  if(pcdHandle->Instance==USB)
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	681b      	ldr	r3, [r3, #0]
 8017476:	4a15      	ldr	r2, [pc, #84]	; (80174cc <HAL_PCD_MspInit+0x70>)
 8017478:	4293      	cmp	r3, r2
 801747a:	d122      	bne.n	80174c2 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801747c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8017480:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8017482:	2300      	movs	r3, #0
 8017484:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8017486:	f107 030c 	add.w	r3, r7, #12
 801748a:	4618      	mov	r0, r3
 801748c:	f7f5 ffe8 	bl	800d460 <HAL_RCCEx_PeriphCLKConfig>
 8017490:	4603      	mov	r3, r0
 8017492:	2b00      	cmp	r3, #0
 8017494:	d001      	beq.n	801749a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8017496:	f7ef feb1 	bl	80071fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801749a:	4b0d      	ldr	r3, [pc, #52]	; (80174d0 <HAL_PCD_MspInit+0x74>)
 801749c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801749e:	4a0c      	ldr	r2, [pc, #48]	; (80174d0 <HAL_PCD_MspInit+0x74>)
 80174a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80174a4:	6593      	str	r3, [r2, #88]	; 0x58
 80174a6:	4b0a      	ldr	r3, [pc, #40]	; (80174d0 <HAL_PCD_MspInit+0x74>)
 80174a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80174aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80174ae:	60bb      	str	r3, [r7, #8]
 80174b0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 80174b2:	2200      	movs	r2, #0
 80174b4:	2105      	movs	r1, #5
 80174b6:	2014      	movs	r0, #20
 80174b8:	f7f2 f96a 	bl	8009790 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80174bc:	2014      	movs	r0, #20
 80174be:	f7f2 f981 	bl	80097c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80174c2:	bf00      	nop
 80174c4:	3760      	adds	r7, #96	; 0x60
 80174c6:	46bd      	mov	sp, r7
 80174c8:	bd80      	pop	{r7, pc}
 80174ca:	bf00      	nop
 80174cc:	40005c00 	.word	0x40005c00
 80174d0:	40021000 	.word	0x40021000

080174d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80174d4:	b580      	push	{r7, lr}
 80174d6:	b082      	sub	sp, #8
 80174d8:	af00      	add	r7, sp, #0
 80174da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80174e8:	4619      	mov	r1, r3
 80174ea:	4610      	mov	r0, r2
 80174ec:	f7fc fc42 	bl	8013d74 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80174f0:	bf00      	nop
 80174f2:	3708      	adds	r7, #8
 80174f4:	46bd      	mov	sp, r7
 80174f6:	bd80      	pop	{r7, pc}

080174f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80174f8:	b580      	push	{r7, lr}
 80174fa:	b082      	sub	sp, #8
 80174fc:	af00      	add	r7, sp, #0
 80174fe:	6078      	str	r0, [r7, #4]
 8017500:	460b      	mov	r3, r1
 8017502:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 801750a:	78fa      	ldrb	r2, [r7, #3]
 801750c:	6879      	ldr	r1, [r7, #4]
 801750e:	4613      	mov	r3, r2
 8017510:	009b      	lsls	r3, r3, #2
 8017512:	4413      	add	r3, r2
 8017514:	00db      	lsls	r3, r3, #3
 8017516:	440b      	add	r3, r1
 8017518:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 801751c:	681a      	ldr	r2, [r3, #0]
 801751e:	78fb      	ldrb	r3, [r7, #3]
 8017520:	4619      	mov	r1, r3
 8017522:	f7fc fc7c 	bl	8013e1e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8017526:	bf00      	nop
 8017528:	3708      	adds	r7, #8
 801752a:	46bd      	mov	sp, r7
 801752c:	bd80      	pop	{r7, pc}

0801752e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801752e:	b580      	push	{r7, lr}
 8017530:	b082      	sub	sp, #8
 8017532:	af00      	add	r7, sp, #0
 8017534:	6078      	str	r0, [r7, #4]
 8017536:	460b      	mov	r3, r1
 8017538:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8017540:	78fa      	ldrb	r2, [r7, #3]
 8017542:	6879      	ldr	r1, [r7, #4]
 8017544:	4613      	mov	r3, r2
 8017546:	009b      	lsls	r3, r3, #2
 8017548:	4413      	add	r3, r2
 801754a:	00db      	lsls	r3, r3, #3
 801754c:	440b      	add	r3, r1
 801754e:	333c      	adds	r3, #60	; 0x3c
 8017550:	681a      	ldr	r2, [r3, #0]
 8017552:	78fb      	ldrb	r3, [r7, #3]
 8017554:	4619      	mov	r1, r3
 8017556:	f7fc fcc5 	bl	8013ee4 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 801755a:	bf00      	nop
 801755c:	3708      	adds	r7, #8
 801755e:	46bd      	mov	sp, r7
 8017560:	bd80      	pop	{r7, pc}

08017562 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017562:	b580      	push	{r7, lr}
 8017564:	b082      	sub	sp, #8
 8017566:	af00      	add	r7, sp, #0
 8017568:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801756a:	687b      	ldr	r3, [r7, #4]
 801756c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8017570:	4618      	mov	r0, r3
 8017572:	f7fc fdd9 	bl	8014128 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8017576:	bf00      	nop
 8017578:	3708      	adds	r7, #8
 801757a:	46bd      	mov	sp, r7
 801757c:	bd80      	pop	{r7, pc}

0801757e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801757e:	b580      	push	{r7, lr}
 8017580:	b084      	sub	sp, #16
 8017582:	af00      	add	r7, sp, #0
 8017584:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8017586:	2301      	movs	r3, #1
 8017588:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	689b      	ldr	r3, [r3, #8]
 801758e:	2b02      	cmp	r3, #2
 8017590:	d001      	beq.n	8017596 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8017592:	f7ef fe33 	bl	80071fc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801759c:	7bfa      	ldrb	r2, [r7, #15]
 801759e:	4611      	mov	r1, r2
 80175a0:	4618      	mov	r0, r3
 80175a2:	f7fc fd83 	bl	80140ac <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80175ac:	4618      	mov	r0, r3
 80175ae:	f7fc fd2f 	bl	8014010 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80175b2:	bf00      	nop
 80175b4:	3710      	adds	r7, #16
 80175b6:	46bd      	mov	sp, r7
 80175b8:	bd80      	pop	{r7, pc}
	...

080175bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80175bc:	b580      	push	{r7, lr}
 80175be:	b082      	sub	sp, #8
 80175c0:	af00      	add	r7, sp, #0
 80175c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80175ca:	4618      	mov	r0, r3
 80175cc:	f7fc fd7e 	bl	80140cc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	699b      	ldr	r3, [r3, #24]
 80175d4:	2b00      	cmp	r3, #0
 80175d6:	d005      	beq.n	80175e4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80175d8:	4b04      	ldr	r3, [pc, #16]	; (80175ec <HAL_PCD_SuspendCallback+0x30>)
 80175da:	691b      	ldr	r3, [r3, #16]
 80175dc:	4a03      	ldr	r2, [pc, #12]	; (80175ec <HAL_PCD_SuspendCallback+0x30>)
 80175de:	f043 0306 	orr.w	r3, r3, #6
 80175e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80175e4:	bf00      	nop
 80175e6:	3708      	adds	r7, #8
 80175e8:	46bd      	mov	sp, r7
 80175ea:	bd80      	pop	{r7, pc}
 80175ec:	e000ed00 	.word	0xe000ed00

080175f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80175f0:	b580      	push	{r7, lr}
 80175f2:	b082      	sub	sp, #8
 80175f4:	af00      	add	r7, sp, #0
 80175f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	699b      	ldr	r3, [r3, #24]
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	d007      	beq.n	8017610 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017600:	4b08      	ldr	r3, [pc, #32]	; (8017624 <HAL_PCD_ResumeCallback+0x34>)
 8017602:	691b      	ldr	r3, [r3, #16]
 8017604:	4a07      	ldr	r2, [pc, #28]	; (8017624 <HAL_PCD_ResumeCallback+0x34>)
 8017606:	f023 0306 	bic.w	r3, r3, #6
 801760a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 801760c:	f000 f9fa 	bl	8017a04 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8017616:	4618      	mov	r0, r3
 8017618:	f7fc fd6e 	bl	80140f8 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 801761c:	bf00      	nop
 801761e:	3708      	adds	r7, #8
 8017620:	46bd      	mov	sp, r7
 8017622:	bd80      	pop	{r7, pc}
 8017624:	e000ed00 	.word	0xe000ed00

08017628 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017628:	b580      	push	{r7, lr}
 801762a:	b082      	sub	sp, #8
 801762c:	af00      	add	r7, sp, #0
 801762e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8017630:	4a2b      	ldr	r2, [pc, #172]	; (80176e0 <USBD_LL_Init+0xb8>)
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	4a29      	ldr	r2, [pc, #164]	; (80176e0 <USBD_LL_Init+0xb8>)
 801763c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8017640:	4b27      	ldr	r3, [pc, #156]	; (80176e0 <USBD_LL_Init+0xb8>)
 8017642:	4a28      	ldr	r2, [pc, #160]	; (80176e4 <USBD_LL_Init+0xbc>)
 8017644:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8017646:	4b26      	ldr	r3, [pc, #152]	; (80176e0 <USBD_LL_Init+0xb8>)
 8017648:	2208      	movs	r2, #8
 801764a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801764c:	4b24      	ldr	r3, [pc, #144]	; (80176e0 <USBD_LL_Init+0xb8>)
 801764e:	2202      	movs	r2, #2
 8017650:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8017652:	4b23      	ldr	r3, [pc, #140]	; (80176e0 <USBD_LL_Init+0xb8>)
 8017654:	2202      	movs	r2, #2
 8017656:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8017658:	4b21      	ldr	r3, [pc, #132]	; (80176e0 <USBD_LL_Init+0xb8>)
 801765a:	2200      	movs	r2, #0
 801765c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801765e:	4b20      	ldr	r3, [pc, #128]	; (80176e0 <USBD_LL_Init+0xb8>)
 8017660:	2200      	movs	r2, #0
 8017662:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8017664:	4b1e      	ldr	r3, [pc, #120]	; (80176e0 <USBD_LL_Init+0xb8>)
 8017666:	2200      	movs	r2, #0
 8017668:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801766a:	4b1d      	ldr	r3, [pc, #116]	; (80176e0 <USBD_LL_Init+0xb8>)
 801766c:	2200      	movs	r2, #0
 801766e:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8017670:	481b      	ldr	r0, [pc, #108]	; (80176e0 <USBD_LL_Init+0xb8>)
 8017672:	f7f3 fbb8 	bl	800ade6 <HAL_PCD_Init>
 8017676:	4603      	mov	r3, r0
 8017678:	2b00      	cmp	r3, #0
 801767a:	d001      	beq.n	8017680 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 801767c:	f7ef fdbe 	bl	80071fc <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017686:	2318      	movs	r3, #24
 8017688:	2200      	movs	r2, #0
 801768a:	2100      	movs	r1, #0
 801768c:	f7f5 f871 	bl	800c772 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017696:	2358      	movs	r3, #88	; 0x58
 8017698:	2200      	movs	r2, #0
 801769a:	2180      	movs	r1, #128	; 0x80
 801769c:	f7f5 f869 	bl	800c772 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80176a6:	23c0      	movs	r3, #192	; 0xc0
 80176a8:	2200      	movs	r2, #0
 80176aa:	2181      	movs	r1, #129	; 0x81
 80176ac:	f7f5 f861 	bl	800c772 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80176b6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80176ba:	2200      	movs	r2, #0
 80176bc:	2101      	movs	r1, #1
 80176be:	f7f5 f858 	bl	800c772 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80176c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80176cc:	2200      	movs	r2, #0
 80176ce:	2182      	movs	r1, #130	; 0x82
 80176d0:	f7f5 f84f 	bl	800c772 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80176d4:	2300      	movs	r3, #0
}
 80176d6:	4618      	mov	r0, r3
 80176d8:	3708      	adds	r7, #8
 80176da:	46bd      	mov	sp, r7
 80176dc:	bd80      	pop	{r7, pc}
 80176de:	bf00      	nop
 80176e0:	200051c0 	.word	0x200051c0
 80176e4:	40005c00 	.word	0x40005c00

080176e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80176e8:	b580      	push	{r7, lr}
 80176ea:	b084      	sub	sp, #16
 80176ec:	af00      	add	r7, sp, #0
 80176ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80176f0:	2300      	movs	r3, #0
 80176f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80176f4:	2300      	movs	r3, #0
 80176f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80176fe:	4618      	mov	r0, r3
 8017700:	f7f3 fc56 	bl	800afb0 <HAL_PCD_Start>
 8017704:	4603      	mov	r3, r0
 8017706:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017708:	7bfb      	ldrb	r3, [r7, #15]
 801770a:	4618      	mov	r0, r3
 801770c:	f000 f980 	bl	8017a10 <USBD_Get_USB_Status>
 8017710:	4603      	mov	r3, r0
 8017712:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017714:	7bbb      	ldrb	r3, [r7, #14]
}
 8017716:	4618      	mov	r0, r3
 8017718:	3710      	adds	r7, #16
 801771a:	46bd      	mov	sp, r7
 801771c:	bd80      	pop	{r7, pc}

0801771e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801771e:	b580      	push	{r7, lr}
 8017720:	b084      	sub	sp, #16
 8017722:	af00      	add	r7, sp, #0
 8017724:	6078      	str	r0, [r7, #4]
 8017726:	4608      	mov	r0, r1
 8017728:	4611      	mov	r1, r2
 801772a:	461a      	mov	r2, r3
 801772c:	4603      	mov	r3, r0
 801772e:	70fb      	strb	r3, [r7, #3]
 8017730:	460b      	mov	r3, r1
 8017732:	70bb      	strb	r3, [r7, #2]
 8017734:	4613      	mov	r3, r2
 8017736:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017738:	2300      	movs	r3, #0
 801773a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801773c:	2300      	movs	r3, #0
 801773e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017746:	78bb      	ldrb	r3, [r7, #2]
 8017748:	883a      	ldrh	r2, [r7, #0]
 801774a:	78f9      	ldrb	r1, [r7, #3]
 801774c:	f7f3 fd9e 	bl	800b28c <HAL_PCD_EP_Open>
 8017750:	4603      	mov	r3, r0
 8017752:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017754:	7bfb      	ldrb	r3, [r7, #15]
 8017756:	4618      	mov	r0, r3
 8017758:	f000 f95a 	bl	8017a10 <USBD_Get_USB_Status>
 801775c:	4603      	mov	r3, r0
 801775e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017760:	7bbb      	ldrb	r3, [r7, #14]
}
 8017762:	4618      	mov	r0, r3
 8017764:	3710      	adds	r7, #16
 8017766:	46bd      	mov	sp, r7
 8017768:	bd80      	pop	{r7, pc}

0801776a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801776a:	b580      	push	{r7, lr}
 801776c:	b084      	sub	sp, #16
 801776e:	af00      	add	r7, sp, #0
 8017770:	6078      	str	r0, [r7, #4]
 8017772:	460b      	mov	r3, r1
 8017774:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017776:	2300      	movs	r3, #0
 8017778:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801777a:	2300      	movs	r3, #0
 801777c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017784:	78fa      	ldrb	r2, [r7, #3]
 8017786:	4611      	mov	r1, r2
 8017788:	4618      	mov	r0, r3
 801778a:	f7f3 fde5 	bl	800b358 <HAL_PCD_EP_Close>
 801778e:	4603      	mov	r3, r0
 8017790:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017792:	7bfb      	ldrb	r3, [r7, #15]
 8017794:	4618      	mov	r0, r3
 8017796:	f000 f93b 	bl	8017a10 <USBD_Get_USB_Status>
 801779a:	4603      	mov	r3, r0
 801779c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801779e:	7bbb      	ldrb	r3, [r7, #14]
}
 80177a0:	4618      	mov	r0, r3
 80177a2:	3710      	adds	r7, #16
 80177a4:	46bd      	mov	sp, r7
 80177a6:	bd80      	pop	{r7, pc}

080177a8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80177a8:	b580      	push	{r7, lr}
 80177aa:	b084      	sub	sp, #16
 80177ac:	af00      	add	r7, sp, #0
 80177ae:	6078      	str	r0, [r7, #4]
 80177b0:	460b      	mov	r3, r1
 80177b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80177b4:	2300      	movs	r3, #0
 80177b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80177b8:	2300      	movs	r3, #0
 80177ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80177c2:	78fa      	ldrb	r2, [r7, #3]
 80177c4:	4611      	mov	r1, r2
 80177c6:	4618      	mov	r0, r3
 80177c8:	f7f3 fea6 	bl	800b518 <HAL_PCD_EP_SetStall>
 80177cc:	4603      	mov	r3, r0
 80177ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80177d0:	7bfb      	ldrb	r3, [r7, #15]
 80177d2:	4618      	mov	r0, r3
 80177d4:	f000 f91c 	bl	8017a10 <USBD_Get_USB_Status>
 80177d8:	4603      	mov	r3, r0
 80177da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80177dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80177de:	4618      	mov	r0, r3
 80177e0:	3710      	adds	r7, #16
 80177e2:	46bd      	mov	sp, r7
 80177e4:	bd80      	pop	{r7, pc}

080177e6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80177e6:	b580      	push	{r7, lr}
 80177e8:	b084      	sub	sp, #16
 80177ea:	af00      	add	r7, sp, #0
 80177ec:	6078      	str	r0, [r7, #4]
 80177ee:	460b      	mov	r3, r1
 80177f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80177f2:	2300      	movs	r3, #0
 80177f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80177f6:	2300      	movs	r3, #0
 80177f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80177fa:	687b      	ldr	r3, [r7, #4]
 80177fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017800:	78fa      	ldrb	r2, [r7, #3]
 8017802:	4611      	mov	r1, r2
 8017804:	4618      	mov	r0, r3
 8017806:	f7f3 fed9 	bl	800b5bc <HAL_PCD_EP_ClrStall>
 801780a:	4603      	mov	r3, r0
 801780c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801780e:	7bfb      	ldrb	r3, [r7, #15]
 8017810:	4618      	mov	r0, r3
 8017812:	f000 f8fd 	bl	8017a10 <USBD_Get_USB_Status>
 8017816:	4603      	mov	r3, r0
 8017818:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801781a:	7bbb      	ldrb	r3, [r7, #14]
}
 801781c:	4618      	mov	r0, r3
 801781e:	3710      	adds	r7, #16
 8017820:	46bd      	mov	sp, r7
 8017822:	bd80      	pop	{r7, pc}

08017824 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017824:	b480      	push	{r7}
 8017826:	b085      	sub	sp, #20
 8017828:	af00      	add	r7, sp, #0
 801782a:	6078      	str	r0, [r7, #4]
 801782c:	460b      	mov	r3, r1
 801782e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017836:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017838:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801783c:	2b00      	cmp	r3, #0
 801783e:	da0c      	bge.n	801785a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017840:	78fb      	ldrb	r3, [r7, #3]
 8017842:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017846:	68f9      	ldr	r1, [r7, #12]
 8017848:	1c5a      	adds	r2, r3, #1
 801784a:	4613      	mov	r3, r2
 801784c:	009b      	lsls	r3, r3, #2
 801784e:	4413      	add	r3, r2
 8017850:	00db      	lsls	r3, r3, #3
 8017852:	440b      	add	r3, r1
 8017854:	3302      	adds	r3, #2
 8017856:	781b      	ldrb	r3, [r3, #0]
 8017858:	e00b      	b.n	8017872 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801785a:	78fb      	ldrb	r3, [r7, #3]
 801785c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017860:	68f9      	ldr	r1, [r7, #12]
 8017862:	4613      	mov	r3, r2
 8017864:	009b      	lsls	r3, r3, #2
 8017866:	4413      	add	r3, r2
 8017868:	00db      	lsls	r3, r3, #3
 801786a:	440b      	add	r3, r1
 801786c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8017870:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017872:	4618      	mov	r0, r3
 8017874:	3714      	adds	r7, #20
 8017876:	46bd      	mov	sp, r7
 8017878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801787c:	4770      	bx	lr

0801787e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801787e:	b580      	push	{r7, lr}
 8017880:	b084      	sub	sp, #16
 8017882:	af00      	add	r7, sp, #0
 8017884:	6078      	str	r0, [r7, #4]
 8017886:	460b      	mov	r3, r1
 8017888:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801788a:	2300      	movs	r3, #0
 801788c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801788e:	2300      	movs	r3, #0
 8017890:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017898:	78fa      	ldrb	r2, [r7, #3]
 801789a:	4611      	mov	r1, r2
 801789c:	4618      	mov	r0, r3
 801789e:	f7f3 fcd0 	bl	800b242 <HAL_PCD_SetAddress>
 80178a2:	4603      	mov	r3, r0
 80178a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80178a6:	7bfb      	ldrb	r3, [r7, #15]
 80178a8:	4618      	mov	r0, r3
 80178aa:	f000 f8b1 	bl	8017a10 <USBD_Get_USB_Status>
 80178ae:	4603      	mov	r3, r0
 80178b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80178b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80178b4:	4618      	mov	r0, r3
 80178b6:	3710      	adds	r7, #16
 80178b8:	46bd      	mov	sp, r7
 80178ba:	bd80      	pop	{r7, pc}

080178bc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80178bc:	b580      	push	{r7, lr}
 80178be:	b086      	sub	sp, #24
 80178c0:	af00      	add	r7, sp, #0
 80178c2:	60f8      	str	r0, [r7, #12]
 80178c4:	607a      	str	r2, [r7, #4]
 80178c6:	603b      	str	r3, [r7, #0]
 80178c8:	460b      	mov	r3, r1
 80178ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80178cc:	2300      	movs	r3, #0
 80178ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80178d0:	2300      	movs	r3, #0
 80178d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80178d4:	68fb      	ldr	r3, [r7, #12]
 80178d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80178da:	7af9      	ldrb	r1, [r7, #11]
 80178dc:	683b      	ldr	r3, [r7, #0]
 80178de:	687a      	ldr	r2, [r7, #4]
 80178e0:	f7f3 fdd7 	bl	800b492 <HAL_PCD_EP_Transmit>
 80178e4:	4603      	mov	r3, r0
 80178e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80178e8:	7dfb      	ldrb	r3, [r7, #23]
 80178ea:	4618      	mov	r0, r3
 80178ec:	f000 f890 	bl	8017a10 <USBD_Get_USB_Status>
 80178f0:	4603      	mov	r3, r0
 80178f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80178f4:	7dbb      	ldrb	r3, [r7, #22]
}
 80178f6:	4618      	mov	r0, r3
 80178f8:	3718      	adds	r7, #24
 80178fa:	46bd      	mov	sp, r7
 80178fc:	bd80      	pop	{r7, pc}

080178fe <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80178fe:	b580      	push	{r7, lr}
 8017900:	b086      	sub	sp, #24
 8017902:	af00      	add	r7, sp, #0
 8017904:	60f8      	str	r0, [r7, #12]
 8017906:	607a      	str	r2, [r7, #4]
 8017908:	603b      	str	r3, [r7, #0]
 801790a:	460b      	mov	r3, r1
 801790c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801790e:	2300      	movs	r3, #0
 8017910:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017912:	2300      	movs	r3, #0
 8017914:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017916:	68fb      	ldr	r3, [r7, #12]
 8017918:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801791c:	7af9      	ldrb	r1, [r7, #11]
 801791e:	683b      	ldr	r3, [r7, #0]
 8017920:	687a      	ldr	r2, [r7, #4]
 8017922:	f7f3 fd61 	bl	800b3e8 <HAL_PCD_EP_Receive>
 8017926:	4603      	mov	r3, r0
 8017928:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801792a:	7dfb      	ldrb	r3, [r7, #23]
 801792c:	4618      	mov	r0, r3
 801792e:	f000 f86f 	bl	8017a10 <USBD_Get_USB_Status>
 8017932:	4603      	mov	r3, r0
 8017934:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017936:	7dbb      	ldrb	r3, [r7, #22]
}
 8017938:	4618      	mov	r0, r3
 801793a:	3718      	adds	r7, #24
 801793c:	46bd      	mov	sp, r7
 801793e:	bd80      	pop	{r7, pc}

08017940 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017940:	b580      	push	{r7, lr}
 8017942:	b082      	sub	sp, #8
 8017944:	af00      	add	r7, sp, #0
 8017946:	6078      	str	r0, [r7, #4]
 8017948:	460b      	mov	r3, r1
 801794a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017952:	78fa      	ldrb	r2, [r7, #3]
 8017954:	4611      	mov	r1, r2
 8017956:	4618      	mov	r0, r3
 8017958:	f7f3 fd83 	bl	800b462 <HAL_PCD_EP_GetRxCount>
 801795c:	4603      	mov	r3, r0
}
 801795e:	4618      	mov	r0, r3
 8017960:	3708      	adds	r7, #8
 8017962:	46bd      	mov	sp, r7
 8017964:	bd80      	pop	{r7, pc}
	...

08017968 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017968:	b580      	push	{r7, lr}
 801796a:	b082      	sub	sp, #8
 801796c:	af00      	add	r7, sp, #0
 801796e:	6078      	str	r0, [r7, #4]
 8017970:	460b      	mov	r3, r1
 8017972:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8017974:	78fb      	ldrb	r3, [r7, #3]
 8017976:	2b00      	cmp	r3, #0
 8017978:	d002      	beq.n	8017980 <HAL_PCDEx_LPM_Callback+0x18>
 801797a:	2b01      	cmp	r3, #1
 801797c:	d013      	beq.n	80179a6 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 801797e:	e023      	b.n	80179c8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	699b      	ldr	r3, [r3, #24]
 8017984:	2b00      	cmp	r3, #0
 8017986:	d007      	beq.n	8017998 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8017988:	f000 f83c 	bl	8017a04 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801798c:	4b10      	ldr	r3, [pc, #64]	; (80179d0 <HAL_PCDEx_LPM_Callback+0x68>)
 801798e:	691b      	ldr	r3, [r3, #16]
 8017990:	4a0f      	ldr	r2, [pc, #60]	; (80179d0 <HAL_PCDEx_LPM_Callback+0x68>)
 8017992:	f023 0306 	bic.w	r3, r3, #6
 8017996:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801799e:	4618      	mov	r0, r3
 80179a0:	f7fc fbaa 	bl	80140f8 <USBD_LL_Resume>
    break;
 80179a4:	e010      	b.n	80179c8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80179a6:	687b      	ldr	r3, [r7, #4]
 80179a8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80179ac:	4618      	mov	r0, r3
 80179ae:	f7fc fb8d 	bl	80140cc <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	699b      	ldr	r3, [r3, #24]
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	d005      	beq.n	80179c6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80179ba:	4b05      	ldr	r3, [pc, #20]	; (80179d0 <HAL_PCDEx_LPM_Callback+0x68>)
 80179bc:	691b      	ldr	r3, [r3, #16]
 80179be:	4a04      	ldr	r2, [pc, #16]	; (80179d0 <HAL_PCDEx_LPM_Callback+0x68>)
 80179c0:	f043 0306 	orr.w	r3, r3, #6
 80179c4:	6113      	str	r3, [r2, #16]
    break;
 80179c6:	bf00      	nop
}
 80179c8:	bf00      	nop
 80179ca:	3708      	adds	r7, #8
 80179cc:	46bd      	mov	sp, r7
 80179ce:	bd80      	pop	{r7, pc}
 80179d0:	e000ed00 	.word	0xe000ed00

080179d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80179d4:	b480      	push	{r7}
 80179d6:	b083      	sub	sp, #12
 80179d8:	af00      	add	r7, sp, #0
 80179da:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80179dc:	4b03      	ldr	r3, [pc, #12]	; (80179ec <USBD_static_malloc+0x18>)
}
 80179de:	4618      	mov	r0, r3
 80179e0:	370c      	adds	r7, #12
 80179e2:	46bd      	mov	sp, r7
 80179e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179e8:	4770      	bx	lr
 80179ea:	bf00      	nop
 80179ec:	200054b4 	.word	0x200054b4

080179f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80179f0:	b480      	push	{r7}
 80179f2:	b083      	sub	sp, #12
 80179f4:	af00      	add	r7, sp, #0
 80179f6:	6078      	str	r0, [r7, #4]

}
 80179f8:	bf00      	nop
 80179fa:	370c      	adds	r7, #12
 80179fc:	46bd      	mov	sp, r7
 80179fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a02:	4770      	bx	lr

08017a04 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8017a04:	b580      	push	{r7, lr}
 8017a06:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8017a08:	f7ef fb98 	bl	800713c <SystemClock_Config>
}
 8017a0c:	bf00      	nop
 8017a0e:	bd80      	pop	{r7, pc}

08017a10 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017a10:	b480      	push	{r7}
 8017a12:	b085      	sub	sp, #20
 8017a14:	af00      	add	r7, sp, #0
 8017a16:	4603      	mov	r3, r0
 8017a18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017a1a:	2300      	movs	r3, #0
 8017a1c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017a1e:	79fb      	ldrb	r3, [r7, #7]
 8017a20:	2b03      	cmp	r3, #3
 8017a22:	d817      	bhi.n	8017a54 <USBD_Get_USB_Status+0x44>
 8017a24:	a201      	add	r2, pc, #4	; (adr r2, 8017a2c <USBD_Get_USB_Status+0x1c>)
 8017a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017a2a:	bf00      	nop
 8017a2c:	08017a3d 	.word	0x08017a3d
 8017a30:	08017a43 	.word	0x08017a43
 8017a34:	08017a49 	.word	0x08017a49
 8017a38:	08017a4f 	.word	0x08017a4f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017a3c:	2300      	movs	r3, #0
 8017a3e:	73fb      	strb	r3, [r7, #15]
    break;
 8017a40:	e00b      	b.n	8017a5a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017a42:	2303      	movs	r3, #3
 8017a44:	73fb      	strb	r3, [r7, #15]
    break;
 8017a46:	e008      	b.n	8017a5a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017a48:	2301      	movs	r3, #1
 8017a4a:	73fb      	strb	r3, [r7, #15]
    break;
 8017a4c:	e005      	b.n	8017a5a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017a4e:	2303      	movs	r3, #3
 8017a50:	73fb      	strb	r3, [r7, #15]
    break;
 8017a52:	e002      	b.n	8017a5a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8017a54:	2303      	movs	r3, #3
 8017a56:	73fb      	strb	r3, [r7, #15]
    break;
 8017a58:	bf00      	nop
  }
  return usb_status;
 8017a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8017a5c:	4618      	mov	r0, r3
 8017a5e:	3714      	adds	r7, #20
 8017a60:	46bd      	mov	sp, r7
 8017a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a66:	4770      	bx	lr

08017a68 <arm_pid_init_f32>:
 8017a68:	edd0 6a08 	vldr	s13, [r0, #32]
 8017a6c:	edd0 7a06 	vldr	s15, [r0, #24]
 8017a70:	ed90 7a07 	vldr	s14, [r0, #28]
 8017a74:	edc0 6a02 	vstr	s13, [r0, #8]
 8017a78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8017a7c:	ee36 6aa6 	vadd.f32	s12, s13, s13
 8017a80:	eef1 7a67 	vneg.f32	s15, s15
 8017a84:	ee37 7a26 	vadd.f32	s14, s14, s13
 8017a88:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8017a8c:	ed80 7a00 	vstr	s14, [r0]
 8017a90:	edc0 7a01 	vstr	s15, [r0, #4]
 8017a94:	b901      	cbnz	r1, 8017a98 <arm_pid_init_f32+0x30>
 8017a96:	4770      	bx	lr
 8017a98:	2300      	movs	r3, #0
 8017a9a:	60c3      	str	r3, [r0, #12]
 8017a9c:	6103      	str	r3, [r0, #16]
 8017a9e:	6143      	str	r3, [r0, #20]
 8017aa0:	4770      	bx	lr
 8017aa2:	bf00      	nop

08017aa4 <__errno>:
 8017aa4:	4b01      	ldr	r3, [pc, #4]	; (8017aac <__errno+0x8>)
 8017aa6:	6818      	ldr	r0, [r3, #0]
 8017aa8:	4770      	bx	lr
 8017aaa:	bf00      	nop
 8017aac:	2000018c 	.word	0x2000018c

08017ab0 <__libc_init_array>:
 8017ab0:	b570      	push	{r4, r5, r6, lr}
 8017ab2:	4d0d      	ldr	r5, [pc, #52]	; (8017ae8 <__libc_init_array+0x38>)
 8017ab4:	4c0d      	ldr	r4, [pc, #52]	; (8017aec <__libc_init_array+0x3c>)
 8017ab6:	1b64      	subs	r4, r4, r5
 8017ab8:	10a4      	asrs	r4, r4, #2
 8017aba:	2600      	movs	r6, #0
 8017abc:	42a6      	cmp	r6, r4
 8017abe:	d109      	bne.n	8017ad4 <__libc_init_array+0x24>
 8017ac0:	4d0b      	ldr	r5, [pc, #44]	; (8017af0 <__libc_init_array+0x40>)
 8017ac2:	4c0c      	ldr	r4, [pc, #48]	; (8017af4 <__libc_init_array+0x44>)
 8017ac4:	f001 f80e 	bl	8018ae4 <_init>
 8017ac8:	1b64      	subs	r4, r4, r5
 8017aca:	10a4      	asrs	r4, r4, #2
 8017acc:	2600      	movs	r6, #0
 8017ace:	42a6      	cmp	r6, r4
 8017ad0:	d105      	bne.n	8017ade <__libc_init_array+0x2e>
 8017ad2:	bd70      	pop	{r4, r5, r6, pc}
 8017ad4:	f855 3b04 	ldr.w	r3, [r5], #4
 8017ad8:	4798      	blx	r3
 8017ada:	3601      	adds	r6, #1
 8017adc:	e7ee      	b.n	8017abc <__libc_init_array+0xc>
 8017ade:	f855 3b04 	ldr.w	r3, [r5], #4
 8017ae2:	4798      	blx	r3
 8017ae4:	3601      	adds	r6, #1
 8017ae6:	e7f2      	b.n	8017ace <__libc_init_array+0x1e>
 8017ae8:	08018d88 	.word	0x08018d88
 8017aec:	08018d88 	.word	0x08018d88
 8017af0:	08018d88 	.word	0x08018d88
 8017af4:	08018d8c 	.word	0x08018d8c

08017af8 <__retarget_lock_acquire_recursive>:
 8017af8:	4770      	bx	lr

08017afa <__retarget_lock_release_recursive>:
 8017afa:	4770      	bx	lr

08017afc <memcpy>:
 8017afc:	440a      	add	r2, r1
 8017afe:	4291      	cmp	r1, r2
 8017b00:	f100 33ff 	add.w	r3, r0, #4294967295
 8017b04:	d100      	bne.n	8017b08 <memcpy+0xc>
 8017b06:	4770      	bx	lr
 8017b08:	b510      	push	{r4, lr}
 8017b0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017b0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017b12:	4291      	cmp	r1, r2
 8017b14:	d1f9      	bne.n	8017b0a <memcpy+0xe>
 8017b16:	bd10      	pop	{r4, pc}

08017b18 <memset>:
 8017b18:	4402      	add	r2, r0
 8017b1a:	4603      	mov	r3, r0
 8017b1c:	4293      	cmp	r3, r2
 8017b1e:	d100      	bne.n	8017b22 <memset+0xa>
 8017b20:	4770      	bx	lr
 8017b22:	f803 1b01 	strb.w	r1, [r3], #1
 8017b26:	e7f9      	b.n	8017b1c <memset+0x4>

08017b28 <cleanup_glue>:
 8017b28:	b538      	push	{r3, r4, r5, lr}
 8017b2a:	460c      	mov	r4, r1
 8017b2c:	6809      	ldr	r1, [r1, #0]
 8017b2e:	4605      	mov	r5, r0
 8017b30:	b109      	cbz	r1, 8017b36 <cleanup_glue+0xe>
 8017b32:	f7ff fff9 	bl	8017b28 <cleanup_glue>
 8017b36:	4621      	mov	r1, r4
 8017b38:	4628      	mov	r0, r5
 8017b3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017b3e:	f000 b869 	b.w	8017c14 <_free_r>
	...

08017b44 <_reclaim_reent>:
 8017b44:	4b2c      	ldr	r3, [pc, #176]	; (8017bf8 <_reclaim_reent+0xb4>)
 8017b46:	681b      	ldr	r3, [r3, #0]
 8017b48:	4283      	cmp	r3, r0
 8017b4a:	b570      	push	{r4, r5, r6, lr}
 8017b4c:	4604      	mov	r4, r0
 8017b4e:	d051      	beq.n	8017bf4 <_reclaim_reent+0xb0>
 8017b50:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8017b52:	b143      	cbz	r3, 8017b66 <_reclaim_reent+0x22>
 8017b54:	68db      	ldr	r3, [r3, #12]
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	d14a      	bne.n	8017bf0 <_reclaim_reent+0xac>
 8017b5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017b5c:	6819      	ldr	r1, [r3, #0]
 8017b5e:	b111      	cbz	r1, 8017b66 <_reclaim_reent+0x22>
 8017b60:	4620      	mov	r0, r4
 8017b62:	f000 f857 	bl	8017c14 <_free_r>
 8017b66:	6961      	ldr	r1, [r4, #20]
 8017b68:	b111      	cbz	r1, 8017b70 <_reclaim_reent+0x2c>
 8017b6a:	4620      	mov	r0, r4
 8017b6c:	f000 f852 	bl	8017c14 <_free_r>
 8017b70:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8017b72:	b111      	cbz	r1, 8017b7a <_reclaim_reent+0x36>
 8017b74:	4620      	mov	r0, r4
 8017b76:	f000 f84d 	bl	8017c14 <_free_r>
 8017b7a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017b7c:	b111      	cbz	r1, 8017b84 <_reclaim_reent+0x40>
 8017b7e:	4620      	mov	r0, r4
 8017b80:	f000 f848 	bl	8017c14 <_free_r>
 8017b84:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8017b86:	b111      	cbz	r1, 8017b8e <_reclaim_reent+0x4a>
 8017b88:	4620      	mov	r0, r4
 8017b8a:	f000 f843 	bl	8017c14 <_free_r>
 8017b8e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8017b90:	b111      	cbz	r1, 8017b98 <_reclaim_reent+0x54>
 8017b92:	4620      	mov	r0, r4
 8017b94:	f000 f83e 	bl	8017c14 <_free_r>
 8017b98:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8017b9a:	b111      	cbz	r1, 8017ba2 <_reclaim_reent+0x5e>
 8017b9c:	4620      	mov	r0, r4
 8017b9e:	f000 f839 	bl	8017c14 <_free_r>
 8017ba2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8017ba4:	b111      	cbz	r1, 8017bac <_reclaim_reent+0x68>
 8017ba6:	4620      	mov	r0, r4
 8017ba8:	f000 f834 	bl	8017c14 <_free_r>
 8017bac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017bae:	b111      	cbz	r1, 8017bb6 <_reclaim_reent+0x72>
 8017bb0:	4620      	mov	r0, r4
 8017bb2:	f000 f82f 	bl	8017c14 <_free_r>
 8017bb6:	69a3      	ldr	r3, [r4, #24]
 8017bb8:	b1e3      	cbz	r3, 8017bf4 <_reclaim_reent+0xb0>
 8017bba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017bbc:	4620      	mov	r0, r4
 8017bbe:	4798      	blx	r3
 8017bc0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8017bc2:	b1b9      	cbz	r1, 8017bf4 <_reclaim_reent+0xb0>
 8017bc4:	4620      	mov	r0, r4
 8017bc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017bca:	f7ff bfad 	b.w	8017b28 <cleanup_glue>
 8017bce:	5949      	ldr	r1, [r1, r5]
 8017bd0:	b941      	cbnz	r1, 8017be4 <_reclaim_reent+0xa0>
 8017bd2:	3504      	adds	r5, #4
 8017bd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017bd6:	2d80      	cmp	r5, #128	; 0x80
 8017bd8:	68d9      	ldr	r1, [r3, #12]
 8017bda:	d1f8      	bne.n	8017bce <_reclaim_reent+0x8a>
 8017bdc:	4620      	mov	r0, r4
 8017bde:	f000 f819 	bl	8017c14 <_free_r>
 8017be2:	e7ba      	b.n	8017b5a <_reclaim_reent+0x16>
 8017be4:	680e      	ldr	r6, [r1, #0]
 8017be6:	4620      	mov	r0, r4
 8017be8:	f000 f814 	bl	8017c14 <_free_r>
 8017bec:	4631      	mov	r1, r6
 8017bee:	e7ef      	b.n	8017bd0 <_reclaim_reent+0x8c>
 8017bf0:	2500      	movs	r5, #0
 8017bf2:	e7ef      	b.n	8017bd4 <_reclaim_reent+0x90>
 8017bf4:	bd70      	pop	{r4, r5, r6, pc}
 8017bf6:	bf00      	nop
 8017bf8:	2000018c 	.word	0x2000018c

08017bfc <__malloc_lock>:
 8017bfc:	4801      	ldr	r0, [pc, #4]	; (8017c04 <__malloc_lock+0x8>)
 8017bfe:	f7ff bf7b 	b.w	8017af8 <__retarget_lock_acquire_recursive>
 8017c02:	bf00      	nop
 8017c04:	200056d4 	.word	0x200056d4

08017c08 <__malloc_unlock>:
 8017c08:	4801      	ldr	r0, [pc, #4]	; (8017c10 <__malloc_unlock+0x8>)
 8017c0a:	f7ff bf76 	b.w	8017afa <__retarget_lock_release_recursive>
 8017c0e:	bf00      	nop
 8017c10:	200056d4 	.word	0x200056d4

08017c14 <_free_r>:
 8017c14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017c16:	2900      	cmp	r1, #0
 8017c18:	d044      	beq.n	8017ca4 <_free_r+0x90>
 8017c1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017c1e:	9001      	str	r0, [sp, #4]
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	f1a1 0404 	sub.w	r4, r1, #4
 8017c26:	bfb8      	it	lt
 8017c28:	18e4      	addlt	r4, r4, r3
 8017c2a:	f7ff ffe7 	bl	8017bfc <__malloc_lock>
 8017c2e:	4a1e      	ldr	r2, [pc, #120]	; (8017ca8 <_free_r+0x94>)
 8017c30:	9801      	ldr	r0, [sp, #4]
 8017c32:	6813      	ldr	r3, [r2, #0]
 8017c34:	b933      	cbnz	r3, 8017c44 <_free_r+0x30>
 8017c36:	6063      	str	r3, [r4, #4]
 8017c38:	6014      	str	r4, [r2, #0]
 8017c3a:	b003      	add	sp, #12
 8017c3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017c40:	f7ff bfe2 	b.w	8017c08 <__malloc_unlock>
 8017c44:	42a3      	cmp	r3, r4
 8017c46:	d908      	bls.n	8017c5a <_free_r+0x46>
 8017c48:	6825      	ldr	r5, [r4, #0]
 8017c4a:	1961      	adds	r1, r4, r5
 8017c4c:	428b      	cmp	r3, r1
 8017c4e:	bf01      	itttt	eq
 8017c50:	6819      	ldreq	r1, [r3, #0]
 8017c52:	685b      	ldreq	r3, [r3, #4]
 8017c54:	1949      	addeq	r1, r1, r5
 8017c56:	6021      	streq	r1, [r4, #0]
 8017c58:	e7ed      	b.n	8017c36 <_free_r+0x22>
 8017c5a:	461a      	mov	r2, r3
 8017c5c:	685b      	ldr	r3, [r3, #4]
 8017c5e:	b10b      	cbz	r3, 8017c64 <_free_r+0x50>
 8017c60:	42a3      	cmp	r3, r4
 8017c62:	d9fa      	bls.n	8017c5a <_free_r+0x46>
 8017c64:	6811      	ldr	r1, [r2, #0]
 8017c66:	1855      	adds	r5, r2, r1
 8017c68:	42a5      	cmp	r5, r4
 8017c6a:	d10b      	bne.n	8017c84 <_free_r+0x70>
 8017c6c:	6824      	ldr	r4, [r4, #0]
 8017c6e:	4421      	add	r1, r4
 8017c70:	1854      	adds	r4, r2, r1
 8017c72:	42a3      	cmp	r3, r4
 8017c74:	6011      	str	r1, [r2, #0]
 8017c76:	d1e0      	bne.n	8017c3a <_free_r+0x26>
 8017c78:	681c      	ldr	r4, [r3, #0]
 8017c7a:	685b      	ldr	r3, [r3, #4]
 8017c7c:	6053      	str	r3, [r2, #4]
 8017c7e:	4421      	add	r1, r4
 8017c80:	6011      	str	r1, [r2, #0]
 8017c82:	e7da      	b.n	8017c3a <_free_r+0x26>
 8017c84:	d902      	bls.n	8017c8c <_free_r+0x78>
 8017c86:	230c      	movs	r3, #12
 8017c88:	6003      	str	r3, [r0, #0]
 8017c8a:	e7d6      	b.n	8017c3a <_free_r+0x26>
 8017c8c:	6825      	ldr	r5, [r4, #0]
 8017c8e:	1961      	adds	r1, r4, r5
 8017c90:	428b      	cmp	r3, r1
 8017c92:	bf04      	itt	eq
 8017c94:	6819      	ldreq	r1, [r3, #0]
 8017c96:	685b      	ldreq	r3, [r3, #4]
 8017c98:	6063      	str	r3, [r4, #4]
 8017c9a:	bf04      	itt	eq
 8017c9c:	1949      	addeq	r1, r1, r5
 8017c9e:	6021      	streq	r1, [r4, #0]
 8017ca0:	6054      	str	r4, [r2, #4]
 8017ca2:	e7ca      	b.n	8017c3a <_free_r+0x26>
 8017ca4:	b003      	add	sp, #12
 8017ca6:	bd30      	pop	{r4, r5, pc}
 8017ca8:	200056d8 	.word	0x200056d8

08017cac <pow>:
 8017cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017cae:	ed2d 8b02 	vpush	{d8}
 8017cb2:	eeb0 8a40 	vmov.f32	s16, s0
 8017cb6:	eef0 8a60 	vmov.f32	s17, s1
 8017cba:	ec55 4b11 	vmov	r4, r5, d1
 8017cbe:	f000 f867 	bl	8017d90 <__ieee754_pow>
 8017cc2:	4622      	mov	r2, r4
 8017cc4:	462b      	mov	r3, r5
 8017cc6:	4620      	mov	r0, r4
 8017cc8:	4629      	mov	r1, r5
 8017cca:	ec57 6b10 	vmov	r6, r7, d0
 8017cce:	f7ec ff0f 	bl	8004af0 <__aeabi_dcmpun>
 8017cd2:	2800      	cmp	r0, #0
 8017cd4:	d13b      	bne.n	8017d4e <pow+0xa2>
 8017cd6:	ec51 0b18 	vmov	r0, r1, d8
 8017cda:	2200      	movs	r2, #0
 8017cdc:	2300      	movs	r3, #0
 8017cde:	f7ec fed5 	bl	8004a8c <__aeabi_dcmpeq>
 8017ce2:	b1b8      	cbz	r0, 8017d14 <pow+0x68>
 8017ce4:	2200      	movs	r2, #0
 8017ce6:	2300      	movs	r3, #0
 8017ce8:	4620      	mov	r0, r4
 8017cea:	4629      	mov	r1, r5
 8017cec:	f7ec fece 	bl	8004a8c <__aeabi_dcmpeq>
 8017cf0:	2800      	cmp	r0, #0
 8017cf2:	d146      	bne.n	8017d82 <pow+0xd6>
 8017cf4:	ec45 4b10 	vmov	d0, r4, r5
 8017cf8:	f000 fe63 	bl	80189c2 <finite>
 8017cfc:	b338      	cbz	r0, 8017d4e <pow+0xa2>
 8017cfe:	2200      	movs	r2, #0
 8017d00:	2300      	movs	r3, #0
 8017d02:	4620      	mov	r0, r4
 8017d04:	4629      	mov	r1, r5
 8017d06:	f7ec fecb 	bl	8004aa0 <__aeabi_dcmplt>
 8017d0a:	b300      	cbz	r0, 8017d4e <pow+0xa2>
 8017d0c:	f7ff feca 	bl	8017aa4 <__errno>
 8017d10:	2322      	movs	r3, #34	; 0x22
 8017d12:	e01b      	b.n	8017d4c <pow+0xa0>
 8017d14:	ec47 6b10 	vmov	d0, r6, r7
 8017d18:	f000 fe53 	bl	80189c2 <finite>
 8017d1c:	b9e0      	cbnz	r0, 8017d58 <pow+0xac>
 8017d1e:	eeb0 0a48 	vmov.f32	s0, s16
 8017d22:	eef0 0a68 	vmov.f32	s1, s17
 8017d26:	f000 fe4c 	bl	80189c2 <finite>
 8017d2a:	b1a8      	cbz	r0, 8017d58 <pow+0xac>
 8017d2c:	ec45 4b10 	vmov	d0, r4, r5
 8017d30:	f000 fe47 	bl	80189c2 <finite>
 8017d34:	b180      	cbz	r0, 8017d58 <pow+0xac>
 8017d36:	4632      	mov	r2, r6
 8017d38:	463b      	mov	r3, r7
 8017d3a:	4630      	mov	r0, r6
 8017d3c:	4639      	mov	r1, r7
 8017d3e:	f7ec fed7 	bl	8004af0 <__aeabi_dcmpun>
 8017d42:	2800      	cmp	r0, #0
 8017d44:	d0e2      	beq.n	8017d0c <pow+0x60>
 8017d46:	f7ff fead 	bl	8017aa4 <__errno>
 8017d4a:	2321      	movs	r3, #33	; 0x21
 8017d4c:	6003      	str	r3, [r0, #0]
 8017d4e:	ecbd 8b02 	vpop	{d8}
 8017d52:	ec47 6b10 	vmov	d0, r6, r7
 8017d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017d58:	2200      	movs	r2, #0
 8017d5a:	2300      	movs	r3, #0
 8017d5c:	4630      	mov	r0, r6
 8017d5e:	4639      	mov	r1, r7
 8017d60:	f7ec fe94 	bl	8004a8c <__aeabi_dcmpeq>
 8017d64:	2800      	cmp	r0, #0
 8017d66:	d0f2      	beq.n	8017d4e <pow+0xa2>
 8017d68:	eeb0 0a48 	vmov.f32	s0, s16
 8017d6c:	eef0 0a68 	vmov.f32	s1, s17
 8017d70:	f000 fe27 	bl	80189c2 <finite>
 8017d74:	2800      	cmp	r0, #0
 8017d76:	d0ea      	beq.n	8017d4e <pow+0xa2>
 8017d78:	ec45 4b10 	vmov	d0, r4, r5
 8017d7c:	f000 fe21 	bl	80189c2 <finite>
 8017d80:	e7c3      	b.n	8017d0a <pow+0x5e>
 8017d82:	4f01      	ldr	r7, [pc, #4]	; (8017d88 <pow+0xdc>)
 8017d84:	2600      	movs	r6, #0
 8017d86:	e7e2      	b.n	8017d4e <pow+0xa2>
 8017d88:	3ff00000 	.word	0x3ff00000
 8017d8c:	00000000 	.word	0x00000000

08017d90 <__ieee754_pow>:
 8017d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d94:	ed2d 8b06 	vpush	{d8-d10}
 8017d98:	b089      	sub	sp, #36	; 0x24
 8017d9a:	ed8d 1b00 	vstr	d1, [sp]
 8017d9e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8017da2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8017da6:	ea58 0102 	orrs.w	r1, r8, r2
 8017daa:	ec57 6b10 	vmov	r6, r7, d0
 8017dae:	d115      	bne.n	8017ddc <__ieee754_pow+0x4c>
 8017db0:	19b3      	adds	r3, r6, r6
 8017db2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8017db6:	4152      	adcs	r2, r2
 8017db8:	4299      	cmp	r1, r3
 8017dba:	4b89      	ldr	r3, [pc, #548]	; (8017fe0 <__ieee754_pow+0x250>)
 8017dbc:	4193      	sbcs	r3, r2
 8017dbe:	f080 84d2 	bcs.w	8018766 <__ieee754_pow+0x9d6>
 8017dc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017dc6:	4630      	mov	r0, r6
 8017dc8:	4639      	mov	r1, r7
 8017dca:	f7ec fa41 	bl	8004250 <__adddf3>
 8017dce:	ec41 0b10 	vmov	d0, r0, r1
 8017dd2:	b009      	add	sp, #36	; 0x24
 8017dd4:	ecbd 8b06 	vpop	{d8-d10}
 8017dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ddc:	4b81      	ldr	r3, [pc, #516]	; (8017fe4 <__ieee754_pow+0x254>)
 8017dde:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8017de2:	429c      	cmp	r4, r3
 8017de4:	ee10 aa10 	vmov	sl, s0
 8017de8:	463d      	mov	r5, r7
 8017dea:	dc06      	bgt.n	8017dfa <__ieee754_pow+0x6a>
 8017dec:	d101      	bne.n	8017df2 <__ieee754_pow+0x62>
 8017dee:	2e00      	cmp	r6, #0
 8017df0:	d1e7      	bne.n	8017dc2 <__ieee754_pow+0x32>
 8017df2:	4598      	cmp	r8, r3
 8017df4:	dc01      	bgt.n	8017dfa <__ieee754_pow+0x6a>
 8017df6:	d10f      	bne.n	8017e18 <__ieee754_pow+0x88>
 8017df8:	b172      	cbz	r2, 8017e18 <__ieee754_pow+0x88>
 8017dfa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8017dfe:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8017e02:	ea55 050a 	orrs.w	r5, r5, sl
 8017e06:	d1dc      	bne.n	8017dc2 <__ieee754_pow+0x32>
 8017e08:	e9dd 3200 	ldrd	r3, r2, [sp]
 8017e0c:	18db      	adds	r3, r3, r3
 8017e0e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8017e12:	4152      	adcs	r2, r2
 8017e14:	429d      	cmp	r5, r3
 8017e16:	e7d0      	b.n	8017dba <__ieee754_pow+0x2a>
 8017e18:	2d00      	cmp	r5, #0
 8017e1a:	da3b      	bge.n	8017e94 <__ieee754_pow+0x104>
 8017e1c:	4b72      	ldr	r3, [pc, #456]	; (8017fe8 <__ieee754_pow+0x258>)
 8017e1e:	4598      	cmp	r8, r3
 8017e20:	dc51      	bgt.n	8017ec6 <__ieee754_pow+0x136>
 8017e22:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8017e26:	4598      	cmp	r8, r3
 8017e28:	f340 84ac 	ble.w	8018784 <__ieee754_pow+0x9f4>
 8017e2c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8017e30:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8017e34:	2b14      	cmp	r3, #20
 8017e36:	dd0f      	ble.n	8017e58 <__ieee754_pow+0xc8>
 8017e38:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8017e3c:	fa22 f103 	lsr.w	r1, r2, r3
 8017e40:	fa01 f303 	lsl.w	r3, r1, r3
 8017e44:	4293      	cmp	r3, r2
 8017e46:	f040 849d 	bne.w	8018784 <__ieee754_pow+0x9f4>
 8017e4a:	f001 0101 	and.w	r1, r1, #1
 8017e4e:	f1c1 0302 	rsb	r3, r1, #2
 8017e52:	9304      	str	r3, [sp, #16]
 8017e54:	b182      	cbz	r2, 8017e78 <__ieee754_pow+0xe8>
 8017e56:	e05f      	b.n	8017f18 <__ieee754_pow+0x188>
 8017e58:	2a00      	cmp	r2, #0
 8017e5a:	d15b      	bne.n	8017f14 <__ieee754_pow+0x184>
 8017e5c:	f1c3 0314 	rsb	r3, r3, #20
 8017e60:	fa48 f103 	asr.w	r1, r8, r3
 8017e64:	fa01 f303 	lsl.w	r3, r1, r3
 8017e68:	4543      	cmp	r3, r8
 8017e6a:	f040 8488 	bne.w	801877e <__ieee754_pow+0x9ee>
 8017e6e:	f001 0101 	and.w	r1, r1, #1
 8017e72:	f1c1 0302 	rsb	r3, r1, #2
 8017e76:	9304      	str	r3, [sp, #16]
 8017e78:	4b5c      	ldr	r3, [pc, #368]	; (8017fec <__ieee754_pow+0x25c>)
 8017e7a:	4598      	cmp	r8, r3
 8017e7c:	d132      	bne.n	8017ee4 <__ieee754_pow+0x154>
 8017e7e:	f1b9 0f00 	cmp.w	r9, #0
 8017e82:	f280 8478 	bge.w	8018776 <__ieee754_pow+0x9e6>
 8017e86:	4959      	ldr	r1, [pc, #356]	; (8017fec <__ieee754_pow+0x25c>)
 8017e88:	4632      	mov	r2, r6
 8017e8a:	463b      	mov	r3, r7
 8017e8c:	2000      	movs	r0, #0
 8017e8e:	f7ec fcbf 	bl	8004810 <__aeabi_ddiv>
 8017e92:	e79c      	b.n	8017dce <__ieee754_pow+0x3e>
 8017e94:	2300      	movs	r3, #0
 8017e96:	9304      	str	r3, [sp, #16]
 8017e98:	2a00      	cmp	r2, #0
 8017e9a:	d13d      	bne.n	8017f18 <__ieee754_pow+0x188>
 8017e9c:	4b51      	ldr	r3, [pc, #324]	; (8017fe4 <__ieee754_pow+0x254>)
 8017e9e:	4598      	cmp	r8, r3
 8017ea0:	d1ea      	bne.n	8017e78 <__ieee754_pow+0xe8>
 8017ea2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8017ea6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8017eaa:	ea53 030a 	orrs.w	r3, r3, sl
 8017eae:	f000 845a 	beq.w	8018766 <__ieee754_pow+0x9d6>
 8017eb2:	4b4f      	ldr	r3, [pc, #316]	; (8017ff0 <__ieee754_pow+0x260>)
 8017eb4:	429c      	cmp	r4, r3
 8017eb6:	dd08      	ble.n	8017eca <__ieee754_pow+0x13a>
 8017eb8:	f1b9 0f00 	cmp.w	r9, #0
 8017ebc:	f2c0 8457 	blt.w	801876e <__ieee754_pow+0x9de>
 8017ec0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017ec4:	e783      	b.n	8017dce <__ieee754_pow+0x3e>
 8017ec6:	2302      	movs	r3, #2
 8017ec8:	e7e5      	b.n	8017e96 <__ieee754_pow+0x106>
 8017eca:	f1b9 0f00 	cmp.w	r9, #0
 8017ece:	f04f 0000 	mov.w	r0, #0
 8017ed2:	f04f 0100 	mov.w	r1, #0
 8017ed6:	f6bf af7a 	bge.w	8017dce <__ieee754_pow+0x3e>
 8017eda:	e9dd 0300 	ldrd	r0, r3, [sp]
 8017ede:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8017ee2:	e774      	b.n	8017dce <__ieee754_pow+0x3e>
 8017ee4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8017ee8:	d106      	bne.n	8017ef8 <__ieee754_pow+0x168>
 8017eea:	4632      	mov	r2, r6
 8017eec:	463b      	mov	r3, r7
 8017eee:	4630      	mov	r0, r6
 8017ef0:	4639      	mov	r1, r7
 8017ef2:	f7ec fb63 	bl	80045bc <__aeabi_dmul>
 8017ef6:	e76a      	b.n	8017dce <__ieee754_pow+0x3e>
 8017ef8:	4b3e      	ldr	r3, [pc, #248]	; (8017ff4 <__ieee754_pow+0x264>)
 8017efa:	4599      	cmp	r9, r3
 8017efc:	d10c      	bne.n	8017f18 <__ieee754_pow+0x188>
 8017efe:	2d00      	cmp	r5, #0
 8017f00:	db0a      	blt.n	8017f18 <__ieee754_pow+0x188>
 8017f02:	ec47 6b10 	vmov	d0, r6, r7
 8017f06:	b009      	add	sp, #36	; 0x24
 8017f08:	ecbd 8b06 	vpop	{d8-d10}
 8017f0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f10:	f000 bc6c 	b.w	80187ec <__ieee754_sqrt>
 8017f14:	2300      	movs	r3, #0
 8017f16:	9304      	str	r3, [sp, #16]
 8017f18:	ec47 6b10 	vmov	d0, r6, r7
 8017f1c:	f000 fd48 	bl	80189b0 <fabs>
 8017f20:	ec51 0b10 	vmov	r0, r1, d0
 8017f24:	f1ba 0f00 	cmp.w	sl, #0
 8017f28:	d129      	bne.n	8017f7e <__ieee754_pow+0x1ee>
 8017f2a:	b124      	cbz	r4, 8017f36 <__ieee754_pow+0x1a6>
 8017f2c:	4b2f      	ldr	r3, [pc, #188]	; (8017fec <__ieee754_pow+0x25c>)
 8017f2e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8017f32:	429a      	cmp	r2, r3
 8017f34:	d123      	bne.n	8017f7e <__ieee754_pow+0x1ee>
 8017f36:	f1b9 0f00 	cmp.w	r9, #0
 8017f3a:	da05      	bge.n	8017f48 <__ieee754_pow+0x1b8>
 8017f3c:	4602      	mov	r2, r0
 8017f3e:	460b      	mov	r3, r1
 8017f40:	2000      	movs	r0, #0
 8017f42:	492a      	ldr	r1, [pc, #168]	; (8017fec <__ieee754_pow+0x25c>)
 8017f44:	f7ec fc64 	bl	8004810 <__aeabi_ddiv>
 8017f48:	2d00      	cmp	r5, #0
 8017f4a:	f6bf af40 	bge.w	8017dce <__ieee754_pow+0x3e>
 8017f4e:	9b04      	ldr	r3, [sp, #16]
 8017f50:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8017f54:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8017f58:	4323      	orrs	r3, r4
 8017f5a:	d108      	bne.n	8017f6e <__ieee754_pow+0x1de>
 8017f5c:	4602      	mov	r2, r0
 8017f5e:	460b      	mov	r3, r1
 8017f60:	4610      	mov	r0, r2
 8017f62:	4619      	mov	r1, r3
 8017f64:	f7ec f972 	bl	800424c <__aeabi_dsub>
 8017f68:	4602      	mov	r2, r0
 8017f6a:	460b      	mov	r3, r1
 8017f6c:	e78f      	b.n	8017e8e <__ieee754_pow+0xfe>
 8017f6e:	9b04      	ldr	r3, [sp, #16]
 8017f70:	2b01      	cmp	r3, #1
 8017f72:	f47f af2c 	bne.w	8017dce <__ieee754_pow+0x3e>
 8017f76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017f7a:	4619      	mov	r1, r3
 8017f7c:	e727      	b.n	8017dce <__ieee754_pow+0x3e>
 8017f7e:	0feb      	lsrs	r3, r5, #31
 8017f80:	3b01      	subs	r3, #1
 8017f82:	9306      	str	r3, [sp, #24]
 8017f84:	9a06      	ldr	r2, [sp, #24]
 8017f86:	9b04      	ldr	r3, [sp, #16]
 8017f88:	4313      	orrs	r3, r2
 8017f8a:	d102      	bne.n	8017f92 <__ieee754_pow+0x202>
 8017f8c:	4632      	mov	r2, r6
 8017f8e:	463b      	mov	r3, r7
 8017f90:	e7e6      	b.n	8017f60 <__ieee754_pow+0x1d0>
 8017f92:	4b19      	ldr	r3, [pc, #100]	; (8017ff8 <__ieee754_pow+0x268>)
 8017f94:	4598      	cmp	r8, r3
 8017f96:	f340 80fb 	ble.w	8018190 <__ieee754_pow+0x400>
 8017f9a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8017f9e:	4598      	cmp	r8, r3
 8017fa0:	4b13      	ldr	r3, [pc, #76]	; (8017ff0 <__ieee754_pow+0x260>)
 8017fa2:	dd0c      	ble.n	8017fbe <__ieee754_pow+0x22e>
 8017fa4:	429c      	cmp	r4, r3
 8017fa6:	dc0f      	bgt.n	8017fc8 <__ieee754_pow+0x238>
 8017fa8:	f1b9 0f00 	cmp.w	r9, #0
 8017fac:	da0f      	bge.n	8017fce <__ieee754_pow+0x23e>
 8017fae:	2000      	movs	r0, #0
 8017fb0:	b009      	add	sp, #36	; 0x24
 8017fb2:	ecbd 8b06 	vpop	{d8-d10}
 8017fb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fba:	f000 bcf0 	b.w	801899e <__math_oflow>
 8017fbe:	429c      	cmp	r4, r3
 8017fc0:	dbf2      	blt.n	8017fa8 <__ieee754_pow+0x218>
 8017fc2:	4b0a      	ldr	r3, [pc, #40]	; (8017fec <__ieee754_pow+0x25c>)
 8017fc4:	429c      	cmp	r4, r3
 8017fc6:	dd19      	ble.n	8017ffc <__ieee754_pow+0x26c>
 8017fc8:	f1b9 0f00 	cmp.w	r9, #0
 8017fcc:	dcef      	bgt.n	8017fae <__ieee754_pow+0x21e>
 8017fce:	2000      	movs	r0, #0
 8017fd0:	b009      	add	sp, #36	; 0x24
 8017fd2:	ecbd 8b06 	vpop	{d8-d10}
 8017fd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fda:	f000 bcd7 	b.w	801898c <__math_uflow>
 8017fde:	bf00      	nop
 8017fe0:	fff00000 	.word	0xfff00000
 8017fe4:	7ff00000 	.word	0x7ff00000
 8017fe8:	433fffff 	.word	0x433fffff
 8017fec:	3ff00000 	.word	0x3ff00000
 8017ff0:	3fefffff 	.word	0x3fefffff
 8017ff4:	3fe00000 	.word	0x3fe00000
 8017ff8:	41e00000 	.word	0x41e00000
 8017ffc:	4b60      	ldr	r3, [pc, #384]	; (8018180 <__ieee754_pow+0x3f0>)
 8017ffe:	2200      	movs	r2, #0
 8018000:	f7ec f924 	bl	800424c <__aeabi_dsub>
 8018004:	a354      	add	r3, pc, #336	; (adr r3, 8018158 <__ieee754_pow+0x3c8>)
 8018006:	e9d3 2300 	ldrd	r2, r3, [r3]
 801800a:	4604      	mov	r4, r0
 801800c:	460d      	mov	r5, r1
 801800e:	f7ec fad5 	bl	80045bc <__aeabi_dmul>
 8018012:	a353      	add	r3, pc, #332	; (adr r3, 8018160 <__ieee754_pow+0x3d0>)
 8018014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018018:	4606      	mov	r6, r0
 801801a:	460f      	mov	r7, r1
 801801c:	4620      	mov	r0, r4
 801801e:	4629      	mov	r1, r5
 8018020:	f7ec facc 	bl	80045bc <__aeabi_dmul>
 8018024:	4b57      	ldr	r3, [pc, #348]	; (8018184 <__ieee754_pow+0x3f4>)
 8018026:	4682      	mov	sl, r0
 8018028:	468b      	mov	fp, r1
 801802a:	2200      	movs	r2, #0
 801802c:	4620      	mov	r0, r4
 801802e:	4629      	mov	r1, r5
 8018030:	f7ec fac4 	bl	80045bc <__aeabi_dmul>
 8018034:	4602      	mov	r2, r0
 8018036:	460b      	mov	r3, r1
 8018038:	a14b      	add	r1, pc, #300	; (adr r1, 8018168 <__ieee754_pow+0x3d8>)
 801803a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801803e:	f7ec f905 	bl	800424c <__aeabi_dsub>
 8018042:	4622      	mov	r2, r4
 8018044:	462b      	mov	r3, r5
 8018046:	f7ec fab9 	bl	80045bc <__aeabi_dmul>
 801804a:	4602      	mov	r2, r0
 801804c:	460b      	mov	r3, r1
 801804e:	2000      	movs	r0, #0
 8018050:	494d      	ldr	r1, [pc, #308]	; (8018188 <__ieee754_pow+0x3f8>)
 8018052:	f7ec f8fb 	bl	800424c <__aeabi_dsub>
 8018056:	4622      	mov	r2, r4
 8018058:	4680      	mov	r8, r0
 801805a:	4689      	mov	r9, r1
 801805c:	462b      	mov	r3, r5
 801805e:	4620      	mov	r0, r4
 8018060:	4629      	mov	r1, r5
 8018062:	f7ec faab 	bl	80045bc <__aeabi_dmul>
 8018066:	4602      	mov	r2, r0
 8018068:	460b      	mov	r3, r1
 801806a:	4640      	mov	r0, r8
 801806c:	4649      	mov	r1, r9
 801806e:	f7ec faa5 	bl	80045bc <__aeabi_dmul>
 8018072:	a33f      	add	r3, pc, #252	; (adr r3, 8018170 <__ieee754_pow+0x3e0>)
 8018074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018078:	f7ec faa0 	bl	80045bc <__aeabi_dmul>
 801807c:	4602      	mov	r2, r0
 801807e:	460b      	mov	r3, r1
 8018080:	4650      	mov	r0, sl
 8018082:	4659      	mov	r1, fp
 8018084:	f7ec f8e2 	bl	800424c <__aeabi_dsub>
 8018088:	4602      	mov	r2, r0
 801808a:	460b      	mov	r3, r1
 801808c:	4680      	mov	r8, r0
 801808e:	4689      	mov	r9, r1
 8018090:	4630      	mov	r0, r6
 8018092:	4639      	mov	r1, r7
 8018094:	f7ec f8dc 	bl	8004250 <__adddf3>
 8018098:	2000      	movs	r0, #0
 801809a:	4632      	mov	r2, r6
 801809c:	463b      	mov	r3, r7
 801809e:	4604      	mov	r4, r0
 80180a0:	460d      	mov	r5, r1
 80180a2:	f7ec f8d3 	bl	800424c <__aeabi_dsub>
 80180a6:	4602      	mov	r2, r0
 80180a8:	460b      	mov	r3, r1
 80180aa:	4640      	mov	r0, r8
 80180ac:	4649      	mov	r1, r9
 80180ae:	f7ec f8cd 	bl	800424c <__aeabi_dsub>
 80180b2:	9b04      	ldr	r3, [sp, #16]
 80180b4:	9a06      	ldr	r2, [sp, #24]
 80180b6:	3b01      	subs	r3, #1
 80180b8:	4313      	orrs	r3, r2
 80180ba:	4682      	mov	sl, r0
 80180bc:	468b      	mov	fp, r1
 80180be:	f040 81e7 	bne.w	8018490 <__ieee754_pow+0x700>
 80180c2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8018178 <__ieee754_pow+0x3e8>
 80180c6:	eeb0 8a47 	vmov.f32	s16, s14
 80180ca:	eef0 8a67 	vmov.f32	s17, s15
 80180ce:	e9dd 6700 	ldrd	r6, r7, [sp]
 80180d2:	2600      	movs	r6, #0
 80180d4:	4632      	mov	r2, r6
 80180d6:	463b      	mov	r3, r7
 80180d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80180dc:	f7ec f8b6 	bl	800424c <__aeabi_dsub>
 80180e0:	4622      	mov	r2, r4
 80180e2:	462b      	mov	r3, r5
 80180e4:	f7ec fa6a 	bl	80045bc <__aeabi_dmul>
 80180e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80180ec:	4680      	mov	r8, r0
 80180ee:	4689      	mov	r9, r1
 80180f0:	4650      	mov	r0, sl
 80180f2:	4659      	mov	r1, fp
 80180f4:	f7ec fa62 	bl	80045bc <__aeabi_dmul>
 80180f8:	4602      	mov	r2, r0
 80180fa:	460b      	mov	r3, r1
 80180fc:	4640      	mov	r0, r8
 80180fe:	4649      	mov	r1, r9
 8018100:	f7ec f8a6 	bl	8004250 <__adddf3>
 8018104:	4632      	mov	r2, r6
 8018106:	463b      	mov	r3, r7
 8018108:	4680      	mov	r8, r0
 801810a:	4689      	mov	r9, r1
 801810c:	4620      	mov	r0, r4
 801810e:	4629      	mov	r1, r5
 8018110:	f7ec fa54 	bl	80045bc <__aeabi_dmul>
 8018114:	460b      	mov	r3, r1
 8018116:	4604      	mov	r4, r0
 8018118:	460d      	mov	r5, r1
 801811a:	4602      	mov	r2, r0
 801811c:	4649      	mov	r1, r9
 801811e:	4640      	mov	r0, r8
 8018120:	f7ec f896 	bl	8004250 <__adddf3>
 8018124:	4b19      	ldr	r3, [pc, #100]	; (801818c <__ieee754_pow+0x3fc>)
 8018126:	4299      	cmp	r1, r3
 8018128:	ec45 4b19 	vmov	d9, r4, r5
 801812c:	4606      	mov	r6, r0
 801812e:	460f      	mov	r7, r1
 8018130:	468b      	mov	fp, r1
 8018132:	f340 82f1 	ble.w	8018718 <__ieee754_pow+0x988>
 8018136:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801813a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801813e:	4303      	orrs	r3, r0
 8018140:	f000 81e4 	beq.w	801850c <__ieee754_pow+0x77c>
 8018144:	ec51 0b18 	vmov	r0, r1, d8
 8018148:	2200      	movs	r2, #0
 801814a:	2300      	movs	r3, #0
 801814c:	f7ec fca8 	bl	8004aa0 <__aeabi_dcmplt>
 8018150:	3800      	subs	r0, #0
 8018152:	bf18      	it	ne
 8018154:	2001      	movne	r0, #1
 8018156:	e72b      	b.n	8017fb0 <__ieee754_pow+0x220>
 8018158:	60000000 	.word	0x60000000
 801815c:	3ff71547 	.word	0x3ff71547
 8018160:	f85ddf44 	.word	0xf85ddf44
 8018164:	3e54ae0b 	.word	0x3e54ae0b
 8018168:	55555555 	.word	0x55555555
 801816c:	3fd55555 	.word	0x3fd55555
 8018170:	652b82fe 	.word	0x652b82fe
 8018174:	3ff71547 	.word	0x3ff71547
 8018178:	00000000 	.word	0x00000000
 801817c:	bff00000 	.word	0xbff00000
 8018180:	3ff00000 	.word	0x3ff00000
 8018184:	3fd00000 	.word	0x3fd00000
 8018188:	3fe00000 	.word	0x3fe00000
 801818c:	408fffff 	.word	0x408fffff
 8018190:	4bd5      	ldr	r3, [pc, #852]	; (80184e8 <__ieee754_pow+0x758>)
 8018192:	402b      	ands	r3, r5
 8018194:	2200      	movs	r2, #0
 8018196:	b92b      	cbnz	r3, 80181a4 <__ieee754_pow+0x414>
 8018198:	4bd4      	ldr	r3, [pc, #848]	; (80184ec <__ieee754_pow+0x75c>)
 801819a:	f7ec fa0f 	bl	80045bc <__aeabi_dmul>
 801819e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80181a2:	460c      	mov	r4, r1
 80181a4:	1523      	asrs	r3, r4, #20
 80181a6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80181aa:	4413      	add	r3, r2
 80181ac:	9305      	str	r3, [sp, #20]
 80181ae:	4bd0      	ldr	r3, [pc, #832]	; (80184f0 <__ieee754_pow+0x760>)
 80181b0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80181b4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80181b8:	429c      	cmp	r4, r3
 80181ba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80181be:	dd08      	ble.n	80181d2 <__ieee754_pow+0x442>
 80181c0:	4bcc      	ldr	r3, [pc, #816]	; (80184f4 <__ieee754_pow+0x764>)
 80181c2:	429c      	cmp	r4, r3
 80181c4:	f340 8162 	ble.w	801848c <__ieee754_pow+0x6fc>
 80181c8:	9b05      	ldr	r3, [sp, #20]
 80181ca:	3301      	adds	r3, #1
 80181cc:	9305      	str	r3, [sp, #20]
 80181ce:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80181d2:	2400      	movs	r4, #0
 80181d4:	00e3      	lsls	r3, r4, #3
 80181d6:	9307      	str	r3, [sp, #28]
 80181d8:	4bc7      	ldr	r3, [pc, #796]	; (80184f8 <__ieee754_pow+0x768>)
 80181da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80181de:	ed93 7b00 	vldr	d7, [r3]
 80181e2:	4629      	mov	r1, r5
 80181e4:	ec53 2b17 	vmov	r2, r3, d7
 80181e8:	eeb0 9a47 	vmov.f32	s18, s14
 80181ec:	eef0 9a67 	vmov.f32	s19, s15
 80181f0:	4682      	mov	sl, r0
 80181f2:	f7ec f82b 	bl	800424c <__aeabi_dsub>
 80181f6:	4652      	mov	r2, sl
 80181f8:	4606      	mov	r6, r0
 80181fa:	460f      	mov	r7, r1
 80181fc:	462b      	mov	r3, r5
 80181fe:	ec51 0b19 	vmov	r0, r1, d9
 8018202:	f7ec f825 	bl	8004250 <__adddf3>
 8018206:	4602      	mov	r2, r0
 8018208:	460b      	mov	r3, r1
 801820a:	2000      	movs	r0, #0
 801820c:	49bb      	ldr	r1, [pc, #748]	; (80184fc <__ieee754_pow+0x76c>)
 801820e:	f7ec faff 	bl	8004810 <__aeabi_ddiv>
 8018212:	ec41 0b1a 	vmov	d10, r0, r1
 8018216:	4602      	mov	r2, r0
 8018218:	460b      	mov	r3, r1
 801821a:	4630      	mov	r0, r6
 801821c:	4639      	mov	r1, r7
 801821e:	f7ec f9cd 	bl	80045bc <__aeabi_dmul>
 8018222:	2300      	movs	r3, #0
 8018224:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018228:	9302      	str	r3, [sp, #8]
 801822a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801822e:	46ab      	mov	fp, r5
 8018230:	106d      	asrs	r5, r5, #1
 8018232:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8018236:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801823a:	ec41 0b18 	vmov	d8, r0, r1
 801823e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8018242:	2200      	movs	r2, #0
 8018244:	4640      	mov	r0, r8
 8018246:	4649      	mov	r1, r9
 8018248:	4614      	mov	r4, r2
 801824a:	461d      	mov	r5, r3
 801824c:	f7ec f9b6 	bl	80045bc <__aeabi_dmul>
 8018250:	4602      	mov	r2, r0
 8018252:	460b      	mov	r3, r1
 8018254:	4630      	mov	r0, r6
 8018256:	4639      	mov	r1, r7
 8018258:	f7eb fff8 	bl	800424c <__aeabi_dsub>
 801825c:	ec53 2b19 	vmov	r2, r3, d9
 8018260:	4606      	mov	r6, r0
 8018262:	460f      	mov	r7, r1
 8018264:	4620      	mov	r0, r4
 8018266:	4629      	mov	r1, r5
 8018268:	f7eb fff0 	bl	800424c <__aeabi_dsub>
 801826c:	4602      	mov	r2, r0
 801826e:	460b      	mov	r3, r1
 8018270:	4650      	mov	r0, sl
 8018272:	4659      	mov	r1, fp
 8018274:	f7eb ffea 	bl	800424c <__aeabi_dsub>
 8018278:	4642      	mov	r2, r8
 801827a:	464b      	mov	r3, r9
 801827c:	f7ec f99e 	bl	80045bc <__aeabi_dmul>
 8018280:	4602      	mov	r2, r0
 8018282:	460b      	mov	r3, r1
 8018284:	4630      	mov	r0, r6
 8018286:	4639      	mov	r1, r7
 8018288:	f7eb ffe0 	bl	800424c <__aeabi_dsub>
 801828c:	ec53 2b1a 	vmov	r2, r3, d10
 8018290:	f7ec f994 	bl	80045bc <__aeabi_dmul>
 8018294:	ec53 2b18 	vmov	r2, r3, d8
 8018298:	ec41 0b19 	vmov	d9, r0, r1
 801829c:	ec51 0b18 	vmov	r0, r1, d8
 80182a0:	f7ec f98c 	bl	80045bc <__aeabi_dmul>
 80182a4:	a37c      	add	r3, pc, #496	; (adr r3, 8018498 <__ieee754_pow+0x708>)
 80182a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182aa:	4604      	mov	r4, r0
 80182ac:	460d      	mov	r5, r1
 80182ae:	f7ec f985 	bl	80045bc <__aeabi_dmul>
 80182b2:	a37b      	add	r3, pc, #492	; (adr r3, 80184a0 <__ieee754_pow+0x710>)
 80182b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182b8:	f7eb ffca 	bl	8004250 <__adddf3>
 80182bc:	4622      	mov	r2, r4
 80182be:	462b      	mov	r3, r5
 80182c0:	f7ec f97c 	bl	80045bc <__aeabi_dmul>
 80182c4:	a378      	add	r3, pc, #480	; (adr r3, 80184a8 <__ieee754_pow+0x718>)
 80182c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182ca:	f7eb ffc1 	bl	8004250 <__adddf3>
 80182ce:	4622      	mov	r2, r4
 80182d0:	462b      	mov	r3, r5
 80182d2:	f7ec f973 	bl	80045bc <__aeabi_dmul>
 80182d6:	a376      	add	r3, pc, #472	; (adr r3, 80184b0 <__ieee754_pow+0x720>)
 80182d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182dc:	f7eb ffb8 	bl	8004250 <__adddf3>
 80182e0:	4622      	mov	r2, r4
 80182e2:	462b      	mov	r3, r5
 80182e4:	f7ec f96a 	bl	80045bc <__aeabi_dmul>
 80182e8:	a373      	add	r3, pc, #460	; (adr r3, 80184b8 <__ieee754_pow+0x728>)
 80182ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182ee:	f7eb ffaf 	bl	8004250 <__adddf3>
 80182f2:	4622      	mov	r2, r4
 80182f4:	462b      	mov	r3, r5
 80182f6:	f7ec f961 	bl	80045bc <__aeabi_dmul>
 80182fa:	a371      	add	r3, pc, #452	; (adr r3, 80184c0 <__ieee754_pow+0x730>)
 80182fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018300:	f7eb ffa6 	bl	8004250 <__adddf3>
 8018304:	4622      	mov	r2, r4
 8018306:	4606      	mov	r6, r0
 8018308:	460f      	mov	r7, r1
 801830a:	462b      	mov	r3, r5
 801830c:	4620      	mov	r0, r4
 801830e:	4629      	mov	r1, r5
 8018310:	f7ec f954 	bl	80045bc <__aeabi_dmul>
 8018314:	4602      	mov	r2, r0
 8018316:	460b      	mov	r3, r1
 8018318:	4630      	mov	r0, r6
 801831a:	4639      	mov	r1, r7
 801831c:	f7ec f94e 	bl	80045bc <__aeabi_dmul>
 8018320:	4642      	mov	r2, r8
 8018322:	4604      	mov	r4, r0
 8018324:	460d      	mov	r5, r1
 8018326:	464b      	mov	r3, r9
 8018328:	ec51 0b18 	vmov	r0, r1, d8
 801832c:	f7eb ff90 	bl	8004250 <__adddf3>
 8018330:	ec53 2b19 	vmov	r2, r3, d9
 8018334:	f7ec f942 	bl	80045bc <__aeabi_dmul>
 8018338:	4622      	mov	r2, r4
 801833a:	462b      	mov	r3, r5
 801833c:	f7eb ff88 	bl	8004250 <__adddf3>
 8018340:	4642      	mov	r2, r8
 8018342:	4682      	mov	sl, r0
 8018344:	468b      	mov	fp, r1
 8018346:	464b      	mov	r3, r9
 8018348:	4640      	mov	r0, r8
 801834a:	4649      	mov	r1, r9
 801834c:	f7ec f936 	bl	80045bc <__aeabi_dmul>
 8018350:	4b6b      	ldr	r3, [pc, #428]	; (8018500 <__ieee754_pow+0x770>)
 8018352:	2200      	movs	r2, #0
 8018354:	4606      	mov	r6, r0
 8018356:	460f      	mov	r7, r1
 8018358:	f7eb ff7a 	bl	8004250 <__adddf3>
 801835c:	4652      	mov	r2, sl
 801835e:	465b      	mov	r3, fp
 8018360:	f7eb ff76 	bl	8004250 <__adddf3>
 8018364:	2000      	movs	r0, #0
 8018366:	4604      	mov	r4, r0
 8018368:	460d      	mov	r5, r1
 801836a:	4602      	mov	r2, r0
 801836c:	460b      	mov	r3, r1
 801836e:	4640      	mov	r0, r8
 8018370:	4649      	mov	r1, r9
 8018372:	f7ec f923 	bl	80045bc <__aeabi_dmul>
 8018376:	4b62      	ldr	r3, [pc, #392]	; (8018500 <__ieee754_pow+0x770>)
 8018378:	4680      	mov	r8, r0
 801837a:	4689      	mov	r9, r1
 801837c:	2200      	movs	r2, #0
 801837e:	4620      	mov	r0, r4
 8018380:	4629      	mov	r1, r5
 8018382:	f7eb ff63 	bl	800424c <__aeabi_dsub>
 8018386:	4632      	mov	r2, r6
 8018388:	463b      	mov	r3, r7
 801838a:	f7eb ff5f 	bl	800424c <__aeabi_dsub>
 801838e:	4602      	mov	r2, r0
 8018390:	460b      	mov	r3, r1
 8018392:	4650      	mov	r0, sl
 8018394:	4659      	mov	r1, fp
 8018396:	f7eb ff59 	bl	800424c <__aeabi_dsub>
 801839a:	ec53 2b18 	vmov	r2, r3, d8
 801839e:	f7ec f90d 	bl	80045bc <__aeabi_dmul>
 80183a2:	4622      	mov	r2, r4
 80183a4:	4606      	mov	r6, r0
 80183a6:	460f      	mov	r7, r1
 80183a8:	462b      	mov	r3, r5
 80183aa:	ec51 0b19 	vmov	r0, r1, d9
 80183ae:	f7ec f905 	bl	80045bc <__aeabi_dmul>
 80183b2:	4602      	mov	r2, r0
 80183b4:	460b      	mov	r3, r1
 80183b6:	4630      	mov	r0, r6
 80183b8:	4639      	mov	r1, r7
 80183ba:	f7eb ff49 	bl	8004250 <__adddf3>
 80183be:	4606      	mov	r6, r0
 80183c0:	460f      	mov	r7, r1
 80183c2:	4602      	mov	r2, r0
 80183c4:	460b      	mov	r3, r1
 80183c6:	4640      	mov	r0, r8
 80183c8:	4649      	mov	r1, r9
 80183ca:	f7eb ff41 	bl	8004250 <__adddf3>
 80183ce:	a33e      	add	r3, pc, #248	; (adr r3, 80184c8 <__ieee754_pow+0x738>)
 80183d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183d4:	2000      	movs	r0, #0
 80183d6:	4604      	mov	r4, r0
 80183d8:	460d      	mov	r5, r1
 80183da:	f7ec f8ef 	bl	80045bc <__aeabi_dmul>
 80183de:	4642      	mov	r2, r8
 80183e0:	ec41 0b18 	vmov	d8, r0, r1
 80183e4:	464b      	mov	r3, r9
 80183e6:	4620      	mov	r0, r4
 80183e8:	4629      	mov	r1, r5
 80183ea:	f7eb ff2f 	bl	800424c <__aeabi_dsub>
 80183ee:	4602      	mov	r2, r0
 80183f0:	460b      	mov	r3, r1
 80183f2:	4630      	mov	r0, r6
 80183f4:	4639      	mov	r1, r7
 80183f6:	f7eb ff29 	bl	800424c <__aeabi_dsub>
 80183fa:	a335      	add	r3, pc, #212	; (adr r3, 80184d0 <__ieee754_pow+0x740>)
 80183fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018400:	f7ec f8dc 	bl	80045bc <__aeabi_dmul>
 8018404:	a334      	add	r3, pc, #208	; (adr r3, 80184d8 <__ieee754_pow+0x748>)
 8018406:	e9d3 2300 	ldrd	r2, r3, [r3]
 801840a:	4606      	mov	r6, r0
 801840c:	460f      	mov	r7, r1
 801840e:	4620      	mov	r0, r4
 8018410:	4629      	mov	r1, r5
 8018412:	f7ec f8d3 	bl	80045bc <__aeabi_dmul>
 8018416:	4602      	mov	r2, r0
 8018418:	460b      	mov	r3, r1
 801841a:	4630      	mov	r0, r6
 801841c:	4639      	mov	r1, r7
 801841e:	f7eb ff17 	bl	8004250 <__adddf3>
 8018422:	9a07      	ldr	r2, [sp, #28]
 8018424:	4b37      	ldr	r3, [pc, #220]	; (8018504 <__ieee754_pow+0x774>)
 8018426:	4413      	add	r3, r2
 8018428:	e9d3 2300 	ldrd	r2, r3, [r3]
 801842c:	f7eb ff10 	bl	8004250 <__adddf3>
 8018430:	4682      	mov	sl, r0
 8018432:	9805      	ldr	r0, [sp, #20]
 8018434:	468b      	mov	fp, r1
 8018436:	f7ec f857 	bl	80044e8 <__aeabi_i2d>
 801843a:	9a07      	ldr	r2, [sp, #28]
 801843c:	4b32      	ldr	r3, [pc, #200]	; (8018508 <__ieee754_pow+0x778>)
 801843e:	4413      	add	r3, r2
 8018440:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018444:	4606      	mov	r6, r0
 8018446:	460f      	mov	r7, r1
 8018448:	4652      	mov	r2, sl
 801844a:	465b      	mov	r3, fp
 801844c:	ec51 0b18 	vmov	r0, r1, d8
 8018450:	f7eb fefe 	bl	8004250 <__adddf3>
 8018454:	4642      	mov	r2, r8
 8018456:	464b      	mov	r3, r9
 8018458:	f7eb fefa 	bl	8004250 <__adddf3>
 801845c:	4632      	mov	r2, r6
 801845e:	463b      	mov	r3, r7
 8018460:	f7eb fef6 	bl	8004250 <__adddf3>
 8018464:	2000      	movs	r0, #0
 8018466:	4632      	mov	r2, r6
 8018468:	463b      	mov	r3, r7
 801846a:	4604      	mov	r4, r0
 801846c:	460d      	mov	r5, r1
 801846e:	f7eb feed 	bl	800424c <__aeabi_dsub>
 8018472:	4642      	mov	r2, r8
 8018474:	464b      	mov	r3, r9
 8018476:	f7eb fee9 	bl	800424c <__aeabi_dsub>
 801847a:	ec53 2b18 	vmov	r2, r3, d8
 801847e:	f7eb fee5 	bl	800424c <__aeabi_dsub>
 8018482:	4602      	mov	r2, r0
 8018484:	460b      	mov	r3, r1
 8018486:	4650      	mov	r0, sl
 8018488:	4659      	mov	r1, fp
 801848a:	e610      	b.n	80180ae <__ieee754_pow+0x31e>
 801848c:	2401      	movs	r4, #1
 801848e:	e6a1      	b.n	80181d4 <__ieee754_pow+0x444>
 8018490:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80184e0 <__ieee754_pow+0x750>
 8018494:	e617      	b.n	80180c6 <__ieee754_pow+0x336>
 8018496:	bf00      	nop
 8018498:	4a454eef 	.word	0x4a454eef
 801849c:	3fca7e28 	.word	0x3fca7e28
 80184a0:	93c9db65 	.word	0x93c9db65
 80184a4:	3fcd864a 	.word	0x3fcd864a
 80184a8:	a91d4101 	.word	0xa91d4101
 80184ac:	3fd17460 	.word	0x3fd17460
 80184b0:	518f264d 	.word	0x518f264d
 80184b4:	3fd55555 	.word	0x3fd55555
 80184b8:	db6fabff 	.word	0xdb6fabff
 80184bc:	3fdb6db6 	.word	0x3fdb6db6
 80184c0:	33333303 	.word	0x33333303
 80184c4:	3fe33333 	.word	0x3fe33333
 80184c8:	e0000000 	.word	0xe0000000
 80184cc:	3feec709 	.word	0x3feec709
 80184d0:	dc3a03fd 	.word	0xdc3a03fd
 80184d4:	3feec709 	.word	0x3feec709
 80184d8:	145b01f5 	.word	0x145b01f5
 80184dc:	be3e2fe0 	.word	0xbe3e2fe0
 80184e0:	00000000 	.word	0x00000000
 80184e4:	3ff00000 	.word	0x3ff00000
 80184e8:	7ff00000 	.word	0x7ff00000
 80184ec:	43400000 	.word	0x43400000
 80184f0:	0003988e 	.word	0x0003988e
 80184f4:	000bb679 	.word	0x000bb679
 80184f8:	08018d50 	.word	0x08018d50
 80184fc:	3ff00000 	.word	0x3ff00000
 8018500:	40080000 	.word	0x40080000
 8018504:	08018d70 	.word	0x08018d70
 8018508:	08018d60 	.word	0x08018d60
 801850c:	a3b5      	add	r3, pc, #724	; (adr r3, 80187e4 <__ieee754_pow+0xa54>)
 801850e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018512:	4640      	mov	r0, r8
 8018514:	4649      	mov	r1, r9
 8018516:	f7eb fe9b 	bl	8004250 <__adddf3>
 801851a:	4622      	mov	r2, r4
 801851c:	ec41 0b1a 	vmov	d10, r0, r1
 8018520:	462b      	mov	r3, r5
 8018522:	4630      	mov	r0, r6
 8018524:	4639      	mov	r1, r7
 8018526:	f7eb fe91 	bl	800424c <__aeabi_dsub>
 801852a:	4602      	mov	r2, r0
 801852c:	460b      	mov	r3, r1
 801852e:	ec51 0b1a 	vmov	r0, r1, d10
 8018532:	f7ec fad3 	bl	8004adc <__aeabi_dcmpgt>
 8018536:	2800      	cmp	r0, #0
 8018538:	f47f ae04 	bne.w	8018144 <__ieee754_pow+0x3b4>
 801853c:	4aa4      	ldr	r2, [pc, #656]	; (80187d0 <__ieee754_pow+0xa40>)
 801853e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8018542:	4293      	cmp	r3, r2
 8018544:	f340 8108 	ble.w	8018758 <__ieee754_pow+0x9c8>
 8018548:	151b      	asrs	r3, r3, #20
 801854a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801854e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8018552:	fa4a f303 	asr.w	r3, sl, r3
 8018556:	445b      	add	r3, fp
 8018558:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801855c:	4e9d      	ldr	r6, [pc, #628]	; (80187d4 <__ieee754_pow+0xa44>)
 801855e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8018562:	4116      	asrs	r6, r2
 8018564:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8018568:	2000      	movs	r0, #0
 801856a:	ea23 0106 	bic.w	r1, r3, r6
 801856e:	f1c2 0214 	rsb	r2, r2, #20
 8018572:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8018576:	fa4a fa02 	asr.w	sl, sl, r2
 801857a:	f1bb 0f00 	cmp.w	fp, #0
 801857e:	4602      	mov	r2, r0
 8018580:	460b      	mov	r3, r1
 8018582:	4620      	mov	r0, r4
 8018584:	4629      	mov	r1, r5
 8018586:	bfb8      	it	lt
 8018588:	f1ca 0a00 	rsblt	sl, sl, #0
 801858c:	f7eb fe5e 	bl	800424c <__aeabi_dsub>
 8018590:	ec41 0b19 	vmov	d9, r0, r1
 8018594:	4642      	mov	r2, r8
 8018596:	464b      	mov	r3, r9
 8018598:	ec51 0b19 	vmov	r0, r1, d9
 801859c:	f7eb fe58 	bl	8004250 <__adddf3>
 80185a0:	a37b      	add	r3, pc, #492	; (adr r3, 8018790 <__ieee754_pow+0xa00>)
 80185a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185a6:	2000      	movs	r0, #0
 80185a8:	4604      	mov	r4, r0
 80185aa:	460d      	mov	r5, r1
 80185ac:	f7ec f806 	bl	80045bc <__aeabi_dmul>
 80185b0:	ec53 2b19 	vmov	r2, r3, d9
 80185b4:	4606      	mov	r6, r0
 80185b6:	460f      	mov	r7, r1
 80185b8:	4620      	mov	r0, r4
 80185ba:	4629      	mov	r1, r5
 80185bc:	f7eb fe46 	bl	800424c <__aeabi_dsub>
 80185c0:	4602      	mov	r2, r0
 80185c2:	460b      	mov	r3, r1
 80185c4:	4640      	mov	r0, r8
 80185c6:	4649      	mov	r1, r9
 80185c8:	f7eb fe40 	bl	800424c <__aeabi_dsub>
 80185cc:	a372      	add	r3, pc, #456	; (adr r3, 8018798 <__ieee754_pow+0xa08>)
 80185ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185d2:	f7eb fff3 	bl	80045bc <__aeabi_dmul>
 80185d6:	a372      	add	r3, pc, #456	; (adr r3, 80187a0 <__ieee754_pow+0xa10>)
 80185d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185dc:	4680      	mov	r8, r0
 80185de:	4689      	mov	r9, r1
 80185e0:	4620      	mov	r0, r4
 80185e2:	4629      	mov	r1, r5
 80185e4:	f7eb ffea 	bl	80045bc <__aeabi_dmul>
 80185e8:	4602      	mov	r2, r0
 80185ea:	460b      	mov	r3, r1
 80185ec:	4640      	mov	r0, r8
 80185ee:	4649      	mov	r1, r9
 80185f0:	f7eb fe2e 	bl	8004250 <__adddf3>
 80185f4:	4604      	mov	r4, r0
 80185f6:	460d      	mov	r5, r1
 80185f8:	4602      	mov	r2, r0
 80185fa:	460b      	mov	r3, r1
 80185fc:	4630      	mov	r0, r6
 80185fe:	4639      	mov	r1, r7
 8018600:	f7eb fe26 	bl	8004250 <__adddf3>
 8018604:	4632      	mov	r2, r6
 8018606:	463b      	mov	r3, r7
 8018608:	4680      	mov	r8, r0
 801860a:	4689      	mov	r9, r1
 801860c:	f7eb fe1e 	bl	800424c <__aeabi_dsub>
 8018610:	4602      	mov	r2, r0
 8018612:	460b      	mov	r3, r1
 8018614:	4620      	mov	r0, r4
 8018616:	4629      	mov	r1, r5
 8018618:	f7eb fe18 	bl	800424c <__aeabi_dsub>
 801861c:	4642      	mov	r2, r8
 801861e:	4606      	mov	r6, r0
 8018620:	460f      	mov	r7, r1
 8018622:	464b      	mov	r3, r9
 8018624:	4640      	mov	r0, r8
 8018626:	4649      	mov	r1, r9
 8018628:	f7eb ffc8 	bl	80045bc <__aeabi_dmul>
 801862c:	a35e      	add	r3, pc, #376	; (adr r3, 80187a8 <__ieee754_pow+0xa18>)
 801862e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018632:	4604      	mov	r4, r0
 8018634:	460d      	mov	r5, r1
 8018636:	f7eb ffc1 	bl	80045bc <__aeabi_dmul>
 801863a:	a35d      	add	r3, pc, #372	; (adr r3, 80187b0 <__ieee754_pow+0xa20>)
 801863c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018640:	f7eb fe04 	bl	800424c <__aeabi_dsub>
 8018644:	4622      	mov	r2, r4
 8018646:	462b      	mov	r3, r5
 8018648:	f7eb ffb8 	bl	80045bc <__aeabi_dmul>
 801864c:	a35a      	add	r3, pc, #360	; (adr r3, 80187b8 <__ieee754_pow+0xa28>)
 801864e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018652:	f7eb fdfd 	bl	8004250 <__adddf3>
 8018656:	4622      	mov	r2, r4
 8018658:	462b      	mov	r3, r5
 801865a:	f7eb ffaf 	bl	80045bc <__aeabi_dmul>
 801865e:	a358      	add	r3, pc, #352	; (adr r3, 80187c0 <__ieee754_pow+0xa30>)
 8018660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018664:	f7eb fdf2 	bl	800424c <__aeabi_dsub>
 8018668:	4622      	mov	r2, r4
 801866a:	462b      	mov	r3, r5
 801866c:	f7eb ffa6 	bl	80045bc <__aeabi_dmul>
 8018670:	a355      	add	r3, pc, #340	; (adr r3, 80187c8 <__ieee754_pow+0xa38>)
 8018672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018676:	f7eb fdeb 	bl	8004250 <__adddf3>
 801867a:	4622      	mov	r2, r4
 801867c:	462b      	mov	r3, r5
 801867e:	f7eb ff9d 	bl	80045bc <__aeabi_dmul>
 8018682:	4602      	mov	r2, r0
 8018684:	460b      	mov	r3, r1
 8018686:	4640      	mov	r0, r8
 8018688:	4649      	mov	r1, r9
 801868a:	f7eb fddf 	bl	800424c <__aeabi_dsub>
 801868e:	4604      	mov	r4, r0
 8018690:	460d      	mov	r5, r1
 8018692:	4602      	mov	r2, r0
 8018694:	460b      	mov	r3, r1
 8018696:	4640      	mov	r0, r8
 8018698:	4649      	mov	r1, r9
 801869a:	f7eb ff8f 	bl	80045bc <__aeabi_dmul>
 801869e:	2200      	movs	r2, #0
 80186a0:	ec41 0b19 	vmov	d9, r0, r1
 80186a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80186a8:	4620      	mov	r0, r4
 80186aa:	4629      	mov	r1, r5
 80186ac:	f7eb fdce 	bl	800424c <__aeabi_dsub>
 80186b0:	4602      	mov	r2, r0
 80186b2:	460b      	mov	r3, r1
 80186b4:	ec51 0b19 	vmov	r0, r1, d9
 80186b8:	f7ec f8aa 	bl	8004810 <__aeabi_ddiv>
 80186bc:	4632      	mov	r2, r6
 80186be:	4604      	mov	r4, r0
 80186c0:	460d      	mov	r5, r1
 80186c2:	463b      	mov	r3, r7
 80186c4:	4640      	mov	r0, r8
 80186c6:	4649      	mov	r1, r9
 80186c8:	f7eb ff78 	bl	80045bc <__aeabi_dmul>
 80186cc:	4632      	mov	r2, r6
 80186ce:	463b      	mov	r3, r7
 80186d0:	f7eb fdbe 	bl	8004250 <__adddf3>
 80186d4:	4602      	mov	r2, r0
 80186d6:	460b      	mov	r3, r1
 80186d8:	4620      	mov	r0, r4
 80186da:	4629      	mov	r1, r5
 80186dc:	f7eb fdb6 	bl	800424c <__aeabi_dsub>
 80186e0:	4642      	mov	r2, r8
 80186e2:	464b      	mov	r3, r9
 80186e4:	f7eb fdb2 	bl	800424c <__aeabi_dsub>
 80186e8:	460b      	mov	r3, r1
 80186ea:	4602      	mov	r2, r0
 80186ec:	493a      	ldr	r1, [pc, #232]	; (80187d8 <__ieee754_pow+0xa48>)
 80186ee:	2000      	movs	r0, #0
 80186f0:	f7eb fdac 	bl	800424c <__aeabi_dsub>
 80186f4:	ec41 0b10 	vmov	d0, r0, r1
 80186f8:	ee10 3a90 	vmov	r3, s1
 80186fc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8018700:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8018704:	da2b      	bge.n	801875e <__ieee754_pow+0x9ce>
 8018706:	4650      	mov	r0, sl
 8018708:	f000 f966 	bl	80189d8 <scalbn>
 801870c:	ec51 0b10 	vmov	r0, r1, d0
 8018710:	ec53 2b18 	vmov	r2, r3, d8
 8018714:	f7ff bbed 	b.w	8017ef2 <__ieee754_pow+0x162>
 8018718:	4b30      	ldr	r3, [pc, #192]	; (80187dc <__ieee754_pow+0xa4c>)
 801871a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801871e:	429e      	cmp	r6, r3
 8018720:	f77f af0c 	ble.w	801853c <__ieee754_pow+0x7ac>
 8018724:	4b2e      	ldr	r3, [pc, #184]	; (80187e0 <__ieee754_pow+0xa50>)
 8018726:	440b      	add	r3, r1
 8018728:	4303      	orrs	r3, r0
 801872a:	d009      	beq.n	8018740 <__ieee754_pow+0x9b0>
 801872c:	ec51 0b18 	vmov	r0, r1, d8
 8018730:	2200      	movs	r2, #0
 8018732:	2300      	movs	r3, #0
 8018734:	f7ec f9b4 	bl	8004aa0 <__aeabi_dcmplt>
 8018738:	3800      	subs	r0, #0
 801873a:	bf18      	it	ne
 801873c:	2001      	movne	r0, #1
 801873e:	e447      	b.n	8017fd0 <__ieee754_pow+0x240>
 8018740:	4622      	mov	r2, r4
 8018742:	462b      	mov	r3, r5
 8018744:	f7eb fd82 	bl	800424c <__aeabi_dsub>
 8018748:	4642      	mov	r2, r8
 801874a:	464b      	mov	r3, r9
 801874c:	f7ec f9bc 	bl	8004ac8 <__aeabi_dcmpge>
 8018750:	2800      	cmp	r0, #0
 8018752:	f43f aef3 	beq.w	801853c <__ieee754_pow+0x7ac>
 8018756:	e7e9      	b.n	801872c <__ieee754_pow+0x99c>
 8018758:	f04f 0a00 	mov.w	sl, #0
 801875c:	e71a      	b.n	8018594 <__ieee754_pow+0x804>
 801875e:	ec51 0b10 	vmov	r0, r1, d0
 8018762:	4619      	mov	r1, r3
 8018764:	e7d4      	b.n	8018710 <__ieee754_pow+0x980>
 8018766:	491c      	ldr	r1, [pc, #112]	; (80187d8 <__ieee754_pow+0xa48>)
 8018768:	2000      	movs	r0, #0
 801876a:	f7ff bb30 	b.w	8017dce <__ieee754_pow+0x3e>
 801876e:	2000      	movs	r0, #0
 8018770:	2100      	movs	r1, #0
 8018772:	f7ff bb2c 	b.w	8017dce <__ieee754_pow+0x3e>
 8018776:	4630      	mov	r0, r6
 8018778:	4639      	mov	r1, r7
 801877a:	f7ff bb28 	b.w	8017dce <__ieee754_pow+0x3e>
 801877e:	9204      	str	r2, [sp, #16]
 8018780:	f7ff bb7a 	b.w	8017e78 <__ieee754_pow+0xe8>
 8018784:	2300      	movs	r3, #0
 8018786:	f7ff bb64 	b.w	8017e52 <__ieee754_pow+0xc2>
 801878a:	bf00      	nop
 801878c:	f3af 8000 	nop.w
 8018790:	00000000 	.word	0x00000000
 8018794:	3fe62e43 	.word	0x3fe62e43
 8018798:	fefa39ef 	.word	0xfefa39ef
 801879c:	3fe62e42 	.word	0x3fe62e42
 80187a0:	0ca86c39 	.word	0x0ca86c39
 80187a4:	be205c61 	.word	0xbe205c61
 80187a8:	72bea4d0 	.word	0x72bea4d0
 80187ac:	3e663769 	.word	0x3e663769
 80187b0:	c5d26bf1 	.word	0xc5d26bf1
 80187b4:	3ebbbd41 	.word	0x3ebbbd41
 80187b8:	af25de2c 	.word	0xaf25de2c
 80187bc:	3f11566a 	.word	0x3f11566a
 80187c0:	16bebd93 	.word	0x16bebd93
 80187c4:	3f66c16c 	.word	0x3f66c16c
 80187c8:	5555553e 	.word	0x5555553e
 80187cc:	3fc55555 	.word	0x3fc55555
 80187d0:	3fe00000 	.word	0x3fe00000
 80187d4:	000fffff 	.word	0x000fffff
 80187d8:	3ff00000 	.word	0x3ff00000
 80187dc:	4090cbff 	.word	0x4090cbff
 80187e0:	3f6f3400 	.word	0x3f6f3400
 80187e4:	652b82fe 	.word	0x652b82fe
 80187e8:	3c971547 	.word	0x3c971547

080187ec <__ieee754_sqrt>:
 80187ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187f0:	ec55 4b10 	vmov	r4, r5, d0
 80187f4:	4e55      	ldr	r6, [pc, #340]	; (801894c <__ieee754_sqrt+0x160>)
 80187f6:	43ae      	bics	r6, r5
 80187f8:	ee10 0a10 	vmov	r0, s0
 80187fc:	ee10 3a10 	vmov	r3, s0
 8018800:	462a      	mov	r2, r5
 8018802:	4629      	mov	r1, r5
 8018804:	d110      	bne.n	8018828 <__ieee754_sqrt+0x3c>
 8018806:	ee10 2a10 	vmov	r2, s0
 801880a:	462b      	mov	r3, r5
 801880c:	f7eb fed6 	bl	80045bc <__aeabi_dmul>
 8018810:	4602      	mov	r2, r0
 8018812:	460b      	mov	r3, r1
 8018814:	4620      	mov	r0, r4
 8018816:	4629      	mov	r1, r5
 8018818:	f7eb fd1a 	bl	8004250 <__adddf3>
 801881c:	4604      	mov	r4, r0
 801881e:	460d      	mov	r5, r1
 8018820:	ec45 4b10 	vmov	d0, r4, r5
 8018824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018828:	2d00      	cmp	r5, #0
 801882a:	dc10      	bgt.n	801884e <__ieee754_sqrt+0x62>
 801882c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8018830:	4330      	orrs	r0, r6
 8018832:	d0f5      	beq.n	8018820 <__ieee754_sqrt+0x34>
 8018834:	b15d      	cbz	r5, 801884e <__ieee754_sqrt+0x62>
 8018836:	ee10 2a10 	vmov	r2, s0
 801883a:	462b      	mov	r3, r5
 801883c:	ee10 0a10 	vmov	r0, s0
 8018840:	f7eb fd04 	bl	800424c <__aeabi_dsub>
 8018844:	4602      	mov	r2, r0
 8018846:	460b      	mov	r3, r1
 8018848:	f7eb ffe2 	bl	8004810 <__aeabi_ddiv>
 801884c:	e7e6      	b.n	801881c <__ieee754_sqrt+0x30>
 801884e:	1512      	asrs	r2, r2, #20
 8018850:	d074      	beq.n	801893c <__ieee754_sqrt+0x150>
 8018852:	07d4      	lsls	r4, r2, #31
 8018854:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8018858:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801885c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8018860:	bf5e      	ittt	pl
 8018862:	0fda      	lsrpl	r2, r3, #31
 8018864:	005b      	lslpl	r3, r3, #1
 8018866:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801886a:	2400      	movs	r4, #0
 801886c:	0fda      	lsrs	r2, r3, #31
 801886e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8018872:	107f      	asrs	r7, r7, #1
 8018874:	005b      	lsls	r3, r3, #1
 8018876:	2516      	movs	r5, #22
 8018878:	4620      	mov	r0, r4
 801887a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801887e:	1886      	adds	r6, r0, r2
 8018880:	428e      	cmp	r6, r1
 8018882:	bfde      	ittt	le
 8018884:	1b89      	suble	r1, r1, r6
 8018886:	18b0      	addle	r0, r6, r2
 8018888:	18a4      	addle	r4, r4, r2
 801888a:	0049      	lsls	r1, r1, #1
 801888c:	3d01      	subs	r5, #1
 801888e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8018892:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8018896:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801889a:	d1f0      	bne.n	801887e <__ieee754_sqrt+0x92>
 801889c:	462a      	mov	r2, r5
 801889e:	f04f 0e20 	mov.w	lr, #32
 80188a2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80188a6:	4281      	cmp	r1, r0
 80188a8:	eb06 0c05 	add.w	ip, r6, r5
 80188ac:	dc02      	bgt.n	80188b4 <__ieee754_sqrt+0xc8>
 80188ae:	d113      	bne.n	80188d8 <__ieee754_sqrt+0xec>
 80188b0:	459c      	cmp	ip, r3
 80188b2:	d811      	bhi.n	80188d8 <__ieee754_sqrt+0xec>
 80188b4:	f1bc 0f00 	cmp.w	ip, #0
 80188b8:	eb0c 0506 	add.w	r5, ip, r6
 80188bc:	da43      	bge.n	8018946 <__ieee754_sqrt+0x15a>
 80188be:	2d00      	cmp	r5, #0
 80188c0:	db41      	blt.n	8018946 <__ieee754_sqrt+0x15a>
 80188c2:	f100 0801 	add.w	r8, r0, #1
 80188c6:	1a09      	subs	r1, r1, r0
 80188c8:	459c      	cmp	ip, r3
 80188ca:	bf88      	it	hi
 80188cc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80188d0:	eba3 030c 	sub.w	r3, r3, ip
 80188d4:	4432      	add	r2, r6
 80188d6:	4640      	mov	r0, r8
 80188d8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80188dc:	f1be 0e01 	subs.w	lr, lr, #1
 80188e0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80188e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80188e8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80188ec:	d1db      	bne.n	80188a6 <__ieee754_sqrt+0xba>
 80188ee:	430b      	orrs	r3, r1
 80188f0:	d006      	beq.n	8018900 <__ieee754_sqrt+0x114>
 80188f2:	1c50      	adds	r0, r2, #1
 80188f4:	bf13      	iteet	ne
 80188f6:	3201      	addne	r2, #1
 80188f8:	3401      	addeq	r4, #1
 80188fa:	4672      	moveq	r2, lr
 80188fc:	f022 0201 	bicne.w	r2, r2, #1
 8018900:	1063      	asrs	r3, r4, #1
 8018902:	0852      	lsrs	r2, r2, #1
 8018904:	07e1      	lsls	r1, r4, #31
 8018906:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801890a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801890e:	bf48      	it	mi
 8018910:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8018914:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8018918:	4614      	mov	r4, r2
 801891a:	e781      	b.n	8018820 <__ieee754_sqrt+0x34>
 801891c:	0ad9      	lsrs	r1, r3, #11
 801891e:	3815      	subs	r0, #21
 8018920:	055b      	lsls	r3, r3, #21
 8018922:	2900      	cmp	r1, #0
 8018924:	d0fa      	beq.n	801891c <__ieee754_sqrt+0x130>
 8018926:	02cd      	lsls	r5, r1, #11
 8018928:	d50a      	bpl.n	8018940 <__ieee754_sqrt+0x154>
 801892a:	f1c2 0420 	rsb	r4, r2, #32
 801892e:	fa23 f404 	lsr.w	r4, r3, r4
 8018932:	1e55      	subs	r5, r2, #1
 8018934:	4093      	lsls	r3, r2
 8018936:	4321      	orrs	r1, r4
 8018938:	1b42      	subs	r2, r0, r5
 801893a:	e78a      	b.n	8018852 <__ieee754_sqrt+0x66>
 801893c:	4610      	mov	r0, r2
 801893e:	e7f0      	b.n	8018922 <__ieee754_sqrt+0x136>
 8018940:	0049      	lsls	r1, r1, #1
 8018942:	3201      	adds	r2, #1
 8018944:	e7ef      	b.n	8018926 <__ieee754_sqrt+0x13a>
 8018946:	4680      	mov	r8, r0
 8018948:	e7bd      	b.n	80188c6 <__ieee754_sqrt+0xda>
 801894a:	bf00      	nop
 801894c:	7ff00000 	.word	0x7ff00000

08018950 <with_errno>:
 8018950:	b570      	push	{r4, r5, r6, lr}
 8018952:	4604      	mov	r4, r0
 8018954:	460d      	mov	r5, r1
 8018956:	4616      	mov	r6, r2
 8018958:	f7ff f8a4 	bl	8017aa4 <__errno>
 801895c:	4629      	mov	r1, r5
 801895e:	6006      	str	r6, [r0, #0]
 8018960:	4620      	mov	r0, r4
 8018962:	bd70      	pop	{r4, r5, r6, pc}

08018964 <xflow>:
 8018964:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018966:	4614      	mov	r4, r2
 8018968:	461d      	mov	r5, r3
 801896a:	b108      	cbz	r0, 8018970 <xflow+0xc>
 801896c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8018970:	e9cd 2300 	strd	r2, r3, [sp]
 8018974:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018978:	4620      	mov	r0, r4
 801897a:	4629      	mov	r1, r5
 801897c:	f7eb fe1e 	bl	80045bc <__aeabi_dmul>
 8018980:	2222      	movs	r2, #34	; 0x22
 8018982:	b003      	add	sp, #12
 8018984:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018988:	f7ff bfe2 	b.w	8018950 <with_errno>

0801898c <__math_uflow>:
 801898c:	b508      	push	{r3, lr}
 801898e:	2200      	movs	r2, #0
 8018990:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8018994:	f7ff ffe6 	bl	8018964 <xflow>
 8018998:	ec41 0b10 	vmov	d0, r0, r1
 801899c:	bd08      	pop	{r3, pc}

0801899e <__math_oflow>:
 801899e:	b508      	push	{r3, lr}
 80189a0:	2200      	movs	r2, #0
 80189a2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80189a6:	f7ff ffdd 	bl	8018964 <xflow>
 80189aa:	ec41 0b10 	vmov	d0, r0, r1
 80189ae:	bd08      	pop	{r3, pc}

080189b0 <fabs>:
 80189b0:	ec51 0b10 	vmov	r0, r1, d0
 80189b4:	ee10 2a10 	vmov	r2, s0
 80189b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80189bc:	ec43 2b10 	vmov	d0, r2, r3
 80189c0:	4770      	bx	lr

080189c2 <finite>:
 80189c2:	b082      	sub	sp, #8
 80189c4:	ed8d 0b00 	vstr	d0, [sp]
 80189c8:	9801      	ldr	r0, [sp, #4]
 80189ca:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80189ce:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80189d2:	0fc0      	lsrs	r0, r0, #31
 80189d4:	b002      	add	sp, #8
 80189d6:	4770      	bx	lr

080189d8 <scalbn>:
 80189d8:	b570      	push	{r4, r5, r6, lr}
 80189da:	ec55 4b10 	vmov	r4, r5, d0
 80189de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80189e2:	4606      	mov	r6, r0
 80189e4:	462b      	mov	r3, r5
 80189e6:	b99a      	cbnz	r2, 8018a10 <scalbn+0x38>
 80189e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80189ec:	4323      	orrs	r3, r4
 80189ee:	d036      	beq.n	8018a5e <scalbn+0x86>
 80189f0:	4b39      	ldr	r3, [pc, #228]	; (8018ad8 <scalbn+0x100>)
 80189f2:	4629      	mov	r1, r5
 80189f4:	ee10 0a10 	vmov	r0, s0
 80189f8:	2200      	movs	r2, #0
 80189fa:	f7eb fddf 	bl	80045bc <__aeabi_dmul>
 80189fe:	4b37      	ldr	r3, [pc, #220]	; (8018adc <scalbn+0x104>)
 8018a00:	429e      	cmp	r6, r3
 8018a02:	4604      	mov	r4, r0
 8018a04:	460d      	mov	r5, r1
 8018a06:	da10      	bge.n	8018a2a <scalbn+0x52>
 8018a08:	a32b      	add	r3, pc, #172	; (adr r3, 8018ab8 <scalbn+0xe0>)
 8018a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a0e:	e03a      	b.n	8018a86 <scalbn+0xae>
 8018a10:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8018a14:	428a      	cmp	r2, r1
 8018a16:	d10c      	bne.n	8018a32 <scalbn+0x5a>
 8018a18:	ee10 2a10 	vmov	r2, s0
 8018a1c:	4620      	mov	r0, r4
 8018a1e:	4629      	mov	r1, r5
 8018a20:	f7eb fc16 	bl	8004250 <__adddf3>
 8018a24:	4604      	mov	r4, r0
 8018a26:	460d      	mov	r5, r1
 8018a28:	e019      	b.n	8018a5e <scalbn+0x86>
 8018a2a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8018a2e:	460b      	mov	r3, r1
 8018a30:	3a36      	subs	r2, #54	; 0x36
 8018a32:	4432      	add	r2, r6
 8018a34:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8018a38:	428a      	cmp	r2, r1
 8018a3a:	dd08      	ble.n	8018a4e <scalbn+0x76>
 8018a3c:	2d00      	cmp	r5, #0
 8018a3e:	a120      	add	r1, pc, #128	; (adr r1, 8018ac0 <scalbn+0xe8>)
 8018a40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018a44:	da1c      	bge.n	8018a80 <scalbn+0xa8>
 8018a46:	a120      	add	r1, pc, #128	; (adr r1, 8018ac8 <scalbn+0xf0>)
 8018a48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018a4c:	e018      	b.n	8018a80 <scalbn+0xa8>
 8018a4e:	2a00      	cmp	r2, #0
 8018a50:	dd08      	ble.n	8018a64 <scalbn+0x8c>
 8018a52:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018a56:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8018a5a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8018a5e:	ec45 4b10 	vmov	d0, r4, r5
 8018a62:	bd70      	pop	{r4, r5, r6, pc}
 8018a64:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8018a68:	da19      	bge.n	8018a9e <scalbn+0xc6>
 8018a6a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8018a6e:	429e      	cmp	r6, r3
 8018a70:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8018a74:	dd0a      	ble.n	8018a8c <scalbn+0xb4>
 8018a76:	a112      	add	r1, pc, #72	; (adr r1, 8018ac0 <scalbn+0xe8>)
 8018a78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	d1e2      	bne.n	8018a46 <scalbn+0x6e>
 8018a80:	a30f      	add	r3, pc, #60	; (adr r3, 8018ac0 <scalbn+0xe8>)
 8018a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a86:	f7eb fd99 	bl	80045bc <__aeabi_dmul>
 8018a8a:	e7cb      	b.n	8018a24 <scalbn+0x4c>
 8018a8c:	a10a      	add	r1, pc, #40	; (adr r1, 8018ab8 <scalbn+0xe0>)
 8018a8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018a92:	2b00      	cmp	r3, #0
 8018a94:	d0b8      	beq.n	8018a08 <scalbn+0x30>
 8018a96:	a10e      	add	r1, pc, #56	; (adr r1, 8018ad0 <scalbn+0xf8>)
 8018a98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018a9c:	e7b4      	b.n	8018a08 <scalbn+0x30>
 8018a9e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018aa2:	3236      	adds	r2, #54	; 0x36
 8018aa4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8018aa8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8018aac:	4620      	mov	r0, r4
 8018aae:	4b0c      	ldr	r3, [pc, #48]	; (8018ae0 <scalbn+0x108>)
 8018ab0:	2200      	movs	r2, #0
 8018ab2:	e7e8      	b.n	8018a86 <scalbn+0xae>
 8018ab4:	f3af 8000 	nop.w
 8018ab8:	c2f8f359 	.word	0xc2f8f359
 8018abc:	01a56e1f 	.word	0x01a56e1f
 8018ac0:	8800759c 	.word	0x8800759c
 8018ac4:	7e37e43c 	.word	0x7e37e43c
 8018ac8:	8800759c 	.word	0x8800759c
 8018acc:	fe37e43c 	.word	0xfe37e43c
 8018ad0:	c2f8f359 	.word	0xc2f8f359
 8018ad4:	81a56e1f 	.word	0x81a56e1f
 8018ad8:	43500000 	.word	0x43500000
 8018adc:	ffff3cb0 	.word	0xffff3cb0
 8018ae0:	3c900000 	.word	0x3c900000

08018ae4 <_init>:
 8018ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ae6:	bf00      	nop
 8018ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018aea:	bc08      	pop	{r3}
 8018aec:	469e      	mov	lr, r3
 8018aee:	4770      	bx	lr

08018af0 <_fini>:
 8018af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018af2:	bf00      	nop
 8018af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018af6:	bc08      	pop	{r3}
 8018af8:	469e      	mov	lr, r3
 8018afa:	4770      	bx	lr
