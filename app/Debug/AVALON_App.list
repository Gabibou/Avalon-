
AVALON_App.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08004000  08004000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015004  080041e0  080041e0  000041e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  080191e8  080191e8  000191e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019518  08019518  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  08019518  08019518  00019518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019520  08019520  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019520  08019520  00019520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019524  08019524  00019524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08019528  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000054f8  200001f0  08019718  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200056e8  08019718  000256e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00037d5a  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000751d  00000000  00000000  00057f7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002838  00000000  00000000  0005f498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002500  00000000  00000000  00061cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000338d9  00000000  00000000  000641d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00037d87  00000000  00000000  00097aa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00128f2f  00000000  00000000  000cf830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  001f875f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000af9c  00000000  00000000  001f8824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080041e0 <__do_global_dtors_aux>:
 80041e0:	b510      	push	{r4, lr}
 80041e2:	4c05      	ldr	r4, [pc, #20]	; (80041f8 <__do_global_dtors_aux+0x18>)
 80041e4:	7823      	ldrb	r3, [r4, #0]
 80041e6:	b933      	cbnz	r3, 80041f6 <__do_global_dtors_aux+0x16>
 80041e8:	4b04      	ldr	r3, [pc, #16]	; (80041fc <__do_global_dtors_aux+0x1c>)
 80041ea:	b113      	cbz	r3, 80041f2 <__do_global_dtors_aux+0x12>
 80041ec:	4804      	ldr	r0, [pc, #16]	; (8004200 <__do_global_dtors_aux+0x20>)
 80041ee:	f3af 8000 	nop.w
 80041f2:	2301      	movs	r3, #1
 80041f4:	7023      	strb	r3, [r4, #0]
 80041f6:	bd10      	pop	{r4, pc}
 80041f8:	200001f0 	.word	0x200001f0
 80041fc:	00000000 	.word	0x00000000
 8004200:	080191cc 	.word	0x080191cc

08004204 <frame_dummy>:
 8004204:	b508      	push	{r3, lr}
 8004206:	4b03      	ldr	r3, [pc, #12]	; (8004214 <frame_dummy+0x10>)
 8004208:	b11b      	cbz	r3, 8004212 <frame_dummy+0xe>
 800420a:	4903      	ldr	r1, [pc, #12]	; (8004218 <frame_dummy+0x14>)
 800420c:	4803      	ldr	r0, [pc, #12]	; (800421c <frame_dummy+0x18>)
 800420e:	f3af 8000 	nop.w
 8004212:	bd08      	pop	{r3, pc}
 8004214:	00000000 	.word	0x00000000
 8004218:	200001f4 	.word	0x200001f4
 800421c:	080191cc 	.word	0x080191cc

08004220 <strcmp>:
 8004220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004228:	2a01      	cmp	r2, #1
 800422a:	bf28      	it	cs
 800422c:	429a      	cmpcs	r2, r3
 800422e:	d0f7      	beq.n	8004220 <strcmp>
 8004230:	1ad0      	subs	r0, r2, r3
 8004232:	4770      	bx	lr

08004234 <strlen>:
 8004234:	4603      	mov	r3, r0
 8004236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800423a:	2a00      	cmp	r2, #0
 800423c:	d1fb      	bne.n	8004236 <strlen+0x2>
 800423e:	1a18      	subs	r0, r3, r0
 8004240:	3801      	subs	r0, #1
 8004242:	4770      	bx	lr

08004244 <__aeabi_drsub>:
 8004244:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8004248:	e002      	b.n	8004250 <__adddf3>
 800424a:	bf00      	nop

0800424c <__aeabi_dsub>:
 800424c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08004250 <__adddf3>:
 8004250:	b530      	push	{r4, r5, lr}
 8004252:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8004256:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800425a:	ea94 0f05 	teq	r4, r5
 800425e:	bf08      	it	eq
 8004260:	ea90 0f02 	teqeq	r0, r2
 8004264:	bf1f      	itttt	ne
 8004266:	ea54 0c00 	orrsne.w	ip, r4, r0
 800426a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800426e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8004272:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004276:	f000 80e2 	beq.w	800443e <__adddf3+0x1ee>
 800427a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800427e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8004282:	bfb8      	it	lt
 8004284:	426d      	neglt	r5, r5
 8004286:	dd0c      	ble.n	80042a2 <__adddf3+0x52>
 8004288:	442c      	add	r4, r5
 800428a:	ea80 0202 	eor.w	r2, r0, r2
 800428e:	ea81 0303 	eor.w	r3, r1, r3
 8004292:	ea82 0000 	eor.w	r0, r2, r0
 8004296:	ea83 0101 	eor.w	r1, r3, r1
 800429a:	ea80 0202 	eor.w	r2, r0, r2
 800429e:	ea81 0303 	eor.w	r3, r1, r3
 80042a2:	2d36      	cmp	r5, #54	; 0x36
 80042a4:	bf88      	it	hi
 80042a6:	bd30      	pophi	{r4, r5, pc}
 80042a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80042ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80042b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80042b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80042b8:	d002      	beq.n	80042c0 <__adddf3+0x70>
 80042ba:	4240      	negs	r0, r0
 80042bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80042c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80042c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80042c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80042cc:	d002      	beq.n	80042d4 <__adddf3+0x84>
 80042ce:	4252      	negs	r2, r2
 80042d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80042d4:	ea94 0f05 	teq	r4, r5
 80042d8:	f000 80a7 	beq.w	800442a <__adddf3+0x1da>
 80042dc:	f1a4 0401 	sub.w	r4, r4, #1
 80042e0:	f1d5 0e20 	rsbs	lr, r5, #32
 80042e4:	db0d      	blt.n	8004302 <__adddf3+0xb2>
 80042e6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80042ea:	fa22 f205 	lsr.w	r2, r2, r5
 80042ee:	1880      	adds	r0, r0, r2
 80042f0:	f141 0100 	adc.w	r1, r1, #0
 80042f4:	fa03 f20e 	lsl.w	r2, r3, lr
 80042f8:	1880      	adds	r0, r0, r2
 80042fa:	fa43 f305 	asr.w	r3, r3, r5
 80042fe:	4159      	adcs	r1, r3
 8004300:	e00e      	b.n	8004320 <__adddf3+0xd0>
 8004302:	f1a5 0520 	sub.w	r5, r5, #32
 8004306:	f10e 0e20 	add.w	lr, lr, #32
 800430a:	2a01      	cmp	r2, #1
 800430c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8004310:	bf28      	it	cs
 8004312:	f04c 0c02 	orrcs.w	ip, ip, #2
 8004316:	fa43 f305 	asr.w	r3, r3, r5
 800431a:	18c0      	adds	r0, r0, r3
 800431c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8004320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004324:	d507      	bpl.n	8004336 <__adddf3+0xe6>
 8004326:	f04f 0e00 	mov.w	lr, #0
 800432a:	f1dc 0c00 	rsbs	ip, ip, #0
 800432e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8004332:	eb6e 0101 	sbc.w	r1, lr, r1
 8004336:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800433a:	d31b      	bcc.n	8004374 <__adddf3+0x124>
 800433c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8004340:	d30c      	bcc.n	800435c <__adddf3+0x10c>
 8004342:	0849      	lsrs	r1, r1, #1
 8004344:	ea5f 0030 	movs.w	r0, r0, rrx
 8004348:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800434c:	f104 0401 	add.w	r4, r4, #1
 8004350:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8004354:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8004358:	f080 809a 	bcs.w	8004490 <__adddf3+0x240>
 800435c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8004360:	bf08      	it	eq
 8004362:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004366:	f150 0000 	adcs.w	r0, r0, #0
 800436a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800436e:	ea41 0105 	orr.w	r1, r1, r5
 8004372:	bd30      	pop	{r4, r5, pc}
 8004374:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8004378:	4140      	adcs	r0, r0
 800437a:	eb41 0101 	adc.w	r1, r1, r1
 800437e:	3c01      	subs	r4, #1
 8004380:	bf28      	it	cs
 8004382:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8004386:	d2e9      	bcs.n	800435c <__adddf3+0x10c>
 8004388:	f091 0f00 	teq	r1, #0
 800438c:	bf04      	itt	eq
 800438e:	4601      	moveq	r1, r0
 8004390:	2000      	moveq	r0, #0
 8004392:	fab1 f381 	clz	r3, r1
 8004396:	bf08      	it	eq
 8004398:	3320      	addeq	r3, #32
 800439a:	f1a3 030b 	sub.w	r3, r3, #11
 800439e:	f1b3 0220 	subs.w	r2, r3, #32
 80043a2:	da0c      	bge.n	80043be <__adddf3+0x16e>
 80043a4:	320c      	adds	r2, #12
 80043a6:	dd08      	ble.n	80043ba <__adddf3+0x16a>
 80043a8:	f102 0c14 	add.w	ip, r2, #20
 80043ac:	f1c2 020c 	rsb	r2, r2, #12
 80043b0:	fa01 f00c 	lsl.w	r0, r1, ip
 80043b4:	fa21 f102 	lsr.w	r1, r1, r2
 80043b8:	e00c      	b.n	80043d4 <__adddf3+0x184>
 80043ba:	f102 0214 	add.w	r2, r2, #20
 80043be:	bfd8      	it	le
 80043c0:	f1c2 0c20 	rsble	ip, r2, #32
 80043c4:	fa01 f102 	lsl.w	r1, r1, r2
 80043c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80043cc:	bfdc      	itt	le
 80043ce:	ea41 010c 	orrle.w	r1, r1, ip
 80043d2:	4090      	lslle	r0, r2
 80043d4:	1ae4      	subs	r4, r4, r3
 80043d6:	bfa2      	ittt	ge
 80043d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80043dc:	4329      	orrge	r1, r5
 80043de:	bd30      	popge	{r4, r5, pc}
 80043e0:	ea6f 0404 	mvn.w	r4, r4
 80043e4:	3c1f      	subs	r4, #31
 80043e6:	da1c      	bge.n	8004422 <__adddf3+0x1d2>
 80043e8:	340c      	adds	r4, #12
 80043ea:	dc0e      	bgt.n	800440a <__adddf3+0x1ba>
 80043ec:	f104 0414 	add.w	r4, r4, #20
 80043f0:	f1c4 0220 	rsb	r2, r4, #32
 80043f4:	fa20 f004 	lsr.w	r0, r0, r4
 80043f8:	fa01 f302 	lsl.w	r3, r1, r2
 80043fc:	ea40 0003 	orr.w	r0, r0, r3
 8004400:	fa21 f304 	lsr.w	r3, r1, r4
 8004404:	ea45 0103 	orr.w	r1, r5, r3
 8004408:	bd30      	pop	{r4, r5, pc}
 800440a:	f1c4 040c 	rsb	r4, r4, #12
 800440e:	f1c4 0220 	rsb	r2, r4, #32
 8004412:	fa20 f002 	lsr.w	r0, r0, r2
 8004416:	fa01 f304 	lsl.w	r3, r1, r4
 800441a:	ea40 0003 	orr.w	r0, r0, r3
 800441e:	4629      	mov	r1, r5
 8004420:	bd30      	pop	{r4, r5, pc}
 8004422:	fa21 f004 	lsr.w	r0, r1, r4
 8004426:	4629      	mov	r1, r5
 8004428:	bd30      	pop	{r4, r5, pc}
 800442a:	f094 0f00 	teq	r4, #0
 800442e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8004432:	bf06      	itte	eq
 8004434:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8004438:	3401      	addeq	r4, #1
 800443a:	3d01      	subne	r5, #1
 800443c:	e74e      	b.n	80042dc <__adddf3+0x8c>
 800443e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004442:	bf18      	it	ne
 8004444:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004448:	d029      	beq.n	800449e <__adddf3+0x24e>
 800444a:	ea94 0f05 	teq	r4, r5
 800444e:	bf08      	it	eq
 8004450:	ea90 0f02 	teqeq	r0, r2
 8004454:	d005      	beq.n	8004462 <__adddf3+0x212>
 8004456:	ea54 0c00 	orrs.w	ip, r4, r0
 800445a:	bf04      	itt	eq
 800445c:	4619      	moveq	r1, r3
 800445e:	4610      	moveq	r0, r2
 8004460:	bd30      	pop	{r4, r5, pc}
 8004462:	ea91 0f03 	teq	r1, r3
 8004466:	bf1e      	ittt	ne
 8004468:	2100      	movne	r1, #0
 800446a:	2000      	movne	r0, #0
 800446c:	bd30      	popne	{r4, r5, pc}
 800446e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8004472:	d105      	bne.n	8004480 <__adddf3+0x230>
 8004474:	0040      	lsls	r0, r0, #1
 8004476:	4149      	adcs	r1, r1
 8004478:	bf28      	it	cs
 800447a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800447e:	bd30      	pop	{r4, r5, pc}
 8004480:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8004484:	bf3c      	itt	cc
 8004486:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800448a:	bd30      	popcc	{r4, r5, pc}
 800448c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004490:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8004494:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004498:	f04f 0000 	mov.w	r0, #0
 800449c:	bd30      	pop	{r4, r5, pc}
 800449e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80044a2:	bf1a      	itte	ne
 80044a4:	4619      	movne	r1, r3
 80044a6:	4610      	movne	r0, r2
 80044a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80044ac:	bf1c      	itt	ne
 80044ae:	460b      	movne	r3, r1
 80044b0:	4602      	movne	r2, r0
 80044b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80044b6:	bf06      	itte	eq
 80044b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80044bc:	ea91 0f03 	teqeq	r1, r3
 80044c0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80044c4:	bd30      	pop	{r4, r5, pc}
 80044c6:	bf00      	nop

080044c8 <__aeabi_ui2d>:
 80044c8:	f090 0f00 	teq	r0, #0
 80044cc:	bf04      	itt	eq
 80044ce:	2100      	moveq	r1, #0
 80044d0:	4770      	bxeq	lr
 80044d2:	b530      	push	{r4, r5, lr}
 80044d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80044d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80044dc:	f04f 0500 	mov.w	r5, #0
 80044e0:	f04f 0100 	mov.w	r1, #0
 80044e4:	e750      	b.n	8004388 <__adddf3+0x138>
 80044e6:	bf00      	nop

080044e8 <__aeabi_i2d>:
 80044e8:	f090 0f00 	teq	r0, #0
 80044ec:	bf04      	itt	eq
 80044ee:	2100      	moveq	r1, #0
 80044f0:	4770      	bxeq	lr
 80044f2:	b530      	push	{r4, r5, lr}
 80044f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80044f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80044fc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8004500:	bf48      	it	mi
 8004502:	4240      	negmi	r0, r0
 8004504:	f04f 0100 	mov.w	r1, #0
 8004508:	e73e      	b.n	8004388 <__adddf3+0x138>
 800450a:	bf00      	nop

0800450c <__aeabi_f2d>:
 800450c:	0042      	lsls	r2, r0, #1
 800450e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8004512:	ea4f 0131 	mov.w	r1, r1, rrx
 8004516:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800451a:	bf1f      	itttt	ne
 800451c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8004520:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8004524:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8004528:	4770      	bxne	lr
 800452a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800452e:	bf08      	it	eq
 8004530:	4770      	bxeq	lr
 8004532:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8004536:	bf04      	itt	eq
 8004538:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800453c:	4770      	bxeq	lr
 800453e:	b530      	push	{r4, r5, lr}
 8004540:	f44f 7460 	mov.w	r4, #896	; 0x380
 8004544:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004548:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800454c:	e71c      	b.n	8004388 <__adddf3+0x138>
 800454e:	bf00      	nop

08004550 <__aeabi_ul2d>:
 8004550:	ea50 0201 	orrs.w	r2, r0, r1
 8004554:	bf08      	it	eq
 8004556:	4770      	bxeq	lr
 8004558:	b530      	push	{r4, r5, lr}
 800455a:	f04f 0500 	mov.w	r5, #0
 800455e:	e00a      	b.n	8004576 <__aeabi_l2d+0x16>

08004560 <__aeabi_l2d>:
 8004560:	ea50 0201 	orrs.w	r2, r0, r1
 8004564:	bf08      	it	eq
 8004566:	4770      	bxeq	lr
 8004568:	b530      	push	{r4, r5, lr}
 800456a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800456e:	d502      	bpl.n	8004576 <__aeabi_l2d+0x16>
 8004570:	4240      	negs	r0, r0
 8004572:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004576:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800457a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800457e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8004582:	f43f aed8 	beq.w	8004336 <__adddf3+0xe6>
 8004586:	f04f 0203 	mov.w	r2, #3
 800458a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800458e:	bf18      	it	ne
 8004590:	3203      	addne	r2, #3
 8004592:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8004596:	bf18      	it	ne
 8004598:	3203      	addne	r2, #3
 800459a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800459e:	f1c2 0320 	rsb	r3, r2, #32
 80045a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80045a6:	fa20 f002 	lsr.w	r0, r0, r2
 80045aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80045ae:	ea40 000e 	orr.w	r0, r0, lr
 80045b2:	fa21 f102 	lsr.w	r1, r1, r2
 80045b6:	4414      	add	r4, r2
 80045b8:	e6bd      	b.n	8004336 <__adddf3+0xe6>
 80045ba:	bf00      	nop

080045bc <__aeabi_dmul>:
 80045bc:	b570      	push	{r4, r5, r6, lr}
 80045be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80045c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80045c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80045ca:	bf1d      	ittte	ne
 80045cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80045d0:	ea94 0f0c 	teqne	r4, ip
 80045d4:	ea95 0f0c 	teqne	r5, ip
 80045d8:	f000 f8de 	bleq	8004798 <__aeabi_dmul+0x1dc>
 80045dc:	442c      	add	r4, r5
 80045de:	ea81 0603 	eor.w	r6, r1, r3
 80045e2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80045e6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80045ea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80045ee:	bf18      	it	ne
 80045f0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80045f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80045f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045fc:	d038      	beq.n	8004670 <__aeabi_dmul+0xb4>
 80045fe:	fba0 ce02 	umull	ip, lr, r0, r2
 8004602:	f04f 0500 	mov.w	r5, #0
 8004606:	fbe1 e502 	umlal	lr, r5, r1, r2
 800460a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800460e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8004612:	f04f 0600 	mov.w	r6, #0
 8004616:	fbe1 5603 	umlal	r5, r6, r1, r3
 800461a:	f09c 0f00 	teq	ip, #0
 800461e:	bf18      	it	ne
 8004620:	f04e 0e01 	orrne.w	lr, lr, #1
 8004624:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8004628:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800462c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8004630:	d204      	bcs.n	800463c <__aeabi_dmul+0x80>
 8004632:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8004636:	416d      	adcs	r5, r5
 8004638:	eb46 0606 	adc.w	r6, r6, r6
 800463c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8004640:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8004644:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8004648:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800464c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8004650:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8004654:	bf88      	it	hi
 8004656:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800465a:	d81e      	bhi.n	800469a <__aeabi_dmul+0xde>
 800465c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8004660:	bf08      	it	eq
 8004662:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8004666:	f150 0000 	adcs.w	r0, r0, #0
 800466a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800466e:	bd70      	pop	{r4, r5, r6, pc}
 8004670:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8004674:	ea46 0101 	orr.w	r1, r6, r1
 8004678:	ea40 0002 	orr.w	r0, r0, r2
 800467c:	ea81 0103 	eor.w	r1, r1, r3
 8004680:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8004684:	bfc2      	ittt	gt
 8004686:	ebd4 050c 	rsbsgt	r5, r4, ip
 800468a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800468e:	bd70      	popgt	{r4, r5, r6, pc}
 8004690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004694:	f04f 0e00 	mov.w	lr, #0
 8004698:	3c01      	subs	r4, #1
 800469a:	f300 80ab 	bgt.w	80047f4 <__aeabi_dmul+0x238>
 800469e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80046a2:	bfde      	ittt	le
 80046a4:	2000      	movle	r0, #0
 80046a6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80046aa:	bd70      	pople	{r4, r5, r6, pc}
 80046ac:	f1c4 0400 	rsb	r4, r4, #0
 80046b0:	3c20      	subs	r4, #32
 80046b2:	da35      	bge.n	8004720 <__aeabi_dmul+0x164>
 80046b4:	340c      	adds	r4, #12
 80046b6:	dc1b      	bgt.n	80046f0 <__aeabi_dmul+0x134>
 80046b8:	f104 0414 	add.w	r4, r4, #20
 80046bc:	f1c4 0520 	rsb	r5, r4, #32
 80046c0:	fa00 f305 	lsl.w	r3, r0, r5
 80046c4:	fa20 f004 	lsr.w	r0, r0, r4
 80046c8:	fa01 f205 	lsl.w	r2, r1, r5
 80046cc:	ea40 0002 	orr.w	r0, r0, r2
 80046d0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80046d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80046d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80046dc:	fa21 f604 	lsr.w	r6, r1, r4
 80046e0:	eb42 0106 	adc.w	r1, r2, r6
 80046e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80046e8:	bf08      	it	eq
 80046ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80046ee:	bd70      	pop	{r4, r5, r6, pc}
 80046f0:	f1c4 040c 	rsb	r4, r4, #12
 80046f4:	f1c4 0520 	rsb	r5, r4, #32
 80046f8:	fa00 f304 	lsl.w	r3, r0, r4
 80046fc:	fa20 f005 	lsr.w	r0, r0, r5
 8004700:	fa01 f204 	lsl.w	r2, r1, r4
 8004704:	ea40 0002 	orr.w	r0, r0, r2
 8004708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800470c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8004710:	f141 0100 	adc.w	r1, r1, #0
 8004714:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004718:	bf08      	it	eq
 800471a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800471e:	bd70      	pop	{r4, r5, r6, pc}
 8004720:	f1c4 0520 	rsb	r5, r4, #32
 8004724:	fa00 f205 	lsl.w	r2, r0, r5
 8004728:	ea4e 0e02 	orr.w	lr, lr, r2
 800472c:	fa20 f304 	lsr.w	r3, r0, r4
 8004730:	fa01 f205 	lsl.w	r2, r1, r5
 8004734:	ea43 0302 	orr.w	r3, r3, r2
 8004738:	fa21 f004 	lsr.w	r0, r1, r4
 800473c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004740:	fa21 f204 	lsr.w	r2, r1, r4
 8004744:	ea20 0002 	bic.w	r0, r0, r2
 8004748:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800474c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004750:	bf08      	it	eq
 8004752:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004756:	bd70      	pop	{r4, r5, r6, pc}
 8004758:	f094 0f00 	teq	r4, #0
 800475c:	d10f      	bne.n	800477e <__aeabi_dmul+0x1c2>
 800475e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8004762:	0040      	lsls	r0, r0, #1
 8004764:	eb41 0101 	adc.w	r1, r1, r1
 8004768:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800476c:	bf08      	it	eq
 800476e:	3c01      	subeq	r4, #1
 8004770:	d0f7      	beq.n	8004762 <__aeabi_dmul+0x1a6>
 8004772:	ea41 0106 	orr.w	r1, r1, r6
 8004776:	f095 0f00 	teq	r5, #0
 800477a:	bf18      	it	ne
 800477c:	4770      	bxne	lr
 800477e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8004782:	0052      	lsls	r2, r2, #1
 8004784:	eb43 0303 	adc.w	r3, r3, r3
 8004788:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800478c:	bf08      	it	eq
 800478e:	3d01      	subeq	r5, #1
 8004790:	d0f7      	beq.n	8004782 <__aeabi_dmul+0x1c6>
 8004792:	ea43 0306 	orr.w	r3, r3, r6
 8004796:	4770      	bx	lr
 8004798:	ea94 0f0c 	teq	r4, ip
 800479c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80047a0:	bf18      	it	ne
 80047a2:	ea95 0f0c 	teqne	r5, ip
 80047a6:	d00c      	beq.n	80047c2 <__aeabi_dmul+0x206>
 80047a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80047ac:	bf18      	it	ne
 80047ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80047b2:	d1d1      	bne.n	8004758 <__aeabi_dmul+0x19c>
 80047b4:	ea81 0103 	eor.w	r1, r1, r3
 80047b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80047bc:	f04f 0000 	mov.w	r0, #0
 80047c0:	bd70      	pop	{r4, r5, r6, pc}
 80047c2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80047c6:	bf06      	itte	eq
 80047c8:	4610      	moveq	r0, r2
 80047ca:	4619      	moveq	r1, r3
 80047cc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80047d0:	d019      	beq.n	8004806 <__aeabi_dmul+0x24a>
 80047d2:	ea94 0f0c 	teq	r4, ip
 80047d6:	d102      	bne.n	80047de <__aeabi_dmul+0x222>
 80047d8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80047dc:	d113      	bne.n	8004806 <__aeabi_dmul+0x24a>
 80047de:	ea95 0f0c 	teq	r5, ip
 80047e2:	d105      	bne.n	80047f0 <__aeabi_dmul+0x234>
 80047e4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80047e8:	bf1c      	itt	ne
 80047ea:	4610      	movne	r0, r2
 80047ec:	4619      	movne	r1, r3
 80047ee:	d10a      	bne.n	8004806 <__aeabi_dmul+0x24a>
 80047f0:	ea81 0103 	eor.w	r1, r1, r3
 80047f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80047f8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80047fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004800:	f04f 0000 	mov.w	r0, #0
 8004804:	bd70      	pop	{r4, r5, r6, pc}
 8004806:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800480a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800480e:	bd70      	pop	{r4, r5, r6, pc}

08004810 <__aeabi_ddiv>:
 8004810:	b570      	push	{r4, r5, r6, lr}
 8004812:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8004816:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800481a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800481e:	bf1d      	ittte	ne
 8004820:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8004824:	ea94 0f0c 	teqne	r4, ip
 8004828:	ea95 0f0c 	teqne	r5, ip
 800482c:	f000 f8a7 	bleq	800497e <__aeabi_ddiv+0x16e>
 8004830:	eba4 0405 	sub.w	r4, r4, r5
 8004834:	ea81 0e03 	eor.w	lr, r1, r3
 8004838:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800483c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8004840:	f000 8088 	beq.w	8004954 <__aeabi_ddiv+0x144>
 8004844:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004848:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800484c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8004850:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8004854:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8004858:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800485c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8004860:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8004864:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8004868:	429d      	cmp	r5, r3
 800486a:	bf08      	it	eq
 800486c:	4296      	cmpeq	r6, r2
 800486e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8004872:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8004876:	d202      	bcs.n	800487e <__aeabi_ddiv+0x6e>
 8004878:	085b      	lsrs	r3, r3, #1
 800487a:	ea4f 0232 	mov.w	r2, r2, rrx
 800487e:	1ab6      	subs	r6, r6, r2
 8004880:	eb65 0503 	sbc.w	r5, r5, r3
 8004884:	085b      	lsrs	r3, r3, #1
 8004886:	ea4f 0232 	mov.w	r2, r2, rrx
 800488a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800488e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8004892:	ebb6 0e02 	subs.w	lr, r6, r2
 8004896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800489a:	bf22      	ittt	cs
 800489c:	1ab6      	subcs	r6, r6, r2
 800489e:	4675      	movcs	r5, lr
 80048a0:	ea40 000c 	orrcs.w	r0, r0, ip
 80048a4:	085b      	lsrs	r3, r3, #1
 80048a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80048aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80048ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80048b2:	bf22      	ittt	cs
 80048b4:	1ab6      	subcs	r6, r6, r2
 80048b6:	4675      	movcs	r5, lr
 80048b8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80048bc:	085b      	lsrs	r3, r3, #1
 80048be:	ea4f 0232 	mov.w	r2, r2, rrx
 80048c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80048c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80048ca:	bf22      	ittt	cs
 80048cc:	1ab6      	subcs	r6, r6, r2
 80048ce:	4675      	movcs	r5, lr
 80048d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80048d4:	085b      	lsrs	r3, r3, #1
 80048d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80048da:	ebb6 0e02 	subs.w	lr, r6, r2
 80048de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80048e2:	bf22      	ittt	cs
 80048e4:	1ab6      	subcs	r6, r6, r2
 80048e6:	4675      	movcs	r5, lr
 80048e8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80048ec:	ea55 0e06 	orrs.w	lr, r5, r6
 80048f0:	d018      	beq.n	8004924 <__aeabi_ddiv+0x114>
 80048f2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80048f6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80048fa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80048fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8004902:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8004906:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800490a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800490e:	d1c0      	bne.n	8004892 <__aeabi_ddiv+0x82>
 8004910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004914:	d10b      	bne.n	800492e <__aeabi_ddiv+0x11e>
 8004916:	ea41 0100 	orr.w	r1, r1, r0
 800491a:	f04f 0000 	mov.w	r0, #0
 800491e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8004922:	e7b6      	b.n	8004892 <__aeabi_ddiv+0x82>
 8004924:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004928:	bf04      	itt	eq
 800492a:	4301      	orreq	r1, r0
 800492c:	2000      	moveq	r0, #0
 800492e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8004932:	bf88      	it	hi
 8004934:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8004938:	f63f aeaf 	bhi.w	800469a <__aeabi_dmul+0xde>
 800493c:	ebb5 0c03 	subs.w	ip, r5, r3
 8004940:	bf04      	itt	eq
 8004942:	ebb6 0c02 	subseq.w	ip, r6, r2
 8004946:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800494a:	f150 0000 	adcs.w	r0, r0, #0
 800494e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004952:	bd70      	pop	{r4, r5, r6, pc}
 8004954:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8004958:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800495c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8004960:	bfc2      	ittt	gt
 8004962:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004966:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800496a:	bd70      	popgt	{r4, r5, r6, pc}
 800496c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004970:	f04f 0e00 	mov.w	lr, #0
 8004974:	3c01      	subs	r4, #1
 8004976:	e690      	b.n	800469a <__aeabi_dmul+0xde>
 8004978:	ea45 0e06 	orr.w	lr, r5, r6
 800497c:	e68d      	b.n	800469a <__aeabi_dmul+0xde>
 800497e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8004982:	ea94 0f0c 	teq	r4, ip
 8004986:	bf08      	it	eq
 8004988:	ea95 0f0c 	teqeq	r5, ip
 800498c:	f43f af3b 	beq.w	8004806 <__aeabi_dmul+0x24a>
 8004990:	ea94 0f0c 	teq	r4, ip
 8004994:	d10a      	bne.n	80049ac <__aeabi_ddiv+0x19c>
 8004996:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800499a:	f47f af34 	bne.w	8004806 <__aeabi_dmul+0x24a>
 800499e:	ea95 0f0c 	teq	r5, ip
 80049a2:	f47f af25 	bne.w	80047f0 <__aeabi_dmul+0x234>
 80049a6:	4610      	mov	r0, r2
 80049a8:	4619      	mov	r1, r3
 80049aa:	e72c      	b.n	8004806 <__aeabi_dmul+0x24a>
 80049ac:	ea95 0f0c 	teq	r5, ip
 80049b0:	d106      	bne.n	80049c0 <__aeabi_ddiv+0x1b0>
 80049b2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80049b6:	f43f aefd 	beq.w	80047b4 <__aeabi_dmul+0x1f8>
 80049ba:	4610      	mov	r0, r2
 80049bc:	4619      	mov	r1, r3
 80049be:	e722      	b.n	8004806 <__aeabi_dmul+0x24a>
 80049c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80049c4:	bf18      	it	ne
 80049c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80049ca:	f47f aec5 	bne.w	8004758 <__aeabi_dmul+0x19c>
 80049ce:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80049d2:	f47f af0d 	bne.w	80047f0 <__aeabi_dmul+0x234>
 80049d6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80049da:	f47f aeeb 	bne.w	80047b4 <__aeabi_dmul+0x1f8>
 80049de:	e712      	b.n	8004806 <__aeabi_dmul+0x24a>

080049e0 <__gedf2>:
 80049e0:	f04f 3cff 	mov.w	ip, #4294967295
 80049e4:	e006      	b.n	80049f4 <__cmpdf2+0x4>
 80049e6:	bf00      	nop

080049e8 <__ledf2>:
 80049e8:	f04f 0c01 	mov.w	ip, #1
 80049ec:	e002      	b.n	80049f4 <__cmpdf2+0x4>
 80049ee:	bf00      	nop

080049f0 <__cmpdf2>:
 80049f0:	f04f 0c01 	mov.w	ip, #1
 80049f4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80049f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80049fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004a04:	bf18      	it	ne
 8004a06:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8004a0a:	d01b      	beq.n	8004a44 <__cmpdf2+0x54>
 8004a0c:	b001      	add	sp, #4
 8004a0e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8004a12:	bf0c      	ite	eq
 8004a14:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8004a18:	ea91 0f03 	teqne	r1, r3
 8004a1c:	bf02      	ittt	eq
 8004a1e:	ea90 0f02 	teqeq	r0, r2
 8004a22:	2000      	moveq	r0, #0
 8004a24:	4770      	bxeq	lr
 8004a26:	f110 0f00 	cmn.w	r0, #0
 8004a2a:	ea91 0f03 	teq	r1, r3
 8004a2e:	bf58      	it	pl
 8004a30:	4299      	cmppl	r1, r3
 8004a32:	bf08      	it	eq
 8004a34:	4290      	cmpeq	r0, r2
 8004a36:	bf2c      	ite	cs
 8004a38:	17d8      	asrcs	r0, r3, #31
 8004a3a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8004a3e:	f040 0001 	orr.w	r0, r0, #1
 8004a42:	4770      	bx	lr
 8004a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004a4c:	d102      	bne.n	8004a54 <__cmpdf2+0x64>
 8004a4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8004a52:	d107      	bne.n	8004a64 <__cmpdf2+0x74>
 8004a54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004a5c:	d1d6      	bne.n	8004a0c <__cmpdf2+0x1c>
 8004a5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8004a62:	d0d3      	beq.n	8004a0c <__cmpdf2+0x1c>
 8004a64:	f85d 0b04 	ldr.w	r0, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop

08004a6c <__aeabi_cdrcmple>:
 8004a6c:	4684      	mov	ip, r0
 8004a6e:	4610      	mov	r0, r2
 8004a70:	4662      	mov	r2, ip
 8004a72:	468c      	mov	ip, r1
 8004a74:	4619      	mov	r1, r3
 8004a76:	4663      	mov	r3, ip
 8004a78:	e000      	b.n	8004a7c <__aeabi_cdcmpeq>
 8004a7a:	bf00      	nop

08004a7c <__aeabi_cdcmpeq>:
 8004a7c:	b501      	push	{r0, lr}
 8004a7e:	f7ff ffb7 	bl	80049f0 <__cmpdf2>
 8004a82:	2800      	cmp	r0, #0
 8004a84:	bf48      	it	mi
 8004a86:	f110 0f00 	cmnmi.w	r0, #0
 8004a8a:	bd01      	pop	{r0, pc}

08004a8c <__aeabi_dcmpeq>:
 8004a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004a90:	f7ff fff4 	bl	8004a7c <__aeabi_cdcmpeq>
 8004a94:	bf0c      	ite	eq
 8004a96:	2001      	moveq	r0, #1
 8004a98:	2000      	movne	r0, #0
 8004a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8004a9e:	bf00      	nop

08004aa0 <__aeabi_dcmplt>:
 8004aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004aa4:	f7ff ffea 	bl	8004a7c <__aeabi_cdcmpeq>
 8004aa8:	bf34      	ite	cc
 8004aaa:	2001      	movcc	r0, #1
 8004aac:	2000      	movcs	r0, #0
 8004aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8004ab2:	bf00      	nop

08004ab4 <__aeabi_dcmple>:
 8004ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004ab8:	f7ff ffe0 	bl	8004a7c <__aeabi_cdcmpeq>
 8004abc:	bf94      	ite	ls
 8004abe:	2001      	movls	r0, #1
 8004ac0:	2000      	movhi	r0, #0
 8004ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8004ac6:	bf00      	nop

08004ac8 <__aeabi_dcmpge>:
 8004ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004acc:	f7ff ffce 	bl	8004a6c <__aeabi_cdrcmple>
 8004ad0:	bf94      	ite	ls
 8004ad2:	2001      	movls	r0, #1
 8004ad4:	2000      	movhi	r0, #0
 8004ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8004ada:	bf00      	nop

08004adc <__aeabi_dcmpgt>:
 8004adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004ae0:	f7ff ffc4 	bl	8004a6c <__aeabi_cdrcmple>
 8004ae4:	bf34      	ite	cc
 8004ae6:	2001      	movcc	r0, #1
 8004ae8:	2000      	movcs	r0, #0
 8004aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8004aee:	bf00      	nop

08004af0 <__aeabi_dcmpun>:
 8004af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004af8:	d102      	bne.n	8004b00 <__aeabi_dcmpun+0x10>
 8004afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8004afe:	d10a      	bne.n	8004b16 <__aeabi_dcmpun+0x26>
 8004b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004b08:	d102      	bne.n	8004b10 <__aeabi_dcmpun+0x20>
 8004b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8004b0e:	d102      	bne.n	8004b16 <__aeabi_dcmpun+0x26>
 8004b10:	f04f 0000 	mov.w	r0, #0
 8004b14:	4770      	bx	lr
 8004b16:	f04f 0001 	mov.w	r0, #1
 8004b1a:	4770      	bx	lr

08004b1c <__aeabi_d2f>:
 8004b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8004b20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8004b24:	bf24      	itt	cs
 8004b26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8004b2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8004b2e:	d90d      	bls.n	8004b4c <__aeabi_d2f+0x30>
 8004b30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8004b34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8004b38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8004b3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8004b40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8004b44:	bf08      	it	eq
 8004b46:	f020 0001 	biceq.w	r0, r0, #1
 8004b4a:	4770      	bx	lr
 8004b4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8004b50:	d121      	bne.n	8004b96 <__aeabi_d2f+0x7a>
 8004b52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8004b56:	bfbc      	itt	lt
 8004b58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8004b5c:	4770      	bxlt	lr
 8004b5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004b62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8004b66:	f1c2 0218 	rsb	r2, r2, #24
 8004b6a:	f1c2 0c20 	rsb	ip, r2, #32
 8004b6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8004b72:	fa20 f002 	lsr.w	r0, r0, r2
 8004b76:	bf18      	it	ne
 8004b78:	f040 0001 	orrne.w	r0, r0, #1
 8004b7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004b80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8004b84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8004b88:	ea40 000c 	orr.w	r0, r0, ip
 8004b8c:	fa23 f302 	lsr.w	r3, r3, r2
 8004b90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004b94:	e7cc      	b.n	8004b30 <__aeabi_d2f+0x14>
 8004b96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8004b9a:	d107      	bne.n	8004bac <__aeabi_d2f+0x90>
 8004b9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8004ba0:	bf1e      	ittt	ne
 8004ba2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8004ba6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8004baa:	4770      	bxne	lr
 8004bac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8004bb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8004bb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop

08004bbc <__aeabi_uldivmod>:
 8004bbc:	b953      	cbnz	r3, 8004bd4 <__aeabi_uldivmod+0x18>
 8004bbe:	b94a      	cbnz	r2, 8004bd4 <__aeabi_uldivmod+0x18>
 8004bc0:	2900      	cmp	r1, #0
 8004bc2:	bf08      	it	eq
 8004bc4:	2800      	cmpeq	r0, #0
 8004bc6:	bf1c      	itt	ne
 8004bc8:	f04f 31ff 	movne.w	r1, #4294967295
 8004bcc:	f04f 30ff 	movne.w	r0, #4294967295
 8004bd0:	f000 b974 	b.w	8004ebc <__aeabi_idiv0>
 8004bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8004bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8004bdc:	f000 f806 	bl	8004bec <__udivmoddi4>
 8004be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004be8:	b004      	add	sp, #16
 8004bea:	4770      	bx	lr

08004bec <__udivmoddi4>:
 8004bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bf0:	9d08      	ldr	r5, [sp, #32]
 8004bf2:	4604      	mov	r4, r0
 8004bf4:	468e      	mov	lr, r1
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d14d      	bne.n	8004c96 <__udivmoddi4+0xaa>
 8004bfa:	428a      	cmp	r2, r1
 8004bfc:	4694      	mov	ip, r2
 8004bfe:	d969      	bls.n	8004cd4 <__udivmoddi4+0xe8>
 8004c00:	fab2 f282 	clz	r2, r2
 8004c04:	b152      	cbz	r2, 8004c1c <__udivmoddi4+0x30>
 8004c06:	fa01 f302 	lsl.w	r3, r1, r2
 8004c0a:	f1c2 0120 	rsb	r1, r2, #32
 8004c0e:	fa20 f101 	lsr.w	r1, r0, r1
 8004c12:	fa0c fc02 	lsl.w	ip, ip, r2
 8004c16:	ea41 0e03 	orr.w	lr, r1, r3
 8004c1a:	4094      	lsls	r4, r2
 8004c1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8004c20:	0c21      	lsrs	r1, r4, #16
 8004c22:	fbbe f6f8 	udiv	r6, lr, r8
 8004c26:	fa1f f78c 	uxth.w	r7, ip
 8004c2a:	fb08 e316 	mls	r3, r8, r6, lr
 8004c2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004c32:	fb06 f107 	mul.w	r1, r6, r7
 8004c36:	4299      	cmp	r1, r3
 8004c38:	d90a      	bls.n	8004c50 <__udivmoddi4+0x64>
 8004c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8004c3e:	f106 30ff 	add.w	r0, r6, #4294967295
 8004c42:	f080 811f 	bcs.w	8004e84 <__udivmoddi4+0x298>
 8004c46:	4299      	cmp	r1, r3
 8004c48:	f240 811c 	bls.w	8004e84 <__udivmoddi4+0x298>
 8004c4c:	3e02      	subs	r6, #2
 8004c4e:	4463      	add	r3, ip
 8004c50:	1a5b      	subs	r3, r3, r1
 8004c52:	b2a4      	uxth	r4, r4
 8004c54:	fbb3 f0f8 	udiv	r0, r3, r8
 8004c58:	fb08 3310 	mls	r3, r8, r0, r3
 8004c5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8004c60:	fb00 f707 	mul.w	r7, r0, r7
 8004c64:	42a7      	cmp	r7, r4
 8004c66:	d90a      	bls.n	8004c7e <__udivmoddi4+0x92>
 8004c68:	eb1c 0404 	adds.w	r4, ip, r4
 8004c6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c70:	f080 810a 	bcs.w	8004e88 <__udivmoddi4+0x29c>
 8004c74:	42a7      	cmp	r7, r4
 8004c76:	f240 8107 	bls.w	8004e88 <__udivmoddi4+0x29c>
 8004c7a:	4464      	add	r4, ip
 8004c7c:	3802      	subs	r0, #2
 8004c7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8004c82:	1be4      	subs	r4, r4, r7
 8004c84:	2600      	movs	r6, #0
 8004c86:	b11d      	cbz	r5, 8004c90 <__udivmoddi4+0xa4>
 8004c88:	40d4      	lsrs	r4, r2
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	e9c5 4300 	strd	r4, r3, [r5]
 8004c90:	4631      	mov	r1, r6
 8004c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c96:	428b      	cmp	r3, r1
 8004c98:	d909      	bls.n	8004cae <__udivmoddi4+0xc2>
 8004c9a:	2d00      	cmp	r5, #0
 8004c9c:	f000 80ef 	beq.w	8004e7e <__udivmoddi4+0x292>
 8004ca0:	2600      	movs	r6, #0
 8004ca2:	e9c5 0100 	strd	r0, r1, [r5]
 8004ca6:	4630      	mov	r0, r6
 8004ca8:	4631      	mov	r1, r6
 8004caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cae:	fab3 f683 	clz	r6, r3
 8004cb2:	2e00      	cmp	r6, #0
 8004cb4:	d14a      	bne.n	8004d4c <__udivmoddi4+0x160>
 8004cb6:	428b      	cmp	r3, r1
 8004cb8:	d302      	bcc.n	8004cc0 <__udivmoddi4+0xd4>
 8004cba:	4282      	cmp	r2, r0
 8004cbc:	f200 80f9 	bhi.w	8004eb2 <__udivmoddi4+0x2c6>
 8004cc0:	1a84      	subs	r4, r0, r2
 8004cc2:	eb61 0303 	sbc.w	r3, r1, r3
 8004cc6:	2001      	movs	r0, #1
 8004cc8:	469e      	mov	lr, r3
 8004cca:	2d00      	cmp	r5, #0
 8004ccc:	d0e0      	beq.n	8004c90 <__udivmoddi4+0xa4>
 8004cce:	e9c5 4e00 	strd	r4, lr, [r5]
 8004cd2:	e7dd      	b.n	8004c90 <__udivmoddi4+0xa4>
 8004cd4:	b902      	cbnz	r2, 8004cd8 <__udivmoddi4+0xec>
 8004cd6:	deff      	udf	#255	; 0xff
 8004cd8:	fab2 f282 	clz	r2, r2
 8004cdc:	2a00      	cmp	r2, #0
 8004cde:	f040 8092 	bne.w	8004e06 <__udivmoddi4+0x21a>
 8004ce2:	eba1 010c 	sub.w	r1, r1, ip
 8004ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8004cea:	fa1f fe8c 	uxth.w	lr, ip
 8004cee:	2601      	movs	r6, #1
 8004cf0:	0c20      	lsrs	r0, r4, #16
 8004cf2:	fbb1 f3f7 	udiv	r3, r1, r7
 8004cf6:	fb07 1113 	mls	r1, r7, r3, r1
 8004cfa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8004cfe:	fb0e f003 	mul.w	r0, lr, r3
 8004d02:	4288      	cmp	r0, r1
 8004d04:	d908      	bls.n	8004d18 <__udivmoddi4+0x12c>
 8004d06:	eb1c 0101 	adds.w	r1, ip, r1
 8004d0a:	f103 38ff 	add.w	r8, r3, #4294967295
 8004d0e:	d202      	bcs.n	8004d16 <__udivmoddi4+0x12a>
 8004d10:	4288      	cmp	r0, r1
 8004d12:	f200 80cb 	bhi.w	8004eac <__udivmoddi4+0x2c0>
 8004d16:	4643      	mov	r3, r8
 8004d18:	1a09      	subs	r1, r1, r0
 8004d1a:	b2a4      	uxth	r4, r4
 8004d1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8004d20:	fb07 1110 	mls	r1, r7, r0, r1
 8004d24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8004d28:	fb0e fe00 	mul.w	lr, lr, r0
 8004d2c:	45a6      	cmp	lr, r4
 8004d2e:	d908      	bls.n	8004d42 <__udivmoddi4+0x156>
 8004d30:	eb1c 0404 	adds.w	r4, ip, r4
 8004d34:	f100 31ff 	add.w	r1, r0, #4294967295
 8004d38:	d202      	bcs.n	8004d40 <__udivmoddi4+0x154>
 8004d3a:	45a6      	cmp	lr, r4
 8004d3c:	f200 80bb 	bhi.w	8004eb6 <__udivmoddi4+0x2ca>
 8004d40:	4608      	mov	r0, r1
 8004d42:	eba4 040e 	sub.w	r4, r4, lr
 8004d46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8004d4a:	e79c      	b.n	8004c86 <__udivmoddi4+0x9a>
 8004d4c:	f1c6 0720 	rsb	r7, r6, #32
 8004d50:	40b3      	lsls	r3, r6
 8004d52:	fa22 fc07 	lsr.w	ip, r2, r7
 8004d56:	ea4c 0c03 	orr.w	ip, ip, r3
 8004d5a:	fa20 f407 	lsr.w	r4, r0, r7
 8004d5e:	fa01 f306 	lsl.w	r3, r1, r6
 8004d62:	431c      	orrs	r4, r3
 8004d64:	40f9      	lsrs	r1, r7
 8004d66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8004d6a:	fa00 f306 	lsl.w	r3, r0, r6
 8004d6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8004d72:	0c20      	lsrs	r0, r4, #16
 8004d74:	fa1f fe8c 	uxth.w	lr, ip
 8004d78:	fb09 1118 	mls	r1, r9, r8, r1
 8004d7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8004d80:	fb08 f00e 	mul.w	r0, r8, lr
 8004d84:	4288      	cmp	r0, r1
 8004d86:	fa02 f206 	lsl.w	r2, r2, r6
 8004d8a:	d90b      	bls.n	8004da4 <__udivmoddi4+0x1b8>
 8004d8c:	eb1c 0101 	adds.w	r1, ip, r1
 8004d90:	f108 3aff 	add.w	sl, r8, #4294967295
 8004d94:	f080 8088 	bcs.w	8004ea8 <__udivmoddi4+0x2bc>
 8004d98:	4288      	cmp	r0, r1
 8004d9a:	f240 8085 	bls.w	8004ea8 <__udivmoddi4+0x2bc>
 8004d9e:	f1a8 0802 	sub.w	r8, r8, #2
 8004da2:	4461      	add	r1, ip
 8004da4:	1a09      	subs	r1, r1, r0
 8004da6:	b2a4      	uxth	r4, r4
 8004da8:	fbb1 f0f9 	udiv	r0, r1, r9
 8004dac:	fb09 1110 	mls	r1, r9, r0, r1
 8004db0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8004db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8004db8:	458e      	cmp	lr, r1
 8004dba:	d908      	bls.n	8004dce <__udivmoddi4+0x1e2>
 8004dbc:	eb1c 0101 	adds.w	r1, ip, r1
 8004dc0:	f100 34ff 	add.w	r4, r0, #4294967295
 8004dc4:	d26c      	bcs.n	8004ea0 <__udivmoddi4+0x2b4>
 8004dc6:	458e      	cmp	lr, r1
 8004dc8:	d96a      	bls.n	8004ea0 <__udivmoddi4+0x2b4>
 8004dca:	3802      	subs	r0, #2
 8004dcc:	4461      	add	r1, ip
 8004dce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8004dd2:	fba0 9402 	umull	r9, r4, r0, r2
 8004dd6:	eba1 010e 	sub.w	r1, r1, lr
 8004dda:	42a1      	cmp	r1, r4
 8004ddc:	46c8      	mov	r8, r9
 8004dde:	46a6      	mov	lr, r4
 8004de0:	d356      	bcc.n	8004e90 <__udivmoddi4+0x2a4>
 8004de2:	d053      	beq.n	8004e8c <__udivmoddi4+0x2a0>
 8004de4:	b15d      	cbz	r5, 8004dfe <__udivmoddi4+0x212>
 8004de6:	ebb3 0208 	subs.w	r2, r3, r8
 8004dea:	eb61 010e 	sbc.w	r1, r1, lr
 8004dee:	fa01 f707 	lsl.w	r7, r1, r7
 8004df2:	fa22 f306 	lsr.w	r3, r2, r6
 8004df6:	40f1      	lsrs	r1, r6
 8004df8:	431f      	orrs	r7, r3
 8004dfa:	e9c5 7100 	strd	r7, r1, [r5]
 8004dfe:	2600      	movs	r6, #0
 8004e00:	4631      	mov	r1, r6
 8004e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e06:	f1c2 0320 	rsb	r3, r2, #32
 8004e0a:	40d8      	lsrs	r0, r3
 8004e0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8004e10:	fa21 f303 	lsr.w	r3, r1, r3
 8004e14:	4091      	lsls	r1, r2
 8004e16:	4301      	orrs	r1, r0
 8004e18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8004e1c:	fa1f fe8c 	uxth.w	lr, ip
 8004e20:	fbb3 f0f7 	udiv	r0, r3, r7
 8004e24:	fb07 3610 	mls	r6, r7, r0, r3
 8004e28:	0c0b      	lsrs	r3, r1, #16
 8004e2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8004e2e:	fb00 f60e 	mul.w	r6, r0, lr
 8004e32:	429e      	cmp	r6, r3
 8004e34:	fa04 f402 	lsl.w	r4, r4, r2
 8004e38:	d908      	bls.n	8004e4c <__udivmoddi4+0x260>
 8004e3a:	eb1c 0303 	adds.w	r3, ip, r3
 8004e3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8004e42:	d22f      	bcs.n	8004ea4 <__udivmoddi4+0x2b8>
 8004e44:	429e      	cmp	r6, r3
 8004e46:	d92d      	bls.n	8004ea4 <__udivmoddi4+0x2b8>
 8004e48:	3802      	subs	r0, #2
 8004e4a:	4463      	add	r3, ip
 8004e4c:	1b9b      	subs	r3, r3, r6
 8004e4e:	b289      	uxth	r1, r1
 8004e50:	fbb3 f6f7 	udiv	r6, r3, r7
 8004e54:	fb07 3316 	mls	r3, r7, r6, r3
 8004e58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8004e5c:	fb06 f30e 	mul.w	r3, r6, lr
 8004e60:	428b      	cmp	r3, r1
 8004e62:	d908      	bls.n	8004e76 <__udivmoddi4+0x28a>
 8004e64:	eb1c 0101 	adds.w	r1, ip, r1
 8004e68:	f106 38ff 	add.w	r8, r6, #4294967295
 8004e6c:	d216      	bcs.n	8004e9c <__udivmoddi4+0x2b0>
 8004e6e:	428b      	cmp	r3, r1
 8004e70:	d914      	bls.n	8004e9c <__udivmoddi4+0x2b0>
 8004e72:	3e02      	subs	r6, #2
 8004e74:	4461      	add	r1, ip
 8004e76:	1ac9      	subs	r1, r1, r3
 8004e78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8004e7c:	e738      	b.n	8004cf0 <__udivmoddi4+0x104>
 8004e7e:	462e      	mov	r6, r5
 8004e80:	4628      	mov	r0, r5
 8004e82:	e705      	b.n	8004c90 <__udivmoddi4+0xa4>
 8004e84:	4606      	mov	r6, r0
 8004e86:	e6e3      	b.n	8004c50 <__udivmoddi4+0x64>
 8004e88:	4618      	mov	r0, r3
 8004e8a:	e6f8      	b.n	8004c7e <__udivmoddi4+0x92>
 8004e8c:	454b      	cmp	r3, r9
 8004e8e:	d2a9      	bcs.n	8004de4 <__udivmoddi4+0x1f8>
 8004e90:	ebb9 0802 	subs.w	r8, r9, r2
 8004e94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8004e98:	3801      	subs	r0, #1
 8004e9a:	e7a3      	b.n	8004de4 <__udivmoddi4+0x1f8>
 8004e9c:	4646      	mov	r6, r8
 8004e9e:	e7ea      	b.n	8004e76 <__udivmoddi4+0x28a>
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	e794      	b.n	8004dce <__udivmoddi4+0x1e2>
 8004ea4:	4640      	mov	r0, r8
 8004ea6:	e7d1      	b.n	8004e4c <__udivmoddi4+0x260>
 8004ea8:	46d0      	mov	r8, sl
 8004eaa:	e77b      	b.n	8004da4 <__udivmoddi4+0x1b8>
 8004eac:	3b02      	subs	r3, #2
 8004eae:	4461      	add	r1, ip
 8004eb0:	e732      	b.n	8004d18 <__udivmoddi4+0x12c>
 8004eb2:	4630      	mov	r0, r6
 8004eb4:	e709      	b.n	8004cca <__udivmoddi4+0xde>
 8004eb6:	4464      	add	r4, ip
 8004eb8:	3802      	subs	r0, #2
 8004eba:	e742      	b.n	8004d42 <__udivmoddi4+0x156>

08004ebc <__aeabi_idiv0>:
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop

08004ec0 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b088      	sub	sp, #32
 8004ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004ec6:	463b      	mov	r3, r7
 8004ec8:	2220      	movs	r2, #32
 8004eca:	2100      	movs	r1, #0
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f013 f8d3 	bl	8018078 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8004ed2:	4b3a      	ldr	r3, [pc, #232]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004ed4:	4a3a      	ldr	r2, [pc, #232]	; (8004fc0 <MX_ADC2_Init+0x100>)
 8004ed6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV128;
 8004ed8:	4b38      	ldr	r3, [pc, #224]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004eda:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
 8004ede:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004ee0:	4b36      	ldr	r3, [pc, #216]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004ee6:	4b35      	ldr	r3, [pc, #212]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8004eec:	4b33      	ldr	r3, [pc, #204]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004eee:	2200      	movs	r2, #0
 8004ef0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004ef2:	4b32      	ldr	r3, [pc, #200]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004ef8:	4b30      	ldr	r3, [pc, #192]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004efa:	2204      	movs	r2, #4
 8004efc:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8004efe:	4b2f      	ldr	r3, [pc, #188]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004f04:	4b2d      	ldr	r3, [pc, #180]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004f06:	2201      	movs	r2, #1
 8004f08:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 3;
 8004f0a:	4b2c      	ldr	r3, [pc, #176]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004f0c:	2203      	movs	r2, #3
 8004f0e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004f10:	4b2a      	ldr	r3, [pc, #168]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004f18:	4b28      	ldr	r3, [pc, #160]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004f1e:	4b27      	ldr	r3, [pc, #156]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8004f24:	4b25      	ldr	r3, [pc, #148]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004f2c:	4b23      	ldr	r3, [pc, #140]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004f2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004f32:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8004f34:	4b21      	ldr	r3, [pc, #132]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004f3c:	481f      	ldr	r0, [pc, #124]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004f3e:	f003 fe21 	bl	8008b84 <HAL_ADC_Init>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d001      	beq.n	8004f4c <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 8004f48:	f002 fbbe 	bl	80076c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004f4c:	4b1d      	ldr	r3, [pc, #116]	; (8004fc4 <MX_ADC2_Init+0x104>)
 8004f4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004f50:	2306      	movs	r3, #6
 8004f52:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8004f54:	2304      	movs	r3, #4
 8004f56:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8004f58:	4b1b      	ldr	r3, [pc, #108]	; (8004fc8 <MX_ADC2_Init+0x108>)
 8004f5a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004f5c:	2304      	movs	r3, #4
 8004f5e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8004f60:	2300      	movs	r3, #0
 8004f62:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004f64:	463b      	mov	r3, r7
 8004f66:	4619      	mov	r1, r3
 8004f68:	4814      	ldr	r0, [pc, #80]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004f6a:	f004 f8bf 	bl	80090ec <HAL_ADC_ConfigChannel>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d001      	beq.n	8004f78 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8004f74:	f002 fba8 	bl	80076c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004f78:	4b14      	ldr	r3, [pc, #80]	; (8004fcc <MX_ADC2_Init+0x10c>)
 8004f7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004f7c:	230c      	movs	r3, #12
 8004f7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004f80:	463b      	mov	r3, r7
 8004f82:	4619      	mov	r1, r3
 8004f84:	480d      	ldr	r0, [pc, #52]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004f86:	f004 f8b1 	bl	80090ec <HAL_ADC_ConfigChannel>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d001      	beq.n	8004f94 <MX_ADC2_Init+0xd4>
  {
    Error_Handler();
 8004f90:	f002 fb9a 	bl	80076c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8004f94:	4b0e      	ldr	r3, [pc, #56]	; (8004fd0 <MX_ADC2_Init+0x110>)
 8004f96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004f98:	2312      	movs	r3, #18
 8004f9a:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004f9c:	237f      	movs	r3, #127	; 0x7f
 8004f9e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004fa0:	463b      	mov	r3, r7
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	4805      	ldr	r0, [pc, #20]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004fa6:	f004 f8a1 	bl	80090ec <HAL_ADC_ConfigChannel>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d001      	beq.n	8004fb4 <MX_ADC2_Init+0xf4>
  {
    Error_Handler();
 8004fb0:	f002 fb8a 	bl	80076c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004fb4:	bf00      	nop
 8004fb6:	3720      	adds	r7, #32
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	2000020c 	.word	0x2000020c
 8004fc0:	50000100 	.word	0x50000100
 8004fc4:	04300002 	.word	0x04300002
 8004fc8:	407f0000 	.word	0x407f0000
 8004fcc:	19200040 	.word	0x19200040
 8004fd0:	2a000400 	.word	0x2a000400

08004fd4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b0a0      	sub	sp, #128	; 0x80
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fdc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	601a      	str	r2, [r3, #0]
 8004fe4:	605a      	str	r2, [r3, #4]
 8004fe6:	609a      	str	r2, [r3, #8]
 8004fe8:	60da      	str	r2, [r3, #12]
 8004fea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004fec:	f107 0318 	add.w	r3, r7, #24
 8004ff0:	2254      	movs	r2, #84	; 0x54
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f013 f83f 	bl	8018078 <memset>
  if(adcHandle->Instance==ADC2)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a4c      	ldr	r2, [pc, #304]	; (8005130 <HAL_ADC_MspInit+0x15c>)
 8005000:	4293      	cmp	r3, r2
 8005002:	f040 8090 	bne.w	8005126 <HAL_ADC_MspInit+0x152>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8005006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800500a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800500c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005010:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005012:	f107 0318 	add.w	r3, r7, #24
 8005016:	4618      	mov	r0, r3
 8005018:	f008 fcbe 	bl	800d998 <HAL_RCCEx_PeriphCLKConfig>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d001      	beq.n	8005026 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8005022:	f002 fb51 	bl	80076c8 <Error_Handler>
    }

    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8005026:	4b43      	ldr	r3, [pc, #268]	; (8005134 <HAL_ADC_MspInit+0x160>)
 8005028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800502a:	4a42      	ldr	r2, [pc, #264]	; (8005134 <HAL_ADC_MspInit+0x160>)
 800502c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005030:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005032:	4b40      	ldr	r3, [pc, #256]	; (8005134 <HAL_ADC_MspInit+0x160>)
 8005034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005036:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800503a:	617b      	str	r3, [r7, #20]
 800503c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800503e:	4b3d      	ldr	r3, [pc, #244]	; (8005134 <HAL_ADC_MspInit+0x160>)
 8005040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005042:	4a3c      	ldr	r2, [pc, #240]	; (8005134 <HAL_ADC_MspInit+0x160>)
 8005044:	f043 0320 	orr.w	r3, r3, #32
 8005048:	64d3      	str	r3, [r2, #76]	; 0x4c
 800504a:	4b3a      	ldr	r3, [pc, #232]	; (8005134 <HAL_ADC_MspInit+0x160>)
 800504c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800504e:	f003 0320 	and.w	r3, r3, #32
 8005052:	613b      	str	r3, [r7, #16]
 8005054:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005056:	4b37      	ldr	r3, [pc, #220]	; (8005134 <HAL_ADC_MspInit+0x160>)
 8005058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800505a:	4a36      	ldr	r2, [pc, #216]	; (8005134 <HAL_ADC_MspInit+0x160>)
 800505c:	f043 0304 	orr.w	r3, r3, #4
 8005060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005062:	4b34      	ldr	r3, [pc, #208]	; (8005134 <HAL_ADC_MspInit+0x160>)
 8005064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005066:	f003 0304 	and.w	r3, r3, #4
 800506a:	60fb      	str	r3, [r7, #12]
 800506c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800506e:	4b31      	ldr	r3, [pc, #196]	; (8005134 <HAL_ADC_MspInit+0x160>)
 8005070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005072:	4a30      	ldr	r2, [pc, #192]	; (8005134 <HAL_ADC_MspInit+0x160>)
 8005074:	f043 0301 	orr.w	r3, r3, #1
 8005078:	64d3      	str	r3, [r2, #76]	; 0x4c
 800507a:	4b2e      	ldr	r3, [pc, #184]	; (8005134 <HAL_ADC_MspInit+0x160>)
 800507c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	60bb      	str	r3, [r7, #8]
 8005084:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC2_IN6
    PC1     ------> ADC2_IN7
    PA0     ------> ADC2_IN1
    PA1     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005086:	2302      	movs	r3, #2
 8005088:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800508a:	2303      	movs	r3, #3
 800508c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800508e:	2300      	movs	r3, #0
 8005090:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005092:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005096:	4619      	mov	r1, r3
 8005098:	4827      	ldr	r0, [pc, #156]	; (8005138 <HAL_ADC_MspInit+0x164>)
 800509a:	f005 f96f 	bl	800a37c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800509e:	2303      	movs	r3, #3
 80050a0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050a2:	2303      	movs	r3, #3
 80050a4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a6:	2300      	movs	r3, #0
 80050a8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050aa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80050ae:	4619      	mov	r1, r3
 80050b0:	4822      	ldr	r0, [pc, #136]	; (800513c <HAL_ADC_MspInit+0x168>)
 80050b2:	f005 f963 	bl	800a37c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80050b6:	2303      	movs	r3, #3
 80050b8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050ba:	2303      	movs	r3, #3
 80050bc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050be:	2300      	movs	r3, #0
 80050c0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050c2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80050c6:	4619      	mov	r1, r3
 80050c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050cc:	f005 f956 	bl	800a37c <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 80050d0:	4b1b      	ldr	r3, [pc, #108]	; (8005140 <HAL_ADC_MspInit+0x16c>)
 80050d2:	4a1c      	ldr	r2, [pc, #112]	; (8005144 <HAL_ADC_MspInit+0x170>)
 80050d4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80050d6:	4b1a      	ldr	r3, [pc, #104]	; (8005140 <HAL_ADC_MspInit+0x16c>)
 80050d8:	2224      	movs	r2, #36	; 0x24
 80050da:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80050dc:	4b18      	ldr	r3, [pc, #96]	; (8005140 <HAL_ADC_MspInit+0x16c>)
 80050de:	2200      	movs	r2, #0
 80050e0:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80050e2:	4b17      	ldr	r3, [pc, #92]	; (8005140 <HAL_ADC_MspInit+0x16c>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80050e8:	4b15      	ldr	r3, [pc, #84]	; (8005140 <HAL_ADC_MspInit+0x16c>)
 80050ea:	2280      	movs	r2, #128	; 0x80
 80050ec:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80050ee:	4b14      	ldr	r3, [pc, #80]	; (8005140 <HAL_ADC_MspInit+0x16c>)
 80050f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050f4:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80050f6:	4b12      	ldr	r3, [pc, #72]	; (8005140 <HAL_ADC_MspInit+0x16c>)
 80050f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050fc:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80050fe:	4b10      	ldr	r3, [pc, #64]	; (8005140 <HAL_ADC_MspInit+0x16c>)
 8005100:	2220      	movs	r2, #32
 8005102:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8005104:	4b0e      	ldr	r3, [pc, #56]	; (8005140 <HAL_ADC_MspInit+0x16c>)
 8005106:	2200      	movs	r2, #0
 8005108:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800510a:	480d      	ldr	r0, [pc, #52]	; (8005140 <HAL_ADC_MspInit+0x16c>)
 800510c:	f004 fe04 	bl	8009d18 <HAL_DMA_Init>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d001      	beq.n	800511a <HAL_ADC_MspInit+0x146>
    {
      Error_Handler();
 8005116:	f002 fad7 	bl	80076c8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a08      	ldr	r2, [pc, #32]	; (8005140 <HAL_ADC_MspInit+0x16c>)
 800511e:	655a      	str	r2, [r3, #84]	; 0x54
 8005120:	4a07      	ldr	r2, [pc, #28]	; (8005140 <HAL_ADC_MspInit+0x16c>)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8005126:	bf00      	nop
 8005128:	3780      	adds	r7, #128	; 0x80
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	50000100 	.word	0x50000100
 8005134:	40021000 	.word	0x40021000
 8005138:	48001400 	.word	0x48001400
 800513c:	48000800 	.word	0x48000800
 8005140:	20000278 	.word	0x20000278
 8005144:	40020008 	.word	0x40020008

08005148 <Battery_ReadBatteryVoltage>:

#include "adc_voltage_current_measurement.h"



void Battery_ReadBatteryVoltage(Battery_t * battery_struct,uint16_t BatteryMonitoringData[]){
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
	battery_struct->BatteryVoltage = (BatteryMonitoringData[BATTERY_VOLTAGE_RANK]*ADC_VOLTAGE_REF)/ADC_BIT_VALUE;
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	3304      	adds	r3, #4
 8005156:	881b      	ldrh	r3, [r3, #0]
 8005158:	4618      	mov	r0, r3
 800515a:	f7ff f9c5 	bl	80044e8 <__aeabi_i2d>
 800515e:	a30f      	add	r3, pc, #60	; (adr r3, 800519c <Battery_ReadBatteryVoltage+0x54>)
 8005160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005164:	f7ff fa2a 	bl	80045bc <__aeabi_dmul>
 8005168:	4602      	mov	r2, r0
 800516a:	460b      	mov	r3, r1
 800516c:	4610      	mov	r0, r2
 800516e:	4619      	mov	r1, r3
 8005170:	f04f 0200 	mov.w	r2, #0
 8005174:	4b08      	ldr	r3, [pc, #32]	; (8005198 <Battery_ReadBatteryVoltage+0x50>)
 8005176:	f7ff fb4b 	bl	8004810 <__aeabi_ddiv>
 800517a:	4602      	mov	r2, r0
 800517c:	460b      	mov	r3, r1
 800517e:	4610      	mov	r0, r2
 8005180:	4619      	mov	r1, r3
 8005182:	f7ff fccb 	bl	8004b1c <__aeabi_d2f>
 8005186:	4602      	mov	r2, r0
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	601a      	str	r2, [r3, #0]
}
 800518c:	bf00      	nop
 800518e:	3708      	adds	r7, #8
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	f3af 8000 	nop.w
 8005198:	40b00000 	.word	0x40b00000
 800519c:	66666666 	.word	0x66666666
 80051a0:	400a6666 	.word	0x400a6666
 80051a4:	00000000 	.word	0x00000000

080051a8 <Battery_ReadCurrent3V3>:

void Battery_ReadCurrent3V3(Battery_t * battery_struct,uint16_t BatteryMonitoringData[]){
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
	float32_t shunt_resistor_voltage = (BatteryMonitoringData[BATTERY_3V3CURR_RANK]*ADC_VOLTAGE_REF)/ADC_BIT_VALUE;
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	3302      	adds	r3, #2
 80051b6:	881b      	ldrh	r3, [r3, #0]
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7ff f995 	bl	80044e8 <__aeabi_i2d>
 80051be:	a319      	add	r3, pc, #100	; (adr r3, 8005224 <Battery_ReadCurrent3V3+0x7c>)
 80051c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c4:	f7ff f9fa 	bl	80045bc <__aeabi_dmul>
 80051c8:	4602      	mov	r2, r0
 80051ca:	460b      	mov	r3, r1
 80051cc:	4610      	mov	r0, r2
 80051ce:	4619      	mov	r1, r3
 80051d0:	f04f 0200 	mov.w	r2, #0
 80051d4:	4b12      	ldr	r3, [pc, #72]	; (8005220 <Battery_ReadCurrent3V3+0x78>)
 80051d6:	f7ff fb1b 	bl	8004810 <__aeabi_ddiv>
 80051da:	4602      	mov	r2, r0
 80051dc:	460b      	mov	r3, r1
 80051de:	4610      	mov	r0, r2
 80051e0:	4619      	mov	r1, r3
 80051e2:	f7ff fc9b 	bl	8004b1c <__aeabi_d2f>
 80051e6:	4603      	mov	r3, r0
 80051e8:	60fb      	str	r3, [r7, #12]
	battery_struct->CurrentConsumption3V3 = shunt_resistor_voltage/SHUNT_RESISTOR_VALUE;
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f7ff f98e 	bl	800450c <__aeabi_f2d>
 80051f0:	a309      	add	r3, pc, #36	; (adr r3, 8005218 <Battery_ReadCurrent3V3+0x70>)
 80051f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f6:	f7ff fb0b 	bl	8004810 <__aeabi_ddiv>
 80051fa:	4602      	mov	r2, r0
 80051fc:	460b      	mov	r3, r1
 80051fe:	4610      	mov	r0, r2
 8005200:	4619      	mov	r1, r3
 8005202:	f7ff fc8b 	bl	8004b1c <__aeabi_d2f>
 8005206:	4602      	mov	r2, r0
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	605a      	str	r2, [r3, #4]
}
 800520c:	bf00      	nop
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	f3af 8000 	nop.w
 8005218:	d2f1a9fc 	.word	0xd2f1a9fc
 800521c:	3f60624d 	.word	0x3f60624d
 8005220:	40b00000 	.word	0x40b00000
 8005224:	66666666 	.word	0x66666666
 8005228:	400a6666 	.word	0x400a6666
 800522c:	00000000 	.word	0x00000000

08005230 <Battery_ReadCurrent5V>:

void Battery_ReadCurrent5V(Battery_t * battery_struct,uint16_t BatteryMonitoringData[]){
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
	float32_t shunt_resistor_voltage = (BatteryMonitoringData[BATTERY_5VCURR_RANK]*ADC_VOLTAGE_REF)/ADC_BIT_VALUE;
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	881b      	ldrh	r3, [r3, #0]
 800523e:	4618      	mov	r0, r3
 8005240:	f7ff f952 	bl	80044e8 <__aeabi_i2d>
 8005244:	a319      	add	r3, pc, #100	; (adr r3, 80052ac <Battery_ReadCurrent5V+0x7c>)
 8005246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524a:	f7ff f9b7 	bl	80045bc <__aeabi_dmul>
 800524e:	4602      	mov	r2, r0
 8005250:	460b      	mov	r3, r1
 8005252:	4610      	mov	r0, r2
 8005254:	4619      	mov	r1, r3
 8005256:	f04f 0200 	mov.w	r2, #0
 800525a:	4b13      	ldr	r3, [pc, #76]	; (80052a8 <Battery_ReadCurrent5V+0x78>)
 800525c:	f7ff fad8 	bl	8004810 <__aeabi_ddiv>
 8005260:	4602      	mov	r2, r0
 8005262:	460b      	mov	r3, r1
 8005264:	4610      	mov	r0, r2
 8005266:	4619      	mov	r1, r3
 8005268:	f7ff fc58 	bl	8004b1c <__aeabi_d2f>
 800526c:	4603      	mov	r3, r0
 800526e:	60fb      	str	r3, [r7, #12]
	battery_struct->CurrentConsumption5V = shunt_resistor_voltage/SHUNT_RESISTOR_VALUE;
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f7ff f94b 	bl	800450c <__aeabi_f2d>
 8005276:	a30a      	add	r3, pc, #40	; (adr r3, 80052a0 <Battery_ReadCurrent5V+0x70>)
 8005278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527c:	f7ff fac8 	bl	8004810 <__aeabi_ddiv>
 8005280:	4602      	mov	r2, r0
 8005282:	460b      	mov	r3, r1
 8005284:	4610      	mov	r0, r2
 8005286:	4619      	mov	r1, r3
 8005288:	f7ff fc48 	bl	8004b1c <__aeabi_d2f>
 800528c:	4602      	mov	r2, r0
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	609a      	str	r2, [r3, #8]
}
 8005292:	bf00      	nop
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	f3af 8000 	nop.w
 80052a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80052a4:	3f60624d 	.word	0x3f60624d
 80052a8:	40b00000 	.word	0x40b00000
 80052ac:	66666666 	.word	0x66666666
 80052b0:	400a6666 	.word	0x400a6666
 80052b4:	00000000 	.word	0x00000000

080052b8 <Battery_RemaningTime>:

void Battery_RemaningTime(Battery_t * battery_struct){
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]

	float32_t current_average = battery_struct->CurrentConsumption3V3 + battery_struct->CurrentConsumption5V;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	ed93 7a01 	vldr	s14, [r3, #4]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80052cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052d0:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t battery_remaining_hour = BATTERRY_CAPACITY/current_average;
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f7ff f919 	bl	800450c <__aeabi_f2d>
 80052da:	4602      	mov	r2, r0
 80052dc:	460b      	mov	r3, r1
 80052de:	a10f      	add	r1, pc, #60	; (adr r1, 800531c <Battery_RemaningTime+0x64>)
 80052e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052e4:	f7ff fa94 	bl	8004810 <__aeabi_ddiv>
 80052e8:	4602      	mov	r2, r0
 80052ea:	460b      	mov	r3, r1
 80052ec:	4610      	mov	r0, r2
 80052ee:	4619      	mov	r1, r3
 80052f0:	f7ff fc14 	bl	8004b1c <__aeabi_d2f>
 80052f4:	4603      	mov	r3, r0
 80052f6:	60bb      	str	r3, [r7, #8]
	battery_struct->battery_left_ms = (battery_remaining_hour*3600000);
 80052f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80052fc:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005318 <Battery_RemaningTime+0x60>
 8005300:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005304:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005308:	ee17 2a90 	vmov	r2, s15
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	60da      	str	r2, [r3, #12]
}
 8005310:	bf00      	nop
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	4a5bba00 	.word	0x4a5bba00
 800531c:	9999999a 	.word	0x9999999a
 8005320:	40019999 	.word	0x40019999

08005324 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8005324:	b5b0      	push	{r4, r5, r7, lr}
 8005326:	b0b8      	sub	sp, #224	; 0xe0
 8005328:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN Init */

	/*Configure output for timer*/
	PropulsionAndControl_Init(&HDW_CONTROLLER_struct, ESC_GPIO_PIN, ESC_GPIO_PORT, SERVO_LEFT_GPIO_PIN, SERVO_LEFT_GPIO_PORT, SERVO_RIGHT_GPIO_PIN, SERVO_RIGHT_GPIO_PORT, ESC_TIMER_CHANNEL_NBR, SERVO_LEFT_TIMER_CHANNEL_NBR, SERVO_RIGHT_TIMER_CHANNEL_NBR, &htim4);
 800532a:	4b6b      	ldr	r3, [pc, #428]	; (80054d8 <MX_FREERTOS_Init+0x1b4>)
 800532c:	9306      	str	r3, [sp, #24]
 800532e:	2302      	movs	r3, #2
 8005330:	9305      	str	r3, [sp, #20]
 8005332:	2301      	movs	r3, #1
 8005334:	9304      	str	r3, [sp, #16]
 8005336:	2304      	movs	r3, #4
 8005338:	9303      	str	r3, [sp, #12]
 800533a:	4b68      	ldr	r3, [pc, #416]	; (80054dc <MX_FREERTOS_Init+0x1b8>)
 800533c:	9302      	str	r3, [sp, #8]
 800533e:	2380      	movs	r3, #128	; 0x80
 8005340:	9301      	str	r3, [sp, #4]
 8005342:	4b66      	ldr	r3, [pc, #408]	; (80054dc <MX_FREERTOS_Init+0x1b8>)
 8005344:	9300      	str	r3, [sp, #0]
 8005346:	2340      	movs	r3, #64	; 0x40
 8005348:	4a64      	ldr	r2, [pc, #400]	; (80054dc <MX_FREERTOS_Init+0x1b8>)
 800534a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800534e:	4864      	ldr	r0, [pc, #400]	; (80054e0 <MX_FREERTOS_Init+0x1bc>)
 8005350:	f002 fc30 	bl	8007bb4 <PropulsionAndControl_Init>

	/*Init for IMU sensors*/
	BNO055_Init(&hi2c2, &IMU_BNO055_struct);
 8005354:	4963      	ldr	r1, [pc, #396]	; (80054e4 <MX_FREERTOS_Init+0x1c0>)
 8005356:	4864      	ldr	r0, [pc, #400]	; (80054e8 <MX_FREERTOS_Init+0x1c4>)
 8005358:	f000 fe2d 	bl	8005fb6 <BNO055_Init>


  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of I2C_Controller */
  osMutexDef(I2C_Controller);
 800535c:	2300      	movs	r3, #0
 800535e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  I2C_ControllerHandle = osMutexCreate(osMutex(I2C_Controller));
 8005362:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005366:	4618      	mov	r0, r3
 8005368:	f010 f877 	bl	801545a <osMutexCreate>
 800536c:	4603      	mov	r3, r0
 800536e:	4a5f      	ldr	r2, [pc, #380]	; (80054ec <MX_FREERTOS_Init+0x1c8>)
 8005370:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of GPS_UART_Semaphore */
  osSemaphoreDef(GPS_UART_Semaphore);
 8005372:	2300      	movs	r3, #0
 8005374:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  GPS_UART_SemaphoreHandle = osSemaphoreCreate(osSemaphore(GPS_UART_Semaphore), 1);
 8005378:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800537c:	2101      	movs	r1, #1
 800537e:	4618      	mov	r0, r3
 8005380:	f010 f877 	bl	8015472 <osSemaphoreCreate>
 8005384:	4603      	mov	r3, r0
 8005386:	4a5a      	ldr	r2, [pc, #360]	; (80054f0 <MX_FREERTOS_Init+0x1cc>)
 8005388:	6013      	str	r3, [r2, #0]

  /* definition and creation of HG_PROTECTION_SEM */
  osSemaphoreDef(HG_PROTECTION_SEM);
 800538a:	2300      	movs	r3, #0
 800538c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  HG_PROTECTION_SEMHandle = osSemaphoreCreate(osSemaphore(HG_PROTECTION_SEM), 1);
 8005390:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005394:	2101      	movs	r1, #1
 8005396:	4618      	mov	r0, r3
 8005398:	f010 f86b 	bl	8015472 <osSemaphoreCreate>
 800539c:	4603      	mov	r3, r0
 800539e:	4a55      	ldr	r2, [pc, #340]	; (80054f4 <MX_FREERTOS_Init+0x1d0>)
 80053a0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of LedTask */
  osThreadDef(LedTask, StartLedTask, osPriorityNormal, 0, 128);
 80053a2:	4b55      	ldr	r3, [pc, #340]	; (80054f8 <MX_FREERTOS_Init+0x1d4>)
 80053a4:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 80053a8:	461d      	mov	r5, r3
 80053aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053ae:	682b      	ldr	r3, [r5, #0]
 80053b0:	6023      	str	r3, [r4, #0]
  LedTaskHandle = osThreadCreate(osThread(LedTask), NULL);
 80053b2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80053b6:	2100      	movs	r1, #0
 80053b8:	4618      	mov	r0, r3
 80053ba:	f010 f813 	bl	80153e4 <osThreadCreate>
 80053be:	4603      	mov	r3, r0
 80053c0:	4a4e      	ldr	r2, [pc, #312]	; (80054fc <MX_FREERTOS_Init+0x1d8>)
 80053c2:	6013      	str	r3, [r2, #0]

  /* definition and creation of Roll_PID */
  osThreadDef(Roll_PID, StartRoll_PID, osPriorityLow, 0, 128);
 80053c4:	4b4e      	ldr	r3, [pc, #312]	; (8005500 <MX_FREERTOS_Init+0x1dc>)
 80053c6:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80053ca:	461d      	mov	r5, r3
 80053cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053d0:	682b      	ldr	r3, [r5, #0]
 80053d2:	6023      	str	r3, [r4, #0]
  Roll_PIDHandle = osThreadCreate(osThread(Roll_PID), NULL);
 80053d4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80053d8:	2100      	movs	r1, #0
 80053da:	4618      	mov	r0, r3
 80053dc:	f010 f802 	bl	80153e4 <osThreadCreate>
 80053e0:	4603      	mov	r3, r0
 80053e2:	4a48      	ldr	r2, [pc, #288]	; (8005504 <MX_FREERTOS_Init+0x1e0>)
 80053e4:	6013      	str	r3, [r2, #0]

  /* definition and creation of Pitch_PID */
  osThreadDef(Pitch_PID, StartPitch_PID, osPriorityLow, 0, 128);
 80053e6:	4b48      	ldr	r3, [pc, #288]	; (8005508 <MX_FREERTOS_Init+0x1e4>)
 80053e8:	f107 0478 	add.w	r4, r7, #120	; 0x78
 80053ec:	461d      	mov	r5, r3
 80053ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053f2:	682b      	ldr	r3, [r5, #0]
 80053f4:	6023      	str	r3, [r4, #0]
  Pitch_PIDHandle = osThreadCreate(osThread(Pitch_PID), NULL);
 80053f6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80053fa:	2100      	movs	r1, #0
 80053fc:	4618      	mov	r0, r3
 80053fe:	f00f fff1 	bl	80153e4 <osThreadCreate>
 8005402:	4603      	mov	r3, r0
 8005404:	4a41      	ldr	r2, [pc, #260]	; (800550c <MX_FREERTOS_Init+0x1e8>)
 8005406:	6013      	str	r3, [r2, #0]

  /* definition and creation of Yaw_PID */
  osThreadDef(Yaw_PID, StartYaw_PID, osPriorityLow, 0, 128);
 8005408:	4b41      	ldr	r3, [pc, #260]	; (8005510 <MX_FREERTOS_Init+0x1ec>)
 800540a:	f107 0464 	add.w	r4, r7, #100	; 0x64
 800540e:	461d      	mov	r5, r3
 8005410:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005414:	682b      	ldr	r3, [r5, #0]
 8005416:	6023      	str	r3, [r4, #0]
  Yaw_PIDHandle = osThreadCreate(osThread(Yaw_PID), NULL);
 8005418:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800541c:	2100      	movs	r1, #0
 800541e:	4618      	mov	r0, r3
 8005420:	f00f ffe0 	bl	80153e4 <osThreadCreate>
 8005424:	4603      	mov	r3, r0
 8005426:	4a3b      	ldr	r2, [pc, #236]	; (8005514 <MX_FREERTOS_Init+0x1f0>)
 8005428:	6013      	str	r3, [r2, #0]

  /* definition and creation of PressureMonitor */
  osThreadDef(PressureMonitor, StartPressureMonitor, osPriorityLow, 0, 128);
 800542a:	4b3b      	ldr	r3, [pc, #236]	; (8005518 <MX_FREERTOS_Init+0x1f4>)
 800542c:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8005430:	461d      	mov	r5, r3
 8005432:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005434:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005436:	682b      	ldr	r3, [r5, #0]
 8005438:	6023      	str	r3, [r4, #0]
  PressureMonitorHandle = osThreadCreate(osThread(PressureMonitor), NULL);
 800543a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800543e:	2100      	movs	r1, #0
 8005440:	4618      	mov	r0, r3
 8005442:	f00f ffcf 	bl	80153e4 <osThreadCreate>
 8005446:	4603      	mov	r3, r0
 8005448:	4a34      	ldr	r2, [pc, #208]	; (800551c <MX_FREERTOS_Init+0x1f8>)
 800544a:	6013      	str	r3, [r2, #0]

  /* definition and creation of GPS */
  osThreadDef(GPS, StartGPS, osPriorityLow, 0, 128);
 800544c:	4b34      	ldr	r3, [pc, #208]	; (8005520 <MX_FREERTOS_Init+0x1fc>)
 800544e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8005452:	461d      	mov	r5, r3
 8005454:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005456:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005458:	682b      	ldr	r3, [r5, #0]
 800545a:	6023      	str	r3, [r4, #0]
  GPSHandle = osThreadCreate(osThread(GPS), NULL);
 800545c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005460:	2100      	movs	r1, #0
 8005462:	4618      	mov	r0, r3
 8005464:	f00f ffbe 	bl	80153e4 <osThreadCreate>
 8005468:	4603      	mov	r3, r0
 800546a:	4a2e      	ldr	r2, [pc, #184]	; (8005524 <MX_FREERTOS_Init+0x200>)
 800546c:	6013      	str	r3, [r2, #0]

  /* definition and creation of MainTask */
  osThreadDef(MainTask, StartMainTask, osPriorityLow, 0, 256);
 800546e:	4b2e      	ldr	r3, [pc, #184]	; (8005528 <MX_FREERTOS_Init+0x204>)
 8005470:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005474:	461d      	mov	r5, r3
 8005476:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005478:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800547a:	682b      	ldr	r3, [r5, #0]
 800547c:	6023      	str	r3, [r4, #0]
  MainTaskHandle = osThreadCreate(osThread(MainTask), NULL);
 800547e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005482:	2100      	movs	r1, #0
 8005484:	4618      	mov	r0, r3
 8005486:	f00f ffad 	bl	80153e4 <osThreadCreate>
 800548a:	4603      	mov	r3, r0
 800548c:	4a27      	ldr	r2, [pc, #156]	; (800552c <MX_FREERTOS_Init+0x208>)
 800548e:	6013      	str	r3, [r2, #0]

  /* definition and creation of BatteryMonitori */
  osThreadDef(BatteryMonitori, StartBatteryMonitoring, osPriorityLow, 0, 128);
 8005490:	4b27      	ldr	r3, [pc, #156]	; (8005530 <MX_FREERTOS_Init+0x20c>)
 8005492:	f107 0414 	add.w	r4, r7, #20
 8005496:	461d      	mov	r5, r3
 8005498:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800549a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800549c:	682b      	ldr	r3, [r5, #0]
 800549e:	6023      	str	r3, [r4, #0]
  BatteryMonitoriHandle = osThreadCreate(osThread(BatteryMonitori), NULL);
 80054a0:	f107 0314 	add.w	r3, r7, #20
 80054a4:	2100      	movs	r1, #0
 80054a6:	4618      	mov	r0, r3
 80054a8:	f00f ff9c 	bl	80153e4 <osThreadCreate>
 80054ac:	4603      	mov	r3, r0
 80054ae:	4a21      	ldr	r2, [pc, #132]	; (8005534 <MX_FREERTOS_Init+0x210>)
 80054b0:	6013      	str	r3, [r2, #0]

  /* definition and creation of Telemetry */
  osThreadDef(Telemetry, StartTelemetry, osPriorityIdle, 0, 256);
 80054b2:	4b21      	ldr	r3, [pc, #132]	; (8005538 <MX_FREERTOS_Init+0x214>)
 80054b4:	463c      	mov	r4, r7
 80054b6:	461d      	mov	r5, r3
 80054b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054bc:	682b      	ldr	r3, [r5, #0]
 80054be:	6023      	str	r3, [r4, #0]
  TelemetryHandle = osThreadCreate(osThread(Telemetry), NULL);
 80054c0:	463b      	mov	r3, r7
 80054c2:	2100      	movs	r1, #0
 80054c4:	4618      	mov	r0, r3
 80054c6:	f00f ff8d 	bl	80153e4 <osThreadCreate>
 80054ca:	4603      	mov	r3, r0
 80054cc:	4a1b      	ldr	r2, [pc, #108]	; (800553c <MX_FREERTOS_Init+0x218>)
 80054ce:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80054d0:	bf00      	nop
 80054d2:	37c0      	adds	r7, #192	; 0xc0
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bdb0      	pop	{r4, r5, r7, pc}
 80054d8:	20000a2c 	.word	0x20000a2c
 80054dc:	48000400 	.word	0x48000400
 80054e0:	2000047c 	.word	0x2000047c
 80054e4:	200003c0 	.word	0x200003c0
 80054e8:	20000374 	.word	0x20000374
 80054ec:	20000368 	.word	0x20000368
 80054f0:	2000036c 	.word	0x2000036c
 80054f4:	20000370 	.word	0x20000370
 80054f8:	0801924c 	.word	0x0801924c
 80054fc:	20000344 	.word	0x20000344
 8005500:	08019260 	.word	0x08019260
 8005504:	20000348 	.word	0x20000348
 8005508:	08019274 	.word	0x08019274
 800550c:	2000034c 	.word	0x2000034c
 8005510:	08019288 	.word	0x08019288
 8005514:	20000350 	.word	0x20000350
 8005518:	0801929c 	.word	0x0801929c
 800551c:	20000354 	.word	0x20000354
 8005520:	080192b0 	.word	0x080192b0
 8005524:	20000358 	.word	0x20000358
 8005528:	080192c4 	.word	0x080192c4
 800552c:	2000035c 	.word	0x2000035c
 8005530:	080192d8 	.word	0x080192d8
 8005534:	20000360 	.word	0x20000360
 8005538:	080192ec 	.word	0x080192ec
 800553c:	20000364 	.word	0x20000364

08005540 <StartLedTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLedTask */
void StartLedTask(void const * argument)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	/*htim3.Instance->CCR1 = 1000;
	vTaskDelay(100);
	htim3.Instance->CCR1 = 0;*/
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8005548:	f44f 7100 	mov.w	r1, #512	; 0x200
 800554c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005550:	f005 f8ae 	bl	800a6b0 <HAL_GPIO_TogglePin>
    vTaskDelay(5000);
 8005554:	f241 3088 	movw	r0, #5000	; 0x1388
 8005558:	f010 fdf6 	bl	8016148 <vTaskDelay>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800555c:	e7f4      	b.n	8005548 <StartLedTask+0x8>
	...

08005560 <StartRoll_PID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRoll_PID */
void StartRoll_PID(void const * argument)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRoll_PID */


	/*PID factor init*/
	Pid_Init(&hpid_roll, PID_KP_ROLL, PID_KI_ROLL, PID_KD_ROLL);
 8005568:	ed9f 1a11 	vldr	s2, [pc, #68]	; 80055b0 <StartRoll_PID+0x50>
 800556c:	eddf 0a11 	vldr	s1, [pc, #68]	; 80055b4 <StartRoll_PID+0x54>
 8005570:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80055b8 <StartRoll_PID+0x58>
 8005574:	4811      	ldr	r0, [pc, #68]	; (80055bc <StartRoll_PID+0x5c>)
 8005576:	f002 f8f7 	bl	8007768 <Pid_Init>

  /* Infinite loop */
	for(;;)
	{	/*Read roll axis data*/
		xSemaphoreTake(I2C_ControllerHandle,25);
 800557a:	4b11      	ldr	r3, [pc, #68]	; (80055c0 <StartRoll_PID+0x60>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2119      	movs	r1, #25
 8005580:	4618      	mov	r0, r3
 8005582:	f010 fa9f 	bl	8015ac4 <xQueueSemaphoreTake>
		BNO055_ReadEuler_Roll(&hi2c2, &IMU_BNO055_struct);
 8005586:	490f      	ldr	r1, [pc, #60]	; (80055c4 <StartRoll_PID+0x64>)
 8005588:	480f      	ldr	r0, [pc, #60]	; (80055c8 <StartRoll_PID+0x68>)
 800558a:	f000 fe8f 	bl	80062ac <BNO055_ReadEuler_Roll>
		xSemaphoreGive(I2C_ControllerHandle);
 800558e:	4b0c      	ldr	r3, [pc, #48]	; (80055c0 <StartRoll_PID+0x60>)
 8005590:	6818      	ldr	r0, [r3, #0]
 8005592:	2300      	movs	r3, #0
 8005594:	2200      	movs	r2, #0
 8005596:	2100      	movs	r1, #0
 8005598:	f010 f920 	bl	80157dc <xQueueGenericSend>

		/*Compensate PID*/
		Pid_CompensateRoll(&hpid_roll, &COMMAND_struct, &IMU_BNO055_struct, &HDW_CONTROLLER_struct);
 800559c:	4b0b      	ldr	r3, [pc, #44]	; (80055cc <StartRoll_PID+0x6c>)
 800559e:	4a09      	ldr	r2, [pc, #36]	; (80055c4 <StartRoll_PID+0x64>)
 80055a0:	490b      	ldr	r1, [pc, #44]	; (80055d0 <StartRoll_PID+0x70>)
 80055a2:	4806      	ldr	r0, [pc, #24]	; (80055bc <StartRoll_PID+0x5c>)
 80055a4:	f002 f93e 	bl	8007824 <Pid_CompensateRoll>
		vTaskDelay(150);
 80055a8:	2096      	movs	r0, #150	; 0x96
 80055aa:	f010 fdcd 	bl	8016148 <vTaskDelay>
		xSemaphoreTake(I2C_ControllerHandle,25);
 80055ae:	e7e4      	b.n	800557a <StartRoll_PID+0x1a>
 80055b0:	bdb15662 	.word	0xbdb15662
 80055b4:	bce59984 	.word	0xbce59984
 80055b8:	be07bf5a 	.word	0xbe07bf5a
 80055bc:	20000320 	.word	0x20000320
 80055c0:	20000368 	.word	0x20000368
 80055c4:	200003c0 	.word	0x200003c0
 80055c8:	20000374 	.word	0x20000374
 80055cc:	2000047c 	.word	0x2000047c
 80055d0:	20000468 	.word	0x20000468

080055d4 <StartPitch_PID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPitch_PID */
void StartPitch_PID(void const * argument)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPitch_PID */
	Pid_Init(&hpid_pitch, PID_KP_PITCH, PID_KI_PITCH, PID_KD_PITCH);
 80055dc:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 80055e0:	eddf 0a10 	vldr	s1, [pc, #64]	; 8005624 <StartPitch_PID+0x50>
 80055e4:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8005628 <StartPitch_PID+0x54>
 80055e8:	4810      	ldr	r0, [pc, #64]	; (800562c <StartPitch_PID+0x58>)
 80055ea:	f002 f8bd 	bl	8007768 <Pid_Init>
  /* Infinite loop */
  for(;;)
  {
	  	/*Read pitch axis data*/
		xSemaphoreTake(I2C_ControllerHandle,25);
 80055ee:	4b10      	ldr	r3, [pc, #64]	; (8005630 <StartPitch_PID+0x5c>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2119      	movs	r1, #25
 80055f4:	4618      	mov	r0, r3
 80055f6:	f010 fa65 	bl	8015ac4 <xQueueSemaphoreTake>
		BNO055_ReadEuler_Pitch(&hi2c2, &IMU_BNO055_struct);
 80055fa:	490e      	ldr	r1, [pc, #56]	; (8005634 <StartPitch_PID+0x60>)
 80055fc:	480e      	ldr	r0, [pc, #56]	; (8005638 <StartPitch_PID+0x64>)
 80055fe:	f000 fea7 	bl	8006350 <BNO055_ReadEuler_Pitch>
		xSemaphoreGive(I2C_ControllerHandle);
 8005602:	4b0b      	ldr	r3, [pc, #44]	; (8005630 <StartPitch_PID+0x5c>)
 8005604:	6818      	ldr	r0, [r3, #0]
 8005606:	2300      	movs	r3, #0
 8005608:	2200      	movs	r2, #0
 800560a:	2100      	movs	r1, #0
 800560c:	f010 f8e6 	bl	80157dc <xQueueGenericSend>

		/*Compensate PID */
		Pid_CompensatePitch(&hpid_pitch, &COMMAND_struct, &IMU_BNO055_struct, &HDW_CONTROLLER_struct);
 8005610:	4b0a      	ldr	r3, [pc, #40]	; (800563c <StartPitch_PID+0x68>)
 8005612:	4a08      	ldr	r2, [pc, #32]	; (8005634 <StartPitch_PID+0x60>)
 8005614:	490a      	ldr	r1, [pc, #40]	; (8005640 <StartPitch_PID+0x6c>)
 8005616:	4805      	ldr	r0, [pc, #20]	; (800562c <StartPitch_PID+0x58>)
 8005618:	f002 f9ca 	bl	80079b0 <Pid_CompensatePitch>
		vTaskDelay(150);
 800561c:	2096      	movs	r0, #150	; 0x96
 800561e:	f010 fd93 	bl	8016148 <vTaskDelay>
		xSemaphoreTake(I2C_ControllerHandle,25);
 8005622:	e7e4      	b.n	80055ee <StartPitch_PID+0x1a>
 8005624:	3ccccccd 	.word	0x3ccccccd
 8005628:	42c80000 	.word	0x42c80000
 800562c:	200002d8 	.word	0x200002d8
 8005630:	20000368 	.word	0x20000368
 8005634:	200003c0 	.word	0x200003c0
 8005638:	20000374 	.word	0x20000374
 800563c:	2000047c 	.word	0x2000047c
 8005640:	20000468 	.word	0x20000468

08005644 <StartYaw_PID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartYaw_PID */
void StartYaw_PID(void const * argument)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartYaw_PID */
	Pid_Init(&hpid_yaw, PID_KP_YAW, PID_KI_YAW, PID_KD_YAW);
 800564c:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 8005650:	eddf 0a10 	vldr	s1, [pc, #64]	; 8005694 <StartYaw_PID+0x50>
 8005654:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8005698 <StartYaw_PID+0x54>
 8005658:	4810      	ldr	r0, [pc, #64]	; (800569c <StartYaw_PID+0x58>)
 800565a:	f002 f885 	bl	8007768 <Pid_Init>
  /* Infinite loop */
  for(;;)
  {
	  	/*Read yaw axis data*/
		xSemaphoreTake(I2C_ControllerHandle,25);
 800565e:	4b10      	ldr	r3, [pc, #64]	; (80056a0 <StartYaw_PID+0x5c>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2119      	movs	r1, #25
 8005664:	4618      	mov	r0, r3
 8005666:	f010 fa2d 	bl	8015ac4 <xQueueSemaphoreTake>
		BNO055_ReadEuler_Yaw(&hi2c2, &IMU_BNO055_struct);
 800566a:	490e      	ldr	r1, [pc, #56]	; (80056a4 <StartYaw_PID+0x60>)
 800566c:	480e      	ldr	r0, [pc, #56]	; (80056a8 <StartYaw_PID+0x64>)
 800566e:	f000 fec1 	bl	80063f4 <BNO055_ReadEuler_Yaw>
		xSemaphoreGive(I2C_ControllerHandle);
 8005672:	4b0b      	ldr	r3, [pc, #44]	; (80056a0 <StartYaw_PID+0x5c>)
 8005674:	6818      	ldr	r0, [r3, #0]
 8005676:	2300      	movs	r3, #0
 8005678:	2200      	movs	r2, #0
 800567a:	2100      	movs	r1, #0
 800567c:	f010 f8ae 	bl	80157dc <xQueueGenericSend>

		/*Compensate PID step 1 - error calculation */
		Pid_CompensateYaw(&hpid_yaw, &COMMAND_struct, &IMU_BNO055_struct, &HDW_CONTROLLER_struct);
 8005680:	4b0a      	ldr	r3, [pc, #40]	; (80056ac <StartYaw_PID+0x68>)
 8005682:	4a08      	ldr	r2, [pc, #32]	; (80056a4 <StartYaw_PID+0x60>)
 8005684:	490a      	ldr	r1, [pc, #40]	; (80056b0 <StartYaw_PID+0x6c>)
 8005686:	4805      	ldr	r0, [pc, #20]	; (800569c <StartYaw_PID+0x58>)
 8005688:	f002 f889 	bl	800779e <Pid_CompensateYaw>
		vTaskDelay(150);
 800568c:	2096      	movs	r0, #150	; 0x96
 800568e:	f010 fd5b 	bl	8016148 <vTaskDelay>
		xSemaphoreTake(I2C_ControllerHandle,25);
 8005692:	e7e4      	b.n	800565e <StartYaw_PID+0x1a>
 8005694:	3ccccccd 	.word	0x3ccccccd
 8005698:	42c80000 	.word	0x42c80000
 800569c:	200002fc 	.word	0x200002fc
 80056a0:	20000368 	.word	0x20000368
 80056a4:	200003c0 	.word	0x200003c0
 80056a8:	20000374 	.word	0x20000374
 80056ac:	2000047c 	.word	0x2000047c
 80056b0:	20000468 	.word	0x20000468

080056b4 <StartPressureMonitor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPressureMonitor */
void StartPressureMonitor(void const * argument)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPressureMonitor */
	BMP390_Init(&hi2c2);
 80056bc:	480f      	ldr	r0, [pc, #60]	; (80056fc <StartPressureMonitor+0x48>)
 80056be:	f000 f9ed 	bl	8005a9c <BMP390_Init>

	/*Barometer calibration*/
	BMP390_GetP0Pressure(&hi2c2, &ALTIMETER_struct, I2C_ControllerHandle);
 80056c2:	4b0f      	ldr	r3, [pc, #60]	; (8005700 <StartPressureMonitor+0x4c>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	461a      	mov	r2, r3
 80056c8:	490e      	ldr	r1, [pc, #56]	; (8005704 <StartPressureMonitor+0x50>)
 80056ca:	480c      	ldr	r0, [pc, #48]	; (80056fc <StartPressureMonitor+0x48>)
 80056cc:	f000 fa30 	bl	8005b30 <BMP390_GetP0Pressure>

  /* Infinite loop */
  for(;;)
  {
	  BMP390_ReadPress(&hi2c2,&ALTIMETER_struct, I2C_ControllerHandle);
 80056d0:	4b0b      	ldr	r3, [pc, #44]	; (8005700 <StartPressureMonitor+0x4c>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	461a      	mov	r2, r3
 80056d6:	490b      	ldr	r1, [pc, #44]	; (8005704 <StartPressureMonitor+0x50>)
 80056d8:	4808      	ldr	r0, [pc, #32]	; (80056fc <StartPressureMonitor+0x48>)
 80056da:	f000 f979 	bl	80059d0 <BMP390_ReadPress>
	  BMP390_ReadTemp(&hi2c2, &ALTIMETER_struct, I2C_ControllerHandle);
 80056de:	4b08      	ldr	r3, [pc, #32]	; (8005700 <StartPressureMonitor+0x4c>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	461a      	mov	r2, r3
 80056e4:	4907      	ldr	r1, [pc, #28]	; (8005704 <StartPressureMonitor+0x50>)
 80056e6:	4805      	ldr	r0, [pc, #20]	; (80056fc <StartPressureMonitor+0x48>)
 80056e8:	f000 f91c 	bl	8005924 <BMP390_ReadTemp>
	  BMP390_GetRelativeAltitude(&ALTIMETER_struct);
 80056ec:	4805      	ldr	r0, [pc, #20]	; (8005704 <StartPressureMonitor+0x50>)
 80056ee:	f000 fa4b 	bl	8005b88 <BMP390_GetRelativeAltitude>
	  /*Recalibrate sensor if gps data move too much*/
	  vTaskDelay(500);
 80056f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80056f6:	f010 fd27 	bl	8016148 <vTaskDelay>
	  BMP390_ReadPress(&hi2c2,&ALTIMETER_struct, I2C_ControllerHandle);
 80056fa:	e7e9      	b.n	80056d0 <StartPressureMonitor+0x1c>
 80056fc:	20000374 	.word	0x20000374
 8005700:	20000368 	.word	0x20000368
 8005704:	200004ac 	.word	0x200004ac

08005708 <StartGPS>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGPS */
void StartGPS(void const * argument)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  /*TO BE DONE marche pas trop */
	  /*When UART IT then block task until IT*/
	  HAL_UART_Receive_IT(&huart4, &gps_receive_rx, BUFFER_SIZE_NMEA);
 8005710:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005714:	4909      	ldr	r1, [pc, #36]	; (800573c <StartGPS+0x34>)
 8005716:	480a      	ldr	r0, [pc, #40]	; (8005740 <StartGPS+0x38>)
 8005718:	f009 ffc4 	bl	800f6a4 <HAL_UART_Receive_IT>
	  xSemaphoreTake(GPS_UART_SemaphoreHandle,100000);
 800571c:	4b09      	ldr	r3, [pc, #36]	; (8005744 <StartGPS+0x3c>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4909      	ldr	r1, [pc, #36]	; (8005748 <StartGPS+0x40>)
 8005722:	4618      	mov	r0, r3
 8005724:	f010 f9ce 	bl	8015ac4 <xQueueSemaphoreTake>
	  gps_ReadNMEA(gps_receive_rx,&GPS_struct);
 8005728:	4908      	ldr	r1, [pc, #32]	; (800574c <StartGPS+0x44>)
 800572a:	4804      	ldr	r0, [pc, #16]	; (800573c <StartGPS+0x34>)
 800572c:	f001 f82a 	bl	8006784 <gps_ReadNMEA>
	  vTaskDelay(1000);
 8005730:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005734:	f010 fd08 	bl	8016148 <vTaskDelay>
	  HAL_UART_Receive_IT(&huart4, &gps_receive_rx, BUFFER_SIZE_NMEA);
 8005738:	e7ea      	b.n	8005710 <StartGPS+0x8>
 800573a:	bf00      	nop
 800573c:	200004f0 	.word	0x200004f0
 8005740:	20000a78 	.word	0x20000a78
 8005744:	2000036c 	.word	0x2000036c
 8005748:	000186a0 	.word	0x000186a0
 800574c:	200004c0 	.word	0x200004c0

08005750 <StartMainTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMainTask */
void StartMainTask(void const * argument)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b09c      	sub	sp, #112	; 0x70
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMainTask */
	  xSemaphoreTake(HG_PROTECTION_SEMHandle,9999999999999999);
 8005758:	4b19      	ldr	r3, [pc, #100]	; (80057c0 <StartMainTask+0x70>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4919      	ldr	r1, [pc, #100]	; (80057c4 <StartMainTask+0x74>)
 800575e:	4618      	mov	r0, r3
 8005760:	f010 f9b0 	bl	8015ac4 <xQueueSemaphoreTake>
	  xSemaphoreTake(HG_PROTECTION_SEMHandle,9999999999999999);
 8005764:	4b16      	ldr	r3, [pc, #88]	; (80057c0 <StartMainTask+0x70>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4916      	ldr	r1, [pc, #88]	; (80057c4 <StartMainTask+0x74>)
 800576a:	4618      	mov	r0, r3
 800576c:	f010 f9aa 	bl	8015ac4 <xQueueSemaphoreTake>
	for(int i=0;i<5;i++){
 8005770:	2300      	movs	r3, #0
 8005772:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005774:	e011      	b.n	800579a <StartMainTask+0x4a>
		htim3.Instance->CCR1 = 1000;
 8005776:	4b14      	ldr	r3, [pc, #80]	; (80057c8 <StartMainTask+0x78>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800577e:	635a      	str	r2, [r3, #52]	; 0x34
		vTaskDelay(100);
 8005780:	2064      	movs	r0, #100	; 0x64
 8005782:	f010 fce1 	bl	8016148 <vTaskDelay>
		htim3.Instance->CCR1 = 0;
 8005786:	4b10      	ldr	r3, [pc, #64]	; (80057c8 <StartMainTask+0x78>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2200      	movs	r2, #0
 800578c:	635a      	str	r2, [r3, #52]	; 0x34
		vTaskDelay(100);
 800578e:	2064      	movs	r0, #100	; 0x64
 8005790:	f010 fcda 	bl	8016148 <vTaskDelay>
	for(int i=0;i<5;i++){
 8005794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005796:	3301      	adds	r3, #1
 8005798:	66fb      	str	r3, [r7, #108]	; 0x6c
 800579a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800579c:	2b04      	cmp	r3, #4
 800579e:	ddea      	ble.n	8005776 <StartMainTask+0x26>
  /* Infinite loop */
  for(;;)
  {

//	  BNO055_ReadLina(&hi2c2, &IMU_BNO055_struct, I2C_ControllerHandle);
	  BNO055_ReadAccel(&hi2c2, &IMU_BNO055_struct, I2C_ControllerHandle);
 80057a0:	4b0a      	ldr	r3, [pc, #40]	; (80057cc <StartMainTask+0x7c>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	461a      	mov	r2, r3
 80057a6:	490a      	ldr	r1, [pc, #40]	; (80057d0 <StartMainTask+0x80>)
 80057a8:	480a      	ldr	r0, [pc, #40]	; (80057d4 <StartMainTask+0x84>)
 80057aa:	f000 fc61 	bl	8006070 <BNO055_ReadAccel>
	  BNO055_ComputeSpeed(&hi2c2, &IMU_BNO055_struct);
 80057ae:	4908      	ldr	r1, [pc, #32]	; (80057d0 <StartMainTask+0x80>)
 80057b0:	4808      	ldr	r0, [pc, #32]	; (80057d4 <StartMainTask+0x84>)
 80057b2:	f000 fe59 	bl	8006468 <BNO055_ComputeSpeed>


	  vTaskDelay(500);
 80057b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80057ba:	f010 fcc5 	bl	8016148 <vTaskDelay>
	  BNO055_ReadAccel(&hi2c2, &IMU_BNO055_struct, I2C_ControllerHandle);
 80057be:	e7ef      	b.n	80057a0 <StartMainTask+0x50>
 80057c0:	20000370 	.word	0x20000370
 80057c4:	6fc0ffff 	.word	0x6fc0ffff
 80057c8:	200009e0 	.word	0x200009e0
 80057cc:	20000368 	.word	0x20000368
 80057d0:	200003c0 	.word	0x200003c0
 80057d4:	20000374 	.word	0x20000374

080057d8 <StartBatteryMonitoring>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBatteryMonitoring */
void StartBatteryMonitoring(void const * argument)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBatteryMonitoring */
  /* Infinite loop */
  for(;;)
  {
	Battery_ReadBatteryVoltage(&BATTERY_Struct,BatteryMonitoringData);
 80057e0:	4909      	ldr	r1, [pc, #36]	; (8005808 <StartBatteryMonitoring+0x30>)
 80057e2:	480a      	ldr	r0, [pc, #40]	; (800580c <StartBatteryMonitoring+0x34>)
 80057e4:	f7ff fcb0 	bl	8005148 <Battery_ReadBatteryVoltage>
	Battery_ReadCurrent5V(&BATTERY_Struct, BatteryMonitoringData);
 80057e8:	4907      	ldr	r1, [pc, #28]	; (8005808 <StartBatteryMonitoring+0x30>)
 80057ea:	4808      	ldr	r0, [pc, #32]	; (800580c <StartBatteryMonitoring+0x34>)
 80057ec:	f7ff fd20 	bl	8005230 <Battery_ReadCurrent5V>
	Battery_ReadCurrent3V3(&BATTERY_Struct, BatteryMonitoringData);
 80057f0:	4905      	ldr	r1, [pc, #20]	; (8005808 <StartBatteryMonitoring+0x30>)
 80057f2:	4806      	ldr	r0, [pc, #24]	; (800580c <StartBatteryMonitoring+0x34>)
 80057f4:	f7ff fcd8 	bl	80051a8 <Battery_ReadCurrent3V3>
	Battery_RemaningTime(&BATTERY_Struct);
 80057f8:	4804      	ldr	r0, [pc, #16]	; (800580c <StartBatteryMonitoring+0x34>)
 80057fa:	f7ff fd5d 	bl	80052b8 <Battery_RemaningTime>
    vTaskDelay(5000);
 80057fe:	f241 3088 	movw	r0, #5000	; 0x1388
 8005802:	f010 fca1 	bl	8016148 <vTaskDelay>
	Battery_ReadBatteryVoltage(&BATTERY_Struct,BatteryMonitoringData);
 8005806:	e7eb      	b.n	80057e0 <StartBatteryMonitoring+0x8>
 8005808:	200008d8 	.word	0x200008d8
 800580c:	200004e0 	.word	0x200004e0

08005810 <StartTelemetry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetry */
void StartTelemetry(void const * argument)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTelemetry */
	WIOE5_Init(&huart5);
 8005818:	4803      	ldr	r0, [pc, #12]	; (8005828 <StartTelemetry+0x18>)
 800581a:	f001 fb71 	bl	8006f00 <WIOE5_Init>
  /* Infinite loop */
  for(;;)
  {
	  vTaskDelay(1000);
 800581e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005822:	f010 fc91 	bl	8016148 <vTaskDelay>
 8005826:	e7fa      	b.n	800581e <StartTelemetry+0xe>
 8005828:	20000b08 	.word	0x20000b08

0800582c <BMP390_EnablePressureSensor>:
	//Clearing the register is done by reading it
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, STATUS_REG, 1, &data, 1, 10);
}

void BMP390_EnablePressureSensor(I2C_HandleTypeDef *I2C){
 800582c:	b580      	push	{r7, lr}
 800582e:	b088      	sub	sp, #32
 8005830:	af04      	add	r7, sp, #16
 8005832:	6078      	str	r0, [r7, #4]
	uint8_t reg_value;
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
 8005834:	230a      	movs	r3, #10
 8005836:	9302      	str	r3, [sp, #8]
 8005838:	2301      	movs	r3, #1
 800583a:	9301      	str	r3, [sp, #4]
 800583c:	f107 030f 	add.w	r3, r7, #15
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	2301      	movs	r3, #1
 8005844:	221b      	movs	r2, #27
 8005846:	21ec      	movs	r1, #236	; 0xec
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f005 f911 	bl	800aa70 <HAL_I2C_Mem_Read>
	data = (reg_value&0x32) + 0x01;
 800584e:	7bfb      	ldrb	r3, [r7, #15]
 8005850:	f003 0332 	and.w	r3, r3, #50	; 0x32
 8005854:	b2db      	uxtb	r3, r3
 8005856:	3301      	adds	r3, #1
 8005858:	b2db      	uxtb	r3, r3
 800585a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
 800585c:	230a      	movs	r3, #10
 800585e:	9302      	str	r3, [sp, #8]
 8005860:	2301      	movs	r3, #1
 8005862:	9301      	str	r3, [sp, #4]
 8005864:	f107 030e 	add.w	r3, r7, #14
 8005868:	9300      	str	r3, [sp, #0]
 800586a:	2301      	movs	r3, #1
 800586c:	221b      	movs	r2, #27
 800586e:	21ec      	movs	r1, #236	; 0xec
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f004 ffe9 	bl	800a848 <HAL_I2C_Mem_Write>
}
 8005876:	bf00      	nop
 8005878:	3710      	adds	r7, #16
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <BMP390_EnableTempSensor>:
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
	data = (reg_value&0x31);
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
}

void BMP390_EnableTempSensor(I2C_HandleTypeDef *I2C){
 800587e:	b580      	push	{r7, lr}
 8005880:	b088      	sub	sp, #32
 8005882:	af04      	add	r7, sp, #16
 8005884:	6078      	str	r0, [r7, #4]
	uint8_t reg_value;
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
 8005886:	230a      	movs	r3, #10
 8005888:	9302      	str	r3, [sp, #8]
 800588a:	2301      	movs	r3, #1
 800588c:	9301      	str	r3, [sp, #4]
 800588e:	f107 030f 	add.w	r3, r7, #15
 8005892:	9300      	str	r3, [sp, #0]
 8005894:	2301      	movs	r3, #1
 8005896:	221b      	movs	r2, #27
 8005898:	21ec      	movs	r1, #236	; 0xec
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f005 f8e8 	bl	800aa70 <HAL_I2C_Mem_Read>
	data = (reg_value&0x31) + 0x01;
 80058a0:	7bfb      	ldrb	r3, [r7, #15]
 80058a2:	f003 0331 	and.w	r3, r3, #49	; 0x31
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	3301      	adds	r3, #1
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
 80058ae:	230a      	movs	r3, #10
 80058b0:	9302      	str	r3, [sp, #8]
 80058b2:	2301      	movs	r3, #1
 80058b4:	9301      	str	r3, [sp, #4]
 80058b6:	f107 030e 	add.w	r3, r7, #14
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	2301      	movs	r3, #1
 80058be:	221b      	movs	r2, #27
 80058c0:	21ec      	movs	r1, #236	; 0xec
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f004 ffc0 	bl	800a848 <HAL_I2C_Mem_Write>
}
 80058c8:	bf00      	nop
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <BMP390_WakeUp>:
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
	data = (reg_value&0x03);
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
}

void BMP390_WakeUp(I2C_HandleTypeDef *I2C){
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b088      	sub	sp, #32
 80058d4:	af04      	add	r7, sp, #16
 80058d6:	6078      	str	r0, [r7, #4]
	uint8_t reg_value;
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
 80058d8:	230a      	movs	r3, #10
 80058da:	9302      	str	r3, [sp, #8]
 80058dc:	2301      	movs	r3, #1
 80058de:	9301      	str	r3, [sp, #4]
 80058e0:	f107 030f 	add.w	r3, r7, #15
 80058e4:	9300      	str	r3, [sp, #0]
 80058e6:	2301      	movs	r3, #1
 80058e8:	221b      	movs	r2, #27
 80058ea:	21ec      	movs	r1, #236	; 0xec
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f005 f8bf 	bl	800aa70 <HAL_I2C_Mem_Read>
	data = (reg_value&0x03) + 0x30;
 80058f2:	7bfb      	ldrb	r3, [r7, #15]
 80058f4:	f003 0303 	and.w	r3, r3, #3
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	3330      	adds	r3, #48	; 0x30
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
 8005900:	230a      	movs	r3, #10
 8005902:	9302      	str	r3, [sp, #8]
 8005904:	2301      	movs	r3, #1
 8005906:	9301      	str	r3, [sp, #4]
 8005908:	f107 030e 	add.w	r3, r7, #14
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	2301      	movs	r3, #1
 8005910:	221b      	movs	r2, #27
 8005912:	21ec      	movs	r1, #236	; 0xec
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f004 ff97 	bl	800a848 <HAL_I2C_Mem_Write>
}
 800591a:	bf00      	nop
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
	...

08005924 <BMP390_ReadTemp>:
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, CONFIG_REG, 1, &reg_value, 1, 10);
	data = (reg_value&0x01) + (value<<1);
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, OSR_REG, 1, &data, 1, 10);
}

void BMP390_ReadTemp(I2C_HandleTypeDef *I2C,ALTIMETER_t *altimeter,osMutexId I2CControllerProtect){
 8005924:	b580      	push	{r7, lr}
 8005926:	b08a      	sub	sp, #40	; 0x28
 8005928:	af04      	add	r7, sp, #16
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
	uint8_t XLSB;
	uint8_t LSB;
	uint8_t MSB;
	uint32_t temp;

	xSemaphoreTake(I2CControllerProtect, 35);
 8005930:	2123      	movs	r1, #35	; 0x23
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f010 f8c6 	bl	8015ac4 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, TEMP_XLSB_REG, 1, &XLSB, 1, 10);
 8005938:	230a      	movs	r3, #10
 800593a:	9302      	str	r3, [sp, #8]
 800593c:	2301      	movs	r3, #1
 800593e:	9301      	str	r3, [sp, #4]
 8005940:	f107 0313 	add.w	r3, r7, #19
 8005944:	9300      	str	r3, [sp, #0]
 8005946:	2301      	movs	r3, #1
 8005948:	2207      	movs	r2, #7
 800594a:	21ec      	movs	r1, #236	; 0xec
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	f005 f88f 	bl	800aa70 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, TEMP_LSB_REG, 1, &LSB, 1, 10);
 8005952:	230a      	movs	r3, #10
 8005954:	9302      	str	r3, [sp, #8]
 8005956:	2301      	movs	r3, #1
 8005958:	9301      	str	r3, [sp, #4]
 800595a:	f107 0312 	add.w	r3, r7, #18
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	2301      	movs	r3, #1
 8005962:	2208      	movs	r2, #8
 8005964:	21ec      	movs	r1, #236	; 0xec
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	f005 f882 	bl	800aa70 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, TEMP_MSB_REG, 1, &MSB, 1, 10);
 800596c:	230a      	movs	r3, #10
 800596e:	9302      	str	r3, [sp, #8]
 8005970:	2301      	movs	r3, #1
 8005972:	9301      	str	r3, [sp, #4]
 8005974:	f107 0311 	add.w	r3, r7, #17
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	2301      	movs	r3, #1
 800597c:	2209      	movs	r2, #9
 800597e:	21ec      	movs	r1, #236	; 0xec
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f005 f875 	bl	800aa70 <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 8005986:	2300      	movs	r3, #0
 8005988:	2200      	movs	r2, #0
 800598a:	2100      	movs	r1, #0
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f00f ff25 	bl	80157dc <xQueueGenericSend>
	temp = XLSB + (LSB<<8) + (MSB<<16);
 8005992:	7cfb      	ldrb	r3, [r7, #19]
 8005994:	461a      	mov	r2, r3
 8005996:	7cbb      	ldrb	r3, [r7, #18]
 8005998:	021b      	lsls	r3, r3, #8
 800599a:	441a      	add	r2, r3
 800599c:	7c7b      	ldrb	r3, [r7, #17]
 800599e:	041b      	lsls	r3, r3, #16
 80059a0:	4413      	add	r3, r2
 80059a2:	617b      	str	r3, [r7, #20]
	altimeter->temp_data = (temp/258111);
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	4b09      	ldr	r3, [pc, #36]	; (80059cc <BMP390_ReadTemp+0xa8>)
 80059a8:	fba3 1302 	umull	r1, r3, r3, r2
 80059ac:	1ad2      	subs	r2, r2, r3
 80059ae:	0852      	lsrs	r2, r2, #1
 80059b0:	4413      	add	r3, r2
 80059b2:	0c5b      	lsrs	r3, r3, #17
 80059b4:	ee07 3a90 	vmov	s15, r3
 80059b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80059c2:	bf00      	nop
 80059c4:	3718      	adds	r7, #24
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	04000105 	.word	0x04000105

080059d0 <BMP390_ReadPress>:

void BMP390_ReadPress(I2C_HandleTypeDef *I2C,ALTIMETER_t *altimeter,osMutexId I2CControllerProtect){
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b08a      	sub	sp, #40	; 0x28
 80059d4:	af04      	add	r7, sp, #16
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
	uint8_t XLSB;
	uint8_t LSB;
	uint8_t MSB;
	uint32_t press;

	xSemaphoreTake(I2CControllerProtect, 35);
 80059dc:	2123      	movs	r1, #35	; 0x23
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f010 f870 	bl	8015ac4 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PRESS_XLSB_REG, 1, &XLSB, 1, 10);
 80059e4:	230a      	movs	r3, #10
 80059e6:	9302      	str	r3, [sp, #8]
 80059e8:	2301      	movs	r3, #1
 80059ea:	9301      	str	r3, [sp, #4]
 80059ec:	f107 0313 	add.w	r3, r7, #19
 80059f0:	9300      	str	r3, [sp, #0]
 80059f2:	2301      	movs	r3, #1
 80059f4:	2204      	movs	r2, #4
 80059f6:	21ec      	movs	r1, #236	; 0xec
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f005 f839 	bl	800aa70 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PRESS_LSB_REG, 1, &LSB, 1, 10);
 80059fe:	230a      	movs	r3, #10
 8005a00:	9302      	str	r3, [sp, #8]
 8005a02:	2301      	movs	r3, #1
 8005a04:	9301      	str	r3, [sp, #4]
 8005a06:	f107 0312 	add.w	r3, r7, #18
 8005a0a:	9300      	str	r3, [sp, #0]
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	2205      	movs	r2, #5
 8005a10:	21ec      	movs	r1, #236	; 0xec
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f005 f82c 	bl	800aa70 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PRESS_MSB_REG, 1, &MSB, 1, 10);
 8005a18:	230a      	movs	r3, #10
 8005a1a:	9302      	str	r3, [sp, #8]
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	9301      	str	r3, [sp, #4]
 8005a20:	f107 0311 	add.w	r3, r7, #17
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	2301      	movs	r3, #1
 8005a28:	2206      	movs	r2, #6
 8005a2a:	21ec      	movs	r1, #236	; 0xec
 8005a2c:	68f8      	ldr	r0, [r7, #12]
 8005a2e:	f005 f81f 	bl	800aa70 <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 8005a32:	2300      	movs	r3, #0
 8005a34:	2200      	movs	r2, #0
 8005a36:	2100      	movs	r1, #0
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f00f fecf 	bl	80157dc <xQueueGenericSend>
	press = XLSB + (LSB<<8) + (MSB<<16);
 8005a3e:	7cfb      	ldrb	r3, [r7, #19]
 8005a40:	461a      	mov	r2, r3
 8005a42:	7cbb      	ldrb	r3, [r7, #18]
 8005a44:	021b      	lsls	r3, r3, #8
 8005a46:	441a      	add	r2, r3
 8005a48:	7c7b      	ldrb	r3, [r7, #17]
 8005a4a:	041b      	lsls	r3, r3, #16
 8005a4c:	4413      	add	r3, r2
 8005a4e:	617b      	str	r3, [r7, #20]
	altimeter->pressure_hpa = (press*PRESS_STEP)+300;
 8005a50:	6978      	ldr	r0, [r7, #20]
 8005a52:	f7fe fd39 	bl	80044c8 <__aeabi_ui2d>
 8005a56:	f04f 0200 	mov.w	r2, #0
 8005a5a:	4b0f      	ldr	r3, [pc, #60]	; (8005a98 <BMP390_ReadPress+0xc8>)
 8005a5c:	f7fe fdae 	bl	80045bc <__aeabi_dmul>
 8005a60:	4602      	mov	r2, r0
 8005a62:	460b      	mov	r3, r1
 8005a64:	4610      	mov	r0, r2
 8005a66:	4619      	mov	r1, r3
 8005a68:	a309      	add	r3, pc, #36	; (adr r3, 8005a90 <BMP390_ReadPress+0xc0>)
 8005a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6e:	f7fe fbef 	bl	8004250 <__adddf3>
 8005a72:	4602      	mov	r2, r0
 8005a74:	460b      	mov	r3, r1
 8005a76:	4610      	mov	r0, r2
 8005a78:	4619      	mov	r1, r3
 8005a7a:	f7ff f84f 	bl	8004b1c <__aeabi_d2f>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	601a      	str	r2, [r3, #0]

}
 8005a84:	bf00      	nop
 8005a86:	3718      	adds	r7, #24
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	f3af 8000 	nop.w
 8005a90:	00000000 	.word	0x00000000
 8005a94:	4072c000 	.word	0x4072c000
 8005a98:	3f0db000 	.word	0x3f0db000

08005a9c <BMP390_Init>:
	xSemaphoreGive(I2CControllerProtect);
	time = XLSB + (LSB<<8) + (MSB<<16);
	altimeter->time_data = time;
}

uint8_t BMP390_Init(I2C_HandleTypeDef *I2C){
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b088      	sub	sp, #32
 8005aa0:	af04      	add	r7, sp, #16
 8005aa2:	6078      	str	r0, [r7, #4]

	uint8_t data;
	uint8_t res = 0;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	73fb      	strb	r3, [r7, #15]

	//Start by checking dev ID and REV iD
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, CHIP_ID_REG, 1, &data, 1, 10);
 8005aa8:	230a      	movs	r3, #10
 8005aaa:	9302      	str	r3, [sp, #8]
 8005aac:	2301      	movs	r3, #1
 8005aae:	9301      	str	r3, [sp, #4]
 8005ab0:	f107 030e 	add.w	r3, r7, #14
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	2200      	movs	r2, #0
 8005aba:	21ec      	movs	r1, #236	; 0xec
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f004 ffd7 	bl	800aa70 <HAL_I2C_Mem_Read>
	if(data!=0x60){
 8005ac2:	7bbb      	ldrb	r3, [r7, #14]
 8005ac4:	2b60      	cmp	r3, #96	; 0x60
 8005ac6:	d001      	beq.n	8005acc <BMP390_Init+0x30>
		res = 1;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	73fb      	strb	r3, [r7, #15]
	}
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, REV_ID_REG, 1, &data, 1, 10);
 8005acc:	230a      	movs	r3, #10
 8005ace:	9302      	str	r3, [sp, #8]
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	9301      	str	r3, [sp, #4]
 8005ad4:	f107 030e 	add.w	r3, r7, #14
 8005ad8:	9300      	str	r3, [sp, #0]
 8005ada:	2301      	movs	r3, #1
 8005adc:	2201      	movs	r2, #1
 8005ade:	21ec      	movs	r1, #236	; 0xec
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f004 ffc5 	bl	800aa70 <HAL_I2C_Mem_Read>
	if(data!=0x01){
 8005ae6:	7bbb      	ldrb	r3, [r7, #14]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d001      	beq.n	8005af0 <BMP390_Init+0x54>
		res = 1;
 8005aec:	2301      	movs	r3, #1
 8005aee:	73fb      	strb	r3, [r7, #15]
	}

	//Enable all sensors
	BMP390_EnableTempSensor(I2C);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f7ff fec4 	bl	800587e <BMP390_EnableTempSensor>
	BMP390_EnablePressureSensor(I2C);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f7ff fe98 	bl	800582c <BMP390_EnablePressureSensor>

	BMP390_WakeUp(I2C);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f7ff fee7 	bl	80058d0 <BMP390_WakeUp>
	/*Wait until sensor wake up */
	HAL_Delay(5);
 8005b02:	2005      	movs	r0, #5
 8005b04:	f002 fdfa 	bl	80086fc <HAL_Delay>

	//Set the IT pin on high level and enable with pressure/temp sensor
	data = 0x42;
 8005b08:	2342      	movs	r3, #66	; 0x42
 8005b0a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, INT_CTRL_REG, 1, &data, 1, 10);
 8005b0c:	230a      	movs	r3, #10
 8005b0e:	9302      	str	r3, [sp, #8]
 8005b10:	2301      	movs	r3, #1
 8005b12:	9301      	str	r3, [sp, #4]
 8005b14:	f107 030e 	add.w	r3, r7, #14
 8005b18:	9300      	str	r3, [sp, #0]
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	2219      	movs	r2, #25
 8005b1e:	21ec      	movs	r1, #236	; 0xec
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f004 fe91 	bl	800a848 <HAL_I2C_Mem_Write>

	//Set Filter value
	//BMP390_SetFilter(I2C, 0x02);


	return res;
 8005b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <BMP390_GetP0Pressure>:

void BMP390_GetP0Pressure(I2C_HandleTypeDef *I2C,ALTIMETER_t *altimeter,osMutexId I2CControllerProtect){
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
	float P0;
	for(int i=0;i<STARTUP_PRESSURE_AVERAGE_COUNT;i++){
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	613b      	str	r3, [r7, #16]
 8005b40:	e010      	b.n	8005b64 <BMP390_GetP0Pressure+0x34>
		BMP390_ReadPress(I2C, altimeter, I2CControllerProtect);
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	68b9      	ldr	r1, [r7, #8]
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f7ff ff42 	bl	80059d0 <BMP390_ReadPress>
		P0 += altimeter->pressure_hpa;
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	edd3 7a00 	vldr	s15, [r3]
 8005b52:	ed97 7a05 	vldr	s14, [r7, #20]
 8005b56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b5a:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i=0;i<STARTUP_PRESSURE_AVERAGE_COUNT;i++){
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	3301      	adds	r3, #1
 8005b62:	613b      	str	r3, [r7, #16]
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	2b09      	cmp	r3, #9
 8005b68:	ddeb      	ble.n	8005b42 <BMP390_GetP0Pressure+0x12>
	}
	altimeter->calibration_pressure = (P0/STARTUP_PRESSURE_AVERAGE_COUNT);
 8005b6a:	ed97 7a05 	vldr	s14, [r7, #20]
 8005b6e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005b72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8005b7c:	bf00      	nop
 8005b7e:	3718      	adds	r7, #24
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	0000      	movs	r0, r0
	...

08005b88 <BMP390_GetRelativeAltitude>:

/*Function use to calculate relative altitude. In order to work properly it should'nt be call before a calibration*/
void BMP390_GetRelativeAltitude(ALTIMETER_t *altimeter){
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
	altimeter->differential_altitude = 44330.0 * (1.0 - pow(altimeter->pressure_hpa / altimeter->calibration_pressure, 0.1903));
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	ed93 7a00 	vldr	s14, [r3]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	edd3 7a03 	vldr	s15, [r3, #12]
 8005b9c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005ba0:	ee16 0a90 	vmov	r0, s13
 8005ba4:	f7fe fcb2 	bl	800450c <__aeabi_f2d>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	460b      	mov	r3, r1
 8005bac:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8005bf8 <BMP390_GetRelativeAltitude+0x70>
 8005bb0:	ec43 2b10 	vmov	d0, r2, r3
 8005bb4:	f012 fbf0 	bl	8018398 <pow>
 8005bb8:	ec53 2b10 	vmov	r2, r3, d0
 8005bbc:	f04f 0000 	mov.w	r0, #0
 8005bc0:	4911      	ldr	r1, [pc, #68]	; (8005c08 <BMP390_GetRelativeAltitude+0x80>)
 8005bc2:	f7fe fb43 	bl	800424c <__aeabi_dsub>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	460b      	mov	r3, r1
 8005bca:	4610      	mov	r0, r2
 8005bcc:	4619      	mov	r1, r3
 8005bce:	a30c      	add	r3, pc, #48	; (adr r3, 8005c00 <BMP390_GetRelativeAltitude+0x78>)
 8005bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd4:	f7fe fcf2 	bl	80045bc <__aeabi_dmul>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	460b      	mov	r3, r1
 8005bdc:	4610      	mov	r0, r2
 8005bde:	4619      	mov	r1, r3
 8005be0:	f7fe ff9c 	bl	8004b1c <__aeabi_d2f>
 8005be4:	4602      	mov	r2, r0
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	611a      	str	r2, [r3, #16]
}
 8005bea:	bf00      	nop
 8005bec:	3708      	adds	r7, #8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	f3af 8000 	nop.w
 8005bf8:	1a36e2eb 	.word	0x1a36e2eb
 8005bfc:	3fc85bc0 	.word	0x3fc85bc0
 8005c00:	00000000 	.word	0x00000000
 8005c04:	40e5a540 	.word	0x40e5a540
 8005c08:	3ff00000 	.word	0x3ff00000

08005c0c <BNO055_SetPage>:
 * Method use to switch page in IMU memory
 * param: I2C --> pointer on I2C handle struct
 * param: page --> integer value range 0 to 1 include
 * note: If a page value is bigger than 1 then no error will be raise so be carefull
 */
void BNO055_SetPage(I2C_HandleTypeDef *I2C,uint8_t page){
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af04      	add	r7, sp, #16
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	460b      	mov	r3, r1
 8005c16:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_PAGE_ID, 1, &page, 1, 10);
 8005c18:	230a      	movs	r3, #10
 8005c1a:	9302      	str	r3, [sp, #8]
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	9301      	str	r3, [sp, #4]
 8005c20:	1cfb      	adds	r3, r7, #3
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	2301      	movs	r3, #1
 8005c26:	2207      	movs	r2, #7
 8005c28:	2150      	movs	r1, #80	; 0x50
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f004 fe0c 	bl	800a848 <HAL_I2C_Mem_Write>
}
 8005c30:	bf00      	nop
 8005c32:	3708      	adds	r7, #8
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <BNO055_SetOperationMode>:
 * Method use to switch operation mode of IMU
 * param: I2C --> pointer on I2C handle struct
 * param: BNO055 --> pointer on IMU struct
 * param: mode --> operation mode already define in <bno055.h>
 */
void BNO055_SetOperationMode(I2C_HandleTypeDef *I2C,bno055_opmode_t mode,BNO055_t *BNO055){
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b088      	sub	sp, #32
 8005c3c:	af04      	add	r7, sp, #16
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	460b      	mov	r3, r1
 8005c42:	607a      	str	r2, [r7, #4]
 8005c44:	72fb      	strb	r3, [r7, #11]
	BNO055->operational_mode = mode;
 8005c46:	7afa      	ldrb	r2, [r7, #11]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_OPR_MODE, 1, &mode, 1, 10);
 8005c4e:	230a      	movs	r3, #10
 8005c50:	9302      	str	r3, [sp, #8]
 8005c52:	2301      	movs	r3, #1
 8005c54:	9301      	str	r3, [sp, #4]
 8005c56:	f107 030b 	add.w	r3, r7, #11
 8005c5a:	9300      	str	r3, [sp, #0]
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	223d      	movs	r2, #61	; 0x3d
 8005c60:	2150      	movs	r1, #80	; 0x50
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f004 fdf0 	bl	800a848 <HAL_I2C_Mem_Write>
}
 8005c68:	bf00      	nop
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <BNO055_ReadSystemReg>:

/*
 * Function use read the system register
 * param: I2C --> pointer on I2C handle struct
 */
uint8_t BNO055_ReadSystemReg(I2C_HandleTypeDef *I2C){
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b088      	sub	sp, #32
 8005c74:	af04      	add	r7, sp, #16
 8005c76:	6078      	str	r0, [r7, #4]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &system_reg, 1, 100);
 8005c78:	2364      	movs	r3, #100	; 0x64
 8005c7a:	9302      	str	r3, [sp, #8]
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	9301      	str	r3, [sp, #4]
 8005c80:	f107 030f 	add.w	r3, r7, #15
 8005c84:	9300      	str	r3, [sp, #0]
 8005c86:	2301      	movs	r3, #1
 8005c88:	223f      	movs	r2, #63	; 0x3f
 8005c8a:	2150      	movs	r1, #80	; 0x50
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f004 feef 	bl	800aa70 <HAL_I2C_Mem_Read>
	return system_reg;
 8005c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3710      	adds	r7, #16
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <BNO055_ReadITStatus>:

/*
 * Function use to read interrupt register
 * param: I2C --> pointer on I2C handle struct
 */
uint8_t BNO055_ReadITStatus(I2C_HandleTypeDef * I2C){
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b088      	sub	sp, #32
 8005ca0:	af04      	add	r7, sp, #16
 8005ca2:	6078      	str	r0, [r7, #4]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_INT_STATUS, 1, &system_reg, 1, 100);
 8005ca4:	2364      	movs	r3, #100	; 0x64
 8005ca6:	9302      	str	r3, [sp, #8]
 8005ca8:	2301      	movs	r3, #1
 8005caa:	9301      	str	r3, [sp, #4]
 8005cac:	f107 030f 	add.w	r3, r7, #15
 8005cb0:	9300      	str	r3, [sp, #0]
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	2237      	movs	r2, #55	; 0x37
 8005cb6:	2150      	movs	r1, #80	; 0x50
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f004 fed9 	bl	800aa70 <HAL_I2C_Mem_Read>
	return system_reg;
 8005cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <BNO055_EnableAccHighG>:
/*
 * Method use to set high G acceleration interrupt
 * param: I2C --> pointer on I2C handle struct
 * note: This method should only be call after a SetPage(1)
 */
void BNO055_EnableAccHighG(I2C_HandleTypeDef *I2C){
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b088      	sub	sp, #32
 8005ccc:	af04      	add	r7, sp, #16
 8005cce:	6078      	str	r0, [r7, #4]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_INT_EN, 1, &system_reg, 1, 100);
 8005cd0:	2364      	movs	r3, #100	; 0x64
 8005cd2:	9302      	str	r3, [sp, #8]
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	9301      	str	r3, [sp, #4]
 8005cd8:	f107 030f 	add.w	r3, r7, #15
 8005cdc:	9300      	str	r3, [sp, #0]
 8005cde:	2301      	movs	r3, #1
 8005ce0:	2210      	movs	r2, #16
 8005ce2:	2150      	movs	r1, #80	; 0x50
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f004 fec3 	bl	800aa70 <HAL_I2C_Mem_Read>
	system_reg|=1<<5;
 8005cea:	7bfb      	ldrb	r3, [r7, #15]
 8005cec:	f043 0320 	orr.w	r3, r3, #32
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_INT_EN, 1, &system_reg, 1, 10);
 8005cf4:	230a      	movs	r3, #10
 8005cf6:	9302      	str	r3, [sp, #8]
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	9301      	str	r3, [sp, #4]
 8005cfc:	f107 030f 	add.w	r3, r7, #15
 8005d00:	9300      	str	r3, [sp, #0]
 8005d02:	2301      	movs	r3, #1
 8005d04:	2210      	movs	r2, #16
 8005d06:	2150      	movs	r1, #80	; 0x50
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f004 fd9d 	bl	800a848 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_INT_MSK, 1, &system_reg, 1, 100);
 8005d0e:	2364      	movs	r3, #100	; 0x64
 8005d10:	9302      	str	r3, [sp, #8]
 8005d12:	2301      	movs	r3, #1
 8005d14:	9301      	str	r3, [sp, #4]
 8005d16:	f107 030f 	add.w	r3, r7, #15
 8005d1a:	9300      	str	r3, [sp, #0]
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	220f      	movs	r2, #15
 8005d20:	2150      	movs	r1, #80	; 0x50
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f004 fea4 	bl	800aa70 <HAL_I2C_Mem_Read>
	system_reg|=1<<5;
 8005d28:	7bfb      	ldrb	r3, [r7, #15]
 8005d2a:	f043 0320 	orr.w	r3, r3, #32
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_INT_MSK, 1, &system_reg, 1, 10);
 8005d32:	230a      	movs	r3, #10
 8005d34:	9302      	str	r3, [sp, #8]
 8005d36:	2301      	movs	r3, #1
 8005d38:	9301      	str	r3, [sp, #4]
 8005d3a:	f107 030f 	add.w	r3, r7, #15
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	2301      	movs	r3, #1
 8005d42:	220f      	movs	r2, #15
 8005d44:	2150      	movs	r1, #80	; 0x50
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f004 fd7e 	bl	800a848 <HAL_I2C_Mem_Write>
}
 8005d4c:	bf00      	nop
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <BNO055_EnableHighGAcc>:
/*
 * Method use to set high G acceleration interrupt for each axis
 * param: I2C --> pointer on I2C handle struct
 * axis: --> char use to define an axis Eg: 'X' or 'Y' or 'Z'
 */
void BNO055_EnableHighGAcc(I2C_HandleTypeDef *I2C,char axis){
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b088      	sub	sp, #32
 8005d58:	af04      	add	r7, sp, #16
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	70fb      	strb	r3, [r7, #3]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_INT_SETTINGS, 1, &system_reg, 1, 100);
 8005d60:	2364      	movs	r3, #100	; 0x64
 8005d62:	9302      	str	r3, [sp, #8]
 8005d64:	2301      	movs	r3, #1
 8005d66:	9301      	str	r3, [sp, #4]
 8005d68:	f107 030f 	add.w	r3, r7, #15
 8005d6c:	9300      	str	r3, [sp, #0]
 8005d6e:	2301      	movs	r3, #1
 8005d70:	2212      	movs	r2, #18
 8005d72:	2150      	movs	r1, #80	; 0x50
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f004 fe7b 	bl	800aa70 <HAL_I2C_Mem_Read>
	switch (axis) {
 8005d7a:	78fb      	ldrb	r3, [r7, #3]
 8005d7c:	2b5a      	cmp	r3, #90	; 0x5a
 8005d7e:	d012      	beq.n	8005da6 <BNO055_EnableHighGAcc+0x52>
 8005d80:	2b5a      	cmp	r3, #90	; 0x5a
 8005d82:	dc16      	bgt.n	8005db2 <BNO055_EnableHighGAcc+0x5e>
 8005d84:	2b58      	cmp	r3, #88	; 0x58
 8005d86:	d002      	beq.n	8005d8e <BNO055_EnableHighGAcc+0x3a>
 8005d88:	2b59      	cmp	r3, #89	; 0x59
 8005d8a:	d006      	beq.n	8005d9a <BNO055_EnableHighGAcc+0x46>
 8005d8c:	e011      	b.n	8005db2 <BNO055_EnableHighGAcc+0x5e>
		case 'X':
			system_reg|=1<<5;
 8005d8e:	7bfb      	ldrb	r3, [r7, #15]
 8005d90:	f043 0320 	orr.w	r3, r3, #32
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	73fb      	strb	r3, [r7, #15]
			break;
 8005d98:	e00b      	b.n	8005db2 <BNO055_EnableHighGAcc+0x5e>
		case 'Y':
			system_reg|=1<<6;
 8005d9a:	7bfb      	ldrb	r3, [r7, #15]
 8005d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	73fb      	strb	r3, [r7, #15]
			break;
 8005da4:	e005      	b.n	8005db2 <BNO055_EnableHighGAcc+0x5e>
		case 'Z':
			system_reg|=1<<7;
 8005da6:	7bfb      	ldrb	r3, [r7, #15]
 8005da8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	73fb      	strb	r3, [r7, #15]
			break;
 8005db0:	bf00      	nop
	}
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_ACC_INT_SETTINGS, 1, &system_reg, 1, 10);
 8005db2:	230a      	movs	r3, #10
 8005db4:	9302      	str	r3, [sp, #8]
 8005db6:	2301      	movs	r3, #1
 8005db8:	9301      	str	r3, [sp, #4]
 8005dba:	f107 030f 	add.w	r3, r7, #15
 8005dbe:	9300      	str	r3, [sp, #0]
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	2212      	movs	r2, #18
 8005dc4:	2150      	movs	r1, #80	; 0x50
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f004 fd3e 	bl	800a848 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_INT_SETTINGS, 1, &system_reg, 1, 100);
 8005dcc:	2364      	movs	r3, #100	; 0x64
 8005dce:	9302      	str	r3, [sp, #8]
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	9301      	str	r3, [sp, #4]
 8005dd4:	f107 030f 	add.w	r3, r7, #15
 8005dd8:	9300      	str	r3, [sp, #0]
 8005dda:	2301      	movs	r3, #1
 8005ddc:	2212      	movs	r2, #18
 8005dde:	2150      	movs	r1, #80	; 0x50
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f004 fe45 	bl	800aa70 <HAL_I2C_Mem_Read>
}
 8005de6:	bf00      	nop
 8005de8:	3710      	adds	r7, #16
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <BNO055_ClearIntFlag>:
/*
 * Method use to clear interrupt flag set by hardware
 * param: I2C --> pointer on I2C handle struct
 * note: if call in interrupt, you can find SPI pointer in IMU struct
 */
void BNO055_ClearIntFlag(I2C_HandleTypeDef *I2C){
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b088      	sub	sp, #32
 8005df2:	af04      	add	r7, sp, #16
 8005df4:	6078      	str	r0, [r7, #4]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &system_reg, 1, 100);
 8005df6:	2364      	movs	r3, #100	; 0x64
 8005df8:	9302      	str	r3, [sp, #8]
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	9301      	str	r3, [sp, #4]
 8005dfe:	f107 030f 	add.w	r3, r7, #15
 8005e02:	9300      	str	r3, [sp, #0]
 8005e04:	2301      	movs	r3, #1
 8005e06:	223f      	movs	r2, #63	; 0x3f
 8005e08:	2150      	movs	r1, #80	; 0x50
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f004 fe30 	bl	800aa70 <HAL_I2C_Mem_Read>
	system_reg|=1<<6;
 8005e10:	7bfb      	ldrb	r3, [r7, #15]
 8005e12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &system_reg, 1, 10);
 8005e1a:	230a      	movs	r3, #10
 8005e1c:	9302      	str	r3, [sp, #8]
 8005e1e:	2301      	movs	r3, #1
 8005e20:	9301      	str	r3, [sp, #4]
 8005e22:	f107 030f 	add.w	r3, r7, #15
 8005e26:	9300      	str	r3, [sp, #0]
 8005e28:	2301      	movs	r3, #1
 8005e2a:	223f      	movs	r2, #63	; 0x3f
 8005e2c:	2150      	movs	r1, #80	; 0x50
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f004 fd0a 	bl	800a848 <HAL_I2C_Mem_Write>
	BNO055_ReadITStatus(I2C);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f7ff ff31 	bl	8005c9c <BNO055_ReadITStatus>
}
 8005e3a:	bf00      	nop
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <BNO055_EnableExtClock>:
/*
 * Method use to enable external clock for IMU
 * param: I2C --> pointer on I2C handle struct
 * note: If not clock selected then work with LSI else LSE
 */
void BNO055_EnableExtClock(I2C_HandleTypeDef *I2C){
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b088      	sub	sp, #32
 8005e46:	af04      	add	r7, sp, #16
 8005e48:	6078      	str	r0, [r7, #4]
	uint8_t actual_reg_value = BNO055_ReadSystemReg(I2C);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7ff ff10 	bl	8005c70 <BNO055_ReadSystemReg>
 8005e50:	4603      	mov	r3, r0
 8005e52:	73fb      	strb	r3, [r7, #15]
	//Change the 7th bit of this reg --> activate external clock
	uint8_t sys_reg_value = (actual_reg_value&0x7F) + (0x01<<7);
 8005e54:	7bfb      	ldrb	r3, [r7, #15]
 8005e56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	3b80      	subs	r3, #128	; 0x80
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &sys_reg_value, 1, 10);
 8005e62:	230a      	movs	r3, #10
 8005e64:	9302      	str	r3, [sp, #8]
 8005e66:	2301      	movs	r3, #1
 8005e68:	9301      	str	r3, [sp, #4]
 8005e6a:	f107 030e 	add.w	r3, r7, #14
 8005e6e:	9300      	str	r3, [sp, #0]
 8005e70:	2301      	movs	r3, #1
 8005e72:	223f      	movs	r2, #63	; 0x3f
 8005e74:	2150      	movs	r1, #80	; 0x50
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f004 fce6 	bl	800a848 <HAL_I2C_Mem_Write>
}
 8005e7c:	bf00      	nop
 8005e7e:	3710      	adds	r7, #16
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <BNO055_TriggerSelfTest>:

/*
 * Method use to start a self test
 * param: I2C --> pointer on I2C handle struct
 */
void BNO055_TriggerSelfTest(I2C_HandleTypeDef *I2C){
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b088      	sub	sp, #32
 8005e88:	af04      	add	r7, sp, #16
 8005e8a:	6078      	str	r0, [r7, #4]
	uint8_t actual_reg_value = BNO055_ReadSystemReg(I2C);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f7ff feef 	bl	8005c70 <BNO055_ReadSystemReg>
 8005e92:	4603      	mov	r3, r0
 8005e94:	73fb      	strb	r3, [r7, #15]
	//Change the 7th bit of this reg --> activate external clock
	uint8_t sys_reg_value = (actual_reg_value&0xFE) + 0x01;
 8005e96:	7bfb      	ldrb	r3, [r7, #15]
 8005e98:	f023 0301 	bic.w	r3, r3, #1
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &sys_reg_value, 1, 10);
 8005ea4:	230a      	movs	r3, #10
 8005ea6:	9302      	str	r3, [sp, #8]
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	9301      	str	r3, [sp, #4]
 8005eac:	f107 030e 	add.w	r3, r7, #14
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	223f      	movs	r2, #63	; 0x3f
 8005eb6:	2150      	movs	r1, #80	; 0x50
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f004 fcc5 	bl	800a848 <HAL_I2C_Mem_Write>
}
 8005ebe:	bf00      	nop
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <BNO055_CheckSelfTestResult>:
/*
 * Method use to check self test result
 * param: I2C --> pointer on I2C handle struct
 * param: BNO055 --> pointer on IMU struct
 */
uint8_t BNO055_CheckSelfTestResult(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b088      	sub	sp, #32
 8005eca:	af04      	add	r7, sp, #16
 8005ecc:	6078      	str	r0, [r7, #4]
 8005ece:	6039      	str	r1, [r7, #0]
	uint8_t res = 0;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_value;
	//Checking all self power on test result
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ST_RESULT, 1, &reg_value, 1, 10);
 8005ed4:	230a      	movs	r3, #10
 8005ed6:	9302      	str	r3, [sp, #8]
 8005ed8:	2301      	movs	r3, #1
 8005eda:	9301      	str	r3, [sp, #4]
 8005edc:	f107 030e 	add.w	r3, r7, #14
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	2236      	movs	r2, #54	; 0x36
 8005ee6:	2150      	movs	r1, #80	; 0x50
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f004 fdc1 	bl	800aa70 <HAL_I2C_Mem_Read>
	if((reg_value&0x0F)!=0x0F){
 8005eee:	7bbb      	ldrb	r3, [r7, #14]
 8005ef0:	f003 030f 	and.w	r3, r3, #15
 8005ef4:	2b0f      	cmp	r3, #15
 8005ef6:	d001      	beq.n	8005efc <BNO055_CheckSelfTestResult+0x36>
		res = 1;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	73fb      	strb	r3, [r7, #15]
	}
	//Trigger a test to ensure sensor is working properly
	BNO055_TriggerSelfTest(I2C);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f7ff ffc1 	bl	8005e84 <BNO055_TriggerSelfTest>
	//Wait some time to ensure test is done (made with hal delay because task hasn't started yet)
	osDelay(500);
 8005f02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005f06:	f00f fa94 	bl	8015432 <osDelay>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_ERR, 1, &reg_value, 1, 10);
 8005f0a:	230a      	movs	r3, #10
 8005f0c:	9302      	str	r3, [sp, #8]
 8005f0e:	2301      	movs	r3, #1
 8005f10:	9301      	str	r3, [sp, #4]
 8005f12:	f107 030e 	add.w	r3, r7, #14
 8005f16:	9300      	str	r3, [sp, #0]
 8005f18:	2301      	movs	r3, #1
 8005f1a:	223a      	movs	r2, #58	; 0x3a
 8005f1c:	2150      	movs	r1, #80	; 0x50
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f004 fda6 	bl	800aa70 <HAL_I2C_Mem_Read>
	if(reg_value!=0x00){
 8005f24:	7bbb      	ldrb	r3, [r7, #14]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d001      	beq.n	8005f2e <BNO055_CheckSelfTestResult+0x68>
		res = 1;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	73fb      	strb	r3, [r7, #15]
	}
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_STATUS, 1, &reg_value, 1, 10);
 8005f2e:	230a      	movs	r3, #10
 8005f30:	9302      	str	r3, [sp, #8]
 8005f32:	2301      	movs	r3, #1
 8005f34:	9301      	str	r3, [sp, #4]
 8005f36:	f107 030e 	add.w	r3, r7, #14
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	2239      	movs	r2, #57	; 0x39
 8005f40:	2150      	movs	r1, #80	; 0x50
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f004 fd94 	bl	800aa70 <HAL_I2C_Mem_Read>

	return res;
 8005f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <BNO055_SetHighGThreshold>:
 * Method use to set the high g interrupt threshold
 * param: I2C --> pointer on I2C handle struct
 * param: threshold --> threshold in LSB (15.81mg = 1LSB)
 *  * note: need to be call after page(1)
 */
void BNO055_SetHighGThreshold(I2C_HandleTypeDef *I2C,uint8_t threshold){
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b088      	sub	sp, #32
 8005f56:	af04      	add	r7, sp, #16
 8005f58:	6078      	str	r0, [r7, #4]
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	70fb      	strb	r3, [r7, #3]
	uint8_t system_reg;
	system_reg = threshold;
 8005f5e:	78fb      	ldrb	r3, [r7, #3]
 8005f60:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_ACC_HG_THRESH, 1, &system_reg, 1, 10);
 8005f62:	230a      	movs	r3, #10
 8005f64:	9302      	str	r3, [sp, #8]
 8005f66:	2301      	movs	r3, #1
 8005f68:	9301      	str	r3, [sp, #4]
 8005f6a:	f107 030f 	add.w	r3, r7, #15
 8005f6e:	9300      	str	r3, [sp, #0]
 8005f70:	2301      	movs	r3, #1
 8005f72:	2214      	movs	r2, #20
 8005f74:	2150      	movs	r1, #80	; 0x50
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f004 fc66 	bl	800a848 <HAL_I2C_Mem_Write>
}
 8005f7c:	bf00      	nop
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <BNO055_SetHighGDuration>:
 * Method use to set the high g interrupt duration
 * param: I2C --> pointer on I2C handle struct
 * param: duration --> duration in ms (1LSB = 2ms)
 *  * note: need to be call after page(1)
 */
void BNO055_SetHighGDuration(I2C_HandleTypeDef *I2C,uint8_t duration){
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b088      	sub	sp, #32
 8005f88:	af04      	add	r7, sp, #16
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	70fb      	strb	r3, [r7, #3]
	uint8_t system_reg;
	system_reg = duration;
 8005f90:	78fb      	ldrb	r3, [r7, #3]
 8005f92:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_ACC_HG_DURATION, 1, &system_reg, 1, 10);
 8005f94:	230a      	movs	r3, #10
 8005f96:	9302      	str	r3, [sp, #8]
 8005f98:	2301      	movs	r3, #1
 8005f9a:	9301      	str	r3, [sp, #4]
 8005f9c:	f107 030f 	add.w	r3, r7, #15
 8005fa0:	9300      	str	r3, [sp, #0]
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	2213      	movs	r2, #19
 8005fa6:	2150      	movs	r1, #80	; 0x50
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f004 fc4d 	bl	800a848 <HAL_I2C_Mem_Write>
}
 8005fae:	bf00      	nop
 8005fb0:	3710      	adds	r7, #16
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <BNO055_Init>:
/*
 * Init function for IMU, it enable it run self test
 * param: I2C --> pointer on I2C handle struct
 * param: BNO055 --> pointer on IMU struct
 */
uint8_t BNO055_Init(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b088      	sub	sp, #32
 8005fba:	af04      	add	r7, sp, #16
 8005fbc:	6078      	str	r0, [r7, #4]
 8005fbe:	6039      	str	r1, [r7, #0]

	uint8_t res = 0;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	73fb      	strb	r3, [r7, #15]
	uint8_t reg;

	//Reset the IMU error counter
	BNO055->self_test_error = 0;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

	//Add pointer into IMU struct
	BNO055->I2C_pt = I2C;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	//We need to select the page 1
	BNO055_SetPage(I2C,1);
 8005fd4:	2101      	movs	r1, #1
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f7ff fe18 	bl	8005c0c <BNO055_SetPage>

	//Enable High G accelerometer interrupt
	BNO055_EnableAccHighG(I2C);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f7ff fe73 	bl	8005cc8 <BNO055_EnableAccHighG>

	//Enable HIGH G for axis X/Y/Z
	BNO055_EnableHighGAcc(I2C, 'X');
 8005fe2:	2158      	movs	r1, #88	; 0x58
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f7ff feb5 	bl	8005d54 <BNO055_EnableHighGAcc>
	BNO055_EnableHighGAcc(I2C, 'Y');
 8005fea:	2159      	movs	r1, #89	; 0x59
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f7ff feb1 	bl	8005d54 <BNO055_EnableHighGAcc>
	BNO055_EnableHighGAcc(I2C, 'Z');
 8005ff2:	215a      	movs	r1, #90	; 0x5a
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f7ff fead 	bl	8005d54 <BNO055_EnableHighGAcc>

	//Set threshold
	BNO055_SetHighGThreshold(I2C, BNO055_HG_THRESHOLD);
 8005ffa:	2150      	movs	r1, #80	; 0x50
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f7ff ffa8 	bl	8005f52 <BNO055_SetHighGThreshold>

	//Set the duration
	BNO055_SetHighGDuration(I2C, BNO055_HG_DURATION);
 8006002:	2140      	movs	r1, #64	; 0x40
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f7ff ffbd 	bl	8005f84 <BNO055_SetHighGDuration>

	//We need to select the page 0
	BNO055_SetPage(I2C,0);
 800600a:	2100      	movs	r1, #0
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f7ff fdfd 	bl	8005c0c <BNO055_SetPage>

	//As the board have external 32.756 khz clock we use it
	BNO055_EnableExtClock(I2C);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7ff ff15 	bl	8005e42 <BNO055_EnableExtClock>
	/*Make BIST and power up test*/
	osDelay(200);
 8006018:	20c8      	movs	r0, #200	; 0xc8
 800601a:	f00f fa0a 	bl	8015432 <osDelay>
	reg = BNO055_CheckSelfTestResult(I2C, BNO055);
 800601e:	6839      	ldr	r1, [r7, #0]
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f7ff ff50 	bl	8005ec6 <BNO055_CheckSelfTestResult>
 8006026:	4603      	mov	r3, r0
 8006028:	73bb      	strb	r3, [r7, #14]
	if(reg != 0x00){
 800602a:	7bbb      	ldrb	r3, [r7, #14]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d001      	beq.n	8006034 <BNO055_Init+0x7e>
		res = 1;
 8006030:	2301      	movs	r3, #1
 8006032:	73fb      	strb	r3, [r7, #15]
	}

	//Select the operation mode (the NDOF use all 3 sensor and will calculate data using absolute orientation (USE BNO055_OPERATION_MODE_IMU if you want to have relative orientation)
	BNO055_SetOperationMode(I2C, BNO055_OPERATION_MODE_NDOF, BNO055);
 8006034:	683a      	ldr	r2, [r7, #0]
 8006036:	210c      	movs	r1, #12
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f7ff fdfd 	bl	8005c38 <BNO055_SetOperationMode>

	/*Check for writing problem of OPR_MODE_REG*/
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_OPR_MODE, 1, &reg, 1, 10);
 800603e:	230a      	movs	r3, #10
 8006040:	9302      	str	r3, [sp, #8]
 8006042:	2301      	movs	r3, #1
 8006044:	9301      	str	r3, [sp, #4]
 8006046:	f107 030e 	add.w	r3, r7, #14
 800604a:	9300      	str	r3, [sp, #0]
 800604c:	2301      	movs	r3, #1
 800604e:	223d      	movs	r2, #61	; 0x3d
 8006050:	2150      	movs	r1, #80	; 0x50
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f004 fd0c 	bl	800aa70 <HAL_I2C_Mem_Read>
	if( reg != BNO055_OPERATION_MODE_NDOF){
 8006058:	7bbb      	ldrb	r3, [r7, #14]
 800605a:	2b0c      	cmp	r3, #12
 800605c:	d001      	beq.n	8006062 <BNO055_Init+0xac>
		res = 1;
 800605e:	2301      	movs	r3, #1
 8006060:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006062:	7bfb      	ldrb	r3, [r7, #15]
}
 8006064:	4618      	mov	r0, r3
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	0000      	movs	r0, r0
	...

08006070 <BNO055_ReadAccel>:
 * Function use to read accelerometer data from IMU
 * param: I2C --> pointer on I2C handle struct
 * param: BNO055 --> pointer on IMU struct
 * param: I2CControllerProtect --> Semaphore use to protect I2C hardware from being modified by more than one task at the same time
 */
void BNO055_ReadAccel(I2C_HandleTypeDef *I2C,BNO055_t *BNO055,osMutexId I2CControllerProtect){
 8006070:	b580      	push	{r7, lr}
 8006072:	b08a      	sub	sp, #40	; 0x28
 8006074:	af04      	add	r7, sp, #16
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
	//Read gyroscope value
	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;


	xSemaphoreTake(I2CControllerProtect,25);
 800607c:	2119      	movs	r1, #25
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f00f fd20 	bl	8015ac4 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_X_LSB, 1, &reg_value_lsb, 1, 10);
 8006084:	230a      	movs	r3, #10
 8006086:	9302      	str	r3, [sp, #8]
 8006088:	2301      	movs	r3, #1
 800608a:	9301      	str	r3, [sp, #4]
 800608c:	f107 0317 	add.w	r3, r7, #23
 8006090:	9300      	str	r3, [sp, #0]
 8006092:	2301      	movs	r3, #1
 8006094:	2208      	movs	r2, #8
 8006096:	2150      	movs	r1, #80	; 0x50
 8006098:	68f8      	ldr	r0, [r7, #12]
 800609a:	f004 fce9 	bl	800aa70 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_X_MSB, 1, &reg_value_msb, 1, 10);
 800609e:	230a      	movs	r3, #10
 80060a0:	9302      	str	r3, [sp, #8]
 80060a2:	2301      	movs	r3, #1
 80060a4:	9301      	str	r3, [sp, #4]
 80060a6:	f107 0316 	add.w	r3, r7, #22
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	2301      	movs	r3, #1
 80060ae:	2209      	movs	r2, #9
 80060b0:	2150      	movs	r1, #80	; 0x50
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f004 fcdc 	bl	800aa70 <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 80060b8:	2300      	movs	r3, #0
 80060ba:	2200      	movs	r2, #0
 80060bc:	2100      	movs	r1, #0
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f00f fb8c 	bl	80157dc <xQueueGenericSend>
	BNO055->raw_data.accelerometer.x = ((float)(reg_value_lsb + (reg_value_msb<<8))/ (float) accelScale);	//The minus sign is only use to sync axis value to board schematic
 80060c4:	7dfb      	ldrb	r3, [r7, #23]
 80060c6:	461a      	mov	r2, r3
 80060c8:	7dbb      	ldrb	r3, [r7, #22]
 80060ca:	021b      	lsls	r3, r3, #8
 80060cc:	4413      	add	r3, r2
 80060ce:	ee07 3a90 	vmov	s15, r3
 80060d2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80060d6:	4b74      	ldr	r3, [pc, #464]	; (80062a8 <BNO055_ReadAccel+0x238>)
 80060d8:	881b      	ldrh	r3, [r3, #0]
 80060da:	ee07 3a90 	vmov	s15, r3
 80060de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80060e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	edc3 7a03 	vstr	s15, [r3, #12]

	/*In order to scale the acceleration correclty on -327m/s^2 to +327m/s^2*/
	if(BNO055->raw_data.accelerometer.x > 327.68){
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7fe fa0b 	bl	800450c <__aeabi_f2d>
 80060f6:	a368      	add	r3, pc, #416	; (adr r3, 8006298 <BNO055_ReadAccel+0x228>)
 80060f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fc:	f7fe fcee 	bl	8004adc <__aeabi_dcmpgt>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d012      	beq.n	800612c <BNO055_ReadAccel+0xbc>
		BNO055->raw_data.accelerometer.x = BNO055->raw_data.accelerometer.x - 655.36;
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	4618      	mov	r0, r3
 800610c:	f7fe f9fe 	bl	800450c <__aeabi_f2d>
 8006110:	a363      	add	r3, pc, #396	; (adr r3, 80062a0 <BNO055_ReadAccel+0x230>)
 8006112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006116:	f7fe f899 	bl	800424c <__aeabi_dsub>
 800611a:	4602      	mov	r2, r0
 800611c:	460b      	mov	r3, r1
 800611e:	4610      	mov	r0, r2
 8006120:	4619      	mov	r1, r3
 8006122:	f7fe fcfb 	bl	8004b1c <__aeabi_d2f>
 8006126:	4602      	mov	r2, r0
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	60da      	str	r2, [r3, #12]
	}

	xSemaphoreTake(I2CControllerProtect,25);
 800612c:	2119      	movs	r1, #25
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f00f fcc8 	bl	8015ac4 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_Y_LSB, 1, &reg_value_lsb, 1, 10);
 8006134:	230a      	movs	r3, #10
 8006136:	9302      	str	r3, [sp, #8]
 8006138:	2301      	movs	r3, #1
 800613a:	9301      	str	r3, [sp, #4]
 800613c:	f107 0317 	add.w	r3, r7, #23
 8006140:	9300      	str	r3, [sp, #0]
 8006142:	2301      	movs	r3, #1
 8006144:	220a      	movs	r2, #10
 8006146:	2150      	movs	r1, #80	; 0x50
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f004 fc91 	bl	800aa70 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_Y_MSB, 1, &reg_value_msb, 1, 10);
 800614e:	230a      	movs	r3, #10
 8006150:	9302      	str	r3, [sp, #8]
 8006152:	2301      	movs	r3, #1
 8006154:	9301      	str	r3, [sp, #4]
 8006156:	f107 0316 	add.w	r3, r7, #22
 800615a:	9300      	str	r3, [sp, #0]
 800615c:	2301      	movs	r3, #1
 800615e:	220b      	movs	r2, #11
 8006160:	2150      	movs	r1, #80	; 0x50
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f004 fc84 	bl	800aa70 <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 8006168:	2300      	movs	r3, #0
 800616a:	2200      	movs	r2, #0
 800616c:	2100      	movs	r1, #0
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f00f fb34 	bl	80157dc <xQueueGenericSend>
	BNO055->raw_data.accelerometer.y = ((float)(reg_value_lsb + (reg_value_msb<<8))/ (float) accelScale);
 8006174:	7dfb      	ldrb	r3, [r7, #23]
 8006176:	461a      	mov	r2, r3
 8006178:	7dbb      	ldrb	r3, [r7, #22]
 800617a:	021b      	lsls	r3, r3, #8
 800617c:	4413      	add	r3, r2
 800617e:	ee07 3a90 	vmov	s15, r3
 8006182:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006186:	4b48      	ldr	r3, [pc, #288]	; (80062a8 <BNO055_ReadAccel+0x238>)
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	ee07 3a90 	vmov	s15, r3
 800618e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006192:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	edc3 7a04 	vstr	s15, [r3, #16]

	if(BNO055->raw_data.accelerometer.y > 327.68){
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7fe f9b3 	bl	800450c <__aeabi_f2d>
 80061a6:	a33c      	add	r3, pc, #240	; (adr r3, 8006298 <BNO055_ReadAccel+0x228>)
 80061a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ac:	f7fe fc96 	bl	8004adc <__aeabi_dcmpgt>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d012      	beq.n	80061dc <BNO055_ReadAccel+0x16c>
		BNO055->raw_data.accelerometer.y = BNO055->raw_data.accelerometer.y - 655.36;
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7fe f9a6 	bl	800450c <__aeabi_f2d>
 80061c0:	a337      	add	r3, pc, #220	; (adr r3, 80062a0 <BNO055_ReadAccel+0x230>)
 80061c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c6:	f7fe f841 	bl	800424c <__aeabi_dsub>
 80061ca:	4602      	mov	r2, r0
 80061cc:	460b      	mov	r3, r1
 80061ce:	4610      	mov	r0, r2
 80061d0:	4619      	mov	r1, r3
 80061d2:	f7fe fca3 	bl	8004b1c <__aeabi_d2f>
 80061d6:	4602      	mov	r2, r0
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	611a      	str	r2, [r3, #16]
	}


	xSemaphoreTake(I2CControllerProtect,25);
 80061dc:	2119      	movs	r1, #25
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f00f fc70 	bl	8015ac4 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_Z_LSB, 1, &reg_value_lsb, 1, 10);
 80061e4:	230a      	movs	r3, #10
 80061e6:	9302      	str	r3, [sp, #8]
 80061e8:	2301      	movs	r3, #1
 80061ea:	9301      	str	r3, [sp, #4]
 80061ec:	f107 0317 	add.w	r3, r7, #23
 80061f0:	9300      	str	r3, [sp, #0]
 80061f2:	2301      	movs	r3, #1
 80061f4:	220c      	movs	r2, #12
 80061f6:	2150      	movs	r1, #80	; 0x50
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f004 fc39 	bl	800aa70 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_Z_MSB, 1, &reg_value_msb, 1, 10);
 80061fe:	230a      	movs	r3, #10
 8006200:	9302      	str	r3, [sp, #8]
 8006202:	2301      	movs	r3, #1
 8006204:	9301      	str	r3, [sp, #4]
 8006206:	f107 0316 	add.w	r3, r7, #22
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	2301      	movs	r3, #1
 800620e:	220d      	movs	r2, #13
 8006210:	2150      	movs	r1, #80	; 0x50
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f004 fc2c 	bl	800aa70 <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 8006218:	2300      	movs	r3, #0
 800621a:	2200      	movs	r2, #0
 800621c:	2100      	movs	r1, #0
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f00f fadc 	bl	80157dc <xQueueGenericSend>
	BNO055->raw_data.accelerometer.z = ((float)(reg_value_lsb + (reg_value_msb<<8))/ (float) accelScale);
 8006224:	7dfb      	ldrb	r3, [r7, #23]
 8006226:	461a      	mov	r2, r3
 8006228:	7dbb      	ldrb	r3, [r7, #22]
 800622a:	021b      	lsls	r3, r3, #8
 800622c:	4413      	add	r3, r2
 800622e:	ee07 3a90 	vmov	s15, r3
 8006232:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006236:	4b1c      	ldr	r3, [pc, #112]	; (80062a8 <BNO055_ReadAccel+0x238>)
 8006238:	881b      	ldrh	r3, [r3, #0]
 800623a:	ee07 3a90 	vmov	s15, r3
 800623e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006242:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	edc3 7a05 	vstr	s15, [r3, #20]

	if(BNO055->raw_data.accelerometer.z > 327.68){
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	695b      	ldr	r3, [r3, #20]
 8006250:	4618      	mov	r0, r3
 8006252:	f7fe f95b 	bl	800450c <__aeabi_f2d>
 8006256:	a310      	add	r3, pc, #64	; (adr r3, 8006298 <BNO055_ReadAccel+0x228>)
 8006258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625c:	f7fe fc3e 	bl	8004adc <__aeabi_dcmpgt>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d100      	bne.n	8006268 <BNO055_ReadAccel+0x1f8>
		BNO055->raw_data.accelerometer.z = BNO055->raw_data.accelerometer.z - 655.36;
	}
}
 8006266:	e012      	b.n	800628e <BNO055_ReadAccel+0x21e>
		BNO055->raw_data.accelerometer.z = BNO055->raw_data.accelerometer.z - 655.36;
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	695b      	ldr	r3, [r3, #20]
 800626c:	4618      	mov	r0, r3
 800626e:	f7fe f94d 	bl	800450c <__aeabi_f2d>
 8006272:	a30b      	add	r3, pc, #44	; (adr r3, 80062a0 <BNO055_ReadAccel+0x230>)
 8006274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006278:	f7fd ffe8 	bl	800424c <__aeabi_dsub>
 800627c:	4602      	mov	r2, r0
 800627e:	460b      	mov	r3, r1
 8006280:	4610      	mov	r0, r2
 8006282:	4619      	mov	r1, r3
 8006284:	f7fe fc4a 	bl	8004b1c <__aeabi_d2f>
 8006288:	4602      	mov	r2, r0
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	615a      	str	r2, [r3, #20]
}
 800628e:	bf00      	nop
 8006290:	3718      	adds	r7, #24
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	47ae147b 	.word	0x47ae147b
 800629c:	40747ae1 	.word	0x40747ae1
 80062a0:	47ae147b 	.word	0x47ae147b
 80062a4:	40847ae1 	.word	0x40847ae1
 80062a8:	20000000 	.word	0x20000000

080062ac <BNO055_ReadEuler_Roll>:
 * @INPUT - I2C interface struct
 * @INPUT - IMU struc
 * @OUTPUT - None
 * @INFORMATIONS - If use with freertos or other reeltime os please use a semaphore/mutex to protect I2C interface
 */
void BNO055_ReadEuler_Roll(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b088      	sub	sp, #32
 80062b0:	af04      	add	r7, sp, #16
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]

	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;

	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_ROLL_LSB, 1, &reg_value_lsb, 1, 10);
 80062b6:	230a      	movs	r3, #10
 80062b8:	9302      	str	r3, [sp, #8]
 80062ba:	2301      	movs	r3, #1
 80062bc:	9301      	str	r3, [sp, #4]
 80062be:	f107 030f 	add.w	r3, r7, #15
 80062c2:	9300      	str	r3, [sp, #0]
 80062c4:	2301      	movs	r3, #1
 80062c6:	221c      	movs	r2, #28
 80062c8:	2150      	movs	r1, #80	; 0x50
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f004 fbd0 	bl	800aa70 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_ROLL_MSB, 1, &reg_value_msb, 1, 10);
 80062d0:	230a      	movs	r3, #10
 80062d2:	9302      	str	r3, [sp, #8]
 80062d4:	2301      	movs	r3, #1
 80062d6:	9301      	str	r3, [sp, #4]
 80062d8:	f107 030e 	add.w	r3, r7, #14
 80062dc:	9300      	str	r3, [sp, #0]
 80062de:	2301      	movs	r3, #1
 80062e0:	221d      	movs	r2, #29
 80062e2:	2150      	movs	r1, #80	; 0x50
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f004 fbc3 	bl	800aa70 <HAL_I2C_Mem_Read>
	BNO055->processed_data.euler_angles.y = (float) ((reg_value_lsb + (reg_value_msb<<8))/ (float) eulerScale);
 80062ea:	7bfb      	ldrb	r3, [r7, #15]
 80062ec:	461a      	mov	r2, r3
 80062ee:	7bbb      	ldrb	r3, [r7, #14]
 80062f0:	021b      	lsls	r3, r3, #8
 80062f2:	4413      	add	r3, r2
 80062f4:	ee07 3a90 	vmov	s15, r3
 80062f8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80062fc:	4b11      	ldr	r3, [pc, #68]	; (8006344 <BNO055_ReadEuler_Roll+0x98>)
 80062fe:	881b      	ldrh	r3, [r3, #0]
 8006300:	ee07 3a90 	vmov	s15, r3
 8006304:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006308:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	/*Make sure the data are rotating clockwise*/
	if(BNO055->processed_data.euler_angles.y > 2000){
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8006318:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8006348 <BNO055_ReadEuler_Roll+0x9c>
 800631c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006324:	dc00      	bgt.n	8006328 <BNO055_ReadEuler_Roll+0x7c>
		BNO055->processed_data.euler_angles.y = BNO055->processed_data.euler_angles.y - 4096;
	}
}
 8006326:	e009      	b.n	800633c <BNO055_ReadEuler_Roll+0x90>
		BNO055->processed_data.euler_angles.y = BNO055->processed_data.euler_angles.y - 4096;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800632e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800634c <BNO055_ReadEuler_Roll+0xa0>
 8006332:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 800633c:	bf00      	nop
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	20000002 	.word	0x20000002
 8006348:	44fa0000 	.word	0x44fa0000
 800634c:	45800000 	.word	0x45800000

08006350 <BNO055_ReadEuler_Pitch>:
 * @INPUT - I2C interface struct
 * @INPUT - IMU struc
 * @OUTPUT - None
 * @INFORMATIONS - If use with freertos or other reeltime os please use a semaphore/mutex to protect I2C interface
 */
void BNO055_ReadEuler_Pitch(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8006350:	b580      	push	{r7, lr}
 8006352:	b088      	sub	sp, #32
 8006354:	af04      	add	r7, sp, #16
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]

	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;

	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_PITCH_LSB, 1, &reg_value_lsb, 1, 10);
 800635a:	230a      	movs	r3, #10
 800635c:	9302      	str	r3, [sp, #8]
 800635e:	2301      	movs	r3, #1
 8006360:	9301      	str	r3, [sp, #4]
 8006362:	f107 030f 	add.w	r3, r7, #15
 8006366:	9300      	str	r3, [sp, #0]
 8006368:	2301      	movs	r3, #1
 800636a:	221e      	movs	r2, #30
 800636c:	2150      	movs	r1, #80	; 0x50
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f004 fb7e 	bl	800aa70 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_PITCH_MSB, 1, &reg_value_msb, 1, 10);
 8006374:	230a      	movs	r3, #10
 8006376:	9302      	str	r3, [sp, #8]
 8006378:	2301      	movs	r3, #1
 800637a:	9301      	str	r3, [sp, #4]
 800637c:	f107 030e 	add.w	r3, r7, #14
 8006380:	9300      	str	r3, [sp, #0]
 8006382:	2301      	movs	r3, #1
 8006384:	221f      	movs	r2, #31
 8006386:	2150      	movs	r1, #80	; 0x50
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f004 fb71 	bl	800aa70 <HAL_I2C_Mem_Read>
	BNO055->processed_data.euler_angles.x = (float) ((reg_value_lsb + (reg_value_msb<<8))/(float) eulerScale);
 800638e:	7bfb      	ldrb	r3, [r7, #15]
 8006390:	461a      	mov	r2, r3
 8006392:	7bbb      	ldrb	r3, [r7, #14]
 8006394:	021b      	lsls	r3, r3, #8
 8006396:	4413      	add	r3, r2
 8006398:	ee07 3a90 	vmov	s15, r3
 800639c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80063a0:	4b11      	ldr	r3, [pc, #68]	; (80063e8 <BNO055_ReadEuler_Pitch+0x98>)
 80063a2:	881b      	ldrh	r3, [r3, #0]
 80063a4:	ee07 3a90 	vmov	s15, r3
 80063a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80063ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	/*Make sure the data are rotating clockwise*/
	if(BNO055->processed_data.euler_angles.x > 2000){
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80063bc:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80063ec <BNO055_ReadEuler_Pitch+0x9c>
 80063c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063c8:	dc00      	bgt.n	80063cc <BNO055_ReadEuler_Pitch+0x7c>
		BNO055->processed_data.euler_angles.x = BNO055->processed_data.euler_angles.x - 4096;
	}
}
 80063ca:	e009      	b.n	80063e0 <BNO055_ReadEuler_Pitch+0x90>
		BNO055->processed_data.euler_angles.x = BNO055->processed_data.euler_angles.x - 4096;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80063d2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80063f0 <BNO055_ReadEuler_Pitch+0xa0>
 80063d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 80063e0:	bf00      	nop
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	20000002 	.word	0x20000002
 80063ec:	44fa0000 	.word	0x44fa0000
 80063f0:	45800000 	.word	0x45800000

080063f4 <BNO055_ReadEuler_Yaw>:
 * @INPUT - I2C interface struct
 * @INPUT - IMU struct
 * @OUTPUT - None
 * @INFORMATIONS - If use with freertos or other reeltime os please use a semaphore/mutex to protect I2C interface
 */
void BNO055_ReadEuler_Yaw(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b088      	sub	sp, #32
 80063f8:	af04      	add	r7, sp, #16
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]

	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;

	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_HEADING_LSB, 1, &reg_value_lsb, 1, 10);
 80063fe:	230a      	movs	r3, #10
 8006400:	9302      	str	r3, [sp, #8]
 8006402:	2301      	movs	r3, #1
 8006404:	9301      	str	r3, [sp, #4]
 8006406:	f107 030f 	add.w	r3, r7, #15
 800640a:	9300      	str	r3, [sp, #0]
 800640c:	2301      	movs	r3, #1
 800640e:	221a      	movs	r2, #26
 8006410:	2150      	movs	r1, #80	; 0x50
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f004 fb2c 	bl	800aa70 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_HEADING_MSB, 1, &reg_value_msb, 1, 10);
 8006418:	230a      	movs	r3, #10
 800641a:	9302      	str	r3, [sp, #8]
 800641c:	2301      	movs	r3, #1
 800641e:	9301      	str	r3, [sp, #4]
 8006420:	f107 030e 	add.w	r3, r7, #14
 8006424:	9300      	str	r3, [sp, #0]
 8006426:	2301      	movs	r3, #1
 8006428:	221b      	movs	r2, #27
 800642a:	2150      	movs	r1, #80	; 0x50
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f004 fb1f 	bl	800aa70 <HAL_I2C_Mem_Read>
	BNO055->processed_data.euler_angles.z = (float) ((reg_value_lsb + (reg_value_msb<<8))/ (float) eulerScale);
 8006432:	7bfb      	ldrb	r3, [r7, #15]
 8006434:	461a      	mov	r2, r3
 8006436:	7bbb      	ldrb	r3, [r7, #14]
 8006438:	021b      	lsls	r3, r3, #8
 800643a:	4413      	add	r3, r2
 800643c:	ee07 3a90 	vmov	s15, r3
 8006440:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006444:	4b07      	ldr	r3, [pc, #28]	; (8006464 <BNO055_ReadEuler_Yaw+0x70>)
 8006446:	881b      	ldrh	r3, [r3, #0]
 8006448:	ee07 3a90 	vmov	s15, r3
 800644c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006450:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 800645a:	bf00      	nop
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	20000002 	.word	0x20000002

08006468 <BNO055_ComputeSpeed>:
 * @INPUT - I2C interface struct
 * @INPUT - IMU struct
 * @INFORMATIONS - Need to be call after a ReadAccel function in order to work correctly
 * Tick should be increment every ms in order to gather correct data
 */
void BNO055_ComputeSpeed(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8006468:	b580      	push	{r7, lr}
 800646a:	b088      	sub	sp, #32
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]

	float speed_vector_x;
	float current_acceleration =BNO055->raw_data.accelerometer.x;
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	61fb      	str	r3, [r7, #28]
	uint32_t current_tick = HAL_GetTick();
 8006478:	f002 f934 	bl	80086e4 <HAL_GetTick>
 800647c:	61b8      	str	r0, [r7, #24]
	float delta_acceleration = (current_acceleration - BNO055->reserved_for_operation.previous_acceleration.x);
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8006484:	ed97 7a07 	vldr	s14, [r7, #28]
 8006488:	ee77 7a67 	vsub.f32	s15, s14, s15
 800648c:	edc7 7a05 	vstr	s15, [r7, #20]
	uint32_t delta_tick = (current_tick - BNO055->reserved_for_operation.last_call_tick.x);
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006496:	69ba      	ldr	r2, [r7, #24]
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	613b      	str	r3, [r7, #16]


	speed_vector_x = (float)(delta_tick/1000)*current_acceleration;
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	4a0a      	ldr	r2, [pc, #40]	; (80064c8 <BNO055_ComputeSpeed+0x60>)
 80064a0:	fba2 2303 	umull	r2, r3, r2, r3
 80064a4:	099b      	lsrs	r3, r3, #6
 80064a6:	ee07 3a90 	vmov	s15, r3
 80064aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ae:	ed97 7a07 	vldr	s14, [r7, #28]
 80064b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064b6:	edc7 7a03 	vstr	s15, [r7, #12]
	BNO055->processed_data.speed_vector.x = speed_vector_x;
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80064c0:	bf00      	nop
 80064c2:	3720      	adds	r7, #32
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	10624dd3 	.word	0x10624dd3

080064cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80064d2:	4b12      	ldr	r3, [pc, #72]	; (800651c <MX_DMA_Init+0x50>)
 80064d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064d6:	4a11      	ldr	r2, [pc, #68]	; (800651c <MX_DMA_Init+0x50>)
 80064d8:	f043 0304 	orr.w	r3, r3, #4
 80064dc:	6493      	str	r3, [r2, #72]	; 0x48
 80064de:	4b0f      	ldr	r3, [pc, #60]	; (800651c <MX_DMA_Init+0x50>)
 80064e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064e2:	f003 0304 	and.w	r3, r3, #4
 80064e6:	607b      	str	r3, [r7, #4]
 80064e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80064ea:	4b0c      	ldr	r3, [pc, #48]	; (800651c <MX_DMA_Init+0x50>)
 80064ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064ee:	4a0b      	ldr	r2, [pc, #44]	; (800651c <MX_DMA_Init+0x50>)
 80064f0:	f043 0301 	orr.w	r3, r3, #1
 80064f4:	6493      	str	r3, [r2, #72]	; 0x48
 80064f6:	4b09      	ldr	r3, [pc, #36]	; (800651c <MX_DMA_Init+0x50>)
 80064f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064fa:	f003 0301 	and.w	r3, r3, #1
 80064fe:	603b      	str	r3, [r7, #0]
 8006500:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8006502:	2200      	movs	r2, #0
 8006504:	2105      	movs	r1, #5
 8006506:	200b      	movs	r0, #11
 8006508:	f003 fbde 	bl	8009cc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800650c:	200b      	movs	r0, #11
 800650e:	f003 fbf5 	bl	8009cfc <HAL_NVIC_EnableIRQ>

}
 8006512:	bf00      	nop
 8006514:	3708      	adds	r7, #8
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	40021000 	.word	0x40021000

08006520 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b08a      	sub	sp, #40	; 0x28
 8006524:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006526:	f107 0314 	add.w	r3, r7, #20
 800652a:	2200      	movs	r2, #0
 800652c:	601a      	str	r2, [r3, #0]
 800652e:	605a      	str	r2, [r3, #4]
 8006530:	609a      	str	r2, [r3, #8]
 8006532:	60da      	str	r2, [r3, #12]
 8006534:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006536:	4b37      	ldr	r3, [pc, #220]	; (8006614 <MX_GPIO_Init+0xf4>)
 8006538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800653a:	4a36      	ldr	r2, [pc, #216]	; (8006614 <MX_GPIO_Init+0xf4>)
 800653c:	f043 0320 	orr.w	r3, r3, #32
 8006540:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006542:	4b34      	ldr	r3, [pc, #208]	; (8006614 <MX_GPIO_Init+0xf4>)
 8006544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006546:	f003 0320 	and.w	r3, r3, #32
 800654a:	613b      	str	r3, [r7, #16]
 800654c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800654e:	4b31      	ldr	r3, [pc, #196]	; (8006614 <MX_GPIO_Init+0xf4>)
 8006550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006552:	4a30      	ldr	r2, [pc, #192]	; (8006614 <MX_GPIO_Init+0xf4>)
 8006554:	f043 0304 	orr.w	r3, r3, #4
 8006558:	64d3      	str	r3, [r2, #76]	; 0x4c
 800655a:	4b2e      	ldr	r3, [pc, #184]	; (8006614 <MX_GPIO_Init+0xf4>)
 800655c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800655e:	f003 0304 	and.w	r3, r3, #4
 8006562:	60fb      	str	r3, [r7, #12]
 8006564:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006566:	4b2b      	ldr	r3, [pc, #172]	; (8006614 <MX_GPIO_Init+0xf4>)
 8006568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800656a:	4a2a      	ldr	r2, [pc, #168]	; (8006614 <MX_GPIO_Init+0xf4>)
 800656c:	f043 0301 	orr.w	r3, r3, #1
 8006570:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006572:	4b28      	ldr	r3, [pc, #160]	; (8006614 <MX_GPIO_Init+0xf4>)
 8006574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006576:	f003 0301 	and.w	r3, r3, #1
 800657a:	60bb      	str	r3, [r7, #8]
 800657c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800657e:	4b25      	ldr	r3, [pc, #148]	; (8006614 <MX_GPIO_Init+0xf4>)
 8006580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006582:	4a24      	ldr	r2, [pc, #144]	; (8006614 <MX_GPIO_Init+0xf4>)
 8006584:	f043 0308 	orr.w	r3, r3, #8
 8006588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800658a:	4b22      	ldr	r3, [pc, #136]	; (8006614 <MX_GPIO_Init+0xf4>)
 800658c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800658e:	f003 0308 	and.w	r3, r3, #8
 8006592:	607b      	str	r3, [r7, #4]
 8006594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006596:	4b1f      	ldr	r3, [pc, #124]	; (8006614 <MX_GPIO_Init+0xf4>)
 8006598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800659a:	4a1e      	ldr	r2, [pc, #120]	; (8006614 <MX_GPIO_Init+0xf4>)
 800659c:	f043 0302 	orr.w	r3, r3, #2
 80065a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80065a2:	4b1c      	ldr	r3, [pc, #112]	; (8006614 <MX_GPIO_Init+0xf4>)
 80065a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065a6:	f003 0302 	and.w	r3, r3, #2
 80065aa:	603b      	str	r3, [r7, #0]
 80065ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80065ae:	2200      	movs	r2, #0
 80065b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80065b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80065b8:	f004 f862 	bl	800a680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80065bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80065c2:	2301      	movs	r3, #1
 80065c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065c6:	2300      	movs	r3, #0
 80065c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065ca:	2300      	movs	r3, #0
 80065cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80065ce:	f107 0314 	add.w	r3, r7, #20
 80065d2:	4619      	mov	r1, r3
 80065d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80065d8:	f003 fed0 	bl	800a37c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_IT_Pin;
 80065dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80065e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80065e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065e8:	2300      	movs	r3, #0
 80065ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_IT_GPIO_Port, &GPIO_InitStruct);
 80065ec:	f107 0314 	add.w	r3, r7, #20
 80065f0:	4619      	mov	r1, r3
 80065f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80065f6:	f003 fec1 	bl	800a37c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80065fa:	2200      	movs	r2, #0
 80065fc:	2105      	movs	r1, #5
 80065fe:	2028      	movs	r0, #40	; 0x28
 8006600:	f003 fb62 	bl	8009cc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006604:	2028      	movs	r0, #40	; 0x28
 8006606:	f003 fb79 	bl	8009cfc <HAL_NVIC_EnableIRQ>

}
 800660a:	bf00      	nop
 800660c:	3728      	adds	r7, #40	; 0x28
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	40021000 	.word	0x40021000

08006618 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800661c:	4b1b      	ldr	r3, [pc, #108]	; (800668c <MX_I2C2_Init+0x74>)
 800661e:	4a1c      	ldr	r2, [pc, #112]	; (8006690 <MX_I2C2_Init+0x78>)
 8006620:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20C0EDFF;
 8006622:	4b1a      	ldr	r3, [pc, #104]	; (800668c <MX_I2C2_Init+0x74>)
 8006624:	4a1b      	ldr	r2, [pc, #108]	; (8006694 <MX_I2C2_Init+0x7c>)
 8006626:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8006628:	4b18      	ldr	r3, [pc, #96]	; (800668c <MX_I2C2_Init+0x74>)
 800662a:	2200      	movs	r2, #0
 800662c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800662e:	4b17      	ldr	r3, [pc, #92]	; (800668c <MX_I2C2_Init+0x74>)
 8006630:	2201      	movs	r2, #1
 8006632:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006634:	4b15      	ldr	r3, [pc, #84]	; (800668c <MX_I2C2_Init+0x74>)
 8006636:	2200      	movs	r2, #0
 8006638:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800663a:	4b14      	ldr	r3, [pc, #80]	; (800668c <MX_I2C2_Init+0x74>)
 800663c:	2200      	movs	r2, #0
 800663e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006640:	4b12      	ldr	r3, [pc, #72]	; (800668c <MX_I2C2_Init+0x74>)
 8006642:	2200      	movs	r2, #0
 8006644:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006646:	4b11      	ldr	r3, [pc, #68]	; (800668c <MX_I2C2_Init+0x74>)
 8006648:	2200      	movs	r2, #0
 800664a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800664c:	4b0f      	ldr	r3, [pc, #60]	; (800668c <MX_I2C2_Init+0x74>)
 800664e:	2200      	movs	r2, #0
 8006650:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006652:	480e      	ldr	r0, [pc, #56]	; (800668c <MX_I2C2_Init+0x74>)
 8006654:	f004 f869 	bl	800a72a <HAL_I2C_Init>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d001      	beq.n	8006662 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800665e:	f001 f833 	bl	80076c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006662:	2100      	movs	r1, #0
 8006664:	4809      	ldr	r0, [pc, #36]	; (800668c <MX_I2C2_Init+0x74>)
 8006666:	f004 fdc3 	bl	800b1f0 <HAL_I2CEx_ConfigAnalogFilter>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d001      	beq.n	8006674 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8006670:	f001 f82a 	bl	80076c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006674:	2100      	movs	r1, #0
 8006676:	4805      	ldr	r0, [pc, #20]	; (800668c <MX_I2C2_Init+0x74>)
 8006678:	f004 fe05 	bl	800b286 <HAL_I2CEx_ConfigDigitalFilter>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d001      	beq.n	8006686 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8006682:	f001 f821 	bl	80076c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006686:	bf00      	nop
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	20000374 	.word	0x20000374
 8006690:	40005800 	.word	0x40005800
 8006694:	20c0edff 	.word	0x20c0edff

08006698 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b0a0      	sub	sp, #128	; 0x80
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066a0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80066a4:	2200      	movs	r2, #0
 80066a6:	601a      	str	r2, [r3, #0]
 80066a8:	605a      	str	r2, [r3, #4]
 80066aa:	609a      	str	r2, [r3, #8]
 80066ac:	60da      	str	r2, [r3, #12]
 80066ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80066b0:	f107 0318 	add.w	r3, r7, #24
 80066b4:	2254      	movs	r2, #84	; 0x54
 80066b6:	2100      	movs	r1, #0
 80066b8:	4618      	mov	r0, r3
 80066ba:	f011 fcdd 	bl	8018078 <memset>
  if(i2cHandle->Instance==I2C2)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a2c      	ldr	r2, [pc, #176]	; (8006774 <HAL_I2C_MspInit+0xdc>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d151      	bne.n	800676c <HAL_I2C_MspInit+0xd4>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80066c8:	2380      	movs	r3, #128	; 0x80
 80066ca:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80066cc:	2300      	movs	r3, #0
 80066ce:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80066d0:	f107 0318 	add.w	r3, r7, #24
 80066d4:	4618      	mov	r0, r3
 80066d6:	f007 f95f 	bl	800d998 <HAL_RCCEx_PeriphCLKConfig>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d001      	beq.n	80066e4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80066e0:	f000 fff2 	bl	80076c8 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80066e4:	4b24      	ldr	r3, [pc, #144]	; (8006778 <HAL_I2C_MspInit+0xe0>)
 80066e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066e8:	4a23      	ldr	r2, [pc, #140]	; (8006778 <HAL_I2C_MspInit+0xe0>)
 80066ea:	f043 0320 	orr.w	r3, r3, #32
 80066ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80066f0:	4b21      	ldr	r3, [pc, #132]	; (8006778 <HAL_I2C_MspInit+0xe0>)
 80066f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066f4:	f003 0320 	and.w	r3, r3, #32
 80066f8:	617b      	str	r3, [r7, #20]
 80066fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80066fc:	4b1e      	ldr	r3, [pc, #120]	; (8006778 <HAL_I2C_MspInit+0xe0>)
 80066fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006700:	4a1d      	ldr	r2, [pc, #116]	; (8006778 <HAL_I2C_MspInit+0xe0>)
 8006702:	f043 0304 	orr.w	r3, r3, #4
 8006706:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006708:	4b1b      	ldr	r3, [pc, #108]	; (8006778 <HAL_I2C_MspInit+0xe0>)
 800670a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800670c:	f003 0304 	and.w	r3, r3, #4
 8006710:	613b      	str	r3, [r7, #16]
 8006712:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0-OSC_IN     ------> I2C2_SDA
    PC4     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006714:	2301      	movs	r3, #1
 8006716:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006718:	2312      	movs	r3, #18
 800671a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800671c:	2300      	movs	r3, #0
 800671e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006720:	2300      	movs	r3, #0
 8006722:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006724:	2304      	movs	r3, #4
 8006726:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006728:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800672c:	4619      	mov	r1, r3
 800672e:	4813      	ldr	r0, [pc, #76]	; (800677c <HAL_I2C_MspInit+0xe4>)
 8006730:	f003 fe24 	bl	800a37c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006734:	2310      	movs	r3, #16
 8006736:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006738:	2312      	movs	r3, #18
 800673a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800673c:	2300      	movs	r3, #0
 800673e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006740:	2300      	movs	r3, #0
 8006742:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006744:	2304      	movs	r3, #4
 8006746:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006748:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800674c:	4619      	mov	r1, r3
 800674e:	480c      	ldr	r0, [pc, #48]	; (8006780 <HAL_I2C_MspInit+0xe8>)
 8006750:	f003 fe14 	bl	800a37c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006754:	4b08      	ldr	r3, [pc, #32]	; (8006778 <HAL_I2C_MspInit+0xe0>)
 8006756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006758:	4a07      	ldr	r2, [pc, #28]	; (8006778 <HAL_I2C_MspInit+0xe0>)
 800675a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800675e:	6593      	str	r3, [r2, #88]	; 0x58
 8006760:	4b05      	ldr	r3, [pc, #20]	; (8006778 <HAL_I2C_MspInit+0xe0>)
 8006762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006764:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006768:	60fb      	str	r3, [r7, #12]
 800676a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800676c:	bf00      	nop
 800676e:	3780      	adds	r7, #128	; 0x80
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	40005800 	.word	0x40005800
 8006778:	40021000 	.word	0x40021000
 800677c:	48001400 	.word	0x48001400
 8006780:	48000800 	.word	0x48000800

08006784 <gps_ReadNMEA>:
 */

#include "l80-m39.h"


void gps_ReadNMEA(uint8_t nmea_data[],GPS_t *gps_struct){
 8006784:	b580      	push	{r7, lr}
 8006786:	b08e      	sub	sp, #56	; 0x38
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]

	uint8_t string_nmea[6];
	uint8_t gpgga_nmea[6] = "GPGGA\0";
 800678e:	4a70      	ldr	r2, [pc, #448]	; (8006950 <gps_ReadNMEA+0x1cc>)
 8006790:	f107 0318 	add.w	r3, r7, #24
 8006794:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006798:	6018      	str	r0, [r3, #0]
 800679a:	3304      	adds	r3, #4
 800679c:	8019      	strh	r1, [r3, #0]
	uint8_t readed_data[12];
	uint8_t delta;
	uint8_t begin_offset;
	uint8_t processing_offset = 0;
 800679e:	2300      	movs	r3, #0
 80067a0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	//Loop for all the nmea data
	for(int i=0;i<BUFFER_SIZE_NMEA;i++){
 80067a4:	2300      	movs	r3, #0
 80067a6:	633b      	str	r3, [r7, #48]	; 0x30
 80067a8:	e0c8      	b.n	800693c <gps_ReadNMEA+0x1b8>
		/*only look for a data beginin symbol = $ */
		if(nmea_data[i] == '$'){
 80067aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	4413      	add	r3, r2
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	2b24      	cmp	r3, #36	; 0x24
 80067b4:	f040 80bf 	bne.w	8006936 <gps_ReadNMEA+0x1b2>
			/*Check if we have $GPGGA*/
			for(int j=0;j<5;j++){
 80067b8:	2300      	movs	r3, #0
 80067ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067bc:	e00f      	b.n	80067de <gps_ReadNMEA+0x5a>
				string_nmea[j] = nmea_data[(i+j+1)];
 80067be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c2:	4413      	add	r3, r2
 80067c4:	3301      	adds	r3, #1
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	4413      	add	r3, r2
 80067ca:	7819      	ldrb	r1, [r3, #0]
 80067cc:	f107 0220 	add.w	r2, r7, #32
 80067d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d2:	4413      	add	r3, r2
 80067d4:	460a      	mov	r2, r1
 80067d6:	701a      	strb	r2, [r3, #0]
			for(int j=0;j<5;j++){
 80067d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067da:	3301      	adds	r3, #1
 80067dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e0:	2b04      	cmp	r3, #4
 80067e2:	ddec      	ble.n	80067be <gps_ReadNMEA+0x3a>
			}
			string_nmea[5] = 0;
 80067e4:	2300      	movs	r3, #0
 80067e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			/*Be aware that input string of strcmp need to end on \0 If not the result will probably be random value*/
			if(strcmp(string_nmea,gpgga_nmea) == 0){
 80067ea:	f107 0218 	add.w	r2, r7, #24
 80067ee:	f107 0320 	add.w	r3, r7, #32
 80067f2:	4611      	mov	r1, r2
 80067f4:	4618      	mov	r0, r3
 80067f6:	f7fd fd13 	bl	8004220 <strcmp>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f040 809a 	bne.w	8006936 <gps_ReadNMEA+0x1b2>
				i+=6;	/*Skip GPGGA,*/
 8006802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006804:	3306      	adds	r3, #6
 8006806:	633b      	str	r3, [r7, #48]	; 0x30
				for(int k=0;k<12;k++){
 8006808:	2300      	movs	r3, #0
 800680a:	62bb      	str	r3, [r7, #40]	; 0x28
 800680c:	e08e      	b.n	800692c <gps_ReadNMEA+0x1a8>

					/*Read a part of the incomming data*/
					i++;	/*skip ','*/
 800680e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006810:	3301      	adds	r3, #1
 8006812:	633b      	str	r3, [r7, #48]	; 0x30
					begin_offset = i;
 8006814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006816:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					delta = 0;
 800681a:	2300      	movs	r3, #0
 800681c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

					while((nmea_data[i] !='\0' )&&( nmea_data[i] != ',')){
 8006820:	e013      	b.n	800684a <gps_ReadNMEA+0xc6>
						readed_data[delta] = nmea_data[i];
 8006822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	441a      	add	r2, r3
 8006828:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800682c:	7812      	ldrb	r2, [r2, #0]
 800682e:	3338      	adds	r3, #56	; 0x38
 8006830:	443b      	add	r3, r7
 8006832:	f803 2c2c 	strb.w	r2, [r3, #-44]
						i++;
 8006836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006838:	3301      	adds	r3, #1
 800683a:	633b      	str	r3, [r7, #48]	; 0x30
						delta = i - begin_offset;
 800683c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683e:	b2da      	uxtb	r2, r3
 8006840:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					while((nmea_data[i] !='\0' )&&( nmea_data[i] != ',')){
 800684a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	4413      	add	r3, r2
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d005      	beq.n	8006862 <gps_ReadNMEA+0xde>
 8006856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	4413      	add	r3, r2
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	2b2c      	cmp	r3, #44	; 0x2c
 8006860:	d1df      	bne.n	8006822 <gps_ReadNMEA+0x9e>
					}
					processing_offset++;
 8006862:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006866:	3301      	adds	r3, #1
 8006868:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					/*Process incomming data*/
					switch (processing_offset) {
 800686c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006870:	3b01      	subs	r3, #1
 8006872:	2b0a      	cmp	r3, #10
 8006874:	d857      	bhi.n	8006926 <gps_ReadNMEA+0x1a2>
 8006876:	a201      	add	r2, pc, #4	; (adr r2, 800687c <gps_ReadNMEA+0xf8>)
 8006878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687c:	080068a9 	.word	0x080068a9
 8006880:	080068b7 	.word	0x080068b7
 8006884:	080068c5 	.word	0x080068c5
 8006888:	080068d3 	.word	0x080068d3
 800688c:	080068e1 	.word	0x080068e1
 8006890:	080068ef 	.word	0x080068ef
 8006894:	080068fd 	.word	0x080068fd
 8006898:	08006927 	.word	0x08006927
 800689c:	0800690b 	.word	0x0800690b
 80068a0:	08006927 	.word	0x08006927
 80068a4:	08006919 	.word	0x08006919
						/*UTC*/
						case 1:
							gps_ProcessUTC(readed_data, gps_struct);
 80068a8:	f107 030c 	add.w	r3, r7, #12
 80068ac:	6839      	ldr	r1, [r7, #0]
 80068ae:	4618      	mov	r0, r3
 80068b0:	f000 f850 	bl	8006954 <gps_ProcessUTC>
							break;
 80068b4:	e037      	b.n	8006926 <gps_ReadNMEA+0x1a2>

						/*LATITUDE*/
						case 2:
							gps_ProcessLatitude(readed_data, gps_struct);
 80068b6:	f107 030c 	add.w	r3, r7, #12
 80068ba:	6839      	ldr	r1, [r7, #0]
 80068bc:	4618      	mov	r0, r3
 80068be:	f000 f887 	bl	80069d0 <gps_ProcessLatitude>
							break;
 80068c2:	e030      	b.n	8006926 <gps_ReadNMEA+0x1a2>

						/*NORTH - SOUTH*/
						case 3:
							gps_ProcessNorthSouth(readed_data, gps_struct);
 80068c4:	f107 030c 	add.w	r3, r7, #12
 80068c8:	6839      	ldr	r1, [r7, #0]
 80068ca:	4618      	mov	r0, r3
 80068cc:	f000 f9fa 	bl	8006cc4 <gps_ProcessNorthSouth>
							break;
 80068d0:	e029      	b.n	8006926 <gps_ReadNMEA+0x1a2>

						/*LONGITUDE*/
						case 4:
							gps_ProcessLongitude(readed_data, gps_struct);
 80068d2:	f107 030c 	add.w	r3, r7, #12
 80068d6:	6839      	ldr	r1, [r7, #0]
 80068d8:	4618      	mov	r0, r3
 80068da:	f000 f935 	bl	8006b48 <gps_ProcessLongitude>
							break;
 80068de:	e022      	b.n	8006926 <gps_ReadNMEA+0x1a2>

						/*EAST - WEST*/
						case 5:
							gps_ProcessEastWest(readed_data,gps_struct);
 80068e0:	f107 030c 	add.w	r3, r7, #12
 80068e4:	6839      	ldr	r1, [r7, #0]
 80068e6:	4618      	mov	r0, r3
 80068e8:	f000 fa02 	bl	8006cf0 <gps_ProcessEastWest>
							break;
 80068ec:	e01b      	b.n	8006926 <gps_ReadNMEA+0x1a2>

						/*FIX QUALIFICATION*/
						case 6:
							gps_ProcessFix(readed_data, gps_struct);
 80068ee:	f107 030c 	add.w	r3, r7, #12
 80068f2:	6839      	ldr	r1, [r7, #0]
 80068f4:	4618      	mov	r0, r3
 80068f6:	f000 fa11 	bl	8006d1c <gps_ProcessFix>
							break;
 80068fa:	e014      	b.n	8006926 <gps_ReadNMEA+0x1a2>

						/*SATELLITES COUNT */
						case 7:
							gps_ProcessSatelliteCount(readed_data, gps_struct);
 80068fc:	f107 030c 	add.w	r3, r7, #12
 8006900:	6839      	ldr	r1, [r7, #0]
 8006902:	4618      	mov	r0, r3
 8006904:	f000 fa28 	bl	8006d58 <gps_ProcessSatelliteCount>
							break;
 8006908:	e00d      	b.n	8006926 <gps_ReadNMEA+0x1a2>

						/*MSL ALTITUDE*/
						case 9:
							gps_ProcessAltitude(readed_data, gps_struct);
 800690a:	f107 030c 	add.w	r3, r7, #12
 800690e:	6839      	ldr	r1, [r7, #0]
 8006910:	4618      	mov	r0, r3
 8006912:	f000 fa3d 	bl	8006d90 <gps_ProcessAltitude>
							break;
 8006916:	e006      	b.n	8006926 <gps_ReadNMEA+0x1a2>

						/*ELLIPTICAL CORRECTION */
						case 11:
							gps_ProcessAltitudeCorre(readed_data, gps_struct);	//Can be use to process altitude correction as well
 8006918:	f107 030c 	add.w	r3, r7, #12
 800691c:	6839      	ldr	r1, [r7, #0]
 800691e:	4618      	mov	r0, r3
 8006920:	f000 fa92 	bl	8006e48 <gps_ProcessAltitudeCorre>
							break;
 8006924:	bf00      	nop
				for(int k=0;k<12;k++){
 8006926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006928:	3301      	adds	r3, #1
 800692a:	62bb      	str	r3, [r7, #40]	; 0x28
 800692c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692e:	2b0b      	cmp	r3, #11
 8006930:	f77f af6d 	ble.w	800680e <gps_ReadNMEA+0x8a>
					}
				}
				/*After the first $GPGGA read we need to quit the current reading process*/
				break;
 8006934:	e008      	b.n	8006948 <gps_ReadNMEA+0x1c4>
	for(int i=0;i<BUFFER_SIZE_NMEA;i++){
 8006936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006938:	3301      	adds	r3, #1
 800693a:	633b      	str	r3, [r7, #48]	; 0x30
 800693c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006942:	f6ff af32 	blt.w	80067aa <gps_ReadNMEA+0x26>

			}
		}
	}
}
 8006946:	bf00      	nop
 8006948:	bf00      	nop
 800694a:	3738      	adds	r7, #56	; 0x38
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	08019300 	.word	0x08019300

08006954 <gps_ProcessUTC>:

void gps_ProcessUTC(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
	gps_struct->utc_time.hour = ((utc_incomming[0] - '0')*10) + (utc_incomming[1] - '0');
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	461a      	mov	r2, r3
 8006964:	0092      	lsls	r2, r2, #2
 8006966:	4413      	add	r3, r2
 8006968:	005b      	lsls	r3, r3, #1
 800696a:	b2da      	uxtb	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	3301      	adds	r3, #1
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	4413      	add	r3, r2
 8006974:	b2db      	uxtb	r3, r3
 8006976:	3b10      	subs	r3, #16
 8006978:	b2da      	uxtb	r2, r3
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	761a      	strb	r2, [r3, #24]
	gps_struct->utc_time.minute = ((utc_incomming[2] - '0')*10) + (utc_incomming[3] - '0');
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	3302      	adds	r3, #2
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	461a      	mov	r2, r3
 8006986:	0092      	lsls	r2, r2, #2
 8006988:	4413      	add	r3, r2
 800698a:	005b      	lsls	r3, r3, #1
 800698c:	b2da      	uxtb	r2, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	3303      	adds	r3, #3
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	4413      	add	r3, r2
 8006996:	b2db      	uxtb	r3, r3
 8006998:	3b10      	subs	r3, #16
 800699a:	b2da      	uxtb	r2, r3
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	765a      	strb	r2, [r3, #25]
	gps_struct->utc_time.second = ((utc_incomming[4] - '0')*10) + (utc_incomming[5] - '0');
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	3304      	adds	r3, #4
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	461a      	mov	r2, r3
 80069a8:	0092      	lsls	r2, r2, #2
 80069aa:	4413      	add	r3, r2
 80069ac:	005b      	lsls	r3, r3, #1
 80069ae:	b2da      	uxtb	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	3305      	adds	r3, #5
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	4413      	add	r3, r2
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	3b10      	subs	r3, #16
 80069bc:	b2da      	uxtb	r2, r3
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	769a      	strb	r2, [r3, #26]
}
 80069c2:	bf00      	nop
 80069c4:	370c      	adds	r7, #12
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
	...

080069d0 <gps_ProcessLatitude>:

void gps_ProcessLatitude(uint8_t utc_incomming[],GPS_t *gps_struct){
 80069d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80069d4:	b084      	sub	sp, #16
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
 80069da:	6039      	str	r1, [r7, #0]

	int8_t degree_DMm = 0;
 80069dc:	2300      	movs	r3, #0
 80069de:	73fb      	strb	r3, [r7, #15]
	float minute_DMm = 0;
 80069e0:	f04f 0300 	mov.w	r3, #0
 80069e4:	60bb      	str	r3, [r7, #8]

	/*Add reader degree*/
	degree_DMm = ((utc_incomming[0] - '0')*10) + (utc_incomming[1] - '0');
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	3b30      	subs	r3, #48	; 0x30
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	461a      	mov	r2, r3
 80069f0:	0092      	lsls	r2, r2, #2
 80069f2:	4413      	add	r3, r2
 80069f4:	005b      	lsls	r3, r3, #1
 80069f6:	b2da      	uxtb	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	3301      	adds	r3, #1
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	4413      	add	r3, r2
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	3b30      	subs	r3, #48	; 0x30
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	73fb      	strb	r3, [r7, #15]
	/*Add first part of minutes*/
	minute_DMm = ((utc_incomming[2] - '0')*10) + (utc_incomming[3] - '0');
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	3302      	adds	r3, #2
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006a12:	4613      	mov	r3, r2
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	4413      	add	r3, r2
 8006a18:	005b      	lsls	r3, r3, #1
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	3303      	adds	r3, #3
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	3b30      	subs	r3, #48	; 0x30
 8006a24:	4413      	add	r3, r2
 8006a26:	ee07 3a90 	vmov	s15, r3
 8006a2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a2e:	edc7 7a02 	vstr	s15, [r7, #8]
	minute_DMm += ((utc_incomming[5] - '0')*0.1) + ((utc_incomming[6] - '0')*0.01) + ((utc_incomming[7] - '0')*0.001) + ((utc_incomming[8] - '0')*0.0001);
 8006a32:	68b8      	ldr	r0, [r7, #8]
 8006a34:	f7fd fd6a 	bl	800450c <__aeabi_f2d>
 8006a38:	4604      	mov	r4, r0
 8006a3a:	460d      	mov	r5, r1
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	3305      	adds	r3, #5
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	3b30      	subs	r3, #48	; 0x30
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7fd fd4f 	bl	80044e8 <__aeabi_i2d>
 8006a4a:	a336      	add	r3, pc, #216	; (adr r3, 8006b24 <gps_ProcessLatitude+0x154>)
 8006a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a50:	f7fd fdb4 	bl	80045bc <__aeabi_dmul>
 8006a54:	4602      	mov	r2, r0
 8006a56:	460b      	mov	r3, r1
 8006a58:	4690      	mov	r8, r2
 8006a5a:	4699      	mov	r9, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	3306      	adds	r3, #6
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	3b30      	subs	r3, #48	; 0x30
 8006a64:	4618      	mov	r0, r3
 8006a66:	f7fd fd3f 	bl	80044e8 <__aeabi_i2d>
 8006a6a:	a330      	add	r3, pc, #192	; (adr r3, 8006b2c <gps_ProcessLatitude+0x15c>)
 8006a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a70:	f7fd fda4 	bl	80045bc <__aeabi_dmul>
 8006a74:	4602      	mov	r2, r0
 8006a76:	460b      	mov	r3, r1
 8006a78:	4640      	mov	r0, r8
 8006a7a:	4649      	mov	r1, r9
 8006a7c:	f7fd fbe8 	bl	8004250 <__adddf3>
 8006a80:	4602      	mov	r2, r0
 8006a82:	460b      	mov	r3, r1
 8006a84:	4690      	mov	r8, r2
 8006a86:	4699      	mov	r9, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	3307      	adds	r3, #7
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	3b30      	subs	r3, #48	; 0x30
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7fd fd29 	bl	80044e8 <__aeabi_i2d>
 8006a96:	a327      	add	r3, pc, #156	; (adr r3, 8006b34 <gps_ProcessLatitude+0x164>)
 8006a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9c:	f7fd fd8e 	bl	80045bc <__aeabi_dmul>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	4640      	mov	r0, r8
 8006aa6:	4649      	mov	r1, r9
 8006aa8:	f7fd fbd2 	bl	8004250 <__adddf3>
 8006aac:	4602      	mov	r2, r0
 8006aae:	460b      	mov	r3, r1
 8006ab0:	4690      	mov	r8, r2
 8006ab2:	4699      	mov	r9, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	3308      	adds	r3, #8
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	3b30      	subs	r3, #48	; 0x30
 8006abc:	4618      	mov	r0, r3
 8006abe:	f7fd fd13 	bl	80044e8 <__aeabi_i2d>
 8006ac2:	a31e      	add	r3, pc, #120	; (adr r3, 8006b3c <gps_ProcessLatitude+0x16c>)
 8006ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac8:	f7fd fd78 	bl	80045bc <__aeabi_dmul>
 8006acc:	4602      	mov	r2, r0
 8006ace:	460b      	mov	r3, r1
 8006ad0:	4640      	mov	r0, r8
 8006ad2:	4649      	mov	r1, r9
 8006ad4:	f7fd fbbc 	bl	8004250 <__adddf3>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	460b      	mov	r3, r1
 8006adc:	4620      	mov	r0, r4
 8006ade:	4629      	mov	r1, r5
 8006ae0:	f7fd fbb6 	bl	8004250 <__adddf3>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	4610      	mov	r0, r2
 8006aea:	4619      	mov	r1, r3
 8006aec:	f7fe f816 	bl	8004b1c <__aeabi_d2f>
 8006af0:	4603      	mov	r3, r0
 8006af2:	60bb      	str	r3, [r7, #8]

	gps_struct->latitude_deg_s = (degree_DMm + (minute_DMm/60));
 8006af4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006af8:	ee07 3a90 	vmov	s15, r3
 8006afc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b00:	edd7 6a02 	vldr	s13, [r7, #8]
 8006b04:	ed9f 6a06 	vldr	s12, [pc, #24]	; 8006b20 <gps_ProcessLatitude+0x150>
 8006b08:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8006b0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	edc3 7a00 	vstr	s15, [r3]
}
 8006b16:	bf00      	nop
 8006b18:	3710      	adds	r7, #16
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006b20:	42700000 	.word	0x42700000
 8006b24:	9999999a 	.word	0x9999999a
 8006b28:	3fb99999 	.word	0x3fb99999
 8006b2c:	47ae147b 	.word	0x47ae147b
 8006b30:	3f847ae1 	.word	0x3f847ae1
 8006b34:	d2f1a9fc 	.word	0xd2f1a9fc
 8006b38:	3f50624d 	.word	0x3f50624d
 8006b3c:	eb1c432d 	.word	0xeb1c432d
 8006b40:	3f1a36e2 	.word	0x3f1a36e2
 8006b44:	00000000 	.word	0x00000000

08006b48 <gps_ProcessLongitude>:

void gps_ProcessLongitude(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006b48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006b4c:	b084      	sub	sp, #16
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
 8006b52:	6039      	str	r1, [r7, #0]

	int8_t degree_DMm = 0;
 8006b54:	2300      	movs	r3, #0
 8006b56:	73fb      	strb	r3, [r7, #15]
	float minute_DMm = 0;
 8006b58:	f04f 0300 	mov.w	r3, #0
 8006b5c:	60bb      	str	r3, [r7, #8]

	/*Add reader degree*/
	degree_DMm = ((utc_incomming[1] - '0')*10) + (utc_incomming[2] - '0');
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	3301      	adds	r3, #1
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	3b30      	subs	r3, #48	; 0x30
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	461a      	mov	r2, r3
 8006b6a:	0092      	lsls	r2, r2, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	005b      	lsls	r3, r3, #1
 8006b70:	b2da      	uxtb	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	3302      	adds	r3, #2
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	4413      	add	r3, r2
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	3b30      	subs	r3, #48	; 0x30
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	73fb      	strb	r3, [r7, #15]
	/*Add first part of minutes*/
	minute_DMm = ((utc_incomming[3] - '0')*10) + (utc_incomming[4] - '0');
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	3303      	adds	r3, #3
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	4413      	add	r3, r2
 8006b92:	005b      	lsls	r3, r3, #1
 8006b94:	461a      	mov	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	3304      	adds	r3, #4
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	3b30      	subs	r3, #48	; 0x30
 8006b9e:	4413      	add	r3, r2
 8006ba0:	ee07 3a90 	vmov	s15, r3
 8006ba4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ba8:	edc7 7a02 	vstr	s15, [r7, #8]
	minute_DMm += ((utc_incomming[5] - '0')*0.1) + ((utc_incomming[6] - '0')*0.01) + ((utc_incomming[7] - '0')*0.001) + ((utc_incomming[8] - '0')*0.0001);
 8006bac:	68b8      	ldr	r0, [r7, #8]
 8006bae:	f7fd fcad 	bl	800450c <__aeabi_f2d>
 8006bb2:	4604      	mov	r4, r0
 8006bb4:	460d      	mov	r5, r1
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	3305      	adds	r3, #5
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	3b30      	subs	r3, #48	; 0x30
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f7fd fc92 	bl	80044e8 <__aeabi_i2d>
 8006bc4:	a337      	add	r3, pc, #220	; (adr r3, 8006ca4 <gps_ProcessLongitude+0x15c>)
 8006bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bca:	f7fd fcf7 	bl	80045bc <__aeabi_dmul>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	4690      	mov	r8, r2
 8006bd4:	4699      	mov	r9, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	3306      	adds	r3, #6
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	3b30      	subs	r3, #48	; 0x30
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7fd fc82 	bl	80044e8 <__aeabi_i2d>
 8006be4:	a331      	add	r3, pc, #196	; (adr r3, 8006cac <gps_ProcessLongitude+0x164>)
 8006be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bea:	f7fd fce7 	bl	80045bc <__aeabi_dmul>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	4640      	mov	r0, r8
 8006bf4:	4649      	mov	r1, r9
 8006bf6:	f7fd fb2b 	bl	8004250 <__adddf3>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	4690      	mov	r8, r2
 8006c00:	4699      	mov	r9, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	3307      	adds	r3, #7
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	3b30      	subs	r3, #48	; 0x30
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f7fd fc6c 	bl	80044e8 <__aeabi_i2d>
 8006c10:	a328      	add	r3, pc, #160	; (adr r3, 8006cb4 <gps_ProcessLongitude+0x16c>)
 8006c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c16:	f7fd fcd1 	bl	80045bc <__aeabi_dmul>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	4640      	mov	r0, r8
 8006c20:	4649      	mov	r1, r9
 8006c22:	f7fd fb15 	bl	8004250 <__adddf3>
 8006c26:	4602      	mov	r2, r0
 8006c28:	460b      	mov	r3, r1
 8006c2a:	4690      	mov	r8, r2
 8006c2c:	4699      	mov	r9, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	3308      	adds	r3, #8
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	3b30      	subs	r3, #48	; 0x30
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7fd fc56 	bl	80044e8 <__aeabi_i2d>
 8006c3c:	a31f      	add	r3, pc, #124	; (adr r3, 8006cbc <gps_ProcessLongitude+0x174>)
 8006c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c42:	f7fd fcbb 	bl	80045bc <__aeabi_dmul>
 8006c46:	4602      	mov	r2, r0
 8006c48:	460b      	mov	r3, r1
 8006c4a:	4640      	mov	r0, r8
 8006c4c:	4649      	mov	r1, r9
 8006c4e:	f7fd faff 	bl	8004250 <__adddf3>
 8006c52:	4602      	mov	r2, r0
 8006c54:	460b      	mov	r3, r1
 8006c56:	4620      	mov	r0, r4
 8006c58:	4629      	mov	r1, r5
 8006c5a:	f7fd faf9 	bl	8004250 <__adddf3>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	460b      	mov	r3, r1
 8006c62:	4610      	mov	r0, r2
 8006c64:	4619      	mov	r1, r3
 8006c66:	f7fd ff59 	bl	8004b1c <__aeabi_d2f>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	60bb      	str	r3, [r7, #8]

	gps_struct->longitude_deg_s = (degree_DMm + (minute_DMm/60));
 8006c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c72:	ee07 3a90 	vmov	s15, r3
 8006c76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c7a:	edd7 6a02 	vldr	s13, [r7, #8]
 8006c7e:	ed9f 6a08 	vldr	s12, [pc, #32]	; 8006ca0 <gps_ProcessLongitude+0x158>
 8006c82:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8006c86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8006c90:	bf00      	nop
 8006c92:	3710      	adds	r7, #16
 8006c94:	46bd      	mov	sp, r7
 8006c96:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006c9a:	bf00      	nop
 8006c9c:	f3af 8000 	nop.w
 8006ca0:	42700000 	.word	0x42700000
 8006ca4:	9999999a 	.word	0x9999999a
 8006ca8:	3fb99999 	.word	0x3fb99999
 8006cac:	47ae147b 	.word	0x47ae147b
 8006cb0:	3f847ae1 	.word	0x3f847ae1
 8006cb4:	d2f1a9fc 	.word	0xd2f1a9fc
 8006cb8:	3f50624d 	.word	0x3f50624d
 8006cbc:	eb1c432d 	.word	0xeb1c432d
 8006cc0:	3f1a36e2 	.word	0x3f1a36e2

08006cc4 <gps_ProcessNorthSouth>:

void gps_ProcessNorthSouth(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]

	if(utc_incomming[0] == 'N'){
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	2b4e      	cmp	r3, #78	; 0x4e
 8006cd4:	d103      	bne.n	8006cde <gps_ProcessNorthSouth+0x1a>
		gps_struct->north_south = north;
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	741a      	strb	r2, [r3, #16]
	}
	else{
		gps_struct->north_south = south;
	}
}
 8006cdc:	e002      	b.n	8006ce4 <gps_ProcessNorthSouth+0x20>
		gps_struct->north_south = south;
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	741a      	strb	r2, [r3, #16]
}
 8006ce4:	bf00      	nop
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <gps_ProcessEastWest>:

void gps_ProcessEastWest(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]

	if(utc_incomming[0] == 'E'){
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	2b45      	cmp	r3, #69	; 0x45
 8006d00:	d103      	bne.n	8006d0a <gps_ProcessEastWest+0x1a>
		gps_struct->east_west = east;
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	2202      	movs	r2, #2
 8006d06:	745a      	strb	r2, [r3, #17]
	}
	else{
		gps_struct->east_west = west;
	}
}
 8006d08:	e002      	b.n	8006d10 <gps_ProcessEastWest+0x20>
		gps_struct->east_west = west;
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	2203      	movs	r2, #3
 8006d0e:	745a      	strb	r2, [r3, #17]
}
 8006d10:	bf00      	nop
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <gps_ProcessFix>:

void gps_ProcessFix(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]

	if(utc_incomming[0] == '1'){
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	2b31      	cmp	r3, #49	; 0x31
 8006d2c:	d103      	bne.n	8006d36 <gps_ProcessFix+0x1a>
		gps_struct->qualification = fix_gps;
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	2201      	movs	r2, #1
 8006d32:	771a      	strb	r2, [r3, #28]
		}
		else{
			gps_struct->qualification = unvalid;
		}
	}
}
 8006d34:	e00a      	b.n	8006d4c <gps_ProcessFix+0x30>
		if(utc_incomming[0] == '2'){
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	2b32      	cmp	r3, #50	; 0x32
 8006d3c:	d103      	bne.n	8006d46 <gps_ProcessFix+0x2a>
			gps_struct->qualification = fix_dgps;
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	2202      	movs	r2, #2
 8006d42:	771a      	strb	r2, [r3, #28]
}
 8006d44:	e002      	b.n	8006d4c <gps_ProcessFix+0x30>
			gps_struct->qualification = unvalid;
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	771a      	strb	r2, [r3, #28]
}
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <gps_ProcessSatelliteCount>:

void gps_ProcessSatelliteCount(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]

	gps_struct->satelite_number = ((utc_incomming[0] - '0')*10) + (utc_incomming[1] - '0');
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	461a      	mov	r2, r3
 8006d68:	0092      	lsls	r2, r2, #2
 8006d6a:	4413      	add	r3, r2
 8006d6c:	005b      	lsls	r3, r3, #1
 8006d6e:	b2da      	uxtb	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	3301      	adds	r3, #1
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	4413      	add	r3, r2
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	3b10      	subs	r3, #16
 8006d7c:	b2da      	uxtb	r2, r3
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	76da      	strb	r2, [r3, #27]
}
 8006d82:	bf00      	nop
 8006d84:	370c      	adds	r7, #12
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr
	...

08006d90 <gps_ProcessAltitude>:

void gps_ProcessAltitude(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b086      	sub	sp, #24
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]

	float altitude = 0;
 8006d9a:	f04f 0300 	mov.w	r3, #0
 8006d9e:	617b      	str	r3, [r7, #20]
	uint8_t dot_find = 0;
 8006da0:	2300      	movs	r3, #0
 8006da2:	74fb      	strb	r3, [r7, #19]
	for(int i=0;i<sizeof(utc_incomming);i++){
 8006da4:	2300      	movs	r3, #0
 8006da6:	60fb      	str	r3, [r7, #12]
 8006da8:	e03f      	b.n	8006e2a <gps_ProcessAltitude+0x9a>

		if(utc_incomming[i] == '.'){
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	4413      	add	r3, r2
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	2b2e      	cmp	r3, #46	; 0x2e
 8006db4:	d104      	bne.n	8006dc0 <gps_ProcessAltitude+0x30>
			dot_find = 1;
 8006db6:	2301      	movs	r3, #1
 8006db8:	74fb      	strb	r3, [r7, #19]
			i++;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	60fb      	str	r3, [r7, #12]
		}

		if(dot_find){
 8006dc0:	7cfb      	ldrb	r3, [r7, #19]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d01b      	beq.n	8006dfe <gps_ProcessAltitude+0x6e>
			altitude +=  (float)((utc_incomming[i] - '0')*0.1);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	4413      	add	r3, r2
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	3b30      	subs	r3, #48	; 0x30
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f7fd fb89 	bl	80044e8 <__aeabi_i2d>
 8006dd6:	a31a      	add	r3, pc, #104	; (adr r3, 8006e40 <gps_ProcessAltitude+0xb0>)
 8006dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ddc:	f7fd fbee 	bl	80045bc <__aeabi_dmul>
 8006de0:	4602      	mov	r2, r0
 8006de2:	460b      	mov	r3, r1
 8006de4:	4610      	mov	r0, r2
 8006de6:	4619      	mov	r1, r3
 8006de8:	f7fd fe98 	bl	8004b1c <__aeabi_d2f>
 8006dec:	ee07 0a10 	vmov	s14, r0
 8006df0:	edd7 7a05 	vldr	s15, [r7, #20]
 8006df4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006df8:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8006dfc:	e018      	b.n	8006e30 <gps_ProcessAltitude+0xa0>

		}
		else{
			altitude = (altitude*10) + (utc_incomming[i] - '0');
 8006dfe:	edd7 7a05 	vldr	s15, [r7, #20]
 8006e02:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006e06:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	4413      	add	r3, r2
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	3b30      	subs	r3, #48	; 0x30
 8006e14:	ee07 3a90 	vmov	s15, r3
 8006e18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e20:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i=0;i<sizeof(utc_incomming);i++){
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	3301      	adds	r3, #1
 8006e28:	60fb      	str	r3, [r7, #12]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2b03      	cmp	r3, #3
 8006e2e:	d9bc      	bls.n	8006daa <gps_ProcessAltitude+0x1a>
		}

	}
	gps_struct->altitude_deg_s = altitude;
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	697a      	ldr	r2, [r7, #20]
 8006e34:	609a      	str	r2, [r3, #8]
}
 8006e36:	bf00      	nop
 8006e38:	3718      	adds	r7, #24
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	9999999a 	.word	0x9999999a
 8006e44:	3fb99999 	.word	0x3fb99999

08006e48 <gps_ProcessAltitudeCorre>:

void gps_ProcessAltitudeCorre(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b086      	sub	sp, #24
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]

	float altitude = 0;
 8006e52:	f04f 0300 	mov.w	r3, #0
 8006e56:	617b      	str	r3, [r7, #20]
	uint8_t dot_find = 0;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	74fb      	strb	r3, [r7, #19]
	for(int i=0;i<sizeof(utc_incomming);i++){
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	60fb      	str	r3, [r7, #12]
 8006e60:	e03f      	b.n	8006ee2 <gps_ProcessAltitudeCorre+0x9a>

		if(utc_incomming[i] == '.'){
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	4413      	add	r3, r2
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	2b2e      	cmp	r3, #46	; 0x2e
 8006e6c:	d104      	bne.n	8006e78 <gps_ProcessAltitudeCorre+0x30>
			dot_find = 1;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	74fb      	strb	r3, [r7, #19]
			i++;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	3301      	adds	r3, #1
 8006e76:	60fb      	str	r3, [r7, #12]
		}

		if(dot_find){
 8006e78:	7cfb      	ldrb	r3, [r7, #19]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d01b      	beq.n	8006eb6 <gps_ProcessAltitudeCorre+0x6e>
			altitude +=  (float)((utc_incomming[i] - '0')*0.1);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	4413      	add	r3, r2
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	3b30      	subs	r3, #48	; 0x30
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7fd fb2d 	bl	80044e8 <__aeabi_i2d>
 8006e8e:	a31a      	add	r3, pc, #104	; (adr r3, 8006ef8 <gps_ProcessAltitudeCorre+0xb0>)
 8006e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e94:	f7fd fb92 	bl	80045bc <__aeabi_dmul>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	4610      	mov	r0, r2
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	f7fd fe3c 	bl	8004b1c <__aeabi_d2f>
 8006ea4:	ee07 0a10 	vmov	s14, r0
 8006ea8:	edd7 7a05 	vldr	s15, [r7, #20]
 8006eac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006eb0:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8006eb4:	e018      	b.n	8006ee8 <gps_ProcessAltitudeCorre+0xa0>

		}
		else{
			altitude = (altitude*10) + (utc_incomming[i] - '0');
 8006eb6:	edd7 7a05 	vldr	s15, [r7, #20]
 8006eba:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006ebe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	3b30      	subs	r3, #48	; 0x30
 8006ecc:	ee07 3a90 	vmov	s15, r3
 8006ed0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ed4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ed8:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i=0;i<sizeof(utc_incomming);i++){
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	60fb      	str	r3, [r7, #12]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2b03      	cmp	r3, #3
 8006ee6:	d9bc      	bls.n	8006e62 <gps_ProcessAltitudeCorre+0x1a>
		}

	}
	gps_struct->altitude_correction = altitude;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	697a      	ldr	r2, [r7, #20]
 8006eec:	60da      	str	r2, [r3, #12]
}
 8006eee:	bf00      	nop
 8006ef0:	3718      	adds	r7, #24
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	9999999a 	.word	0x9999999a
 8006efc:	3fb99999 	.word	0x3fb99999

08006f00 <WIOE5_Init>:
 *    @huart is a pointer on uart handdle
 *
 * OUTPUT:
 * 	  @res is an integer use to count the number of error reported during initialisation
 * */
uint8_t WIOE5_Init(UART_HandleTypeDef *huart){
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b0a0      	sub	sp, #128	; 0x80
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]

	uint8_t res = 0;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint8_t string[100] = {0};
 8006f0e:	2300      	movs	r3, #0
 8006f10:	61bb      	str	r3, [r7, #24]
 8006f12:	f107 031c 	add.w	r3, r7, #28
 8006f16:	2260      	movs	r2, #96	; 0x60
 8006f18:	2100      	movs	r1, #0
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f011 f8ac 	bl	8018078 <memset>
	uint8_t firmware_version[10] = {0};
 8006f20:	2300      	movs	r3, #0
 8006f22:	60fb      	str	r3, [r7, #12]
 8006f24:	f107 0310 	add.w	r3, r7, #16
 8006f28:	2200      	movs	r2, #0
 8006f2a:	601a      	str	r2, [r3, #0]
 8006f2c:	809a      	strh	r2, [r3, #4]

	/* Reset WIOE5 configuration */
	WIOE5_FactoryReset(huart);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 fa46 	bl	80073c0 <WIOE5_FactoryReset>

	WIOE5_SendString(huart, "ABCDEF", 6);
 8006f34:	2206      	movs	r2, #6
 8006f36:	491e      	ldr	r1, [pc, #120]	; (8006fb0 <WIOE5_Init+0xb0>)
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 fa83 	bl	8007444 <WIOE5_SendString>


	/*Check for correct wiring*/
	HAL_UART_Transmit(huart, "AT\r\n", 8, 100);
 8006f3e:	2364      	movs	r3, #100	; 0x64
 8006f40:	2208      	movs	r2, #8
 8006f42:	491c      	ldr	r1, [pc, #112]	; (8006fb4 <WIOE5_Init+0xb4>)
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f008 fa43 	bl	800f3d0 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, string, 100,1000);
 8006f4a:	f107 0118 	add.w	r1, r7, #24
 8006f4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006f52:	2264      	movs	r2, #100	; 0x64
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f008 fad1 	bl	800f4fc <HAL_UART_Receive>
	if(strcmp(string,"+AT: OK\r\n") != 0x0){
 8006f5a:	f107 0318 	add.w	r3, r7, #24
 8006f5e:	4916      	ldr	r1, [pc, #88]	; (8006fb8 <WIOE5_Init+0xb8>)
 8006f60:	4618      	mov	r0, r3
 8006f62:	f7fd f95d 	bl	8004220 <strcmp>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d004      	beq.n	8006f76 <WIOE5_Init+0x76>
		res++;
 8006f6c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006f70:	3301      	adds	r3, #1
 8006f72:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	}

	WIOE5_ReadFirmwareVersion(firmware_version, huart);
 8006f76:	f107 030c 	add.w	r3, r7, #12
 8006f7a:	6879      	ldr	r1, [r7, #4]
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f000 f879 	bl	8007074 <WIOE5_ReadFirmwareVersion>

	/*Set lora channel*/
	WIOE5_ChannelSwitch(LORA_CHANNEL_INIT,huart);
 8006f82:	6879      	ldr	r1, [r7, #4]
 8006f84:	2003      	movs	r0, #3
 8006f86:	f000 f81b 	bl	8006fc0 <WIOE5_ChannelSwitch>
	/*Set data rate*/
	WIOE5_SetDataRate(LORA_868Mhz_FSK_50000BPS,huart);
 8006f8a:	6879      	ldr	r1, [r7, #4]
 8006f8c:	2007      	movs	r0, #7
 8006f8e:	f000 f8b5 	bl	80070fc <WIOE5_SetDataRate>
	/*Set transmit power*/
	WIOE5_SetTxPower(LORA_868Mhz_16dBm, huart);
 8006f92:	6879      	ldr	r1, [r7, #4]
 8006f94:	2010      	movs	r0, #16
 8006f96:	f000 f90b 	bl	80071b0 <WIOE5_SetTxPower>

	/*Send 0x1234 5678*/
	WIOE5_SendData(305419896, huart);
 8006f9a:	6879      	ldr	r1, [r7, #4]
 8006f9c:	4807      	ldr	r0, [pc, #28]	; (8006fbc <WIOE5_Init+0xbc>)
 8006f9e:	f000 f97b 	bl	8007298 <WIOE5_SendData>

	return res;
 8006fa2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3780      	adds	r7, #128	; 0x80
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	08019308 	.word	0x08019308
 8006fb4:	08019310 	.word	0x08019310
 8006fb8:	08019318 	.word	0x08019318
 8006fbc:	12345678 	.word	0x12345678

08006fc0 <WIOE5_ChannelSwitch>:
 *    @channel is an integer that define the channel number (Should be between 0 and 2 for EU868 Mhz version
 *	  @huart is a pointer on uart handdle
 * OUTPUT:
 * 	  @res is an integer use to check error
 * */
uint8_t WIOE5_ChannelSwitch(uint8_t channel,UART_HandleTypeDef *huart){
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b0a2      	sub	sp, #136	; 0x88
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	6039      	str	r1, [r7, #0]
 8006fca:	71fb      	strb	r3, [r7, #7]

	uint8_t querry[25] = "AT+CH=";
 8006fcc:	4a27      	ldr	r2, [pc, #156]	; (800706c <WIOE5_ChannelSwitch+0xac>)
 8006fce:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006fd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006fd6:	6018      	str	r0, [r3, #0]
 8006fd8:	3304      	adds	r3, #4
 8006fda:	8019      	strh	r1, [r3, #0]
 8006fdc:	3302      	adds	r3, #2
 8006fde:	0c0a      	lsrs	r2, r1, #16
 8006fe0:	701a      	strb	r2, [r3, #0]
 8006fe2:	f107 0373 	add.w	r3, r7, #115	; 0x73
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	601a      	str	r2, [r3, #0]
 8006fea:	605a      	str	r2, [r3, #4]
 8006fec:	609a      	str	r2, [r3, #8]
 8006fee:	60da      	str	r2, [r3, #12]
 8006ff0:	821a      	strh	r2, [r3, #16]
	querry[6] =  (channel+'0');
 8006ff2:	79fb      	ldrb	r3, [r7, #7]
 8006ff4:	3330      	adds	r3, #48	; 0x30
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
	uint8_t string[100] = {0};
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	60bb      	str	r3, [r7, #8]
 8007000:	f107 030c 	add.w	r3, r7, #12
 8007004:	2260      	movs	r2, #96	; 0x60
 8007006:	2100      	movs	r1, #0
 8007008:	4618      	mov	r0, r3
 800700a:	f011 f835 	bl	8018078 <memset>
	uint8_t res = 0;
 800700e:	2300      	movs	r3, #0
 8007010:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	strcat(querry, "\r\n");
 8007014:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007018:	4618      	mov	r0, r3
 800701a:	f7fd f90b 	bl	8004234 <strlen>
 800701e:	4603      	mov	r3, r0
 8007020:	461a      	mov	r2, r3
 8007022:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007026:	4413      	add	r3, r2
 8007028:	4a11      	ldr	r2, [pc, #68]	; (8007070 <WIOE5_ChannelSwitch+0xb0>)
 800702a:	8811      	ldrh	r1, [r2, #0]
 800702c:	7892      	ldrb	r2, [r2, #2]
 800702e:	8019      	strh	r1, [r3, #0]
 8007030:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(huart, querry, sizeof(querry), 100);
 8007032:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8007036:	2364      	movs	r3, #100	; 0x64
 8007038:	2219      	movs	r2, #25
 800703a:	6838      	ldr	r0, [r7, #0]
 800703c:	f008 f9c8 	bl	800f3d0 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, string, 100,1000);
 8007040:	f107 0108 	add.w	r1, r7, #8
 8007044:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007048:	2264      	movs	r2, #100	; 0x64
 800704a:	6838      	ldr	r0, [r7, #0]
 800704c:	f008 fa56 	bl	800f4fc <HAL_UART_Receive>
	if(string[0]!='+'){
 8007050:	7a3b      	ldrb	r3, [r7, #8]
 8007052:	2b2b      	cmp	r3, #43	; 0x2b
 8007054:	d004      	beq.n	8007060 <WIOE5_ChannelSwitch+0xa0>
		res++;
 8007056:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800705a:	3301      	adds	r3, #1
 800705c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	}
	return res;
 8007060:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8007064:	4618      	mov	r0, r3
 8007066:	3788      	adds	r7, #136	; 0x88
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	08019328 	.word	0x08019328
 8007070:	08019324 	.word	0x08019324

08007074 <WIOE5_ReadFirmwareVersion>:
/* Function use to read WIOE5 firmware version
 * INPUT:
 *    @version_output is an array of
 *	  @huart is a pointer on uart handdle
 * */
void WIOE5_ReadFirmwareVersion(uint8_t version_output[],UART_HandleTypeDef *huart){
 8007074:	b580      	push	{r7, lr}
 8007076:	b09c      	sub	sp, #112	; 0x70
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]

	uint8_t string[100] = {0};
 800707e:	2300      	movs	r3, #0
 8007080:	60bb      	str	r3, [r7, #8]
 8007082:	f107 030c 	add.w	r3, r7, #12
 8007086:	2260      	movs	r2, #96	; 0x60
 8007088:	2100      	movs	r1, #0
 800708a:	4618      	mov	r0, r3
 800708c:	f010 fff4 	bl	8018078 <memset>
	uint8_t index = 6;
 8007090:	2306      	movs	r3, #6
 8007092:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	HAL_UART_Transmit(huart, "AT+VER\r\n", sizeof("AT+VER\r\n"), 100);
 8007096:	2364      	movs	r3, #100	; 0x64
 8007098:	2209      	movs	r2, #9
 800709a:	4917      	ldr	r1, [pc, #92]	; (80070f8 <WIOE5_ReadFirmwareVersion+0x84>)
 800709c:	6838      	ldr	r0, [r7, #0]
 800709e:	f008 f997 	bl	800f3d0 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, string, 100,1000);
 80070a2:	f107 0108 	add.w	r1, r7, #8
 80070a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80070aa:	2264      	movs	r2, #100	; 0x64
 80070ac:	6838      	ldr	r0, [r7, #0]
 80070ae:	f008 fa25 	bl	800f4fc <HAL_UART_Receive>

	while((string[index] != '\r') || (index > sizeof(string))){
 80070b2:	e010      	b.n	80070d6 <WIOE5_ReadFirmwareVersion+0x62>
		version_output[index-5] = string[index];
 80070b4:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80070b8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80070bc:	3b05      	subs	r3, #5
 80070be:	6879      	ldr	r1, [r7, #4]
 80070c0:	440b      	add	r3, r1
 80070c2:	3270      	adds	r2, #112	; 0x70
 80070c4:	443a      	add	r2, r7
 80070c6:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 80070ca:	701a      	strb	r2, [r3, #0]
		index++;
 80070cc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80070d0:	3301      	adds	r3, #1
 80070d2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	while((string[index] != '\r') || (index > sizeof(string))){
 80070d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80070da:	3370      	adds	r3, #112	; 0x70
 80070dc:	443b      	add	r3, r7
 80070de:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 80070e2:	2b0d      	cmp	r3, #13
 80070e4:	d1e6      	bne.n	80070b4 <WIOE5_ReadFirmwareVersion+0x40>
 80070e6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80070ea:	2b64      	cmp	r3, #100	; 0x64
 80070ec:	d8e2      	bhi.n	80070b4 <WIOE5_ReadFirmwareVersion+0x40>
	}
}
 80070ee:	bf00      	nop
 80070f0:	bf00      	nop
 80070f2:	3770      	adds	r7, #112	; 0x70
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	08019344 	.word	0x08019344

080070fc <WIOE5_SetDataRate>:
 *    @dr is an integer use to set data rate
 *	  @huart is a pointer on uart handdle
 *OUTPUT:
 * 	  @res is an integer use to check error
 * */
uint8_t WIOE5_SetDataRate(uint8_t dr,UART_HandleTypeDef *huart){
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b0a2      	sub	sp, #136	; 0x88
 8007100:	af00      	add	r7, sp, #0
 8007102:	4603      	mov	r3, r0
 8007104:	6039      	str	r1, [r7, #0]
 8007106:	71fb      	strb	r3, [r7, #7]

	uint8_t querry[25] = "AT+DR=";
 8007108:	4a27      	ldr	r2, [pc, #156]	; (80071a8 <WIOE5_SetDataRate+0xac>)
 800710a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800710e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007112:	6018      	str	r0, [r3, #0]
 8007114:	3304      	adds	r3, #4
 8007116:	8019      	strh	r1, [r3, #0]
 8007118:	3302      	adds	r3, #2
 800711a:	0c0a      	lsrs	r2, r1, #16
 800711c:	701a      	strb	r2, [r3, #0]
 800711e:	f107 0373 	add.w	r3, r7, #115	; 0x73
 8007122:	2200      	movs	r2, #0
 8007124:	601a      	str	r2, [r3, #0]
 8007126:	605a      	str	r2, [r3, #4]
 8007128:	609a      	str	r2, [r3, #8]
 800712a:	60da      	str	r2, [r3, #12]
 800712c:	821a      	strh	r2, [r3, #16]
	querry[6] =  (dr+'0');
 800712e:	79fb      	ldrb	r3, [r7, #7]
 8007130:	3330      	adds	r3, #48	; 0x30
 8007132:	b2db      	uxtb	r3, r3
 8007134:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
	uint8_t string[100] = {0};
 8007138:	2300      	movs	r3, #0
 800713a:	60bb      	str	r3, [r7, #8]
 800713c:	f107 030c 	add.w	r3, r7, #12
 8007140:	2260      	movs	r2, #96	; 0x60
 8007142:	2100      	movs	r1, #0
 8007144:	4618      	mov	r0, r3
 8007146:	f010 ff97 	bl	8018078 <memset>
	uint8_t res = 0;
 800714a:	2300      	movs	r3, #0
 800714c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	strcat(querry, "\r\n");
 8007150:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007154:	4618      	mov	r0, r3
 8007156:	f7fd f86d 	bl	8004234 <strlen>
 800715a:	4603      	mov	r3, r0
 800715c:	461a      	mov	r2, r3
 800715e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007162:	4413      	add	r3, r2
 8007164:	4a11      	ldr	r2, [pc, #68]	; (80071ac <WIOE5_SetDataRate+0xb0>)
 8007166:	8811      	ldrh	r1, [r2, #0]
 8007168:	7892      	ldrb	r2, [r2, #2]
 800716a:	8019      	strh	r1, [r3, #0]
 800716c:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(huart, querry, sizeof(querry), 100);
 800716e:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8007172:	2364      	movs	r3, #100	; 0x64
 8007174:	2219      	movs	r2, #25
 8007176:	6838      	ldr	r0, [r7, #0]
 8007178:	f008 f92a 	bl	800f3d0 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, string, 100,1000);
 800717c:	f107 0108 	add.w	r1, r7, #8
 8007180:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007184:	2264      	movs	r2, #100	; 0x64
 8007186:	6838      	ldr	r0, [r7, #0]
 8007188:	f008 f9b8 	bl	800f4fc <HAL_UART_Receive>
	if(string[0]!='+'){
 800718c:	7a3b      	ldrb	r3, [r7, #8]
 800718e:	2b2b      	cmp	r3, #43	; 0x2b
 8007190:	d004      	beq.n	800719c <WIOE5_SetDataRate+0xa0>
		res++;
 8007192:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8007196:	3301      	adds	r3, #1
 8007198:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	}
	return res;
 800719c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3788      	adds	r7, #136	; 0x88
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	08019350 	.word	0x08019350
 80071ac:	08019324 	.word	0x08019324

080071b0 <WIOE5_SetTxPower>:
 *    @tx_power is an integer use to set data rate
 *	  @huart is a pointer on uart handdle
 *OUTPUT:
 * 	  @res is an integer use to check error
 * */
uint8_t WIOE5_SetTxPower(uint8_t tx_power,UART_HandleTypeDef *huart){
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b0a2      	sub	sp, #136	; 0x88
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	4603      	mov	r3, r0
 80071b8:	6039      	str	r1, [r7, #0]
 80071ba:	71fb      	strb	r3, [r7, #7]

	uint8_t querry[25] = "AT+POWER=";
 80071bc:	4a33      	ldr	r2, [pc, #204]	; (800728c <WIOE5_SetTxPower+0xdc>)
 80071be:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80071c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80071c4:	c303      	stmia	r3!, {r0, r1}
 80071c6:	801a      	strh	r2, [r3, #0]
 80071c8:	f107 0376 	add.w	r3, r7, #118	; 0x76
 80071cc:	2200      	movs	r2, #0
 80071ce:	601a      	str	r2, [r3, #0]
 80071d0:	605a      	str	r2, [r3, #4]
 80071d2:	609a      	str	r2, [r3, #8]
 80071d4:	f8c3 200b 	str.w	r2, [r3, #11]
	uint8_t string[100] = {0};
 80071d8:	2300      	movs	r3, #0
 80071da:	60bb      	str	r3, [r7, #8]
 80071dc:	f107 030c 	add.w	r3, r7, #12
 80071e0:	2260      	movs	r2, #96	; 0x60
 80071e2:	2100      	movs	r1, #0
 80071e4:	4618      	mov	r0, r3
 80071e6:	f010 ff47 	bl	8018078 <memset>
	uint8_t res = 0;
 80071ea:	2300      	movs	r3, #0
 80071ec:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	if(tx_power < 10){	/*Two digit at least*/
 80071f0:	79fb      	ldrb	r3, [r7, #7]
 80071f2:	2b09      	cmp	r3, #9
 80071f4:	d805      	bhi.n	8007202 <WIOE5_SetTxPower+0x52>
		querry[9] =  (tx_power+'0');
 80071f6:	79fb      	ldrb	r3, [r7, #7]
 80071f8:	3330      	adds	r3, #48	; 0x30
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 8007200:	e018      	b.n	8007234 <WIOE5_SetTxPower+0x84>
	}
	else{
		querry[9] =  ((tx_power/10)+'0');
 8007202:	79fb      	ldrb	r3, [r7, #7]
 8007204:	4a22      	ldr	r2, [pc, #136]	; (8007290 <WIOE5_SetTxPower+0xe0>)
 8007206:	fba2 2303 	umull	r2, r3, r2, r3
 800720a:	08db      	lsrs	r3, r3, #3
 800720c:	b2db      	uxtb	r3, r3
 800720e:	3330      	adds	r3, #48	; 0x30
 8007210:	b2db      	uxtb	r3, r3
 8007212:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
		querry[10] =  ((tx_power%10)+'0');
 8007216:	79fa      	ldrb	r2, [r7, #7]
 8007218:	4b1d      	ldr	r3, [pc, #116]	; (8007290 <WIOE5_SetTxPower+0xe0>)
 800721a:	fba3 1302 	umull	r1, r3, r3, r2
 800721e:	08d9      	lsrs	r1, r3, #3
 8007220:	460b      	mov	r3, r1
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	440b      	add	r3, r1
 8007226:	005b      	lsls	r3, r3, #1
 8007228:	1ad3      	subs	r3, r2, r3
 800722a:	b2db      	uxtb	r3, r3
 800722c:	3330      	adds	r3, #48	; 0x30
 800722e:	b2db      	uxtb	r3, r3
 8007230:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	}
	strcat(querry, "\r\n");
 8007234:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007238:	4618      	mov	r0, r3
 800723a:	f7fc fffb 	bl	8004234 <strlen>
 800723e:	4603      	mov	r3, r0
 8007240:	461a      	mov	r2, r3
 8007242:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007246:	4413      	add	r3, r2
 8007248:	4a12      	ldr	r2, [pc, #72]	; (8007294 <WIOE5_SetTxPower+0xe4>)
 800724a:	8811      	ldrh	r1, [r2, #0]
 800724c:	7892      	ldrb	r2, [r2, #2]
 800724e:	8019      	strh	r1, [r3, #0]
 8007250:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(huart, querry, sizeof(querry), 100);
 8007252:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8007256:	2364      	movs	r3, #100	; 0x64
 8007258:	2219      	movs	r2, #25
 800725a:	6838      	ldr	r0, [r7, #0]
 800725c:	f008 f8b8 	bl	800f3d0 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, string, 100,1000);
 8007260:	f107 0108 	add.w	r1, r7, #8
 8007264:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007268:	2264      	movs	r2, #100	; 0x64
 800726a:	6838      	ldr	r0, [r7, #0]
 800726c:	f008 f946 	bl	800f4fc <HAL_UART_Receive>
	if(string[0]!='+'){
 8007270:	7a3b      	ldrb	r3, [r7, #8]
 8007272:	2b2b      	cmp	r3, #43	; 0x2b
 8007274:	d004      	beq.n	8007280 <WIOE5_SetTxPower+0xd0>
		res++;
 8007276:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800727a:	3301      	adds	r3, #1
 800727c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	}
	return res;
 8007280:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8007284:	4618      	mov	r0, r3
 8007286:	3788      	adds	r7, #136	; 0x88
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	0801936c 	.word	0x0801936c
 8007290:	cccccccd 	.word	0xcccccccd
 8007294:	08019324 	.word	0x08019324

08007298 <WIOE5_SendData>:
 *    @data is an integer - this is the 4 byte to send
 *	  @huart is a pointer on uart handdle
 *OUTPUT:
 * 	  @res is an integer use to check error
 * */
uint8_t WIOE5_SendData(uint32_t data,UART_HandleTypeDef *huart){
 8007298:	b580      	push	{r7, lr}
 800729a:	b0a6      	sub	sp, #152	; 0x98
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]

	uint8_t querry[30] = "AT+MSGHEX=";
 80072a2:	4a44      	ldr	r2, [pc, #272]	; (80073b4 <WIOE5_SendData+0x11c>)
 80072a4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80072a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80072aa:	c303      	stmia	r3!, {r0, r1}
 80072ac:	801a      	strh	r2, [r3, #0]
 80072ae:	3302      	adds	r3, #2
 80072b0:	0c12      	lsrs	r2, r2, #16
 80072b2:	701a      	strb	r2, [r3, #0]
 80072b4:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 80072b8:	2200      	movs	r2, #0
 80072ba:	601a      	str	r2, [r3, #0]
 80072bc:	605a      	str	r2, [r3, #4]
 80072be:	609a      	str	r2, [r3, #8]
 80072c0:	60da      	str	r2, [r3, #12]
 80072c2:	f8c3 200f 	str.w	r2, [r3, #15]
	querry[10] = '"';
 80072c6:	2322      	movs	r3, #34	; 0x22
 80072c8:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
	uint8_t hex_char = 0;
 80072cc:	2300      	movs	r3, #0
 80072ce:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	uint8_t res;
	uint8_t string[100] = {0};
 80072d2:	2300      	movs	r3, #0
 80072d4:	60fb      	str	r3, [r7, #12]
 80072d6:	f107 0310 	add.w	r3, r7, #16
 80072da:	2260      	movs	r2, #96	; 0x60
 80072dc:	2100      	movs	r1, #0
 80072de:	4618      	mov	r0, r3
 80072e0:	f010 feca 	bl	8018078 <memset>

	/*Split 32 bits into 4 byte*/
	for(int i=0;i<8;i++){
 80072e4:	2300      	movs	r3, #0
 80072e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80072ea:	e02c      	b.n	8007346 <WIOE5_SendData+0xae>
		hex_char = (data&(0xf<<(i*4)))>>(i*4);
 80072ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	220f      	movs	r2, #15
 80072f4:	fa02 f303 	lsl.w	r3, r2, r3
 80072f8:	461a      	mov	r2, r3
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	401a      	ands	r2, r3
 80072fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	fa22 f303 	lsr.w	r3, r2, r3
 8007308:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		if(hex_char > 10){
 800730c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007310:	2b0a      	cmp	r3, #10
 8007312:	d905      	bls.n	8007320 <WIOE5_SendData+0x88>
			hex_char = hex_char + 55;
 8007314:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007318:	3337      	adds	r3, #55	; 0x37
 800731a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800731e:	e004      	b.n	800732a <WIOE5_SendData+0x92>
		}
		else{
			hex_char = hex_char + 48;
 8007320:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007324:	3330      	adds	r3, #48	; 0x30
 8007326:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		querry[11+i] = hex_char;
 800732a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800732e:	330b      	adds	r3, #11
 8007330:	3398      	adds	r3, #152	; 0x98
 8007332:	443b      	add	r3, r7
 8007334:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8007338:	f803 2c28 	strb.w	r2, [r3, #-40]
	for(int i=0;i<8;i++){
 800733c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007340:	3301      	adds	r3, #1
 8007342:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007346:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800734a:	2b07      	cmp	r3, #7
 800734c:	ddce      	ble.n	80072ec <WIOE5_SendData+0x54>
	}
	querry[19] = '"';
 800734e:	2322      	movs	r3, #34	; 0x22
 8007350:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
	strcat(querry,"\r\n");
 8007354:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007358:	4618      	mov	r0, r3
 800735a:	f7fc ff6b 	bl	8004234 <strlen>
 800735e:	4603      	mov	r3, r0
 8007360:	461a      	mov	r2, r3
 8007362:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007366:	4413      	add	r3, r2
 8007368:	4a13      	ldr	r2, [pc, #76]	; (80073b8 <WIOE5_SendData+0x120>)
 800736a:	8811      	ldrh	r1, [r2, #0]
 800736c:	7892      	ldrb	r2, [r2, #2]
 800736e:	8019      	strh	r1, [r3, #0]
 8007370:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(huart, querry, sizeof(querry), 100);
 8007372:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8007376:	2364      	movs	r3, #100	; 0x64
 8007378:	221e      	movs	r2, #30
 800737a:	6838      	ldr	r0, [r7, #0]
 800737c:	f008 f828 	bl	800f3d0 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, string, 100,1000);
 8007380:	f107 010c 	add.w	r1, r7, #12
 8007384:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007388:	2264      	movs	r2, #100	; 0x64
 800738a:	6838      	ldr	r0, [r7, #0]
 800738c:	f008 f8b6 	bl	800f4fc <HAL_UART_Receive>

	/*Check if receive a DONE*/
	if(strcmp("+MSGHEX: Start\r\n",string)!=0x00){
 8007390:	f107 030c 	add.w	r3, r7, #12
 8007394:	4619      	mov	r1, r3
 8007396:	4809      	ldr	r0, [pc, #36]	; (80073bc <WIOE5_SendData+0x124>)
 8007398:	f7fc ff42 	bl	8004220 <strcmp>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d002      	beq.n	80073a8 <WIOE5_SendData+0x110>
		res = 1;
 80073a2:	2301      	movs	r3, #1
 80073a4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
	}
	return res;
 80073a8:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3798      	adds	r7, #152	; 0x98
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	0801939c 	.word	0x0801939c
 80073b8:	08019324 	.word	0x08019324
 80073bc:	08019388 	.word	0x08019388

080073c0 <WIOE5_FactoryReset>:
 * INPUT:
 *	  @huart is a pointer on uart handdle
 *OUTPUT:
 * 	  @res is an integer use to check error
 * */
uint8_t WIOE5_FactoryReset(UART_HandleTypeDef *huart){
 80073c0:	b590      	push	{r4, r7, lr}
 80073c2:	b0a5      	sub	sp, #148	; 0x94
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]

	uint8_t res = 0;
 80073c8:	2300      	movs	r3, #0
 80073ca:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	uint8_t string[100] = {0};
 80073ce:	2300      	movs	r3, #0
 80073d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80073d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80073d6:	2260      	movs	r2, #96	; 0x60
 80073d8:	2100      	movs	r1, #0
 80073da:	4618      	mov	r0, r3
 80073dc:	f010 fe4c 	bl	8018078 <memset>
	uint8_t querry[30] = "AT+FDEFAULT\r\n";
 80073e0:	4b16      	ldr	r3, [pc, #88]	; (800743c <WIOE5_FactoryReset+0x7c>)
 80073e2:	f107 0408 	add.w	r4, r7, #8
 80073e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80073e8:	c407      	stmia	r4!, {r0, r1, r2}
 80073ea:	8023      	strh	r3, [r4, #0]
 80073ec:	f107 0316 	add.w	r3, r7, #22
 80073f0:	2200      	movs	r2, #0
 80073f2:	601a      	str	r2, [r3, #0]
 80073f4:	605a      	str	r2, [r3, #4]
 80073f6:	609a      	str	r2, [r3, #8]
 80073f8:	60da      	str	r2, [r3, #12]

	HAL_UART_Transmit(huart, querry, sizeof(querry), 100);
 80073fa:	f107 0108 	add.w	r1, r7, #8
 80073fe:	2364      	movs	r3, #100	; 0x64
 8007400:	221e      	movs	r2, #30
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f007 ffe4 	bl	800f3d0 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, string, 100,1000);
 8007408:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800740c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007410:	2264      	movs	r2, #100	; 0x64
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f008 f872 	bl	800f4fc <HAL_UART_Receive>

	if(strcmp("+FDEFAULT: OK\r\n",string)!=0x00){
 8007418:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800741c:	4619      	mov	r1, r3
 800741e:	4808      	ldr	r0, [pc, #32]	; (8007440 <WIOE5_FactoryReset+0x80>)
 8007420:	f7fc fefe 	bl	8004220 <strcmp>
 8007424:	4603      	mov	r3, r0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d002      	beq.n	8007430 <WIOE5_FactoryReset+0x70>
		res = 1;
 800742a:	2301      	movs	r3, #1
 800742c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	}

	return res;
 8007430:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8007434:	4618      	mov	r0, r3
 8007436:	3794      	adds	r7, #148	; 0x94
 8007438:	46bd      	mov	sp, r7
 800743a:	bd90      	pop	{r4, r7, pc}
 800743c:	080193cc 	.word	0x080193cc
 8007440:	080193bc 	.word	0x080193bc

08007444 <WIOE5_SendString>:
 *	  @string is the actual message to be send
 *	  @string_size is an integer
 *OUTPUT:
 * 	  @res is an integer use to check error
 * */
uint8_t WIOE5_SendString(UART_HandleTypeDef *huart,uint8_t string[],uint32_t string_size){
 8007444:	b580      	push	{r7, lr}
 8007446:	b0a4      	sub	sp, #144	; 0x90
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	607a      	str	r2, [r7, #4]

	uint8_t res = 0;
 8007450:	2300      	movs	r3, #0
 8007452:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	uint8_t received_str[100] = {0};
 8007456:	2300      	movs	r3, #0
 8007458:	61fb      	str	r3, [r7, #28]
 800745a:	f107 0320 	add.w	r3, r7, #32
 800745e:	2260      	movs	r2, #96	; 0x60
 8007460:	2100      	movs	r1, #0
 8007462:	4618      	mov	r0, r3
 8007464:	f010 fe08 	bl	8018078 <memset>
	uint8_t querry[10] = "AT+MSG=";
 8007468:	4a41      	ldr	r2, [pc, #260]	; (8007570 <WIOE5_SendString+0x12c>)
 800746a:	f107 0310 	add.w	r3, r7, #16
 800746e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007472:	e883 0003 	stmia.w	r3, {r0, r1}
 8007476:	2300      	movs	r3, #0
 8007478:	833b      	strh	r3, [r7, #24]
	/*Init a pointer on char as NULL*/
	char * string_to_send = NULL;
 800747a:	2300      	movs	r3, #0
 800747c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

	/*Allocate some space for the string to send*/
	string_to_send = (char *) malloc( (string_size+30) * sizeof(char));
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	331e      	adds	r3, #30
 8007484:	4618      	mov	r0, r3
 8007486:	f010 fdd9 	bl	801803c <malloc>
 800748a:	4603      	mov	r3, r0
 800748c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

	/*Clear the string*/
	for(int i=0;i<(string_size+30);i++){
 8007490:	2300      	movs	r3, #0
 8007492:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007496:	e00b      	b.n	80074b0 <WIOE5_SendString+0x6c>
		string_to_send[i] = 0x0;
 8007498:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800749c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80074a0:	4413      	add	r3, r2
 80074a2:	2200      	movs	r2, #0
 80074a4:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<(string_size+30);i++){
 80074a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074aa:	3301      	adds	r3, #1
 80074ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f103 021e 	add.w	r2, r3, #30
 80074b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d8ec      	bhi.n	8007498 <WIOE5_SendString+0x54>
	}

	strcat(string_to_send,querry);
 80074be:	f107 0310 	add.w	r3, r7, #16
 80074c2:	4619      	mov	r1, r3
 80074c4:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80074c8:	f010 ff38 	bl	801833c <strcat>
	strncat(string_to_send,0x34,1);
 80074cc:	2201      	movs	r2, #1
 80074ce:	2134      	movs	r1, #52	; 0x34
 80074d0:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80074d4:	f010 ff41 	bl	801835a <strncat>

	/*Add the string to*/
	for(int i=0;i<string_size;i++){
 80074d8:	2300      	movs	r3, #0
 80074da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80074de:	e011      	b.n	8007504 <WIOE5_SendString+0xc0>
		string_to_send[7+i] = string[i];
 80074e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80074e4:	68ba      	ldr	r2, [r7, #8]
 80074e6:	441a      	add	r2, r3
 80074e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80074ec:	3307      	adds	r3, #7
 80074ee:	4619      	mov	r1, r3
 80074f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80074f4:	440b      	add	r3, r1
 80074f6:	7812      	ldrb	r2, [r2, #0]
 80074f8:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<string_size;i++){
 80074fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80074fe:	3301      	adds	r3, #1
 8007500:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007504:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	429a      	cmp	r2, r3
 800750c:	d8e8      	bhi.n	80074e0 <WIOE5_SendString+0x9c>
	}

	strncat(string_to_send,0x34,1);
 800750e:	2201      	movs	r2, #1
 8007510:	2134      	movs	r1, #52	; 0x34
 8007512:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8007516:	f010 ff20 	bl	801835a <strncat>
	strcat(string_to_send,"\r\n");
 800751a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800751e:	f7fc fe89 	bl	8004234 <strlen>
 8007522:	4603      	mov	r3, r0
 8007524:	461a      	mov	r2, r3
 8007526:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800752a:	4413      	add	r3, r2
 800752c:	4a11      	ldr	r2, [pc, #68]	; (8007574 <WIOE5_SendString+0x130>)
 800752e:	8811      	ldrh	r1, [r2, #0]
 8007530:	7892      	ldrb	r2, [r2, #2]
 8007532:	8019      	strh	r1, [r3, #0]
 8007534:	709a      	strb	r2, [r3, #2]

	HAL_UART_Transmit(huart, string_to_send, (string_size+30), 100);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	b29b      	uxth	r3, r3
 800753a:	331e      	adds	r3, #30
 800753c:	b29a      	uxth	r2, r3
 800753e:	2364      	movs	r3, #100	; 0x64
 8007540:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f007 ff43 	bl	800f3d0 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, received_str, 100,1000);
 800754a:	f107 011c 	add.w	r1, r7, #28
 800754e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007552:	2264      	movs	r2, #100	; 0x64
 8007554:	68f8      	ldr	r0, [r7, #12]
 8007556:	f007 ffd1 	bl	800f4fc <HAL_UART_Receive>

	free(string_to_send);
 800755a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800755e:	f010 fd75 	bl	801804c <free>
	return res;
 8007562:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8007566:	4618      	mov	r0, r3
 8007568:	3790      	adds	r7, #144	; 0x90
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	080193ec 	.word	0x080193ec
 8007574:	08019324 	.word	0x08019324

08007578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	SCB->VTOR = 0x08004000;
 800757c:	4b1c      	ldr	r3, [pc, #112]	; (80075f0 <main+0x78>)
 800757e:	4a1d      	ldr	r2, [pc, #116]	; (80075f4 <main+0x7c>)
 8007580:	609a      	str	r2, [r3, #8]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8007582:	b662      	cpsie	i
}
 8007584:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007586:	f001 f882 	bl	800868e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800758a:	f000 f83d 	bl	8007608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800758e:	f7fe ffc7 	bl	8006520 <MX_GPIO_Init>
  MX_DMA_Init();
 8007592:	f7fe ff9b 	bl	80064cc <MX_DMA_Init>
  MX_I2C2_Init();
 8007596:	f7ff f83f 	bl	8006618 <MX_I2C2_Init>
  MX_TIM2_Init();
 800759a:	f000 fd29 	bl	8007ff0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800759e:	f000 fd7f 	bl	80080a0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80075a2:	f000 fdd7 	bl	8008154 <MX_TIM4_Init>
  MX_UART4_Init();
 80075a6:	f000 feed 	bl	8008384 <MX_UART4_Init>
  MX_UART5_Init();
 80075aa:	f000 ff37 	bl	800841c <MX_UART5_Init>
  MX_ADC2_Init();
 80075ae:	f7fd fc87 	bl	8004ec0 <MX_ADC2_Init>
  MX_USB_Device_Init();
 80075b2:	f010 f813 	bl	80175dc <MX_USB_Device_Init>
  MX_SPI1_Init();
 80075b6:	f000 fb5f 	bl	8007c78 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /*Timer start flaps and throttle + buzzer*/
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80075ba:	2100      	movs	r1, #0
 80075bc:	480e      	ldr	r0, [pc, #56]	; (80075f8 <main+0x80>)
 80075be:	f006 fe15 	bl	800e1ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80075c2:	2100      	movs	r1, #0
 80075c4:	480d      	ldr	r0, [pc, #52]	; (80075fc <main+0x84>)
 80075c6:	f006 fe11 	bl	800e1ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80075ca:	2104      	movs	r1, #4
 80075cc:	480b      	ldr	r0, [pc, #44]	; (80075fc <main+0x84>)
 80075ce:	f006 fe0d 	bl	800e1ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80075d2:	210c      	movs	r1, #12
 80075d4:	4809      	ldr	r0, [pc, #36]	; (80075fc <main+0x84>)
 80075d6:	f006 fe09 	bl	800e1ec <HAL_TIM_PWM_Start>

  /*Start ADC conversion with DMA request*/
  HAL_ADC_Start_DMA(&hadc2, &BatteryMonitoringData, CONVERSION_COUNT);
 80075da:	2203      	movs	r2, #3
 80075dc:	4908      	ldr	r1, [pc, #32]	; (8007600 <main+0x88>)
 80075de:	4809      	ldr	r0, [pc, #36]	; (8007604 <main+0x8c>)
 80075e0:	f001 fc92 	bl	8008f08 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80075e4:	f7fd fe9e 	bl	8005324 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80075e8:	f00d fef5 	bl	80153d6 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80075ec:	e7fe      	b.n	80075ec <main+0x74>
 80075ee:	bf00      	nop
 80075f0:	e000ed00 	.word	0xe000ed00
 80075f4:	08004000 	.word	0x08004000
 80075f8:	200009e0 	.word	0x200009e0
 80075fc:	20000a2c 	.word	0x20000a2c
 8007600:	200008d8 	.word	0x200008d8
 8007604:	2000020c 	.word	0x2000020c

08007608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b094      	sub	sp, #80	; 0x50
 800760c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800760e:	f107 0318 	add.w	r3, r7, #24
 8007612:	2238      	movs	r2, #56	; 0x38
 8007614:	2100      	movs	r1, #0
 8007616:	4618      	mov	r0, r3
 8007618:	f010 fd2e 	bl	8018078 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800761c:	1d3b      	adds	r3, r7, #4
 800761e:	2200      	movs	r2, #0
 8007620:	601a      	str	r2, [r3, #0]
 8007622:	605a      	str	r2, [r3, #4]
 8007624:	609a      	str	r2, [r3, #8]
 8007626:	60da      	str	r2, [r3, #12]
 8007628:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800762a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800762e:	f005 fba9 	bl	800cd84 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8007632:	2322      	movs	r3, #34	; 0x22
 8007634:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007636:	f44f 7380 	mov.w	r3, #256	; 0x100
 800763a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800763c:	2340      	movs	r3, #64	; 0x40
 800763e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8007640:	2301      	movs	r3, #1
 8007642:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007644:	2302      	movs	r3, #2
 8007646:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007648:	2302      	movs	r3, #2
 800764a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800764c:	2304      	movs	r3, #4
 800764e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8007650:	234b      	movs	r3, #75	; 0x4b
 8007652:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007654:	2302      	movs	r3, #2
 8007656:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8007658:	2302      	movs	r3, #2
 800765a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800765c:	2302      	movs	r3, #2
 800765e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007660:	f107 0318 	add.w	r3, r7, #24
 8007664:	4618      	mov	r0, r3
 8007666:	f005 fc31 	bl	800cecc <HAL_RCC_OscConfig>
 800766a:	4603      	mov	r3, r0
 800766c:	2b00      	cmp	r3, #0
 800766e:	d001      	beq.n	8007674 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8007670:	f000 f82a 	bl	80076c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007674:	230f      	movs	r3, #15
 8007676:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007678:	2303      	movs	r3, #3
 800767a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800767c:	2300      	movs	r3, #0
 800767e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007680:	2300      	movs	r3, #0
 8007682:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007684:	2300      	movs	r3, #0
 8007686:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8007688:	1d3b      	adds	r3, r7, #4
 800768a:	2104      	movs	r1, #4
 800768c:	4618      	mov	r0, r3
 800768e:	f005 ff35 	bl	800d4fc <HAL_RCC_ClockConfig>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d001      	beq.n	800769c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8007698:	f000 f816 	bl	80076c8 <Error_Handler>
  }
}
 800769c:	bf00      	nop
 800769e:	3750      	adds	r7, #80	; 0x50
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a04      	ldr	r2, [pc, #16]	; (80076c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d101      	bne.n	80076ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80076b6:	f001 f803 	bl	80086c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80076ba:	bf00      	nop
 80076bc:	3708      	adds	r7, #8
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop
 80076c4:	40012c00 	.word	0x40012c00

080076c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80076c8:	b480      	push	{r7}
 80076ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80076cc:	b672      	cpsid	i
}
 80076ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80076d0:	e7fe      	b.n	80076d0 <Error_Handler+0x8>

080076d2 <Pid_CalculatePitchError>:
DESCRIPTION - Basic driver for the mpu6050 accelerometer.
*******************************************************)*/
#include "main.h"

//As the gyro got the front at x axis then rotation on X mean roll / rotation on Y mean pitch and rotation on Z mean yaw
float32_t Pid_CalculatePitchError(COMMAND_t *command,BNO055_t *Accelerometer){
 80076d2:	b480      	push	{r7}
 80076d4:	b085      	sub	sp, #20
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
 80076da:	6039      	str	r1, [r7, #0]
	float32_t res = (Accelerometer->processed_data.euler_angles.x)-(command->pitch_angle);
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80076e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80076ec:	edc7 7a03 	vstr	s15, [r7, #12]
	return res;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	ee07 3a90 	vmov	s15, r3
}
 80076f6:	eeb0 0a67 	vmov.f32	s0, s15
 80076fa:	3714      	adds	r7, #20
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <Pid_CalculateYawError>:

float32_t Pid_CalculateYawError(COMMAND_t *command,BNO055_t *Accelerometer){
 8007704:	b480      	push	{r7}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
	float32_t res = (Accelerometer->processed_data.euler_angles.z)-(command->yaw_angle);
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	edd3 7a03 	vldr	s15, [r3, #12]
 800771a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800771e:	edc7 7a03 	vstr	s15, [r7, #12]
	return res;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	ee07 3a90 	vmov	s15, r3
}
 8007728:	eeb0 0a67 	vmov.f32	s0, s15
 800772c:	3714      	adds	r7, #20
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr

08007736 <Pid_CalculateRollError>:

float32_t Pid_CalculateRollError(COMMAND_t *command,BNO055_t *Accelerometer){
 8007736:	b480      	push	{r7}
 8007738:	b085      	sub	sp, #20
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
 800773e:	6039      	str	r1, [r7, #0]
	float32_t res = (Accelerometer->processed_data.euler_angles.y)-(command->roll_angle);
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	edd3 7a04 	vldr	s15, [r3, #16]
 800774c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007750:	edc7 7a03 	vstr	s15, [r7, #12]
	return res;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	ee07 3a90 	vmov	s15, r3
}
 800775a:	eeb0 0a67 	vmov.f32	s0, s15
 800775e:	3714      	adds	r7, #20
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <Pid_Init>:

void Pid_Init(arm_pid_instance_f32 *PID,float32_t KP,float32_t KI,float32_t KD){
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	ed87 0a02 	vstr	s0, [r7, #8]
 8007774:	edc7 0a01 	vstr	s1, [r7, #4]
 8007778:	ed87 1a00 	vstr	s2, [r7]

	//Set PID gain
	PID->Kp = KP;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	68ba      	ldr	r2, [r7, #8]
 8007780:	619a      	str	r2, [r3, #24]
	PID->Ki = KI;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	61da      	str	r2, [r3, #28]
	PID->Kd = KD;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	683a      	ldr	r2, [r7, #0]
 800778c:	621a      	str	r2, [r3, #32]

	//Set the PID
	arm_pid_init_f32(PID, 1);
 800778e:	2101      	movs	r1, #1
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f010 fc09 	bl	8017fa8 <arm_pid_init_f32>

}
 8007796:	bf00      	nop
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <Pid_CompensateYaw>:

//Function use to compensate a roatation on yaw axis --> make sure to update accelerometer before reading and compensate
void Pid_CompensateYaw(arm_pid_instance_f32 *PID,COMMAND_t *command,BNO055_t *Accelerometer,PROPULSION_t *propulsion){
 800779e:	b580      	push	{r7, lr}
 80077a0:	b08a      	sub	sp, #40	; 0x28
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	60f8      	str	r0, [r7, #12]
 80077a6:	60b9      	str	r1, [r7, #8]
 80077a8:	607a      	str	r2, [r7, #4]
 80077aa:	603b      	str	r3, [r7, #0]
	float32_t error;
	float32_t pid_value;
	//Calculate the erro in °/s around yaw/z axis
	error = Pid_CalculateYawError(command, Accelerometer);
 80077ac:	6879      	ldr	r1, [r7, #4]
 80077ae:	68b8      	ldr	r0, [r7, #8]
 80077b0:	f7ff ffa8 	bl	8007704 <Pid_CalculateYawError>
 80077b4:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	61fb      	str	r3, [r7, #28]
 80077bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077be:	61bb      	str	r3, [r7, #24]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	ed93 7a00 	vldr	s14, [r3]
 80077c6:	edd7 7a06 	vldr	s15, [r7, #24]
 80077ca:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80077ce:	69fb      	ldr	r3, [r7, #28]
 80077d0:	edd3 6a01 	vldr	s13, [r3, #4]
 80077d4:	69fb      	ldr	r3, [r7, #28]
 80077d6:	edd3 7a03 	vldr	s15, [r3, #12]
 80077da:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80077de:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	edd3 6a02 	vldr	s13, [r3, #8]
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	edd3 7a04 	vldr	s15, [r3, #16]
 80077ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80077f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80077fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007800:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Update state */
    S->state[1] = S->state[0];
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	68da      	ldr	r2, [r3, #12]
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	69ba      	ldr	r2, [r7, #24]
 8007810:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	697a      	ldr	r2, [r7, #20]
 8007816:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8007818:	697b      	ldr	r3, [r7, #20]
	//calculate the amount of mouve needed to force back the plane
	pid_value = arm_pid_f32(PID, error);
 800781a:	623b      	str	r3, [r7, #32]

	//Ase the plane is a fixed wing we can't compensate move on yaw axis ...
	//If you have different plane make sure to create a thing to do here
}
 800781c:	bf00      	nop
 800781e:	3728      	adds	r7, #40	; 0x28
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <Pid_CompensateRoll>:

//Function use to compensate a roatation on Roll axis --> make sure to update accelerometer before reading and compensate
void Pid_CompensateRoll(arm_pid_instance_f32 *PID,COMMAND_t *command,BNO055_t *Accelerometer,PROPULSION_t *propulsion){
 8007824:	b580      	push	{r7, lr}
 8007826:	b08a      	sub	sp, #40	; 0x28
 8007828:	af00      	add	r7, sp, #0
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	60b9      	str	r1, [r7, #8]
 800782e:	607a      	str	r2, [r7, #4]
 8007830:	603b      	str	r3, [r7, #0]

	float32_t error;
	float32_t pid_value;
	//Calculate the erro in °/s around yaw/z axis
	error = Pid_CalculateRollError(command, Accelerometer);
 8007832:	6879      	ldr	r1, [r7, #4]
 8007834:	68b8      	ldr	r0, [r7, #8]
 8007836:	f7ff ff7e 	bl	8007736 <Pid_CalculateRollError>
 800783a:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	61fb      	str	r3, [r7, #28]
 8007842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007844:	61bb      	str	r3, [r7, #24]
    out = (S->A0 * in) +
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	ed93 7a00 	vldr	s14, [r3]
 800784c:	edd7 7a06 	vldr	s15, [r7, #24]
 8007850:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	edd3 6a01 	vldr	s13, [r3, #4]
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	edd3 7a03 	vldr	s15, [r3, #12]
 8007860:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8007864:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	edd3 6a02 	vldr	s13, [r3, #8]
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	edd3 7a04 	vldr	s15, [r3, #16]
 8007874:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007878:	ee37 7a27 	vadd.f32	s14, s14, s15
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8007882:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007886:	edc7 7a05 	vstr	s15, [r7, #20]
    S->state[1] = S->state[0];
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	68da      	ldr	r2, [r3, #12]
 800788e:	69fb      	ldr	r3, [r7, #28]
 8007890:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	69ba      	ldr	r2, [r7, #24]
 8007896:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8007898:	69fb      	ldr	r3, [r7, #28]
 800789a:	697a      	ldr	r2, [r7, #20]
 800789c:	615a      	str	r2, [r3, #20]
    return (out);
 800789e:	697b      	ldr	r3, [r7, #20]
	//calculate the amount of mouve needed to force back the plane
	pid_value = arm_pid_f32(PID, error);
 80078a0:	623b      	str	r3, [r7, #32]

	/*Left flaps up and right flaps down*/


#ifndef SERVO_LEFT_REVERSED
	if((propulsion->servo_left_timer_val + pid_value)>MAX_LEFT_EXTENSION){
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a6:	ee07 3a90 	vmov	s15, r3
 80078aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80078ae:	edd7 7a08 	vldr	s15, [r7, #32]
 80078b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80078b6:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80079a8 <Pid_CompensateRoll+0x184>
 80078ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078c2:	dd04      	ble.n	80078ce <Pid_CompensateRoll+0xaa>
		propulsion->servo_left_timer_val = MAX_LEFT_EXTENSION;
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	f640 52ac 	movw	r2, #3500	; 0xdac
 80078ca:	625a      	str	r2, [r3, #36]	; 0x24
 80078cc:	e025      	b.n	800791a <Pid_CompensateRoll+0xf6>
	}
	else{
		if((propulsion->servo_left_timer_val + pid_value)<MIN_LEFT_EXTENSION){
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d2:	ee07 3a90 	vmov	s15, r3
 80078d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80078da:	edd7 7a08 	vldr	s15, [r7, #32]
 80078de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80078e2:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80079ac <Pid_CompensateRoll+0x188>
 80078e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078ee:	d504      	bpl.n	80078fa <Pid_CompensateRoll+0xd6>
			propulsion->servo_left_timer_val = MIN_LEFT_EXTENSION;
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	f240 5214 	movw	r2, #1300	; 0x514
 80078f6:	625a      	str	r2, [r3, #36]	; 0x24
 80078f8:	e00f      	b.n	800791a <Pid_CompensateRoll+0xf6>
		}
		else{
			propulsion->servo_left_timer_val += pid_value;
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fe:	ee07 3a90 	vmov	s15, r3
 8007902:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007906:	edd7 7a08 	vldr	s15, [r7, #32]
 800790a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800790e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007912:	ee17 2a90 	vmov	r2, s15
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	625a      	str	r2, [r3, #36]	; 0x24
			propulsion->servo_right_timer_val -= pid_value;
		}
	}
#endif
#ifdef SERVO_RIGHT_REVERSED
	if((propulsion->servo_right_timer_val + pid_value)>MIN_RIGHT_EXTENSION){
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800791e:	ee07 3a90 	vmov	s15, r3
 8007922:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007926:	edd7 7a08 	vldr	s15, [r7, #32]
 800792a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800792e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80079a8 <Pid_CompensateRoll+0x184>
 8007932:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800793a:	dd04      	ble.n	8007946 <Pid_CompensateRoll+0x122>
		propulsion->servo_right_timer_val = MIN_RIGHT_EXTENSION;
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	f640 52ac 	movw	r2, #3500	; 0xdac
 8007942:	629a      	str	r2, [r3, #40]	; 0x28
 8007944:	e025      	b.n	8007992 <Pid_CompensateRoll+0x16e>
	}
	else{
		if((propulsion->servo_right_timer_val + pid_value)<MAX_RIGHT_EXTENSION){
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800794a:	ee07 3a90 	vmov	s15, r3
 800794e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007952:	edd7 7a08 	vldr	s15, [r7, #32]
 8007956:	ee77 7a27 	vadd.f32	s15, s14, s15
 800795a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80079ac <Pid_CompensateRoll+0x188>
 800795e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007966:	d504      	bpl.n	8007972 <Pid_CompensateRoll+0x14e>
			propulsion->servo_right_timer_val = MAX_RIGHT_EXTENSION;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	f240 5214 	movw	r2, #1300	; 0x514
 800796e:	629a      	str	r2, [r3, #40]	; 0x28
 8007970:	e00f      	b.n	8007992 <Pid_CompensateRoll+0x16e>
		}
		else{
			propulsion->servo_right_timer_val += pid_value;
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007976:	ee07 3a90 	vmov	s15, r3
 800797a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800797e:	edd7 7a08 	vldr	s15, [r7, #32]
 8007982:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007986:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800798a:	ee17 2a90 	vmov	r2, s15
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	629a      	str	r2, [r3, #40]	; 0x28
			propulsion->servo_left_timer_val -= pid_value;
		}
	}
#endif

	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 8007992:	6838      	ldr	r0, [r7, #0]
 8007994:	f000 f8d2 	bl	8007b3c <PropulsionAndControl_UpdateLeftFlaps>
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8007998:	6838      	ldr	r0, [r7, #0]
 800799a:	f000 f8ed 	bl	8007b78 <PropulsionAndControl_UpdateRightFlaps>

}
 800799e:	bf00      	nop
 80079a0:	3728      	adds	r7, #40	; 0x28
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	455ac000 	.word	0x455ac000
 80079ac:	44a28000 	.word	0x44a28000

080079b0 <Pid_CompensatePitch>:
//Function use to compensate a roatation on Pitch axis --> make sure to update accelerometer before reading and compensate
void Pid_CompensatePitch(arm_pid_instance_f32 *PID,COMMAND_t *command,BNO055_t *Accelerometer,PROPULSION_t *propulsion){
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b08a      	sub	sp, #40	; 0x28
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	607a      	str	r2, [r7, #4]
 80079bc:	603b      	str	r3, [r7, #0]

	float32_t error;
	float32_t pid_value;
	//Calculate the erro in °/s around yaw/z axis
	error = Pid_CalculatePitchError(command, Accelerometer);
 80079be:	6879      	ldr	r1, [r7, #4]
 80079c0:	68b8      	ldr	r0, [r7, #8]
 80079c2:	f7ff fe86 	bl	80076d2 <Pid_CalculatePitchError>
 80079c6:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	61fb      	str	r3, [r7, #28]
 80079ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d0:	61bb      	str	r3, [r7, #24]
    out = (S->A0 * in) +
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	ed93 7a00 	vldr	s14, [r3]
 80079d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80079dc:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	edd3 6a01 	vldr	s13, [r3, #4]
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	edd3 7a03 	vldr	s15, [r3, #12]
 80079ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80079f0:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	edd3 6a02 	vldr	s13, [r3, #8]
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	edd3 7a04 	vldr	s15, [r3, #16]
 8007a00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007a04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8007a0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a12:	edc7 7a05 	vstr	s15, [r7, #20]
    S->state[1] = S->state[0];
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	68da      	ldr	r2, [r3, #12]
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	69ba      	ldr	r2, [r7, #24]
 8007a22:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	697a      	ldr	r2, [r7, #20]
 8007a28:	615a      	str	r2, [r3, #20]
    return (out);
 8007a2a:	697b      	ldr	r3, [r7, #20]
	//calculate the amount of mouve needed to force back the plane
	pid_value = arm_pid_f32(PID, error);
 8007a2c:	623b      	str	r3, [r7, #32]


#ifndef SERVO_LEFT_REVERSED
	if((propulsion->servo_left_timer_val + pid_value)>MAX_LEFT_EXTENSION){
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a32:	ee07 3a90 	vmov	s15, r3
 8007a36:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007a3a:	edd7 7a08 	vldr	s15, [r7, #32]
 8007a3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a42:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8007b34 <Pid_CompensatePitch+0x184>
 8007a46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a4e:	dd04      	ble.n	8007a5a <Pid_CompensatePitch+0xaa>
		propulsion->servo_left_timer_val = MAX_LEFT_EXTENSION;
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	f640 52ac 	movw	r2, #3500	; 0xdac
 8007a56:	625a      	str	r2, [r3, #36]	; 0x24
 8007a58:	e025      	b.n	8007aa6 <Pid_CompensatePitch+0xf6>
	}
	else{
		if((propulsion->servo_left_timer_val + pid_value)<MIN_LEFT_EXTENSION){
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a5e:	ee07 3a90 	vmov	s15, r3
 8007a62:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007a66:	edd7 7a08 	vldr	s15, [r7, #32]
 8007a6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a6e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8007b38 <Pid_CompensatePitch+0x188>
 8007a72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a7a:	d504      	bpl.n	8007a86 <Pid_CompensatePitch+0xd6>
			propulsion->servo_left_timer_val = MIN_LEFT_EXTENSION;
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	f240 5214 	movw	r2, #1300	; 0x514
 8007a82:	625a      	str	r2, [r3, #36]	; 0x24
 8007a84:	e00f      	b.n	8007aa6 <Pid_CompensatePitch+0xf6>
		}
		else{
			propulsion->servo_left_timer_val += pid_value;
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8a:	ee07 3a90 	vmov	s15, r3
 8007a8e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007a92:	edd7 7a08 	vldr	s15, [r7, #32]
 8007a96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a9e:	ee17 2a90 	vmov	r2, s15
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	625a      	str	r2, [r3, #36]	; 0x24
			propulsion->servo_right_timer_val += pid_value;
		}
	}
#endif
#ifdef SERVO_RIGHT_REVERSED
	if((propulsion->servo_right_timer_val - pid_value)>MIN_RIGHT_EXTENSION){
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aaa:	ee07 3a90 	vmov	s15, r3
 8007aae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007ab2:	edd7 7a08 	vldr	s15, [r7, #32]
 8007ab6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007aba:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8007b34 <Pid_CompensatePitch+0x184>
 8007abe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ac6:	dd04      	ble.n	8007ad2 <Pid_CompensatePitch+0x122>
		propulsion->servo_right_timer_val = MIN_RIGHT_EXTENSION;
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	f640 52ac 	movw	r2, #3500	; 0xdac
 8007ace:	629a      	str	r2, [r3, #40]	; 0x28
 8007ad0:	e025      	b.n	8007b1e <Pid_CompensatePitch+0x16e>
	}
	else{
		if((propulsion->servo_right_timer_val - pid_value)<MAX_RIGHT_EXTENSION){
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad6:	ee07 3a90 	vmov	s15, r3
 8007ada:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007ade:	edd7 7a08 	vldr	s15, [r7, #32]
 8007ae2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ae6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8007b38 <Pid_CompensatePitch+0x188>
 8007aea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007af2:	d504      	bpl.n	8007afe <Pid_CompensatePitch+0x14e>
			propulsion->servo_right_timer_val = MAX_RIGHT_EXTENSION;
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	f240 5214 	movw	r2, #1300	; 0x514
 8007afa:	629a      	str	r2, [r3, #40]	; 0x28
 8007afc:	e00f      	b.n	8007b1e <Pid_CompensatePitch+0x16e>
		}
		else{
			propulsion->servo_right_timer_val -= pid_value;
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b02:	ee07 3a90 	vmov	s15, r3
 8007b06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007b0a:	edd7 7a08 	vldr	s15, [r7, #32]
 8007b0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b16:	ee17 2a90 	vmov	r2, s15
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	629a      	str	r2, [r3, #40]	; 0x28
		}
	}
#endif


	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 8007b1e:	6838      	ldr	r0, [r7, #0]
 8007b20:	f000 f80c 	bl	8007b3c <PropulsionAndControl_UpdateLeftFlaps>
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8007b24:	6838      	ldr	r0, [r7, #0]
 8007b26:	f000 f827 	bl	8007b78 <PropulsionAndControl_UpdateRightFlaps>

}
 8007b2a:	bf00      	nop
 8007b2c:	3728      	adds	r7, #40	; 0x28
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop
 8007b34:	455ac000 	.word	0x455ac000
 8007b38:	44a28000 	.word	0x44a28000

08007b3c <PropulsionAndControl_UpdateLeftFlaps>:
void PropulsionAndControl_UpdateESC(PROPULSION_t *propulsion){
	uint32_t * timer_base_addr_ptr = &(propulsion->timer->Instance->CCR1);
	*(timer_base_addr_ptr + ((propulsion->esc_timer_channel-1))) = propulsion->esc_timer_val;
	propulsion->update_timer = 0x01;
}
void PropulsionAndControl_UpdateLeftFlaps(PROPULSION_t *propulsion){
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
	uint32_t * timer_base_addr_ptr = &(propulsion->timer->Instance->CCR1);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	699b      	ldr	r3, [r3, #24]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	3334      	adds	r3, #52	; 0x34
 8007b4c:	60fb      	str	r3, [r7, #12]
	*(timer_base_addr_ptr + ((propulsion->servo_left_timer_channel-1))) = propulsion->servo_left_timer_val;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	7f5b      	ldrb	r3, [r3, #29]
 8007b52:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007b56:	3b01      	subs	r3, #1
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	68fa      	ldr	r2, [r7, #12]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007b62:	601a      	str	r2, [r3, #0]
	propulsion->update_timer = 0x01;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8007b6c:	bf00      	nop
 8007b6e:	3714      	adds	r7, #20
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <PropulsionAndControl_UpdateRightFlaps>:
void PropulsionAndControl_UpdateRightFlaps(PROPULSION_t *propulsion){
 8007b78:	b480      	push	{r7}
 8007b7a:	b085      	sub	sp, #20
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
	uint32_t * timer_base_addr_ptr = &(propulsion->timer->Instance->CCR1);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	699b      	ldr	r3, [r3, #24]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	3334      	adds	r3, #52	; 0x34
 8007b88:	60fb      	str	r3, [r7, #12]
	*(timer_base_addr_ptr + ((propulsion->servo_right_timer_channel-1))) = propulsion->servo_right_timer_val;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	7f9b      	ldrb	r3, [r3, #30]
 8007b8e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007b92:	3b01      	subs	r3, #1
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	4413      	add	r3, r2
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007b9e:	601a      	str	r2, [r3, #0]
	propulsion->update_timer = 0x01;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8007ba8:	bf00      	nop
 8007baa:	3714      	adds	r7, #20
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <PropulsionAndControl_Init>:

void PropulsionAndControl_Init(PROPULSION_t *propulsion,uint32_t esc_pin,GPIO_TypeDef *esc_port,uint32_t servo_left_pin,GPIO_TypeDef *servo_left_port,uint32_t servo_right_pin,GPIO_TypeDef *servo_right_port,uint32_t esc_channel,uint32_t servo_left_channel,uint32_t servo_right_channel,TIM_HandleTypeDef *timer_entity){
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	607a      	str	r2, [r7, #4]
 8007bc0:	603b      	str	r3, [r7, #0]

	//Store all pins into the struct
	propulsion->esc_pin = esc_pin;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	68ba      	ldr	r2, [r7, #8]
 8007bc6:	611a      	str	r2, [r3, #16]
	propulsion->esc_port = esc_port;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	615a      	str	r2, [r3, #20]
	propulsion->esc_timer_channel = esc_channel;
 8007bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd0:	b2da      	uxtb	r2, r3
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	771a      	strb	r2, [r3, #28]

	propulsion->servo_left_pin = servo_left_pin;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	683a      	ldr	r2, [r7, #0]
 8007bda:	601a      	str	r2, [r3, #0]
	propulsion->servo_left_port = servo_left_port;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	69ba      	ldr	r2, [r7, #24]
 8007be0:	605a      	str	r2, [r3, #4]
	propulsion->servo_left_timer_channel = servo_left_channel;
 8007be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be4:	b2da      	uxtb	r2, r3
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	775a      	strb	r2, [r3, #29]

	propulsion->servo_right_pin = servo_right_pin;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	69fa      	ldr	r2, [r7, #28]
 8007bee:	609a      	str	r2, [r3, #8]
	propulsion->servo_right_port = servo_right_port;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	6a3a      	ldr	r2, [r7, #32]
 8007bf4:	60da      	str	r2, [r3, #12]
	propulsion->servo_right_timer_channel = servo_right_channel;
 8007bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf8:	b2da      	uxtb	r2, r3
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	779a      	strb	r2, [r3, #30]

	propulsion->timer = timer_entity;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c02:	619a      	str	r2, [r3, #24]

	//put the flaps at minimum
	HAL_Delay(20);
 8007c04:	2014      	movs	r0, #20
 8007c06:	f000 fd79 	bl	80086fc <HAL_Delay>
	propulsion->servo_left_timer_val = MIN_LEFT_EXTENSION;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f240 5214 	movw	r2, #1300	; 0x514
 8007c10:	625a      	str	r2, [r3, #36]	; 0x24
	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 8007c12:	68f8      	ldr	r0, [r7, #12]
 8007c14:	f7ff ff92 	bl	8007b3c <PropulsionAndControl_UpdateLeftFlaps>

	//put the flaps at minimum
	propulsion->servo_right_timer_val = MIN_RIGHT_EXTENSION;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f640 52ac 	movw	r2, #3500	; 0xdac
 8007c1e:	629a      	str	r2, [r3, #40]	; 0x28
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8007c20:	68f8      	ldr	r0, [r7, #12]
 8007c22:	f7ff ffa9 	bl	8007b78 <PropulsionAndControl_UpdateRightFlaps>

	//put the flaps at maximum
	HAL_Delay(1500);
 8007c26:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8007c2a:	f000 fd67 	bl	80086fc <HAL_Delay>
	propulsion->servo_left_timer_val = MAX_LEFT_EXTENSION;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f640 52ac 	movw	r2, #3500	; 0xdac
 8007c34:	625a      	str	r2, [r3, #36]	; 0x24
	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	f7ff ff80 	bl	8007b3c <PropulsionAndControl_UpdateLeftFlaps>

	//put the flaps at maximum
	propulsion->servo_right_timer_val = MAX_RIGHT_EXTENSION;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f240 5214 	movw	r2, #1300	; 0x514
 8007c42:	629a      	str	r2, [r3, #40]	; 0x28
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8007c44:	68f8      	ldr	r0, [r7, #12]
 8007c46:	f7ff ff97 	bl	8007b78 <PropulsionAndControl_UpdateRightFlaps>

	HAL_Delay(1500);
 8007c4a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8007c4e:	f000 fd55 	bl	80086fc <HAL_Delay>
	propulsion->servo_left_timer_val = (MAX_LEFT_EXTENSION+MIN_LEFT_EXTENSION)/2;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8007c58:	625a      	str	r2, [r3, #36]	; 0x24
	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 8007c5a:	68f8      	ldr	r0, [r7, #12]
 8007c5c:	f7ff ff6e 	bl	8007b3c <PropulsionAndControl_UpdateLeftFlaps>

	//put the flaps at minimum
	propulsion->servo_right_timer_val = (MAX_RIGHT_EXTENSION+MIN_RIGHT_EXTENSION)/2;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8007c66:	629a      	str	r2, [r3, #40]	; 0x28
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8007c68:	68f8      	ldr	r0, [r7, #12]
 8007c6a:	f7ff ff85 	bl	8007b78 <PropulsionAndControl_UpdateRightFlaps>
}
 8007c6e:	bf00      	nop
 8007c70:	3710      	adds	r7, #16
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
	...

08007c78 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8007c7c:	4b1b      	ldr	r3, [pc, #108]	; (8007cec <MX_SPI1_Init+0x74>)
 8007c7e:	4a1c      	ldr	r2, [pc, #112]	; (8007cf0 <MX_SPI1_Init+0x78>)
 8007c80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8007c82:	4b1a      	ldr	r3, [pc, #104]	; (8007cec <MX_SPI1_Init+0x74>)
 8007c84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007c88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007c8a:	4b18      	ldr	r3, [pc, #96]	; (8007cec <MX_SPI1_Init+0x74>)
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007c90:	4b16      	ldr	r3, [pc, #88]	; (8007cec <MX_SPI1_Init+0x74>)
 8007c92:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007c96:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007c98:	4b14      	ldr	r3, [pc, #80]	; (8007cec <MX_SPI1_Init+0x74>)
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8007c9e:	4b13      	ldr	r3, [pc, #76]	; (8007cec <MX_SPI1_Init+0x74>)
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8007ca4:	4b11      	ldr	r3, [pc, #68]	; (8007cec <MX_SPI1_Init+0x74>)
 8007ca6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007caa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8007cac:	4b0f      	ldr	r3, [pc, #60]	; (8007cec <MX_SPI1_Init+0x74>)
 8007cae:	2228      	movs	r2, #40	; 0x28
 8007cb0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007cb2:	4b0e      	ldr	r3, [pc, #56]	; (8007cec <MX_SPI1_Init+0x74>)
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007cb8:	4b0c      	ldr	r3, [pc, #48]	; (8007cec <MX_SPI1_Init+0x74>)
 8007cba:	2200      	movs	r2, #0
 8007cbc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007cbe:	4b0b      	ldr	r3, [pc, #44]	; (8007cec <MX_SPI1_Init+0x74>)
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8007cc4:	4b09      	ldr	r3, [pc, #36]	; (8007cec <MX_SPI1_Init+0x74>)
 8007cc6:	2207      	movs	r2, #7
 8007cc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007cca:	4b08      	ldr	r3, [pc, #32]	; (8007cec <MX_SPI1_Init+0x74>)
 8007ccc:	2200      	movs	r2, #0
 8007cce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8007cd0:	4b06      	ldr	r3, [pc, #24]	; (8007cec <MX_SPI1_Init+0x74>)
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007cd6:	4805      	ldr	r0, [pc, #20]	; (8007cec <MX_SPI1_Init+0x74>)
 8007cd8:	f006 f8ac 	bl	800de34 <HAL_SPI_Init>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d001      	beq.n	8007ce6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8007ce2:	f7ff fcf1 	bl	80076c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8007ce6:	bf00      	nop
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	200008e0 	.word	0x200008e0
 8007cf0:	40013000 	.word	0x40013000

08007cf4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b08a      	sub	sp, #40	; 0x28
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cfc:	f107 0314 	add.w	r3, r7, #20
 8007d00:	2200      	movs	r2, #0
 8007d02:	601a      	str	r2, [r3, #0]
 8007d04:	605a      	str	r2, [r3, #4]
 8007d06:	609a      	str	r2, [r3, #8]
 8007d08:	60da      	str	r2, [r3, #12]
 8007d0a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a17      	ldr	r2, [pc, #92]	; (8007d70 <HAL_SPI_MspInit+0x7c>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d128      	bne.n	8007d68 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007d16:	4b17      	ldr	r3, [pc, #92]	; (8007d74 <HAL_SPI_MspInit+0x80>)
 8007d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d1a:	4a16      	ldr	r2, [pc, #88]	; (8007d74 <HAL_SPI_MspInit+0x80>)
 8007d1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007d20:	6613      	str	r3, [r2, #96]	; 0x60
 8007d22:	4b14      	ldr	r3, [pc, #80]	; (8007d74 <HAL_SPI_MspInit+0x80>)
 8007d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d2a:	613b      	str	r3, [r7, #16]
 8007d2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d2e:	4b11      	ldr	r3, [pc, #68]	; (8007d74 <HAL_SPI_MspInit+0x80>)
 8007d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d32:	4a10      	ldr	r2, [pc, #64]	; (8007d74 <HAL_SPI_MspInit+0x80>)
 8007d34:	f043 0301 	orr.w	r3, r3, #1
 8007d38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007d3a:	4b0e      	ldr	r3, [pc, #56]	; (8007d74 <HAL_SPI_MspInit+0x80>)
 8007d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d3e:	f003 0301 	and.w	r3, r3, #1
 8007d42:	60fb      	str	r3, [r7, #12]
 8007d44:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8007d46:	23e0      	movs	r3, #224	; 0xe0
 8007d48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d4a:	2302      	movs	r3, #2
 8007d4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d52:	2300      	movs	r3, #0
 8007d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007d56:	2305      	movs	r3, #5
 8007d58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d5a:	f107 0314 	add.w	r3, r7, #20
 8007d5e:	4619      	mov	r1, r3
 8007d60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007d64:	f002 fb0a 	bl	800a37c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8007d68:	bf00      	nop
 8007d6a:	3728      	adds	r7, #40	; 0x28
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	40013000 	.word	0x40013000
 8007d74:	40021000 	.word	0x40021000

08007d78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d7e:	4b11      	ldr	r3, [pc, #68]	; (8007dc4 <HAL_MspInit+0x4c>)
 8007d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d82:	4a10      	ldr	r2, [pc, #64]	; (8007dc4 <HAL_MspInit+0x4c>)
 8007d84:	f043 0301 	orr.w	r3, r3, #1
 8007d88:	6613      	str	r3, [r2, #96]	; 0x60
 8007d8a:	4b0e      	ldr	r3, [pc, #56]	; (8007dc4 <HAL_MspInit+0x4c>)
 8007d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d8e:	f003 0301 	and.w	r3, r3, #1
 8007d92:	607b      	str	r3, [r7, #4]
 8007d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007d96:	4b0b      	ldr	r3, [pc, #44]	; (8007dc4 <HAL_MspInit+0x4c>)
 8007d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d9a:	4a0a      	ldr	r2, [pc, #40]	; (8007dc4 <HAL_MspInit+0x4c>)
 8007d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007da0:	6593      	str	r3, [r2, #88]	; 0x58
 8007da2:	4b08      	ldr	r3, [pc, #32]	; (8007dc4 <HAL_MspInit+0x4c>)
 8007da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007daa:	603b      	str	r3, [r7, #0]
 8007dac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007dae:	2200      	movs	r2, #0
 8007db0:	210f      	movs	r1, #15
 8007db2:	f06f 0001 	mvn.w	r0, #1
 8007db6:	f001 ff87 	bl	8009cc8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007dba:	bf00      	nop
 8007dbc:	3708      	adds	r7, #8
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	40021000 	.word	0x40021000

08007dc8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b08c      	sub	sp, #48	; 0x30
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8007dd8:	4b2c      	ldr	r3, [pc, #176]	; (8007e8c <HAL_InitTick+0xc4>)
 8007dda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ddc:	4a2b      	ldr	r2, [pc, #172]	; (8007e8c <HAL_InitTick+0xc4>)
 8007dde:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007de2:	6613      	str	r3, [r2, #96]	; 0x60
 8007de4:	4b29      	ldr	r3, [pc, #164]	; (8007e8c <HAL_InitTick+0xc4>)
 8007de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007de8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dec:	60bb      	str	r3, [r7, #8]
 8007dee:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007df0:	f107 020c 	add.w	r2, r7, #12
 8007df4:	f107 0310 	add.w	r3, r7, #16
 8007df8:	4611      	mov	r1, r2
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f005 fd54 	bl	800d8a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8007e00:	f005 fd3c 	bl	800d87c <HAL_RCC_GetPCLK2Freq>
 8007e04:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8007e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e08:	4a21      	ldr	r2, [pc, #132]	; (8007e90 <HAL_InitTick+0xc8>)
 8007e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e0e:	0c9b      	lsrs	r3, r3, #18
 8007e10:	3b01      	subs	r3, #1
 8007e12:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8007e14:	4b1f      	ldr	r3, [pc, #124]	; (8007e94 <HAL_InitTick+0xcc>)
 8007e16:	4a20      	ldr	r2, [pc, #128]	; (8007e98 <HAL_InitTick+0xd0>)
 8007e18:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8007e1a:	4b1e      	ldr	r3, [pc, #120]	; (8007e94 <HAL_InitTick+0xcc>)
 8007e1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007e20:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8007e22:	4a1c      	ldr	r2, [pc, #112]	; (8007e94 <HAL_InitTick+0xcc>)
 8007e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e26:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8007e28:	4b1a      	ldr	r3, [pc, #104]	; (8007e94 <HAL_InitTick+0xcc>)
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007e2e:	4b19      	ldr	r3, [pc, #100]	; (8007e94 <HAL_InitTick+0xcc>)
 8007e30:	2200      	movs	r2, #0
 8007e32:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8007e34:	4817      	ldr	r0, [pc, #92]	; (8007e94 <HAL_InitTick+0xcc>)
 8007e36:	f006 f8a8 	bl	800df8a <HAL_TIM_Base_Init>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8007e40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d11b      	bne.n	8007e80 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8007e48:	4812      	ldr	r0, [pc, #72]	; (8007e94 <HAL_InitTick+0xcc>)
 8007e4a:	f006 f8ff 	bl	800e04c <HAL_TIM_Base_Start_IT>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8007e54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d111      	bne.n	8007e80 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8007e5c:	2019      	movs	r0, #25
 8007e5e:	f001 ff4d 	bl	8009cfc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2b0f      	cmp	r3, #15
 8007e66:	d808      	bhi.n	8007e7a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8007e68:	2200      	movs	r2, #0
 8007e6a:	6879      	ldr	r1, [r7, #4]
 8007e6c:	2019      	movs	r0, #25
 8007e6e:	f001 ff2b 	bl	8009cc8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007e72:	4a0a      	ldr	r2, [pc, #40]	; (8007e9c <HAL_InitTick+0xd4>)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6013      	str	r3, [r2, #0]
 8007e78:	e002      	b.n	8007e80 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8007e80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3730      	adds	r7, #48	; 0x30
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}
 8007e8c:	40021000 	.word	0x40021000
 8007e90:	431bde83 	.word	0x431bde83
 8007e94:	20000944 	.word	0x20000944
 8007e98:	40012c00 	.word	0x40012c00
 8007e9c:	20000008 	.word	0x20000008

08007ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007ea4:	e7fe      	b.n	8007ea4 <NMI_Handler+0x4>

08007ea6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007ea6:	b480      	push	{r7}
 8007ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007eaa:	e7fe      	b.n	8007eaa <HardFault_Handler+0x4>

08007eac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007eac:	b480      	push	{r7}
 8007eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007eb0:	e7fe      	b.n	8007eb0 <MemManage_Handler+0x4>

08007eb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007eb2:	b480      	push	{r7}
 8007eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007eb6:	e7fe      	b.n	8007eb6 <BusFault_Handler+0x4>

08007eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007ebc:	e7fe      	b.n	8007ebc <UsageFault_Handler+0x4>

08007ebe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007ebe:	b480      	push	{r7}
 8007ec0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007ec2:	bf00      	nop
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007ed0:	4802      	ldr	r0, [pc, #8]	; (8007edc <DMA1_Channel1_IRQHandler+0x10>)
 8007ed2:	f002 f904 	bl	800a0de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007ed6:	bf00      	nop
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop
 8007edc:	20000278 	.word	0x20000278

08007ee0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8007ee4:	4802      	ldr	r0, [pc, #8]	; (8007ef0 <USB_LP_IRQHandler+0x10>)
 8007ee6:	f003 fb21 	bl	800b52c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8007eea:	bf00      	nop
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	200051c4 	.word	0x200051c4

08007ef4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007ef8:	4802      	ldr	r0, [pc, #8]	; (8007f04 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8007efa:	f006 fa89 	bl	800e410 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8007efe:	bf00      	nop
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	20000944 	.word	0x20000944

08007f08 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_IT_Pin);
 8007f0c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007f10:	f002 fbe8 	bl	800a6e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  BNO055_ClearIntFlag(&hi2c2);
 8007f14:	4805      	ldr	r0, [pc, #20]	; (8007f2c <EXTI15_10_IRQHandler+0x24>)
 8007f16:	f7fd ff6a 	bl	8005dee <BNO055_ClearIntFlag>
  xSemaphoreGiveFromISR(HG_PROTECTION_SEMHandle,1);
 8007f1a:	4b05      	ldr	r3, [pc, #20]	; (8007f30 <EXTI15_10_IRQHandler+0x28>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2101      	movs	r1, #1
 8007f20:	4618      	mov	r0, r3
 8007f22:	f00d fd41 	bl	80159a8 <xQueueGiveFromISR>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007f26:	bf00      	nop
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop
 8007f2c:	20000374 	.word	0x20000374
 8007f30:	20000370 	.word	0x20000370

08007f34 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8007f38:	4805      	ldr	r0, [pc, #20]	; (8007f50 <UART4_IRQHandler+0x1c>)
 8007f3a:	f007 fc09 	bl	800f750 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  xSemaphoreGiveFromISR(GPS_UART_SemaphoreHandle,pdFALSE);
 8007f3e:	4b05      	ldr	r3, [pc, #20]	; (8007f54 <UART4_IRQHandler+0x20>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2100      	movs	r1, #0
 8007f44:	4618      	mov	r0, r3
 8007f46:	f00d fd2f 	bl	80159a8 <xQueueGiveFromISR>

  /* USER CODE END UART4_IRQn 1 */
}
 8007f4a:	bf00      	nop
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop
 8007f50:	20000a78 	.word	0x20000a78
 8007f54:	2000036c 	.word	0x2000036c

08007f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b086      	sub	sp, #24
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007f60:	4a14      	ldr	r2, [pc, #80]	; (8007fb4 <_sbrk+0x5c>)
 8007f62:	4b15      	ldr	r3, [pc, #84]	; (8007fb8 <_sbrk+0x60>)
 8007f64:	1ad3      	subs	r3, r2, r3
 8007f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007f6c:	4b13      	ldr	r3, [pc, #76]	; (8007fbc <_sbrk+0x64>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d102      	bne.n	8007f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007f74:	4b11      	ldr	r3, [pc, #68]	; (8007fbc <_sbrk+0x64>)
 8007f76:	4a12      	ldr	r2, [pc, #72]	; (8007fc0 <_sbrk+0x68>)
 8007f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007f7a:	4b10      	ldr	r3, [pc, #64]	; (8007fbc <_sbrk+0x64>)
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4413      	add	r3, r2
 8007f82:	693a      	ldr	r2, [r7, #16]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d207      	bcs.n	8007f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007f88:	f010 f82c 	bl	8017fe4 <__errno>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	220c      	movs	r2, #12
 8007f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007f92:	f04f 33ff 	mov.w	r3, #4294967295
 8007f96:	e009      	b.n	8007fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007f98:	4b08      	ldr	r3, [pc, #32]	; (8007fbc <_sbrk+0x64>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007f9e:	4b07      	ldr	r3, [pc, #28]	; (8007fbc <_sbrk+0x64>)
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4413      	add	r3, r2
 8007fa6:	4a05      	ldr	r2, [pc, #20]	; (8007fbc <_sbrk+0x64>)
 8007fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007faa:	68fb      	ldr	r3, [r7, #12]
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3718      	adds	r7, #24
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	20020000 	.word	0x20020000
 8007fb8:	00000400 	.word	0x00000400
 8007fbc:	20000990 	.word	0x20000990
 8007fc0:	200056e8 	.word	0x200056e8

08007fc4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007fc8:	4b08      	ldr	r3, [pc, #32]	; (8007fec <SystemInit+0x28>)
 8007fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fce:	4a07      	ldr	r2, [pc, #28]	; (8007fec <SystemInit+0x28>)
 8007fd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007fd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8007fd8:	4b04      	ldr	r3, [pc, #16]	; (8007fec <SystemInit+0x28>)
 8007fda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007fde:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007fe0:	bf00      	nop
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr
 8007fea:	bf00      	nop
 8007fec:	e000ed00 	.word	0xe000ed00

08007ff0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b08a      	sub	sp, #40	; 0x28
 8007ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007ff6:	f107 031c 	add.w	r3, r7, #28
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	601a      	str	r2, [r3, #0]
 8007ffe:	605a      	str	r2, [r3, #4]
 8008000:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008002:	463b      	mov	r3, r7
 8008004:	2200      	movs	r2, #0
 8008006:	601a      	str	r2, [r3, #0]
 8008008:	605a      	str	r2, [r3, #4]
 800800a:	609a      	str	r2, [r3, #8]
 800800c:	60da      	str	r2, [r3, #12]
 800800e:	611a      	str	r2, [r3, #16]
 8008010:	615a      	str	r2, [r3, #20]
 8008012:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008014:	4b20      	ldr	r3, [pc, #128]	; (8008098 <MX_TIM2_Init+0xa8>)
 8008016:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800801a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800801c:	4b1e      	ldr	r3, [pc, #120]	; (8008098 <MX_TIM2_Init+0xa8>)
 800801e:	2200      	movs	r2, #0
 8008020:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008022:	4b1d      	ldr	r3, [pc, #116]	; (8008098 <MX_TIM2_Init+0xa8>)
 8008024:	2200      	movs	r2, #0
 8008026:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1440000;
 8008028:	4b1b      	ldr	r3, [pc, #108]	; (8008098 <MX_TIM2_Init+0xa8>)
 800802a:	4a1c      	ldr	r2, [pc, #112]	; (800809c <MX_TIM2_Init+0xac>)
 800802c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800802e:	4b1a      	ldr	r3, [pc, #104]	; (8008098 <MX_TIM2_Init+0xa8>)
 8008030:	2200      	movs	r2, #0
 8008032:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008034:	4b18      	ldr	r3, [pc, #96]	; (8008098 <MX_TIM2_Init+0xa8>)
 8008036:	2200      	movs	r2, #0
 8008038:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800803a:	4817      	ldr	r0, [pc, #92]	; (8008098 <MX_TIM2_Init+0xa8>)
 800803c:	f006 f87e 	bl	800e13c <HAL_TIM_PWM_Init>
 8008040:	4603      	mov	r3, r0
 8008042:	2b00      	cmp	r3, #0
 8008044:	d001      	beq.n	800804a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8008046:	f7ff fb3f 	bl	80076c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800804a:	2300      	movs	r3, #0
 800804c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800804e:	2300      	movs	r3, #0
 8008050:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008052:	f107 031c 	add.w	r3, r7, #28
 8008056:	4619      	mov	r1, r3
 8008058:	480f      	ldr	r0, [pc, #60]	; (8008098 <MX_TIM2_Init+0xa8>)
 800805a:	f007 f88d 	bl	800f178 <HAL_TIMEx_MasterConfigSynchronization>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d001      	beq.n	8008068 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8008064:	f7ff fb30 	bl	80076c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008068:	2360      	movs	r3, #96	; 0x60
 800806a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800806c:	2300      	movs	r3, #0
 800806e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008070:	2300      	movs	r3, #0
 8008072:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008074:	2300      	movs	r3, #0
 8008076:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008078:	463b      	mov	r3, r7
 800807a:	2208      	movs	r2, #8
 800807c:	4619      	mov	r1, r3
 800807e:	4806      	ldr	r0, [pc, #24]	; (8008098 <MX_TIM2_Init+0xa8>)
 8008080:	f006 fb46 	bl	800e710 <HAL_TIM_PWM_ConfigChannel>
 8008084:	4603      	mov	r3, r0
 8008086:	2b00      	cmp	r3, #0
 8008088:	d001      	beq.n	800808e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800808a:	f7ff fb1d 	bl	80076c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800808e:	bf00      	nop
 8008090:	3728      	adds	r7, #40	; 0x28
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	20000994 	.word	0x20000994
 800809c:	0015f900 	.word	0x0015f900

080080a0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b08a      	sub	sp, #40	; 0x28
 80080a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80080a6:	f107 031c 	add.w	r3, r7, #28
 80080aa:	2200      	movs	r2, #0
 80080ac:	601a      	str	r2, [r3, #0]
 80080ae:	605a      	str	r2, [r3, #4]
 80080b0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80080b2:	463b      	mov	r3, r7
 80080b4:	2200      	movs	r2, #0
 80080b6:	601a      	str	r2, [r3, #0]
 80080b8:	605a      	str	r2, [r3, #4]
 80080ba:	609a      	str	r2, [r3, #8]
 80080bc:	60da      	str	r2, [r3, #12]
 80080be:	611a      	str	r2, [r3, #16]
 80080c0:	615a      	str	r2, [r3, #20]
 80080c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80080c4:	4b21      	ldr	r3, [pc, #132]	; (800814c <MX_TIM3_Init+0xac>)
 80080c6:	4a22      	ldr	r2, [pc, #136]	; (8008150 <MX_TIM3_Init+0xb0>)
 80080c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 50;
 80080ca:	4b20      	ldr	r3, [pc, #128]	; (800814c <MX_TIM3_Init+0xac>)
 80080cc:	2232      	movs	r2, #50	; 0x32
 80080ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80080d0:	4b1e      	ldr	r3, [pc, #120]	; (800814c <MX_TIM3_Init+0xac>)
 80080d2:	2200      	movs	r2, #0
 80080d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7200;
 80080d6:	4b1d      	ldr	r3, [pc, #116]	; (800814c <MX_TIM3_Init+0xac>)
 80080d8:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80080dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80080de:	4b1b      	ldr	r3, [pc, #108]	; (800814c <MX_TIM3_Init+0xac>)
 80080e0:	2200      	movs	r2, #0
 80080e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80080e4:	4b19      	ldr	r3, [pc, #100]	; (800814c <MX_TIM3_Init+0xac>)
 80080e6:	2200      	movs	r2, #0
 80080e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80080ea:	4818      	ldr	r0, [pc, #96]	; (800814c <MX_TIM3_Init+0xac>)
 80080ec:	f006 f826 	bl	800e13c <HAL_TIM_PWM_Init>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d001      	beq.n	80080fa <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80080f6:	f7ff fae7 	bl	80076c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80080fa:	2300      	movs	r3, #0
 80080fc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80080fe:	2300      	movs	r3, #0
 8008100:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008102:	f107 031c 	add.w	r3, r7, #28
 8008106:	4619      	mov	r1, r3
 8008108:	4810      	ldr	r0, [pc, #64]	; (800814c <MX_TIM3_Init+0xac>)
 800810a:	f007 f835 	bl	800f178 <HAL_TIMEx_MasterConfigSynchronization>
 800810e:	4603      	mov	r3, r0
 8008110:	2b00      	cmp	r3, #0
 8008112:	d001      	beq.n	8008118 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8008114:	f7ff fad8 	bl	80076c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008118:	2360      	movs	r3, #96	; 0x60
 800811a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800811c:	2300      	movs	r3, #0
 800811e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008120:	2300      	movs	r3, #0
 8008122:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008124:	2300      	movs	r3, #0
 8008126:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008128:	463b      	mov	r3, r7
 800812a:	2200      	movs	r2, #0
 800812c:	4619      	mov	r1, r3
 800812e:	4807      	ldr	r0, [pc, #28]	; (800814c <MX_TIM3_Init+0xac>)
 8008130:	f006 faee 	bl	800e710 <HAL_TIM_PWM_ConfigChannel>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d001      	beq.n	800813e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800813a:	f7ff fac5 	bl	80076c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800813e:	4803      	ldr	r0, [pc, #12]	; (800814c <MX_TIM3_Init+0xac>)
 8008140:	f000 f8c2 	bl	80082c8 <HAL_TIM_MspPostInit>

}
 8008144:	bf00      	nop
 8008146:	3728      	adds	r7, #40	; 0x28
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}
 800814c:	200009e0 	.word	0x200009e0
 8008150:	40000400 	.word	0x40000400

08008154 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b08a      	sub	sp, #40	; 0x28
 8008158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800815a:	f107 031c 	add.w	r3, r7, #28
 800815e:	2200      	movs	r2, #0
 8008160:	601a      	str	r2, [r3, #0]
 8008162:	605a      	str	r2, [r3, #4]
 8008164:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008166:	463b      	mov	r3, r7
 8008168:	2200      	movs	r2, #0
 800816a:	601a      	str	r2, [r3, #0]
 800816c:	605a      	str	r2, [r3, #4]
 800816e:	609a      	str	r2, [r3, #8]
 8008170:	60da      	str	r2, [r3, #12]
 8008172:	611a      	str	r2, [r3, #16]
 8008174:	615a      	str	r2, [r3, #20]
 8008176:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8008178:	4b2e      	ldr	r3, [pc, #184]	; (8008234 <MX_TIM4_Init+0xe0>)
 800817a:	4a2f      	ldr	r2, [pc, #188]	; (8008238 <MX_TIM4_Init+0xe4>)
 800817c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 50;
 800817e:	4b2d      	ldr	r3, [pc, #180]	; (8008234 <MX_TIM4_Init+0xe0>)
 8008180:	2232      	movs	r2, #50	; 0x32
 8008182:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008184:	4b2b      	ldr	r3, [pc, #172]	; (8008234 <MX_TIM4_Init+0xe0>)
 8008186:	2200      	movs	r2, #0
 8008188:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000;
 800818a:	4b2a      	ldr	r3, [pc, #168]	; (8008234 <MX_TIM4_Init+0xe0>)
 800818c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8008190:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008192:	4b28      	ldr	r3, [pc, #160]	; (8008234 <MX_TIM4_Init+0xe0>)
 8008194:	2200      	movs	r2, #0
 8008196:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008198:	4b26      	ldr	r3, [pc, #152]	; (8008234 <MX_TIM4_Init+0xe0>)
 800819a:	2200      	movs	r2, #0
 800819c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800819e:	4825      	ldr	r0, [pc, #148]	; (8008234 <MX_TIM4_Init+0xe0>)
 80081a0:	f005 ffcc 	bl	800e13c <HAL_TIM_PWM_Init>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d001      	beq.n	80081ae <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80081aa:	f7ff fa8d 	bl	80076c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80081ae:	2300      	movs	r3, #0
 80081b0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80081b2:	2300      	movs	r3, #0
 80081b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80081b6:	f107 031c 	add.w	r3, r7, #28
 80081ba:	4619      	mov	r1, r3
 80081bc:	481d      	ldr	r0, [pc, #116]	; (8008234 <MX_TIM4_Init+0xe0>)
 80081be:	f006 ffdb 	bl	800f178 <HAL_TIMEx_MasterConfigSynchronization>
 80081c2:	4603      	mov	r3, r0
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d001      	beq.n	80081cc <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80081c8:	f7ff fa7e 	bl	80076c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80081cc:	2360      	movs	r3, #96	; 0x60
 80081ce:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2880;
 80081d0:	f44f 6334 	mov.w	r3, #2880	; 0xb40
 80081d4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80081d6:	2300      	movs	r3, #0
 80081d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80081da:	2300      	movs	r3, #0
 80081dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80081de:	463b      	mov	r3, r7
 80081e0:	2200      	movs	r2, #0
 80081e2:	4619      	mov	r1, r3
 80081e4:	4813      	ldr	r0, [pc, #76]	; (8008234 <MX_TIM4_Init+0xe0>)
 80081e6:	f006 fa93 	bl	800e710 <HAL_TIM_PWM_ConfigChannel>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d001      	beq.n	80081f4 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 80081f0:	f7ff fa6a 	bl	80076c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80081f4:	463b      	mov	r3, r7
 80081f6:	2204      	movs	r2, #4
 80081f8:	4619      	mov	r1, r3
 80081fa:	480e      	ldr	r0, [pc, #56]	; (8008234 <MX_TIM4_Init+0xe0>)
 80081fc:	f006 fa88 	bl	800e710 <HAL_TIM_PWM_ConfigChannel>
 8008200:	4603      	mov	r3, r0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d001      	beq.n	800820a <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8008206:	f7ff fa5f 	bl	80076c8 <Error_Handler>
  }
  sConfigOC.Pulse = 6000;
 800820a:	f241 7370 	movw	r3, #6000	; 0x1770
 800820e:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008210:	463b      	mov	r3, r7
 8008212:	220c      	movs	r2, #12
 8008214:	4619      	mov	r1, r3
 8008216:	4807      	ldr	r0, [pc, #28]	; (8008234 <MX_TIM4_Init+0xe0>)
 8008218:	f006 fa7a 	bl	800e710 <HAL_TIM_PWM_ConfigChannel>
 800821c:	4603      	mov	r3, r0
 800821e:	2b00      	cmp	r3, #0
 8008220:	d001      	beq.n	8008226 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8008222:	f7ff fa51 	bl	80076c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8008226:	4803      	ldr	r0, [pc, #12]	; (8008234 <MX_TIM4_Init+0xe0>)
 8008228:	f000 f84e 	bl	80082c8 <HAL_TIM_MspPostInit>

}
 800822c:	bf00      	nop
 800822e:	3728      	adds	r7, #40	; 0x28
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	20000a2c 	.word	0x20000a2c
 8008238:	40000800 	.word	0x40000800

0800823c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800823c:	b480      	push	{r7}
 800823e:	b087      	sub	sp, #28
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800824c:	d10c      	bne.n	8008268 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800824e:	4b1b      	ldr	r3, [pc, #108]	; (80082bc <HAL_TIM_PWM_MspInit+0x80>)
 8008250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008252:	4a1a      	ldr	r2, [pc, #104]	; (80082bc <HAL_TIM_PWM_MspInit+0x80>)
 8008254:	f043 0301 	orr.w	r3, r3, #1
 8008258:	6593      	str	r3, [r2, #88]	; 0x58
 800825a:	4b18      	ldr	r3, [pc, #96]	; (80082bc <HAL_TIM_PWM_MspInit+0x80>)
 800825c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800825e:	f003 0301 	and.w	r3, r3, #1
 8008262:	617b      	str	r3, [r7, #20]
 8008264:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8008266:	e022      	b.n	80082ae <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM3)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a14      	ldr	r2, [pc, #80]	; (80082c0 <HAL_TIM_PWM_MspInit+0x84>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d10c      	bne.n	800828c <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008272:	4b12      	ldr	r3, [pc, #72]	; (80082bc <HAL_TIM_PWM_MspInit+0x80>)
 8008274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008276:	4a11      	ldr	r2, [pc, #68]	; (80082bc <HAL_TIM_PWM_MspInit+0x80>)
 8008278:	f043 0302 	orr.w	r3, r3, #2
 800827c:	6593      	str	r3, [r2, #88]	; 0x58
 800827e:	4b0f      	ldr	r3, [pc, #60]	; (80082bc <HAL_TIM_PWM_MspInit+0x80>)
 8008280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008282:	f003 0302 	and.w	r3, r3, #2
 8008286:	613b      	str	r3, [r7, #16]
 8008288:	693b      	ldr	r3, [r7, #16]
}
 800828a:	e010      	b.n	80082ae <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM4)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a0c      	ldr	r2, [pc, #48]	; (80082c4 <HAL_TIM_PWM_MspInit+0x88>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d10b      	bne.n	80082ae <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008296:	4b09      	ldr	r3, [pc, #36]	; (80082bc <HAL_TIM_PWM_MspInit+0x80>)
 8008298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800829a:	4a08      	ldr	r2, [pc, #32]	; (80082bc <HAL_TIM_PWM_MspInit+0x80>)
 800829c:	f043 0304 	orr.w	r3, r3, #4
 80082a0:	6593      	str	r3, [r2, #88]	; 0x58
 80082a2:	4b06      	ldr	r3, [pc, #24]	; (80082bc <HAL_TIM_PWM_MspInit+0x80>)
 80082a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082a6:	f003 0304 	and.w	r3, r3, #4
 80082aa:	60fb      	str	r3, [r7, #12]
 80082ac:	68fb      	ldr	r3, [r7, #12]
}
 80082ae:	bf00      	nop
 80082b0:	371c      	adds	r7, #28
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr
 80082ba:	bf00      	nop
 80082bc:	40021000 	.word	0x40021000
 80082c0:	40000400 	.word	0x40000400
 80082c4:	40000800 	.word	0x40000800

080082c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b08a      	sub	sp, #40	; 0x28
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082d0:	f107 0314 	add.w	r3, r7, #20
 80082d4:	2200      	movs	r2, #0
 80082d6:	601a      	str	r2, [r3, #0]
 80082d8:	605a      	str	r2, [r3, #4]
 80082da:	609a      	str	r2, [r3, #8]
 80082dc:	60da      	str	r2, [r3, #12]
 80082de:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a22      	ldr	r2, [pc, #136]	; (8008370 <HAL_TIM_MspPostInit+0xa8>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d11c      	bne.n	8008324 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80082ea:	4b22      	ldr	r3, [pc, #136]	; (8008374 <HAL_TIM_MspPostInit+0xac>)
 80082ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082ee:	4a21      	ldr	r2, [pc, #132]	; (8008374 <HAL_TIM_MspPostInit+0xac>)
 80082f0:	f043 0304 	orr.w	r3, r3, #4
 80082f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80082f6:	4b1f      	ldr	r3, [pc, #124]	; (8008374 <HAL_TIM_MspPostInit+0xac>)
 80082f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082fa:	f003 0304 	and.w	r3, r3, #4
 80082fe:	613b      	str	r3, [r7, #16]
 8008300:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8008302:	2340      	movs	r3, #64	; 0x40
 8008304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008306:	2302      	movs	r3, #2
 8008308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800830a:	2300      	movs	r3, #0
 800830c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800830e:	2300      	movs	r3, #0
 8008310:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008312:	2302      	movs	r3, #2
 8008314:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008316:	f107 0314 	add.w	r3, r7, #20
 800831a:	4619      	mov	r1, r3
 800831c:	4816      	ldr	r0, [pc, #88]	; (8008378 <HAL_TIM_MspPostInit+0xb0>)
 800831e:	f002 f82d 	bl	800a37c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8008322:	e021      	b.n	8008368 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM4)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a14      	ldr	r2, [pc, #80]	; (800837c <HAL_TIM_MspPostInit+0xb4>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d11c      	bne.n	8008368 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800832e:	4b11      	ldr	r3, [pc, #68]	; (8008374 <HAL_TIM_MspPostInit+0xac>)
 8008330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008332:	4a10      	ldr	r2, [pc, #64]	; (8008374 <HAL_TIM_MspPostInit+0xac>)
 8008334:	f043 0302 	orr.w	r3, r3, #2
 8008338:	64d3      	str	r3, [r2, #76]	; 0x4c
 800833a:	4b0e      	ldr	r3, [pc, #56]	; (8008374 <HAL_TIM_MspPostInit+0xac>)
 800833c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800833e:	f003 0302 	and.w	r3, r3, #2
 8008342:	60fb      	str	r3, [r7, #12]
 8008344:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8008346:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800834a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800834c:	2302      	movs	r3, #2
 800834e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008350:	2300      	movs	r3, #0
 8008352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008354:	2300      	movs	r3, #0
 8008356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8008358:	2302      	movs	r3, #2
 800835a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800835c:	f107 0314 	add.w	r3, r7, #20
 8008360:	4619      	mov	r1, r3
 8008362:	4807      	ldr	r0, [pc, #28]	; (8008380 <HAL_TIM_MspPostInit+0xb8>)
 8008364:	f002 f80a 	bl	800a37c <HAL_GPIO_Init>
}
 8008368:	bf00      	nop
 800836a:	3728      	adds	r7, #40	; 0x28
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}
 8008370:	40000400 	.word	0x40000400
 8008374:	40021000 	.word	0x40021000
 8008378:	48000800 	.word	0x48000800
 800837c:	40000800 	.word	0x40000800
 8008380:	48000400 	.word	0x48000400

08008384 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart5;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8008388:	4b22      	ldr	r3, [pc, #136]	; (8008414 <MX_UART4_Init+0x90>)
 800838a:	4a23      	ldr	r2, [pc, #140]	; (8008418 <MX_UART4_Init+0x94>)
 800838c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800838e:	4b21      	ldr	r3, [pc, #132]	; (8008414 <MX_UART4_Init+0x90>)
 8008390:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8008394:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8008396:	4b1f      	ldr	r3, [pc, #124]	; (8008414 <MX_UART4_Init+0x90>)
 8008398:	2200      	movs	r2, #0
 800839a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800839c:	4b1d      	ldr	r3, [pc, #116]	; (8008414 <MX_UART4_Init+0x90>)
 800839e:	2200      	movs	r2, #0
 80083a0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80083a2:	4b1c      	ldr	r3, [pc, #112]	; (8008414 <MX_UART4_Init+0x90>)
 80083a4:	2200      	movs	r2, #0
 80083a6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80083a8:	4b1a      	ldr	r3, [pc, #104]	; (8008414 <MX_UART4_Init+0x90>)
 80083aa:	220c      	movs	r2, #12
 80083ac:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80083ae:	4b19      	ldr	r3, [pc, #100]	; (8008414 <MX_UART4_Init+0x90>)
 80083b0:	2200      	movs	r2, #0
 80083b2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80083b4:	4b17      	ldr	r3, [pc, #92]	; (8008414 <MX_UART4_Init+0x90>)
 80083b6:	2200      	movs	r2, #0
 80083b8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80083ba:	4b16      	ldr	r3, [pc, #88]	; (8008414 <MX_UART4_Init+0x90>)
 80083bc:	2200      	movs	r2, #0
 80083be:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80083c0:	4b14      	ldr	r3, [pc, #80]	; (8008414 <MX_UART4_Init+0x90>)
 80083c2:	2200      	movs	r2, #0
 80083c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80083c6:	4b13      	ldr	r3, [pc, #76]	; (8008414 <MX_UART4_Init+0x90>)
 80083c8:	2200      	movs	r2, #0
 80083ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80083cc:	4811      	ldr	r0, [pc, #68]	; (8008414 <MX_UART4_Init+0x90>)
 80083ce:	f006 ffaf 	bl	800f330 <HAL_UART_Init>
 80083d2:	4603      	mov	r3, r0
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d001      	beq.n	80083dc <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80083d8:	f7ff f976 	bl	80076c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80083dc:	2100      	movs	r1, #0
 80083de:	480d      	ldr	r0, [pc, #52]	; (8008414 <MX_UART4_Init+0x90>)
 80083e0:	f009 f82f 	bl	8011442 <HAL_UARTEx_SetTxFifoThreshold>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d001      	beq.n	80083ee <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80083ea:	f7ff f96d 	bl	80076c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80083ee:	2100      	movs	r1, #0
 80083f0:	4808      	ldr	r0, [pc, #32]	; (8008414 <MX_UART4_Init+0x90>)
 80083f2:	f009 f864 	bl	80114be <HAL_UARTEx_SetRxFifoThreshold>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d001      	beq.n	8008400 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80083fc:	f7ff f964 	bl	80076c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8008400:	4804      	ldr	r0, [pc, #16]	; (8008414 <MX_UART4_Init+0x90>)
 8008402:	f008 ffe5 	bl	80113d0 <HAL_UARTEx_DisableFifoMode>
 8008406:	4603      	mov	r3, r0
 8008408:	2b00      	cmp	r3, #0
 800840a:	d001      	beq.n	8008410 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800840c:	f7ff f95c 	bl	80076c8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8008410:	bf00      	nop
 8008412:	bd80      	pop	{r7, pc}
 8008414:	20000a78 	.word	0x20000a78
 8008418:	40004c00 	.word	0x40004c00

0800841c <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8008420:	4b22      	ldr	r3, [pc, #136]	; (80084ac <MX_UART5_Init+0x90>)
 8008422:	4a23      	ldr	r2, [pc, #140]	; (80084b0 <MX_UART5_Init+0x94>)
 8008424:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8008426:	4b21      	ldr	r3, [pc, #132]	; (80084ac <MX_UART5_Init+0x90>)
 8008428:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800842c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800842e:	4b1f      	ldr	r3, [pc, #124]	; (80084ac <MX_UART5_Init+0x90>)
 8008430:	2200      	movs	r2, #0
 8008432:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8008434:	4b1d      	ldr	r3, [pc, #116]	; (80084ac <MX_UART5_Init+0x90>)
 8008436:	2200      	movs	r2, #0
 8008438:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800843a:	4b1c      	ldr	r3, [pc, #112]	; (80084ac <MX_UART5_Init+0x90>)
 800843c:	2200      	movs	r2, #0
 800843e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8008440:	4b1a      	ldr	r3, [pc, #104]	; (80084ac <MX_UART5_Init+0x90>)
 8008442:	220c      	movs	r2, #12
 8008444:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008446:	4b19      	ldr	r3, [pc, #100]	; (80084ac <MX_UART5_Init+0x90>)
 8008448:	2200      	movs	r2, #0
 800844a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800844c:	4b17      	ldr	r3, [pc, #92]	; (80084ac <MX_UART5_Init+0x90>)
 800844e:	2200      	movs	r2, #0
 8008450:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008452:	4b16      	ldr	r3, [pc, #88]	; (80084ac <MX_UART5_Init+0x90>)
 8008454:	2200      	movs	r2, #0
 8008456:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008458:	4b14      	ldr	r3, [pc, #80]	; (80084ac <MX_UART5_Init+0x90>)
 800845a:	2200      	movs	r2, #0
 800845c:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800845e:	4b13      	ldr	r3, [pc, #76]	; (80084ac <MX_UART5_Init+0x90>)
 8008460:	2200      	movs	r2, #0
 8008462:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8008464:	4811      	ldr	r0, [pc, #68]	; (80084ac <MX_UART5_Init+0x90>)
 8008466:	f006 ff63 	bl	800f330 <HAL_UART_Init>
 800846a:	4603      	mov	r3, r0
 800846c:	2b00      	cmp	r3, #0
 800846e:	d001      	beq.n	8008474 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8008470:	f7ff f92a 	bl	80076c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008474:	2100      	movs	r1, #0
 8008476:	480d      	ldr	r0, [pc, #52]	; (80084ac <MX_UART5_Init+0x90>)
 8008478:	f008 ffe3 	bl	8011442 <HAL_UARTEx_SetTxFifoThreshold>
 800847c:	4603      	mov	r3, r0
 800847e:	2b00      	cmp	r3, #0
 8008480:	d001      	beq.n	8008486 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8008482:	f7ff f921 	bl	80076c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008486:	2100      	movs	r1, #0
 8008488:	4808      	ldr	r0, [pc, #32]	; (80084ac <MX_UART5_Init+0x90>)
 800848a:	f009 f818 	bl	80114be <HAL_UARTEx_SetRxFifoThreshold>
 800848e:	4603      	mov	r3, r0
 8008490:	2b00      	cmp	r3, #0
 8008492:	d001      	beq.n	8008498 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8008494:	f7ff f918 	bl	80076c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8008498:	4804      	ldr	r0, [pc, #16]	; (80084ac <MX_UART5_Init+0x90>)
 800849a:	f008 ff99 	bl	80113d0 <HAL_UARTEx_DisableFifoMode>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d001      	beq.n	80084a8 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80084a4:	f7ff f910 	bl	80076c8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80084a8:	bf00      	nop
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	20000b08 	.word	0x20000b08
 80084b0:	40005000 	.word	0x40005000

080084b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b0a2      	sub	sp, #136	; 0x88
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084bc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80084c0:	2200      	movs	r2, #0
 80084c2:	601a      	str	r2, [r3, #0]
 80084c4:	605a      	str	r2, [r3, #4]
 80084c6:	609a      	str	r2, [r3, #8]
 80084c8:	60da      	str	r2, [r3, #12]
 80084ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80084cc:	f107 0320 	add.w	r3, r7, #32
 80084d0:	2254      	movs	r2, #84	; 0x54
 80084d2:	2100      	movs	r1, #0
 80084d4:	4618      	mov	r0, r3
 80084d6:	f00f fdcf 	bl	8018078 <memset>
  if(uartHandle->Instance==UART4)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a52      	ldr	r2, [pc, #328]	; (8008628 <HAL_UART_MspInit+0x174>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d141      	bne.n	8008568 <HAL_UART_MspInit+0xb4>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80084e4:	2308      	movs	r3, #8
 80084e6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80084e8:	2300      	movs	r3, #0
 80084ea:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80084ec:	f107 0320 	add.w	r3, r7, #32
 80084f0:	4618      	mov	r0, r3
 80084f2:	f005 fa51 	bl	800d998 <HAL_RCCEx_PeriphCLKConfig>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d001      	beq.n	8008500 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80084fc:	f7ff f8e4 	bl	80076c8 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8008500:	4b4a      	ldr	r3, [pc, #296]	; (800862c <HAL_UART_MspInit+0x178>)
 8008502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008504:	4a49      	ldr	r2, [pc, #292]	; (800862c <HAL_UART_MspInit+0x178>)
 8008506:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800850a:	6593      	str	r3, [r2, #88]	; 0x58
 800850c:	4b47      	ldr	r3, [pc, #284]	; (800862c <HAL_UART_MspInit+0x178>)
 800850e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008510:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008514:	61fb      	str	r3, [r7, #28]
 8008516:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008518:	4b44      	ldr	r3, [pc, #272]	; (800862c <HAL_UART_MspInit+0x178>)
 800851a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800851c:	4a43      	ldr	r2, [pc, #268]	; (800862c <HAL_UART_MspInit+0x178>)
 800851e:	f043 0304 	orr.w	r3, r3, #4
 8008522:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008524:	4b41      	ldr	r3, [pc, #260]	; (800862c <HAL_UART_MspInit+0x178>)
 8008526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008528:	f003 0304 	and.w	r3, r3, #4
 800852c:	61bb      	str	r3, [r7, #24]
 800852e:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8008530:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008534:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008536:	2302      	movs	r3, #2
 8008538:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800853a:	2300      	movs	r3, #0
 800853c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800853e:	2300      	movs	r3, #0
 8008540:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8008544:	2305      	movs	r3, #5
 8008546:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800854a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800854e:	4619      	mov	r1, r3
 8008550:	4837      	ldr	r0, [pc, #220]	; (8008630 <HAL_UART_MspInit+0x17c>)
 8008552:	f001 ff13 	bl	800a37c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8008556:	2200      	movs	r2, #0
 8008558:	2105      	movs	r1, #5
 800855a:	2034      	movs	r0, #52	; 0x34
 800855c:	f001 fbb4 	bl	8009cc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8008560:	2034      	movs	r0, #52	; 0x34
 8008562:	f001 fbcb 	bl	8009cfc <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8008566:	e05b      	b.n	8008620 <HAL_UART_MspInit+0x16c>
  else if(uartHandle->Instance==UART5)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a31      	ldr	r2, [pc, #196]	; (8008634 <HAL_UART_MspInit+0x180>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d156      	bne.n	8008620 <HAL_UART_MspInit+0x16c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8008572:	2310      	movs	r3, #16
 8008574:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8008576:	2300      	movs	r3, #0
 8008578:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800857a:	f107 0320 	add.w	r3, r7, #32
 800857e:	4618      	mov	r0, r3
 8008580:	f005 fa0a 	bl	800d998 <HAL_RCCEx_PeriphCLKConfig>
 8008584:	4603      	mov	r3, r0
 8008586:	2b00      	cmp	r3, #0
 8008588:	d001      	beq.n	800858e <HAL_UART_MspInit+0xda>
      Error_Handler();
 800858a:	f7ff f89d 	bl	80076c8 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 800858e:	4b27      	ldr	r3, [pc, #156]	; (800862c <HAL_UART_MspInit+0x178>)
 8008590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008592:	4a26      	ldr	r2, [pc, #152]	; (800862c <HAL_UART_MspInit+0x178>)
 8008594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008598:	6593      	str	r3, [r2, #88]	; 0x58
 800859a:	4b24      	ldr	r3, [pc, #144]	; (800862c <HAL_UART_MspInit+0x178>)
 800859c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800859e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80085a2:	617b      	str	r3, [r7, #20]
 80085a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80085a6:	4b21      	ldr	r3, [pc, #132]	; (800862c <HAL_UART_MspInit+0x178>)
 80085a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085aa:	4a20      	ldr	r2, [pc, #128]	; (800862c <HAL_UART_MspInit+0x178>)
 80085ac:	f043 0304 	orr.w	r3, r3, #4
 80085b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80085b2:	4b1e      	ldr	r3, [pc, #120]	; (800862c <HAL_UART_MspInit+0x178>)
 80085b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085b6:	f003 0304 	and.w	r3, r3, #4
 80085ba:	613b      	str	r3, [r7, #16]
 80085bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80085be:	4b1b      	ldr	r3, [pc, #108]	; (800862c <HAL_UART_MspInit+0x178>)
 80085c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085c2:	4a1a      	ldr	r2, [pc, #104]	; (800862c <HAL_UART_MspInit+0x178>)
 80085c4:	f043 0308 	orr.w	r3, r3, #8
 80085c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80085ca:	4b18      	ldr	r3, [pc, #96]	; (800862c <HAL_UART_MspInit+0x178>)
 80085cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085ce:	f003 0308 	and.w	r3, r3, #8
 80085d2:	60fb      	str	r3, [r7, #12]
 80085d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80085d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085da:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085dc:	2302      	movs	r3, #2
 80085de:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085e0:	2300      	movs	r3, #0
 80085e2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085e4:	2300      	movs	r3, #0
 80085e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80085ea:	2305      	movs	r3, #5
 80085ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80085f0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80085f4:	4619      	mov	r1, r3
 80085f6:	480e      	ldr	r0, [pc, #56]	; (8008630 <HAL_UART_MspInit+0x17c>)
 80085f8:	f001 fec0 	bl	800a37c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80085fc:	2304      	movs	r3, #4
 80085fe:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008600:	2302      	movs	r3, #2
 8008602:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008604:	2300      	movs	r3, #0
 8008606:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008608:	2300      	movs	r3, #0
 800860a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 800860e:	2305      	movs	r3, #5
 8008610:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008614:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008618:	4619      	mov	r1, r3
 800861a:	4807      	ldr	r0, [pc, #28]	; (8008638 <HAL_UART_MspInit+0x184>)
 800861c:	f001 feae 	bl	800a37c <HAL_GPIO_Init>
}
 8008620:	bf00      	nop
 8008622:	3788      	adds	r7, #136	; 0x88
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}
 8008628:	40004c00 	.word	0x40004c00
 800862c:	40021000 	.word	0x40021000
 8008630:	48000800 	.word	0x48000800
 8008634:	40005000 	.word	0x40005000
 8008638:	48000c00 	.word	0x48000c00

0800863c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800863c:	480d      	ldr	r0, [pc, #52]	; (8008674 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800863e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008640:	480d      	ldr	r0, [pc, #52]	; (8008678 <LoopForever+0x6>)
  ldr r1, =_edata
 8008642:	490e      	ldr	r1, [pc, #56]	; (800867c <LoopForever+0xa>)
  ldr r2, =_sidata
 8008644:	4a0e      	ldr	r2, [pc, #56]	; (8008680 <LoopForever+0xe>)
  movs r3, #0
 8008646:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8008648:	e002      	b.n	8008650 <LoopCopyDataInit>

0800864a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800864a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800864c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800864e:	3304      	adds	r3, #4

08008650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008654:	d3f9      	bcc.n	800864a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008656:	4a0b      	ldr	r2, [pc, #44]	; (8008684 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008658:	4c0b      	ldr	r4, [pc, #44]	; (8008688 <LoopForever+0x16>)
  movs r3, #0
 800865a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800865c:	e001      	b.n	8008662 <LoopFillZerobss>

0800865e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800865e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008660:	3204      	adds	r2, #4

08008662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008664:	d3fb      	bcc.n	800865e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008666:	f7ff fcad 	bl	8007fc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800866a:	f00f fcc1 	bl	8017ff0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800866e:	f7fe ff83 	bl	8007578 <main>

08008672 <LoopForever>:

LoopForever:
    b LoopForever
 8008672:	e7fe      	b.n	8008672 <LoopForever>
  ldr   r0, =_estack
 8008674:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800867c:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8008680:	08019528 	.word	0x08019528
  ldr r2, =_sbss
 8008684:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8008688:	200056e8 	.word	0x200056e8

0800868c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800868c:	e7fe      	b.n	800868c <ADC1_2_IRQHandler>

0800868e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800868e:	b580      	push	{r7, lr}
 8008690:	b082      	sub	sp, #8
 8008692:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008694:	2300      	movs	r3, #0
 8008696:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008698:	2003      	movs	r0, #3
 800869a:	f001 fb0a 	bl	8009cb2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800869e:	200f      	movs	r0, #15
 80086a0:	f7ff fb92 	bl	8007dc8 <HAL_InitTick>
 80086a4:	4603      	mov	r3, r0
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d002      	beq.n	80086b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80086aa:	2301      	movs	r3, #1
 80086ac:	71fb      	strb	r3, [r7, #7]
 80086ae:	e001      	b.n	80086b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80086b0:	f7ff fb62 	bl	8007d78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80086b4:	79fb      	ldrb	r3, [r7, #7]

}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3708      	adds	r7, #8
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
	...

080086c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80086c0:	b480      	push	{r7}
 80086c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80086c4:	4b05      	ldr	r3, [pc, #20]	; (80086dc <HAL_IncTick+0x1c>)
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	4b05      	ldr	r3, [pc, #20]	; (80086e0 <HAL_IncTick+0x20>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4413      	add	r3, r2
 80086ce:	4a03      	ldr	r2, [pc, #12]	; (80086dc <HAL_IncTick+0x1c>)
 80086d0:	6013      	str	r3, [r2, #0]
}
 80086d2:	bf00      	nop
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr
 80086dc:	20000b98 	.word	0x20000b98
 80086e0:	2000000c 	.word	0x2000000c

080086e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80086e4:	b480      	push	{r7}
 80086e6:	af00      	add	r7, sp, #0
  return uwTick;
 80086e8:	4b03      	ldr	r3, [pc, #12]	; (80086f8 <HAL_GetTick+0x14>)
 80086ea:	681b      	ldr	r3, [r3, #0]
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop
 80086f8:	20000b98 	.word	0x20000b98

080086fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008704:	f7ff ffee 	bl	80086e4 <HAL_GetTick>
 8008708:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008714:	d004      	beq.n	8008720 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8008716:	4b09      	ldr	r3, [pc, #36]	; (800873c <HAL_Delay+0x40>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	68fa      	ldr	r2, [r7, #12]
 800871c:	4413      	add	r3, r2
 800871e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008720:	bf00      	nop
 8008722:	f7ff ffdf 	bl	80086e4 <HAL_GetTick>
 8008726:	4602      	mov	r2, r0
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	1ad3      	subs	r3, r2, r3
 800872c:	68fa      	ldr	r2, [r7, #12]
 800872e:	429a      	cmp	r2, r3
 8008730:	d8f7      	bhi.n	8008722 <HAL_Delay+0x26>
  {
  }
}
 8008732:	bf00      	nop
 8008734:	bf00      	nop
 8008736:	3710      	adds	r7, #16
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}
 800873c:	2000000c 	.word	0x2000000c

08008740 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	689b      	ldr	r3, [r3, #8]
 800874e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	431a      	orrs	r2, r3
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	609a      	str	r2, [r3, #8]
}
 800875a:	bf00      	nop
 800875c:	370c      	adds	r7, #12
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr

08008766 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8008766:	b480      	push	{r7}
 8008768:	b083      	sub	sp, #12
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
 800876e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	431a      	orrs	r2, r3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	609a      	str	r2, [r3, #8]
}
 8008780:	bf00      	nop
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800878c:	b480      	push	{r7}
 800878e:	b083      	sub	sp, #12
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800879c:	4618      	mov	r0, r3
 800879e:	370c      	adds	r7, #12
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b087      	sub	sp, #28
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	60b9      	str	r1, [r7, #8]
 80087b2:	607a      	str	r2, [r7, #4]
 80087b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	3360      	adds	r3, #96	; 0x60
 80087ba:	461a      	mov	r2, r3
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	4413      	add	r3, r2
 80087c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	4b08      	ldr	r3, [pc, #32]	; (80087ec <LL_ADC_SetOffset+0x44>)
 80087ca:	4013      	ands	r3, r2
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80087d2:	683a      	ldr	r2, [r7, #0]
 80087d4:	430a      	orrs	r2, r1
 80087d6:	4313      	orrs	r3, r2
 80087d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80087e0:	bf00      	nop
 80087e2:	371c      	adds	r7, #28
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr
 80087ec:	03fff000 	.word	0x03fff000

080087f0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b085      	sub	sp, #20
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	3360      	adds	r3, #96	; 0x60
 80087fe:	461a      	mov	r2, r3
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	009b      	lsls	r3, r3, #2
 8008804:	4413      	add	r3, r2
 8008806:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8008810:	4618      	mov	r0, r3
 8008812:	3714      	adds	r7, #20
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800881c:	b480      	push	{r7}
 800881e:	b087      	sub	sp, #28
 8008820:	af00      	add	r7, sp, #0
 8008822:	60f8      	str	r0, [r7, #12]
 8008824:	60b9      	str	r1, [r7, #8]
 8008826:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	3360      	adds	r3, #96	; 0x60
 800882c:	461a      	mov	r2, r3
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	009b      	lsls	r3, r3, #2
 8008832:	4413      	add	r3, r2
 8008834:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	431a      	orrs	r2, r3
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8008846:	bf00      	nop
 8008848:	371c      	adds	r7, #28
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr

08008852 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8008852:	b480      	push	{r7}
 8008854:	b087      	sub	sp, #28
 8008856:	af00      	add	r7, sp, #0
 8008858:	60f8      	str	r0, [r7, #12]
 800885a:	60b9      	str	r1, [r7, #8]
 800885c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	3360      	adds	r3, #96	; 0x60
 8008862:	461a      	mov	r2, r3
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	4413      	add	r3, r2
 800886a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	431a      	orrs	r2, r3
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800887c:	bf00      	nop
 800887e:	371c      	adds	r7, #28
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8008888:	b480      	push	{r7}
 800888a:	b087      	sub	sp, #28
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	3360      	adds	r3, #96	; 0x60
 8008898:	461a      	mov	r2, r3
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	4413      	add	r3, r2
 80088a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	431a      	orrs	r2, r3
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80088b2:	bf00      	nop
 80088b4:	371c      	adds	r7, #28
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr

080088be <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80088be:	b480      	push	{r7}
 80088c0:	b083      	sub	sp, #12
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
 80088c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	695b      	ldr	r3, [r3, #20]
 80088cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	431a      	orrs	r2, r3
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	615a      	str	r2, [r3, #20]
}
 80088d8:	bf00      	nop
 80088da:	370c      	adds	r7, #12
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr

080088e4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d101      	bne.n	80088fc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80088f8:	2301      	movs	r3, #1
 80088fa:	e000      	b.n	80088fe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80088fc:	2300      	movs	r3, #0
}
 80088fe:	4618      	mov	r0, r3
 8008900:	370c      	adds	r7, #12
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr

0800890a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800890a:	b480      	push	{r7}
 800890c:	b087      	sub	sp, #28
 800890e:	af00      	add	r7, sp, #0
 8008910:	60f8      	str	r0, [r7, #12]
 8008912:	60b9      	str	r1, [r7, #8]
 8008914:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	3330      	adds	r3, #48	; 0x30
 800891a:	461a      	mov	r2, r3
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	0a1b      	lsrs	r3, r3, #8
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	f003 030c 	and.w	r3, r3, #12
 8008926:	4413      	add	r3, r2
 8008928:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	681a      	ldr	r2, [r3, #0]
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	f003 031f 	and.w	r3, r3, #31
 8008934:	211f      	movs	r1, #31
 8008936:	fa01 f303 	lsl.w	r3, r1, r3
 800893a:	43db      	mvns	r3, r3
 800893c:	401a      	ands	r2, r3
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	0e9b      	lsrs	r3, r3, #26
 8008942:	f003 011f 	and.w	r1, r3, #31
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	f003 031f 	and.w	r3, r3, #31
 800894c:	fa01 f303 	lsl.w	r3, r1, r3
 8008950:	431a      	orrs	r2, r3
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8008956:	bf00      	nop
 8008958:	371c      	adds	r7, #28
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr

08008962 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8008962:	b480      	push	{r7}
 8008964:	b087      	sub	sp, #28
 8008966:	af00      	add	r7, sp, #0
 8008968:	60f8      	str	r0, [r7, #12]
 800896a:	60b9      	str	r1, [r7, #8]
 800896c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	3314      	adds	r3, #20
 8008972:	461a      	mov	r2, r3
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	0e5b      	lsrs	r3, r3, #25
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	f003 0304 	and.w	r3, r3, #4
 800897e:	4413      	add	r3, r2
 8008980:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	0d1b      	lsrs	r3, r3, #20
 800898a:	f003 031f 	and.w	r3, r3, #31
 800898e:	2107      	movs	r1, #7
 8008990:	fa01 f303 	lsl.w	r3, r1, r3
 8008994:	43db      	mvns	r3, r3
 8008996:	401a      	ands	r2, r3
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	0d1b      	lsrs	r3, r3, #20
 800899c:	f003 031f 	and.w	r3, r3, #31
 80089a0:	6879      	ldr	r1, [r7, #4]
 80089a2:	fa01 f303 	lsl.w	r3, r1, r3
 80089a6:	431a      	orrs	r2, r3
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80089ac:	bf00      	nop
 80089ae:	371c      	adds	r7, #28
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr

080089b8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b085      	sub	sp, #20
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	4a0f      	ldr	r2, [pc, #60]	; (8008a04 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d10a      	bne.n	80089e2 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089d8:	431a      	orrs	r2, r3
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80089e0:	e00a      	b.n	80089f8 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089ee:	43db      	mvns	r3, r3
 80089f0:	401a      	ands	r2, r3
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80089f8:	bf00      	nop
 80089fa:	3714      	adds	r7, #20
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr
 8008a04:	407f0000 	.word	0x407f0000

08008a08 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b083      	sub	sp, #12
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	f003 031f 	and.w	r3, r3, #31
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	370c      	adds	r7, #12
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8008a34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	6093      	str	r3, [r2, #8]
}
 8008a3c:	bf00      	nop
 8008a3e:	370c      	adds	r7, #12
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a5c:	d101      	bne.n	8008a62 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e000      	b.n	8008a64 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8008a62:	2300      	movs	r3, #0
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	370c      	adds	r7, #12
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b083      	sub	sp, #12
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8008a80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008a84:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8008a8c:	bf00      	nop
 8008a8e:	370c      	adds	r7, #12
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b083      	sub	sp, #12
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008aa8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008aac:	d101      	bne.n	8008ab2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8008aae:	2301      	movs	r3, #1
 8008ab0:	e000      	b.n	8008ab4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	370c      	adds	r7, #12
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr

08008ac0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b083      	sub	sp, #12
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ad0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008ad4:	f043 0201 	orr.w	r2, r3, #1
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8008adc:	bf00      	nop
 8008ade:	370c      	adds	r7, #12
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	f003 0301 	and.w	r3, r3, #1
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d101      	bne.n	8008b00 <LL_ADC_IsEnabled+0x18>
 8008afc:	2301      	movs	r3, #1
 8008afe:	e000      	b.n	8008b02 <LL_ADC_IsEnabled+0x1a>
 8008b00:	2300      	movs	r3, #0
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	370c      	adds	r7, #12
 8008b06:	46bd      	mov	sp, r7
 8008b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0c:	4770      	bx	lr

08008b0e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8008b0e:	b480      	push	{r7}
 8008b10:	b083      	sub	sp, #12
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b1e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008b22:	f043 0204 	orr.w	r2, r3, #4
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8008b2a:	bf00      	nop
 8008b2c:	370c      	adds	r7, #12
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr

08008b36 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8008b36:	b480      	push	{r7}
 8008b38:	b083      	sub	sp, #12
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	f003 0304 	and.w	r3, r3, #4
 8008b46:	2b04      	cmp	r3, #4
 8008b48:	d101      	bne.n	8008b4e <LL_ADC_REG_IsConversionOngoing+0x18>
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e000      	b.n	8008b50 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008b4e:	2300      	movs	r3, #0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	370c      	adds	r7, #12
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	f003 0308 	and.w	r3, r3, #8
 8008b6c:	2b08      	cmp	r3, #8
 8008b6e:	d101      	bne.n	8008b74 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008b70:	2301      	movs	r3, #1
 8008b72:	e000      	b.n	8008b76 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8008b74:	2300      	movs	r3, #0
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	370c      	adds	r7, #12
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr
	...

08008b84 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008b84:	b590      	push	{r4, r7, lr}
 8008b86:	b089      	sub	sp, #36	; 0x24
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8008b90:	2300      	movs	r3, #0
 8008b92:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d101      	bne.n	8008b9e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e1af      	b.n	8008efe <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	695b      	ldr	r3, [r3, #20]
 8008ba2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d109      	bne.n	8008bc0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f7fc fa11 	bl	8004fd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f7ff ff3f 	bl	8008a48 <LL_ADC_IsDeepPowerDownEnabled>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d004      	beq.n	8008bda <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f7ff ff25 	bl	8008a24 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7ff ff5a 	bl	8008a98 <LL_ADC_IsInternalRegulatorEnabled>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d115      	bne.n	8008c16 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7ff ff3e 	bl	8008a70 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008bf4:	4b9f      	ldr	r3, [pc, #636]	; (8008e74 <HAL_ADC_Init+0x2f0>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	099b      	lsrs	r3, r3, #6
 8008bfa:	4a9f      	ldr	r2, [pc, #636]	; (8008e78 <HAL_ADC_Init+0x2f4>)
 8008bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8008c00:	099b      	lsrs	r3, r3, #6
 8008c02:	3301      	adds	r3, #1
 8008c04:	005b      	lsls	r3, r3, #1
 8008c06:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008c08:	e002      	b.n	8008c10 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	3b01      	subs	r3, #1
 8008c0e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d1f9      	bne.n	8008c0a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f7ff ff3c 	bl	8008a98 <LL_ADC_IsInternalRegulatorEnabled>
 8008c20:	4603      	mov	r3, r0
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d10d      	bne.n	8008c42 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c2a:	f043 0210 	orr.w	r2, r3, #16
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c36:	f043 0201 	orr.w	r2, r3, #1
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7ff ff75 	bl	8008b36 <LL_ADC_REG_IsConversionOngoing>
 8008c4c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c52:	f003 0310 	and.w	r3, r3, #16
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	f040 8148 	bne.w	8008eec <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	f040 8144 	bne.w	8008eec <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c68:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8008c6c:	f043 0202 	orr.w	r2, r3, #2
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f7ff ff35 	bl	8008ae8 <LL_ADC_IsEnabled>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d141      	bne.n	8008d08 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c8c:	d004      	beq.n	8008c98 <HAL_ADC_Init+0x114>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a7a      	ldr	r2, [pc, #488]	; (8008e7c <HAL_ADC_Init+0x2f8>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d10f      	bne.n	8008cb8 <HAL_ADC_Init+0x134>
 8008c98:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008c9c:	f7ff ff24 	bl	8008ae8 <LL_ADC_IsEnabled>
 8008ca0:	4604      	mov	r4, r0
 8008ca2:	4876      	ldr	r0, [pc, #472]	; (8008e7c <HAL_ADC_Init+0x2f8>)
 8008ca4:	f7ff ff20 	bl	8008ae8 <LL_ADC_IsEnabled>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	4323      	orrs	r3, r4
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	bf0c      	ite	eq
 8008cb0:	2301      	moveq	r3, #1
 8008cb2:	2300      	movne	r3, #0
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	e012      	b.n	8008cde <HAL_ADC_Init+0x15a>
 8008cb8:	4871      	ldr	r0, [pc, #452]	; (8008e80 <HAL_ADC_Init+0x2fc>)
 8008cba:	f7ff ff15 	bl	8008ae8 <LL_ADC_IsEnabled>
 8008cbe:	4604      	mov	r4, r0
 8008cc0:	4870      	ldr	r0, [pc, #448]	; (8008e84 <HAL_ADC_Init+0x300>)
 8008cc2:	f7ff ff11 	bl	8008ae8 <LL_ADC_IsEnabled>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	431c      	orrs	r4, r3
 8008cca:	486f      	ldr	r0, [pc, #444]	; (8008e88 <HAL_ADC_Init+0x304>)
 8008ccc:	f7ff ff0c 	bl	8008ae8 <LL_ADC_IsEnabled>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	4323      	orrs	r3, r4
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	bf0c      	ite	eq
 8008cd8:	2301      	moveq	r3, #1
 8008cda:	2300      	movne	r3, #0
 8008cdc:	b2db      	uxtb	r3, r3
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d012      	beq.n	8008d08 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008cea:	d004      	beq.n	8008cf6 <HAL_ADC_Init+0x172>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a62      	ldr	r2, [pc, #392]	; (8008e7c <HAL_ADC_Init+0x2f8>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d101      	bne.n	8008cfa <HAL_ADC_Init+0x176>
 8008cf6:	4a65      	ldr	r2, [pc, #404]	; (8008e8c <HAL_ADC_Init+0x308>)
 8008cf8:	e000      	b.n	8008cfc <HAL_ADC_Init+0x178>
 8008cfa:	4a65      	ldr	r2, [pc, #404]	; (8008e90 <HAL_ADC_Init+0x30c>)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	4619      	mov	r1, r3
 8008d02:	4610      	mov	r0, r2
 8008d04:	f7ff fd1c 	bl	8008740 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	7f5b      	ldrb	r3, [r3, #29]
 8008d0c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008d12:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8008d18:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8008d1e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008d26:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d106      	bne.n	8008d44 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d3a:	3b01      	subs	r3, #1
 8008d3c:	045b      	lsls	r3, r3, #17
 8008d3e:	69ba      	ldr	r2, [r7, #24]
 8008d40:	4313      	orrs	r3, r2
 8008d42:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d009      	beq.n	8008d60 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d50:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d58:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008d5a:	69ba      	ldr	r2, [r7, #24]
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	68da      	ldr	r2, [r3, #12]
 8008d66:	4b4b      	ldr	r3, [pc, #300]	; (8008e94 <HAL_ADC_Init+0x310>)
 8008d68:	4013      	ands	r3, r2
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	6812      	ldr	r2, [r2, #0]
 8008d6e:	69b9      	ldr	r1, [r7, #24]
 8008d70:	430b      	orrs	r3, r1
 8008d72:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	691b      	ldr	r3, [r3, #16]
 8008d7a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	430a      	orrs	r2, r1
 8008d88:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7ff fed1 	bl	8008b36 <LL_ADC_REG_IsConversionOngoing>
 8008d94:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7ff fede 	bl	8008b5c <LL_ADC_INJ_IsConversionOngoing>
 8008da0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d17f      	bne.n	8008ea8 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d17c      	bne.n	8008ea8 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008db2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008dba:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	68db      	ldr	r3, [r3, #12]
 8008dc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008dca:	f023 0302 	bic.w	r3, r3, #2
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	6812      	ldr	r2, [r2, #0]
 8008dd2:	69b9      	ldr	r1, [r7, #24]
 8008dd4:	430b      	orrs	r3, r1
 8008dd6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	691b      	ldr	r3, [r3, #16]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d017      	beq.n	8008e10 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	691a      	ldr	r2, [r3, #16]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008dee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008df8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008dfc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	6911      	ldr	r1, [r2, #16]
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	6812      	ldr	r2, [r2, #0]
 8008e08:	430b      	orrs	r3, r1
 8008e0a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8008e0e:	e013      	b.n	8008e38 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	691a      	ldr	r2, [r3, #16]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008e1e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	6812      	ldr	r2, [r2, #0]
 8008e2c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008e30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008e34:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d12a      	bne.n	8008e98 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	691b      	ldr	r3, [r3, #16]
 8008e48:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008e4c:	f023 0304 	bic.w	r3, r3, #4
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8008e54:	687a      	ldr	r2, [r7, #4]
 8008e56:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008e58:	4311      	orrs	r1, r2
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008e5e:	4311      	orrs	r1, r2
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008e64:	430a      	orrs	r2, r1
 8008e66:	431a      	orrs	r2, r3
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f042 0201 	orr.w	r2, r2, #1
 8008e70:	611a      	str	r2, [r3, #16]
 8008e72:	e019      	b.n	8008ea8 <HAL_ADC_Init+0x324>
 8008e74:	20000004 	.word	0x20000004
 8008e78:	053e2d63 	.word	0x053e2d63
 8008e7c:	50000100 	.word	0x50000100
 8008e80:	50000400 	.word	0x50000400
 8008e84:	50000500 	.word	0x50000500
 8008e88:	50000600 	.word	0x50000600
 8008e8c:	50000300 	.word	0x50000300
 8008e90:	50000700 	.word	0x50000700
 8008e94:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	691a      	ldr	r2, [r3, #16]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f022 0201 	bic.w	r2, r2, #1
 8008ea6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	695b      	ldr	r3, [r3, #20]
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d10c      	bne.n	8008eca <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eb6:	f023 010f 	bic.w	r1, r3, #15
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6a1b      	ldr	r3, [r3, #32]
 8008ebe:	1e5a      	subs	r2, r3, #1
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	430a      	orrs	r2, r1
 8008ec6:	631a      	str	r2, [r3, #48]	; 0x30
 8008ec8:	e007      	b.n	8008eda <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f022 020f 	bic.w	r2, r2, #15
 8008ed8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ede:	f023 0303 	bic.w	r3, r3, #3
 8008ee2:	f043 0201 	orr.w	r2, r3, #1
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	65da      	str	r2, [r3, #92]	; 0x5c
 8008eea:	e007      	b.n	8008efc <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ef0:	f043 0210 	orr.w	r2, r3, #16
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8008efc:	7ffb      	ldrb	r3, [r7, #31]
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3724      	adds	r7, #36	; 0x24
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd90      	pop	{r4, r7, pc}
 8008f06:	bf00      	nop

08008f08 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b086      	sub	sp, #24
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	60b9      	str	r1, [r7, #8]
 8008f12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f1c:	d004      	beq.n	8008f28 <HAL_ADC_Start_DMA+0x20>
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a5a      	ldr	r2, [pc, #360]	; (800908c <HAL_ADC_Start_DMA+0x184>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d101      	bne.n	8008f2c <HAL_ADC_Start_DMA+0x24>
 8008f28:	4b59      	ldr	r3, [pc, #356]	; (8009090 <HAL_ADC_Start_DMA+0x188>)
 8008f2a:	e000      	b.n	8008f2e <HAL_ADC_Start_DMA+0x26>
 8008f2c:	4b59      	ldr	r3, [pc, #356]	; (8009094 <HAL_ADC_Start_DMA+0x18c>)
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7ff fd6a 	bl	8008a08 <LL_ADC_GetMultimode>
 8008f34:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f7ff fdfb 	bl	8008b36 <LL_ADC_REG_IsConversionOngoing>
 8008f40:	4603      	mov	r3, r0
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	f040 809b 	bne.w	800907e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d101      	bne.n	8008f56 <HAL_ADC_Start_DMA+0x4e>
 8008f52:	2302      	movs	r3, #2
 8008f54:	e096      	b.n	8009084 <HAL_ADC_Start_DMA+0x17c>
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2201      	movs	r2, #1
 8008f5a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a4d      	ldr	r2, [pc, #308]	; (8009098 <HAL_ADC_Start_DMA+0x190>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d008      	beq.n	8008f7a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d005      	beq.n	8008f7a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	2b05      	cmp	r3, #5
 8008f72:	d002      	beq.n	8008f7a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	2b09      	cmp	r3, #9
 8008f78:	d17a      	bne.n	8009070 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8008f7a:	68f8      	ldr	r0, [r7, #12]
 8008f7c:	f000 fcf6 	bl	800996c <ADC_Enable>
 8008f80:	4603      	mov	r3, r0
 8008f82:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8008f84:	7dfb      	ldrb	r3, [r7, #23]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d16d      	bne.n	8009066 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f8e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008f92:	f023 0301 	bic.w	r3, r3, #1
 8008f96:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a3a      	ldr	r2, [pc, #232]	; (800908c <HAL_ADC_Start_DMA+0x184>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d009      	beq.n	8008fbc <HAL_ADC_Start_DMA+0xb4>
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a3b      	ldr	r2, [pc, #236]	; (800909c <HAL_ADC_Start_DMA+0x194>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d002      	beq.n	8008fb8 <HAL_ADC_Start_DMA+0xb0>
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	e003      	b.n	8008fc0 <HAL_ADC_Start_DMA+0xb8>
 8008fb8:	4b39      	ldr	r3, [pc, #228]	; (80090a0 <HAL_ADC_Start_DMA+0x198>)
 8008fba:	e001      	b.n	8008fc0 <HAL_ADC_Start_DMA+0xb8>
 8008fbc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8008fc0:	68fa      	ldr	r2, [r7, #12]
 8008fc2:	6812      	ldr	r2, [r2, #0]
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d002      	beq.n	8008fce <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d105      	bne.n	8008fda <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fd2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d006      	beq.n	8008ff4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fea:	f023 0206 	bic.w	r2, r3, #6
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	661a      	str	r2, [r3, #96]	; 0x60
 8008ff2:	e002      	b.n	8008ffa <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ffe:	4a29      	ldr	r2, [pc, #164]	; (80090a4 <HAL_ADC_Start_DMA+0x19c>)
 8009000:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009006:	4a28      	ldr	r2, [pc, #160]	; (80090a8 <HAL_ADC_Start_DMA+0x1a0>)
 8009008:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800900e:	4a27      	ldr	r2, [pc, #156]	; (80090ac <HAL_ADC_Start_DMA+0x1a4>)
 8009010:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	221c      	movs	r2, #28
 8009018:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2200      	movs	r2, #0
 800901e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	685a      	ldr	r2, [r3, #4]
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f042 0210 	orr.w	r2, r2, #16
 8009030:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	68da      	ldr	r2, [r3, #12]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f042 0201 	orr.w	r2, r2, #1
 8009040:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	3340      	adds	r3, #64	; 0x40
 800904c:	4619      	mov	r1, r3
 800904e:	68ba      	ldr	r2, [r7, #8]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f000 ff09 	bl	8009e68 <HAL_DMA_Start_IT>
 8009056:	4603      	mov	r3, r0
 8009058:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4618      	mov	r0, r3
 8009060:	f7ff fd55 	bl	8008b0e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8009064:	e00d      	b.n	8009082 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2200      	movs	r2, #0
 800906a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800906e:	e008      	b.n	8009082 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8009070:	2301      	movs	r3, #1
 8009072:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2200      	movs	r2, #0
 8009078:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800907c:	e001      	b.n	8009082 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800907e:	2302      	movs	r3, #2
 8009080:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8009082:	7dfb      	ldrb	r3, [r7, #23]
}
 8009084:	4618      	mov	r0, r3
 8009086:	3718      	adds	r7, #24
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}
 800908c:	50000100 	.word	0x50000100
 8009090:	50000300 	.word	0x50000300
 8009094:	50000700 	.word	0x50000700
 8009098:	50000600 	.word	0x50000600
 800909c:	50000500 	.word	0x50000500
 80090a0:	50000400 	.word	0x50000400
 80090a4:	08009a31 	.word	0x08009a31
 80090a8:	08009b09 	.word	0x08009b09
 80090ac:	08009b25 	.word	0x08009b25

080090b0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80090b8:	bf00      	nop
 80090ba:	370c      	adds	r7, #12
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr

080090c4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b083      	sub	sp, #12
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80090cc:	bf00      	nop
 80090ce:	370c      	adds	r7, #12
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr

080090d8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80090d8:	b480      	push	{r7}
 80090da:	b083      	sub	sp, #12
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80090e0:	bf00      	nop
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b0b6      	sub	sp, #216	; 0xd8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80090f6:	2300      	movs	r3, #0
 80090f8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80090fc:	2300      	movs	r3, #0
 80090fe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009106:	2b01      	cmp	r3, #1
 8009108:	d102      	bne.n	8009110 <HAL_ADC_ConfigChannel+0x24>
 800910a:	2302      	movs	r3, #2
 800910c:	f000 bc13 	b.w	8009936 <HAL_ADC_ConfigChannel+0x84a>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2201      	movs	r2, #1
 8009114:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4618      	mov	r0, r3
 800911e:	f7ff fd0a 	bl	8008b36 <LL_ADC_REG_IsConversionOngoing>
 8009122:	4603      	mov	r3, r0
 8009124:	2b00      	cmp	r3, #0
 8009126:	f040 83f3 	bne.w	8009910 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6818      	ldr	r0, [r3, #0]
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	6859      	ldr	r1, [r3, #4]
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	461a      	mov	r2, r3
 8009138:	f7ff fbe7 	bl	800890a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4618      	mov	r0, r3
 8009142:	f7ff fcf8 	bl	8008b36 <LL_ADC_REG_IsConversionOngoing>
 8009146:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4618      	mov	r0, r3
 8009150:	f7ff fd04 	bl	8008b5c <LL_ADC_INJ_IsConversionOngoing>
 8009154:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009158:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800915c:	2b00      	cmp	r3, #0
 800915e:	f040 81d9 	bne.w	8009514 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009162:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009166:	2b00      	cmp	r3, #0
 8009168:	f040 81d4 	bne.w	8009514 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009174:	d10f      	bne.n	8009196 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6818      	ldr	r0, [r3, #0]
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	2200      	movs	r2, #0
 8009180:	4619      	mov	r1, r3
 8009182:	f7ff fbee 	bl	8008962 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800918e:	4618      	mov	r0, r3
 8009190:	f7ff fb95 	bl	80088be <LL_ADC_SetSamplingTimeCommonConfig>
 8009194:	e00e      	b.n	80091b4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6818      	ldr	r0, [r3, #0]
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	6819      	ldr	r1, [r3, #0]
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	461a      	mov	r2, r3
 80091a4:	f7ff fbdd 	bl	8008962 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	2100      	movs	r1, #0
 80091ae:	4618      	mov	r0, r3
 80091b0:	f7ff fb85 	bl	80088be <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	695a      	ldr	r2, [r3, #20]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	68db      	ldr	r3, [r3, #12]
 80091be:	08db      	lsrs	r3, r3, #3
 80091c0:	f003 0303 	and.w	r3, r3, #3
 80091c4:	005b      	lsls	r3, r3, #1
 80091c6:	fa02 f303 	lsl.w	r3, r2, r3
 80091ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	691b      	ldr	r3, [r3, #16]
 80091d2:	2b04      	cmp	r3, #4
 80091d4:	d022      	beq.n	800921c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6818      	ldr	r0, [r3, #0]
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	6919      	ldr	r1, [r3, #16]
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80091e6:	f7ff fadf 	bl	80087a8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6818      	ldr	r0, [r3, #0]
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	6919      	ldr	r1, [r3, #16]
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	699b      	ldr	r3, [r3, #24]
 80091f6:	461a      	mov	r2, r3
 80091f8:	f7ff fb2b 	bl	8008852 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6818      	ldr	r0, [r3, #0]
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	6919      	ldr	r1, [r3, #16]
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	7f1b      	ldrb	r3, [r3, #28]
 8009208:	2b01      	cmp	r3, #1
 800920a:	d102      	bne.n	8009212 <HAL_ADC_ConfigChannel+0x126>
 800920c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009210:	e000      	b.n	8009214 <HAL_ADC_ConfigChannel+0x128>
 8009212:	2300      	movs	r3, #0
 8009214:	461a      	mov	r2, r3
 8009216:	f7ff fb37 	bl	8008888 <LL_ADC_SetOffsetSaturation>
 800921a:	e17b      	b.n	8009514 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	2100      	movs	r1, #0
 8009222:	4618      	mov	r0, r3
 8009224:	f7ff fae4 	bl	80087f0 <LL_ADC_GetOffsetChannel>
 8009228:	4603      	mov	r3, r0
 800922a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800922e:	2b00      	cmp	r3, #0
 8009230:	d10a      	bne.n	8009248 <HAL_ADC_ConfigChannel+0x15c>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	2100      	movs	r1, #0
 8009238:	4618      	mov	r0, r3
 800923a:	f7ff fad9 	bl	80087f0 <LL_ADC_GetOffsetChannel>
 800923e:	4603      	mov	r3, r0
 8009240:	0e9b      	lsrs	r3, r3, #26
 8009242:	f003 021f 	and.w	r2, r3, #31
 8009246:	e01e      	b.n	8009286 <HAL_ADC_ConfigChannel+0x19a>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	2100      	movs	r1, #0
 800924e:	4618      	mov	r0, r3
 8009250:	f7ff face 	bl	80087f0 <LL_ADC_GetOffsetChannel>
 8009254:	4603      	mov	r3, r0
 8009256:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800925a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800925e:	fa93 f3a3 	rbit	r3, r3
 8009262:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8009266:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800926a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800926e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009272:	2b00      	cmp	r3, #0
 8009274:	d101      	bne.n	800927a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8009276:	2320      	movs	r3, #32
 8009278:	e004      	b.n	8009284 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800927a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800927e:	fab3 f383 	clz	r3, r3
 8009282:	b2db      	uxtb	r3, r3
 8009284:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800928e:	2b00      	cmp	r3, #0
 8009290:	d105      	bne.n	800929e <HAL_ADC_ConfigChannel+0x1b2>
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	0e9b      	lsrs	r3, r3, #26
 8009298:	f003 031f 	and.w	r3, r3, #31
 800929c:	e018      	b.n	80092d0 <HAL_ADC_ConfigChannel+0x1e4>
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80092aa:	fa93 f3a3 	rbit	r3, r3
 80092ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80092b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80092b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80092ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d101      	bne.n	80092c6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80092c2:	2320      	movs	r3, #32
 80092c4:	e004      	b.n	80092d0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80092c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80092ca:	fab3 f383 	clz	r3, r3
 80092ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d106      	bne.n	80092e2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2200      	movs	r2, #0
 80092da:	2100      	movs	r1, #0
 80092dc:	4618      	mov	r0, r3
 80092de:	f7ff fa9d 	bl	800881c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	2101      	movs	r1, #1
 80092e8:	4618      	mov	r0, r3
 80092ea:	f7ff fa81 	bl	80087f0 <LL_ADC_GetOffsetChannel>
 80092ee:	4603      	mov	r3, r0
 80092f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d10a      	bne.n	800930e <HAL_ADC_ConfigChannel+0x222>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2101      	movs	r1, #1
 80092fe:	4618      	mov	r0, r3
 8009300:	f7ff fa76 	bl	80087f0 <LL_ADC_GetOffsetChannel>
 8009304:	4603      	mov	r3, r0
 8009306:	0e9b      	lsrs	r3, r3, #26
 8009308:	f003 021f 	and.w	r2, r3, #31
 800930c:	e01e      	b.n	800934c <HAL_ADC_ConfigChannel+0x260>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	2101      	movs	r1, #1
 8009314:	4618      	mov	r0, r3
 8009316:	f7ff fa6b 	bl	80087f0 <LL_ADC_GetOffsetChannel>
 800931a:	4603      	mov	r3, r0
 800931c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009320:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009324:	fa93 f3a3 	rbit	r3, r3
 8009328:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800932c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009330:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8009334:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009338:	2b00      	cmp	r3, #0
 800933a:	d101      	bne.n	8009340 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800933c:	2320      	movs	r3, #32
 800933e:	e004      	b.n	800934a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8009340:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009344:	fab3 f383 	clz	r3, r3
 8009348:	b2db      	uxtb	r3, r3
 800934a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009354:	2b00      	cmp	r3, #0
 8009356:	d105      	bne.n	8009364 <HAL_ADC_ConfigChannel+0x278>
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	0e9b      	lsrs	r3, r3, #26
 800935e:	f003 031f 	and.w	r3, r3, #31
 8009362:	e018      	b.n	8009396 <HAL_ADC_ConfigChannel+0x2aa>
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800936c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009370:	fa93 f3a3 	rbit	r3, r3
 8009374:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8009378:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800937c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8009380:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009384:	2b00      	cmp	r3, #0
 8009386:	d101      	bne.n	800938c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8009388:	2320      	movs	r3, #32
 800938a:	e004      	b.n	8009396 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800938c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009390:	fab3 f383 	clz	r3, r3
 8009394:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8009396:	429a      	cmp	r2, r3
 8009398:	d106      	bne.n	80093a8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	2200      	movs	r2, #0
 80093a0:	2101      	movs	r1, #1
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7ff fa3a 	bl	800881c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	2102      	movs	r1, #2
 80093ae:	4618      	mov	r0, r3
 80093b0:	f7ff fa1e 	bl	80087f0 <LL_ADC_GetOffsetChannel>
 80093b4:	4603      	mov	r3, r0
 80093b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d10a      	bne.n	80093d4 <HAL_ADC_ConfigChannel+0x2e8>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	2102      	movs	r1, #2
 80093c4:	4618      	mov	r0, r3
 80093c6:	f7ff fa13 	bl	80087f0 <LL_ADC_GetOffsetChannel>
 80093ca:	4603      	mov	r3, r0
 80093cc:	0e9b      	lsrs	r3, r3, #26
 80093ce:	f003 021f 	and.w	r2, r3, #31
 80093d2:	e01e      	b.n	8009412 <HAL_ADC_ConfigChannel+0x326>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	2102      	movs	r1, #2
 80093da:	4618      	mov	r0, r3
 80093dc:	f7ff fa08 	bl	80087f0 <LL_ADC_GetOffsetChannel>
 80093e0:	4603      	mov	r3, r0
 80093e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80093ea:	fa93 f3a3 	rbit	r3, r3
 80093ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80093f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80093f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80093fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d101      	bne.n	8009406 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8009402:	2320      	movs	r3, #32
 8009404:	e004      	b.n	8009410 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8009406:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800940a:	fab3 f383 	clz	r3, r3
 800940e:	b2db      	uxtb	r3, r3
 8009410:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800941a:	2b00      	cmp	r3, #0
 800941c:	d105      	bne.n	800942a <HAL_ADC_ConfigChannel+0x33e>
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	0e9b      	lsrs	r3, r3, #26
 8009424:	f003 031f 	and.w	r3, r3, #31
 8009428:	e016      	b.n	8009458 <HAL_ADC_ConfigChannel+0x36c>
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009432:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009436:	fa93 f3a3 	rbit	r3, r3
 800943a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800943c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800943e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8009442:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009446:	2b00      	cmp	r3, #0
 8009448:	d101      	bne.n	800944e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800944a:	2320      	movs	r3, #32
 800944c:	e004      	b.n	8009458 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800944e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009452:	fab3 f383 	clz	r3, r3
 8009456:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8009458:	429a      	cmp	r2, r3
 800945a:	d106      	bne.n	800946a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2200      	movs	r2, #0
 8009462:	2102      	movs	r1, #2
 8009464:	4618      	mov	r0, r3
 8009466:	f7ff f9d9 	bl	800881c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	2103      	movs	r1, #3
 8009470:	4618      	mov	r0, r3
 8009472:	f7ff f9bd 	bl	80087f0 <LL_ADC_GetOffsetChannel>
 8009476:	4603      	mov	r3, r0
 8009478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800947c:	2b00      	cmp	r3, #0
 800947e:	d10a      	bne.n	8009496 <HAL_ADC_ConfigChannel+0x3aa>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	2103      	movs	r1, #3
 8009486:	4618      	mov	r0, r3
 8009488:	f7ff f9b2 	bl	80087f0 <LL_ADC_GetOffsetChannel>
 800948c:	4603      	mov	r3, r0
 800948e:	0e9b      	lsrs	r3, r3, #26
 8009490:	f003 021f 	and.w	r2, r3, #31
 8009494:	e017      	b.n	80094c6 <HAL_ADC_ConfigChannel+0x3da>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	2103      	movs	r1, #3
 800949c:	4618      	mov	r0, r3
 800949e:	f7ff f9a7 	bl	80087f0 <LL_ADC_GetOffsetChannel>
 80094a2:	4603      	mov	r3, r0
 80094a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094a8:	fa93 f3a3 	rbit	r3, r3
 80094ac:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80094ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80094b0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80094b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d101      	bne.n	80094bc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80094b8:	2320      	movs	r3, #32
 80094ba:	e003      	b.n	80094c4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80094bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094be:	fab3 f383 	clz	r3, r3
 80094c2:	b2db      	uxtb	r3, r3
 80094c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d105      	bne.n	80094de <HAL_ADC_ConfigChannel+0x3f2>
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	0e9b      	lsrs	r3, r3, #26
 80094d8:	f003 031f 	and.w	r3, r3, #31
 80094dc:	e011      	b.n	8009502 <HAL_ADC_ConfigChannel+0x416>
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80094e6:	fa93 f3a3 	rbit	r3, r3
 80094ea:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80094ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80094ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80094f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d101      	bne.n	80094fa <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80094f6:	2320      	movs	r3, #32
 80094f8:	e003      	b.n	8009502 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80094fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094fc:	fab3 f383 	clz	r3, r3
 8009500:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8009502:	429a      	cmp	r2, r3
 8009504:	d106      	bne.n	8009514 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	2200      	movs	r2, #0
 800950c:	2103      	movs	r1, #3
 800950e:	4618      	mov	r0, r3
 8009510:	f7ff f984 	bl	800881c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4618      	mov	r0, r3
 800951a:	f7ff fae5 	bl	8008ae8 <LL_ADC_IsEnabled>
 800951e:	4603      	mov	r3, r0
 8009520:	2b00      	cmp	r3, #0
 8009522:	f040 813d 	bne.w	80097a0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6818      	ldr	r0, [r3, #0]
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	6819      	ldr	r1, [r3, #0]
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	68db      	ldr	r3, [r3, #12]
 8009532:	461a      	mov	r2, r3
 8009534:	f7ff fa40 	bl	80089b8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	4aa2      	ldr	r2, [pc, #648]	; (80097c8 <HAL_ADC_ConfigChannel+0x6dc>)
 800953e:	4293      	cmp	r3, r2
 8009540:	f040 812e 	bne.w	80097a0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009550:	2b00      	cmp	r3, #0
 8009552:	d10b      	bne.n	800956c <HAL_ADC_ConfigChannel+0x480>
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	0e9b      	lsrs	r3, r3, #26
 800955a:	3301      	adds	r3, #1
 800955c:	f003 031f 	and.w	r3, r3, #31
 8009560:	2b09      	cmp	r3, #9
 8009562:	bf94      	ite	ls
 8009564:	2301      	movls	r3, #1
 8009566:	2300      	movhi	r3, #0
 8009568:	b2db      	uxtb	r3, r3
 800956a:	e019      	b.n	80095a0 <HAL_ADC_ConfigChannel+0x4b4>
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009572:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009574:	fa93 f3a3 	rbit	r3, r3
 8009578:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800957a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800957c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800957e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009580:	2b00      	cmp	r3, #0
 8009582:	d101      	bne.n	8009588 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8009584:	2320      	movs	r3, #32
 8009586:	e003      	b.n	8009590 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8009588:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800958a:	fab3 f383 	clz	r3, r3
 800958e:	b2db      	uxtb	r3, r3
 8009590:	3301      	adds	r3, #1
 8009592:	f003 031f 	and.w	r3, r3, #31
 8009596:	2b09      	cmp	r3, #9
 8009598:	bf94      	ite	ls
 800959a:	2301      	movls	r3, #1
 800959c:	2300      	movhi	r3, #0
 800959e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d079      	beq.n	8009698 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d107      	bne.n	80095c0 <HAL_ADC_ConfigChannel+0x4d4>
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	0e9b      	lsrs	r3, r3, #26
 80095b6:	3301      	adds	r3, #1
 80095b8:	069b      	lsls	r3, r3, #26
 80095ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80095be:	e015      	b.n	80095ec <HAL_ADC_ConfigChannel+0x500>
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095c8:	fa93 f3a3 	rbit	r3, r3
 80095cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80095ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095d0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80095d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d101      	bne.n	80095dc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80095d8:	2320      	movs	r3, #32
 80095da:	e003      	b.n	80095e4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80095dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095de:	fab3 f383 	clz	r3, r3
 80095e2:	b2db      	uxtb	r3, r3
 80095e4:	3301      	adds	r3, #1
 80095e6:	069b      	lsls	r3, r3, #26
 80095e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d109      	bne.n	800960c <HAL_ADC_ConfigChannel+0x520>
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	0e9b      	lsrs	r3, r3, #26
 80095fe:	3301      	adds	r3, #1
 8009600:	f003 031f 	and.w	r3, r3, #31
 8009604:	2101      	movs	r1, #1
 8009606:	fa01 f303 	lsl.w	r3, r1, r3
 800960a:	e017      	b.n	800963c <HAL_ADC_ConfigChannel+0x550>
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009612:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009614:	fa93 f3a3 	rbit	r3, r3
 8009618:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800961a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800961c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800961e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009620:	2b00      	cmp	r3, #0
 8009622:	d101      	bne.n	8009628 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8009624:	2320      	movs	r3, #32
 8009626:	e003      	b.n	8009630 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8009628:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800962a:	fab3 f383 	clz	r3, r3
 800962e:	b2db      	uxtb	r3, r3
 8009630:	3301      	adds	r3, #1
 8009632:	f003 031f 	and.w	r3, r3, #31
 8009636:	2101      	movs	r1, #1
 8009638:	fa01 f303 	lsl.w	r3, r1, r3
 800963c:	ea42 0103 	orr.w	r1, r2, r3
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009648:	2b00      	cmp	r3, #0
 800964a:	d10a      	bne.n	8009662 <HAL_ADC_ConfigChannel+0x576>
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	0e9b      	lsrs	r3, r3, #26
 8009652:	3301      	adds	r3, #1
 8009654:	f003 021f 	and.w	r2, r3, #31
 8009658:	4613      	mov	r3, r2
 800965a:	005b      	lsls	r3, r3, #1
 800965c:	4413      	add	r3, r2
 800965e:	051b      	lsls	r3, r3, #20
 8009660:	e018      	b.n	8009694 <HAL_ADC_ConfigChannel+0x5a8>
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800966a:	fa93 f3a3 	rbit	r3, r3
 800966e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8009670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009672:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8009674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009676:	2b00      	cmp	r3, #0
 8009678:	d101      	bne.n	800967e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800967a:	2320      	movs	r3, #32
 800967c:	e003      	b.n	8009686 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800967e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009680:	fab3 f383 	clz	r3, r3
 8009684:	b2db      	uxtb	r3, r3
 8009686:	3301      	adds	r3, #1
 8009688:	f003 021f 	and.w	r2, r3, #31
 800968c:	4613      	mov	r3, r2
 800968e:	005b      	lsls	r3, r3, #1
 8009690:	4413      	add	r3, r2
 8009692:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009694:	430b      	orrs	r3, r1
 8009696:	e07e      	b.n	8009796 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d107      	bne.n	80096b4 <HAL_ADC_ConfigChannel+0x5c8>
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	0e9b      	lsrs	r3, r3, #26
 80096aa:	3301      	adds	r3, #1
 80096ac:	069b      	lsls	r3, r3, #26
 80096ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80096b2:	e015      	b.n	80096e0 <HAL_ADC_ConfigChannel+0x5f4>
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096bc:	fa93 f3a3 	rbit	r3, r3
 80096c0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80096c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80096c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d101      	bne.n	80096d0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80096cc:	2320      	movs	r3, #32
 80096ce:	e003      	b.n	80096d8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80096d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d2:	fab3 f383 	clz	r3, r3
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	3301      	adds	r3, #1
 80096da:	069b      	lsls	r3, r3, #26
 80096dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d109      	bne.n	8009700 <HAL_ADC_ConfigChannel+0x614>
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	0e9b      	lsrs	r3, r3, #26
 80096f2:	3301      	adds	r3, #1
 80096f4:	f003 031f 	and.w	r3, r3, #31
 80096f8:	2101      	movs	r1, #1
 80096fa:	fa01 f303 	lsl.w	r3, r1, r3
 80096fe:	e017      	b.n	8009730 <HAL_ADC_ConfigChannel+0x644>
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009706:	6a3b      	ldr	r3, [r7, #32]
 8009708:	fa93 f3a3 	rbit	r3, r3
 800970c:	61fb      	str	r3, [r7, #28]
  return result;
 800970e:	69fb      	ldr	r3, [r7, #28]
 8009710:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009714:	2b00      	cmp	r3, #0
 8009716:	d101      	bne.n	800971c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8009718:	2320      	movs	r3, #32
 800971a:	e003      	b.n	8009724 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800971c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800971e:	fab3 f383 	clz	r3, r3
 8009722:	b2db      	uxtb	r3, r3
 8009724:	3301      	adds	r3, #1
 8009726:	f003 031f 	and.w	r3, r3, #31
 800972a:	2101      	movs	r1, #1
 800972c:	fa01 f303 	lsl.w	r3, r1, r3
 8009730:	ea42 0103 	orr.w	r1, r2, r3
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800973c:	2b00      	cmp	r3, #0
 800973e:	d10d      	bne.n	800975c <HAL_ADC_ConfigChannel+0x670>
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	0e9b      	lsrs	r3, r3, #26
 8009746:	3301      	adds	r3, #1
 8009748:	f003 021f 	and.w	r2, r3, #31
 800974c:	4613      	mov	r3, r2
 800974e:	005b      	lsls	r3, r3, #1
 8009750:	4413      	add	r3, r2
 8009752:	3b1e      	subs	r3, #30
 8009754:	051b      	lsls	r3, r3, #20
 8009756:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800975a:	e01b      	b.n	8009794 <HAL_ADC_ConfigChannel+0x6a8>
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	fa93 f3a3 	rbit	r3, r3
 8009768:	613b      	str	r3, [r7, #16]
  return result;
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800976e:	69bb      	ldr	r3, [r7, #24]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d101      	bne.n	8009778 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8009774:	2320      	movs	r3, #32
 8009776:	e003      	b.n	8009780 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8009778:	69bb      	ldr	r3, [r7, #24]
 800977a:	fab3 f383 	clz	r3, r3
 800977e:	b2db      	uxtb	r3, r3
 8009780:	3301      	adds	r3, #1
 8009782:	f003 021f 	and.w	r2, r3, #31
 8009786:	4613      	mov	r3, r2
 8009788:	005b      	lsls	r3, r3, #1
 800978a:	4413      	add	r3, r2
 800978c:	3b1e      	subs	r3, #30
 800978e:	051b      	lsls	r3, r3, #20
 8009790:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009794:	430b      	orrs	r3, r1
 8009796:	683a      	ldr	r2, [r7, #0]
 8009798:	6892      	ldr	r2, [r2, #8]
 800979a:	4619      	mov	r1, r3
 800979c:	f7ff f8e1 	bl	8008962 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	4b09      	ldr	r3, [pc, #36]	; (80097cc <HAL_ADC_ConfigChannel+0x6e0>)
 80097a6:	4013      	ands	r3, r2
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	f000 80be 	beq.w	800992a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097b6:	d004      	beq.n	80097c2 <HAL_ADC_ConfigChannel+0x6d6>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a04      	ldr	r2, [pc, #16]	; (80097d0 <HAL_ADC_ConfigChannel+0x6e4>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d10a      	bne.n	80097d8 <HAL_ADC_ConfigChannel+0x6ec>
 80097c2:	4b04      	ldr	r3, [pc, #16]	; (80097d4 <HAL_ADC_ConfigChannel+0x6e8>)
 80097c4:	e009      	b.n	80097da <HAL_ADC_ConfigChannel+0x6ee>
 80097c6:	bf00      	nop
 80097c8:	407f0000 	.word	0x407f0000
 80097cc:	80080000 	.word	0x80080000
 80097d0:	50000100 	.word	0x50000100
 80097d4:	50000300 	.word	0x50000300
 80097d8:	4b59      	ldr	r3, [pc, #356]	; (8009940 <HAL_ADC_ConfigChannel+0x854>)
 80097da:	4618      	mov	r0, r3
 80097dc:	f7fe ffd6 	bl	800878c <LL_ADC_GetCommonPathInternalCh>
 80097e0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4a56      	ldr	r2, [pc, #344]	; (8009944 <HAL_ADC_ConfigChannel+0x858>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d004      	beq.n	80097f8 <HAL_ADC_ConfigChannel+0x70c>
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4a55      	ldr	r2, [pc, #340]	; (8009948 <HAL_ADC_ConfigChannel+0x85c>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d13a      	bne.n	800986e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80097f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80097fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009800:	2b00      	cmp	r3, #0
 8009802:	d134      	bne.n	800986e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800980c:	d005      	beq.n	800981a <HAL_ADC_ConfigChannel+0x72e>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4a4e      	ldr	r2, [pc, #312]	; (800994c <HAL_ADC_ConfigChannel+0x860>)
 8009814:	4293      	cmp	r3, r2
 8009816:	f040 8085 	bne.w	8009924 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009822:	d004      	beq.n	800982e <HAL_ADC_ConfigChannel+0x742>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a49      	ldr	r2, [pc, #292]	; (8009950 <HAL_ADC_ConfigChannel+0x864>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d101      	bne.n	8009832 <HAL_ADC_ConfigChannel+0x746>
 800982e:	4a49      	ldr	r2, [pc, #292]	; (8009954 <HAL_ADC_ConfigChannel+0x868>)
 8009830:	e000      	b.n	8009834 <HAL_ADC_ConfigChannel+0x748>
 8009832:	4a43      	ldr	r2, [pc, #268]	; (8009940 <HAL_ADC_ConfigChannel+0x854>)
 8009834:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009838:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800983c:	4619      	mov	r1, r3
 800983e:	4610      	mov	r0, r2
 8009840:	f7fe ff91 	bl	8008766 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009844:	4b44      	ldr	r3, [pc, #272]	; (8009958 <HAL_ADC_ConfigChannel+0x86c>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	099b      	lsrs	r3, r3, #6
 800984a:	4a44      	ldr	r2, [pc, #272]	; (800995c <HAL_ADC_ConfigChannel+0x870>)
 800984c:	fba2 2303 	umull	r2, r3, r2, r3
 8009850:	099b      	lsrs	r3, r3, #6
 8009852:	1c5a      	adds	r2, r3, #1
 8009854:	4613      	mov	r3, r2
 8009856:	005b      	lsls	r3, r3, #1
 8009858:	4413      	add	r3, r2
 800985a:	009b      	lsls	r3, r3, #2
 800985c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800985e:	e002      	b.n	8009866 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	3b01      	subs	r3, #1
 8009864:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d1f9      	bne.n	8009860 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800986c:	e05a      	b.n	8009924 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4a3b      	ldr	r2, [pc, #236]	; (8009960 <HAL_ADC_ConfigChannel+0x874>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d125      	bne.n	80098c4 <HAL_ADC_ConfigChannel+0x7d8>
 8009878:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800987c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009880:	2b00      	cmp	r3, #0
 8009882:	d11f      	bne.n	80098c4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a31      	ldr	r2, [pc, #196]	; (8009950 <HAL_ADC_ConfigChannel+0x864>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d104      	bne.n	8009898 <HAL_ADC_ConfigChannel+0x7ac>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4a34      	ldr	r2, [pc, #208]	; (8009964 <HAL_ADC_ConfigChannel+0x878>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d047      	beq.n	8009928 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80098a0:	d004      	beq.n	80098ac <HAL_ADC_ConfigChannel+0x7c0>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4a2a      	ldr	r2, [pc, #168]	; (8009950 <HAL_ADC_ConfigChannel+0x864>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d101      	bne.n	80098b0 <HAL_ADC_ConfigChannel+0x7c4>
 80098ac:	4a29      	ldr	r2, [pc, #164]	; (8009954 <HAL_ADC_ConfigChannel+0x868>)
 80098ae:	e000      	b.n	80098b2 <HAL_ADC_ConfigChannel+0x7c6>
 80098b0:	4a23      	ldr	r2, [pc, #140]	; (8009940 <HAL_ADC_ConfigChannel+0x854>)
 80098b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80098b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80098ba:	4619      	mov	r1, r3
 80098bc:	4610      	mov	r0, r2
 80098be:	f7fe ff52 	bl	8008766 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80098c2:	e031      	b.n	8009928 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4a27      	ldr	r2, [pc, #156]	; (8009968 <HAL_ADC_ConfigChannel+0x87c>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d12d      	bne.n	800992a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80098ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80098d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d127      	bne.n	800992a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4a1c      	ldr	r2, [pc, #112]	; (8009950 <HAL_ADC_ConfigChannel+0x864>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d022      	beq.n	800992a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80098ec:	d004      	beq.n	80098f8 <HAL_ADC_ConfigChannel+0x80c>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4a17      	ldr	r2, [pc, #92]	; (8009950 <HAL_ADC_ConfigChannel+0x864>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d101      	bne.n	80098fc <HAL_ADC_ConfigChannel+0x810>
 80098f8:	4a16      	ldr	r2, [pc, #88]	; (8009954 <HAL_ADC_ConfigChannel+0x868>)
 80098fa:	e000      	b.n	80098fe <HAL_ADC_ConfigChannel+0x812>
 80098fc:	4a10      	ldr	r2, [pc, #64]	; (8009940 <HAL_ADC_ConfigChannel+0x854>)
 80098fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009902:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009906:	4619      	mov	r1, r3
 8009908:	4610      	mov	r0, r2
 800990a:	f7fe ff2c 	bl	8008766 <LL_ADC_SetCommonPathInternalCh>
 800990e:	e00c      	b.n	800992a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009914:	f043 0220 	orr.w	r2, r3, #32
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800991c:	2301      	movs	r3, #1
 800991e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8009922:	e002      	b.n	800992a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009924:	bf00      	nop
 8009926:	e000      	b.n	800992a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009928:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2200      	movs	r2, #0
 800992e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8009932:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8009936:	4618      	mov	r0, r3
 8009938:	37d8      	adds	r7, #216	; 0xd8
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	50000700 	.word	0x50000700
 8009944:	c3210000 	.word	0xc3210000
 8009948:	90c00010 	.word	0x90c00010
 800994c:	50000600 	.word	0x50000600
 8009950:	50000100 	.word	0x50000100
 8009954:	50000300 	.word	0x50000300
 8009958:	20000004 	.word	0x20000004
 800995c:	053e2d63 	.word	0x053e2d63
 8009960:	c7520000 	.word	0xc7520000
 8009964:	50000500 	.word	0x50000500
 8009968:	cb840000 	.word	0xcb840000

0800996c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4618      	mov	r0, r3
 800997a:	f7ff f8b5 	bl	8008ae8 <LL_ADC_IsEnabled>
 800997e:	4603      	mov	r3, r0
 8009980:	2b00      	cmp	r3, #0
 8009982:	d14d      	bne.n	8009a20 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	689a      	ldr	r2, [r3, #8]
 800998a:	4b28      	ldr	r3, [pc, #160]	; (8009a2c <ADC_Enable+0xc0>)
 800998c:	4013      	ands	r3, r2
 800998e:	2b00      	cmp	r3, #0
 8009990:	d00d      	beq.n	80099ae <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009996:	f043 0210 	orr.w	r2, r3, #16
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099a2:	f043 0201 	orr.w	r2, r3, #1
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80099aa:	2301      	movs	r3, #1
 80099ac:	e039      	b.n	8009a22 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4618      	mov	r0, r3
 80099b4:	f7ff f884 	bl	8008ac0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80099b8:	f7fe fe94 	bl	80086e4 <HAL_GetTick>
 80099bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80099be:	e028      	b.n	8009a12 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4618      	mov	r0, r3
 80099c6:	f7ff f88f 	bl	8008ae8 <LL_ADC_IsEnabled>
 80099ca:	4603      	mov	r3, r0
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d104      	bne.n	80099da <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4618      	mov	r0, r3
 80099d6:	f7ff f873 	bl	8008ac0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80099da:	f7fe fe83 	bl	80086e4 <HAL_GetTick>
 80099de:	4602      	mov	r2, r0
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	1ad3      	subs	r3, r2, r3
 80099e4:	2b02      	cmp	r3, #2
 80099e6:	d914      	bls.n	8009a12 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f003 0301 	and.w	r3, r3, #1
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	d00d      	beq.n	8009a12 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099fa:	f043 0210 	orr.w	r2, r3, #16
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a06:	f043 0201 	orr.w	r2, r3, #1
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	e007      	b.n	8009a22 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f003 0301 	and.w	r3, r3, #1
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	d1cf      	bne.n	80099c0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8009a20:	2300      	movs	r3, #0
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3710      	adds	r7, #16
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}
 8009a2a:	bf00      	nop
 8009a2c:	8000003f 	.word	0x8000003f

08009a30 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b084      	sub	sp, #16
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a3c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a42:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d14b      	bne.n	8009ae2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a4e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f003 0308 	and.w	r3, r3, #8
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d021      	beq.n	8009aa8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f7fe ff3b 	bl	80088e4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d032      	beq.n	8009ada <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	68db      	ldr	r3, [r3, #12]
 8009a7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d12b      	bne.n	8009ada <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d11f      	bne.n	8009ada <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a9e:	f043 0201 	orr.w	r2, r3, #1
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	65da      	str	r2, [r3, #92]	; 0x5c
 8009aa6:	e018      	b.n	8009ada <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	68db      	ldr	r3, [r3, #12]
 8009aae:	f003 0302 	and.w	r3, r3, #2
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d111      	bne.n	8009ada <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009aba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ac6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d105      	bne.n	8009ada <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ad2:	f043 0201 	orr.w	r2, r3, #1
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009ada:	68f8      	ldr	r0, [r7, #12]
 8009adc:	f7ff fae8 	bl	80090b0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8009ae0:	e00e      	b.n	8009b00 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ae6:	f003 0310 	and.w	r3, r3, #16
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d003      	beq.n	8009af6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8009aee:	68f8      	ldr	r0, [r7, #12]
 8009af0:	f7ff faf2 	bl	80090d8 <HAL_ADC_ErrorCallback>
}
 8009af4:	e004      	b.n	8009b00 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	4798      	blx	r3
}
 8009b00:	bf00      	nop
 8009b02:	3710      	adds	r7, #16
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b084      	sub	sp, #16
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b14:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009b16:	68f8      	ldr	r0, [r7, #12]
 8009b18:	f7ff fad4 	bl	80090c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009b1c:	bf00      	nop
 8009b1e:	3710      	adds	r7, #16
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b084      	sub	sp, #16
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b30:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b42:	f043 0204 	orr.w	r2, r3, #4
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8009b4a:	68f8      	ldr	r0, [r7, #12]
 8009b4c:	f7ff fac4 	bl	80090d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009b50:	bf00      	nop
 8009b52:	3710      	adds	r7, #16
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b085      	sub	sp, #20
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f003 0307 	and.w	r3, r3, #7
 8009b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009b68:	4b0c      	ldr	r3, [pc, #48]	; (8009b9c <__NVIC_SetPriorityGrouping+0x44>)
 8009b6a:	68db      	ldr	r3, [r3, #12]
 8009b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009b6e:	68ba      	ldr	r2, [r7, #8]
 8009b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009b74:	4013      	ands	r3, r2
 8009b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009b80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009b8a:	4a04      	ldr	r2, [pc, #16]	; (8009b9c <__NVIC_SetPriorityGrouping+0x44>)
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	60d3      	str	r3, [r2, #12]
}
 8009b90:	bf00      	nop
 8009b92:	3714      	adds	r7, #20
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr
 8009b9c:	e000ed00 	.word	0xe000ed00

08009ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009ba4:	4b04      	ldr	r3, [pc, #16]	; (8009bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8009ba6:	68db      	ldr	r3, [r3, #12]
 8009ba8:	0a1b      	lsrs	r3, r3, #8
 8009baa:	f003 0307 	and.w	r3, r3, #7
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr
 8009bb8:	e000ed00 	.word	0xe000ed00

08009bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b083      	sub	sp, #12
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	db0b      	blt.n	8009be6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009bce:	79fb      	ldrb	r3, [r7, #7]
 8009bd0:	f003 021f 	and.w	r2, r3, #31
 8009bd4:	4907      	ldr	r1, [pc, #28]	; (8009bf4 <__NVIC_EnableIRQ+0x38>)
 8009bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bda:	095b      	lsrs	r3, r3, #5
 8009bdc:	2001      	movs	r0, #1
 8009bde:	fa00 f202 	lsl.w	r2, r0, r2
 8009be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8009be6:	bf00      	nop
 8009be8:	370c      	adds	r7, #12
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr
 8009bf2:	bf00      	nop
 8009bf4:	e000e100 	.word	0xe000e100

08009bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b083      	sub	sp, #12
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	4603      	mov	r3, r0
 8009c00:	6039      	str	r1, [r7, #0]
 8009c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	db0a      	blt.n	8009c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	b2da      	uxtb	r2, r3
 8009c10:	490c      	ldr	r1, [pc, #48]	; (8009c44 <__NVIC_SetPriority+0x4c>)
 8009c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c16:	0112      	lsls	r2, r2, #4
 8009c18:	b2d2      	uxtb	r2, r2
 8009c1a:	440b      	add	r3, r1
 8009c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009c20:	e00a      	b.n	8009c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	b2da      	uxtb	r2, r3
 8009c26:	4908      	ldr	r1, [pc, #32]	; (8009c48 <__NVIC_SetPriority+0x50>)
 8009c28:	79fb      	ldrb	r3, [r7, #7]
 8009c2a:	f003 030f 	and.w	r3, r3, #15
 8009c2e:	3b04      	subs	r3, #4
 8009c30:	0112      	lsls	r2, r2, #4
 8009c32:	b2d2      	uxtb	r2, r2
 8009c34:	440b      	add	r3, r1
 8009c36:	761a      	strb	r2, [r3, #24]
}
 8009c38:	bf00      	nop
 8009c3a:	370c      	adds	r7, #12
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr
 8009c44:	e000e100 	.word	0xe000e100
 8009c48:	e000ed00 	.word	0xe000ed00

08009c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b089      	sub	sp, #36	; 0x24
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	60f8      	str	r0, [r7, #12]
 8009c54:	60b9      	str	r1, [r7, #8]
 8009c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	f003 0307 	and.w	r3, r3, #7
 8009c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009c60:	69fb      	ldr	r3, [r7, #28]
 8009c62:	f1c3 0307 	rsb	r3, r3, #7
 8009c66:	2b04      	cmp	r3, #4
 8009c68:	bf28      	it	cs
 8009c6a:	2304      	movcs	r3, #4
 8009c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009c6e:	69fb      	ldr	r3, [r7, #28]
 8009c70:	3304      	adds	r3, #4
 8009c72:	2b06      	cmp	r3, #6
 8009c74:	d902      	bls.n	8009c7c <NVIC_EncodePriority+0x30>
 8009c76:	69fb      	ldr	r3, [r7, #28]
 8009c78:	3b03      	subs	r3, #3
 8009c7a:	e000      	b.n	8009c7e <NVIC_EncodePriority+0x32>
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009c80:	f04f 32ff 	mov.w	r2, #4294967295
 8009c84:	69bb      	ldr	r3, [r7, #24]
 8009c86:	fa02 f303 	lsl.w	r3, r2, r3
 8009c8a:	43da      	mvns	r2, r3
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	401a      	ands	r2, r3
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009c94:	f04f 31ff 	mov.w	r1, #4294967295
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8009c9e:	43d9      	mvns	r1, r3
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009ca4:	4313      	orrs	r3, r2
         );
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3724      	adds	r7, #36	; 0x24
 8009caa:	46bd      	mov	sp, r7
 8009cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb0:	4770      	bx	lr

08009cb2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009cb2:	b580      	push	{r7, lr}
 8009cb4:	b082      	sub	sp, #8
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f7ff ff4c 	bl	8009b58 <__NVIC_SetPriorityGrouping>
}
 8009cc0:	bf00      	nop
 8009cc2:	3708      	adds	r7, #8
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b086      	sub	sp, #24
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	4603      	mov	r3, r0
 8009cd0:	60b9      	str	r1, [r7, #8]
 8009cd2:	607a      	str	r2, [r7, #4]
 8009cd4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009cd6:	f7ff ff63 	bl	8009ba0 <__NVIC_GetPriorityGrouping>
 8009cda:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009cdc:	687a      	ldr	r2, [r7, #4]
 8009cde:	68b9      	ldr	r1, [r7, #8]
 8009ce0:	6978      	ldr	r0, [r7, #20]
 8009ce2:	f7ff ffb3 	bl	8009c4c <NVIC_EncodePriority>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cec:	4611      	mov	r1, r2
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f7ff ff82 	bl	8009bf8 <__NVIC_SetPriority>
}
 8009cf4:	bf00      	nop
 8009cf6:	3718      	adds	r7, #24
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b082      	sub	sp, #8
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	4603      	mov	r3, r0
 8009d04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f7ff ff56 	bl	8009bbc <__NVIC_EnableIRQ>
}
 8009d10:	bf00      	nop
 8009d12:	3708      	adds	r7, #8
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d101      	bne.n	8009d2a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8009d26:	2301      	movs	r3, #1
 8009d28:	e08d      	b.n	8009e46 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	461a      	mov	r2, r3
 8009d30:	4b47      	ldr	r3, [pc, #284]	; (8009e50 <HAL_DMA_Init+0x138>)
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d80f      	bhi.n	8009d56 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	4b45      	ldr	r3, [pc, #276]	; (8009e54 <HAL_DMA_Init+0x13c>)
 8009d3e:	4413      	add	r3, r2
 8009d40:	4a45      	ldr	r2, [pc, #276]	; (8009e58 <HAL_DMA_Init+0x140>)
 8009d42:	fba2 2303 	umull	r2, r3, r2, r3
 8009d46:	091b      	lsrs	r3, r3, #4
 8009d48:	009a      	lsls	r2, r3, #2
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	4a42      	ldr	r2, [pc, #264]	; (8009e5c <HAL_DMA_Init+0x144>)
 8009d52:	641a      	str	r2, [r3, #64]	; 0x40
 8009d54:	e00e      	b.n	8009d74 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	4b40      	ldr	r3, [pc, #256]	; (8009e60 <HAL_DMA_Init+0x148>)
 8009d5e:	4413      	add	r3, r2
 8009d60:	4a3d      	ldr	r2, [pc, #244]	; (8009e58 <HAL_DMA_Init+0x140>)
 8009d62:	fba2 2303 	umull	r2, r3, r2, r3
 8009d66:	091b      	lsrs	r3, r3, #4
 8009d68:	009a      	lsls	r2, r3, #2
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	4a3c      	ldr	r2, [pc, #240]	; (8009e64 <HAL_DMA_Init+0x14c>)
 8009d72:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2202      	movs	r2, #2
 8009d78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d8e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009d98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	691b      	ldr	r3, [r3, #16]
 8009d9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009da4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	699b      	ldr	r3, [r3, #24]
 8009daa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009db0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6a1b      	ldr	r3, [r3, #32]
 8009db6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009db8:	68fa      	ldr	r2, [r7, #12]
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	68fa      	ldr	r2, [r7, #12]
 8009dc4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 fa76 	bl	800a2b8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	689b      	ldr	r3, [r3, #8]
 8009dd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009dd4:	d102      	bne.n	8009ddc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	685a      	ldr	r2, [r3, #4]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009de4:	b2d2      	uxtb	r2, r2
 8009de6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dec:	687a      	ldr	r2, [r7, #4]
 8009dee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009df0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	685b      	ldr	r3, [r3, #4]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d010      	beq.n	8009e1c <HAL_DMA_Init+0x104>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	2b04      	cmp	r3, #4
 8009e00:	d80c      	bhi.n	8009e1c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 fa96 	bl	800a334 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e14:	687a      	ldr	r2, [r7, #4]
 8009e16:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009e18:	605a      	str	r2, [r3, #4]
 8009e1a:	e008      	b.n	8009e2e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2200      	movs	r2, #0
 8009e26:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2200      	movs	r2, #0
 8009e32:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2201      	movs	r2, #1
 8009e38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009e44:	2300      	movs	r3, #0
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3710      	adds	r7, #16
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
 8009e4e:	bf00      	nop
 8009e50:	40020407 	.word	0x40020407
 8009e54:	bffdfff8 	.word	0xbffdfff8
 8009e58:	cccccccd 	.word	0xcccccccd
 8009e5c:	40020000 	.word	0x40020000
 8009e60:	bffdfbf8 	.word	0xbffdfbf8
 8009e64:	40020400 	.word	0x40020400

08009e68 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b086      	sub	sp, #24
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	60f8      	str	r0, [r7, #12]
 8009e70:	60b9      	str	r1, [r7, #8]
 8009e72:	607a      	str	r2, [r7, #4]
 8009e74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009e76:	2300      	movs	r3, #0
 8009e78:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009e80:	2b01      	cmp	r3, #1
 8009e82:	d101      	bne.n	8009e88 <HAL_DMA_Start_IT+0x20>
 8009e84:	2302      	movs	r3, #2
 8009e86:	e066      	b.n	8009f56 <HAL_DMA_Start_IT+0xee>
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009e96:	b2db      	uxtb	r3, r3
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d155      	bne.n	8009f48 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	2202      	movs	r2, #2
 8009ea0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	681a      	ldr	r2, [r3, #0]
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f022 0201 	bic.w	r2, r2, #1
 8009eb8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	687a      	ldr	r2, [r7, #4]
 8009ebe:	68b9      	ldr	r1, [r7, #8]
 8009ec0:	68f8      	ldr	r0, [r7, #12]
 8009ec2:	f000 f9bb 	bl	800a23c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d008      	beq.n	8009ee0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f042 020e 	orr.w	r2, r2, #14
 8009edc:	601a      	str	r2, [r3, #0]
 8009ede:	e00f      	b.n	8009f00 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f022 0204 	bic.w	r2, r2, #4
 8009eee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	681a      	ldr	r2, [r3, #0]
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f042 020a 	orr.w	r2, r2, #10
 8009efe:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d007      	beq.n	8009f1e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f12:	681a      	ldr	r2, [r3, #0]
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f1c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d007      	beq.n	8009f36 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f34:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	681a      	ldr	r2, [r3, #0]
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f042 0201 	orr.w	r2, r2, #1
 8009f44:	601a      	str	r2, [r3, #0]
 8009f46:	e005      	b.n	8009f54 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009f50:	2302      	movs	r3, #2
 8009f52:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8009f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3718      	adds	r7, #24
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}

08009f5e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009f5e:	b480      	push	{r7}
 8009f60:	b085      	sub	sp, #20
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f66:	2300      	movs	r3, #0
 8009f68:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009f70:	b2db      	uxtb	r3, r3
 8009f72:	2b02      	cmp	r3, #2
 8009f74:	d005      	beq.n	8009f82 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2204      	movs	r2, #4
 8009f7a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	73fb      	strb	r3, [r7, #15]
 8009f80:	e037      	b.n	8009ff2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	681a      	ldr	r2, [r3, #0]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f022 020e 	bic.w	r2, r2, #14
 8009f90:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f96:	681a      	ldr	r2, [r3, #0]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009fa0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	681a      	ldr	r2, [r3, #0]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f022 0201 	bic.w	r2, r2, #1
 8009fb0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fb6:	f003 021f 	and.w	r2, r3, #31
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fbe:	2101      	movs	r1, #1
 8009fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8009fc4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fca:	687a      	ldr	r2, [r7, #4]
 8009fcc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009fce:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d00c      	beq.n	8009ff2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fdc:	681a      	ldr	r2, [r3, #0]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fe2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009fe6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fec:	687a      	ldr	r2, [r7, #4]
 8009fee:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009ff0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800a002:	7bfb      	ldrb	r3, [r7, #15]
}
 800a004:	4618      	mov	r0, r3
 800a006:	3714      	adds	r7, #20
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr

0800a010 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b084      	sub	sp, #16
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a018:	2300      	movs	r3, #0
 800a01a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a022:	b2db      	uxtb	r3, r3
 800a024:	2b02      	cmp	r3, #2
 800a026:	d00d      	beq.n	800a044 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2204      	movs	r2, #4
 800a02c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2201      	movs	r2, #1
 800a032:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2200      	movs	r2, #0
 800a03a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800a03e:	2301      	movs	r3, #1
 800a040:	73fb      	strb	r3, [r7, #15]
 800a042:	e047      	b.n	800a0d4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	681a      	ldr	r2, [r3, #0]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f022 020e 	bic.w	r2, r2, #14
 800a052:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	681a      	ldr	r2, [r3, #0]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f022 0201 	bic.w	r2, r2, #1
 800a062:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a068:	681a      	ldr	r2, [r3, #0]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a06e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a072:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a078:	f003 021f 	and.w	r2, r3, #31
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a080:	2101      	movs	r1, #1
 800a082:	fa01 f202 	lsl.w	r2, r1, r2
 800a086:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a08c:	687a      	ldr	r2, [r7, #4]
 800a08e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a090:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a096:	2b00      	cmp	r3, #0
 800a098:	d00c      	beq.n	800a0b4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a09e:	681a      	ldr	r2, [r3, #0]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a0a8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0ae:	687a      	ldr	r2, [r7, #4]
 800a0b0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a0b2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d003      	beq.n	800a0d4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	4798      	blx	r3
    }
  }
  return status;
 800a0d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3710      	adds	r7, #16
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}

0800a0de <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a0de:	b580      	push	{r7, lr}
 800a0e0:	b084      	sub	sp, #16
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0fa:	f003 031f 	and.w	r3, r3, #31
 800a0fe:	2204      	movs	r2, #4
 800a100:	409a      	lsls	r2, r3
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	4013      	ands	r3, r2
 800a106:	2b00      	cmp	r3, #0
 800a108:	d026      	beq.n	800a158 <HAL_DMA_IRQHandler+0x7a>
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	f003 0304 	and.w	r3, r3, #4
 800a110:	2b00      	cmp	r3, #0
 800a112:	d021      	beq.n	800a158 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f003 0320 	and.w	r3, r3, #32
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d107      	bne.n	800a132 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	681a      	ldr	r2, [r3, #0]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f022 0204 	bic.w	r2, r2, #4
 800a130:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a136:	f003 021f 	and.w	r2, r3, #31
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a13e:	2104      	movs	r1, #4
 800a140:	fa01 f202 	lsl.w	r2, r1, r2
 800a144:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d071      	beq.n	800a232 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800a156:	e06c      	b.n	800a232 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a15c:	f003 031f 	and.w	r3, r3, #31
 800a160:	2202      	movs	r2, #2
 800a162:	409a      	lsls	r2, r3
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	4013      	ands	r3, r2
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d02e      	beq.n	800a1ca <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	f003 0302 	and.w	r3, r3, #2
 800a172:	2b00      	cmp	r3, #0
 800a174:	d029      	beq.n	800a1ca <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f003 0320 	and.w	r3, r3, #32
 800a180:	2b00      	cmp	r3, #0
 800a182:	d10b      	bne.n	800a19c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	681a      	ldr	r2, [r3, #0]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f022 020a 	bic.w	r2, r2, #10
 800a192:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2201      	movs	r2, #1
 800a198:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1a0:	f003 021f 	and.w	r2, r3, #31
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1a8:	2102      	movs	r1, #2
 800a1aa:	fa01 f202 	lsl.w	r2, r1, r2
 800a1ae:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d038      	beq.n	800a232 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800a1c8:	e033      	b.n	800a232 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1ce:	f003 031f 	and.w	r3, r3, #31
 800a1d2:	2208      	movs	r2, #8
 800a1d4:	409a      	lsls	r2, r3
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	4013      	ands	r3, r2
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d02a      	beq.n	800a234 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	f003 0308 	and.w	r3, r3, #8
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d025      	beq.n	800a234 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	681a      	ldr	r2, [r3, #0]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f022 020e 	bic.w	r2, r2, #14
 800a1f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1fc:	f003 021f 	and.w	r2, r3, #31
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a204:	2101      	movs	r1, #1
 800a206:	fa01 f202 	lsl.w	r2, r1, r2
 800a20a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2201      	movs	r2, #1
 800a210:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2201      	movs	r2, #1
 800a216:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2200      	movs	r2, #0
 800a21e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a226:	2b00      	cmp	r3, #0
 800a228:	d004      	beq.n	800a234 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800a232:	bf00      	nop
 800a234:	bf00      	nop
}
 800a236:	3710      	adds	r7, #16
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b085      	sub	sp, #20
 800a240:	af00      	add	r7, sp, #0
 800a242:	60f8      	str	r0, [r7, #12]
 800a244:	60b9      	str	r1, [r7, #8]
 800a246:	607a      	str	r2, [r7, #4]
 800a248:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a24e:	68fa      	ldr	r2, [r7, #12]
 800a250:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a252:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d004      	beq.n	800a266 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a260:	68fa      	ldr	r2, [r7, #12]
 800a262:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a264:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a26a:	f003 021f 	and.w	r2, r3, #31
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a272:	2101      	movs	r1, #1
 800a274:	fa01 f202 	lsl.w	r2, r1, r2
 800a278:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	683a      	ldr	r2, [r7, #0]
 800a280:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	689b      	ldr	r3, [r3, #8]
 800a286:	2b10      	cmp	r3, #16
 800a288:	d108      	bne.n	800a29c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	687a      	ldr	r2, [r7, #4]
 800a290:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	68ba      	ldr	r2, [r7, #8]
 800a298:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800a29a:	e007      	b.n	800a2ac <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	68ba      	ldr	r2, [r7, #8]
 800a2a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	687a      	ldr	r2, [r7, #4]
 800a2aa:	60da      	str	r2, [r3, #12]
}
 800a2ac:	bf00      	nop
 800a2ae:	3714      	adds	r7, #20
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b087      	sub	sp, #28
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	461a      	mov	r2, r3
 800a2c6:	4b16      	ldr	r3, [pc, #88]	; (800a320 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	d802      	bhi.n	800a2d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800a2cc:	4b15      	ldr	r3, [pc, #84]	; (800a324 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800a2ce:	617b      	str	r3, [r7, #20]
 800a2d0:	e001      	b.n	800a2d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800a2d2:	4b15      	ldr	r3, [pc, #84]	; (800a328 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800a2d4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	b2db      	uxtb	r3, r3
 800a2e0:	3b08      	subs	r3, #8
 800a2e2:	4a12      	ldr	r2, [pc, #72]	; (800a32c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800a2e4:	fba2 2303 	umull	r2, r3, r2, r3
 800a2e8:	091b      	lsrs	r3, r3, #4
 800a2ea:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2f0:	089b      	lsrs	r3, r3, #2
 800a2f2:	009a      	lsls	r2, r3, #2
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	4413      	add	r3, r2
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	4a0b      	ldr	r2, [pc, #44]	; (800a330 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800a302:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f003 031f 	and.w	r3, r3, #31
 800a30a:	2201      	movs	r2, #1
 800a30c:	409a      	lsls	r2, r3
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	651a      	str	r2, [r3, #80]	; 0x50
}
 800a312:	bf00      	nop
 800a314:	371c      	adds	r7, #28
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr
 800a31e:	bf00      	nop
 800a320:	40020407 	.word	0x40020407
 800a324:	40020800 	.word	0x40020800
 800a328:	40020820 	.word	0x40020820
 800a32c:	cccccccd 	.word	0xcccccccd
 800a330:	40020880 	.word	0x40020880

0800a334 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a334:	b480      	push	{r7}
 800a336:	b085      	sub	sp, #20
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	b2db      	uxtb	r3, r3
 800a342:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a344:	68fa      	ldr	r2, [r7, #12]
 800a346:	4b0b      	ldr	r3, [pc, #44]	; (800a374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800a348:	4413      	add	r3, r2
 800a34a:	009b      	lsls	r3, r3, #2
 800a34c:	461a      	mov	r2, r3
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	4a08      	ldr	r2, [pc, #32]	; (800a378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800a356:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	3b01      	subs	r3, #1
 800a35c:	f003 031f 	and.w	r3, r3, #31
 800a360:	2201      	movs	r2, #1
 800a362:	409a      	lsls	r2, r3
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800a368:	bf00      	nop
 800a36a:	3714      	adds	r7, #20
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr
 800a374:	1000823f 	.word	0x1000823f
 800a378:	40020940 	.word	0x40020940

0800a37c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b087      	sub	sp, #28
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a386:	2300      	movs	r3, #0
 800a388:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a38a:	e15a      	b.n	800a642 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	681a      	ldr	r2, [r3, #0]
 800a390:	2101      	movs	r1, #1
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	fa01 f303 	lsl.w	r3, r1, r3
 800a398:	4013      	ands	r3, r2
 800a39a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	f000 814c 	beq.w	800a63c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	f003 0303 	and.w	r3, r3, #3
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d005      	beq.n	800a3bc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a3b8:	2b02      	cmp	r3, #2
 800a3ba:	d130      	bne.n	800a41e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	689b      	ldr	r3, [r3, #8]
 800a3c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	005b      	lsls	r3, r3, #1
 800a3c6:	2203      	movs	r2, #3
 800a3c8:	fa02 f303 	lsl.w	r3, r2, r3
 800a3cc:	43db      	mvns	r3, r3
 800a3ce:	693a      	ldr	r2, [r7, #16]
 800a3d0:	4013      	ands	r3, r2
 800a3d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	68da      	ldr	r2, [r3, #12]
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	005b      	lsls	r3, r3, #1
 800a3dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a3e0:	693a      	ldr	r2, [r7, #16]
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	693a      	ldr	r2, [r7, #16]
 800a3ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	fa02 f303 	lsl.w	r3, r2, r3
 800a3fa:	43db      	mvns	r3, r3
 800a3fc:	693a      	ldr	r2, [r7, #16]
 800a3fe:	4013      	ands	r3, r2
 800a400:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	685b      	ldr	r3, [r3, #4]
 800a406:	091b      	lsrs	r3, r3, #4
 800a408:	f003 0201 	and.w	r2, r3, #1
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	fa02 f303 	lsl.w	r3, r2, r3
 800a412:	693a      	ldr	r2, [r7, #16]
 800a414:	4313      	orrs	r3, r2
 800a416:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	693a      	ldr	r2, [r7, #16]
 800a41c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	685b      	ldr	r3, [r3, #4]
 800a422:	f003 0303 	and.w	r3, r3, #3
 800a426:	2b03      	cmp	r3, #3
 800a428:	d017      	beq.n	800a45a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	68db      	ldr	r3, [r3, #12]
 800a42e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	005b      	lsls	r3, r3, #1
 800a434:	2203      	movs	r2, #3
 800a436:	fa02 f303 	lsl.w	r3, r2, r3
 800a43a:	43db      	mvns	r3, r3
 800a43c:	693a      	ldr	r2, [r7, #16]
 800a43e:	4013      	ands	r3, r2
 800a440:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	689a      	ldr	r2, [r3, #8]
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	005b      	lsls	r3, r3, #1
 800a44a:	fa02 f303 	lsl.w	r3, r2, r3
 800a44e:	693a      	ldr	r2, [r7, #16]
 800a450:	4313      	orrs	r3, r2
 800a452:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	693a      	ldr	r2, [r7, #16]
 800a458:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	f003 0303 	and.w	r3, r3, #3
 800a462:	2b02      	cmp	r3, #2
 800a464:	d123      	bne.n	800a4ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	08da      	lsrs	r2, r3, #3
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	3208      	adds	r2, #8
 800a46e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a472:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	f003 0307 	and.w	r3, r3, #7
 800a47a:	009b      	lsls	r3, r3, #2
 800a47c:	220f      	movs	r2, #15
 800a47e:	fa02 f303 	lsl.w	r3, r2, r3
 800a482:	43db      	mvns	r3, r3
 800a484:	693a      	ldr	r2, [r7, #16]
 800a486:	4013      	ands	r3, r2
 800a488:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	691a      	ldr	r2, [r3, #16]
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	f003 0307 	and.w	r3, r3, #7
 800a494:	009b      	lsls	r3, r3, #2
 800a496:	fa02 f303 	lsl.w	r3, r2, r3
 800a49a:	693a      	ldr	r2, [r7, #16]
 800a49c:	4313      	orrs	r3, r2
 800a49e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	08da      	lsrs	r2, r3, #3
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	3208      	adds	r2, #8
 800a4a8:	6939      	ldr	r1, [r7, #16]
 800a4aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	005b      	lsls	r3, r3, #1
 800a4b8:	2203      	movs	r2, #3
 800a4ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a4be:	43db      	mvns	r3, r3
 800a4c0:	693a      	ldr	r2, [r7, #16]
 800a4c2:	4013      	ands	r3, r2
 800a4c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	f003 0203 	and.w	r2, r3, #3
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	005b      	lsls	r3, r3, #1
 800a4d2:	fa02 f303 	lsl.w	r3, r2, r3
 800a4d6:	693a      	ldr	r2, [r7, #16]
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	693a      	ldr	r2, [r7, #16]
 800a4e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	f000 80a6 	beq.w	800a63c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a4f0:	4b5b      	ldr	r3, [pc, #364]	; (800a660 <HAL_GPIO_Init+0x2e4>)
 800a4f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4f4:	4a5a      	ldr	r2, [pc, #360]	; (800a660 <HAL_GPIO_Init+0x2e4>)
 800a4f6:	f043 0301 	orr.w	r3, r3, #1
 800a4fa:	6613      	str	r3, [r2, #96]	; 0x60
 800a4fc:	4b58      	ldr	r3, [pc, #352]	; (800a660 <HAL_GPIO_Init+0x2e4>)
 800a4fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a500:	f003 0301 	and.w	r3, r3, #1
 800a504:	60bb      	str	r3, [r7, #8]
 800a506:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a508:	4a56      	ldr	r2, [pc, #344]	; (800a664 <HAL_GPIO_Init+0x2e8>)
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	089b      	lsrs	r3, r3, #2
 800a50e:	3302      	adds	r3, #2
 800a510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a514:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	f003 0303 	and.w	r3, r3, #3
 800a51c:	009b      	lsls	r3, r3, #2
 800a51e:	220f      	movs	r2, #15
 800a520:	fa02 f303 	lsl.w	r3, r2, r3
 800a524:	43db      	mvns	r3, r3
 800a526:	693a      	ldr	r2, [r7, #16]
 800a528:	4013      	ands	r3, r2
 800a52a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a532:	d01f      	beq.n	800a574 <HAL_GPIO_Init+0x1f8>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	4a4c      	ldr	r2, [pc, #304]	; (800a668 <HAL_GPIO_Init+0x2ec>)
 800a538:	4293      	cmp	r3, r2
 800a53a:	d019      	beq.n	800a570 <HAL_GPIO_Init+0x1f4>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	4a4b      	ldr	r2, [pc, #300]	; (800a66c <HAL_GPIO_Init+0x2f0>)
 800a540:	4293      	cmp	r3, r2
 800a542:	d013      	beq.n	800a56c <HAL_GPIO_Init+0x1f0>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	4a4a      	ldr	r2, [pc, #296]	; (800a670 <HAL_GPIO_Init+0x2f4>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d00d      	beq.n	800a568 <HAL_GPIO_Init+0x1ec>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	4a49      	ldr	r2, [pc, #292]	; (800a674 <HAL_GPIO_Init+0x2f8>)
 800a550:	4293      	cmp	r3, r2
 800a552:	d007      	beq.n	800a564 <HAL_GPIO_Init+0x1e8>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	4a48      	ldr	r2, [pc, #288]	; (800a678 <HAL_GPIO_Init+0x2fc>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d101      	bne.n	800a560 <HAL_GPIO_Init+0x1e4>
 800a55c:	2305      	movs	r3, #5
 800a55e:	e00a      	b.n	800a576 <HAL_GPIO_Init+0x1fa>
 800a560:	2306      	movs	r3, #6
 800a562:	e008      	b.n	800a576 <HAL_GPIO_Init+0x1fa>
 800a564:	2304      	movs	r3, #4
 800a566:	e006      	b.n	800a576 <HAL_GPIO_Init+0x1fa>
 800a568:	2303      	movs	r3, #3
 800a56a:	e004      	b.n	800a576 <HAL_GPIO_Init+0x1fa>
 800a56c:	2302      	movs	r3, #2
 800a56e:	e002      	b.n	800a576 <HAL_GPIO_Init+0x1fa>
 800a570:	2301      	movs	r3, #1
 800a572:	e000      	b.n	800a576 <HAL_GPIO_Init+0x1fa>
 800a574:	2300      	movs	r3, #0
 800a576:	697a      	ldr	r2, [r7, #20]
 800a578:	f002 0203 	and.w	r2, r2, #3
 800a57c:	0092      	lsls	r2, r2, #2
 800a57e:	4093      	lsls	r3, r2
 800a580:	693a      	ldr	r2, [r7, #16]
 800a582:	4313      	orrs	r3, r2
 800a584:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a586:	4937      	ldr	r1, [pc, #220]	; (800a664 <HAL_GPIO_Init+0x2e8>)
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	089b      	lsrs	r3, r3, #2
 800a58c:	3302      	adds	r3, #2
 800a58e:	693a      	ldr	r2, [r7, #16]
 800a590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a594:	4b39      	ldr	r3, [pc, #228]	; (800a67c <HAL_GPIO_Init+0x300>)
 800a596:	689b      	ldr	r3, [r3, #8]
 800a598:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	43db      	mvns	r3, r3
 800a59e:	693a      	ldr	r2, [r7, #16]
 800a5a0:	4013      	ands	r3, r2
 800a5a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	685b      	ldr	r3, [r3, #4]
 800a5a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d003      	beq.n	800a5b8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800a5b0:	693a      	ldr	r2, [r7, #16]
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	4313      	orrs	r3, r2
 800a5b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a5b8:	4a30      	ldr	r2, [pc, #192]	; (800a67c <HAL_GPIO_Init+0x300>)
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a5be:	4b2f      	ldr	r3, [pc, #188]	; (800a67c <HAL_GPIO_Init+0x300>)
 800a5c0:	68db      	ldr	r3, [r3, #12]
 800a5c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	43db      	mvns	r3, r3
 800a5c8:	693a      	ldr	r2, [r7, #16]
 800a5ca:	4013      	ands	r3, r2
 800a5cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d003      	beq.n	800a5e2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800a5da:	693a      	ldr	r2, [r7, #16]
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a5e2:	4a26      	ldr	r2, [pc, #152]	; (800a67c <HAL_GPIO_Init+0x300>)
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800a5e8:	4b24      	ldr	r3, [pc, #144]	; (800a67c <HAL_GPIO_Init+0x300>)
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	43db      	mvns	r3, r3
 800a5f2:	693a      	ldr	r2, [r7, #16]
 800a5f4:	4013      	ands	r3, r2
 800a5f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a600:	2b00      	cmp	r3, #0
 800a602:	d003      	beq.n	800a60c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800a604:	693a      	ldr	r2, [r7, #16]
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	4313      	orrs	r3, r2
 800a60a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a60c:	4a1b      	ldr	r2, [pc, #108]	; (800a67c <HAL_GPIO_Init+0x300>)
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a612:	4b1a      	ldr	r3, [pc, #104]	; (800a67c <HAL_GPIO_Init+0x300>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	43db      	mvns	r3, r3
 800a61c:	693a      	ldr	r2, [r7, #16]
 800a61e:	4013      	ands	r3, r2
 800a620:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d003      	beq.n	800a636 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800a62e:	693a      	ldr	r2, [r7, #16]
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	4313      	orrs	r3, r2
 800a634:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a636:	4a11      	ldr	r2, [pc, #68]	; (800a67c <HAL_GPIO_Init+0x300>)
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	3301      	adds	r3, #1
 800a640:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	681a      	ldr	r2, [r3, #0]
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	fa22 f303 	lsr.w	r3, r2, r3
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	f47f ae9d 	bne.w	800a38c <HAL_GPIO_Init+0x10>
  }
}
 800a652:	bf00      	nop
 800a654:	bf00      	nop
 800a656:	371c      	adds	r7, #28
 800a658:	46bd      	mov	sp, r7
 800a65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65e:	4770      	bx	lr
 800a660:	40021000 	.word	0x40021000
 800a664:	40010000 	.word	0x40010000
 800a668:	48000400 	.word	0x48000400
 800a66c:	48000800 	.word	0x48000800
 800a670:	48000c00 	.word	0x48000c00
 800a674:	48001000 	.word	0x48001000
 800a678:	48001400 	.word	0x48001400
 800a67c:	40010400 	.word	0x40010400

0800a680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
 800a688:	460b      	mov	r3, r1
 800a68a:	807b      	strh	r3, [r7, #2]
 800a68c:	4613      	mov	r3, r2
 800a68e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a690:	787b      	ldrb	r3, [r7, #1]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d003      	beq.n	800a69e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a696:	887a      	ldrh	r2, [r7, #2]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a69c:	e002      	b.n	800a6a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a69e:	887a      	ldrh	r2, [r7, #2]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a6a4:	bf00      	nop
 800a6a6:	370c      	adds	r7, #12
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr

0800a6b0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b085      	sub	sp, #20
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	460b      	mov	r3, r1
 800a6ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	695b      	ldr	r3, [r3, #20]
 800a6c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a6c2:	887a      	ldrh	r2, [r7, #2]
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	4013      	ands	r3, r2
 800a6c8:	041a      	lsls	r2, r3, #16
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	43d9      	mvns	r1, r3
 800a6ce:	887b      	ldrh	r3, [r7, #2]
 800a6d0:	400b      	ands	r3, r1
 800a6d2:	431a      	orrs	r2, r3
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	619a      	str	r2, [r3, #24]
}
 800a6d8:	bf00      	nop
 800a6da:	3714      	adds	r7, #20
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e2:	4770      	bx	lr

0800a6e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800a6ee:	4b08      	ldr	r3, [pc, #32]	; (800a710 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a6f0:	695a      	ldr	r2, [r3, #20]
 800a6f2:	88fb      	ldrh	r3, [r7, #6]
 800a6f4:	4013      	ands	r3, r2
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d006      	beq.n	800a708 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a6fa:	4a05      	ldr	r2, [pc, #20]	; (800a710 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a6fc:	88fb      	ldrh	r3, [r7, #6]
 800a6fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a700:	88fb      	ldrh	r3, [r7, #6]
 800a702:	4618      	mov	r0, r3
 800a704:	f000 f806 	bl	800a714 <HAL_GPIO_EXTI_Callback>
  }
}
 800a708:	bf00      	nop
 800a70a:	3708      	adds	r7, #8
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}
 800a710:	40010400 	.word	0x40010400

0800a714 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a714:	b480      	push	{r7}
 800a716:	b083      	sub	sp, #12
 800a718:	af00      	add	r7, sp, #0
 800a71a:	4603      	mov	r3, r0
 800a71c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800a71e:	bf00      	nop
 800a720:	370c      	adds	r7, #12
 800a722:	46bd      	mov	sp, r7
 800a724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a728:	4770      	bx	lr

0800a72a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a72a:	b580      	push	{r7, lr}
 800a72c:	b082      	sub	sp, #8
 800a72e:	af00      	add	r7, sp, #0
 800a730:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d101      	bne.n	800a73c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a738:	2301      	movs	r3, #1
 800a73a:	e081      	b.n	800a840 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a742:	b2db      	uxtb	r3, r3
 800a744:	2b00      	cmp	r3, #0
 800a746:	d106      	bne.n	800a756 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2200      	movs	r2, #0
 800a74c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f7fb ffa1 	bl	8006698 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2224      	movs	r2, #36	; 0x24
 800a75a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	681a      	ldr	r2, [r3, #0]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f022 0201 	bic.w	r2, r2, #1
 800a76c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	685a      	ldr	r2, [r3, #4]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a77a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	689a      	ldr	r2, [r3, #8]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a78a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	68db      	ldr	r3, [r3, #12]
 800a790:	2b01      	cmp	r3, #1
 800a792:	d107      	bne.n	800a7a4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	689a      	ldr	r2, [r3, #8]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a7a0:	609a      	str	r2, [r3, #8]
 800a7a2:	e006      	b.n	800a7b2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	689a      	ldr	r2, [r3, #8]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a7b0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	68db      	ldr	r3, [r3, #12]
 800a7b6:	2b02      	cmp	r3, #2
 800a7b8:	d104      	bne.n	800a7c4 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a7c2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	685b      	ldr	r3, [r3, #4]
 800a7ca:	687a      	ldr	r2, [r7, #4]
 800a7cc:	6812      	ldr	r2, [r2, #0]
 800a7ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a7d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7d6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	68da      	ldr	r2, [r3, #12]
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a7e6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	691a      	ldr	r2, [r3, #16]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	695b      	ldr	r3, [r3, #20]
 800a7f0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	699b      	ldr	r3, [r3, #24]
 800a7f8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	430a      	orrs	r2, r1
 800a800:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	69d9      	ldr	r1, [r3, #28]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6a1a      	ldr	r2, [r3, #32]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	430a      	orrs	r2, r1
 800a810:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	681a      	ldr	r2, [r3, #0]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f042 0201 	orr.w	r2, r2, #1
 800a820:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2200      	movs	r2, #0
 800a826:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2220      	movs	r2, #32
 800a82c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2200      	movs	r2, #0
 800a834:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2200      	movs	r2, #0
 800a83a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a83e:	2300      	movs	r3, #0
}
 800a840:	4618      	mov	r0, r3
 800a842:	3708      	adds	r7, #8
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b088      	sub	sp, #32
 800a84c:	af02      	add	r7, sp, #8
 800a84e:	60f8      	str	r0, [r7, #12]
 800a850:	4608      	mov	r0, r1
 800a852:	4611      	mov	r1, r2
 800a854:	461a      	mov	r2, r3
 800a856:	4603      	mov	r3, r0
 800a858:	817b      	strh	r3, [r7, #10]
 800a85a:	460b      	mov	r3, r1
 800a85c:	813b      	strh	r3, [r7, #8]
 800a85e:	4613      	mov	r3, r2
 800a860:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a868:	b2db      	uxtb	r3, r3
 800a86a:	2b20      	cmp	r3, #32
 800a86c:	f040 80f9 	bne.w	800aa62 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a870:	6a3b      	ldr	r3, [r7, #32]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d002      	beq.n	800a87c <HAL_I2C_Mem_Write+0x34>
 800a876:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d105      	bne.n	800a888 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a882:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a884:	2301      	movs	r3, #1
 800a886:	e0ed      	b.n	800aa64 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a88e:	2b01      	cmp	r3, #1
 800a890:	d101      	bne.n	800a896 <HAL_I2C_Mem_Write+0x4e>
 800a892:	2302      	movs	r3, #2
 800a894:	e0e6      	b.n	800aa64 <HAL_I2C_Mem_Write+0x21c>
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	2201      	movs	r2, #1
 800a89a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a89e:	f7fd ff21 	bl	80086e4 <HAL_GetTick>
 800a8a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	9300      	str	r3, [sp, #0]
 800a8a8:	2319      	movs	r3, #25
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a8b0:	68f8      	ldr	r0, [r7, #12]
 800a8b2:	f000 fac3 	bl	800ae3c <I2C_WaitOnFlagUntilTimeout>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d001      	beq.n	800a8c0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800a8bc:	2301      	movs	r3, #1
 800a8be:	e0d1      	b.n	800aa64 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2221      	movs	r2, #33	; 0x21
 800a8c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2240      	movs	r2, #64	; 0x40
 800a8cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	6a3a      	ldr	r2, [r7, #32]
 800a8da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a8e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a8e8:	88f8      	ldrh	r0, [r7, #6]
 800a8ea:	893a      	ldrh	r2, [r7, #8]
 800a8ec:	8979      	ldrh	r1, [r7, #10]
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	9301      	str	r3, [sp, #4]
 800a8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f4:	9300      	str	r3, [sp, #0]
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	68f8      	ldr	r0, [r7, #12]
 800a8fa:	f000 f9d3 	bl	800aca4 <I2C_RequestMemoryWrite>
 800a8fe:	4603      	mov	r3, r0
 800a900:	2b00      	cmp	r3, #0
 800a902:	d005      	beq.n	800a910 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2200      	movs	r2, #0
 800a908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a90c:	2301      	movs	r3, #1
 800a90e:	e0a9      	b.n	800aa64 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a914:	b29b      	uxth	r3, r3
 800a916:	2bff      	cmp	r3, #255	; 0xff
 800a918:	d90e      	bls.n	800a938 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	22ff      	movs	r2, #255	; 0xff
 800a91e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a924:	b2da      	uxtb	r2, r3
 800a926:	8979      	ldrh	r1, [r7, #10]
 800a928:	2300      	movs	r3, #0
 800a92a:	9300      	str	r3, [sp, #0]
 800a92c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a930:	68f8      	ldr	r0, [r7, #12]
 800a932:	f000 fc2b 	bl	800b18c <I2C_TransferConfig>
 800a936:	e00f      	b.n	800a958 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a93c:	b29a      	uxth	r2, r3
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a946:	b2da      	uxtb	r2, r3
 800a948:	8979      	ldrh	r1, [r7, #10]
 800a94a:	2300      	movs	r3, #0
 800a94c:	9300      	str	r3, [sp, #0]
 800a94e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a952:	68f8      	ldr	r0, [r7, #12]
 800a954:	f000 fc1a 	bl	800b18c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a958:	697a      	ldr	r2, [r7, #20]
 800a95a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a95c:	68f8      	ldr	r0, [r7, #12]
 800a95e:	f000 faad 	bl	800aebc <I2C_WaitOnTXISFlagUntilTimeout>
 800a962:	4603      	mov	r3, r0
 800a964:	2b00      	cmp	r3, #0
 800a966:	d001      	beq.n	800a96c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800a968:	2301      	movs	r3, #1
 800a96a:	e07b      	b.n	800aa64 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a970:	781a      	ldrb	r2, [r3, #0]
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a97c:	1c5a      	adds	r2, r3, #1
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a986:	b29b      	uxth	r3, r3
 800a988:	3b01      	subs	r3, #1
 800a98a:	b29a      	uxth	r2, r3
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a994:	3b01      	subs	r3, #1
 800a996:	b29a      	uxth	r2, r3
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9a0:	b29b      	uxth	r3, r3
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d034      	beq.n	800aa10 <HAL_I2C_Mem_Write+0x1c8>
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d130      	bne.n	800aa10 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	9300      	str	r3, [sp, #0]
 800a9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	2180      	movs	r1, #128	; 0x80
 800a9b8:	68f8      	ldr	r0, [r7, #12]
 800a9ba:	f000 fa3f 	bl	800ae3c <I2C_WaitOnFlagUntilTimeout>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d001      	beq.n	800a9c8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	e04d      	b.n	800aa64 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9cc:	b29b      	uxth	r3, r3
 800a9ce:	2bff      	cmp	r3, #255	; 0xff
 800a9d0:	d90e      	bls.n	800a9f0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	22ff      	movs	r2, #255	; 0xff
 800a9d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9dc:	b2da      	uxtb	r2, r3
 800a9de:	8979      	ldrh	r1, [r7, #10]
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	9300      	str	r3, [sp, #0]
 800a9e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a9e8:	68f8      	ldr	r0, [r7, #12]
 800a9ea:	f000 fbcf 	bl	800b18c <I2C_TransferConfig>
 800a9ee:	e00f      	b.n	800aa10 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9f4:	b29a      	uxth	r2, r3
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9fe:	b2da      	uxtb	r2, r3
 800aa00:	8979      	ldrh	r1, [r7, #10]
 800aa02:	2300      	movs	r3, #0
 800aa04:	9300      	str	r3, [sp, #0]
 800aa06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aa0a:	68f8      	ldr	r0, [r7, #12]
 800aa0c:	f000 fbbe 	bl	800b18c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa14:	b29b      	uxth	r3, r3
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d19e      	bne.n	800a958 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aa1a:	697a      	ldr	r2, [r7, #20]
 800aa1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa1e:	68f8      	ldr	r0, [r7, #12]
 800aa20:	f000 fa8c 	bl	800af3c <I2C_WaitOnSTOPFlagUntilTimeout>
 800aa24:	4603      	mov	r3, r0
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d001      	beq.n	800aa2e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	e01a      	b.n	800aa64 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	2220      	movs	r2, #32
 800aa34:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	6859      	ldr	r1, [r3, #4]
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681a      	ldr	r2, [r3, #0]
 800aa40:	4b0a      	ldr	r3, [pc, #40]	; (800aa6c <HAL_I2C_Mem_Write+0x224>)
 800aa42:	400b      	ands	r3, r1
 800aa44:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	2220      	movs	r2, #32
 800aa4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	2200      	movs	r2, #0
 800aa52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	e000      	b.n	800aa64 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800aa62:	2302      	movs	r3, #2
  }
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3718      	adds	r7, #24
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}
 800aa6c:	fe00e800 	.word	0xfe00e800

0800aa70 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b088      	sub	sp, #32
 800aa74:	af02      	add	r7, sp, #8
 800aa76:	60f8      	str	r0, [r7, #12]
 800aa78:	4608      	mov	r0, r1
 800aa7a:	4611      	mov	r1, r2
 800aa7c:	461a      	mov	r2, r3
 800aa7e:	4603      	mov	r3, r0
 800aa80:	817b      	strh	r3, [r7, #10]
 800aa82:	460b      	mov	r3, r1
 800aa84:	813b      	strh	r3, [r7, #8]
 800aa86:	4613      	mov	r3, r2
 800aa88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa90:	b2db      	uxtb	r3, r3
 800aa92:	2b20      	cmp	r3, #32
 800aa94:	f040 80fd 	bne.w	800ac92 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa98:	6a3b      	ldr	r3, [r7, #32]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d002      	beq.n	800aaa4 <HAL_I2C_Mem_Read+0x34>
 800aa9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d105      	bne.n	800aab0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aaaa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800aaac:	2301      	movs	r3, #1
 800aaae:	e0f1      	b.n	800ac94 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aab6:	2b01      	cmp	r3, #1
 800aab8:	d101      	bne.n	800aabe <HAL_I2C_Mem_Read+0x4e>
 800aaba:	2302      	movs	r3, #2
 800aabc:	e0ea      	b.n	800ac94 <HAL_I2C_Mem_Read+0x224>
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2201      	movs	r2, #1
 800aac2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800aac6:	f7fd fe0d 	bl	80086e4 <HAL_GetTick>
 800aaca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	9300      	str	r3, [sp, #0]
 800aad0:	2319      	movs	r3, #25
 800aad2:	2201      	movs	r2, #1
 800aad4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800aad8:	68f8      	ldr	r0, [r7, #12]
 800aada:	f000 f9af 	bl	800ae3c <I2C_WaitOnFlagUntilTimeout>
 800aade:	4603      	mov	r3, r0
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d001      	beq.n	800aae8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800aae4:	2301      	movs	r3, #1
 800aae6:	e0d5      	b.n	800ac94 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2222      	movs	r2, #34	; 0x22
 800aaec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	2240      	movs	r2, #64	; 0x40
 800aaf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2200      	movs	r2, #0
 800aafc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	6a3a      	ldr	r2, [r7, #32]
 800ab02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ab08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ab10:	88f8      	ldrh	r0, [r7, #6]
 800ab12:	893a      	ldrh	r2, [r7, #8]
 800ab14:	8979      	ldrh	r1, [r7, #10]
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	9301      	str	r3, [sp, #4]
 800ab1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab1c:	9300      	str	r3, [sp, #0]
 800ab1e:	4603      	mov	r3, r0
 800ab20:	68f8      	ldr	r0, [r7, #12]
 800ab22:	f000 f913 	bl	800ad4c <I2C_RequestMemoryRead>
 800ab26:	4603      	mov	r3, r0
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d005      	beq.n	800ab38 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800ab34:	2301      	movs	r3, #1
 800ab36:	e0ad      	b.n	800ac94 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab3c:	b29b      	uxth	r3, r3
 800ab3e:	2bff      	cmp	r3, #255	; 0xff
 800ab40:	d90e      	bls.n	800ab60 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	22ff      	movs	r2, #255	; 0xff
 800ab46:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab4c:	b2da      	uxtb	r2, r3
 800ab4e:	8979      	ldrh	r1, [r7, #10]
 800ab50:	4b52      	ldr	r3, [pc, #328]	; (800ac9c <HAL_I2C_Mem_Read+0x22c>)
 800ab52:	9300      	str	r3, [sp, #0]
 800ab54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ab58:	68f8      	ldr	r0, [r7, #12]
 800ab5a:	f000 fb17 	bl	800b18c <I2C_TransferConfig>
 800ab5e:	e00f      	b.n	800ab80 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab64:	b29a      	uxth	r2, r3
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab6e:	b2da      	uxtb	r2, r3
 800ab70:	8979      	ldrh	r1, [r7, #10]
 800ab72:	4b4a      	ldr	r3, [pc, #296]	; (800ac9c <HAL_I2C_Mem_Read+0x22c>)
 800ab74:	9300      	str	r3, [sp, #0]
 800ab76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ab7a:	68f8      	ldr	r0, [r7, #12]
 800ab7c:	f000 fb06 	bl	800b18c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	9300      	str	r3, [sp, #0]
 800ab84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab86:	2200      	movs	r2, #0
 800ab88:	2104      	movs	r1, #4
 800ab8a:	68f8      	ldr	r0, [r7, #12]
 800ab8c:	f000 f956 	bl	800ae3c <I2C_WaitOnFlagUntilTimeout>
 800ab90:	4603      	mov	r3, r0
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d001      	beq.n	800ab9a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800ab96:	2301      	movs	r3, #1
 800ab98:	e07c      	b.n	800ac94 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba4:	b2d2      	uxtb	r2, r2
 800aba6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abac:	1c5a      	adds	r2, r3, #1
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abb6:	3b01      	subs	r3, #1
 800abb8:	b29a      	uxth	r2, r3
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abc2:	b29b      	uxth	r3, r3
 800abc4:	3b01      	subs	r3, #1
 800abc6:	b29a      	uxth	r2, r3
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abd0:	b29b      	uxth	r3, r3
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d034      	beq.n	800ac40 <HAL_I2C_Mem_Read+0x1d0>
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d130      	bne.n	800ac40 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	9300      	str	r3, [sp, #0]
 800abe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe4:	2200      	movs	r2, #0
 800abe6:	2180      	movs	r1, #128	; 0x80
 800abe8:	68f8      	ldr	r0, [r7, #12]
 800abea:	f000 f927 	bl	800ae3c <I2C_WaitOnFlagUntilTimeout>
 800abee:	4603      	mov	r3, r0
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d001      	beq.n	800abf8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800abf4:	2301      	movs	r3, #1
 800abf6:	e04d      	b.n	800ac94 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abfc:	b29b      	uxth	r3, r3
 800abfe:	2bff      	cmp	r3, #255	; 0xff
 800ac00:	d90e      	bls.n	800ac20 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	22ff      	movs	r2, #255	; 0xff
 800ac06:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac0c:	b2da      	uxtb	r2, r3
 800ac0e:	8979      	ldrh	r1, [r7, #10]
 800ac10:	2300      	movs	r3, #0
 800ac12:	9300      	str	r3, [sp, #0]
 800ac14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ac18:	68f8      	ldr	r0, [r7, #12]
 800ac1a:	f000 fab7 	bl	800b18c <I2C_TransferConfig>
 800ac1e:	e00f      	b.n	800ac40 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac24:	b29a      	uxth	r2, r3
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac2e:	b2da      	uxtb	r2, r3
 800ac30:	8979      	ldrh	r1, [r7, #10]
 800ac32:	2300      	movs	r3, #0
 800ac34:	9300      	str	r3, [sp, #0]
 800ac36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ac3a:	68f8      	ldr	r0, [r7, #12]
 800ac3c:	f000 faa6 	bl	800b18c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d19a      	bne.n	800ab80 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ac4a:	697a      	ldr	r2, [r7, #20]
 800ac4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ac4e:	68f8      	ldr	r0, [r7, #12]
 800ac50:	f000 f974 	bl	800af3c <I2C_WaitOnSTOPFlagUntilTimeout>
 800ac54:	4603      	mov	r3, r0
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d001      	beq.n	800ac5e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	e01a      	b.n	800ac94 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	2220      	movs	r2, #32
 800ac64:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	6859      	ldr	r1, [r3, #4]
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681a      	ldr	r2, [r3, #0]
 800ac70:	4b0b      	ldr	r3, [pc, #44]	; (800aca0 <HAL_I2C_Mem_Read+0x230>)
 800ac72:	400b      	ands	r3, r1
 800ac74:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	2220      	movs	r2, #32
 800ac7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	2200      	movs	r2, #0
 800ac82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	e000      	b.n	800ac94 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800ac92:	2302      	movs	r3, #2
  }
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3718      	adds	r7, #24
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}
 800ac9c:	80002400 	.word	0x80002400
 800aca0:	fe00e800 	.word	0xfe00e800

0800aca4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b086      	sub	sp, #24
 800aca8:	af02      	add	r7, sp, #8
 800acaa:	60f8      	str	r0, [r7, #12]
 800acac:	4608      	mov	r0, r1
 800acae:	4611      	mov	r1, r2
 800acb0:	461a      	mov	r2, r3
 800acb2:	4603      	mov	r3, r0
 800acb4:	817b      	strh	r3, [r7, #10]
 800acb6:	460b      	mov	r3, r1
 800acb8:	813b      	strh	r3, [r7, #8]
 800acba:	4613      	mov	r3, r2
 800acbc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800acbe:	88fb      	ldrh	r3, [r7, #6]
 800acc0:	b2da      	uxtb	r2, r3
 800acc2:	8979      	ldrh	r1, [r7, #10]
 800acc4:	4b20      	ldr	r3, [pc, #128]	; (800ad48 <I2C_RequestMemoryWrite+0xa4>)
 800acc6:	9300      	str	r3, [sp, #0]
 800acc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800accc:	68f8      	ldr	r0, [r7, #12]
 800acce:	f000 fa5d 	bl	800b18c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800acd2:	69fa      	ldr	r2, [r7, #28]
 800acd4:	69b9      	ldr	r1, [r7, #24]
 800acd6:	68f8      	ldr	r0, [r7, #12]
 800acd8:	f000 f8f0 	bl	800aebc <I2C_WaitOnTXISFlagUntilTimeout>
 800acdc:	4603      	mov	r3, r0
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d001      	beq.n	800ace6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800ace2:	2301      	movs	r3, #1
 800ace4:	e02c      	b.n	800ad40 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ace6:	88fb      	ldrh	r3, [r7, #6]
 800ace8:	2b01      	cmp	r3, #1
 800acea:	d105      	bne.n	800acf8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800acec:	893b      	ldrh	r3, [r7, #8]
 800acee:	b2da      	uxtb	r2, r3
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	629a      	str	r2, [r3, #40]	; 0x28
 800acf6:	e015      	b.n	800ad24 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800acf8:	893b      	ldrh	r3, [r7, #8]
 800acfa:	0a1b      	lsrs	r3, r3, #8
 800acfc:	b29b      	uxth	r3, r3
 800acfe:	b2da      	uxtb	r2, r3
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ad06:	69fa      	ldr	r2, [r7, #28]
 800ad08:	69b9      	ldr	r1, [r7, #24]
 800ad0a:	68f8      	ldr	r0, [r7, #12]
 800ad0c:	f000 f8d6 	bl	800aebc <I2C_WaitOnTXISFlagUntilTimeout>
 800ad10:	4603      	mov	r3, r0
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d001      	beq.n	800ad1a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800ad16:	2301      	movs	r3, #1
 800ad18:	e012      	b.n	800ad40 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ad1a:	893b      	ldrh	r3, [r7, #8]
 800ad1c:	b2da      	uxtb	r2, r3
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800ad24:	69fb      	ldr	r3, [r7, #28]
 800ad26:	9300      	str	r3, [sp, #0]
 800ad28:	69bb      	ldr	r3, [r7, #24]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	2180      	movs	r1, #128	; 0x80
 800ad2e:	68f8      	ldr	r0, [r7, #12]
 800ad30:	f000 f884 	bl	800ae3c <I2C_WaitOnFlagUntilTimeout>
 800ad34:	4603      	mov	r3, r0
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d001      	beq.n	800ad3e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	e000      	b.n	800ad40 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800ad3e:	2300      	movs	r3, #0
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3710      	adds	r7, #16
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}
 800ad48:	80002000 	.word	0x80002000

0800ad4c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b086      	sub	sp, #24
 800ad50:	af02      	add	r7, sp, #8
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	4608      	mov	r0, r1
 800ad56:	4611      	mov	r1, r2
 800ad58:	461a      	mov	r2, r3
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	817b      	strh	r3, [r7, #10]
 800ad5e:	460b      	mov	r3, r1
 800ad60:	813b      	strh	r3, [r7, #8]
 800ad62:	4613      	mov	r3, r2
 800ad64:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800ad66:	88fb      	ldrh	r3, [r7, #6]
 800ad68:	b2da      	uxtb	r2, r3
 800ad6a:	8979      	ldrh	r1, [r7, #10]
 800ad6c:	4b20      	ldr	r3, [pc, #128]	; (800adf0 <I2C_RequestMemoryRead+0xa4>)
 800ad6e:	9300      	str	r3, [sp, #0]
 800ad70:	2300      	movs	r3, #0
 800ad72:	68f8      	ldr	r0, [r7, #12]
 800ad74:	f000 fa0a 	bl	800b18c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ad78:	69fa      	ldr	r2, [r7, #28]
 800ad7a:	69b9      	ldr	r1, [r7, #24]
 800ad7c:	68f8      	ldr	r0, [r7, #12]
 800ad7e:	f000 f89d 	bl	800aebc <I2C_WaitOnTXISFlagUntilTimeout>
 800ad82:	4603      	mov	r3, r0
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d001      	beq.n	800ad8c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800ad88:	2301      	movs	r3, #1
 800ad8a:	e02c      	b.n	800ade6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ad8c:	88fb      	ldrh	r3, [r7, #6]
 800ad8e:	2b01      	cmp	r3, #1
 800ad90:	d105      	bne.n	800ad9e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ad92:	893b      	ldrh	r3, [r7, #8]
 800ad94:	b2da      	uxtb	r2, r3
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	629a      	str	r2, [r3, #40]	; 0x28
 800ad9c:	e015      	b.n	800adca <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ad9e:	893b      	ldrh	r3, [r7, #8]
 800ada0:	0a1b      	lsrs	r3, r3, #8
 800ada2:	b29b      	uxth	r3, r3
 800ada4:	b2da      	uxtb	r2, r3
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800adac:	69fa      	ldr	r2, [r7, #28]
 800adae:	69b9      	ldr	r1, [r7, #24]
 800adb0:	68f8      	ldr	r0, [r7, #12]
 800adb2:	f000 f883 	bl	800aebc <I2C_WaitOnTXISFlagUntilTimeout>
 800adb6:	4603      	mov	r3, r0
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d001      	beq.n	800adc0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800adbc:	2301      	movs	r3, #1
 800adbe:	e012      	b.n	800ade6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800adc0:	893b      	ldrh	r3, [r7, #8]
 800adc2:	b2da      	uxtb	r2, r3
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800adca:	69fb      	ldr	r3, [r7, #28]
 800adcc:	9300      	str	r3, [sp, #0]
 800adce:	69bb      	ldr	r3, [r7, #24]
 800add0:	2200      	movs	r2, #0
 800add2:	2140      	movs	r1, #64	; 0x40
 800add4:	68f8      	ldr	r0, [r7, #12]
 800add6:	f000 f831 	bl	800ae3c <I2C_WaitOnFlagUntilTimeout>
 800adda:	4603      	mov	r3, r0
 800addc:	2b00      	cmp	r3, #0
 800adde:	d001      	beq.n	800ade4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800ade0:	2301      	movs	r3, #1
 800ade2:	e000      	b.n	800ade6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800ade4:	2300      	movs	r3, #0
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3710      	adds	r7, #16
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop
 800adf0:	80002000 	.word	0x80002000

0800adf4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b083      	sub	sp, #12
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	699b      	ldr	r3, [r3, #24]
 800ae02:	f003 0302 	and.w	r3, r3, #2
 800ae06:	2b02      	cmp	r3, #2
 800ae08:	d103      	bne.n	800ae12 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	699b      	ldr	r3, [r3, #24]
 800ae18:	f003 0301 	and.w	r3, r3, #1
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	d007      	beq.n	800ae30 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	699a      	ldr	r2, [r3, #24]
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f042 0201 	orr.w	r2, r2, #1
 800ae2e:	619a      	str	r2, [r3, #24]
  }
}
 800ae30:	bf00      	nop
 800ae32:	370c      	adds	r7, #12
 800ae34:	46bd      	mov	sp, r7
 800ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3a:	4770      	bx	lr

0800ae3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b084      	sub	sp, #16
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	60f8      	str	r0, [r7, #12]
 800ae44:	60b9      	str	r1, [r7, #8]
 800ae46:	603b      	str	r3, [r7, #0]
 800ae48:	4613      	mov	r3, r2
 800ae4a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ae4c:	e022      	b.n	800ae94 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae54:	d01e      	beq.n	800ae94 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae56:	f7fd fc45 	bl	80086e4 <HAL_GetTick>
 800ae5a:	4602      	mov	r2, r0
 800ae5c:	69bb      	ldr	r3, [r7, #24]
 800ae5e:	1ad3      	subs	r3, r2, r3
 800ae60:	683a      	ldr	r2, [r7, #0]
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d302      	bcc.n	800ae6c <I2C_WaitOnFlagUntilTimeout+0x30>
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d113      	bne.n	800ae94 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae70:	f043 0220 	orr.w	r2, r3, #32
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	2220      	movs	r2, #32
 800ae7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	2200      	movs	r2, #0
 800ae84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800ae90:	2301      	movs	r3, #1
 800ae92:	e00f      	b.n	800aeb4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	699a      	ldr	r2, [r3, #24]
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	4013      	ands	r3, r2
 800ae9e:	68ba      	ldr	r2, [r7, #8]
 800aea0:	429a      	cmp	r2, r3
 800aea2:	bf0c      	ite	eq
 800aea4:	2301      	moveq	r3, #1
 800aea6:	2300      	movne	r3, #0
 800aea8:	b2db      	uxtb	r3, r3
 800aeaa:	461a      	mov	r2, r3
 800aeac:	79fb      	ldrb	r3, [r7, #7]
 800aeae:	429a      	cmp	r2, r3
 800aeb0:	d0cd      	beq.n	800ae4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800aeb2:	2300      	movs	r3, #0
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3710      	adds	r7, #16
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}

0800aebc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b084      	sub	sp, #16
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	60f8      	str	r0, [r7, #12]
 800aec4:	60b9      	str	r1, [r7, #8]
 800aec6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800aec8:	e02c      	b.n	800af24 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800aeca:	687a      	ldr	r2, [r7, #4]
 800aecc:	68b9      	ldr	r1, [r7, #8]
 800aece:	68f8      	ldr	r0, [r7, #12]
 800aed0:	f000 f870 	bl	800afb4 <I2C_IsErrorOccurred>
 800aed4:	4603      	mov	r3, r0
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d001      	beq.n	800aede <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800aeda:	2301      	movs	r3, #1
 800aedc:	e02a      	b.n	800af34 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aee4:	d01e      	beq.n	800af24 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aee6:	f7fd fbfd 	bl	80086e4 <HAL_GetTick>
 800aeea:	4602      	mov	r2, r0
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	1ad3      	subs	r3, r2, r3
 800aef0:	68ba      	ldr	r2, [r7, #8]
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d302      	bcc.n	800aefc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d113      	bne.n	800af24 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af00:	f043 0220 	orr.w	r2, r3, #32
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	2220      	movs	r2, #32
 800af0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	2200      	movs	r2, #0
 800af14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	2200      	movs	r2, #0
 800af1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800af20:	2301      	movs	r3, #1
 800af22:	e007      	b.n	800af34 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	699b      	ldr	r3, [r3, #24]
 800af2a:	f003 0302 	and.w	r3, r3, #2
 800af2e:	2b02      	cmp	r3, #2
 800af30:	d1cb      	bne.n	800aeca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800af32:	2300      	movs	r3, #0
}
 800af34:	4618      	mov	r0, r3
 800af36:	3710      	adds	r7, #16
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b084      	sub	sp, #16
 800af40:	af00      	add	r7, sp, #0
 800af42:	60f8      	str	r0, [r7, #12]
 800af44:	60b9      	str	r1, [r7, #8]
 800af46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800af48:	e028      	b.n	800af9c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800af4a:	687a      	ldr	r2, [r7, #4]
 800af4c:	68b9      	ldr	r1, [r7, #8]
 800af4e:	68f8      	ldr	r0, [r7, #12]
 800af50:	f000 f830 	bl	800afb4 <I2C_IsErrorOccurred>
 800af54:	4603      	mov	r3, r0
 800af56:	2b00      	cmp	r3, #0
 800af58:	d001      	beq.n	800af5e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800af5a:	2301      	movs	r3, #1
 800af5c:	e026      	b.n	800afac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af5e:	f7fd fbc1 	bl	80086e4 <HAL_GetTick>
 800af62:	4602      	mov	r2, r0
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	1ad3      	subs	r3, r2, r3
 800af68:	68ba      	ldr	r2, [r7, #8]
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d302      	bcc.n	800af74 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d113      	bne.n	800af9c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af78:	f043 0220 	orr.w	r2, r3, #32
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	2220      	movs	r2, #32
 800af84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	2200      	movs	r2, #0
 800af8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	2200      	movs	r2, #0
 800af94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800af98:	2301      	movs	r3, #1
 800af9a:	e007      	b.n	800afac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	699b      	ldr	r3, [r3, #24]
 800afa2:	f003 0320 	and.w	r3, r3, #32
 800afa6:	2b20      	cmp	r3, #32
 800afa8:	d1cf      	bne.n	800af4a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800afaa:	2300      	movs	r3, #0
}
 800afac:	4618      	mov	r0, r3
 800afae:	3710      	adds	r7, #16
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}

0800afb4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b08a      	sub	sp, #40	; 0x28
 800afb8:	af00      	add	r7, sp, #0
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800afc0:	2300      	movs	r3, #0
 800afc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	699b      	ldr	r3, [r3, #24]
 800afcc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800afce:	2300      	movs	r3, #0
 800afd0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800afd6:	69bb      	ldr	r3, [r7, #24]
 800afd8:	f003 0310 	and.w	r3, r3, #16
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d075      	beq.n	800b0cc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	2210      	movs	r2, #16
 800afe6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800afe8:	e056      	b.n	800b098 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aff0:	d052      	beq.n	800b098 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800aff2:	f7fd fb77 	bl	80086e4 <HAL_GetTick>
 800aff6:	4602      	mov	r2, r0
 800aff8:	69fb      	ldr	r3, [r7, #28]
 800affa:	1ad3      	subs	r3, r2, r3
 800affc:	68ba      	ldr	r2, [r7, #8]
 800affe:	429a      	cmp	r2, r3
 800b000:	d302      	bcc.n	800b008 <I2C_IsErrorOccurred+0x54>
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d147      	bne.n	800b098 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	685b      	ldr	r3, [r3, #4]
 800b00e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b012:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b01a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	699b      	ldr	r3, [r3, #24]
 800b022:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b026:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b02a:	d12e      	bne.n	800b08a <I2C_IsErrorOccurred+0xd6>
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b032:	d02a      	beq.n	800b08a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800b034:	7cfb      	ldrb	r3, [r7, #19]
 800b036:	2b20      	cmp	r3, #32
 800b038:	d027      	beq.n	800b08a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	685a      	ldr	r2, [r3, #4]
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b048:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800b04a:	f7fd fb4b 	bl	80086e4 <HAL_GetTick>
 800b04e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b050:	e01b      	b.n	800b08a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b052:	f7fd fb47 	bl	80086e4 <HAL_GetTick>
 800b056:	4602      	mov	r2, r0
 800b058:	69fb      	ldr	r3, [r7, #28]
 800b05a:	1ad3      	subs	r3, r2, r3
 800b05c:	2b19      	cmp	r3, #25
 800b05e:	d914      	bls.n	800b08a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b064:	f043 0220 	orr.w	r2, r3, #32
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	2220      	movs	r2, #32
 800b070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2200      	movs	r2, #0
 800b078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	2200      	movs	r2, #0
 800b080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800b084:	2301      	movs	r3, #1
 800b086:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	699b      	ldr	r3, [r3, #24]
 800b090:	f003 0320 	and.w	r3, r3, #32
 800b094:	2b20      	cmp	r3, #32
 800b096:	d1dc      	bne.n	800b052 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	699b      	ldr	r3, [r3, #24]
 800b09e:	f003 0320 	and.w	r3, r3, #32
 800b0a2:	2b20      	cmp	r3, #32
 800b0a4:	d003      	beq.n	800b0ae <I2C_IsErrorOccurred+0xfa>
 800b0a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d09d      	beq.n	800afea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800b0ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d103      	bne.n	800b0be <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	2220      	movs	r2, #32
 800b0bc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800b0be:	6a3b      	ldr	r3, [r7, #32]
 800b0c0:	f043 0304 	orr.w	r3, r3, #4
 800b0c4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	699b      	ldr	r3, [r3, #24]
 800b0d2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b0d4:	69bb      	ldr	r3, [r7, #24]
 800b0d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d00b      	beq.n	800b0f6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800b0de:	6a3b      	ldr	r3, [r7, #32]
 800b0e0:	f043 0301 	orr.w	r3, r3, #1
 800b0e4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b0ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b0f6:	69bb      	ldr	r3, [r7, #24]
 800b0f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d00b      	beq.n	800b118 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800b100:	6a3b      	ldr	r3, [r7, #32]
 800b102:	f043 0308 	orr.w	r3, r3, #8
 800b106:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b110:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b112:	2301      	movs	r3, #1
 800b114:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b118:	69bb      	ldr	r3, [r7, #24]
 800b11a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d00b      	beq.n	800b13a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800b122:	6a3b      	ldr	r3, [r7, #32]
 800b124:	f043 0302 	orr.w	r3, r3, #2
 800b128:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b132:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b134:	2301      	movs	r3, #1
 800b136:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800b13a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d01c      	beq.n	800b17c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b142:	68f8      	ldr	r0, [r7, #12]
 800b144:	f7ff fe56 	bl	800adf4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	6859      	ldr	r1, [r3, #4]
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	681a      	ldr	r2, [r3, #0]
 800b152:	4b0d      	ldr	r3, [pc, #52]	; (800b188 <I2C_IsErrorOccurred+0x1d4>)
 800b154:	400b      	ands	r3, r1
 800b156:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b15c:	6a3b      	ldr	r3, [r7, #32]
 800b15e:	431a      	orrs	r2, r3
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	2220      	movs	r2, #32
 800b168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	2200      	movs	r2, #0
 800b170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	2200      	movs	r2, #0
 800b178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800b17c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b180:	4618      	mov	r0, r3
 800b182:	3728      	adds	r7, #40	; 0x28
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}
 800b188:	fe00e800 	.word	0xfe00e800

0800b18c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b18c:	b480      	push	{r7}
 800b18e:	b087      	sub	sp, #28
 800b190:	af00      	add	r7, sp, #0
 800b192:	60f8      	str	r0, [r7, #12]
 800b194:	607b      	str	r3, [r7, #4]
 800b196:	460b      	mov	r3, r1
 800b198:	817b      	strh	r3, [r7, #10]
 800b19a:	4613      	mov	r3, r2
 800b19c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b19e:	897b      	ldrh	r3, [r7, #10]
 800b1a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b1a4:	7a7b      	ldrb	r3, [r7, #9]
 800b1a6:	041b      	lsls	r3, r3, #16
 800b1a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b1ac:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b1b2:	6a3b      	ldr	r3, [r7, #32]
 800b1b4:	4313      	orrs	r3, r2
 800b1b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b1ba:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	685a      	ldr	r2, [r3, #4]
 800b1c2:	6a3b      	ldr	r3, [r7, #32]
 800b1c4:	0d5b      	lsrs	r3, r3, #21
 800b1c6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800b1ca:	4b08      	ldr	r3, [pc, #32]	; (800b1ec <I2C_TransferConfig+0x60>)
 800b1cc:	430b      	orrs	r3, r1
 800b1ce:	43db      	mvns	r3, r3
 800b1d0:	ea02 0103 	and.w	r1, r2, r3
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	697a      	ldr	r2, [r7, #20]
 800b1da:	430a      	orrs	r2, r1
 800b1dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b1de:	bf00      	nop
 800b1e0:	371c      	adds	r7, #28
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e8:	4770      	bx	lr
 800b1ea:	bf00      	nop
 800b1ec:	03ff63ff 	.word	0x03ff63ff

0800b1f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b083      	sub	sp, #12
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b200:	b2db      	uxtb	r3, r3
 800b202:	2b20      	cmp	r3, #32
 800b204:	d138      	bne.n	800b278 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b20c:	2b01      	cmp	r3, #1
 800b20e:	d101      	bne.n	800b214 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b210:	2302      	movs	r3, #2
 800b212:	e032      	b.n	800b27a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2201      	movs	r2, #1
 800b218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2224      	movs	r2, #36	; 0x24
 800b220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	681a      	ldr	r2, [r3, #0]
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f022 0201 	bic.w	r2, r2, #1
 800b232:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	681a      	ldr	r2, [r3, #0]
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b242:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	6819      	ldr	r1, [r3, #0]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	683a      	ldr	r2, [r7, #0]
 800b250:	430a      	orrs	r2, r1
 800b252:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	681a      	ldr	r2, [r3, #0]
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f042 0201 	orr.w	r2, r2, #1
 800b262:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2220      	movs	r2, #32
 800b268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2200      	movs	r2, #0
 800b270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b274:	2300      	movs	r3, #0
 800b276:	e000      	b.n	800b27a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b278:	2302      	movs	r3, #2
  }
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	370c      	adds	r7, #12
 800b27e:	46bd      	mov	sp, r7
 800b280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b284:	4770      	bx	lr

0800b286 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b286:	b480      	push	{r7}
 800b288:	b085      	sub	sp, #20
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	6078      	str	r0, [r7, #4]
 800b28e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b296:	b2db      	uxtb	r3, r3
 800b298:	2b20      	cmp	r3, #32
 800b29a:	d139      	bne.n	800b310 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b2a2:	2b01      	cmp	r3, #1
 800b2a4:	d101      	bne.n	800b2aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b2a6:	2302      	movs	r3, #2
 800b2a8:	e033      	b.n	800b312 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2201      	movs	r2, #1
 800b2ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2224      	movs	r2, #36	; 0x24
 800b2b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	681a      	ldr	r2, [r3, #0]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f022 0201 	bic.w	r2, r2, #1
 800b2c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b2d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	021b      	lsls	r3, r3, #8
 800b2de:	68fa      	ldr	r2, [r7, #12]
 800b2e0:	4313      	orrs	r3, r2
 800b2e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	68fa      	ldr	r2, [r7, #12]
 800b2ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	681a      	ldr	r2, [r3, #0]
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	f042 0201 	orr.w	r2, r2, #1
 800b2fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2220      	movs	r2, #32
 800b300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2200      	movs	r2, #0
 800b308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b30c:	2300      	movs	r3, #0
 800b30e:	e000      	b.n	800b312 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b310:	2302      	movs	r3, #2
  }
}
 800b312:	4618      	mov	r0, r3
 800b314:	3714      	adds	r7, #20
 800b316:	46bd      	mov	sp, r7
 800b318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31c:	4770      	bx	lr

0800b31e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b31e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b320:	b08b      	sub	sp, #44	; 0x2c
 800b322:	af06      	add	r7, sp, #24
 800b324:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d101      	bne.n	800b330 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b32c:	2301      	movs	r3, #1
 800b32e:	e0d7      	b.n	800b4e0 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800b336:	b2db      	uxtb	r3, r3
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d106      	bne.n	800b34a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2200      	movs	r2, #0
 800b340:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f00c fb29 	bl	801799c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2203      	movs	r2, #3
 800b34e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	4618      	mov	r0, r3
 800b358:	f006 f955 	bl	8011606 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b35c:	2300      	movs	r3, #0
 800b35e:	73fb      	strb	r3, [r7, #15]
 800b360:	e04c      	b.n	800b3fc <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b362:	7bfb      	ldrb	r3, [r7, #15]
 800b364:	6879      	ldr	r1, [r7, #4]
 800b366:	1c5a      	adds	r2, r3, #1
 800b368:	4613      	mov	r3, r2
 800b36a:	009b      	lsls	r3, r3, #2
 800b36c:	4413      	add	r3, r2
 800b36e:	00db      	lsls	r3, r3, #3
 800b370:	440b      	add	r3, r1
 800b372:	3301      	adds	r3, #1
 800b374:	2201      	movs	r2, #1
 800b376:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b378:	7bfb      	ldrb	r3, [r7, #15]
 800b37a:	6879      	ldr	r1, [r7, #4]
 800b37c:	1c5a      	adds	r2, r3, #1
 800b37e:	4613      	mov	r3, r2
 800b380:	009b      	lsls	r3, r3, #2
 800b382:	4413      	add	r3, r2
 800b384:	00db      	lsls	r3, r3, #3
 800b386:	440b      	add	r3, r1
 800b388:	7bfa      	ldrb	r2, [r7, #15]
 800b38a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b38c:	7bfa      	ldrb	r2, [r7, #15]
 800b38e:	7bfb      	ldrb	r3, [r7, #15]
 800b390:	b298      	uxth	r0, r3
 800b392:	6879      	ldr	r1, [r7, #4]
 800b394:	4613      	mov	r3, r2
 800b396:	009b      	lsls	r3, r3, #2
 800b398:	4413      	add	r3, r2
 800b39a:	00db      	lsls	r3, r3, #3
 800b39c:	440b      	add	r3, r1
 800b39e:	3336      	adds	r3, #54	; 0x36
 800b3a0:	4602      	mov	r2, r0
 800b3a2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b3a4:	7bfb      	ldrb	r3, [r7, #15]
 800b3a6:	6879      	ldr	r1, [r7, #4]
 800b3a8:	1c5a      	adds	r2, r3, #1
 800b3aa:	4613      	mov	r3, r2
 800b3ac:	009b      	lsls	r3, r3, #2
 800b3ae:	4413      	add	r3, r2
 800b3b0:	00db      	lsls	r3, r3, #3
 800b3b2:	440b      	add	r3, r1
 800b3b4:	3303      	adds	r3, #3
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b3ba:	7bfa      	ldrb	r2, [r7, #15]
 800b3bc:	6879      	ldr	r1, [r7, #4]
 800b3be:	4613      	mov	r3, r2
 800b3c0:	009b      	lsls	r3, r3, #2
 800b3c2:	4413      	add	r3, r2
 800b3c4:	00db      	lsls	r3, r3, #3
 800b3c6:	440b      	add	r3, r1
 800b3c8:	3338      	adds	r3, #56	; 0x38
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b3ce:	7bfa      	ldrb	r2, [r7, #15]
 800b3d0:	6879      	ldr	r1, [r7, #4]
 800b3d2:	4613      	mov	r3, r2
 800b3d4:	009b      	lsls	r3, r3, #2
 800b3d6:	4413      	add	r3, r2
 800b3d8:	00db      	lsls	r3, r3, #3
 800b3da:	440b      	add	r3, r1
 800b3dc:	333c      	adds	r3, #60	; 0x3c
 800b3de:	2200      	movs	r2, #0
 800b3e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b3e2:	7bfa      	ldrb	r2, [r7, #15]
 800b3e4:	6879      	ldr	r1, [r7, #4]
 800b3e6:	4613      	mov	r3, r2
 800b3e8:	009b      	lsls	r3, r3, #2
 800b3ea:	4413      	add	r3, r2
 800b3ec:	00db      	lsls	r3, r3, #3
 800b3ee:	440b      	add	r3, r1
 800b3f0:	3340      	adds	r3, #64	; 0x40
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b3f6:	7bfb      	ldrb	r3, [r7, #15]
 800b3f8:	3301      	adds	r3, #1
 800b3fa:	73fb      	strb	r3, [r7, #15]
 800b3fc:	7bfa      	ldrb	r2, [r7, #15]
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	685b      	ldr	r3, [r3, #4]
 800b402:	429a      	cmp	r2, r3
 800b404:	d3ad      	bcc.n	800b362 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b406:	2300      	movs	r3, #0
 800b408:	73fb      	strb	r3, [r7, #15]
 800b40a:	e044      	b.n	800b496 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b40c:	7bfa      	ldrb	r2, [r7, #15]
 800b40e:	6879      	ldr	r1, [r7, #4]
 800b410:	4613      	mov	r3, r2
 800b412:	009b      	lsls	r3, r3, #2
 800b414:	4413      	add	r3, r2
 800b416:	00db      	lsls	r3, r3, #3
 800b418:	440b      	add	r3, r1
 800b41a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800b41e:	2200      	movs	r2, #0
 800b420:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b422:	7bfa      	ldrb	r2, [r7, #15]
 800b424:	6879      	ldr	r1, [r7, #4]
 800b426:	4613      	mov	r3, r2
 800b428:	009b      	lsls	r3, r3, #2
 800b42a:	4413      	add	r3, r2
 800b42c:	00db      	lsls	r3, r3, #3
 800b42e:	440b      	add	r3, r1
 800b430:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b434:	7bfa      	ldrb	r2, [r7, #15]
 800b436:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b438:	7bfa      	ldrb	r2, [r7, #15]
 800b43a:	6879      	ldr	r1, [r7, #4]
 800b43c:	4613      	mov	r3, r2
 800b43e:	009b      	lsls	r3, r3, #2
 800b440:	4413      	add	r3, r2
 800b442:	00db      	lsls	r3, r3, #3
 800b444:	440b      	add	r3, r1
 800b446:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800b44a:	2200      	movs	r2, #0
 800b44c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b44e:	7bfa      	ldrb	r2, [r7, #15]
 800b450:	6879      	ldr	r1, [r7, #4]
 800b452:	4613      	mov	r3, r2
 800b454:	009b      	lsls	r3, r3, #2
 800b456:	4413      	add	r3, r2
 800b458:	00db      	lsls	r3, r3, #3
 800b45a:	440b      	add	r3, r1
 800b45c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800b460:	2200      	movs	r2, #0
 800b462:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b464:	7bfa      	ldrb	r2, [r7, #15]
 800b466:	6879      	ldr	r1, [r7, #4]
 800b468:	4613      	mov	r3, r2
 800b46a:	009b      	lsls	r3, r3, #2
 800b46c:	4413      	add	r3, r2
 800b46e:	00db      	lsls	r3, r3, #3
 800b470:	440b      	add	r3, r1
 800b472:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b476:	2200      	movs	r2, #0
 800b478:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b47a:	7bfa      	ldrb	r2, [r7, #15]
 800b47c:	6879      	ldr	r1, [r7, #4]
 800b47e:	4613      	mov	r3, r2
 800b480:	009b      	lsls	r3, r3, #2
 800b482:	4413      	add	r3, r2
 800b484:	00db      	lsls	r3, r3, #3
 800b486:	440b      	add	r3, r1
 800b488:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800b48c:	2200      	movs	r2, #0
 800b48e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b490:	7bfb      	ldrb	r3, [r7, #15]
 800b492:	3301      	adds	r3, #1
 800b494:	73fb      	strb	r3, [r7, #15]
 800b496:	7bfa      	ldrb	r2, [r7, #15]
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	685b      	ldr	r3, [r3, #4]
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d3b5      	bcc.n	800b40c <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	603b      	str	r3, [r7, #0]
 800b4a6:	687e      	ldr	r6, [r7, #4]
 800b4a8:	466d      	mov	r5, sp
 800b4aa:	f106 0410 	add.w	r4, r6, #16
 800b4ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b4b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b4b2:	6823      	ldr	r3, [r4, #0]
 800b4b4:	602b      	str	r3, [r5, #0]
 800b4b6:	1d33      	adds	r3, r6, #4
 800b4b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b4ba:	6838      	ldr	r0, [r7, #0]
 800b4bc:	f006 f8be 	bl	801163c <USB_DevInit>

  hpcd->USB_Address = 0U;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	69db      	ldr	r3, [r3, #28]
 800b4d4:	2b01      	cmp	r3, #1
 800b4d6:	d102      	bne.n	800b4de <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f001 fc29 	bl	800cd30 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800b4de:	2300      	movs	r3, #0
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3714      	adds	r7, #20
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b4e8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b082      	sub	sp, #8
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b4f6:	2b01      	cmp	r3, #1
 800b4f8:	d101      	bne.n	800b4fe <HAL_PCD_Start+0x16>
 800b4fa:	2302      	movs	r3, #2
 800b4fc:	e012      	b.n	800b524 <HAL_PCD_Start+0x3c>
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2201      	movs	r2, #1
 800b502:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	4618      	mov	r0, r3
 800b50c:	f006 f864 	bl	80115d8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	4618      	mov	r0, r3
 800b516:	f008 fa7d 	bl	8013a14 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2200      	movs	r2, #0
 800b51e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800b522:	2300      	movs	r3, #0
}
 800b524:	4618      	mov	r0, r3
 800b526:	3708      	adds	r7, #8
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b084      	sub	sp, #16
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4618      	mov	r0, r3
 800b53a:	f008 fa82 	bl	8013a42 <USB_ReadInterrupts>
 800b53e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b546:	2b00      	cmp	r3, #0
 800b548:	d003      	beq.n	800b552 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f000 fb26 	bl	800bb9c <PCD_EP_ISR_Handler>

    return;
 800b550:	e110      	b.n	800b774 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d013      	beq.n	800b584 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b564:	b29a      	uxth	r2, r3
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b56e:	b292      	uxth	r2, r2
 800b570:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f00c faa2 	bl	8017abe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800b57a:	2100      	movs	r1, #0
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f000 f8fc 	bl	800b77a <HAL_PCD_SetAddress>

    return;
 800b582:	e0f7      	b.n	800b774 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d00c      	beq.n	800b5a8 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b596:	b29a      	uxth	r2, r3
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b5a0:	b292      	uxth	r2, r2
 800b5a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800b5a6:	e0e5      	b.n	800b774 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d00c      	beq.n	800b5cc <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b5ba:	b29a      	uxth	r2, r3
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b5c4:	b292      	uxth	r2, r2
 800b5c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800b5ca:	e0d3      	b.n	800b774 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d034      	beq.n	800b640 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b5de:	b29a      	uxth	r2, r3
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	f022 0204 	bic.w	r2, r2, #4
 800b5e8:	b292      	uxth	r2, r2
 800b5ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b5f6:	b29a      	uxth	r2, r3
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f022 0208 	bic.w	r2, r2, #8
 800b600:	b292      	uxth	r2, r2
 800b602:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800b60c:	2b01      	cmp	r3, #1
 800b60e:	d107      	bne.n	800b620 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2200      	movs	r2, #0
 800b614:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b618:	2100      	movs	r1, #0
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f00c fc44 	bl	8017ea8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f00c fa85 	bl	8017b30 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b62e:	b29a      	uxth	r2, r3
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b638:	b292      	uxth	r2, r2
 800b63a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800b63e:	e099      	b.n	800b774 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b646:	2b00      	cmp	r3, #0
 800b648:	d027      	beq.n	800b69a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b652:	b29a      	uxth	r2, r3
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	f042 0208 	orr.w	r2, r2, #8
 800b65c:	b292      	uxth	r2, r2
 800b65e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b66a:	b29a      	uxth	r2, r3
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b674:	b292      	uxth	r2, r2
 800b676:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b682:	b29a      	uxth	r2, r3
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f042 0204 	orr.w	r2, r2, #4
 800b68c:	b292      	uxth	r2, r2
 800b68e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f00c fa32 	bl	8017afc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800b698:	e06c      	b.n	800b774 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d040      	beq.n	800b726 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b6ac:	b29a      	uxth	r2, r3
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b6b6:	b292      	uxth	r2, r2
 800b6b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d12b      	bne.n	800b71e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b6ce:	b29a      	uxth	r2, r3
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	f042 0204 	orr.w	r2, r2, #4
 800b6d8:	b292      	uxth	r2, r2
 800b6da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b6e6:	b29a      	uxth	r2, r3
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	f042 0208 	orr.w	r2, r2, #8
 800b6f0:	b292      	uxth	r2, r2
 800b6f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2201      	movs	r2, #1
 800b6fa:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800b706:	b29b      	uxth	r3, r3
 800b708:	089b      	lsrs	r3, r3, #2
 800b70a:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800b714:	2101      	movs	r1, #1
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f00c fbc6 	bl	8017ea8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800b71c:	e02a      	b.n	800b774 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f00c f9ec 	bl	8017afc <HAL_PCD_SuspendCallback>
    return;
 800b724:	e026      	b.n	800b774 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d00f      	beq.n	800b750 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b738:	b29a      	uxth	r2, r3
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b742:	b292      	uxth	r2, r2
 800b744:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f00c f9aa 	bl	8017aa2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800b74e:	e011      	b.n	800b774 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b756:	2b00      	cmp	r3, #0
 800b758:	d00c      	beq.n	800b774 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b762:	b29a      	uxth	r2, r3
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b76c:	b292      	uxth	r2, r2
 800b76e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800b772:	bf00      	nop
  }
}
 800b774:	3710      	adds	r7, #16
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}

0800b77a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b77a:	b580      	push	{r7, lr}
 800b77c:	b082      	sub	sp, #8
 800b77e:	af00      	add	r7, sp, #0
 800b780:	6078      	str	r0, [r7, #4]
 800b782:	460b      	mov	r3, r1
 800b784:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b78c:	2b01      	cmp	r3, #1
 800b78e:	d101      	bne.n	800b794 <HAL_PCD_SetAddress+0x1a>
 800b790:	2302      	movs	r3, #2
 800b792:	e013      	b.n	800b7bc <HAL_PCD_SetAddress+0x42>
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2201      	movs	r2, #1
 800b798:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	78fa      	ldrb	r2, [r7, #3]
 800b7a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	78fa      	ldrb	r2, [r7, #3]
 800b7aa:	4611      	mov	r1, r2
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f008 f91d 	bl	80139ec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800b7ba:	2300      	movs	r3, #0
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3708      	adds	r7, #8
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}

0800b7c4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b084      	sub	sp, #16
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	4608      	mov	r0, r1
 800b7ce:	4611      	mov	r1, r2
 800b7d0:	461a      	mov	r2, r3
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	70fb      	strb	r3, [r7, #3]
 800b7d6:	460b      	mov	r3, r1
 800b7d8:	803b      	strh	r3, [r7, #0]
 800b7da:	4613      	mov	r3, r2
 800b7dc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b7e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	da0e      	bge.n	800b808 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b7ea:	78fb      	ldrb	r3, [r7, #3]
 800b7ec:	f003 0307 	and.w	r3, r3, #7
 800b7f0:	1c5a      	adds	r2, r3, #1
 800b7f2:	4613      	mov	r3, r2
 800b7f4:	009b      	lsls	r3, r3, #2
 800b7f6:	4413      	add	r3, r2
 800b7f8:	00db      	lsls	r3, r3, #3
 800b7fa:	687a      	ldr	r2, [r7, #4]
 800b7fc:	4413      	add	r3, r2
 800b7fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	2201      	movs	r2, #1
 800b804:	705a      	strb	r2, [r3, #1]
 800b806:	e00e      	b.n	800b826 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b808:	78fb      	ldrb	r3, [r7, #3]
 800b80a:	f003 0207 	and.w	r2, r3, #7
 800b80e:	4613      	mov	r3, r2
 800b810:	009b      	lsls	r3, r3, #2
 800b812:	4413      	add	r3, r2
 800b814:	00db      	lsls	r3, r3, #3
 800b816:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b81a:	687a      	ldr	r2, [r7, #4]
 800b81c:	4413      	add	r3, r2
 800b81e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	2200      	movs	r2, #0
 800b824:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b826:	78fb      	ldrb	r3, [r7, #3]
 800b828:	f003 0307 	and.w	r3, r3, #7
 800b82c:	b2da      	uxtb	r2, r3
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800b832:	883a      	ldrh	r2, [r7, #0]
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	78ba      	ldrb	r2, [r7, #2]
 800b83c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	785b      	ldrb	r3, [r3, #1]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d004      	beq.n	800b850 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	781b      	ldrb	r3, [r3, #0]
 800b84a:	b29a      	uxth	r2, r3
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b850:	78bb      	ldrb	r3, [r7, #2]
 800b852:	2b02      	cmp	r3, #2
 800b854:	d102      	bne.n	800b85c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2200      	movs	r2, #0
 800b85a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b862:	2b01      	cmp	r3, #1
 800b864:	d101      	bne.n	800b86a <HAL_PCD_EP_Open+0xa6>
 800b866:	2302      	movs	r3, #2
 800b868:	e00e      	b.n	800b888 <HAL_PCD_EP_Open+0xc4>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2201      	movs	r2, #1
 800b86e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	68f9      	ldr	r1, [r7, #12]
 800b878:	4618      	mov	r0, r3
 800b87a:	f005 ff01 	bl	8011680 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2200      	movs	r2, #0
 800b882:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800b886:	7afb      	ldrb	r3, [r7, #11]
}
 800b888:	4618      	mov	r0, r3
 800b88a:	3710      	adds	r7, #16
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}

0800b890 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b084      	sub	sp, #16
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
 800b898:	460b      	mov	r3, r1
 800b89a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b89c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	da0e      	bge.n	800b8c2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b8a4:	78fb      	ldrb	r3, [r7, #3]
 800b8a6:	f003 0307 	and.w	r3, r3, #7
 800b8aa:	1c5a      	adds	r2, r3, #1
 800b8ac:	4613      	mov	r3, r2
 800b8ae:	009b      	lsls	r3, r3, #2
 800b8b0:	4413      	add	r3, r2
 800b8b2:	00db      	lsls	r3, r3, #3
 800b8b4:	687a      	ldr	r2, [r7, #4]
 800b8b6:	4413      	add	r3, r2
 800b8b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	2201      	movs	r2, #1
 800b8be:	705a      	strb	r2, [r3, #1]
 800b8c0:	e00e      	b.n	800b8e0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b8c2:	78fb      	ldrb	r3, [r7, #3]
 800b8c4:	f003 0207 	and.w	r2, r3, #7
 800b8c8:	4613      	mov	r3, r2
 800b8ca:	009b      	lsls	r3, r3, #2
 800b8cc:	4413      	add	r3, r2
 800b8ce:	00db      	lsls	r3, r3, #3
 800b8d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b8d4:	687a      	ldr	r2, [r7, #4]
 800b8d6:	4413      	add	r3, r2
 800b8d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800b8e0:	78fb      	ldrb	r3, [r7, #3]
 800b8e2:	f003 0307 	and.w	r3, r3, #7
 800b8e6:	b2da      	uxtb	r2, r3
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b8f2:	2b01      	cmp	r3, #1
 800b8f4:	d101      	bne.n	800b8fa <HAL_PCD_EP_Close+0x6a>
 800b8f6:	2302      	movs	r3, #2
 800b8f8:	e00e      	b.n	800b918 <HAL_PCD_EP_Close+0x88>
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2201      	movs	r2, #1
 800b8fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	68f9      	ldr	r1, [r7, #12]
 800b908:	4618      	mov	r0, r3
 800b90a:	f006 fa4d 	bl	8011da8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2200      	movs	r2, #0
 800b912:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800b916:	2300      	movs	r3, #0
}
 800b918:	4618      	mov	r0, r3
 800b91a:	3710      	adds	r7, #16
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}

0800b920 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b086      	sub	sp, #24
 800b924:	af00      	add	r7, sp, #0
 800b926:	60f8      	str	r0, [r7, #12]
 800b928:	607a      	str	r2, [r7, #4]
 800b92a:	603b      	str	r3, [r7, #0]
 800b92c:	460b      	mov	r3, r1
 800b92e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b930:	7afb      	ldrb	r3, [r7, #11]
 800b932:	f003 0207 	and.w	r2, r3, #7
 800b936:	4613      	mov	r3, r2
 800b938:	009b      	lsls	r3, r3, #2
 800b93a:	4413      	add	r3, r2
 800b93c:	00db      	lsls	r3, r3, #3
 800b93e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b942:	68fa      	ldr	r2, [r7, #12]
 800b944:	4413      	add	r3, r2
 800b946:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	687a      	ldr	r2, [r7, #4]
 800b94c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	683a      	ldr	r2, [r7, #0]
 800b952:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	2200      	movs	r2, #0
 800b958:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	2200      	movs	r2, #0
 800b95e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b960:	7afb      	ldrb	r3, [r7, #11]
 800b962:	f003 0307 	and.w	r3, r3, #7
 800b966:	b2da      	uxtb	r2, r3
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b96c:	7afb      	ldrb	r3, [r7, #11]
 800b96e:	f003 0307 	and.w	r3, r3, #7
 800b972:	2b00      	cmp	r3, #0
 800b974:	d106      	bne.n	800b984 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	6979      	ldr	r1, [r7, #20]
 800b97c:	4618      	mov	r0, r3
 800b97e:	f006 fc00 	bl	8012182 <USB_EPStartXfer>
 800b982:	e005      	b.n	800b990 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	6979      	ldr	r1, [r7, #20]
 800b98a:	4618      	mov	r0, r3
 800b98c:	f006 fbf9 	bl	8012182 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b990:	2300      	movs	r3, #0
}
 800b992:	4618      	mov	r0, r3
 800b994:	3718      	adds	r7, #24
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}

0800b99a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b99a:	b480      	push	{r7}
 800b99c:	b083      	sub	sp, #12
 800b99e:	af00      	add	r7, sp, #0
 800b9a0:	6078      	str	r0, [r7, #4]
 800b9a2:	460b      	mov	r3, r1
 800b9a4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b9a6:	78fb      	ldrb	r3, [r7, #3]
 800b9a8:	f003 0207 	and.w	r2, r3, #7
 800b9ac:	6879      	ldr	r1, [r7, #4]
 800b9ae:	4613      	mov	r3, r2
 800b9b0:	009b      	lsls	r3, r3, #2
 800b9b2:	4413      	add	r3, r2
 800b9b4:	00db      	lsls	r3, r3, #3
 800b9b6:	440b      	add	r3, r1
 800b9b8:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800b9bc:	681b      	ldr	r3, [r3, #0]
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	370c      	adds	r7, #12
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c8:	4770      	bx	lr

0800b9ca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b9ca:	b580      	push	{r7, lr}
 800b9cc:	b086      	sub	sp, #24
 800b9ce:	af00      	add	r7, sp, #0
 800b9d0:	60f8      	str	r0, [r7, #12]
 800b9d2:	607a      	str	r2, [r7, #4]
 800b9d4:	603b      	str	r3, [r7, #0]
 800b9d6:	460b      	mov	r3, r1
 800b9d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b9da:	7afb      	ldrb	r3, [r7, #11]
 800b9dc:	f003 0307 	and.w	r3, r3, #7
 800b9e0:	1c5a      	adds	r2, r3, #1
 800b9e2:	4613      	mov	r3, r2
 800b9e4:	009b      	lsls	r3, r3, #2
 800b9e6:	4413      	add	r3, r2
 800b9e8:	00db      	lsls	r3, r3, #3
 800b9ea:	68fa      	ldr	r2, [r7, #12]
 800b9ec:	4413      	add	r3, r2
 800b9ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	687a      	ldr	r2, [r7, #4]
 800b9f4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800b9f6:	697b      	ldr	r3, [r7, #20]
 800b9f8:	683a      	ldr	r2, [r7, #0]
 800b9fa:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	2201      	movs	r2, #1
 800ba00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	683a      	ldr	r2, [r7, #0]
 800ba08:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	2201      	movs	r2, #1
 800ba14:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ba16:	7afb      	ldrb	r3, [r7, #11]
 800ba18:	f003 0307 	and.w	r3, r3, #7
 800ba1c:	b2da      	uxtb	r2, r3
 800ba1e:	697b      	ldr	r3, [r7, #20]
 800ba20:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ba22:	7afb      	ldrb	r3, [r7, #11]
 800ba24:	f003 0307 	and.w	r3, r3, #7
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d106      	bne.n	800ba3a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	6979      	ldr	r1, [r7, #20]
 800ba32:	4618      	mov	r0, r3
 800ba34:	f006 fba5 	bl	8012182 <USB_EPStartXfer>
 800ba38:	e005      	b.n	800ba46 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	6979      	ldr	r1, [r7, #20]
 800ba40:	4618      	mov	r0, r3
 800ba42:	f006 fb9e 	bl	8012182 <USB_EPStartXfer>
  }

  return HAL_OK;
 800ba46:	2300      	movs	r3, #0
}
 800ba48:	4618      	mov	r0, r3
 800ba4a:	3718      	adds	r7, #24
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}

0800ba50 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b084      	sub	sp, #16
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
 800ba58:	460b      	mov	r3, r1
 800ba5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800ba5c:	78fb      	ldrb	r3, [r7, #3]
 800ba5e:	f003 0207 	and.w	r2, r3, #7
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	685b      	ldr	r3, [r3, #4]
 800ba66:	429a      	cmp	r2, r3
 800ba68:	d901      	bls.n	800ba6e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	e03e      	b.n	800baec <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ba6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	da0e      	bge.n	800ba94 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ba76:	78fb      	ldrb	r3, [r7, #3]
 800ba78:	f003 0307 	and.w	r3, r3, #7
 800ba7c:	1c5a      	adds	r2, r3, #1
 800ba7e:	4613      	mov	r3, r2
 800ba80:	009b      	lsls	r3, r3, #2
 800ba82:	4413      	add	r3, r2
 800ba84:	00db      	lsls	r3, r3, #3
 800ba86:	687a      	ldr	r2, [r7, #4]
 800ba88:	4413      	add	r3, r2
 800ba8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	2201      	movs	r2, #1
 800ba90:	705a      	strb	r2, [r3, #1]
 800ba92:	e00c      	b.n	800baae <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ba94:	78fa      	ldrb	r2, [r7, #3]
 800ba96:	4613      	mov	r3, r2
 800ba98:	009b      	lsls	r3, r3, #2
 800ba9a:	4413      	add	r3, r2
 800ba9c:	00db      	lsls	r3, r3, #3
 800ba9e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800baa2:	687a      	ldr	r2, [r7, #4]
 800baa4:	4413      	add	r3, r2
 800baa6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	2200      	movs	r2, #0
 800baac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	2201      	movs	r2, #1
 800bab2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bab4:	78fb      	ldrb	r3, [r7, #3]
 800bab6:	f003 0307 	and.w	r3, r3, #7
 800baba:	b2da      	uxtb	r2, r3
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800bac6:	2b01      	cmp	r3, #1
 800bac8:	d101      	bne.n	800bace <HAL_PCD_EP_SetStall+0x7e>
 800baca:	2302      	movs	r3, #2
 800bacc:	e00e      	b.n	800baec <HAL_PCD_EP_SetStall+0x9c>
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2201      	movs	r2, #1
 800bad2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	68f9      	ldr	r1, [r7, #12]
 800badc:	4618      	mov	r0, r3
 800bade:	f007 fe86 	bl	80137ee <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2200      	movs	r2, #0
 800bae6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800baea:	2300      	movs	r3, #0
}
 800baec:	4618      	mov	r0, r3
 800baee:	3710      	adds	r7, #16
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}

0800baf4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b084      	sub	sp, #16
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
 800bafc:	460b      	mov	r3, r1
 800bafe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800bb00:	78fb      	ldrb	r3, [r7, #3]
 800bb02:	f003 020f 	and.w	r2, r3, #15
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	685b      	ldr	r3, [r3, #4]
 800bb0a:	429a      	cmp	r2, r3
 800bb0c:	d901      	bls.n	800bb12 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800bb0e:	2301      	movs	r3, #1
 800bb10:	e040      	b.n	800bb94 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800bb12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	da0e      	bge.n	800bb38 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bb1a:	78fb      	ldrb	r3, [r7, #3]
 800bb1c:	f003 0307 	and.w	r3, r3, #7
 800bb20:	1c5a      	adds	r2, r3, #1
 800bb22:	4613      	mov	r3, r2
 800bb24:	009b      	lsls	r3, r3, #2
 800bb26:	4413      	add	r3, r2
 800bb28:	00db      	lsls	r3, r3, #3
 800bb2a:	687a      	ldr	r2, [r7, #4]
 800bb2c:	4413      	add	r3, r2
 800bb2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	2201      	movs	r2, #1
 800bb34:	705a      	strb	r2, [r3, #1]
 800bb36:	e00e      	b.n	800bb56 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bb38:	78fb      	ldrb	r3, [r7, #3]
 800bb3a:	f003 0207 	and.w	r2, r3, #7
 800bb3e:	4613      	mov	r3, r2
 800bb40:	009b      	lsls	r3, r3, #2
 800bb42:	4413      	add	r3, r2
 800bb44:	00db      	lsls	r3, r3, #3
 800bb46:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800bb4a:	687a      	ldr	r2, [r7, #4]
 800bb4c:	4413      	add	r3, r2
 800bb4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	2200      	movs	r2, #0
 800bb54:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bb5c:	78fb      	ldrb	r3, [r7, #3]
 800bb5e:	f003 0307 	and.w	r3, r3, #7
 800bb62:	b2da      	uxtb	r2, r3
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800bb6e:	2b01      	cmp	r3, #1
 800bb70:	d101      	bne.n	800bb76 <HAL_PCD_EP_ClrStall+0x82>
 800bb72:	2302      	movs	r3, #2
 800bb74:	e00e      	b.n	800bb94 <HAL_PCD_EP_ClrStall+0xa0>
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2201      	movs	r2, #1
 800bb7a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	68f9      	ldr	r1, [r7, #12]
 800bb84:	4618      	mov	r0, r3
 800bb86:	f007 fe83 	bl	8013890 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800bb92:	2300      	movs	r3, #0
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	3710      	adds	r7, #16
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}

0800bb9c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b096      	sub	sp, #88	; 0x58
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800bba4:	e39c      	b.n	800c2e0 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bbae:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800bbb2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800bbb6:	b2db      	uxtb	r3, r3
 800bbb8:	f003 030f 	and.w	r3, r3, #15
 800bbbc:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 800bbc0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	f040 815e 	bne.w	800be86 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800bbca:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800bbce:	f003 0310 	and.w	r3, r3, #16
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d150      	bne.n	800bc78 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	881b      	ldrh	r3, [r3, #0]
 800bbdc:	b29b      	uxth	r3, r3
 800bbde:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800bbe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbe6:	81fb      	strh	r3, [r7, #14]
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681a      	ldr	r2, [r3, #0]
 800bbec:	89fb      	ldrh	r3, [r7, #14]
 800bbee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bbf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bbf6:	b29b      	uxth	r3, r3
 800bbf8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	3328      	adds	r3, #40	; 0x28
 800bbfe:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc08:	b29b      	uxth	r3, r3
 800bc0a:	461a      	mov	r2, r3
 800bc0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc0e:	781b      	ldrb	r3, [r3, #0]
 800bc10:	00db      	lsls	r3, r3, #3
 800bc12:	4413      	add	r3, r2
 800bc14:	687a      	ldr	r2, [r7, #4]
 800bc16:	6812      	ldr	r2, [r2, #0]
 800bc18:	4413      	add	r3, r2
 800bc1a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bc1e:	881b      	ldrh	r3, [r3, #0]
 800bc20:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800bc24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc26:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800bc28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc2a:	695a      	ldr	r2, [r3, #20]
 800bc2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc2e:	69db      	ldr	r3, [r3, #28]
 800bc30:	441a      	add	r2, r3
 800bc32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc34:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800bc36:	2100      	movs	r1, #0
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f00b ff18 	bl	8017a6e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bc44:	b2db      	uxtb	r3, r3
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	f000 834a 	beq.w	800c2e0 <PCD_EP_ISR_Handler+0x744>
 800bc4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc4e:	699b      	ldr	r3, [r3, #24]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	f040 8345 	bne.w	800c2e0 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bc5c:	b2db      	uxtb	r3, r3
 800bc5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bc62:	b2da      	uxtb	r2, r3
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	b292      	uxth	r2, r2
 800bc6a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2200      	movs	r2, #0
 800bc72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800bc76:	e333      	b.n	800c2e0 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800bc7e:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	881b      	ldrh	r3, [r3, #0]
 800bc86:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800bc8a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800bc8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d032      	beq.n	800bcfc <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc9e:	b29b      	uxth	r3, r3
 800bca0:	461a      	mov	r2, r3
 800bca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bca4:	781b      	ldrb	r3, [r3, #0]
 800bca6:	00db      	lsls	r3, r3, #3
 800bca8:	4413      	add	r3, r2
 800bcaa:	687a      	ldr	r2, [r7, #4]
 800bcac:	6812      	ldr	r2, [r2, #0]
 800bcae:	4413      	add	r3, r2
 800bcb0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bcb4:	881b      	ldrh	r3, [r3, #0]
 800bcb6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800bcba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcbc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6818      	ldr	r0, [r3, #0]
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800bcc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcca:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800bccc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcce:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800bcd0:	b29b      	uxth	r3, r3
 800bcd2:	f007 ff08 	bl	8013ae6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	881b      	ldrh	r3, [r3, #0]
 800bcdc:	b29a      	uxth	r2, r3
 800bcde:	f640 738f 	movw	r3, #3983	; 0xf8f
 800bce2:	4013      	ands	r3, r2
 800bce4:	823b      	strh	r3, [r7, #16]
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	8a3a      	ldrh	r2, [r7, #16]
 800bcec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bcf0:	b292      	uxth	r2, r2
 800bcf2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f00b fe8d 	bl	8017a14 <HAL_PCD_SetupStageCallback>
 800bcfa:	e2f1      	b.n	800c2e0 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800bcfc:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	f280 82ed 	bge.w	800c2e0 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	881b      	ldrh	r3, [r3, #0]
 800bd0c:	b29a      	uxth	r2, r3
 800bd0e:	f640 738f 	movw	r3, #3983	; 0xf8f
 800bd12:	4013      	ands	r3, r2
 800bd14:	83fb      	strh	r3, [r7, #30]
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	8bfa      	ldrh	r2, [r7, #30]
 800bd1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bd20:	b292      	uxth	r2, r2
 800bd22:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd2c:	b29b      	uxth	r3, r3
 800bd2e:	461a      	mov	r2, r3
 800bd30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd32:	781b      	ldrb	r3, [r3, #0]
 800bd34:	00db      	lsls	r3, r3, #3
 800bd36:	4413      	add	r3, r2
 800bd38:	687a      	ldr	r2, [r7, #4]
 800bd3a:	6812      	ldr	r2, [r2, #0]
 800bd3c:	4413      	add	r3, r2
 800bd3e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bd42:	881b      	ldrh	r3, [r3, #0]
 800bd44:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800bd48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd4a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800bd4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd4e:	69db      	ldr	r3, [r3, #28]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d019      	beq.n	800bd88 <PCD_EP_ISR_Handler+0x1ec>
 800bd54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd56:	695b      	ldr	r3, [r3, #20]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d015      	beq.n	800bd88 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6818      	ldr	r0, [r3, #0]
 800bd60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd62:	6959      	ldr	r1, [r3, #20]
 800bd64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd66:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800bd68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd6a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800bd6c:	b29b      	uxth	r3, r3
 800bd6e:	f007 feba 	bl	8013ae6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800bd72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd74:	695a      	ldr	r2, [r3, #20]
 800bd76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd78:	69db      	ldr	r3, [r3, #28]
 800bd7a:	441a      	add	r2, r3
 800bd7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd7e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800bd80:	2100      	movs	r1, #0
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	f00b fe58 	bl	8017a38 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	881b      	ldrh	r3, [r3, #0]
 800bd8e:	b29b      	uxth	r3, r3
 800bd90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	f040 82a3 	bne.w	800c2e0 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	61bb      	str	r3, [r7, #24]
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bda8:	b29b      	uxth	r3, r3
 800bdaa:	461a      	mov	r2, r3
 800bdac:	69bb      	ldr	r3, [r7, #24]
 800bdae:	4413      	add	r3, r2
 800bdb0:	61bb      	str	r3, [r7, #24]
 800bdb2:	69bb      	ldr	r3, [r7, #24]
 800bdb4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bdb8:	617b      	str	r3, [r7, #20]
 800bdba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdbc:	691b      	ldr	r3, [r3, #16]
 800bdbe:	2b3e      	cmp	r3, #62	; 0x3e
 800bdc0:	d918      	bls.n	800bdf4 <PCD_EP_ISR_Handler+0x258>
 800bdc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdc4:	691b      	ldr	r3, [r3, #16]
 800bdc6:	095b      	lsrs	r3, r3, #5
 800bdc8:	647b      	str	r3, [r7, #68]	; 0x44
 800bdca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdcc:	691b      	ldr	r3, [r3, #16]
 800bdce:	f003 031f 	and.w	r3, r3, #31
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d102      	bne.n	800bddc <PCD_EP_ISR_Handler+0x240>
 800bdd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdd8:	3b01      	subs	r3, #1
 800bdda:	647b      	str	r3, [r7, #68]	; 0x44
 800bddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdde:	b29b      	uxth	r3, r3
 800bde0:	029b      	lsls	r3, r3, #10
 800bde2:	b29b      	uxth	r3, r3
 800bde4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bde8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bdec:	b29a      	uxth	r2, r3
 800bdee:	697b      	ldr	r3, [r7, #20]
 800bdf0:	801a      	strh	r2, [r3, #0]
 800bdf2:	e029      	b.n	800be48 <PCD_EP_ISR_Handler+0x2ac>
 800bdf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdf6:	691b      	ldr	r3, [r3, #16]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d112      	bne.n	800be22 <PCD_EP_ISR_Handler+0x286>
 800bdfc:	697b      	ldr	r3, [r7, #20]
 800bdfe:	881b      	ldrh	r3, [r3, #0]
 800be00:	b29b      	uxth	r3, r3
 800be02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800be06:	b29a      	uxth	r2, r3
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	801a      	strh	r2, [r3, #0]
 800be0c:	697b      	ldr	r3, [r7, #20]
 800be0e:	881b      	ldrh	r3, [r3, #0]
 800be10:	b29b      	uxth	r3, r3
 800be12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be1a:	b29a      	uxth	r2, r3
 800be1c:	697b      	ldr	r3, [r7, #20]
 800be1e:	801a      	strh	r2, [r3, #0]
 800be20:	e012      	b.n	800be48 <PCD_EP_ISR_Handler+0x2ac>
 800be22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be24:	691b      	ldr	r3, [r3, #16]
 800be26:	085b      	lsrs	r3, r3, #1
 800be28:	647b      	str	r3, [r7, #68]	; 0x44
 800be2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be2c:	691b      	ldr	r3, [r3, #16]
 800be2e:	f003 0301 	and.w	r3, r3, #1
 800be32:	2b00      	cmp	r3, #0
 800be34:	d002      	beq.n	800be3c <PCD_EP_ISR_Handler+0x2a0>
 800be36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be38:	3301      	adds	r3, #1
 800be3a:	647b      	str	r3, [r7, #68]	; 0x44
 800be3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be3e:	b29b      	uxth	r3, r3
 800be40:	029b      	lsls	r3, r3, #10
 800be42:	b29a      	uxth	r2, r3
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	881b      	ldrh	r3, [r3, #0]
 800be4e:	b29b      	uxth	r3, r3
 800be50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800be54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be58:	827b      	strh	r3, [r7, #18]
 800be5a:	8a7b      	ldrh	r3, [r7, #18]
 800be5c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800be60:	827b      	strh	r3, [r7, #18]
 800be62:	8a7b      	ldrh	r3, [r7, #18]
 800be64:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800be68:	827b      	strh	r3, [r7, #18]
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681a      	ldr	r2, [r3, #0]
 800be6e:	8a7b      	ldrh	r3, [r7, #18]
 800be70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be80:	b29b      	uxth	r3, r3
 800be82:	8013      	strh	r3, [r2, #0]
 800be84:	e22c      	b.n	800c2e0 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	461a      	mov	r2, r3
 800be8c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800be90:	009b      	lsls	r3, r3, #2
 800be92:	4413      	add	r3, r2
 800be94:	881b      	ldrh	r3, [r3, #0]
 800be96:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800be9a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	f280 80f6 	bge.w	800c090 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	461a      	mov	r2, r3
 800beaa:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800beae:	009b      	lsls	r3, r3, #2
 800beb0:	4413      	add	r3, r2
 800beb2:	881b      	ldrh	r3, [r3, #0]
 800beb4:	b29a      	uxth	r2, r3
 800beb6:	f640 738f 	movw	r3, #3983	; 0xf8f
 800beba:	4013      	ands	r3, r2
 800bebc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	461a      	mov	r2, r3
 800bec6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800beca:	009b      	lsls	r3, r3, #2
 800becc:	4413      	add	r3, r2
 800bece:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800bed2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bed6:	b292      	uxth	r2, r2
 800bed8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800beda:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800bede:	4613      	mov	r3, r2
 800bee0:	009b      	lsls	r3, r3, #2
 800bee2:	4413      	add	r3, r2
 800bee4:	00db      	lsls	r3, r3, #3
 800bee6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800beea:	687a      	ldr	r2, [r7, #4]
 800beec:	4413      	add	r3, r2
 800beee:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800bef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bef2:	7b1b      	ldrb	r3, [r3, #12]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d123      	bne.n	800bf40 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf00:	b29b      	uxth	r3, r3
 800bf02:	461a      	mov	r2, r3
 800bf04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf06:	781b      	ldrb	r3, [r3, #0]
 800bf08:	00db      	lsls	r3, r3, #3
 800bf0a:	4413      	add	r3, r2
 800bf0c:	687a      	ldr	r2, [r7, #4]
 800bf0e:	6812      	ldr	r2, [r2, #0]
 800bf10:	4413      	add	r3, r2
 800bf12:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bf16:	881b      	ldrh	r3, [r3, #0]
 800bf18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bf1c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 800bf20:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	f000 808e 	beq.w	800c046 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6818      	ldr	r0, [r3, #0]
 800bf2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf30:	6959      	ldr	r1, [r3, #20]
 800bf32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf34:	88da      	ldrh	r2, [r3, #6]
 800bf36:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800bf3a:	f007 fdd4 	bl	8013ae6 <USB_ReadPMA>
 800bf3e:	e082      	b.n	800c046 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800bf40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf42:	78db      	ldrb	r3, [r3, #3]
 800bf44:	2b02      	cmp	r3, #2
 800bf46:	d10a      	bne.n	800bf5e <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800bf48:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800bf4c:	461a      	mov	r2, r3
 800bf4e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	f000 f9d3 	bl	800c2fc <HAL_PCD_EP_DB_Receive>
 800bf56:	4603      	mov	r3, r0
 800bf58:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800bf5c:	e073      	b.n	800c046 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	461a      	mov	r2, r3
 800bf64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf66:	781b      	ldrb	r3, [r3, #0]
 800bf68:	009b      	lsls	r3, r3, #2
 800bf6a:	4413      	add	r3, r2
 800bf6c:	881b      	ldrh	r3, [r3, #0]
 800bf6e:	b29b      	uxth	r3, r3
 800bf70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bf74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf78:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	461a      	mov	r2, r3
 800bf82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf84:	781b      	ldrb	r3, [r3, #0]
 800bf86:	009b      	lsls	r3, r3, #2
 800bf88:	441a      	add	r2, r3
 800bf8a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800bf8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bf92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bf96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bf9e:	b29b      	uxth	r3, r3
 800bfa0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	461a      	mov	r2, r3
 800bfa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfaa:	781b      	ldrb	r3, [r3, #0]
 800bfac:	009b      	lsls	r3, r3, #2
 800bfae:	4413      	add	r3, r2
 800bfb0:	881b      	ldrh	r3, [r3, #0]
 800bfb2:	b29b      	uxth	r3, r3
 800bfb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d022      	beq.n	800c002 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bfc4:	b29b      	uxth	r3, r3
 800bfc6:	461a      	mov	r2, r3
 800bfc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfca:	781b      	ldrb	r3, [r3, #0]
 800bfcc:	00db      	lsls	r3, r3, #3
 800bfce:	4413      	add	r3, r2
 800bfd0:	687a      	ldr	r2, [r7, #4]
 800bfd2:	6812      	ldr	r2, [r2, #0]
 800bfd4:	4413      	add	r3, r2
 800bfd6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bfda:	881b      	ldrh	r3, [r3, #0]
 800bfdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bfe0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800bfe4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d02c      	beq.n	800c046 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6818      	ldr	r0, [r3, #0]
 800bff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bff2:	6959      	ldr	r1, [r3, #20]
 800bff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bff6:	891a      	ldrh	r2, [r3, #8]
 800bff8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800bffc:	f007 fd73 	bl	8013ae6 <USB_ReadPMA>
 800c000:	e021      	b.n	800c046 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c00a:	b29b      	uxth	r3, r3
 800c00c:	461a      	mov	r2, r3
 800c00e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c010:	781b      	ldrb	r3, [r3, #0]
 800c012:	00db      	lsls	r3, r3, #3
 800c014:	4413      	add	r3, r2
 800c016:	687a      	ldr	r2, [r7, #4]
 800c018:	6812      	ldr	r2, [r2, #0]
 800c01a:	4413      	add	r3, r2
 800c01c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c020:	881b      	ldrh	r3, [r3, #0]
 800c022:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c026:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800c02a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d009      	beq.n	800c046 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6818      	ldr	r0, [r3, #0]
 800c036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c038:	6959      	ldr	r1, [r3, #20]
 800c03a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c03c:	895a      	ldrh	r2, [r3, #10]
 800c03e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800c042:	f007 fd50 	bl	8013ae6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800c046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c048:	69da      	ldr	r2, [r3, #28]
 800c04a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800c04e:	441a      	add	r2, r3
 800c050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c052:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800c054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c056:	695a      	ldr	r2, [r3, #20]
 800c058:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800c05c:	441a      	add	r2, r3
 800c05e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c060:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800c062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c064:	699b      	ldr	r3, [r3, #24]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d005      	beq.n	800c076 <PCD_EP_ISR_Handler+0x4da>
 800c06a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800c06e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c070:	691b      	ldr	r3, [r3, #16]
 800c072:	429a      	cmp	r2, r3
 800c074:	d206      	bcs.n	800c084 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800c076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c078:	781b      	ldrb	r3, [r3, #0]
 800c07a:	4619      	mov	r1, r3
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f00b fcdb 	bl	8017a38 <HAL_PCD_DataOutStageCallback>
 800c082:	e005      	b.n	800c090 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c08a:	4618      	mov	r0, r3
 800c08c:	f006 f879 	bl	8012182 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800c090:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800c094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c098:	2b00      	cmp	r3, #0
 800c09a:	f000 8121 	beq.w	800c2e0 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 800c09e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800c0a2:	1c5a      	adds	r2, r3, #1
 800c0a4:	4613      	mov	r3, r2
 800c0a6:	009b      	lsls	r3, r3, #2
 800c0a8:	4413      	add	r3, r2
 800c0aa:	00db      	lsls	r3, r3, #3
 800c0ac:	687a      	ldr	r2, [r7, #4]
 800c0ae:	4413      	add	r3, r2
 800c0b0:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	461a      	mov	r2, r3
 800c0b8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800c0bc:	009b      	lsls	r3, r3, #2
 800c0be:	4413      	add	r3, r2
 800c0c0:	881b      	ldrh	r3, [r3, #0]
 800c0c2:	b29b      	uxth	r3, r3
 800c0c4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800c0c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0cc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	461a      	mov	r2, r3
 800c0d6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800c0da:	009b      	lsls	r3, r3, #2
 800c0dc:	441a      	add	r2, r3
 800c0de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c0e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c0e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c0ea:	b29b      	uxth	r3, r3
 800c0ec:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 800c0ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0f0:	78db      	ldrb	r3, [r3, #3]
 800c0f2:	2b02      	cmp	r3, #2
 800c0f4:	f000 80a2 	beq.w	800c23c <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 800c0f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800c0fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c100:	7b1b      	ldrb	r3, [r3, #12]
 800c102:	2b00      	cmp	r3, #0
 800c104:	f000 8093 	beq.w	800c22e <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800c108:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800c10c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c110:	2b00      	cmp	r3, #0
 800c112:	d046      	beq.n	800c1a2 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c116:	785b      	ldrb	r3, [r3, #1]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d126      	bne.n	800c16a <PCD_EP_ISR_Handler+0x5ce>
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	627b      	str	r3, [r7, #36]	; 0x24
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c12a:	b29b      	uxth	r3, r3
 800c12c:	461a      	mov	r2, r3
 800c12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c130:	4413      	add	r3, r2
 800c132:	627b      	str	r3, [r7, #36]	; 0x24
 800c134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c136:	781b      	ldrb	r3, [r3, #0]
 800c138:	00da      	lsls	r2, r3, #3
 800c13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c13c:	4413      	add	r3, r2
 800c13e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c142:	623b      	str	r3, [r7, #32]
 800c144:	6a3b      	ldr	r3, [r7, #32]
 800c146:	881b      	ldrh	r3, [r3, #0]
 800c148:	b29b      	uxth	r3, r3
 800c14a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c14e:	b29a      	uxth	r2, r3
 800c150:	6a3b      	ldr	r3, [r7, #32]
 800c152:	801a      	strh	r2, [r3, #0]
 800c154:	6a3b      	ldr	r3, [r7, #32]
 800c156:	881b      	ldrh	r3, [r3, #0]
 800c158:	b29b      	uxth	r3, r3
 800c15a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c15e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c162:	b29a      	uxth	r2, r3
 800c164:	6a3b      	ldr	r3, [r7, #32]
 800c166:	801a      	strh	r2, [r3, #0]
 800c168:	e061      	b.n	800c22e <PCD_EP_ISR_Handler+0x692>
 800c16a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c16c:	785b      	ldrb	r3, [r3, #1]
 800c16e:	2b01      	cmp	r3, #1
 800c170:	d15d      	bne.n	800c22e <PCD_EP_ISR_Handler+0x692>
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c180:	b29b      	uxth	r3, r3
 800c182:	461a      	mov	r2, r3
 800c184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c186:	4413      	add	r3, r2
 800c188:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c18a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c18c:	781b      	ldrb	r3, [r3, #0]
 800c18e:	00da      	lsls	r2, r3, #3
 800c190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c192:	4413      	add	r3, r2
 800c194:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c198:	62bb      	str	r3, [r7, #40]	; 0x28
 800c19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c19c:	2200      	movs	r2, #0
 800c19e:	801a      	strh	r2, [r3, #0]
 800c1a0:	e045      	b.n	800c22e <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1aa:	785b      	ldrb	r3, [r3, #1]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d126      	bne.n	800c1fe <PCD_EP_ISR_Handler+0x662>
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	637b      	str	r3, [r7, #52]	; 0x34
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c1be:	b29b      	uxth	r3, r3
 800c1c0:	461a      	mov	r2, r3
 800c1c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1c4:	4413      	add	r3, r2
 800c1c6:	637b      	str	r3, [r7, #52]	; 0x34
 800c1c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1ca:	781b      	ldrb	r3, [r3, #0]
 800c1cc:	00da      	lsls	r2, r3, #3
 800c1ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1d0:	4413      	add	r3, r2
 800c1d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c1d6:	633b      	str	r3, [r7, #48]	; 0x30
 800c1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1da:	881b      	ldrh	r3, [r3, #0]
 800c1dc:	b29b      	uxth	r3, r3
 800c1de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c1e2:	b29a      	uxth	r2, r3
 800c1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e6:	801a      	strh	r2, [r3, #0]
 800c1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ea:	881b      	ldrh	r3, [r3, #0]
 800c1ec:	b29b      	uxth	r3, r3
 800c1ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c1f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1f6:	b29a      	uxth	r2, r3
 800c1f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1fa:	801a      	strh	r2, [r3, #0]
 800c1fc:	e017      	b.n	800c22e <PCD_EP_ISR_Handler+0x692>
 800c1fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c200:	785b      	ldrb	r3, [r3, #1]
 800c202:	2b01      	cmp	r3, #1
 800c204:	d113      	bne.n	800c22e <PCD_EP_ISR_Handler+0x692>
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c20e:	b29b      	uxth	r3, r3
 800c210:	461a      	mov	r2, r3
 800c212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c214:	4413      	add	r3, r2
 800c216:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c21a:	781b      	ldrb	r3, [r3, #0]
 800c21c:	00da      	lsls	r2, r3, #3
 800c21e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c220:	4413      	add	r3, r2
 800c222:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c226:	63bb      	str	r3, [r7, #56]	; 0x38
 800c228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c22a:	2200      	movs	r2, #0
 800c22c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c22e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c230:	781b      	ldrb	r3, [r3, #0]
 800c232:	4619      	mov	r1, r3
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f00b fc1a 	bl	8017a6e <HAL_PCD_DataInStageCallback>
 800c23a:	e051      	b.n	800c2e0 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800c23c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800c240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c244:	2b00      	cmp	r3, #0
 800c246:	d144      	bne.n	800c2d2 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c250:	b29b      	uxth	r3, r3
 800c252:	461a      	mov	r2, r3
 800c254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c256:	781b      	ldrb	r3, [r3, #0]
 800c258:	00db      	lsls	r3, r3, #3
 800c25a:	4413      	add	r3, r2
 800c25c:	687a      	ldr	r2, [r7, #4]
 800c25e:	6812      	ldr	r2, [r2, #0]
 800c260:	4413      	add	r3, r2
 800c262:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c266:	881b      	ldrh	r3, [r3, #0]
 800c268:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c26c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800c270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c272:	699a      	ldr	r2, [r3, #24]
 800c274:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c278:	429a      	cmp	r2, r3
 800c27a:	d907      	bls.n	800c28c <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 800c27c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c27e:	699a      	ldr	r2, [r3, #24]
 800c280:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c284:	1ad2      	subs	r2, r2, r3
 800c286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c288:	619a      	str	r2, [r3, #24]
 800c28a:	e002      	b.n	800c292 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 800c28c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c28e:	2200      	movs	r2, #0
 800c290:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800c292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c294:	699b      	ldr	r3, [r3, #24]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d106      	bne.n	800c2a8 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c29a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c29c:	781b      	ldrb	r3, [r3, #0]
 800c29e:	4619      	mov	r1, r3
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f00b fbe4 	bl	8017a6e <HAL_PCD_DataInStageCallback>
 800c2a6:	e01b      	b.n	800c2e0 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800c2a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2aa:	695a      	ldr	r2, [r3, #20]
 800c2ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c2b0:	441a      	add	r2, r3
 800c2b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2b4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800c2b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2b8:	69da      	ldr	r2, [r3, #28]
 800c2ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c2be:	441a      	add	r2, r3
 800c2c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2c2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f005 ff59 	bl	8012182 <USB_EPStartXfer>
 800c2d0:	e006      	b.n	800c2e0 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800c2d2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800c2d6:	461a      	mov	r2, r3
 800c2d8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f000 f917 	bl	800c50e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c2e8:	b29b      	uxth	r3, r3
 800c2ea:	b21b      	sxth	r3, r3
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	f6ff ac5a 	blt.w	800bba6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800c2f2:	2300      	movs	r3, #0
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	3758      	adds	r7, #88	; 0x58
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}

0800c2fc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b088      	sub	sp, #32
 800c300:	af00      	add	r7, sp, #0
 800c302:	60f8      	str	r0, [r7, #12]
 800c304:	60b9      	str	r1, [r7, #8]
 800c306:	4613      	mov	r3, r2
 800c308:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c30a:	88fb      	ldrh	r3, [r7, #6]
 800c30c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c310:	2b00      	cmp	r3, #0
 800c312:	d07c      	beq.n	800c40e <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c31c:	b29b      	uxth	r3, r3
 800c31e:	461a      	mov	r2, r3
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	781b      	ldrb	r3, [r3, #0]
 800c324:	00db      	lsls	r3, r3, #3
 800c326:	4413      	add	r3, r2
 800c328:	68fa      	ldr	r2, [r7, #12]
 800c32a:	6812      	ldr	r2, [r2, #0]
 800c32c:	4413      	add	r3, r2
 800c32e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c332:	881b      	ldrh	r3, [r3, #0]
 800c334:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c338:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	699a      	ldr	r2, [r3, #24]
 800c33e:	8b7b      	ldrh	r3, [r7, #26]
 800c340:	429a      	cmp	r2, r3
 800c342:	d306      	bcc.n	800c352 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	699a      	ldr	r2, [r3, #24]
 800c348:	8b7b      	ldrh	r3, [r7, #26]
 800c34a:	1ad2      	subs	r2, r2, r3
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	619a      	str	r2, [r3, #24]
 800c350:	e002      	b.n	800c358 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800c352:	68bb      	ldr	r3, [r7, #8]
 800c354:	2200      	movs	r2, #0
 800c356:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	699b      	ldr	r3, [r3, #24]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d123      	bne.n	800c3a8 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	461a      	mov	r2, r3
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	781b      	ldrb	r3, [r3, #0]
 800c36a:	009b      	lsls	r3, r3, #2
 800c36c:	4413      	add	r3, r2
 800c36e:	881b      	ldrh	r3, [r3, #0]
 800c370:	b29b      	uxth	r3, r3
 800c372:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c37a:	833b      	strh	r3, [r7, #24]
 800c37c:	8b3b      	ldrh	r3, [r7, #24]
 800c37e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c382:	833b      	strh	r3, [r7, #24]
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	461a      	mov	r2, r3
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	781b      	ldrb	r3, [r3, #0]
 800c38e:	009b      	lsls	r3, r3, #2
 800c390:	441a      	add	r2, r3
 800c392:	8b3b      	ldrh	r3, [r7, #24]
 800c394:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c398:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c39c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c3a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3a4:	b29b      	uxth	r3, r3
 800c3a6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800c3a8:	88fb      	ldrh	r3, [r7, #6]
 800c3aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d01f      	beq.n	800c3f2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	461a      	mov	r2, r3
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	781b      	ldrb	r3, [r3, #0]
 800c3bc:	009b      	lsls	r3, r3, #2
 800c3be:	4413      	add	r3, r2
 800c3c0:	881b      	ldrh	r3, [r3, #0]
 800c3c2:	b29b      	uxth	r3, r3
 800c3c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c3c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c3cc:	82fb      	strh	r3, [r7, #22]
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	461a      	mov	r2, r3
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	781b      	ldrb	r3, [r3, #0]
 800c3d8:	009b      	lsls	r3, r3, #2
 800c3da:	441a      	add	r2, r3
 800c3dc:	8afb      	ldrh	r3, [r7, #22]
 800c3de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c3e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c3e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c3ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c3ee:	b29b      	uxth	r3, r3
 800c3f0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800c3f2:	8b7b      	ldrh	r3, [r7, #26]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	f000 8085 	beq.w	800c504 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	6818      	ldr	r0, [r3, #0]
 800c3fe:	68bb      	ldr	r3, [r7, #8]
 800c400:	6959      	ldr	r1, [r3, #20]
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	891a      	ldrh	r2, [r3, #8]
 800c406:	8b7b      	ldrh	r3, [r7, #26]
 800c408:	f007 fb6d 	bl	8013ae6 <USB_ReadPMA>
 800c40c:	e07a      	b.n	800c504 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c416:	b29b      	uxth	r3, r3
 800c418:	461a      	mov	r2, r3
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	781b      	ldrb	r3, [r3, #0]
 800c41e:	00db      	lsls	r3, r3, #3
 800c420:	4413      	add	r3, r2
 800c422:	68fa      	ldr	r2, [r7, #12]
 800c424:	6812      	ldr	r2, [r2, #0]
 800c426:	4413      	add	r3, r2
 800c428:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c42c:	881b      	ldrh	r3, [r3, #0]
 800c42e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c432:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	699a      	ldr	r2, [r3, #24]
 800c438:	8b7b      	ldrh	r3, [r7, #26]
 800c43a:	429a      	cmp	r2, r3
 800c43c:	d306      	bcc.n	800c44c <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800c43e:	68bb      	ldr	r3, [r7, #8]
 800c440:	699a      	ldr	r2, [r3, #24]
 800c442:	8b7b      	ldrh	r3, [r7, #26]
 800c444:	1ad2      	subs	r2, r2, r3
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	619a      	str	r2, [r3, #24]
 800c44a:	e002      	b.n	800c452 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	2200      	movs	r2, #0
 800c450:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	699b      	ldr	r3, [r3, #24]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d123      	bne.n	800c4a2 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	461a      	mov	r2, r3
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	781b      	ldrb	r3, [r3, #0]
 800c464:	009b      	lsls	r3, r3, #2
 800c466:	4413      	add	r3, r2
 800c468:	881b      	ldrh	r3, [r3, #0]
 800c46a:	b29b      	uxth	r3, r3
 800c46c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c474:	83fb      	strh	r3, [r7, #30]
 800c476:	8bfb      	ldrh	r3, [r7, #30]
 800c478:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c47c:	83fb      	strh	r3, [r7, #30]
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	461a      	mov	r2, r3
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	781b      	ldrb	r3, [r3, #0]
 800c488:	009b      	lsls	r3, r3, #2
 800c48a:	441a      	add	r2, r3
 800c48c:	8bfb      	ldrh	r3, [r7, #30]
 800c48e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c492:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c49a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c49e:	b29b      	uxth	r3, r3
 800c4a0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800c4a2:	88fb      	ldrh	r3, [r7, #6]
 800c4a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d11f      	bne.n	800c4ec <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	461a      	mov	r2, r3
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	781b      	ldrb	r3, [r3, #0]
 800c4b6:	009b      	lsls	r3, r3, #2
 800c4b8:	4413      	add	r3, r2
 800c4ba:	881b      	ldrh	r3, [r3, #0]
 800c4bc:	b29b      	uxth	r3, r3
 800c4be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c4c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c4c6:	83bb      	strh	r3, [r7, #28]
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	461a      	mov	r2, r3
 800c4ce:	68bb      	ldr	r3, [r7, #8]
 800c4d0:	781b      	ldrb	r3, [r3, #0]
 800c4d2:	009b      	lsls	r3, r3, #2
 800c4d4:	441a      	add	r2, r3
 800c4d6:	8bbb      	ldrh	r3, [r7, #28]
 800c4d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c4dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c4e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c4e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c4e8:	b29b      	uxth	r3, r3
 800c4ea:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800c4ec:	8b7b      	ldrh	r3, [r7, #26]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d008      	beq.n	800c504 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	6818      	ldr	r0, [r3, #0]
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	6959      	ldr	r1, [r3, #20]
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	895a      	ldrh	r2, [r3, #10]
 800c4fe:	8b7b      	ldrh	r3, [r7, #26]
 800c500:	f007 faf1 	bl	8013ae6 <USB_ReadPMA>
    }
  }

  return count;
 800c504:	8b7b      	ldrh	r3, [r7, #26]
}
 800c506:	4618      	mov	r0, r3
 800c508:	3720      	adds	r7, #32
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}

0800c50e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800c50e:	b580      	push	{r7, lr}
 800c510:	b0a2      	sub	sp, #136	; 0x88
 800c512:	af00      	add	r7, sp, #0
 800c514:	60f8      	str	r0, [r7, #12]
 800c516:	60b9      	str	r1, [r7, #8]
 800c518:	4613      	mov	r3, r2
 800c51a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800c51c:	88fb      	ldrh	r3, [r7, #6]
 800c51e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c522:	2b00      	cmp	r3, #0
 800c524:	f000 81c5 	beq.w	800c8b2 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c530:	b29b      	uxth	r3, r3
 800c532:	461a      	mov	r2, r3
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	781b      	ldrb	r3, [r3, #0]
 800c538:	00db      	lsls	r3, r3, #3
 800c53a:	4413      	add	r3, r2
 800c53c:	68fa      	ldr	r2, [r7, #12]
 800c53e:	6812      	ldr	r2, [r2, #0]
 800c540:	4413      	add	r3, r2
 800c542:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c546:	881b      	ldrh	r3, [r3, #0]
 800c548:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c54c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	699a      	ldr	r2, [r3, #24]
 800c554:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c558:	429a      	cmp	r2, r3
 800c55a:	d907      	bls.n	800c56c <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	699a      	ldr	r2, [r3, #24]
 800c560:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c564:	1ad2      	subs	r2, r2, r3
 800c566:	68bb      	ldr	r3, [r7, #8]
 800c568:	619a      	str	r2, [r3, #24]
 800c56a:	e002      	b.n	800c572 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	2200      	movs	r2, #0
 800c570:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800c572:	68bb      	ldr	r3, [r7, #8]
 800c574:	699b      	ldr	r3, [r3, #24]
 800c576:	2b00      	cmp	r3, #0
 800c578:	f040 80b9 	bne.w	800c6ee <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	785b      	ldrb	r3, [r3, #1]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d126      	bne.n	800c5d2 <HAL_PCD_EP_DB_Transmit+0xc4>
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	62bb      	str	r3, [r7, #40]	; 0x28
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c592:	b29b      	uxth	r3, r3
 800c594:	461a      	mov	r2, r3
 800c596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c598:	4413      	add	r3, r2
 800c59a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	781b      	ldrb	r3, [r3, #0]
 800c5a0:	00da      	lsls	r2, r3, #3
 800c5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5a4:	4413      	add	r3, r2
 800c5a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c5aa:	627b      	str	r3, [r7, #36]	; 0x24
 800c5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ae:	881b      	ldrh	r3, [r3, #0]
 800c5b0:	b29b      	uxth	r3, r3
 800c5b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c5b6:	b29a      	uxth	r2, r3
 800c5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ba:	801a      	strh	r2, [r3, #0]
 800c5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5be:	881b      	ldrh	r3, [r3, #0]
 800c5c0:	b29b      	uxth	r3, r3
 800c5c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c5c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c5ca:	b29a      	uxth	r2, r3
 800c5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ce:	801a      	strh	r2, [r3, #0]
 800c5d0:	e01a      	b.n	800c608 <HAL_PCD_EP_DB_Transmit+0xfa>
 800c5d2:	68bb      	ldr	r3, [r7, #8]
 800c5d4:	785b      	ldrb	r3, [r3, #1]
 800c5d6:	2b01      	cmp	r3, #1
 800c5d8:	d116      	bne.n	800c608 <HAL_PCD_EP_DB_Transmit+0xfa>
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	633b      	str	r3, [r7, #48]	; 0x30
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c5e8:	b29b      	uxth	r3, r3
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ee:	4413      	add	r3, r2
 800c5f0:	633b      	str	r3, [r7, #48]	; 0x30
 800c5f2:	68bb      	ldr	r3, [r7, #8]
 800c5f4:	781b      	ldrb	r3, [r3, #0]
 800c5f6:	00da      	lsls	r2, r3, #3
 800c5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5fa:	4413      	add	r3, r2
 800c5fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c600:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c604:	2200      	movs	r2, #0
 800c606:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	623b      	str	r3, [r7, #32]
 800c60e:	68bb      	ldr	r3, [r7, #8]
 800c610:	785b      	ldrb	r3, [r3, #1]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d126      	bne.n	800c664 <HAL_PCD_EP_DB_Transmit+0x156>
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	61bb      	str	r3, [r7, #24]
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c624:	b29b      	uxth	r3, r3
 800c626:	461a      	mov	r2, r3
 800c628:	69bb      	ldr	r3, [r7, #24]
 800c62a:	4413      	add	r3, r2
 800c62c:	61bb      	str	r3, [r7, #24]
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	781b      	ldrb	r3, [r3, #0]
 800c632:	00da      	lsls	r2, r3, #3
 800c634:	69bb      	ldr	r3, [r7, #24]
 800c636:	4413      	add	r3, r2
 800c638:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c63c:	617b      	str	r3, [r7, #20]
 800c63e:	697b      	ldr	r3, [r7, #20]
 800c640:	881b      	ldrh	r3, [r3, #0]
 800c642:	b29b      	uxth	r3, r3
 800c644:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c648:	b29a      	uxth	r2, r3
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	801a      	strh	r2, [r3, #0]
 800c64e:	697b      	ldr	r3, [r7, #20]
 800c650:	881b      	ldrh	r3, [r3, #0]
 800c652:	b29b      	uxth	r3, r3
 800c654:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c658:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c65c:	b29a      	uxth	r2, r3
 800c65e:	697b      	ldr	r3, [r7, #20]
 800c660:	801a      	strh	r2, [r3, #0]
 800c662:	e017      	b.n	800c694 <HAL_PCD_EP_DB_Transmit+0x186>
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	785b      	ldrb	r3, [r3, #1]
 800c668:	2b01      	cmp	r3, #1
 800c66a:	d113      	bne.n	800c694 <HAL_PCD_EP_DB_Transmit+0x186>
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c674:	b29b      	uxth	r3, r3
 800c676:	461a      	mov	r2, r3
 800c678:	6a3b      	ldr	r3, [r7, #32]
 800c67a:	4413      	add	r3, r2
 800c67c:	623b      	str	r3, [r7, #32]
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	781b      	ldrb	r3, [r3, #0]
 800c682:	00da      	lsls	r2, r3, #3
 800c684:	6a3b      	ldr	r3, [r7, #32]
 800c686:	4413      	add	r3, r2
 800c688:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c68c:	61fb      	str	r3, [r7, #28]
 800c68e:	69fb      	ldr	r3, [r7, #28]
 800c690:	2200      	movs	r2, #0
 800c692:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c694:	68bb      	ldr	r3, [r7, #8]
 800c696:	781b      	ldrb	r3, [r3, #0]
 800c698:	4619      	mov	r1, r3
 800c69a:	68f8      	ldr	r0, [r7, #12]
 800c69c:	f00b f9e7 	bl	8017a6e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c6a0:	88fb      	ldrh	r3, [r7, #6]
 800c6a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	f000 82d2 	beq.w	800cc50 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	461a      	mov	r2, r3
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	781b      	ldrb	r3, [r3, #0]
 800c6b6:	009b      	lsls	r3, r3, #2
 800c6b8:	4413      	add	r3, r2
 800c6ba:	881b      	ldrh	r3, [r3, #0]
 800c6bc:	b29b      	uxth	r3, r3
 800c6be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c6c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6c6:	827b      	strh	r3, [r7, #18]
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	461a      	mov	r2, r3
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	781b      	ldrb	r3, [r3, #0]
 800c6d2:	009b      	lsls	r3, r3, #2
 800c6d4:	441a      	add	r2, r3
 800c6d6:	8a7b      	ldrh	r3, [r7, #18]
 800c6d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c6dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c6e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c6e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6e8:	b29b      	uxth	r3, r3
 800c6ea:	8013      	strh	r3, [r2, #0]
 800c6ec:	e2b0      	b.n	800cc50 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c6ee:	88fb      	ldrh	r3, [r7, #6]
 800c6f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d021      	beq.n	800c73c <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	461a      	mov	r2, r3
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	781b      	ldrb	r3, [r3, #0]
 800c702:	009b      	lsls	r3, r3, #2
 800c704:	4413      	add	r3, r2
 800c706:	881b      	ldrh	r3, [r3, #0]
 800c708:	b29b      	uxth	r3, r3
 800c70a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c70e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c712:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	461a      	mov	r2, r3
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	781b      	ldrb	r3, [r3, #0]
 800c720:	009b      	lsls	r3, r3, #2
 800c722:	441a      	add	r2, r3
 800c724:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c728:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c72c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c730:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c738:	b29b      	uxth	r3, r3
 800c73a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c742:	2b01      	cmp	r3, #1
 800c744:	f040 8284 	bne.w	800cc50 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	695a      	ldr	r2, [r3, #20]
 800c74c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c750:	441a      	add	r2, r3
 800c752:	68bb      	ldr	r3, [r7, #8]
 800c754:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800c756:	68bb      	ldr	r3, [r7, #8]
 800c758:	69da      	ldr	r2, [r3, #28]
 800c75a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c75e:	441a      	add	r2, r3
 800c760:	68bb      	ldr	r3, [r7, #8]
 800c762:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	6a1a      	ldr	r2, [r3, #32]
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	691b      	ldr	r3, [r3, #16]
 800c76c:	429a      	cmp	r2, r3
 800c76e:	d309      	bcc.n	800c784 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	691b      	ldr	r3, [r3, #16]
 800c774:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	6a1a      	ldr	r2, [r3, #32]
 800c77a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c77c:	1ad2      	subs	r2, r2, r3
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	621a      	str	r2, [r3, #32]
 800c782:	e015      	b.n	800c7b0 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	6a1b      	ldr	r3, [r3, #32]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d107      	bne.n	800c79c <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800c78c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c790:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800c792:	68bb      	ldr	r3, [r7, #8]
 800c794:	2200      	movs	r2, #0
 800c796:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800c79a:	e009      	b.n	800c7b0 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	2200      	movs	r2, #0
 800c7a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	6a1b      	ldr	r3, [r3, #32]
 800c7a8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800c7b0:	68bb      	ldr	r3, [r7, #8]
 800c7b2:	785b      	ldrb	r3, [r3, #1]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d155      	bne.n	800c864 <HAL_PCD_EP_DB_Transmit+0x356>
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	63bb      	str	r3, [r7, #56]	; 0x38
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c7c6:	b29b      	uxth	r3, r3
 800c7c8:	461a      	mov	r2, r3
 800c7ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7cc:	4413      	add	r3, r2
 800c7ce:	63bb      	str	r3, [r7, #56]	; 0x38
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	00da      	lsls	r2, r3, #3
 800c7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d8:	4413      	add	r3, r2
 800c7da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c7de:	637b      	str	r3, [r7, #52]	; 0x34
 800c7e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7e2:	2b3e      	cmp	r3, #62	; 0x3e
 800c7e4:	d916      	bls.n	800c814 <HAL_PCD_EP_DB_Transmit+0x306>
 800c7e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7e8:	095b      	lsrs	r3, r3, #5
 800c7ea:	64bb      	str	r3, [r7, #72]	; 0x48
 800c7ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7ee:	f003 031f 	and.w	r3, r3, #31
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d102      	bne.n	800c7fc <HAL_PCD_EP_DB_Transmit+0x2ee>
 800c7f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c7f8:	3b01      	subs	r3, #1
 800c7fa:	64bb      	str	r3, [r7, #72]	; 0x48
 800c7fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c7fe:	b29b      	uxth	r3, r3
 800c800:	029b      	lsls	r3, r3, #10
 800c802:	b29b      	uxth	r3, r3
 800c804:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c808:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c80c:	b29a      	uxth	r2, r3
 800c80e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c810:	801a      	strh	r2, [r3, #0]
 800c812:	e043      	b.n	800c89c <HAL_PCD_EP_DB_Transmit+0x38e>
 800c814:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c816:	2b00      	cmp	r3, #0
 800c818:	d112      	bne.n	800c840 <HAL_PCD_EP_DB_Transmit+0x332>
 800c81a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c81c:	881b      	ldrh	r3, [r3, #0]
 800c81e:	b29b      	uxth	r3, r3
 800c820:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c824:	b29a      	uxth	r2, r3
 800c826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c828:	801a      	strh	r2, [r3, #0]
 800c82a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c82c:	881b      	ldrh	r3, [r3, #0]
 800c82e:	b29b      	uxth	r3, r3
 800c830:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c834:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c838:	b29a      	uxth	r2, r3
 800c83a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c83c:	801a      	strh	r2, [r3, #0]
 800c83e:	e02d      	b.n	800c89c <HAL_PCD_EP_DB_Transmit+0x38e>
 800c840:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c842:	085b      	lsrs	r3, r3, #1
 800c844:	64bb      	str	r3, [r7, #72]	; 0x48
 800c846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c848:	f003 0301 	and.w	r3, r3, #1
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d002      	beq.n	800c856 <HAL_PCD_EP_DB_Transmit+0x348>
 800c850:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c852:	3301      	adds	r3, #1
 800c854:	64bb      	str	r3, [r7, #72]	; 0x48
 800c856:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c858:	b29b      	uxth	r3, r3
 800c85a:	029b      	lsls	r3, r3, #10
 800c85c:	b29a      	uxth	r2, r3
 800c85e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c860:	801a      	strh	r2, [r3, #0]
 800c862:	e01b      	b.n	800c89c <HAL_PCD_EP_DB_Transmit+0x38e>
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	785b      	ldrb	r3, [r3, #1]
 800c868:	2b01      	cmp	r3, #1
 800c86a:	d117      	bne.n	800c89c <HAL_PCD_EP_DB_Transmit+0x38e>
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	643b      	str	r3, [r7, #64]	; 0x40
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c87a:	b29b      	uxth	r3, r3
 800c87c:	461a      	mov	r2, r3
 800c87e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c880:	4413      	add	r3, r2
 800c882:	643b      	str	r3, [r7, #64]	; 0x40
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	781b      	ldrb	r3, [r3, #0]
 800c888:	00da      	lsls	r2, r3, #3
 800c88a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c88c:	4413      	add	r3, r2
 800c88e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c892:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c894:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c896:	b29a      	uxth	r2, r3
 800c898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c89a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	6818      	ldr	r0, [r3, #0]
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	6959      	ldr	r1, [r3, #20]
 800c8a4:	68bb      	ldr	r3, [r7, #8]
 800c8a6:	891a      	ldrh	r2, [r3, #8]
 800c8a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8aa:	b29b      	uxth	r3, r3
 800c8ac:	f007 f8d9 	bl	8013a62 <USB_WritePMA>
 800c8b0:	e1ce      	b.n	800cc50 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c8ba:	b29b      	uxth	r3, r3
 800c8bc:	461a      	mov	r2, r3
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	781b      	ldrb	r3, [r3, #0]
 800c8c2:	00db      	lsls	r3, r3, #3
 800c8c4:	4413      	add	r3, r2
 800c8c6:	68fa      	ldr	r2, [r7, #12]
 800c8c8:	6812      	ldr	r2, [r2, #0]
 800c8ca:	4413      	add	r3, r2
 800c8cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c8d0:	881b      	ldrh	r3, [r3, #0]
 800c8d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c8d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	699a      	ldr	r2, [r3, #24]
 800c8de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d307      	bcc.n	800c8f6 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	699a      	ldr	r2, [r3, #24]
 800c8ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c8ee:	1ad2      	subs	r2, r2, r3
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	619a      	str	r2, [r3, #24]
 800c8f4:	e002      	b.n	800c8fc <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 800c8f6:	68bb      	ldr	r3, [r7, #8]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	699b      	ldr	r3, [r3, #24]
 800c900:	2b00      	cmp	r3, #0
 800c902:	f040 80c4 	bne.w	800ca8e <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	785b      	ldrb	r3, [r3, #1]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d126      	bne.n	800c95c <HAL_PCD_EP_DB_Transmit+0x44e>
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	66bb      	str	r3, [r7, #104]	; 0x68
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c91c:	b29b      	uxth	r3, r3
 800c91e:	461a      	mov	r2, r3
 800c920:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c922:	4413      	add	r3, r2
 800c924:	66bb      	str	r3, [r7, #104]	; 0x68
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	781b      	ldrb	r3, [r3, #0]
 800c92a:	00da      	lsls	r2, r3, #3
 800c92c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c92e:	4413      	add	r3, r2
 800c930:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c934:	667b      	str	r3, [r7, #100]	; 0x64
 800c936:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c938:	881b      	ldrh	r3, [r3, #0]
 800c93a:	b29b      	uxth	r3, r3
 800c93c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c940:	b29a      	uxth	r2, r3
 800c942:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c944:	801a      	strh	r2, [r3, #0]
 800c946:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c948:	881b      	ldrh	r3, [r3, #0]
 800c94a:	b29b      	uxth	r3, r3
 800c94c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c950:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c954:	b29a      	uxth	r2, r3
 800c956:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c958:	801a      	strh	r2, [r3, #0]
 800c95a:	e01a      	b.n	800c992 <HAL_PCD_EP_DB_Transmit+0x484>
 800c95c:	68bb      	ldr	r3, [r7, #8]
 800c95e:	785b      	ldrb	r3, [r3, #1]
 800c960:	2b01      	cmp	r3, #1
 800c962:	d116      	bne.n	800c992 <HAL_PCD_EP_DB_Transmit+0x484>
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	673b      	str	r3, [r7, #112]	; 0x70
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c972:	b29b      	uxth	r3, r3
 800c974:	461a      	mov	r2, r3
 800c976:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c978:	4413      	add	r3, r2
 800c97a:	673b      	str	r3, [r7, #112]	; 0x70
 800c97c:	68bb      	ldr	r3, [r7, #8]
 800c97e:	781b      	ldrb	r3, [r3, #0]
 800c980:	00da      	lsls	r2, r3, #3
 800c982:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c984:	4413      	add	r3, r2
 800c986:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c98a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c98c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c98e:	2200      	movs	r2, #0
 800c990:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	785b      	ldrb	r3, [r3, #1]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d12f      	bne.n	800ca00 <HAL_PCD_EP_DB_Transmit+0x4f2>
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c9b0:	b29b      	uxth	r3, r3
 800c9b2:	461a      	mov	r2, r3
 800c9b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c9b8:	4413      	add	r3, r2
 800c9ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c9be:	68bb      	ldr	r3, [r7, #8]
 800c9c0:	781b      	ldrb	r3, [r3, #0]
 800c9c2:	00da      	lsls	r2, r3, #3
 800c9c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c9c8:	4413      	add	r3, r2
 800c9ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c9ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c9d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c9d6:	881b      	ldrh	r3, [r3, #0]
 800c9d8:	b29b      	uxth	r3, r3
 800c9da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c9de:	b29a      	uxth	r2, r3
 800c9e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c9e4:	801a      	strh	r2, [r3, #0]
 800c9e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c9ea:	881b      	ldrh	r3, [r3, #0]
 800c9ec:	b29b      	uxth	r3, r3
 800c9ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c9f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c9f6:	b29a      	uxth	r2, r3
 800c9f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c9fc:	801a      	strh	r2, [r3, #0]
 800c9fe:	e017      	b.n	800ca30 <HAL_PCD_EP_DB_Transmit+0x522>
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	785b      	ldrb	r3, [r3, #1]
 800ca04:	2b01      	cmp	r3, #1
 800ca06:	d113      	bne.n	800ca30 <HAL_PCD_EP_DB_Transmit+0x522>
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ca10:	b29b      	uxth	r3, r3
 800ca12:	461a      	mov	r2, r3
 800ca14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ca16:	4413      	add	r3, r2
 800ca18:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	781b      	ldrb	r3, [r3, #0]
 800ca1e:	00da      	lsls	r2, r3, #3
 800ca20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ca22:	4413      	add	r3, r2
 800ca24:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ca28:	67bb      	str	r3, [r7, #120]	; 0x78
 800ca2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	781b      	ldrb	r3, [r3, #0]
 800ca34:	4619      	mov	r1, r3
 800ca36:	68f8      	ldr	r0, [r7, #12]
 800ca38:	f00b f819 	bl	8017a6e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800ca3c:	88fb      	ldrh	r3, [r7, #6]
 800ca3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	f040 8104 	bne.w	800cc50 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	461a      	mov	r2, r3
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	781b      	ldrb	r3, [r3, #0]
 800ca52:	009b      	lsls	r3, r3, #2
 800ca54:	4413      	add	r3, r2
 800ca56:	881b      	ldrh	r3, [r3, #0]
 800ca58:	b29b      	uxth	r3, r3
 800ca5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ca5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca62:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	461a      	mov	r2, r3
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	781b      	ldrb	r3, [r3, #0]
 800ca70:	009b      	lsls	r3, r3, #2
 800ca72:	441a      	add	r2, r3
 800ca74:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ca78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ca7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ca80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ca84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca88:	b29b      	uxth	r3, r3
 800ca8a:	8013      	strh	r3, [r2, #0]
 800ca8c:	e0e0      	b.n	800cc50 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800ca8e:	88fb      	ldrh	r3, [r7, #6]
 800ca90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d121      	bne.n	800cadc <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	461a      	mov	r2, r3
 800ca9e:	68bb      	ldr	r3, [r7, #8]
 800caa0:	781b      	ldrb	r3, [r3, #0]
 800caa2:	009b      	lsls	r3, r3, #2
 800caa4:	4413      	add	r3, r2
 800caa6:	881b      	ldrh	r3, [r3, #0]
 800caa8:	b29b      	uxth	r3, r3
 800caaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800caae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cab2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	461a      	mov	r2, r3
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	781b      	ldrb	r3, [r3, #0]
 800cac0:	009b      	lsls	r3, r3, #2
 800cac2:	441a      	add	r2, r3
 800cac4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800cac8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cacc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cad0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cad8:	b29b      	uxth	r3, r3
 800cada:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800cadc:	68bb      	ldr	r3, [r7, #8]
 800cade:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cae2:	2b01      	cmp	r3, #1
 800cae4:	f040 80b4 	bne.w	800cc50 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800cae8:	68bb      	ldr	r3, [r7, #8]
 800caea:	695a      	ldr	r2, [r3, #20]
 800caec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800caf0:	441a      	add	r2, r3
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800caf6:	68bb      	ldr	r3, [r7, #8]
 800caf8:	69da      	ldr	r2, [r3, #28]
 800cafa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800cafe:	441a      	add	r2, r3
 800cb00:	68bb      	ldr	r3, [r7, #8]
 800cb02:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800cb04:	68bb      	ldr	r3, [r7, #8]
 800cb06:	6a1a      	ldr	r2, [r3, #32]
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	691b      	ldr	r3, [r3, #16]
 800cb0c:	429a      	cmp	r2, r3
 800cb0e:	d309      	bcc.n	800cb24 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 800cb10:	68bb      	ldr	r3, [r7, #8]
 800cb12:	691b      	ldr	r3, [r3, #16]
 800cb14:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800cb16:	68bb      	ldr	r3, [r7, #8]
 800cb18:	6a1a      	ldr	r2, [r3, #32]
 800cb1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb1c:	1ad2      	subs	r2, r2, r3
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	621a      	str	r2, [r3, #32]
 800cb22:	e015      	b.n	800cb50 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	6a1b      	ldr	r3, [r3, #32]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d107      	bne.n	800cb3c <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 800cb2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800cb30:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	2200      	movs	r2, #0
 800cb36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800cb3a:	e009      	b.n	800cb50 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 800cb3c:	68bb      	ldr	r3, [r7, #8]
 800cb3e:	6a1b      	ldr	r3, [r3, #32]
 800cb40:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800cb42:	68bb      	ldr	r3, [r7, #8]
 800cb44:	2200      	movs	r2, #0
 800cb46:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800cb48:	68bb      	ldr	r3, [r7, #8]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	663b      	str	r3, [r7, #96]	; 0x60
 800cb56:	68bb      	ldr	r3, [r7, #8]
 800cb58:	785b      	ldrb	r3, [r3, #1]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d155      	bne.n	800cc0a <HAL_PCD_EP_DB_Transmit+0x6fc>
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	65bb      	str	r3, [r7, #88]	; 0x58
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cb6c:	b29b      	uxth	r3, r3
 800cb6e:	461a      	mov	r2, r3
 800cb70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cb72:	4413      	add	r3, r2
 800cb74:	65bb      	str	r3, [r7, #88]	; 0x58
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	781b      	ldrb	r3, [r3, #0]
 800cb7a:	00da      	lsls	r2, r3, #3
 800cb7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cb7e:	4413      	add	r3, r2
 800cb80:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cb84:	657b      	str	r3, [r7, #84]	; 0x54
 800cb86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb88:	2b3e      	cmp	r3, #62	; 0x3e
 800cb8a:	d916      	bls.n	800cbba <HAL_PCD_EP_DB_Transmit+0x6ac>
 800cb8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb8e:	095b      	lsrs	r3, r3, #5
 800cb90:	677b      	str	r3, [r7, #116]	; 0x74
 800cb92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb94:	f003 031f 	and.w	r3, r3, #31
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d102      	bne.n	800cba2 <HAL_PCD_EP_DB_Transmit+0x694>
 800cb9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cb9e:	3b01      	subs	r3, #1
 800cba0:	677b      	str	r3, [r7, #116]	; 0x74
 800cba2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cba4:	b29b      	uxth	r3, r3
 800cba6:	029b      	lsls	r3, r3, #10
 800cba8:	b29b      	uxth	r3, r3
 800cbaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cbae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cbb2:	b29a      	uxth	r2, r3
 800cbb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbb6:	801a      	strh	r2, [r3, #0]
 800cbb8:	e040      	b.n	800cc3c <HAL_PCD_EP_DB_Transmit+0x72e>
 800cbba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d112      	bne.n	800cbe6 <HAL_PCD_EP_DB_Transmit+0x6d8>
 800cbc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbc2:	881b      	ldrh	r3, [r3, #0]
 800cbc4:	b29b      	uxth	r3, r3
 800cbc6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800cbca:	b29a      	uxth	r2, r3
 800cbcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbce:	801a      	strh	r2, [r3, #0]
 800cbd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbd2:	881b      	ldrh	r3, [r3, #0]
 800cbd4:	b29b      	uxth	r3, r3
 800cbd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cbda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cbde:	b29a      	uxth	r2, r3
 800cbe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbe2:	801a      	strh	r2, [r3, #0]
 800cbe4:	e02a      	b.n	800cc3c <HAL_PCD_EP_DB_Transmit+0x72e>
 800cbe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbe8:	085b      	lsrs	r3, r3, #1
 800cbea:	677b      	str	r3, [r7, #116]	; 0x74
 800cbec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbee:	f003 0301 	and.w	r3, r3, #1
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d002      	beq.n	800cbfc <HAL_PCD_EP_DB_Transmit+0x6ee>
 800cbf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cbf8:	3301      	adds	r3, #1
 800cbfa:	677b      	str	r3, [r7, #116]	; 0x74
 800cbfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cbfe:	b29b      	uxth	r3, r3
 800cc00:	029b      	lsls	r3, r3, #10
 800cc02:	b29a      	uxth	r2, r3
 800cc04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc06:	801a      	strh	r2, [r3, #0]
 800cc08:	e018      	b.n	800cc3c <HAL_PCD_EP_DB_Transmit+0x72e>
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	785b      	ldrb	r3, [r3, #1]
 800cc0e:	2b01      	cmp	r3, #1
 800cc10:	d114      	bne.n	800cc3c <HAL_PCD_EP_DB_Transmit+0x72e>
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cc1a:	b29b      	uxth	r3, r3
 800cc1c:	461a      	mov	r2, r3
 800cc1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cc20:	4413      	add	r3, r2
 800cc22:	663b      	str	r3, [r7, #96]	; 0x60
 800cc24:	68bb      	ldr	r3, [r7, #8]
 800cc26:	781b      	ldrb	r3, [r3, #0]
 800cc28:	00da      	lsls	r2, r3, #3
 800cc2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cc2c:	4413      	add	r3, r2
 800cc2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cc32:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cc34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc36:	b29a      	uxth	r2, r3
 800cc38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc3a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	6818      	ldr	r0, [r3, #0]
 800cc40:	68bb      	ldr	r3, [r7, #8]
 800cc42:	6959      	ldr	r1, [r3, #20]
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	895a      	ldrh	r2, [r3, #10]
 800cc48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc4a:	b29b      	uxth	r3, r3
 800cc4c:	f006 ff09 	bl	8013a62 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	461a      	mov	r2, r3
 800cc56:	68bb      	ldr	r3, [r7, #8]
 800cc58:	781b      	ldrb	r3, [r3, #0]
 800cc5a:	009b      	lsls	r3, r3, #2
 800cc5c:	4413      	add	r3, r2
 800cc5e:	881b      	ldrh	r3, [r3, #0]
 800cc60:	b29b      	uxth	r3, r3
 800cc62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc6a:	823b      	strh	r3, [r7, #16]
 800cc6c:	8a3b      	ldrh	r3, [r7, #16]
 800cc6e:	f083 0310 	eor.w	r3, r3, #16
 800cc72:	823b      	strh	r3, [r7, #16]
 800cc74:	8a3b      	ldrh	r3, [r7, #16]
 800cc76:	f083 0320 	eor.w	r3, r3, #32
 800cc7a:	823b      	strh	r3, [r7, #16]
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	461a      	mov	r2, r3
 800cc82:	68bb      	ldr	r3, [r7, #8]
 800cc84:	781b      	ldrb	r3, [r3, #0]
 800cc86:	009b      	lsls	r3, r3, #2
 800cc88:	441a      	add	r2, r3
 800cc8a:	8a3b      	ldrh	r3, [r7, #16]
 800cc8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cc94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cc98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc9c:	b29b      	uxth	r3, r3
 800cc9e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800cca0:	2300      	movs	r3, #0
}
 800cca2:	4618      	mov	r0, r3
 800cca4:	3788      	adds	r7, #136	; 0x88
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd80      	pop	{r7, pc}

0800ccaa <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800ccaa:	b480      	push	{r7}
 800ccac:	b087      	sub	sp, #28
 800ccae:	af00      	add	r7, sp, #0
 800ccb0:	60f8      	str	r0, [r7, #12]
 800ccb2:	607b      	str	r3, [r7, #4]
 800ccb4:	460b      	mov	r3, r1
 800ccb6:	817b      	strh	r3, [r7, #10]
 800ccb8:	4613      	mov	r3, r2
 800ccba:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800ccbc:	897b      	ldrh	r3, [r7, #10]
 800ccbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccc2:	b29b      	uxth	r3, r3
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d00b      	beq.n	800cce0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ccc8:	897b      	ldrh	r3, [r7, #10]
 800ccca:	f003 0307 	and.w	r3, r3, #7
 800ccce:	1c5a      	adds	r2, r3, #1
 800ccd0:	4613      	mov	r3, r2
 800ccd2:	009b      	lsls	r3, r3, #2
 800ccd4:	4413      	add	r3, r2
 800ccd6:	00db      	lsls	r3, r3, #3
 800ccd8:	68fa      	ldr	r2, [r7, #12]
 800ccda:	4413      	add	r3, r2
 800ccdc:	617b      	str	r3, [r7, #20]
 800ccde:	e009      	b.n	800ccf4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800cce0:	897a      	ldrh	r2, [r7, #10]
 800cce2:	4613      	mov	r3, r2
 800cce4:	009b      	lsls	r3, r3, #2
 800cce6:	4413      	add	r3, r2
 800cce8:	00db      	lsls	r3, r3, #3
 800ccea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800ccee:	68fa      	ldr	r2, [r7, #12]
 800ccf0:	4413      	add	r3, r2
 800ccf2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800ccf4:	893b      	ldrh	r3, [r7, #8]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d107      	bne.n	800cd0a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800ccfa:	697b      	ldr	r3, [r7, #20]
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	b29a      	uxth	r2, r3
 800cd04:	697b      	ldr	r3, [r7, #20]
 800cd06:	80da      	strh	r2, [r3, #6]
 800cd08:	e00b      	b.n	800cd22 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800cd0a:	697b      	ldr	r3, [r7, #20]
 800cd0c:	2201      	movs	r2, #1
 800cd0e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	b29a      	uxth	r2, r3
 800cd14:	697b      	ldr	r3, [r7, #20]
 800cd16:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	0c1b      	lsrs	r3, r3, #16
 800cd1c:	b29a      	uxth	r2, r3
 800cd1e:	697b      	ldr	r3, [r7, #20]
 800cd20:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800cd22:	2300      	movs	r3, #0
}
 800cd24:	4618      	mov	r0, r3
 800cd26:	371c      	adds	r7, #28
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2e:	4770      	bx	lr

0800cd30 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800cd30:	b480      	push	{r7}
 800cd32:	b085      	sub	sp, #20
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	2201      	movs	r2, #1
 800cd42:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2200      	movs	r2, #0
 800cd4a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800cd54:	b29b      	uxth	r3, r3
 800cd56:	f043 0301 	orr.w	r3, r3, #1
 800cd5a:	b29a      	uxth	r2, r3
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800cd68:	b29b      	uxth	r3, r3
 800cd6a:	f043 0302 	orr.w	r3, r3, #2
 800cd6e:	b29a      	uxth	r2, r3
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800cd76:	2300      	movs	r3, #0
}
 800cd78:	4618      	mov	r0, r3
 800cd7a:	3714      	adds	r7, #20
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd82:	4770      	bx	lr

0800cd84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800cd84:	b480      	push	{r7}
 800cd86:	b085      	sub	sp, #20
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d141      	bne.n	800ce16 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800cd92:	4b4b      	ldr	r3, [pc, #300]	; (800cec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cd9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd9e:	d131      	bne.n	800ce04 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800cda0:	4b47      	ldr	r3, [pc, #284]	; (800cec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cda2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cda6:	4a46      	ldr	r2, [pc, #280]	; (800cec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cda8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cdac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800cdb0:	4b43      	ldr	r3, [pc, #268]	; (800cec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800cdb8:	4a41      	ldr	r2, [pc, #260]	; (800cec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cdba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cdbe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800cdc0:	4b40      	ldr	r3, [pc, #256]	; (800cec4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	2232      	movs	r2, #50	; 0x32
 800cdc6:	fb02 f303 	mul.w	r3, r2, r3
 800cdca:	4a3f      	ldr	r2, [pc, #252]	; (800cec8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800cdcc:	fba2 2303 	umull	r2, r3, r2, r3
 800cdd0:	0c9b      	lsrs	r3, r3, #18
 800cdd2:	3301      	adds	r3, #1
 800cdd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800cdd6:	e002      	b.n	800cdde <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	3b01      	subs	r3, #1
 800cddc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800cdde:	4b38      	ldr	r3, [pc, #224]	; (800cec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cde0:	695b      	ldr	r3, [r3, #20]
 800cde2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cde6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cdea:	d102      	bne.n	800cdf2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d1f2      	bne.n	800cdd8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800cdf2:	4b33      	ldr	r3, [pc, #204]	; (800cec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cdf4:	695b      	ldr	r3, [r3, #20]
 800cdf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cdfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cdfe:	d158      	bne.n	800ceb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800ce00:	2303      	movs	r3, #3
 800ce02:	e057      	b.n	800ceb4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ce04:	4b2e      	ldr	r3, [pc, #184]	; (800cec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ce06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ce0a:	4a2d      	ldr	r2, [pc, #180]	; (800cec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ce0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ce10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800ce14:	e04d      	b.n	800ceb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ce1c:	d141      	bne.n	800cea2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800ce1e:	4b28      	ldr	r3, [pc, #160]	; (800cec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ce26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ce2a:	d131      	bne.n	800ce90 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ce2c:	4b24      	ldr	r3, [pc, #144]	; (800cec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ce2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ce32:	4a23      	ldr	r2, [pc, #140]	; (800cec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ce34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800ce3c:	4b20      	ldr	r3, [pc, #128]	; (800cec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ce44:	4a1e      	ldr	r2, [pc, #120]	; (800cec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ce46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ce4a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800ce4c:	4b1d      	ldr	r3, [pc, #116]	; (800cec4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	2232      	movs	r2, #50	; 0x32
 800ce52:	fb02 f303 	mul.w	r3, r2, r3
 800ce56:	4a1c      	ldr	r2, [pc, #112]	; (800cec8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800ce58:	fba2 2303 	umull	r2, r3, r2, r3
 800ce5c:	0c9b      	lsrs	r3, r3, #18
 800ce5e:	3301      	adds	r3, #1
 800ce60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ce62:	e002      	b.n	800ce6a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	3b01      	subs	r3, #1
 800ce68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ce6a:	4b15      	ldr	r3, [pc, #84]	; (800cec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ce6c:	695b      	ldr	r3, [r3, #20]
 800ce6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ce72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ce76:	d102      	bne.n	800ce7e <HAL_PWREx_ControlVoltageScaling+0xfa>
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d1f2      	bne.n	800ce64 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800ce7e:	4b10      	ldr	r3, [pc, #64]	; (800cec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ce80:	695b      	ldr	r3, [r3, #20]
 800ce82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ce86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ce8a:	d112      	bne.n	800ceb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800ce8c:	2303      	movs	r3, #3
 800ce8e:	e011      	b.n	800ceb4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ce90:	4b0b      	ldr	r3, [pc, #44]	; (800cec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ce92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ce96:	4a0a      	ldr	r2, [pc, #40]	; (800cec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ce98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800cea0:	e007      	b.n	800ceb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800cea2:	4b07      	ldr	r3, [pc, #28]	; (800cec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ceaa:	4a05      	ldr	r2, [pc, #20]	; (800cec0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ceac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ceb0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800ceb2:	2300      	movs	r3, #0
}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	3714      	adds	r7, #20
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebe:	4770      	bx	lr
 800cec0:	40007000 	.word	0x40007000
 800cec4:	20000004 	.word	0x20000004
 800cec8:	431bde83 	.word	0x431bde83

0800cecc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b088      	sub	sp, #32
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d101      	bne.n	800cede <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ceda:	2301      	movs	r3, #1
 800cedc:	e306      	b.n	800d4ec <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	f003 0301 	and.w	r3, r3, #1
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d075      	beq.n	800cfd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ceea:	4b97      	ldr	r3, [pc, #604]	; (800d148 <HAL_RCC_OscConfig+0x27c>)
 800ceec:	689b      	ldr	r3, [r3, #8]
 800ceee:	f003 030c 	and.w	r3, r3, #12
 800cef2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800cef4:	4b94      	ldr	r3, [pc, #592]	; (800d148 <HAL_RCC_OscConfig+0x27c>)
 800cef6:	68db      	ldr	r3, [r3, #12]
 800cef8:	f003 0303 	and.w	r3, r3, #3
 800cefc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800cefe:	69bb      	ldr	r3, [r7, #24]
 800cf00:	2b0c      	cmp	r3, #12
 800cf02:	d102      	bne.n	800cf0a <HAL_RCC_OscConfig+0x3e>
 800cf04:	697b      	ldr	r3, [r7, #20]
 800cf06:	2b03      	cmp	r3, #3
 800cf08:	d002      	beq.n	800cf10 <HAL_RCC_OscConfig+0x44>
 800cf0a:	69bb      	ldr	r3, [r7, #24]
 800cf0c:	2b08      	cmp	r3, #8
 800cf0e:	d10b      	bne.n	800cf28 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cf10:	4b8d      	ldr	r3, [pc, #564]	; (800d148 <HAL_RCC_OscConfig+0x27c>)
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d05b      	beq.n	800cfd4 <HAL_RCC_OscConfig+0x108>
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	685b      	ldr	r3, [r3, #4]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d157      	bne.n	800cfd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800cf24:	2301      	movs	r3, #1
 800cf26:	e2e1      	b.n	800d4ec <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	685b      	ldr	r3, [r3, #4]
 800cf2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf30:	d106      	bne.n	800cf40 <HAL_RCC_OscConfig+0x74>
 800cf32:	4b85      	ldr	r3, [pc, #532]	; (800d148 <HAL_RCC_OscConfig+0x27c>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	4a84      	ldr	r2, [pc, #528]	; (800d148 <HAL_RCC_OscConfig+0x27c>)
 800cf38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cf3c:	6013      	str	r3, [r2, #0]
 800cf3e:	e01d      	b.n	800cf7c <HAL_RCC_OscConfig+0xb0>
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	685b      	ldr	r3, [r3, #4]
 800cf44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cf48:	d10c      	bne.n	800cf64 <HAL_RCC_OscConfig+0x98>
 800cf4a:	4b7f      	ldr	r3, [pc, #508]	; (800d148 <HAL_RCC_OscConfig+0x27c>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	4a7e      	ldr	r2, [pc, #504]	; (800d148 <HAL_RCC_OscConfig+0x27c>)
 800cf50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cf54:	6013      	str	r3, [r2, #0]
 800cf56:	4b7c      	ldr	r3, [pc, #496]	; (800d148 <HAL_RCC_OscConfig+0x27c>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	4a7b      	ldr	r2, [pc, #492]	; (800d148 <HAL_RCC_OscConfig+0x27c>)
 800cf5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cf60:	6013      	str	r3, [r2, #0]
 800cf62:	e00b      	b.n	800cf7c <HAL_RCC_OscConfig+0xb0>
 800cf64:	4b78      	ldr	r3, [pc, #480]	; (800d148 <HAL_RCC_OscConfig+0x27c>)
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	4a77      	ldr	r2, [pc, #476]	; (800d148 <HAL_RCC_OscConfig+0x27c>)
 800cf6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cf6e:	6013      	str	r3, [r2, #0]
 800cf70:	4b75      	ldr	r3, [pc, #468]	; (800d148 <HAL_RCC_OscConfig+0x27c>)
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	4a74      	ldr	r2, [pc, #464]	; (800d148 <HAL_RCC_OscConfig+0x27c>)
 800cf76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cf7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	685b      	ldr	r3, [r3, #4]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d013      	beq.n	800cfac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf84:	f7fb fbae 	bl	80086e4 <HAL_GetTick>
 800cf88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cf8a:	e008      	b.n	800cf9e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cf8c:	f7fb fbaa 	bl	80086e4 <HAL_GetTick>
 800cf90:	4602      	mov	r2, r0
 800cf92:	693b      	ldr	r3, [r7, #16]
 800cf94:	1ad3      	subs	r3, r2, r3
 800cf96:	2b64      	cmp	r3, #100	; 0x64
 800cf98:	d901      	bls.n	800cf9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800cf9a:	2303      	movs	r3, #3
 800cf9c:	e2a6      	b.n	800d4ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cf9e:	4b6a      	ldr	r3, [pc, #424]	; (800d148 <HAL_RCC_OscConfig+0x27c>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d0f0      	beq.n	800cf8c <HAL_RCC_OscConfig+0xc0>
 800cfaa:	e014      	b.n	800cfd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cfac:	f7fb fb9a 	bl	80086e4 <HAL_GetTick>
 800cfb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800cfb2:	e008      	b.n	800cfc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cfb4:	f7fb fb96 	bl	80086e4 <HAL_GetTick>
 800cfb8:	4602      	mov	r2, r0
 800cfba:	693b      	ldr	r3, [r7, #16]
 800cfbc:	1ad3      	subs	r3, r2, r3
 800cfbe:	2b64      	cmp	r3, #100	; 0x64
 800cfc0:	d901      	bls.n	800cfc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800cfc2:	2303      	movs	r3, #3
 800cfc4:	e292      	b.n	800d4ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800cfc6:	4b60      	ldr	r3, [pc, #384]	; (800d148 <HAL_RCC_OscConfig+0x27c>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d1f0      	bne.n	800cfb4 <HAL_RCC_OscConfig+0xe8>
 800cfd2:	e000      	b.n	800cfd6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cfd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	f003 0302 	and.w	r3, r3, #2
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d075      	beq.n	800d0ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cfe2:	4b59      	ldr	r3, [pc, #356]	; (800d148 <HAL_RCC_OscConfig+0x27c>)
 800cfe4:	689b      	ldr	r3, [r3, #8]
 800cfe6:	f003 030c 	and.w	r3, r3, #12
 800cfea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800cfec:	4b56      	ldr	r3, [pc, #344]	; (800d148 <HAL_RCC_OscConfig+0x27c>)
 800cfee:	68db      	ldr	r3, [r3, #12]
 800cff0:	f003 0303 	and.w	r3, r3, #3
 800cff4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800cff6:	69bb      	ldr	r3, [r7, #24]
 800cff8:	2b0c      	cmp	r3, #12
 800cffa:	d102      	bne.n	800d002 <HAL_RCC_OscConfig+0x136>
 800cffc:	697b      	ldr	r3, [r7, #20]
 800cffe:	2b02      	cmp	r3, #2
 800d000:	d002      	beq.n	800d008 <HAL_RCC_OscConfig+0x13c>
 800d002:	69bb      	ldr	r3, [r7, #24]
 800d004:	2b04      	cmp	r3, #4
 800d006:	d11f      	bne.n	800d048 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d008:	4b4f      	ldr	r3, [pc, #316]	; (800d148 <HAL_RCC_OscConfig+0x27c>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d010:	2b00      	cmp	r3, #0
 800d012:	d005      	beq.n	800d020 <HAL_RCC_OscConfig+0x154>
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	68db      	ldr	r3, [r3, #12]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d101      	bne.n	800d020 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800d01c:	2301      	movs	r3, #1
 800d01e:	e265      	b.n	800d4ec <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d020:	4b49      	ldr	r3, [pc, #292]	; (800d148 <HAL_RCC_OscConfig+0x27c>)
 800d022:	685b      	ldr	r3, [r3, #4]
 800d024:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	691b      	ldr	r3, [r3, #16]
 800d02c:	061b      	lsls	r3, r3, #24
 800d02e:	4946      	ldr	r1, [pc, #280]	; (800d148 <HAL_RCC_OscConfig+0x27c>)
 800d030:	4313      	orrs	r3, r2
 800d032:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800d034:	4b45      	ldr	r3, [pc, #276]	; (800d14c <HAL_RCC_OscConfig+0x280>)
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	4618      	mov	r0, r3
 800d03a:	f7fa fec5 	bl	8007dc8 <HAL_InitTick>
 800d03e:	4603      	mov	r3, r0
 800d040:	2b00      	cmp	r3, #0
 800d042:	d043      	beq.n	800d0cc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800d044:	2301      	movs	r3, #1
 800d046:	e251      	b.n	800d4ec <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	68db      	ldr	r3, [r3, #12]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d023      	beq.n	800d098 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d050:	4b3d      	ldr	r3, [pc, #244]	; (800d148 <HAL_RCC_OscConfig+0x27c>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	4a3c      	ldr	r2, [pc, #240]	; (800d148 <HAL_RCC_OscConfig+0x27c>)
 800d056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d05a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d05c:	f7fb fb42 	bl	80086e4 <HAL_GetTick>
 800d060:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d062:	e008      	b.n	800d076 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d064:	f7fb fb3e 	bl	80086e4 <HAL_GetTick>
 800d068:	4602      	mov	r2, r0
 800d06a:	693b      	ldr	r3, [r7, #16]
 800d06c:	1ad3      	subs	r3, r2, r3
 800d06e:	2b02      	cmp	r3, #2
 800d070:	d901      	bls.n	800d076 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800d072:	2303      	movs	r3, #3
 800d074:	e23a      	b.n	800d4ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d076:	4b34      	ldr	r3, [pc, #208]	; (800d148 <HAL_RCC_OscConfig+0x27c>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d0f0      	beq.n	800d064 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d082:	4b31      	ldr	r3, [pc, #196]	; (800d148 <HAL_RCC_OscConfig+0x27c>)
 800d084:	685b      	ldr	r3, [r3, #4]
 800d086:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	691b      	ldr	r3, [r3, #16]
 800d08e:	061b      	lsls	r3, r3, #24
 800d090:	492d      	ldr	r1, [pc, #180]	; (800d148 <HAL_RCC_OscConfig+0x27c>)
 800d092:	4313      	orrs	r3, r2
 800d094:	604b      	str	r3, [r1, #4]
 800d096:	e01a      	b.n	800d0ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d098:	4b2b      	ldr	r3, [pc, #172]	; (800d148 <HAL_RCC_OscConfig+0x27c>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	4a2a      	ldr	r2, [pc, #168]	; (800d148 <HAL_RCC_OscConfig+0x27c>)
 800d09e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d0a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d0a4:	f7fb fb1e 	bl	80086e4 <HAL_GetTick>
 800d0a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d0aa:	e008      	b.n	800d0be <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d0ac:	f7fb fb1a 	bl	80086e4 <HAL_GetTick>
 800d0b0:	4602      	mov	r2, r0
 800d0b2:	693b      	ldr	r3, [r7, #16]
 800d0b4:	1ad3      	subs	r3, r2, r3
 800d0b6:	2b02      	cmp	r3, #2
 800d0b8:	d901      	bls.n	800d0be <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800d0ba:	2303      	movs	r3, #3
 800d0bc:	e216      	b.n	800d4ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d0be:	4b22      	ldr	r3, [pc, #136]	; (800d148 <HAL_RCC_OscConfig+0x27c>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d1f0      	bne.n	800d0ac <HAL_RCC_OscConfig+0x1e0>
 800d0ca:	e000      	b.n	800d0ce <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d0cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	f003 0308 	and.w	r3, r3, #8
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d041      	beq.n	800d15e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	695b      	ldr	r3, [r3, #20]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d01c      	beq.n	800d11c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d0e2:	4b19      	ldr	r3, [pc, #100]	; (800d148 <HAL_RCC_OscConfig+0x27c>)
 800d0e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d0e8:	4a17      	ldr	r2, [pc, #92]	; (800d148 <HAL_RCC_OscConfig+0x27c>)
 800d0ea:	f043 0301 	orr.w	r3, r3, #1
 800d0ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d0f2:	f7fb faf7 	bl	80086e4 <HAL_GetTick>
 800d0f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d0f8:	e008      	b.n	800d10c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d0fa:	f7fb faf3 	bl	80086e4 <HAL_GetTick>
 800d0fe:	4602      	mov	r2, r0
 800d100:	693b      	ldr	r3, [r7, #16]
 800d102:	1ad3      	subs	r3, r2, r3
 800d104:	2b02      	cmp	r3, #2
 800d106:	d901      	bls.n	800d10c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800d108:	2303      	movs	r3, #3
 800d10a:	e1ef      	b.n	800d4ec <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d10c:	4b0e      	ldr	r3, [pc, #56]	; (800d148 <HAL_RCC_OscConfig+0x27c>)
 800d10e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d112:	f003 0302 	and.w	r3, r3, #2
 800d116:	2b00      	cmp	r3, #0
 800d118:	d0ef      	beq.n	800d0fa <HAL_RCC_OscConfig+0x22e>
 800d11a:	e020      	b.n	800d15e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d11c:	4b0a      	ldr	r3, [pc, #40]	; (800d148 <HAL_RCC_OscConfig+0x27c>)
 800d11e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d122:	4a09      	ldr	r2, [pc, #36]	; (800d148 <HAL_RCC_OscConfig+0x27c>)
 800d124:	f023 0301 	bic.w	r3, r3, #1
 800d128:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d12c:	f7fb fada 	bl	80086e4 <HAL_GetTick>
 800d130:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d132:	e00d      	b.n	800d150 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d134:	f7fb fad6 	bl	80086e4 <HAL_GetTick>
 800d138:	4602      	mov	r2, r0
 800d13a:	693b      	ldr	r3, [r7, #16]
 800d13c:	1ad3      	subs	r3, r2, r3
 800d13e:	2b02      	cmp	r3, #2
 800d140:	d906      	bls.n	800d150 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800d142:	2303      	movs	r3, #3
 800d144:	e1d2      	b.n	800d4ec <HAL_RCC_OscConfig+0x620>
 800d146:	bf00      	nop
 800d148:	40021000 	.word	0x40021000
 800d14c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d150:	4b8c      	ldr	r3, [pc, #560]	; (800d384 <HAL_RCC_OscConfig+0x4b8>)
 800d152:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d156:	f003 0302 	and.w	r3, r3, #2
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d1ea      	bne.n	800d134 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	f003 0304 	and.w	r3, r3, #4
 800d166:	2b00      	cmp	r3, #0
 800d168:	f000 80a6 	beq.w	800d2b8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d16c:	2300      	movs	r3, #0
 800d16e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800d170:	4b84      	ldr	r3, [pc, #528]	; (800d384 <HAL_RCC_OscConfig+0x4b8>)
 800d172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d101      	bne.n	800d180 <HAL_RCC_OscConfig+0x2b4>
 800d17c:	2301      	movs	r3, #1
 800d17e:	e000      	b.n	800d182 <HAL_RCC_OscConfig+0x2b6>
 800d180:	2300      	movs	r3, #0
 800d182:	2b00      	cmp	r3, #0
 800d184:	d00d      	beq.n	800d1a2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d186:	4b7f      	ldr	r3, [pc, #508]	; (800d384 <HAL_RCC_OscConfig+0x4b8>)
 800d188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d18a:	4a7e      	ldr	r2, [pc, #504]	; (800d384 <HAL_RCC_OscConfig+0x4b8>)
 800d18c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d190:	6593      	str	r3, [r2, #88]	; 0x58
 800d192:	4b7c      	ldr	r3, [pc, #496]	; (800d384 <HAL_RCC_OscConfig+0x4b8>)
 800d194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d19a:	60fb      	str	r3, [r7, #12]
 800d19c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800d19e:	2301      	movs	r3, #1
 800d1a0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d1a2:	4b79      	ldr	r3, [pc, #484]	; (800d388 <HAL_RCC_OscConfig+0x4bc>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d118      	bne.n	800d1e0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d1ae:	4b76      	ldr	r3, [pc, #472]	; (800d388 <HAL_RCC_OscConfig+0x4bc>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	4a75      	ldr	r2, [pc, #468]	; (800d388 <HAL_RCC_OscConfig+0x4bc>)
 800d1b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d1b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d1ba:	f7fb fa93 	bl	80086e4 <HAL_GetTick>
 800d1be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d1c0:	e008      	b.n	800d1d4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d1c2:	f7fb fa8f 	bl	80086e4 <HAL_GetTick>
 800d1c6:	4602      	mov	r2, r0
 800d1c8:	693b      	ldr	r3, [r7, #16]
 800d1ca:	1ad3      	subs	r3, r2, r3
 800d1cc:	2b02      	cmp	r3, #2
 800d1ce:	d901      	bls.n	800d1d4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800d1d0:	2303      	movs	r3, #3
 800d1d2:	e18b      	b.n	800d4ec <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d1d4:	4b6c      	ldr	r3, [pc, #432]	; (800d388 <HAL_RCC_OscConfig+0x4bc>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d0f0      	beq.n	800d1c2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	689b      	ldr	r3, [r3, #8]
 800d1e4:	2b01      	cmp	r3, #1
 800d1e6:	d108      	bne.n	800d1fa <HAL_RCC_OscConfig+0x32e>
 800d1e8:	4b66      	ldr	r3, [pc, #408]	; (800d384 <HAL_RCC_OscConfig+0x4b8>)
 800d1ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1ee:	4a65      	ldr	r2, [pc, #404]	; (800d384 <HAL_RCC_OscConfig+0x4b8>)
 800d1f0:	f043 0301 	orr.w	r3, r3, #1
 800d1f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d1f8:	e024      	b.n	800d244 <HAL_RCC_OscConfig+0x378>
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	689b      	ldr	r3, [r3, #8]
 800d1fe:	2b05      	cmp	r3, #5
 800d200:	d110      	bne.n	800d224 <HAL_RCC_OscConfig+0x358>
 800d202:	4b60      	ldr	r3, [pc, #384]	; (800d384 <HAL_RCC_OscConfig+0x4b8>)
 800d204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d208:	4a5e      	ldr	r2, [pc, #376]	; (800d384 <HAL_RCC_OscConfig+0x4b8>)
 800d20a:	f043 0304 	orr.w	r3, r3, #4
 800d20e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d212:	4b5c      	ldr	r3, [pc, #368]	; (800d384 <HAL_RCC_OscConfig+0x4b8>)
 800d214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d218:	4a5a      	ldr	r2, [pc, #360]	; (800d384 <HAL_RCC_OscConfig+0x4b8>)
 800d21a:	f043 0301 	orr.w	r3, r3, #1
 800d21e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d222:	e00f      	b.n	800d244 <HAL_RCC_OscConfig+0x378>
 800d224:	4b57      	ldr	r3, [pc, #348]	; (800d384 <HAL_RCC_OscConfig+0x4b8>)
 800d226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d22a:	4a56      	ldr	r2, [pc, #344]	; (800d384 <HAL_RCC_OscConfig+0x4b8>)
 800d22c:	f023 0301 	bic.w	r3, r3, #1
 800d230:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d234:	4b53      	ldr	r3, [pc, #332]	; (800d384 <HAL_RCC_OscConfig+0x4b8>)
 800d236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d23a:	4a52      	ldr	r2, [pc, #328]	; (800d384 <HAL_RCC_OscConfig+0x4b8>)
 800d23c:	f023 0304 	bic.w	r3, r3, #4
 800d240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	689b      	ldr	r3, [r3, #8]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d016      	beq.n	800d27a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d24c:	f7fb fa4a 	bl	80086e4 <HAL_GetTick>
 800d250:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d252:	e00a      	b.n	800d26a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d254:	f7fb fa46 	bl	80086e4 <HAL_GetTick>
 800d258:	4602      	mov	r2, r0
 800d25a:	693b      	ldr	r3, [r7, #16]
 800d25c:	1ad3      	subs	r3, r2, r3
 800d25e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d262:	4293      	cmp	r3, r2
 800d264:	d901      	bls.n	800d26a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800d266:	2303      	movs	r3, #3
 800d268:	e140      	b.n	800d4ec <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d26a:	4b46      	ldr	r3, [pc, #280]	; (800d384 <HAL_RCC_OscConfig+0x4b8>)
 800d26c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d270:	f003 0302 	and.w	r3, r3, #2
 800d274:	2b00      	cmp	r3, #0
 800d276:	d0ed      	beq.n	800d254 <HAL_RCC_OscConfig+0x388>
 800d278:	e015      	b.n	800d2a6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d27a:	f7fb fa33 	bl	80086e4 <HAL_GetTick>
 800d27e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d280:	e00a      	b.n	800d298 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d282:	f7fb fa2f 	bl	80086e4 <HAL_GetTick>
 800d286:	4602      	mov	r2, r0
 800d288:	693b      	ldr	r3, [r7, #16]
 800d28a:	1ad3      	subs	r3, r2, r3
 800d28c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d290:	4293      	cmp	r3, r2
 800d292:	d901      	bls.n	800d298 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800d294:	2303      	movs	r3, #3
 800d296:	e129      	b.n	800d4ec <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d298:	4b3a      	ldr	r3, [pc, #232]	; (800d384 <HAL_RCC_OscConfig+0x4b8>)
 800d29a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d29e:	f003 0302 	and.w	r3, r3, #2
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d1ed      	bne.n	800d282 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800d2a6:	7ffb      	ldrb	r3, [r7, #31]
 800d2a8:	2b01      	cmp	r3, #1
 800d2aa:	d105      	bne.n	800d2b8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d2ac:	4b35      	ldr	r3, [pc, #212]	; (800d384 <HAL_RCC_OscConfig+0x4b8>)
 800d2ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2b0:	4a34      	ldr	r2, [pc, #208]	; (800d384 <HAL_RCC_OscConfig+0x4b8>)
 800d2b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d2b6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	f003 0320 	and.w	r3, r3, #32
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d03c      	beq.n	800d33e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	699b      	ldr	r3, [r3, #24]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d01c      	beq.n	800d306 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d2cc:	4b2d      	ldr	r3, [pc, #180]	; (800d384 <HAL_RCC_OscConfig+0x4b8>)
 800d2ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d2d2:	4a2c      	ldr	r2, [pc, #176]	; (800d384 <HAL_RCC_OscConfig+0x4b8>)
 800d2d4:	f043 0301 	orr.w	r3, r3, #1
 800d2d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d2dc:	f7fb fa02 	bl	80086e4 <HAL_GetTick>
 800d2e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800d2e2:	e008      	b.n	800d2f6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d2e4:	f7fb f9fe 	bl	80086e4 <HAL_GetTick>
 800d2e8:	4602      	mov	r2, r0
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	1ad3      	subs	r3, r2, r3
 800d2ee:	2b02      	cmp	r3, #2
 800d2f0:	d901      	bls.n	800d2f6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800d2f2:	2303      	movs	r3, #3
 800d2f4:	e0fa      	b.n	800d4ec <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800d2f6:	4b23      	ldr	r3, [pc, #140]	; (800d384 <HAL_RCC_OscConfig+0x4b8>)
 800d2f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d2fc:	f003 0302 	and.w	r3, r3, #2
 800d300:	2b00      	cmp	r3, #0
 800d302:	d0ef      	beq.n	800d2e4 <HAL_RCC_OscConfig+0x418>
 800d304:	e01b      	b.n	800d33e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d306:	4b1f      	ldr	r3, [pc, #124]	; (800d384 <HAL_RCC_OscConfig+0x4b8>)
 800d308:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d30c:	4a1d      	ldr	r2, [pc, #116]	; (800d384 <HAL_RCC_OscConfig+0x4b8>)
 800d30e:	f023 0301 	bic.w	r3, r3, #1
 800d312:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d316:	f7fb f9e5 	bl	80086e4 <HAL_GetTick>
 800d31a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800d31c:	e008      	b.n	800d330 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d31e:	f7fb f9e1 	bl	80086e4 <HAL_GetTick>
 800d322:	4602      	mov	r2, r0
 800d324:	693b      	ldr	r3, [r7, #16]
 800d326:	1ad3      	subs	r3, r2, r3
 800d328:	2b02      	cmp	r3, #2
 800d32a:	d901      	bls.n	800d330 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800d32c:	2303      	movs	r3, #3
 800d32e:	e0dd      	b.n	800d4ec <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800d330:	4b14      	ldr	r3, [pc, #80]	; (800d384 <HAL_RCC_OscConfig+0x4b8>)
 800d332:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d336:	f003 0302 	and.w	r3, r3, #2
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d1ef      	bne.n	800d31e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	69db      	ldr	r3, [r3, #28]
 800d342:	2b00      	cmp	r3, #0
 800d344:	f000 80d1 	beq.w	800d4ea <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d348:	4b0e      	ldr	r3, [pc, #56]	; (800d384 <HAL_RCC_OscConfig+0x4b8>)
 800d34a:	689b      	ldr	r3, [r3, #8]
 800d34c:	f003 030c 	and.w	r3, r3, #12
 800d350:	2b0c      	cmp	r3, #12
 800d352:	f000 808b 	beq.w	800d46c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	69db      	ldr	r3, [r3, #28]
 800d35a:	2b02      	cmp	r3, #2
 800d35c:	d15e      	bne.n	800d41c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d35e:	4b09      	ldr	r3, [pc, #36]	; (800d384 <HAL_RCC_OscConfig+0x4b8>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	4a08      	ldr	r2, [pc, #32]	; (800d384 <HAL_RCC_OscConfig+0x4b8>)
 800d364:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d368:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d36a:	f7fb f9bb 	bl	80086e4 <HAL_GetTick>
 800d36e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d370:	e00c      	b.n	800d38c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d372:	f7fb f9b7 	bl	80086e4 <HAL_GetTick>
 800d376:	4602      	mov	r2, r0
 800d378:	693b      	ldr	r3, [r7, #16]
 800d37a:	1ad3      	subs	r3, r2, r3
 800d37c:	2b02      	cmp	r3, #2
 800d37e:	d905      	bls.n	800d38c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800d380:	2303      	movs	r3, #3
 800d382:	e0b3      	b.n	800d4ec <HAL_RCC_OscConfig+0x620>
 800d384:	40021000 	.word	0x40021000
 800d388:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d38c:	4b59      	ldr	r3, [pc, #356]	; (800d4f4 <HAL_RCC_OscConfig+0x628>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d394:	2b00      	cmp	r3, #0
 800d396:	d1ec      	bne.n	800d372 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d398:	4b56      	ldr	r3, [pc, #344]	; (800d4f4 <HAL_RCC_OscConfig+0x628>)
 800d39a:	68da      	ldr	r2, [r3, #12]
 800d39c:	4b56      	ldr	r3, [pc, #344]	; (800d4f8 <HAL_RCC_OscConfig+0x62c>)
 800d39e:	4013      	ands	r3, r2
 800d3a0:	687a      	ldr	r2, [r7, #4]
 800d3a2:	6a11      	ldr	r1, [r2, #32]
 800d3a4:	687a      	ldr	r2, [r7, #4]
 800d3a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d3a8:	3a01      	subs	r2, #1
 800d3aa:	0112      	lsls	r2, r2, #4
 800d3ac:	4311      	orrs	r1, r2
 800d3ae:	687a      	ldr	r2, [r7, #4]
 800d3b0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800d3b2:	0212      	lsls	r2, r2, #8
 800d3b4:	4311      	orrs	r1, r2
 800d3b6:	687a      	ldr	r2, [r7, #4]
 800d3b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d3ba:	0852      	lsrs	r2, r2, #1
 800d3bc:	3a01      	subs	r2, #1
 800d3be:	0552      	lsls	r2, r2, #21
 800d3c0:	4311      	orrs	r1, r2
 800d3c2:	687a      	ldr	r2, [r7, #4]
 800d3c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d3c6:	0852      	lsrs	r2, r2, #1
 800d3c8:	3a01      	subs	r2, #1
 800d3ca:	0652      	lsls	r2, r2, #25
 800d3cc:	4311      	orrs	r1, r2
 800d3ce:	687a      	ldr	r2, [r7, #4]
 800d3d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d3d2:	06d2      	lsls	r2, r2, #27
 800d3d4:	430a      	orrs	r2, r1
 800d3d6:	4947      	ldr	r1, [pc, #284]	; (800d4f4 <HAL_RCC_OscConfig+0x628>)
 800d3d8:	4313      	orrs	r3, r2
 800d3da:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d3dc:	4b45      	ldr	r3, [pc, #276]	; (800d4f4 <HAL_RCC_OscConfig+0x628>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	4a44      	ldr	r2, [pc, #272]	; (800d4f4 <HAL_RCC_OscConfig+0x628>)
 800d3e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d3e6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d3e8:	4b42      	ldr	r3, [pc, #264]	; (800d4f4 <HAL_RCC_OscConfig+0x628>)
 800d3ea:	68db      	ldr	r3, [r3, #12]
 800d3ec:	4a41      	ldr	r2, [pc, #260]	; (800d4f4 <HAL_RCC_OscConfig+0x628>)
 800d3ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d3f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d3f4:	f7fb f976 	bl	80086e4 <HAL_GetTick>
 800d3f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d3fa:	e008      	b.n	800d40e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d3fc:	f7fb f972 	bl	80086e4 <HAL_GetTick>
 800d400:	4602      	mov	r2, r0
 800d402:	693b      	ldr	r3, [r7, #16]
 800d404:	1ad3      	subs	r3, r2, r3
 800d406:	2b02      	cmp	r3, #2
 800d408:	d901      	bls.n	800d40e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800d40a:	2303      	movs	r3, #3
 800d40c:	e06e      	b.n	800d4ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d40e:	4b39      	ldr	r3, [pc, #228]	; (800d4f4 <HAL_RCC_OscConfig+0x628>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d416:	2b00      	cmp	r3, #0
 800d418:	d0f0      	beq.n	800d3fc <HAL_RCC_OscConfig+0x530>
 800d41a:	e066      	b.n	800d4ea <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d41c:	4b35      	ldr	r3, [pc, #212]	; (800d4f4 <HAL_RCC_OscConfig+0x628>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	4a34      	ldr	r2, [pc, #208]	; (800d4f4 <HAL_RCC_OscConfig+0x628>)
 800d422:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d426:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800d428:	4b32      	ldr	r3, [pc, #200]	; (800d4f4 <HAL_RCC_OscConfig+0x628>)
 800d42a:	68db      	ldr	r3, [r3, #12]
 800d42c:	4a31      	ldr	r2, [pc, #196]	; (800d4f4 <HAL_RCC_OscConfig+0x628>)
 800d42e:	f023 0303 	bic.w	r3, r3, #3
 800d432:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800d434:	4b2f      	ldr	r3, [pc, #188]	; (800d4f4 <HAL_RCC_OscConfig+0x628>)
 800d436:	68db      	ldr	r3, [r3, #12]
 800d438:	4a2e      	ldr	r2, [pc, #184]	; (800d4f4 <HAL_RCC_OscConfig+0x628>)
 800d43a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800d43e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d442:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d444:	f7fb f94e 	bl	80086e4 <HAL_GetTick>
 800d448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d44a:	e008      	b.n	800d45e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d44c:	f7fb f94a 	bl	80086e4 <HAL_GetTick>
 800d450:	4602      	mov	r2, r0
 800d452:	693b      	ldr	r3, [r7, #16]
 800d454:	1ad3      	subs	r3, r2, r3
 800d456:	2b02      	cmp	r3, #2
 800d458:	d901      	bls.n	800d45e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800d45a:	2303      	movs	r3, #3
 800d45c:	e046      	b.n	800d4ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d45e:	4b25      	ldr	r3, [pc, #148]	; (800d4f4 <HAL_RCC_OscConfig+0x628>)
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d466:	2b00      	cmp	r3, #0
 800d468:	d1f0      	bne.n	800d44c <HAL_RCC_OscConfig+0x580>
 800d46a:	e03e      	b.n	800d4ea <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	69db      	ldr	r3, [r3, #28]
 800d470:	2b01      	cmp	r3, #1
 800d472:	d101      	bne.n	800d478 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800d474:	2301      	movs	r3, #1
 800d476:	e039      	b.n	800d4ec <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800d478:	4b1e      	ldr	r3, [pc, #120]	; (800d4f4 <HAL_RCC_OscConfig+0x628>)
 800d47a:	68db      	ldr	r3, [r3, #12]
 800d47c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d47e:	697b      	ldr	r3, [r7, #20]
 800d480:	f003 0203 	and.w	r2, r3, #3
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	6a1b      	ldr	r3, [r3, #32]
 800d488:	429a      	cmp	r2, r3
 800d48a:	d12c      	bne.n	800d4e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d48c:	697b      	ldr	r3, [r7, #20]
 800d48e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d496:	3b01      	subs	r3, #1
 800d498:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d49a:	429a      	cmp	r2, r3
 800d49c:	d123      	bne.n	800d4e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800d49e:	697b      	ldr	r3, [r7, #20]
 800d4a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	d11b      	bne.n	800d4e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800d4ae:	697b      	ldr	r3, [r7, #20]
 800d4b0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4b8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800d4ba:	429a      	cmp	r2, r3
 800d4bc:	d113      	bne.n	800d4e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4c8:	085b      	lsrs	r3, r3, #1
 800d4ca:	3b01      	subs	r3, #1
 800d4cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800d4ce:	429a      	cmp	r2, r3
 800d4d0:	d109      	bne.n	800d4e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800d4d2:	697b      	ldr	r3, [r7, #20]
 800d4d4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4dc:	085b      	lsrs	r3, r3, #1
 800d4de:	3b01      	subs	r3, #1
 800d4e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d4e2:	429a      	cmp	r2, r3
 800d4e4:	d001      	beq.n	800d4ea <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800d4e6:	2301      	movs	r3, #1
 800d4e8:	e000      	b.n	800d4ec <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800d4ea:	2300      	movs	r3, #0
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	3720      	adds	r7, #32
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}
 800d4f4:	40021000 	.word	0x40021000
 800d4f8:	019f800c 	.word	0x019f800c

0800d4fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b086      	sub	sp, #24
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
 800d504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800d506:	2300      	movs	r3, #0
 800d508:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d101      	bne.n	800d514 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800d510:	2301      	movs	r3, #1
 800d512:	e11e      	b.n	800d752 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d514:	4b91      	ldr	r3, [pc, #580]	; (800d75c <HAL_RCC_ClockConfig+0x260>)
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	f003 030f 	and.w	r3, r3, #15
 800d51c:	683a      	ldr	r2, [r7, #0]
 800d51e:	429a      	cmp	r2, r3
 800d520:	d910      	bls.n	800d544 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d522:	4b8e      	ldr	r3, [pc, #568]	; (800d75c <HAL_RCC_ClockConfig+0x260>)
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	f023 020f 	bic.w	r2, r3, #15
 800d52a:	498c      	ldr	r1, [pc, #560]	; (800d75c <HAL_RCC_ClockConfig+0x260>)
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	4313      	orrs	r3, r2
 800d530:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d532:	4b8a      	ldr	r3, [pc, #552]	; (800d75c <HAL_RCC_ClockConfig+0x260>)
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	f003 030f 	and.w	r3, r3, #15
 800d53a:	683a      	ldr	r2, [r7, #0]
 800d53c:	429a      	cmp	r2, r3
 800d53e:	d001      	beq.n	800d544 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800d540:	2301      	movs	r3, #1
 800d542:	e106      	b.n	800d752 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	f003 0301 	and.w	r3, r3, #1
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d073      	beq.n	800d638 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	685b      	ldr	r3, [r3, #4]
 800d554:	2b03      	cmp	r3, #3
 800d556:	d129      	bne.n	800d5ac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d558:	4b81      	ldr	r3, [pc, #516]	; (800d760 <HAL_RCC_ClockConfig+0x264>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d560:	2b00      	cmp	r3, #0
 800d562:	d101      	bne.n	800d568 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800d564:	2301      	movs	r3, #1
 800d566:	e0f4      	b.n	800d752 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800d568:	f000 f9d0 	bl	800d90c <RCC_GetSysClockFreqFromPLLSource>
 800d56c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800d56e:	693b      	ldr	r3, [r7, #16]
 800d570:	4a7c      	ldr	r2, [pc, #496]	; (800d764 <HAL_RCC_ClockConfig+0x268>)
 800d572:	4293      	cmp	r3, r2
 800d574:	d93f      	bls.n	800d5f6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800d576:	4b7a      	ldr	r3, [pc, #488]	; (800d760 <HAL_RCC_ClockConfig+0x264>)
 800d578:	689b      	ldr	r3, [r3, #8]
 800d57a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d009      	beq.n	800d596 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d033      	beq.n	800d5f6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800d592:	2b00      	cmp	r3, #0
 800d594:	d12f      	bne.n	800d5f6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800d596:	4b72      	ldr	r3, [pc, #456]	; (800d760 <HAL_RCC_ClockConfig+0x264>)
 800d598:	689b      	ldr	r3, [r3, #8]
 800d59a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d59e:	4a70      	ldr	r2, [pc, #448]	; (800d760 <HAL_RCC_ClockConfig+0x264>)
 800d5a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5a4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800d5a6:	2380      	movs	r3, #128	; 0x80
 800d5a8:	617b      	str	r3, [r7, #20]
 800d5aa:	e024      	b.n	800d5f6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	685b      	ldr	r3, [r3, #4]
 800d5b0:	2b02      	cmp	r3, #2
 800d5b2:	d107      	bne.n	800d5c4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d5b4:	4b6a      	ldr	r3, [pc, #424]	; (800d760 <HAL_RCC_ClockConfig+0x264>)
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d109      	bne.n	800d5d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800d5c0:	2301      	movs	r3, #1
 800d5c2:	e0c6      	b.n	800d752 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d5c4:	4b66      	ldr	r3, [pc, #408]	; (800d760 <HAL_RCC_ClockConfig+0x264>)
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d101      	bne.n	800d5d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800d5d0:	2301      	movs	r3, #1
 800d5d2:	e0be      	b.n	800d752 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800d5d4:	f000 f8ce 	bl	800d774 <HAL_RCC_GetSysClockFreq>
 800d5d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800d5da:	693b      	ldr	r3, [r7, #16]
 800d5dc:	4a61      	ldr	r2, [pc, #388]	; (800d764 <HAL_RCC_ClockConfig+0x268>)
 800d5de:	4293      	cmp	r3, r2
 800d5e0:	d909      	bls.n	800d5f6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800d5e2:	4b5f      	ldr	r3, [pc, #380]	; (800d760 <HAL_RCC_ClockConfig+0x264>)
 800d5e4:	689b      	ldr	r3, [r3, #8]
 800d5e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d5ea:	4a5d      	ldr	r2, [pc, #372]	; (800d760 <HAL_RCC_ClockConfig+0x264>)
 800d5ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5f0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800d5f2:	2380      	movs	r3, #128	; 0x80
 800d5f4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d5f6:	4b5a      	ldr	r3, [pc, #360]	; (800d760 <HAL_RCC_ClockConfig+0x264>)
 800d5f8:	689b      	ldr	r3, [r3, #8]
 800d5fa:	f023 0203 	bic.w	r2, r3, #3
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	685b      	ldr	r3, [r3, #4]
 800d602:	4957      	ldr	r1, [pc, #348]	; (800d760 <HAL_RCC_ClockConfig+0x264>)
 800d604:	4313      	orrs	r3, r2
 800d606:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d608:	f7fb f86c 	bl	80086e4 <HAL_GetTick>
 800d60c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d60e:	e00a      	b.n	800d626 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d610:	f7fb f868 	bl	80086e4 <HAL_GetTick>
 800d614:	4602      	mov	r2, r0
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	1ad3      	subs	r3, r2, r3
 800d61a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d61e:	4293      	cmp	r3, r2
 800d620:	d901      	bls.n	800d626 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800d622:	2303      	movs	r3, #3
 800d624:	e095      	b.n	800d752 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d626:	4b4e      	ldr	r3, [pc, #312]	; (800d760 <HAL_RCC_ClockConfig+0x264>)
 800d628:	689b      	ldr	r3, [r3, #8]
 800d62a:	f003 020c 	and.w	r2, r3, #12
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	685b      	ldr	r3, [r3, #4]
 800d632:	009b      	lsls	r3, r3, #2
 800d634:	429a      	cmp	r2, r3
 800d636:	d1eb      	bne.n	800d610 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	f003 0302 	and.w	r3, r3, #2
 800d640:	2b00      	cmp	r3, #0
 800d642:	d023      	beq.n	800d68c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	f003 0304 	and.w	r3, r3, #4
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d005      	beq.n	800d65c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d650:	4b43      	ldr	r3, [pc, #268]	; (800d760 <HAL_RCC_ClockConfig+0x264>)
 800d652:	689b      	ldr	r3, [r3, #8]
 800d654:	4a42      	ldr	r2, [pc, #264]	; (800d760 <HAL_RCC_ClockConfig+0x264>)
 800d656:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800d65a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	f003 0308 	and.w	r3, r3, #8
 800d664:	2b00      	cmp	r3, #0
 800d666:	d007      	beq.n	800d678 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800d668:	4b3d      	ldr	r3, [pc, #244]	; (800d760 <HAL_RCC_ClockConfig+0x264>)
 800d66a:	689b      	ldr	r3, [r3, #8]
 800d66c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d670:	4a3b      	ldr	r2, [pc, #236]	; (800d760 <HAL_RCC_ClockConfig+0x264>)
 800d672:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800d676:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d678:	4b39      	ldr	r3, [pc, #228]	; (800d760 <HAL_RCC_ClockConfig+0x264>)
 800d67a:	689b      	ldr	r3, [r3, #8]
 800d67c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	689b      	ldr	r3, [r3, #8]
 800d684:	4936      	ldr	r1, [pc, #216]	; (800d760 <HAL_RCC_ClockConfig+0x264>)
 800d686:	4313      	orrs	r3, r2
 800d688:	608b      	str	r3, [r1, #8]
 800d68a:	e008      	b.n	800d69e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800d68c:	697b      	ldr	r3, [r7, #20]
 800d68e:	2b80      	cmp	r3, #128	; 0x80
 800d690:	d105      	bne.n	800d69e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800d692:	4b33      	ldr	r3, [pc, #204]	; (800d760 <HAL_RCC_ClockConfig+0x264>)
 800d694:	689b      	ldr	r3, [r3, #8]
 800d696:	4a32      	ldr	r2, [pc, #200]	; (800d760 <HAL_RCC_ClockConfig+0x264>)
 800d698:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d69c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d69e:	4b2f      	ldr	r3, [pc, #188]	; (800d75c <HAL_RCC_ClockConfig+0x260>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	f003 030f 	and.w	r3, r3, #15
 800d6a6:	683a      	ldr	r2, [r7, #0]
 800d6a8:	429a      	cmp	r2, r3
 800d6aa:	d21d      	bcs.n	800d6e8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d6ac:	4b2b      	ldr	r3, [pc, #172]	; (800d75c <HAL_RCC_ClockConfig+0x260>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	f023 020f 	bic.w	r2, r3, #15
 800d6b4:	4929      	ldr	r1, [pc, #164]	; (800d75c <HAL_RCC_ClockConfig+0x260>)
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	4313      	orrs	r3, r2
 800d6ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800d6bc:	f7fb f812 	bl	80086e4 <HAL_GetTick>
 800d6c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d6c2:	e00a      	b.n	800d6da <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d6c4:	f7fb f80e 	bl	80086e4 <HAL_GetTick>
 800d6c8:	4602      	mov	r2, r0
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	1ad3      	subs	r3, r2, r3
 800d6ce:	f241 3288 	movw	r2, #5000	; 0x1388
 800d6d2:	4293      	cmp	r3, r2
 800d6d4:	d901      	bls.n	800d6da <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800d6d6:	2303      	movs	r3, #3
 800d6d8:	e03b      	b.n	800d752 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d6da:	4b20      	ldr	r3, [pc, #128]	; (800d75c <HAL_RCC_ClockConfig+0x260>)
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	f003 030f 	and.w	r3, r3, #15
 800d6e2:	683a      	ldr	r2, [r7, #0]
 800d6e4:	429a      	cmp	r2, r3
 800d6e6:	d1ed      	bne.n	800d6c4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	f003 0304 	and.w	r3, r3, #4
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d008      	beq.n	800d706 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d6f4:	4b1a      	ldr	r3, [pc, #104]	; (800d760 <HAL_RCC_ClockConfig+0x264>)
 800d6f6:	689b      	ldr	r3, [r3, #8]
 800d6f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	68db      	ldr	r3, [r3, #12]
 800d700:	4917      	ldr	r1, [pc, #92]	; (800d760 <HAL_RCC_ClockConfig+0x264>)
 800d702:	4313      	orrs	r3, r2
 800d704:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	f003 0308 	and.w	r3, r3, #8
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d009      	beq.n	800d726 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d712:	4b13      	ldr	r3, [pc, #76]	; (800d760 <HAL_RCC_ClockConfig+0x264>)
 800d714:	689b      	ldr	r3, [r3, #8]
 800d716:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	691b      	ldr	r3, [r3, #16]
 800d71e:	00db      	lsls	r3, r3, #3
 800d720:	490f      	ldr	r1, [pc, #60]	; (800d760 <HAL_RCC_ClockConfig+0x264>)
 800d722:	4313      	orrs	r3, r2
 800d724:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800d726:	f000 f825 	bl	800d774 <HAL_RCC_GetSysClockFreq>
 800d72a:	4602      	mov	r2, r0
 800d72c:	4b0c      	ldr	r3, [pc, #48]	; (800d760 <HAL_RCC_ClockConfig+0x264>)
 800d72e:	689b      	ldr	r3, [r3, #8]
 800d730:	091b      	lsrs	r3, r3, #4
 800d732:	f003 030f 	and.w	r3, r3, #15
 800d736:	490c      	ldr	r1, [pc, #48]	; (800d768 <HAL_RCC_ClockConfig+0x26c>)
 800d738:	5ccb      	ldrb	r3, [r1, r3]
 800d73a:	f003 031f 	and.w	r3, r3, #31
 800d73e:	fa22 f303 	lsr.w	r3, r2, r3
 800d742:	4a0a      	ldr	r2, [pc, #40]	; (800d76c <HAL_RCC_ClockConfig+0x270>)
 800d744:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800d746:	4b0a      	ldr	r3, [pc, #40]	; (800d770 <HAL_RCC_ClockConfig+0x274>)
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	4618      	mov	r0, r3
 800d74c:	f7fa fb3c 	bl	8007dc8 <HAL_InitTick>
 800d750:	4603      	mov	r3, r0
}
 800d752:	4618      	mov	r0, r3
 800d754:	3718      	adds	r7, #24
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}
 800d75a:	bf00      	nop
 800d75c:	40022000 	.word	0x40022000
 800d760:	40021000 	.word	0x40021000
 800d764:	04c4b400 	.word	0x04c4b400
 800d768:	08019448 	.word	0x08019448
 800d76c:	20000004 	.word	0x20000004
 800d770:	20000008 	.word	0x20000008

0800d774 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d774:	b480      	push	{r7}
 800d776:	b087      	sub	sp, #28
 800d778:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800d77a:	4b2c      	ldr	r3, [pc, #176]	; (800d82c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d77c:	689b      	ldr	r3, [r3, #8]
 800d77e:	f003 030c 	and.w	r3, r3, #12
 800d782:	2b04      	cmp	r3, #4
 800d784:	d102      	bne.n	800d78c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d786:	4b2a      	ldr	r3, [pc, #168]	; (800d830 <HAL_RCC_GetSysClockFreq+0xbc>)
 800d788:	613b      	str	r3, [r7, #16]
 800d78a:	e047      	b.n	800d81c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800d78c:	4b27      	ldr	r3, [pc, #156]	; (800d82c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d78e:	689b      	ldr	r3, [r3, #8]
 800d790:	f003 030c 	and.w	r3, r3, #12
 800d794:	2b08      	cmp	r3, #8
 800d796:	d102      	bne.n	800d79e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800d798:	4b26      	ldr	r3, [pc, #152]	; (800d834 <HAL_RCC_GetSysClockFreq+0xc0>)
 800d79a:	613b      	str	r3, [r7, #16]
 800d79c:	e03e      	b.n	800d81c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800d79e:	4b23      	ldr	r3, [pc, #140]	; (800d82c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d7a0:	689b      	ldr	r3, [r3, #8]
 800d7a2:	f003 030c 	and.w	r3, r3, #12
 800d7a6:	2b0c      	cmp	r3, #12
 800d7a8:	d136      	bne.n	800d818 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d7aa:	4b20      	ldr	r3, [pc, #128]	; (800d82c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d7ac:	68db      	ldr	r3, [r3, #12]
 800d7ae:	f003 0303 	and.w	r3, r3, #3
 800d7b2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d7b4:	4b1d      	ldr	r3, [pc, #116]	; (800d82c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d7b6:	68db      	ldr	r3, [r3, #12]
 800d7b8:	091b      	lsrs	r3, r3, #4
 800d7ba:	f003 030f 	and.w	r3, r3, #15
 800d7be:	3301      	adds	r3, #1
 800d7c0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	2b03      	cmp	r3, #3
 800d7c6:	d10c      	bne.n	800d7e2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d7c8:	4a1a      	ldr	r2, [pc, #104]	; (800d834 <HAL_RCC_GetSysClockFreq+0xc0>)
 800d7ca:	68bb      	ldr	r3, [r7, #8]
 800d7cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7d0:	4a16      	ldr	r2, [pc, #88]	; (800d82c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d7d2:	68d2      	ldr	r2, [r2, #12]
 800d7d4:	0a12      	lsrs	r2, r2, #8
 800d7d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d7da:	fb02 f303 	mul.w	r3, r2, r3
 800d7de:	617b      	str	r3, [r7, #20]
      break;
 800d7e0:	e00c      	b.n	800d7fc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d7e2:	4a13      	ldr	r2, [pc, #76]	; (800d830 <HAL_RCC_GetSysClockFreq+0xbc>)
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7ea:	4a10      	ldr	r2, [pc, #64]	; (800d82c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d7ec:	68d2      	ldr	r2, [r2, #12]
 800d7ee:	0a12      	lsrs	r2, r2, #8
 800d7f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d7f4:	fb02 f303 	mul.w	r3, r2, r3
 800d7f8:	617b      	str	r3, [r7, #20]
      break;
 800d7fa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d7fc:	4b0b      	ldr	r3, [pc, #44]	; (800d82c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d7fe:	68db      	ldr	r3, [r3, #12]
 800d800:	0e5b      	lsrs	r3, r3, #25
 800d802:	f003 0303 	and.w	r3, r3, #3
 800d806:	3301      	adds	r3, #1
 800d808:	005b      	lsls	r3, r3, #1
 800d80a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800d80c:	697a      	ldr	r2, [r7, #20]
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	fbb2 f3f3 	udiv	r3, r2, r3
 800d814:	613b      	str	r3, [r7, #16]
 800d816:	e001      	b.n	800d81c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800d818:	2300      	movs	r3, #0
 800d81a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800d81c:	693b      	ldr	r3, [r7, #16]
}
 800d81e:	4618      	mov	r0, r3
 800d820:	371c      	adds	r7, #28
 800d822:	46bd      	mov	sp, r7
 800d824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d828:	4770      	bx	lr
 800d82a:	bf00      	nop
 800d82c:	40021000 	.word	0x40021000
 800d830:	00f42400 	.word	0x00f42400
 800d834:	007a1200 	.word	0x007a1200

0800d838 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d838:	b480      	push	{r7}
 800d83a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d83c:	4b03      	ldr	r3, [pc, #12]	; (800d84c <HAL_RCC_GetHCLKFreq+0x14>)
 800d83e:	681b      	ldr	r3, [r3, #0]
}
 800d840:	4618      	mov	r0, r3
 800d842:	46bd      	mov	sp, r7
 800d844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d848:	4770      	bx	lr
 800d84a:	bf00      	nop
 800d84c:	20000004 	.word	0x20000004

0800d850 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d850:	b580      	push	{r7, lr}
 800d852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800d854:	f7ff fff0 	bl	800d838 <HAL_RCC_GetHCLKFreq>
 800d858:	4602      	mov	r2, r0
 800d85a:	4b06      	ldr	r3, [pc, #24]	; (800d874 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d85c:	689b      	ldr	r3, [r3, #8]
 800d85e:	0a1b      	lsrs	r3, r3, #8
 800d860:	f003 0307 	and.w	r3, r3, #7
 800d864:	4904      	ldr	r1, [pc, #16]	; (800d878 <HAL_RCC_GetPCLK1Freq+0x28>)
 800d866:	5ccb      	ldrb	r3, [r1, r3]
 800d868:	f003 031f 	and.w	r3, r3, #31
 800d86c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d870:	4618      	mov	r0, r3
 800d872:	bd80      	pop	{r7, pc}
 800d874:	40021000 	.word	0x40021000
 800d878:	08019458 	.word	0x08019458

0800d87c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800d880:	f7ff ffda 	bl	800d838 <HAL_RCC_GetHCLKFreq>
 800d884:	4602      	mov	r2, r0
 800d886:	4b06      	ldr	r3, [pc, #24]	; (800d8a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d888:	689b      	ldr	r3, [r3, #8]
 800d88a:	0adb      	lsrs	r3, r3, #11
 800d88c:	f003 0307 	and.w	r3, r3, #7
 800d890:	4904      	ldr	r1, [pc, #16]	; (800d8a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d892:	5ccb      	ldrb	r3, [r1, r3]
 800d894:	f003 031f 	and.w	r3, r3, #31
 800d898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d89c:	4618      	mov	r0, r3
 800d89e:	bd80      	pop	{r7, pc}
 800d8a0:	40021000 	.word	0x40021000
 800d8a4:	08019458 	.word	0x08019458

0800d8a8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800d8a8:	b480      	push	{r7}
 800d8aa:	b083      	sub	sp, #12
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
 800d8b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	220f      	movs	r2, #15
 800d8b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800d8b8:	4b12      	ldr	r3, [pc, #72]	; (800d904 <HAL_RCC_GetClockConfig+0x5c>)
 800d8ba:	689b      	ldr	r3, [r3, #8]
 800d8bc:	f003 0203 	and.w	r2, r3, #3
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800d8c4:	4b0f      	ldr	r3, [pc, #60]	; (800d904 <HAL_RCC_GetClockConfig+0x5c>)
 800d8c6:	689b      	ldr	r3, [r3, #8]
 800d8c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800d8d0:	4b0c      	ldr	r3, [pc, #48]	; (800d904 <HAL_RCC_GetClockConfig+0x5c>)
 800d8d2:	689b      	ldr	r3, [r3, #8]
 800d8d4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800d8dc:	4b09      	ldr	r3, [pc, #36]	; (800d904 <HAL_RCC_GetClockConfig+0x5c>)
 800d8de:	689b      	ldr	r3, [r3, #8]
 800d8e0:	08db      	lsrs	r3, r3, #3
 800d8e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800d8ea:	4b07      	ldr	r3, [pc, #28]	; (800d908 <HAL_RCC_GetClockConfig+0x60>)
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	f003 020f 	and.w	r2, r3, #15
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	601a      	str	r2, [r3, #0]
}
 800d8f6:	bf00      	nop
 800d8f8:	370c      	adds	r7, #12
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d900:	4770      	bx	lr
 800d902:	bf00      	nop
 800d904:	40021000 	.word	0x40021000
 800d908:	40022000 	.word	0x40022000

0800d90c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800d90c:	b480      	push	{r7}
 800d90e:	b087      	sub	sp, #28
 800d910:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d912:	4b1e      	ldr	r3, [pc, #120]	; (800d98c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d914:	68db      	ldr	r3, [r3, #12]
 800d916:	f003 0303 	and.w	r3, r3, #3
 800d91a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d91c:	4b1b      	ldr	r3, [pc, #108]	; (800d98c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d91e:	68db      	ldr	r3, [r3, #12]
 800d920:	091b      	lsrs	r3, r3, #4
 800d922:	f003 030f 	and.w	r3, r3, #15
 800d926:	3301      	adds	r3, #1
 800d928:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800d92a:	693b      	ldr	r3, [r7, #16]
 800d92c:	2b03      	cmp	r3, #3
 800d92e:	d10c      	bne.n	800d94a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d930:	4a17      	ldr	r2, [pc, #92]	; (800d990 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	fbb2 f3f3 	udiv	r3, r2, r3
 800d938:	4a14      	ldr	r2, [pc, #80]	; (800d98c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d93a:	68d2      	ldr	r2, [r2, #12]
 800d93c:	0a12      	lsrs	r2, r2, #8
 800d93e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d942:	fb02 f303 	mul.w	r3, r2, r3
 800d946:	617b      	str	r3, [r7, #20]
    break;
 800d948:	e00c      	b.n	800d964 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d94a:	4a12      	ldr	r2, [pc, #72]	; (800d994 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d952:	4a0e      	ldr	r2, [pc, #56]	; (800d98c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d954:	68d2      	ldr	r2, [r2, #12]
 800d956:	0a12      	lsrs	r2, r2, #8
 800d958:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d95c:	fb02 f303 	mul.w	r3, r2, r3
 800d960:	617b      	str	r3, [r7, #20]
    break;
 800d962:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d964:	4b09      	ldr	r3, [pc, #36]	; (800d98c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d966:	68db      	ldr	r3, [r3, #12]
 800d968:	0e5b      	lsrs	r3, r3, #25
 800d96a:	f003 0303 	and.w	r3, r3, #3
 800d96e:	3301      	adds	r3, #1
 800d970:	005b      	lsls	r3, r3, #1
 800d972:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800d974:	697a      	ldr	r2, [r7, #20]
 800d976:	68bb      	ldr	r3, [r7, #8]
 800d978:	fbb2 f3f3 	udiv	r3, r2, r3
 800d97c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800d97e:	687b      	ldr	r3, [r7, #4]
}
 800d980:	4618      	mov	r0, r3
 800d982:	371c      	adds	r7, #28
 800d984:	46bd      	mov	sp, r7
 800d986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98a:	4770      	bx	lr
 800d98c:	40021000 	.word	0x40021000
 800d990:	007a1200 	.word	0x007a1200
 800d994:	00f42400 	.word	0x00f42400

0800d998 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b086      	sub	sp, #24
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	f000 8098 	beq.w	800dae6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d9ba:	4b43      	ldr	r3, [pc, #268]	; (800dac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d9bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d9be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d10d      	bne.n	800d9e2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d9c6:	4b40      	ldr	r3, [pc, #256]	; (800dac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d9c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d9ca:	4a3f      	ldr	r2, [pc, #252]	; (800dac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d9cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d9d0:	6593      	str	r3, [r2, #88]	; 0x58
 800d9d2:	4b3d      	ldr	r3, [pc, #244]	; (800dac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d9d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d9d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d9da:	60bb      	str	r3, [r7, #8]
 800d9dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d9de:	2301      	movs	r3, #1
 800d9e0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d9e2:	4b3a      	ldr	r3, [pc, #232]	; (800dacc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	4a39      	ldr	r2, [pc, #228]	; (800dacc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d9e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d9ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d9ee:	f7fa fe79 	bl	80086e4 <HAL_GetTick>
 800d9f2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d9f4:	e009      	b.n	800da0a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d9f6:	f7fa fe75 	bl	80086e4 <HAL_GetTick>
 800d9fa:	4602      	mov	r2, r0
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	1ad3      	subs	r3, r2, r3
 800da00:	2b02      	cmp	r3, #2
 800da02:	d902      	bls.n	800da0a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800da04:	2303      	movs	r3, #3
 800da06:	74fb      	strb	r3, [r7, #19]
        break;
 800da08:	e005      	b.n	800da16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800da0a:	4b30      	ldr	r3, [pc, #192]	; (800dacc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da12:	2b00      	cmp	r3, #0
 800da14:	d0ef      	beq.n	800d9f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800da16:	7cfb      	ldrb	r3, [r7, #19]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d159      	bne.n	800dad0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800da1c:	4b2a      	ldr	r3, [pc, #168]	; (800dac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800da1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800da26:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d01e      	beq.n	800da6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da32:	697a      	ldr	r2, [r7, #20]
 800da34:	429a      	cmp	r2, r3
 800da36:	d019      	beq.n	800da6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800da38:	4b23      	ldr	r3, [pc, #140]	; (800dac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800da3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800da42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800da44:	4b20      	ldr	r3, [pc, #128]	; (800dac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800da46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da4a:	4a1f      	ldr	r2, [pc, #124]	; (800dac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800da4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800da50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800da54:	4b1c      	ldr	r3, [pc, #112]	; (800dac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800da56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da5a:	4a1b      	ldr	r2, [pc, #108]	; (800dac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800da5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800da60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800da64:	4a18      	ldr	r2, [pc, #96]	; (800dac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800da66:	697b      	ldr	r3, [r7, #20]
 800da68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800da6c:	697b      	ldr	r3, [r7, #20]
 800da6e:	f003 0301 	and.w	r3, r3, #1
 800da72:	2b00      	cmp	r3, #0
 800da74:	d016      	beq.n	800daa4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800da76:	f7fa fe35 	bl	80086e4 <HAL_GetTick>
 800da7a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800da7c:	e00b      	b.n	800da96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800da7e:	f7fa fe31 	bl	80086e4 <HAL_GetTick>
 800da82:	4602      	mov	r2, r0
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	1ad3      	subs	r3, r2, r3
 800da88:	f241 3288 	movw	r2, #5000	; 0x1388
 800da8c:	4293      	cmp	r3, r2
 800da8e:	d902      	bls.n	800da96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800da90:	2303      	movs	r3, #3
 800da92:	74fb      	strb	r3, [r7, #19]
            break;
 800da94:	e006      	b.n	800daa4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800da96:	4b0c      	ldr	r3, [pc, #48]	; (800dac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800da98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da9c:	f003 0302 	and.w	r3, r3, #2
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d0ec      	beq.n	800da7e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800daa4:	7cfb      	ldrb	r3, [r7, #19]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d10b      	bne.n	800dac2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800daaa:	4b07      	ldr	r3, [pc, #28]	; (800dac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800daac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dab0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dab8:	4903      	ldr	r1, [pc, #12]	; (800dac8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800daba:	4313      	orrs	r3, r2
 800dabc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800dac0:	e008      	b.n	800dad4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800dac2:	7cfb      	ldrb	r3, [r7, #19]
 800dac4:	74bb      	strb	r3, [r7, #18]
 800dac6:	e005      	b.n	800dad4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800dac8:	40021000 	.word	0x40021000
 800dacc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dad0:	7cfb      	ldrb	r3, [r7, #19]
 800dad2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800dad4:	7c7b      	ldrb	r3, [r7, #17]
 800dad6:	2b01      	cmp	r3, #1
 800dad8:	d105      	bne.n	800dae6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800dada:	4ba7      	ldr	r3, [pc, #668]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dadc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dade:	4aa6      	ldr	r2, [pc, #664]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dae0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dae4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	f003 0301 	and.w	r3, r3, #1
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d00a      	beq.n	800db08 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800daf2:	4ba1      	ldr	r3, [pc, #644]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800daf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800daf8:	f023 0203 	bic.w	r2, r3, #3
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	685b      	ldr	r3, [r3, #4]
 800db00:	499d      	ldr	r1, [pc, #628]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db02:	4313      	orrs	r3, r2
 800db04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	f003 0302 	and.w	r3, r3, #2
 800db10:	2b00      	cmp	r3, #0
 800db12:	d00a      	beq.n	800db2a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800db14:	4b98      	ldr	r3, [pc, #608]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db1a:	f023 020c 	bic.w	r2, r3, #12
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	689b      	ldr	r3, [r3, #8]
 800db22:	4995      	ldr	r1, [pc, #596]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db24:	4313      	orrs	r3, r2
 800db26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	f003 0304 	and.w	r3, r3, #4
 800db32:	2b00      	cmp	r3, #0
 800db34:	d00a      	beq.n	800db4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800db36:	4b90      	ldr	r3, [pc, #576]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db3c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	68db      	ldr	r3, [r3, #12]
 800db44:	498c      	ldr	r1, [pc, #560]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db46:	4313      	orrs	r3, r2
 800db48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	f003 0308 	and.w	r3, r3, #8
 800db54:	2b00      	cmp	r3, #0
 800db56:	d00a      	beq.n	800db6e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800db58:	4b87      	ldr	r3, [pc, #540]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	691b      	ldr	r3, [r3, #16]
 800db66:	4984      	ldr	r1, [pc, #528]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db68:	4313      	orrs	r3, r2
 800db6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	f003 0310 	and.w	r3, r3, #16
 800db76:	2b00      	cmp	r3, #0
 800db78:	d00a      	beq.n	800db90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800db7a:	4b7f      	ldr	r3, [pc, #508]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	695b      	ldr	r3, [r3, #20]
 800db88:	497b      	ldr	r1, [pc, #492]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db8a:	4313      	orrs	r3, r2
 800db8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	f003 0320 	and.w	r3, r3, #32
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d00a      	beq.n	800dbb2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800db9c:	4b76      	ldr	r3, [pc, #472]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dba2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	699b      	ldr	r3, [r3, #24]
 800dbaa:	4973      	ldr	r1, [pc, #460]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dbac:	4313      	orrs	r3, r2
 800dbae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d00a      	beq.n	800dbd4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800dbbe:	4b6e      	ldr	r3, [pc, #440]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dbc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dbc4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	69db      	ldr	r3, [r3, #28]
 800dbcc:	496a      	ldr	r1, [pc, #424]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dbce:	4313      	orrs	r3, r2
 800dbd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d00a      	beq.n	800dbf6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800dbe0:	4b65      	ldr	r3, [pc, #404]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dbe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dbe6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	6a1b      	ldr	r3, [r3, #32]
 800dbee:	4962      	ldr	r1, [pc, #392]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dbf0:	4313      	orrs	r3, r2
 800dbf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d00a      	beq.n	800dc18 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800dc02:	4b5d      	ldr	r3, [pc, #372]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc10:	4959      	ldr	r1, [pc, #356]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc12:	4313      	orrs	r3, r2
 800dc14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d00a      	beq.n	800dc3a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800dc24:	4b54      	ldr	r3, [pc, #336]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800dc2a:	f023 0203 	bic.w	r2, r3, #3
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc32:	4951      	ldr	r1, [pc, #324]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc34:	4313      	orrs	r3, r2
 800dc36:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d00a      	beq.n	800dc5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800dc46:	4b4c      	ldr	r3, [pc, #304]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc54:	4948      	ldr	r1, [pc, #288]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc56:	4313      	orrs	r3, r2
 800dc58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d015      	beq.n	800dc94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800dc68:	4b43      	ldr	r3, [pc, #268]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc76:	4940      	ldr	r1, [pc, #256]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc78:	4313      	orrs	r3, r2
 800dc7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dc86:	d105      	bne.n	800dc94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800dc88:	4b3b      	ldr	r3, [pc, #236]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc8a:	68db      	ldr	r3, [r3, #12]
 800dc8c:	4a3a      	ldr	r2, [pc, #232]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dc92:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d015      	beq.n	800dccc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800dca0:	4b35      	ldr	r3, [pc, #212]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dca6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcae:	4932      	ldr	r1, [pc, #200]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dcb0:	4313      	orrs	r3, r2
 800dcb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dcbe:	d105      	bne.n	800dccc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800dcc0:	4b2d      	ldr	r3, [pc, #180]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dcc2:	68db      	ldr	r3, [r3, #12]
 800dcc4:	4a2c      	ldr	r2, [pc, #176]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dcc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dcca:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d015      	beq.n	800dd04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800dcd8:	4b27      	ldr	r3, [pc, #156]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dcda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dcde:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dce6:	4924      	ldr	r1, [pc, #144]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dce8:	4313      	orrs	r3, r2
 800dcea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcf2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800dcf6:	d105      	bne.n	800dd04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800dcf8:	4b1f      	ldr	r3, [pc, #124]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dcfa:	68db      	ldr	r3, [r3, #12]
 800dcfc:	4a1e      	ldr	r2, [pc, #120]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dcfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dd02:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d015      	beq.n	800dd3c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800dd10:	4b19      	ldr	r3, [pc, #100]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd1e:	4916      	ldr	r1, [pc, #88]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd20:	4313      	orrs	r3, r2
 800dd22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dd2e:	d105      	bne.n	800dd3c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800dd30:	4b11      	ldr	r3, [pc, #68]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd32:	68db      	ldr	r3, [r3, #12]
 800dd34:	4a10      	ldr	r2, [pc, #64]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dd3a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d019      	beq.n	800dd7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800dd48:	4b0b      	ldr	r3, [pc, #44]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd56:	4908      	ldr	r1, [pc, #32]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd58:	4313      	orrs	r3, r2
 800dd5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dd66:	d109      	bne.n	800dd7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800dd68:	4b03      	ldr	r3, [pc, #12]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd6a:	68db      	ldr	r3, [r3, #12]
 800dd6c:	4a02      	ldr	r2, [pc, #8]	; (800dd78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dd72:	60d3      	str	r3, [r2, #12]
 800dd74:	e002      	b.n	800dd7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800dd76:	bf00      	nop
 800dd78:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d015      	beq.n	800ddb4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800dd88:	4b29      	ldr	r3, [pc, #164]	; (800de30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dd8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd8e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd96:	4926      	ldr	r1, [pc, #152]	; (800de30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dd98:	4313      	orrs	r3, r2
 800dd9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dda2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dda6:	d105      	bne.n	800ddb4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800dda8:	4b21      	ldr	r3, [pc, #132]	; (800de30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ddaa:	68db      	ldr	r3, [r3, #12]
 800ddac:	4a20      	ldr	r2, [pc, #128]	; (800de30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ddae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ddb2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d015      	beq.n	800ddec <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800ddc0:	4b1b      	ldr	r3, [pc, #108]	; (800de30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ddc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ddc6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ddce:	4918      	ldr	r1, [pc, #96]	; (800de30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ddd0:	4313      	orrs	r3, r2
 800ddd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ddda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ddde:	d105      	bne.n	800ddec <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800dde0:	4b13      	ldr	r3, [pc, #76]	; (800de30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dde2:	68db      	ldr	r3, [r3, #12]
 800dde4:	4a12      	ldr	r2, [pc, #72]	; (800de30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dde6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ddea:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d015      	beq.n	800de24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ddf8:	4b0d      	ldr	r3, [pc, #52]	; (800de30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ddfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ddfe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de06:	490a      	ldr	r1, [pc, #40]	; (800de30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800de08:	4313      	orrs	r3, r2
 800de0a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800de16:	d105      	bne.n	800de24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800de18:	4b05      	ldr	r3, [pc, #20]	; (800de30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800de1a:	68db      	ldr	r3, [r3, #12]
 800de1c:	4a04      	ldr	r2, [pc, #16]	; (800de30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800de1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800de22:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800de24:	7cbb      	ldrb	r3, [r7, #18]
}
 800de26:	4618      	mov	r0, r3
 800de28:	3718      	adds	r7, #24
 800de2a:	46bd      	mov	sp, r7
 800de2c:	bd80      	pop	{r7, pc}
 800de2e:	bf00      	nop
 800de30:	40021000 	.word	0x40021000

0800de34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b084      	sub	sp, #16
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d101      	bne.n	800de46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800de42:	2301      	movs	r3, #1
 800de44:	e09d      	b.n	800df82 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d108      	bne.n	800de60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	685b      	ldr	r3, [r3, #4]
 800de52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800de56:	d009      	beq.n	800de6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2200      	movs	r2, #0
 800de5c:	61da      	str	r2, [r3, #28]
 800de5e:	e005      	b.n	800de6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2200      	movs	r2, #0
 800de64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	2200      	movs	r2, #0
 800de6a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2200      	movs	r2, #0
 800de70:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800de78:	b2db      	uxtb	r3, r3
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d106      	bne.n	800de8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	2200      	movs	r2, #0
 800de82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800de86:	6878      	ldr	r0, [r7, #4]
 800de88:	f7f9 ff34 	bl	8007cf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	2202      	movs	r2, #2
 800de90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	681a      	ldr	r2, [r3, #0]
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dea2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	68db      	ldr	r3, [r3, #12]
 800dea8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800deac:	d902      	bls.n	800deb4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800deae:	2300      	movs	r3, #0
 800deb0:	60fb      	str	r3, [r7, #12]
 800deb2:	e002      	b.n	800deba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800deb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800deb8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	68db      	ldr	r3, [r3, #12]
 800debe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800dec2:	d007      	beq.n	800ded4 <HAL_SPI_Init+0xa0>
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	68db      	ldr	r3, [r3, #12]
 800dec8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800decc:	d002      	beq.n	800ded4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	2200      	movs	r2, #0
 800ded2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	685b      	ldr	r3, [r3, #4]
 800ded8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	689b      	ldr	r3, [r3, #8]
 800dee0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800dee4:	431a      	orrs	r2, r3
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	691b      	ldr	r3, [r3, #16]
 800deea:	f003 0302 	and.w	r3, r3, #2
 800deee:	431a      	orrs	r2, r3
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	695b      	ldr	r3, [r3, #20]
 800def4:	f003 0301 	and.w	r3, r3, #1
 800def8:	431a      	orrs	r2, r3
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	699b      	ldr	r3, [r3, #24]
 800defe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800df02:	431a      	orrs	r2, r3
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	69db      	ldr	r3, [r3, #28]
 800df08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800df0c:	431a      	orrs	r2, r3
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	6a1b      	ldr	r3, [r3, #32]
 800df12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df16:	ea42 0103 	orr.w	r1, r2, r3
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df1e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	430a      	orrs	r2, r1
 800df28:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	699b      	ldr	r3, [r3, #24]
 800df2e:	0c1b      	lsrs	r3, r3, #16
 800df30:	f003 0204 	and.w	r2, r3, #4
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df38:	f003 0310 	and.w	r3, r3, #16
 800df3c:	431a      	orrs	r2, r3
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df42:	f003 0308 	and.w	r3, r3, #8
 800df46:	431a      	orrs	r2, r3
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	68db      	ldr	r3, [r3, #12]
 800df4c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800df50:	ea42 0103 	orr.w	r1, r2, r3
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	430a      	orrs	r2, r1
 800df60:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	69da      	ldr	r2, [r3, #28]
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800df70:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	2200      	movs	r2, #0
 800df76:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2201      	movs	r2, #1
 800df7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800df80:	2300      	movs	r3, #0
}
 800df82:	4618      	mov	r0, r3
 800df84:	3710      	adds	r7, #16
 800df86:	46bd      	mov	sp, r7
 800df88:	bd80      	pop	{r7, pc}

0800df8a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800df8a:	b580      	push	{r7, lr}
 800df8c:	b082      	sub	sp, #8
 800df8e:	af00      	add	r7, sp, #0
 800df90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d101      	bne.n	800df9c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800df98:	2301      	movs	r3, #1
 800df9a:	e049      	b.n	800e030 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dfa2:	b2db      	uxtb	r3, r3
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d106      	bne.n	800dfb6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	2200      	movs	r2, #0
 800dfac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800dfb0:	6878      	ldr	r0, [r7, #4]
 800dfb2:	f000 f841 	bl	800e038 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2202      	movs	r2, #2
 800dfba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681a      	ldr	r2, [r3, #0]
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	3304      	adds	r3, #4
 800dfc6:	4619      	mov	r1, r3
 800dfc8:	4610      	mov	r0, r2
 800dfca:	f000 fcdd 	bl	800e988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	2201      	movs	r2, #1
 800dfd2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	2201      	movs	r2, #1
 800dfda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	2201      	movs	r2, #1
 800dfe2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	2201      	movs	r2, #1
 800dfea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	2201      	movs	r2, #1
 800dff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	2201      	movs	r2, #1
 800dffa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2201      	movs	r2, #1
 800e002:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	2201      	movs	r2, #1
 800e00a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	2201      	movs	r2, #1
 800e012:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	2201      	movs	r2, #1
 800e01a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	2201      	movs	r2, #1
 800e022:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	2201      	movs	r2, #1
 800e02a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e02e:	2300      	movs	r3, #0
}
 800e030:	4618      	mov	r0, r3
 800e032:	3708      	adds	r7, #8
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}

0800e038 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800e038:	b480      	push	{r7}
 800e03a:	b083      	sub	sp, #12
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800e040:	bf00      	nop
 800e042:	370c      	adds	r7, #12
 800e044:	46bd      	mov	sp, r7
 800e046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04a:	4770      	bx	lr

0800e04c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e04c:	b480      	push	{r7}
 800e04e:	b085      	sub	sp, #20
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e05a:	b2db      	uxtb	r3, r3
 800e05c:	2b01      	cmp	r3, #1
 800e05e:	d001      	beq.n	800e064 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e060:	2301      	movs	r3, #1
 800e062:	e054      	b.n	800e10e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	2202      	movs	r2, #2
 800e068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	68da      	ldr	r2, [r3, #12]
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	f042 0201 	orr.w	r2, r2, #1
 800e07a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	4a26      	ldr	r2, [pc, #152]	; (800e11c <HAL_TIM_Base_Start_IT+0xd0>)
 800e082:	4293      	cmp	r3, r2
 800e084:	d022      	beq.n	800e0cc <HAL_TIM_Base_Start_IT+0x80>
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e08e:	d01d      	beq.n	800e0cc <HAL_TIM_Base_Start_IT+0x80>
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	4a22      	ldr	r2, [pc, #136]	; (800e120 <HAL_TIM_Base_Start_IT+0xd4>)
 800e096:	4293      	cmp	r3, r2
 800e098:	d018      	beq.n	800e0cc <HAL_TIM_Base_Start_IT+0x80>
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	4a21      	ldr	r2, [pc, #132]	; (800e124 <HAL_TIM_Base_Start_IT+0xd8>)
 800e0a0:	4293      	cmp	r3, r2
 800e0a2:	d013      	beq.n	800e0cc <HAL_TIM_Base_Start_IT+0x80>
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	4a1f      	ldr	r2, [pc, #124]	; (800e128 <HAL_TIM_Base_Start_IT+0xdc>)
 800e0aa:	4293      	cmp	r3, r2
 800e0ac:	d00e      	beq.n	800e0cc <HAL_TIM_Base_Start_IT+0x80>
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	4a1e      	ldr	r2, [pc, #120]	; (800e12c <HAL_TIM_Base_Start_IT+0xe0>)
 800e0b4:	4293      	cmp	r3, r2
 800e0b6:	d009      	beq.n	800e0cc <HAL_TIM_Base_Start_IT+0x80>
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	4a1c      	ldr	r2, [pc, #112]	; (800e130 <HAL_TIM_Base_Start_IT+0xe4>)
 800e0be:	4293      	cmp	r3, r2
 800e0c0:	d004      	beq.n	800e0cc <HAL_TIM_Base_Start_IT+0x80>
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	4a1b      	ldr	r2, [pc, #108]	; (800e134 <HAL_TIM_Base_Start_IT+0xe8>)
 800e0c8:	4293      	cmp	r3, r2
 800e0ca:	d115      	bne.n	800e0f8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	689a      	ldr	r2, [r3, #8]
 800e0d2:	4b19      	ldr	r3, [pc, #100]	; (800e138 <HAL_TIM_Base_Start_IT+0xec>)
 800e0d4:	4013      	ands	r3, r2
 800e0d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	2b06      	cmp	r3, #6
 800e0dc:	d015      	beq.n	800e10a <HAL_TIM_Base_Start_IT+0xbe>
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e0e4:	d011      	beq.n	800e10a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	681a      	ldr	r2, [r3, #0]
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	f042 0201 	orr.w	r2, r2, #1
 800e0f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e0f6:	e008      	b.n	800e10a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	681a      	ldr	r2, [r3, #0]
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	f042 0201 	orr.w	r2, r2, #1
 800e106:	601a      	str	r2, [r3, #0]
 800e108:	e000      	b.n	800e10c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e10a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e10c:	2300      	movs	r3, #0
}
 800e10e:	4618      	mov	r0, r3
 800e110:	3714      	adds	r7, #20
 800e112:	46bd      	mov	sp, r7
 800e114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e118:	4770      	bx	lr
 800e11a:	bf00      	nop
 800e11c:	40012c00 	.word	0x40012c00
 800e120:	40000400 	.word	0x40000400
 800e124:	40000800 	.word	0x40000800
 800e128:	40000c00 	.word	0x40000c00
 800e12c:	40013400 	.word	0x40013400
 800e130:	40014000 	.word	0x40014000
 800e134:	40015000 	.word	0x40015000
 800e138:	00010007 	.word	0x00010007

0800e13c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b082      	sub	sp, #8
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d101      	bne.n	800e14e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e14a:	2301      	movs	r3, #1
 800e14c:	e049      	b.n	800e1e2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e154:	b2db      	uxtb	r3, r3
 800e156:	2b00      	cmp	r3, #0
 800e158:	d106      	bne.n	800e168 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	2200      	movs	r2, #0
 800e15e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e162:	6878      	ldr	r0, [r7, #4]
 800e164:	f7fa f86a 	bl	800823c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2202      	movs	r2, #2
 800e16c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681a      	ldr	r2, [r3, #0]
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	3304      	adds	r3, #4
 800e178:	4619      	mov	r1, r3
 800e17a:	4610      	mov	r0, r2
 800e17c:	f000 fc04 	bl	800e988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	2201      	movs	r2, #1
 800e184:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	2201      	movs	r2, #1
 800e18c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2201      	movs	r2, #1
 800e194:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2201      	movs	r2, #1
 800e19c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2201      	movs	r2, #1
 800e1a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	2201      	movs	r2, #1
 800e1ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2201      	movs	r2, #1
 800e1b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2201      	movs	r2, #1
 800e1bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2201      	movs	r2, #1
 800e1c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2201      	movs	r2, #1
 800e1cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	2201      	movs	r2, #1
 800e1d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2201      	movs	r2, #1
 800e1dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e1e0:	2300      	movs	r3, #0
}
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	3708      	adds	r7, #8
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bd80      	pop	{r7, pc}
	...

0800e1ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b084      	sub	sp, #16
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
 800e1f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d109      	bne.n	800e210 <HAL_TIM_PWM_Start+0x24>
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e202:	b2db      	uxtb	r3, r3
 800e204:	2b01      	cmp	r3, #1
 800e206:	bf14      	ite	ne
 800e208:	2301      	movne	r3, #1
 800e20a:	2300      	moveq	r3, #0
 800e20c:	b2db      	uxtb	r3, r3
 800e20e:	e03c      	b.n	800e28a <HAL_TIM_PWM_Start+0x9e>
 800e210:	683b      	ldr	r3, [r7, #0]
 800e212:	2b04      	cmp	r3, #4
 800e214:	d109      	bne.n	800e22a <HAL_TIM_PWM_Start+0x3e>
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e21c:	b2db      	uxtb	r3, r3
 800e21e:	2b01      	cmp	r3, #1
 800e220:	bf14      	ite	ne
 800e222:	2301      	movne	r3, #1
 800e224:	2300      	moveq	r3, #0
 800e226:	b2db      	uxtb	r3, r3
 800e228:	e02f      	b.n	800e28a <HAL_TIM_PWM_Start+0x9e>
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	2b08      	cmp	r3, #8
 800e22e:	d109      	bne.n	800e244 <HAL_TIM_PWM_Start+0x58>
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e236:	b2db      	uxtb	r3, r3
 800e238:	2b01      	cmp	r3, #1
 800e23a:	bf14      	ite	ne
 800e23c:	2301      	movne	r3, #1
 800e23e:	2300      	moveq	r3, #0
 800e240:	b2db      	uxtb	r3, r3
 800e242:	e022      	b.n	800e28a <HAL_TIM_PWM_Start+0x9e>
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	2b0c      	cmp	r3, #12
 800e248:	d109      	bne.n	800e25e <HAL_TIM_PWM_Start+0x72>
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e250:	b2db      	uxtb	r3, r3
 800e252:	2b01      	cmp	r3, #1
 800e254:	bf14      	ite	ne
 800e256:	2301      	movne	r3, #1
 800e258:	2300      	moveq	r3, #0
 800e25a:	b2db      	uxtb	r3, r3
 800e25c:	e015      	b.n	800e28a <HAL_TIM_PWM_Start+0x9e>
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	2b10      	cmp	r3, #16
 800e262:	d109      	bne.n	800e278 <HAL_TIM_PWM_Start+0x8c>
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e26a:	b2db      	uxtb	r3, r3
 800e26c:	2b01      	cmp	r3, #1
 800e26e:	bf14      	ite	ne
 800e270:	2301      	movne	r3, #1
 800e272:	2300      	moveq	r3, #0
 800e274:	b2db      	uxtb	r3, r3
 800e276:	e008      	b.n	800e28a <HAL_TIM_PWM_Start+0x9e>
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e27e:	b2db      	uxtb	r3, r3
 800e280:	2b01      	cmp	r3, #1
 800e282:	bf14      	ite	ne
 800e284:	2301      	movne	r3, #1
 800e286:	2300      	moveq	r3, #0
 800e288:	b2db      	uxtb	r3, r3
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d001      	beq.n	800e292 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e28e:	2301      	movs	r3, #1
 800e290:	e0a6      	b.n	800e3e0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e292:	683b      	ldr	r3, [r7, #0]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d104      	bne.n	800e2a2 <HAL_TIM_PWM_Start+0xb6>
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	2202      	movs	r2, #2
 800e29c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e2a0:	e023      	b.n	800e2ea <HAL_TIM_PWM_Start+0xfe>
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	2b04      	cmp	r3, #4
 800e2a6:	d104      	bne.n	800e2b2 <HAL_TIM_PWM_Start+0xc6>
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2202      	movs	r2, #2
 800e2ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e2b0:	e01b      	b.n	800e2ea <HAL_TIM_PWM_Start+0xfe>
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	2b08      	cmp	r3, #8
 800e2b6:	d104      	bne.n	800e2c2 <HAL_TIM_PWM_Start+0xd6>
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2202      	movs	r2, #2
 800e2bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e2c0:	e013      	b.n	800e2ea <HAL_TIM_PWM_Start+0xfe>
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	2b0c      	cmp	r3, #12
 800e2c6:	d104      	bne.n	800e2d2 <HAL_TIM_PWM_Start+0xe6>
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	2202      	movs	r2, #2
 800e2cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e2d0:	e00b      	b.n	800e2ea <HAL_TIM_PWM_Start+0xfe>
 800e2d2:	683b      	ldr	r3, [r7, #0]
 800e2d4:	2b10      	cmp	r3, #16
 800e2d6:	d104      	bne.n	800e2e2 <HAL_TIM_PWM_Start+0xf6>
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	2202      	movs	r2, #2
 800e2dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e2e0:	e003      	b.n	800e2ea <HAL_TIM_PWM_Start+0xfe>
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	2202      	movs	r2, #2
 800e2e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	2201      	movs	r2, #1
 800e2f0:	6839      	ldr	r1, [r7, #0]
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	f000 ff1a 	bl	800f12c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	4a3a      	ldr	r2, [pc, #232]	; (800e3e8 <HAL_TIM_PWM_Start+0x1fc>)
 800e2fe:	4293      	cmp	r3, r2
 800e300:	d018      	beq.n	800e334 <HAL_TIM_PWM_Start+0x148>
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	4a39      	ldr	r2, [pc, #228]	; (800e3ec <HAL_TIM_PWM_Start+0x200>)
 800e308:	4293      	cmp	r3, r2
 800e30a:	d013      	beq.n	800e334 <HAL_TIM_PWM_Start+0x148>
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	4a37      	ldr	r2, [pc, #220]	; (800e3f0 <HAL_TIM_PWM_Start+0x204>)
 800e312:	4293      	cmp	r3, r2
 800e314:	d00e      	beq.n	800e334 <HAL_TIM_PWM_Start+0x148>
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	4a36      	ldr	r2, [pc, #216]	; (800e3f4 <HAL_TIM_PWM_Start+0x208>)
 800e31c:	4293      	cmp	r3, r2
 800e31e:	d009      	beq.n	800e334 <HAL_TIM_PWM_Start+0x148>
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	4a34      	ldr	r2, [pc, #208]	; (800e3f8 <HAL_TIM_PWM_Start+0x20c>)
 800e326:	4293      	cmp	r3, r2
 800e328:	d004      	beq.n	800e334 <HAL_TIM_PWM_Start+0x148>
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	4a33      	ldr	r2, [pc, #204]	; (800e3fc <HAL_TIM_PWM_Start+0x210>)
 800e330:	4293      	cmp	r3, r2
 800e332:	d101      	bne.n	800e338 <HAL_TIM_PWM_Start+0x14c>
 800e334:	2301      	movs	r3, #1
 800e336:	e000      	b.n	800e33a <HAL_TIM_PWM_Start+0x14e>
 800e338:	2300      	movs	r3, #0
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d007      	beq.n	800e34e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e34c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	4a25      	ldr	r2, [pc, #148]	; (800e3e8 <HAL_TIM_PWM_Start+0x1fc>)
 800e354:	4293      	cmp	r3, r2
 800e356:	d022      	beq.n	800e39e <HAL_TIM_PWM_Start+0x1b2>
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e360:	d01d      	beq.n	800e39e <HAL_TIM_PWM_Start+0x1b2>
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	4a26      	ldr	r2, [pc, #152]	; (800e400 <HAL_TIM_PWM_Start+0x214>)
 800e368:	4293      	cmp	r3, r2
 800e36a:	d018      	beq.n	800e39e <HAL_TIM_PWM_Start+0x1b2>
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	4a24      	ldr	r2, [pc, #144]	; (800e404 <HAL_TIM_PWM_Start+0x218>)
 800e372:	4293      	cmp	r3, r2
 800e374:	d013      	beq.n	800e39e <HAL_TIM_PWM_Start+0x1b2>
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	4a23      	ldr	r2, [pc, #140]	; (800e408 <HAL_TIM_PWM_Start+0x21c>)
 800e37c:	4293      	cmp	r3, r2
 800e37e:	d00e      	beq.n	800e39e <HAL_TIM_PWM_Start+0x1b2>
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	4a19      	ldr	r2, [pc, #100]	; (800e3ec <HAL_TIM_PWM_Start+0x200>)
 800e386:	4293      	cmp	r3, r2
 800e388:	d009      	beq.n	800e39e <HAL_TIM_PWM_Start+0x1b2>
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	4a18      	ldr	r2, [pc, #96]	; (800e3f0 <HAL_TIM_PWM_Start+0x204>)
 800e390:	4293      	cmp	r3, r2
 800e392:	d004      	beq.n	800e39e <HAL_TIM_PWM_Start+0x1b2>
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	4a18      	ldr	r2, [pc, #96]	; (800e3fc <HAL_TIM_PWM_Start+0x210>)
 800e39a:	4293      	cmp	r3, r2
 800e39c:	d115      	bne.n	800e3ca <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	689a      	ldr	r2, [r3, #8]
 800e3a4:	4b19      	ldr	r3, [pc, #100]	; (800e40c <HAL_TIM_PWM_Start+0x220>)
 800e3a6:	4013      	ands	r3, r2
 800e3a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	2b06      	cmp	r3, #6
 800e3ae:	d015      	beq.n	800e3dc <HAL_TIM_PWM_Start+0x1f0>
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e3b6:	d011      	beq.n	800e3dc <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	681a      	ldr	r2, [r3, #0]
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	f042 0201 	orr.w	r2, r2, #1
 800e3c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e3c8:	e008      	b.n	800e3dc <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	681a      	ldr	r2, [r3, #0]
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	f042 0201 	orr.w	r2, r2, #1
 800e3d8:	601a      	str	r2, [r3, #0]
 800e3da:	e000      	b.n	800e3de <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e3dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e3de:	2300      	movs	r3, #0
}
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	3710      	adds	r7, #16
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}
 800e3e8:	40012c00 	.word	0x40012c00
 800e3ec:	40013400 	.word	0x40013400
 800e3f0:	40014000 	.word	0x40014000
 800e3f4:	40014400 	.word	0x40014400
 800e3f8:	40014800 	.word	0x40014800
 800e3fc:	40015000 	.word	0x40015000
 800e400:	40000400 	.word	0x40000400
 800e404:	40000800 	.word	0x40000800
 800e408:	40000c00 	.word	0x40000c00
 800e40c:	00010007 	.word	0x00010007

0800e410 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b082      	sub	sp, #8
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	691b      	ldr	r3, [r3, #16]
 800e41e:	f003 0302 	and.w	r3, r3, #2
 800e422:	2b02      	cmp	r3, #2
 800e424:	d122      	bne.n	800e46c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	68db      	ldr	r3, [r3, #12]
 800e42c:	f003 0302 	and.w	r3, r3, #2
 800e430:	2b02      	cmp	r3, #2
 800e432:	d11b      	bne.n	800e46c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	f06f 0202 	mvn.w	r2, #2
 800e43c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	2201      	movs	r2, #1
 800e442:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	699b      	ldr	r3, [r3, #24]
 800e44a:	f003 0303 	and.w	r3, r3, #3
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d003      	beq.n	800e45a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	f000 fa7a 	bl	800e94c <HAL_TIM_IC_CaptureCallback>
 800e458:	e005      	b.n	800e466 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e45a:	6878      	ldr	r0, [r7, #4]
 800e45c:	f000 fa6c 	bl	800e938 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e460:	6878      	ldr	r0, [r7, #4]
 800e462:	f000 fa7d 	bl	800e960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	2200      	movs	r2, #0
 800e46a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	691b      	ldr	r3, [r3, #16]
 800e472:	f003 0304 	and.w	r3, r3, #4
 800e476:	2b04      	cmp	r3, #4
 800e478:	d122      	bne.n	800e4c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	68db      	ldr	r3, [r3, #12]
 800e480:	f003 0304 	and.w	r3, r3, #4
 800e484:	2b04      	cmp	r3, #4
 800e486:	d11b      	bne.n	800e4c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	f06f 0204 	mvn.w	r2, #4
 800e490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	2202      	movs	r2, #2
 800e496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	699b      	ldr	r3, [r3, #24]
 800e49e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d003      	beq.n	800e4ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e4a6:	6878      	ldr	r0, [r7, #4]
 800e4a8:	f000 fa50 	bl	800e94c <HAL_TIM_IC_CaptureCallback>
 800e4ac:	e005      	b.n	800e4ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e4ae:	6878      	ldr	r0, [r7, #4]
 800e4b0:	f000 fa42 	bl	800e938 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e4b4:	6878      	ldr	r0, [r7, #4]
 800e4b6:	f000 fa53 	bl	800e960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	2200      	movs	r2, #0
 800e4be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	691b      	ldr	r3, [r3, #16]
 800e4c6:	f003 0308 	and.w	r3, r3, #8
 800e4ca:	2b08      	cmp	r3, #8
 800e4cc:	d122      	bne.n	800e514 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	68db      	ldr	r3, [r3, #12]
 800e4d4:	f003 0308 	and.w	r3, r3, #8
 800e4d8:	2b08      	cmp	r3, #8
 800e4da:	d11b      	bne.n	800e514 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	f06f 0208 	mvn.w	r2, #8
 800e4e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	2204      	movs	r2, #4
 800e4ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	69db      	ldr	r3, [r3, #28]
 800e4f2:	f003 0303 	and.w	r3, r3, #3
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d003      	beq.n	800e502 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e4fa:	6878      	ldr	r0, [r7, #4]
 800e4fc:	f000 fa26 	bl	800e94c <HAL_TIM_IC_CaptureCallback>
 800e500:	e005      	b.n	800e50e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e502:	6878      	ldr	r0, [r7, #4]
 800e504:	f000 fa18 	bl	800e938 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e508:	6878      	ldr	r0, [r7, #4]
 800e50a:	f000 fa29 	bl	800e960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	2200      	movs	r2, #0
 800e512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	691b      	ldr	r3, [r3, #16]
 800e51a:	f003 0310 	and.w	r3, r3, #16
 800e51e:	2b10      	cmp	r3, #16
 800e520:	d122      	bne.n	800e568 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	68db      	ldr	r3, [r3, #12]
 800e528:	f003 0310 	and.w	r3, r3, #16
 800e52c:	2b10      	cmp	r3, #16
 800e52e:	d11b      	bne.n	800e568 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	f06f 0210 	mvn.w	r2, #16
 800e538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	2208      	movs	r2, #8
 800e53e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	69db      	ldr	r3, [r3, #28]
 800e546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d003      	beq.n	800e556 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e54e:	6878      	ldr	r0, [r7, #4]
 800e550:	f000 f9fc 	bl	800e94c <HAL_TIM_IC_CaptureCallback>
 800e554:	e005      	b.n	800e562 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e556:	6878      	ldr	r0, [r7, #4]
 800e558:	f000 f9ee 	bl	800e938 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	f000 f9ff 	bl	800e960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	2200      	movs	r2, #0
 800e566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	691b      	ldr	r3, [r3, #16]
 800e56e:	f003 0301 	and.w	r3, r3, #1
 800e572:	2b01      	cmp	r3, #1
 800e574:	d10e      	bne.n	800e594 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	68db      	ldr	r3, [r3, #12]
 800e57c:	f003 0301 	and.w	r3, r3, #1
 800e580:	2b01      	cmp	r3, #1
 800e582:	d107      	bne.n	800e594 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	f06f 0201 	mvn.w	r2, #1
 800e58c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e58e:	6878      	ldr	r0, [r7, #4]
 800e590:	f7f9 f888 	bl	80076a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	691b      	ldr	r3, [r3, #16]
 800e59a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e59e:	2b80      	cmp	r3, #128	; 0x80
 800e5a0:	d10e      	bne.n	800e5c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	68db      	ldr	r3, [r3, #12]
 800e5a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5ac:	2b80      	cmp	r3, #128	; 0x80
 800e5ae:	d107      	bne.n	800e5c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e5b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e5ba:	6878      	ldr	r0, [r7, #4]
 800e5bc:	f000 fe7c 	bl	800f2b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	691b      	ldr	r3, [r3, #16]
 800e5c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e5ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e5ce:	d10e      	bne.n	800e5ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	68db      	ldr	r3, [r3, #12]
 800e5d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5da:	2b80      	cmp	r3, #128	; 0x80
 800e5dc:	d107      	bne.n	800e5ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e5e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	f000 fe6f 	bl	800f2cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	691b      	ldr	r3, [r3, #16]
 800e5f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5f8:	2b40      	cmp	r3, #64	; 0x40
 800e5fa:	d10e      	bne.n	800e61a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	68db      	ldr	r3, [r3, #12]
 800e602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e606:	2b40      	cmp	r3, #64	; 0x40
 800e608:	d107      	bne.n	800e61a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e614:	6878      	ldr	r0, [r7, #4]
 800e616:	f000 f9ad 	bl	800e974 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	691b      	ldr	r3, [r3, #16]
 800e620:	f003 0320 	and.w	r3, r3, #32
 800e624:	2b20      	cmp	r3, #32
 800e626:	d10e      	bne.n	800e646 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	68db      	ldr	r3, [r3, #12]
 800e62e:	f003 0320 	and.w	r3, r3, #32
 800e632:	2b20      	cmp	r3, #32
 800e634:	d107      	bne.n	800e646 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	f06f 0220 	mvn.w	r2, #32
 800e63e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e640:	6878      	ldr	r0, [r7, #4]
 800e642:	f000 fe2f 	bl	800f2a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	691b      	ldr	r3, [r3, #16]
 800e64c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e650:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e654:	d10f      	bne.n	800e676 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	68db      	ldr	r3, [r3, #12]
 800e65c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e660:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e664:	d107      	bne.n	800e676 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800e66e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800e670:	6878      	ldr	r0, [r7, #4]
 800e672:	f000 fe35 	bl	800f2e0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	691b      	ldr	r3, [r3, #16]
 800e67c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e680:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e684:	d10f      	bne.n	800e6a6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	68db      	ldr	r3, [r3, #12]
 800e68c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e690:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e694:	d107      	bne.n	800e6a6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800e69e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800e6a0:	6878      	ldr	r0, [r7, #4]
 800e6a2:	f000 fe27 	bl	800f2f4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	691b      	ldr	r3, [r3, #16]
 800e6ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e6b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e6b4:	d10f      	bne.n	800e6d6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	68db      	ldr	r3, [r3, #12]
 800e6bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e6c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e6c4:	d107      	bne.n	800e6d6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800e6ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800e6d0:	6878      	ldr	r0, [r7, #4]
 800e6d2:	f000 fe19 	bl	800f308 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	691b      	ldr	r3, [r3, #16]
 800e6dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e6e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e6e4:	d10f      	bne.n	800e706 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	68db      	ldr	r3, [r3, #12]
 800e6ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e6f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e6f4:	d107      	bne.n	800e706 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800e6fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800e700:	6878      	ldr	r0, [r7, #4]
 800e702:	f000 fe0b 	bl	800f31c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e706:	bf00      	nop
 800e708:	3708      	adds	r7, #8
 800e70a:	46bd      	mov	sp, r7
 800e70c:	bd80      	pop	{r7, pc}
	...

0800e710 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b086      	sub	sp, #24
 800e714:	af00      	add	r7, sp, #0
 800e716:	60f8      	str	r0, [r7, #12]
 800e718:	60b9      	str	r1, [r7, #8]
 800e71a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e71c:	2300      	movs	r3, #0
 800e71e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e726:	2b01      	cmp	r3, #1
 800e728:	d101      	bne.n	800e72e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e72a:	2302      	movs	r3, #2
 800e72c:	e0ff      	b.n	800e92e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	2201      	movs	r2, #1
 800e732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	2b14      	cmp	r3, #20
 800e73a:	f200 80f0 	bhi.w	800e91e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e73e:	a201      	add	r2, pc, #4	; (adr r2, 800e744 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e744:	0800e799 	.word	0x0800e799
 800e748:	0800e91f 	.word	0x0800e91f
 800e74c:	0800e91f 	.word	0x0800e91f
 800e750:	0800e91f 	.word	0x0800e91f
 800e754:	0800e7d9 	.word	0x0800e7d9
 800e758:	0800e91f 	.word	0x0800e91f
 800e75c:	0800e91f 	.word	0x0800e91f
 800e760:	0800e91f 	.word	0x0800e91f
 800e764:	0800e81b 	.word	0x0800e81b
 800e768:	0800e91f 	.word	0x0800e91f
 800e76c:	0800e91f 	.word	0x0800e91f
 800e770:	0800e91f 	.word	0x0800e91f
 800e774:	0800e85b 	.word	0x0800e85b
 800e778:	0800e91f 	.word	0x0800e91f
 800e77c:	0800e91f 	.word	0x0800e91f
 800e780:	0800e91f 	.word	0x0800e91f
 800e784:	0800e89d 	.word	0x0800e89d
 800e788:	0800e91f 	.word	0x0800e91f
 800e78c:	0800e91f 	.word	0x0800e91f
 800e790:	0800e91f 	.word	0x0800e91f
 800e794:	0800e8dd 	.word	0x0800e8dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	68b9      	ldr	r1, [r7, #8]
 800e79e:	4618      	mov	r0, r3
 800e7a0:	f000 f99a 	bl	800ead8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	699a      	ldr	r2, [r3, #24]
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	f042 0208 	orr.w	r2, r2, #8
 800e7b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	699a      	ldr	r2, [r3, #24]
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	f022 0204 	bic.w	r2, r2, #4
 800e7c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	6999      	ldr	r1, [r3, #24]
 800e7ca:	68bb      	ldr	r3, [r7, #8]
 800e7cc:	691a      	ldr	r2, [r3, #16]
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	430a      	orrs	r2, r1
 800e7d4:	619a      	str	r2, [r3, #24]
      break;
 800e7d6:	e0a5      	b.n	800e924 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	68b9      	ldr	r1, [r7, #8]
 800e7de:	4618      	mov	r0, r3
 800e7e0:	f000 fa14 	bl	800ec0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	699a      	ldr	r2, [r3, #24]
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e7f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	699a      	ldr	r2, [r3, #24]
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e802:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	6999      	ldr	r1, [r3, #24]
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	691b      	ldr	r3, [r3, #16]
 800e80e:	021a      	lsls	r2, r3, #8
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	430a      	orrs	r2, r1
 800e816:	619a      	str	r2, [r3, #24]
      break;
 800e818:	e084      	b.n	800e924 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	68b9      	ldr	r1, [r7, #8]
 800e820:	4618      	mov	r0, r3
 800e822:	f000 fa87 	bl	800ed34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	69da      	ldr	r2, [r3, #28]
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	f042 0208 	orr.w	r2, r2, #8
 800e834:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	69da      	ldr	r2, [r3, #28]
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	f022 0204 	bic.w	r2, r2, #4
 800e844:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	69d9      	ldr	r1, [r3, #28]
 800e84c:	68bb      	ldr	r3, [r7, #8]
 800e84e:	691a      	ldr	r2, [r3, #16]
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	430a      	orrs	r2, r1
 800e856:	61da      	str	r2, [r3, #28]
      break;
 800e858:	e064      	b.n	800e924 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	68b9      	ldr	r1, [r7, #8]
 800e860:	4618      	mov	r0, r3
 800e862:	f000 faf9 	bl	800ee58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	69da      	ldr	r2, [r3, #28]
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e874:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	69da      	ldr	r2, [r3, #28]
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e884:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	69d9      	ldr	r1, [r3, #28]
 800e88c:	68bb      	ldr	r3, [r7, #8]
 800e88e:	691b      	ldr	r3, [r3, #16]
 800e890:	021a      	lsls	r2, r3, #8
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	430a      	orrs	r2, r1
 800e898:	61da      	str	r2, [r3, #28]
      break;
 800e89a:	e043      	b.n	800e924 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	68b9      	ldr	r1, [r7, #8]
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	f000 fb6c 	bl	800ef80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	f042 0208 	orr.w	r2, r2, #8
 800e8b6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	f022 0204 	bic.w	r2, r2, #4
 800e8c6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800e8ce:	68bb      	ldr	r3, [r7, #8]
 800e8d0:	691a      	ldr	r2, [r3, #16]
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	430a      	orrs	r2, r1
 800e8d8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800e8da:	e023      	b.n	800e924 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	68b9      	ldr	r1, [r7, #8]
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	f000 fbb6 	bl	800f054 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e8f6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e906:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800e90e:	68bb      	ldr	r3, [r7, #8]
 800e910:	691b      	ldr	r3, [r3, #16]
 800e912:	021a      	lsls	r2, r3, #8
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	430a      	orrs	r2, r1
 800e91a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800e91c:	e002      	b.n	800e924 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e91e:	2301      	movs	r3, #1
 800e920:	75fb      	strb	r3, [r7, #23]
      break;
 800e922:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	2200      	movs	r2, #0
 800e928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e92c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e92e:	4618      	mov	r0, r3
 800e930:	3718      	adds	r7, #24
 800e932:	46bd      	mov	sp, r7
 800e934:	bd80      	pop	{r7, pc}
 800e936:	bf00      	nop

0800e938 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e938:	b480      	push	{r7}
 800e93a:	b083      	sub	sp, #12
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e940:	bf00      	nop
 800e942:	370c      	adds	r7, #12
 800e944:	46bd      	mov	sp, r7
 800e946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94a:	4770      	bx	lr

0800e94c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e94c:	b480      	push	{r7}
 800e94e:	b083      	sub	sp, #12
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e954:	bf00      	nop
 800e956:	370c      	adds	r7, #12
 800e958:	46bd      	mov	sp, r7
 800e95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95e:	4770      	bx	lr

0800e960 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e960:	b480      	push	{r7}
 800e962:	b083      	sub	sp, #12
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e968:	bf00      	nop
 800e96a:	370c      	adds	r7, #12
 800e96c:	46bd      	mov	sp, r7
 800e96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e972:	4770      	bx	lr

0800e974 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e974:	b480      	push	{r7}
 800e976:	b083      	sub	sp, #12
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e97c:	bf00      	nop
 800e97e:	370c      	adds	r7, #12
 800e980:	46bd      	mov	sp, r7
 800e982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e986:	4770      	bx	lr

0800e988 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e988:	b480      	push	{r7}
 800e98a:	b085      	sub	sp, #20
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
 800e990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	4a46      	ldr	r2, [pc, #280]	; (800eab4 <TIM_Base_SetConfig+0x12c>)
 800e99c:	4293      	cmp	r3, r2
 800e99e:	d017      	beq.n	800e9d0 <TIM_Base_SetConfig+0x48>
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e9a6:	d013      	beq.n	800e9d0 <TIM_Base_SetConfig+0x48>
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	4a43      	ldr	r2, [pc, #268]	; (800eab8 <TIM_Base_SetConfig+0x130>)
 800e9ac:	4293      	cmp	r3, r2
 800e9ae:	d00f      	beq.n	800e9d0 <TIM_Base_SetConfig+0x48>
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	4a42      	ldr	r2, [pc, #264]	; (800eabc <TIM_Base_SetConfig+0x134>)
 800e9b4:	4293      	cmp	r3, r2
 800e9b6:	d00b      	beq.n	800e9d0 <TIM_Base_SetConfig+0x48>
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	4a41      	ldr	r2, [pc, #260]	; (800eac0 <TIM_Base_SetConfig+0x138>)
 800e9bc:	4293      	cmp	r3, r2
 800e9be:	d007      	beq.n	800e9d0 <TIM_Base_SetConfig+0x48>
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	4a40      	ldr	r2, [pc, #256]	; (800eac4 <TIM_Base_SetConfig+0x13c>)
 800e9c4:	4293      	cmp	r3, r2
 800e9c6:	d003      	beq.n	800e9d0 <TIM_Base_SetConfig+0x48>
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	4a3f      	ldr	r2, [pc, #252]	; (800eac8 <TIM_Base_SetConfig+0x140>)
 800e9cc:	4293      	cmp	r3, r2
 800e9ce:	d108      	bne.n	800e9e2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e9d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e9d8:	683b      	ldr	r3, [r7, #0]
 800e9da:	685b      	ldr	r3, [r3, #4]
 800e9dc:	68fa      	ldr	r2, [r7, #12]
 800e9de:	4313      	orrs	r3, r2
 800e9e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	4a33      	ldr	r2, [pc, #204]	; (800eab4 <TIM_Base_SetConfig+0x12c>)
 800e9e6:	4293      	cmp	r3, r2
 800e9e8:	d023      	beq.n	800ea32 <TIM_Base_SetConfig+0xaa>
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e9f0:	d01f      	beq.n	800ea32 <TIM_Base_SetConfig+0xaa>
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	4a30      	ldr	r2, [pc, #192]	; (800eab8 <TIM_Base_SetConfig+0x130>)
 800e9f6:	4293      	cmp	r3, r2
 800e9f8:	d01b      	beq.n	800ea32 <TIM_Base_SetConfig+0xaa>
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	4a2f      	ldr	r2, [pc, #188]	; (800eabc <TIM_Base_SetConfig+0x134>)
 800e9fe:	4293      	cmp	r3, r2
 800ea00:	d017      	beq.n	800ea32 <TIM_Base_SetConfig+0xaa>
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	4a2e      	ldr	r2, [pc, #184]	; (800eac0 <TIM_Base_SetConfig+0x138>)
 800ea06:	4293      	cmp	r3, r2
 800ea08:	d013      	beq.n	800ea32 <TIM_Base_SetConfig+0xaa>
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	4a2d      	ldr	r2, [pc, #180]	; (800eac4 <TIM_Base_SetConfig+0x13c>)
 800ea0e:	4293      	cmp	r3, r2
 800ea10:	d00f      	beq.n	800ea32 <TIM_Base_SetConfig+0xaa>
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	4a2d      	ldr	r2, [pc, #180]	; (800eacc <TIM_Base_SetConfig+0x144>)
 800ea16:	4293      	cmp	r3, r2
 800ea18:	d00b      	beq.n	800ea32 <TIM_Base_SetConfig+0xaa>
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	4a2c      	ldr	r2, [pc, #176]	; (800ead0 <TIM_Base_SetConfig+0x148>)
 800ea1e:	4293      	cmp	r3, r2
 800ea20:	d007      	beq.n	800ea32 <TIM_Base_SetConfig+0xaa>
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	4a2b      	ldr	r2, [pc, #172]	; (800ead4 <TIM_Base_SetConfig+0x14c>)
 800ea26:	4293      	cmp	r3, r2
 800ea28:	d003      	beq.n	800ea32 <TIM_Base_SetConfig+0xaa>
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	4a26      	ldr	r2, [pc, #152]	; (800eac8 <TIM_Base_SetConfig+0x140>)
 800ea2e:	4293      	cmp	r3, r2
 800ea30:	d108      	bne.n	800ea44 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ea38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ea3a:	683b      	ldr	r3, [r7, #0]
 800ea3c:	68db      	ldr	r3, [r3, #12]
 800ea3e:	68fa      	ldr	r2, [r7, #12]
 800ea40:	4313      	orrs	r3, r2
 800ea42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ea4a:	683b      	ldr	r3, [r7, #0]
 800ea4c:	695b      	ldr	r3, [r3, #20]
 800ea4e:	4313      	orrs	r3, r2
 800ea50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	68fa      	ldr	r2, [r7, #12]
 800ea56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ea58:	683b      	ldr	r3, [r7, #0]
 800ea5a:	689a      	ldr	r2, [r3, #8]
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ea60:	683b      	ldr	r3, [r7, #0]
 800ea62:	681a      	ldr	r2, [r3, #0]
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	4a12      	ldr	r2, [pc, #72]	; (800eab4 <TIM_Base_SetConfig+0x12c>)
 800ea6c:	4293      	cmp	r3, r2
 800ea6e:	d013      	beq.n	800ea98 <TIM_Base_SetConfig+0x110>
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	4a14      	ldr	r2, [pc, #80]	; (800eac4 <TIM_Base_SetConfig+0x13c>)
 800ea74:	4293      	cmp	r3, r2
 800ea76:	d00f      	beq.n	800ea98 <TIM_Base_SetConfig+0x110>
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	4a14      	ldr	r2, [pc, #80]	; (800eacc <TIM_Base_SetConfig+0x144>)
 800ea7c:	4293      	cmp	r3, r2
 800ea7e:	d00b      	beq.n	800ea98 <TIM_Base_SetConfig+0x110>
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	4a13      	ldr	r2, [pc, #76]	; (800ead0 <TIM_Base_SetConfig+0x148>)
 800ea84:	4293      	cmp	r3, r2
 800ea86:	d007      	beq.n	800ea98 <TIM_Base_SetConfig+0x110>
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	4a12      	ldr	r2, [pc, #72]	; (800ead4 <TIM_Base_SetConfig+0x14c>)
 800ea8c:	4293      	cmp	r3, r2
 800ea8e:	d003      	beq.n	800ea98 <TIM_Base_SetConfig+0x110>
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	4a0d      	ldr	r2, [pc, #52]	; (800eac8 <TIM_Base_SetConfig+0x140>)
 800ea94:	4293      	cmp	r3, r2
 800ea96:	d103      	bne.n	800eaa0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	691a      	ldr	r2, [r3, #16]
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	2201      	movs	r2, #1
 800eaa4:	615a      	str	r2, [r3, #20]
}
 800eaa6:	bf00      	nop
 800eaa8:	3714      	adds	r7, #20
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab0:	4770      	bx	lr
 800eab2:	bf00      	nop
 800eab4:	40012c00 	.word	0x40012c00
 800eab8:	40000400 	.word	0x40000400
 800eabc:	40000800 	.word	0x40000800
 800eac0:	40000c00 	.word	0x40000c00
 800eac4:	40013400 	.word	0x40013400
 800eac8:	40015000 	.word	0x40015000
 800eacc:	40014000 	.word	0x40014000
 800ead0:	40014400 	.word	0x40014400
 800ead4:	40014800 	.word	0x40014800

0800ead8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ead8:	b480      	push	{r7}
 800eada:	b087      	sub	sp, #28
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
 800eae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	6a1b      	ldr	r3, [r3, #32]
 800eae6:	f023 0201 	bic.w	r2, r3, #1
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	6a1b      	ldr	r3, [r3, #32]
 800eaf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	685b      	ldr	r3, [r3, #4]
 800eaf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	699b      	ldr	r3, [r3, #24]
 800eafe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800eb06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	f023 0303 	bic.w	r3, r3, #3
 800eb12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eb14:	683b      	ldr	r3, [r7, #0]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	68fa      	ldr	r2, [r7, #12]
 800eb1a:	4313      	orrs	r3, r2
 800eb1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800eb1e:	697b      	ldr	r3, [r7, #20]
 800eb20:	f023 0302 	bic.w	r3, r3, #2
 800eb24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800eb26:	683b      	ldr	r3, [r7, #0]
 800eb28:	689b      	ldr	r3, [r3, #8]
 800eb2a:	697a      	ldr	r2, [r7, #20]
 800eb2c:	4313      	orrs	r3, r2
 800eb2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	4a30      	ldr	r2, [pc, #192]	; (800ebf4 <TIM_OC1_SetConfig+0x11c>)
 800eb34:	4293      	cmp	r3, r2
 800eb36:	d013      	beq.n	800eb60 <TIM_OC1_SetConfig+0x88>
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	4a2f      	ldr	r2, [pc, #188]	; (800ebf8 <TIM_OC1_SetConfig+0x120>)
 800eb3c:	4293      	cmp	r3, r2
 800eb3e:	d00f      	beq.n	800eb60 <TIM_OC1_SetConfig+0x88>
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	4a2e      	ldr	r2, [pc, #184]	; (800ebfc <TIM_OC1_SetConfig+0x124>)
 800eb44:	4293      	cmp	r3, r2
 800eb46:	d00b      	beq.n	800eb60 <TIM_OC1_SetConfig+0x88>
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	4a2d      	ldr	r2, [pc, #180]	; (800ec00 <TIM_OC1_SetConfig+0x128>)
 800eb4c:	4293      	cmp	r3, r2
 800eb4e:	d007      	beq.n	800eb60 <TIM_OC1_SetConfig+0x88>
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	4a2c      	ldr	r2, [pc, #176]	; (800ec04 <TIM_OC1_SetConfig+0x12c>)
 800eb54:	4293      	cmp	r3, r2
 800eb56:	d003      	beq.n	800eb60 <TIM_OC1_SetConfig+0x88>
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	4a2b      	ldr	r2, [pc, #172]	; (800ec08 <TIM_OC1_SetConfig+0x130>)
 800eb5c:	4293      	cmp	r3, r2
 800eb5e:	d10c      	bne.n	800eb7a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800eb60:	697b      	ldr	r3, [r7, #20]
 800eb62:	f023 0308 	bic.w	r3, r3, #8
 800eb66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	68db      	ldr	r3, [r3, #12]
 800eb6c:	697a      	ldr	r2, [r7, #20]
 800eb6e:	4313      	orrs	r3, r2
 800eb70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800eb72:	697b      	ldr	r3, [r7, #20]
 800eb74:	f023 0304 	bic.w	r3, r3, #4
 800eb78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	4a1d      	ldr	r2, [pc, #116]	; (800ebf4 <TIM_OC1_SetConfig+0x11c>)
 800eb7e:	4293      	cmp	r3, r2
 800eb80:	d013      	beq.n	800ebaa <TIM_OC1_SetConfig+0xd2>
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	4a1c      	ldr	r2, [pc, #112]	; (800ebf8 <TIM_OC1_SetConfig+0x120>)
 800eb86:	4293      	cmp	r3, r2
 800eb88:	d00f      	beq.n	800ebaa <TIM_OC1_SetConfig+0xd2>
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	4a1b      	ldr	r2, [pc, #108]	; (800ebfc <TIM_OC1_SetConfig+0x124>)
 800eb8e:	4293      	cmp	r3, r2
 800eb90:	d00b      	beq.n	800ebaa <TIM_OC1_SetConfig+0xd2>
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	4a1a      	ldr	r2, [pc, #104]	; (800ec00 <TIM_OC1_SetConfig+0x128>)
 800eb96:	4293      	cmp	r3, r2
 800eb98:	d007      	beq.n	800ebaa <TIM_OC1_SetConfig+0xd2>
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	4a19      	ldr	r2, [pc, #100]	; (800ec04 <TIM_OC1_SetConfig+0x12c>)
 800eb9e:	4293      	cmp	r3, r2
 800eba0:	d003      	beq.n	800ebaa <TIM_OC1_SetConfig+0xd2>
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	4a18      	ldr	r2, [pc, #96]	; (800ec08 <TIM_OC1_SetConfig+0x130>)
 800eba6:	4293      	cmp	r3, r2
 800eba8:	d111      	bne.n	800ebce <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ebaa:	693b      	ldr	r3, [r7, #16]
 800ebac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ebb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ebb2:	693b      	ldr	r3, [r7, #16]
 800ebb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ebb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	695b      	ldr	r3, [r3, #20]
 800ebbe:	693a      	ldr	r2, [r7, #16]
 800ebc0:	4313      	orrs	r3, r2
 800ebc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ebc4:	683b      	ldr	r3, [r7, #0]
 800ebc6:	699b      	ldr	r3, [r3, #24]
 800ebc8:	693a      	ldr	r2, [r7, #16]
 800ebca:	4313      	orrs	r3, r2
 800ebcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	693a      	ldr	r2, [r7, #16]
 800ebd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	68fa      	ldr	r2, [r7, #12]
 800ebd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ebda:	683b      	ldr	r3, [r7, #0]
 800ebdc:	685a      	ldr	r2, [r3, #4]
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	697a      	ldr	r2, [r7, #20]
 800ebe6:	621a      	str	r2, [r3, #32]
}
 800ebe8:	bf00      	nop
 800ebea:	371c      	adds	r7, #28
 800ebec:	46bd      	mov	sp, r7
 800ebee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf2:	4770      	bx	lr
 800ebf4:	40012c00 	.word	0x40012c00
 800ebf8:	40013400 	.word	0x40013400
 800ebfc:	40014000 	.word	0x40014000
 800ec00:	40014400 	.word	0x40014400
 800ec04:	40014800 	.word	0x40014800
 800ec08:	40015000 	.word	0x40015000

0800ec0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ec0c:	b480      	push	{r7}
 800ec0e:	b087      	sub	sp, #28
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
 800ec14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	6a1b      	ldr	r3, [r3, #32]
 800ec1a:	f023 0210 	bic.w	r2, r3, #16
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	6a1b      	ldr	r3, [r3, #32]
 800ec26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	685b      	ldr	r3, [r3, #4]
 800ec2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	699b      	ldr	r3, [r3, #24]
 800ec32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ec3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ec3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ec46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ec48:	683b      	ldr	r3, [r7, #0]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	021b      	lsls	r3, r3, #8
 800ec4e:	68fa      	ldr	r2, [r7, #12]
 800ec50:	4313      	orrs	r3, r2
 800ec52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ec54:	697b      	ldr	r3, [r7, #20]
 800ec56:	f023 0320 	bic.w	r3, r3, #32
 800ec5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ec5c:	683b      	ldr	r3, [r7, #0]
 800ec5e:	689b      	ldr	r3, [r3, #8]
 800ec60:	011b      	lsls	r3, r3, #4
 800ec62:	697a      	ldr	r2, [r7, #20]
 800ec64:	4313      	orrs	r3, r2
 800ec66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	4a2c      	ldr	r2, [pc, #176]	; (800ed1c <TIM_OC2_SetConfig+0x110>)
 800ec6c:	4293      	cmp	r3, r2
 800ec6e:	d007      	beq.n	800ec80 <TIM_OC2_SetConfig+0x74>
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	4a2b      	ldr	r2, [pc, #172]	; (800ed20 <TIM_OC2_SetConfig+0x114>)
 800ec74:	4293      	cmp	r3, r2
 800ec76:	d003      	beq.n	800ec80 <TIM_OC2_SetConfig+0x74>
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	4a2a      	ldr	r2, [pc, #168]	; (800ed24 <TIM_OC2_SetConfig+0x118>)
 800ec7c:	4293      	cmp	r3, r2
 800ec7e:	d10d      	bne.n	800ec9c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ec80:	697b      	ldr	r3, [r7, #20]
 800ec82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ec86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ec88:	683b      	ldr	r3, [r7, #0]
 800ec8a:	68db      	ldr	r3, [r3, #12]
 800ec8c:	011b      	lsls	r3, r3, #4
 800ec8e:	697a      	ldr	r2, [r7, #20]
 800ec90:	4313      	orrs	r3, r2
 800ec92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ec94:	697b      	ldr	r3, [r7, #20]
 800ec96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	4a1f      	ldr	r2, [pc, #124]	; (800ed1c <TIM_OC2_SetConfig+0x110>)
 800eca0:	4293      	cmp	r3, r2
 800eca2:	d013      	beq.n	800eccc <TIM_OC2_SetConfig+0xc0>
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	4a1e      	ldr	r2, [pc, #120]	; (800ed20 <TIM_OC2_SetConfig+0x114>)
 800eca8:	4293      	cmp	r3, r2
 800ecaa:	d00f      	beq.n	800eccc <TIM_OC2_SetConfig+0xc0>
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	4a1e      	ldr	r2, [pc, #120]	; (800ed28 <TIM_OC2_SetConfig+0x11c>)
 800ecb0:	4293      	cmp	r3, r2
 800ecb2:	d00b      	beq.n	800eccc <TIM_OC2_SetConfig+0xc0>
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	4a1d      	ldr	r2, [pc, #116]	; (800ed2c <TIM_OC2_SetConfig+0x120>)
 800ecb8:	4293      	cmp	r3, r2
 800ecba:	d007      	beq.n	800eccc <TIM_OC2_SetConfig+0xc0>
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	4a1c      	ldr	r2, [pc, #112]	; (800ed30 <TIM_OC2_SetConfig+0x124>)
 800ecc0:	4293      	cmp	r3, r2
 800ecc2:	d003      	beq.n	800eccc <TIM_OC2_SetConfig+0xc0>
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	4a17      	ldr	r2, [pc, #92]	; (800ed24 <TIM_OC2_SetConfig+0x118>)
 800ecc8:	4293      	cmp	r3, r2
 800ecca:	d113      	bne.n	800ecf4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800eccc:	693b      	ldr	r3, [r7, #16]
 800ecce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ecd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ecd4:	693b      	ldr	r3, [r7, #16]
 800ecd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ecda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ecdc:	683b      	ldr	r3, [r7, #0]
 800ecde:	695b      	ldr	r3, [r3, #20]
 800ece0:	009b      	lsls	r3, r3, #2
 800ece2:	693a      	ldr	r2, [r7, #16]
 800ece4:	4313      	orrs	r3, r2
 800ece6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ece8:	683b      	ldr	r3, [r7, #0]
 800ecea:	699b      	ldr	r3, [r3, #24]
 800ecec:	009b      	lsls	r3, r3, #2
 800ecee:	693a      	ldr	r2, [r7, #16]
 800ecf0:	4313      	orrs	r3, r2
 800ecf2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	693a      	ldr	r2, [r7, #16]
 800ecf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	68fa      	ldr	r2, [r7, #12]
 800ecfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ed00:	683b      	ldr	r3, [r7, #0]
 800ed02:	685a      	ldr	r2, [r3, #4]
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	697a      	ldr	r2, [r7, #20]
 800ed0c:	621a      	str	r2, [r3, #32]
}
 800ed0e:	bf00      	nop
 800ed10:	371c      	adds	r7, #28
 800ed12:	46bd      	mov	sp, r7
 800ed14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed18:	4770      	bx	lr
 800ed1a:	bf00      	nop
 800ed1c:	40012c00 	.word	0x40012c00
 800ed20:	40013400 	.word	0x40013400
 800ed24:	40015000 	.word	0x40015000
 800ed28:	40014000 	.word	0x40014000
 800ed2c:	40014400 	.word	0x40014400
 800ed30:	40014800 	.word	0x40014800

0800ed34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ed34:	b480      	push	{r7}
 800ed36:	b087      	sub	sp, #28
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
 800ed3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	6a1b      	ldr	r3, [r3, #32]
 800ed42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	6a1b      	ldr	r3, [r3, #32]
 800ed4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	685b      	ldr	r3, [r3, #4]
 800ed54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	69db      	ldr	r3, [r3, #28]
 800ed5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ed62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	f023 0303 	bic.w	r3, r3, #3
 800ed6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	68fa      	ldr	r2, [r7, #12]
 800ed76:	4313      	orrs	r3, r2
 800ed78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ed7a:	697b      	ldr	r3, [r7, #20]
 800ed7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ed80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	689b      	ldr	r3, [r3, #8]
 800ed86:	021b      	lsls	r3, r3, #8
 800ed88:	697a      	ldr	r2, [r7, #20]
 800ed8a:	4313      	orrs	r3, r2
 800ed8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	4a2b      	ldr	r2, [pc, #172]	; (800ee40 <TIM_OC3_SetConfig+0x10c>)
 800ed92:	4293      	cmp	r3, r2
 800ed94:	d007      	beq.n	800eda6 <TIM_OC3_SetConfig+0x72>
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	4a2a      	ldr	r2, [pc, #168]	; (800ee44 <TIM_OC3_SetConfig+0x110>)
 800ed9a:	4293      	cmp	r3, r2
 800ed9c:	d003      	beq.n	800eda6 <TIM_OC3_SetConfig+0x72>
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	4a29      	ldr	r2, [pc, #164]	; (800ee48 <TIM_OC3_SetConfig+0x114>)
 800eda2:	4293      	cmp	r3, r2
 800eda4:	d10d      	bne.n	800edc2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800eda6:	697b      	ldr	r3, [r7, #20]
 800eda8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800edac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800edae:	683b      	ldr	r3, [r7, #0]
 800edb0:	68db      	ldr	r3, [r3, #12]
 800edb2:	021b      	lsls	r3, r3, #8
 800edb4:	697a      	ldr	r2, [r7, #20]
 800edb6:	4313      	orrs	r3, r2
 800edb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800edba:	697b      	ldr	r3, [r7, #20]
 800edbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800edc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	4a1e      	ldr	r2, [pc, #120]	; (800ee40 <TIM_OC3_SetConfig+0x10c>)
 800edc6:	4293      	cmp	r3, r2
 800edc8:	d013      	beq.n	800edf2 <TIM_OC3_SetConfig+0xbe>
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	4a1d      	ldr	r2, [pc, #116]	; (800ee44 <TIM_OC3_SetConfig+0x110>)
 800edce:	4293      	cmp	r3, r2
 800edd0:	d00f      	beq.n	800edf2 <TIM_OC3_SetConfig+0xbe>
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	4a1d      	ldr	r2, [pc, #116]	; (800ee4c <TIM_OC3_SetConfig+0x118>)
 800edd6:	4293      	cmp	r3, r2
 800edd8:	d00b      	beq.n	800edf2 <TIM_OC3_SetConfig+0xbe>
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	4a1c      	ldr	r2, [pc, #112]	; (800ee50 <TIM_OC3_SetConfig+0x11c>)
 800edde:	4293      	cmp	r3, r2
 800ede0:	d007      	beq.n	800edf2 <TIM_OC3_SetConfig+0xbe>
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	4a1b      	ldr	r2, [pc, #108]	; (800ee54 <TIM_OC3_SetConfig+0x120>)
 800ede6:	4293      	cmp	r3, r2
 800ede8:	d003      	beq.n	800edf2 <TIM_OC3_SetConfig+0xbe>
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	4a16      	ldr	r2, [pc, #88]	; (800ee48 <TIM_OC3_SetConfig+0x114>)
 800edee:	4293      	cmp	r3, r2
 800edf0:	d113      	bne.n	800ee1a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800edf2:	693b      	ldr	r3, [r7, #16]
 800edf4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800edf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800edfa:	693b      	ldr	r3, [r7, #16]
 800edfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ee00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ee02:	683b      	ldr	r3, [r7, #0]
 800ee04:	695b      	ldr	r3, [r3, #20]
 800ee06:	011b      	lsls	r3, r3, #4
 800ee08:	693a      	ldr	r2, [r7, #16]
 800ee0a:	4313      	orrs	r3, r2
 800ee0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ee0e:	683b      	ldr	r3, [r7, #0]
 800ee10:	699b      	ldr	r3, [r3, #24]
 800ee12:	011b      	lsls	r3, r3, #4
 800ee14:	693a      	ldr	r2, [r7, #16]
 800ee16:	4313      	orrs	r3, r2
 800ee18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	693a      	ldr	r2, [r7, #16]
 800ee1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	68fa      	ldr	r2, [r7, #12]
 800ee24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ee26:	683b      	ldr	r3, [r7, #0]
 800ee28:	685a      	ldr	r2, [r3, #4]
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	697a      	ldr	r2, [r7, #20]
 800ee32:	621a      	str	r2, [r3, #32]
}
 800ee34:	bf00      	nop
 800ee36:	371c      	adds	r7, #28
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3e:	4770      	bx	lr
 800ee40:	40012c00 	.word	0x40012c00
 800ee44:	40013400 	.word	0x40013400
 800ee48:	40015000 	.word	0x40015000
 800ee4c:	40014000 	.word	0x40014000
 800ee50:	40014400 	.word	0x40014400
 800ee54:	40014800 	.word	0x40014800

0800ee58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ee58:	b480      	push	{r7}
 800ee5a:	b087      	sub	sp, #28
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
 800ee60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	6a1b      	ldr	r3, [r3, #32]
 800ee66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	6a1b      	ldr	r3, [r3, #32]
 800ee72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	685b      	ldr	r3, [r3, #4]
 800ee78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	69db      	ldr	r3, [r3, #28]
 800ee7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ee86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ee8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ee92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ee94:	683b      	ldr	r3, [r7, #0]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	021b      	lsls	r3, r3, #8
 800ee9a:	68fa      	ldr	r2, [r7, #12]
 800ee9c:	4313      	orrs	r3, r2
 800ee9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800eea0:	697b      	ldr	r3, [r7, #20]
 800eea2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800eea6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	689b      	ldr	r3, [r3, #8]
 800eeac:	031b      	lsls	r3, r3, #12
 800eeae:	697a      	ldr	r2, [r7, #20]
 800eeb0:	4313      	orrs	r3, r2
 800eeb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	4a2c      	ldr	r2, [pc, #176]	; (800ef68 <TIM_OC4_SetConfig+0x110>)
 800eeb8:	4293      	cmp	r3, r2
 800eeba:	d007      	beq.n	800eecc <TIM_OC4_SetConfig+0x74>
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	4a2b      	ldr	r2, [pc, #172]	; (800ef6c <TIM_OC4_SetConfig+0x114>)
 800eec0:	4293      	cmp	r3, r2
 800eec2:	d003      	beq.n	800eecc <TIM_OC4_SetConfig+0x74>
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	4a2a      	ldr	r2, [pc, #168]	; (800ef70 <TIM_OC4_SetConfig+0x118>)
 800eec8:	4293      	cmp	r3, r2
 800eeca:	d10d      	bne.n	800eee8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800eecc:	697b      	ldr	r3, [r7, #20]
 800eece:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800eed2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800eed4:	683b      	ldr	r3, [r7, #0]
 800eed6:	68db      	ldr	r3, [r3, #12]
 800eed8:	031b      	lsls	r3, r3, #12
 800eeda:	697a      	ldr	r2, [r7, #20]
 800eedc:	4313      	orrs	r3, r2
 800eede:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800eee0:	697b      	ldr	r3, [r7, #20]
 800eee2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800eee6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	4a1f      	ldr	r2, [pc, #124]	; (800ef68 <TIM_OC4_SetConfig+0x110>)
 800eeec:	4293      	cmp	r3, r2
 800eeee:	d013      	beq.n	800ef18 <TIM_OC4_SetConfig+0xc0>
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	4a1e      	ldr	r2, [pc, #120]	; (800ef6c <TIM_OC4_SetConfig+0x114>)
 800eef4:	4293      	cmp	r3, r2
 800eef6:	d00f      	beq.n	800ef18 <TIM_OC4_SetConfig+0xc0>
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	4a1e      	ldr	r2, [pc, #120]	; (800ef74 <TIM_OC4_SetConfig+0x11c>)
 800eefc:	4293      	cmp	r3, r2
 800eefe:	d00b      	beq.n	800ef18 <TIM_OC4_SetConfig+0xc0>
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	4a1d      	ldr	r2, [pc, #116]	; (800ef78 <TIM_OC4_SetConfig+0x120>)
 800ef04:	4293      	cmp	r3, r2
 800ef06:	d007      	beq.n	800ef18 <TIM_OC4_SetConfig+0xc0>
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	4a1c      	ldr	r2, [pc, #112]	; (800ef7c <TIM_OC4_SetConfig+0x124>)
 800ef0c:	4293      	cmp	r3, r2
 800ef0e:	d003      	beq.n	800ef18 <TIM_OC4_SetConfig+0xc0>
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	4a17      	ldr	r2, [pc, #92]	; (800ef70 <TIM_OC4_SetConfig+0x118>)
 800ef14:	4293      	cmp	r3, r2
 800ef16:	d113      	bne.n	800ef40 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ef18:	693b      	ldr	r3, [r7, #16]
 800ef1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ef1e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800ef20:	693b      	ldr	r3, [r7, #16]
 800ef22:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ef26:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ef28:	683b      	ldr	r3, [r7, #0]
 800ef2a:	695b      	ldr	r3, [r3, #20]
 800ef2c:	019b      	lsls	r3, r3, #6
 800ef2e:	693a      	ldr	r2, [r7, #16]
 800ef30:	4313      	orrs	r3, r2
 800ef32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800ef34:	683b      	ldr	r3, [r7, #0]
 800ef36:	699b      	ldr	r3, [r3, #24]
 800ef38:	019b      	lsls	r3, r3, #6
 800ef3a:	693a      	ldr	r2, [r7, #16]
 800ef3c:	4313      	orrs	r3, r2
 800ef3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	693a      	ldr	r2, [r7, #16]
 800ef44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	68fa      	ldr	r2, [r7, #12]
 800ef4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ef4c:	683b      	ldr	r3, [r7, #0]
 800ef4e:	685a      	ldr	r2, [r3, #4]
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	697a      	ldr	r2, [r7, #20]
 800ef58:	621a      	str	r2, [r3, #32]
}
 800ef5a:	bf00      	nop
 800ef5c:	371c      	adds	r7, #28
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef64:	4770      	bx	lr
 800ef66:	bf00      	nop
 800ef68:	40012c00 	.word	0x40012c00
 800ef6c:	40013400 	.word	0x40013400
 800ef70:	40015000 	.word	0x40015000
 800ef74:	40014000 	.word	0x40014000
 800ef78:	40014400 	.word	0x40014400
 800ef7c:	40014800 	.word	0x40014800

0800ef80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ef80:	b480      	push	{r7}
 800ef82:	b087      	sub	sp, #28
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]
 800ef88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	6a1b      	ldr	r3, [r3, #32]
 800ef8e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	6a1b      	ldr	r3, [r3, #32]
 800ef9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	685b      	ldr	r3, [r3, #4]
 800efa0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800efa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800efae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800efb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800efb4:	683b      	ldr	r3, [r7, #0]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	68fa      	ldr	r2, [r7, #12]
 800efba:	4313      	orrs	r3, r2
 800efbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800efbe:	693b      	ldr	r3, [r7, #16]
 800efc0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800efc4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800efc6:	683b      	ldr	r3, [r7, #0]
 800efc8:	689b      	ldr	r3, [r3, #8]
 800efca:	041b      	lsls	r3, r3, #16
 800efcc:	693a      	ldr	r2, [r7, #16]
 800efce:	4313      	orrs	r3, r2
 800efd0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	4a19      	ldr	r2, [pc, #100]	; (800f03c <TIM_OC5_SetConfig+0xbc>)
 800efd6:	4293      	cmp	r3, r2
 800efd8:	d013      	beq.n	800f002 <TIM_OC5_SetConfig+0x82>
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	4a18      	ldr	r2, [pc, #96]	; (800f040 <TIM_OC5_SetConfig+0xc0>)
 800efde:	4293      	cmp	r3, r2
 800efe0:	d00f      	beq.n	800f002 <TIM_OC5_SetConfig+0x82>
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	4a17      	ldr	r2, [pc, #92]	; (800f044 <TIM_OC5_SetConfig+0xc4>)
 800efe6:	4293      	cmp	r3, r2
 800efe8:	d00b      	beq.n	800f002 <TIM_OC5_SetConfig+0x82>
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	4a16      	ldr	r2, [pc, #88]	; (800f048 <TIM_OC5_SetConfig+0xc8>)
 800efee:	4293      	cmp	r3, r2
 800eff0:	d007      	beq.n	800f002 <TIM_OC5_SetConfig+0x82>
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	4a15      	ldr	r2, [pc, #84]	; (800f04c <TIM_OC5_SetConfig+0xcc>)
 800eff6:	4293      	cmp	r3, r2
 800eff8:	d003      	beq.n	800f002 <TIM_OC5_SetConfig+0x82>
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	4a14      	ldr	r2, [pc, #80]	; (800f050 <TIM_OC5_SetConfig+0xd0>)
 800effe:	4293      	cmp	r3, r2
 800f000:	d109      	bne.n	800f016 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f002:	697b      	ldr	r3, [r7, #20]
 800f004:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f008:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f00a:	683b      	ldr	r3, [r7, #0]
 800f00c:	695b      	ldr	r3, [r3, #20]
 800f00e:	021b      	lsls	r3, r3, #8
 800f010:	697a      	ldr	r2, [r7, #20]
 800f012:	4313      	orrs	r3, r2
 800f014:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	697a      	ldr	r2, [r7, #20]
 800f01a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	68fa      	ldr	r2, [r7, #12]
 800f020:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f022:	683b      	ldr	r3, [r7, #0]
 800f024:	685a      	ldr	r2, [r3, #4]
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	693a      	ldr	r2, [r7, #16]
 800f02e:	621a      	str	r2, [r3, #32]
}
 800f030:	bf00      	nop
 800f032:	371c      	adds	r7, #28
 800f034:	46bd      	mov	sp, r7
 800f036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03a:	4770      	bx	lr
 800f03c:	40012c00 	.word	0x40012c00
 800f040:	40013400 	.word	0x40013400
 800f044:	40014000 	.word	0x40014000
 800f048:	40014400 	.word	0x40014400
 800f04c:	40014800 	.word	0x40014800
 800f050:	40015000 	.word	0x40015000

0800f054 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f054:	b480      	push	{r7}
 800f056:	b087      	sub	sp, #28
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
 800f05c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	6a1b      	ldr	r3, [r3, #32]
 800f062:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	6a1b      	ldr	r3, [r3, #32]
 800f06e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	685b      	ldr	r3, [r3, #4]
 800f074:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f07a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f082:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f086:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f088:	683b      	ldr	r3, [r7, #0]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	021b      	lsls	r3, r3, #8
 800f08e:	68fa      	ldr	r2, [r7, #12]
 800f090:	4313      	orrs	r3, r2
 800f092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f094:	693b      	ldr	r3, [r7, #16]
 800f096:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f09a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f09c:	683b      	ldr	r3, [r7, #0]
 800f09e:	689b      	ldr	r3, [r3, #8]
 800f0a0:	051b      	lsls	r3, r3, #20
 800f0a2:	693a      	ldr	r2, [r7, #16]
 800f0a4:	4313      	orrs	r3, r2
 800f0a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	4a1a      	ldr	r2, [pc, #104]	; (800f114 <TIM_OC6_SetConfig+0xc0>)
 800f0ac:	4293      	cmp	r3, r2
 800f0ae:	d013      	beq.n	800f0d8 <TIM_OC6_SetConfig+0x84>
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	4a19      	ldr	r2, [pc, #100]	; (800f118 <TIM_OC6_SetConfig+0xc4>)
 800f0b4:	4293      	cmp	r3, r2
 800f0b6:	d00f      	beq.n	800f0d8 <TIM_OC6_SetConfig+0x84>
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	4a18      	ldr	r2, [pc, #96]	; (800f11c <TIM_OC6_SetConfig+0xc8>)
 800f0bc:	4293      	cmp	r3, r2
 800f0be:	d00b      	beq.n	800f0d8 <TIM_OC6_SetConfig+0x84>
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	4a17      	ldr	r2, [pc, #92]	; (800f120 <TIM_OC6_SetConfig+0xcc>)
 800f0c4:	4293      	cmp	r3, r2
 800f0c6:	d007      	beq.n	800f0d8 <TIM_OC6_SetConfig+0x84>
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	4a16      	ldr	r2, [pc, #88]	; (800f124 <TIM_OC6_SetConfig+0xd0>)
 800f0cc:	4293      	cmp	r3, r2
 800f0ce:	d003      	beq.n	800f0d8 <TIM_OC6_SetConfig+0x84>
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	4a15      	ldr	r2, [pc, #84]	; (800f128 <TIM_OC6_SetConfig+0xd4>)
 800f0d4:	4293      	cmp	r3, r2
 800f0d6:	d109      	bne.n	800f0ec <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f0d8:	697b      	ldr	r3, [r7, #20]
 800f0da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f0de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	695b      	ldr	r3, [r3, #20]
 800f0e4:	029b      	lsls	r3, r3, #10
 800f0e6:	697a      	ldr	r2, [r7, #20]
 800f0e8:	4313      	orrs	r3, r2
 800f0ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	697a      	ldr	r2, [r7, #20]
 800f0f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	68fa      	ldr	r2, [r7, #12]
 800f0f6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f0f8:	683b      	ldr	r3, [r7, #0]
 800f0fa:	685a      	ldr	r2, [r3, #4]
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	693a      	ldr	r2, [r7, #16]
 800f104:	621a      	str	r2, [r3, #32]
}
 800f106:	bf00      	nop
 800f108:	371c      	adds	r7, #28
 800f10a:	46bd      	mov	sp, r7
 800f10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f110:	4770      	bx	lr
 800f112:	bf00      	nop
 800f114:	40012c00 	.word	0x40012c00
 800f118:	40013400 	.word	0x40013400
 800f11c:	40014000 	.word	0x40014000
 800f120:	40014400 	.word	0x40014400
 800f124:	40014800 	.word	0x40014800
 800f128:	40015000 	.word	0x40015000

0800f12c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f12c:	b480      	push	{r7}
 800f12e:	b087      	sub	sp, #28
 800f130:	af00      	add	r7, sp, #0
 800f132:	60f8      	str	r0, [r7, #12]
 800f134:	60b9      	str	r1, [r7, #8]
 800f136:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f138:	68bb      	ldr	r3, [r7, #8]
 800f13a:	f003 031f 	and.w	r3, r3, #31
 800f13e:	2201      	movs	r2, #1
 800f140:	fa02 f303 	lsl.w	r3, r2, r3
 800f144:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	6a1a      	ldr	r2, [r3, #32]
 800f14a:	697b      	ldr	r3, [r7, #20]
 800f14c:	43db      	mvns	r3, r3
 800f14e:	401a      	ands	r2, r3
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	6a1a      	ldr	r2, [r3, #32]
 800f158:	68bb      	ldr	r3, [r7, #8]
 800f15a:	f003 031f 	and.w	r3, r3, #31
 800f15e:	6879      	ldr	r1, [r7, #4]
 800f160:	fa01 f303 	lsl.w	r3, r1, r3
 800f164:	431a      	orrs	r2, r3
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	621a      	str	r2, [r3, #32]
}
 800f16a:	bf00      	nop
 800f16c:	371c      	adds	r7, #28
 800f16e:	46bd      	mov	sp, r7
 800f170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f174:	4770      	bx	lr
	...

0800f178 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f178:	b480      	push	{r7}
 800f17a:	b085      	sub	sp, #20
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
 800f180:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f188:	2b01      	cmp	r3, #1
 800f18a:	d101      	bne.n	800f190 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f18c:	2302      	movs	r3, #2
 800f18e:	e074      	b.n	800f27a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	2201      	movs	r2, #1
 800f194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	2202      	movs	r2, #2
 800f19c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	685b      	ldr	r3, [r3, #4]
 800f1a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	689b      	ldr	r3, [r3, #8]
 800f1ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	4a34      	ldr	r2, [pc, #208]	; (800f288 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f1b6:	4293      	cmp	r3, r2
 800f1b8:	d009      	beq.n	800f1ce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	4a33      	ldr	r2, [pc, #204]	; (800f28c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f1c0:	4293      	cmp	r3, r2
 800f1c2:	d004      	beq.n	800f1ce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	4a31      	ldr	r2, [pc, #196]	; (800f290 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f1ca:	4293      	cmp	r3, r2
 800f1cc:	d108      	bne.n	800f1e0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f1d4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f1d6:	683b      	ldr	r3, [r7, #0]
 800f1d8:	685b      	ldr	r3, [r3, #4]
 800f1da:	68fa      	ldr	r2, [r7, #12]
 800f1dc:	4313      	orrs	r3, r2
 800f1de:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800f1e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f1ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	68fa      	ldr	r2, [r7, #12]
 800f1f2:	4313      	orrs	r3, r2
 800f1f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	68fa      	ldr	r2, [r7, #12]
 800f1fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	4a21      	ldr	r2, [pc, #132]	; (800f288 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f204:	4293      	cmp	r3, r2
 800f206:	d022      	beq.n	800f24e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f210:	d01d      	beq.n	800f24e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	4a1f      	ldr	r2, [pc, #124]	; (800f294 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800f218:	4293      	cmp	r3, r2
 800f21a:	d018      	beq.n	800f24e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	4a1d      	ldr	r2, [pc, #116]	; (800f298 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800f222:	4293      	cmp	r3, r2
 800f224:	d013      	beq.n	800f24e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	4a1c      	ldr	r2, [pc, #112]	; (800f29c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800f22c:	4293      	cmp	r3, r2
 800f22e:	d00e      	beq.n	800f24e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	4a15      	ldr	r2, [pc, #84]	; (800f28c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f236:	4293      	cmp	r3, r2
 800f238:	d009      	beq.n	800f24e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	4a18      	ldr	r2, [pc, #96]	; (800f2a0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f240:	4293      	cmp	r3, r2
 800f242:	d004      	beq.n	800f24e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	4a11      	ldr	r2, [pc, #68]	; (800f290 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f24a:	4293      	cmp	r3, r2
 800f24c:	d10c      	bne.n	800f268 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f24e:	68bb      	ldr	r3, [r7, #8]
 800f250:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f254:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f256:	683b      	ldr	r3, [r7, #0]
 800f258:	689b      	ldr	r3, [r3, #8]
 800f25a:	68ba      	ldr	r2, [r7, #8]
 800f25c:	4313      	orrs	r3, r2
 800f25e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	68ba      	ldr	r2, [r7, #8]
 800f266:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	2201      	movs	r2, #1
 800f26c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	2200      	movs	r2, #0
 800f274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f278:	2300      	movs	r3, #0
}
 800f27a:	4618      	mov	r0, r3
 800f27c:	3714      	adds	r7, #20
 800f27e:	46bd      	mov	sp, r7
 800f280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f284:	4770      	bx	lr
 800f286:	bf00      	nop
 800f288:	40012c00 	.word	0x40012c00
 800f28c:	40013400 	.word	0x40013400
 800f290:	40015000 	.word	0x40015000
 800f294:	40000400 	.word	0x40000400
 800f298:	40000800 	.word	0x40000800
 800f29c:	40000c00 	.word	0x40000c00
 800f2a0:	40014000 	.word	0x40014000

0800f2a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f2a4:	b480      	push	{r7}
 800f2a6:	b083      	sub	sp, #12
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f2ac:	bf00      	nop
 800f2ae:	370c      	adds	r7, #12
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b6:	4770      	bx	lr

0800f2b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f2b8:	b480      	push	{r7}
 800f2ba:	b083      	sub	sp, #12
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f2c0:	bf00      	nop
 800f2c2:	370c      	adds	r7, #12
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ca:	4770      	bx	lr

0800f2cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f2cc:	b480      	push	{r7}
 800f2ce:	b083      	sub	sp, #12
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f2d4:	bf00      	nop
 800f2d6:	370c      	adds	r7, #12
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2de:	4770      	bx	lr

0800f2e0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800f2e0:	b480      	push	{r7}
 800f2e2:	b083      	sub	sp, #12
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800f2e8:	bf00      	nop
 800f2ea:	370c      	adds	r7, #12
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f2:	4770      	bx	lr

0800f2f4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800f2f4:	b480      	push	{r7}
 800f2f6:	b083      	sub	sp, #12
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800f2fc:	bf00      	nop
 800f2fe:	370c      	adds	r7, #12
 800f300:	46bd      	mov	sp, r7
 800f302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f306:	4770      	bx	lr

0800f308 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800f308:	b480      	push	{r7}
 800f30a:	b083      	sub	sp, #12
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800f310:	bf00      	nop
 800f312:	370c      	adds	r7, #12
 800f314:	46bd      	mov	sp, r7
 800f316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31a:	4770      	bx	lr

0800f31c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800f31c:	b480      	push	{r7}
 800f31e:	b083      	sub	sp, #12
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800f324:	bf00      	nop
 800f326:	370c      	adds	r7, #12
 800f328:	46bd      	mov	sp, r7
 800f32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32e:	4770      	bx	lr

0800f330 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b082      	sub	sp, #8
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d101      	bne.n	800f342 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f33e:	2301      	movs	r3, #1
 800f340:	e042      	b.n	800f3c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d106      	bne.n	800f35a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	2200      	movs	r2, #0
 800f350:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f354:	6878      	ldr	r0, [r7, #4]
 800f356:	f7f9 f8ad 	bl	80084b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	2224      	movs	r2, #36	; 0x24
 800f35e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	681a      	ldr	r2, [r3, #0]
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	f022 0201 	bic.w	r2, r2, #1
 800f370:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f372:	6878      	ldr	r0, [r7, #4]
 800f374:	f000 fd2e 	bl	800fdd4 <UART_SetConfig>
 800f378:	4603      	mov	r3, r0
 800f37a:	2b01      	cmp	r3, #1
 800f37c:	d101      	bne.n	800f382 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800f37e:	2301      	movs	r3, #1
 800f380:	e022      	b.n	800f3c8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f386:	2b00      	cmp	r3, #0
 800f388:	d002      	beq.n	800f390 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800f38a:	6878      	ldr	r0, [r7, #4]
 800f38c:	f001 f81e 	bl	80103cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	685a      	ldr	r2, [r3, #4]
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f39e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	689a      	ldr	r2, [r3, #8]
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f3ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	681a      	ldr	r2, [r3, #0]
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	f042 0201 	orr.w	r2, r2, #1
 800f3be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f3c0:	6878      	ldr	r0, [r7, #4]
 800f3c2:	f001 f8a5 	bl	8010510 <UART_CheckIdleState>
 800f3c6:	4603      	mov	r3, r0
}
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	3708      	adds	r7, #8
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	bd80      	pop	{r7, pc}

0800f3d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b08a      	sub	sp, #40	; 0x28
 800f3d4:	af02      	add	r7, sp, #8
 800f3d6:	60f8      	str	r0, [r7, #12]
 800f3d8:	60b9      	str	r1, [r7, #8]
 800f3da:	603b      	str	r3, [r7, #0]
 800f3dc:	4613      	mov	r3, r2
 800f3de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f3e6:	2b20      	cmp	r3, #32
 800f3e8:	f040 8083 	bne.w	800f4f2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800f3ec:	68bb      	ldr	r3, [r7, #8]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d002      	beq.n	800f3f8 <HAL_UART_Transmit+0x28>
 800f3f2:	88fb      	ldrh	r3, [r7, #6]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d101      	bne.n	800f3fc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800f3f8:	2301      	movs	r3, #1
 800f3fa:	e07b      	b.n	800f4f4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f402:	2b01      	cmp	r3, #1
 800f404:	d101      	bne.n	800f40a <HAL_UART_Transmit+0x3a>
 800f406:	2302      	movs	r3, #2
 800f408:	e074      	b.n	800f4f4 <HAL_UART_Transmit+0x124>
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	2201      	movs	r2, #1
 800f40e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	2200      	movs	r2, #0
 800f416:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	2221      	movs	r2, #33	; 0x21
 800f41e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f422:	f7f9 f95f 	bl	80086e4 <HAL_GetTick>
 800f426:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	88fa      	ldrh	r2, [r7, #6]
 800f42c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	88fa      	ldrh	r2, [r7, #6]
 800f434:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	689b      	ldr	r3, [r3, #8]
 800f43c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f440:	d108      	bne.n	800f454 <HAL_UART_Transmit+0x84>
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	691b      	ldr	r3, [r3, #16]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d104      	bne.n	800f454 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800f44a:	2300      	movs	r3, #0
 800f44c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f44e:	68bb      	ldr	r3, [r7, #8]
 800f450:	61bb      	str	r3, [r7, #24]
 800f452:	e003      	b.n	800f45c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800f454:	68bb      	ldr	r3, [r7, #8]
 800f456:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f458:	2300      	movs	r3, #0
 800f45a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	2200      	movs	r2, #0
 800f460:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800f464:	e02c      	b.n	800f4c0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f466:	683b      	ldr	r3, [r7, #0]
 800f468:	9300      	str	r3, [sp, #0]
 800f46a:	697b      	ldr	r3, [r7, #20]
 800f46c:	2200      	movs	r2, #0
 800f46e:	2180      	movs	r1, #128	; 0x80
 800f470:	68f8      	ldr	r0, [r7, #12]
 800f472:	f001 f898 	bl	80105a6 <UART_WaitOnFlagUntilTimeout>
 800f476:	4603      	mov	r3, r0
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d001      	beq.n	800f480 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800f47c:	2303      	movs	r3, #3
 800f47e:	e039      	b.n	800f4f4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800f480:	69fb      	ldr	r3, [r7, #28]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d10b      	bne.n	800f49e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f486:	69bb      	ldr	r3, [r7, #24]
 800f488:	881b      	ldrh	r3, [r3, #0]
 800f48a:	461a      	mov	r2, r3
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f494:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800f496:	69bb      	ldr	r3, [r7, #24]
 800f498:	3302      	adds	r3, #2
 800f49a:	61bb      	str	r3, [r7, #24]
 800f49c:	e007      	b.n	800f4ae <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f49e:	69fb      	ldr	r3, [r7, #28]
 800f4a0:	781a      	ldrb	r2, [r3, #0]
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800f4a8:	69fb      	ldr	r3, [r7, #28]
 800f4aa:	3301      	adds	r3, #1
 800f4ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f4b4:	b29b      	uxth	r3, r3
 800f4b6:	3b01      	subs	r3, #1
 800f4b8:	b29a      	uxth	r2, r3
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f4c6:	b29b      	uxth	r3, r3
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d1cc      	bne.n	800f466 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f4cc:	683b      	ldr	r3, [r7, #0]
 800f4ce:	9300      	str	r3, [sp, #0]
 800f4d0:	697b      	ldr	r3, [r7, #20]
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	2140      	movs	r1, #64	; 0x40
 800f4d6:	68f8      	ldr	r0, [r7, #12]
 800f4d8:	f001 f865 	bl	80105a6 <UART_WaitOnFlagUntilTimeout>
 800f4dc:	4603      	mov	r3, r0
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d001      	beq.n	800f4e6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800f4e2:	2303      	movs	r3, #3
 800f4e4:	e006      	b.n	800f4f4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	2220      	movs	r2, #32
 800f4ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	e000      	b.n	800f4f4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800f4f2:	2302      	movs	r3, #2
  }
}
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	3720      	adds	r7, #32
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	bd80      	pop	{r7, pc}

0800f4fc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b08a      	sub	sp, #40	; 0x28
 800f500:	af02      	add	r7, sp, #8
 800f502:	60f8      	str	r0, [r7, #12]
 800f504:	60b9      	str	r1, [r7, #8]
 800f506:	603b      	str	r3, [r7, #0]
 800f508:	4613      	mov	r3, r2
 800f50a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f512:	2b20      	cmp	r3, #32
 800f514:	f040 80c0 	bne.w	800f698 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800f518:	68bb      	ldr	r3, [r7, #8]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d002      	beq.n	800f524 <HAL_UART_Receive+0x28>
 800f51e:	88fb      	ldrh	r3, [r7, #6]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d101      	bne.n	800f528 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800f524:	2301      	movs	r3, #1
 800f526:	e0b8      	b.n	800f69a <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f52e:	2b01      	cmp	r3, #1
 800f530:	d101      	bne.n	800f536 <HAL_UART_Receive+0x3a>
 800f532:	2302      	movs	r3, #2
 800f534:	e0b1      	b.n	800f69a <HAL_UART_Receive+0x19e>
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	2201      	movs	r2, #1
 800f53a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	2200      	movs	r2, #0
 800f542:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	2222      	movs	r2, #34	; 0x22
 800f54a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	2200      	movs	r2, #0
 800f552:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f554:	f7f9 f8c6 	bl	80086e4 <HAL_GetTick>
 800f558:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	88fa      	ldrh	r2, [r7, #6]
 800f55e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	88fa      	ldrh	r2, [r7, #6]
 800f566:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	689b      	ldr	r3, [r3, #8]
 800f56e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f572:	d10e      	bne.n	800f592 <HAL_UART_Receive+0x96>
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	691b      	ldr	r3, [r3, #16]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d105      	bne.n	800f588 <HAL_UART_Receive+0x8c>
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f582:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f586:	e02d      	b.n	800f5e4 <HAL_UART_Receive+0xe8>
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	22ff      	movs	r2, #255	; 0xff
 800f58c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f590:	e028      	b.n	800f5e4 <HAL_UART_Receive+0xe8>
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	689b      	ldr	r3, [r3, #8]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d10d      	bne.n	800f5b6 <HAL_UART_Receive+0xba>
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	691b      	ldr	r3, [r3, #16]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d104      	bne.n	800f5ac <HAL_UART_Receive+0xb0>
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	22ff      	movs	r2, #255	; 0xff
 800f5a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f5aa:	e01b      	b.n	800f5e4 <HAL_UART_Receive+0xe8>
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	227f      	movs	r2, #127	; 0x7f
 800f5b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f5b4:	e016      	b.n	800f5e4 <HAL_UART_Receive+0xe8>
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	689b      	ldr	r3, [r3, #8]
 800f5ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f5be:	d10d      	bne.n	800f5dc <HAL_UART_Receive+0xe0>
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	691b      	ldr	r3, [r3, #16]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d104      	bne.n	800f5d2 <HAL_UART_Receive+0xd6>
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	227f      	movs	r2, #127	; 0x7f
 800f5cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f5d0:	e008      	b.n	800f5e4 <HAL_UART_Receive+0xe8>
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	223f      	movs	r2, #63	; 0x3f
 800f5d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f5da:	e003      	b.n	800f5e4 <HAL_UART_Receive+0xe8>
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	2200      	movs	r2, #0
 800f5e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f5ea:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	689b      	ldr	r3, [r3, #8]
 800f5f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f5f4:	d108      	bne.n	800f608 <HAL_UART_Receive+0x10c>
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	691b      	ldr	r3, [r3, #16]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d104      	bne.n	800f608 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800f5fe:	2300      	movs	r3, #0
 800f600:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f602:	68bb      	ldr	r3, [r7, #8]
 800f604:	61bb      	str	r3, [r7, #24]
 800f606:	e003      	b.n	800f610 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800f608:	68bb      	ldr	r3, [r7, #8]
 800f60a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f60c:	2300      	movs	r3, #0
 800f60e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	2200      	movs	r2, #0
 800f614:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800f618:	e032      	b.n	800f680 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800f61a:	683b      	ldr	r3, [r7, #0]
 800f61c:	9300      	str	r3, [sp, #0]
 800f61e:	697b      	ldr	r3, [r7, #20]
 800f620:	2200      	movs	r2, #0
 800f622:	2120      	movs	r1, #32
 800f624:	68f8      	ldr	r0, [r7, #12]
 800f626:	f000 ffbe 	bl	80105a6 <UART_WaitOnFlagUntilTimeout>
 800f62a:	4603      	mov	r3, r0
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d001      	beq.n	800f634 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800f630:	2303      	movs	r3, #3
 800f632:	e032      	b.n	800f69a <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800f634:	69fb      	ldr	r3, [r7, #28]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d10c      	bne.n	800f654 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f640:	b29a      	uxth	r2, r3
 800f642:	8a7b      	ldrh	r3, [r7, #18]
 800f644:	4013      	ands	r3, r2
 800f646:	b29a      	uxth	r2, r3
 800f648:	69bb      	ldr	r3, [r7, #24]
 800f64a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800f64c:	69bb      	ldr	r3, [r7, #24]
 800f64e:	3302      	adds	r3, #2
 800f650:	61bb      	str	r3, [r7, #24]
 800f652:	e00c      	b.n	800f66e <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f65a:	b2da      	uxtb	r2, r3
 800f65c:	8a7b      	ldrh	r3, [r7, #18]
 800f65e:	b2db      	uxtb	r3, r3
 800f660:	4013      	ands	r3, r2
 800f662:	b2da      	uxtb	r2, r3
 800f664:	69fb      	ldr	r3, [r7, #28]
 800f666:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800f668:	69fb      	ldr	r3, [r7, #28]
 800f66a:	3301      	adds	r3, #1
 800f66c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f674:	b29b      	uxth	r3, r3
 800f676:	3b01      	subs	r3, #1
 800f678:	b29a      	uxth	r2, r3
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f686:	b29b      	uxth	r3, r3
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d1c6      	bne.n	800f61a <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	2220      	movs	r2, #32
 800f690:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800f694:	2300      	movs	r3, #0
 800f696:	e000      	b.n	800f69a <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800f698:	2302      	movs	r3, #2
  }
}
 800f69a:	4618      	mov	r0, r3
 800f69c:	3720      	adds	r7, #32
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	bd80      	pop	{r7, pc}
	...

0800f6a4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b08a      	sub	sp, #40	; 0x28
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	60f8      	str	r0, [r7, #12]
 800f6ac:	60b9      	str	r1, [r7, #8]
 800f6ae:	4613      	mov	r3, r2
 800f6b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f6b8:	2b20      	cmp	r3, #32
 800f6ba:	d142      	bne.n	800f742 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800f6bc:	68bb      	ldr	r3, [r7, #8]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d002      	beq.n	800f6c8 <HAL_UART_Receive_IT+0x24>
 800f6c2:	88fb      	ldrh	r3, [r7, #6]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d101      	bne.n	800f6cc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800f6c8:	2301      	movs	r3, #1
 800f6ca:	e03b      	b.n	800f744 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f6d2:	2b01      	cmp	r3, #1
 800f6d4:	d101      	bne.n	800f6da <HAL_UART_Receive_IT+0x36>
 800f6d6:	2302      	movs	r3, #2
 800f6d8:	e034      	b.n	800f744 <HAL_UART_Receive_IT+0xa0>
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	2201      	movs	r2, #1
 800f6de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	4a17      	ldr	r2, [pc, #92]	; (800f74c <HAL_UART_Receive_IT+0xa8>)
 800f6ee:	4293      	cmp	r3, r2
 800f6f0:	d01f      	beq.n	800f732 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	685b      	ldr	r3, [r3, #4]
 800f6f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d018      	beq.n	800f732 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f706:	697b      	ldr	r3, [r7, #20]
 800f708:	e853 3f00 	ldrex	r3, [r3]
 800f70c:	613b      	str	r3, [r7, #16]
   return(result);
 800f70e:	693b      	ldr	r3, [r7, #16]
 800f710:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f714:	627b      	str	r3, [r7, #36]	; 0x24
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	461a      	mov	r2, r3
 800f71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f71e:	623b      	str	r3, [r7, #32]
 800f720:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f722:	69f9      	ldr	r1, [r7, #28]
 800f724:	6a3a      	ldr	r2, [r7, #32]
 800f726:	e841 2300 	strex	r3, r2, [r1]
 800f72a:	61bb      	str	r3, [r7, #24]
   return(result);
 800f72c:	69bb      	ldr	r3, [r7, #24]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d1e6      	bne.n	800f700 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800f732:	88fb      	ldrh	r3, [r7, #6]
 800f734:	461a      	mov	r2, r3
 800f736:	68b9      	ldr	r1, [r7, #8]
 800f738:	68f8      	ldr	r0, [r7, #12]
 800f73a:	f000 fffd 	bl	8010738 <UART_Start_Receive_IT>
 800f73e:	4603      	mov	r3, r0
 800f740:	e000      	b.n	800f744 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800f742:	2302      	movs	r3, #2
  }
}
 800f744:	4618      	mov	r0, r3
 800f746:	3728      	adds	r7, #40	; 0x28
 800f748:	46bd      	mov	sp, r7
 800f74a:	bd80      	pop	{r7, pc}
 800f74c:	40008000 	.word	0x40008000

0800f750 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f750:	b580      	push	{r7, lr}
 800f752:	b0ba      	sub	sp, #232	; 0xe8
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	69db      	ldr	r3, [r3, #28]
 800f75e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	689b      	ldr	r3, [r3, #8]
 800f772:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f776:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800f77a:	f640 030f 	movw	r3, #2063	; 0x80f
 800f77e:	4013      	ands	r3, r2
 800f780:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800f784:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d11b      	bne.n	800f7c4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f78c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f790:	f003 0320 	and.w	r3, r3, #32
 800f794:	2b00      	cmp	r3, #0
 800f796:	d015      	beq.n	800f7c4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f79c:	f003 0320 	and.w	r3, r3, #32
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d105      	bne.n	800f7b0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f7a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f7a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d009      	beq.n	800f7c4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	f000 82d6 	beq.w	800fd66 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7be:	6878      	ldr	r0, [r7, #4]
 800f7c0:	4798      	blx	r3
      }
      return;
 800f7c2:	e2d0      	b.n	800fd66 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f7c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	f000 811f 	beq.w	800fa0c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f7ce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f7d2:	4b8b      	ldr	r3, [pc, #556]	; (800fa00 <HAL_UART_IRQHandler+0x2b0>)
 800f7d4:	4013      	ands	r3, r2
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d106      	bne.n	800f7e8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f7da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800f7de:	4b89      	ldr	r3, [pc, #548]	; (800fa04 <HAL_UART_IRQHandler+0x2b4>)
 800f7e0:	4013      	ands	r3, r2
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	f000 8112 	beq.w	800fa0c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f7e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f7ec:	f003 0301 	and.w	r3, r3, #1
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d011      	beq.n	800f818 <HAL_UART_IRQHandler+0xc8>
 800f7f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f7f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d00b      	beq.n	800f818 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	2201      	movs	r2, #1
 800f806:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f80e:	f043 0201 	orr.w	r2, r3, #1
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f81c:	f003 0302 	and.w	r3, r3, #2
 800f820:	2b00      	cmp	r3, #0
 800f822:	d011      	beq.n	800f848 <HAL_UART_IRQHandler+0xf8>
 800f824:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f828:	f003 0301 	and.w	r3, r3, #1
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d00b      	beq.n	800f848 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	2202      	movs	r2, #2
 800f836:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f83e:	f043 0204 	orr.w	r2, r3, #4
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f84c:	f003 0304 	and.w	r3, r3, #4
 800f850:	2b00      	cmp	r3, #0
 800f852:	d011      	beq.n	800f878 <HAL_UART_IRQHandler+0x128>
 800f854:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f858:	f003 0301 	and.w	r3, r3, #1
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d00b      	beq.n	800f878 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	2204      	movs	r2, #4
 800f866:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f86e:	f043 0202 	orr.w	r2, r3, #2
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f87c:	f003 0308 	and.w	r3, r3, #8
 800f880:	2b00      	cmp	r3, #0
 800f882:	d017      	beq.n	800f8b4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f888:	f003 0320 	and.w	r3, r3, #32
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d105      	bne.n	800f89c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f890:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f894:	4b5a      	ldr	r3, [pc, #360]	; (800fa00 <HAL_UART_IRQHandler+0x2b0>)
 800f896:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d00b      	beq.n	800f8b4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	2208      	movs	r2, #8
 800f8a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f8aa:	f043 0208 	orr.w	r2, r3, #8
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f8b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f8b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d012      	beq.n	800f8e6 <HAL_UART_IRQHandler+0x196>
 800f8c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f8c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d00c      	beq.n	800f8e6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f8d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f8dc:	f043 0220 	orr.w	r2, r3, #32
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	f000 823c 	beq.w	800fd6a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f8f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f8f6:	f003 0320 	and.w	r3, r3, #32
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d013      	beq.n	800f926 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f8fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f902:	f003 0320 	and.w	r3, r3, #32
 800f906:	2b00      	cmp	r3, #0
 800f908:	d105      	bne.n	800f916 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f90a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f90e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f912:	2b00      	cmp	r3, #0
 800f914:	d007      	beq.n	800f926 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d003      	beq.n	800f926 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f922:	6878      	ldr	r0, [r7, #4]
 800f924:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f92c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	689b      	ldr	r3, [r3, #8]
 800f936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f93a:	2b40      	cmp	r3, #64	; 0x40
 800f93c:	d005      	beq.n	800f94a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f93e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f942:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f946:	2b00      	cmp	r3, #0
 800f948:	d04f      	beq.n	800f9ea <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f94a:	6878      	ldr	r0, [r7, #4]
 800f94c:	f001 f81e 	bl	801098c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	689b      	ldr	r3, [r3, #8]
 800f956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f95a:	2b40      	cmp	r3, #64	; 0x40
 800f95c:	d141      	bne.n	800f9e2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	3308      	adds	r3, #8
 800f964:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f968:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f96c:	e853 3f00 	ldrex	r3, [r3]
 800f970:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800f974:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f978:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f97c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	3308      	adds	r3, #8
 800f986:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800f98a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800f98e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f992:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800f996:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f99a:	e841 2300 	strex	r3, r2, [r1]
 800f99e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800f9a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d1d9      	bne.n	800f95e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d013      	beq.n	800f9da <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f9b6:	4a14      	ldr	r2, [pc, #80]	; (800fa08 <HAL_UART_IRQHandler+0x2b8>)
 800f9b8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f9be:	4618      	mov	r0, r3
 800f9c0:	f7fa fb26 	bl	800a010 <HAL_DMA_Abort_IT>
 800f9c4:	4603      	mov	r3, r0
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d017      	beq.n	800f9fa <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f9ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9d0:	687a      	ldr	r2, [r7, #4]
 800f9d2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800f9d4:	4610      	mov	r0, r2
 800f9d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f9d8:	e00f      	b.n	800f9fa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f9da:	6878      	ldr	r0, [r7, #4]
 800f9dc:	f000 f9e4 	bl	800fda8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f9e0:	e00b      	b.n	800f9fa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f9e2:	6878      	ldr	r0, [r7, #4]
 800f9e4:	f000 f9e0 	bl	800fda8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f9e8:	e007      	b.n	800f9fa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f9ea:	6878      	ldr	r0, [r7, #4]
 800f9ec:	f000 f9dc 	bl	800fda8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800f9f8:	e1b7      	b.n	800fd6a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f9fa:	bf00      	nop
    return;
 800f9fc:	e1b5      	b.n	800fd6a <HAL_UART_IRQHandler+0x61a>
 800f9fe:	bf00      	nop
 800fa00:	10000001 	.word	0x10000001
 800fa04:	04000120 	.word	0x04000120
 800fa08:	08010a59 	.word	0x08010a59

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa10:	2b01      	cmp	r3, #1
 800fa12:	f040 814a 	bne.w	800fcaa <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800fa16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa1a:	f003 0310 	and.w	r3, r3, #16
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	f000 8143 	beq.w	800fcaa <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800fa24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fa28:	f003 0310 	and.w	r3, r3, #16
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	f000 813c 	beq.w	800fcaa <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	2210      	movs	r2, #16
 800fa38:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	689b      	ldr	r3, [r3, #8]
 800fa40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa44:	2b40      	cmp	r3, #64	; 0x40
 800fa46:	f040 80b5 	bne.w	800fbb4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	685b      	ldr	r3, [r3, #4]
 800fa52:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800fa56:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	f000 8187 	beq.w	800fd6e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fa66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800fa6a:	429a      	cmp	r2, r3
 800fa6c:	f080 817f 	bcs.w	800fd6e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800fa76:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	f003 0320 	and.w	r3, r3, #32
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	f040 8086 	bne.w	800fb98 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fa98:	e853 3f00 	ldrex	r3, [r3]
 800fa9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800faa0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800faa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800faa8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	461a      	mov	r2, r3
 800fab2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fab6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800faba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fabe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800fac2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800fac6:	e841 2300 	strex	r3, r2, [r1]
 800faca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800face:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d1da      	bne.n	800fa8c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	3308      	adds	r3, #8
 800fadc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fade:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fae0:	e853 3f00 	ldrex	r3, [r3]
 800fae4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800fae6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fae8:	f023 0301 	bic.w	r3, r3, #1
 800faec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	3308      	adds	r3, #8
 800faf6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800fafa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800fafe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb00:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800fb02:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fb06:	e841 2300 	strex	r3, r2, [r1]
 800fb0a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800fb0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d1e1      	bne.n	800fad6 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	3308      	adds	r3, #8
 800fb18:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fb1c:	e853 3f00 	ldrex	r3, [r3]
 800fb20:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800fb22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fb28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	3308      	adds	r3, #8
 800fb32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800fb36:	66fa      	str	r2, [r7, #108]	; 0x6c
 800fb38:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fb3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fb3e:	e841 2300 	strex	r3, r2, [r1]
 800fb42:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800fb44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d1e3      	bne.n	800fb12 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	2220      	movs	r2, #32
 800fb4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	2200      	movs	r2, #0
 800fb56:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb60:	e853 3f00 	ldrex	r3, [r3]
 800fb64:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fb66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb68:	f023 0310 	bic.w	r3, r3, #16
 800fb6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	461a      	mov	r2, r3
 800fb76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fb7a:	65bb      	str	r3, [r7, #88]	; 0x58
 800fb7c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb7e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fb80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fb82:	e841 2300 	strex	r3, r2, [r1]
 800fb86:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fb88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d1e4      	bne.n	800fb58 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb92:	4618      	mov	r0, r3
 800fb94:	f7fa f9e3 	bl	8009f5e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fba4:	b29b      	uxth	r3, r3
 800fba6:	1ad3      	subs	r3, r2, r3
 800fba8:	b29b      	uxth	r3, r3
 800fbaa:	4619      	mov	r1, r3
 800fbac:	6878      	ldr	r0, [r7, #4]
 800fbae:	f000 f905 	bl	800fdbc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fbb2:	e0dc      	b.n	800fd6e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fbc0:	b29b      	uxth	r3, r3
 800fbc2:	1ad3      	subs	r3, r2, r3
 800fbc4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fbce:	b29b      	uxth	r3, r3
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	f000 80ce 	beq.w	800fd72 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800fbd6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	f000 80c9 	beq.w	800fd72 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbe8:	e853 3f00 	ldrex	r3, [r3]
 800fbec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fbee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbf0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fbf4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	461a      	mov	r2, r3
 800fbfe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800fc02:	647b      	str	r3, [r7, #68]	; 0x44
 800fc04:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fc08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fc0a:	e841 2300 	strex	r3, r2, [r1]
 800fc0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fc10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d1e4      	bne.n	800fbe0 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	3308      	adds	r3, #8
 800fc1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc20:	e853 3f00 	ldrex	r3, [r3]
 800fc24:	623b      	str	r3, [r7, #32]
   return(result);
 800fc26:	6a3b      	ldr	r3, [r7, #32]
 800fc28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fc2c:	f023 0301 	bic.w	r3, r3, #1
 800fc30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	3308      	adds	r3, #8
 800fc3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800fc3e:	633a      	str	r2, [r7, #48]	; 0x30
 800fc40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fc44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc46:	e841 2300 	strex	r3, r2, [r1]
 800fc4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fc4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d1e1      	bne.n	800fc16 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	2220      	movs	r2, #32
 800fc56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	2200      	movs	r2, #0
 800fc5e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	2200      	movs	r2, #0
 800fc64:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc6c:	693b      	ldr	r3, [r7, #16]
 800fc6e:	e853 3f00 	ldrex	r3, [r3]
 800fc72:	60fb      	str	r3, [r7, #12]
   return(result);
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	f023 0310 	bic.w	r3, r3, #16
 800fc7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	461a      	mov	r2, r3
 800fc84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800fc88:	61fb      	str	r3, [r7, #28]
 800fc8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc8c:	69b9      	ldr	r1, [r7, #24]
 800fc8e:	69fa      	ldr	r2, [r7, #28]
 800fc90:	e841 2300 	strex	r3, r2, [r1]
 800fc94:	617b      	str	r3, [r7, #20]
   return(result);
 800fc96:	697b      	ldr	r3, [r7, #20]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d1e4      	bne.n	800fc66 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fc9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800fca0:	4619      	mov	r1, r3
 800fca2:	6878      	ldr	r0, [r7, #4]
 800fca4:	f000 f88a 	bl	800fdbc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fca8:	e063      	b.n	800fd72 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800fcaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fcae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d00e      	beq.n	800fcd4 <HAL_UART_IRQHandler+0x584>
 800fcb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fcba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d008      	beq.n	800fcd4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800fcca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800fccc:	6878      	ldr	r0, [r7, #4]
 800fcce:	f001 fb61 	bl	8011394 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fcd2:	e051      	b.n	800fd78 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800fcd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fcd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d014      	beq.n	800fd0a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800fce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d105      	bne.n	800fcf8 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800fcec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fcf0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d008      	beq.n	800fd0a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d03a      	beq.n	800fd76 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd04:	6878      	ldr	r0, [r7, #4]
 800fd06:	4798      	blx	r3
    }
    return;
 800fd08:	e035      	b.n	800fd76 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800fd0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fd0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d009      	beq.n	800fd2a <HAL_UART_IRQHandler+0x5da>
 800fd16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fd1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d003      	beq.n	800fd2a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800fd22:	6878      	ldr	r0, [r7, #4]
 800fd24:	f000 feae 	bl	8010a84 <UART_EndTransmit_IT>
    return;
 800fd28:	e026      	b.n	800fd78 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800fd2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fd2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d009      	beq.n	800fd4a <HAL_UART_IRQHandler+0x5fa>
 800fd36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fd3a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d003      	beq.n	800fd4a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800fd42:	6878      	ldr	r0, [r7, #4]
 800fd44:	f001 fb3a 	bl	80113bc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fd48:	e016      	b.n	800fd78 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800fd4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fd4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d010      	beq.n	800fd78 <HAL_UART_IRQHandler+0x628>
 800fd56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	da0c      	bge.n	800fd78 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800fd5e:	6878      	ldr	r0, [r7, #4]
 800fd60:	f001 fb22 	bl	80113a8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fd64:	e008      	b.n	800fd78 <HAL_UART_IRQHandler+0x628>
      return;
 800fd66:	bf00      	nop
 800fd68:	e006      	b.n	800fd78 <HAL_UART_IRQHandler+0x628>
    return;
 800fd6a:	bf00      	nop
 800fd6c:	e004      	b.n	800fd78 <HAL_UART_IRQHandler+0x628>
      return;
 800fd6e:	bf00      	nop
 800fd70:	e002      	b.n	800fd78 <HAL_UART_IRQHandler+0x628>
      return;
 800fd72:	bf00      	nop
 800fd74:	e000      	b.n	800fd78 <HAL_UART_IRQHandler+0x628>
    return;
 800fd76:	bf00      	nop
  }
}
 800fd78:	37e8      	adds	r7, #232	; 0xe8
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	bd80      	pop	{r7, pc}
 800fd7e:	bf00      	nop

0800fd80 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fd80:	b480      	push	{r7}
 800fd82:	b083      	sub	sp, #12
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800fd88:	bf00      	nop
 800fd8a:	370c      	adds	r7, #12
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd92:	4770      	bx	lr

0800fd94 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800fd94:	b480      	push	{r7}
 800fd96:	b083      	sub	sp, #12
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800fd9c:	bf00      	nop
 800fd9e:	370c      	adds	r7, #12
 800fda0:	46bd      	mov	sp, r7
 800fda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda6:	4770      	bx	lr

0800fda8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fda8:	b480      	push	{r7}
 800fdaa:	b083      	sub	sp, #12
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800fdb0:	bf00      	nop
 800fdb2:	370c      	adds	r7, #12
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdba:	4770      	bx	lr

0800fdbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800fdbc:	b480      	push	{r7}
 800fdbe:	b083      	sub	sp, #12
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	6078      	str	r0, [r7, #4]
 800fdc4:	460b      	mov	r3, r1
 800fdc6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fdc8:	bf00      	nop
 800fdca:	370c      	adds	r7, #12
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd2:	4770      	bx	lr

0800fdd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fdd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fdd8:	b08c      	sub	sp, #48	; 0x30
 800fdda:	af00      	add	r7, sp, #0
 800fddc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fdde:	2300      	movs	r3, #0
 800fde0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fde4:	697b      	ldr	r3, [r7, #20]
 800fde6:	689a      	ldr	r2, [r3, #8]
 800fde8:	697b      	ldr	r3, [r7, #20]
 800fdea:	691b      	ldr	r3, [r3, #16]
 800fdec:	431a      	orrs	r2, r3
 800fdee:	697b      	ldr	r3, [r7, #20]
 800fdf0:	695b      	ldr	r3, [r3, #20]
 800fdf2:	431a      	orrs	r2, r3
 800fdf4:	697b      	ldr	r3, [r7, #20]
 800fdf6:	69db      	ldr	r3, [r3, #28]
 800fdf8:	4313      	orrs	r3, r2
 800fdfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fdfc:	697b      	ldr	r3, [r7, #20]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	681a      	ldr	r2, [r3, #0]
 800fe02:	4baa      	ldr	r3, [pc, #680]	; (80100ac <UART_SetConfig+0x2d8>)
 800fe04:	4013      	ands	r3, r2
 800fe06:	697a      	ldr	r2, [r7, #20]
 800fe08:	6812      	ldr	r2, [r2, #0]
 800fe0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fe0c:	430b      	orrs	r3, r1
 800fe0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fe10:	697b      	ldr	r3, [r7, #20]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	685b      	ldr	r3, [r3, #4]
 800fe16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fe1a:	697b      	ldr	r3, [r7, #20]
 800fe1c:	68da      	ldr	r2, [r3, #12]
 800fe1e:	697b      	ldr	r3, [r7, #20]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	430a      	orrs	r2, r1
 800fe24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fe26:	697b      	ldr	r3, [r7, #20]
 800fe28:	699b      	ldr	r3, [r3, #24]
 800fe2a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800fe2c:	697b      	ldr	r3, [r7, #20]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	4a9f      	ldr	r2, [pc, #636]	; (80100b0 <UART_SetConfig+0x2dc>)
 800fe32:	4293      	cmp	r3, r2
 800fe34:	d004      	beq.n	800fe40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800fe36:	697b      	ldr	r3, [r7, #20]
 800fe38:	6a1b      	ldr	r3, [r3, #32]
 800fe3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe3c:	4313      	orrs	r3, r2
 800fe3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fe40:	697b      	ldr	r3, [r7, #20]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	689b      	ldr	r3, [r3, #8]
 800fe46:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800fe4a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800fe4e:	697a      	ldr	r2, [r7, #20]
 800fe50:	6812      	ldr	r2, [r2, #0]
 800fe52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fe54:	430b      	orrs	r3, r1
 800fe56:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800fe58:	697b      	ldr	r3, [r7, #20]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe5e:	f023 010f 	bic.w	r1, r3, #15
 800fe62:	697b      	ldr	r3, [r7, #20]
 800fe64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe66:	697b      	ldr	r3, [r7, #20]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	430a      	orrs	r2, r1
 800fe6c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fe6e:	697b      	ldr	r3, [r7, #20]
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	4a90      	ldr	r2, [pc, #576]	; (80100b4 <UART_SetConfig+0x2e0>)
 800fe74:	4293      	cmp	r3, r2
 800fe76:	d125      	bne.n	800fec4 <UART_SetConfig+0xf0>
 800fe78:	4b8f      	ldr	r3, [pc, #572]	; (80100b8 <UART_SetConfig+0x2e4>)
 800fe7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fe7e:	f003 0303 	and.w	r3, r3, #3
 800fe82:	2b03      	cmp	r3, #3
 800fe84:	d81a      	bhi.n	800febc <UART_SetConfig+0xe8>
 800fe86:	a201      	add	r2, pc, #4	; (adr r2, 800fe8c <UART_SetConfig+0xb8>)
 800fe88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe8c:	0800fe9d 	.word	0x0800fe9d
 800fe90:	0800fead 	.word	0x0800fead
 800fe94:	0800fea5 	.word	0x0800fea5
 800fe98:	0800feb5 	.word	0x0800feb5
 800fe9c:	2301      	movs	r3, #1
 800fe9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fea2:	e116      	b.n	80100d2 <UART_SetConfig+0x2fe>
 800fea4:	2302      	movs	r3, #2
 800fea6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800feaa:	e112      	b.n	80100d2 <UART_SetConfig+0x2fe>
 800feac:	2304      	movs	r3, #4
 800feae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800feb2:	e10e      	b.n	80100d2 <UART_SetConfig+0x2fe>
 800feb4:	2308      	movs	r3, #8
 800feb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800feba:	e10a      	b.n	80100d2 <UART_SetConfig+0x2fe>
 800febc:	2310      	movs	r3, #16
 800febe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fec2:	e106      	b.n	80100d2 <UART_SetConfig+0x2fe>
 800fec4:	697b      	ldr	r3, [r7, #20]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	4a7c      	ldr	r2, [pc, #496]	; (80100bc <UART_SetConfig+0x2e8>)
 800feca:	4293      	cmp	r3, r2
 800fecc:	d138      	bne.n	800ff40 <UART_SetConfig+0x16c>
 800fece:	4b7a      	ldr	r3, [pc, #488]	; (80100b8 <UART_SetConfig+0x2e4>)
 800fed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fed4:	f003 030c 	and.w	r3, r3, #12
 800fed8:	2b0c      	cmp	r3, #12
 800feda:	d82d      	bhi.n	800ff38 <UART_SetConfig+0x164>
 800fedc:	a201      	add	r2, pc, #4	; (adr r2, 800fee4 <UART_SetConfig+0x110>)
 800fede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fee2:	bf00      	nop
 800fee4:	0800ff19 	.word	0x0800ff19
 800fee8:	0800ff39 	.word	0x0800ff39
 800feec:	0800ff39 	.word	0x0800ff39
 800fef0:	0800ff39 	.word	0x0800ff39
 800fef4:	0800ff29 	.word	0x0800ff29
 800fef8:	0800ff39 	.word	0x0800ff39
 800fefc:	0800ff39 	.word	0x0800ff39
 800ff00:	0800ff39 	.word	0x0800ff39
 800ff04:	0800ff21 	.word	0x0800ff21
 800ff08:	0800ff39 	.word	0x0800ff39
 800ff0c:	0800ff39 	.word	0x0800ff39
 800ff10:	0800ff39 	.word	0x0800ff39
 800ff14:	0800ff31 	.word	0x0800ff31
 800ff18:	2300      	movs	r3, #0
 800ff1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ff1e:	e0d8      	b.n	80100d2 <UART_SetConfig+0x2fe>
 800ff20:	2302      	movs	r3, #2
 800ff22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ff26:	e0d4      	b.n	80100d2 <UART_SetConfig+0x2fe>
 800ff28:	2304      	movs	r3, #4
 800ff2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ff2e:	e0d0      	b.n	80100d2 <UART_SetConfig+0x2fe>
 800ff30:	2308      	movs	r3, #8
 800ff32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ff36:	e0cc      	b.n	80100d2 <UART_SetConfig+0x2fe>
 800ff38:	2310      	movs	r3, #16
 800ff3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ff3e:	e0c8      	b.n	80100d2 <UART_SetConfig+0x2fe>
 800ff40:	697b      	ldr	r3, [r7, #20]
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	4a5e      	ldr	r2, [pc, #376]	; (80100c0 <UART_SetConfig+0x2ec>)
 800ff46:	4293      	cmp	r3, r2
 800ff48:	d125      	bne.n	800ff96 <UART_SetConfig+0x1c2>
 800ff4a:	4b5b      	ldr	r3, [pc, #364]	; (80100b8 <UART_SetConfig+0x2e4>)
 800ff4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ff50:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ff54:	2b30      	cmp	r3, #48	; 0x30
 800ff56:	d016      	beq.n	800ff86 <UART_SetConfig+0x1b2>
 800ff58:	2b30      	cmp	r3, #48	; 0x30
 800ff5a:	d818      	bhi.n	800ff8e <UART_SetConfig+0x1ba>
 800ff5c:	2b20      	cmp	r3, #32
 800ff5e:	d00a      	beq.n	800ff76 <UART_SetConfig+0x1a2>
 800ff60:	2b20      	cmp	r3, #32
 800ff62:	d814      	bhi.n	800ff8e <UART_SetConfig+0x1ba>
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d002      	beq.n	800ff6e <UART_SetConfig+0x19a>
 800ff68:	2b10      	cmp	r3, #16
 800ff6a:	d008      	beq.n	800ff7e <UART_SetConfig+0x1aa>
 800ff6c:	e00f      	b.n	800ff8e <UART_SetConfig+0x1ba>
 800ff6e:	2300      	movs	r3, #0
 800ff70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ff74:	e0ad      	b.n	80100d2 <UART_SetConfig+0x2fe>
 800ff76:	2302      	movs	r3, #2
 800ff78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ff7c:	e0a9      	b.n	80100d2 <UART_SetConfig+0x2fe>
 800ff7e:	2304      	movs	r3, #4
 800ff80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ff84:	e0a5      	b.n	80100d2 <UART_SetConfig+0x2fe>
 800ff86:	2308      	movs	r3, #8
 800ff88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ff8c:	e0a1      	b.n	80100d2 <UART_SetConfig+0x2fe>
 800ff8e:	2310      	movs	r3, #16
 800ff90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ff94:	e09d      	b.n	80100d2 <UART_SetConfig+0x2fe>
 800ff96:	697b      	ldr	r3, [r7, #20]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	4a4a      	ldr	r2, [pc, #296]	; (80100c4 <UART_SetConfig+0x2f0>)
 800ff9c:	4293      	cmp	r3, r2
 800ff9e:	d125      	bne.n	800ffec <UART_SetConfig+0x218>
 800ffa0:	4b45      	ldr	r3, [pc, #276]	; (80100b8 <UART_SetConfig+0x2e4>)
 800ffa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ffa6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ffaa:	2bc0      	cmp	r3, #192	; 0xc0
 800ffac:	d016      	beq.n	800ffdc <UART_SetConfig+0x208>
 800ffae:	2bc0      	cmp	r3, #192	; 0xc0
 800ffb0:	d818      	bhi.n	800ffe4 <UART_SetConfig+0x210>
 800ffb2:	2b80      	cmp	r3, #128	; 0x80
 800ffb4:	d00a      	beq.n	800ffcc <UART_SetConfig+0x1f8>
 800ffb6:	2b80      	cmp	r3, #128	; 0x80
 800ffb8:	d814      	bhi.n	800ffe4 <UART_SetConfig+0x210>
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d002      	beq.n	800ffc4 <UART_SetConfig+0x1f0>
 800ffbe:	2b40      	cmp	r3, #64	; 0x40
 800ffc0:	d008      	beq.n	800ffd4 <UART_SetConfig+0x200>
 800ffc2:	e00f      	b.n	800ffe4 <UART_SetConfig+0x210>
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ffca:	e082      	b.n	80100d2 <UART_SetConfig+0x2fe>
 800ffcc:	2302      	movs	r3, #2
 800ffce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ffd2:	e07e      	b.n	80100d2 <UART_SetConfig+0x2fe>
 800ffd4:	2304      	movs	r3, #4
 800ffd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ffda:	e07a      	b.n	80100d2 <UART_SetConfig+0x2fe>
 800ffdc:	2308      	movs	r3, #8
 800ffde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ffe2:	e076      	b.n	80100d2 <UART_SetConfig+0x2fe>
 800ffe4:	2310      	movs	r3, #16
 800ffe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ffea:	e072      	b.n	80100d2 <UART_SetConfig+0x2fe>
 800ffec:	697b      	ldr	r3, [r7, #20]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	4a35      	ldr	r2, [pc, #212]	; (80100c8 <UART_SetConfig+0x2f4>)
 800fff2:	4293      	cmp	r3, r2
 800fff4:	d12a      	bne.n	801004c <UART_SetConfig+0x278>
 800fff6:	4b30      	ldr	r3, [pc, #192]	; (80100b8 <UART_SetConfig+0x2e4>)
 800fff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fffc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010000:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010004:	d01a      	beq.n	801003c <UART_SetConfig+0x268>
 8010006:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801000a:	d81b      	bhi.n	8010044 <UART_SetConfig+0x270>
 801000c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010010:	d00c      	beq.n	801002c <UART_SetConfig+0x258>
 8010012:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010016:	d815      	bhi.n	8010044 <UART_SetConfig+0x270>
 8010018:	2b00      	cmp	r3, #0
 801001a:	d003      	beq.n	8010024 <UART_SetConfig+0x250>
 801001c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010020:	d008      	beq.n	8010034 <UART_SetConfig+0x260>
 8010022:	e00f      	b.n	8010044 <UART_SetConfig+0x270>
 8010024:	2300      	movs	r3, #0
 8010026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801002a:	e052      	b.n	80100d2 <UART_SetConfig+0x2fe>
 801002c:	2302      	movs	r3, #2
 801002e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010032:	e04e      	b.n	80100d2 <UART_SetConfig+0x2fe>
 8010034:	2304      	movs	r3, #4
 8010036:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801003a:	e04a      	b.n	80100d2 <UART_SetConfig+0x2fe>
 801003c:	2308      	movs	r3, #8
 801003e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010042:	e046      	b.n	80100d2 <UART_SetConfig+0x2fe>
 8010044:	2310      	movs	r3, #16
 8010046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801004a:	e042      	b.n	80100d2 <UART_SetConfig+0x2fe>
 801004c:	697b      	ldr	r3, [r7, #20]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	4a17      	ldr	r2, [pc, #92]	; (80100b0 <UART_SetConfig+0x2dc>)
 8010052:	4293      	cmp	r3, r2
 8010054:	d13a      	bne.n	80100cc <UART_SetConfig+0x2f8>
 8010056:	4b18      	ldr	r3, [pc, #96]	; (80100b8 <UART_SetConfig+0x2e4>)
 8010058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801005c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8010060:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010064:	d01a      	beq.n	801009c <UART_SetConfig+0x2c8>
 8010066:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801006a:	d81b      	bhi.n	80100a4 <UART_SetConfig+0x2d0>
 801006c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010070:	d00c      	beq.n	801008c <UART_SetConfig+0x2b8>
 8010072:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010076:	d815      	bhi.n	80100a4 <UART_SetConfig+0x2d0>
 8010078:	2b00      	cmp	r3, #0
 801007a:	d003      	beq.n	8010084 <UART_SetConfig+0x2b0>
 801007c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010080:	d008      	beq.n	8010094 <UART_SetConfig+0x2c0>
 8010082:	e00f      	b.n	80100a4 <UART_SetConfig+0x2d0>
 8010084:	2300      	movs	r3, #0
 8010086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801008a:	e022      	b.n	80100d2 <UART_SetConfig+0x2fe>
 801008c:	2302      	movs	r3, #2
 801008e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010092:	e01e      	b.n	80100d2 <UART_SetConfig+0x2fe>
 8010094:	2304      	movs	r3, #4
 8010096:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801009a:	e01a      	b.n	80100d2 <UART_SetConfig+0x2fe>
 801009c:	2308      	movs	r3, #8
 801009e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80100a2:	e016      	b.n	80100d2 <UART_SetConfig+0x2fe>
 80100a4:	2310      	movs	r3, #16
 80100a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80100aa:	e012      	b.n	80100d2 <UART_SetConfig+0x2fe>
 80100ac:	cfff69f3 	.word	0xcfff69f3
 80100b0:	40008000 	.word	0x40008000
 80100b4:	40013800 	.word	0x40013800
 80100b8:	40021000 	.word	0x40021000
 80100bc:	40004400 	.word	0x40004400
 80100c0:	40004800 	.word	0x40004800
 80100c4:	40004c00 	.word	0x40004c00
 80100c8:	40005000 	.word	0x40005000
 80100cc:	2310      	movs	r3, #16
 80100ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80100d2:	697b      	ldr	r3, [r7, #20]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	4aae      	ldr	r2, [pc, #696]	; (8010390 <UART_SetConfig+0x5bc>)
 80100d8:	4293      	cmp	r3, r2
 80100da:	f040 8097 	bne.w	801020c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80100de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80100e2:	2b08      	cmp	r3, #8
 80100e4:	d823      	bhi.n	801012e <UART_SetConfig+0x35a>
 80100e6:	a201      	add	r2, pc, #4	; (adr r2, 80100ec <UART_SetConfig+0x318>)
 80100e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100ec:	08010111 	.word	0x08010111
 80100f0:	0801012f 	.word	0x0801012f
 80100f4:	08010119 	.word	0x08010119
 80100f8:	0801012f 	.word	0x0801012f
 80100fc:	0801011f 	.word	0x0801011f
 8010100:	0801012f 	.word	0x0801012f
 8010104:	0801012f 	.word	0x0801012f
 8010108:	0801012f 	.word	0x0801012f
 801010c:	08010127 	.word	0x08010127
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010110:	f7fd fb9e 	bl	800d850 <HAL_RCC_GetPCLK1Freq>
 8010114:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010116:	e010      	b.n	801013a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010118:	4b9e      	ldr	r3, [pc, #632]	; (8010394 <UART_SetConfig+0x5c0>)
 801011a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801011c:	e00d      	b.n	801013a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801011e:	f7fd fb29 	bl	800d774 <HAL_RCC_GetSysClockFreq>
 8010122:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010124:	e009      	b.n	801013a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801012a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801012c:	e005      	b.n	801013a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 801012e:	2300      	movs	r3, #0
 8010130:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8010132:	2301      	movs	r3, #1
 8010134:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8010138:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801013a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801013c:	2b00      	cmp	r3, #0
 801013e:	f000 8130 	beq.w	80103a2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010142:	697b      	ldr	r3, [r7, #20]
 8010144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010146:	4a94      	ldr	r2, [pc, #592]	; (8010398 <UART_SetConfig+0x5c4>)
 8010148:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801014c:	461a      	mov	r2, r3
 801014e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010150:	fbb3 f3f2 	udiv	r3, r3, r2
 8010154:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010156:	697b      	ldr	r3, [r7, #20]
 8010158:	685a      	ldr	r2, [r3, #4]
 801015a:	4613      	mov	r3, r2
 801015c:	005b      	lsls	r3, r3, #1
 801015e:	4413      	add	r3, r2
 8010160:	69ba      	ldr	r2, [r7, #24]
 8010162:	429a      	cmp	r2, r3
 8010164:	d305      	bcc.n	8010172 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010166:	697b      	ldr	r3, [r7, #20]
 8010168:	685b      	ldr	r3, [r3, #4]
 801016a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801016c:	69ba      	ldr	r2, [r7, #24]
 801016e:	429a      	cmp	r2, r3
 8010170:	d903      	bls.n	801017a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8010172:	2301      	movs	r3, #1
 8010174:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8010178:	e113      	b.n	80103a2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801017a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801017c:	2200      	movs	r2, #0
 801017e:	60bb      	str	r3, [r7, #8]
 8010180:	60fa      	str	r2, [r7, #12]
 8010182:	697b      	ldr	r3, [r7, #20]
 8010184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010186:	4a84      	ldr	r2, [pc, #528]	; (8010398 <UART_SetConfig+0x5c4>)
 8010188:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801018c:	b29b      	uxth	r3, r3
 801018e:	2200      	movs	r2, #0
 8010190:	603b      	str	r3, [r7, #0]
 8010192:	607a      	str	r2, [r7, #4]
 8010194:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010198:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801019c:	f7f4 fd0e 	bl	8004bbc <__aeabi_uldivmod>
 80101a0:	4602      	mov	r2, r0
 80101a2:	460b      	mov	r3, r1
 80101a4:	4610      	mov	r0, r2
 80101a6:	4619      	mov	r1, r3
 80101a8:	f04f 0200 	mov.w	r2, #0
 80101ac:	f04f 0300 	mov.w	r3, #0
 80101b0:	020b      	lsls	r3, r1, #8
 80101b2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80101b6:	0202      	lsls	r2, r0, #8
 80101b8:	6979      	ldr	r1, [r7, #20]
 80101ba:	6849      	ldr	r1, [r1, #4]
 80101bc:	0849      	lsrs	r1, r1, #1
 80101be:	2000      	movs	r0, #0
 80101c0:	460c      	mov	r4, r1
 80101c2:	4605      	mov	r5, r0
 80101c4:	eb12 0804 	adds.w	r8, r2, r4
 80101c8:	eb43 0905 	adc.w	r9, r3, r5
 80101cc:	697b      	ldr	r3, [r7, #20]
 80101ce:	685b      	ldr	r3, [r3, #4]
 80101d0:	2200      	movs	r2, #0
 80101d2:	469a      	mov	sl, r3
 80101d4:	4693      	mov	fp, r2
 80101d6:	4652      	mov	r2, sl
 80101d8:	465b      	mov	r3, fp
 80101da:	4640      	mov	r0, r8
 80101dc:	4649      	mov	r1, r9
 80101de:	f7f4 fced 	bl	8004bbc <__aeabi_uldivmod>
 80101e2:	4602      	mov	r2, r0
 80101e4:	460b      	mov	r3, r1
 80101e6:	4613      	mov	r3, r2
 80101e8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80101ea:	6a3b      	ldr	r3, [r7, #32]
 80101ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80101f0:	d308      	bcc.n	8010204 <UART_SetConfig+0x430>
 80101f2:	6a3b      	ldr	r3, [r7, #32]
 80101f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80101f8:	d204      	bcs.n	8010204 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80101fa:	697b      	ldr	r3, [r7, #20]
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	6a3a      	ldr	r2, [r7, #32]
 8010200:	60da      	str	r2, [r3, #12]
 8010202:	e0ce      	b.n	80103a2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8010204:	2301      	movs	r3, #1
 8010206:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801020a:	e0ca      	b.n	80103a2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801020c:	697b      	ldr	r3, [r7, #20]
 801020e:	69db      	ldr	r3, [r3, #28]
 8010210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010214:	d166      	bne.n	80102e4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8010216:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801021a:	2b08      	cmp	r3, #8
 801021c:	d827      	bhi.n	801026e <UART_SetConfig+0x49a>
 801021e:	a201      	add	r2, pc, #4	; (adr r2, 8010224 <UART_SetConfig+0x450>)
 8010220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010224:	08010249 	.word	0x08010249
 8010228:	08010251 	.word	0x08010251
 801022c:	08010259 	.word	0x08010259
 8010230:	0801026f 	.word	0x0801026f
 8010234:	0801025f 	.word	0x0801025f
 8010238:	0801026f 	.word	0x0801026f
 801023c:	0801026f 	.word	0x0801026f
 8010240:	0801026f 	.word	0x0801026f
 8010244:	08010267 	.word	0x08010267
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010248:	f7fd fb02 	bl	800d850 <HAL_RCC_GetPCLK1Freq>
 801024c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801024e:	e014      	b.n	801027a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010250:	f7fd fb14 	bl	800d87c <HAL_RCC_GetPCLK2Freq>
 8010254:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010256:	e010      	b.n	801027a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010258:	4b4e      	ldr	r3, [pc, #312]	; (8010394 <UART_SetConfig+0x5c0>)
 801025a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801025c:	e00d      	b.n	801027a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801025e:	f7fd fa89 	bl	800d774 <HAL_RCC_GetSysClockFreq>
 8010262:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010264:	e009      	b.n	801027a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801026a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801026c:	e005      	b.n	801027a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 801026e:	2300      	movs	r3, #0
 8010270:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8010272:	2301      	movs	r3, #1
 8010274:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8010278:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801027a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801027c:	2b00      	cmp	r3, #0
 801027e:	f000 8090 	beq.w	80103a2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010282:	697b      	ldr	r3, [r7, #20]
 8010284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010286:	4a44      	ldr	r2, [pc, #272]	; (8010398 <UART_SetConfig+0x5c4>)
 8010288:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801028c:	461a      	mov	r2, r3
 801028e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010290:	fbb3 f3f2 	udiv	r3, r3, r2
 8010294:	005a      	lsls	r2, r3, #1
 8010296:	697b      	ldr	r3, [r7, #20]
 8010298:	685b      	ldr	r3, [r3, #4]
 801029a:	085b      	lsrs	r3, r3, #1
 801029c:	441a      	add	r2, r3
 801029e:	697b      	ldr	r3, [r7, #20]
 80102a0:	685b      	ldr	r3, [r3, #4]
 80102a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80102a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80102a8:	6a3b      	ldr	r3, [r7, #32]
 80102aa:	2b0f      	cmp	r3, #15
 80102ac:	d916      	bls.n	80102dc <UART_SetConfig+0x508>
 80102ae:	6a3b      	ldr	r3, [r7, #32]
 80102b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80102b4:	d212      	bcs.n	80102dc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80102b6:	6a3b      	ldr	r3, [r7, #32]
 80102b8:	b29b      	uxth	r3, r3
 80102ba:	f023 030f 	bic.w	r3, r3, #15
 80102be:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80102c0:	6a3b      	ldr	r3, [r7, #32]
 80102c2:	085b      	lsrs	r3, r3, #1
 80102c4:	b29b      	uxth	r3, r3
 80102c6:	f003 0307 	and.w	r3, r3, #7
 80102ca:	b29a      	uxth	r2, r3
 80102cc:	8bfb      	ldrh	r3, [r7, #30]
 80102ce:	4313      	orrs	r3, r2
 80102d0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80102d2:	697b      	ldr	r3, [r7, #20]
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	8bfa      	ldrh	r2, [r7, #30]
 80102d8:	60da      	str	r2, [r3, #12]
 80102da:	e062      	b.n	80103a2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80102dc:	2301      	movs	r3, #1
 80102de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80102e2:	e05e      	b.n	80103a2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80102e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80102e8:	2b08      	cmp	r3, #8
 80102ea:	d828      	bhi.n	801033e <UART_SetConfig+0x56a>
 80102ec:	a201      	add	r2, pc, #4	; (adr r2, 80102f4 <UART_SetConfig+0x520>)
 80102ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102f2:	bf00      	nop
 80102f4:	08010319 	.word	0x08010319
 80102f8:	08010321 	.word	0x08010321
 80102fc:	08010329 	.word	0x08010329
 8010300:	0801033f 	.word	0x0801033f
 8010304:	0801032f 	.word	0x0801032f
 8010308:	0801033f 	.word	0x0801033f
 801030c:	0801033f 	.word	0x0801033f
 8010310:	0801033f 	.word	0x0801033f
 8010314:	08010337 	.word	0x08010337
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010318:	f7fd fa9a 	bl	800d850 <HAL_RCC_GetPCLK1Freq>
 801031c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801031e:	e014      	b.n	801034a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010320:	f7fd faac 	bl	800d87c <HAL_RCC_GetPCLK2Freq>
 8010324:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010326:	e010      	b.n	801034a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010328:	4b1a      	ldr	r3, [pc, #104]	; (8010394 <UART_SetConfig+0x5c0>)
 801032a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801032c:	e00d      	b.n	801034a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801032e:	f7fd fa21 	bl	800d774 <HAL_RCC_GetSysClockFreq>
 8010332:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010334:	e009      	b.n	801034a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010336:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801033a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801033c:	e005      	b.n	801034a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 801033e:	2300      	movs	r3, #0
 8010340:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8010342:	2301      	movs	r3, #1
 8010344:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8010348:	bf00      	nop
    }

    if (pclk != 0U)
 801034a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801034c:	2b00      	cmp	r3, #0
 801034e:	d028      	beq.n	80103a2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010350:	697b      	ldr	r3, [r7, #20]
 8010352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010354:	4a10      	ldr	r2, [pc, #64]	; (8010398 <UART_SetConfig+0x5c4>)
 8010356:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801035a:	461a      	mov	r2, r3
 801035c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801035e:	fbb3 f2f2 	udiv	r2, r3, r2
 8010362:	697b      	ldr	r3, [r7, #20]
 8010364:	685b      	ldr	r3, [r3, #4]
 8010366:	085b      	lsrs	r3, r3, #1
 8010368:	441a      	add	r2, r3
 801036a:	697b      	ldr	r3, [r7, #20]
 801036c:	685b      	ldr	r3, [r3, #4]
 801036e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010372:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010374:	6a3b      	ldr	r3, [r7, #32]
 8010376:	2b0f      	cmp	r3, #15
 8010378:	d910      	bls.n	801039c <UART_SetConfig+0x5c8>
 801037a:	6a3b      	ldr	r3, [r7, #32]
 801037c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010380:	d20c      	bcs.n	801039c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010382:	6a3b      	ldr	r3, [r7, #32]
 8010384:	b29a      	uxth	r2, r3
 8010386:	697b      	ldr	r3, [r7, #20]
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	60da      	str	r2, [r3, #12]
 801038c:	e009      	b.n	80103a2 <UART_SetConfig+0x5ce>
 801038e:	bf00      	nop
 8010390:	40008000 	.word	0x40008000
 8010394:	00f42400 	.word	0x00f42400
 8010398:	08019460 	.word	0x08019460
      }
      else
      {
        ret = HAL_ERROR;
 801039c:	2301      	movs	r3, #1
 801039e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80103a2:	697b      	ldr	r3, [r7, #20]
 80103a4:	2201      	movs	r2, #1
 80103a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80103aa:	697b      	ldr	r3, [r7, #20]
 80103ac:	2201      	movs	r2, #1
 80103ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80103b2:	697b      	ldr	r3, [r7, #20]
 80103b4:	2200      	movs	r2, #0
 80103b6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80103b8:	697b      	ldr	r3, [r7, #20]
 80103ba:	2200      	movs	r2, #0
 80103bc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80103be:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80103c2:	4618      	mov	r0, r3
 80103c4:	3730      	adds	r7, #48	; 0x30
 80103c6:	46bd      	mov	sp, r7
 80103c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080103cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80103cc:	b480      	push	{r7}
 80103ce:	b083      	sub	sp, #12
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103d8:	f003 0301 	and.w	r3, r3, #1
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d00a      	beq.n	80103f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	685b      	ldr	r3, [r3, #4]
 80103e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	430a      	orrs	r2, r1
 80103f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103fa:	f003 0302 	and.w	r3, r3, #2
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d00a      	beq.n	8010418 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	685b      	ldr	r3, [r3, #4]
 8010408:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	430a      	orrs	r2, r1
 8010416:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801041c:	f003 0304 	and.w	r3, r3, #4
 8010420:	2b00      	cmp	r3, #0
 8010422:	d00a      	beq.n	801043a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	685b      	ldr	r3, [r3, #4]
 801042a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	430a      	orrs	r2, r1
 8010438:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801043e:	f003 0308 	and.w	r3, r3, #8
 8010442:	2b00      	cmp	r3, #0
 8010444:	d00a      	beq.n	801045c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	685b      	ldr	r3, [r3, #4]
 801044c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	430a      	orrs	r2, r1
 801045a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010460:	f003 0310 	and.w	r3, r3, #16
 8010464:	2b00      	cmp	r3, #0
 8010466:	d00a      	beq.n	801047e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	689b      	ldr	r3, [r3, #8]
 801046e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	430a      	orrs	r2, r1
 801047c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010482:	f003 0320 	and.w	r3, r3, #32
 8010486:	2b00      	cmp	r3, #0
 8010488:	d00a      	beq.n	80104a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	689b      	ldr	r3, [r3, #8]
 8010490:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	430a      	orrs	r2, r1
 801049e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d01a      	beq.n	80104e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	685b      	ldr	r3, [r3, #4]
 80104b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	430a      	orrs	r2, r1
 80104c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80104ca:	d10a      	bne.n	80104e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	685b      	ldr	r3, [r3, #4]
 80104d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	430a      	orrs	r2, r1
 80104e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d00a      	beq.n	8010504 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	685b      	ldr	r3, [r3, #4]
 80104f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	430a      	orrs	r2, r1
 8010502:	605a      	str	r2, [r3, #4]
  }
}
 8010504:	bf00      	nop
 8010506:	370c      	adds	r7, #12
 8010508:	46bd      	mov	sp, r7
 801050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801050e:	4770      	bx	lr

08010510 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010510:	b580      	push	{r7, lr}
 8010512:	b086      	sub	sp, #24
 8010514:	af02      	add	r7, sp, #8
 8010516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	2200      	movs	r2, #0
 801051c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010520:	f7f8 f8e0 	bl	80086e4 <HAL_GetTick>
 8010524:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	f003 0308 	and.w	r3, r3, #8
 8010530:	2b08      	cmp	r3, #8
 8010532:	d10e      	bne.n	8010552 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010534:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010538:	9300      	str	r3, [sp, #0]
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	2200      	movs	r2, #0
 801053e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010542:	6878      	ldr	r0, [r7, #4]
 8010544:	f000 f82f 	bl	80105a6 <UART_WaitOnFlagUntilTimeout>
 8010548:	4603      	mov	r3, r0
 801054a:	2b00      	cmp	r3, #0
 801054c:	d001      	beq.n	8010552 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801054e:	2303      	movs	r3, #3
 8010550:	e025      	b.n	801059e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	f003 0304 	and.w	r3, r3, #4
 801055c:	2b04      	cmp	r3, #4
 801055e:	d10e      	bne.n	801057e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010560:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010564:	9300      	str	r3, [sp, #0]
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	2200      	movs	r2, #0
 801056a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801056e:	6878      	ldr	r0, [r7, #4]
 8010570:	f000 f819 	bl	80105a6 <UART_WaitOnFlagUntilTimeout>
 8010574:	4603      	mov	r3, r0
 8010576:	2b00      	cmp	r3, #0
 8010578:	d001      	beq.n	801057e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801057a:	2303      	movs	r3, #3
 801057c:	e00f      	b.n	801059e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	2220      	movs	r2, #32
 8010582:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	2220      	movs	r2, #32
 801058a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	2200      	movs	r2, #0
 8010592:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	2200      	movs	r2, #0
 8010598:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801059c:	2300      	movs	r3, #0
}
 801059e:	4618      	mov	r0, r3
 80105a0:	3710      	adds	r7, #16
 80105a2:	46bd      	mov	sp, r7
 80105a4:	bd80      	pop	{r7, pc}

080105a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80105a6:	b580      	push	{r7, lr}
 80105a8:	b09c      	sub	sp, #112	; 0x70
 80105aa:	af00      	add	r7, sp, #0
 80105ac:	60f8      	str	r0, [r7, #12]
 80105ae:	60b9      	str	r1, [r7, #8]
 80105b0:	603b      	str	r3, [r7, #0]
 80105b2:	4613      	mov	r3, r2
 80105b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80105b6:	e0a9      	b.n	801070c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80105b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80105ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105be:	f000 80a5 	beq.w	801070c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80105c2:	f7f8 f88f 	bl	80086e4 <HAL_GetTick>
 80105c6:	4602      	mov	r2, r0
 80105c8:	683b      	ldr	r3, [r7, #0]
 80105ca:	1ad3      	subs	r3, r2, r3
 80105cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80105ce:	429a      	cmp	r2, r3
 80105d0:	d302      	bcc.n	80105d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80105d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d140      	bne.n	801065a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105e0:	e853 3f00 	ldrex	r3, [r3]
 80105e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80105e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80105ec:	667b      	str	r3, [r7, #100]	; 0x64
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	461a      	mov	r2, r3
 80105f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80105f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80105f8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80105fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80105fe:	e841 2300 	strex	r3, r2, [r1]
 8010602:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8010604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010606:	2b00      	cmp	r3, #0
 8010608:	d1e6      	bne.n	80105d8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	3308      	adds	r3, #8
 8010610:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010614:	e853 3f00 	ldrex	r3, [r3]
 8010618:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801061a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801061c:	f023 0301 	bic.w	r3, r3, #1
 8010620:	663b      	str	r3, [r7, #96]	; 0x60
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	3308      	adds	r3, #8
 8010628:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801062a:	64ba      	str	r2, [r7, #72]	; 0x48
 801062c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801062e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010630:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010632:	e841 2300 	strex	r3, r2, [r1]
 8010636:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801063a:	2b00      	cmp	r3, #0
 801063c:	d1e5      	bne.n	801060a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	2220      	movs	r2, #32
 8010642:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	2220      	movs	r2, #32
 801064a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	2200      	movs	r2, #0
 8010652:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8010656:	2303      	movs	r3, #3
 8010658:	e069      	b.n	801072e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	f003 0304 	and.w	r3, r3, #4
 8010664:	2b00      	cmp	r3, #0
 8010666:	d051      	beq.n	801070c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	69db      	ldr	r3, [r3, #28]
 801066e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010672:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010676:	d149      	bne.n	801070c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010680:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801068a:	e853 3f00 	ldrex	r3, [r3]
 801068e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010692:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010696:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	461a      	mov	r2, r3
 801069e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80106a0:	637b      	str	r3, [r7, #52]	; 0x34
 80106a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80106a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80106a8:	e841 2300 	strex	r3, r2, [r1]
 80106ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80106ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d1e6      	bne.n	8010682 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	3308      	adds	r3, #8
 80106ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106bc:	697b      	ldr	r3, [r7, #20]
 80106be:	e853 3f00 	ldrex	r3, [r3]
 80106c2:	613b      	str	r3, [r7, #16]
   return(result);
 80106c4:	693b      	ldr	r3, [r7, #16]
 80106c6:	f023 0301 	bic.w	r3, r3, #1
 80106ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	3308      	adds	r3, #8
 80106d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80106d4:	623a      	str	r2, [r7, #32]
 80106d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106d8:	69f9      	ldr	r1, [r7, #28]
 80106da:	6a3a      	ldr	r2, [r7, #32]
 80106dc:	e841 2300 	strex	r3, r2, [r1]
 80106e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80106e2:	69bb      	ldr	r3, [r7, #24]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d1e5      	bne.n	80106b4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	2220      	movs	r2, #32
 80106ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	2220      	movs	r2, #32
 80106f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	2220      	movs	r2, #32
 80106fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	2200      	movs	r2, #0
 8010704:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8010708:	2303      	movs	r3, #3
 801070a:	e010      	b.n	801072e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	69da      	ldr	r2, [r3, #28]
 8010712:	68bb      	ldr	r3, [r7, #8]
 8010714:	4013      	ands	r3, r2
 8010716:	68ba      	ldr	r2, [r7, #8]
 8010718:	429a      	cmp	r2, r3
 801071a:	bf0c      	ite	eq
 801071c:	2301      	moveq	r3, #1
 801071e:	2300      	movne	r3, #0
 8010720:	b2db      	uxtb	r3, r3
 8010722:	461a      	mov	r2, r3
 8010724:	79fb      	ldrb	r3, [r7, #7]
 8010726:	429a      	cmp	r2, r3
 8010728:	f43f af46 	beq.w	80105b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801072c:	2300      	movs	r3, #0
}
 801072e:	4618      	mov	r0, r3
 8010730:	3770      	adds	r7, #112	; 0x70
 8010732:	46bd      	mov	sp, r7
 8010734:	bd80      	pop	{r7, pc}
	...

08010738 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010738:	b480      	push	{r7}
 801073a:	b0a3      	sub	sp, #140	; 0x8c
 801073c:	af00      	add	r7, sp, #0
 801073e:	60f8      	str	r0, [r7, #12]
 8010740:	60b9      	str	r1, [r7, #8]
 8010742:	4613      	mov	r3, r2
 8010744:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	68ba      	ldr	r2, [r7, #8]
 801074a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	88fa      	ldrh	r2, [r7, #6]
 8010750:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	88fa      	ldrh	r2, [r7, #6]
 8010758:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	2200      	movs	r2, #0
 8010760:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	689b      	ldr	r3, [r3, #8]
 8010766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801076a:	d10e      	bne.n	801078a <UART_Start_Receive_IT+0x52>
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	691b      	ldr	r3, [r3, #16]
 8010770:	2b00      	cmp	r3, #0
 8010772:	d105      	bne.n	8010780 <UART_Start_Receive_IT+0x48>
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	f240 12ff 	movw	r2, #511	; 0x1ff
 801077a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801077e:	e02d      	b.n	80107dc <UART_Start_Receive_IT+0xa4>
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	22ff      	movs	r2, #255	; 0xff
 8010784:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010788:	e028      	b.n	80107dc <UART_Start_Receive_IT+0xa4>
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	689b      	ldr	r3, [r3, #8]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d10d      	bne.n	80107ae <UART_Start_Receive_IT+0x76>
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	691b      	ldr	r3, [r3, #16]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d104      	bne.n	80107a4 <UART_Start_Receive_IT+0x6c>
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	22ff      	movs	r2, #255	; 0xff
 801079e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80107a2:	e01b      	b.n	80107dc <UART_Start_Receive_IT+0xa4>
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	227f      	movs	r2, #127	; 0x7f
 80107a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80107ac:	e016      	b.n	80107dc <UART_Start_Receive_IT+0xa4>
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	689b      	ldr	r3, [r3, #8]
 80107b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80107b6:	d10d      	bne.n	80107d4 <UART_Start_Receive_IT+0x9c>
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	691b      	ldr	r3, [r3, #16]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d104      	bne.n	80107ca <UART_Start_Receive_IT+0x92>
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	227f      	movs	r2, #127	; 0x7f
 80107c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80107c8:	e008      	b.n	80107dc <UART_Start_Receive_IT+0xa4>
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	223f      	movs	r2, #63	; 0x3f
 80107ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80107d2:	e003      	b.n	80107dc <UART_Start_Receive_IT+0xa4>
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	2200      	movs	r2, #0
 80107d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	2200      	movs	r2, #0
 80107e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	2222      	movs	r2, #34	; 0x22
 80107e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	3308      	adds	r3, #8
 80107f2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80107f6:	e853 3f00 	ldrex	r3, [r3]
 80107fa:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80107fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80107fe:	f043 0301 	orr.w	r3, r3, #1
 8010802:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	3308      	adds	r3, #8
 801080c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010810:	673a      	str	r2, [r7, #112]	; 0x70
 8010812:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010814:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8010816:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010818:	e841 2300 	strex	r3, r2, [r1]
 801081c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 801081e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010820:	2b00      	cmp	r3, #0
 8010822:	d1e3      	bne.n	80107ec <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010828:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801082c:	d153      	bne.n	80108d6 <UART_Start_Receive_IT+0x19e>
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010834:	88fa      	ldrh	r2, [r7, #6]
 8010836:	429a      	cmp	r2, r3
 8010838:	d34d      	bcc.n	80108d6 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	689b      	ldr	r3, [r3, #8]
 801083e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010842:	d107      	bne.n	8010854 <UART_Start_Receive_IT+0x11c>
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	691b      	ldr	r3, [r3, #16]
 8010848:	2b00      	cmp	r3, #0
 801084a:	d103      	bne.n	8010854 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	4a4b      	ldr	r2, [pc, #300]	; (801097c <UART_Start_Receive_IT+0x244>)
 8010850:	671a      	str	r2, [r3, #112]	; 0x70
 8010852:	e002      	b.n	801085a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	4a4a      	ldr	r2, [pc, #296]	; (8010980 <UART_Start_Receive_IT+0x248>)
 8010858:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	2200      	movs	r2, #0
 801085e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	691b      	ldr	r3, [r3, #16]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d01a      	beq.n	80108a0 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010872:	e853 3f00 	ldrex	r3, [r3]
 8010876:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010878:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801087a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801087e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	461a      	mov	r2, r3
 8010888:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801088c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801088e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010890:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010892:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010894:	e841 2300 	strex	r3, r2, [r1]
 8010898:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801089a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801089c:	2b00      	cmp	r3, #0
 801089e:	d1e4      	bne.n	801086a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	3308      	adds	r3, #8
 80108a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108aa:	e853 3f00 	ldrex	r3, [r3]
 80108ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80108b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80108b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	3308      	adds	r3, #8
 80108be:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80108c0:	64ba      	str	r2, [r7, #72]	; 0x48
 80108c2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108c4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80108c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80108c8:	e841 2300 	strex	r3, r2, [r1]
 80108cc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80108ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d1e5      	bne.n	80108a0 <UART_Start_Receive_IT+0x168>
 80108d4:	e04a      	b.n	801096c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	689b      	ldr	r3, [r3, #8]
 80108da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80108de:	d107      	bne.n	80108f0 <UART_Start_Receive_IT+0x1b8>
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	691b      	ldr	r3, [r3, #16]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d103      	bne.n	80108f0 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	4a26      	ldr	r2, [pc, #152]	; (8010984 <UART_Start_Receive_IT+0x24c>)
 80108ec:	671a      	str	r2, [r3, #112]	; 0x70
 80108ee:	e002      	b.n	80108f6 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	4a25      	ldr	r2, [pc, #148]	; (8010988 <UART_Start_Receive_IT+0x250>)
 80108f4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	2200      	movs	r2, #0
 80108fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	691b      	ldr	r3, [r3, #16]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d019      	beq.n	801093a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801090c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801090e:	e853 3f00 	ldrex	r3, [r3]
 8010912:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010916:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 801091a:	677b      	str	r3, [r7, #116]	; 0x74
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	461a      	mov	r2, r3
 8010922:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010924:	637b      	str	r3, [r7, #52]	; 0x34
 8010926:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010928:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801092a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801092c:	e841 2300 	strex	r3, r2, [r1]
 8010930:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8010932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010934:	2b00      	cmp	r3, #0
 8010936:	d1e6      	bne.n	8010906 <UART_Start_Receive_IT+0x1ce>
 8010938:	e018      	b.n	801096c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010940:	697b      	ldr	r3, [r7, #20]
 8010942:	e853 3f00 	ldrex	r3, [r3]
 8010946:	613b      	str	r3, [r7, #16]
   return(result);
 8010948:	693b      	ldr	r3, [r7, #16]
 801094a:	f043 0320 	orr.w	r3, r3, #32
 801094e:	67bb      	str	r3, [r7, #120]	; 0x78
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	461a      	mov	r2, r3
 8010956:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010958:	623b      	str	r3, [r7, #32]
 801095a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801095c:	69f9      	ldr	r1, [r7, #28]
 801095e:	6a3a      	ldr	r2, [r7, #32]
 8010960:	e841 2300 	strex	r3, r2, [r1]
 8010964:	61bb      	str	r3, [r7, #24]
   return(result);
 8010966:	69bb      	ldr	r3, [r7, #24]
 8010968:	2b00      	cmp	r3, #0
 801096a:	d1e6      	bne.n	801093a <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 801096c:	2300      	movs	r3, #0
}
 801096e:	4618      	mov	r0, r3
 8010970:	378c      	adds	r7, #140	; 0x8c
 8010972:	46bd      	mov	sp, r7
 8010974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010978:	4770      	bx	lr
 801097a:	bf00      	nop
 801097c:	08011095 	.word	0x08011095
 8010980:	08010d9d 	.word	0x08010d9d
 8010984:	08010c3b 	.word	0x08010c3b
 8010988:	08010adb 	.word	0x08010adb

0801098c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801098c:	b480      	push	{r7}
 801098e:	b095      	sub	sp, #84	; 0x54
 8010990:	af00      	add	r7, sp, #0
 8010992:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801099a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801099c:	e853 3f00 	ldrex	r3, [r3]
 80109a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80109a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80109a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	461a      	mov	r2, r3
 80109b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109b2:	643b      	str	r3, [r7, #64]	; 0x40
 80109b4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80109b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80109ba:	e841 2300 	strex	r3, r2, [r1]
 80109be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80109c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d1e6      	bne.n	8010994 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	3308      	adds	r3, #8
 80109cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109ce:	6a3b      	ldr	r3, [r7, #32]
 80109d0:	e853 3f00 	ldrex	r3, [r3]
 80109d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80109d6:	69fb      	ldr	r3, [r7, #28]
 80109d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80109dc:	f023 0301 	bic.w	r3, r3, #1
 80109e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	3308      	adds	r3, #8
 80109e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80109ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80109ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80109f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80109f2:	e841 2300 	strex	r3, r2, [r1]
 80109f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80109f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d1e3      	bne.n	80109c6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a02:	2b01      	cmp	r3, #1
 8010a04:	d118      	bne.n	8010a38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	e853 3f00 	ldrex	r3, [r3]
 8010a12:	60bb      	str	r3, [r7, #8]
   return(result);
 8010a14:	68bb      	ldr	r3, [r7, #8]
 8010a16:	f023 0310 	bic.w	r3, r3, #16
 8010a1a:	647b      	str	r3, [r7, #68]	; 0x44
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	461a      	mov	r2, r3
 8010a22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a24:	61bb      	str	r3, [r7, #24]
 8010a26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a28:	6979      	ldr	r1, [r7, #20]
 8010a2a:	69ba      	ldr	r2, [r7, #24]
 8010a2c:	e841 2300 	strex	r3, r2, [r1]
 8010a30:	613b      	str	r3, [r7, #16]
   return(result);
 8010a32:	693b      	ldr	r3, [r7, #16]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d1e6      	bne.n	8010a06 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	2220      	movs	r2, #32
 8010a3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	2200      	movs	r2, #0
 8010a44:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	2200      	movs	r2, #0
 8010a4a:	671a      	str	r2, [r3, #112]	; 0x70
}
 8010a4c:	bf00      	nop
 8010a4e:	3754      	adds	r7, #84	; 0x54
 8010a50:	46bd      	mov	sp, r7
 8010a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a56:	4770      	bx	lr

08010a58 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010a58:	b580      	push	{r7, lr}
 8010a5a:	b084      	sub	sp, #16
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	2200      	movs	r2, #0
 8010a6a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	2200      	movs	r2, #0
 8010a72:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010a76:	68f8      	ldr	r0, [r7, #12]
 8010a78:	f7ff f996 	bl	800fda8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010a7c:	bf00      	nop
 8010a7e:	3710      	adds	r7, #16
 8010a80:	46bd      	mov	sp, r7
 8010a82:	bd80      	pop	{r7, pc}

08010a84 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b088      	sub	sp, #32
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	e853 3f00 	ldrex	r3, [r3]
 8010a98:	60bb      	str	r3, [r7, #8]
   return(result);
 8010a9a:	68bb      	ldr	r3, [r7, #8]
 8010a9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010aa0:	61fb      	str	r3, [r7, #28]
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	461a      	mov	r2, r3
 8010aa8:	69fb      	ldr	r3, [r7, #28]
 8010aaa:	61bb      	str	r3, [r7, #24]
 8010aac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010aae:	6979      	ldr	r1, [r7, #20]
 8010ab0:	69ba      	ldr	r2, [r7, #24]
 8010ab2:	e841 2300 	strex	r3, r2, [r1]
 8010ab6:	613b      	str	r3, [r7, #16]
   return(result);
 8010ab8:	693b      	ldr	r3, [r7, #16]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d1e6      	bne.n	8010a8c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	2220      	movs	r2, #32
 8010ac2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	2200      	movs	r2, #0
 8010aca:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010acc:	6878      	ldr	r0, [r7, #4]
 8010ace:	f7ff f957 	bl	800fd80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010ad2:	bf00      	nop
 8010ad4:	3720      	adds	r7, #32
 8010ad6:	46bd      	mov	sp, r7
 8010ad8:	bd80      	pop	{r7, pc}

08010ada <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8010ada:	b580      	push	{r7, lr}
 8010adc:	b096      	sub	sp, #88	; 0x58
 8010ade:	af00      	add	r7, sp, #0
 8010ae0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010ae8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010af2:	2b22      	cmp	r3, #34	; 0x22
 8010af4:	f040 8095 	bne.w	8010c22 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010afe:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010b02:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8010b06:	b2d9      	uxtb	r1, r3
 8010b08:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8010b0c:	b2da      	uxtb	r2, r3
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b12:	400a      	ands	r2, r1
 8010b14:	b2d2      	uxtb	r2, r2
 8010b16:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b1c:	1c5a      	adds	r2, r3, #1
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010b28:	b29b      	uxth	r3, r3
 8010b2a:	3b01      	subs	r3, #1
 8010b2c:	b29a      	uxth	r2, r3
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010b3a:	b29b      	uxth	r3, r3
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d178      	bne.n	8010c32 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b48:	e853 3f00 	ldrex	r3, [r3]
 8010b4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010b54:	653b      	str	r3, [r7, #80]	; 0x50
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	461a      	mov	r2, r3
 8010b5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b5e:	647b      	str	r3, [r7, #68]	; 0x44
 8010b60:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010b64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010b66:	e841 2300 	strex	r3, r2, [r1]
 8010b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d1e6      	bne.n	8010b40 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	3308      	adds	r3, #8
 8010b78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b7c:	e853 3f00 	ldrex	r3, [r3]
 8010b80:	623b      	str	r3, [r7, #32]
   return(result);
 8010b82:	6a3b      	ldr	r3, [r7, #32]
 8010b84:	f023 0301 	bic.w	r3, r3, #1
 8010b88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	3308      	adds	r3, #8
 8010b90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010b92:	633a      	str	r2, [r7, #48]	; 0x30
 8010b94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010b98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b9a:	e841 2300 	strex	r3, r2, [r1]
 8010b9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d1e5      	bne.n	8010b72 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	2220      	movs	r2, #32
 8010baa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	2200      	movs	r2, #0
 8010bb2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bb8:	2b01      	cmp	r3, #1
 8010bba:	d12e      	bne.n	8010c1a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	2200      	movs	r2, #0
 8010bc0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bc8:	693b      	ldr	r3, [r7, #16]
 8010bca:	e853 3f00 	ldrex	r3, [r3]
 8010bce:	60fb      	str	r3, [r7, #12]
   return(result);
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	f023 0310 	bic.w	r3, r3, #16
 8010bd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	461a      	mov	r2, r3
 8010bde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010be0:	61fb      	str	r3, [r7, #28]
 8010be2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010be4:	69b9      	ldr	r1, [r7, #24]
 8010be6:	69fa      	ldr	r2, [r7, #28]
 8010be8:	e841 2300 	strex	r3, r2, [r1]
 8010bec:	617b      	str	r3, [r7, #20]
   return(result);
 8010bee:	697b      	ldr	r3, [r7, #20]
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d1e6      	bne.n	8010bc2 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	69db      	ldr	r3, [r3, #28]
 8010bfa:	f003 0310 	and.w	r3, r3, #16
 8010bfe:	2b10      	cmp	r3, #16
 8010c00:	d103      	bne.n	8010c0a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	2210      	movs	r2, #16
 8010c08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010c10:	4619      	mov	r1, r3
 8010c12:	6878      	ldr	r0, [r7, #4]
 8010c14:	f7ff f8d2 	bl	800fdbc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010c18:	e00b      	b.n	8010c32 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8010c1a:	6878      	ldr	r0, [r7, #4]
 8010c1c:	f7ff f8ba 	bl	800fd94 <HAL_UART_RxCpltCallback>
}
 8010c20:	e007      	b.n	8010c32 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	699a      	ldr	r2, [r3, #24]
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	f042 0208 	orr.w	r2, r2, #8
 8010c30:	619a      	str	r2, [r3, #24]
}
 8010c32:	bf00      	nop
 8010c34:	3758      	adds	r7, #88	; 0x58
 8010c36:	46bd      	mov	sp, r7
 8010c38:	bd80      	pop	{r7, pc}

08010c3a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8010c3a:	b580      	push	{r7, lr}
 8010c3c:	b096      	sub	sp, #88	; 0x58
 8010c3e:	af00      	add	r7, sp, #0
 8010c40:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010c48:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010c52:	2b22      	cmp	r3, #34	; 0x22
 8010c54:	f040 8095 	bne.w	8010d82 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c5e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c66:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8010c68:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8010c6c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8010c70:	4013      	ands	r3, r2
 8010c72:	b29a      	uxth	r2, r3
 8010c74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c76:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c7c:	1c9a      	adds	r2, r3, #2
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010c88:	b29b      	uxth	r3, r3
 8010c8a:	3b01      	subs	r3, #1
 8010c8c:	b29a      	uxth	r2, r3
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010c9a:	b29b      	uxth	r3, r3
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d178      	bne.n	8010d92 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ca8:	e853 3f00 	ldrex	r3, [r3]
 8010cac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	461a      	mov	r2, r3
 8010cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cbe:	643b      	str	r3, [r7, #64]	; 0x40
 8010cc0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cc2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010cc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010cc6:	e841 2300 	strex	r3, r2, [r1]
 8010cca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d1e6      	bne.n	8010ca0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	3308      	adds	r3, #8
 8010cd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cda:	6a3b      	ldr	r3, [r7, #32]
 8010cdc:	e853 3f00 	ldrex	r3, [r3]
 8010ce0:	61fb      	str	r3, [r7, #28]
   return(result);
 8010ce2:	69fb      	ldr	r3, [r7, #28]
 8010ce4:	f023 0301 	bic.w	r3, r3, #1
 8010ce8:	64bb      	str	r3, [r7, #72]	; 0x48
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	3308      	adds	r3, #8
 8010cf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010cf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010cf4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010cf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010cfa:	e841 2300 	strex	r3, r2, [r1]
 8010cfe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d1e5      	bne.n	8010cd2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	2220      	movs	r2, #32
 8010d0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	2200      	movs	r2, #0
 8010d12:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d18:	2b01      	cmp	r3, #1
 8010d1a:	d12e      	bne.n	8010d7a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	2200      	movs	r2, #0
 8010d20:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	e853 3f00 	ldrex	r3, [r3]
 8010d2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8010d30:	68bb      	ldr	r3, [r7, #8]
 8010d32:	f023 0310 	bic.w	r3, r3, #16
 8010d36:	647b      	str	r3, [r7, #68]	; 0x44
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	461a      	mov	r2, r3
 8010d3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d40:	61bb      	str	r3, [r7, #24]
 8010d42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d44:	6979      	ldr	r1, [r7, #20]
 8010d46:	69ba      	ldr	r2, [r7, #24]
 8010d48:	e841 2300 	strex	r3, r2, [r1]
 8010d4c:	613b      	str	r3, [r7, #16]
   return(result);
 8010d4e:	693b      	ldr	r3, [r7, #16]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d1e6      	bne.n	8010d22 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	69db      	ldr	r3, [r3, #28]
 8010d5a:	f003 0310 	and.w	r3, r3, #16
 8010d5e:	2b10      	cmp	r3, #16
 8010d60:	d103      	bne.n	8010d6a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	2210      	movs	r2, #16
 8010d68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010d70:	4619      	mov	r1, r3
 8010d72:	6878      	ldr	r0, [r7, #4]
 8010d74:	f7ff f822 	bl	800fdbc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010d78:	e00b      	b.n	8010d92 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8010d7a:	6878      	ldr	r0, [r7, #4]
 8010d7c:	f7ff f80a 	bl	800fd94 <HAL_UART_RxCpltCallback>
}
 8010d80:	e007      	b.n	8010d92 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	699a      	ldr	r2, [r3, #24]
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	f042 0208 	orr.w	r2, r2, #8
 8010d90:	619a      	str	r2, [r3, #24]
}
 8010d92:	bf00      	nop
 8010d94:	3758      	adds	r7, #88	; 0x58
 8010d96:	46bd      	mov	sp, r7
 8010d98:	bd80      	pop	{r7, pc}
	...

08010d9c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010d9c:	b580      	push	{r7, lr}
 8010d9e:	b0a6      	sub	sp, #152	; 0x98
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010daa:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	69db      	ldr	r3, [r3, #28]
 8010db4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	689b      	ldr	r3, [r3, #8]
 8010dc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010dd2:	2b22      	cmp	r3, #34	; 0x22
 8010dd4:	f040 814f 	bne.w	8011076 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010dde:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010de2:	e0f6      	b.n	8010fd2 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dea:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010dee:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8010df2:	b2d9      	uxtb	r1, r3
 8010df4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8010df8:	b2da      	uxtb	r2, r3
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010dfe:	400a      	ands	r2, r1
 8010e00:	b2d2      	uxtb	r2, r2
 8010e02:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e08:	1c5a      	adds	r2, r3, #1
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010e14:	b29b      	uxth	r3, r3
 8010e16:	3b01      	subs	r3, #1
 8010e18:	b29a      	uxth	r2, r3
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	69db      	ldr	r3, [r3, #28]
 8010e26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010e2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010e2e:	f003 0307 	and.w	r3, r3, #7
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d053      	beq.n	8010ede <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010e36:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010e3a:	f003 0301 	and.w	r3, r3, #1
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d011      	beq.n	8010e66 <UART_RxISR_8BIT_FIFOEN+0xca>
 8010e42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d00b      	beq.n	8010e66 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	2201      	movs	r2, #1
 8010e54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010e5c:	f043 0201 	orr.w	r2, r3, #1
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010e66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010e6a:	f003 0302 	and.w	r3, r3, #2
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d011      	beq.n	8010e96 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8010e72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010e76:	f003 0301 	and.w	r3, r3, #1
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d00b      	beq.n	8010e96 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	2202      	movs	r2, #2
 8010e84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010e8c:	f043 0204 	orr.w	r2, r3, #4
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010e96:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010e9a:	f003 0304 	and.w	r3, r3, #4
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d011      	beq.n	8010ec6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8010ea2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010ea6:	f003 0301 	and.w	r3, r3, #1
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d00b      	beq.n	8010ec6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	2204      	movs	r2, #4
 8010eb4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010ebc:	f043 0202 	orr.w	r2, r3, #2
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d006      	beq.n	8010ede <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010ed0:	6878      	ldr	r0, [r7, #4]
 8010ed2:	f7fe ff69 	bl	800fda8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	2200      	movs	r2, #0
 8010eda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010ee4:	b29b      	uxth	r3, r3
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d173      	bne.n	8010fd2 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ef0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010ef2:	e853 3f00 	ldrex	r3, [r3]
 8010ef6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8010ef8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010efa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010efe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	461a      	mov	r2, r3
 8010f08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010f0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8010f0e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f10:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8010f12:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010f14:	e841 2300 	strex	r3, r2, [r1]
 8010f18:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8010f1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d1e4      	bne.n	8010eea <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	3308      	adds	r3, #8
 8010f26:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f2a:	e853 3f00 	ldrex	r3, [r3]
 8010f2e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010f36:	f023 0301 	bic.w	r3, r3, #1
 8010f3a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	3308      	adds	r3, #8
 8010f42:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010f44:	657a      	str	r2, [r7, #84]	; 0x54
 8010f46:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f48:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010f4a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010f4c:	e841 2300 	strex	r3, r2, [r1]
 8010f50:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d1e3      	bne.n	8010f20 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	2220      	movs	r2, #32
 8010f5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	2200      	movs	r2, #0
 8010f64:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f6a:	2b01      	cmp	r3, #1
 8010f6c:	d12e      	bne.n	8010fcc <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	2200      	movs	r2, #0
 8010f72:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f7c:	e853 3f00 	ldrex	r3, [r3]
 8010f80:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f84:	f023 0310 	bic.w	r3, r3, #16
 8010f88:	67bb      	str	r3, [r7, #120]	; 0x78
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	461a      	mov	r2, r3
 8010f90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010f92:	643b      	str	r3, [r7, #64]	; 0x40
 8010f94:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010f98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010f9a:	e841 2300 	strex	r3, r2, [r1]
 8010f9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d1e6      	bne.n	8010f74 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	69db      	ldr	r3, [r3, #28]
 8010fac:	f003 0310 	and.w	r3, r3, #16
 8010fb0:	2b10      	cmp	r3, #16
 8010fb2:	d103      	bne.n	8010fbc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	2210      	movs	r2, #16
 8010fba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010fc2:	4619      	mov	r1, r3
 8010fc4:	6878      	ldr	r0, [r7, #4]
 8010fc6:	f7fe fef9 	bl	800fdbc <HAL_UARTEx_RxEventCallback>
 8010fca:	e002      	b.n	8010fd2 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010fcc:	6878      	ldr	r0, [r7, #4]
 8010fce:	f7fe fee1 	bl	800fd94 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010fd2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d006      	beq.n	8010fe8 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8010fda:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010fde:	f003 0320 	and.w	r3, r3, #32
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	f47f aefe 	bne.w	8010de4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010fee:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010ff2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d045      	beq.n	8011086 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011000:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011004:	429a      	cmp	r2, r3
 8011006:	d23e      	bcs.n	8011086 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	3308      	adds	r3, #8
 801100e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011010:	6a3b      	ldr	r3, [r7, #32]
 8011012:	e853 3f00 	ldrex	r3, [r3]
 8011016:	61fb      	str	r3, [r7, #28]
   return(result);
 8011018:	69fb      	ldr	r3, [r7, #28]
 801101a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801101e:	673b      	str	r3, [r7, #112]	; 0x70
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	3308      	adds	r3, #8
 8011026:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011028:	62fa      	str	r2, [r7, #44]	; 0x2c
 801102a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801102c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801102e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011030:	e841 2300 	strex	r3, r2, [r1]
 8011034:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011038:	2b00      	cmp	r3, #0
 801103a:	d1e5      	bne.n	8011008 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	4a14      	ldr	r2, [pc, #80]	; (8011090 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8011040:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	e853 3f00 	ldrex	r3, [r3]
 801104e:	60bb      	str	r3, [r7, #8]
   return(result);
 8011050:	68bb      	ldr	r3, [r7, #8]
 8011052:	f043 0320 	orr.w	r3, r3, #32
 8011056:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	461a      	mov	r2, r3
 801105e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011060:	61bb      	str	r3, [r7, #24]
 8011062:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011064:	6979      	ldr	r1, [r7, #20]
 8011066:	69ba      	ldr	r2, [r7, #24]
 8011068:	e841 2300 	strex	r3, r2, [r1]
 801106c:	613b      	str	r3, [r7, #16]
   return(result);
 801106e:	693b      	ldr	r3, [r7, #16]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d1e6      	bne.n	8011042 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011074:	e007      	b.n	8011086 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	699a      	ldr	r2, [r3, #24]
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	f042 0208 	orr.w	r2, r2, #8
 8011084:	619a      	str	r2, [r3, #24]
}
 8011086:	bf00      	nop
 8011088:	3798      	adds	r7, #152	; 0x98
 801108a:	46bd      	mov	sp, r7
 801108c:	bd80      	pop	{r7, pc}
 801108e:	bf00      	nop
 8011090:	08010adb 	.word	0x08010adb

08011094 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011094:	b580      	push	{r7, lr}
 8011096:	b0a8      	sub	sp, #160	; 0xa0
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80110a2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	69db      	ldr	r3, [r3, #28]
 80110ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	689b      	ldr	r3, [r3, #8]
 80110c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80110ca:	2b22      	cmp	r3, #34	; 0x22
 80110cc:	f040 8153 	bne.w	8011376 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80110d6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80110da:	e0fa      	b.n	80112d2 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110e2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80110ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80110ee:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80110f2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80110f6:	4013      	ands	r3, r2
 80110f8:	b29a      	uxth	r2, r3
 80110fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80110fe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011104:	1c9a      	adds	r2, r3, #2
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011110:	b29b      	uxth	r3, r3
 8011112:	3b01      	subs	r3, #1
 8011114:	b29a      	uxth	r2, r3
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	69db      	ldr	r3, [r3, #28]
 8011122:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8011126:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801112a:	f003 0307 	and.w	r3, r3, #7
 801112e:	2b00      	cmp	r3, #0
 8011130:	d053      	beq.n	80111da <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011132:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011136:	f003 0301 	and.w	r3, r3, #1
 801113a:	2b00      	cmp	r3, #0
 801113c:	d011      	beq.n	8011162 <UART_RxISR_16BIT_FIFOEN+0xce>
 801113e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011146:	2b00      	cmp	r3, #0
 8011148:	d00b      	beq.n	8011162 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	2201      	movs	r2, #1
 8011150:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011158:	f043 0201 	orr.w	r2, r3, #1
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011162:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011166:	f003 0302 	and.w	r3, r3, #2
 801116a:	2b00      	cmp	r3, #0
 801116c:	d011      	beq.n	8011192 <UART_RxISR_16BIT_FIFOEN+0xfe>
 801116e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011172:	f003 0301 	and.w	r3, r3, #1
 8011176:	2b00      	cmp	r3, #0
 8011178:	d00b      	beq.n	8011192 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	2202      	movs	r2, #2
 8011180:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011188:	f043 0204 	orr.w	r2, r3, #4
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011192:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011196:	f003 0304 	and.w	r3, r3, #4
 801119a:	2b00      	cmp	r3, #0
 801119c:	d011      	beq.n	80111c2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 801119e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80111a2:	f003 0301 	and.w	r3, r3, #1
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d00b      	beq.n	80111c2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	2204      	movs	r2, #4
 80111b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80111b8:	f043 0202 	orr.w	r2, r3, #2
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d006      	beq.n	80111da <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80111cc:	6878      	ldr	r0, [r7, #4]
 80111ce:	f7fe fdeb 	bl	800fda8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	2200      	movs	r2, #0
 80111d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80111e0:	b29b      	uxth	r3, r3
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d175      	bne.n	80112d2 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80111ee:	e853 3f00 	ldrex	r3, [r3]
 80111f2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80111f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80111f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80111fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	461a      	mov	r2, r3
 8011204:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011208:	66fb      	str	r3, [r7, #108]	; 0x6c
 801120a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801120c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801120e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011210:	e841 2300 	strex	r3, r2, [r1]
 8011214:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8011216:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011218:	2b00      	cmp	r3, #0
 801121a:	d1e4      	bne.n	80111e6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	3308      	adds	r3, #8
 8011222:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011226:	e853 3f00 	ldrex	r3, [r3]
 801122a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801122c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801122e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011232:	f023 0301 	bic.w	r3, r3, #1
 8011236:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	3308      	adds	r3, #8
 8011240:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011244:	65ba      	str	r2, [r7, #88]	; 0x58
 8011246:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011248:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801124a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801124c:	e841 2300 	strex	r3, r2, [r1]
 8011250:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011254:	2b00      	cmp	r3, #0
 8011256:	d1e1      	bne.n	801121c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	2220      	movs	r2, #32
 801125c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	2200      	movs	r2, #0
 8011264:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801126a:	2b01      	cmp	r3, #1
 801126c:	d12e      	bne.n	80112cc <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	2200      	movs	r2, #0
 8011272:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801127a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801127c:	e853 3f00 	ldrex	r3, [r3]
 8011280:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011284:	f023 0310 	bic.w	r3, r3, #16
 8011288:	67fb      	str	r3, [r7, #124]	; 0x7c
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	461a      	mov	r2, r3
 8011290:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011292:	647b      	str	r3, [r7, #68]	; 0x44
 8011294:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011296:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011298:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801129a:	e841 2300 	strex	r3, r2, [r1]
 801129e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80112a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d1e6      	bne.n	8011274 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	69db      	ldr	r3, [r3, #28]
 80112ac:	f003 0310 	and.w	r3, r3, #16
 80112b0:	2b10      	cmp	r3, #16
 80112b2:	d103      	bne.n	80112bc <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	2210      	movs	r2, #16
 80112ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80112c2:	4619      	mov	r1, r3
 80112c4:	6878      	ldr	r0, [r7, #4]
 80112c6:	f7fe fd79 	bl	800fdbc <HAL_UARTEx_RxEventCallback>
 80112ca:	e002      	b.n	80112d2 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80112cc:	6878      	ldr	r0, [r7, #4]
 80112ce:	f7fe fd61 	bl	800fd94 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80112d2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d006      	beq.n	80112e8 <UART_RxISR_16BIT_FIFOEN+0x254>
 80112da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80112de:	f003 0320 	and.w	r3, r3, #32
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	f47f aefa 	bne.w	80110dc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80112ee:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80112f2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d045      	beq.n	8011386 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011300:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8011304:	429a      	cmp	r2, r3
 8011306:	d23e      	bcs.n	8011386 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	3308      	adds	r3, #8
 801130e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011312:	e853 3f00 	ldrex	r3, [r3]
 8011316:	623b      	str	r3, [r7, #32]
   return(result);
 8011318:	6a3b      	ldr	r3, [r7, #32]
 801131a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801131e:	677b      	str	r3, [r7, #116]	; 0x74
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	3308      	adds	r3, #8
 8011326:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8011328:	633a      	str	r2, [r7, #48]	; 0x30
 801132a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801132c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801132e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011330:	e841 2300 	strex	r3, r2, [r1]
 8011334:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011338:	2b00      	cmp	r3, #0
 801133a:	d1e5      	bne.n	8011308 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	4a14      	ldr	r2, [pc, #80]	; (8011390 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8011340:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011348:	693b      	ldr	r3, [r7, #16]
 801134a:	e853 3f00 	ldrex	r3, [r3]
 801134e:	60fb      	str	r3, [r7, #12]
   return(result);
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	f043 0320 	orr.w	r3, r3, #32
 8011356:	673b      	str	r3, [r7, #112]	; 0x70
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	461a      	mov	r2, r3
 801135e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011360:	61fb      	str	r3, [r7, #28]
 8011362:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011364:	69b9      	ldr	r1, [r7, #24]
 8011366:	69fa      	ldr	r2, [r7, #28]
 8011368:	e841 2300 	strex	r3, r2, [r1]
 801136c:	617b      	str	r3, [r7, #20]
   return(result);
 801136e:	697b      	ldr	r3, [r7, #20]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d1e6      	bne.n	8011342 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011374:	e007      	b.n	8011386 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	699a      	ldr	r2, [r3, #24]
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	f042 0208 	orr.w	r2, r2, #8
 8011384:	619a      	str	r2, [r3, #24]
}
 8011386:	bf00      	nop
 8011388:	37a0      	adds	r7, #160	; 0xa0
 801138a:	46bd      	mov	sp, r7
 801138c:	bd80      	pop	{r7, pc}
 801138e:	bf00      	nop
 8011390:	08010c3b 	.word	0x08010c3b

08011394 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8011394:	b480      	push	{r7}
 8011396:	b083      	sub	sp, #12
 8011398:	af00      	add	r7, sp, #0
 801139a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801139c:	bf00      	nop
 801139e:	370c      	adds	r7, #12
 80113a0:	46bd      	mov	sp, r7
 80113a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a6:	4770      	bx	lr

080113a8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80113a8:	b480      	push	{r7}
 80113aa:	b083      	sub	sp, #12
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80113b0:	bf00      	nop
 80113b2:	370c      	adds	r7, #12
 80113b4:	46bd      	mov	sp, r7
 80113b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ba:	4770      	bx	lr

080113bc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80113bc:	b480      	push	{r7}
 80113be:	b083      	sub	sp, #12
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80113c4:	bf00      	nop
 80113c6:	370c      	adds	r7, #12
 80113c8:	46bd      	mov	sp, r7
 80113ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ce:	4770      	bx	lr

080113d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80113d0:	b480      	push	{r7}
 80113d2:	b085      	sub	sp, #20
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80113de:	2b01      	cmp	r3, #1
 80113e0:	d101      	bne.n	80113e6 <HAL_UARTEx_DisableFifoMode+0x16>
 80113e2:	2302      	movs	r3, #2
 80113e4:	e027      	b.n	8011436 <HAL_UARTEx_DisableFifoMode+0x66>
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	2201      	movs	r2, #1
 80113ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	2224      	movs	r2, #36	; 0x24
 80113f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	681a      	ldr	r2, [r3, #0]
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	f022 0201 	bic.w	r2, r2, #1
 801140c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011414:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	2200      	movs	r2, #0
 801141a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	68fa      	ldr	r2, [r7, #12]
 8011422:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	2220      	movs	r2, #32
 8011428:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	2200      	movs	r2, #0
 8011430:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011434:	2300      	movs	r3, #0
}
 8011436:	4618      	mov	r0, r3
 8011438:	3714      	adds	r7, #20
 801143a:	46bd      	mov	sp, r7
 801143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011440:	4770      	bx	lr

08011442 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011442:	b580      	push	{r7, lr}
 8011444:	b084      	sub	sp, #16
 8011446:	af00      	add	r7, sp, #0
 8011448:	6078      	str	r0, [r7, #4]
 801144a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011452:	2b01      	cmp	r3, #1
 8011454:	d101      	bne.n	801145a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011456:	2302      	movs	r3, #2
 8011458:	e02d      	b.n	80114b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	2201      	movs	r2, #1
 801145e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	2224      	movs	r2, #36	; 0x24
 8011466:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	681a      	ldr	r2, [r3, #0]
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	f022 0201 	bic.w	r2, r2, #1
 8011480:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	689b      	ldr	r3, [r3, #8]
 8011488:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	683a      	ldr	r2, [r7, #0]
 8011492:	430a      	orrs	r2, r1
 8011494:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011496:	6878      	ldr	r0, [r7, #4]
 8011498:	f000 f850 	bl	801153c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	68fa      	ldr	r2, [r7, #12]
 80114a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	2220      	movs	r2, #32
 80114a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	2200      	movs	r2, #0
 80114b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80114b4:	2300      	movs	r3, #0
}
 80114b6:	4618      	mov	r0, r3
 80114b8:	3710      	adds	r7, #16
 80114ba:	46bd      	mov	sp, r7
 80114bc:	bd80      	pop	{r7, pc}

080114be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80114be:	b580      	push	{r7, lr}
 80114c0:	b084      	sub	sp, #16
 80114c2:	af00      	add	r7, sp, #0
 80114c4:	6078      	str	r0, [r7, #4]
 80114c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80114ce:	2b01      	cmp	r3, #1
 80114d0:	d101      	bne.n	80114d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80114d2:	2302      	movs	r3, #2
 80114d4:	e02d      	b.n	8011532 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	2201      	movs	r2, #1
 80114da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	2224      	movs	r2, #36	; 0x24
 80114e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	681a      	ldr	r2, [r3, #0]
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	f022 0201 	bic.w	r2, r2, #1
 80114fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	689b      	ldr	r3, [r3, #8]
 8011504:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	683a      	ldr	r2, [r7, #0]
 801150e:	430a      	orrs	r2, r1
 8011510:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011512:	6878      	ldr	r0, [r7, #4]
 8011514:	f000 f812 	bl	801153c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	68fa      	ldr	r2, [r7, #12]
 801151e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	2220      	movs	r2, #32
 8011524:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	2200      	movs	r2, #0
 801152c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011530:	2300      	movs	r3, #0
}
 8011532:	4618      	mov	r0, r3
 8011534:	3710      	adds	r7, #16
 8011536:	46bd      	mov	sp, r7
 8011538:	bd80      	pop	{r7, pc}
	...

0801153c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801153c:	b480      	push	{r7}
 801153e:	b085      	sub	sp, #20
 8011540:	af00      	add	r7, sp, #0
 8011542:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011548:	2b00      	cmp	r3, #0
 801154a:	d108      	bne.n	801155e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	2201      	movs	r2, #1
 8011550:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	2201      	movs	r2, #1
 8011558:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801155c:	e031      	b.n	80115c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801155e:	2308      	movs	r3, #8
 8011560:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011562:	2308      	movs	r3, #8
 8011564:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	689b      	ldr	r3, [r3, #8]
 801156c:	0e5b      	lsrs	r3, r3, #25
 801156e:	b2db      	uxtb	r3, r3
 8011570:	f003 0307 	and.w	r3, r3, #7
 8011574:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	689b      	ldr	r3, [r3, #8]
 801157c:	0f5b      	lsrs	r3, r3, #29
 801157e:	b2db      	uxtb	r3, r3
 8011580:	f003 0307 	and.w	r3, r3, #7
 8011584:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011586:	7bbb      	ldrb	r3, [r7, #14]
 8011588:	7b3a      	ldrb	r2, [r7, #12]
 801158a:	4911      	ldr	r1, [pc, #68]	; (80115d0 <UARTEx_SetNbDataToProcess+0x94>)
 801158c:	5c8a      	ldrb	r2, [r1, r2]
 801158e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011592:	7b3a      	ldrb	r2, [r7, #12]
 8011594:	490f      	ldr	r1, [pc, #60]	; (80115d4 <UARTEx_SetNbDataToProcess+0x98>)
 8011596:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011598:	fb93 f3f2 	sdiv	r3, r3, r2
 801159c:	b29a      	uxth	r2, r3
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80115a4:	7bfb      	ldrb	r3, [r7, #15]
 80115a6:	7b7a      	ldrb	r2, [r7, #13]
 80115a8:	4909      	ldr	r1, [pc, #36]	; (80115d0 <UARTEx_SetNbDataToProcess+0x94>)
 80115aa:	5c8a      	ldrb	r2, [r1, r2]
 80115ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80115b0:	7b7a      	ldrb	r2, [r7, #13]
 80115b2:	4908      	ldr	r1, [pc, #32]	; (80115d4 <UARTEx_SetNbDataToProcess+0x98>)
 80115b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80115b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80115ba:	b29a      	uxth	r2, r3
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80115c2:	bf00      	nop
 80115c4:	3714      	adds	r7, #20
 80115c6:	46bd      	mov	sp, r7
 80115c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115cc:	4770      	bx	lr
 80115ce:	bf00      	nop
 80115d0:	08019478 	.word	0x08019478
 80115d4:	08019480 	.word	0x08019480

080115d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80115d8:	b480      	push	{r7}
 80115da:	b085      	sub	sp, #20
 80115dc:	af00      	add	r7, sp, #0
 80115de:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	2200      	movs	r2, #0
 80115e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80115e8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80115ec:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	b29a      	uxth	r2, r3
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80115f8:	2300      	movs	r3, #0
}
 80115fa:	4618      	mov	r0, r3
 80115fc:	3714      	adds	r7, #20
 80115fe:	46bd      	mov	sp, r7
 8011600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011604:	4770      	bx	lr

08011606 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8011606:	b480      	push	{r7}
 8011608:	b085      	sub	sp, #20
 801160a:	af00      	add	r7, sp, #0
 801160c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801160e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8011612:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 801161a:	b29a      	uxth	r2, r3
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	b29b      	uxth	r3, r3
 8011620:	43db      	mvns	r3, r3
 8011622:	b29b      	uxth	r3, r3
 8011624:	4013      	ands	r3, r2
 8011626:	b29a      	uxth	r2, r3
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 801162e:	2300      	movs	r3, #0
}
 8011630:	4618      	mov	r0, r3
 8011632:	3714      	adds	r7, #20
 8011634:	46bd      	mov	sp, r7
 8011636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801163a:	4770      	bx	lr

0801163c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801163c:	b084      	sub	sp, #16
 801163e:	b480      	push	{r7}
 8011640:	b083      	sub	sp, #12
 8011642:	af00      	add	r7, sp, #0
 8011644:	6078      	str	r0, [r7, #4]
 8011646:	f107 0014 	add.w	r0, r7, #20
 801164a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	2201      	movs	r2, #1
 8011652:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	2200      	movs	r2, #0
 801165a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	2200      	movs	r2, #0
 8011662:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	2200      	movs	r2, #0
 801166a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 801166e:	2300      	movs	r3, #0
}
 8011670:	4618      	mov	r0, r3
 8011672:	370c      	adds	r7, #12
 8011674:	46bd      	mov	sp, r7
 8011676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167a:	b004      	add	sp, #16
 801167c:	4770      	bx	lr
	...

08011680 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011680:	b480      	push	{r7}
 8011682:	b09d      	sub	sp, #116	; 0x74
 8011684:	af00      	add	r7, sp, #0
 8011686:	6078      	str	r0, [r7, #4]
 8011688:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 801168a:	2300      	movs	r3, #0
 801168c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8011690:	687a      	ldr	r2, [r7, #4]
 8011692:	683b      	ldr	r3, [r7, #0]
 8011694:	781b      	ldrb	r3, [r3, #0]
 8011696:	009b      	lsls	r3, r3, #2
 8011698:	4413      	add	r3, r2
 801169a:	881b      	ldrh	r3, [r3, #0]
 801169c:	b29b      	uxth	r3, r3
 801169e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80116a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80116a6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80116aa:	683b      	ldr	r3, [r7, #0]
 80116ac:	78db      	ldrb	r3, [r3, #3]
 80116ae:	2b03      	cmp	r3, #3
 80116b0:	d81f      	bhi.n	80116f2 <USB_ActivateEndpoint+0x72>
 80116b2:	a201      	add	r2, pc, #4	; (adr r2, 80116b8 <USB_ActivateEndpoint+0x38>)
 80116b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116b8:	080116c9 	.word	0x080116c9
 80116bc:	080116e5 	.word	0x080116e5
 80116c0:	080116fb 	.word	0x080116fb
 80116c4:	080116d7 	.word	0x080116d7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80116c8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80116cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80116d0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80116d4:	e012      	b.n	80116fc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80116d6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80116da:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80116de:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80116e2:	e00b      	b.n	80116fc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80116e4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80116e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80116ec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80116f0:	e004      	b.n	80116fc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80116f2:	2301      	movs	r3, #1
 80116f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80116f8:	e000      	b.n	80116fc <USB_ActivateEndpoint+0x7c>
      break;
 80116fa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80116fc:	687a      	ldr	r2, [r7, #4]
 80116fe:	683b      	ldr	r3, [r7, #0]
 8011700:	781b      	ldrb	r3, [r3, #0]
 8011702:	009b      	lsls	r3, r3, #2
 8011704:	441a      	add	r2, r3
 8011706:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 801170a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801170e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011712:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801171a:	b29b      	uxth	r3, r3
 801171c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801171e:	687a      	ldr	r2, [r7, #4]
 8011720:	683b      	ldr	r3, [r7, #0]
 8011722:	781b      	ldrb	r3, [r3, #0]
 8011724:	009b      	lsls	r3, r3, #2
 8011726:	4413      	add	r3, r2
 8011728:	881b      	ldrh	r3, [r3, #0]
 801172a:	b29b      	uxth	r3, r3
 801172c:	b21b      	sxth	r3, r3
 801172e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011736:	b21a      	sxth	r2, r3
 8011738:	683b      	ldr	r3, [r7, #0]
 801173a:	781b      	ldrb	r3, [r3, #0]
 801173c:	b21b      	sxth	r3, r3
 801173e:	4313      	orrs	r3, r2
 8011740:	b21b      	sxth	r3, r3
 8011742:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8011746:	687a      	ldr	r2, [r7, #4]
 8011748:	683b      	ldr	r3, [r7, #0]
 801174a:	781b      	ldrb	r3, [r3, #0]
 801174c:	009b      	lsls	r3, r3, #2
 801174e:	441a      	add	r2, r3
 8011750:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8011754:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011758:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801175c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011764:	b29b      	uxth	r3, r3
 8011766:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8011768:	683b      	ldr	r3, [r7, #0]
 801176a:	7b1b      	ldrb	r3, [r3, #12]
 801176c:	2b00      	cmp	r3, #0
 801176e:	f040 8149 	bne.w	8011a04 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8011772:	683b      	ldr	r3, [r7, #0]
 8011774:	785b      	ldrb	r3, [r3, #1]
 8011776:	2b00      	cmp	r3, #0
 8011778:	f000 8084 	beq.w	8011884 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	61bb      	str	r3, [r7, #24]
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011786:	b29b      	uxth	r3, r3
 8011788:	461a      	mov	r2, r3
 801178a:	69bb      	ldr	r3, [r7, #24]
 801178c:	4413      	add	r3, r2
 801178e:	61bb      	str	r3, [r7, #24]
 8011790:	683b      	ldr	r3, [r7, #0]
 8011792:	781b      	ldrb	r3, [r3, #0]
 8011794:	00da      	lsls	r2, r3, #3
 8011796:	69bb      	ldr	r3, [r7, #24]
 8011798:	4413      	add	r3, r2
 801179a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801179e:	617b      	str	r3, [r7, #20]
 80117a0:	683b      	ldr	r3, [r7, #0]
 80117a2:	88db      	ldrh	r3, [r3, #6]
 80117a4:	085b      	lsrs	r3, r3, #1
 80117a6:	b29b      	uxth	r3, r3
 80117a8:	005b      	lsls	r3, r3, #1
 80117aa:	b29a      	uxth	r2, r3
 80117ac:	697b      	ldr	r3, [r7, #20]
 80117ae:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80117b0:	687a      	ldr	r2, [r7, #4]
 80117b2:	683b      	ldr	r3, [r7, #0]
 80117b4:	781b      	ldrb	r3, [r3, #0]
 80117b6:	009b      	lsls	r3, r3, #2
 80117b8:	4413      	add	r3, r2
 80117ba:	881b      	ldrh	r3, [r3, #0]
 80117bc:	827b      	strh	r3, [r7, #18]
 80117be:	8a7b      	ldrh	r3, [r7, #18]
 80117c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d01b      	beq.n	8011800 <USB_ActivateEndpoint+0x180>
 80117c8:	687a      	ldr	r2, [r7, #4]
 80117ca:	683b      	ldr	r3, [r7, #0]
 80117cc:	781b      	ldrb	r3, [r3, #0]
 80117ce:	009b      	lsls	r3, r3, #2
 80117d0:	4413      	add	r3, r2
 80117d2:	881b      	ldrh	r3, [r3, #0]
 80117d4:	b29b      	uxth	r3, r3
 80117d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80117da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80117de:	823b      	strh	r3, [r7, #16]
 80117e0:	687a      	ldr	r2, [r7, #4]
 80117e2:	683b      	ldr	r3, [r7, #0]
 80117e4:	781b      	ldrb	r3, [r3, #0]
 80117e6:	009b      	lsls	r3, r3, #2
 80117e8:	441a      	add	r2, r3
 80117ea:	8a3b      	ldrh	r3, [r7, #16]
 80117ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80117f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80117f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80117f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80117fc:	b29b      	uxth	r3, r3
 80117fe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011800:	683b      	ldr	r3, [r7, #0]
 8011802:	78db      	ldrb	r3, [r3, #3]
 8011804:	2b01      	cmp	r3, #1
 8011806:	d020      	beq.n	801184a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011808:	687a      	ldr	r2, [r7, #4]
 801180a:	683b      	ldr	r3, [r7, #0]
 801180c:	781b      	ldrb	r3, [r3, #0]
 801180e:	009b      	lsls	r3, r3, #2
 8011810:	4413      	add	r3, r2
 8011812:	881b      	ldrh	r3, [r3, #0]
 8011814:	b29b      	uxth	r3, r3
 8011816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801181a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801181e:	81bb      	strh	r3, [r7, #12]
 8011820:	89bb      	ldrh	r3, [r7, #12]
 8011822:	f083 0320 	eor.w	r3, r3, #32
 8011826:	81bb      	strh	r3, [r7, #12]
 8011828:	687a      	ldr	r2, [r7, #4]
 801182a:	683b      	ldr	r3, [r7, #0]
 801182c:	781b      	ldrb	r3, [r3, #0]
 801182e:	009b      	lsls	r3, r3, #2
 8011830:	441a      	add	r2, r3
 8011832:	89bb      	ldrh	r3, [r7, #12]
 8011834:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011838:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801183c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011844:	b29b      	uxth	r3, r3
 8011846:	8013      	strh	r3, [r2, #0]
 8011848:	e2a6      	b.n	8011d98 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801184a:	687a      	ldr	r2, [r7, #4]
 801184c:	683b      	ldr	r3, [r7, #0]
 801184e:	781b      	ldrb	r3, [r3, #0]
 8011850:	009b      	lsls	r3, r3, #2
 8011852:	4413      	add	r3, r2
 8011854:	881b      	ldrh	r3, [r3, #0]
 8011856:	b29b      	uxth	r3, r3
 8011858:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801185c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011860:	81fb      	strh	r3, [r7, #14]
 8011862:	687a      	ldr	r2, [r7, #4]
 8011864:	683b      	ldr	r3, [r7, #0]
 8011866:	781b      	ldrb	r3, [r3, #0]
 8011868:	009b      	lsls	r3, r3, #2
 801186a:	441a      	add	r2, r3
 801186c:	89fb      	ldrh	r3, [r7, #14]
 801186e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011872:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011876:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801187a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801187e:	b29b      	uxth	r3, r3
 8011880:	8013      	strh	r3, [r2, #0]
 8011882:	e289      	b.n	8011d98 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	633b      	str	r3, [r7, #48]	; 0x30
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801188e:	b29b      	uxth	r3, r3
 8011890:	461a      	mov	r2, r3
 8011892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011894:	4413      	add	r3, r2
 8011896:	633b      	str	r3, [r7, #48]	; 0x30
 8011898:	683b      	ldr	r3, [r7, #0]
 801189a:	781b      	ldrb	r3, [r3, #0]
 801189c:	00da      	lsls	r2, r3, #3
 801189e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118a0:	4413      	add	r3, r2
 80118a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80118a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80118a8:	683b      	ldr	r3, [r7, #0]
 80118aa:	88db      	ldrh	r3, [r3, #6]
 80118ac:	085b      	lsrs	r3, r3, #1
 80118ae:	b29b      	uxth	r3, r3
 80118b0:	005b      	lsls	r3, r3, #1
 80118b2:	b29a      	uxth	r2, r3
 80118b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118b6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80118c2:	b29b      	uxth	r3, r3
 80118c4:	461a      	mov	r2, r3
 80118c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118c8:	4413      	add	r3, r2
 80118ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80118cc:	683b      	ldr	r3, [r7, #0]
 80118ce:	781b      	ldrb	r3, [r3, #0]
 80118d0:	00da      	lsls	r2, r3, #3
 80118d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118d4:	4413      	add	r3, r2
 80118d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80118da:	627b      	str	r3, [r7, #36]	; 0x24
 80118dc:	683b      	ldr	r3, [r7, #0]
 80118de:	691b      	ldr	r3, [r3, #16]
 80118e0:	2b3e      	cmp	r3, #62	; 0x3e
 80118e2:	d918      	bls.n	8011916 <USB_ActivateEndpoint+0x296>
 80118e4:	683b      	ldr	r3, [r7, #0]
 80118e6:	691b      	ldr	r3, [r3, #16]
 80118e8:	095b      	lsrs	r3, r3, #5
 80118ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80118ec:	683b      	ldr	r3, [r7, #0]
 80118ee:	691b      	ldr	r3, [r3, #16]
 80118f0:	f003 031f 	and.w	r3, r3, #31
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d102      	bne.n	80118fe <USB_ActivateEndpoint+0x27e>
 80118f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80118fa:	3b01      	subs	r3, #1
 80118fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80118fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011900:	b29b      	uxth	r3, r3
 8011902:	029b      	lsls	r3, r3, #10
 8011904:	b29b      	uxth	r3, r3
 8011906:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801190a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801190e:	b29a      	uxth	r2, r3
 8011910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011912:	801a      	strh	r2, [r3, #0]
 8011914:	e029      	b.n	801196a <USB_ActivateEndpoint+0x2ea>
 8011916:	683b      	ldr	r3, [r7, #0]
 8011918:	691b      	ldr	r3, [r3, #16]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d112      	bne.n	8011944 <USB_ActivateEndpoint+0x2c4>
 801191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011920:	881b      	ldrh	r3, [r3, #0]
 8011922:	b29b      	uxth	r3, r3
 8011924:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8011928:	b29a      	uxth	r2, r3
 801192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801192c:	801a      	strh	r2, [r3, #0]
 801192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011930:	881b      	ldrh	r3, [r3, #0]
 8011932:	b29b      	uxth	r3, r3
 8011934:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011938:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801193c:	b29a      	uxth	r2, r3
 801193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011940:	801a      	strh	r2, [r3, #0]
 8011942:	e012      	b.n	801196a <USB_ActivateEndpoint+0x2ea>
 8011944:	683b      	ldr	r3, [r7, #0]
 8011946:	691b      	ldr	r3, [r3, #16]
 8011948:	085b      	lsrs	r3, r3, #1
 801194a:	66bb      	str	r3, [r7, #104]	; 0x68
 801194c:	683b      	ldr	r3, [r7, #0]
 801194e:	691b      	ldr	r3, [r3, #16]
 8011950:	f003 0301 	and.w	r3, r3, #1
 8011954:	2b00      	cmp	r3, #0
 8011956:	d002      	beq.n	801195e <USB_ActivateEndpoint+0x2de>
 8011958:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801195a:	3301      	adds	r3, #1
 801195c:	66bb      	str	r3, [r7, #104]	; 0x68
 801195e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011960:	b29b      	uxth	r3, r3
 8011962:	029b      	lsls	r3, r3, #10
 8011964:	b29a      	uxth	r2, r3
 8011966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011968:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801196a:	687a      	ldr	r2, [r7, #4]
 801196c:	683b      	ldr	r3, [r7, #0]
 801196e:	781b      	ldrb	r3, [r3, #0]
 8011970:	009b      	lsls	r3, r3, #2
 8011972:	4413      	add	r3, r2
 8011974:	881b      	ldrh	r3, [r3, #0]
 8011976:	847b      	strh	r3, [r7, #34]	; 0x22
 8011978:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801197a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801197e:	2b00      	cmp	r3, #0
 8011980:	d01b      	beq.n	80119ba <USB_ActivateEndpoint+0x33a>
 8011982:	687a      	ldr	r2, [r7, #4]
 8011984:	683b      	ldr	r3, [r7, #0]
 8011986:	781b      	ldrb	r3, [r3, #0]
 8011988:	009b      	lsls	r3, r3, #2
 801198a:	4413      	add	r3, r2
 801198c:	881b      	ldrh	r3, [r3, #0]
 801198e:	b29b      	uxth	r3, r3
 8011990:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011998:	843b      	strh	r3, [r7, #32]
 801199a:	687a      	ldr	r2, [r7, #4]
 801199c:	683b      	ldr	r3, [r7, #0]
 801199e:	781b      	ldrb	r3, [r3, #0]
 80119a0:	009b      	lsls	r3, r3, #2
 80119a2:	441a      	add	r2, r3
 80119a4:	8c3b      	ldrh	r3, [r7, #32]
 80119a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80119aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80119ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80119b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80119b6:	b29b      	uxth	r3, r3
 80119b8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80119ba:	687a      	ldr	r2, [r7, #4]
 80119bc:	683b      	ldr	r3, [r7, #0]
 80119be:	781b      	ldrb	r3, [r3, #0]
 80119c0:	009b      	lsls	r3, r3, #2
 80119c2:	4413      	add	r3, r2
 80119c4:	881b      	ldrh	r3, [r3, #0]
 80119c6:	b29b      	uxth	r3, r3
 80119c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80119cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80119d0:	83fb      	strh	r3, [r7, #30]
 80119d2:	8bfb      	ldrh	r3, [r7, #30]
 80119d4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80119d8:	83fb      	strh	r3, [r7, #30]
 80119da:	8bfb      	ldrh	r3, [r7, #30]
 80119dc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80119e0:	83fb      	strh	r3, [r7, #30]
 80119e2:	687a      	ldr	r2, [r7, #4]
 80119e4:	683b      	ldr	r3, [r7, #0]
 80119e6:	781b      	ldrb	r3, [r3, #0]
 80119e8:	009b      	lsls	r3, r3, #2
 80119ea:	441a      	add	r2, r3
 80119ec:	8bfb      	ldrh	r3, [r7, #30]
 80119ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80119f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80119f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80119fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80119fe:	b29b      	uxth	r3, r3
 8011a00:	8013      	strh	r3, [r2, #0]
 8011a02:	e1c9      	b.n	8011d98 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8011a04:	683b      	ldr	r3, [r7, #0]
 8011a06:	78db      	ldrb	r3, [r3, #3]
 8011a08:	2b02      	cmp	r3, #2
 8011a0a:	d11e      	bne.n	8011a4a <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8011a0c:	687a      	ldr	r2, [r7, #4]
 8011a0e:	683b      	ldr	r3, [r7, #0]
 8011a10:	781b      	ldrb	r3, [r3, #0]
 8011a12:	009b      	lsls	r3, r3, #2
 8011a14:	4413      	add	r3, r2
 8011a16:	881b      	ldrh	r3, [r3, #0]
 8011a18:	b29b      	uxth	r3, r3
 8011a1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011a22:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8011a26:	687a      	ldr	r2, [r7, #4]
 8011a28:	683b      	ldr	r3, [r7, #0]
 8011a2a:	781b      	ldrb	r3, [r3, #0]
 8011a2c:	009b      	lsls	r3, r3, #2
 8011a2e:	441a      	add	r2, r3
 8011a30:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8011a34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011a38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011a3c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8011a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a44:	b29b      	uxth	r3, r3
 8011a46:	8013      	strh	r3, [r2, #0]
 8011a48:	e01d      	b.n	8011a86 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8011a4a:	687a      	ldr	r2, [r7, #4]
 8011a4c:	683b      	ldr	r3, [r7, #0]
 8011a4e:	781b      	ldrb	r3, [r3, #0]
 8011a50:	009b      	lsls	r3, r3, #2
 8011a52:	4413      	add	r3, r2
 8011a54:	881b      	ldrh	r3, [r3, #0]
 8011a56:	b29b      	uxth	r3, r3
 8011a58:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8011a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011a60:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8011a64:	687a      	ldr	r2, [r7, #4]
 8011a66:	683b      	ldr	r3, [r7, #0]
 8011a68:	781b      	ldrb	r3, [r3, #0]
 8011a6a:	009b      	lsls	r3, r3, #2
 8011a6c:	441a      	add	r2, r3
 8011a6e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8011a72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011a76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a82:	b29b      	uxth	r3, r3
 8011a84:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011a90:	b29b      	uxth	r3, r3
 8011a92:	461a      	mov	r2, r3
 8011a94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011a96:	4413      	add	r3, r2
 8011a98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011a9a:	683b      	ldr	r3, [r7, #0]
 8011a9c:	781b      	ldrb	r3, [r3, #0]
 8011a9e:	00da      	lsls	r2, r3, #3
 8011aa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011aa2:	4413      	add	r3, r2
 8011aa4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011aa8:	65bb      	str	r3, [r7, #88]	; 0x58
 8011aaa:	683b      	ldr	r3, [r7, #0]
 8011aac:	891b      	ldrh	r3, [r3, #8]
 8011aae:	085b      	lsrs	r3, r3, #1
 8011ab0:	b29b      	uxth	r3, r3
 8011ab2:	005b      	lsls	r3, r3, #1
 8011ab4:	b29a      	uxth	r2, r3
 8011ab6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011ab8:	801a      	strh	r2, [r3, #0]
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	657b      	str	r3, [r7, #84]	; 0x54
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011ac4:	b29b      	uxth	r3, r3
 8011ac6:	461a      	mov	r2, r3
 8011ac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011aca:	4413      	add	r3, r2
 8011acc:	657b      	str	r3, [r7, #84]	; 0x54
 8011ace:	683b      	ldr	r3, [r7, #0]
 8011ad0:	781b      	ldrb	r3, [r3, #0]
 8011ad2:	00da      	lsls	r2, r3, #3
 8011ad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ad6:	4413      	add	r3, r2
 8011ad8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8011adc:	653b      	str	r3, [r7, #80]	; 0x50
 8011ade:	683b      	ldr	r3, [r7, #0]
 8011ae0:	895b      	ldrh	r3, [r3, #10]
 8011ae2:	085b      	lsrs	r3, r3, #1
 8011ae4:	b29b      	uxth	r3, r3
 8011ae6:	005b      	lsls	r3, r3, #1
 8011ae8:	b29a      	uxth	r2, r3
 8011aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011aec:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8011aee:	683b      	ldr	r3, [r7, #0]
 8011af0:	785b      	ldrb	r3, [r3, #1]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	f040 8093 	bne.w	8011c1e <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011af8:	687a      	ldr	r2, [r7, #4]
 8011afa:	683b      	ldr	r3, [r7, #0]
 8011afc:	781b      	ldrb	r3, [r3, #0]
 8011afe:	009b      	lsls	r3, r3, #2
 8011b00:	4413      	add	r3, r2
 8011b02:	881b      	ldrh	r3, [r3, #0]
 8011b04:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8011b08:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011b0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d01b      	beq.n	8011b4c <USB_ActivateEndpoint+0x4cc>
 8011b14:	687a      	ldr	r2, [r7, #4]
 8011b16:	683b      	ldr	r3, [r7, #0]
 8011b18:	781b      	ldrb	r3, [r3, #0]
 8011b1a:	009b      	lsls	r3, r3, #2
 8011b1c:	4413      	add	r3, r2
 8011b1e:	881b      	ldrh	r3, [r3, #0]
 8011b20:	b29b      	uxth	r3, r3
 8011b22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011b2a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8011b2c:	687a      	ldr	r2, [r7, #4]
 8011b2e:	683b      	ldr	r3, [r7, #0]
 8011b30:	781b      	ldrb	r3, [r3, #0]
 8011b32:	009b      	lsls	r3, r3, #2
 8011b34:	441a      	add	r2, r3
 8011b36:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011b38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011b3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011b40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b48:	b29b      	uxth	r3, r3
 8011b4a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011b4c:	687a      	ldr	r2, [r7, #4]
 8011b4e:	683b      	ldr	r3, [r7, #0]
 8011b50:	781b      	ldrb	r3, [r3, #0]
 8011b52:	009b      	lsls	r3, r3, #2
 8011b54:	4413      	add	r3, r2
 8011b56:	881b      	ldrh	r3, [r3, #0]
 8011b58:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8011b5a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d01b      	beq.n	8011b9c <USB_ActivateEndpoint+0x51c>
 8011b64:	687a      	ldr	r2, [r7, #4]
 8011b66:	683b      	ldr	r3, [r7, #0]
 8011b68:	781b      	ldrb	r3, [r3, #0]
 8011b6a:	009b      	lsls	r3, r3, #2
 8011b6c:	4413      	add	r3, r2
 8011b6e:	881b      	ldrh	r3, [r3, #0]
 8011b70:	b29b      	uxth	r3, r3
 8011b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011b7a:	877b      	strh	r3, [r7, #58]	; 0x3a
 8011b7c:	687a      	ldr	r2, [r7, #4]
 8011b7e:	683b      	ldr	r3, [r7, #0]
 8011b80:	781b      	ldrb	r3, [r3, #0]
 8011b82:	009b      	lsls	r3, r3, #2
 8011b84:	441a      	add	r2, r3
 8011b86:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011b88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011b8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011b90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011b94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011b98:	b29b      	uxth	r3, r3
 8011b9a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011b9c:	687a      	ldr	r2, [r7, #4]
 8011b9e:	683b      	ldr	r3, [r7, #0]
 8011ba0:	781b      	ldrb	r3, [r3, #0]
 8011ba2:	009b      	lsls	r3, r3, #2
 8011ba4:	4413      	add	r3, r2
 8011ba6:	881b      	ldrh	r3, [r3, #0]
 8011ba8:	b29b      	uxth	r3, r3
 8011baa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011bb2:	873b      	strh	r3, [r7, #56]	; 0x38
 8011bb4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8011bb6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8011bba:	873b      	strh	r3, [r7, #56]	; 0x38
 8011bbc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8011bbe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8011bc2:	873b      	strh	r3, [r7, #56]	; 0x38
 8011bc4:	687a      	ldr	r2, [r7, #4]
 8011bc6:	683b      	ldr	r3, [r7, #0]
 8011bc8:	781b      	ldrb	r3, [r3, #0]
 8011bca:	009b      	lsls	r3, r3, #2
 8011bcc:	441a      	add	r2, r3
 8011bce:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8011bd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011bd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011bd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011be0:	b29b      	uxth	r3, r3
 8011be2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011be4:	687a      	ldr	r2, [r7, #4]
 8011be6:	683b      	ldr	r3, [r7, #0]
 8011be8:	781b      	ldrb	r3, [r3, #0]
 8011bea:	009b      	lsls	r3, r3, #2
 8011bec:	4413      	add	r3, r2
 8011bee:	881b      	ldrh	r3, [r3, #0]
 8011bf0:	b29b      	uxth	r3, r3
 8011bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011bf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011bfa:	86fb      	strh	r3, [r7, #54]	; 0x36
 8011bfc:	687a      	ldr	r2, [r7, #4]
 8011bfe:	683b      	ldr	r3, [r7, #0]
 8011c00:	781b      	ldrb	r3, [r3, #0]
 8011c02:	009b      	lsls	r3, r3, #2
 8011c04:	441a      	add	r2, r3
 8011c06:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011c08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011c0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011c10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c18:	b29b      	uxth	r3, r3
 8011c1a:	8013      	strh	r3, [r2, #0]
 8011c1c:	e0bc      	b.n	8011d98 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011c1e:	687a      	ldr	r2, [r7, #4]
 8011c20:	683b      	ldr	r3, [r7, #0]
 8011c22:	781b      	ldrb	r3, [r3, #0]
 8011c24:	009b      	lsls	r3, r3, #2
 8011c26:	4413      	add	r3, r2
 8011c28:	881b      	ldrh	r3, [r3, #0]
 8011c2a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8011c2e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d01d      	beq.n	8011c76 <USB_ActivateEndpoint+0x5f6>
 8011c3a:	687a      	ldr	r2, [r7, #4]
 8011c3c:	683b      	ldr	r3, [r7, #0]
 8011c3e:	781b      	ldrb	r3, [r3, #0]
 8011c40:	009b      	lsls	r3, r3, #2
 8011c42:	4413      	add	r3, r2
 8011c44:	881b      	ldrh	r3, [r3, #0]
 8011c46:	b29b      	uxth	r3, r3
 8011c48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011c50:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8011c54:	687a      	ldr	r2, [r7, #4]
 8011c56:	683b      	ldr	r3, [r7, #0]
 8011c58:	781b      	ldrb	r3, [r3, #0]
 8011c5a:	009b      	lsls	r3, r3, #2
 8011c5c:	441a      	add	r2, r3
 8011c5e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8011c62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011c66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011c6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011c6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c72:	b29b      	uxth	r3, r3
 8011c74:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011c76:	687a      	ldr	r2, [r7, #4]
 8011c78:	683b      	ldr	r3, [r7, #0]
 8011c7a:	781b      	ldrb	r3, [r3, #0]
 8011c7c:	009b      	lsls	r3, r3, #2
 8011c7e:	4413      	add	r3, r2
 8011c80:	881b      	ldrh	r3, [r3, #0]
 8011c82:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8011c86:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8011c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d01d      	beq.n	8011cce <USB_ActivateEndpoint+0x64e>
 8011c92:	687a      	ldr	r2, [r7, #4]
 8011c94:	683b      	ldr	r3, [r7, #0]
 8011c96:	781b      	ldrb	r3, [r3, #0]
 8011c98:	009b      	lsls	r3, r3, #2
 8011c9a:	4413      	add	r3, r2
 8011c9c:	881b      	ldrh	r3, [r3, #0]
 8011c9e:	b29b      	uxth	r3, r3
 8011ca0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011ca8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8011cac:	687a      	ldr	r2, [r7, #4]
 8011cae:	683b      	ldr	r3, [r7, #0]
 8011cb0:	781b      	ldrb	r3, [r3, #0]
 8011cb2:	009b      	lsls	r3, r3, #2
 8011cb4:	441a      	add	r2, r3
 8011cb6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8011cba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011cbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011cc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011cc6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011cca:	b29b      	uxth	r3, r3
 8011ccc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011cce:	683b      	ldr	r3, [r7, #0]
 8011cd0:	78db      	ldrb	r3, [r3, #3]
 8011cd2:	2b01      	cmp	r3, #1
 8011cd4:	d024      	beq.n	8011d20 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011cd6:	687a      	ldr	r2, [r7, #4]
 8011cd8:	683b      	ldr	r3, [r7, #0]
 8011cda:	781b      	ldrb	r3, [r3, #0]
 8011cdc:	009b      	lsls	r3, r3, #2
 8011cde:	4413      	add	r3, r2
 8011ce0:	881b      	ldrh	r3, [r3, #0]
 8011ce2:	b29b      	uxth	r3, r3
 8011ce4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011ce8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011cec:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8011cf0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011cf4:	f083 0320 	eor.w	r3, r3, #32
 8011cf8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8011cfc:	687a      	ldr	r2, [r7, #4]
 8011cfe:	683b      	ldr	r3, [r7, #0]
 8011d00:	781b      	ldrb	r3, [r3, #0]
 8011d02:	009b      	lsls	r3, r3, #2
 8011d04:	441a      	add	r2, r3
 8011d06:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011d0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011d0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011d12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011d16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d1a:	b29b      	uxth	r3, r3
 8011d1c:	8013      	strh	r3, [r2, #0]
 8011d1e:	e01d      	b.n	8011d5c <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011d20:	687a      	ldr	r2, [r7, #4]
 8011d22:	683b      	ldr	r3, [r7, #0]
 8011d24:	781b      	ldrb	r3, [r3, #0]
 8011d26:	009b      	lsls	r3, r3, #2
 8011d28:	4413      	add	r3, r2
 8011d2a:	881b      	ldrh	r3, [r3, #0]
 8011d2c:	b29b      	uxth	r3, r3
 8011d2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011d32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011d36:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8011d3a:	687a      	ldr	r2, [r7, #4]
 8011d3c:	683b      	ldr	r3, [r7, #0]
 8011d3e:	781b      	ldrb	r3, [r3, #0]
 8011d40:	009b      	lsls	r3, r3, #2
 8011d42:	441a      	add	r2, r3
 8011d44:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011d48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011d4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011d50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d58:	b29b      	uxth	r3, r3
 8011d5a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011d5c:	687a      	ldr	r2, [r7, #4]
 8011d5e:	683b      	ldr	r3, [r7, #0]
 8011d60:	781b      	ldrb	r3, [r3, #0]
 8011d62:	009b      	lsls	r3, r3, #2
 8011d64:	4413      	add	r3, r2
 8011d66:	881b      	ldrh	r3, [r3, #0]
 8011d68:	b29b      	uxth	r3, r3
 8011d6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011d72:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011d76:	687a      	ldr	r2, [r7, #4]
 8011d78:	683b      	ldr	r3, [r7, #0]
 8011d7a:	781b      	ldrb	r3, [r3, #0]
 8011d7c:	009b      	lsls	r3, r3, #2
 8011d7e:	441a      	add	r2, r3
 8011d80:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011d84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011d88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011d8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d94:	b29b      	uxth	r3, r3
 8011d96:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8011d98:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	3774      	adds	r7, #116	; 0x74
 8011da0:	46bd      	mov	sp, r7
 8011da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011da6:	4770      	bx	lr

08011da8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011da8:	b480      	push	{r7}
 8011daa:	b08d      	sub	sp, #52	; 0x34
 8011dac:	af00      	add	r7, sp, #0
 8011dae:	6078      	str	r0, [r7, #4]
 8011db0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8011db2:	683b      	ldr	r3, [r7, #0]
 8011db4:	7b1b      	ldrb	r3, [r3, #12]
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	f040 808e 	bne.w	8011ed8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8011dbc:	683b      	ldr	r3, [r7, #0]
 8011dbe:	785b      	ldrb	r3, [r3, #1]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d044      	beq.n	8011e4e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011dc4:	687a      	ldr	r2, [r7, #4]
 8011dc6:	683b      	ldr	r3, [r7, #0]
 8011dc8:	781b      	ldrb	r3, [r3, #0]
 8011dca:	009b      	lsls	r3, r3, #2
 8011dcc:	4413      	add	r3, r2
 8011dce:	881b      	ldrh	r3, [r3, #0]
 8011dd0:	81bb      	strh	r3, [r7, #12]
 8011dd2:	89bb      	ldrh	r3, [r7, #12]
 8011dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d01b      	beq.n	8011e14 <USB_DeactivateEndpoint+0x6c>
 8011ddc:	687a      	ldr	r2, [r7, #4]
 8011dde:	683b      	ldr	r3, [r7, #0]
 8011de0:	781b      	ldrb	r3, [r3, #0]
 8011de2:	009b      	lsls	r3, r3, #2
 8011de4:	4413      	add	r3, r2
 8011de6:	881b      	ldrh	r3, [r3, #0]
 8011de8:	b29b      	uxth	r3, r3
 8011dea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011df2:	817b      	strh	r3, [r7, #10]
 8011df4:	687a      	ldr	r2, [r7, #4]
 8011df6:	683b      	ldr	r3, [r7, #0]
 8011df8:	781b      	ldrb	r3, [r3, #0]
 8011dfa:	009b      	lsls	r3, r3, #2
 8011dfc:	441a      	add	r2, r3
 8011dfe:	897b      	ldrh	r3, [r7, #10]
 8011e00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011e04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011e08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011e0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011e10:	b29b      	uxth	r3, r3
 8011e12:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011e14:	687a      	ldr	r2, [r7, #4]
 8011e16:	683b      	ldr	r3, [r7, #0]
 8011e18:	781b      	ldrb	r3, [r3, #0]
 8011e1a:	009b      	lsls	r3, r3, #2
 8011e1c:	4413      	add	r3, r2
 8011e1e:	881b      	ldrh	r3, [r3, #0]
 8011e20:	b29b      	uxth	r3, r3
 8011e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011e26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011e2a:	813b      	strh	r3, [r7, #8]
 8011e2c:	687a      	ldr	r2, [r7, #4]
 8011e2e:	683b      	ldr	r3, [r7, #0]
 8011e30:	781b      	ldrb	r3, [r3, #0]
 8011e32:	009b      	lsls	r3, r3, #2
 8011e34:	441a      	add	r2, r3
 8011e36:	893b      	ldrh	r3, [r7, #8]
 8011e38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011e3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011e40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e48:	b29b      	uxth	r3, r3
 8011e4a:	8013      	strh	r3, [r2, #0]
 8011e4c:	e192      	b.n	8012174 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011e4e:	687a      	ldr	r2, [r7, #4]
 8011e50:	683b      	ldr	r3, [r7, #0]
 8011e52:	781b      	ldrb	r3, [r3, #0]
 8011e54:	009b      	lsls	r3, r3, #2
 8011e56:	4413      	add	r3, r2
 8011e58:	881b      	ldrh	r3, [r3, #0]
 8011e5a:	827b      	strh	r3, [r7, #18]
 8011e5c:	8a7b      	ldrh	r3, [r7, #18]
 8011e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d01b      	beq.n	8011e9e <USB_DeactivateEndpoint+0xf6>
 8011e66:	687a      	ldr	r2, [r7, #4]
 8011e68:	683b      	ldr	r3, [r7, #0]
 8011e6a:	781b      	ldrb	r3, [r3, #0]
 8011e6c:	009b      	lsls	r3, r3, #2
 8011e6e:	4413      	add	r3, r2
 8011e70:	881b      	ldrh	r3, [r3, #0]
 8011e72:	b29b      	uxth	r3, r3
 8011e74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011e7c:	823b      	strh	r3, [r7, #16]
 8011e7e:	687a      	ldr	r2, [r7, #4]
 8011e80:	683b      	ldr	r3, [r7, #0]
 8011e82:	781b      	ldrb	r3, [r3, #0]
 8011e84:	009b      	lsls	r3, r3, #2
 8011e86:	441a      	add	r2, r3
 8011e88:	8a3b      	ldrh	r3, [r7, #16]
 8011e8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011e8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011e92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e9a:	b29b      	uxth	r3, r3
 8011e9c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011e9e:	687a      	ldr	r2, [r7, #4]
 8011ea0:	683b      	ldr	r3, [r7, #0]
 8011ea2:	781b      	ldrb	r3, [r3, #0]
 8011ea4:	009b      	lsls	r3, r3, #2
 8011ea6:	4413      	add	r3, r2
 8011ea8:	881b      	ldrh	r3, [r3, #0]
 8011eaa:	b29b      	uxth	r3, r3
 8011eac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011eb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011eb4:	81fb      	strh	r3, [r7, #14]
 8011eb6:	687a      	ldr	r2, [r7, #4]
 8011eb8:	683b      	ldr	r3, [r7, #0]
 8011eba:	781b      	ldrb	r3, [r3, #0]
 8011ebc:	009b      	lsls	r3, r3, #2
 8011ebe:	441a      	add	r2, r3
 8011ec0:	89fb      	ldrh	r3, [r7, #14]
 8011ec2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011ec6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011eca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ed2:	b29b      	uxth	r3, r3
 8011ed4:	8013      	strh	r3, [r2, #0]
 8011ed6:	e14d      	b.n	8012174 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8011ed8:	683b      	ldr	r3, [r7, #0]
 8011eda:	785b      	ldrb	r3, [r3, #1]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	f040 80a5 	bne.w	801202c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011ee2:	687a      	ldr	r2, [r7, #4]
 8011ee4:	683b      	ldr	r3, [r7, #0]
 8011ee6:	781b      	ldrb	r3, [r3, #0]
 8011ee8:	009b      	lsls	r3, r3, #2
 8011eea:	4413      	add	r3, r2
 8011eec:	881b      	ldrh	r3, [r3, #0]
 8011eee:	843b      	strh	r3, [r7, #32]
 8011ef0:	8c3b      	ldrh	r3, [r7, #32]
 8011ef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d01b      	beq.n	8011f32 <USB_DeactivateEndpoint+0x18a>
 8011efa:	687a      	ldr	r2, [r7, #4]
 8011efc:	683b      	ldr	r3, [r7, #0]
 8011efe:	781b      	ldrb	r3, [r3, #0]
 8011f00:	009b      	lsls	r3, r3, #2
 8011f02:	4413      	add	r3, r2
 8011f04:	881b      	ldrh	r3, [r3, #0]
 8011f06:	b29b      	uxth	r3, r3
 8011f08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011f0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011f10:	83fb      	strh	r3, [r7, #30]
 8011f12:	687a      	ldr	r2, [r7, #4]
 8011f14:	683b      	ldr	r3, [r7, #0]
 8011f16:	781b      	ldrb	r3, [r3, #0]
 8011f18:	009b      	lsls	r3, r3, #2
 8011f1a:	441a      	add	r2, r3
 8011f1c:	8bfb      	ldrh	r3, [r7, #30]
 8011f1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011f22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011f26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011f2e:	b29b      	uxth	r3, r3
 8011f30:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011f32:	687a      	ldr	r2, [r7, #4]
 8011f34:	683b      	ldr	r3, [r7, #0]
 8011f36:	781b      	ldrb	r3, [r3, #0]
 8011f38:	009b      	lsls	r3, r3, #2
 8011f3a:	4413      	add	r3, r2
 8011f3c:	881b      	ldrh	r3, [r3, #0]
 8011f3e:	83bb      	strh	r3, [r7, #28]
 8011f40:	8bbb      	ldrh	r3, [r7, #28]
 8011f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d01b      	beq.n	8011f82 <USB_DeactivateEndpoint+0x1da>
 8011f4a:	687a      	ldr	r2, [r7, #4]
 8011f4c:	683b      	ldr	r3, [r7, #0]
 8011f4e:	781b      	ldrb	r3, [r3, #0]
 8011f50:	009b      	lsls	r3, r3, #2
 8011f52:	4413      	add	r3, r2
 8011f54:	881b      	ldrh	r3, [r3, #0]
 8011f56:	b29b      	uxth	r3, r3
 8011f58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011f60:	837b      	strh	r3, [r7, #26]
 8011f62:	687a      	ldr	r2, [r7, #4]
 8011f64:	683b      	ldr	r3, [r7, #0]
 8011f66:	781b      	ldrb	r3, [r3, #0]
 8011f68:	009b      	lsls	r3, r3, #2
 8011f6a:	441a      	add	r2, r3
 8011f6c:	8b7b      	ldrh	r3, [r7, #26]
 8011f6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011f72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011f7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011f7e:	b29b      	uxth	r3, r3
 8011f80:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8011f82:	687a      	ldr	r2, [r7, #4]
 8011f84:	683b      	ldr	r3, [r7, #0]
 8011f86:	781b      	ldrb	r3, [r3, #0]
 8011f88:	009b      	lsls	r3, r3, #2
 8011f8a:	4413      	add	r3, r2
 8011f8c:	881b      	ldrh	r3, [r3, #0]
 8011f8e:	b29b      	uxth	r3, r3
 8011f90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011f98:	833b      	strh	r3, [r7, #24]
 8011f9a:	687a      	ldr	r2, [r7, #4]
 8011f9c:	683b      	ldr	r3, [r7, #0]
 8011f9e:	781b      	ldrb	r3, [r3, #0]
 8011fa0:	009b      	lsls	r3, r3, #2
 8011fa2:	441a      	add	r2, r3
 8011fa4:	8b3b      	ldrh	r3, [r7, #24]
 8011fa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011faa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011fae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011fb2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011fb6:	b29b      	uxth	r3, r3
 8011fb8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011fba:	687a      	ldr	r2, [r7, #4]
 8011fbc:	683b      	ldr	r3, [r7, #0]
 8011fbe:	781b      	ldrb	r3, [r3, #0]
 8011fc0:	009b      	lsls	r3, r3, #2
 8011fc2:	4413      	add	r3, r2
 8011fc4:	881b      	ldrh	r3, [r3, #0]
 8011fc6:	b29b      	uxth	r3, r3
 8011fc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011fcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011fd0:	82fb      	strh	r3, [r7, #22]
 8011fd2:	687a      	ldr	r2, [r7, #4]
 8011fd4:	683b      	ldr	r3, [r7, #0]
 8011fd6:	781b      	ldrb	r3, [r3, #0]
 8011fd8:	009b      	lsls	r3, r3, #2
 8011fda:	441a      	add	r2, r3
 8011fdc:	8afb      	ldrh	r3, [r7, #22]
 8011fde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011fe2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011fea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011fee:	b29b      	uxth	r3, r3
 8011ff0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011ff2:	687a      	ldr	r2, [r7, #4]
 8011ff4:	683b      	ldr	r3, [r7, #0]
 8011ff6:	781b      	ldrb	r3, [r3, #0]
 8011ff8:	009b      	lsls	r3, r3, #2
 8011ffa:	4413      	add	r3, r2
 8011ffc:	881b      	ldrh	r3, [r3, #0]
 8011ffe:	b29b      	uxth	r3, r3
 8012000:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012004:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012008:	82bb      	strh	r3, [r7, #20]
 801200a:	687a      	ldr	r2, [r7, #4]
 801200c:	683b      	ldr	r3, [r7, #0]
 801200e:	781b      	ldrb	r3, [r3, #0]
 8012010:	009b      	lsls	r3, r3, #2
 8012012:	441a      	add	r2, r3
 8012014:	8abb      	ldrh	r3, [r7, #20]
 8012016:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801201a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801201e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012026:	b29b      	uxth	r3, r3
 8012028:	8013      	strh	r3, [r2, #0]
 801202a:	e0a3      	b.n	8012174 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801202c:	687a      	ldr	r2, [r7, #4]
 801202e:	683b      	ldr	r3, [r7, #0]
 8012030:	781b      	ldrb	r3, [r3, #0]
 8012032:	009b      	lsls	r3, r3, #2
 8012034:	4413      	add	r3, r2
 8012036:	881b      	ldrh	r3, [r3, #0]
 8012038:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801203a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801203c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012040:	2b00      	cmp	r3, #0
 8012042:	d01b      	beq.n	801207c <USB_DeactivateEndpoint+0x2d4>
 8012044:	687a      	ldr	r2, [r7, #4]
 8012046:	683b      	ldr	r3, [r7, #0]
 8012048:	781b      	ldrb	r3, [r3, #0]
 801204a:	009b      	lsls	r3, r3, #2
 801204c:	4413      	add	r3, r2
 801204e:	881b      	ldrh	r3, [r3, #0]
 8012050:	b29b      	uxth	r3, r3
 8012052:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801205a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 801205c:	687a      	ldr	r2, [r7, #4]
 801205e:	683b      	ldr	r3, [r7, #0]
 8012060:	781b      	ldrb	r3, [r3, #0]
 8012062:	009b      	lsls	r3, r3, #2
 8012064:	441a      	add	r2, r3
 8012066:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012068:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801206c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012070:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8012074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012078:	b29b      	uxth	r3, r3
 801207a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801207c:	687a      	ldr	r2, [r7, #4]
 801207e:	683b      	ldr	r3, [r7, #0]
 8012080:	781b      	ldrb	r3, [r3, #0]
 8012082:	009b      	lsls	r3, r3, #2
 8012084:	4413      	add	r3, r2
 8012086:	881b      	ldrh	r3, [r3, #0]
 8012088:	857b      	strh	r3, [r7, #42]	; 0x2a
 801208a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801208c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012090:	2b00      	cmp	r3, #0
 8012092:	d01b      	beq.n	80120cc <USB_DeactivateEndpoint+0x324>
 8012094:	687a      	ldr	r2, [r7, #4]
 8012096:	683b      	ldr	r3, [r7, #0]
 8012098:	781b      	ldrb	r3, [r3, #0]
 801209a:	009b      	lsls	r3, r3, #2
 801209c:	4413      	add	r3, r2
 801209e:	881b      	ldrh	r3, [r3, #0]
 80120a0:	b29b      	uxth	r3, r3
 80120a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80120a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80120aa:	853b      	strh	r3, [r7, #40]	; 0x28
 80120ac:	687a      	ldr	r2, [r7, #4]
 80120ae:	683b      	ldr	r3, [r7, #0]
 80120b0:	781b      	ldrb	r3, [r3, #0]
 80120b2:	009b      	lsls	r3, r3, #2
 80120b4:	441a      	add	r2, r3
 80120b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80120b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80120bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80120c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80120c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80120c8:	b29b      	uxth	r3, r3
 80120ca:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80120cc:	687a      	ldr	r2, [r7, #4]
 80120ce:	683b      	ldr	r3, [r7, #0]
 80120d0:	781b      	ldrb	r3, [r3, #0]
 80120d2:	009b      	lsls	r3, r3, #2
 80120d4:	4413      	add	r3, r2
 80120d6:	881b      	ldrh	r3, [r3, #0]
 80120d8:	b29b      	uxth	r3, r3
 80120da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80120de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80120e2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80120e4:	687a      	ldr	r2, [r7, #4]
 80120e6:	683b      	ldr	r3, [r7, #0]
 80120e8:	781b      	ldrb	r3, [r3, #0]
 80120ea:	009b      	lsls	r3, r3, #2
 80120ec:	441a      	add	r2, r3
 80120ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80120f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80120f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80120f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80120fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012100:	b29b      	uxth	r3, r3
 8012102:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8012104:	687a      	ldr	r2, [r7, #4]
 8012106:	683b      	ldr	r3, [r7, #0]
 8012108:	781b      	ldrb	r3, [r3, #0]
 801210a:	009b      	lsls	r3, r3, #2
 801210c:	4413      	add	r3, r2
 801210e:	881b      	ldrh	r3, [r3, #0]
 8012110:	b29b      	uxth	r3, r3
 8012112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012116:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801211a:	84bb      	strh	r3, [r7, #36]	; 0x24
 801211c:	687a      	ldr	r2, [r7, #4]
 801211e:	683b      	ldr	r3, [r7, #0]
 8012120:	781b      	ldrb	r3, [r3, #0]
 8012122:	009b      	lsls	r3, r3, #2
 8012124:	441a      	add	r2, r3
 8012126:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012128:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801212c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012130:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012138:	b29b      	uxth	r3, r3
 801213a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801213c:	687a      	ldr	r2, [r7, #4]
 801213e:	683b      	ldr	r3, [r7, #0]
 8012140:	781b      	ldrb	r3, [r3, #0]
 8012142:	009b      	lsls	r3, r3, #2
 8012144:	4413      	add	r3, r2
 8012146:	881b      	ldrh	r3, [r3, #0]
 8012148:	b29b      	uxth	r3, r3
 801214a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801214e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012152:	847b      	strh	r3, [r7, #34]	; 0x22
 8012154:	687a      	ldr	r2, [r7, #4]
 8012156:	683b      	ldr	r3, [r7, #0]
 8012158:	781b      	ldrb	r3, [r3, #0]
 801215a:	009b      	lsls	r3, r3, #2
 801215c:	441a      	add	r2, r3
 801215e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012160:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012164:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012168:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801216c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012170:	b29b      	uxth	r3, r3
 8012172:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8012174:	2300      	movs	r3, #0
}
 8012176:	4618      	mov	r0, r3
 8012178:	3734      	adds	r7, #52	; 0x34
 801217a:	46bd      	mov	sp, r7
 801217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012180:	4770      	bx	lr

08012182 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012182:	b580      	push	{r7, lr}
 8012184:	b0c2      	sub	sp, #264	; 0x108
 8012186:	af00      	add	r7, sp, #0
 8012188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801218c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012190:	6018      	str	r0, [r3, #0]
 8012192:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012196:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801219a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 801219c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	785b      	ldrb	r3, [r3, #1]
 80121a8:	2b01      	cmp	r3, #1
 80121aa:	f040 867b 	bne.w	8012ea4 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80121ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	699a      	ldr	r2, [r3, #24]
 80121ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	691b      	ldr	r3, [r3, #16]
 80121c6:	429a      	cmp	r2, r3
 80121c8:	d908      	bls.n	80121dc <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80121ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	691b      	ldr	r3, [r3, #16]
 80121d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80121da:	e007      	b.n	80121ec <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80121dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	699b      	ldr	r3, [r3, #24]
 80121e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80121ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	7b1b      	ldrb	r3, [r3, #12]
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d13a      	bne.n	8012272 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80121fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012200:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	6959      	ldr	r1, [r3, #20]
 8012208:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801220c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	88da      	ldrh	r2, [r3, #6]
 8012214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012218:	b29b      	uxth	r3, r3
 801221a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801221e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8012222:	6800      	ldr	r0, [r0, #0]
 8012224:	f001 fc1d 	bl	8013a62 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8012228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801222c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	613b      	str	r3, [r7, #16]
 8012234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012238:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012242:	b29b      	uxth	r3, r3
 8012244:	461a      	mov	r2, r3
 8012246:	693b      	ldr	r3, [r7, #16]
 8012248:	4413      	add	r3, r2
 801224a:	613b      	str	r3, [r7, #16]
 801224c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012250:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	781b      	ldrb	r3, [r3, #0]
 8012258:	00da      	lsls	r2, r3, #3
 801225a:	693b      	ldr	r3, [r7, #16]
 801225c:	4413      	add	r3, r2
 801225e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012262:	60fb      	str	r3, [r7, #12]
 8012264:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012268:	b29a      	uxth	r2, r3
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	801a      	strh	r2, [r3, #0]
 801226e:	f000 bde3 	b.w	8012e38 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8012272:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012276:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	78db      	ldrb	r3, [r3, #3]
 801227e:	2b02      	cmp	r3, #2
 8012280:	f040 843a 	bne.w	8012af8 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8012284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012288:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	6a1a      	ldr	r2, [r3, #32]
 8012290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012294:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	691b      	ldr	r3, [r3, #16]
 801229c:	429a      	cmp	r2, r3
 801229e:	f240 83b7 	bls.w	8012a10 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80122a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80122aa:	681a      	ldr	r2, [r3, #0]
 80122ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	781b      	ldrb	r3, [r3, #0]
 80122b8:	009b      	lsls	r3, r3, #2
 80122ba:	4413      	add	r3, r2
 80122bc:	881b      	ldrh	r3, [r3, #0]
 80122be:	b29b      	uxth	r3, r3
 80122c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80122c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80122c8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80122cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80122d4:	681a      	ldr	r2, [r3, #0]
 80122d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	781b      	ldrb	r3, [r3, #0]
 80122e2:	009b      	lsls	r3, r3, #2
 80122e4:	441a      	add	r2, r3
 80122e6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80122ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80122ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80122f2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80122f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80122fa:	b29b      	uxth	r3, r3
 80122fc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80122fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012302:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	6a1a      	ldr	r2, [r3, #32]
 801230a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801230e:	1ad2      	subs	r2, r2, r3
 8012310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012314:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801231c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012320:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012324:	681a      	ldr	r2, [r3, #0]
 8012326:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801232a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	781b      	ldrb	r3, [r3, #0]
 8012332:	009b      	lsls	r3, r3, #2
 8012334:	4413      	add	r3, r2
 8012336:	881b      	ldrh	r3, [r3, #0]
 8012338:	b29b      	uxth	r3, r3
 801233a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801233e:	2b00      	cmp	r3, #0
 8012340:	f000 81b3 	beq.w	80126aa <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8012344:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012348:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	633b      	str	r3, [r7, #48]	; 0x30
 8012350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012354:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	785b      	ldrb	r3, [r3, #1]
 801235c:	2b00      	cmp	r3, #0
 801235e:	d16d      	bne.n	801243c <USB_EPStartXfer+0x2ba>
 8012360:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012364:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	62bb      	str	r3, [r7, #40]	; 0x28
 801236c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012370:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801237a:	b29b      	uxth	r3, r3
 801237c:	461a      	mov	r2, r3
 801237e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012380:	4413      	add	r3, r2
 8012382:	62bb      	str	r3, [r7, #40]	; 0x28
 8012384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012388:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	781b      	ldrb	r3, [r3, #0]
 8012390:	00da      	lsls	r2, r3, #3
 8012392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012394:	4413      	add	r3, r2
 8012396:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801239a:	627b      	str	r3, [r7, #36]	; 0x24
 801239c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80123a0:	2b3e      	cmp	r3, #62	; 0x3e
 80123a2:	d91c      	bls.n	80123de <USB_EPStartXfer+0x25c>
 80123a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80123a8:	095b      	lsrs	r3, r3, #5
 80123aa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80123ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80123b2:	f003 031f 	and.w	r3, r3, #31
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d104      	bne.n	80123c4 <USB_EPStartXfer+0x242>
 80123ba:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80123be:	3b01      	subs	r3, #1
 80123c0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80123c4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80123c8:	b29b      	uxth	r3, r3
 80123ca:	029b      	lsls	r3, r3, #10
 80123cc:	b29b      	uxth	r3, r3
 80123ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80123d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80123d6:	b29a      	uxth	r2, r3
 80123d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123da:	801a      	strh	r2, [r3, #0]
 80123dc:	e053      	b.n	8012486 <USB_EPStartXfer+0x304>
 80123de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d112      	bne.n	801240c <USB_EPStartXfer+0x28a>
 80123e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123e8:	881b      	ldrh	r3, [r3, #0]
 80123ea:	b29b      	uxth	r3, r3
 80123ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80123f0:	b29a      	uxth	r2, r3
 80123f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123f4:	801a      	strh	r2, [r3, #0]
 80123f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123f8:	881b      	ldrh	r3, [r3, #0]
 80123fa:	b29b      	uxth	r3, r3
 80123fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012400:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012404:	b29a      	uxth	r2, r3
 8012406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012408:	801a      	strh	r2, [r3, #0]
 801240a:	e03c      	b.n	8012486 <USB_EPStartXfer+0x304>
 801240c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012410:	085b      	lsrs	r3, r3, #1
 8012412:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8012416:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801241a:	f003 0301 	and.w	r3, r3, #1
 801241e:	2b00      	cmp	r3, #0
 8012420:	d004      	beq.n	801242c <USB_EPStartXfer+0x2aa>
 8012422:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8012426:	3301      	adds	r3, #1
 8012428:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801242c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8012430:	b29b      	uxth	r3, r3
 8012432:	029b      	lsls	r3, r3, #10
 8012434:	b29a      	uxth	r2, r3
 8012436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012438:	801a      	strh	r2, [r3, #0]
 801243a:	e024      	b.n	8012486 <USB_EPStartXfer+0x304>
 801243c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012440:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	785b      	ldrb	r3, [r3, #1]
 8012448:	2b01      	cmp	r3, #1
 801244a:	d11c      	bne.n	8012486 <USB_EPStartXfer+0x304>
 801244c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012450:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801245a:	b29b      	uxth	r3, r3
 801245c:	461a      	mov	r2, r3
 801245e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012460:	4413      	add	r3, r2
 8012462:	633b      	str	r3, [r7, #48]	; 0x30
 8012464:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012468:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	781b      	ldrb	r3, [r3, #0]
 8012470:	00da      	lsls	r2, r3, #3
 8012472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012474:	4413      	add	r3, r2
 8012476:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801247a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801247c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012480:	b29a      	uxth	r2, r3
 8012482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012484:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8012486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801248a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	895b      	ldrh	r3, [r3, #10]
 8012492:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012496:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801249a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	6959      	ldr	r1, [r3, #20]
 80124a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80124a6:	b29b      	uxth	r3, r3
 80124a8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80124ac:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80124b0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80124b4:	6800      	ldr	r0, [r0, #0]
 80124b6:	f001 fad4 	bl	8013a62 <USB_WritePMA>
            ep->xfer_buff += len;
 80124ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80124be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	695a      	ldr	r2, [r3, #20]
 80124c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80124ca:	441a      	add	r2, r3
 80124cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80124d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80124d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80124dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	6a1a      	ldr	r2, [r3, #32]
 80124e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80124e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	691b      	ldr	r3, [r3, #16]
 80124f0:	429a      	cmp	r2, r3
 80124f2:	d90f      	bls.n	8012514 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 80124f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80124f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	6a1a      	ldr	r2, [r3, #32]
 8012500:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012504:	1ad2      	subs	r2, r2, r3
 8012506:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801250a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	621a      	str	r2, [r3, #32]
 8012512:	e00e      	b.n	8012532 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8012514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012518:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	6a1b      	ldr	r3, [r3, #32]
 8012520:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8012524:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012528:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	2200      	movs	r2, #0
 8012530:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8012532:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012536:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	785b      	ldrb	r3, [r3, #1]
 801253e:	2b00      	cmp	r3, #0
 8012540:	d16d      	bne.n	801261e <USB_EPStartXfer+0x49c>
 8012542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012546:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	61bb      	str	r3, [r7, #24]
 801254e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012552:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801255c:	b29b      	uxth	r3, r3
 801255e:	461a      	mov	r2, r3
 8012560:	69bb      	ldr	r3, [r7, #24]
 8012562:	4413      	add	r3, r2
 8012564:	61bb      	str	r3, [r7, #24]
 8012566:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801256a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	781b      	ldrb	r3, [r3, #0]
 8012572:	00da      	lsls	r2, r3, #3
 8012574:	69bb      	ldr	r3, [r7, #24]
 8012576:	4413      	add	r3, r2
 8012578:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801257c:	617b      	str	r3, [r7, #20]
 801257e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012582:	2b3e      	cmp	r3, #62	; 0x3e
 8012584:	d91c      	bls.n	80125c0 <USB_EPStartXfer+0x43e>
 8012586:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801258a:	095b      	lsrs	r3, r3, #5
 801258c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8012590:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012594:	f003 031f 	and.w	r3, r3, #31
 8012598:	2b00      	cmp	r3, #0
 801259a:	d104      	bne.n	80125a6 <USB_EPStartXfer+0x424>
 801259c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80125a0:	3b01      	subs	r3, #1
 80125a2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80125a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80125aa:	b29b      	uxth	r3, r3
 80125ac:	029b      	lsls	r3, r3, #10
 80125ae:	b29b      	uxth	r3, r3
 80125b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80125b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80125b8:	b29a      	uxth	r2, r3
 80125ba:	697b      	ldr	r3, [r7, #20]
 80125bc:	801a      	strh	r2, [r3, #0]
 80125be:	e059      	b.n	8012674 <USB_EPStartXfer+0x4f2>
 80125c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d112      	bne.n	80125ee <USB_EPStartXfer+0x46c>
 80125c8:	697b      	ldr	r3, [r7, #20]
 80125ca:	881b      	ldrh	r3, [r3, #0]
 80125cc:	b29b      	uxth	r3, r3
 80125ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80125d2:	b29a      	uxth	r2, r3
 80125d4:	697b      	ldr	r3, [r7, #20]
 80125d6:	801a      	strh	r2, [r3, #0]
 80125d8:	697b      	ldr	r3, [r7, #20]
 80125da:	881b      	ldrh	r3, [r3, #0]
 80125dc:	b29b      	uxth	r3, r3
 80125de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80125e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80125e6:	b29a      	uxth	r2, r3
 80125e8:	697b      	ldr	r3, [r7, #20]
 80125ea:	801a      	strh	r2, [r3, #0]
 80125ec:	e042      	b.n	8012674 <USB_EPStartXfer+0x4f2>
 80125ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80125f2:	085b      	lsrs	r3, r3, #1
 80125f4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80125f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80125fc:	f003 0301 	and.w	r3, r3, #1
 8012600:	2b00      	cmp	r3, #0
 8012602:	d004      	beq.n	801260e <USB_EPStartXfer+0x48c>
 8012604:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012608:	3301      	adds	r3, #1
 801260a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801260e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012612:	b29b      	uxth	r3, r3
 8012614:	029b      	lsls	r3, r3, #10
 8012616:	b29a      	uxth	r2, r3
 8012618:	697b      	ldr	r3, [r7, #20]
 801261a:	801a      	strh	r2, [r3, #0]
 801261c:	e02a      	b.n	8012674 <USB_EPStartXfer+0x4f2>
 801261e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012622:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	785b      	ldrb	r3, [r3, #1]
 801262a:	2b01      	cmp	r3, #1
 801262c:	d122      	bne.n	8012674 <USB_EPStartXfer+0x4f2>
 801262e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012632:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	623b      	str	r3, [r7, #32]
 801263a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801263e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012648:	b29b      	uxth	r3, r3
 801264a:	461a      	mov	r2, r3
 801264c:	6a3b      	ldr	r3, [r7, #32]
 801264e:	4413      	add	r3, r2
 8012650:	623b      	str	r3, [r7, #32]
 8012652:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012656:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	781b      	ldrb	r3, [r3, #0]
 801265e:	00da      	lsls	r2, r3, #3
 8012660:	6a3b      	ldr	r3, [r7, #32]
 8012662:	4413      	add	r3, r2
 8012664:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012668:	61fb      	str	r3, [r7, #28]
 801266a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801266e:	b29a      	uxth	r2, r3
 8012670:	69fb      	ldr	r3, [r7, #28]
 8012672:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8012674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012678:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	891b      	ldrh	r3, [r3, #8]
 8012680:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012684:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012688:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801268c:	681b      	ldr	r3, [r3, #0]
 801268e:	6959      	ldr	r1, [r3, #20]
 8012690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012694:	b29b      	uxth	r3, r3
 8012696:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801269a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801269e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80126a2:	6800      	ldr	r0, [r0, #0]
 80126a4:	f001 f9dd 	bl	8013a62 <USB_WritePMA>
 80126a8:	e3c6      	b.n	8012e38 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80126aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80126ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	785b      	ldrb	r3, [r3, #1]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d16d      	bne.n	8012796 <USB_EPStartXfer+0x614>
 80126ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80126be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80126c2:	681b      	ldr	r3, [r3, #0]
 80126c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80126c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80126ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80126d4:	b29b      	uxth	r3, r3
 80126d6:	461a      	mov	r2, r3
 80126d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80126da:	4413      	add	r3, r2
 80126dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80126de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80126e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	781b      	ldrb	r3, [r3, #0]
 80126ea:	00da      	lsls	r2, r3, #3
 80126ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80126ee:	4413      	add	r3, r2
 80126f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80126f4:	647b      	str	r3, [r7, #68]	; 0x44
 80126f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80126fa:	2b3e      	cmp	r3, #62	; 0x3e
 80126fc:	d91c      	bls.n	8012738 <USB_EPStartXfer+0x5b6>
 80126fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012702:	095b      	lsrs	r3, r3, #5
 8012704:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8012708:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801270c:	f003 031f 	and.w	r3, r3, #31
 8012710:	2b00      	cmp	r3, #0
 8012712:	d104      	bne.n	801271e <USB_EPStartXfer+0x59c>
 8012714:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8012718:	3b01      	subs	r3, #1
 801271a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801271e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8012722:	b29b      	uxth	r3, r3
 8012724:	029b      	lsls	r3, r3, #10
 8012726:	b29b      	uxth	r3, r3
 8012728:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801272c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012730:	b29a      	uxth	r2, r3
 8012732:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012734:	801a      	strh	r2, [r3, #0]
 8012736:	e059      	b.n	80127ec <USB_EPStartXfer+0x66a>
 8012738:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801273c:	2b00      	cmp	r3, #0
 801273e:	d112      	bne.n	8012766 <USB_EPStartXfer+0x5e4>
 8012740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012742:	881b      	ldrh	r3, [r3, #0]
 8012744:	b29b      	uxth	r3, r3
 8012746:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801274a:	b29a      	uxth	r2, r3
 801274c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801274e:	801a      	strh	r2, [r3, #0]
 8012750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012752:	881b      	ldrh	r3, [r3, #0]
 8012754:	b29b      	uxth	r3, r3
 8012756:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801275a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801275e:	b29a      	uxth	r2, r3
 8012760:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012762:	801a      	strh	r2, [r3, #0]
 8012764:	e042      	b.n	80127ec <USB_EPStartXfer+0x66a>
 8012766:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801276a:	085b      	lsrs	r3, r3, #1
 801276c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8012770:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012774:	f003 0301 	and.w	r3, r3, #1
 8012778:	2b00      	cmp	r3, #0
 801277a:	d004      	beq.n	8012786 <USB_EPStartXfer+0x604>
 801277c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8012780:	3301      	adds	r3, #1
 8012782:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8012786:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801278a:	b29b      	uxth	r3, r3
 801278c:	029b      	lsls	r3, r3, #10
 801278e:	b29a      	uxth	r2, r3
 8012790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012792:	801a      	strh	r2, [r3, #0]
 8012794:	e02a      	b.n	80127ec <USB_EPStartXfer+0x66a>
 8012796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801279a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	785b      	ldrb	r3, [r3, #1]
 80127a2:	2b01      	cmp	r3, #1
 80127a4:	d122      	bne.n	80127ec <USB_EPStartXfer+0x66a>
 80127a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80127aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	653b      	str	r3, [r7, #80]	; 0x50
 80127b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80127b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80127c0:	b29b      	uxth	r3, r3
 80127c2:	461a      	mov	r2, r3
 80127c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127c6:	4413      	add	r3, r2
 80127c8:	653b      	str	r3, [r7, #80]	; 0x50
 80127ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80127ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	781b      	ldrb	r3, [r3, #0]
 80127d6:	00da      	lsls	r2, r3, #3
 80127d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127da:	4413      	add	r3, r2
 80127dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80127e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80127e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80127e6:	b29a      	uxth	r2, r3
 80127e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80127ea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80127ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80127f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	891b      	ldrh	r3, [r3, #8]
 80127f8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80127fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012800:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	6959      	ldr	r1, [r3, #20]
 8012808:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801280c:	b29b      	uxth	r3, r3
 801280e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8012812:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8012816:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801281a:	6800      	ldr	r0, [r0, #0]
 801281c:	f001 f921 	bl	8013a62 <USB_WritePMA>
            ep->xfer_buff += len;
 8012820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012824:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	695a      	ldr	r2, [r3, #20]
 801282c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012830:	441a      	add	r2, r3
 8012832:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012836:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801283e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012842:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	6a1a      	ldr	r2, [r3, #32]
 801284a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801284e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	691b      	ldr	r3, [r3, #16]
 8012856:	429a      	cmp	r2, r3
 8012858:	d90f      	bls.n	801287a <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 801285a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801285e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	6a1a      	ldr	r2, [r3, #32]
 8012866:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801286a:	1ad2      	subs	r2, r2, r3
 801286c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012870:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	621a      	str	r2, [r3, #32]
 8012878:	e00e      	b.n	8012898 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 801287a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801287e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	6a1b      	ldr	r3, [r3, #32]
 8012886:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 801288a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801288e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	2200      	movs	r2, #0
 8012896:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8012898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801289c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	643b      	str	r3, [r7, #64]	; 0x40
 80128a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80128a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	785b      	ldrb	r3, [r3, #1]
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d16d      	bne.n	8012990 <USB_EPStartXfer+0x80e>
 80128b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80128b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	63bb      	str	r3, [r7, #56]	; 0x38
 80128c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80128c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80128ce:	b29b      	uxth	r3, r3
 80128d0:	461a      	mov	r2, r3
 80128d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128d4:	4413      	add	r3, r2
 80128d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80128d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80128dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	781b      	ldrb	r3, [r3, #0]
 80128e4:	00da      	lsls	r2, r3, #3
 80128e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128e8:	4413      	add	r3, r2
 80128ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80128ee:	637b      	str	r3, [r7, #52]	; 0x34
 80128f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80128f4:	2b3e      	cmp	r3, #62	; 0x3e
 80128f6:	d91c      	bls.n	8012932 <USB_EPStartXfer+0x7b0>
 80128f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80128fc:	095b      	lsrs	r3, r3, #5
 80128fe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8012902:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012906:	f003 031f 	and.w	r3, r3, #31
 801290a:	2b00      	cmp	r3, #0
 801290c:	d104      	bne.n	8012918 <USB_EPStartXfer+0x796>
 801290e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012912:	3b01      	subs	r3, #1
 8012914:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8012918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801291c:	b29b      	uxth	r3, r3
 801291e:	029b      	lsls	r3, r3, #10
 8012920:	b29b      	uxth	r3, r3
 8012922:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012926:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801292a:	b29a      	uxth	r2, r3
 801292c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801292e:	801a      	strh	r2, [r3, #0]
 8012930:	e053      	b.n	80129da <USB_EPStartXfer+0x858>
 8012932:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012936:	2b00      	cmp	r3, #0
 8012938:	d112      	bne.n	8012960 <USB_EPStartXfer+0x7de>
 801293a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801293c:	881b      	ldrh	r3, [r3, #0]
 801293e:	b29b      	uxth	r3, r3
 8012940:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8012944:	b29a      	uxth	r2, r3
 8012946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012948:	801a      	strh	r2, [r3, #0]
 801294a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801294c:	881b      	ldrh	r3, [r3, #0]
 801294e:	b29b      	uxth	r3, r3
 8012950:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012954:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012958:	b29a      	uxth	r2, r3
 801295a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801295c:	801a      	strh	r2, [r3, #0]
 801295e:	e03c      	b.n	80129da <USB_EPStartXfer+0x858>
 8012960:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012964:	085b      	lsrs	r3, r3, #1
 8012966:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801296a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801296e:	f003 0301 	and.w	r3, r3, #1
 8012972:	2b00      	cmp	r3, #0
 8012974:	d004      	beq.n	8012980 <USB_EPStartXfer+0x7fe>
 8012976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801297a:	3301      	adds	r3, #1
 801297c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8012980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012984:	b29b      	uxth	r3, r3
 8012986:	029b      	lsls	r3, r3, #10
 8012988:	b29a      	uxth	r2, r3
 801298a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801298c:	801a      	strh	r2, [r3, #0]
 801298e:	e024      	b.n	80129da <USB_EPStartXfer+0x858>
 8012990:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012994:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	785b      	ldrb	r3, [r3, #1]
 801299c:	2b01      	cmp	r3, #1
 801299e:	d11c      	bne.n	80129da <USB_EPStartXfer+0x858>
 80129a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80129a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80129ae:	b29b      	uxth	r3, r3
 80129b0:	461a      	mov	r2, r3
 80129b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80129b4:	4413      	add	r3, r2
 80129b6:	643b      	str	r3, [r7, #64]	; 0x40
 80129b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80129bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	781b      	ldrb	r3, [r3, #0]
 80129c4:	00da      	lsls	r2, r3, #3
 80129c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80129c8:	4413      	add	r3, r2
 80129ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80129ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80129d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80129d4:	b29a      	uxth	r2, r3
 80129d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129d8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80129da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80129de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	895b      	ldrh	r3, [r3, #10]
 80129e6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80129ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80129ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	6959      	ldr	r1, [r3, #20]
 80129f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80129fa:	b29b      	uxth	r3, r3
 80129fc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8012a00:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8012a04:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8012a08:	6800      	ldr	r0, [r0, #0]
 8012a0a:	f001 f82a 	bl	8013a62 <USB_WritePMA>
 8012a0e:	e213      	b.n	8012e38 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8012a10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012a14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	6a1b      	ldr	r3, [r3, #32]
 8012a1c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8012a20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012a24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012a28:	681a      	ldr	r2, [r3, #0]
 8012a2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012a2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	781b      	ldrb	r3, [r3, #0]
 8012a36:	009b      	lsls	r3, r3, #2
 8012a38:	4413      	add	r3, r2
 8012a3a:	881b      	ldrh	r3, [r3, #0]
 8012a3c:	b29b      	uxth	r3, r3
 8012a3e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8012a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012a46:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8012a4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012a4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012a52:	681a      	ldr	r2, [r3, #0]
 8012a54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012a58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	781b      	ldrb	r3, [r3, #0]
 8012a60:	009b      	lsls	r3, r3, #2
 8012a62:	441a      	add	r2, r3
 8012a64:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8012a68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012a6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012a70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012a78:	b29b      	uxth	r3, r3
 8012a7a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8012a7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012a80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012a88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012a8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012a96:	b29b      	uxth	r3, r3
 8012a98:	461a      	mov	r2, r3
 8012a9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012a9c:	4413      	add	r3, r2
 8012a9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012aa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012aa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	781b      	ldrb	r3, [r3, #0]
 8012aac:	00da      	lsls	r2, r3, #3
 8012aae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012ab0:	4413      	add	r3, r2
 8012ab2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012ab6:	65bb      	str	r3, [r7, #88]	; 0x58
 8012ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012abc:	b29a      	uxth	r2, r3
 8012abe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012ac0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8012ac2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ac6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	891b      	ldrh	r3, [r3, #8]
 8012ace:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012ad2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ad6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	6959      	ldr	r1, [r3, #20]
 8012ade:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012ae2:	b29b      	uxth	r3, r3
 8012ae4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8012ae8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8012aec:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8012af0:	6800      	ldr	r0, [r0, #0]
 8012af2:	f000 ffb6 	bl	8013a62 <USB_WritePMA>
 8012af6:	e19f      	b.n	8012e38 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8012af8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012afc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	6a1a      	ldr	r2, [r3, #32]
 8012b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012b08:	1ad2      	subs	r2, r2, r3
 8012b0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8012b16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012b1e:	681a      	ldr	r2, [r3, #0]
 8012b20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	781b      	ldrb	r3, [r3, #0]
 8012b2c:	009b      	lsls	r3, r3, #2
 8012b2e:	4413      	add	r3, r2
 8012b30:	881b      	ldrh	r3, [r3, #0]
 8012b32:	b29b      	uxth	r3, r3
 8012b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	f000 80bc 	beq.w	8012cb6 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8012b3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	673b      	str	r3, [r7, #112]	; 0x70
 8012b4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	785b      	ldrb	r3, [r3, #1]
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d16d      	bne.n	8012c36 <USB_EPStartXfer+0xab4>
 8012b5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	66bb      	str	r3, [r7, #104]	; 0x68
 8012b66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012b74:	b29b      	uxth	r3, r3
 8012b76:	461a      	mov	r2, r3
 8012b78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012b7a:	4413      	add	r3, r2
 8012b7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8012b7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	781b      	ldrb	r3, [r3, #0]
 8012b8a:	00da      	lsls	r2, r3, #3
 8012b8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012b8e:	4413      	add	r3, r2
 8012b90:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012b94:	667b      	str	r3, [r7, #100]	; 0x64
 8012b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012b9a:	2b3e      	cmp	r3, #62	; 0x3e
 8012b9c:	d91c      	bls.n	8012bd8 <USB_EPStartXfer+0xa56>
 8012b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012ba2:	095b      	lsrs	r3, r3, #5
 8012ba4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8012ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012bac:	f003 031f 	and.w	r3, r3, #31
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d104      	bne.n	8012bbe <USB_EPStartXfer+0xa3c>
 8012bb4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8012bb8:	3b01      	subs	r3, #1
 8012bba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8012bbe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8012bc2:	b29b      	uxth	r3, r3
 8012bc4:	029b      	lsls	r3, r3, #10
 8012bc6:	b29b      	uxth	r3, r3
 8012bc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012bcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012bd0:	b29a      	uxth	r2, r3
 8012bd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012bd4:	801a      	strh	r2, [r3, #0]
 8012bd6:	e053      	b.n	8012c80 <USB_EPStartXfer+0xafe>
 8012bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d112      	bne.n	8012c06 <USB_EPStartXfer+0xa84>
 8012be0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012be2:	881b      	ldrh	r3, [r3, #0]
 8012be4:	b29b      	uxth	r3, r3
 8012be6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8012bea:	b29a      	uxth	r2, r3
 8012bec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012bee:	801a      	strh	r2, [r3, #0]
 8012bf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012bf2:	881b      	ldrh	r3, [r3, #0]
 8012bf4:	b29b      	uxth	r3, r3
 8012bf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012bfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012bfe:	b29a      	uxth	r2, r3
 8012c00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012c02:	801a      	strh	r2, [r3, #0]
 8012c04:	e03c      	b.n	8012c80 <USB_EPStartXfer+0xafe>
 8012c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012c0a:	085b      	lsrs	r3, r3, #1
 8012c0c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8012c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012c14:	f003 0301 	and.w	r3, r3, #1
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d004      	beq.n	8012c26 <USB_EPStartXfer+0xaa4>
 8012c1c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8012c20:	3301      	adds	r3, #1
 8012c22:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8012c26:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8012c2a:	b29b      	uxth	r3, r3
 8012c2c:	029b      	lsls	r3, r3, #10
 8012c2e:	b29a      	uxth	r2, r3
 8012c30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012c32:	801a      	strh	r2, [r3, #0]
 8012c34:	e024      	b.n	8012c80 <USB_EPStartXfer+0xafe>
 8012c36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	785b      	ldrb	r3, [r3, #1]
 8012c42:	2b01      	cmp	r3, #1
 8012c44:	d11c      	bne.n	8012c80 <USB_EPStartXfer+0xafe>
 8012c46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012c54:	b29b      	uxth	r3, r3
 8012c56:	461a      	mov	r2, r3
 8012c58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012c5a:	4413      	add	r3, r2
 8012c5c:	673b      	str	r3, [r7, #112]	; 0x70
 8012c5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	781b      	ldrb	r3, [r3, #0]
 8012c6a:	00da      	lsls	r2, r3, #3
 8012c6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012c6e:	4413      	add	r3, r2
 8012c70:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012c74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8012c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012c7a:	b29a      	uxth	r2, r3
 8012c7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012c7e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8012c80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	895b      	ldrh	r3, [r3, #10]
 8012c8c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012c90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	6959      	ldr	r1, [r3, #20]
 8012c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012ca0:	b29b      	uxth	r3, r3
 8012ca2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8012ca6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8012caa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8012cae:	6800      	ldr	r0, [r0, #0]
 8012cb0:	f000 fed7 	bl	8013a62 <USB_WritePMA>
 8012cb4:	e0c0      	b.n	8012e38 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8012cb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012cba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	785b      	ldrb	r3, [r3, #1]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d16d      	bne.n	8012da2 <USB_EPStartXfer+0xc20>
 8012cc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012cca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012cd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012cd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012ce0:	b29b      	uxth	r3, r3
 8012ce2:	461a      	mov	r2, r3
 8012ce4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012ce6:	4413      	add	r3, r2
 8012ce8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012cea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012cee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	781b      	ldrb	r3, [r3, #0]
 8012cf6:	00da      	lsls	r2, r3, #3
 8012cf8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012cfa:	4413      	add	r3, r2
 8012cfc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012d00:	67bb      	str	r3, [r7, #120]	; 0x78
 8012d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012d06:	2b3e      	cmp	r3, #62	; 0x3e
 8012d08:	d91c      	bls.n	8012d44 <USB_EPStartXfer+0xbc2>
 8012d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012d0e:	095b      	lsrs	r3, r3, #5
 8012d10:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8012d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012d18:	f003 031f 	and.w	r3, r3, #31
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d104      	bne.n	8012d2a <USB_EPStartXfer+0xba8>
 8012d20:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012d24:	3b01      	subs	r3, #1
 8012d26:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8012d2a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012d2e:	b29b      	uxth	r3, r3
 8012d30:	029b      	lsls	r3, r3, #10
 8012d32:	b29b      	uxth	r3, r3
 8012d34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012d38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012d3c:	b29a      	uxth	r2, r3
 8012d3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012d40:	801a      	strh	r2, [r3, #0]
 8012d42:	e05f      	b.n	8012e04 <USB_EPStartXfer+0xc82>
 8012d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d112      	bne.n	8012d72 <USB_EPStartXfer+0xbf0>
 8012d4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012d4e:	881b      	ldrh	r3, [r3, #0]
 8012d50:	b29b      	uxth	r3, r3
 8012d52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8012d56:	b29a      	uxth	r2, r3
 8012d58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012d5a:	801a      	strh	r2, [r3, #0]
 8012d5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012d5e:	881b      	ldrh	r3, [r3, #0]
 8012d60:	b29b      	uxth	r3, r3
 8012d62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012d66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012d6a:	b29a      	uxth	r2, r3
 8012d6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012d6e:	801a      	strh	r2, [r3, #0]
 8012d70:	e048      	b.n	8012e04 <USB_EPStartXfer+0xc82>
 8012d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012d76:	085b      	lsrs	r3, r3, #1
 8012d78:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8012d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012d80:	f003 0301 	and.w	r3, r3, #1
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d004      	beq.n	8012d92 <USB_EPStartXfer+0xc10>
 8012d88:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012d8c:	3301      	adds	r3, #1
 8012d8e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8012d92:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012d96:	b29b      	uxth	r3, r3
 8012d98:	029b      	lsls	r3, r3, #10
 8012d9a:	b29a      	uxth	r2, r3
 8012d9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012d9e:	801a      	strh	r2, [r3, #0]
 8012da0:	e030      	b.n	8012e04 <USB_EPStartXfer+0xc82>
 8012da2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012da6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	785b      	ldrb	r3, [r3, #1]
 8012dae:	2b01      	cmp	r3, #1
 8012db0:	d128      	bne.n	8012e04 <USB_EPStartXfer+0xc82>
 8012db2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012db6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012dc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012dc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012dce:	b29b      	uxth	r3, r3
 8012dd0:	461a      	mov	r2, r3
 8012dd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012dd6:	4413      	add	r3, r2
 8012dd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012ddc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012de0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	781b      	ldrb	r3, [r3, #0]
 8012de8:	00da      	lsls	r2, r3, #3
 8012dea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012dee:	4413      	add	r3, r2
 8012df0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012df4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012dfc:	b29a      	uxth	r2, r3
 8012dfe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012e02:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8012e04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	891b      	ldrh	r3, [r3, #8]
 8012e10:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	6959      	ldr	r1, [r3, #20]
 8012e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012e24:	b29b      	uxth	r3, r3
 8012e26:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8012e2a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8012e2e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8012e32:	6800      	ldr	r0, [r0, #0]
 8012e34:	f000 fe15 	bl	8013a62 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8012e38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012e40:	681a      	ldr	r2, [r3, #0]
 8012e42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	781b      	ldrb	r3, [r3, #0]
 8012e4e:	009b      	lsls	r3, r3, #2
 8012e50:	4413      	add	r3, r2
 8012e52:	881b      	ldrh	r3, [r3, #0]
 8012e54:	b29b      	uxth	r3, r3
 8012e56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012e5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012e5e:	817b      	strh	r3, [r7, #10]
 8012e60:	897b      	ldrh	r3, [r7, #10]
 8012e62:	f083 0310 	eor.w	r3, r3, #16
 8012e66:	817b      	strh	r3, [r7, #10]
 8012e68:	897b      	ldrh	r3, [r7, #10]
 8012e6a:	f083 0320 	eor.w	r3, r3, #32
 8012e6e:	817b      	strh	r3, [r7, #10]
 8012e70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012e78:	681a      	ldr	r2, [r3, #0]
 8012e7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	781b      	ldrb	r3, [r3, #0]
 8012e86:	009b      	lsls	r3, r3, #2
 8012e88:	441a      	add	r2, r3
 8012e8a:	897b      	ldrh	r3, [r7, #10]
 8012e8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012e90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012e94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012e9c:	b29b      	uxth	r3, r3
 8012e9e:	8013      	strh	r3, [r2, #0]
 8012ea0:	f000 bc9f 	b.w	80137e2 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8012ea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ea8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	7b1b      	ldrb	r3, [r3, #12]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	f040 80ae 	bne.w	8013012 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8012eb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012eba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012ebe:	681b      	ldr	r3, [r3, #0]
 8012ec0:	699a      	ldr	r2, [r3, #24]
 8012ec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	691b      	ldr	r3, [r3, #16]
 8012ece:	429a      	cmp	r2, r3
 8012ed0:	d917      	bls.n	8012f02 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8012ed2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ed6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	691b      	ldr	r3, [r3, #16]
 8012ede:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8012ee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ee6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	699a      	ldr	r2, [r3, #24]
 8012eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012ef2:	1ad2      	subs	r2, r2, r3
 8012ef4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ef8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	619a      	str	r2, [r3, #24]
 8012f00:	e00e      	b.n	8012f20 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8012f02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	699b      	ldr	r3, [r3, #24]
 8012f0e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8012f12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	2200      	movs	r2, #0
 8012f1e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8012f20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012f2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012f3c:	b29b      	uxth	r3, r3
 8012f3e:	461a      	mov	r2, r3
 8012f40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012f44:	4413      	add	r3, r2
 8012f46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012f4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	781b      	ldrb	r3, [r3, #0]
 8012f56:	00da      	lsls	r2, r3, #3
 8012f58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012f5c:	4413      	add	r3, r2
 8012f5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012f62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8012f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012f6a:	2b3e      	cmp	r3, #62	; 0x3e
 8012f6c:	d91d      	bls.n	8012faa <USB_EPStartXfer+0xe28>
 8012f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012f72:	095b      	lsrs	r3, r3, #5
 8012f74:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8012f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012f7c:	f003 031f 	and.w	r3, r3, #31
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d104      	bne.n	8012f8e <USB_EPStartXfer+0xe0c>
 8012f84:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012f88:	3b01      	subs	r3, #1
 8012f8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8012f8e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012f92:	b29b      	uxth	r3, r3
 8012f94:	029b      	lsls	r3, r3, #10
 8012f96:	b29b      	uxth	r3, r3
 8012f98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012f9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012fa0:	b29a      	uxth	r2, r3
 8012fa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012fa6:	801a      	strh	r2, [r3, #0]
 8012fa8:	e3e1      	b.n	801376e <USB_EPStartXfer+0x15ec>
 8012faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d116      	bne.n	8012fe0 <USB_EPStartXfer+0xe5e>
 8012fb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012fb6:	881b      	ldrh	r3, [r3, #0]
 8012fb8:	b29b      	uxth	r3, r3
 8012fba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8012fbe:	b29a      	uxth	r2, r3
 8012fc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012fc4:	801a      	strh	r2, [r3, #0]
 8012fc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012fca:	881b      	ldrh	r3, [r3, #0]
 8012fcc:	b29b      	uxth	r3, r3
 8012fce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012fd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012fd6:	b29a      	uxth	r2, r3
 8012fd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012fdc:	801a      	strh	r2, [r3, #0]
 8012fde:	e3c6      	b.n	801376e <USB_EPStartXfer+0x15ec>
 8012fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012fe4:	085b      	lsrs	r3, r3, #1
 8012fe6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8012fea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012fee:	f003 0301 	and.w	r3, r3, #1
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d004      	beq.n	8013000 <USB_EPStartXfer+0xe7e>
 8012ff6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012ffa:	3301      	adds	r3, #1
 8012ffc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8013000:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8013004:	b29b      	uxth	r3, r3
 8013006:	029b      	lsls	r3, r3, #10
 8013008:	b29a      	uxth	r2, r3
 801300a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801300e:	801a      	strh	r2, [r3, #0]
 8013010:	e3ad      	b.n	801376e <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8013012:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013016:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	78db      	ldrb	r3, [r3, #3]
 801301e:	2b02      	cmp	r3, #2
 8013020:	f040 8200 	bne.w	8013424 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8013024:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013028:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	785b      	ldrb	r3, [r3, #1]
 8013030:	2b00      	cmp	r3, #0
 8013032:	f040 8091 	bne.w	8013158 <USB_EPStartXfer+0xfd6>
 8013036:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801303a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8013044:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013048:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013052:	b29b      	uxth	r3, r3
 8013054:	461a      	mov	r2, r3
 8013056:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801305a:	4413      	add	r3, r2
 801305c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8013060:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013064:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	781b      	ldrb	r3, [r3, #0]
 801306c:	00da      	lsls	r2, r3, #3
 801306e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013072:	4413      	add	r3, r2
 8013074:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8013078:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801307c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013080:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	691b      	ldr	r3, [r3, #16]
 8013088:	2b3e      	cmp	r3, #62	; 0x3e
 801308a:	d925      	bls.n	80130d8 <USB_EPStartXfer+0xf56>
 801308c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013090:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	691b      	ldr	r3, [r3, #16]
 8013098:	095b      	lsrs	r3, r3, #5
 801309a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801309e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80130a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	691b      	ldr	r3, [r3, #16]
 80130aa:	f003 031f 	and.w	r3, r3, #31
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d104      	bne.n	80130bc <USB_EPStartXfer+0xf3a>
 80130b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80130b6:	3b01      	subs	r3, #1
 80130b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80130bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80130c0:	b29b      	uxth	r3, r3
 80130c2:	029b      	lsls	r3, r3, #10
 80130c4:	b29b      	uxth	r3, r3
 80130c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80130ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80130ce:	b29a      	uxth	r2, r3
 80130d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80130d4:	801a      	strh	r2, [r3, #0]
 80130d6:	e074      	b.n	80131c2 <USB_EPStartXfer+0x1040>
 80130d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80130dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	691b      	ldr	r3, [r3, #16]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d116      	bne.n	8013116 <USB_EPStartXfer+0xf94>
 80130e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80130ec:	881b      	ldrh	r3, [r3, #0]
 80130ee:	b29b      	uxth	r3, r3
 80130f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80130f4:	b29a      	uxth	r2, r3
 80130f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80130fa:	801a      	strh	r2, [r3, #0]
 80130fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8013100:	881b      	ldrh	r3, [r3, #0]
 8013102:	b29b      	uxth	r3, r3
 8013104:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013108:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801310c:	b29a      	uxth	r2, r3
 801310e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8013112:	801a      	strh	r2, [r3, #0]
 8013114:	e055      	b.n	80131c2 <USB_EPStartXfer+0x1040>
 8013116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801311a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	691b      	ldr	r3, [r3, #16]
 8013122:	085b      	lsrs	r3, r3, #1
 8013124:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8013128:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801312c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	691b      	ldr	r3, [r3, #16]
 8013134:	f003 0301 	and.w	r3, r3, #1
 8013138:	2b00      	cmp	r3, #0
 801313a:	d004      	beq.n	8013146 <USB_EPStartXfer+0xfc4>
 801313c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013140:	3301      	adds	r3, #1
 8013142:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8013146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801314a:	b29b      	uxth	r3, r3
 801314c:	029b      	lsls	r3, r3, #10
 801314e:	b29a      	uxth	r2, r3
 8013150:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8013154:	801a      	strh	r2, [r3, #0]
 8013156:	e034      	b.n	80131c2 <USB_EPStartXfer+0x1040>
 8013158:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801315c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013160:	681b      	ldr	r3, [r3, #0]
 8013162:	785b      	ldrb	r3, [r3, #1]
 8013164:	2b01      	cmp	r3, #1
 8013166:	d12c      	bne.n	80131c2 <USB_EPStartXfer+0x1040>
 8013168:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801316c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8013176:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801317a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013184:	b29b      	uxth	r3, r3
 8013186:	461a      	mov	r2, r3
 8013188:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801318c:	4413      	add	r3, r2
 801318e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8013192:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013196:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	781b      	ldrb	r3, [r3, #0]
 801319e:	00da      	lsls	r2, r3, #3
 80131a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80131a4:	4413      	add	r3, r2
 80131a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80131aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80131ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80131b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	691b      	ldr	r3, [r3, #16]
 80131ba:	b29a      	uxth	r2, r3
 80131bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80131c0:	801a      	strh	r2, [r3, #0]
 80131c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80131c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80131d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80131d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	785b      	ldrb	r3, [r3, #1]
 80131dc:	2b00      	cmp	r3, #0
 80131de:	f040 8091 	bne.w	8013304 <USB_EPStartXfer+0x1182>
 80131e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80131e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80131f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80131f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80131fe:	b29b      	uxth	r3, r3
 8013200:	461a      	mov	r2, r3
 8013202:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013206:	4413      	add	r3, r2
 8013208:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801320c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013210:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	781b      	ldrb	r3, [r3, #0]
 8013218:	00da      	lsls	r2, r3, #3
 801321a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801321e:	4413      	add	r3, r2
 8013220:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8013224:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8013228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801322c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	691b      	ldr	r3, [r3, #16]
 8013234:	2b3e      	cmp	r3, #62	; 0x3e
 8013236:	d925      	bls.n	8013284 <USB_EPStartXfer+0x1102>
 8013238:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801323c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	691b      	ldr	r3, [r3, #16]
 8013244:	095b      	lsrs	r3, r3, #5
 8013246:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801324a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801324e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	691b      	ldr	r3, [r3, #16]
 8013256:	f003 031f 	and.w	r3, r3, #31
 801325a:	2b00      	cmp	r3, #0
 801325c:	d104      	bne.n	8013268 <USB_EPStartXfer+0x10e6>
 801325e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013262:	3b01      	subs	r3, #1
 8013264:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8013268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801326c:	b29b      	uxth	r3, r3
 801326e:	029b      	lsls	r3, r3, #10
 8013270:	b29b      	uxth	r3, r3
 8013272:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013276:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801327a:	b29a      	uxth	r2, r3
 801327c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013280:	801a      	strh	r2, [r3, #0]
 8013282:	e06d      	b.n	8013360 <USB_EPStartXfer+0x11de>
 8013284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013288:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	691b      	ldr	r3, [r3, #16]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d116      	bne.n	80132c2 <USB_EPStartXfer+0x1140>
 8013294:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013298:	881b      	ldrh	r3, [r3, #0]
 801329a:	b29b      	uxth	r3, r3
 801329c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80132a0:	b29a      	uxth	r2, r3
 80132a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80132a6:	801a      	strh	r2, [r3, #0]
 80132a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80132ac:	881b      	ldrh	r3, [r3, #0]
 80132ae:	b29b      	uxth	r3, r3
 80132b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80132b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80132b8:	b29a      	uxth	r2, r3
 80132ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80132be:	801a      	strh	r2, [r3, #0]
 80132c0:	e04e      	b.n	8013360 <USB_EPStartXfer+0x11de>
 80132c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80132c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	691b      	ldr	r3, [r3, #16]
 80132ce:	085b      	lsrs	r3, r3, #1
 80132d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80132d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80132d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	691b      	ldr	r3, [r3, #16]
 80132e0:	f003 0301 	and.w	r3, r3, #1
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d004      	beq.n	80132f2 <USB_EPStartXfer+0x1170>
 80132e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80132ec:	3301      	adds	r3, #1
 80132ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80132f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80132f6:	b29b      	uxth	r3, r3
 80132f8:	029b      	lsls	r3, r3, #10
 80132fa:	b29a      	uxth	r2, r3
 80132fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013300:	801a      	strh	r2, [r3, #0]
 8013302:	e02d      	b.n	8013360 <USB_EPStartXfer+0x11de>
 8013304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013308:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	785b      	ldrb	r3, [r3, #1]
 8013310:	2b01      	cmp	r3, #1
 8013312:	d125      	bne.n	8013360 <USB_EPStartXfer+0x11de>
 8013314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013318:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013322:	b29b      	uxth	r3, r3
 8013324:	461a      	mov	r2, r3
 8013326:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801332a:	4413      	add	r3, r2
 801332c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8013330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013334:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	781b      	ldrb	r3, [r3, #0]
 801333c:	00da      	lsls	r2, r3, #3
 801333e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013342:	4413      	add	r3, r2
 8013344:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8013348:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801334c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013350:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	691b      	ldr	r3, [r3, #16]
 8013358:	b29a      	uxth	r2, r3
 801335a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801335e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8013360:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013364:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	69db      	ldr	r3, [r3, #28]
 801336c:	2b00      	cmp	r3, #0
 801336e:	f000 81fe 	beq.w	801376e <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8013372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013376:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801337a:	681a      	ldr	r2, [r3, #0]
 801337c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013380:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	781b      	ldrb	r3, [r3, #0]
 8013388:	009b      	lsls	r3, r3, #2
 801338a:	4413      	add	r3, r2
 801338c:	881b      	ldrh	r3, [r3, #0]
 801338e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8013392:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8013396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801339a:	2b00      	cmp	r3, #0
 801339c:	d005      	beq.n	80133aa <USB_EPStartXfer+0x1228>
 801339e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80133a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d10d      	bne.n	80133c6 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80133aa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80133ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	f040 81db 	bne.w	801376e <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80133b8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80133bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	f040 81d4 	bne.w	801376e <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80133c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80133ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80133ce:	681a      	ldr	r2, [r3, #0]
 80133d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80133d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	781b      	ldrb	r3, [r3, #0]
 80133dc:	009b      	lsls	r3, r3, #2
 80133de:	4413      	add	r3, r2
 80133e0:	881b      	ldrh	r3, [r3, #0]
 80133e2:	b29b      	uxth	r3, r3
 80133e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80133e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80133ec:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80133f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80133f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80133f8:	681a      	ldr	r2, [r3, #0]
 80133fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80133fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	781b      	ldrb	r3, [r3, #0]
 8013406:	009b      	lsls	r3, r3, #2
 8013408:	441a      	add	r2, r3
 801340a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 801340e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013412:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801341a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801341e:	b29b      	uxth	r3, r3
 8013420:	8013      	strh	r3, [r2, #0]
 8013422:	e1a4      	b.n	801376e <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8013424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013428:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	78db      	ldrb	r3, [r3, #3]
 8013430:	2b01      	cmp	r3, #1
 8013432:	f040 819a 	bne.w	801376a <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8013436:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801343a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	699a      	ldr	r2, [r3, #24]
 8013442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013446:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	691b      	ldr	r3, [r3, #16]
 801344e:	429a      	cmp	r2, r3
 8013450:	d917      	bls.n	8013482 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8013452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013456:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	691b      	ldr	r3, [r3, #16]
 801345e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8013462:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013466:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	699a      	ldr	r2, [r3, #24]
 801346e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013472:	1ad2      	subs	r2, r2, r3
 8013474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013478:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	619a      	str	r2, [r3, #24]
 8013480:	e00e      	b.n	80134a0 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8013482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013486:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	699b      	ldr	r3, [r3, #24]
 801348e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8013492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013496:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	2200      	movs	r2, #0
 801349e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80134a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80134a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	785b      	ldrb	r3, [r3, #1]
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d178      	bne.n	80135a2 <USB_EPStartXfer+0x1420>
 80134b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80134b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80134be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80134c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80134cc:	b29b      	uxth	r3, r3
 80134ce:	461a      	mov	r2, r3
 80134d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80134d4:	4413      	add	r3, r2
 80134d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80134da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80134de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	781b      	ldrb	r3, [r3, #0]
 80134e6:	00da      	lsls	r2, r3, #3
 80134e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80134ec:	4413      	add	r3, r2
 80134ee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80134f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80134f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80134fa:	2b3e      	cmp	r3, #62	; 0x3e
 80134fc:	d91d      	bls.n	801353a <USB_EPStartXfer+0x13b8>
 80134fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013502:	095b      	lsrs	r3, r3, #5
 8013504:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8013508:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801350c:	f003 031f 	and.w	r3, r3, #31
 8013510:	2b00      	cmp	r3, #0
 8013512:	d104      	bne.n	801351e <USB_EPStartXfer+0x139c>
 8013514:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013518:	3b01      	subs	r3, #1
 801351a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801351e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013522:	b29b      	uxth	r3, r3
 8013524:	029b      	lsls	r3, r3, #10
 8013526:	b29b      	uxth	r3, r3
 8013528:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801352c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013530:	b29a      	uxth	r2, r3
 8013532:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8013536:	801a      	strh	r2, [r3, #0]
 8013538:	e064      	b.n	8013604 <USB_EPStartXfer+0x1482>
 801353a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801353e:	2b00      	cmp	r3, #0
 8013540:	d116      	bne.n	8013570 <USB_EPStartXfer+0x13ee>
 8013542:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8013546:	881b      	ldrh	r3, [r3, #0]
 8013548:	b29b      	uxth	r3, r3
 801354a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801354e:	b29a      	uxth	r2, r3
 8013550:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8013554:	801a      	strh	r2, [r3, #0]
 8013556:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801355a:	881b      	ldrh	r3, [r3, #0]
 801355c:	b29b      	uxth	r3, r3
 801355e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013562:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013566:	b29a      	uxth	r2, r3
 8013568:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801356c:	801a      	strh	r2, [r3, #0]
 801356e:	e049      	b.n	8013604 <USB_EPStartXfer+0x1482>
 8013570:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013574:	085b      	lsrs	r3, r3, #1
 8013576:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801357a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801357e:	f003 0301 	and.w	r3, r3, #1
 8013582:	2b00      	cmp	r3, #0
 8013584:	d004      	beq.n	8013590 <USB_EPStartXfer+0x140e>
 8013586:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801358a:	3301      	adds	r3, #1
 801358c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8013590:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013594:	b29b      	uxth	r3, r3
 8013596:	029b      	lsls	r3, r3, #10
 8013598:	b29a      	uxth	r2, r3
 801359a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801359e:	801a      	strh	r2, [r3, #0]
 80135a0:	e030      	b.n	8013604 <USB_EPStartXfer+0x1482>
 80135a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80135a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	785b      	ldrb	r3, [r3, #1]
 80135ae:	2b01      	cmp	r3, #1
 80135b0:	d128      	bne.n	8013604 <USB_EPStartXfer+0x1482>
 80135b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80135b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80135c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80135c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80135ce:	b29b      	uxth	r3, r3
 80135d0:	461a      	mov	r2, r3
 80135d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80135d6:	4413      	add	r3, r2
 80135d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80135dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80135e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	781b      	ldrb	r3, [r3, #0]
 80135e8:	00da      	lsls	r2, r3, #3
 80135ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80135ee:	4413      	add	r3, r2
 80135f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80135f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80135f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80135fc:	b29a      	uxth	r2, r3
 80135fe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8013602:	801a      	strh	r2, [r3, #0]
 8013604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013608:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8013612:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013616:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	785b      	ldrb	r3, [r3, #1]
 801361e:	2b00      	cmp	r3, #0
 8013620:	d178      	bne.n	8013714 <USB_EPStartXfer+0x1592>
 8013622:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013626:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8013630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013634:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801363e:	b29b      	uxth	r3, r3
 8013640:	461a      	mov	r2, r3
 8013642:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013646:	4413      	add	r3, r2
 8013648:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801364c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013650:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	781b      	ldrb	r3, [r3, #0]
 8013658:	00da      	lsls	r2, r3, #3
 801365a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801365e:	4413      	add	r3, r2
 8013660:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8013664:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8013668:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801366c:	2b3e      	cmp	r3, #62	; 0x3e
 801366e:	d91d      	bls.n	80136ac <USB_EPStartXfer+0x152a>
 8013670:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013674:	095b      	lsrs	r3, r3, #5
 8013676:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801367a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801367e:	f003 031f 	and.w	r3, r3, #31
 8013682:	2b00      	cmp	r3, #0
 8013684:	d104      	bne.n	8013690 <USB_EPStartXfer+0x150e>
 8013686:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801368a:	3b01      	subs	r3, #1
 801368c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8013690:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013694:	b29b      	uxth	r3, r3
 8013696:	029b      	lsls	r3, r3, #10
 8013698:	b29b      	uxth	r3, r3
 801369a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801369e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80136a2:	b29a      	uxth	r2, r3
 80136a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80136a8:	801a      	strh	r2, [r3, #0]
 80136aa:	e060      	b.n	801376e <USB_EPStartXfer+0x15ec>
 80136ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d116      	bne.n	80136e2 <USB_EPStartXfer+0x1560>
 80136b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80136b8:	881b      	ldrh	r3, [r3, #0]
 80136ba:	b29b      	uxth	r3, r3
 80136bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80136c0:	b29a      	uxth	r2, r3
 80136c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80136c6:	801a      	strh	r2, [r3, #0]
 80136c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80136cc:	881b      	ldrh	r3, [r3, #0]
 80136ce:	b29b      	uxth	r3, r3
 80136d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80136d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80136d8:	b29a      	uxth	r2, r3
 80136da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80136de:	801a      	strh	r2, [r3, #0]
 80136e0:	e045      	b.n	801376e <USB_EPStartXfer+0x15ec>
 80136e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80136e6:	085b      	lsrs	r3, r3, #1
 80136e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80136ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80136f0:	f003 0301 	and.w	r3, r3, #1
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d004      	beq.n	8013702 <USB_EPStartXfer+0x1580>
 80136f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80136fc:	3301      	adds	r3, #1
 80136fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8013702:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013706:	b29b      	uxth	r3, r3
 8013708:	029b      	lsls	r3, r3, #10
 801370a:	b29a      	uxth	r2, r3
 801370c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013710:	801a      	strh	r2, [r3, #0]
 8013712:	e02c      	b.n	801376e <USB_EPStartXfer+0x15ec>
 8013714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013718:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	785b      	ldrb	r3, [r3, #1]
 8013720:	2b01      	cmp	r3, #1
 8013722:	d124      	bne.n	801376e <USB_EPStartXfer+0x15ec>
 8013724:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013728:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013732:	b29b      	uxth	r3, r3
 8013734:	461a      	mov	r2, r3
 8013736:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801373a:	4413      	add	r3, r2
 801373c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8013740:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013744:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	781b      	ldrb	r3, [r3, #0]
 801374c:	00da      	lsls	r2, r3, #3
 801374e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013752:	4413      	add	r3, r2
 8013754:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8013758:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801375c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013760:	b29a      	uxth	r2, r3
 8013762:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013766:	801a      	strh	r2, [r3, #0]
 8013768:	e001      	b.n	801376e <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 801376a:	2301      	movs	r3, #1
 801376c:	e03a      	b.n	80137e4 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801376e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013772:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013776:	681a      	ldr	r2, [r3, #0]
 8013778:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801377c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	781b      	ldrb	r3, [r3, #0]
 8013784:	009b      	lsls	r3, r3, #2
 8013786:	4413      	add	r3, r2
 8013788:	881b      	ldrh	r3, [r3, #0]
 801378a:	b29b      	uxth	r3, r3
 801378c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013794:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8013798:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801379c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80137a0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80137a4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80137a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80137ac:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80137b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80137b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80137b8:	681a      	ldr	r2, [r3, #0]
 80137ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80137be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80137c2:	681b      	ldr	r3, [r3, #0]
 80137c4:	781b      	ldrb	r3, [r3, #0]
 80137c6:	009b      	lsls	r3, r3, #2
 80137c8:	441a      	add	r2, r3
 80137ca:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80137ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80137d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80137d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80137da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80137de:	b29b      	uxth	r3, r3
 80137e0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80137e2:	2300      	movs	r3, #0
}
 80137e4:	4618      	mov	r0, r3
 80137e6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80137ea:	46bd      	mov	sp, r7
 80137ec:	bd80      	pop	{r7, pc}

080137ee <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80137ee:	b480      	push	{r7}
 80137f0:	b085      	sub	sp, #20
 80137f2:	af00      	add	r7, sp, #0
 80137f4:	6078      	str	r0, [r7, #4]
 80137f6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80137f8:	683b      	ldr	r3, [r7, #0]
 80137fa:	785b      	ldrb	r3, [r3, #1]
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d020      	beq.n	8013842 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8013800:	687a      	ldr	r2, [r7, #4]
 8013802:	683b      	ldr	r3, [r7, #0]
 8013804:	781b      	ldrb	r3, [r3, #0]
 8013806:	009b      	lsls	r3, r3, #2
 8013808:	4413      	add	r3, r2
 801380a:	881b      	ldrh	r3, [r3, #0]
 801380c:	b29b      	uxth	r3, r3
 801380e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013812:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013816:	81bb      	strh	r3, [r7, #12]
 8013818:	89bb      	ldrh	r3, [r7, #12]
 801381a:	f083 0310 	eor.w	r3, r3, #16
 801381e:	81bb      	strh	r3, [r7, #12]
 8013820:	687a      	ldr	r2, [r7, #4]
 8013822:	683b      	ldr	r3, [r7, #0]
 8013824:	781b      	ldrb	r3, [r3, #0]
 8013826:	009b      	lsls	r3, r3, #2
 8013828:	441a      	add	r2, r3
 801382a:	89bb      	ldrh	r3, [r7, #12]
 801382c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013830:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013834:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801383c:	b29b      	uxth	r3, r3
 801383e:	8013      	strh	r3, [r2, #0]
 8013840:	e01f      	b.n	8013882 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8013842:	687a      	ldr	r2, [r7, #4]
 8013844:	683b      	ldr	r3, [r7, #0]
 8013846:	781b      	ldrb	r3, [r3, #0]
 8013848:	009b      	lsls	r3, r3, #2
 801384a:	4413      	add	r3, r2
 801384c:	881b      	ldrh	r3, [r3, #0]
 801384e:	b29b      	uxth	r3, r3
 8013850:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013858:	81fb      	strh	r3, [r7, #14]
 801385a:	89fb      	ldrh	r3, [r7, #14]
 801385c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8013860:	81fb      	strh	r3, [r7, #14]
 8013862:	687a      	ldr	r2, [r7, #4]
 8013864:	683b      	ldr	r3, [r7, #0]
 8013866:	781b      	ldrb	r3, [r3, #0]
 8013868:	009b      	lsls	r3, r3, #2
 801386a:	441a      	add	r2, r3
 801386c:	89fb      	ldrh	r3, [r7, #14]
 801386e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013872:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013876:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801387a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801387e:	b29b      	uxth	r3, r3
 8013880:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8013882:	2300      	movs	r3, #0
}
 8013884:	4618      	mov	r0, r3
 8013886:	3714      	adds	r7, #20
 8013888:	46bd      	mov	sp, r7
 801388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801388e:	4770      	bx	lr

08013890 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8013890:	b480      	push	{r7}
 8013892:	b087      	sub	sp, #28
 8013894:	af00      	add	r7, sp, #0
 8013896:	6078      	str	r0, [r7, #4]
 8013898:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801389a:	683b      	ldr	r3, [r7, #0]
 801389c:	7b1b      	ldrb	r3, [r3, #12]
 801389e:	2b00      	cmp	r3, #0
 80138a0:	f040 809d 	bne.w	80139de <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80138a4:	683b      	ldr	r3, [r7, #0]
 80138a6:	785b      	ldrb	r3, [r3, #1]
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d04c      	beq.n	8013946 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80138ac:	687a      	ldr	r2, [r7, #4]
 80138ae:	683b      	ldr	r3, [r7, #0]
 80138b0:	781b      	ldrb	r3, [r3, #0]
 80138b2:	009b      	lsls	r3, r3, #2
 80138b4:	4413      	add	r3, r2
 80138b6:	881b      	ldrh	r3, [r3, #0]
 80138b8:	823b      	strh	r3, [r7, #16]
 80138ba:	8a3b      	ldrh	r3, [r7, #16]
 80138bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d01b      	beq.n	80138fc <USB_EPClearStall+0x6c>
 80138c4:	687a      	ldr	r2, [r7, #4]
 80138c6:	683b      	ldr	r3, [r7, #0]
 80138c8:	781b      	ldrb	r3, [r3, #0]
 80138ca:	009b      	lsls	r3, r3, #2
 80138cc:	4413      	add	r3, r2
 80138ce:	881b      	ldrh	r3, [r3, #0]
 80138d0:	b29b      	uxth	r3, r3
 80138d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80138d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80138da:	81fb      	strh	r3, [r7, #14]
 80138dc:	687a      	ldr	r2, [r7, #4]
 80138de:	683b      	ldr	r3, [r7, #0]
 80138e0:	781b      	ldrb	r3, [r3, #0]
 80138e2:	009b      	lsls	r3, r3, #2
 80138e4:	441a      	add	r2, r3
 80138e6:	89fb      	ldrh	r3, [r7, #14]
 80138e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80138ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80138f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80138f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80138f8:	b29b      	uxth	r3, r3
 80138fa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80138fc:	683b      	ldr	r3, [r7, #0]
 80138fe:	78db      	ldrb	r3, [r3, #3]
 8013900:	2b01      	cmp	r3, #1
 8013902:	d06c      	beq.n	80139de <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8013904:	687a      	ldr	r2, [r7, #4]
 8013906:	683b      	ldr	r3, [r7, #0]
 8013908:	781b      	ldrb	r3, [r3, #0]
 801390a:	009b      	lsls	r3, r3, #2
 801390c:	4413      	add	r3, r2
 801390e:	881b      	ldrh	r3, [r3, #0]
 8013910:	b29b      	uxth	r3, r3
 8013912:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013916:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801391a:	81bb      	strh	r3, [r7, #12]
 801391c:	89bb      	ldrh	r3, [r7, #12]
 801391e:	f083 0320 	eor.w	r3, r3, #32
 8013922:	81bb      	strh	r3, [r7, #12]
 8013924:	687a      	ldr	r2, [r7, #4]
 8013926:	683b      	ldr	r3, [r7, #0]
 8013928:	781b      	ldrb	r3, [r3, #0]
 801392a:	009b      	lsls	r3, r3, #2
 801392c:	441a      	add	r2, r3
 801392e:	89bb      	ldrh	r3, [r7, #12]
 8013930:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013934:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013938:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801393c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013940:	b29b      	uxth	r3, r3
 8013942:	8013      	strh	r3, [r2, #0]
 8013944:	e04b      	b.n	80139de <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013946:	687a      	ldr	r2, [r7, #4]
 8013948:	683b      	ldr	r3, [r7, #0]
 801394a:	781b      	ldrb	r3, [r3, #0]
 801394c:	009b      	lsls	r3, r3, #2
 801394e:	4413      	add	r3, r2
 8013950:	881b      	ldrh	r3, [r3, #0]
 8013952:	82fb      	strh	r3, [r7, #22]
 8013954:	8afb      	ldrh	r3, [r7, #22]
 8013956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801395a:	2b00      	cmp	r3, #0
 801395c:	d01b      	beq.n	8013996 <USB_EPClearStall+0x106>
 801395e:	687a      	ldr	r2, [r7, #4]
 8013960:	683b      	ldr	r3, [r7, #0]
 8013962:	781b      	ldrb	r3, [r3, #0]
 8013964:	009b      	lsls	r3, r3, #2
 8013966:	4413      	add	r3, r2
 8013968:	881b      	ldrh	r3, [r3, #0]
 801396a:	b29b      	uxth	r3, r3
 801396c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013974:	82bb      	strh	r3, [r7, #20]
 8013976:	687a      	ldr	r2, [r7, #4]
 8013978:	683b      	ldr	r3, [r7, #0]
 801397a:	781b      	ldrb	r3, [r3, #0]
 801397c:	009b      	lsls	r3, r3, #2
 801397e:	441a      	add	r2, r3
 8013980:	8abb      	ldrh	r3, [r7, #20]
 8013982:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013986:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801398a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801398e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013992:	b29b      	uxth	r3, r3
 8013994:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8013996:	687a      	ldr	r2, [r7, #4]
 8013998:	683b      	ldr	r3, [r7, #0]
 801399a:	781b      	ldrb	r3, [r3, #0]
 801399c:	009b      	lsls	r3, r3, #2
 801399e:	4413      	add	r3, r2
 80139a0:	881b      	ldrh	r3, [r3, #0]
 80139a2:	b29b      	uxth	r3, r3
 80139a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80139a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80139ac:	827b      	strh	r3, [r7, #18]
 80139ae:	8a7b      	ldrh	r3, [r7, #18]
 80139b0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80139b4:	827b      	strh	r3, [r7, #18]
 80139b6:	8a7b      	ldrh	r3, [r7, #18]
 80139b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80139bc:	827b      	strh	r3, [r7, #18]
 80139be:	687a      	ldr	r2, [r7, #4]
 80139c0:	683b      	ldr	r3, [r7, #0]
 80139c2:	781b      	ldrb	r3, [r3, #0]
 80139c4:	009b      	lsls	r3, r3, #2
 80139c6:	441a      	add	r2, r3
 80139c8:	8a7b      	ldrh	r3, [r7, #18]
 80139ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80139ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80139d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80139d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80139da:	b29b      	uxth	r3, r3
 80139dc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80139de:	2300      	movs	r3, #0
}
 80139e0:	4618      	mov	r0, r3
 80139e2:	371c      	adds	r7, #28
 80139e4:	46bd      	mov	sp, r7
 80139e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ea:	4770      	bx	lr

080139ec <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80139ec:	b480      	push	{r7}
 80139ee:	b083      	sub	sp, #12
 80139f0:	af00      	add	r7, sp, #0
 80139f2:	6078      	str	r0, [r7, #4]
 80139f4:	460b      	mov	r3, r1
 80139f6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80139f8:	78fb      	ldrb	r3, [r7, #3]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d103      	bne.n	8013a06 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	2280      	movs	r2, #128	; 0x80
 8013a02:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8013a06:	2300      	movs	r3, #0
}
 8013a08:	4618      	mov	r0, r3
 8013a0a:	370c      	adds	r7, #12
 8013a0c:	46bd      	mov	sp, r7
 8013a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a12:	4770      	bx	lr

08013a14 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8013a14:	b480      	push	{r7}
 8013a16:	b083      	sub	sp, #12
 8013a18:	af00      	add	r7, sp, #0
 8013a1a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8013a22:	b29b      	uxth	r3, r3
 8013a24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013a28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013a2c:	b29a      	uxth	r2, r3
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8013a34:	2300      	movs	r3, #0
}
 8013a36:	4618      	mov	r0, r3
 8013a38:	370c      	adds	r7, #12
 8013a3a:	46bd      	mov	sp, r7
 8013a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a40:	4770      	bx	lr

08013a42 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8013a42:	b480      	push	{r7}
 8013a44:	b085      	sub	sp, #20
 8013a46:	af00      	add	r7, sp, #0
 8013a48:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8013a50:	b29b      	uxth	r3, r3
 8013a52:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8013a54:	68fb      	ldr	r3, [r7, #12]
}
 8013a56:	4618      	mov	r0, r3
 8013a58:	3714      	adds	r7, #20
 8013a5a:	46bd      	mov	sp, r7
 8013a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a60:	4770      	bx	lr

08013a62 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8013a62:	b480      	push	{r7}
 8013a64:	b08d      	sub	sp, #52	; 0x34
 8013a66:	af00      	add	r7, sp, #0
 8013a68:	60f8      	str	r0, [r7, #12]
 8013a6a:	60b9      	str	r1, [r7, #8]
 8013a6c:	4611      	mov	r1, r2
 8013a6e:	461a      	mov	r2, r3
 8013a70:	460b      	mov	r3, r1
 8013a72:	80fb      	strh	r3, [r7, #6]
 8013a74:	4613      	mov	r3, r2
 8013a76:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8013a78:	88bb      	ldrh	r3, [r7, #4]
 8013a7a:	3301      	adds	r3, #1
 8013a7c:	085b      	lsrs	r3, r3, #1
 8013a7e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8013a84:	68bb      	ldr	r3, [r7, #8]
 8013a86:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8013a88:	88fa      	ldrh	r2, [r7, #6]
 8013a8a:	69fb      	ldr	r3, [r7, #28]
 8013a8c:	4413      	add	r3, r2
 8013a8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013a92:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8013a94:	6a3b      	ldr	r3, [r7, #32]
 8013a96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013a98:	e01b      	b.n	8013ad2 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8013a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a9c:	781b      	ldrb	r3, [r3, #0]
 8013a9e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8013aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aa2:	3301      	adds	r3, #1
 8013aa4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8013aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aa8:	781b      	ldrb	r3, [r3, #0]
 8013aaa:	b29b      	uxth	r3, r3
 8013aac:	021b      	lsls	r3, r3, #8
 8013aae:	b29b      	uxth	r3, r3
 8013ab0:	461a      	mov	r2, r3
 8013ab2:	69bb      	ldr	r3, [r7, #24]
 8013ab4:	4313      	orrs	r3, r2
 8013ab6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8013ab8:	697b      	ldr	r3, [r7, #20]
 8013aba:	b29a      	uxth	r2, r3
 8013abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013abe:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8013ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ac2:	3302      	adds	r3, #2
 8013ac4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8013ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ac8:	3301      	adds	r3, #1
 8013aca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8013acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ace:	3b01      	subs	r3, #1
 8013ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d1e0      	bne.n	8013a9a <USB_WritePMA+0x38>
  }
}
 8013ad8:	bf00      	nop
 8013ada:	bf00      	nop
 8013adc:	3734      	adds	r7, #52	; 0x34
 8013ade:	46bd      	mov	sp, r7
 8013ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ae4:	4770      	bx	lr

08013ae6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8013ae6:	b480      	push	{r7}
 8013ae8:	b08b      	sub	sp, #44	; 0x2c
 8013aea:	af00      	add	r7, sp, #0
 8013aec:	60f8      	str	r0, [r7, #12]
 8013aee:	60b9      	str	r1, [r7, #8]
 8013af0:	4611      	mov	r1, r2
 8013af2:	461a      	mov	r2, r3
 8013af4:	460b      	mov	r3, r1
 8013af6:	80fb      	strh	r3, [r7, #6]
 8013af8:	4613      	mov	r3, r2
 8013afa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8013afc:	88bb      	ldrh	r3, [r7, #4]
 8013afe:	085b      	lsrs	r3, r3, #1
 8013b00:	b29b      	uxth	r3, r3
 8013b02:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8013b08:	68bb      	ldr	r3, [r7, #8]
 8013b0a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8013b0c:	88fa      	ldrh	r2, [r7, #6]
 8013b0e:	697b      	ldr	r3, [r7, #20]
 8013b10:	4413      	add	r3, r2
 8013b12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013b16:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8013b18:	69bb      	ldr	r3, [r7, #24]
 8013b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8013b1c:	e018      	b.n	8013b50 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8013b1e:	6a3b      	ldr	r3, [r7, #32]
 8013b20:	881b      	ldrh	r3, [r3, #0]
 8013b22:	b29b      	uxth	r3, r3
 8013b24:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8013b26:	6a3b      	ldr	r3, [r7, #32]
 8013b28:	3302      	adds	r3, #2
 8013b2a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8013b2c:	693b      	ldr	r3, [r7, #16]
 8013b2e:	b2da      	uxtb	r2, r3
 8013b30:	69fb      	ldr	r3, [r7, #28]
 8013b32:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8013b34:	69fb      	ldr	r3, [r7, #28]
 8013b36:	3301      	adds	r3, #1
 8013b38:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8013b3a:	693b      	ldr	r3, [r7, #16]
 8013b3c:	0a1b      	lsrs	r3, r3, #8
 8013b3e:	b2da      	uxtb	r2, r3
 8013b40:	69fb      	ldr	r3, [r7, #28]
 8013b42:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8013b44:	69fb      	ldr	r3, [r7, #28]
 8013b46:	3301      	adds	r3, #1
 8013b48:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8013b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b4c:	3b01      	subs	r3, #1
 8013b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8013b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d1e3      	bne.n	8013b1e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8013b56:	88bb      	ldrh	r3, [r7, #4]
 8013b58:	f003 0301 	and.w	r3, r3, #1
 8013b5c:	b29b      	uxth	r3, r3
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d007      	beq.n	8013b72 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8013b62:	6a3b      	ldr	r3, [r7, #32]
 8013b64:	881b      	ldrh	r3, [r3, #0]
 8013b66:	b29b      	uxth	r3, r3
 8013b68:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8013b6a:	693b      	ldr	r3, [r7, #16]
 8013b6c:	b2da      	uxtb	r2, r3
 8013b6e:	69fb      	ldr	r3, [r7, #28]
 8013b70:	701a      	strb	r2, [r3, #0]
  }
}
 8013b72:	bf00      	nop
 8013b74:	372c      	adds	r7, #44	; 0x2c
 8013b76:	46bd      	mov	sp, r7
 8013b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b7c:	4770      	bx	lr

08013b7e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013b7e:	b580      	push	{r7, lr}
 8013b80:	b084      	sub	sp, #16
 8013b82:	af00      	add	r7, sp, #0
 8013b84:	6078      	str	r0, [r7, #4]
 8013b86:	460b      	mov	r3, r1
 8013b88:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8013b8a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8013b8e:	f004 f9c1 	bl	8017f14 <USBD_static_malloc>
 8013b92:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d105      	bne.n	8013ba6 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	2200      	movs	r2, #0
 8013b9e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8013ba2:	2302      	movs	r3, #2
 8013ba4:	e066      	b.n	8013c74 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	68fa      	ldr	r2, [r7, #12]
 8013baa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	7c1b      	ldrb	r3, [r3, #16]
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d119      	bne.n	8013bea <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8013bb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013bba:	2202      	movs	r2, #2
 8013bbc:	2181      	movs	r1, #129	; 0x81
 8013bbe:	6878      	ldr	r0, [r7, #4]
 8013bc0:	f004 f84d 	bl	8017c5e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	2201      	movs	r2, #1
 8013bc8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8013bca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013bce:	2202      	movs	r2, #2
 8013bd0:	2101      	movs	r1, #1
 8013bd2:	6878      	ldr	r0, [r7, #4]
 8013bd4:	f004 f843 	bl	8017c5e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	2201      	movs	r2, #1
 8013bdc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	2210      	movs	r2, #16
 8013be4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8013be8:	e016      	b.n	8013c18 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8013bea:	2340      	movs	r3, #64	; 0x40
 8013bec:	2202      	movs	r2, #2
 8013bee:	2181      	movs	r1, #129	; 0x81
 8013bf0:	6878      	ldr	r0, [r7, #4]
 8013bf2:	f004 f834 	bl	8017c5e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	2201      	movs	r2, #1
 8013bfa:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8013bfc:	2340      	movs	r3, #64	; 0x40
 8013bfe:	2202      	movs	r2, #2
 8013c00:	2101      	movs	r1, #1
 8013c02:	6878      	ldr	r0, [r7, #4]
 8013c04:	f004 f82b 	bl	8017c5e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	2201      	movs	r2, #1
 8013c0c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	2210      	movs	r2, #16
 8013c14:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8013c18:	2308      	movs	r3, #8
 8013c1a:	2203      	movs	r2, #3
 8013c1c:	2182      	movs	r1, #130	; 0x82
 8013c1e:	6878      	ldr	r0, [r7, #4]
 8013c20:	f004 f81d 	bl	8017c5e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	2201      	movs	r2, #1
 8013c28:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	2200      	movs	r2, #0
 8013c3a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8013c3e:	68fb      	ldr	r3, [r7, #12]
 8013c40:	2200      	movs	r2, #0
 8013c42:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	7c1b      	ldrb	r3, [r3, #16]
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d109      	bne.n	8013c62 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013c4e:	68fb      	ldr	r3, [r7, #12]
 8013c50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013c54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013c58:	2101      	movs	r1, #1
 8013c5a:	6878      	ldr	r0, [r7, #4]
 8013c5c:	f004 f8ef 	bl	8017e3e <USBD_LL_PrepareReceive>
 8013c60:	e007      	b.n	8013c72 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013c68:	2340      	movs	r3, #64	; 0x40
 8013c6a:	2101      	movs	r1, #1
 8013c6c:	6878      	ldr	r0, [r7, #4]
 8013c6e:	f004 f8e6 	bl	8017e3e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013c72:	2300      	movs	r3, #0
}
 8013c74:	4618      	mov	r0, r3
 8013c76:	3710      	adds	r7, #16
 8013c78:	46bd      	mov	sp, r7
 8013c7a:	bd80      	pop	{r7, pc}

08013c7c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013c7c:	b580      	push	{r7, lr}
 8013c7e:	b082      	sub	sp, #8
 8013c80:	af00      	add	r7, sp, #0
 8013c82:	6078      	str	r0, [r7, #4]
 8013c84:	460b      	mov	r3, r1
 8013c86:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8013c88:	2181      	movs	r1, #129	; 0x81
 8013c8a:	6878      	ldr	r0, [r7, #4]
 8013c8c:	f004 f80d 	bl	8017caa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	2200      	movs	r2, #0
 8013c94:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8013c96:	2101      	movs	r1, #1
 8013c98:	6878      	ldr	r0, [r7, #4]
 8013c9a:	f004 f806 	bl	8017caa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	2200      	movs	r2, #0
 8013ca2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8013ca6:	2182      	movs	r1, #130	; 0x82
 8013ca8:	6878      	ldr	r0, [r7, #4]
 8013caa:	f003 fffe 	bl	8017caa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	2200      	movs	r2, #0
 8013cb2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	2200      	movs	r2, #0
 8013cba:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d00e      	beq.n	8013ce6 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013cce:	685b      	ldr	r3, [r3, #4]
 8013cd0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013cd8:	4618      	mov	r0, r3
 8013cda:	f004 f929 	bl	8017f30 <USBD_static_free>
    pdev->pClassData = NULL;
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	2200      	movs	r2, #0
 8013ce2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8013ce6:	2300      	movs	r3, #0
}
 8013ce8:	4618      	mov	r0, r3
 8013cea:	3708      	adds	r7, #8
 8013cec:	46bd      	mov	sp, r7
 8013cee:	bd80      	pop	{r7, pc}

08013cf0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8013cf0:	b580      	push	{r7, lr}
 8013cf2:	b086      	sub	sp, #24
 8013cf4:	af00      	add	r7, sp, #0
 8013cf6:	6078      	str	r0, [r7, #4]
 8013cf8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013d00:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8013d02:	2300      	movs	r3, #0
 8013d04:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8013d06:	2300      	movs	r3, #0
 8013d08:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8013d0e:	693b      	ldr	r3, [r7, #16]
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d101      	bne.n	8013d18 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8013d14:	2303      	movs	r3, #3
 8013d16:	e0af      	b.n	8013e78 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013d18:	683b      	ldr	r3, [r7, #0]
 8013d1a:	781b      	ldrb	r3, [r3, #0]
 8013d1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d03f      	beq.n	8013da4 <USBD_CDC_Setup+0xb4>
 8013d24:	2b20      	cmp	r3, #32
 8013d26:	f040 809f 	bne.w	8013e68 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8013d2a:	683b      	ldr	r3, [r7, #0]
 8013d2c:	88db      	ldrh	r3, [r3, #6]
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d02e      	beq.n	8013d90 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8013d32:	683b      	ldr	r3, [r7, #0]
 8013d34:	781b      	ldrb	r3, [r3, #0]
 8013d36:	b25b      	sxtb	r3, r3
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	da16      	bge.n	8013d6a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013d42:	689b      	ldr	r3, [r3, #8]
 8013d44:	683a      	ldr	r2, [r7, #0]
 8013d46:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8013d48:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013d4a:	683a      	ldr	r2, [r7, #0]
 8013d4c:	88d2      	ldrh	r2, [r2, #6]
 8013d4e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8013d50:	683b      	ldr	r3, [r7, #0]
 8013d52:	88db      	ldrh	r3, [r3, #6]
 8013d54:	2b07      	cmp	r3, #7
 8013d56:	bf28      	it	cs
 8013d58:	2307      	movcs	r3, #7
 8013d5a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8013d5c:	693b      	ldr	r3, [r7, #16]
 8013d5e:	89fa      	ldrh	r2, [r7, #14]
 8013d60:	4619      	mov	r1, r3
 8013d62:	6878      	ldr	r0, [r7, #4]
 8013d64:	f001 fa9f 	bl	80152a6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8013d68:	e085      	b.n	8013e76 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8013d6a:	683b      	ldr	r3, [r7, #0]
 8013d6c:	785a      	ldrb	r2, [r3, #1]
 8013d6e:	693b      	ldr	r3, [r7, #16]
 8013d70:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8013d74:	683b      	ldr	r3, [r7, #0]
 8013d76:	88db      	ldrh	r3, [r3, #6]
 8013d78:	b2da      	uxtb	r2, r3
 8013d7a:	693b      	ldr	r3, [r7, #16]
 8013d7c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8013d80:	6939      	ldr	r1, [r7, #16]
 8013d82:	683b      	ldr	r3, [r7, #0]
 8013d84:	88db      	ldrh	r3, [r3, #6]
 8013d86:	461a      	mov	r2, r3
 8013d88:	6878      	ldr	r0, [r7, #4]
 8013d8a:	f001 fab8 	bl	80152fe <USBD_CtlPrepareRx>
      break;
 8013d8e:	e072      	b.n	8013e76 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013d96:	689b      	ldr	r3, [r3, #8]
 8013d98:	683a      	ldr	r2, [r7, #0]
 8013d9a:	7850      	ldrb	r0, [r2, #1]
 8013d9c:	2200      	movs	r2, #0
 8013d9e:	6839      	ldr	r1, [r7, #0]
 8013da0:	4798      	blx	r3
      break;
 8013da2:	e068      	b.n	8013e76 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013da4:	683b      	ldr	r3, [r7, #0]
 8013da6:	785b      	ldrb	r3, [r3, #1]
 8013da8:	2b0b      	cmp	r3, #11
 8013daa:	d852      	bhi.n	8013e52 <USBD_CDC_Setup+0x162>
 8013dac:	a201      	add	r2, pc, #4	; (adr r2, 8013db4 <USBD_CDC_Setup+0xc4>)
 8013dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013db2:	bf00      	nop
 8013db4:	08013de5 	.word	0x08013de5
 8013db8:	08013e61 	.word	0x08013e61
 8013dbc:	08013e53 	.word	0x08013e53
 8013dc0:	08013e53 	.word	0x08013e53
 8013dc4:	08013e53 	.word	0x08013e53
 8013dc8:	08013e53 	.word	0x08013e53
 8013dcc:	08013e53 	.word	0x08013e53
 8013dd0:	08013e53 	.word	0x08013e53
 8013dd4:	08013e53 	.word	0x08013e53
 8013dd8:	08013e53 	.word	0x08013e53
 8013ddc:	08013e0f 	.word	0x08013e0f
 8013de0:	08013e39 	.word	0x08013e39
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013dea:	b2db      	uxtb	r3, r3
 8013dec:	2b03      	cmp	r3, #3
 8013dee:	d107      	bne.n	8013e00 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8013df0:	f107 030a 	add.w	r3, r7, #10
 8013df4:	2202      	movs	r2, #2
 8013df6:	4619      	mov	r1, r3
 8013df8:	6878      	ldr	r0, [r7, #4]
 8013dfa:	f001 fa54 	bl	80152a6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013dfe:	e032      	b.n	8013e66 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8013e00:	6839      	ldr	r1, [r7, #0]
 8013e02:	6878      	ldr	r0, [r7, #4]
 8013e04:	f001 f9de 	bl	80151c4 <USBD_CtlError>
            ret = USBD_FAIL;
 8013e08:	2303      	movs	r3, #3
 8013e0a:	75fb      	strb	r3, [r7, #23]
          break;
 8013e0c:	e02b      	b.n	8013e66 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013e14:	b2db      	uxtb	r3, r3
 8013e16:	2b03      	cmp	r3, #3
 8013e18:	d107      	bne.n	8013e2a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8013e1a:	f107 030d 	add.w	r3, r7, #13
 8013e1e:	2201      	movs	r2, #1
 8013e20:	4619      	mov	r1, r3
 8013e22:	6878      	ldr	r0, [r7, #4]
 8013e24:	f001 fa3f 	bl	80152a6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013e28:	e01d      	b.n	8013e66 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8013e2a:	6839      	ldr	r1, [r7, #0]
 8013e2c:	6878      	ldr	r0, [r7, #4]
 8013e2e:	f001 f9c9 	bl	80151c4 <USBD_CtlError>
            ret = USBD_FAIL;
 8013e32:	2303      	movs	r3, #3
 8013e34:	75fb      	strb	r3, [r7, #23]
          break;
 8013e36:	e016      	b.n	8013e66 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013e3e:	b2db      	uxtb	r3, r3
 8013e40:	2b03      	cmp	r3, #3
 8013e42:	d00f      	beq.n	8013e64 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8013e44:	6839      	ldr	r1, [r7, #0]
 8013e46:	6878      	ldr	r0, [r7, #4]
 8013e48:	f001 f9bc 	bl	80151c4 <USBD_CtlError>
            ret = USBD_FAIL;
 8013e4c:	2303      	movs	r3, #3
 8013e4e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8013e50:	e008      	b.n	8013e64 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8013e52:	6839      	ldr	r1, [r7, #0]
 8013e54:	6878      	ldr	r0, [r7, #4]
 8013e56:	f001 f9b5 	bl	80151c4 <USBD_CtlError>
          ret = USBD_FAIL;
 8013e5a:	2303      	movs	r3, #3
 8013e5c:	75fb      	strb	r3, [r7, #23]
          break;
 8013e5e:	e002      	b.n	8013e66 <USBD_CDC_Setup+0x176>
          break;
 8013e60:	bf00      	nop
 8013e62:	e008      	b.n	8013e76 <USBD_CDC_Setup+0x186>
          break;
 8013e64:	bf00      	nop
      }
      break;
 8013e66:	e006      	b.n	8013e76 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8013e68:	6839      	ldr	r1, [r7, #0]
 8013e6a:	6878      	ldr	r0, [r7, #4]
 8013e6c:	f001 f9aa 	bl	80151c4 <USBD_CtlError>
      ret = USBD_FAIL;
 8013e70:	2303      	movs	r3, #3
 8013e72:	75fb      	strb	r3, [r7, #23]
      break;
 8013e74:	bf00      	nop
  }

  return (uint8_t)ret;
 8013e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8013e78:	4618      	mov	r0, r3
 8013e7a:	3718      	adds	r7, #24
 8013e7c:	46bd      	mov	sp, r7
 8013e7e:	bd80      	pop	{r7, pc}

08013e80 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013e80:	b580      	push	{r7, lr}
 8013e82:	b084      	sub	sp, #16
 8013e84:	af00      	add	r7, sp, #0
 8013e86:	6078      	str	r0, [r7, #4]
 8013e88:	460b      	mov	r3, r1
 8013e8a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013e92:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d101      	bne.n	8013ea2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8013e9e:	2303      	movs	r3, #3
 8013ea0:	e04f      	b.n	8013f42 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013ea8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8013eaa:	78fa      	ldrb	r2, [r7, #3]
 8013eac:	6879      	ldr	r1, [r7, #4]
 8013eae:	4613      	mov	r3, r2
 8013eb0:	009b      	lsls	r3, r3, #2
 8013eb2:	4413      	add	r3, r2
 8013eb4:	009b      	lsls	r3, r3, #2
 8013eb6:	440b      	add	r3, r1
 8013eb8:	3318      	adds	r3, #24
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d029      	beq.n	8013f14 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8013ec0:	78fa      	ldrb	r2, [r7, #3]
 8013ec2:	6879      	ldr	r1, [r7, #4]
 8013ec4:	4613      	mov	r3, r2
 8013ec6:	009b      	lsls	r3, r3, #2
 8013ec8:	4413      	add	r3, r2
 8013eca:	009b      	lsls	r3, r3, #2
 8013ecc:	440b      	add	r3, r1
 8013ece:	3318      	adds	r3, #24
 8013ed0:	681a      	ldr	r2, [r3, #0]
 8013ed2:	78f9      	ldrb	r1, [r7, #3]
 8013ed4:	68f8      	ldr	r0, [r7, #12]
 8013ed6:	460b      	mov	r3, r1
 8013ed8:	009b      	lsls	r3, r3, #2
 8013eda:	440b      	add	r3, r1
 8013edc:	00db      	lsls	r3, r3, #3
 8013ede:	4403      	add	r3, r0
 8013ee0:	3338      	adds	r3, #56	; 0x38
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	fbb2 f1f3 	udiv	r1, r2, r3
 8013ee8:	fb01 f303 	mul.w	r3, r1, r3
 8013eec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d110      	bne.n	8013f14 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8013ef2:	78fa      	ldrb	r2, [r7, #3]
 8013ef4:	6879      	ldr	r1, [r7, #4]
 8013ef6:	4613      	mov	r3, r2
 8013ef8:	009b      	lsls	r3, r3, #2
 8013efa:	4413      	add	r3, r2
 8013efc:	009b      	lsls	r3, r3, #2
 8013efe:	440b      	add	r3, r1
 8013f00:	3318      	adds	r3, #24
 8013f02:	2200      	movs	r2, #0
 8013f04:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8013f06:	78f9      	ldrb	r1, [r7, #3]
 8013f08:	2300      	movs	r3, #0
 8013f0a:	2200      	movs	r2, #0
 8013f0c:	6878      	ldr	r0, [r7, #4]
 8013f0e:	f003 ff75 	bl	8017dfc <USBD_LL_Transmit>
 8013f12:	e015      	b.n	8013f40 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8013f14:	68bb      	ldr	r3, [r7, #8]
 8013f16:	2200      	movs	r2, #0
 8013f18:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013f22:	691b      	ldr	r3, [r3, #16]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d00b      	beq.n	8013f40 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013f2e:	691b      	ldr	r3, [r3, #16]
 8013f30:	68ba      	ldr	r2, [r7, #8]
 8013f32:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8013f36:	68ba      	ldr	r2, [r7, #8]
 8013f38:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8013f3c:	78fa      	ldrb	r2, [r7, #3]
 8013f3e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8013f40:	2300      	movs	r3, #0
}
 8013f42:	4618      	mov	r0, r3
 8013f44:	3710      	adds	r7, #16
 8013f46:	46bd      	mov	sp, r7
 8013f48:	bd80      	pop	{r7, pc}

08013f4a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013f4a:	b580      	push	{r7, lr}
 8013f4c:	b084      	sub	sp, #16
 8013f4e:	af00      	add	r7, sp, #0
 8013f50:	6078      	str	r0, [r7, #4]
 8013f52:	460b      	mov	r3, r1
 8013f54:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013f5c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d101      	bne.n	8013f6c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8013f68:	2303      	movs	r3, #3
 8013f6a:	e015      	b.n	8013f98 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013f6c:	78fb      	ldrb	r3, [r7, #3]
 8013f6e:	4619      	mov	r1, r3
 8013f70:	6878      	ldr	r0, [r7, #4]
 8013f72:	f003 ff85 	bl	8017e80 <USBD_LL_GetRxDataSize>
 8013f76:	4602      	mov	r2, r0
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013f84:	68db      	ldr	r3, [r3, #12]
 8013f86:	68fa      	ldr	r2, [r7, #12]
 8013f88:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8013f8c:	68fa      	ldr	r2, [r7, #12]
 8013f8e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8013f92:	4611      	mov	r1, r2
 8013f94:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8013f96:	2300      	movs	r3, #0
}
 8013f98:	4618      	mov	r0, r3
 8013f9a:	3710      	adds	r7, #16
 8013f9c:	46bd      	mov	sp, r7
 8013f9e:	bd80      	pop	{r7, pc}

08013fa0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8013fa0:	b580      	push	{r7, lr}
 8013fa2:	b084      	sub	sp, #16
 8013fa4:	af00      	add	r7, sp, #0
 8013fa6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013fae:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013fb0:	68fb      	ldr	r3, [r7, #12]
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d101      	bne.n	8013fba <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8013fb6:	2303      	movs	r3, #3
 8013fb8:	e01b      	b.n	8013ff2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d015      	beq.n	8013ff0 <USBD_CDC_EP0_RxReady+0x50>
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8013fca:	2bff      	cmp	r3, #255	; 0xff
 8013fcc:	d010      	beq.n	8013ff0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013fd4:	689b      	ldr	r3, [r3, #8]
 8013fd6:	68fa      	ldr	r2, [r7, #12]
 8013fd8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8013fdc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8013fde:	68fa      	ldr	r2, [r7, #12]
 8013fe0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8013fe4:	b292      	uxth	r2, r2
 8013fe6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	22ff      	movs	r2, #255	; 0xff
 8013fec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8013ff0:	2300      	movs	r3, #0
}
 8013ff2:	4618      	mov	r0, r3
 8013ff4:	3710      	adds	r7, #16
 8013ff6:	46bd      	mov	sp, r7
 8013ff8:	bd80      	pop	{r7, pc}
	...

08013ffc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8013ffc:	b480      	push	{r7}
 8013ffe:	b083      	sub	sp, #12
 8014000:	af00      	add	r7, sp, #0
 8014002:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	2243      	movs	r2, #67	; 0x43
 8014008:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 801400a:	4b03      	ldr	r3, [pc, #12]	; (8014018 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 801400c:	4618      	mov	r0, r3
 801400e:	370c      	adds	r7, #12
 8014010:	46bd      	mov	sp, r7
 8014012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014016:	4770      	bx	lr
 8014018:	20000098 	.word	0x20000098

0801401c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801401c:	b480      	push	{r7}
 801401e:	b083      	sub	sp, #12
 8014020:	af00      	add	r7, sp, #0
 8014022:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	2243      	movs	r2, #67	; 0x43
 8014028:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 801402a:	4b03      	ldr	r3, [pc, #12]	; (8014038 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 801402c:	4618      	mov	r0, r3
 801402e:	370c      	adds	r7, #12
 8014030:	46bd      	mov	sp, r7
 8014032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014036:	4770      	bx	lr
 8014038:	20000054 	.word	0x20000054

0801403c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801403c:	b480      	push	{r7}
 801403e:	b083      	sub	sp, #12
 8014040:	af00      	add	r7, sp, #0
 8014042:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	2243      	movs	r2, #67	; 0x43
 8014048:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 801404a:	4b03      	ldr	r3, [pc, #12]	; (8014058 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 801404c:	4618      	mov	r0, r3
 801404e:	370c      	adds	r7, #12
 8014050:	46bd      	mov	sp, r7
 8014052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014056:	4770      	bx	lr
 8014058:	200000dc 	.word	0x200000dc

0801405c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801405c:	b480      	push	{r7}
 801405e:	b083      	sub	sp, #12
 8014060:	af00      	add	r7, sp, #0
 8014062:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	220a      	movs	r2, #10
 8014068:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801406a:	4b03      	ldr	r3, [pc, #12]	; (8014078 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801406c:	4618      	mov	r0, r3
 801406e:	370c      	adds	r7, #12
 8014070:	46bd      	mov	sp, r7
 8014072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014076:	4770      	bx	lr
 8014078:	20000010 	.word	0x20000010

0801407c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801407c:	b480      	push	{r7}
 801407e:	b083      	sub	sp, #12
 8014080:	af00      	add	r7, sp, #0
 8014082:	6078      	str	r0, [r7, #4]
 8014084:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8014086:	683b      	ldr	r3, [r7, #0]
 8014088:	2b00      	cmp	r3, #0
 801408a:	d101      	bne.n	8014090 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801408c:	2303      	movs	r3, #3
 801408e:	e004      	b.n	801409a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	683a      	ldr	r2, [r7, #0]
 8014094:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8014098:	2300      	movs	r3, #0
}
 801409a:	4618      	mov	r0, r3
 801409c:	370c      	adds	r7, #12
 801409e:	46bd      	mov	sp, r7
 80140a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140a4:	4770      	bx	lr

080140a6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80140a6:	b480      	push	{r7}
 80140a8:	b087      	sub	sp, #28
 80140aa:	af00      	add	r7, sp, #0
 80140ac:	60f8      	str	r0, [r7, #12]
 80140ae:	60b9      	str	r1, [r7, #8]
 80140b0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80140b2:	68fb      	ldr	r3, [r7, #12]
 80140b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80140b8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80140ba:	697b      	ldr	r3, [r7, #20]
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d101      	bne.n	80140c4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80140c0:	2303      	movs	r3, #3
 80140c2:	e008      	b.n	80140d6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80140c4:	697b      	ldr	r3, [r7, #20]
 80140c6:	68ba      	ldr	r2, [r7, #8]
 80140c8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80140cc:	697b      	ldr	r3, [r7, #20]
 80140ce:	687a      	ldr	r2, [r7, #4]
 80140d0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80140d4:	2300      	movs	r3, #0
}
 80140d6:	4618      	mov	r0, r3
 80140d8:	371c      	adds	r7, #28
 80140da:	46bd      	mov	sp, r7
 80140dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140e0:	4770      	bx	lr

080140e2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80140e2:	b480      	push	{r7}
 80140e4:	b085      	sub	sp, #20
 80140e6:	af00      	add	r7, sp, #0
 80140e8:	6078      	str	r0, [r7, #4]
 80140ea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80140f2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80140f4:	68fb      	ldr	r3, [r7, #12]
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d101      	bne.n	80140fe <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80140fa:	2303      	movs	r3, #3
 80140fc:	e004      	b.n	8014108 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	683a      	ldr	r2, [r7, #0]
 8014102:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8014106:	2300      	movs	r3, #0
}
 8014108:	4618      	mov	r0, r3
 801410a:	3714      	adds	r7, #20
 801410c:	46bd      	mov	sp, r7
 801410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014112:	4770      	bx	lr

08014114 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8014114:	b580      	push	{r7, lr}
 8014116:	b084      	sub	sp, #16
 8014118:	af00      	add	r7, sp, #0
 801411a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014122:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801412a:	2b00      	cmp	r3, #0
 801412c:	d101      	bne.n	8014132 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801412e:	2303      	movs	r3, #3
 8014130:	e016      	b.n	8014160 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	7c1b      	ldrb	r3, [r3, #16]
 8014136:	2b00      	cmp	r3, #0
 8014138:	d109      	bne.n	801414e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801413a:	68fb      	ldr	r3, [r7, #12]
 801413c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014140:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014144:	2101      	movs	r1, #1
 8014146:	6878      	ldr	r0, [r7, #4]
 8014148:	f003 fe79 	bl	8017e3e <USBD_LL_PrepareReceive>
 801414c:	e007      	b.n	801415e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014154:	2340      	movs	r3, #64	; 0x40
 8014156:	2101      	movs	r1, #1
 8014158:	6878      	ldr	r0, [r7, #4]
 801415a:	f003 fe70 	bl	8017e3e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801415e:	2300      	movs	r3, #0
}
 8014160:	4618      	mov	r0, r3
 8014162:	3710      	adds	r7, #16
 8014164:	46bd      	mov	sp, r7
 8014166:	bd80      	pop	{r7, pc}

08014168 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8014168:	b580      	push	{r7, lr}
 801416a:	b086      	sub	sp, #24
 801416c:	af00      	add	r7, sp, #0
 801416e:	60f8      	str	r0, [r7, #12]
 8014170:	60b9      	str	r1, [r7, #8]
 8014172:	4613      	mov	r3, r2
 8014174:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014176:	68fb      	ldr	r3, [r7, #12]
 8014178:	2b00      	cmp	r3, #0
 801417a:	d101      	bne.n	8014180 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801417c:	2303      	movs	r3, #3
 801417e:	e01f      	b.n	80141c0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8014180:	68fb      	ldr	r3, [r7, #12]
 8014182:	2200      	movs	r2, #0
 8014184:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	2200      	movs	r2, #0
 801418c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	2200      	movs	r2, #0
 8014194:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014198:	68bb      	ldr	r3, [r7, #8]
 801419a:	2b00      	cmp	r3, #0
 801419c:	d003      	beq.n	80141a6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	68ba      	ldr	r2, [r7, #8]
 80141a2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	2201      	movs	r2, #1
 80141aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80141ae:	68fb      	ldr	r3, [r7, #12]
 80141b0:	79fa      	ldrb	r2, [r7, #7]
 80141b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80141b4:	68f8      	ldr	r0, [r7, #12]
 80141b6:	f003 fcd7 	bl	8017b68 <USBD_LL_Init>
 80141ba:	4603      	mov	r3, r0
 80141bc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80141be:	7dfb      	ldrb	r3, [r7, #23]
}
 80141c0:	4618      	mov	r0, r3
 80141c2:	3718      	adds	r7, #24
 80141c4:	46bd      	mov	sp, r7
 80141c6:	bd80      	pop	{r7, pc}

080141c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80141c8:	b580      	push	{r7, lr}
 80141ca:	b084      	sub	sp, #16
 80141cc:	af00      	add	r7, sp, #0
 80141ce:	6078      	str	r0, [r7, #4]
 80141d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80141d2:	2300      	movs	r3, #0
 80141d4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80141d6:	683b      	ldr	r3, [r7, #0]
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d101      	bne.n	80141e0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80141dc:	2303      	movs	r3, #3
 80141de:	e016      	b.n	801420e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	683a      	ldr	r2, [r7, #0]
 80141e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80141ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d00b      	beq.n	801420c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80141fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141fc:	f107 020e 	add.w	r2, r7, #14
 8014200:	4610      	mov	r0, r2
 8014202:	4798      	blx	r3
 8014204:	4602      	mov	r2, r0
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 801420c:	2300      	movs	r3, #0
}
 801420e:	4618      	mov	r0, r3
 8014210:	3710      	adds	r7, #16
 8014212:	46bd      	mov	sp, r7
 8014214:	bd80      	pop	{r7, pc}

08014216 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8014216:	b580      	push	{r7, lr}
 8014218:	b082      	sub	sp, #8
 801421a:	af00      	add	r7, sp, #0
 801421c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801421e:	6878      	ldr	r0, [r7, #4]
 8014220:	f003 fd02 	bl	8017c28 <USBD_LL_Start>
 8014224:	4603      	mov	r3, r0
}
 8014226:	4618      	mov	r0, r3
 8014228:	3708      	adds	r7, #8
 801422a:	46bd      	mov	sp, r7
 801422c:	bd80      	pop	{r7, pc}

0801422e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801422e:	b480      	push	{r7}
 8014230:	b083      	sub	sp, #12
 8014232:	af00      	add	r7, sp, #0
 8014234:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014236:	2300      	movs	r3, #0
}
 8014238:	4618      	mov	r0, r3
 801423a:	370c      	adds	r7, #12
 801423c:	46bd      	mov	sp, r7
 801423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014242:	4770      	bx	lr

08014244 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014244:	b580      	push	{r7, lr}
 8014246:	b084      	sub	sp, #16
 8014248:	af00      	add	r7, sp, #0
 801424a:	6078      	str	r0, [r7, #4]
 801424c:	460b      	mov	r3, r1
 801424e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8014250:	2303      	movs	r3, #3
 8014252:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801425a:	2b00      	cmp	r3, #0
 801425c:	d009      	beq.n	8014272 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014264:	681b      	ldr	r3, [r3, #0]
 8014266:	78fa      	ldrb	r2, [r7, #3]
 8014268:	4611      	mov	r1, r2
 801426a:	6878      	ldr	r0, [r7, #4]
 801426c:	4798      	blx	r3
 801426e:	4603      	mov	r3, r0
 8014270:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8014272:	7bfb      	ldrb	r3, [r7, #15]
}
 8014274:	4618      	mov	r0, r3
 8014276:	3710      	adds	r7, #16
 8014278:	46bd      	mov	sp, r7
 801427a:	bd80      	pop	{r7, pc}

0801427c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801427c:	b580      	push	{r7, lr}
 801427e:	b082      	sub	sp, #8
 8014280:	af00      	add	r7, sp, #0
 8014282:	6078      	str	r0, [r7, #4]
 8014284:	460b      	mov	r3, r1
 8014286:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801428e:	2b00      	cmp	r3, #0
 8014290:	d007      	beq.n	80142a2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014298:	685b      	ldr	r3, [r3, #4]
 801429a:	78fa      	ldrb	r2, [r7, #3]
 801429c:	4611      	mov	r1, r2
 801429e:	6878      	ldr	r0, [r7, #4]
 80142a0:	4798      	blx	r3
  }

  return USBD_OK;
 80142a2:	2300      	movs	r3, #0
}
 80142a4:	4618      	mov	r0, r3
 80142a6:	3708      	adds	r7, #8
 80142a8:	46bd      	mov	sp, r7
 80142aa:	bd80      	pop	{r7, pc}

080142ac <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80142ac:	b580      	push	{r7, lr}
 80142ae:	b084      	sub	sp, #16
 80142b0:	af00      	add	r7, sp, #0
 80142b2:	6078      	str	r0, [r7, #4]
 80142b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80142bc:	6839      	ldr	r1, [r7, #0]
 80142be:	4618      	mov	r0, r3
 80142c0:	f000 ff46 	bl	8015150 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	2201      	movs	r2, #1
 80142c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80142d2:	461a      	mov	r2, r3
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80142e0:	f003 031f 	and.w	r3, r3, #31
 80142e4:	2b02      	cmp	r3, #2
 80142e6:	d01a      	beq.n	801431e <USBD_LL_SetupStage+0x72>
 80142e8:	2b02      	cmp	r3, #2
 80142ea:	d822      	bhi.n	8014332 <USBD_LL_SetupStage+0x86>
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d002      	beq.n	80142f6 <USBD_LL_SetupStage+0x4a>
 80142f0:	2b01      	cmp	r3, #1
 80142f2:	d00a      	beq.n	801430a <USBD_LL_SetupStage+0x5e>
 80142f4:	e01d      	b.n	8014332 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80142fc:	4619      	mov	r1, r3
 80142fe:	6878      	ldr	r0, [r7, #4]
 8014300:	f000 f9ee 	bl	80146e0 <USBD_StdDevReq>
 8014304:	4603      	mov	r3, r0
 8014306:	73fb      	strb	r3, [r7, #15]
      break;
 8014308:	e020      	b.n	801434c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014310:	4619      	mov	r1, r3
 8014312:	6878      	ldr	r0, [r7, #4]
 8014314:	f000 fa52 	bl	80147bc <USBD_StdItfReq>
 8014318:	4603      	mov	r3, r0
 801431a:	73fb      	strb	r3, [r7, #15]
      break;
 801431c:	e016      	b.n	801434c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014324:	4619      	mov	r1, r3
 8014326:	6878      	ldr	r0, [r7, #4]
 8014328:	f000 fa91 	bl	801484e <USBD_StdEPReq>
 801432c:	4603      	mov	r3, r0
 801432e:	73fb      	strb	r3, [r7, #15]
      break;
 8014330:	e00c      	b.n	801434c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014338:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801433c:	b2db      	uxtb	r3, r3
 801433e:	4619      	mov	r1, r3
 8014340:	6878      	ldr	r0, [r7, #4]
 8014342:	f003 fcd1 	bl	8017ce8 <USBD_LL_StallEP>
 8014346:	4603      	mov	r3, r0
 8014348:	73fb      	strb	r3, [r7, #15]
      break;
 801434a:	bf00      	nop
  }

  return ret;
 801434c:	7bfb      	ldrb	r3, [r7, #15]
}
 801434e:	4618      	mov	r0, r3
 8014350:	3710      	adds	r7, #16
 8014352:	46bd      	mov	sp, r7
 8014354:	bd80      	pop	{r7, pc}

08014356 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8014356:	b580      	push	{r7, lr}
 8014358:	b086      	sub	sp, #24
 801435a:	af00      	add	r7, sp, #0
 801435c:	60f8      	str	r0, [r7, #12]
 801435e:	460b      	mov	r3, r1
 8014360:	607a      	str	r2, [r7, #4]
 8014362:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8014364:	7afb      	ldrb	r3, [r7, #11]
 8014366:	2b00      	cmp	r3, #0
 8014368:	d138      	bne.n	80143dc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 801436a:	68fb      	ldr	r3, [r7, #12]
 801436c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8014370:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8014372:	68fb      	ldr	r3, [r7, #12]
 8014374:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014378:	2b03      	cmp	r3, #3
 801437a:	d14a      	bne.n	8014412 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 801437c:	693b      	ldr	r3, [r7, #16]
 801437e:	689a      	ldr	r2, [r3, #8]
 8014380:	693b      	ldr	r3, [r7, #16]
 8014382:	68db      	ldr	r3, [r3, #12]
 8014384:	429a      	cmp	r2, r3
 8014386:	d913      	bls.n	80143b0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8014388:	693b      	ldr	r3, [r7, #16]
 801438a:	689a      	ldr	r2, [r3, #8]
 801438c:	693b      	ldr	r3, [r7, #16]
 801438e:	68db      	ldr	r3, [r3, #12]
 8014390:	1ad2      	subs	r2, r2, r3
 8014392:	693b      	ldr	r3, [r7, #16]
 8014394:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8014396:	693b      	ldr	r3, [r7, #16]
 8014398:	68da      	ldr	r2, [r3, #12]
 801439a:	693b      	ldr	r3, [r7, #16]
 801439c:	689b      	ldr	r3, [r3, #8]
 801439e:	4293      	cmp	r3, r2
 80143a0:	bf28      	it	cs
 80143a2:	4613      	movcs	r3, r2
 80143a4:	461a      	mov	r2, r3
 80143a6:	6879      	ldr	r1, [r7, #4]
 80143a8:	68f8      	ldr	r0, [r7, #12]
 80143aa:	f000 ffc5 	bl	8015338 <USBD_CtlContinueRx>
 80143ae:	e030      	b.n	8014412 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80143b6:	b2db      	uxtb	r3, r3
 80143b8:	2b03      	cmp	r3, #3
 80143ba:	d10b      	bne.n	80143d4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80143bc:	68fb      	ldr	r3, [r7, #12]
 80143be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80143c2:	691b      	ldr	r3, [r3, #16]
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d005      	beq.n	80143d4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80143ce:	691b      	ldr	r3, [r3, #16]
 80143d0:	68f8      	ldr	r0, [r7, #12]
 80143d2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80143d4:	68f8      	ldr	r0, [r7, #12]
 80143d6:	f000 ffc0 	bl	801535a <USBD_CtlSendStatus>
 80143da:	e01a      	b.n	8014412 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80143dc:	68fb      	ldr	r3, [r7, #12]
 80143de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80143e2:	b2db      	uxtb	r3, r3
 80143e4:	2b03      	cmp	r3, #3
 80143e6:	d114      	bne.n	8014412 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80143ee:	699b      	ldr	r3, [r3, #24]
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d00e      	beq.n	8014412 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80143f4:	68fb      	ldr	r3, [r7, #12]
 80143f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80143fa:	699b      	ldr	r3, [r3, #24]
 80143fc:	7afa      	ldrb	r2, [r7, #11]
 80143fe:	4611      	mov	r1, r2
 8014400:	68f8      	ldr	r0, [r7, #12]
 8014402:	4798      	blx	r3
 8014404:	4603      	mov	r3, r0
 8014406:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8014408:	7dfb      	ldrb	r3, [r7, #23]
 801440a:	2b00      	cmp	r3, #0
 801440c:	d001      	beq.n	8014412 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 801440e:	7dfb      	ldrb	r3, [r7, #23]
 8014410:	e000      	b.n	8014414 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8014412:	2300      	movs	r3, #0
}
 8014414:	4618      	mov	r0, r3
 8014416:	3718      	adds	r7, #24
 8014418:	46bd      	mov	sp, r7
 801441a:	bd80      	pop	{r7, pc}

0801441c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801441c:	b580      	push	{r7, lr}
 801441e:	b086      	sub	sp, #24
 8014420:	af00      	add	r7, sp, #0
 8014422:	60f8      	str	r0, [r7, #12]
 8014424:	460b      	mov	r3, r1
 8014426:	607a      	str	r2, [r7, #4]
 8014428:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801442a:	7afb      	ldrb	r3, [r7, #11]
 801442c:	2b00      	cmp	r3, #0
 801442e:	d16b      	bne.n	8014508 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8014430:	68fb      	ldr	r3, [r7, #12]
 8014432:	3314      	adds	r3, #20
 8014434:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8014436:	68fb      	ldr	r3, [r7, #12]
 8014438:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801443c:	2b02      	cmp	r3, #2
 801443e:	d156      	bne.n	80144ee <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8014440:	693b      	ldr	r3, [r7, #16]
 8014442:	689a      	ldr	r2, [r3, #8]
 8014444:	693b      	ldr	r3, [r7, #16]
 8014446:	68db      	ldr	r3, [r3, #12]
 8014448:	429a      	cmp	r2, r3
 801444a:	d914      	bls.n	8014476 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801444c:	693b      	ldr	r3, [r7, #16]
 801444e:	689a      	ldr	r2, [r3, #8]
 8014450:	693b      	ldr	r3, [r7, #16]
 8014452:	68db      	ldr	r3, [r3, #12]
 8014454:	1ad2      	subs	r2, r2, r3
 8014456:	693b      	ldr	r3, [r7, #16]
 8014458:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801445a:	693b      	ldr	r3, [r7, #16]
 801445c:	689b      	ldr	r3, [r3, #8]
 801445e:	461a      	mov	r2, r3
 8014460:	6879      	ldr	r1, [r7, #4]
 8014462:	68f8      	ldr	r0, [r7, #12]
 8014464:	f000 ff3a 	bl	80152dc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014468:	2300      	movs	r3, #0
 801446a:	2200      	movs	r2, #0
 801446c:	2100      	movs	r1, #0
 801446e:	68f8      	ldr	r0, [r7, #12]
 8014470:	f003 fce5 	bl	8017e3e <USBD_LL_PrepareReceive>
 8014474:	e03b      	b.n	80144ee <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8014476:	693b      	ldr	r3, [r7, #16]
 8014478:	68da      	ldr	r2, [r3, #12]
 801447a:	693b      	ldr	r3, [r7, #16]
 801447c:	689b      	ldr	r3, [r3, #8]
 801447e:	429a      	cmp	r2, r3
 8014480:	d11c      	bne.n	80144bc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8014482:	693b      	ldr	r3, [r7, #16]
 8014484:	685a      	ldr	r2, [r3, #4]
 8014486:	693b      	ldr	r3, [r7, #16]
 8014488:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801448a:	429a      	cmp	r2, r3
 801448c:	d316      	bcc.n	80144bc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801448e:	693b      	ldr	r3, [r7, #16]
 8014490:	685a      	ldr	r2, [r3, #4]
 8014492:	68fb      	ldr	r3, [r7, #12]
 8014494:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8014498:	429a      	cmp	r2, r3
 801449a:	d20f      	bcs.n	80144bc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801449c:	2200      	movs	r2, #0
 801449e:	2100      	movs	r1, #0
 80144a0:	68f8      	ldr	r0, [r7, #12]
 80144a2:	f000 ff1b 	bl	80152dc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80144a6:	68fb      	ldr	r3, [r7, #12]
 80144a8:	2200      	movs	r2, #0
 80144aa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80144ae:	2300      	movs	r3, #0
 80144b0:	2200      	movs	r2, #0
 80144b2:	2100      	movs	r1, #0
 80144b4:	68f8      	ldr	r0, [r7, #12]
 80144b6:	f003 fcc2 	bl	8017e3e <USBD_LL_PrepareReceive>
 80144ba:	e018      	b.n	80144ee <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80144c2:	b2db      	uxtb	r3, r3
 80144c4:	2b03      	cmp	r3, #3
 80144c6:	d10b      	bne.n	80144e0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80144c8:	68fb      	ldr	r3, [r7, #12]
 80144ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80144ce:	68db      	ldr	r3, [r3, #12]
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d005      	beq.n	80144e0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80144da:	68db      	ldr	r3, [r3, #12]
 80144dc:	68f8      	ldr	r0, [r7, #12]
 80144de:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80144e0:	2180      	movs	r1, #128	; 0x80
 80144e2:	68f8      	ldr	r0, [r7, #12]
 80144e4:	f003 fc00 	bl	8017ce8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80144e8:	68f8      	ldr	r0, [r7, #12]
 80144ea:	f000 ff49 	bl	8015380 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80144ee:	68fb      	ldr	r3, [r7, #12]
 80144f0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80144f4:	2b01      	cmp	r3, #1
 80144f6:	d122      	bne.n	801453e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80144f8:	68f8      	ldr	r0, [r7, #12]
 80144fa:	f7ff fe98 	bl	801422e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80144fe:	68fb      	ldr	r3, [r7, #12]
 8014500:	2200      	movs	r2, #0
 8014502:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8014506:	e01a      	b.n	801453e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014508:	68fb      	ldr	r3, [r7, #12]
 801450a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801450e:	b2db      	uxtb	r3, r3
 8014510:	2b03      	cmp	r3, #3
 8014512:	d114      	bne.n	801453e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8014514:	68fb      	ldr	r3, [r7, #12]
 8014516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801451a:	695b      	ldr	r3, [r3, #20]
 801451c:	2b00      	cmp	r3, #0
 801451e:	d00e      	beq.n	801453e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8014520:	68fb      	ldr	r3, [r7, #12]
 8014522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014526:	695b      	ldr	r3, [r3, #20]
 8014528:	7afa      	ldrb	r2, [r7, #11]
 801452a:	4611      	mov	r1, r2
 801452c:	68f8      	ldr	r0, [r7, #12]
 801452e:	4798      	blx	r3
 8014530:	4603      	mov	r3, r0
 8014532:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8014534:	7dfb      	ldrb	r3, [r7, #23]
 8014536:	2b00      	cmp	r3, #0
 8014538:	d001      	beq.n	801453e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 801453a:	7dfb      	ldrb	r3, [r7, #23]
 801453c:	e000      	b.n	8014540 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 801453e:	2300      	movs	r3, #0
}
 8014540:	4618      	mov	r0, r3
 8014542:	3718      	adds	r7, #24
 8014544:	46bd      	mov	sp, r7
 8014546:	bd80      	pop	{r7, pc}

08014548 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8014548:	b580      	push	{r7, lr}
 801454a:	b082      	sub	sp, #8
 801454c:	af00      	add	r7, sp, #0
 801454e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	2201      	movs	r2, #1
 8014554:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	2200      	movs	r2, #0
 801455c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	2200      	movs	r2, #0
 8014564:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	2200      	movs	r2, #0
 801456a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014574:	2b00      	cmp	r3, #0
 8014576:	d101      	bne.n	801457c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8014578:	2303      	movs	r3, #3
 801457a:	e02f      	b.n	80145dc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014582:	2b00      	cmp	r3, #0
 8014584:	d00f      	beq.n	80145a6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801458c:	685b      	ldr	r3, [r3, #4]
 801458e:	2b00      	cmp	r3, #0
 8014590:	d009      	beq.n	80145a6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014598:	685b      	ldr	r3, [r3, #4]
 801459a:	687a      	ldr	r2, [r7, #4]
 801459c:	6852      	ldr	r2, [r2, #4]
 801459e:	b2d2      	uxtb	r2, r2
 80145a0:	4611      	mov	r1, r2
 80145a2:	6878      	ldr	r0, [r7, #4]
 80145a4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80145a6:	2340      	movs	r3, #64	; 0x40
 80145a8:	2200      	movs	r2, #0
 80145aa:	2100      	movs	r1, #0
 80145ac:	6878      	ldr	r0, [r7, #4]
 80145ae:	f003 fb56 	bl	8017c5e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	2201      	movs	r2, #1
 80145b6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	2240      	movs	r2, #64	; 0x40
 80145be:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80145c2:	2340      	movs	r3, #64	; 0x40
 80145c4:	2200      	movs	r2, #0
 80145c6:	2180      	movs	r1, #128	; 0x80
 80145c8:	6878      	ldr	r0, [r7, #4]
 80145ca:	f003 fb48 	bl	8017c5e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	2201      	movs	r2, #1
 80145d2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	2240      	movs	r2, #64	; 0x40
 80145d8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80145da:	2300      	movs	r3, #0
}
 80145dc:	4618      	mov	r0, r3
 80145de:	3708      	adds	r7, #8
 80145e0:	46bd      	mov	sp, r7
 80145e2:	bd80      	pop	{r7, pc}

080145e4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80145e4:	b480      	push	{r7}
 80145e6:	b083      	sub	sp, #12
 80145e8:	af00      	add	r7, sp, #0
 80145ea:	6078      	str	r0, [r7, #4]
 80145ec:	460b      	mov	r3, r1
 80145ee:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	78fa      	ldrb	r2, [r7, #3]
 80145f4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80145f6:	2300      	movs	r3, #0
}
 80145f8:	4618      	mov	r0, r3
 80145fa:	370c      	adds	r7, #12
 80145fc:	46bd      	mov	sp, r7
 80145fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014602:	4770      	bx	lr

08014604 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8014604:	b480      	push	{r7}
 8014606:	b083      	sub	sp, #12
 8014608:	af00      	add	r7, sp, #0
 801460a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014612:	b2da      	uxtb	r2, r3
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	2204      	movs	r2, #4
 801461e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8014622:	2300      	movs	r3, #0
}
 8014624:	4618      	mov	r0, r3
 8014626:	370c      	adds	r7, #12
 8014628:	46bd      	mov	sp, r7
 801462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801462e:	4770      	bx	lr

08014630 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8014630:	b480      	push	{r7}
 8014632:	b083      	sub	sp, #12
 8014634:	af00      	add	r7, sp, #0
 8014636:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801463e:	b2db      	uxtb	r3, r3
 8014640:	2b04      	cmp	r3, #4
 8014642:	d106      	bne.n	8014652 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801464a:	b2da      	uxtb	r2, r3
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8014652:	2300      	movs	r3, #0
}
 8014654:	4618      	mov	r0, r3
 8014656:	370c      	adds	r7, #12
 8014658:	46bd      	mov	sp, r7
 801465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801465e:	4770      	bx	lr

08014660 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8014660:	b580      	push	{r7, lr}
 8014662:	b082      	sub	sp, #8
 8014664:	af00      	add	r7, sp, #0
 8014666:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801466e:	2b00      	cmp	r3, #0
 8014670:	d101      	bne.n	8014676 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8014672:	2303      	movs	r3, #3
 8014674:	e012      	b.n	801469c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801467c:	b2db      	uxtb	r3, r3
 801467e:	2b03      	cmp	r3, #3
 8014680:	d10b      	bne.n	801469a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014688:	69db      	ldr	r3, [r3, #28]
 801468a:	2b00      	cmp	r3, #0
 801468c:	d005      	beq.n	801469a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014694:	69db      	ldr	r3, [r3, #28]
 8014696:	6878      	ldr	r0, [r7, #4]
 8014698:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801469a:	2300      	movs	r3, #0
}
 801469c:	4618      	mov	r0, r3
 801469e:	3708      	adds	r7, #8
 80146a0:	46bd      	mov	sp, r7
 80146a2:	bd80      	pop	{r7, pc}

080146a4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80146a4:	b480      	push	{r7}
 80146a6:	b087      	sub	sp, #28
 80146a8:	af00      	add	r7, sp, #0
 80146aa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80146b0:	697b      	ldr	r3, [r7, #20]
 80146b2:	781b      	ldrb	r3, [r3, #0]
 80146b4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80146b6:	697b      	ldr	r3, [r7, #20]
 80146b8:	3301      	adds	r3, #1
 80146ba:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80146bc:	697b      	ldr	r3, [r7, #20]
 80146be:	781b      	ldrb	r3, [r3, #0]
 80146c0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80146c2:	8a3b      	ldrh	r3, [r7, #16]
 80146c4:	021b      	lsls	r3, r3, #8
 80146c6:	b21a      	sxth	r2, r3
 80146c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80146cc:	4313      	orrs	r3, r2
 80146ce:	b21b      	sxth	r3, r3
 80146d0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80146d2:	89fb      	ldrh	r3, [r7, #14]
}
 80146d4:	4618      	mov	r0, r3
 80146d6:	371c      	adds	r7, #28
 80146d8:	46bd      	mov	sp, r7
 80146da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146de:	4770      	bx	lr

080146e0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80146e0:	b580      	push	{r7, lr}
 80146e2:	b084      	sub	sp, #16
 80146e4:	af00      	add	r7, sp, #0
 80146e6:	6078      	str	r0, [r7, #4]
 80146e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80146ea:	2300      	movs	r3, #0
 80146ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80146ee:	683b      	ldr	r3, [r7, #0]
 80146f0:	781b      	ldrb	r3, [r3, #0]
 80146f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80146f6:	2b40      	cmp	r3, #64	; 0x40
 80146f8:	d005      	beq.n	8014706 <USBD_StdDevReq+0x26>
 80146fa:	2b40      	cmp	r3, #64	; 0x40
 80146fc:	d853      	bhi.n	80147a6 <USBD_StdDevReq+0xc6>
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d00b      	beq.n	801471a <USBD_StdDevReq+0x3a>
 8014702:	2b20      	cmp	r3, #32
 8014704:	d14f      	bne.n	80147a6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801470c:	689b      	ldr	r3, [r3, #8]
 801470e:	6839      	ldr	r1, [r7, #0]
 8014710:	6878      	ldr	r0, [r7, #4]
 8014712:	4798      	blx	r3
 8014714:	4603      	mov	r3, r0
 8014716:	73fb      	strb	r3, [r7, #15]
      break;
 8014718:	e04a      	b.n	80147b0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801471a:	683b      	ldr	r3, [r7, #0]
 801471c:	785b      	ldrb	r3, [r3, #1]
 801471e:	2b09      	cmp	r3, #9
 8014720:	d83b      	bhi.n	801479a <USBD_StdDevReq+0xba>
 8014722:	a201      	add	r2, pc, #4	; (adr r2, 8014728 <USBD_StdDevReq+0x48>)
 8014724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014728:	0801477d 	.word	0x0801477d
 801472c:	08014791 	.word	0x08014791
 8014730:	0801479b 	.word	0x0801479b
 8014734:	08014787 	.word	0x08014787
 8014738:	0801479b 	.word	0x0801479b
 801473c:	0801475b 	.word	0x0801475b
 8014740:	08014751 	.word	0x08014751
 8014744:	0801479b 	.word	0x0801479b
 8014748:	08014773 	.word	0x08014773
 801474c:	08014765 	.word	0x08014765
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8014750:	6839      	ldr	r1, [r7, #0]
 8014752:	6878      	ldr	r0, [r7, #4]
 8014754:	f000 f9de 	bl	8014b14 <USBD_GetDescriptor>
          break;
 8014758:	e024      	b.n	80147a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801475a:	6839      	ldr	r1, [r7, #0]
 801475c:	6878      	ldr	r0, [r7, #4]
 801475e:	f000 fb6d 	bl	8014e3c <USBD_SetAddress>
          break;
 8014762:	e01f      	b.n	80147a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8014764:	6839      	ldr	r1, [r7, #0]
 8014766:	6878      	ldr	r0, [r7, #4]
 8014768:	f000 fbac 	bl	8014ec4 <USBD_SetConfig>
 801476c:	4603      	mov	r3, r0
 801476e:	73fb      	strb	r3, [r7, #15]
          break;
 8014770:	e018      	b.n	80147a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8014772:	6839      	ldr	r1, [r7, #0]
 8014774:	6878      	ldr	r0, [r7, #4]
 8014776:	f000 fc4b 	bl	8015010 <USBD_GetConfig>
          break;
 801477a:	e013      	b.n	80147a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801477c:	6839      	ldr	r1, [r7, #0]
 801477e:	6878      	ldr	r0, [r7, #4]
 8014780:	f000 fc7c 	bl	801507c <USBD_GetStatus>
          break;
 8014784:	e00e      	b.n	80147a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8014786:	6839      	ldr	r1, [r7, #0]
 8014788:	6878      	ldr	r0, [r7, #4]
 801478a:	f000 fcab 	bl	80150e4 <USBD_SetFeature>
          break;
 801478e:	e009      	b.n	80147a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014790:	6839      	ldr	r1, [r7, #0]
 8014792:	6878      	ldr	r0, [r7, #4]
 8014794:	f000 fcba 	bl	801510c <USBD_ClrFeature>
          break;
 8014798:	e004      	b.n	80147a4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 801479a:	6839      	ldr	r1, [r7, #0]
 801479c:	6878      	ldr	r0, [r7, #4]
 801479e:	f000 fd11 	bl	80151c4 <USBD_CtlError>
          break;
 80147a2:	bf00      	nop
      }
      break;
 80147a4:	e004      	b.n	80147b0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80147a6:	6839      	ldr	r1, [r7, #0]
 80147a8:	6878      	ldr	r0, [r7, #4]
 80147aa:	f000 fd0b 	bl	80151c4 <USBD_CtlError>
      break;
 80147ae:	bf00      	nop
  }

  return ret;
 80147b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80147b2:	4618      	mov	r0, r3
 80147b4:	3710      	adds	r7, #16
 80147b6:	46bd      	mov	sp, r7
 80147b8:	bd80      	pop	{r7, pc}
 80147ba:	bf00      	nop

080147bc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80147bc:	b580      	push	{r7, lr}
 80147be:	b084      	sub	sp, #16
 80147c0:	af00      	add	r7, sp, #0
 80147c2:	6078      	str	r0, [r7, #4]
 80147c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80147c6:	2300      	movs	r3, #0
 80147c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80147ca:	683b      	ldr	r3, [r7, #0]
 80147cc:	781b      	ldrb	r3, [r3, #0]
 80147ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80147d2:	2b40      	cmp	r3, #64	; 0x40
 80147d4:	d005      	beq.n	80147e2 <USBD_StdItfReq+0x26>
 80147d6:	2b40      	cmp	r3, #64	; 0x40
 80147d8:	d82f      	bhi.n	801483a <USBD_StdItfReq+0x7e>
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d001      	beq.n	80147e2 <USBD_StdItfReq+0x26>
 80147de:	2b20      	cmp	r3, #32
 80147e0:	d12b      	bne.n	801483a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80147e8:	b2db      	uxtb	r3, r3
 80147ea:	3b01      	subs	r3, #1
 80147ec:	2b02      	cmp	r3, #2
 80147ee:	d81d      	bhi.n	801482c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80147f0:	683b      	ldr	r3, [r7, #0]
 80147f2:	889b      	ldrh	r3, [r3, #4]
 80147f4:	b2db      	uxtb	r3, r3
 80147f6:	2b01      	cmp	r3, #1
 80147f8:	d813      	bhi.n	8014822 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014800:	689b      	ldr	r3, [r3, #8]
 8014802:	6839      	ldr	r1, [r7, #0]
 8014804:	6878      	ldr	r0, [r7, #4]
 8014806:	4798      	blx	r3
 8014808:	4603      	mov	r3, r0
 801480a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801480c:	683b      	ldr	r3, [r7, #0]
 801480e:	88db      	ldrh	r3, [r3, #6]
 8014810:	2b00      	cmp	r3, #0
 8014812:	d110      	bne.n	8014836 <USBD_StdItfReq+0x7a>
 8014814:	7bfb      	ldrb	r3, [r7, #15]
 8014816:	2b00      	cmp	r3, #0
 8014818:	d10d      	bne.n	8014836 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 801481a:	6878      	ldr	r0, [r7, #4]
 801481c:	f000 fd9d 	bl	801535a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8014820:	e009      	b.n	8014836 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8014822:	6839      	ldr	r1, [r7, #0]
 8014824:	6878      	ldr	r0, [r7, #4]
 8014826:	f000 fccd 	bl	80151c4 <USBD_CtlError>
          break;
 801482a:	e004      	b.n	8014836 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 801482c:	6839      	ldr	r1, [r7, #0]
 801482e:	6878      	ldr	r0, [r7, #4]
 8014830:	f000 fcc8 	bl	80151c4 <USBD_CtlError>
          break;
 8014834:	e000      	b.n	8014838 <USBD_StdItfReq+0x7c>
          break;
 8014836:	bf00      	nop
      }
      break;
 8014838:	e004      	b.n	8014844 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 801483a:	6839      	ldr	r1, [r7, #0]
 801483c:	6878      	ldr	r0, [r7, #4]
 801483e:	f000 fcc1 	bl	80151c4 <USBD_CtlError>
      break;
 8014842:	bf00      	nop
  }

  return ret;
 8014844:	7bfb      	ldrb	r3, [r7, #15]
}
 8014846:	4618      	mov	r0, r3
 8014848:	3710      	adds	r7, #16
 801484a:	46bd      	mov	sp, r7
 801484c:	bd80      	pop	{r7, pc}

0801484e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801484e:	b580      	push	{r7, lr}
 8014850:	b084      	sub	sp, #16
 8014852:	af00      	add	r7, sp, #0
 8014854:	6078      	str	r0, [r7, #4]
 8014856:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8014858:	2300      	movs	r3, #0
 801485a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 801485c:	683b      	ldr	r3, [r7, #0]
 801485e:	889b      	ldrh	r3, [r3, #4]
 8014860:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014862:	683b      	ldr	r3, [r7, #0]
 8014864:	781b      	ldrb	r3, [r3, #0]
 8014866:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801486a:	2b40      	cmp	r3, #64	; 0x40
 801486c:	d007      	beq.n	801487e <USBD_StdEPReq+0x30>
 801486e:	2b40      	cmp	r3, #64	; 0x40
 8014870:	f200 8145 	bhi.w	8014afe <USBD_StdEPReq+0x2b0>
 8014874:	2b00      	cmp	r3, #0
 8014876:	d00c      	beq.n	8014892 <USBD_StdEPReq+0x44>
 8014878:	2b20      	cmp	r3, #32
 801487a:	f040 8140 	bne.w	8014afe <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014884:	689b      	ldr	r3, [r3, #8]
 8014886:	6839      	ldr	r1, [r7, #0]
 8014888:	6878      	ldr	r0, [r7, #4]
 801488a:	4798      	blx	r3
 801488c:	4603      	mov	r3, r0
 801488e:	73fb      	strb	r3, [r7, #15]
      break;
 8014890:	e13a      	b.n	8014b08 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014892:	683b      	ldr	r3, [r7, #0]
 8014894:	785b      	ldrb	r3, [r3, #1]
 8014896:	2b03      	cmp	r3, #3
 8014898:	d007      	beq.n	80148aa <USBD_StdEPReq+0x5c>
 801489a:	2b03      	cmp	r3, #3
 801489c:	f300 8129 	bgt.w	8014af2 <USBD_StdEPReq+0x2a4>
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d07f      	beq.n	80149a4 <USBD_StdEPReq+0x156>
 80148a4:	2b01      	cmp	r3, #1
 80148a6:	d03c      	beq.n	8014922 <USBD_StdEPReq+0xd4>
 80148a8:	e123      	b.n	8014af2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80148b0:	b2db      	uxtb	r3, r3
 80148b2:	2b02      	cmp	r3, #2
 80148b4:	d002      	beq.n	80148bc <USBD_StdEPReq+0x6e>
 80148b6:	2b03      	cmp	r3, #3
 80148b8:	d016      	beq.n	80148e8 <USBD_StdEPReq+0x9a>
 80148ba:	e02c      	b.n	8014916 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80148bc:	7bbb      	ldrb	r3, [r7, #14]
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d00d      	beq.n	80148de <USBD_StdEPReq+0x90>
 80148c2:	7bbb      	ldrb	r3, [r7, #14]
 80148c4:	2b80      	cmp	r3, #128	; 0x80
 80148c6:	d00a      	beq.n	80148de <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80148c8:	7bbb      	ldrb	r3, [r7, #14]
 80148ca:	4619      	mov	r1, r3
 80148cc:	6878      	ldr	r0, [r7, #4]
 80148ce:	f003 fa0b 	bl	8017ce8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80148d2:	2180      	movs	r1, #128	; 0x80
 80148d4:	6878      	ldr	r0, [r7, #4]
 80148d6:	f003 fa07 	bl	8017ce8 <USBD_LL_StallEP>
 80148da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80148dc:	e020      	b.n	8014920 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80148de:	6839      	ldr	r1, [r7, #0]
 80148e0:	6878      	ldr	r0, [r7, #4]
 80148e2:	f000 fc6f 	bl	80151c4 <USBD_CtlError>
              break;
 80148e6:	e01b      	b.n	8014920 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80148e8:	683b      	ldr	r3, [r7, #0]
 80148ea:	885b      	ldrh	r3, [r3, #2]
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d10e      	bne.n	801490e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80148f0:	7bbb      	ldrb	r3, [r7, #14]
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d00b      	beq.n	801490e <USBD_StdEPReq+0xc0>
 80148f6:	7bbb      	ldrb	r3, [r7, #14]
 80148f8:	2b80      	cmp	r3, #128	; 0x80
 80148fa:	d008      	beq.n	801490e <USBD_StdEPReq+0xc0>
 80148fc:	683b      	ldr	r3, [r7, #0]
 80148fe:	88db      	ldrh	r3, [r3, #6]
 8014900:	2b00      	cmp	r3, #0
 8014902:	d104      	bne.n	801490e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8014904:	7bbb      	ldrb	r3, [r7, #14]
 8014906:	4619      	mov	r1, r3
 8014908:	6878      	ldr	r0, [r7, #4]
 801490a:	f003 f9ed 	bl	8017ce8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801490e:	6878      	ldr	r0, [r7, #4]
 8014910:	f000 fd23 	bl	801535a <USBD_CtlSendStatus>

              break;
 8014914:	e004      	b.n	8014920 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8014916:	6839      	ldr	r1, [r7, #0]
 8014918:	6878      	ldr	r0, [r7, #4]
 801491a:	f000 fc53 	bl	80151c4 <USBD_CtlError>
              break;
 801491e:	bf00      	nop
          }
          break;
 8014920:	e0ec      	b.n	8014afc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014928:	b2db      	uxtb	r3, r3
 801492a:	2b02      	cmp	r3, #2
 801492c:	d002      	beq.n	8014934 <USBD_StdEPReq+0xe6>
 801492e:	2b03      	cmp	r3, #3
 8014930:	d016      	beq.n	8014960 <USBD_StdEPReq+0x112>
 8014932:	e030      	b.n	8014996 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014934:	7bbb      	ldrb	r3, [r7, #14]
 8014936:	2b00      	cmp	r3, #0
 8014938:	d00d      	beq.n	8014956 <USBD_StdEPReq+0x108>
 801493a:	7bbb      	ldrb	r3, [r7, #14]
 801493c:	2b80      	cmp	r3, #128	; 0x80
 801493e:	d00a      	beq.n	8014956 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014940:	7bbb      	ldrb	r3, [r7, #14]
 8014942:	4619      	mov	r1, r3
 8014944:	6878      	ldr	r0, [r7, #4]
 8014946:	f003 f9cf 	bl	8017ce8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801494a:	2180      	movs	r1, #128	; 0x80
 801494c:	6878      	ldr	r0, [r7, #4]
 801494e:	f003 f9cb 	bl	8017ce8 <USBD_LL_StallEP>
 8014952:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014954:	e025      	b.n	80149a2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8014956:	6839      	ldr	r1, [r7, #0]
 8014958:	6878      	ldr	r0, [r7, #4]
 801495a:	f000 fc33 	bl	80151c4 <USBD_CtlError>
              break;
 801495e:	e020      	b.n	80149a2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014960:	683b      	ldr	r3, [r7, #0]
 8014962:	885b      	ldrh	r3, [r3, #2]
 8014964:	2b00      	cmp	r3, #0
 8014966:	d11b      	bne.n	80149a0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8014968:	7bbb      	ldrb	r3, [r7, #14]
 801496a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801496e:	2b00      	cmp	r3, #0
 8014970:	d004      	beq.n	801497c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8014972:	7bbb      	ldrb	r3, [r7, #14]
 8014974:	4619      	mov	r1, r3
 8014976:	6878      	ldr	r0, [r7, #4]
 8014978:	f003 f9d5 	bl	8017d26 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801497c:	6878      	ldr	r0, [r7, #4]
 801497e:	f000 fcec 	bl	801535a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014988:	689b      	ldr	r3, [r3, #8]
 801498a:	6839      	ldr	r1, [r7, #0]
 801498c:	6878      	ldr	r0, [r7, #4]
 801498e:	4798      	blx	r3
 8014990:	4603      	mov	r3, r0
 8014992:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8014994:	e004      	b.n	80149a0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8014996:	6839      	ldr	r1, [r7, #0]
 8014998:	6878      	ldr	r0, [r7, #4]
 801499a:	f000 fc13 	bl	80151c4 <USBD_CtlError>
              break;
 801499e:	e000      	b.n	80149a2 <USBD_StdEPReq+0x154>
              break;
 80149a0:	bf00      	nop
          }
          break;
 80149a2:	e0ab      	b.n	8014afc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80149aa:	b2db      	uxtb	r3, r3
 80149ac:	2b02      	cmp	r3, #2
 80149ae:	d002      	beq.n	80149b6 <USBD_StdEPReq+0x168>
 80149b0:	2b03      	cmp	r3, #3
 80149b2:	d032      	beq.n	8014a1a <USBD_StdEPReq+0x1cc>
 80149b4:	e097      	b.n	8014ae6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80149b6:	7bbb      	ldrb	r3, [r7, #14]
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d007      	beq.n	80149cc <USBD_StdEPReq+0x17e>
 80149bc:	7bbb      	ldrb	r3, [r7, #14]
 80149be:	2b80      	cmp	r3, #128	; 0x80
 80149c0:	d004      	beq.n	80149cc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80149c2:	6839      	ldr	r1, [r7, #0]
 80149c4:	6878      	ldr	r0, [r7, #4]
 80149c6:	f000 fbfd 	bl	80151c4 <USBD_CtlError>
                break;
 80149ca:	e091      	b.n	8014af0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80149cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	da0b      	bge.n	80149ec <USBD_StdEPReq+0x19e>
 80149d4:	7bbb      	ldrb	r3, [r7, #14]
 80149d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80149da:	4613      	mov	r3, r2
 80149dc:	009b      	lsls	r3, r3, #2
 80149de:	4413      	add	r3, r2
 80149e0:	009b      	lsls	r3, r3, #2
 80149e2:	3310      	adds	r3, #16
 80149e4:	687a      	ldr	r2, [r7, #4]
 80149e6:	4413      	add	r3, r2
 80149e8:	3304      	adds	r3, #4
 80149ea:	e00b      	b.n	8014a04 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80149ec:	7bbb      	ldrb	r3, [r7, #14]
 80149ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80149f2:	4613      	mov	r3, r2
 80149f4:	009b      	lsls	r3, r3, #2
 80149f6:	4413      	add	r3, r2
 80149f8:	009b      	lsls	r3, r3, #2
 80149fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80149fe:	687a      	ldr	r2, [r7, #4]
 8014a00:	4413      	add	r3, r2
 8014a02:	3304      	adds	r3, #4
 8014a04:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014a06:	68bb      	ldr	r3, [r7, #8]
 8014a08:	2200      	movs	r2, #0
 8014a0a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014a0c:	68bb      	ldr	r3, [r7, #8]
 8014a0e:	2202      	movs	r2, #2
 8014a10:	4619      	mov	r1, r3
 8014a12:	6878      	ldr	r0, [r7, #4]
 8014a14:	f000 fc47 	bl	80152a6 <USBD_CtlSendData>
              break;
 8014a18:	e06a      	b.n	8014af0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8014a1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	da11      	bge.n	8014a46 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014a22:	7bbb      	ldrb	r3, [r7, #14]
 8014a24:	f003 020f 	and.w	r2, r3, #15
 8014a28:	6879      	ldr	r1, [r7, #4]
 8014a2a:	4613      	mov	r3, r2
 8014a2c:	009b      	lsls	r3, r3, #2
 8014a2e:	4413      	add	r3, r2
 8014a30:	009b      	lsls	r3, r3, #2
 8014a32:	440b      	add	r3, r1
 8014a34:	3324      	adds	r3, #36	; 0x24
 8014a36:	881b      	ldrh	r3, [r3, #0]
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d117      	bne.n	8014a6c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8014a3c:	6839      	ldr	r1, [r7, #0]
 8014a3e:	6878      	ldr	r0, [r7, #4]
 8014a40:	f000 fbc0 	bl	80151c4 <USBD_CtlError>
                  break;
 8014a44:	e054      	b.n	8014af0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014a46:	7bbb      	ldrb	r3, [r7, #14]
 8014a48:	f003 020f 	and.w	r2, r3, #15
 8014a4c:	6879      	ldr	r1, [r7, #4]
 8014a4e:	4613      	mov	r3, r2
 8014a50:	009b      	lsls	r3, r3, #2
 8014a52:	4413      	add	r3, r2
 8014a54:	009b      	lsls	r3, r3, #2
 8014a56:	440b      	add	r3, r1
 8014a58:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014a5c:	881b      	ldrh	r3, [r3, #0]
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d104      	bne.n	8014a6c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8014a62:	6839      	ldr	r1, [r7, #0]
 8014a64:	6878      	ldr	r0, [r7, #4]
 8014a66:	f000 fbad 	bl	80151c4 <USBD_CtlError>
                  break;
 8014a6a:	e041      	b.n	8014af0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014a6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	da0b      	bge.n	8014a8c <USBD_StdEPReq+0x23e>
 8014a74:	7bbb      	ldrb	r3, [r7, #14]
 8014a76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014a7a:	4613      	mov	r3, r2
 8014a7c:	009b      	lsls	r3, r3, #2
 8014a7e:	4413      	add	r3, r2
 8014a80:	009b      	lsls	r3, r3, #2
 8014a82:	3310      	adds	r3, #16
 8014a84:	687a      	ldr	r2, [r7, #4]
 8014a86:	4413      	add	r3, r2
 8014a88:	3304      	adds	r3, #4
 8014a8a:	e00b      	b.n	8014aa4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014a8c:	7bbb      	ldrb	r3, [r7, #14]
 8014a8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014a92:	4613      	mov	r3, r2
 8014a94:	009b      	lsls	r3, r3, #2
 8014a96:	4413      	add	r3, r2
 8014a98:	009b      	lsls	r3, r3, #2
 8014a9a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014a9e:	687a      	ldr	r2, [r7, #4]
 8014aa0:	4413      	add	r3, r2
 8014aa2:	3304      	adds	r3, #4
 8014aa4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014aa6:	7bbb      	ldrb	r3, [r7, #14]
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d002      	beq.n	8014ab2 <USBD_StdEPReq+0x264>
 8014aac:	7bbb      	ldrb	r3, [r7, #14]
 8014aae:	2b80      	cmp	r3, #128	; 0x80
 8014ab0:	d103      	bne.n	8014aba <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8014ab2:	68bb      	ldr	r3, [r7, #8]
 8014ab4:	2200      	movs	r2, #0
 8014ab6:	601a      	str	r2, [r3, #0]
 8014ab8:	e00e      	b.n	8014ad8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014aba:	7bbb      	ldrb	r3, [r7, #14]
 8014abc:	4619      	mov	r1, r3
 8014abe:	6878      	ldr	r0, [r7, #4]
 8014ac0:	f003 f950 	bl	8017d64 <USBD_LL_IsStallEP>
 8014ac4:	4603      	mov	r3, r0
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d003      	beq.n	8014ad2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8014aca:	68bb      	ldr	r3, [r7, #8]
 8014acc:	2201      	movs	r2, #1
 8014ace:	601a      	str	r2, [r3, #0]
 8014ad0:	e002      	b.n	8014ad8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8014ad2:	68bb      	ldr	r3, [r7, #8]
 8014ad4:	2200      	movs	r2, #0
 8014ad6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014ad8:	68bb      	ldr	r3, [r7, #8]
 8014ada:	2202      	movs	r2, #2
 8014adc:	4619      	mov	r1, r3
 8014ade:	6878      	ldr	r0, [r7, #4]
 8014ae0:	f000 fbe1 	bl	80152a6 <USBD_CtlSendData>
              break;
 8014ae4:	e004      	b.n	8014af0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8014ae6:	6839      	ldr	r1, [r7, #0]
 8014ae8:	6878      	ldr	r0, [r7, #4]
 8014aea:	f000 fb6b 	bl	80151c4 <USBD_CtlError>
              break;
 8014aee:	bf00      	nop
          }
          break;
 8014af0:	e004      	b.n	8014afc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8014af2:	6839      	ldr	r1, [r7, #0]
 8014af4:	6878      	ldr	r0, [r7, #4]
 8014af6:	f000 fb65 	bl	80151c4 <USBD_CtlError>
          break;
 8014afa:	bf00      	nop
      }
      break;
 8014afc:	e004      	b.n	8014b08 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8014afe:	6839      	ldr	r1, [r7, #0]
 8014b00:	6878      	ldr	r0, [r7, #4]
 8014b02:	f000 fb5f 	bl	80151c4 <USBD_CtlError>
      break;
 8014b06:	bf00      	nop
  }

  return ret;
 8014b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b0a:	4618      	mov	r0, r3
 8014b0c:	3710      	adds	r7, #16
 8014b0e:	46bd      	mov	sp, r7
 8014b10:	bd80      	pop	{r7, pc}
	...

08014b14 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014b14:	b580      	push	{r7, lr}
 8014b16:	b084      	sub	sp, #16
 8014b18:	af00      	add	r7, sp, #0
 8014b1a:	6078      	str	r0, [r7, #4]
 8014b1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014b1e:	2300      	movs	r3, #0
 8014b20:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8014b22:	2300      	movs	r3, #0
 8014b24:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014b26:	2300      	movs	r3, #0
 8014b28:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8014b2a:	683b      	ldr	r3, [r7, #0]
 8014b2c:	885b      	ldrh	r3, [r3, #2]
 8014b2e:	0a1b      	lsrs	r3, r3, #8
 8014b30:	b29b      	uxth	r3, r3
 8014b32:	3b01      	subs	r3, #1
 8014b34:	2b0e      	cmp	r3, #14
 8014b36:	f200 8152 	bhi.w	8014dde <USBD_GetDescriptor+0x2ca>
 8014b3a:	a201      	add	r2, pc, #4	; (adr r2, 8014b40 <USBD_GetDescriptor+0x2c>)
 8014b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b40:	08014bb1 	.word	0x08014bb1
 8014b44:	08014bc9 	.word	0x08014bc9
 8014b48:	08014c09 	.word	0x08014c09
 8014b4c:	08014ddf 	.word	0x08014ddf
 8014b50:	08014ddf 	.word	0x08014ddf
 8014b54:	08014d7f 	.word	0x08014d7f
 8014b58:	08014dab 	.word	0x08014dab
 8014b5c:	08014ddf 	.word	0x08014ddf
 8014b60:	08014ddf 	.word	0x08014ddf
 8014b64:	08014ddf 	.word	0x08014ddf
 8014b68:	08014ddf 	.word	0x08014ddf
 8014b6c:	08014ddf 	.word	0x08014ddf
 8014b70:	08014ddf 	.word	0x08014ddf
 8014b74:	08014ddf 	.word	0x08014ddf
 8014b78:	08014b7d 	.word	0x08014b7d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014b82:	69db      	ldr	r3, [r3, #28]
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d00b      	beq.n	8014ba0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014b8e:	69db      	ldr	r3, [r3, #28]
 8014b90:	687a      	ldr	r2, [r7, #4]
 8014b92:	7c12      	ldrb	r2, [r2, #16]
 8014b94:	f107 0108 	add.w	r1, r7, #8
 8014b98:	4610      	mov	r0, r2
 8014b9a:	4798      	blx	r3
 8014b9c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014b9e:	e126      	b.n	8014dee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014ba0:	6839      	ldr	r1, [r7, #0]
 8014ba2:	6878      	ldr	r0, [r7, #4]
 8014ba4:	f000 fb0e 	bl	80151c4 <USBD_CtlError>
        err++;
 8014ba8:	7afb      	ldrb	r3, [r7, #11]
 8014baa:	3301      	adds	r3, #1
 8014bac:	72fb      	strb	r3, [r7, #11]
      break;
 8014bae:	e11e      	b.n	8014dee <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014bb6:	681b      	ldr	r3, [r3, #0]
 8014bb8:	687a      	ldr	r2, [r7, #4]
 8014bba:	7c12      	ldrb	r2, [r2, #16]
 8014bbc:	f107 0108 	add.w	r1, r7, #8
 8014bc0:	4610      	mov	r0, r2
 8014bc2:	4798      	blx	r3
 8014bc4:	60f8      	str	r0, [r7, #12]
      break;
 8014bc6:	e112      	b.n	8014dee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	7c1b      	ldrb	r3, [r3, #16]
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d10d      	bne.n	8014bec <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014bd8:	f107 0208 	add.w	r2, r7, #8
 8014bdc:	4610      	mov	r0, r2
 8014bde:	4798      	blx	r3
 8014be0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	3301      	adds	r3, #1
 8014be6:	2202      	movs	r2, #2
 8014be8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8014bea:	e100      	b.n	8014dee <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014bf4:	f107 0208 	add.w	r2, r7, #8
 8014bf8:	4610      	mov	r0, r2
 8014bfa:	4798      	blx	r3
 8014bfc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	3301      	adds	r3, #1
 8014c02:	2202      	movs	r2, #2
 8014c04:	701a      	strb	r2, [r3, #0]
      break;
 8014c06:	e0f2      	b.n	8014dee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8014c08:	683b      	ldr	r3, [r7, #0]
 8014c0a:	885b      	ldrh	r3, [r3, #2]
 8014c0c:	b2db      	uxtb	r3, r3
 8014c0e:	2b05      	cmp	r3, #5
 8014c10:	f200 80ac 	bhi.w	8014d6c <USBD_GetDescriptor+0x258>
 8014c14:	a201      	add	r2, pc, #4	; (adr r2, 8014c1c <USBD_GetDescriptor+0x108>)
 8014c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c1a:	bf00      	nop
 8014c1c:	08014c35 	.word	0x08014c35
 8014c20:	08014c69 	.word	0x08014c69
 8014c24:	08014c9d 	.word	0x08014c9d
 8014c28:	08014cd1 	.word	0x08014cd1
 8014c2c:	08014d05 	.word	0x08014d05
 8014c30:	08014d39 	.word	0x08014d39
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014c3a:	685b      	ldr	r3, [r3, #4]
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d00b      	beq.n	8014c58 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014c46:	685b      	ldr	r3, [r3, #4]
 8014c48:	687a      	ldr	r2, [r7, #4]
 8014c4a:	7c12      	ldrb	r2, [r2, #16]
 8014c4c:	f107 0108 	add.w	r1, r7, #8
 8014c50:	4610      	mov	r0, r2
 8014c52:	4798      	blx	r3
 8014c54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014c56:	e091      	b.n	8014d7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014c58:	6839      	ldr	r1, [r7, #0]
 8014c5a:	6878      	ldr	r0, [r7, #4]
 8014c5c:	f000 fab2 	bl	80151c4 <USBD_CtlError>
            err++;
 8014c60:	7afb      	ldrb	r3, [r7, #11]
 8014c62:	3301      	adds	r3, #1
 8014c64:	72fb      	strb	r3, [r7, #11]
          break;
 8014c66:	e089      	b.n	8014d7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014c6e:	689b      	ldr	r3, [r3, #8]
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d00b      	beq.n	8014c8c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014c7a:	689b      	ldr	r3, [r3, #8]
 8014c7c:	687a      	ldr	r2, [r7, #4]
 8014c7e:	7c12      	ldrb	r2, [r2, #16]
 8014c80:	f107 0108 	add.w	r1, r7, #8
 8014c84:	4610      	mov	r0, r2
 8014c86:	4798      	blx	r3
 8014c88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014c8a:	e077      	b.n	8014d7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014c8c:	6839      	ldr	r1, [r7, #0]
 8014c8e:	6878      	ldr	r0, [r7, #4]
 8014c90:	f000 fa98 	bl	80151c4 <USBD_CtlError>
            err++;
 8014c94:	7afb      	ldrb	r3, [r7, #11]
 8014c96:	3301      	adds	r3, #1
 8014c98:	72fb      	strb	r3, [r7, #11]
          break;
 8014c9a:	e06f      	b.n	8014d7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014ca2:	68db      	ldr	r3, [r3, #12]
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d00b      	beq.n	8014cc0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014cae:	68db      	ldr	r3, [r3, #12]
 8014cb0:	687a      	ldr	r2, [r7, #4]
 8014cb2:	7c12      	ldrb	r2, [r2, #16]
 8014cb4:	f107 0108 	add.w	r1, r7, #8
 8014cb8:	4610      	mov	r0, r2
 8014cba:	4798      	blx	r3
 8014cbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014cbe:	e05d      	b.n	8014d7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014cc0:	6839      	ldr	r1, [r7, #0]
 8014cc2:	6878      	ldr	r0, [r7, #4]
 8014cc4:	f000 fa7e 	bl	80151c4 <USBD_CtlError>
            err++;
 8014cc8:	7afb      	ldrb	r3, [r7, #11]
 8014cca:	3301      	adds	r3, #1
 8014ccc:	72fb      	strb	r3, [r7, #11]
          break;
 8014cce:	e055      	b.n	8014d7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014cd6:	691b      	ldr	r3, [r3, #16]
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d00b      	beq.n	8014cf4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014ce2:	691b      	ldr	r3, [r3, #16]
 8014ce4:	687a      	ldr	r2, [r7, #4]
 8014ce6:	7c12      	ldrb	r2, [r2, #16]
 8014ce8:	f107 0108 	add.w	r1, r7, #8
 8014cec:	4610      	mov	r0, r2
 8014cee:	4798      	blx	r3
 8014cf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014cf2:	e043      	b.n	8014d7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014cf4:	6839      	ldr	r1, [r7, #0]
 8014cf6:	6878      	ldr	r0, [r7, #4]
 8014cf8:	f000 fa64 	bl	80151c4 <USBD_CtlError>
            err++;
 8014cfc:	7afb      	ldrb	r3, [r7, #11]
 8014cfe:	3301      	adds	r3, #1
 8014d00:	72fb      	strb	r3, [r7, #11]
          break;
 8014d02:	e03b      	b.n	8014d7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014d0a:	695b      	ldr	r3, [r3, #20]
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d00b      	beq.n	8014d28 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014d16:	695b      	ldr	r3, [r3, #20]
 8014d18:	687a      	ldr	r2, [r7, #4]
 8014d1a:	7c12      	ldrb	r2, [r2, #16]
 8014d1c:	f107 0108 	add.w	r1, r7, #8
 8014d20:	4610      	mov	r0, r2
 8014d22:	4798      	blx	r3
 8014d24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014d26:	e029      	b.n	8014d7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014d28:	6839      	ldr	r1, [r7, #0]
 8014d2a:	6878      	ldr	r0, [r7, #4]
 8014d2c:	f000 fa4a 	bl	80151c4 <USBD_CtlError>
            err++;
 8014d30:	7afb      	ldrb	r3, [r7, #11]
 8014d32:	3301      	adds	r3, #1
 8014d34:	72fb      	strb	r3, [r7, #11]
          break;
 8014d36:	e021      	b.n	8014d7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014d3e:	699b      	ldr	r3, [r3, #24]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d00b      	beq.n	8014d5c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014d4a:	699b      	ldr	r3, [r3, #24]
 8014d4c:	687a      	ldr	r2, [r7, #4]
 8014d4e:	7c12      	ldrb	r2, [r2, #16]
 8014d50:	f107 0108 	add.w	r1, r7, #8
 8014d54:	4610      	mov	r0, r2
 8014d56:	4798      	blx	r3
 8014d58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014d5a:	e00f      	b.n	8014d7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014d5c:	6839      	ldr	r1, [r7, #0]
 8014d5e:	6878      	ldr	r0, [r7, #4]
 8014d60:	f000 fa30 	bl	80151c4 <USBD_CtlError>
            err++;
 8014d64:	7afb      	ldrb	r3, [r7, #11]
 8014d66:	3301      	adds	r3, #1
 8014d68:	72fb      	strb	r3, [r7, #11]
          break;
 8014d6a:	e007      	b.n	8014d7c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8014d6c:	6839      	ldr	r1, [r7, #0]
 8014d6e:	6878      	ldr	r0, [r7, #4]
 8014d70:	f000 fa28 	bl	80151c4 <USBD_CtlError>
          err++;
 8014d74:	7afb      	ldrb	r3, [r7, #11]
 8014d76:	3301      	adds	r3, #1
 8014d78:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8014d7a:	bf00      	nop
      }
      break;
 8014d7c:	e037      	b.n	8014dee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	7c1b      	ldrb	r3, [r3, #16]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d109      	bne.n	8014d9a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014d8e:	f107 0208 	add.w	r2, r7, #8
 8014d92:	4610      	mov	r0, r2
 8014d94:	4798      	blx	r3
 8014d96:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014d98:	e029      	b.n	8014dee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014d9a:	6839      	ldr	r1, [r7, #0]
 8014d9c:	6878      	ldr	r0, [r7, #4]
 8014d9e:	f000 fa11 	bl	80151c4 <USBD_CtlError>
        err++;
 8014da2:	7afb      	ldrb	r3, [r7, #11]
 8014da4:	3301      	adds	r3, #1
 8014da6:	72fb      	strb	r3, [r7, #11]
      break;
 8014da8:	e021      	b.n	8014dee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	7c1b      	ldrb	r3, [r3, #16]
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d10d      	bne.n	8014dce <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014dba:	f107 0208 	add.w	r2, r7, #8
 8014dbe:	4610      	mov	r0, r2
 8014dc0:	4798      	blx	r3
 8014dc2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014dc4:	68fb      	ldr	r3, [r7, #12]
 8014dc6:	3301      	adds	r3, #1
 8014dc8:	2207      	movs	r2, #7
 8014dca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014dcc:	e00f      	b.n	8014dee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014dce:	6839      	ldr	r1, [r7, #0]
 8014dd0:	6878      	ldr	r0, [r7, #4]
 8014dd2:	f000 f9f7 	bl	80151c4 <USBD_CtlError>
        err++;
 8014dd6:	7afb      	ldrb	r3, [r7, #11]
 8014dd8:	3301      	adds	r3, #1
 8014dda:	72fb      	strb	r3, [r7, #11]
      break;
 8014ddc:	e007      	b.n	8014dee <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8014dde:	6839      	ldr	r1, [r7, #0]
 8014de0:	6878      	ldr	r0, [r7, #4]
 8014de2:	f000 f9ef 	bl	80151c4 <USBD_CtlError>
      err++;
 8014de6:	7afb      	ldrb	r3, [r7, #11]
 8014de8:	3301      	adds	r3, #1
 8014dea:	72fb      	strb	r3, [r7, #11]
      break;
 8014dec:	bf00      	nop
  }

  if (err != 0U)
 8014dee:	7afb      	ldrb	r3, [r7, #11]
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d11e      	bne.n	8014e32 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8014df4:	683b      	ldr	r3, [r7, #0]
 8014df6:	88db      	ldrh	r3, [r3, #6]
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d016      	beq.n	8014e2a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8014dfc:	893b      	ldrh	r3, [r7, #8]
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d00e      	beq.n	8014e20 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8014e02:	683b      	ldr	r3, [r7, #0]
 8014e04:	88da      	ldrh	r2, [r3, #6]
 8014e06:	893b      	ldrh	r3, [r7, #8]
 8014e08:	4293      	cmp	r3, r2
 8014e0a:	bf28      	it	cs
 8014e0c:	4613      	movcs	r3, r2
 8014e0e:	b29b      	uxth	r3, r3
 8014e10:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8014e12:	893b      	ldrh	r3, [r7, #8]
 8014e14:	461a      	mov	r2, r3
 8014e16:	68f9      	ldr	r1, [r7, #12]
 8014e18:	6878      	ldr	r0, [r7, #4]
 8014e1a:	f000 fa44 	bl	80152a6 <USBD_CtlSendData>
 8014e1e:	e009      	b.n	8014e34 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8014e20:	6839      	ldr	r1, [r7, #0]
 8014e22:	6878      	ldr	r0, [r7, #4]
 8014e24:	f000 f9ce 	bl	80151c4 <USBD_CtlError>
 8014e28:	e004      	b.n	8014e34 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8014e2a:	6878      	ldr	r0, [r7, #4]
 8014e2c:	f000 fa95 	bl	801535a <USBD_CtlSendStatus>
 8014e30:	e000      	b.n	8014e34 <USBD_GetDescriptor+0x320>
    return;
 8014e32:	bf00      	nop
  }
}
 8014e34:	3710      	adds	r7, #16
 8014e36:	46bd      	mov	sp, r7
 8014e38:	bd80      	pop	{r7, pc}
 8014e3a:	bf00      	nop

08014e3c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014e3c:	b580      	push	{r7, lr}
 8014e3e:	b084      	sub	sp, #16
 8014e40:	af00      	add	r7, sp, #0
 8014e42:	6078      	str	r0, [r7, #4]
 8014e44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014e46:	683b      	ldr	r3, [r7, #0]
 8014e48:	889b      	ldrh	r3, [r3, #4]
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d131      	bne.n	8014eb2 <USBD_SetAddress+0x76>
 8014e4e:	683b      	ldr	r3, [r7, #0]
 8014e50:	88db      	ldrh	r3, [r3, #6]
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d12d      	bne.n	8014eb2 <USBD_SetAddress+0x76>
 8014e56:	683b      	ldr	r3, [r7, #0]
 8014e58:	885b      	ldrh	r3, [r3, #2]
 8014e5a:	2b7f      	cmp	r3, #127	; 0x7f
 8014e5c:	d829      	bhi.n	8014eb2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014e5e:	683b      	ldr	r3, [r7, #0]
 8014e60:	885b      	ldrh	r3, [r3, #2]
 8014e62:	b2db      	uxtb	r3, r3
 8014e64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014e68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014e70:	b2db      	uxtb	r3, r3
 8014e72:	2b03      	cmp	r3, #3
 8014e74:	d104      	bne.n	8014e80 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8014e76:	6839      	ldr	r1, [r7, #0]
 8014e78:	6878      	ldr	r0, [r7, #4]
 8014e7a:	f000 f9a3 	bl	80151c4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014e7e:	e01d      	b.n	8014ebc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	7bfa      	ldrb	r2, [r7, #15]
 8014e84:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014e88:	7bfb      	ldrb	r3, [r7, #15]
 8014e8a:	4619      	mov	r1, r3
 8014e8c:	6878      	ldr	r0, [r7, #4]
 8014e8e:	f002 ff96 	bl	8017dbe <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8014e92:	6878      	ldr	r0, [r7, #4]
 8014e94:	f000 fa61 	bl	801535a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014e98:	7bfb      	ldrb	r3, [r7, #15]
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d004      	beq.n	8014ea8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	2202      	movs	r2, #2
 8014ea2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014ea6:	e009      	b.n	8014ebc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	2201      	movs	r2, #1
 8014eac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014eb0:	e004      	b.n	8014ebc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8014eb2:	6839      	ldr	r1, [r7, #0]
 8014eb4:	6878      	ldr	r0, [r7, #4]
 8014eb6:	f000 f985 	bl	80151c4 <USBD_CtlError>
  }
}
 8014eba:	bf00      	nop
 8014ebc:	bf00      	nop
 8014ebe:	3710      	adds	r7, #16
 8014ec0:	46bd      	mov	sp, r7
 8014ec2:	bd80      	pop	{r7, pc}

08014ec4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014ec4:	b580      	push	{r7, lr}
 8014ec6:	b084      	sub	sp, #16
 8014ec8:	af00      	add	r7, sp, #0
 8014eca:	6078      	str	r0, [r7, #4]
 8014ecc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014ece:	2300      	movs	r3, #0
 8014ed0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8014ed2:	683b      	ldr	r3, [r7, #0]
 8014ed4:	885b      	ldrh	r3, [r3, #2]
 8014ed6:	b2da      	uxtb	r2, r3
 8014ed8:	4b4c      	ldr	r3, [pc, #304]	; (801500c <USBD_SetConfig+0x148>)
 8014eda:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014edc:	4b4b      	ldr	r3, [pc, #300]	; (801500c <USBD_SetConfig+0x148>)
 8014ede:	781b      	ldrb	r3, [r3, #0]
 8014ee0:	2b01      	cmp	r3, #1
 8014ee2:	d905      	bls.n	8014ef0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014ee4:	6839      	ldr	r1, [r7, #0]
 8014ee6:	6878      	ldr	r0, [r7, #4]
 8014ee8:	f000 f96c 	bl	80151c4 <USBD_CtlError>
    return USBD_FAIL;
 8014eec:	2303      	movs	r3, #3
 8014eee:	e088      	b.n	8015002 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014ef6:	b2db      	uxtb	r3, r3
 8014ef8:	2b02      	cmp	r3, #2
 8014efa:	d002      	beq.n	8014f02 <USBD_SetConfig+0x3e>
 8014efc:	2b03      	cmp	r3, #3
 8014efe:	d025      	beq.n	8014f4c <USBD_SetConfig+0x88>
 8014f00:	e071      	b.n	8014fe6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8014f02:	4b42      	ldr	r3, [pc, #264]	; (801500c <USBD_SetConfig+0x148>)
 8014f04:	781b      	ldrb	r3, [r3, #0]
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d01c      	beq.n	8014f44 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8014f0a:	4b40      	ldr	r3, [pc, #256]	; (801500c <USBD_SetConfig+0x148>)
 8014f0c:	781b      	ldrb	r3, [r3, #0]
 8014f0e:	461a      	mov	r2, r3
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014f14:	4b3d      	ldr	r3, [pc, #244]	; (801500c <USBD_SetConfig+0x148>)
 8014f16:	781b      	ldrb	r3, [r3, #0]
 8014f18:	4619      	mov	r1, r3
 8014f1a:	6878      	ldr	r0, [r7, #4]
 8014f1c:	f7ff f992 	bl	8014244 <USBD_SetClassConfig>
 8014f20:	4603      	mov	r3, r0
 8014f22:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8014f24:	7bfb      	ldrb	r3, [r7, #15]
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d004      	beq.n	8014f34 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8014f2a:	6839      	ldr	r1, [r7, #0]
 8014f2c:	6878      	ldr	r0, [r7, #4]
 8014f2e:	f000 f949 	bl	80151c4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014f32:	e065      	b.n	8015000 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8014f34:	6878      	ldr	r0, [r7, #4]
 8014f36:	f000 fa10 	bl	801535a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	2203      	movs	r2, #3
 8014f3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8014f42:	e05d      	b.n	8015000 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8014f44:	6878      	ldr	r0, [r7, #4]
 8014f46:	f000 fa08 	bl	801535a <USBD_CtlSendStatus>
      break;
 8014f4a:	e059      	b.n	8015000 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8014f4c:	4b2f      	ldr	r3, [pc, #188]	; (801500c <USBD_SetConfig+0x148>)
 8014f4e:	781b      	ldrb	r3, [r3, #0]
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d112      	bne.n	8014f7a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	2202      	movs	r2, #2
 8014f58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8014f5c:	4b2b      	ldr	r3, [pc, #172]	; (801500c <USBD_SetConfig+0x148>)
 8014f5e:	781b      	ldrb	r3, [r3, #0]
 8014f60:	461a      	mov	r2, r3
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014f66:	4b29      	ldr	r3, [pc, #164]	; (801500c <USBD_SetConfig+0x148>)
 8014f68:	781b      	ldrb	r3, [r3, #0]
 8014f6a:	4619      	mov	r1, r3
 8014f6c:	6878      	ldr	r0, [r7, #4]
 8014f6e:	f7ff f985 	bl	801427c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8014f72:	6878      	ldr	r0, [r7, #4]
 8014f74:	f000 f9f1 	bl	801535a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014f78:	e042      	b.n	8015000 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8014f7a:	4b24      	ldr	r3, [pc, #144]	; (801500c <USBD_SetConfig+0x148>)
 8014f7c:	781b      	ldrb	r3, [r3, #0]
 8014f7e:	461a      	mov	r2, r3
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	685b      	ldr	r3, [r3, #4]
 8014f84:	429a      	cmp	r2, r3
 8014f86:	d02a      	beq.n	8014fde <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	685b      	ldr	r3, [r3, #4]
 8014f8c:	b2db      	uxtb	r3, r3
 8014f8e:	4619      	mov	r1, r3
 8014f90:	6878      	ldr	r0, [r7, #4]
 8014f92:	f7ff f973 	bl	801427c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8014f96:	4b1d      	ldr	r3, [pc, #116]	; (801500c <USBD_SetConfig+0x148>)
 8014f98:	781b      	ldrb	r3, [r3, #0]
 8014f9a:	461a      	mov	r2, r3
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014fa0:	4b1a      	ldr	r3, [pc, #104]	; (801500c <USBD_SetConfig+0x148>)
 8014fa2:	781b      	ldrb	r3, [r3, #0]
 8014fa4:	4619      	mov	r1, r3
 8014fa6:	6878      	ldr	r0, [r7, #4]
 8014fa8:	f7ff f94c 	bl	8014244 <USBD_SetClassConfig>
 8014fac:	4603      	mov	r3, r0
 8014fae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8014fb0:	7bfb      	ldrb	r3, [r7, #15]
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	d00f      	beq.n	8014fd6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8014fb6:	6839      	ldr	r1, [r7, #0]
 8014fb8:	6878      	ldr	r0, [r7, #4]
 8014fba:	f000 f903 	bl	80151c4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	685b      	ldr	r3, [r3, #4]
 8014fc2:	b2db      	uxtb	r3, r3
 8014fc4:	4619      	mov	r1, r3
 8014fc6:	6878      	ldr	r0, [r7, #4]
 8014fc8:	f7ff f958 	bl	801427c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	2202      	movs	r2, #2
 8014fd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8014fd4:	e014      	b.n	8015000 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8014fd6:	6878      	ldr	r0, [r7, #4]
 8014fd8:	f000 f9bf 	bl	801535a <USBD_CtlSendStatus>
      break;
 8014fdc:	e010      	b.n	8015000 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8014fde:	6878      	ldr	r0, [r7, #4]
 8014fe0:	f000 f9bb 	bl	801535a <USBD_CtlSendStatus>
      break;
 8014fe4:	e00c      	b.n	8015000 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8014fe6:	6839      	ldr	r1, [r7, #0]
 8014fe8:	6878      	ldr	r0, [r7, #4]
 8014fea:	f000 f8eb 	bl	80151c4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014fee:	4b07      	ldr	r3, [pc, #28]	; (801500c <USBD_SetConfig+0x148>)
 8014ff0:	781b      	ldrb	r3, [r3, #0]
 8014ff2:	4619      	mov	r1, r3
 8014ff4:	6878      	ldr	r0, [r7, #4]
 8014ff6:	f7ff f941 	bl	801427c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8014ffa:	2303      	movs	r3, #3
 8014ffc:	73fb      	strb	r3, [r7, #15]
      break;
 8014ffe:	bf00      	nop
  }

  return ret;
 8015000:	7bfb      	ldrb	r3, [r7, #15]
}
 8015002:	4618      	mov	r0, r3
 8015004:	3710      	adds	r7, #16
 8015006:	46bd      	mov	sp, r7
 8015008:	bd80      	pop	{r7, pc}
 801500a:	bf00      	nop
 801500c:	20000b9c 	.word	0x20000b9c

08015010 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015010:	b580      	push	{r7, lr}
 8015012:	b082      	sub	sp, #8
 8015014:	af00      	add	r7, sp, #0
 8015016:	6078      	str	r0, [r7, #4]
 8015018:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801501a:	683b      	ldr	r3, [r7, #0]
 801501c:	88db      	ldrh	r3, [r3, #6]
 801501e:	2b01      	cmp	r3, #1
 8015020:	d004      	beq.n	801502c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8015022:	6839      	ldr	r1, [r7, #0]
 8015024:	6878      	ldr	r0, [r7, #4]
 8015026:	f000 f8cd 	bl	80151c4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801502a:	e023      	b.n	8015074 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015032:	b2db      	uxtb	r3, r3
 8015034:	2b02      	cmp	r3, #2
 8015036:	dc02      	bgt.n	801503e <USBD_GetConfig+0x2e>
 8015038:	2b00      	cmp	r3, #0
 801503a:	dc03      	bgt.n	8015044 <USBD_GetConfig+0x34>
 801503c:	e015      	b.n	801506a <USBD_GetConfig+0x5a>
 801503e:	2b03      	cmp	r3, #3
 8015040:	d00b      	beq.n	801505a <USBD_GetConfig+0x4a>
 8015042:	e012      	b.n	801506a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	2200      	movs	r2, #0
 8015048:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	3308      	adds	r3, #8
 801504e:	2201      	movs	r2, #1
 8015050:	4619      	mov	r1, r3
 8015052:	6878      	ldr	r0, [r7, #4]
 8015054:	f000 f927 	bl	80152a6 <USBD_CtlSendData>
        break;
 8015058:	e00c      	b.n	8015074 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	3304      	adds	r3, #4
 801505e:	2201      	movs	r2, #1
 8015060:	4619      	mov	r1, r3
 8015062:	6878      	ldr	r0, [r7, #4]
 8015064:	f000 f91f 	bl	80152a6 <USBD_CtlSendData>
        break;
 8015068:	e004      	b.n	8015074 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801506a:	6839      	ldr	r1, [r7, #0]
 801506c:	6878      	ldr	r0, [r7, #4]
 801506e:	f000 f8a9 	bl	80151c4 <USBD_CtlError>
        break;
 8015072:	bf00      	nop
}
 8015074:	bf00      	nop
 8015076:	3708      	adds	r7, #8
 8015078:	46bd      	mov	sp, r7
 801507a:	bd80      	pop	{r7, pc}

0801507c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801507c:	b580      	push	{r7, lr}
 801507e:	b082      	sub	sp, #8
 8015080:	af00      	add	r7, sp, #0
 8015082:	6078      	str	r0, [r7, #4]
 8015084:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801508c:	b2db      	uxtb	r3, r3
 801508e:	3b01      	subs	r3, #1
 8015090:	2b02      	cmp	r3, #2
 8015092:	d81e      	bhi.n	80150d2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8015094:	683b      	ldr	r3, [r7, #0]
 8015096:	88db      	ldrh	r3, [r3, #6]
 8015098:	2b02      	cmp	r3, #2
 801509a:	d004      	beq.n	80150a6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801509c:	6839      	ldr	r1, [r7, #0]
 801509e:	6878      	ldr	r0, [r7, #4]
 80150a0:	f000 f890 	bl	80151c4 <USBD_CtlError>
        break;
 80150a4:	e01a      	b.n	80150dc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	2201      	movs	r2, #1
 80150aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d005      	beq.n	80150c2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	68db      	ldr	r3, [r3, #12]
 80150ba:	f043 0202 	orr.w	r2, r3, #2
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	330c      	adds	r3, #12
 80150c6:	2202      	movs	r2, #2
 80150c8:	4619      	mov	r1, r3
 80150ca:	6878      	ldr	r0, [r7, #4]
 80150cc:	f000 f8eb 	bl	80152a6 <USBD_CtlSendData>
      break;
 80150d0:	e004      	b.n	80150dc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80150d2:	6839      	ldr	r1, [r7, #0]
 80150d4:	6878      	ldr	r0, [r7, #4]
 80150d6:	f000 f875 	bl	80151c4 <USBD_CtlError>
      break;
 80150da:	bf00      	nop
  }
}
 80150dc:	bf00      	nop
 80150de:	3708      	adds	r7, #8
 80150e0:	46bd      	mov	sp, r7
 80150e2:	bd80      	pop	{r7, pc}

080150e4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80150e4:	b580      	push	{r7, lr}
 80150e6:	b082      	sub	sp, #8
 80150e8:	af00      	add	r7, sp, #0
 80150ea:	6078      	str	r0, [r7, #4]
 80150ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80150ee:	683b      	ldr	r3, [r7, #0]
 80150f0:	885b      	ldrh	r3, [r3, #2]
 80150f2:	2b01      	cmp	r3, #1
 80150f4:	d106      	bne.n	8015104 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	2201      	movs	r2, #1
 80150fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80150fe:	6878      	ldr	r0, [r7, #4]
 8015100:	f000 f92b 	bl	801535a <USBD_CtlSendStatus>
  }
}
 8015104:	bf00      	nop
 8015106:	3708      	adds	r7, #8
 8015108:	46bd      	mov	sp, r7
 801510a:	bd80      	pop	{r7, pc}

0801510c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801510c:	b580      	push	{r7, lr}
 801510e:	b082      	sub	sp, #8
 8015110:	af00      	add	r7, sp, #0
 8015112:	6078      	str	r0, [r7, #4]
 8015114:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801511c:	b2db      	uxtb	r3, r3
 801511e:	3b01      	subs	r3, #1
 8015120:	2b02      	cmp	r3, #2
 8015122:	d80b      	bhi.n	801513c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015124:	683b      	ldr	r3, [r7, #0]
 8015126:	885b      	ldrh	r3, [r3, #2]
 8015128:	2b01      	cmp	r3, #1
 801512a:	d10c      	bne.n	8015146 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	2200      	movs	r2, #0
 8015130:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8015134:	6878      	ldr	r0, [r7, #4]
 8015136:	f000 f910 	bl	801535a <USBD_CtlSendStatus>
      }
      break;
 801513a:	e004      	b.n	8015146 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801513c:	6839      	ldr	r1, [r7, #0]
 801513e:	6878      	ldr	r0, [r7, #4]
 8015140:	f000 f840 	bl	80151c4 <USBD_CtlError>
      break;
 8015144:	e000      	b.n	8015148 <USBD_ClrFeature+0x3c>
      break;
 8015146:	bf00      	nop
  }
}
 8015148:	bf00      	nop
 801514a:	3708      	adds	r7, #8
 801514c:	46bd      	mov	sp, r7
 801514e:	bd80      	pop	{r7, pc}

08015150 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8015150:	b580      	push	{r7, lr}
 8015152:	b084      	sub	sp, #16
 8015154:	af00      	add	r7, sp, #0
 8015156:	6078      	str	r0, [r7, #4]
 8015158:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801515a:	683b      	ldr	r3, [r7, #0]
 801515c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	781a      	ldrb	r2, [r3, #0]
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8015166:	68fb      	ldr	r3, [r7, #12]
 8015168:	3301      	adds	r3, #1
 801516a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	781a      	ldrb	r2, [r3, #0]
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	3301      	adds	r3, #1
 8015178:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801517a:	68f8      	ldr	r0, [r7, #12]
 801517c:	f7ff fa92 	bl	80146a4 <SWAPBYTE>
 8015180:	4603      	mov	r3, r0
 8015182:	461a      	mov	r2, r3
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8015188:	68fb      	ldr	r3, [r7, #12]
 801518a:	3301      	adds	r3, #1
 801518c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801518e:	68fb      	ldr	r3, [r7, #12]
 8015190:	3301      	adds	r3, #1
 8015192:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8015194:	68f8      	ldr	r0, [r7, #12]
 8015196:	f7ff fa85 	bl	80146a4 <SWAPBYTE>
 801519a:	4603      	mov	r3, r0
 801519c:	461a      	mov	r2, r3
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80151a2:	68fb      	ldr	r3, [r7, #12]
 80151a4:	3301      	adds	r3, #1
 80151a6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80151a8:	68fb      	ldr	r3, [r7, #12]
 80151aa:	3301      	adds	r3, #1
 80151ac:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80151ae:	68f8      	ldr	r0, [r7, #12]
 80151b0:	f7ff fa78 	bl	80146a4 <SWAPBYTE>
 80151b4:	4603      	mov	r3, r0
 80151b6:	461a      	mov	r2, r3
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	80da      	strh	r2, [r3, #6]
}
 80151bc:	bf00      	nop
 80151be:	3710      	adds	r7, #16
 80151c0:	46bd      	mov	sp, r7
 80151c2:	bd80      	pop	{r7, pc}

080151c4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80151c4:	b580      	push	{r7, lr}
 80151c6:	b082      	sub	sp, #8
 80151c8:	af00      	add	r7, sp, #0
 80151ca:	6078      	str	r0, [r7, #4]
 80151cc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80151ce:	2180      	movs	r1, #128	; 0x80
 80151d0:	6878      	ldr	r0, [r7, #4]
 80151d2:	f002 fd89 	bl	8017ce8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80151d6:	2100      	movs	r1, #0
 80151d8:	6878      	ldr	r0, [r7, #4]
 80151da:	f002 fd85 	bl	8017ce8 <USBD_LL_StallEP>
}
 80151de:	bf00      	nop
 80151e0:	3708      	adds	r7, #8
 80151e2:	46bd      	mov	sp, r7
 80151e4:	bd80      	pop	{r7, pc}

080151e6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80151e6:	b580      	push	{r7, lr}
 80151e8:	b086      	sub	sp, #24
 80151ea:	af00      	add	r7, sp, #0
 80151ec:	60f8      	str	r0, [r7, #12]
 80151ee:	60b9      	str	r1, [r7, #8]
 80151f0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80151f2:	2300      	movs	r3, #0
 80151f4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d036      	beq.n	801526a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8015200:	6938      	ldr	r0, [r7, #16]
 8015202:	f000 f836 	bl	8015272 <USBD_GetLen>
 8015206:	4603      	mov	r3, r0
 8015208:	3301      	adds	r3, #1
 801520a:	b29b      	uxth	r3, r3
 801520c:	005b      	lsls	r3, r3, #1
 801520e:	b29a      	uxth	r2, r3
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8015214:	7dfb      	ldrb	r3, [r7, #23]
 8015216:	68ba      	ldr	r2, [r7, #8]
 8015218:	4413      	add	r3, r2
 801521a:	687a      	ldr	r2, [r7, #4]
 801521c:	7812      	ldrb	r2, [r2, #0]
 801521e:	701a      	strb	r2, [r3, #0]
  idx++;
 8015220:	7dfb      	ldrb	r3, [r7, #23]
 8015222:	3301      	adds	r3, #1
 8015224:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8015226:	7dfb      	ldrb	r3, [r7, #23]
 8015228:	68ba      	ldr	r2, [r7, #8]
 801522a:	4413      	add	r3, r2
 801522c:	2203      	movs	r2, #3
 801522e:	701a      	strb	r2, [r3, #0]
  idx++;
 8015230:	7dfb      	ldrb	r3, [r7, #23]
 8015232:	3301      	adds	r3, #1
 8015234:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8015236:	e013      	b.n	8015260 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8015238:	7dfb      	ldrb	r3, [r7, #23]
 801523a:	68ba      	ldr	r2, [r7, #8]
 801523c:	4413      	add	r3, r2
 801523e:	693a      	ldr	r2, [r7, #16]
 8015240:	7812      	ldrb	r2, [r2, #0]
 8015242:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8015244:	693b      	ldr	r3, [r7, #16]
 8015246:	3301      	adds	r3, #1
 8015248:	613b      	str	r3, [r7, #16]
    idx++;
 801524a:	7dfb      	ldrb	r3, [r7, #23]
 801524c:	3301      	adds	r3, #1
 801524e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8015250:	7dfb      	ldrb	r3, [r7, #23]
 8015252:	68ba      	ldr	r2, [r7, #8]
 8015254:	4413      	add	r3, r2
 8015256:	2200      	movs	r2, #0
 8015258:	701a      	strb	r2, [r3, #0]
    idx++;
 801525a:	7dfb      	ldrb	r3, [r7, #23]
 801525c:	3301      	adds	r3, #1
 801525e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8015260:	693b      	ldr	r3, [r7, #16]
 8015262:	781b      	ldrb	r3, [r3, #0]
 8015264:	2b00      	cmp	r3, #0
 8015266:	d1e7      	bne.n	8015238 <USBD_GetString+0x52>
 8015268:	e000      	b.n	801526c <USBD_GetString+0x86>
    return;
 801526a:	bf00      	nop
  }
}
 801526c:	3718      	adds	r7, #24
 801526e:	46bd      	mov	sp, r7
 8015270:	bd80      	pop	{r7, pc}

08015272 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8015272:	b480      	push	{r7}
 8015274:	b085      	sub	sp, #20
 8015276:	af00      	add	r7, sp, #0
 8015278:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801527a:	2300      	movs	r3, #0
 801527c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8015282:	e005      	b.n	8015290 <USBD_GetLen+0x1e>
  {
    len++;
 8015284:	7bfb      	ldrb	r3, [r7, #15]
 8015286:	3301      	adds	r3, #1
 8015288:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801528a:	68bb      	ldr	r3, [r7, #8]
 801528c:	3301      	adds	r3, #1
 801528e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8015290:	68bb      	ldr	r3, [r7, #8]
 8015292:	781b      	ldrb	r3, [r3, #0]
 8015294:	2b00      	cmp	r3, #0
 8015296:	d1f5      	bne.n	8015284 <USBD_GetLen+0x12>
  }

  return len;
 8015298:	7bfb      	ldrb	r3, [r7, #15]
}
 801529a:	4618      	mov	r0, r3
 801529c:	3714      	adds	r7, #20
 801529e:	46bd      	mov	sp, r7
 80152a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152a4:	4770      	bx	lr

080152a6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80152a6:	b580      	push	{r7, lr}
 80152a8:	b084      	sub	sp, #16
 80152aa:	af00      	add	r7, sp, #0
 80152ac:	60f8      	str	r0, [r7, #12]
 80152ae:	60b9      	str	r1, [r7, #8]
 80152b0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	2202      	movs	r2, #2
 80152b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80152ba:	68fb      	ldr	r3, [r7, #12]
 80152bc:	687a      	ldr	r2, [r7, #4]
 80152be:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80152c0:	68fb      	ldr	r3, [r7, #12]
 80152c2:	687a      	ldr	r2, [r7, #4]
 80152c4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	68ba      	ldr	r2, [r7, #8]
 80152ca:	2100      	movs	r1, #0
 80152cc:	68f8      	ldr	r0, [r7, #12]
 80152ce:	f002 fd95 	bl	8017dfc <USBD_LL_Transmit>

  return USBD_OK;
 80152d2:	2300      	movs	r3, #0
}
 80152d4:	4618      	mov	r0, r3
 80152d6:	3710      	adds	r7, #16
 80152d8:	46bd      	mov	sp, r7
 80152da:	bd80      	pop	{r7, pc}

080152dc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80152dc:	b580      	push	{r7, lr}
 80152de:	b084      	sub	sp, #16
 80152e0:	af00      	add	r7, sp, #0
 80152e2:	60f8      	str	r0, [r7, #12]
 80152e4:	60b9      	str	r1, [r7, #8]
 80152e6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	68ba      	ldr	r2, [r7, #8]
 80152ec:	2100      	movs	r1, #0
 80152ee:	68f8      	ldr	r0, [r7, #12]
 80152f0:	f002 fd84 	bl	8017dfc <USBD_LL_Transmit>

  return USBD_OK;
 80152f4:	2300      	movs	r3, #0
}
 80152f6:	4618      	mov	r0, r3
 80152f8:	3710      	adds	r7, #16
 80152fa:	46bd      	mov	sp, r7
 80152fc:	bd80      	pop	{r7, pc}

080152fe <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80152fe:	b580      	push	{r7, lr}
 8015300:	b084      	sub	sp, #16
 8015302:	af00      	add	r7, sp, #0
 8015304:	60f8      	str	r0, [r7, #12]
 8015306:	60b9      	str	r1, [r7, #8]
 8015308:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801530a:	68fb      	ldr	r3, [r7, #12]
 801530c:	2203      	movs	r2, #3
 801530e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	687a      	ldr	r2, [r7, #4]
 8015316:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801531a:	68fb      	ldr	r3, [r7, #12]
 801531c:	687a      	ldr	r2, [r7, #4]
 801531e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	68ba      	ldr	r2, [r7, #8]
 8015326:	2100      	movs	r1, #0
 8015328:	68f8      	ldr	r0, [r7, #12]
 801532a:	f002 fd88 	bl	8017e3e <USBD_LL_PrepareReceive>

  return USBD_OK;
 801532e:	2300      	movs	r3, #0
}
 8015330:	4618      	mov	r0, r3
 8015332:	3710      	adds	r7, #16
 8015334:	46bd      	mov	sp, r7
 8015336:	bd80      	pop	{r7, pc}

08015338 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8015338:	b580      	push	{r7, lr}
 801533a:	b084      	sub	sp, #16
 801533c:	af00      	add	r7, sp, #0
 801533e:	60f8      	str	r0, [r7, #12]
 8015340:	60b9      	str	r1, [r7, #8]
 8015342:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	68ba      	ldr	r2, [r7, #8]
 8015348:	2100      	movs	r1, #0
 801534a:	68f8      	ldr	r0, [r7, #12]
 801534c:	f002 fd77 	bl	8017e3e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015350:	2300      	movs	r3, #0
}
 8015352:	4618      	mov	r0, r3
 8015354:	3710      	adds	r7, #16
 8015356:	46bd      	mov	sp, r7
 8015358:	bd80      	pop	{r7, pc}

0801535a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801535a:	b580      	push	{r7, lr}
 801535c:	b082      	sub	sp, #8
 801535e:	af00      	add	r7, sp, #0
 8015360:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	2204      	movs	r2, #4
 8015366:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801536a:	2300      	movs	r3, #0
 801536c:	2200      	movs	r2, #0
 801536e:	2100      	movs	r1, #0
 8015370:	6878      	ldr	r0, [r7, #4]
 8015372:	f002 fd43 	bl	8017dfc <USBD_LL_Transmit>

  return USBD_OK;
 8015376:	2300      	movs	r3, #0
}
 8015378:	4618      	mov	r0, r3
 801537a:	3708      	adds	r7, #8
 801537c:	46bd      	mov	sp, r7
 801537e:	bd80      	pop	{r7, pc}

08015380 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8015380:	b580      	push	{r7, lr}
 8015382:	b082      	sub	sp, #8
 8015384:	af00      	add	r7, sp, #0
 8015386:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	2205      	movs	r2, #5
 801538c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015390:	2300      	movs	r3, #0
 8015392:	2200      	movs	r2, #0
 8015394:	2100      	movs	r1, #0
 8015396:	6878      	ldr	r0, [r7, #4]
 8015398:	f002 fd51 	bl	8017e3e <USBD_LL_PrepareReceive>

  return USBD_OK;
 801539c:	2300      	movs	r3, #0
}
 801539e:	4618      	mov	r0, r3
 80153a0:	3708      	adds	r7, #8
 80153a2:	46bd      	mov	sp, r7
 80153a4:	bd80      	pop	{r7, pc}

080153a6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80153a6:	b480      	push	{r7}
 80153a8:	b085      	sub	sp, #20
 80153aa:	af00      	add	r7, sp, #0
 80153ac:	4603      	mov	r3, r0
 80153ae:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80153b0:	2300      	movs	r3, #0
 80153b2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80153b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80153b8:	2b84      	cmp	r3, #132	; 0x84
 80153ba:	d005      	beq.n	80153c8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80153bc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80153c0:	68fb      	ldr	r3, [r7, #12]
 80153c2:	4413      	add	r3, r2
 80153c4:	3303      	adds	r3, #3
 80153c6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80153c8:	68fb      	ldr	r3, [r7, #12]
}
 80153ca:	4618      	mov	r0, r3
 80153cc:	3714      	adds	r7, #20
 80153ce:	46bd      	mov	sp, r7
 80153d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153d4:	4770      	bx	lr

080153d6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80153d6:	b580      	push	{r7, lr}
 80153d8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80153da:	f000 fee9 	bl	80161b0 <vTaskStartScheduler>
  
  return osOK;
 80153de:	2300      	movs	r3, #0
}
 80153e0:	4618      	mov	r0, r3
 80153e2:	bd80      	pop	{r7, pc}

080153e4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80153e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80153e6:	b087      	sub	sp, #28
 80153e8:	af02      	add	r7, sp, #8
 80153ea:	6078      	str	r0, [r7, #4]
 80153ec:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	685c      	ldr	r4, [r3, #4]
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80153fa:	b29e      	uxth	r6, r3
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8015402:	4618      	mov	r0, r3
 8015404:	f7ff ffcf 	bl	80153a6 <makeFreeRtosPriority>
 8015408:	4602      	mov	r2, r0
 801540a:	f107 030c 	add.w	r3, r7, #12
 801540e:	9301      	str	r3, [sp, #4]
 8015410:	9200      	str	r2, [sp, #0]
 8015412:	683b      	ldr	r3, [r7, #0]
 8015414:	4632      	mov	r2, r6
 8015416:	4629      	mov	r1, r5
 8015418:	4620      	mov	r0, r4
 801541a:	f000 fd55 	bl	8015ec8 <xTaskCreate>
 801541e:	4603      	mov	r3, r0
 8015420:	2b01      	cmp	r3, #1
 8015422:	d001      	beq.n	8015428 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8015424:	2300      	movs	r3, #0
 8015426:	e000      	b.n	801542a <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8015428:	68fb      	ldr	r3, [r7, #12]
}
 801542a:	4618      	mov	r0, r3
 801542c:	3714      	adds	r7, #20
 801542e:	46bd      	mov	sp, r7
 8015430:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015432 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8015432:	b580      	push	{r7, lr}
 8015434:	b084      	sub	sp, #16
 8015436:	af00      	add	r7, sp, #0
 8015438:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801543e:	68fb      	ldr	r3, [r7, #12]
 8015440:	2b00      	cmp	r3, #0
 8015442:	d001      	beq.n	8015448 <osDelay+0x16>
 8015444:	68fb      	ldr	r3, [r7, #12]
 8015446:	e000      	b.n	801544a <osDelay+0x18>
 8015448:	2301      	movs	r3, #1
 801544a:	4618      	mov	r0, r3
 801544c:	f000 fe7c 	bl	8016148 <vTaskDelay>
  
  return osOK;
 8015450:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8015452:	4618      	mov	r0, r3
 8015454:	3710      	adds	r7, #16
 8015456:	46bd      	mov	sp, r7
 8015458:	bd80      	pop	{r7, pc}

0801545a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 801545a:	b580      	push	{r7, lr}
 801545c:	b082      	sub	sp, #8
 801545e:	af00      	add	r7, sp, #0
 8015460:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8015462:	2001      	movs	r0, #1
 8015464:	f000 f9a1 	bl	80157aa <xQueueCreateMutex>
 8015468:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 801546a:	4618      	mov	r0, r3
 801546c:	3708      	adds	r7, #8
 801546e:	46bd      	mov	sp, r7
 8015470:	bd80      	pop	{r7, pc}

08015472 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8015472:	b580      	push	{r7, lr}
 8015474:	b084      	sub	sp, #16
 8015476:	af00      	add	r7, sp, #0
 8015478:	6078      	str	r0, [r7, #4]
 801547a:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 801547c:	683b      	ldr	r3, [r7, #0]
 801547e:	2b01      	cmp	r3, #1
 8015480:	d110      	bne.n	80154a4 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8015482:	2203      	movs	r2, #3
 8015484:	2100      	movs	r1, #0
 8015486:	2001      	movs	r0, #1
 8015488:	f000 f920 	bl	80156cc <xQueueGenericCreate>
 801548c:	60f8      	str	r0, [r7, #12]
 801548e:	68fb      	ldr	r3, [r7, #12]
 8015490:	2b00      	cmp	r3, #0
 8015492:	d005      	beq.n	80154a0 <osSemaphoreCreate+0x2e>
 8015494:	2300      	movs	r3, #0
 8015496:	2200      	movs	r2, #0
 8015498:	2100      	movs	r1, #0
 801549a:	68f8      	ldr	r0, [r7, #12]
 801549c:	f000 f99e 	bl	80157dc <xQueueGenericSend>
    return sema;
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	e000      	b.n	80154a6 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 80154a4:	2300      	movs	r3, #0
#endif
  }
#endif
}
 80154a6:	4618      	mov	r0, r3
 80154a8:	3710      	adds	r7, #16
 80154aa:	46bd      	mov	sp, r7
 80154ac:	bd80      	pop	{r7, pc}

080154ae <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80154ae:	b480      	push	{r7}
 80154b0:	b083      	sub	sp, #12
 80154b2:	af00      	add	r7, sp, #0
 80154b4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	f103 0208 	add.w	r2, r3, #8
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	f04f 32ff 	mov.w	r2, #4294967295
 80154c6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	f103 0208 	add.w	r2, r3, #8
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	f103 0208 	add.w	r2, r3, #8
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	2200      	movs	r2, #0
 80154e0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80154e2:	bf00      	nop
 80154e4:	370c      	adds	r7, #12
 80154e6:	46bd      	mov	sp, r7
 80154e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ec:	4770      	bx	lr

080154ee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80154ee:	b480      	push	{r7}
 80154f0:	b083      	sub	sp, #12
 80154f2:	af00      	add	r7, sp, #0
 80154f4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	2200      	movs	r2, #0
 80154fa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80154fc:	bf00      	nop
 80154fe:	370c      	adds	r7, #12
 8015500:	46bd      	mov	sp, r7
 8015502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015506:	4770      	bx	lr

08015508 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015508:	b480      	push	{r7}
 801550a:	b085      	sub	sp, #20
 801550c:	af00      	add	r7, sp, #0
 801550e:	6078      	str	r0, [r7, #4]
 8015510:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	685b      	ldr	r3, [r3, #4]
 8015516:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8015518:	683b      	ldr	r3, [r7, #0]
 801551a:	68fa      	ldr	r2, [r7, #12]
 801551c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801551e:	68fb      	ldr	r3, [r7, #12]
 8015520:	689a      	ldr	r2, [r3, #8]
 8015522:	683b      	ldr	r3, [r7, #0]
 8015524:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8015526:	68fb      	ldr	r3, [r7, #12]
 8015528:	689b      	ldr	r3, [r3, #8]
 801552a:	683a      	ldr	r2, [r7, #0]
 801552c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801552e:	68fb      	ldr	r3, [r7, #12]
 8015530:	683a      	ldr	r2, [r7, #0]
 8015532:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8015534:	683b      	ldr	r3, [r7, #0]
 8015536:	687a      	ldr	r2, [r7, #4]
 8015538:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	681b      	ldr	r3, [r3, #0]
 801553e:	1c5a      	adds	r2, r3, #1
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	601a      	str	r2, [r3, #0]
}
 8015544:	bf00      	nop
 8015546:	3714      	adds	r7, #20
 8015548:	46bd      	mov	sp, r7
 801554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801554e:	4770      	bx	lr

08015550 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015550:	b480      	push	{r7}
 8015552:	b085      	sub	sp, #20
 8015554:	af00      	add	r7, sp, #0
 8015556:	6078      	str	r0, [r7, #4]
 8015558:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801555a:	683b      	ldr	r3, [r7, #0]
 801555c:	681b      	ldr	r3, [r3, #0]
 801555e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8015560:	68bb      	ldr	r3, [r7, #8]
 8015562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015566:	d103      	bne.n	8015570 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	691b      	ldr	r3, [r3, #16]
 801556c:	60fb      	str	r3, [r7, #12]
 801556e:	e00c      	b.n	801558a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	3308      	adds	r3, #8
 8015574:	60fb      	str	r3, [r7, #12]
 8015576:	e002      	b.n	801557e <vListInsert+0x2e>
 8015578:	68fb      	ldr	r3, [r7, #12]
 801557a:	685b      	ldr	r3, [r3, #4]
 801557c:	60fb      	str	r3, [r7, #12]
 801557e:	68fb      	ldr	r3, [r7, #12]
 8015580:	685b      	ldr	r3, [r3, #4]
 8015582:	681b      	ldr	r3, [r3, #0]
 8015584:	68ba      	ldr	r2, [r7, #8]
 8015586:	429a      	cmp	r2, r3
 8015588:	d2f6      	bcs.n	8015578 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801558a:	68fb      	ldr	r3, [r7, #12]
 801558c:	685a      	ldr	r2, [r3, #4]
 801558e:	683b      	ldr	r3, [r7, #0]
 8015590:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8015592:	683b      	ldr	r3, [r7, #0]
 8015594:	685b      	ldr	r3, [r3, #4]
 8015596:	683a      	ldr	r2, [r7, #0]
 8015598:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801559a:	683b      	ldr	r3, [r7, #0]
 801559c:	68fa      	ldr	r2, [r7, #12]
 801559e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80155a0:	68fb      	ldr	r3, [r7, #12]
 80155a2:	683a      	ldr	r2, [r7, #0]
 80155a4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80155a6:	683b      	ldr	r3, [r7, #0]
 80155a8:	687a      	ldr	r2, [r7, #4]
 80155aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	1c5a      	adds	r2, r3, #1
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	601a      	str	r2, [r3, #0]
}
 80155b6:	bf00      	nop
 80155b8:	3714      	adds	r7, #20
 80155ba:	46bd      	mov	sp, r7
 80155bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155c0:	4770      	bx	lr

080155c2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80155c2:	b480      	push	{r7}
 80155c4:	b085      	sub	sp, #20
 80155c6:	af00      	add	r7, sp, #0
 80155c8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	691b      	ldr	r3, [r3, #16]
 80155ce:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	685b      	ldr	r3, [r3, #4]
 80155d4:	687a      	ldr	r2, [r7, #4]
 80155d6:	6892      	ldr	r2, [r2, #8]
 80155d8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	689b      	ldr	r3, [r3, #8]
 80155de:	687a      	ldr	r2, [r7, #4]
 80155e0:	6852      	ldr	r2, [r2, #4]
 80155e2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80155e4:	68fb      	ldr	r3, [r7, #12]
 80155e6:	685b      	ldr	r3, [r3, #4]
 80155e8:	687a      	ldr	r2, [r7, #4]
 80155ea:	429a      	cmp	r2, r3
 80155ec:	d103      	bne.n	80155f6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	689a      	ldr	r2, [r3, #8]
 80155f2:	68fb      	ldr	r3, [r7, #12]
 80155f4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	2200      	movs	r2, #0
 80155fa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80155fc:	68fb      	ldr	r3, [r7, #12]
 80155fe:	681b      	ldr	r3, [r3, #0]
 8015600:	1e5a      	subs	r2, r3, #1
 8015602:	68fb      	ldr	r3, [r7, #12]
 8015604:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8015606:	68fb      	ldr	r3, [r7, #12]
 8015608:	681b      	ldr	r3, [r3, #0]
}
 801560a:	4618      	mov	r0, r3
 801560c:	3714      	adds	r7, #20
 801560e:	46bd      	mov	sp, r7
 8015610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015614:	4770      	bx	lr

08015616 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8015616:	b580      	push	{r7, lr}
 8015618:	b084      	sub	sp, #16
 801561a:	af00      	add	r7, sp, #0
 801561c:	6078      	str	r0, [r7, #4]
 801561e:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015624:	68fb      	ldr	r3, [r7, #12]
 8015626:	2b00      	cmp	r3, #0
 8015628:	d10a      	bne.n	8015640 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801562a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801562e:	f383 8811 	msr	BASEPRI, r3
 8015632:	f3bf 8f6f 	isb	sy
 8015636:	f3bf 8f4f 	dsb	sy
 801563a:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801563c:	bf00      	nop
 801563e:	e7fe      	b.n	801563e <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8015640:	f001 fcc0 	bl	8016fc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015644:	68fb      	ldr	r3, [r7, #12]
 8015646:	681a      	ldr	r2, [r3, #0]
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801564c:	68f9      	ldr	r1, [r7, #12]
 801564e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015650:	fb01 f303 	mul.w	r3, r1, r3
 8015654:	441a      	add	r2, r3
 8015656:	68fb      	ldr	r3, [r7, #12]
 8015658:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801565a:	68fb      	ldr	r3, [r7, #12]
 801565c:	2200      	movs	r2, #0
 801565e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	681a      	ldr	r2, [r3, #0]
 8015664:	68fb      	ldr	r3, [r7, #12]
 8015666:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015668:	68fb      	ldr	r3, [r7, #12]
 801566a:	681a      	ldr	r2, [r3, #0]
 801566c:	68fb      	ldr	r3, [r7, #12]
 801566e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015670:	3b01      	subs	r3, #1
 8015672:	68f9      	ldr	r1, [r7, #12]
 8015674:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015676:	fb01 f303 	mul.w	r3, r1, r3
 801567a:	441a      	add	r2, r3
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8015680:	68fb      	ldr	r3, [r7, #12]
 8015682:	22ff      	movs	r2, #255	; 0xff
 8015684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8015688:	68fb      	ldr	r3, [r7, #12]
 801568a:	22ff      	movs	r2, #255	; 0xff
 801568c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8015690:	683b      	ldr	r3, [r7, #0]
 8015692:	2b00      	cmp	r3, #0
 8015694:	d109      	bne.n	80156aa <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015696:	68fb      	ldr	r3, [r7, #12]
 8015698:	691b      	ldr	r3, [r3, #16]
 801569a:	2b00      	cmp	r3, #0
 801569c:	d00f      	beq.n	80156be <xQueueGenericReset+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801569e:	68fb      	ldr	r3, [r7, #12]
 80156a0:	3310      	adds	r3, #16
 80156a2:	4618      	mov	r0, r3
 80156a4:	f000 ff8c 	bl	80165c0 <xTaskRemoveFromEventList>
 80156a8:	e009      	b.n	80156be <xQueueGenericReset+0xa8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80156aa:	68fb      	ldr	r3, [r7, #12]
 80156ac:	3310      	adds	r3, #16
 80156ae:	4618      	mov	r0, r3
 80156b0:	f7ff fefd 	bl	80154ae <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	3324      	adds	r3, #36	; 0x24
 80156b8:	4618      	mov	r0, r3
 80156ba:	f7ff fef8 	bl	80154ae <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80156be:	f001 fcb1 	bl	8017024 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80156c2:	2301      	movs	r3, #1
}
 80156c4:	4618      	mov	r0, r3
 80156c6:	3710      	adds	r7, #16
 80156c8:	46bd      	mov	sp, r7
 80156ca:	bd80      	pop	{r7, pc}

080156cc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80156cc:	b580      	push	{r7, lr}
 80156ce:	b08a      	sub	sp, #40	; 0x28
 80156d0:	af02      	add	r7, sp, #8
 80156d2:	60f8      	str	r0, [r7, #12]
 80156d4:	60b9      	str	r1, [r7, #8]
 80156d6:	4613      	mov	r3, r2
 80156d8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80156da:	68fb      	ldr	r3, [r7, #12]
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d10a      	bne.n	80156f6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80156e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156e4:	f383 8811 	msr	BASEPRI, r3
 80156e8:	f3bf 8f6f 	isb	sy
 80156ec:	f3bf 8f4f 	dsb	sy
 80156f0:	613b      	str	r3, [r7, #16]
}
 80156f2:	bf00      	nop
 80156f4:	e7fe      	b.n	80156f4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80156f6:	68fb      	ldr	r3, [r7, #12]
 80156f8:	68ba      	ldr	r2, [r7, #8]
 80156fa:	fb02 f303 	mul.w	r3, r2, r3
 80156fe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015700:	69fb      	ldr	r3, [r7, #28]
 8015702:	3348      	adds	r3, #72	; 0x48
 8015704:	4618      	mov	r0, r3
 8015706:	f001 fd7f 	bl	8017208 <pvPortMalloc>
 801570a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801570c:	69bb      	ldr	r3, [r7, #24]
 801570e:	2b00      	cmp	r3, #0
 8015710:	d00d      	beq.n	801572e <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8015712:	69bb      	ldr	r3, [r7, #24]
 8015714:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015716:	697b      	ldr	r3, [r7, #20]
 8015718:	3348      	adds	r3, #72	; 0x48
 801571a:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801571c:	79fa      	ldrb	r2, [r7, #7]
 801571e:	69bb      	ldr	r3, [r7, #24]
 8015720:	9300      	str	r3, [sp, #0]
 8015722:	4613      	mov	r3, r2
 8015724:	697a      	ldr	r2, [r7, #20]
 8015726:	68b9      	ldr	r1, [r7, #8]
 8015728:	68f8      	ldr	r0, [r7, #12]
 801572a:	f000 f805 	bl	8015738 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801572e:	69bb      	ldr	r3, [r7, #24]
	}
 8015730:	4618      	mov	r0, r3
 8015732:	3720      	adds	r7, #32
 8015734:	46bd      	mov	sp, r7
 8015736:	bd80      	pop	{r7, pc}

08015738 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8015738:	b580      	push	{r7, lr}
 801573a:	b084      	sub	sp, #16
 801573c:	af00      	add	r7, sp, #0
 801573e:	60f8      	str	r0, [r7, #12]
 8015740:	60b9      	str	r1, [r7, #8]
 8015742:	607a      	str	r2, [r7, #4]
 8015744:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8015746:	68bb      	ldr	r3, [r7, #8]
 8015748:	2b00      	cmp	r3, #0
 801574a:	d103      	bne.n	8015754 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801574c:	69bb      	ldr	r3, [r7, #24]
 801574e:	69ba      	ldr	r2, [r7, #24]
 8015750:	601a      	str	r2, [r3, #0]
 8015752:	e002      	b.n	801575a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015754:	69bb      	ldr	r3, [r7, #24]
 8015756:	687a      	ldr	r2, [r7, #4]
 8015758:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801575a:	69bb      	ldr	r3, [r7, #24]
 801575c:	68fa      	ldr	r2, [r7, #12]
 801575e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8015760:	69bb      	ldr	r3, [r7, #24]
 8015762:	68ba      	ldr	r2, [r7, #8]
 8015764:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015766:	2101      	movs	r1, #1
 8015768:	69b8      	ldr	r0, [r7, #24]
 801576a:	f7ff ff54 	bl	8015616 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801576e:	bf00      	nop
 8015770:	3710      	adds	r7, #16
 8015772:	46bd      	mov	sp, r7
 8015774:	bd80      	pop	{r7, pc}

08015776 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8015776:	b580      	push	{r7, lr}
 8015778:	b082      	sub	sp, #8
 801577a:	af00      	add	r7, sp, #0
 801577c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	2b00      	cmp	r3, #0
 8015782:	d00e      	beq.n	80157a2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	2200      	movs	r2, #0
 8015788:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	2200      	movs	r2, #0
 801578e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	2200      	movs	r2, #0
 8015794:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8015796:	2300      	movs	r3, #0
 8015798:	2200      	movs	r2, #0
 801579a:	2100      	movs	r1, #0
 801579c:	6878      	ldr	r0, [r7, #4]
 801579e:	f000 f81d 	bl	80157dc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80157a2:	bf00      	nop
 80157a4:	3708      	adds	r7, #8
 80157a6:	46bd      	mov	sp, r7
 80157a8:	bd80      	pop	{r7, pc}

080157aa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80157aa:	b580      	push	{r7, lr}
 80157ac:	b086      	sub	sp, #24
 80157ae:	af00      	add	r7, sp, #0
 80157b0:	4603      	mov	r3, r0
 80157b2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80157b4:	2301      	movs	r3, #1
 80157b6:	617b      	str	r3, [r7, #20]
 80157b8:	2300      	movs	r3, #0
 80157ba:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80157bc:	79fb      	ldrb	r3, [r7, #7]
 80157be:	461a      	mov	r2, r3
 80157c0:	6939      	ldr	r1, [r7, #16]
 80157c2:	6978      	ldr	r0, [r7, #20]
 80157c4:	f7ff ff82 	bl	80156cc <xQueueGenericCreate>
 80157c8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80157ca:	68f8      	ldr	r0, [r7, #12]
 80157cc:	f7ff ffd3 	bl	8015776 <prvInitialiseMutex>

		return xNewQueue;
 80157d0:	68fb      	ldr	r3, [r7, #12]
	}
 80157d2:	4618      	mov	r0, r3
 80157d4:	3718      	adds	r7, #24
 80157d6:	46bd      	mov	sp, r7
 80157d8:	bd80      	pop	{r7, pc}
	...

080157dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80157dc:	b580      	push	{r7, lr}
 80157de:	b08e      	sub	sp, #56	; 0x38
 80157e0:	af00      	add	r7, sp, #0
 80157e2:	60f8      	str	r0, [r7, #12]
 80157e4:	60b9      	str	r1, [r7, #8]
 80157e6:	607a      	str	r2, [r7, #4]
 80157e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80157ea:	2300      	movs	r3, #0
 80157ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80157f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d10a      	bne.n	801580e <xQueueGenericSend+0x32>
	__asm volatile
 80157f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157fc:	f383 8811 	msr	BASEPRI, r3
 8015800:	f3bf 8f6f 	isb	sy
 8015804:	f3bf 8f4f 	dsb	sy
 8015808:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801580a:	bf00      	nop
 801580c:	e7fe      	b.n	801580c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801580e:	68bb      	ldr	r3, [r7, #8]
 8015810:	2b00      	cmp	r3, #0
 8015812:	d103      	bne.n	801581c <xQueueGenericSend+0x40>
 8015814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015818:	2b00      	cmp	r3, #0
 801581a:	d101      	bne.n	8015820 <xQueueGenericSend+0x44>
 801581c:	2301      	movs	r3, #1
 801581e:	e000      	b.n	8015822 <xQueueGenericSend+0x46>
 8015820:	2300      	movs	r3, #0
 8015822:	2b00      	cmp	r3, #0
 8015824:	d10a      	bne.n	801583c <xQueueGenericSend+0x60>
	__asm volatile
 8015826:	f04f 0350 	mov.w	r3, #80	; 0x50
 801582a:	f383 8811 	msr	BASEPRI, r3
 801582e:	f3bf 8f6f 	isb	sy
 8015832:	f3bf 8f4f 	dsb	sy
 8015836:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015838:	bf00      	nop
 801583a:	e7fe      	b.n	801583a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801583c:	683b      	ldr	r3, [r7, #0]
 801583e:	2b02      	cmp	r3, #2
 8015840:	d103      	bne.n	801584a <xQueueGenericSend+0x6e>
 8015842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015846:	2b01      	cmp	r3, #1
 8015848:	d101      	bne.n	801584e <xQueueGenericSend+0x72>
 801584a:	2301      	movs	r3, #1
 801584c:	e000      	b.n	8015850 <xQueueGenericSend+0x74>
 801584e:	2300      	movs	r3, #0
 8015850:	2b00      	cmp	r3, #0
 8015852:	d10a      	bne.n	801586a <xQueueGenericSend+0x8e>
	__asm volatile
 8015854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015858:	f383 8811 	msr	BASEPRI, r3
 801585c:	f3bf 8f6f 	isb	sy
 8015860:	f3bf 8f4f 	dsb	sy
 8015864:	623b      	str	r3, [r7, #32]
}
 8015866:	bf00      	nop
 8015868:	e7fe      	b.n	8015868 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801586a:	f001 f855 	bl	8016918 <xTaskGetSchedulerState>
 801586e:	4603      	mov	r3, r0
 8015870:	2b00      	cmp	r3, #0
 8015872:	d102      	bne.n	801587a <xQueueGenericSend+0x9e>
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	2b00      	cmp	r3, #0
 8015878:	d101      	bne.n	801587e <xQueueGenericSend+0xa2>
 801587a:	2301      	movs	r3, #1
 801587c:	e000      	b.n	8015880 <xQueueGenericSend+0xa4>
 801587e:	2300      	movs	r3, #0
 8015880:	2b00      	cmp	r3, #0
 8015882:	d10a      	bne.n	801589a <xQueueGenericSend+0xbe>
	__asm volatile
 8015884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015888:	f383 8811 	msr	BASEPRI, r3
 801588c:	f3bf 8f6f 	isb	sy
 8015890:	f3bf 8f4f 	dsb	sy
 8015894:	61fb      	str	r3, [r7, #28]
}
 8015896:	bf00      	nop
 8015898:	e7fe      	b.n	8015898 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801589a:	f001 fb93 	bl	8016fc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801589e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80158a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80158a6:	429a      	cmp	r2, r3
 80158a8:	d302      	bcc.n	80158b0 <xQueueGenericSend+0xd4>
 80158aa:	683b      	ldr	r3, [r7, #0]
 80158ac:	2b02      	cmp	r3, #2
 80158ae:	d112      	bne.n	80158d6 <xQueueGenericSend+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80158b0:	683a      	ldr	r2, [r7, #0]
 80158b2:	68b9      	ldr	r1, [r7, #8]
 80158b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80158b6:	f000 fa1d 	bl	8015cf4 <prvCopyDataToQueue>
 80158ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80158bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d004      	beq.n	80158ce <xQueueGenericSend+0xf2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80158c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158c6:	3324      	adds	r3, #36	; 0x24
 80158c8:	4618      	mov	r0, r3
 80158ca:	f000 fe79 	bl	80165c0 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80158ce:	f001 fba9 	bl	8017024 <vPortExitCritical>
				return pdPASS;
 80158d2:	2301      	movs	r3, #1
 80158d4:	e062      	b.n	801599c <xQueueGenericSend+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d103      	bne.n	80158e4 <xQueueGenericSend+0x108>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80158dc:	f001 fba2 	bl	8017024 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80158e0:	2300      	movs	r3, #0
 80158e2:	e05b      	b.n	801599c <xQueueGenericSend+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80158e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d106      	bne.n	80158f8 <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80158ea:	f107 0314 	add.w	r3, r7, #20
 80158ee:	4618      	mov	r0, r3
 80158f0:	f000 fec8 	bl	8016684 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80158f4:	2301      	movs	r3, #1
 80158f6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80158f8:	f001 fb94 	bl	8017024 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80158fc:	f000 fca8 	bl	8016250 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015900:	f001 fb60 	bl	8016fc4 <vPortEnterCritical>
 8015904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015906:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801590a:	b25b      	sxtb	r3, r3
 801590c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015910:	d103      	bne.n	801591a <xQueueGenericSend+0x13e>
 8015912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015914:	2200      	movs	r2, #0
 8015916:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801591a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801591c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015920:	b25b      	sxtb	r3, r3
 8015922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015926:	d103      	bne.n	8015930 <xQueueGenericSend+0x154>
 8015928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801592a:	2200      	movs	r2, #0
 801592c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015930:	f001 fb78 	bl	8017024 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015934:	1d3a      	adds	r2, r7, #4
 8015936:	f107 0314 	add.w	r3, r7, #20
 801593a:	4611      	mov	r1, r2
 801593c:	4618      	mov	r0, r3
 801593e:	f000 feb7 	bl	80166b0 <xTaskCheckForTimeOut>
 8015942:	4603      	mov	r3, r0
 8015944:	2b00      	cmp	r3, #0
 8015946:	d123      	bne.n	8015990 <xQueueGenericSend+0x1b4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015948:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801594a:	f000 faa5 	bl	8015e98 <prvIsQueueFull>
 801594e:	4603      	mov	r3, r0
 8015950:	2b00      	cmp	r3, #0
 8015952:	d017      	beq.n	8015984 <xQueueGenericSend+0x1a8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8015954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015956:	3310      	adds	r3, #16
 8015958:	687a      	ldr	r2, [r7, #4]
 801595a:	4611      	mov	r1, r2
 801595c:	4618      	mov	r0, r3
 801595e:	f000 fe0b 	bl	8016578 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8015962:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015964:	f000 fa30 	bl	8015dc8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8015968:	f000 fc80 	bl	801626c <xTaskResumeAll>
 801596c:	4603      	mov	r3, r0
 801596e:	2b00      	cmp	r3, #0
 8015970:	d193      	bne.n	801589a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8015972:	4b0c      	ldr	r3, [pc, #48]	; (80159a4 <xQueueGenericSend+0x1c8>)
 8015974:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015978:	601a      	str	r2, [r3, #0]
 801597a:	f3bf 8f4f 	dsb	sy
 801597e:	f3bf 8f6f 	isb	sy
 8015982:	e78a      	b.n	801589a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015984:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015986:	f000 fa1f 	bl	8015dc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801598a:	f000 fc6f 	bl	801626c <xTaskResumeAll>
 801598e:	e784      	b.n	801589a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8015990:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015992:	f000 fa19 	bl	8015dc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015996:	f000 fc69 	bl	801626c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801599a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801599c:	4618      	mov	r0, r3
 801599e:	3738      	adds	r7, #56	; 0x38
 80159a0:	46bd      	mov	sp, r7
 80159a2:	bd80      	pop	{r7, pc}
 80159a4:	e000ed04 	.word	0xe000ed04

080159a8 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80159a8:	b580      	push	{r7, lr}
 80159aa:	b08e      	sub	sp, #56	; 0x38
 80159ac:	af00      	add	r7, sp, #0
 80159ae:	6078      	str	r0, [r7, #4]
 80159b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80159b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d10a      	bne.n	80159d2 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80159bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159c0:	f383 8811 	msr	BASEPRI, r3
 80159c4:	f3bf 8f6f 	isb	sy
 80159c8:	f3bf 8f4f 	dsb	sy
 80159cc:	623b      	str	r3, [r7, #32]
}
 80159ce:	bf00      	nop
 80159d0:	e7fe      	b.n	80159d0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80159d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	d00a      	beq.n	80159f0 <xQueueGiveFromISR+0x48>
	__asm volatile
 80159da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159de:	f383 8811 	msr	BASEPRI, r3
 80159e2:	f3bf 8f6f 	isb	sy
 80159e6:	f3bf 8f4f 	dsb	sy
 80159ea:	61fb      	str	r3, [r7, #28]
}
 80159ec:	bf00      	nop
 80159ee:	e7fe      	b.n	80159ee <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80159f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159f2:	681b      	ldr	r3, [r3, #0]
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d103      	bne.n	8015a00 <xQueueGiveFromISR+0x58>
 80159f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159fa:	689b      	ldr	r3, [r3, #8]
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d101      	bne.n	8015a04 <xQueueGiveFromISR+0x5c>
 8015a00:	2301      	movs	r3, #1
 8015a02:	e000      	b.n	8015a06 <xQueueGiveFromISR+0x5e>
 8015a04:	2300      	movs	r3, #0
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	d10a      	bne.n	8015a20 <xQueueGiveFromISR+0x78>
	__asm volatile
 8015a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a0e:	f383 8811 	msr	BASEPRI, r3
 8015a12:	f3bf 8f6f 	isb	sy
 8015a16:	f3bf 8f4f 	dsb	sy
 8015a1a:	61bb      	str	r3, [r7, #24]
}
 8015a1c:	bf00      	nop
 8015a1e:	e7fe      	b.n	8015a1e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015a20:	f001 fbb2 	bl	8017188 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8015a24:	f3ef 8211 	mrs	r2, BASEPRI
 8015a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a2c:	f383 8811 	msr	BASEPRI, r3
 8015a30:	f3bf 8f6f 	isb	sy
 8015a34:	f3bf 8f4f 	dsb	sy
 8015a38:	617a      	str	r2, [r7, #20]
 8015a3a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8015a3c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a44:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8015a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015a4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015a4c:	429a      	cmp	r2, r3
 8015a4e:	d22b      	bcs.n	8015aa8 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015a56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a5c:	1c5a      	adds	r2, r3, #1
 8015a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a60:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015a62:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a6a:	d112      	bne.n	8015a92 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d016      	beq.n	8015aa2 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a76:	3324      	adds	r3, #36	; 0x24
 8015a78:	4618      	mov	r0, r3
 8015a7a:	f000 fda1 	bl	80165c0 <xTaskRemoveFromEventList>
 8015a7e:	4603      	mov	r3, r0
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d00e      	beq.n	8015aa2 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015a84:	683b      	ldr	r3, [r7, #0]
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	d00b      	beq.n	8015aa2 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015a8a:	683b      	ldr	r3, [r7, #0]
 8015a8c:	2201      	movs	r2, #1
 8015a8e:	601a      	str	r2, [r3, #0]
 8015a90:	e007      	b.n	8015aa2 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015a92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015a96:	3301      	adds	r3, #1
 8015a98:	b2db      	uxtb	r3, r3
 8015a9a:	b25a      	sxtb	r2, r3
 8015a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015aa2:	2301      	movs	r3, #1
 8015aa4:	637b      	str	r3, [r7, #52]	; 0x34
 8015aa6:	e001      	b.n	8015aac <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015aa8:	2300      	movs	r3, #0
 8015aaa:	637b      	str	r3, [r7, #52]	; 0x34
 8015aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015aae:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8015ab6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015aba:	4618      	mov	r0, r3
 8015abc:	3738      	adds	r7, #56	; 0x38
 8015abe:	46bd      	mov	sp, r7
 8015ac0:	bd80      	pop	{r7, pc}
	...

08015ac4 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8015ac4:	b580      	push	{r7, lr}
 8015ac6:	b08e      	sub	sp, #56	; 0x38
 8015ac8:	af00      	add	r7, sp, #0
 8015aca:	6078      	str	r0, [r7, #4]
 8015acc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8015ace:	2300      	movs	r3, #0
 8015ad0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8015ad6:	2300      	movs	r3, #0
 8015ad8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d10a      	bne.n	8015af6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8015ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ae4:	f383 8811 	msr	BASEPRI, r3
 8015ae8:	f3bf 8f6f 	isb	sy
 8015aec:	f3bf 8f4f 	dsb	sy
 8015af0:	623b      	str	r3, [r7, #32]
}
 8015af2:	bf00      	nop
 8015af4:	e7fe      	b.n	8015af4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d00a      	beq.n	8015b14 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8015afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b02:	f383 8811 	msr	BASEPRI, r3
 8015b06:	f3bf 8f6f 	isb	sy
 8015b0a:	f3bf 8f4f 	dsb	sy
 8015b0e:	61fb      	str	r3, [r7, #28]
}
 8015b10:	bf00      	nop
 8015b12:	e7fe      	b.n	8015b12 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015b14:	f000 ff00 	bl	8016918 <xTaskGetSchedulerState>
 8015b18:	4603      	mov	r3, r0
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d102      	bne.n	8015b24 <xQueueSemaphoreTake+0x60>
 8015b1e:	683b      	ldr	r3, [r7, #0]
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d101      	bne.n	8015b28 <xQueueSemaphoreTake+0x64>
 8015b24:	2301      	movs	r3, #1
 8015b26:	e000      	b.n	8015b2a <xQueueSemaphoreTake+0x66>
 8015b28:	2300      	movs	r3, #0
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d10a      	bne.n	8015b44 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8015b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b32:	f383 8811 	msr	BASEPRI, r3
 8015b36:	f3bf 8f6f 	isb	sy
 8015b3a:	f3bf 8f4f 	dsb	sy
 8015b3e:	61bb      	str	r3, [r7, #24]
}
 8015b40:	bf00      	nop
 8015b42:	e7fe      	b.n	8015b42 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015b44:	f001 fa3e 	bl	8016fc4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8015b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015b4c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8015b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	d019      	beq.n	8015b88 <xQueueSemaphoreTake+0xc4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8015b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b56:	1e5a      	subs	r2, r3, #1
 8015b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b5a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b5e:	681b      	ldr	r3, [r3, #0]
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d104      	bne.n	8015b6e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8015b64:	f001 f880 	bl	8016c68 <pvTaskIncrementMutexHeldCount>
 8015b68:	4602      	mov	r2, r0
 8015b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b6c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b70:	691b      	ldr	r3, [r3, #16]
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d004      	beq.n	8015b80 <xQueueSemaphoreTake+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b78:	3310      	adds	r3, #16
 8015b7a:	4618      	mov	r0, r3
 8015b7c:	f000 fd20 	bl	80165c0 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015b80:	f001 fa50 	bl	8017024 <vPortExitCritical>
				return pdPASS;
 8015b84:	2301      	movs	r3, #1
 8015b86:	e097      	b.n	8015cb8 <xQueueSemaphoreTake+0x1f4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015b88:	683b      	ldr	r3, [r7, #0]
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d111      	bne.n	8015bb2 <xQueueSemaphoreTake+0xee>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8015b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d00a      	beq.n	8015baa <xQueueSemaphoreTake+0xe6>
	__asm volatile
 8015b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b98:	f383 8811 	msr	BASEPRI, r3
 8015b9c:	f3bf 8f6f 	isb	sy
 8015ba0:	f3bf 8f4f 	dsb	sy
 8015ba4:	617b      	str	r3, [r7, #20]
}
 8015ba6:	bf00      	nop
 8015ba8:	e7fe      	b.n	8015ba8 <xQueueSemaphoreTake+0xe4>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8015baa:	f001 fa3b 	bl	8017024 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015bae:	2300      	movs	r3, #0
 8015bb0:	e082      	b.n	8015cb8 <xQueueSemaphoreTake+0x1f4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d106      	bne.n	8015bc6 <xQueueSemaphoreTake+0x102>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015bb8:	f107 030c 	add.w	r3, r7, #12
 8015bbc:	4618      	mov	r0, r3
 8015bbe:	f000 fd61 	bl	8016684 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015bc2:	2301      	movs	r3, #1
 8015bc4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015bc6:	f001 fa2d 	bl	8017024 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015bca:	f000 fb41 	bl	8016250 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015bce:	f001 f9f9 	bl	8016fc4 <vPortEnterCritical>
 8015bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015bd8:	b25b      	sxtb	r3, r3
 8015bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015bde:	d103      	bne.n	8015be8 <xQueueSemaphoreTake+0x124>
 8015be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015be2:	2200      	movs	r2, #0
 8015be4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015bee:	b25b      	sxtb	r3, r3
 8015bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015bf4:	d103      	bne.n	8015bfe <xQueueSemaphoreTake+0x13a>
 8015bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bf8:	2200      	movs	r2, #0
 8015bfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015bfe:	f001 fa11 	bl	8017024 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015c02:	463a      	mov	r2, r7
 8015c04:	f107 030c 	add.w	r3, r7, #12
 8015c08:	4611      	mov	r1, r2
 8015c0a:	4618      	mov	r0, r3
 8015c0c:	f000 fd50 	bl	80166b0 <xTaskCheckForTimeOut>
 8015c10:	4603      	mov	r3, r0
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d132      	bne.n	8015c7c <xQueueSemaphoreTake+0x1b8>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015c16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015c18:	f000 f928 	bl	8015e6c <prvIsQueueEmpty>
 8015c1c:	4603      	mov	r3, r0
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	d026      	beq.n	8015c70 <xQueueSemaphoreTake+0x1ac>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d109      	bne.n	8015c3e <xQueueSemaphoreTake+0x17a>
					{
						taskENTER_CRITICAL();
 8015c2a:	f001 f9cb 	bl	8016fc4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c30:	689b      	ldr	r3, [r3, #8]
 8015c32:	4618      	mov	r0, r3
 8015c34:	f000 fe8e 	bl	8016954 <xTaskPriorityInherit>
 8015c38:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8015c3a:	f001 f9f3 	bl	8017024 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c40:	3324      	adds	r3, #36	; 0x24
 8015c42:	683a      	ldr	r2, [r7, #0]
 8015c44:	4611      	mov	r1, r2
 8015c46:	4618      	mov	r0, r3
 8015c48:	f000 fc96 	bl	8016578 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015c4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015c4e:	f000 f8bb 	bl	8015dc8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015c52:	f000 fb0b 	bl	801626c <xTaskResumeAll>
 8015c56:	4603      	mov	r3, r0
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	f47f af73 	bne.w	8015b44 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8015c5e:	4b18      	ldr	r3, [pc, #96]	; (8015cc0 <xQueueSemaphoreTake+0x1fc>)
 8015c60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015c64:	601a      	str	r2, [r3, #0]
 8015c66:	f3bf 8f4f 	dsb	sy
 8015c6a:	f3bf 8f6f 	isb	sy
 8015c6e:	e769      	b.n	8015b44 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8015c70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015c72:	f000 f8a9 	bl	8015dc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015c76:	f000 faf9 	bl	801626c <xTaskResumeAll>
 8015c7a:	e763      	b.n	8015b44 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8015c7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015c7e:	f000 f8a3 	bl	8015dc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015c82:	f000 faf3 	bl	801626c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015c86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015c88:	f000 f8f0 	bl	8015e6c <prvIsQueueEmpty>
 8015c8c:	4603      	mov	r3, r0
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	f43f af58 	beq.w	8015b44 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8015c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d00d      	beq.n	8015cb6 <xQueueSemaphoreTake+0x1f2>
					{
						taskENTER_CRITICAL();
 8015c9a:	f001 f993 	bl	8016fc4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8015c9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015ca0:	f000 f810 	bl	8015cc4 <prvGetDisinheritPriorityAfterTimeout>
 8015ca4:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8015ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ca8:	689b      	ldr	r3, [r3, #8]
 8015caa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015cac:	4618      	mov	r0, r3
 8015cae:	f000 ff4d 	bl	8016b4c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8015cb2:	f001 f9b7 	bl	8017024 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015cb6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8015cb8:	4618      	mov	r0, r3
 8015cba:	3738      	adds	r7, #56	; 0x38
 8015cbc:	46bd      	mov	sp, r7
 8015cbe:	bd80      	pop	{r7, pc}
 8015cc0:	e000ed04 	.word	0xe000ed04

08015cc4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8015cc4:	b480      	push	{r7}
 8015cc6:	b085      	sub	sp, #20
 8015cc8:	af00      	add	r7, sp, #0
 8015cca:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	d006      	beq.n	8015ce2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015cd8:	681b      	ldr	r3, [r3, #0]
 8015cda:	f1c3 0307 	rsb	r3, r3, #7
 8015cde:	60fb      	str	r3, [r7, #12]
 8015ce0:	e001      	b.n	8015ce6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8015ce2:	2300      	movs	r3, #0
 8015ce4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8015ce6:	68fb      	ldr	r3, [r7, #12]
	}
 8015ce8:	4618      	mov	r0, r3
 8015cea:	3714      	adds	r7, #20
 8015cec:	46bd      	mov	sp, r7
 8015cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cf2:	4770      	bx	lr

08015cf4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8015cf4:	b580      	push	{r7, lr}
 8015cf6:	b086      	sub	sp, #24
 8015cf8:	af00      	add	r7, sp, #0
 8015cfa:	60f8      	str	r0, [r7, #12]
 8015cfc:	60b9      	str	r1, [r7, #8]
 8015cfe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8015d00:	2300      	movs	r3, #0
 8015d02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015d04:	68fb      	ldr	r3, [r7, #12]
 8015d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015d08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d10d      	bne.n	8015d2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015d12:	68fb      	ldr	r3, [r7, #12]
 8015d14:	681b      	ldr	r3, [r3, #0]
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d14d      	bne.n	8015db6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015d1a:	68fb      	ldr	r3, [r7, #12]
 8015d1c:	689b      	ldr	r3, [r3, #8]
 8015d1e:	4618      	mov	r0, r3
 8015d20:	f000 fe8e 	bl	8016a40 <xTaskPriorityDisinherit>
 8015d24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8015d26:	68fb      	ldr	r3, [r7, #12]
 8015d28:	2200      	movs	r2, #0
 8015d2a:	609a      	str	r2, [r3, #8]
 8015d2c:	e043      	b.n	8015db6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d119      	bne.n	8015d68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015d34:	68fb      	ldr	r3, [r7, #12]
 8015d36:	6858      	ldr	r0, [r3, #4]
 8015d38:	68fb      	ldr	r3, [r7, #12]
 8015d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d3c:	461a      	mov	r2, r3
 8015d3e:	68b9      	ldr	r1, [r7, #8]
 8015d40:	f002 f98c 	bl	801805c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015d44:	68fb      	ldr	r3, [r7, #12]
 8015d46:	685a      	ldr	r2, [r3, #4]
 8015d48:	68fb      	ldr	r3, [r7, #12]
 8015d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d4c:	441a      	add	r2, r3
 8015d4e:	68fb      	ldr	r3, [r7, #12]
 8015d50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	685a      	ldr	r2, [r3, #4]
 8015d56:	68fb      	ldr	r3, [r7, #12]
 8015d58:	689b      	ldr	r3, [r3, #8]
 8015d5a:	429a      	cmp	r2, r3
 8015d5c:	d32b      	bcc.n	8015db6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8015d5e:	68fb      	ldr	r3, [r7, #12]
 8015d60:	681a      	ldr	r2, [r3, #0]
 8015d62:	68fb      	ldr	r3, [r7, #12]
 8015d64:	605a      	str	r2, [r3, #4]
 8015d66:	e026      	b.n	8015db6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8015d68:	68fb      	ldr	r3, [r7, #12]
 8015d6a:	68d8      	ldr	r0, [r3, #12]
 8015d6c:	68fb      	ldr	r3, [r7, #12]
 8015d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d70:	461a      	mov	r2, r3
 8015d72:	68b9      	ldr	r1, [r7, #8]
 8015d74:	f002 f972 	bl	801805c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8015d78:	68fb      	ldr	r3, [r7, #12]
 8015d7a:	68da      	ldr	r2, [r3, #12]
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d80:	425b      	negs	r3, r3
 8015d82:	441a      	add	r2, r3
 8015d84:	68fb      	ldr	r3, [r7, #12]
 8015d86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015d88:	68fb      	ldr	r3, [r7, #12]
 8015d8a:	68da      	ldr	r2, [r3, #12]
 8015d8c:	68fb      	ldr	r3, [r7, #12]
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	429a      	cmp	r2, r3
 8015d92:	d207      	bcs.n	8015da4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8015d94:	68fb      	ldr	r3, [r7, #12]
 8015d96:	689a      	ldr	r2, [r3, #8]
 8015d98:	68fb      	ldr	r3, [r7, #12]
 8015d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d9c:	425b      	negs	r3, r3
 8015d9e:	441a      	add	r2, r3
 8015da0:	68fb      	ldr	r3, [r7, #12]
 8015da2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	2b02      	cmp	r3, #2
 8015da8:	d105      	bne.n	8015db6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015daa:	693b      	ldr	r3, [r7, #16]
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d002      	beq.n	8015db6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8015db0:	693b      	ldr	r3, [r7, #16]
 8015db2:	3b01      	subs	r3, #1
 8015db4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015db6:	693b      	ldr	r3, [r7, #16]
 8015db8:	1c5a      	adds	r2, r3, #1
 8015dba:	68fb      	ldr	r3, [r7, #12]
 8015dbc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8015dbe:	697b      	ldr	r3, [r7, #20]
}
 8015dc0:	4618      	mov	r0, r3
 8015dc2:	3718      	adds	r7, #24
 8015dc4:	46bd      	mov	sp, r7
 8015dc6:	bd80      	pop	{r7, pc}

08015dc8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015dc8:	b580      	push	{r7, lr}
 8015dca:	b084      	sub	sp, #16
 8015dcc:	af00      	add	r7, sp, #0
 8015dce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8015dd0:	f001 f8f8 	bl	8016fc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015dda:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015ddc:	e011      	b.n	8015e02 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d012      	beq.n	8015e0c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	3324      	adds	r3, #36	; 0x24
 8015dea:	4618      	mov	r0, r3
 8015dec:	f000 fbe8 	bl	80165c0 <xTaskRemoveFromEventList>
 8015df0:	4603      	mov	r3, r0
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	d001      	beq.n	8015dfa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8015df6:	f000 fccd 	bl	8016794 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8015dfa:	7bfb      	ldrb	r3, [r7, #15]
 8015dfc:	3b01      	subs	r3, #1
 8015dfe:	b2db      	uxtb	r3, r3
 8015e00:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	dce9      	bgt.n	8015dde <prvUnlockQueue+0x16>
 8015e0a:	e000      	b.n	8015e0e <prvUnlockQueue+0x46>
					break;
 8015e0c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	22ff      	movs	r2, #255	; 0xff
 8015e12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8015e16:	f001 f905 	bl	8017024 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8015e1a:	f001 f8d3 	bl	8016fc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015e24:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015e26:	e011      	b.n	8015e4c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	691b      	ldr	r3, [r3, #16]
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d012      	beq.n	8015e56 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	3310      	adds	r3, #16
 8015e34:	4618      	mov	r0, r3
 8015e36:	f000 fbc3 	bl	80165c0 <xTaskRemoveFromEventList>
 8015e3a:	4603      	mov	r3, r0
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d001      	beq.n	8015e44 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8015e40:	f000 fca8 	bl	8016794 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8015e44:	7bbb      	ldrb	r3, [r7, #14]
 8015e46:	3b01      	subs	r3, #1
 8015e48:	b2db      	uxtb	r3, r3
 8015e4a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015e4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	dce9      	bgt.n	8015e28 <prvUnlockQueue+0x60>
 8015e54:	e000      	b.n	8015e58 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8015e56:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	22ff      	movs	r2, #255	; 0xff
 8015e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8015e60:	f001 f8e0 	bl	8017024 <vPortExitCritical>
}
 8015e64:	bf00      	nop
 8015e66:	3710      	adds	r7, #16
 8015e68:	46bd      	mov	sp, r7
 8015e6a:	bd80      	pop	{r7, pc}

08015e6c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015e6c:	b580      	push	{r7, lr}
 8015e6e:	b084      	sub	sp, #16
 8015e70:	af00      	add	r7, sp, #0
 8015e72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015e74:	f001 f8a6 	bl	8016fc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d102      	bne.n	8015e86 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8015e80:	2301      	movs	r3, #1
 8015e82:	60fb      	str	r3, [r7, #12]
 8015e84:	e001      	b.n	8015e8a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8015e86:	2300      	movs	r3, #0
 8015e88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015e8a:	f001 f8cb 	bl	8017024 <vPortExitCritical>

	return xReturn;
 8015e8e:	68fb      	ldr	r3, [r7, #12]
}
 8015e90:	4618      	mov	r0, r3
 8015e92:	3710      	adds	r7, #16
 8015e94:	46bd      	mov	sp, r7
 8015e96:	bd80      	pop	{r7, pc}

08015e98 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8015e98:	b580      	push	{r7, lr}
 8015e9a:	b084      	sub	sp, #16
 8015e9c:	af00      	add	r7, sp, #0
 8015e9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015ea0:	f001 f890 	bl	8016fc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015eac:	429a      	cmp	r2, r3
 8015eae:	d102      	bne.n	8015eb6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8015eb0:	2301      	movs	r3, #1
 8015eb2:	60fb      	str	r3, [r7, #12]
 8015eb4:	e001      	b.n	8015eba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8015eb6:	2300      	movs	r3, #0
 8015eb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015eba:	f001 f8b3 	bl	8017024 <vPortExitCritical>

	return xReturn;
 8015ebe:	68fb      	ldr	r3, [r7, #12]
}
 8015ec0:	4618      	mov	r0, r3
 8015ec2:	3710      	adds	r7, #16
 8015ec4:	46bd      	mov	sp, r7
 8015ec6:	bd80      	pop	{r7, pc}

08015ec8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8015ec8:	b580      	push	{r7, lr}
 8015eca:	b08c      	sub	sp, #48	; 0x30
 8015ecc:	af04      	add	r7, sp, #16
 8015ece:	60f8      	str	r0, [r7, #12]
 8015ed0:	60b9      	str	r1, [r7, #8]
 8015ed2:	603b      	str	r3, [r7, #0]
 8015ed4:	4613      	mov	r3, r2
 8015ed6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8015ed8:	88fb      	ldrh	r3, [r7, #6]
 8015eda:	009b      	lsls	r3, r3, #2
 8015edc:	4618      	mov	r0, r3
 8015ede:	f001 f993 	bl	8017208 <pvPortMalloc>
 8015ee2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8015ee4:	697b      	ldr	r3, [r7, #20]
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d00e      	beq.n	8015f08 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8015eea:	20b4      	movs	r0, #180	; 0xb4
 8015eec:	f001 f98c 	bl	8017208 <pvPortMalloc>
 8015ef0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8015ef2:	69fb      	ldr	r3, [r7, #28]
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d003      	beq.n	8015f00 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8015ef8:	69fb      	ldr	r3, [r7, #28]
 8015efa:	697a      	ldr	r2, [r7, #20]
 8015efc:	631a      	str	r2, [r3, #48]	; 0x30
 8015efe:	e005      	b.n	8015f0c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8015f00:	6978      	ldr	r0, [r7, #20]
 8015f02:	f001 fa4d 	bl	80173a0 <vPortFree>
 8015f06:	e001      	b.n	8015f0c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8015f08:	2300      	movs	r3, #0
 8015f0a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8015f0c:	69fb      	ldr	r3, [r7, #28]
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d013      	beq.n	8015f3a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8015f12:	88fa      	ldrh	r2, [r7, #6]
 8015f14:	2300      	movs	r3, #0
 8015f16:	9303      	str	r3, [sp, #12]
 8015f18:	69fb      	ldr	r3, [r7, #28]
 8015f1a:	9302      	str	r3, [sp, #8]
 8015f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f1e:	9301      	str	r3, [sp, #4]
 8015f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f22:	9300      	str	r3, [sp, #0]
 8015f24:	683b      	ldr	r3, [r7, #0]
 8015f26:	68b9      	ldr	r1, [r7, #8]
 8015f28:	68f8      	ldr	r0, [r7, #12]
 8015f2a:	f000 f80f 	bl	8015f4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015f2e:	69f8      	ldr	r0, [r7, #28]
 8015f30:	f000 f8ae 	bl	8016090 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8015f34:	2301      	movs	r3, #1
 8015f36:	61bb      	str	r3, [r7, #24]
 8015f38:	e002      	b.n	8015f40 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8015f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8015f3e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8015f40:	69bb      	ldr	r3, [r7, #24]
	}
 8015f42:	4618      	mov	r0, r3
 8015f44:	3720      	adds	r7, #32
 8015f46:	46bd      	mov	sp, r7
 8015f48:	bd80      	pop	{r7, pc}
	...

08015f4c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8015f4c:	b580      	push	{r7, lr}
 8015f4e:	b088      	sub	sp, #32
 8015f50:	af00      	add	r7, sp, #0
 8015f52:	60f8      	str	r0, [r7, #12]
 8015f54:	60b9      	str	r1, [r7, #8]
 8015f56:	607a      	str	r2, [r7, #4]
 8015f58:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8015f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8015f64:	3b01      	subs	r3, #1
 8015f66:	009b      	lsls	r3, r3, #2
 8015f68:	4413      	add	r3, r2
 8015f6a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8015f6c:	69bb      	ldr	r3, [r7, #24]
 8015f6e:	f023 0307 	bic.w	r3, r3, #7
 8015f72:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8015f74:	69bb      	ldr	r3, [r7, #24]
 8015f76:	f003 0307 	and.w	r3, r3, #7
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d00a      	beq.n	8015f94 <prvInitialiseNewTask+0x48>
	__asm volatile
 8015f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f82:	f383 8811 	msr	BASEPRI, r3
 8015f86:	f3bf 8f6f 	isb	sy
 8015f8a:	f3bf 8f4f 	dsb	sy
 8015f8e:	617b      	str	r3, [r7, #20]
}
 8015f90:	bf00      	nop
 8015f92:	e7fe      	b.n	8015f92 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8015f94:	68bb      	ldr	r3, [r7, #8]
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	d01f      	beq.n	8015fda <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015f9a:	2300      	movs	r3, #0
 8015f9c:	61fb      	str	r3, [r7, #28]
 8015f9e:	e012      	b.n	8015fc6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8015fa0:	68ba      	ldr	r2, [r7, #8]
 8015fa2:	69fb      	ldr	r3, [r7, #28]
 8015fa4:	4413      	add	r3, r2
 8015fa6:	7819      	ldrb	r1, [r3, #0]
 8015fa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015faa:	69fb      	ldr	r3, [r7, #28]
 8015fac:	4413      	add	r3, r2
 8015fae:	3334      	adds	r3, #52	; 0x34
 8015fb0:	460a      	mov	r2, r1
 8015fb2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8015fb4:	68ba      	ldr	r2, [r7, #8]
 8015fb6:	69fb      	ldr	r3, [r7, #28]
 8015fb8:	4413      	add	r3, r2
 8015fba:	781b      	ldrb	r3, [r3, #0]
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d006      	beq.n	8015fce <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015fc0:	69fb      	ldr	r3, [r7, #28]
 8015fc2:	3301      	adds	r3, #1
 8015fc4:	61fb      	str	r3, [r7, #28]
 8015fc6:	69fb      	ldr	r3, [r7, #28]
 8015fc8:	2b0f      	cmp	r3, #15
 8015fca:	d9e9      	bls.n	8015fa0 <prvInitialiseNewTask+0x54>
 8015fcc:	e000      	b.n	8015fd0 <prvInitialiseNewTask+0x84>
			{
				break;
 8015fce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8015fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fd2:	2200      	movs	r2, #0
 8015fd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8015fd8:	e003      	b.n	8015fe2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8015fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fdc:	2200      	movs	r2, #0
 8015fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8015fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fe4:	2b06      	cmp	r3, #6
 8015fe6:	d901      	bls.n	8015fec <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8015fe8:	2306      	movs	r3, #6
 8015fea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8015fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015ff0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8015ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ff4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015ff6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8015ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ffa:	2200      	movs	r2, #0
 8015ffc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8015ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016000:	3304      	adds	r3, #4
 8016002:	4618      	mov	r0, r3
 8016004:	f7ff fa73 	bl	80154ee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8016008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801600a:	3318      	adds	r3, #24
 801600c:	4618      	mov	r0, r3
 801600e:	f7ff fa6e 	bl	80154ee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8016012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016016:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801601a:	f1c3 0207 	rsb	r2, r3, #7
 801601e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016020:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8016022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016026:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8016028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801602a:	2200      	movs	r2, #0
 801602c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8016030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016032:	2200      	movs	r2, #0
 8016034:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8016038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801603a:	334c      	adds	r3, #76	; 0x4c
 801603c:	2260      	movs	r2, #96	; 0x60
 801603e:	2100      	movs	r1, #0
 8016040:	4618      	mov	r0, r3
 8016042:	f002 f819 	bl	8018078 <memset>
 8016046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016048:	4a0e      	ldr	r2, [pc, #56]	; (8016084 <prvInitialiseNewTask+0x138>)
 801604a:	651a      	str	r2, [r3, #80]	; 0x50
 801604c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801604e:	4a0e      	ldr	r2, [pc, #56]	; (8016088 <prvInitialiseNewTask+0x13c>)
 8016050:	655a      	str	r2, [r3, #84]	; 0x54
 8016052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016054:	4a0d      	ldr	r2, [pc, #52]	; (801608c <prvInitialiseNewTask+0x140>)
 8016056:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 8016058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801605a:	2200      	movs	r2, #0
 801605c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8016060:	683a      	ldr	r2, [r7, #0]
 8016062:	68f9      	ldr	r1, [r7, #12]
 8016064:	69b8      	ldr	r0, [r7, #24]
 8016066:	f000 fe7d 	bl	8016d64 <pxPortInitialiseStack>
 801606a:	4602      	mov	r2, r0
 801606c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801606e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8016070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016072:	2b00      	cmp	r3, #0
 8016074:	d002      	beq.n	801607c <prvInitialiseNewTask+0x130>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8016076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801607a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801607c:	bf00      	nop
 801607e:	3720      	adds	r7, #32
 8016080:	46bd      	mov	sp, r7
 8016082:	bd80      	pop	{r7, pc}
 8016084:	080194a8 	.word	0x080194a8
 8016088:	080194c8 	.word	0x080194c8
 801608c:	08019488 	.word	0x08019488

08016090 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8016090:	b580      	push	{r7, lr}
 8016092:	b082      	sub	sp, #8
 8016094:	af00      	add	r7, sp, #0
 8016096:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8016098:	f000 ff94 	bl	8016fc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801609c:	4b24      	ldr	r3, [pc, #144]	; (8016130 <prvAddNewTaskToReadyList+0xa0>)
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	3301      	adds	r3, #1
 80160a2:	4a23      	ldr	r2, [pc, #140]	; (8016130 <prvAddNewTaskToReadyList+0xa0>)
 80160a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80160a6:	4b23      	ldr	r3, [pc, #140]	; (8016134 <prvAddNewTaskToReadyList+0xa4>)
 80160a8:	681b      	ldr	r3, [r3, #0]
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	d109      	bne.n	80160c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80160ae:	4a21      	ldr	r2, [pc, #132]	; (8016134 <prvAddNewTaskToReadyList+0xa4>)
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80160b4:	4b1e      	ldr	r3, [pc, #120]	; (8016130 <prvAddNewTaskToReadyList+0xa0>)
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	2b01      	cmp	r3, #1
 80160ba:	d110      	bne.n	80160de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80160bc:	f000 fb88 	bl	80167d0 <prvInitialiseTaskLists>
 80160c0:	e00d      	b.n	80160de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80160c2:	4b1d      	ldr	r3, [pc, #116]	; (8016138 <prvAddNewTaskToReadyList+0xa8>)
 80160c4:	681b      	ldr	r3, [r3, #0]
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d109      	bne.n	80160de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80160ca:	4b1a      	ldr	r3, [pc, #104]	; (8016134 <prvAddNewTaskToReadyList+0xa4>)
 80160cc:	681b      	ldr	r3, [r3, #0]
 80160ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80160d4:	429a      	cmp	r2, r3
 80160d6:	d802      	bhi.n	80160de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80160d8:	4a16      	ldr	r2, [pc, #88]	; (8016134 <prvAddNewTaskToReadyList+0xa4>)
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80160de:	4b17      	ldr	r3, [pc, #92]	; (801613c <prvAddNewTaskToReadyList+0xac>)
 80160e0:	681b      	ldr	r3, [r3, #0]
 80160e2:	3301      	adds	r3, #1
 80160e4:	4a15      	ldr	r2, [pc, #84]	; (801613c <prvAddNewTaskToReadyList+0xac>)
 80160e6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80160ec:	2201      	movs	r2, #1
 80160ee:	409a      	lsls	r2, r3
 80160f0:	4b13      	ldr	r3, [pc, #76]	; (8016140 <prvAddNewTaskToReadyList+0xb0>)
 80160f2:	681b      	ldr	r3, [r3, #0]
 80160f4:	4313      	orrs	r3, r2
 80160f6:	4a12      	ldr	r2, [pc, #72]	; (8016140 <prvAddNewTaskToReadyList+0xb0>)
 80160f8:	6013      	str	r3, [r2, #0]
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80160fe:	4613      	mov	r3, r2
 8016100:	009b      	lsls	r3, r3, #2
 8016102:	4413      	add	r3, r2
 8016104:	009b      	lsls	r3, r3, #2
 8016106:	4a0f      	ldr	r2, [pc, #60]	; (8016144 <prvAddNewTaskToReadyList+0xb4>)
 8016108:	441a      	add	r2, r3
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	3304      	adds	r3, #4
 801610e:	4619      	mov	r1, r3
 8016110:	4610      	mov	r0, r2
 8016112:	f7ff f9f9 	bl	8015508 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8016116:	f000 ff85 	bl	8017024 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801611a:	4b07      	ldr	r3, [pc, #28]	; (8016138 <prvAddNewTaskToReadyList+0xa8>)
 801611c:	681b      	ldr	r3, [r3, #0]
 801611e:	2b00      	cmp	r3, #0
 8016120:	d001      	beq.n	8016126 <prvAddNewTaskToReadyList+0x96>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8016122:	4b04      	ldr	r3, [pc, #16]	; (8016134 <prvAddNewTaskToReadyList+0xa4>)
 8016124:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016126:	bf00      	nop
 8016128:	3708      	adds	r7, #8
 801612a:	46bd      	mov	sp, r7
 801612c:	bd80      	pop	{r7, pc}
 801612e:	bf00      	nop
 8016130:	20000ca0 	.word	0x20000ca0
 8016134:	20000ba0 	.word	0x20000ba0
 8016138:	20000cac 	.word	0x20000cac
 801613c:	20000cbc 	.word	0x20000cbc
 8016140:	20000ca8 	.word	0x20000ca8
 8016144:	20000ba4 	.word	0x20000ba4

08016148 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8016148:	b580      	push	{r7, lr}
 801614a:	b084      	sub	sp, #16
 801614c:	af00      	add	r7, sp, #0
 801614e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8016150:	2300      	movs	r3, #0
 8016152:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	2b00      	cmp	r3, #0
 8016158:	d017      	beq.n	801618a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801615a:	4b13      	ldr	r3, [pc, #76]	; (80161a8 <vTaskDelay+0x60>)
 801615c:	681b      	ldr	r3, [r3, #0]
 801615e:	2b00      	cmp	r3, #0
 8016160:	d00a      	beq.n	8016178 <vTaskDelay+0x30>
	__asm volatile
 8016162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016166:	f383 8811 	msr	BASEPRI, r3
 801616a:	f3bf 8f6f 	isb	sy
 801616e:	f3bf 8f4f 	dsb	sy
 8016172:	60bb      	str	r3, [r7, #8]
}
 8016174:	bf00      	nop
 8016176:	e7fe      	b.n	8016176 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8016178:	f000 f86a 	bl	8016250 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801617c:	2100      	movs	r1, #0
 801617e:	6878      	ldr	r0, [r7, #4]
 8016180:	f000 fd86 	bl	8016c90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8016184:	f000 f872 	bl	801626c <xTaskResumeAll>
 8016188:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	2b00      	cmp	r3, #0
 801618e:	d107      	bne.n	80161a0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8016190:	4b06      	ldr	r3, [pc, #24]	; (80161ac <vTaskDelay+0x64>)
 8016192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016196:	601a      	str	r2, [r3, #0]
 8016198:	f3bf 8f4f 	dsb	sy
 801619c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80161a0:	bf00      	nop
 80161a2:	3710      	adds	r7, #16
 80161a4:	46bd      	mov	sp, r7
 80161a6:	bd80      	pop	{r7, pc}
 80161a8:	20000cc8 	.word	0x20000cc8
 80161ac:	e000ed04 	.word	0xe000ed04

080161b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80161b0:	b580      	push	{r7, lr}
 80161b2:	b086      	sub	sp, #24
 80161b4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80161b6:	4b1e      	ldr	r3, [pc, #120]	; (8016230 <vTaskStartScheduler+0x80>)
 80161b8:	9301      	str	r3, [sp, #4]
 80161ba:	2300      	movs	r3, #0
 80161bc:	9300      	str	r3, [sp, #0]
 80161be:	2300      	movs	r3, #0
 80161c0:	2280      	movs	r2, #128	; 0x80
 80161c2:	491c      	ldr	r1, [pc, #112]	; (8016234 <vTaskStartScheduler+0x84>)
 80161c4:	481c      	ldr	r0, [pc, #112]	; (8016238 <vTaskStartScheduler+0x88>)
 80161c6:	f7ff fe7f 	bl	8015ec8 <xTaskCreate>
 80161ca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80161cc:	68fb      	ldr	r3, [r7, #12]
 80161ce:	2b01      	cmp	r3, #1
 80161d0:	d11b      	bne.n	801620a <vTaskStartScheduler+0x5a>
	__asm volatile
 80161d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161d6:	f383 8811 	msr	BASEPRI, r3
 80161da:	f3bf 8f6f 	isb	sy
 80161de:	f3bf 8f4f 	dsb	sy
 80161e2:	60bb      	str	r3, [r7, #8]
}
 80161e4:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80161e6:	4b15      	ldr	r3, [pc, #84]	; (801623c <vTaskStartScheduler+0x8c>)
 80161e8:	681b      	ldr	r3, [r3, #0]
 80161ea:	334c      	adds	r3, #76	; 0x4c
 80161ec:	4a14      	ldr	r2, [pc, #80]	; (8016240 <vTaskStartScheduler+0x90>)
 80161ee:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80161f0:	4b14      	ldr	r3, [pc, #80]	; (8016244 <vTaskStartScheduler+0x94>)
 80161f2:	f04f 32ff 	mov.w	r2, #4294967295
 80161f6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80161f8:	4b13      	ldr	r3, [pc, #76]	; (8016248 <vTaskStartScheduler+0x98>)
 80161fa:	2201      	movs	r2, #1
 80161fc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80161fe:	4b13      	ldr	r3, [pc, #76]	; (801624c <vTaskStartScheduler+0x9c>)
 8016200:	2200      	movs	r2, #0
 8016202:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8016204:	f000 fe3c 	bl	8016e80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8016208:	e00e      	b.n	8016228 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801620a:	68fb      	ldr	r3, [r7, #12]
 801620c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016210:	d10a      	bne.n	8016228 <vTaskStartScheduler+0x78>
	__asm volatile
 8016212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016216:	f383 8811 	msr	BASEPRI, r3
 801621a:	f3bf 8f6f 	isb	sy
 801621e:	f3bf 8f4f 	dsb	sy
 8016222:	607b      	str	r3, [r7, #4]
}
 8016224:	bf00      	nop
 8016226:	e7fe      	b.n	8016226 <vTaskStartScheduler+0x76>
}
 8016228:	bf00      	nop
 801622a:	3710      	adds	r7, #16
 801622c:	46bd      	mov	sp, r7
 801622e:	bd80      	pop	{r7, pc}
 8016230:	20000cc4 	.word	0x20000cc4
 8016234:	080193f8 	.word	0x080193f8
 8016238:	080167ad 	.word	0x080167ad
 801623c:	20000ba0 	.word	0x20000ba0
 8016240:	2000018c 	.word	0x2000018c
 8016244:	20000cc0 	.word	0x20000cc0
 8016248:	20000cac 	.word	0x20000cac
 801624c:	20000ca4 	.word	0x20000ca4

08016250 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8016250:	b480      	push	{r7}
 8016252:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8016254:	4b04      	ldr	r3, [pc, #16]	; (8016268 <vTaskSuspendAll+0x18>)
 8016256:	681b      	ldr	r3, [r3, #0]
 8016258:	3301      	adds	r3, #1
 801625a:	4a03      	ldr	r2, [pc, #12]	; (8016268 <vTaskSuspendAll+0x18>)
 801625c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801625e:	bf00      	nop
 8016260:	46bd      	mov	sp, r7
 8016262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016266:	4770      	bx	lr
 8016268:	20000cc8 	.word	0x20000cc8

0801626c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801626c:	b580      	push	{r7, lr}
 801626e:	b084      	sub	sp, #16
 8016270:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8016272:	2300      	movs	r3, #0
 8016274:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8016276:	2300      	movs	r3, #0
 8016278:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801627a:	4b3b      	ldr	r3, [pc, #236]	; (8016368 <xTaskResumeAll+0xfc>)
 801627c:	681b      	ldr	r3, [r3, #0]
 801627e:	2b00      	cmp	r3, #0
 8016280:	d10a      	bne.n	8016298 <xTaskResumeAll+0x2c>
	__asm volatile
 8016282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016286:	f383 8811 	msr	BASEPRI, r3
 801628a:	f3bf 8f6f 	isb	sy
 801628e:	f3bf 8f4f 	dsb	sy
 8016292:	603b      	str	r3, [r7, #0]
}
 8016294:	bf00      	nop
 8016296:	e7fe      	b.n	8016296 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8016298:	f000 fe94 	bl	8016fc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801629c:	4b32      	ldr	r3, [pc, #200]	; (8016368 <xTaskResumeAll+0xfc>)
 801629e:	681b      	ldr	r3, [r3, #0]
 80162a0:	3b01      	subs	r3, #1
 80162a2:	4a31      	ldr	r2, [pc, #196]	; (8016368 <xTaskResumeAll+0xfc>)
 80162a4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80162a6:	4b30      	ldr	r3, [pc, #192]	; (8016368 <xTaskResumeAll+0xfc>)
 80162a8:	681b      	ldr	r3, [r3, #0]
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	d155      	bne.n	801635a <xTaskResumeAll+0xee>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80162ae:	4b2f      	ldr	r3, [pc, #188]	; (801636c <xTaskResumeAll+0x100>)
 80162b0:	681b      	ldr	r3, [r3, #0]
 80162b2:	2b00      	cmp	r3, #0
 80162b4:	d051      	beq.n	801635a <xTaskResumeAll+0xee>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80162b6:	e02e      	b.n	8016316 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80162b8:	4b2d      	ldr	r3, [pc, #180]	; (8016370 <xTaskResumeAll+0x104>)
 80162ba:	68db      	ldr	r3, [r3, #12]
 80162bc:	68db      	ldr	r3, [r3, #12]
 80162be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80162c0:	68fb      	ldr	r3, [r7, #12]
 80162c2:	3318      	adds	r3, #24
 80162c4:	4618      	mov	r0, r3
 80162c6:	f7ff f97c 	bl	80155c2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80162ca:	68fb      	ldr	r3, [r7, #12]
 80162cc:	3304      	adds	r3, #4
 80162ce:	4618      	mov	r0, r3
 80162d0:	f7ff f977 	bl	80155c2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80162d4:	68fb      	ldr	r3, [r7, #12]
 80162d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80162d8:	2201      	movs	r2, #1
 80162da:	409a      	lsls	r2, r3
 80162dc:	4b25      	ldr	r3, [pc, #148]	; (8016374 <xTaskResumeAll+0x108>)
 80162de:	681b      	ldr	r3, [r3, #0]
 80162e0:	4313      	orrs	r3, r2
 80162e2:	4a24      	ldr	r2, [pc, #144]	; (8016374 <xTaskResumeAll+0x108>)
 80162e4:	6013      	str	r3, [r2, #0]
 80162e6:	68fb      	ldr	r3, [r7, #12]
 80162e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80162ea:	4613      	mov	r3, r2
 80162ec:	009b      	lsls	r3, r3, #2
 80162ee:	4413      	add	r3, r2
 80162f0:	009b      	lsls	r3, r3, #2
 80162f2:	4a21      	ldr	r2, [pc, #132]	; (8016378 <xTaskResumeAll+0x10c>)
 80162f4:	441a      	add	r2, r3
 80162f6:	68fb      	ldr	r3, [r7, #12]
 80162f8:	3304      	adds	r3, #4
 80162fa:	4619      	mov	r1, r3
 80162fc:	4610      	mov	r0, r2
 80162fe:	f7ff f903 	bl	8015508 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016306:	4b1d      	ldr	r3, [pc, #116]	; (801637c <xTaskResumeAll+0x110>)
 8016308:	681b      	ldr	r3, [r3, #0]
 801630a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801630c:	429a      	cmp	r2, r3
 801630e:	d302      	bcc.n	8016316 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8016310:	4b1b      	ldr	r3, [pc, #108]	; (8016380 <xTaskResumeAll+0x114>)
 8016312:	2201      	movs	r2, #1
 8016314:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016316:	4b16      	ldr	r3, [pc, #88]	; (8016370 <xTaskResumeAll+0x104>)
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	2b00      	cmp	r3, #0
 801631c:	d1cc      	bne.n	80162b8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801631e:	68fb      	ldr	r3, [r7, #12]
 8016320:	2b00      	cmp	r3, #0
 8016322:	d001      	beq.n	8016328 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8016324:	f000 fad8 	bl	80168d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8016328:	4b16      	ldr	r3, [pc, #88]	; (8016384 <xTaskResumeAll+0x118>)
 801632a:	681b      	ldr	r3, [r3, #0]
 801632c:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 801632e:	68bb      	ldr	r3, [r7, #8]
 8016330:	2b00      	cmp	r3, #0
 8016332:	d010      	beq.n	8016356 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8016334:	f000 f828 	bl	8016388 <xTaskIncrementTick>
 8016338:	4603      	mov	r3, r0
 801633a:	2b00      	cmp	r3, #0
 801633c:	d002      	beq.n	8016344 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801633e:	4b10      	ldr	r3, [pc, #64]	; (8016380 <xTaskResumeAll+0x114>)
 8016340:	2201      	movs	r2, #1
 8016342:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8016344:	68bb      	ldr	r3, [r7, #8]
 8016346:	3b01      	subs	r3, #1
 8016348:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801634a:	68bb      	ldr	r3, [r7, #8]
 801634c:	2b00      	cmp	r3, #0
 801634e:	d1f1      	bne.n	8016334 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8016350:	4b0c      	ldr	r3, [pc, #48]	; (8016384 <xTaskResumeAll+0x118>)
 8016352:	2200      	movs	r2, #0
 8016354:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8016356:	4b0a      	ldr	r3, [pc, #40]	; (8016380 <xTaskResumeAll+0x114>)
 8016358:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801635a:	f000 fe63 	bl	8017024 <vPortExitCritical>

	return xAlreadyYielded;
 801635e:	687b      	ldr	r3, [r7, #4]
}
 8016360:	4618      	mov	r0, r3
 8016362:	3710      	adds	r7, #16
 8016364:	46bd      	mov	sp, r7
 8016366:	bd80      	pop	{r7, pc}
 8016368:	20000cc8 	.word	0x20000cc8
 801636c:	20000ca0 	.word	0x20000ca0
 8016370:	20000c60 	.word	0x20000c60
 8016374:	20000ca8 	.word	0x20000ca8
 8016378:	20000ba4 	.word	0x20000ba4
 801637c:	20000ba0 	.word	0x20000ba0
 8016380:	20000cb4 	.word	0x20000cb4
 8016384:	20000cb0 	.word	0x20000cb0

08016388 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8016388:	b580      	push	{r7, lr}
 801638a:	b086      	sub	sp, #24
 801638c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801638e:	2300      	movs	r3, #0
 8016390:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016392:	4b3f      	ldr	r3, [pc, #252]	; (8016490 <xTaskIncrementTick+0x108>)
 8016394:	681b      	ldr	r3, [r3, #0]
 8016396:	2b00      	cmp	r3, #0
 8016398:	d16f      	bne.n	801647a <xTaskIncrementTick+0xf2>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801639a:	4b3e      	ldr	r3, [pc, #248]	; (8016494 <xTaskIncrementTick+0x10c>)
 801639c:	681b      	ldr	r3, [r3, #0]
 801639e:	3301      	adds	r3, #1
 80163a0:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80163a2:	4a3c      	ldr	r2, [pc, #240]	; (8016494 <xTaskIncrementTick+0x10c>)
 80163a4:	693b      	ldr	r3, [r7, #16]
 80163a6:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80163a8:	693b      	ldr	r3, [r7, #16]
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d120      	bne.n	80163f0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80163ae:	4b3a      	ldr	r3, [pc, #232]	; (8016498 <xTaskIncrementTick+0x110>)
 80163b0:	681b      	ldr	r3, [r3, #0]
 80163b2:	681b      	ldr	r3, [r3, #0]
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d00a      	beq.n	80163ce <xTaskIncrementTick+0x46>
	__asm volatile
 80163b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163bc:	f383 8811 	msr	BASEPRI, r3
 80163c0:	f3bf 8f6f 	isb	sy
 80163c4:	f3bf 8f4f 	dsb	sy
 80163c8:	603b      	str	r3, [r7, #0]
}
 80163ca:	bf00      	nop
 80163cc:	e7fe      	b.n	80163cc <xTaskIncrementTick+0x44>
 80163ce:	4b32      	ldr	r3, [pc, #200]	; (8016498 <xTaskIncrementTick+0x110>)
 80163d0:	681b      	ldr	r3, [r3, #0]
 80163d2:	60fb      	str	r3, [r7, #12]
 80163d4:	4b31      	ldr	r3, [pc, #196]	; (801649c <xTaskIncrementTick+0x114>)
 80163d6:	681b      	ldr	r3, [r3, #0]
 80163d8:	4a2f      	ldr	r2, [pc, #188]	; (8016498 <xTaskIncrementTick+0x110>)
 80163da:	6013      	str	r3, [r2, #0]
 80163dc:	4a2f      	ldr	r2, [pc, #188]	; (801649c <xTaskIncrementTick+0x114>)
 80163de:	68fb      	ldr	r3, [r7, #12]
 80163e0:	6013      	str	r3, [r2, #0]
 80163e2:	4b2f      	ldr	r3, [pc, #188]	; (80164a0 <xTaskIncrementTick+0x118>)
 80163e4:	681b      	ldr	r3, [r3, #0]
 80163e6:	3301      	adds	r3, #1
 80163e8:	4a2d      	ldr	r2, [pc, #180]	; (80164a0 <xTaskIncrementTick+0x118>)
 80163ea:	6013      	str	r3, [r2, #0]
 80163ec:	f000 fa74 	bl	80168d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80163f0:	4b2c      	ldr	r3, [pc, #176]	; (80164a4 <xTaskIncrementTick+0x11c>)
 80163f2:	681b      	ldr	r3, [r3, #0]
 80163f4:	693a      	ldr	r2, [r7, #16]
 80163f6:	429a      	cmp	r2, r3
 80163f8:	d344      	bcc.n	8016484 <xTaskIncrementTick+0xfc>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80163fa:	4b27      	ldr	r3, [pc, #156]	; (8016498 <xTaskIncrementTick+0x110>)
 80163fc:	681b      	ldr	r3, [r3, #0]
 80163fe:	681b      	ldr	r3, [r3, #0]
 8016400:	2b00      	cmp	r3, #0
 8016402:	d104      	bne.n	801640e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016404:	4b27      	ldr	r3, [pc, #156]	; (80164a4 <xTaskIncrementTick+0x11c>)
 8016406:	f04f 32ff 	mov.w	r2, #4294967295
 801640a:	601a      	str	r2, [r3, #0]
					break;
 801640c:	e03a      	b.n	8016484 <xTaskIncrementTick+0xfc>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801640e:	4b22      	ldr	r3, [pc, #136]	; (8016498 <xTaskIncrementTick+0x110>)
 8016410:	681b      	ldr	r3, [r3, #0]
 8016412:	68db      	ldr	r3, [r3, #12]
 8016414:	68db      	ldr	r3, [r3, #12]
 8016416:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8016418:	68bb      	ldr	r3, [r7, #8]
 801641a:	685b      	ldr	r3, [r3, #4]
 801641c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801641e:	693a      	ldr	r2, [r7, #16]
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	429a      	cmp	r2, r3
 8016424:	d203      	bcs.n	801642e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8016426:	4a1f      	ldr	r2, [pc, #124]	; (80164a4 <xTaskIncrementTick+0x11c>)
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801642c:	e02a      	b.n	8016484 <xTaskIncrementTick+0xfc>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801642e:	68bb      	ldr	r3, [r7, #8]
 8016430:	3304      	adds	r3, #4
 8016432:	4618      	mov	r0, r3
 8016434:	f7ff f8c5 	bl	80155c2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016438:	68bb      	ldr	r3, [r7, #8]
 801643a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801643c:	2b00      	cmp	r3, #0
 801643e:	d004      	beq.n	801644a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016440:	68bb      	ldr	r3, [r7, #8]
 8016442:	3318      	adds	r3, #24
 8016444:	4618      	mov	r0, r3
 8016446:	f7ff f8bc 	bl	80155c2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801644a:	68bb      	ldr	r3, [r7, #8]
 801644c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801644e:	2201      	movs	r2, #1
 8016450:	409a      	lsls	r2, r3
 8016452:	4b15      	ldr	r3, [pc, #84]	; (80164a8 <xTaskIncrementTick+0x120>)
 8016454:	681b      	ldr	r3, [r3, #0]
 8016456:	4313      	orrs	r3, r2
 8016458:	4a13      	ldr	r2, [pc, #76]	; (80164a8 <xTaskIncrementTick+0x120>)
 801645a:	6013      	str	r3, [r2, #0]
 801645c:	68bb      	ldr	r3, [r7, #8]
 801645e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016460:	4613      	mov	r3, r2
 8016462:	009b      	lsls	r3, r3, #2
 8016464:	4413      	add	r3, r2
 8016466:	009b      	lsls	r3, r3, #2
 8016468:	4a10      	ldr	r2, [pc, #64]	; (80164ac <xTaskIncrementTick+0x124>)
 801646a:	441a      	add	r2, r3
 801646c:	68bb      	ldr	r3, [r7, #8]
 801646e:	3304      	adds	r3, #4
 8016470:	4619      	mov	r1, r3
 8016472:	4610      	mov	r0, r2
 8016474:	f7ff f848 	bl	8015508 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016478:	e7bf      	b.n	80163fa <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801647a:	4b0d      	ldr	r3, [pc, #52]	; (80164b0 <xTaskIncrementTick+0x128>)
 801647c:	681b      	ldr	r3, [r3, #0]
 801647e:	3301      	adds	r3, #1
 8016480:	4a0b      	ldr	r2, [pc, #44]	; (80164b0 <xTaskIncrementTick+0x128>)
 8016482:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8016484:	697b      	ldr	r3, [r7, #20]
}
 8016486:	4618      	mov	r0, r3
 8016488:	3718      	adds	r7, #24
 801648a:	46bd      	mov	sp, r7
 801648c:	bd80      	pop	{r7, pc}
 801648e:	bf00      	nop
 8016490:	20000cc8 	.word	0x20000cc8
 8016494:	20000ca4 	.word	0x20000ca4
 8016498:	20000c58 	.word	0x20000c58
 801649c:	20000c5c 	.word	0x20000c5c
 80164a0:	20000cb8 	.word	0x20000cb8
 80164a4:	20000cc0 	.word	0x20000cc0
 80164a8:	20000ca8 	.word	0x20000ca8
 80164ac:	20000ba4 	.word	0x20000ba4
 80164b0:	20000cb0 	.word	0x20000cb0

080164b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80164b4:	b480      	push	{r7}
 80164b6:	b087      	sub	sp, #28
 80164b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80164ba:	4b29      	ldr	r3, [pc, #164]	; (8016560 <vTaskSwitchContext+0xac>)
 80164bc:	681b      	ldr	r3, [r3, #0]
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d003      	beq.n	80164ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80164c2:	4b28      	ldr	r3, [pc, #160]	; (8016564 <vTaskSwitchContext+0xb0>)
 80164c4:	2201      	movs	r2, #1
 80164c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80164c8:	e044      	b.n	8016554 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80164ca:	4b26      	ldr	r3, [pc, #152]	; (8016564 <vTaskSwitchContext+0xb0>)
 80164cc:	2200      	movs	r2, #0
 80164ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80164d0:	4b25      	ldr	r3, [pc, #148]	; (8016568 <vTaskSwitchContext+0xb4>)
 80164d2:	681b      	ldr	r3, [r3, #0]
 80164d4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80164d6:	68fb      	ldr	r3, [r7, #12]
 80164d8:	fab3 f383 	clz	r3, r3
 80164dc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80164de:	7afb      	ldrb	r3, [r7, #11]
 80164e0:	f1c3 031f 	rsb	r3, r3, #31
 80164e4:	617b      	str	r3, [r7, #20]
 80164e6:	4921      	ldr	r1, [pc, #132]	; (801656c <vTaskSwitchContext+0xb8>)
 80164e8:	697a      	ldr	r2, [r7, #20]
 80164ea:	4613      	mov	r3, r2
 80164ec:	009b      	lsls	r3, r3, #2
 80164ee:	4413      	add	r3, r2
 80164f0:	009b      	lsls	r3, r3, #2
 80164f2:	440b      	add	r3, r1
 80164f4:	681b      	ldr	r3, [r3, #0]
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d10a      	bne.n	8016510 <vTaskSwitchContext+0x5c>
	__asm volatile
 80164fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164fe:	f383 8811 	msr	BASEPRI, r3
 8016502:	f3bf 8f6f 	isb	sy
 8016506:	f3bf 8f4f 	dsb	sy
 801650a:	607b      	str	r3, [r7, #4]
}
 801650c:	bf00      	nop
 801650e:	e7fe      	b.n	801650e <vTaskSwitchContext+0x5a>
 8016510:	697a      	ldr	r2, [r7, #20]
 8016512:	4613      	mov	r3, r2
 8016514:	009b      	lsls	r3, r3, #2
 8016516:	4413      	add	r3, r2
 8016518:	009b      	lsls	r3, r3, #2
 801651a:	4a14      	ldr	r2, [pc, #80]	; (801656c <vTaskSwitchContext+0xb8>)
 801651c:	4413      	add	r3, r2
 801651e:	613b      	str	r3, [r7, #16]
 8016520:	693b      	ldr	r3, [r7, #16]
 8016522:	685b      	ldr	r3, [r3, #4]
 8016524:	685a      	ldr	r2, [r3, #4]
 8016526:	693b      	ldr	r3, [r7, #16]
 8016528:	605a      	str	r2, [r3, #4]
 801652a:	693b      	ldr	r3, [r7, #16]
 801652c:	685a      	ldr	r2, [r3, #4]
 801652e:	693b      	ldr	r3, [r7, #16]
 8016530:	3308      	adds	r3, #8
 8016532:	429a      	cmp	r2, r3
 8016534:	d104      	bne.n	8016540 <vTaskSwitchContext+0x8c>
 8016536:	693b      	ldr	r3, [r7, #16]
 8016538:	685b      	ldr	r3, [r3, #4]
 801653a:	685a      	ldr	r2, [r3, #4]
 801653c:	693b      	ldr	r3, [r7, #16]
 801653e:	605a      	str	r2, [r3, #4]
 8016540:	693b      	ldr	r3, [r7, #16]
 8016542:	685b      	ldr	r3, [r3, #4]
 8016544:	68db      	ldr	r3, [r3, #12]
 8016546:	4a0a      	ldr	r2, [pc, #40]	; (8016570 <vTaskSwitchContext+0xbc>)
 8016548:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801654a:	4b09      	ldr	r3, [pc, #36]	; (8016570 <vTaskSwitchContext+0xbc>)
 801654c:	681b      	ldr	r3, [r3, #0]
 801654e:	334c      	adds	r3, #76	; 0x4c
 8016550:	4a08      	ldr	r2, [pc, #32]	; (8016574 <vTaskSwitchContext+0xc0>)
 8016552:	6013      	str	r3, [r2, #0]
}
 8016554:	bf00      	nop
 8016556:	371c      	adds	r7, #28
 8016558:	46bd      	mov	sp, r7
 801655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801655e:	4770      	bx	lr
 8016560:	20000cc8 	.word	0x20000cc8
 8016564:	20000cb4 	.word	0x20000cb4
 8016568:	20000ca8 	.word	0x20000ca8
 801656c:	20000ba4 	.word	0x20000ba4
 8016570:	20000ba0 	.word	0x20000ba0
 8016574:	2000018c 	.word	0x2000018c

08016578 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8016578:	b580      	push	{r7, lr}
 801657a:	b084      	sub	sp, #16
 801657c:	af00      	add	r7, sp, #0
 801657e:	6078      	str	r0, [r7, #4]
 8016580:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	2b00      	cmp	r3, #0
 8016586:	d10a      	bne.n	801659e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8016588:	f04f 0350 	mov.w	r3, #80	; 0x50
 801658c:	f383 8811 	msr	BASEPRI, r3
 8016590:	f3bf 8f6f 	isb	sy
 8016594:	f3bf 8f4f 	dsb	sy
 8016598:	60fb      	str	r3, [r7, #12]
}
 801659a:	bf00      	nop
 801659c:	e7fe      	b.n	801659c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801659e:	4b07      	ldr	r3, [pc, #28]	; (80165bc <vTaskPlaceOnEventList+0x44>)
 80165a0:	681b      	ldr	r3, [r3, #0]
 80165a2:	3318      	adds	r3, #24
 80165a4:	4619      	mov	r1, r3
 80165a6:	6878      	ldr	r0, [r7, #4]
 80165a8:	f7fe ffd2 	bl	8015550 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80165ac:	2101      	movs	r1, #1
 80165ae:	6838      	ldr	r0, [r7, #0]
 80165b0:	f000 fb6e 	bl	8016c90 <prvAddCurrentTaskToDelayedList>
}
 80165b4:	bf00      	nop
 80165b6:	3710      	adds	r7, #16
 80165b8:	46bd      	mov	sp, r7
 80165ba:	bd80      	pop	{r7, pc}
 80165bc:	20000ba0 	.word	0x20000ba0

080165c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80165c0:	b580      	push	{r7, lr}
 80165c2:	b086      	sub	sp, #24
 80165c4:	af00      	add	r7, sp, #0
 80165c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	68db      	ldr	r3, [r3, #12]
 80165cc:	68db      	ldr	r3, [r3, #12]
 80165ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80165d0:	693b      	ldr	r3, [r7, #16]
 80165d2:	2b00      	cmp	r3, #0
 80165d4:	d10a      	bne.n	80165ec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80165d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165da:	f383 8811 	msr	BASEPRI, r3
 80165de:	f3bf 8f6f 	isb	sy
 80165e2:	f3bf 8f4f 	dsb	sy
 80165e6:	60fb      	str	r3, [r7, #12]
}
 80165e8:	bf00      	nop
 80165ea:	e7fe      	b.n	80165ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80165ec:	693b      	ldr	r3, [r7, #16]
 80165ee:	3318      	adds	r3, #24
 80165f0:	4618      	mov	r0, r3
 80165f2:	f7fe ffe6 	bl	80155c2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80165f6:	4b1d      	ldr	r3, [pc, #116]	; (801666c <xTaskRemoveFromEventList+0xac>)
 80165f8:	681b      	ldr	r3, [r3, #0]
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d11c      	bne.n	8016638 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80165fe:	693b      	ldr	r3, [r7, #16]
 8016600:	3304      	adds	r3, #4
 8016602:	4618      	mov	r0, r3
 8016604:	f7fe ffdd 	bl	80155c2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8016608:	693b      	ldr	r3, [r7, #16]
 801660a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801660c:	2201      	movs	r2, #1
 801660e:	409a      	lsls	r2, r3
 8016610:	4b17      	ldr	r3, [pc, #92]	; (8016670 <xTaskRemoveFromEventList+0xb0>)
 8016612:	681b      	ldr	r3, [r3, #0]
 8016614:	4313      	orrs	r3, r2
 8016616:	4a16      	ldr	r2, [pc, #88]	; (8016670 <xTaskRemoveFromEventList+0xb0>)
 8016618:	6013      	str	r3, [r2, #0]
 801661a:	693b      	ldr	r3, [r7, #16]
 801661c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801661e:	4613      	mov	r3, r2
 8016620:	009b      	lsls	r3, r3, #2
 8016622:	4413      	add	r3, r2
 8016624:	009b      	lsls	r3, r3, #2
 8016626:	4a13      	ldr	r2, [pc, #76]	; (8016674 <xTaskRemoveFromEventList+0xb4>)
 8016628:	441a      	add	r2, r3
 801662a:	693b      	ldr	r3, [r7, #16]
 801662c:	3304      	adds	r3, #4
 801662e:	4619      	mov	r1, r3
 8016630:	4610      	mov	r0, r2
 8016632:	f7fe ff69 	bl	8015508 <vListInsertEnd>
 8016636:	e005      	b.n	8016644 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8016638:	693b      	ldr	r3, [r7, #16]
 801663a:	3318      	adds	r3, #24
 801663c:	4619      	mov	r1, r3
 801663e:	480e      	ldr	r0, [pc, #56]	; (8016678 <xTaskRemoveFromEventList+0xb8>)
 8016640:	f7fe ff62 	bl	8015508 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016644:	693b      	ldr	r3, [r7, #16]
 8016646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016648:	4b0c      	ldr	r3, [pc, #48]	; (801667c <xTaskRemoveFromEventList+0xbc>)
 801664a:	681b      	ldr	r3, [r3, #0]
 801664c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801664e:	429a      	cmp	r2, r3
 8016650:	d905      	bls.n	801665e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8016652:	2301      	movs	r3, #1
 8016654:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8016656:	4b0a      	ldr	r3, [pc, #40]	; (8016680 <xTaskRemoveFromEventList+0xc0>)
 8016658:	2201      	movs	r2, #1
 801665a:	601a      	str	r2, [r3, #0]
 801665c:	e001      	b.n	8016662 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 801665e:	2300      	movs	r3, #0
 8016660:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8016662:	697b      	ldr	r3, [r7, #20]
}
 8016664:	4618      	mov	r0, r3
 8016666:	3718      	adds	r7, #24
 8016668:	46bd      	mov	sp, r7
 801666a:	bd80      	pop	{r7, pc}
 801666c:	20000cc8 	.word	0x20000cc8
 8016670:	20000ca8 	.word	0x20000ca8
 8016674:	20000ba4 	.word	0x20000ba4
 8016678:	20000c60 	.word	0x20000c60
 801667c:	20000ba0 	.word	0x20000ba0
 8016680:	20000cb4 	.word	0x20000cb4

08016684 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8016684:	b480      	push	{r7}
 8016686:	b083      	sub	sp, #12
 8016688:	af00      	add	r7, sp, #0
 801668a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801668c:	4b06      	ldr	r3, [pc, #24]	; (80166a8 <vTaskInternalSetTimeOutState+0x24>)
 801668e:	681a      	ldr	r2, [r3, #0]
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016694:	4b05      	ldr	r3, [pc, #20]	; (80166ac <vTaskInternalSetTimeOutState+0x28>)
 8016696:	681a      	ldr	r2, [r3, #0]
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	605a      	str	r2, [r3, #4]
}
 801669c:	bf00      	nop
 801669e:	370c      	adds	r7, #12
 80166a0:	46bd      	mov	sp, r7
 80166a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166a6:	4770      	bx	lr
 80166a8:	20000cb8 	.word	0x20000cb8
 80166ac:	20000ca4 	.word	0x20000ca4

080166b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80166b0:	b580      	push	{r7, lr}
 80166b2:	b088      	sub	sp, #32
 80166b4:	af00      	add	r7, sp, #0
 80166b6:	6078      	str	r0, [r7, #4]
 80166b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	2b00      	cmp	r3, #0
 80166be:	d10a      	bne.n	80166d6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80166c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166c4:	f383 8811 	msr	BASEPRI, r3
 80166c8:	f3bf 8f6f 	isb	sy
 80166cc:	f3bf 8f4f 	dsb	sy
 80166d0:	613b      	str	r3, [r7, #16]
}
 80166d2:	bf00      	nop
 80166d4:	e7fe      	b.n	80166d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80166d6:	683b      	ldr	r3, [r7, #0]
 80166d8:	2b00      	cmp	r3, #0
 80166da:	d10a      	bne.n	80166f2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80166dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166e0:	f383 8811 	msr	BASEPRI, r3
 80166e4:	f3bf 8f6f 	isb	sy
 80166e8:	f3bf 8f4f 	dsb	sy
 80166ec:	60fb      	str	r3, [r7, #12]
}
 80166ee:	bf00      	nop
 80166f0:	e7fe      	b.n	80166f0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80166f2:	f000 fc67 	bl	8016fc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80166f6:	4b24      	ldr	r3, [pc, #144]	; (8016788 <xTaskCheckForTimeOut+0xd8>)
 80166f8:	681b      	ldr	r3, [r3, #0]
 80166fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	685b      	ldr	r3, [r3, #4]
 8016700:	69ba      	ldr	r2, [r7, #24]
 8016702:	1ad3      	subs	r3, r2, r3
 8016704:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 8016706:	4b21      	ldr	r3, [pc, #132]	; (801678c <xTaskCheckForTimeOut+0xdc>)
 8016708:	681b      	ldr	r3, [r3, #0]
 801670a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 801670e:	2b00      	cmp	r3, #0
 8016710:	d007      	beq.n	8016722 <xTaskCheckForTimeOut+0x72>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 8016712:	4b1e      	ldr	r3, [pc, #120]	; (801678c <xTaskCheckForTimeOut+0xdc>)
 8016714:	681b      	ldr	r3, [r3, #0]
 8016716:	2200      	movs	r2, #0
 8016718:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
				xReturn = pdTRUE;
 801671c:	2301      	movs	r3, #1
 801671e:	61fb      	str	r3, [r7, #28]
 8016720:	e02b      	b.n	801677a <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8016722:	683b      	ldr	r3, [r7, #0]
 8016724:	681b      	ldr	r3, [r3, #0]
 8016726:	f1b3 3fff 	cmp.w	r3, #4294967295
 801672a:	d102      	bne.n	8016732 <xTaskCheckForTimeOut+0x82>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801672c:	2300      	movs	r3, #0
 801672e:	61fb      	str	r3, [r7, #28]
 8016730:	e023      	b.n	801677a <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	681a      	ldr	r2, [r3, #0]
 8016736:	4b16      	ldr	r3, [pc, #88]	; (8016790 <xTaskCheckForTimeOut+0xe0>)
 8016738:	681b      	ldr	r3, [r3, #0]
 801673a:	429a      	cmp	r2, r3
 801673c:	d007      	beq.n	801674e <xTaskCheckForTimeOut+0x9e>
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	685b      	ldr	r3, [r3, #4]
 8016742:	69ba      	ldr	r2, [r7, #24]
 8016744:	429a      	cmp	r2, r3
 8016746:	d302      	bcc.n	801674e <xTaskCheckForTimeOut+0x9e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8016748:	2301      	movs	r3, #1
 801674a:	61fb      	str	r3, [r7, #28]
 801674c:	e015      	b.n	801677a <xTaskCheckForTimeOut+0xca>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801674e:	683b      	ldr	r3, [r7, #0]
 8016750:	681b      	ldr	r3, [r3, #0]
 8016752:	697a      	ldr	r2, [r7, #20]
 8016754:	429a      	cmp	r2, r3
 8016756:	d20b      	bcs.n	8016770 <xTaskCheckForTimeOut+0xc0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8016758:	683b      	ldr	r3, [r7, #0]
 801675a:	681a      	ldr	r2, [r3, #0]
 801675c:	697b      	ldr	r3, [r7, #20]
 801675e:	1ad2      	subs	r2, r2, r3
 8016760:	683b      	ldr	r3, [r7, #0]
 8016762:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8016764:	6878      	ldr	r0, [r7, #4]
 8016766:	f7ff ff8d 	bl	8016684 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801676a:	2300      	movs	r3, #0
 801676c:	61fb      	str	r3, [r7, #28]
 801676e:	e004      	b.n	801677a <xTaskCheckForTimeOut+0xca>
		}
		else
		{
			*pxTicksToWait = 0;
 8016770:	683b      	ldr	r3, [r7, #0]
 8016772:	2200      	movs	r2, #0
 8016774:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8016776:	2301      	movs	r3, #1
 8016778:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801677a:	f000 fc53 	bl	8017024 <vPortExitCritical>

	return xReturn;
 801677e:	69fb      	ldr	r3, [r7, #28]
}
 8016780:	4618      	mov	r0, r3
 8016782:	3720      	adds	r7, #32
 8016784:	46bd      	mov	sp, r7
 8016786:	bd80      	pop	{r7, pc}
 8016788:	20000ca4 	.word	0x20000ca4
 801678c:	20000ba0 	.word	0x20000ba0
 8016790:	20000cb8 	.word	0x20000cb8

08016794 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8016794:	b480      	push	{r7}
 8016796:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8016798:	4b03      	ldr	r3, [pc, #12]	; (80167a8 <vTaskMissedYield+0x14>)
 801679a:	2201      	movs	r2, #1
 801679c:	601a      	str	r2, [r3, #0]
}
 801679e:	bf00      	nop
 80167a0:	46bd      	mov	sp, r7
 80167a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167a6:	4770      	bx	lr
 80167a8:	20000cb4 	.word	0x20000cb4

080167ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80167ac:	b580      	push	{r7, lr}
 80167ae:	b082      	sub	sp, #8
 80167b0:	af00      	add	r7, sp, #0
 80167b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80167b4:	f000 f84c 	bl	8016850 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 80167b8:	4b04      	ldr	r3, [pc, #16]	; (80167cc <prvIdleTask+0x20>)
 80167ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80167be:	601a      	str	r2, [r3, #0]
 80167c0:	f3bf 8f4f 	dsb	sy
 80167c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80167c8:	e7f4      	b.n	80167b4 <prvIdleTask+0x8>
 80167ca:	bf00      	nop
 80167cc:	e000ed04 	.word	0xe000ed04

080167d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80167d0:	b580      	push	{r7, lr}
 80167d2:	b082      	sub	sp, #8
 80167d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80167d6:	2300      	movs	r3, #0
 80167d8:	607b      	str	r3, [r7, #4]
 80167da:	e00c      	b.n	80167f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80167dc:	687a      	ldr	r2, [r7, #4]
 80167de:	4613      	mov	r3, r2
 80167e0:	009b      	lsls	r3, r3, #2
 80167e2:	4413      	add	r3, r2
 80167e4:	009b      	lsls	r3, r3, #2
 80167e6:	4a12      	ldr	r2, [pc, #72]	; (8016830 <prvInitialiseTaskLists+0x60>)
 80167e8:	4413      	add	r3, r2
 80167ea:	4618      	mov	r0, r3
 80167ec:	f7fe fe5f 	bl	80154ae <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	3301      	adds	r3, #1
 80167f4:	607b      	str	r3, [r7, #4]
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	2b06      	cmp	r3, #6
 80167fa:	d9ef      	bls.n	80167dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80167fc:	480d      	ldr	r0, [pc, #52]	; (8016834 <prvInitialiseTaskLists+0x64>)
 80167fe:	f7fe fe56 	bl	80154ae <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8016802:	480d      	ldr	r0, [pc, #52]	; (8016838 <prvInitialiseTaskLists+0x68>)
 8016804:	f7fe fe53 	bl	80154ae <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8016808:	480c      	ldr	r0, [pc, #48]	; (801683c <prvInitialiseTaskLists+0x6c>)
 801680a:	f7fe fe50 	bl	80154ae <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801680e:	480c      	ldr	r0, [pc, #48]	; (8016840 <prvInitialiseTaskLists+0x70>)
 8016810:	f7fe fe4d 	bl	80154ae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8016814:	480b      	ldr	r0, [pc, #44]	; (8016844 <prvInitialiseTaskLists+0x74>)
 8016816:	f7fe fe4a 	bl	80154ae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801681a:	4b0b      	ldr	r3, [pc, #44]	; (8016848 <prvInitialiseTaskLists+0x78>)
 801681c:	4a05      	ldr	r2, [pc, #20]	; (8016834 <prvInitialiseTaskLists+0x64>)
 801681e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016820:	4b0a      	ldr	r3, [pc, #40]	; (801684c <prvInitialiseTaskLists+0x7c>)
 8016822:	4a05      	ldr	r2, [pc, #20]	; (8016838 <prvInitialiseTaskLists+0x68>)
 8016824:	601a      	str	r2, [r3, #0]
}
 8016826:	bf00      	nop
 8016828:	3708      	adds	r7, #8
 801682a:	46bd      	mov	sp, r7
 801682c:	bd80      	pop	{r7, pc}
 801682e:	bf00      	nop
 8016830:	20000ba4 	.word	0x20000ba4
 8016834:	20000c30 	.word	0x20000c30
 8016838:	20000c44 	.word	0x20000c44
 801683c:	20000c60 	.word	0x20000c60
 8016840:	20000c74 	.word	0x20000c74
 8016844:	20000c8c 	.word	0x20000c8c
 8016848:	20000c58 	.word	0x20000c58
 801684c:	20000c5c 	.word	0x20000c5c

08016850 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016850:	b580      	push	{r7, lr}
 8016852:	b082      	sub	sp, #8
 8016854:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016856:	e019      	b.n	801688c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8016858:	f000 fbb4 	bl	8016fc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801685c:	4b10      	ldr	r3, [pc, #64]	; (80168a0 <prvCheckTasksWaitingTermination+0x50>)
 801685e:	68db      	ldr	r3, [r3, #12]
 8016860:	68db      	ldr	r3, [r3, #12]
 8016862:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	3304      	adds	r3, #4
 8016868:	4618      	mov	r0, r3
 801686a:	f7fe feaa 	bl	80155c2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801686e:	4b0d      	ldr	r3, [pc, #52]	; (80168a4 <prvCheckTasksWaitingTermination+0x54>)
 8016870:	681b      	ldr	r3, [r3, #0]
 8016872:	3b01      	subs	r3, #1
 8016874:	4a0b      	ldr	r2, [pc, #44]	; (80168a4 <prvCheckTasksWaitingTermination+0x54>)
 8016876:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8016878:	4b0b      	ldr	r3, [pc, #44]	; (80168a8 <prvCheckTasksWaitingTermination+0x58>)
 801687a:	681b      	ldr	r3, [r3, #0]
 801687c:	3b01      	subs	r3, #1
 801687e:	4a0a      	ldr	r2, [pc, #40]	; (80168a8 <prvCheckTasksWaitingTermination+0x58>)
 8016880:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8016882:	f000 fbcf 	bl	8017024 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8016886:	6878      	ldr	r0, [r7, #4]
 8016888:	f000 f810 	bl	80168ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801688c:	4b06      	ldr	r3, [pc, #24]	; (80168a8 <prvCheckTasksWaitingTermination+0x58>)
 801688e:	681b      	ldr	r3, [r3, #0]
 8016890:	2b00      	cmp	r3, #0
 8016892:	d1e1      	bne.n	8016858 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8016894:	bf00      	nop
 8016896:	bf00      	nop
 8016898:	3708      	adds	r7, #8
 801689a:	46bd      	mov	sp, r7
 801689c:	bd80      	pop	{r7, pc}
 801689e:	bf00      	nop
 80168a0:	20000c74 	.word	0x20000c74
 80168a4:	20000ca0 	.word	0x20000ca0
 80168a8:	20000c88 	.word	0x20000c88

080168ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80168ac:	b580      	push	{r7, lr}
 80168ae:	b082      	sub	sp, #8
 80168b0:	af00      	add	r7, sp, #0
 80168b2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	334c      	adds	r3, #76	; 0x4c
 80168b8:	4618      	mov	r0, r3
 80168ba:	f001 fcd3 	bl	8018264 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80168c2:	4618      	mov	r0, r3
 80168c4:	f000 fd6c 	bl	80173a0 <vPortFree>
			vPortFree( pxTCB );
 80168c8:	6878      	ldr	r0, [r7, #4]
 80168ca:	f000 fd69 	bl	80173a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80168ce:	bf00      	nop
 80168d0:	3708      	adds	r7, #8
 80168d2:	46bd      	mov	sp, r7
 80168d4:	bd80      	pop	{r7, pc}
	...

080168d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80168d8:	b480      	push	{r7}
 80168da:	b083      	sub	sp, #12
 80168dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80168de:	4b0c      	ldr	r3, [pc, #48]	; (8016910 <prvResetNextTaskUnblockTime+0x38>)
 80168e0:	681b      	ldr	r3, [r3, #0]
 80168e2:	681b      	ldr	r3, [r3, #0]
 80168e4:	2b00      	cmp	r3, #0
 80168e6:	d104      	bne.n	80168f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80168e8:	4b0a      	ldr	r3, [pc, #40]	; (8016914 <prvResetNextTaskUnblockTime+0x3c>)
 80168ea:	f04f 32ff 	mov.w	r2, #4294967295
 80168ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80168f0:	e008      	b.n	8016904 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80168f2:	4b07      	ldr	r3, [pc, #28]	; (8016910 <prvResetNextTaskUnblockTime+0x38>)
 80168f4:	681b      	ldr	r3, [r3, #0]
 80168f6:	68db      	ldr	r3, [r3, #12]
 80168f8:	68db      	ldr	r3, [r3, #12]
 80168fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	685b      	ldr	r3, [r3, #4]
 8016900:	4a04      	ldr	r2, [pc, #16]	; (8016914 <prvResetNextTaskUnblockTime+0x3c>)
 8016902:	6013      	str	r3, [r2, #0]
}
 8016904:	bf00      	nop
 8016906:	370c      	adds	r7, #12
 8016908:	46bd      	mov	sp, r7
 801690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801690e:	4770      	bx	lr
 8016910:	20000c58 	.word	0x20000c58
 8016914:	20000cc0 	.word	0x20000cc0

08016918 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8016918:	b480      	push	{r7}
 801691a:	b083      	sub	sp, #12
 801691c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801691e:	4b0b      	ldr	r3, [pc, #44]	; (801694c <xTaskGetSchedulerState+0x34>)
 8016920:	681b      	ldr	r3, [r3, #0]
 8016922:	2b00      	cmp	r3, #0
 8016924:	d102      	bne.n	801692c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8016926:	2301      	movs	r3, #1
 8016928:	607b      	str	r3, [r7, #4]
 801692a:	e008      	b.n	801693e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801692c:	4b08      	ldr	r3, [pc, #32]	; (8016950 <xTaskGetSchedulerState+0x38>)
 801692e:	681b      	ldr	r3, [r3, #0]
 8016930:	2b00      	cmp	r3, #0
 8016932:	d102      	bne.n	801693a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8016934:	2302      	movs	r3, #2
 8016936:	607b      	str	r3, [r7, #4]
 8016938:	e001      	b.n	801693e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801693a:	2300      	movs	r3, #0
 801693c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801693e:	687b      	ldr	r3, [r7, #4]
	}
 8016940:	4618      	mov	r0, r3
 8016942:	370c      	adds	r7, #12
 8016944:	46bd      	mov	sp, r7
 8016946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801694a:	4770      	bx	lr
 801694c:	20000cac 	.word	0x20000cac
 8016950:	20000cc8 	.word	0x20000cc8

08016954 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8016954:	b580      	push	{r7, lr}
 8016956:	b084      	sub	sp, #16
 8016958:	af00      	add	r7, sp, #0
 801695a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8016960:	2300      	movs	r3, #0
 8016962:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	2b00      	cmp	r3, #0
 8016968:	d05e      	beq.n	8016a28 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801696a:	68bb      	ldr	r3, [r7, #8]
 801696c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801696e:	4b31      	ldr	r3, [pc, #196]	; (8016a34 <xTaskPriorityInherit+0xe0>)
 8016970:	681b      	ldr	r3, [r3, #0]
 8016972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016974:	429a      	cmp	r2, r3
 8016976:	d24e      	bcs.n	8016a16 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016978:	68bb      	ldr	r3, [r7, #8]
 801697a:	699b      	ldr	r3, [r3, #24]
 801697c:	2b00      	cmp	r3, #0
 801697e:	db06      	blt.n	801698e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016980:	4b2c      	ldr	r3, [pc, #176]	; (8016a34 <xTaskPriorityInherit+0xe0>)
 8016982:	681b      	ldr	r3, [r3, #0]
 8016984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016986:	f1c3 0207 	rsb	r2, r3, #7
 801698a:	68bb      	ldr	r3, [r7, #8]
 801698c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801698e:	68bb      	ldr	r3, [r7, #8]
 8016990:	6959      	ldr	r1, [r3, #20]
 8016992:	68bb      	ldr	r3, [r7, #8]
 8016994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016996:	4613      	mov	r3, r2
 8016998:	009b      	lsls	r3, r3, #2
 801699a:	4413      	add	r3, r2
 801699c:	009b      	lsls	r3, r3, #2
 801699e:	4a26      	ldr	r2, [pc, #152]	; (8016a38 <xTaskPriorityInherit+0xe4>)
 80169a0:	4413      	add	r3, r2
 80169a2:	4299      	cmp	r1, r3
 80169a4:	d12f      	bne.n	8016a06 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80169a6:	68bb      	ldr	r3, [r7, #8]
 80169a8:	3304      	adds	r3, #4
 80169aa:	4618      	mov	r0, r3
 80169ac:	f7fe fe09 	bl	80155c2 <uxListRemove>
 80169b0:	4603      	mov	r3, r0
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	d10a      	bne.n	80169cc <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80169b6:	68bb      	ldr	r3, [r7, #8]
 80169b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169ba:	2201      	movs	r2, #1
 80169bc:	fa02 f303 	lsl.w	r3, r2, r3
 80169c0:	43da      	mvns	r2, r3
 80169c2:	4b1e      	ldr	r3, [pc, #120]	; (8016a3c <xTaskPriorityInherit+0xe8>)
 80169c4:	681b      	ldr	r3, [r3, #0]
 80169c6:	4013      	ands	r3, r2
 80169c8:	4a1c      	ldr	r2, [pc, #112]	; (8016a3c <xTaskPriorityInherit+0xe8>)
 80169ca:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80169cc:	4b19      	ldr	r3, [pc, #100]	; (8016a34 <xTaskPriorityInherit+0xe0>)
 80169ce:	681b      	ldr	r3, [r3, #0]
 80169d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80169d2:	68bb      	ldr	r3, [r7, #8]
 80169d4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80169d6:	68bb      	ldr	r3, [r7, #8]
 80169d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169da:	2201      	movs	r2, #1
 80169dc:	409a      	lsls	r2, r3
 80169de:	4b17      	ldr	r3, [pc, #92]	; (8016a3c <xTaskPriorityInherit+0xe8>)
 80169e0:	681b      	ldr	r3, [r3, #0]
 80169e2:	4313      	orrs	r3, r2
 80169e4:	4a15      	ldr	r2, [pc, #84]	; (8016a3c <xTaskPriorityInherit+0xe8>)
 80169e6:	6013      	str	r3, [r2, #0]
 80169e8:	68bb      	ldr	r3, [r7, #8]
 80169ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80169ec:	4613      	mov	r3, r2
 80169ee:	009b      	lsls	r3, r3, #2
 80169f0:	4413      	add	r3, r2
 80169f2:	009b      	lsls	r3, r3, #2
 80169f4:	4a10      	ldr	r2, [pc, #64]	; (8016a38 <xTaskPriorityInherit+0xe4>)
 80169f6:	441a      	add	r2, r3
 80169f8:	68bb      	ldr	r3, [r7, #8]
 80169fa:	3304      	adds	r3, #4
 80169fc:	4619      	mov	r1, r3
 80169fe:	4610      	mov	r0, r2
 8016a00:	f7fe fd82 	bl	8015508 <vListInsertEnd>
 8016a04:	e004      	b.n	8016a10 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016a06:	4b0b      	ldr	r3, [pc, #44]	; (8016a34 <xTaskPriorityInherit+0xe0>)
 8016a08:	681b      	ldr	r3, [r3, #0]
 8016a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016a0c:	68bb      	ldr	r3, [r7, #8]
 8016a0e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8016a10:	2301      	movs	r3, #1
 8016a12:	60fb      	str	r3, [r7, #12]
 8016a14:	e008      	b.n	8016a28 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8016a16:	68bb      	ldr	r3, [r7, #8]
 8016a18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016a1a:	4b06      	ldr	r3, [pc, #24]	; (8016a34 <xTaskPriorityInherit+0xe0>)
 8016a1c:	681b      	ldr	r3, [r3, #0]
 8016a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a20:	429a      	cmp	r2, r3
 8016a22:	d201      	bcs.n	8016a28 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8016a24:	2301      	movs	r3, #1
 8016a26:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016a28:	68fb      	ldr	r3, [r7, #12]
	}
 8016a2a:	4618      	mov	r0, r3
 8016a2c:	3710      	adds	r7, #16
 8016a2e:	46bd      	mov	sp, r7
 8016a30:	bd80      	pop	{r7, pc}
 8016a32:	bf00      	nop
 8016a34:	20000ba0 	.word	0x20000ba0
 8016a38:	20000ba4 	.word	0x20000ba4
 8016a3c:	20000ca8 	.word	0x20000ca8

08016a40 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8016a40:	b580      	push	{r7, lr}
 8016a42:	b086      	sub	sp, #24
 8016a44:	af00      	add	r7, sp, #0
 8016a46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8016a4c:	2300      	movs	r3, #0
 8016a4e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	d06e      	beq.n	8016b34 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8016a56:	4b3a      	ldr	r3, [pc, #232]	; (8016b40 <xTaskPriorityDisinherit+0x100>)
 8016a58:	681b      	ldr	r3, [r3, #0]
 8016a5a:	693a      	ldr	r2, [r7, #16]
 8016a5c:	429a      	cmp	r2, r3
 8016a5e:	d00a      	beq.n	8016a76 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8016a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a64:	f383 8811 	msr	BASEPRI, r3
 8016a68:	f3bf 8f6f 	isb	sy
 8016a6c:	f3bf 8f4f 	dsb	sy
 8016a70:	60fb      	str	r3, [r7, #12]
}
 8016a72:	bf00      	nop
 8016a74:	e7fe      	b.n	8016a74 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8016a76:	693b      	ldr	r3, [r7, #16]
 8016a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	d10a      	bne.n	8016a94 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8016a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a82:	f383 8811 	msr	BASEPRI, r3
 8016a86:	f3bf 8f6f 	isb	sy
 8016a8a:	f3bf 8f4f 	dsb	sy
 8016a8e:	60bb      	str	r3, [r7, #8]
}
 8016a90:	bf00      	nop
 8016a92:	e7fe      	b.n	8016a92 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8016a94:	693b      	ldr	r3, [r7, #16]
 8016a96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016a98:	1e5a      	subs	r2, r3, #1
 8016a9a:	693b      	ldr	r3, [r7, #16]
 8016a9c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016a9e:	693b      	ldr	r3, [r7, #16]
 8016aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016aa2:	693b      	ldr	r3, [r7, #16]
 8016aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016aa6:	429a      	cmp	r2, r3
 8016aa8:	d044      	beq.n	8016b34 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8016aaa:	693b      	ldr	r3, [r7, #16]
 8016aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	d140      	bne.n	8016b34 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016ab2:	693b      	ldr	r3, [r7, #16]
 8016ab4:	3304      	adds	r3, #4
 8016ab6:	4618      	mov	r0, r3
 8016ab8:	f7fe fd83 	bl	80155c2 <uxListRemove>
 8016abc:	4603      	mov	r3, r0
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d115      	bne.n	8016aee <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016ac2:	693b      	ldr	r3, [r7, #16]
 8016ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016ac6:	491f      	ldr	r1, [pc, #124]	; (8016b44 <xTaskPriorityDisinherit+0x104>)
 8016ac8:	4613      	mov	r3, r2
 8016aca:	009b      	lsls	r3, r3, #2
 8016acc:	4413      	add	r3, r2
 8016ace:	009b      	lsls	r3, r3, #2
 8016ad0:	440b      	add	r3, r1
 8016ad2:	681b      	ldr	r3, [r3, #0]
 8016ad4:	2b00      	cmp	r3, #0
 8016ad6:	d10a      	bne.n	8016aee <xTaskPriorityDisinherit+0xae>
 8016ad8:	693b      	ldr	r3, [r7, #16]
 8016ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016adc:	2201      	movs	r2, #1
 8016ade:	fa02 f303 	lsl.w	r3, r2, r3
 8016ae2:	43da      	mvns	r2, r3
 8016ae4:	4b18      	ldr	r3, [pc, #96]	; (8016b48 <xTaskPriorityDisinherit+0x108>)
 8016ae6:	681b      	ldr	r3, [r3, #0]
 8016ae8:	4013      	ands	r3, r2
 8016aea:	4a17      	ldr	r2, [pc, #92]	; (8016b48 <xTaskPriorityDisinherit+0x108>)
 8016aec:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016aee:	693b      	ldr	r3, [r7, #16]
 8016af0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016af2:	693b      	ldr	r3, [r7, #16]
 8016af4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016af6:	693b      	ldr	r3, [r7, #16]
 8016af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016afa:	f1c3 0207 	rsb	r2, r3, #7
 8016afe:	693b      	ldr	r3, [r7, #16]
 8016b00:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8016b02:	693b      	ldr	r3, [r7, #16]
 8016b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b06:	2201      	movs	r2, #1
 8016b08:	409a      	lsls	r2, r3
 8016b0a:	4b0f      	ldr	r3, [pc, #60]	; (8016b48 <xTaskPriorityDisinherit+0x108>)
 8016b0c:	681b      	ldr	r3, [r3, #0]
 8016b0e:	4313      	orrs	r3, r2
 8016b10:	4a0d      	ldr	r2, [pc, #52]	; (8016b48 <xTaskPriorityDisinherit+0x108>)
 8016b12:	6013      	str	r3, [r2, #0]
 8016b14:	693b      	ldr	r3, [r7, #16]
 8016b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b18:	4613      	mov	r3, r2
 8016b1a:	009b      	lsls	r3, r3, #2
 8016b1c:	4413      	add	r3, r2
 8016b1e:	009b      	lsls	r3, r3, #2
 8016b20:	4a08      	ldr	r2, [pc, #32]	; (8016b44 <xTaskPriorityDisinherit+0x104>)
 8016b22:	441a      	add	r2, r3
 8016b24:	693b      	ldr	r3, [r7, #16]
 8016b26:	3304      	adds	r3, #4
 8016b28:	4619      	mov	r1, r3
 8016b2a:	4610      	mov	r0, r2
 8016b2c:	f7fe fcec 	bl	8015508 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8016b30:	2301      	movs	r3, #1
 8016b32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016b34:	697b      	ldr	r3, [r7, #20]
	}
 8016b36:	4618      	mov	r0, r3
 8016b38:	3718      	adds	r7, #24
 8016b3a:	46bd      	mov	sp, r7
 8016b3c:	bd80      	pop	{r7, pc}
 8016b3e:	bf00      	nop
 8016b40:	20000ba0 	.word	0x20000ba0
 8016b44:	20000ba4 	.word	0x20000ba4
 8016b48:	20000ca8 	.word	0x20000ca8

08016b4c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8016b4c:	b580      	push	{r7, lr}
 8016b4e:	b088      	sub	sp, #32
 8016b50:	af00      	add	r7, sp, #0
 8016b52:	6078      	str	r0, [r7, #4]
 8016b54:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8016b5a:	2301      	movs	r3, #1
 8016b5c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	d077      	beq.n	8016c54 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8016b64:	69bb      	ldr	r3, [r7, #24]
 8016b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016b68:	2b00      	cmp	r3, #0
 8016b6a:	d10a      	bne.n	8016b82 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8016b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b70:	f383 8811 	msr	BASEPRI, r3
 8016b74:	f3bf 8f6f 	isb	sy
 8016b78:	f3bf 8f4f 	dsb	sy
 8016b7c:	60fb      	str	r3, [r7, #12]
}
 8016b7e:	bf00      	nop
 8016b80:	e7fe      	b.n	8016b80 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8016b82:	69bb      	ldr	r3, [r7, #24]
 8016b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016b86:	683a      	ldr	r2, [r7, #0]
 8016b88:	429a      	cmp	r2, r3
 8016b8a:	d902      	bls.n	8016b92 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8016b8c:	683b      	ldr	r3, [r7, #0]
 8016b8e:	61fb      	str	r3, [r7, #28]
 8016b90:	e002      	b.n	8016b98 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8016b92:	69bb      	ldr	r3, [r7, #24]
 8016b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016b96:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8016b98:	69bb      	ldr	r3, [r7, #24]
 8016b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b9c:	69fa      	ldr	r2, [r7, #28]
 8016b9e:	429a      	cmp	r2, r3
 8016ba0:	d058      	beq.n	8016c54 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8016ba2:	69bb      	ldr	r3, [r7, #24]
 8016ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016ba6:	697a      	ldr	r2, [r7, #20]
 8016ba8:	429a      	cmp	r2, r3
 8016baa:	d153      	bne.n	8016c54 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8016bac:	4b2b      	ldr	r3, [pc, #172]	; (8016c5c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8016bae:	681b      	ldr	r3, [r3, #0]
 8016bb0:	69ba      	ldr	r2, [r7, #24]
 8016bb2:	429a      	cmp	r2, r3
 8016bb4:	d10a      	bne.n	8016bcc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8016bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bba:	f383 8811 	msr	BASEPRI, r3
 8016bbe:	f3bf 8f6f 	isb	sy
 8016bc2:	f3bf 8f4f 	dsb	sy
 8016bc6:	60bb      	str	r3, [r7, #8]
}
 8016bc8:	bf00      	nop
 8016bca:	e7fe      	b.n	8016bca <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8016bcc:	69bb      	ldr	r3, [r7, #24]
 8016bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016bd0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8016bd2:	69bb      	ldr	r3, [r7, #24]
 8016bd4:	69fa      	ldr	r2, [r7, #28]
 8016bd6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016bd8:	69bb      	ldr	r3, [r7, #24]
 8016bda:	699b      	ldr	r3, [r3, #24]
 8016bdc:	2b00      	cmp	r3, #0
 8016bde:	db04      	blt.n	8016bea <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016be0:	69fb      	ldr	r3, [r7, #28]
 8016be2:	f1c3 0207 	rsb	r2, r3, #7
 8016be6:	69bb      	ldr	r3, [r7, #24]
 8016be8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8016bea:	69bb      	ldr	r3, [r7, #24]
 8016bec:	6959      	ldr	r1, [r3, #20]
 8016bee:	693a      	ldr	r2, [r7, #16]
 8016bf0:	4613      	mov	r3, r2
 8016bf2:	009b      	lsls	r3, r3, #2
 8016bf4:	4413      	add	r3, r2
 8016bf6:	009b      	lsls	r3, r3, #2
 8016bf8:	4a19      	ldr	r2, [pc, #100]	; (8016c60 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8016bfa:	4413      	add	r3, r2
 8016bfc:	4299      	cmp	r1, r3
 8016bfe:	d129      	bne.n	8016c54 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016c00:	69bb      	ldr	r3, [r7, #24]
 8016c02:	3304      	adds	r3, #4
 8016c04:	4618      	mov	r0, r3
 8016c06:	f7fe fcdc 	bl	80155c2 <uxListRemove>
 8016c0a:	4603      	mov	r3, r0
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	d10a      	bne.n	8016c26 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8016c10:	69bb      	ldr	r3, [r7, #24]
 8016c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c14:	2201      	movs	r2, #1
 8016c16:	fa02 f303 	lsl.w	r3, r2, r3
 8016c1a:	43da      	mvns	r2, r3
 8016c1c:	4b11      	ldr	r3, [pc, #68]	; (8016c64 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8016c1e:	681b      	ldr	r3, [r3, #0]
 8016c20:	4013      	ands	r3, r2
 8016c22:	4a10      	ldr	r2, [pc, #64]	; (8016c64 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8016c24:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8016c26:	69bb      	ldr	r3, [r7, #24]
 8016c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c2a:	2201      	movs	r2, #1
 8016c2c:	409a      	lsls	r2, r3
 8016c2e:	4b0d      	ldr	r3, [pc, #52]	; (8016c64 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8016c30:	681b      	ldr	r3, [r3, #0]
 8016c32:	4313      	orrs	r3, r2
 8016c34:	4a0b      	ldr	r2, [pc, #44]	; (8016c64 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8016c36:	6013      	str	r3, [r2, #0]
 8016c38:	69bb      	ldr	r3, [r7, #24]
 8016c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c3c:	4613      	mov	r3, r2
 8016c3e:	009b      	lsls	r3, r3, #2
 8016c40:	4413      	add	r3, r2
 8016c42:	009b      	lsls	r3, r3, #2
 8016c44:	4a06      	ldr	r2, [pc, #24]	; (8016c60 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8016c46:	441a      	add	r2, r3
 8016c48:	69bb      	ldr	r3, [r7, #24]
 8016c4a:	3304      	adds	r3, #4
 8016c4c:	4619      	mov	r1, r3
 8016c4e:	4610      	mov	r0, r2
 8016c50:	f7fe fc5a 	bl	8015508 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016c54:	bf00      	nop
 8016c56:	3720      	adds	r7, #32
 8016c58:	46bd      	mov	sp, r7
 8016c5a:	bd80      	pop	{r7, pc}
 8016c5c:	20000ba0 	.word	0x20000ba0
 8016c60:	20000ba4 	.word	0x20000ba4
 8016c64:	20000ca8 	.word	0x20000ca8

08016c68 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8016c68:	b480      	push	{r7}
 8016c6a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8016c6c:	4b07      	ldr	r3, [pc, #28]	; (8016c8c <pvTaskIncrementMutexHeldCount+0x24>)
 8016c6e:	681b      	ldr	r3, [r3, #0]
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	d004      	beq.n	8016c7e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8016c74:	4b05      	ldr	r3, [pc, #20]	; (8016c8c <pvTaskIncrementMutexHeldCount+0x24>)
 8016c76:	681b      	ldr	r3, [r3, #0]
 8016c78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8016c7a:	3201      	adds	r2, #1
 8016c7c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8016c7e:	4b03      	ldr	r3, [pc, #12]	; (8016c8c <pvTaskIncrementMutexHeldCount+0x24>)
 8016c80:	681b      	ldr	r3, [r3, #0]
	}
 8016c82:	4618      	mov	r0, r3
 8016c84:	46bd      	mov	sp, r7
 8016c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c8a:	4770      	bx	lr
 8016c8c:	20000ba0 	.word	0x20000ba0

08016c90 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016c90:	b580      	push	{r7, lr}
 8016c92:	b084      	sub	sp, #16
 8016c94:	af00      	add	r7, sp, #0
 8016c96:	6078      	str	r0, [r7, #4]
 8016c98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8016c9a:	4b2b      	ldr	r3, [pc, #172]	; (8016d48 <prvAddCurrentTaskToDelayedList+0xb8>)
 8016c9c:	681b      	ldr	r3, [r3, #0]
 8016c9e:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8016ca0:	4b2a      	ldr	r3, [pc, #168]	; (8016d4c <prvAddCurrentTaskToDelayedList+0xbc>)
 8016ca2:	681b      	ldr	r3, [r3, #0]
 8016ca4:	2200      	movs	r2, #0
 8016ca6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016caa:	4b28      	ldr	r3, [pc, #160]	; (8016d4c <prvAddCurrentTaskToDelayedList+0xbc>)
 8016cac:	681b      	ldr	r3, [r3, #0]
 8016cae:	3304      	adds	r3, #4
 8016cb0:	4618      	mov	r0, r3
 8016cb2:	f7fe fc86 	bl	80155c2 <uxListRemove>
 8016cb6:	4603      	mov	r3, r0
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d10b      	bne.n	8016cd4 <prvAddCurrentTaskToDelayedList+0x44>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8016cbc:	4b23      	ldr	r3, [pc, #140]	; (8016d4c <prvAddCurrentTaskToDelayedList+0xbc>)
 8016cbe:	681b      	ldr	r3, [r3, #0]
 8016cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016cc2:	2201      	movs	r2, #1
 8016cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8016cc8:	43da      	mvns	r2, r3
 8016cca:	4b21      	ldr	r3, [pc, #132]	; (8016d50 <prvAddCurrentTaskToDelayedList+0xc0>)
 8016ccc:	681b      	ldr	r3, [r3, #0]
 8016cce:	4013      	ands	r3, r2
 8016cd0:	4a1f      	ldr	r2, [pc, #124]	; (8016d50 <prvAddCurrentTaskToDelayedList+0xc0>)
 8016cd2:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016cda:	d10a      	bne.n	8016cf2 <prvAddCurrentTaskToDelayedList+0x62>
 8016cdc:	683b      	ldr	r3, [r7, #0]
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d007      	beq.n	8016cf2 <prvAddCurrentTaskToDelayedList+0x62>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016ce2:	4b1a      	ldr	r3, [pc, #104]	; (8016d4c <prvAddCurrentTaskToDelayedList+0xbc>)
 8016ce4:	681b      	ldr	r3, [r3, #0]
 8016ce6:	3304      	adds	r3, #4
 8016ce8:	4619      	mov	r1, r3
 8016cea:	481a      	ldr	r0, [pc, #104]	; (8016d54 <prvAddCurrentTaskToDelayedList+0xc4>)
 8016cec:	f7fe fc0c 	bl	8015508 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8016cf0:	e026      	b.n	8016d40 <prvAddCurrentTaskToDelayedList+0xb0>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8016cf2:	68fa      	ldr	r2, [r7, #12]
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	4413      	add	r3, r2
 8016cf8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8016cfa:	4b14      	ldr	r3, [pc, #80]	; (8016d4c <prvAddCurrentTaskToDelayedList+0xbc>)
 8016cfc:	681b      	ldr	r3, [r3, #0]
 8016cfe:	68ba      	ldr	r2, [r7, #8]
 8016d00:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8016d02:	68ba      	ldr	r2, [r7, #8]
 8016d04:	68fb      	ldr	r3, [r7, #12]
 8016d06:	429a      	cmp	r2, r3
 8016d08:	d209      	bcs.n	8016d1e <prvAddCurrentTaskToDelayedList+0x8e>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016d0a:	4b13      	ldr	r3, [pc, #76]	; (8016d58 <prvAddCurrentTaskToDelayedList+0xc8>)
 8016d0c:	681a      	ldr	r2, [r3, #0]
 8016d0e:	4b0f      	ldr	r3, [pc, #60]	; (8016d4c <prvAddCurrentTaskToDelayedList+0xbc>)
 8016d10:	681b      	ldr	r3, [r3, #0]
 8016d12:	3304      	adds	r3, #4
 8016d14:	4619      	mov	r1, r3
 8016d16:	4610      	mov	r0, r2
 8016d18:	f7fe fc1a 	bl	8015550 <vListInsert>
}
 8016d1c:	e010      	b.n	8016d40 <prvAddCurrentTaskToDelayedList+0xb0>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016d1e:	4b0f      	ldr	r3, [pc, #60]	; (8016d5c <prvAddCurrentTaskToDelayedList+0xcc>)
 8016d20:	681a      	ldr	r2, [r3, #0]
 8016d22:	4b0a      	ldr	r3, [pc, #40]	; (8016d4c <prvAddCurrentTaskToDelayedList+0xbc>)
 8016d24:	681b      	ldr	r3, [r3, #0]
 8016d26:	3304      	adds	r3, #4
 8016d28:	4619      	mov	r1, r3
 8016d2a:	4610      	mov	r0, r2
 8016d2c:	f7fe fc10 	bl	8015550 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8016d30:	4b0b      	ldr	r3, [pc, #44]	; (8016d60 <prvAddCurrentTaskToDelayedList+0xd0>)
 8016d32:	681b      	ldr	r3, [r3, #0]
 8016d34:	68ba      	ldr	r2, [r7, #8]
 8016d36:	429a      	cmp	r2, r3
 8016d38:	d202      	bcs.n	8016d40 <prvAddCurrentTaskToDelayedList+0xb0>
					xNextTaskUnblockTime = xTimeToWake;
 8016d3a:	4a09      	ldr	r2, [pc, #36]	; (8016d60 <prvAddCurrentTaskToDelayedList+0xd0>)
 8016d3c:	68bb      	ldr	r3, [r7, #8]
 8016d3e:	6013      	str	r3, [r2, #0]
}
 8016d40:	bf00      	nop
 8016d42:	3710      	adds	r7, #16
 8016d44:	46bd      	mov	sp, r7
 8016d46:	bd80      	pop	{r7, pc}
 8016d48:	20000ca4 	.word	0x20000ca4
 8016d4c:	20000ba0 	.word	0x20000ba0
 8016d50:	20000ca8 	.word	0x20000ca8
 8016d54:	20000c8c 	.word	0x20000c8c
 8016d58:	20000c5c 	.word	0x20000c5c
 8016d5c:	20000c58 	.word	0x20000c58
 8016d60:	20000cc0 	.word	0x20000cc0

08016d64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016d64:	b480      	push	{r7}
 8016d66:	b085      	sub	sp, #20
 8016d68:	af00      	add	r7, sp, #0
 8016d6a:	60f8      	str	r0, [r7, #12]
 8016d6c:	60b9      	str	r1, [r7, #8]
 8016d6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016d70:	68fb      	ldr	r3, [r7, #12]
 8016d72:	3b04      	subs	r3, #4
 8016d74:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8016d76:	68fb      	ldr	r3, [r7, #12]
 8016d78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8016d7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016d7e:	68fb      	ldr	r3, [r7, #12]
 8016d80:	3b04      	subs	r3, #4
 8016d82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016d84:	68bb      	ldr	r3, [r7, #8]
 8016d86:	f023 0201 	bic.w	r2, r3, #1
 8016d8a:	68fb      	ldr	r3, [r7, #12]
 8016d8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016d8e:	68fb      	ldr	r3, [r7, #12]
 8016d90:	3b04      	subs	r3, #4
 8016d92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016d94:	4a0c      	ldr	r2, [pc, #48]	; (8016dc8 <pxPortInitialiseStack+0x64>)
 8016d96:	68fb      	ldr	r3, [r7, #12]
 8016d98:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8016d9a:	68fb      	ldr	r3, [r7, #12]
 8016d9c:	3b14      	subs	r3, #20
 8016d9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016da0:	687a      	ldr	r2, [r7, #4]
 8016da2:	68fb      	ldr	r3, [r7, #12]
 8016da4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8016da6:	68fb      	ldr	r3, [r7, #12]
 8016da8:	3b04      	subs	r3, #4
 8016daa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016dac:	68fb      	ldr	r3, [r7, #12]
 8016dae:	f06f 0202 	mvn.w	r2, #2
 8016db2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016db4:	68fb      	ldr	r3, [r7, #12]
 8016db6:	3b20      	subs	r3, #32
 8016db8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8016dba:	68fb      	ldr	r3, [r7, #12]
}
 8016dbc:	4618      	mov	r0, r3
 8016dbe:	3714      	adds	r7, #20
 8016dc0:	46bd      	mov	sp, r7
 8016dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dc6:	4770      	bx	lr
 8016dc8:	08016dcd 	.word	0x08016dcd

08016dcc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016dcc:	b480      	push	{r7}
 8016dce:	b085      	sub	sp, #20
 8016dd0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8016dd2:	2300      	movs	r3, #0
 8016dd4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8016dd6:	4b12      	ldr	r3, [pc, #72]	; (8016e20 <prvTaskExitError+0x54>)
 8016dd8:	681b      	ldr	r3, [r3, #0]
 8016dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016dde:	d00a      	beq.n	8016df6 <prvTaskExitError+0x2a>
	__asm volatile
 8016de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016de4:	f383 8811 	msr	BASEPRI, r3
 8016de8:	f3bf 8f6f 	isb	sy
 8016dec:	f3bf 8f4f 	dsb	sy
 8016df0:	60fb      	str	r3, [r7, #12]
}
 8016df2:	bf00      	nop
 8016df4:	e7fe      	b.n	8016df4 <prvTaskExitError+0x28>
	__asm volatile
 8016df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016dfa:	f383 8811 	msr	BASEPRI, r3
 8016dfe:	f3bf 8f6f 	isb	sy
 8016e02:	f3bf 8f4f 	dsb	sy
 8016e06:	60bb      	str	r3, [r7, #8]
}
 8016e08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8016e0a:	bf00      	nop
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	2b00      	cmp	r3, #0
 8016e10:	d0fc      	beq.n	8016e0c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8016e12:	bf00      	nop
 8016e14:	bf00      	nop
 8016e16:	3714      	adds	r7, #20
 8016e18:	46bd      	mov	sp, r7
 8016e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e1e:	4770      	bx	lr
 8016e20:	20000120 	.word	0x20000120
	...

08016e30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016e30:	4b07      	ldr	r3, [pc, #28]	; (8016e50 <pxCurrentTCBConst2>)
 8016e32:	6819      	ldr	r1, [r3, #0]
 8016e34:	6808      	ldr	r0, [r1, #0]
 8016e36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e3a:	f380 8809 	msr	PSP, r0
 8016e3e:	f3bf 8f6f 	isb	sy
 8016e42:	f04f 0000 	mov.w	r0, #0
 8016e46:	f380 8811 	msr	BASEPRI, r0
 8016e4a:	4770      	bx	lr
 8016e4c:	f3af 8000 	nop.w

08016e50 <pxCurrentTCBConst2>:
 8016e50:	20000ba0 	.word	0x20000ba0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016e54:	bf00      	nop
 8016e56:	bf00      	nop

08016e58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016e58:	4808      	ldr	r0, [pc, #32]	; (8016e7c <prvPortStartFirstTask+0x24>)
 8016e5a:	6800      	ldr	r0, [r0, #0]
 8016e5c:	6800      	ldr	r0, [r0, #0]
 8016e5e:	f380 8808 	msr	MSP, r0
 8016e62:	f04f 0000 	mov.w	r0, #0
 8016e66:	f380 8814 	msr	CONTROL, r0
 8016e6a:	b662      	cpsie	i
 8016e6c:	b661      	cpsie	f
 8016e6e:	f3bf 8f4f 	dsb	sy
 8016e72:	f3bf 8f6f 	isb	sy
 8016e76:	df00      	svc	0
 8016e78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8016e7a:	bf00      	nop
 8016e7c:	e000ed08 	.word	0xe000ed08

08016e80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016e80:	b580      	push	{r7, lr}
 8016e82:	b086      	sub	sp, #24
 8016e84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8016e86:	4b46      	ldr	r3, [pc, #280]	; (8016fa0 <xPortStartScheduler+0x120>)
 8016e88:	681b      	ldr	r3, [r3, #0]
 8016e8a:	4a46      	ldr	r2, [pc, #280]	; (8016fa4 <xPortStartScheduler+0x124>)
 8016e8c:	4293      	cmp	r3, r2
 8016e8e:	d10a      	bne.n	8016ea6 <xPortStartScheduler+0x26>
	__asm volatile
 8016e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e94:	f383 8811 	msr	BASEPRI, r3
 8016e98:	f3bf 8f6f 	isb	sy
 8016e9c:	f3bf 8f4f 	dsb	sy
 8016ea0:	613b      	str	r3, [r7, #16]
}
 8016ea2:	bf00      	nop
 8016ea4:	e7fe      	b.n	8016ea4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8016ea6:	4b3e      	ldr	r3, [pc, #248]	; (8016fa0 <xPortStartScheduler+0x120>)
 8016ea8:	681b      	ldr	r3, [r3, #0]
 8016eaa:	4a3f      	ldr	r2, [pc, #252]	; (8016fa8 <xPortStartScheduler+0x128>)
 8016eac:	4293      	cmp	r3, r2
 8016eae:	d10a      	bne.n	8016ec6 <xPortStartScheduler+0x46>
	__asm volatile
 8016eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016eb4:	f383 8811 	msr	BASEPRI, r3
 8016eb8:	f3bf 8f6f 	isb	sy
 8016ebc:	f3bf 8f4f 	dsb	sy
 8016ec0:	60fb      	str	r3, [r7, #12]
}
 8016ec2:	bf00      	nop
 8016ec4:	e7fe      	b.n	8016ec4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016ec6:	4b39      	ldr	r3, [pc, #228]	; (8016fac <xPortStartScheduler+0x12c>)
 8016ec8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8016eca:	697b      	ldr	r3, [r7, #20]
 8016ecc:	781b      	ldrb	r3, [r3, #0]
 8016ece:	b2db      	uxtb	r3, r3
 8016ed0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016ed2:	697b      	ldr	r3, [r7, #20]
 8016ed4:	22ff      	movs	r2, #255	; 0xff
 8016ed6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016ed8:	697b      	ldr	r3, [r7, #20]
 8016eda:	781b      	ldrb	r3, [r3, #0]
 8016edc:	b2db      	uxtb	r3, r3
 8016ede:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016ee0:	78fb      	ldrb	r3, [r7, #3]
 8016ee2:	b2db      	uxtb	r3, r3
 8016ee4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8016ee8:	b2da      	uxtb	r2, r3
 8016eea:	4b31      	ldr	r3, [pc, #196]	; (8016fb0 <xPortStartScheduler+0x130>)
 8016eec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8016eee:	4b31      	ldr	r3, [pc, #196]	; (8016fb4 <xPortStartScheduler+0x134>)
 8016ef0:	2207      	movs	r2, #7
 8016ef2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016ef4:	e009      	b.n	8016f0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8016ef6:	4b2f      	ldr	r3, [pc, #188]	; (8016fb4 <xPortStartScheduler+0x134>)
 8016ef8:	681b      	ldr	r3, [r3, #0]
 8016efa:	3b01      	subs	r3, #1
 8016efc:	4a2d      	ldr	r2, [pc, #180]	; (8016fb4 <xPortStartScheduler+0x134>)
 8016efe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016f00:	78fb      	ldrb	r3, [r7, #3]
 8016f02:	b2db      	uxtb	r3, r3
 8016f04:	005b      	lsls	r3, r3, #1
 8016f06:	b2db      	uxtb	r3, r3
 8016f08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016f0a:	78fb      	ldrb	r3, [r7, #3]
 8016f0c:	b2db      	uxtb	r3, r3
 8016f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016f12:	2b80      	cmp	r3, #128	; 0x80
 8016f14:	d0ef      	beq.n	8016ef6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8016f16:	4b27      	ldr	r3, [pc, #156]	; (8016fb4 <xPortStartScheduler+0x134>)
 8016f18:	681b      	ldr	r3, [r3, #0]
 8016f1a:	f1c3 0307 	rsb	r3, r3, #7
 8016f1e:	2b04      	cmp	r3, #4
 8016f20:	d00a      	beq.n	8016f38 <xPortStartScheduler+0xb8>
	__asm volatile
 8016f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f26:	f383 8811 	msr	BASEPRI, r3
 8016f2a:	f3bf 8f6f 	isb	sy
 8016f2e:	f3bf 8f4f 	dsb	sy
 8016f32:	60bb      	str	r3, [r7, #8]
}
 8016f34:	bf00      	nop
 8016f36:	e7fe      	b.n	8016f36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8016f38:	4b1e      	ldr	r3, [pc, #120]	; (8016fb4 <xPortStartScheduler+0x134>)
 8016f3a:	681b      	ldr	r3, [r3, #0]
 8016f3c:	021b      	lsls	r3, r3, #8
 8016f3e:	4a1d      	ldr	r2, [pc, #116]	; (8016fb4 <xPortStartScheduler+0x134>)
 8016f40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016f42:	4b1c      	ldr	r3, [pc, #112]	; (8016fb4 <xPortStartScheduler+0x134>)
 8016f44:	681b      	ldr	r3, [r3, #0]
 8016f46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8016f4a:	4a1a      	ldr	r2, [pc, #104]	; (8016fb4 <xPortStartScheduler+0x134>)
 8016f4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	b2da      	uxtb	r2, r3
 8016f52:	697b      	ldr	r3, [r7, #20]
 8016f54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016f56:	4b18      	ldr	r3, [pc, #96]	; (8016fb8 <xPortStartScheduler+0x138>)
 8016f58:	681b      	ldr	r3, [r3, #0]
 8016f5a:	4a17      	ldr	r2, [pc, #92]	; (8016fb8 <xPortStartScheduler+0x138>)
 8016f5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016f60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016f62:	4b15      	ldr	r3, [pc, #84]	; (8016fb8 <xPortStartScheduler+0x138>)
 8016f64:	681b      	ldr	r3, [r3, #0]
 8016f66:	4a14      	ldr	r2, [pc, #80]	; (8016fb8 <xPortStartScheduler+0x138>)
 8016f68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8016f6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8016f6e:	f000 f8dd 	bl	801712c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016f72:	4b12      	ldr	r3, [pc, #72]	; (8016fbc <xPortStartScheduler+0x13c>)
 8016f74:	2200      	movs	r2, #0
 8016f76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8016f78:	f000 f8fc 	bl	8017174 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8016f7c:	4b10      	ldr	r3, [pc, #64]	; (8016fc0 <xPortStartScheduler+0x140>)
 8016f7e:	681b      	ldr	r3, [r3, #0]
 8016f80:	4a0f      	ldr	r2, [pc, #60]	; (8016fc0 <xPortStartScheduler+0x140>)
 8016f82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016f86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016f88:	f7ff ff66 	bl	8016e58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8016f8c:	f7ff fa92 	bl	80164b4 <vTaskSwitchContext>
	prvTaskExitError();
 8016f90:	f7ff ff1c 	bl	8016dcc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016f94:	2300      	movs	r3, #0
}
 8016f96:	4618      	mov	r0, r3
 8016f98:	3718      	adds	r7, #24
 8016f9a:	46bd      	mov	sp, r7
 8016f9c:	bd80      	pop	{r7, pc}
 8016f9e:	bf00      	nop
 8016fa0:	e000ed00 	.word	0xe000ed00
 8016fa4:	410fc271 	.word	0x410fc271
 8016fa8:	410fc270 	.word	0x410fc270
 8016fac:	e000e400 	.word	0xe000e400
 8016fb0:	20000ccc 	.word	0x20000ccc
 8016fb4:	20000cd0 	.word	0x20000cd0
 8016fb8:	e000ed20 	.word	0xe000ed20
 8016fbc:	20000120 	.word	0x20000120
 8016fc0:	e000ef34 	.word	0xe000ef34

08016fc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016fc4:	b480      	push	{r7}
 8016fc6:	b083      	sub	sp, #12
 8016fc8:	af00      	add	r7, sp, #0
	__asm volatile
 8016fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016fce:	f383 8811 	msr	BASEPRI, r3
 8016fd2:	f3bf 8f6f 	isb	sy
 8016fd6:	f3bf 8f4f 	dsb	sy
 8016fda:	607b      	str	r3, [r7, #4]
}
 8016fdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8016fde:	4b0f      	ldr	r3, [pc, #60]	; (801701c <vPortEnterCritical+0x58>)
 8016fe0:	681b      	ldr	r3, [r3, #0]
 8016fe2:	3301      	adds	r3, #1
 8016fe4:	4a0d      	ldr	r2, [pc, #52]	; (801701c <vPortEnterCritical+0x58>)
 8016fe6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8016fe8:	4b0c      	ldr	r3, [pc, #48]	; (801701c <vPortEnterCritical+0x58>)
 8016fea:	681b      	ldr	r3, [r3, #0]
 8016fec:	2b01      	cmp	r3, #1
 8016fee:	d10f      	bne.n	8017010 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016ff0:	4b0b      	ldr	r3, [pc, #44]	; (8017020 <vPortEnterCritical+0x5c>)
 8016ff2:	681b      	ldr	r3, [r3, #0]
 8016ff4:	b2db      	uxtb	r3, r3
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	d00a      	beq.n	8017010 <vPortEnterCritical+0x4c>
	__asm volatile
 8016ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ffe:	f383 8811 	msr	BASEPRI, r3
 8017002:	f3bf 8f6f 	isb	sy
 8017006:	f3bf 8f4f 	dsb	sy
 801700a:	603b      	str	r3, [r7, #0]
}
 801700c:	bf00      	nop
 801700e:	e7fe      	b.n	801700e <vPortEnterCritical+0x4a>
	}
}
 8017010:	bf00      	nop
 8017012:	370c      	adds	r7, #12
 8017014:	46bd      	mov	sp, r7
 8017016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801701a:	4770      	bx	lr
 801701c:	20000120 	.word	0x20000120
 8017020:	e000ed04 	.word	0xe000ed04

08017024 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8017024:	b480      	push	{r7}
 8017026:	b083      	sub	sp, #12
 8017028:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801702a:	4b12      	ldr	r3, [pc, #72]	; (8017074 <vPortExitCritical+0x50>)
 801702c:	681b      	ldr	r3, [r3, #0]
 801702e:	2b00      	cmp	r3, #0
 8017030:	d10a      	bne.n	8017048 <vPortExitCritical+0x24>
	__asm volatile
 8017032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017036:	f383 8811 	msr	BASEPRI, r3
 801703a:	f3bf 8f6f 	isb	sy
 801703e:	f3bf 8f4f 	dsb	sy
 8017042:	607b      	str	r3, [r7, #4]
}
 8017044:	bf00      	nop
 8017046:	e7fe      	b.n	8017046 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8017048:	4b0a      	ldr	r3, [pc, #40]	; (8017074 <vPortExitCritical+0x50>)
 801704a:	681b      	ldr	r3, [r3, #0]
 801704c:	3b01      	subs	r3, #1
 801704e:	4a09      	ldr	r2, [pc, #36]	; (8017074 <vPortExitCritical+0x50>)
 8017050:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8017052:	4b08      	ldr	r3, [pc, #32]	; (8017074 <vPortExitCritical+0x50>)
 8017054:	681b      	ldr	r3, [r3, #0]
 8017056:	2b00      	cmp	r3, #0
 8017058:	d105      	bne.n	8017066 <vPortExitCritical+0x42>
 801705a:	2300      	movs	r3, #0
 801705c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801705e:	683b      	ldr	r3, [r7, #0]
 8017060:	f383 8811 	msr	BASEPRI, r3
}
 8017064:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8017066:	bf00      	nop
 8017068:	370c      	adds	r7, #12
 801706a:	46bd      	mov	sp, r7
 801706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017070:	4770      	bx	lr
 8017072:	bf00      	nop
 8017074:	20000120 	.word	0x20000120
	...

08017080 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8017080:	f3ef 8009 	mrs	r0, PSP
 8017084:	f3bf 8f6f 	isb	sy
 8017088:	4b15      	ldr	r3, [pc, #84]	; (80170e0 <pxCurrentTCBConst>)
 801708a:	681a      	ldr	r2, [r3, #0]
 801708c:	f01e 0f10 	tst.w	lr, #16
 8017090:	bf08      	it	eq
 8017092:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8017096:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801709a:	6010      	str	r0, [r2, #0]
 801709c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80170a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80170a4:	f380 8811 	msr	BASEPRI, r0
 80170a8:	f3bf 8f4f 	dsb	sy
 80170ac:	f3bf 8f6f 	isb	sy
 80170b0:	f7ff fa00 	bl	80164b4 <vTaskSwitchContext>
 80170b4:	f04f 0000 	mov.w	r0, #0
 80170b8:	f380 8811 	msr	BASEPRI, r0
 80170bc:	bc09      	pop	{r0, r3}
 80170be:	6819      	ldr	r1, [r3, #0]
 80170c0:	6808      	ldr	r0, [r1, #0]
 80170c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170c6:	f01e 0f10 	tst.w	lr, #16
 80170ca:	bf08      	it	eq
 80170cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80170d0:	f380 8809 	msr	PSP, r0
 80170d4:	f3bf 8f6f 	isb	sy
 80170d8:	4770      	bx	lr
 80170da:	bf00      	nop
 80170dc:	f3af 8000 	nop.w

080170e0 <pxCurrentTCBConst>:
 80170e0:	20000ba0 	.word	0x20000ba0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80170e4:	bf00      	nop
 80170e6:	bf00      	nop

080170e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80170e8:	b580      	push	{r7, lr}
 80170ea:	b082      	sub	sp, #8
 80170ec:	af00      	add	r7, sp, #0
	__asm volatile
 80170ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170f2:	f383 8811 	msr	BASEPRI, r3
 80170f6:	f3bf 8f6f 	isb	sy
 80170fa:	f3bf 8f4f 	dsb	sy
 80170fe:	607b      	str	r3, [r7, #4]
}
 8017100:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8017102:	f7ff f941 	bl	8016388 <xTaskIncrementTick>
 8017106:	4603      	mov	r3, r0
 8017108:	2b00      	cmp	r3, #0
 801710a:	d003      	beq.n	8017114 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801710c:	4b06      	ldr	r3, [pc, #24]	; (8017128 <SysTick_Handler+0x40>)
 801710e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017112:	601a      	str	r2, [r3, #0]
 8017114:	2300      	movs	r3, #0
 8017116:	603b      	str	r3, [r7, #0]
	__asm volatile
 8017118:	683b      	ldr	r3, [r7, #0]
 801711a:	f383 8811 	msr	BASEPRI, r3
}
 801711e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8017120:	bf00      	nop
 8017122:	3708      	adds	r7, #8
 8017124:	46bd      	mov	sp, r7
 8017126:	bd80      	pop	{r7, pc}
 8017128:	e000ed04 	.word	0xe000ed04

0801712c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801712c:	b480      	push	{r7}
 801712e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8017130:	4b0b      	ldr	r3, [pc, #44]	; (8017160 <vPortSetupTimerInterrupt+0x34>)
 8017132:	2200      	movs	r2, #0
 8017134:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8017136:	4b0b      	ldr	r3, [pc, #44]	; (8017164 <vPortSetupTimerInterrupt+0x38>)
 8017138:	2200      	movs	r2, #0
 801713a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801713c:	4b0a      	ldr	r3, [pc, #40]	; (8017168 <vPortSetupTimerInterrupt+0x3c>)
 801713e:	681b      	ldr	r3, [r3, #0]
 8017140:	4a0a      	ldr	r2, [pc, #40]	; (801716c <vPortSetupTimerInterrupt+0x40>)
 8017142:	fba2 2303 	umull	r2, r3, r2, r3
 8017146:	099b      	lsrs	r3, r3, #6
 8017148:	4a09      	ldr	r2, [pc, #36]	; (8017170 <vPortSetupTimerInterrupt+0x44>)
 801714a:	3b01      	subs	r3, #1
 801714c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801714e:	4b04      	ldr	r3, [pc, #16]	; (8017160 <vPortSetupTimerInterrupt+0x34>)
 8017150:	2207      	movs	r2, #7
 8017152:	601a      	str	r2, [r3, #0]
}
 8017154:	bf00      	nop
 8017156:	46bd      	mov	sp, r7
 8017158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801715c:	4770      	bx	lr
 801715e:	bf00      	nop
 8017160:	e000e010 	.word	0xe000e010
 8017164:	e000e018 	.word	0xe000e018
 8017168:	20000004 	.word	0x20000004
 801716c:	10624dd3 	.word	0x10624dd3
 8017170:	e000e014 	.word	0xe000e014

08017174 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8017174:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8017184 <vPortEnableVFP+0x10>
 8017178:	6801      	ldr	r1, [r0, #0]
 801717a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801717e:	6001      	str	r1, [r0, #0]
 8017180:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8017182:	bf00      	nop
 8017184:	e000ed88 	.word	0xe000ed88

08017188 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8017188:	b480      	push	{r7}
 801718a:	b085      	sub	sp, #20
 801718c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801718e:	f3ef 8305 	mrs	r3, IPSR
 8017192:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8017194:	68fb      	ldr	r3, [r7, #12]
 8017196:	2b0f      	cmp	r3, #15
 8017198:	d914      	bls.n	80171c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801719a:	4a17      	ldr	r2, [pc, #92]	; (80171f8 <vPortValidateInterruptPriority+0x70>)
 801719c:	68fb      	ldr	r3, [r7, #12]
 801719e:	4413      	add	r3, r2
 80171a0:	781b      	ldrb	r3, [r3, #0]
 80171a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80171a4:	4b15      	ldr	r3, [pc, #84]	; (80171fc <vPortValidateInterruptPriority+0x74>)
 80171a6:	781b      	ldrb	r3, [r3, #0]
 80171a8:	7afa      	ldrb	r2, [r7, #11]
 80171aa:	429a      	cmp	r2, r3
 80171ac:	d20a      	bcs.n	80171c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80171ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171b2:	f383 8811 	msr	BASEPRI, r3
 80171b6:	f3bf 8f6f 	isb	sy
 80171ba:	f3bf 8f4f 	dsb	sy
 80171be:	607b      	str	r3, [r7, #4]
}
 80171c0:	bf00      	nop
 80171c2:	e7fe      	b.n	80171c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80171c4:	4b0e      	ldr	r3, [pc, #56]	; (8017200 <vPortValidateInterruptPriority+0x78>)
 80171c6:	681b      	ldr	r3, [r3, #0]
 80171c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80171cc:	4b0d      	ldr	r3, [pc, #52]	; (8017204 <vPortValidateInterruptPriority+0x7c>)
 80171ce:	681b      	ldr	r3, [r3, #0]
 80171d0:	429a      	cmp	r2, r3
 80171d2:	d90a      	bls.n	80171ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80171d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171d8:	f383 8811 	msr	BASEPRI, r3
 80171dc:	f3bf 8f6f 	isb	sy
 80171e0:	f3bf 8f4f 	dsb	sy
 80171e4:	603b      	str	r3, [r7, #0]
}
 80171e6:	bf00      	nop
 80171e8:	e7fe      	b.n	80171e8 <vPortValidateInterruptPriority+0x60>
	}
 80171ea:	bf00      	nop
 80171ec:	3714      	adds	r7, #20
 80171ee:	46bd      	mov	sp, r7
 80171f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171f4:	4770      	bx	lr
 80171f6:	bf00      	nop
 80171f8:	e000e3f0 	.word	0xe000e3f0
 80171fc:	20000ccc 	.word	0x20000ccc
 8017200:	e000ed0c 	.word	0xe000ed0c
 8017204:	20000cd0 	.word	0x20000cd0

08017208 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8017208:	b580      	push	{r7, lr}
 801720a:	b08a      	sub	sp, #40	; 0x28
 801720c:	af00      	add	r7, sp, #0
 801720e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8017210:	2300      	movs	r3, #0
 8017212:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8017214:	f7ff f81c 	bl	8016250 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8017218:	4b5b      	ldr	r3, [pc, #364]	; (8017388 <pvPortMalloc+0x180>)
 801721a:	681b      	ldr	r3, [r3, #0]
 801721c:	2b00      	cmp	r3, #0
 801721e:	d101      	bne.n	8017224 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8017220:	f000 f920 	bl	8017464 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8017224:	4b59      	ldr	r3, [pc, #356]	; (801738c <pvPortMalloc+0x184>)
 8017226:	681a      	ldr	r2, [r3, #0]
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	4013      	ands	r3, r2
 801722c:	2b00      	cmp	r3, #0
 801722e:	f040 8093 	bne.w	8017358 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	2b00      	cmp	r3, #0
 8017236:	d01d      	beq.n	8017274 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8017238:	2208      	movs	r2, #8
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	4413      	add	r3, r2
 801723e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	f003 0307 	and.w	r3, r3, #7
 8017246:	2b00      	cmp	r3, #0
 8017248:	d014      	beq.n	8017274 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	f023 0307 	bic.w	r3, r3, #7
 8017250:	3308      	adds	r3, #8
 8017252:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	f003 0307 	and.w	r3, r3, #7
 801725a:	2b00      	cmp	r3, #0
 801725c:	d00a      	beq.n	8017274 <pvPortMalloc+0x6c>
	__asm volatile
 801725e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017262:	f383 8811 	msr	BASEPRI, r3
 8017266:	f3bf 8f6f 	isb	sy
 801726a:	f3bf 8f4f 	dsb	sy
 801726e:	617b      	str	r3, [r7, #20]
}
 8017270:	bf00      	nop
 8017272:	e7fe      	b.n	8017272 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	2b00      	cmp	r3, #0
 8017278:	d06e      	beq.n	8017358 <pvPortMalloc+0x150>
 801727a:	4b45      	ldr	r3, [pc, #276]	; (8017390 <pvPortMalloc+0x188>)
 801727c:	681b      	ldr	r3, [r3, #0]
 801727e:	687a      	ldr	r2, [r7, #4]
 8017280:	429a      	cmp	r2, r3
 8017282:	d869      	bhi.n	8017358 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8017284:	4b43      	ldr	r3, [pc, #268]	; (8017394 <pvPortMalloc+0x18c>)
 8017286:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8017288:	4b42      	ldr	r3, [pc, #264]	; (8017394 <pvPortMalloc+0x18c>)
 801728a:	681b      	ldr	r3, [r3, #0]
 801728c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801728e:	e004      	b.n	801729a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8017290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017292:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8017294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017296:	681b      	ldr	r3, [r3, #0]
 8017298:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801729a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801729c:	685b      	ldr	r3, [r3, #4]
 801729e:	687a      	ldr	r2, [r7, #4]
 80172a0:	429a      	cmp	r2, r3
 80172a2:	d903      	bls.n	80172ac <pvPortMalloc+0xa4>
 80172a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172a6:	681b      	ldr	r3, [r3, #0]
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	d1f1      	bne.n	8017290 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80172ac:	4b36      	ldr	r3, [pc, #216]	; (8017388 <pvPortMalloc+0x180>)
 80172ae:	681b      	ldr	r3, [r3, #0]
 80172b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80172b2:	429a      	cmp	r2, r3
 80172b4:	d050      	beq.n	8017358 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80172b6:	6a3b      	ldr	r3, [r7, #32]
 80172b8:	681b      	ldr	r3, [r3, #0]
 80172ba:	2208      	movs	r2, #8
 80172bc:	4413      	add	r3, r2
 80172be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80172c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172c2:	681a      	ldr	r2, [r3, #0]
 80172c4:	6a3b      	ldr	r3, [r7, #32]
 80172c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80172c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172ca:	685a      	ldr	r2, [r3, #4]
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	1ad2      	subs	r2, r2, r3
 80172d0:	2308      	movs	r3, #8
 80172d2:	005b      	lsls	r3, r3, #1
 80172d4:	429a      	cmp	r2, r3
 80172d6:	d91f      	bls.n	8017318 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80172d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	4413      	add	r3, r2
 80172de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80172e0:	69bb      	ldr	r3, [r7, #24]
 80172e2:	f003 0307 	and.w	r3, r3, #7
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	d00a      	beq.n	8017300 <pvPortMalloc+0xf8>
	__asm volatile
 80172ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172ee:	f383 8811 	msr	BASEPRI, r3
 80172f2:	f3bf 8f6f 	isb	sy
 80172f6:	f3bf 8f4f 	dsb	sy
 80172fa:	613b      	str	r3, [r7, #16]
}
 80172fc:	bf00      	nop
 80172fe:	e7fe      	b.n	80172fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8017300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017302:	685a      	ldr	r2, [r3, #4]
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	1ad2      	subs	r2, r2, r3
 8017308:	69bb      	ldr	r3, [r7, #24]
 801730a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801730c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801730e:	687a      	ldr	r2, [r7, #4]
 8017310:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8017312:	69b8      	ldr	r0, [r7, #24]
 8017314:	f000 f908 	bl	8017528 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8017318:	4b1d      	ldr	r3, [pc, #116]	; (8017390 <pvPortMalloc+0x188>)
 801731a:	681a      	ldr	r2, [r3, #0]
 801731c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801731e:	685b      	ldr	r3, [r3, #4]
 8017320:	1ad3      	subs	r3, r2, r3
 8017322:	4a1b      	ldr	r2, [pc, #108]	; (8017390 <pvPortMalloc+0x188>)
 8017324:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8017326:	4b1a      	ldr	r3, [pc, #104]	; (8017390 <pvPortMalloc+0x188>)
 8017328:	681a      	ldr	r2, [r3, #0]
 801732a:	4b1b      	ldr	r3, [pc, #108]	; (8017398 <pvPortMalloc+0x190>)
 801732c:	681b      	ldr	r3, [r3, #0]
 801732e:	429a      	cmp	r2, r3
 8017330:	d203      	bcs.n	801733a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8017332:	4b17      	ldr	r3, [pc, #92]	; (8017390 <pvPortMalloc+0x188>)
 8017334:	681b      	ldr	r3, [r3, #0]
 8017336:	4a18      	ldr	r2, [pc, #96]	; (8017398 <pvPortMalloc+0x190>)
 8017338:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801733a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801733c:	685a      	ldr	r2, [r3, #4]
 801733e:	4b13      	ldr	r3, [pc, #76]	; (801738c <pvPortMalloc+0x184>)
 8017340:	681b      	ldr	r3, [r3, #0]
 8017342:	431a      	orrs	r2, r3
 8017344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017346:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8017348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801734a:	2200      	movs	r2, #0
 801734c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801734e:	4b13      	ldr	r3, [pc, #76]	; (801739c <pvPortMalloc+0x194>)
 8017350:	681b      	ldr	r3, [r3, #0]
 8017352:	3301      	adds	r3, #1
 8017354:	4a11      	ldr	r2, [pc, #68]	; (801739c <pvPortMalloc+0x194>)
 8017356:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8017358:	f7fe ff88 	bl	801626c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801735c:	69fb      	ldr	r3, [r7, #28]
 801735e:	f003 0307 	and.w	r3, r3, #7
 8017362:	2b00      	cmp	r3, #0
 8017364:	d00a      	beq.n	801737c <pvPortMalloc+0x174>
	__asm volatile
 8017366:	f04f 0350 	mov.w	r3, #80	; 0x50
 801736a:	f383 8811 	msr	BASEPRI, r3
 801736e:	f3bf 8f6f 	isb	sy
 8017372:	f3bf 8f4f 	dsb	sy
 8017376:	60fb      	str	r3, [r7, #12]
}
 8017378:	bf00      	nop
 801737a:	e7fe      	b.n	801737a <pvPortMalloc+0x172>
	return pvReturn;
 801737c:	69fb      	ldr	r3, [r7, #28]
}
 801737e:	4618      	mov	r0, r3
 8017380:	3728      	adds	r7, #40	; 0x28
 8017382:	46bd      	mov	sp, r7
 8017384:	bd80      	pop	{r7, pc}
 8017386:	bf00      	nop
 8017388:	20003cdc 	.word	0x20003cdc
 801738c:	20003cf0 	.word	0x20003cf0
 8017390:	20003ce0 	.word	0x20003ce0
 8017394:	20003cd4 	.word	0x20003cd4
 8017398:	20003ce4 	.word	0x20003ce4
 801739c:	20003ce8 	.word	0x20003ce8

080173a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80173a0:	b580      	push	{r7, lr}
 80173a2:	b086      	sub	sp, #24
 80173a4:	af00      	add	r7, sp, #0
 80173a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	d04d      	beq.n	801744e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80173b2:	2308      	movs	r3, #8
 80173b4:	425b      	negs	r3, r3
 80173b6:	697a      	ldr	r2, [r7, #20]
 80173b8:	4413      	add	r3, r2
 80173ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80173bc:	697b      	ldr	r3, [r7, #20]
 80173be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80173c0:	693b      	ldr	r3, [r7, #16]
 80173c2:	685a      	ldr	r2, [r3, #4]
 80173c4:	4b24      	ldr	r3, [pc, #144]	; (8017458 <vPortFree+0xb8>)
 80173c6:	681b      	ldr	r3, [r3, #0]
 80173c8:	4013      	ands	r3, r2
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	d10a      	bne.n	80173e4 <vPortFree+0x44>
	__asm volatile
 80173ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173d2:	f383 8811 	msr	BASEPRI, r3
 80173d6:	f3bf 8f6f 	isb	sy
 80173da:	f3bf 8f4f 	dsb	sy
 80173de:	60fb      	str	r3, [r7, #12]
}
 80173e0:	bf00      	nop
 80173e2:	e7fe      	b.n	80173e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80173e4:	693b      	ldr	r3, [r7, #16]
 80173e6:	681b      	ldr	r3, [r3, #0]
 80173e8:	2b00      	cmp	r3, #0
 80173ea:	d00a      	beq.n	8017402 <vPortFree+0x62>
	__asm volatile
 80173ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173f0:	f383 8811 	msr	BASEPRI, r3
 80173f4:	f3bf 8f6f 	isb	sy
 80173f8:	f3bf 8f4f 	dsb	sy
 80173fc:	60bb      	str	r3, [r7, #8]
}
 80173fe:	bf00      	nop
 8017400:	e7fe      	b.n	8017400 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8017402:	693b      	ldr	r3, [r7, #16]
 8017404:	685a      	ldr	r2, [r3, #4]
 8017406:	4b14      	ldr	r3, [pc, #80]	; (8017458 <vPortFree+0xb8>)
 8017408:	681b      	ldr	r3, [r3, #0]
 801740a:	4013      	ands	r3, r2
 801740c:	2b00      	cmp	r3, #0
 801740e:	d01e      	beq.n	801744e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8017410:	693b      	ldr	r3, [r7, #16]
 8017412:	681b      	ldr	r3, [r3, #0]
 8017414:	2b00      	cmp	r3, #0
 8017416:	d11a      	bne.n	801744e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8017418:	693b      	ldr	r3, [r7, #16]
 801741a:	685a      	ldr	r2, [r3, #4]
 801741c:	4b0e      	ldr	r3, [pc, #56]	; (8017458 <vPortFree+0xb8>)
 801741e:	681b      	ldr	r3, [r3, #0]
 8017420:	43db      	mvns	r3, r3
 8017422:	401a      	ands	r2, r3
 8017424:	693b      	ldr	r3, [r7, #16]
 8017426:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8017428:	f7fe ff12 	bl	8016250 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801742c:	693b      	ldr	r3, [r7, #16]
 801742e:	685a      	ldr	r2, [r3, #4]
 8017430:	4b0a      	ldr	r3, [pc, #40]	; (801745c <vPortFree+0xbc>)
 8017432:	681b      	ldr	r3, [r3, #0]
 8017434:	4413      	add	r3, r2
 8017436:	4a09      	ldr	r2, [pc, #36]	; (801745c <vPortFree+0xbc>)
 8017438:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801743a:	6938      	ldr	r0, [r7, #16]
 801743c:	f000 f874 	bl	8017528 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8017440:	4b07      	ldr	r3, [pc, #28]	; (8017460 <vPortFree+0xc0>)
 8017442:	681b      	ldr	r3, [r3, #0]
 8017444:	3301      	adds	r3, #1
 8017446:	4a06      	ldr	r2, [pc, #24]	; (8017460 <vPortFree+0xc0>)
 8017448:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801744a:	f7fe ff0f 	bl	801626c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801744e:	bf00      	nop
 8017450:	3718      	adds	r7, #24
 8017452:	46bd      	mov	sp, r7
 8017454:	bd80      	pop	{r7, pc}
 8017456:	bf00      	nop
 8017458:	20003cf0 	.word	0x20003cf0
 801745c:	20003ce0 	.word	0x20003ce0
 8017460:	20003cec 	.word	0x20003cec

08017464 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8017464:	b480      	push	{r7}
 8017466:	b085      	sub	sp, #20
 8017468:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801746a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 801746e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8017470:	4b27      	ldr	r3, [pc, #156]	; (8017510 <prvHeapInit+0xac>)
 8017472:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8017474:	68fb      	ldr	r3, [r7, #12]
 8017476:	f003 0307 	and.w	r3, r3, #7
 801747a:	2b00      	cmp	r3, #0
 801747c:	d00c      	beq.n	8017498 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801747e:	68fb      	ldr	r3, [r7, #12]
 8017480:	3307      	adds	r3, #7
 8017482:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017484:	68fb      	ldr	r3, [r7, #12]
 8017486:	f023 0307 	bic.w	r3, r3, #7
 801748a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801748c:	68ba      	ldr	r2, [r7, #8]
 801748e:	68fb      	ldr	r3, [r7, #12]
 8017490:	1ad3      	subs	r3, r2, r3
 8017492:	4a1f      	ldr	r2, [pc, #124]	; (8017510 <prvHeapInit+0xac>)
 8017494:	4413      	add	r3, r2
 8017496:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8017498:	68fb      	ldr	r3, [r7, #12]
 801749a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801749c:	4a1d      	ldr	r2, [pc, #116]	; (8017514 <prvHeapInit+0xb0>)
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80174a2:	4b1c      	ldr	r3, [pc, #112]	; (8017514 <prvHeapInit+0xb0>)
 80174a4:	2200      	movs	r2, #0
 80174a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	68ba      	ldr	r2, [r7, #8]
 80174ac:	4413      	add	r3, r2
 80174ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80174b0:	2208      	movs	r2, #8
 80174b2:	68fb      	ldr	r3, [r7, #12]
 80174b4:	1a9b      	subs	r3, r3, r2
 80174b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80174b8:	68fb      	ldr	r3, [r7, #12]
 80174ba:	f023 0307 	bic.w	r3, r3, #7
 80174be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80174c0:	68fb      	ldr	r3, [r7, #12]
 80174c2:	4a15      	ldr	r2, [pc, #84]	; (8017518 <prvHeapInit+0xb4>)
 80174c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80174c6:	4b14      	ldr	r3, [pc, #80]	; (8017518 <prvHeapInit+0xb4>)
 80174c8:	681b      	ldr	r3, [r3, #0]
 80174ca:	2200      	movs	r2, #0
 80174cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80174ce:	4b12      	ldr	r3, [pc, #72]	; (8017518 <prvHeapInit+0xb4>)
 80174d0:	681b      	ldr	r3, [r3, #0]
 80174d2:	2200      	movs	r2, #0
 80174d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80174da:	683b      	ldr	r3, [r7, #0]
 80174dc:	68fa      	ldr	r2, [r7, #12]
 80174de:	1ad2      	subs	r2, r2, r3
 80174e0:	683b      	ldr	r3, [r7, #0]
 80174e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80174e4:	4b0c      	ldr	r3, [pc, #48]	; (8017518 <prvHeapInit+0xb4>)
 80174e6:	681a      	ldr	r2, [r3, #0]
 80174e8:	683b      	ldr	r3, [r7, #0]
 80174ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80174ec:	683b      	ldr	r3, [r7, #0]
 80174ee:	685b      	ldr	r3, [r3, #4]
 80174f0:	4a0a      	ldr	r2, [pc, #40]	; (801751c <prvHeapInit+0xb8>)
 80174f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80174f4:	683b      	ldr	r3, [r7, #0]
 80174f6:	685b      	ldr	r3, [r3, #4]
 80174f8:	4a09      	ldr	r2, [pc, #36]	; (8017520 <prvHeapInit+0xbc>)
 80174fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80174fc:	4b09      	ldr	r3, [pc, #36]	; (8017524 <prvHeapInit+0xc0>)
 80174fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8017502:	601a      	str	r2, [r3, #0]
}
 8017504:	bf00      	nop
 8017506:	3714      	adds	r7, #20
 8017508:	46bd      	mov	sp, r7
 801750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801750e:	4770      	bx	lr
 8017510:	20000cd4 	.word	0x20000cd4
 8017514:	20003cd4 	.word	0x20003cd4
 8017518:	20003cdc 	.word	0x20003cdc
 801751c:	20003ce4 	.word	0x20003ce4
 8017520:	20003ce0 	.word	0x20003ce0
 8017524:	20003cf0 	.word	0x20003cf0

08017528 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8017528:	b480      	push	{r7}
 801752a:	b085      	sub	sp, #20
 801752c:	af00      	add	r7, sp, #0
 801752e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8017530:	4b28      	ldr	r3, [pc, #160]	; (80175d4 <prvInsertBlockIntoFreeList+0xac>)
 8017532:	60fb      	str	r3, [r7, #12]
 8017534:	e002      	b.n	801753c <prvInsertBlockIntoFreeList+0x14>
 8017536:	68fb      	ldr	r3, [r7, #12]
 8017538:	681b      	ldr	r3, [r3, #0]
 801753a:	60fb      	str	r3, [r7, #12]
 801753c:	68fb      	ldr	r3, [r7, #12]
 801753e:	681b      	ldr	r3, [r3, #0]
 8017540:	687a      	ldr	r2, [r7, #4]
 8017542:	429a      	cmp	r2, r3
 8017544:	d8f7      	bhi.n	8017536 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8017546:	68fb      	ldr	r3, [r7, #12]
 8017548:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801754a:	68fb      	ldr	r3, [r7, #12]
 801754c:	685b      	ldr	r3, [r3, #4]
 801754e:	68ba      	ldr	r2, [r7, #8]
 8017550:	4413      	add	r3, r2
 8017552:	687a      	ldr	r2, [r7, #4]
 8017554:	429a      	cmp	r2, r3
 8017556:	d108      	bne.n	801756a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8017558:	68fb      	ldr	r3, [r7, #12]
 801755a:	685a      	ldr	r2, [r3, #4]
 801755c:	687b      	ldr	r3, [r7, #4]
 801755e:	685b      	ldr	r3, [r3, #4]
 8017560:	441a      	add	r2, r3
 8017562:	68fb      	ldr	r3, [r7, #12]
 8017564:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8017566:	68fb      	ldr	r3, [r7, #12]
 8017568:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801756a:	687b      	ldr	r3, [r7, #4]
 801756c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	685b      	ldr	r3, [r3, #4]
 8017572:	68ba      	ldr	r2, [r7, #8]
 8017574:	441a      	add	r2, r3
 8017576:	68fb      	ldr	r3, [r7, #12]
 8017578:	681b      	ldr	r3, [r3, #0]
 801757a:	429a      	cmp	r2, r3
 801757c:	d118      	bne.n	80175b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801757e:	68fb      	ldr	r3, [r7, #12]
 8017580:	681a      	ldr	r2, [r3, #0]
 8017582:	4b15      	ldr	r3, [pc, #84]	; (80175d8 <prvInsertBlockIntoFreeList+0xb0>)
 8017584:	681b      	ldr	r3, [r3, #0]
 8017586:	429a      	cmp	r2, r3
 8017588:	d00d      	beq.n	80175a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	685a      	ldr	r2, [r3, #4]
 801758e:	68fb      	ldr	r3, [r7, #12]
 8017590:	681b      	ldr	r3, [r3, #0]
 8017592:	685b      	ldr	r3, [r3, #4]
 8017594:	441a      	add	r2, r3
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801759a:	68fb      	ldr	r3, [r7, #12]
 801759c:	681b      	ldr	r3, [r3, #0]
 801759e:	681a      	ldr	r2, [r3, #0]
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	601a      	str	r2, [r3, #0]
 80175a4:	e008      	b.n	80175b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80175a6:	4b0c      	ldr	r3, [pc, #48]	; (80175d8 <prvInsertBlockIntoFreeList+0xb0>)
 80175a8:	681a      	ldr	r2, [r3, #0]
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	601a      	str	r2, [r3, #0]
 80175ae:	e003      	b.n	80175b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80175b0:	68fb      	ldr	r3, [r7, #12]
 80175b2:	681a      	ldr	r2, [r3, #0]
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80175b8:	68fa      	ldr	r2, [r7, #12]
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	429a      	cmp	r2, r3
 80175be:	d002      	beq.n	80175c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80175c0:	68fb      	ldr	r3, [r7, #12]
 80175c2:	687a      	ldr	r2, [r7, #4]
 80175c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80175c6:	bf00      	nop
 80175c8:	3714      	adds	r7, #20
 80175ca:	46bd      	mov	sp, r7
 80175cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175d0:	4770      	bx	lr
 80175d2:	bf00      	nop
 80175d4:	20003cd4 	.word	0x20003cd4
 80175d8:	20003cdc 	.word	0x20003cdc

080175dc <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80175dc:	b580      	push	{r7, lr}
 80175de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80175e0:	2200      	movs	r2, #0
 80175e2:	4912      	ldr	r1, [pc, #72]	; (801762c <MX_USB_Device_Init+0x50>)
 80175e4:	4812      	ldr	r0, [pc, #72]	; (8017630 <MX_USB_Device_Init+0x54>)
 80175e6:	f7fc fdbf 	bl	8014168 <USBD_Init>
 80175ea:	4603      	mov	r3, r0
 80175ec:	2b00      	cmp	r3, #0
 80175ee:	d001      	beq.n	80175f4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80175f0:	f7f0 f86a 	bl	80076c8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80175f4:	490f      	ldr	r1, [pc, #60]	; (8017634 <MX_USB_Device_Init+0x58>)
 80175f6:	480e      	ldr	r0, [pc, #56]	; (8017630 <MX_USB_Device_Init+0x54>)
 80175f8:	f7fc fde6 	bl	80141c8 <USBD_RegisterClass>
 80175fc:	4603      	mov	r3, r0
 80175fe:	2b00      	cmp	r3, #0
 8017600:	d001      	beq.n	8017606 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8017602:	f7f0 f861 	bl	80076c8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8017606:	490c      	ldr	r1, [pc, #48]	; (8017638 <MX_USB_Device_Init+0x5c>)
 8017608:	4809      	ldr	r0, [pc, #36]	; (8017630 <MX_USB_Device_Init+0x54>)
 801760a:	f7fc fd37 	bl	801407c <USBD_CDC_RegisterInterface>
 801760e:	4603      	mov	r3, r0
 8017610:	2b00      	cmp	r3, #0
 8017612:	d001      	beq.n	8017618 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8017614:	f7f0 f858 	bl	80076c8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8017618:	4805      	ldr	r0, [pc, #20]	; (8017630 <MX_USB_Device_Init+0x54>)
 801761a:	f7fc fdfc 	bl	8014216 <USBD_Start>
 801761e:	4603      	mov	r3, r0
 8017620:	2b00      	cmp	r3, #0
 8017622:	d001      	beq.n	8017628 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8017624:	f7f0 f850 	bl	80076c8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8017628:	bf00      	nop
 801762a:	bd80      	pop	{r7, pc}
 801762c:	20000138 	.word	0x20000138
 8017630:	20003cf4 	.word	0x20003cf4
 8017634:	2000001c 	.word	0x2000001c
 8017638:	20000124 	.word	0x20000124

0801763c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801763c:	b580      	push	{r7, lr}
 801763e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8017640:	2200      	movs	r2, #0
 8017642:	4905      	ldr	r1, [pc, #20]	; (8017658 <CDC_Init_FS+0x1c>)
 8017644:	4805      	ldr	r0, [pc, #20]	; (801765c <CDC_Init_FS+0x20>)
 8017646:	f7fc fd2e 	bl	80140a6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801764a:	4905      	ldr	r1, [pc, #20]	; (8017660 <CDC_Init_FS+0x24>)
 801764c:	4803      	ldr	r0, [pc, #12]	; (801765c <CDC_Init_FS+0x20>)
 801764e:	f7fc fd48 	bl	80140e2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8017652:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8017654:	4618      	mov	r0, r3
 8017656:	bd80      	pop	{r7, pc}
 8017658:	200047c4 	.word	0x200047c4
 801765c:	20003cf4 	.word	0x20003cf4
 8017660:	20003fc4 	.word	0x20003fc4

08017664 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8017664:	b480      	push	{r7}
 8017666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8017668:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801766a:	4618      	mov	r0, r3
 801766c:	46bd      	mov	sp, r7
 801766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017672:	4770      	bx	lr

08017674 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8017674:	b480      	push	{r7}
 8017676:	b083      	sub	sp, #12
 8017678:	af00      	add	r7, sp, #0
 801767a:	4603      	mov	r3, r0
 801767c:	6039      	str	r1, [r7, #0]
 801767e:	71fb      	strb	r3, [r7, #7]
 8017680:	4613      	mov	r3, r2
 8017682:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8017684:	79fb      	ldrb	r3, [r7, #7]
 8017686:	2b23      	cmp	r3, #35	; 0x23
 8017688:	d84a      	bhi.n	8017720 <CDC_Control_FS+0xac>
 801768a:	a201      	add	r2, pc, #4	; (adr r2, 8017690 <CDC_Control_FS+0x1c>)
 801768c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017690:	08017721 	.word	0x08017721
 8017694:	08017721 	.word	0x08017721
 8017698:	08017721 	.word	0x08017721
 801769c:	08017721 	.word	0x08017721
 80176a0:	08017721 	.word	0x08017721
 80176a4:	08017721 	.word	0x08017721
 80176a8:	08017721 	.word	0x08017721
 80176ac:	08017721 	.word	0x08017721
 80176b0:	08017721 	.word	0x08017721
 80176b4:	08017721 	.word	0x08017721
 80176b8:	08017721 	.word	0x08017721
 80176bc:	08017721 	.word	0x08017721
 80176c0:	08017721 	.word	0x08017721
 80176c4:	08017721 	.word	0x08017721
 80176c8:	08017721 	.word	0x08017721
 80176cc:	08017721 	.word	0x08017721
 80176d0:	08017721 	.word	0x08017721
 80176d4:	08017721 	.word	0x08017721
 80176d8:	08017721 	.word	0x08017721
 80176dc:	08017721 	.word	0x08017721
 80176e0:	08017721 	.word	0x08017721
 80176e4:	08017721 	.word	0x08017721
 80176e8:	08017721 	.word	0x08017721
 80176ec:	08017721 	.word	0x08017721
 80176f0:	08017721 	.word	0x08017721
 80176f4:	08017721 	.word	0x08017721
 80176f8:	08017721 	.word	0x08017721
 80176fc:	08017721 	.word	0x08017721
 8017700:	08017721 	.word	0x08017721
 8017704:	08017721 	.word	0x08017721
 8017708:	08017721 	.word	0x08017721
 801770c:	08017721 	.word	0x08017721
 8017710:	08017721 	.word	0x08017721
 8017714:	08017721 	.word	0x08017721
 8017718:	08017721 	.word	0x08017721
 801771c:	08017721 	.word	0x08017721
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8017720:	bf00      	nop
  }

  return (USBD_OK);
 8017722:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8017724:	4618      	mov	r0, r3
 8017726:	370c      	adds	r7, #12
 8017728:	46bd      	mov	sp, r7
 801772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801772e:	4770      	bx	lr

08017730 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8017730:	b580      	push	{r7, lr}
 8017732:	b082      	sub	sp, #8
 8017734:	af00      	add	r7, sp, #0
 8017736:	6078      	str	r0, [r7, #4]
 8017738:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801773a:	6879      	ldr	r1, [r7, #4]
 801773c:	4805      	ldr	r0, [pc, #20]	; (8017754 <CDC_Receive_FS+0x24>)
 801773e:	f7fc fcd0 	bl	80140e2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8017742:	4804      	ldr	r0, [pc, #16]	; (8017754 <CDC_Receive_FS+0x24>)
 8017744:	f7fc fce6 	bl	8014114 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8017748:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801774a:	4618      	mov	r0, r3
 801774c:	3708      	adds	r7, #8
 801774e:	46bd      	mov	sp, r7
 8017750:	bd80      	pop	{r7, pc}
 8017752:	bf00      	nop
 8017754:	20003cf4 	.word	0x20003cf4

08017758 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8017758:	b480      	push	{r7}
 801775a:	b087      	sub	sp, #28
 801775c:	af00      	add	r7, sp, #0
 801775e:	60f8      	str	r0, [r7, #12]
 8017760:	60b9      	str	r1, [r7, #8]
 8017762:	4613      	mov	r3, r2
 8017764:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8017766:	2300      	movs	r3, #0
 8017768:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801776a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801776e:	4618      	mov	r0, r3
 8017770:	371c      	adds	r7, #28
 8017772:	46bd      	mov	sp, r7
 8017774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017778:	4770      	bx	lr
	...

0801777c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801777c:	b480      	push	{r7}
 801777e:	b083      	sub	sp, #12
 8017780:	af00      	add	r7, sp, #0
 8017782:	4603      	mov	r3, r0
 8017784:	6039      	str	r1, [r7, #0]
 8017786:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8017788:	683b      	ldr	r3, [r7, #0]
 801778a:	2212      	movs	r2, #18
 801778c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 801778e:	4b03      	ldr	r3, [pc, #12]	; (801779c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8017790:	4618      	mov	r0, r3
 8017792:	370c      	adds	r7, #12
 8017794:	46bd      	mov	sp, r7
 8017796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801779a:	4770      	bx	lr
 801779c:	20000158 	.word	0x20000158

080177a0 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80177a0:	b480      	push	{r7}
 80177a2:	b083      	sub	sp, #12
 80177a4:	af00      	add	r7, sp, #0
 80177a6:	4603      	mov	r3, r0
 80177a8:	6039      	str	r1, [r7, #0]
 80177aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80177ac:	683b      	ldr	r3, [r7, #0]
 80177ae:	2204      	movs	r2, #4
 80177b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80177b2:	4b03      	ldr	r3, [pc, #12]	; (80177c0 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80177b4:	4618      	mov	r0, r3
 80177b6:	370c      	adds	r7, #12
 80177b8:	46bd      	mov	sp, r7
 80177ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177be:	4770      	bx	lr
 80177c0:	2000016c 	.word	0x2000016c

080177c4 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80177c4:	b580      	push	{r7, lr}
 80177c6:	b082      	sub	sp, #8
 80177c8:	af00      	add	r7, sp, #0
 80177ca:	4603      	mov	r3, r0
 80177cc:	6039      	str	r1, [r7, #0]
 80177ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80177d0:	79fb      	ldrb	r3, [r7, #7]
 80177d2:	2b00      	cmp	r3, #0
 80177d4:	d105      	bne.n	80177e2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80177d6:	683a      	ldr	r2, [r7, #0]
 80177d8:	4907      	ldr	r1, [pc, #28]	; (80177f8 <USBD_CDC_ProductStrDescriptor+0x34>)
 80177da:	4808      	ldr	r0, [pc, #32]	; (80177fc <USBD_CDC_ProductStrDescriptor+0x38>)
 80177dc:	f7fd fd03 	bl	80151e6 <USBD_GetString>
 80177e0:	e004      	b.n	80177ec <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80177e2:	683a      	ldr	r2, [r7, #0]
 80177e4:	4904      	ldr	r1, [pc, #16]	; (80177f8 <USBD_CDC_ProductStrDescriptor+0x34>)
 80177e6:	4805      	ldr	r0, [pc, #20]	; (80177fc <USBD_CDC_ProductStrDescriptor+0x38>)
 80177e8:	f7fd fcfd 	bl	80151e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80177ec:	4b02      	ldr	r3, [pc, #8]	; (80177f8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80177ee:	4618      	mov	r0, r3
 80177f0:	3708      	adds	r7, #8
 80177f2:	46bd      	mov	sp, r7
 80177f4:	bd80      	pop	{r7, pc}
 80177f6:	bf00      	nop
 80177f8:	20004fc4 	.word	0x20004fc4
 80177fc:	08019400 	.word	0x08019400

08017800 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017800:	b580      	push	{r7, lr}
 8017802:	b082      	sub	sp, #8
 8017804:	af00      	add	r7, sp, #0
 8017806:	4603      	mov	r3, r0
 8017808:	6039      	str	r1, [r7, #0]
 801780a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801780c:	683a      	ldr	r2, [r7, #0]
 801780e:	4904      	ldr	r1, [pc, #16]	; (8017820 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8017810:	4804      	ldr	r0, [pc, #16]	; (8017824 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8017812:	f7fd fce8 	bl	80151e6 <USBD_GetString>
  return USBD_StrDesc;
 8017816:	4b02      	ldr	r3, [pc, #8]	; (8017820 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8017818:	4618      	mov	r0, r3
 801781a:	3708      	adds	r7, #8
 801781c:	46bd      	mov	sp, r7
 801781e:	bd80      	pop	{r7, pc}
 8017820:	20004fc4 	.word	0x20004fc4
 8017824:	08019418 	.word	0x08019418

08017828 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017828:	b580      	push	{r7, lr}
 801782a:	b082      	sub	sp, #8
 801782c:	af00      	add	r7, sp, #0
 801782e:	4603      	mov	r3, r0
 8017830:	6039      	str	r1, [r7, #0]
 8017832:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017834:	683b      	ldr	r3, [r7, #0]
 8017836:	221a      	movs	r2, #26
 8017838:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801783a:	f000 f843 	bl	80178c4 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801783e:	4b02      	ldr	r3, [pc, #8]	; (8017848 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8017840:	4618      	mov	r0, r3
 8017842:	3708      	adds	r7, #8
 8017844:	46bd      	mov	sp, r7
 8017846:	bd80      	pop	{r7, pc}
 8017848:	20000170 	.word	0x20000170

0801784c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801784c:	b580      	push	{r7, lr}
 801784e:	b082      	sub	sp, #8
 8017850:	af00      	add	r7, sp, #0
 8017852:	4603      	mov	r3, r0
 8017854:	6039      	str	r1, [r7, #0]
 8017856:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8017858:	79fb      	ldrb	r3, [r7, #7]
 801785a:	2b00      	cmp	r3, #0
 801785c:	d105      	bne.n	801786a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801785e:	683a      	ldr	r2, [r7, #0]
 8017860:	4907      	ldr	r1, [pc, #28]	; (8017880 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8017862:	4808      	ldr	r0, [pc, #32]	; (8017884 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8017864:	f7fd fcbf 	bl	80151e6 <USBD_GetString>
 8017868:	e004      	b.n	8017874 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801786a:	683a      	ldr	r2, [r7, #0]
 801786c:	4904      	ldr	r1, [pc, #16]	; (8017880 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801786e:	4805      	ldr	r0, [pc, #20]	; (8017884 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8017870:	f7fd fcb9 	bl	80151e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017874:	4b02      	ldr	r3, [pc, #8]	; (8017880 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8017876:	4618      	mov	r0, r3
 8017878:	3708      	adds	r7, #8
 801787a:	46bd      	mov	sp, r7
 801787c:	bd80      	pop	{r7, pc}
 801787e:	bf00      	nop
 8017880:	20004fc4 	.word	0x20004fc4
 8017884:	0801942c 	.word	0x0801942c

08017888 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017888:	b580      	push	{r7, lr}
 801788a:	b082      	sub	sp, #8
 801788c:	af00      	add	r7, sp, #0
 801788e:	4603      	mov	r3, r0
 8017890:	6039      	str	r1, [r7, #0]
 8017892:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017894:	79fb      	ldrb	r3, [r7, #7]
 8017896:	2b00      	cmp	r3, #0
 8017898:	d105      	bne.n	80178a6 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801789a:	683a      	ldr	r2, [r7, #0]
 801789c:	4907      	ldr	r1, [pc, #28]	; (80178bc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801789e:	4808      	ldr	r0, [pc, #32]	; (80178c0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80178a0:	f7fd fca1 	bl	80151e6 <USBD_GetString>
 80178a4:	e004      	b.n	80178b0 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80178a6:	683a      	ldr	r2, [r7, #0]
 80178a8:	4904      	ldr	r1, [pc, #16]	; (80178bc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80178aa:	4805      	ldr	r0, [pc, #20]	; (80178c0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80178ac:	f7fd fc9b 	bl	80151e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80178b0:	4b02      	ldr	r3, [pc, #8]	; (80178bc <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80178b2:	4618      	mov	r0, r3
 80178b4:	3708      	adds	r7, #8
 80178b6:	46bd      	mov	sp, r7
 80178b8:	bd80      	pop	{r7, pc}
 80178ba:	bf00      	nop
 80178bc:	20004fc4 	.word	0x20004fc4
 80178c0:	08019438 	.word	0x08019438

080178c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80178c4:	b580      	push	{r7, lr}
 80178c6:	b084      	sub	sp, #16
 80178c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80178ca:	4b0f      	ldr	r3, [pc, #60]	; (8017908 <Get_SerialNum+0x44>)
 80178cc:	681b      	ldr	r3, [r3, #0]
 80178ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80178d0:	4b0e      	ldr	r3, [pc, #56]	; (801790c <Get_SerialNum+0x48>)
 80178d2:	681b      	ldr	r3, [r3, #0]
 80178d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80178d6:	4b0e      	ldr	r3, [pc, #56]	; (8017910 <Get_SerialNum+0x4c>)
 80178d8:	681b      	ldr	r3, [r3, #0]
 80178da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80178dc:	68fa      	ldr	r2, [r7, #12]
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	4413      	add	r3, r2
 80178e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80178e4:	68fb      	ldr	r3, [r7, #12]
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	d009      	beq.n	80178fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80178ea:	2208      	movs	r2, #8
 80178ec:	4909      	ldr	r1, [pc, #36]	; (8017914 <Get_SerialNum+0x50>)
 80178ee:	68f8      	ldr	r0, [r7, #12]
 80178f0:	f000 f814 	bl	801791c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80178f4:	2204      	movs	r2, #4
 80178f6:	4908      	ldr	r1, [pc, #32]	; (8017918 <Get_SerialNum+0x54>)
 80178f8:	68b8      	ldr	r0, [r7, #8]
 80178fa:	f000 f80f 	bl	801791c <IntToUnicode>
  }
}
 80178fe:	bf00      	nop
 8017900:	3710      	adds	r7, #16
 8017902:	46bd      	mov	sp, r7
 8017904:	bd80      	pop	{r7, pc}
 8017906:	bf00      	nop
 8017908:	1fff7590 	.word	0x1fff7590
 801790c:	1fff7594 	.word	0x1fff7594
 8017910:	1fff7598 	.word	0x1fff7598
 8017914:	20000172 	.word	0x20000172
 8017918:	20000182 	.word	0x20000182

0801791c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801791c:	b480      	push	{r7}
 801791e:	b087      	sub	sp, #28
 8017920:	af00      	add	r7, sp, #0
 8017922:	60f8      	str	r0, [r7, #12]
 8017924:	60b9      	str	r1, [r7, #8]
 8017926:	4613      	mov	r3, r2
 8017928:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801792a:	2300      	movs	r3, #0
 801792c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801792e:	2300      	movs	r3, #0
 8017930:	75fb      	strb	r3, [r7, #23]
 8017932:	e027      	b.n	8017984 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017934:	68fb      	ldr	r3, [r7, #12]
 8017936:	0f1b      	lsrs	r3, r3, #28
 8017938:	2b09      	cmp	r3, #9
 801793a:	d80b      	bhi.n	8017954 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801793c:	68fb      	ldr	r3, [r7, #12]
 801793e:	0f1b      	lsrs	r3, r3, #28
 8017940:	b2da      	uxtb	r2, r3
 8017942:	7dfb      	ldrb	r3, [r7, #23]
 8017944:	005b      	lsls	r3, r3, #1
 8017946:	4619      	mov	r1, r3
 8017948:	68bb      	ldr	r3, [r7, #8]
 801794a:	440b      	add	r3, r1
 801794c:	3230      	adds	r2, #48	; 0x30
 801794e:	b2d2      	uxtb	r2, r2
 8017950:	701a      	strb	r2, [r3, #0]
 8017952:	e00a      	b.n	801796a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017954:	68fb      	ldr	r3, [r7, #12]
 8017956:	0f1b      	lsrs	r3, r3, #28
 8017958:	b2da      	uxtb	r2, r3
 801795a:	7dfb      	ldrb	r3, [r7, #23]
 801795c:	005b      	lsls	r3, r3, #1
 801795e:	4619      	mov	r1, r3
 8017960:	68bb      	ldr	r3, [r7, #8]
 8017962:	440b      	add	r3, r1
 8017964:	3237      	adds	r2, #55	; 0x37
 8017966:	b2d2      	uxtb	r2, r2
 8017968:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801796a:	68fb      	ldr	r3, [r7, #12]
 801796c:	011b      	lsls	r3, r3, #4
 801796e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017970:	7dfb      	ldrb	r3, [r7, #23]
 8017972:	005b      	lsls	r3, r3, #1
 8017974:	3301      	adds	r3, #1
 8017976:	68ba      	ldr	r2, [r7, #8]
 8017978:	4413      	add	r3, r2
 801797a:	2200      	movs	r2, #0
 801797c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801797e:	7dfb      	ldrb	r3, [r7, #23]
 8017980:	3301      	adds	r3, #1
 8017982:	75fb      	strb	r3, [r7, #23]
 8017984:	7dfa      	ldrb	r2, [r7, #23]
 8017986:	79fb      	ldrb	r3, [r7, #7]
 8017988:	429a      	cmp	r2, r3
 801798a:	d3d3      	bcc.n	8017934 <IntToUnicode+0x18>
  }
}
 801798c:	bf00      	nop
 801798e:	bf00      	nop
 8017990:	371c      	adds	r7, #28
 8017992:	46bd      	mov	sp, r7
 8017994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017998:	4770      	bx	lr
	...

0801799c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801799c:	b580      	push	{r7, lr}
 801799e:	b098      	sub	sp, #96	; 0x60
 80179a0:	af00      	add	r7, sp, #0
 80179a2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80179a4:	f107 030c 	add.w	r3, r7, #12
 80179a8:	2254      	movs	r2, #84	; 0x54
 80179aa:	2100      	movs	r1, #0
 80179ac:	4618      	mov	r0, r3
 80179ae:	f000 fb63 	bl	8018078 <memset>
  if(pcdHandle->Instance==USB)
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	681b      	ldr	r3, [r3, #0]
 80179b6:	4a15      	ldr	r2, [pc, #84]	; (8017a0c <HAL_PCD_MspInit+0x70>)
 80179b8:	4293      	cmp	r3, r2
 80179ba:	d122      	bne.n	8017a02 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80179bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80179c0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80179c2:	2300      	movs	r3, #0
 80179c4:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80179c6:	f107 030c 	add.w	r3, r7, #12
 80179ca:	4618      	mov	r0, r3
 80179cc:	f7f5 ffe4 	bl	800d998 <HAL_RCCEx_PeriphCLKConfig>
 80179d0:	4603      	mov	r3, r0
 80179d2:	2b00      	cmp	r3, #0
 80179d4:	d001      	beq.n	80179da <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 80179d6:	f7ef fe77 	bl	80076c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80179da:	4b0d      	ldr	r3, [pc, #52]	; (8017a10 <HAL_PCD_MspInit+0x74>)
 80179dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80179de:	4a0c      	ldr	r2, [pc, #48]	; (8017a10 <HAL_PCD_MspInit+0x74>)
 80179e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80179e4:	6593      	str	r3, [r2, #88]	; 0x58
 80179e6:	4b0a      	ldr	r3, [pc, #40]	; (8017a10 <HAL_PCD_MspInit+0x74>)
 80179e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80179ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80179ee:	60bb      	str	r3, [r7, #8]
 80179f0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 80179f2:	2200      	movs	r2, #0
 80179f4:	2105      	movs	r1, #5
 80179f6:	2014      	movs	r0, #20
 80179f8:	f7f2 f966 	bl	8009cc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80179fc:	2014      	movs	r0, #20
 80179fe:	f7f2 f97d 	bl	8009cfc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8017a02:	bf00      	nop
 8017a04:	3760      	adds	r7, #96	; 0x60
 8017a06:	46bd      	mov	sp, r7
 8017a08:	bd80      	pop	{r7, pc}
 8017a0a:	bf00      	nop
 8017a0c:	40005c00 	.word	0x40005c00
 8017a10:	40021000 	.word	0x40021000

08017a14 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017a14:	b580      	push	{r7, lr}
 8017a16:	b082      	sub	sp, #8
 8017a18:	af00      	add	r7, sp, #0
 8017a1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8017a22:	687b      	ldr	r3, [r7, #4]
 8017a24:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8017a28:	4619      	mov	r1, r3
 8017a2a:	4610      	mov	r0, r2
 8017a2c:	f7fc fc3e 	bl	80142ac <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8017a30:	bf00      	nop
 8017a32:	3708      	adds	r7, #8
 8017a34:	46bd      	mov	sp, r7
 8017a36:	bd80      	pop	{r7, pc}

08017a38 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017a38:	b580      	push	{r7, lr}
 8017a3a:	b082      	sub	sp, #8
 8017a3c:	af00      	add	r7, sp, #0
 8017a3e:	6078      	str	r0, [r7, #4]
 8017a40:	460b      	mov	r3, r1
 8017a42:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8017a4a:	78fa      	ldrb	r2, [r7, #3]
 8017a4c:	6879      	ldr	r1, [r7, #4]
 8017a4e:	4613      	mov	r3, r2
 8017a50:	009b      	lsls	r3, r3, #2
 8017a52:	4413      	add	r3, r2
 8017a54:	00db      	lsls	r3, r3, #3
 8017a56:	440b      	add	r3, r1
 8017a58:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8017a5c:	681a      	ldr	r2, [r3, #0]
 8017a5e:	78fb      	ldrb	r3, [r7, #3]
 8017a60:	4619      	mov	r1, r3
 8017a62:	f7fc fc78 	bl	8014356 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8017a66:	bf00      	nop
 8017a68:	3708      	adds	r7, #8
 8017a6a:	46bd      	mov	sp, r7
 8017a6c:	bd80      	pop	{r7, pc}

08017a6e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017a6e:	b580      	push	{r7, lr}
 8017a70:	b082      	sub	sp, #8
 8017a72:	af00      	add	r7, sp, #0
 8017a74:	6078      	str	r0, [r7, #4]
 8017a76:	460b      	mov	r3, r1
 8017a78:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8017a80:	78fa      	ldrb	r2, [r7, #3]
 8017a82:	6879      	ldr	r1, [r7, #4]
 8017a84:	4613      	mov	r3, r2
 8017a86:	009b      	lsls	r3, r3, #2
 8017a88:	4413      	add	r3, r2
 8017a8a:	00db      	lsls	r3, r3, #3
 8017a8c:	440b      	add	r3, r1
 8017a8e:	333c      	adds	r3, #60	; 0x3c
 8017a90:	681a      	ldr	r2, [r3, #0]
 8017a92:	78fb      	ldrb	r3, [r7, #3]
 8017a94:	4619      	mov	r1, r3
 8017a96:	f7fc fcc1 	bl	801441c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8017a9a:	bf00      	nop
 8017a9c:	3708      	adds	r7, #8
 8017a9e:	46bd      	mov	sp, r7
 8017aa0:	bd80      	pop	{r7, pc}

08017aa2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017aa2:	b580      	push	{r7, lr}
 8017aa4:	b082      	sub	sp, #8
 8017aa6:	af00      	add	r7, sp, #0
 8017aa8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8017ab0:	4618      	mov	r0, r3
 8017ab2:	f7fc fdd5 	bl	8014660 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8017ab6:	bf00      	nop
 8017ab8:	3708      	adds	r7, #8
 8017aba:	46bd      	mov	sp, r7
 8017abc:	bd80      	pop	{r7, pc}

08017abe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017abe:	b580      	push	{r7, lr}
 8017ac0:	b084      	sub	sp, #16
 8017ac2:	af00      	add	r7, sp, #0
 8017ac4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8017ac6:	2301      	movs	r3, #1
 8017ac8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	689b      	ldr	r3, [r3, #8]
 8017ace:	2b02      	cmp	r3, #2
 8017ad0:	d001      	beq.n	8017ad6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8017ad2:	f7ef fdf9 	bl	80076c8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8017adc:	7bfa      	ldrb	r2, [r7, #15]
 8017ade:	4611      	mov	r1, r2
 8017ae0:	4618      	mov	r0, r3
 8017ae2:	f7fc fd7f 	bl	80145e4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8017aec:	4618      	mov	r0, r3
 8017aee:	f7fc fd2b 	bl	8014548 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8017af2:	bf00      	nop
 8017af4:	3710      	adds	r7, #16
 8017af6:	46bd      	mov	sp, r7
 8017af8:	bd80      	pop	{r7, pc}
	...

08017afc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017afc:	b580      	push	{r7, lr}
 8017afe:	b082      	sub	sp, #8
 8017b00:	af00      	add	r7, sp, #0
 8017b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8017b0a:	4618      	mov	r0, r3
 8017b0c:	f7fc fd7a 	bl	8014604 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017b10:	687b      	ldr	r3, [r7, #4]
 8017b12:	699b      	ldr	r3, [r3, #24]
 8017b14:	2b00      	cmp	r3, #0
 8017b16:	d005      	beq.n	8017b24 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017b18:	4b04      	ldr	r3, [pc, #16]	; (8017b2c <HAL_PCD_SuspendCallback+0x30>)
 8017b1a:	691b      	ldr	r3, [r3, #16]
 8017b1c:	4a03      	ldr	r2, [pc, #12]	; (8017b2c <HAL_PCD_SuspendCallback+0x30>)
 8017b1e:	f043 0306 	orr.w	r3, r3, #6
 8017b22:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8017b24:	bf00      	nop
 8017b26:	3708      	adds	r7, #8
 8017b28:	46bd      	mov	sp, r7
 8017b2a:	bd80      	pop	{r7, pc}
 8017b2c:	e000ed00 	.word	0xe000ed00

08017b30 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017b30:	b580      	push	{r7, lr}
 8017b32:	b082      	sub	sp, #8
 8017b34:	af00      	add	r7, sp, #0
 8017b36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	699b      	ldr	r3, [r3, #24]
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	d007      	beq.n	8017b50 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017b40:	4b08      	ldr	r3, [pc, #32]	; (8017b64 <HAL_PCD_ResumeCallback+0x34>)
 8017b42:	691b      	ldr	r3, [r3, #16]
 8017b44:	4a07      	ldr	r2, [pc, #28]	; (8017b64 <HAL_PCD_ResumeCallback+0x34>)
 8017b46:	f023 0306 	bic.w	r3, r3, #6
 8017b4a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8017b4c:	f000 f9fa 	bl	8017f44 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017b50:	687b      	ldr	r3, [r7, #4]
 8017b52:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8017b56:	4618      	mov	r0, r3
 8017b58:	f7fc fd6a 	bl	8014630 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8017b5c:	bf00      	nop
 8017b5e:	3708      	adds	r7, #8
 8017b60:	46bd      	mov	sp, r7
 8017b62:	bd80      	pop	{r7, pc}
 8017b64:	e000ed00 	.word	0xe000ed00

08017b68 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017b68:	b580      	push	{r7, lr}
 8017b6a:	b082      	sub	sp, #8
 8017b6c:	af00      	add	r7, sp, #0
 8017b6e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8017b70:	4a2b      	ldr	r2, [pc, #172]	; (8017c20 <USBD_LL_Init+0xb8>)
 8017b72:	687b      	ldr	r3, [r7, #4]
 8017b74:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	4a29      	ldr	r2, [pc, #164]	; (8017c20 <USBD_LL_Init+0xb8>)
 8017b7c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8017b80:	4b27      	ldr	r3, [pc, #156]	; (8017c20 <USBD_LL_Init+0xb8>)
 8017b82:	4a28      	ldr	r2, [pc, #160]	; (8017c24 <USBD_LL_Init+0xbc>)
 8017b84:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8017b86:	4b26      	ldr	r3, [pc, #152]	; (8017c20 <USBD_LL_Init+0xb8>)
 8017b88:	2208      	movs	r2, #8
 8017b8a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8017b8c:	4b24      	ldr	r3, [pc, #144]	; (8017c20 <USBD_LL_Init+0xb8>)
 8017b8e:	2202      	movs	r2, #2
 8017b90:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8017b92:	4b23      	ldr	r3, [pc, #140]	; (8017c20 <USBD_LL_Init+0xb8>)
 8017b94:	2202      	movs	r2, #2
 8017b96:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8017b98:	4b21      	ldr	r3, [pc, #132]	; (8017c20 <USBD_LL_Init+0xb8>)
 8017b9a:	2200      	movs	r2, #0
 8017b9c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8017b9e:	4b20      	ldr	r3, [pc, #128]	; (8017c20 <USBD_LL_Init+0xb8>)
 8017ba0:	2200      	movs	r2, #0
 8017ba2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8017ba4:	4b1e      	ldr	r3, [pc, #120]	; (8017c20 <USBD_LL_Init+0xb8>)
 8017ba6:	2200      	movs	r2, #0
 8017ba8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8017baa:	4b1d      	ldr	r3, [pc, #116]	; (8017c20 <USBD_LL_Init+0xb8>)
 8017bac:	2200      	movs	r2, #0
 8017bae:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8017bb0:	481b      	ldr	r0, [pc, #108]	; (8017c20 <USBD_LL_Init+0xb8>)
 8017bb2:	f7f3 fbb4 	bl	800b31e <HAL_PCD_Init>
 8017bb6:	4603      	mov	r3, r0
 8017bb8:	2b00      	cmp	r3, #0
 8017bba:	d001      	beq.n	8017bc0 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8017bbc:	f7ef fd84 	bl	80076c8 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8017bc0:	687b      	ldr	r3, [r7, #4]
 8017bc2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017bc6:	2318      	movs	r3, #24
 8017bc8:	2200      	movs	r2, #0
 8017bca:	2100      	movs	r1, #0
 8017bcc:	f7f5 f86d 	bl	800ccaa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017bd6:	2358      	movs	r3, #88	; 0x58
 8017bd8:	2200      	movs	r2, #0
 8017bda:	2180      	movs	r1, #128	; 0x80
 8017bdc:	f7f5 f865 	bl	800ccaa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017be6:	23c0      	movs	r3, #192	; 0xc0
 8017be8:	2200      	movs	r2, #0
 8017bea:	2181      	movs	r1, #129	; 0x81
 8017bec:	f7f5 f85d 	bl	800ccaa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017bf6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8017bfa:	2200      	movs	r2, #0
 8017bfc:	2101      	movs	r1, #1
 8017bfe:	f7f5 f854 	bl	800ccaa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8017c02:	687b      	ldr	r3, [r7, #4]
 8017c04:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017c08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8017c0c:	2200      	movs	r2, #0
 8017c0e:	2182      	movs	r1, #130	; 0x82
 8017c10:	f7f5 f84b 	bl	800ccaa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8017c14:	2300      	movs	r3, #0
}
 8017c16:	4618      	mov	r0, r3
 8017c18:	3708      	adds	r7, #8
 8017c1a:	46bd      	mov	sp, r7
 8017c1c:	bd80      	pop	{r7, pc}
 8017c1e:	bf00      	nop
 8017c20:	200051c4 	.word	0x200051c4
 8017c24:	40005c00 	.word	0x40005c00

08017c28 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8017c28:	b580      	push	{r7, lr}
 8017c2a:	b084      	sub	sp, #16
 8017c2c:	af00      	add	r7, sp, #0
 8017c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017c30:	2300      	movs	r3, #0
 8017c32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017c34:	2300      	movs	r3, #0
 8017c36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017c3e:	4618      	mov	r0, r3
 8017c40:	f7f3 fc52 	bl	800b4e8 <HAL_PCD_Start>
 8017c44:	4603      	mov	r3, r0
 8017c46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017c48:	7bfb      	ldrb	r3, [r7, #15]
 8017c4a:	4618      	mov	r0, r3
 8017c4c:	f000 f980 	bl	8017f50 <USBD_Get_USB_Status>
 8017c50:	4603      	mov	r3, r0
 8017c52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017c54:	7bbb      	ldrb	r3, [r7, #14]
}
 8017c56:	4618      	mov	r0, r3
 8017c58:	3710      	adds	r7, #16
 8017c5a:	46bd      	mov	sp, r7
 8017c5c:	bd80      	pop	{r7, pc}

08017c5e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8017c5e:	b580      	push	{r7, lr}
 8017c60:	b084      	sub	sp, #16
 8017c62:	af00      	add	r7, sp, #0
 8017c64:	6078      	str	r0, [r7, #4]
 8017c66:	4608      	mov	r0, r1
 8017c68:	4611      	mov	r1, r2
 8017c6a:	461a      	mov	r2, r3
 8017c6c:	4603      	mov	r3, r0
 8017c6e:	70fb      	strb	r3, [r7, #3]
 8017c70:	460b      	mov	r3, r1
 8017c72:	70bb      	strb	r3, [r7, #2]
 8017c74:	4613      	mov	r3, r2
 8017c76:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017c78:	2300      	movs	r3, #0
 8017c7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017c7c:	2300      	movs	r3, #0
 8017c7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017c86:	78bb      	ldrb	r3, [r7, #2]
 8017c88:	883a      	ldrh	r2, [r7, #0]
 8017c8a:	78f9      	ldrb	r1, [r7, #3]
 8017c8c:	f7f3 fd9a 	bl	800b7c4 <HAL_PCD_EP_Open>
 8017c90:	4603      	mov	r3, r0
 8017c92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017c94:	7bfb      	ldrb	r3, [r7, #15]
 8017c96:	4618      	mov	r0, r3
 8017c98:	f000 f95a 	bl	8017f50 <USBD_Get_USB_Status>
 8017c9c:	4603      	mov	r3, r0
 8017c9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017ca0:	7bbb      	ldrb	r3, [r7, #14]
}
 8017ca2:	4618      	mov	r0, r3
 8017ca4:	3710      	adds	r7, #16
 8017ca6:	46bd      	mov	sp, r7
 8017ca8:	bd80      	pop	{r7, pc}

08017caa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017caa:	b580      	push	{r7, lr}
 8017cac:	b084      	sub	sp, #16
 8017cae:	af00      	add	r7, sp, #0
 8017cb0:	6078      	str	r0, [r7, #4]
 8017cb2:	460b      	mov	r3, r1
 8017cb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017cb6:	2300      	movs	r3, #0
 8017cb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017cba:	2300      	movs	r3, #0
 8017cbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017cbe:	687b      	ldr	r3, [r7, #4]
 8017cc0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017cc4:	78fa      	ldrb	r2, [r7, #3]
 8017cc6:	4611      	mov	r1, r2
 8017cc8:	4618      	mov	r0, r3
 8017cca:	f7f3 fde1 	bl	800b890 <HAL_PCD_EP_Close>
 8017cce:	4603      	mov	r3, r0
 8017cd0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017cd2:	7bfb      	ldrb	r3, [r7, #15]
 8017cd4:	4618      	mov	r0, r3
 8017cd6:	f000 f93b 	bl	8017f50 <USBD_Get_USB_Status>
 8017cda:	4603      	mov	r3, r0
 8017cdc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017cde:	7bbb      	ldrb	r3, [r7, #14]
}
 8017ce0:	4618      	mov	r0, r3
 8017ce2:	3710      	adds	r7, #16
 8017ce4:	46bd      	mov	sp, r7
 8017ce6:	bd80      	pop	{r7, pc}

08017ce8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017ce8:	b580      	push	{r7, lr}
 8017cea:	b084      	sub	sp, #16
 8017cec:	af00      	add	r7, sp, #0
 8017cee:	6078      	str	r0, [r7, #4]
 8017cf0:	460b      	mov	r3, r1
 8017cf2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017cf4:	2300      	movs	r3, #0
 8017cf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017cf8:	2300      	movs	r3, #0
 8017cfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017cfc:	687b      	ldr	r3, [r7, #4]
 8017cfe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017d02:	78fa      	ldrb	r2, [r7, #3]
 8017d04:	4611      	mov	r1, r2
 8017d06:	4618      	mov	r0, r3
 8017d08:	f7f3 fea2 	bl	800ba50 <HAL_PCD_EP_SetStall>
 8017d0c:	4603      	mov	r3, r0
 8017d0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017d10:	7bfb      	ldrb	r3, [r7, #15]
 8017d12:	4618      	mov	r0, r3
 8017d14:	f000 f91c 	bl	8017f50 <USBD_Get_USB_Status>
 8017d18:	4603      	mov	r3, r0
 8017d1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017d1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8017d1e:	4618      	mov	r0, r3
 8017d20:	3710      	adds	r7, #16
 8017d22:	46bd      	mov	sp, r7
 8017d24:	bd80      	pop	{r7, pc}

08017d26 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017d26:	b580      	push	{r7, lr}
 8017d28:	b084      	sub	sp, #16
 8017d2a:	af00      	add	r7, sp, #0
 8017d2c:	6078      	str	r0, [r7, #4]
 8017d2e:	460b      	mov	r3, r1
 8017d30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017d32:	2300      	movs	r3, #0
 8017d34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017d36:	2300      	movs	r3, #0
 8017d38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017d40:	78fa      	ldrb	r2, [r7, #3]
 8017d42:	4611      	mov	r1, r2
 8017d44:	4618      	mov	r0, r3
 8017d46:	f7f3 fed5 	bl	800baf4 <HAL_PCD_EP_ClrStall>
 8017d4a:	4603      	mov	r3, r0
 8017d4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017d4e:	7bfb      	ldrb	r3, [r7, #15]
 8017d50:	4618      	mov	r0, r3
 8017d52:	f000 f8fd 	bl	8017f50 <USBD_Get_USB_Status>
 8017d56:	4603      	mov	r3, r0
 8017d58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017d5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8017d5c:	4618      	mov	r0, r3
 8017d5e:	3710      	adds	r7, #16
 8017d60:	46bd      	mov	sp, r7
 8017d62:	bd80      	pop	{r7, pc}

08017d64 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017d64:	b480      	push	{r7}
 8017d66:	b085      	sub	sp, #20
 8017d68:	af00      	add	r7, sp, #0
 8017d6a:	6078      	str	r0, [r7, #4]
 8017d6c:	460b      	mov	r3, r1
 8017d6e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017d76:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017d78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	da0c      	bge.n	8017d9a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017d80:	78fb      	ldrb	r3, [r7, #3]
 8017d82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017d86:	68f9      	ldr	r1, [r7, #12]
 8017d88:	1c5a      	adds	r2, r3, #1
 8017d8a:	4613      	mov	r3, r2
 8017d8c:	009b      	lsls	r3, r3, #2
 8017d8e:	4413      	add	r3, r2
 8017d90:	00db      	lsls	r3, r3, #3
 8017d92:	440b      	add	r3, r1
 8017d94:	3302      	adds	r3, #2
 8017d96:	781b      	ldrb	r3, [r3, #0]
 8017d98:	e00b      	b.n	8017db2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017d9a:	78fb      	ldrb	r3, [r7, #3]
 8017d9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017da0:	68f9      	ldr	r1, [r7, #12]
 8017da2:	4613      	mov	r3, r2
 8017da4:	009b      	lsls	r3, r3, #2
 8017da6:	4413      	add	r3, r2
 8017da8:	00db      	lsls	r3, r3, #3
 8017daa:	440b      	add	r3, r1
 8017dac:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8017db0:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017db2:	4618      	mov	r0, r3
 8017db4:	3714      	adds	r7, #20
 8017db6:	46bd      	mov	sp, r7
 8017db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dbc:	4770      	bx	lr

08017dbe <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017dbe:	b580      	push	{r7, lr}
 8017dc0:	b084      	sub	sp, #16
 8017dc2:	af00      	add	r7, sp, #0
 8017dc4:	6078      	str	r0, [r7, #4]
 8017dc6:	460b      	mov	r3, r1
 8017dc8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017dca:	2300      	movs	r3, #0
 8017dcc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017dce:	2300      	movs	r3, #0
 8017dd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017dd8:	78fa      	ldrb	r2, [r7, #3]
 8017dda:	4611      	mov	r1, r2
 8017ddc:	4618      	mov	r0, r3
 8017dde:	f7f3 fccc 	bl	800b77a <HAL_PCD_SetAddress>
 8017de2:	4603      	mov	r3, r0
 8017de4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017de6:	7bfb      	ldrb	r3, [r7, #15]
 8017de8:	4618      	mov	r0, r3
 8017dea:	f000 f8b1 	bl	8017f50 <USBD_Get_USB_Status>
 8017dee:	4603      	mov	r3, r0
 8017df0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017df2:	7bbb      	ldrb	r3, [r7, #14]
}
 8017df4:	4618      	mov	r0, r3
 8017df6:	3710      	adds	r7, #16
 8017df8:	46bd      	mov	sp, r7
 8017dfa:	bd80      	pop	{r7, pc}

08017dfc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017dfc:	b580      	push	{r7, lr}
 8017dfe:	b086      	sub	sp, #24
 8017e00:	af00      	add	r7, sp, #0
 8017e02:	60f8      	str	r0, [r7, #12]
 8017e04:	607a      	str	r2, [r7, #4]
 8017e06:	603b      	str	r3, [r7, #0]
 8017e08:	460b      	mov	r3, r1
 8017e0a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017e0c:	2300      	movs	r3, #0
 8017e0e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017e10:	2300      	movs	r3, #0
 8017e12:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017e14:	68fb      	ldr	r3, [r7, #12]
 8017e16:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017e1a:	7af9      	ldrb	r1, [r7, #11]
 8017e1c:	683b      	ldr	r3, [r7, #0]
 8017e1e:	687a      	ldr	r2, [r7, #4]
 8017e20:	f7f3 fdd3 	bl	800b9ca <HAL_PCD_EP_Transmit>
 8017e24:	4603      	mov	r3, r0
 8017e26:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017e28:	7dfb      	ldrb	r3, [r7, #23]
 8017e2a:	4618      	mov	r0, r3
 8017e2c:	f000 f890 	bl	8017f50 <USBD_Get_USB_Status>
 8017e30:	4603      	mov	r3, r0
 8017e32:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017e34:	7dbb      	ldrb	r3, [r7, #22]
}
 8017e36:	4618      	mov	r0, r3
 8017e38:	3718      	adds	r7, #24
 8017e3a:	46bd      	mov	sp, r7
 8017e3c:	bd80      	pop	{r7, pc}

08017e3e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017e3e:	b580      	push	{r7, lr}
 8017e40:	b086      	sub	sp, #24
 8017e42:	af00      	add	r7, sp, #0
 8017e44:	60f8      	str	r0, [r7, #12]
 8017e46:	607a      	str	r2, [r7, #4]
 8017e48:	603b      	str	r3, [r7, #0]
 8017e4a:	460b      	mov	r3, r1
 8017e4c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017e4e:	2300      	movs	r3, #0
 8017e50:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017e52:	2300      	movs	r3, #0
 8017e54:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017e56:	68fb      	ldr	r3, [r7, #12]
 8017e58:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017e5c:	7af9      	ldrb	r1, [r7, #11]
 8017e5e:	683b      	ldr	r3, [r7, #0]
 8017e60:	687a      	ldr	r2, [r7, #4]
 8017e62:	f7f3 fd5d 	bl	800b920 <HAL_PCD_EP_Receive>
 8017e66:	4603      	mov	r3, r0
 8017e68:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017e6a:	7dfb      	ldrb	r3, [r7, #23]
 8017e6c:	4618      	mov	r0, r3
 8017e6e:	f000 f86f 	bl	8017f50 <USBD_Get_USB_Status>
 8017e72:	4603      	mov	r3, r0
 8017e74:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017e76:	7dbb      	ldrb	r3, [r7, #22]
}
 8017e78:	4618      	mov	r0, r3
 8017e7a:	3718      	adds	r7, #24
 8017e7c:	46bd      	mov	sp, r7
 8017e7e:	bd80      	pop	{r7, pc}

08017e80 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017e80:	b580      	push	{r7, lr}
 8017e82:	b082      	sub	sp, #8
 8017e84:	af00      	add	r7, sp, #0
 8017e86:	6078      	str	r0, [r7, #4]
 8017e88:	460b      	mov	r3, r1
 8017e8a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017e8c:	687b      	ldr	r3, [r7, #4]
 8017e8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017e92:	78fa      	ldrb	r2, [r7, #3]
 8017e94:	4611      	mov	r1, r2
 8017e96:	4618      	mov	r0, r3
 8017e98:	f7f3 fd7f 	bl	800b99a <HAL_PCD_EP_GetRxCount>
 8017e9c:	4603      	mov	r3, r0
}
 8017e9e:	4618      	mov	r0, r3
 8017ea0:	3708      	adds	r7, #8
 8017ea2:	46bd      	mov	sp, r7
 8017ea4:	bd80      	pop	{r7, pc}
	...

08017ea8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017ea8:	b580      	push	{r7, lr}
 8017eaa:	b082      	sub	sp, #8
 8017eac:	af00      	add	r7, sp, #0
 8017eae:	6078      	str	r0, [r7, #4]
 8017eb0:	460b      	mov	r3, r1
 8017eb2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8017eb4:	78fb      	ldrb	r3, [r7, #3]
 8017eb6:	2b00      	cmp	r3, #0
 8017eb8:	d002      	beq.n	8017ec0 <HAL_PCDEx_LPM_Callback+0x18>
 8017eba:	2b01      	cmp	r3, #1
 8017ebc:	d013      	beq.n	8017ee6 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8017ebe:	e023      	b.n	8017f08 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	699b      	ldr	r3, [r3, #24]
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	d007      	beq.n	8017ed8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8017ec8:	f000 f83c 	bl	8017f44 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017ecc:	4b10      	ldr	r3, [pc, #64]	; (8017f10 <HAL_PCDEx_LPM_Callback+0x68>)
 8017ece:	691b      	ldr	r3, [r3, #16]
 8017ed0:	4a0f      	ldr	r2, [pc, #60]	; (8017f10 <HAL_PCDEx_LPM_Callback+0x68>)
 8017ed2:	f023 0306 	bic.w	r3, r3, #6
 8017ed6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8017ede:	4618      	mov	r0, r3
 8017ee0:	f7fc fba6 	bl	8014630 <USBD_LL_Resume>
    break;
 8017ee4:	e010      	b.n	8017f08 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8017eec:	4618      	mov	r0, r3
 8017eee:	f7fc fb89 	bl	8014604 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	699b      	ldr	r3, [r3, #24]
 8017ef6:	2b00      	cmp	r3, #0
 8017ef8:	d005      	beq.n	8017f06 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017efa:	4b05      	ldr	r3, [pc, #20]	; (8017f10 <HAL_PCDEx_LPM_Callback+0x68>)
 8017efc:	691b      	ldr	r3, [r3, #16]
 8017efe:	4a04      	ldr	r2, [pc, #16]	; (8017f10 <HAL_PCDEx_LPM_Callback+0x68>)
 8017f00:	f043 0306 	orr.w	r3, r3, #6
 8017f04:	6113      	str	r3, [r2, #16]
    break;
 8017f06:	bf00      	nop
}
 8017f08:	bf00      	nop
 8017f0a:	3708      	adds	r7, #8
 8017f0c:	46bd      	mov	sp, r7
 8017f0e:	bd80      	pop	{r7, pc}
 8017f10:	e000ed00 	.word	0xe000ed00

08017f14 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8017f14:	b480      	push	{r7}
 8017f16:	b083      	sub	sp, #12
 8017f18:	af00      	add	r7, sp, #0
 8017f1a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8017f1c:	4b03      	ldr	r3, [pc, #12]	; (8017f2c <USBD_static_malloc+0x18>)
}
 8017f1e:	4618      	mov	r0, r3
 8017f20:	370c      	adds	r7, #12
 8017f22:	46bd      	mov	sp, r7
 8017f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f28:	4770      	bx	lr
 8017f2a:	bf00      	nop
 8017f2c:	200054b8 	.word	0x200054b8

08017f30 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017f30:	b480      	push	{r7}
 8017f32:	b083      	sub	sp, #12
 8017f34:	af00      	add	r7, sp, #0
 8017f36:	6078      	str	r0, [r7, #4]

}
 8017f38:	bf00      	nop
 8017f3a:	370c      	adds	r7, #12
 8017f3c:	46bd      	mov	sp, r7
 8017f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f42:	4770      	bx	lr

08017f44 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8017f44:	b580      	push	{r7, lr}
 8017f46:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8017f48:	f7ef fb5e 	bl	8007608 <SystemClock_Config>
}
 8017f4c:	bf00      	nop
 8017f4e:	bd80      	pop	{r7, pc}

08017f50 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017f50:	b480      	push	{r7}
 8017f52:	b085      	sub	sp, #20
 8017f54:	af00      	add	r7, sp, #0
 8017f56:	4603      	mov	r3, r0
 8017f58:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017f5a:	2300      	movs	r3, #0
 8017f5c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017f5e:	79fb      	ldrb	r3, [r7, #7]
 8017f60:	2b03      	cmp	r3, #3
 8017f62:	d817      	bhi.n	8017f94 <USBD_Get_USB_Status+0x44>
 8017f64:	a201      	add	r2, pc, #4	; (adr r2, 8017f6c <USBD_Get_USB_Status+0x1c>)
 8017f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017f6a:	bf00      	nop
 8017f6c:	08017f7d 	.word	0x08017f7d
 8017f70:	08017f83 	.word	0x08017f83
 8017f74:	08017f89 	.word	0x08017f89
 8017f78:	08017f8f 	.word	0x08017f8f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017f7c:	2300      	movs	r3, #0
 8017f7e:	73fb      	strb	r3, [r7, #15]
    break;
 8017f80:	e00b      	b.n	8017f9a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017f82:	2303      	movs	r3, #3
 8017f84:	73fb      	strb	r3, [r7, #15]
    break;
 8017f86:	e008      	b.n	8017f9a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017f88:	2301      	movs	r3, #1
 8017f8a:	73fb      	strb	r3, [r7, #15]
    break;
 8017f8c:	e005      	b.n	8017f9a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017f8e:	2303      	movs	r3, #3
 8017f90:	73fb      	strb	r3, [r7, #15]
    break;
 8017f92:	e002      	b.n	8017f9a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8017f94:	2303      	movs	r3, #3
 8017f96:	73fb      	strb	r3, [r7, #15]
    break;
 8017f98:	bf00      	nop
  }
  return usb_status;
 8017f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8017f9c:	4618      	mov	r0, r3
 8017f9e:	3714      	adds	r7, #20
 8017fa0:	46bd      	mov	sp, r7
 8017fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fa6:	4770      	bx	lr

08017fa8 <arm_pid_init_f32>:
 8017fa8:	edd0 6a08 	vldr	s13, [r0, #32]
 8017fac:	edd0 7a06 	vldr	s15, [r0, #24]
 8017fb0:	ed90 7a07 	vldr	s14, [r0, #28]
 8017fb4:	edc0 6a02 	vstr	s13, [r0, #8]
 8017fb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8017fbc:	ee36 6aa6 	vadd.f32	s12, s13, s13
 8017fc0:	eef1 7a67 	vneg.f32	s15, s15
 8017fc4:	ee37 7a26 	vadd.f32	s14, s14, s13
 8017fc8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8017fcc:	ed80 7a00 	vstr	s14, [r0]
 8017fd0:	edc0 7a01 	vstr	s15, [r0, #4]
 8017fd4:	b901      	cbnz	r1, 8017fd8 <arm_pid_init_f32+0x30>
 8017fd6:	4770      	bx	lr
 8017fd8:	2300      	movs	r3, #0
 8017fda:	60c3      	str	r3, [r0, #12]
 8017fdc:	6103      	str	r3, [r0, #16]
 8017fde:	6143      	str	r3, [r0, #20]
 8017fe0:	4770      	bx	lr
 8017fe2:	bf00      	nop

08017fe4 <__errno>:
 8017fe4:	4b01      	ldr	r3, [pc, #4]	; (8017fec <__errno+0x8>)
 8017fe6:	6818      	ldr	r0, [r3, #0]
 8017fe8:	4770      	bx	lr
 8017fea:	bf00      	nop
 8017fec:	2000018c 	.word	0x2000018c

08017ff0 <__libc_init_array>:
 8017ff0:	b570      	push	{r4, r5, r6, lr}
 8017ff2:	4d0d      	ldr	r5, [pc, #52]	; (8018028 <__libc_init_array+0x38>)
 8017ff4:	4c0d      	ldr	r4, [pc, #52]	; (801802c <__libc_init_array+0x3c>)
 8017ff6:	1b64      	subs	r4, r4, r5
 8017ff8:	10a4      	asrs	r4, r4, #2
 8017ffa:	2600      	movs	r6, #0
 8017ffc:	42a6      	cmp	r6, r4
 8017ffe:	d109      	bne.n	8018014 <__libc_init_array+0x24>
 8018000:	4d0b      	ldr	r5, [pc, #44]	; (8018030 <__libc_init_array+0x40>)
 8018002:	4c0c      	ldr	r4, [pc, #48]	; (8018034 <__libc_init_array+0x44>)
 8018004:	f001 f8e2 	bl	80191cc <_init>
 8018008:	1b64      	subs	r4, r4, r5
 801800a:	10a4      	asrs	r4, r4, #2
 801800c:	2600      	movs	r6, #0
 801800e:	42a6      	cmp	r6, r4
 8018010:	d105      	bne.n	801801e <__libc_init_array+0x2e>
 8018012:	bd70      	pop	{r4, r5, r6, pc}
 8018014:	f855 3b04 	ldr.w	r3, [r5], #4
 8018018:	4798      	blx	r3
 801801a:	3601      	adds	r6, #1
 801801c:	e7ee      	b.n	8017ffc <__libc_init_array+0xc>
 801801e:	f855 3b04 	ldr.w	r3, [r5], #4
 8018022:	4798      	blx	r3
 8018024:	3601      	adds	r6, #1
 8018026:	e7f2      	b.n	801800e <__libc_init_array+0x1e>
 8018028:	08019520 	.word	0x08019520
 801802c:	08019520 	.word	0x08019520
 8018030:	08019520 	.word	0x08019520
 8018034:	08019524 	.word	0x08019524

08018038 <__retarget_lock_acquire_recursive>:
 8018038:	4770      	bx	lr

0801803a <__retarget_lock_release_recursive>:
 801803a:	4770      	bx	lr

0801803c <malloc>:
 801803c:	4b02      	ldr	r3, [pc, #8]	; (8018048 <malloc+0xc>)
 801803e:	4601      	mov	r1, r0
 8018040:	6818      	ldr	r0, [r3, #0]
 8018042:	f000 b88d 	b.w	8018160 <_malloc_r>
 8018046:	bf00      	nop
 8018048:	2000018c 	.word	0x2000018c

0801804c <free>:
 801804c:	4b02      	ldr	r3, [pc, #8]	; (8018058 <free+0xc>)
 801804e:	4601      	mov	r1, r0
 8018050:	6818      	ldr	r0, [r3, #0]
 8018052:	f000 b819 	b.w	8018088 <_free_r>
 8018056:	bf00      	nop
 8018058:	2000018c 	.word	0x2000018c

0801805c <memcpy>:
 801805c:	440a      	add	r2, r1
 801805e:	4291      	cmp	r1, r2
 8018060:	f100 33ff 	add.w	r3, r0, #4294967295
 8018064:	d100      	bne.n	8018068 <memcpy+0xc>
 8018066:	4770      	bx	lr
 8018068:	b510      	push	{r4, lr}
 801806a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801806e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018072:	4291      	cmp	r1, r2
 8018074:	d1f9      	bne.n	801806a <memcpy+0xe>
 8018076:	bd10      	pop	{r4, pc}

08018078 <memset>:
 8018078:	4402      	add	r2, r0
 801807a:	4603      	mov	r3, r0
 801807c:	4293      	cmp	r3, r2
 801807e:	d100      	bne.n	8018082 <memset+0xa>
 8018080:	4770      	bx	lr
 8018082:	f803 1b01 	strb.w	r1, [r3], #1
 8018086:	e7f9      	b.n	801807c <memset+0x4>

08018088 <_free_r>:
 8018088:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801808a:	2900      	cmp	r1, #0
 801808c:	d044      	beq.n	8018118 <_free_r+0x90>
 801808e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018092:	9001      	str	r0, [sp, #4]
 8018094:	2b00      	cmp	r3, #0
 8018096:	f1a1 0404 	sub.w	r4, r1, #4
 801809a:	bfb8      	it	lt
 801809c:	18e4      	addlt	r4, r4, r3
 801809e:	f000 f96f 	bl	8018380 <__malloc_lock>
 80180a2:	4a1e      	ldr	r2, [pc, #120]	; (801811c <_free_r+0x94>)
 80180a4:	9801      	ldr	r0, [sp, #4]
 80180a6:	6813      	ldr	r3, [r2, #0]
 80180a8:	b933      	cbnz	r3, 80180b8 <_free_r+0x30>
 80180aa:	6063      	str	r3, [r4, #4]
 80180ac:	6014      	str	r4, [r2, #0]
 80180ae:	b003      	add	sp, #12
 80180b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80180b4:	f000 b96a 	b.w	801838c <__malloc_unlock>
 80180b8:	42a3      	cmp	r3, r4
 80180ba:	d908      	bls.n	80180ce <_free_r+0x46>
 80180bc:	6825      	ldr	r5, [r4, #0]
 80180be:	1961      	adds	r1, r4, r5
 80180c0:	428b      	cmp	r3, r1
 80180c2:	bf01      	itttt	eq
 80180c4:	6819      	ldreq	r1, [r3, #0]
 80180c6:	685b      	ldreq	r3, [r3, #4]
 80180c8:	1949      	addeq	r1, r1, r5
 80180ca:	6021      	streq	r1, [r4, #0]
 80180cc:	e7ed      	b.n	80180aa <_free_r+0x22>
 80180ce:	461a      	mov	r2, r3
 80180d0:	685b      	ldr	r3, [r3, #4]
 80180d2:	b10b      	cbz	r3, 80180d8 <_free_r+0x50>
 80180d4:	42a3      	cmp	r3, r4
 80180d6:	d9fa      	bls.n	80180ce <_free_r+0x46>
 80180d8:	6811      	ldr	r1, [r2, #0]
 80180da:	1855      	adds	r5, r2, r1
 80180dc:	42a5      	cmp	r5, r4
 80180de:	d10b      	bne.n	80180f8 <_free_r+0x70>
 80180e0:	6824      	ldr	r4, [r4, #0]
 80180e2:	4421      	add	r1, r4
 80180e4:	1854      	adds	r4, r2, r1
 80180e6:	42a3      	cmp	r3, r4
 80180e8:	6011      	str	r1, [r2, #0]
 80180ea:	d1e0      	bne.n	80180ae <_free_r+0x26>
 80180ec:	681c      	ldr	r4, [r3, #0]
 80180ee:	685b      	ldr	r3, [r3, #4]
 80180f0:	6053      	str	r3, [r2, #4]
 80180f2:	4421      	add	r1, r4
 80180f4:	6011      	str	r1, [r2, #0]
 80180f6:	e7da      	b.n	80180ae <_free_r+0x26>
 80180f8:	d902      	bls.n	8018100 <_free_r+0x78>
 80180fa:	230c      	movs	r3, #12
 80180fc:	6003      	str	r3, [r0, #0]
 80180fe:	e7d6      	b.n	80180ae <_free_r+0x26>
 8018100:	6825      	ldr	r5, [r4, #0]
 8018102:	1961      	adds	r1, r4, r5
 8018104:	428b      	cmp	r3, r1
 8018106:	bf04      	itt	eq
 8018108:	6819      	ldreq	r1, [r3, #0]
 801810a:	685b      	ldreq	r3, [r3, #4]
 801810c:	6063      	str	r3, [r4, #4]
 801810e:	bf04      	itt	eq
 8018110:	1949      	addeq	r1, r1, r5
 8018112:	6021      	streq	r1, [r4, #0]
 8018114:	6054      	str	r4, [r2, #4]
 8018116:	e7ca      	b.n	80180ae <_free_r+0x26>
 8018118:	b003      	add	sp, #12
 801811a:	bd30      	pop	{r4, r5, pc}
 801811c:	200056dc 	.word	0x200056dc

08018120 <sbrk_aligned>:
 8018120:	b570      	push	{r4, r5, r6, lr}
 8018122:	4e0e      	ldr	r6, [pc, #56]	; (801815c <sbrk_aligned+0x3c>)
 8018124:	460c      	mov	r4, r1
 8018126:	6831      	ldr	r1, [r6, #0]
 8018128:	4605      	mov	r5, r0
 801812a:	b911      	cbnz	r1, 8018132 <sbrk_aligned+0x12>
 801812c:	f000 f8f6 	bl	801831c <_sbrk_r>
 8018130:	6030      	str	r0, [r6, #0]
 8018132:	4621      	mov	r1, r4
 8018134:	4628      	mov	r0, r5
 8018136:	f000 f8f1 	bl	801831c <_sbrk_r>
 801813a:	1c43      	adds	r3, r0, #1
 801813c:	d00a      	beq.n	8018154 <sbrk_aligned+0x34>
 801813e:	1cc4      	adds	r4, r0, #3
 8018140:	f024 0403 	bic.w	r4, r4, #3
 8018144:	42a0      	cmp	r0, r4
 8018146:	d007      	beq.n	8018158 <sbrk_aligned+0x38>
 8018148:	1a21      	subs	r1, r4, r0
 801814a:	4628      	mov	r0, r5
 801814c:	f000 f8e6 	bl	801831c <_sbrk_r>
 8018150:	3001      	adds	r0, #1
 8018152:	d101      	bne.n	8018158 <sbrk_aligned+0x38>
 8018154:	f04f 34ff 	mov.w	r4, #4294967295
 8018158:	4620      	mov	r0, r4
 801815a:	bd70      	pop	{r4, r5, r6, pc}
 801815c:	200056e0 	.word	0x200056e0

08018160 <_malloc_r>:
 8018160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018164:	1ccd      	adds	r5, r1, #3
 8018166:	f025 0503 	bic.w	r5, r5, #3
 801816a:	3508      	adds	r5, #8
 801816c:	2d0c      	cmp	r5, #12
 801816e:	bf38      	it	cc
 8018170:	250c      	movcc	r5, #12
 8018172:	2d00      	cmp	r5, #0
 8018174:	4607      	mov	r7, r0
 8018176:	db01      	blt.n	801817c <_malloc_r+0x1c>
 8018178:	42a9      	cmp	r1, r5
 801817a:	d905      	bls.n	8018188 <_malloc_r+0x28>
 801817c:	230c      	movs	r3, #12
 801817e:	603b      	str	r3, [r7, #0]
 8018180:	2600      	movs	r6, #0
 8018182:	4630      	mov	r0, r6
 8018184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018188:	4e2e      	ldr	r6, [pc, #184]	; (8018244 <_malloc_r+0xe4>)
 801818a:	f000 f8f9 	bl	8018380 <__malloc_lock>
 801818e:	6833      	ldr	r3, [r6, #0]
 8018190:	461c      	mov	r4, r3
 8018192:	bb34      	cbnz	r4, 80181e2 <_malloc_r+0x82>
 8018194:	4629      	mov	r1, r5
 8018196:	4638      	mov	r0, r7
 8018198:	f7ff ffc2 	bl	8018120 <sbrk_aligned>
 801819c:	1c43      	adds	r3, r0, #1
 801819e:	4604      	mov	r4, r0
 80181a0:	d14d      	bne.n	801823e <_malloc_r+0xde>
 80181a2:	6834      	ldr	r4, [r6, #0]
 80181a4:	4626      	mov	r6, r4
 80181a6:	2e00      	cmp	r6, #0
 80181a8:	d140      	bne.n	801822c <_malloc_r+0xcc>
 80181aa:	6823      	ldr	r3, [r4, #0]
 80181ac:	4631      	mov	r1, r6
 80181ae:	4638      	mov	r0, r7
 80181b0:	eb04 0803 	add.w	r8, r4, r3
 80181b4:	f000 f8b2 	bl	801831c <_sbrk_r>
 80181b8:	4580      	cmp	r8, r0
 80181ba:	d13a      	bne.n	8018232 <_malloc_r+0xd2>
 80181bc:	6821      	ldr	r1, [r4, #0]
 80181be:	3503      	adds	r5, #3
 80181c0:	1a6d      	subs	r5, r5, r1
 80181c2:	f025 0503 	bic.w	r5, r5, #3
 80181c6:	3508      	adds	r5, #8
 80181c8:	2d0c      	cmp	r5, #12
 80181ca:	bf38      	it	cc
 80181cc:	250c      	movcc	r5, #12
 80181ce:	4629      	mov	r1, r5
 80181d0:	4638      	mov	r0, r7
 80181d2:	f7ff ffa5 	bl	8018120 <sbrk_aligned>
 80181d6:	3001      	adds	r0, #1
 80181d8:	d02b      	beq.n	8018232 <_malloc_r+0xd2>
 80181da:	6823      	ldr	r3, [r4, #0]
 80181dc:	442b      	add	r3, r5
 80181de:	6023      	str	r3, [r4, #0]
 80181e0:	e00e      	b.n	8018200 <_malloc_r+0xa0>
 80181e2:	6822      	ldr	r2, [r4, #0]
 80181e4:	1b52      	subs	r2, r2, r5
 80181e6:	d41e      	bmi.n	8018226 <_malloc_r+0xc6>
 80181e8:	2a0b      	cmp	r2, #11
 80181ea:	d916      	bls.n	801821a <_malloc_r+0xba>
 80181ec:	1961      	adds	r1, r4, r5
 80181ee:	42a3      	cmp	r3, r4
 80181f0:	6025      	str	r5, [r4, #0]
 80181f2:	bf18      	it	ne
 80181f4:	6059      	strne	r1, [r3, #4]
 80181f6:	6863      	ldr	r3, [r4, #4]
 80181f8:	bf08      	it	eq
 80181fa:	6031      	streq	r1, [r6, #0]
 80181fc:	5162      	str	r2, [r4, r5]
 80181fe:	604b      	str	r3, [r1, #4]
 8018200:	4638      	mov	r0, r7
 8018202:	f104 060b 	add.w	r6, r4, #11
 8018206:	f000 f8c1 	bl	801838c <__malloc_unlock>
 801820a:	f026 0607 	bic.w	r6, r6, #7
 801820e:	1d23      	adds	r3, r4, #4
 8018210:	1af2      	subs	r2, r6, r3
 8018212:	d0b6      	beq.n	8018182 <_malloc_r+0x22>
 8018214:	1b9b      	subs	r3, r3, r6
 8018216:	50a3      	str	r3, [r4, r2]
 8018218:	e7b3      	b.n	8018182 <_malloc_r+0x22>
 801821a:	6862      	ldr	r2, [r4, #4]
 801821c:	42a3      	cmp	r3, r4
 801821e:	bf0c      	ite	eq
 8018220:	6032      	streq	r2, [r6, #0]
 8018222:	605a      	strne	r2, [r3, #4]
 8018224:	e7ec      	b.n	8018200 <_malloc_r+0xa0>
 8018226:	4623      	mov	r3, r4
 8018228:	6864      	ldr	r4, [r4, #4]
 801822a:	e7b2      	b.n	8018192 <_malloc_r+0x32>
 801822c:	4634      	mov	r4, r6
 801822e:	6876      	ldr	r6, [r6, #4]
 8018230:	e7b9      	b.n	80181a6 <_malloc_r+0x46>
 8018232:	230c      	movs	r3, #12
 8018234:	603b      	str	r3, [r7, #0]
 8018236:	4638      	mov	r0, r7
 8018238:	f000 f8a8 	bl	801838c <__malloc_unlock>
 801823c:	e7a1      	b.n	8018182 <_malloc_r+0x22>
 801823e:	6025      	str	r5, [r4, #0]
 8018240:	e7de      	b.n	8018200 <_malloc_r+0xa0>
 8018242:	bf00      	nop
 8018244:	200056dc 	.word	0x200056dc

08018248 <cleanup_glue>:
 8018248:	b538      	push	{r3, r4, r5, lr}
 801824a:	460c      	mov	r4, r1
 801824c:	6809      	ldr	r1, [r1, #0]
 801824e:	4605      	mov	r5, r0
 8018250:	b109      	cbz	r1, 8018256 <cleanup_glue+0xe>
 8018252:	f7ff fff9 	bl	8018248 <cleanup_glue>
 8018256:	4621      	mov	r1, r4
 8018258:	4628      	mov	r0, r5
 801825a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801825e:	f7ff bf13 	b.w	8018088 <_free_r>
	...

08018264 <_reclaim_reent>:
 8018264:	4b2c      	ldr	r3, [pc, #176]	; (8018318 <_reclaim_reent+0xb4>)
 8018266:	681b      	ldr	r3, [r3, #0]
 8018268:	4283      	cmp	r3, r0
 801826a:	b570      	push	{r4, r5, r6, lr}
 801826c:	4604      	mov	r4, r0
 801826e:	d051      	beq.n	8018314 <_reclaim_reent+0xb0>
 8018270:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8018272:	b143      	cbz	r3, 8018286 <_reclaim_reent+0x22>
 8018274:	68db      	ldr	r3, [r3, #12]
 8018276:	2b00      	cmp	r3, #0
 8018278:	d14a      	bne.n	8018310 <_reclaim_reent+0xac>
 801827a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801827c:	6819      	ldr	r1, [r3, #0]
 801827e:	b111      	cbz	r1, 8018286 <_reclaim_reent+0x22>
 8018280:	4620      	mov	r0, r4
 8018282:	f7ff ff01 	bl	8018088 <_free_r>
 8018286:	6961      	ldr	r1, [r4, #20]
 8018288:	b111      	cbz	r1, 8018290 <_reclaim_reent+0x2c>
 801828a:	4620      	mov	r0, r4
 801828c:	f7ff fefc 	bl	8018088 <_free_r>
 8018290:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8018292:	b111      	cbz	r1, 801829a <_reclaim_reent+0x36>
 8018294:	4620      	mov	r0, r4
 8018296:	f7ff fef7 	bl	8018088 <_free_r>
 801829a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801829c:	b111      	cbz	r1, 80182a4 <_reclaim_reent+0x40>
 801829e:	4620      	mov	r0, r4
 80182a0:	f7ff fef2 	bl	8018088 <_free_r>
 80182a4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80182a6:	b111      	cbz	r1, 80182ae <_reclaim_reent+0x4a>
 80182a8:	4620      	mov	r0, r4
 80182aa:	f7ff feed 	bl	8018088 <_free_r>
 80182ae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80182b0:	b111      	cbz	r1, 80182b8 <_reclaim_reent+0x54>
 80182b2:	4620      	mov	r0, r4
 80182b4:	f7ff fee8 	bl	8018088 <_free_r>
 80182b8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80182ba:	b111      	cbz	r1, 80182c2 <_reclaim_reent+0x5e>
 80182bc:	4620      	mov	r0, r4
 80182be:	f7ff fee3 	bl	8018088 <_free_r>
 80182c2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80182c4:	b111      	cbz	r1, 80182cc <_reclaim_reent+0x68>
 80182c6:	4620      	mov	r0, r4
 80182c8:	f7ff fede 	bl	8018088 <_free_r>
 80182cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80182ce:	b111      	cbz	r1, 80182d6 <_reclaim_reent+0x72>
 80182d0:	4620      	mov	r0, r4
 80182d2:	f7ff fed9 	bl	8018088 <_free_r>
 80182d6:	69a3      	ldr	r3, [r4, #24]
 80182d8:	b1e3      	cbz	r3, 8018314 <_reclaim_reent+0xb0>
 80182da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80182dc:	4620      	mov	r0, r4
 80182de:	4798      	blx	r3
 80182e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80182e2:	b1b9      	cbz	r1, 8018314 <_reclaim_reent+0xb0>
 80182e4:	4620      	mov	r0, r4
 80182e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80182ea:	f7ff bfad 	b.w	8018248 <cleanup_glue>
 80182ee:	5949      	ldr	r1, [r1, r5]
 80182f0:	b941      	cbnz	r1, 8018304 <_reclaim_reent+0xa0>
 80182f2:	3504      	adds	r5, #4
 80182f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80182f6:	2d80      	cmp	r5, #128	; 0x80
 80182f8:	68d9      	ldr	r1, [r3, #12]
 80182fa:	d1f8      	bne.n	80182ee <_reclaim_reent+0x8a>
 80182fc:	4620      	mov	r0, r4
 80182fe:	f7ff fec3 	bl	8018088 <_free_r>
 8018302:	e7ba      	b.n	801827a <_reclaim_reent+0x16>
 8018304:	680e      	ldr	r6, [r1, #0]
 8018306:	4620      	mov	r0, r4
 8018308:	f7ff febe 	bl	8018088 <_free_r>
 801830c:	4631      	mov	r1, r6
 801830e:	e7ef      	b.n	80182f0 <_reclaim_reent+0x8c>
 8018310:	2500      	movs	r5, #0
 8018312:	e7ef      	b.n	80182f4 <_reclaim_reent+0x90>
 8018314:	bd70      	pop	{r4, r5, r6, pc}
 8018316:	bf00      	nop
 8018318:	2000018c 	.word	0x2000018c

0801831c <_sbrk_r>:
 801831c:	b538      	push	{r3, r4, r5, lr}
 801831e:	4d06      	ldr	r5, [pc, #24]	; (8018338 <_sbrk_r+0x1c>)
 8018320:	2300      	movs	r3, #0
 8018322:	4604      	mov	r4, r0
 8018324:	4608      	mov	r0, r1
 8018326:	602b      	str	r3, [r5, #0]
 8018328:	f7ef fe16 	bl	8007f58 <_sbrk>
 801832c:	1c43      	adds	r3, r0, #1
 801832e:	d102      	bne.n	8018336 <_sbrk_r+0x1a>
 8018330:	682b      	ldr	r3, [r5, #0]
 8018332:	b103      	cbz	r3, 8018336 <_sbrk_r+0x1a>
 8018334:	6023      	str	r3, [r4, #0]
 8018336:	bd38      	pop	{r3, r4, r5, pc}
 8018338:	200056e4 	.word	0x200056e4

0801833c <strcat>:
 801833c:	b510      	push	{r4, lr}
 801833e:	4602      	mov	r2, r0
 8018340:	7814      	ldrb	r4, [r2, #0]
 8018342:	4613      	mov	r3, r2
 8018344:	3201      	adds	r2, #1
 8018346:	2c00      	cmp	r4, #0
 8018348:	d1fa      	bne.n	8018340 <strcat+0x4>
 801834a:	3b01      	subs	r3, #1
 801834c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018350:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018354:	2a00      	cmp	r2, #0
 8018356:	d1f9      	bne.n	801834c <strcat+0x10>
 8018358:	bd10      	pop	{r4, pc}

0801835a <strncat>:
 801835a:	b530      	push	{r4, r5, lr}
 801835c:	4604      	mov	r4, r0
 801835e:	7825      	ldrb	r5, [r4, #0]
 8018360:	4623      	mov	r3, r4
 8018362:	3401      	adds	r4, #1
 8018364:	2d00      	cmp	r5, #0
 8018366:	d1fa      	bne.n	801835e <strncat+0x4>
 8018368:	3a01      	subs	r2, #1
 801836a:	d304      	bcc.n	8018376 <strncat+0x1c>
 801836c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018370:	f803 4b01 	strb.w	r4, [r3], #1
 8018374:	b904      	cbnz	r4, 8018378 <strncat+0x1e>
 8018376:	bd30      	pop	{r4, r5, pc}
 8018378:	2a00      	cmp	r2, #0
 801837a:	d1f5      	bne.n	8018368 <strncat+0xe>
 801837c:	701a      	strb	r2, [r3, #0]
 801837e:	e7f3      	b.n	8018368 <strncat+0xe>

08018380 <__malloc_lock>:
 8018380:	4801      	ldr	r0, [pc, #4]	; (8018388 <__malloc_lock+0x8>)
 8018382:	f7ff be59 	b.w	8018038 <__retarget_lock_acquire_recursive>
 8018386:	bf00      	nop
 8018388:	200056d8 	.word	0x200056d8

0801838c <__malloc_unlock>:
 801838c:	4801      	ldr	r0, [pc, #4]	; (8018394 <__malloc_unlock+0x8>)
 801838e:	f7ff be54 	b.w	801803a <__retarget_lock_release_recursive>
 8018392:	bf00      	nop
 8018394:	200056d8 	.word	0x200056d8

08018398 <pow>:
 8018398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801839a:	ed2d 8b02 	vpush	{d8}
 801839e:	eeb0 8a40 	vmov.f32	s16, s0
 80183a2:	eef0 8a60 	vmov.f32	s17, s1
 80183a6:	ec55 4b11 	vmov	r4, r5, d1
 80183aa:	f000 f865 	bl	8018478 <__ieee754_pow>
 80183ae:	4622      	mov	r2, r4
 80183b0:	462b      	mov	r3, r5
 80183b2:	4620      	mov	r0, r4
 80183b4:	4629      	mov	r1, r5
 80183b6:	ec57 6b10 	vmov	r6, r7, d0
 80183ba:	f7ec fb99 	bl	8004af0 <__aeabi_dcmpun>
 80183be:	2800      	cmp	r0, #0
 80183c0:	d13b      	bne.n	801843a <pow+0xa2>
 80183c2:	ec51 0b18 	vmov	r0, r1, d8
 80183c6:	2200      	movs	r2, #0
 80183c8:	2300      	movs	r3, #0
 80183ca:	f7ec fb5f 	bl	8004a8c <__aeabi_dcmpeq>
 80183ce:	b1b8      	cbz	r0, 8018400 <pow+0x68>
 80183d0:	2200      	movs	r2, #0
 80183d2:	2300      	movs	r3, #0
 80183d4:	4620      	mov	r0, r4
 80183d6:	4629      	mov	r1, r5
 80183d8:	f7ec fb58 	bl	8004a8c <__aeabi_dcmpeq>
 80183dc:	2800      	cmp	r0, #0
 80183de:	d146      	bne.n	801846e <pow+0xd6>
 80183e0:	ec45 4b10 	vmov	d0, r4, r5
 80183e4:	f000 fe61 	bl	80190aa <finite>
 80183e8:	b338      	cbz	r0, 801843a <pow+0xa2>
 80183ea:	2200      	movs	r2, #0
 80183ec:	2300      	movs	r3, #0
 80183ee:	4620      	mov	r0, r4
 80183f0:	4629      	mov	r1, r5
 80183f2:	f7ec fb55 	bl	8004aa0 <__aeabi_dcmplt>
 80183f6:	b300      	cbz	r0, 801843a <pow+0xa2>
 80183f8:	f7ff fdf4 	bl	8017fe4 <__errno>
 80183fc:	2322      	movs	r3, #34	; 0x22
 80183fe:	e01b      	b.n	8018438 <pow+0xa0>
 8018400:	ec47 6b10 	vmov	d0, r6, r7
 8018404:	f000 fe51 	bl	80190aa <finite>
 8018408:	b9e0      	cbnz	r0, 8018444 <pow+0xac>
 801840a:	eeb0 0a48 	vmov.f32	s0, s16
 801840e:	eef0 0a68 	vmov.f32	s1, s17
 8018412:	f000 fe4a 	bl	80190aa <finite>
 8018416:	b1a8      	cbz	r0, 8018444 <pow+0xac>
 8018418:	ec45 4b10 	vmov	d0, r4, r5
 801841c:	f000 fe45 	bl	80190aa <finite>
 8018420:	b180      	cbz	r0, 8018444 <pow+0xac>
 8018422:	4632      	mov	r2, r6
 8018424:	463b      	mov	r3, r7
 8018426:	4630      	mov	r0, r6
 8018428:	4639      	mov	r1, r7
 801842a:	f7ec fb61 	bl	8004af0 <__aeabi_dcmpun>
 801842e:	2800      	cmp	r0, #0
 8018430:	d0e2      	beq.n	80183f8 <pow+0x60>
 8018432:	f7ff fdd7 	bl	8017fe4 <__errno>
 8018436:	2321      	movs	r3, #33	; 0x21
 8018438:	6003      	str	r3, [r0, #0]
 801843a:	ecbd 8b02 	vpop	{d8}
 801843e:	ec47 6b10 	vmov	d0, r6, r7
 8018442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018444:	2200      	movs	r2, #0
 8018446:	2300      	movs	r3, #0
 8018448:	4630      	mov	r0, r6
 801844a:	4639      	mov	r1, r7
 801844c:	f7ec fb1e 	bl	8004a8c <__aeabi_dcmpeq>
 8018450:	2800      	cmp	r0, #0
 8018452:	d0f2      	beq.n	801843a <pow+0xa2>
 8018454:	eeb0 0a48 	vmov.f32	s0, s16
 8018458:	eef0 0a68 	vmov.f32	s1, s17
 801845c:	f000 fe25 	bl	80190aa <finite>
 8018460:	2800      	cmp	r0, #0
 8018462:	d0ea      	beq.n	801843a <pow+0xa2>
 8018464:	ec45 4b10 	vmov	d0, r4, r5
 8018468:	f000 fe1f 	bl	80190aa <finite>
 801846c:	e7c3      	b.n	80183f6 <pow+0x5e>
 801846e:	4f01      	ldr	r7, [pc, #4]	; (8018474 <pow+0xdc>)
 8018470:	2600      	movs	r6, #0
 8018472:	e7e2      	b.n	801843a <pow+0xa2>
 8018474:	3ff00000 	.word	0x3ff00000

08018478 <__ieee754_pow>:
 8018478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801847c:	ed2d 8b06 	vpush	{d8-d10}
 8018480:	b089      	sub	sp, #36	; 0x24
 8018482:	ed8d 1b00 	vstr	d1, [sp]
 8018486:	e9dd 2900 	ldrd	r2, r9, [sp]
 801848a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801848e:	ea58 0102 	orrs.w	r1, r8, r2
 8018492:	ec57 6b10 	vmov	r6, r7, d0
 8018496:	d115      	bne.n	80184c4 <__ieee754_pow+0x4c>
 8018498:	19b3      	adds	r3, r6, r6
 801849a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801849e:	4152      	adcs	r2, r2
 80184a0:	4299      	cmp	r1, r3
 80184a2:	4b89      	ldr	r3, [pc, #548]	; (80186c8 <__ieee754_pow+0x250>)
 80184a4:	4193      	sbcs	r3, r2
 80184a6:	f080 84d2 	bcs.w	8018e4e <__ieee754_pow+0x9d6>
 80184aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80184ae:	4630      	mov	r0, r6
 80184b0:	4639      	mov	r1, r7
 80184b2:	f7eb fecd 	bl	8004250 <__adddf3>
 80184b6:	ec41 0b10 	vmov	d0, r0, r1
 80184ba:	b009      	add	sp, #36	; 0x24
 80184bc:	ecbd 8b06 	vpop	{d8-d10}
 80184c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184c4:	4b81      	ldr	r3, [pc, #516]	; (80186cc <__ieee754_pow+0x254>)
 80184c6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80184ca:	429c      	cmp	r4, r3
 80184cc:	ee10 aa10 	vmov	sl, s0
 80184d0:	463d      	mov	r5, r7
 80184d2:	dc06      	bgt.n	80184e2 <__ieee754_pow+0x6a>
 80184d4:	d101      	bne.n	80184da <__ieee754_pow+0x62>
 80184d6:	2e00      	cmp	r6, #0
 80184d8:	d1e7      	bne.n	80184aa <__ieee754_pow+0x32>
 80184da:	4598      	cmp	r8, r3
 80184dc:	dc01      	bgt.n	80184e2 <__ieee754_pow+0x6a>
 80184de:	d10f      	bne.n	8018500 <__ieee754_pow+0x88>
 80184e0:	b172      	cbz	r2, 8018500 <__ieee754_pow+0x88>
 80184e2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80184e6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80184ea:	ea55 050a 	orrs.w	r5, r5, sl
 80184ee:	d1dc      	bne.n	80184aa <__ieee754_pow+0x32>
 80184f0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80184f4:	18db      	adds	r3, r3, r3
 80184f6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80184fa:	4152      	adcs	r2, r2
 80184fc:	429d      	cmp	r5, r3
 80184fe:	e7d0      	b.n	80184a2 <__ieee754_pow+0x2a>
 8018500:	2d00      	cmp	r5, #0
 8018502:	da3b      	bge.n	801857c <__ieee754_pow+0x104>
 8018504:	4b72      	ldr	r3, [pc, #456]	; (80186d0 <__ieee754_pow+0x258>)
 8018506:	4598      	cmp	r8, r3
 8018508:	dc51      	bgt.n	80185ae <__ieee754_pow+0x136>
 801850a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801850e:	4598      	cmp	r8, r3
 8018510:	f340 84ac 	ble.w	8018e6c <__ieee754_pow+0x9f4>
 8018514:	ea4f 5328 	mov.w	r3, r8, asr #20
 8018518:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801851c:	2b14      	cmp	r3, #20
 801851e:	dd0f      	ble.n	8018540 <__ieee754_pow+0xc8>
 8018520:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8018524:	fa22 f103 	lsr.w	r1, r2, r3
 8018528:	fa01 f303 	lsl.w	r3, r1, r3
 801852c:	4293      	cmp	r3, r2
 801852e:	f040 849d 	bne.w	8018e6c <__ieee754_pow+0x9f4>
 8018532:	f001 0101 	and.w	r1, r1, #1
 8018536:	f1c1 0302 	rsb	r3, r1, #2
 801853a:	9304      	str	r3, [sp, #16]
 801853c:	b182      	cbz	r2, 8018560 <__ieee754_pow+0xe8>
 801853e:	e05f      	b.n	8018600 <__ieee754_pow+0x188>
 8018540:	2a00      	cmp	r2, #0
 8018542:	d15b      	bne.n	80185fc <__ieee754_pow+0x184>
 8018544:	f1c3 0314 	rsb	r3, r3, #20
 8018548:	fa48 f103 	asr.w	r1, r8, r3
 801854c:	fa01 f303 	lsl.w	r3, r1, r3
 8018550:	4543      	cmp	r3, r8
 8018552:	f040 8488 	bne.w	8018e66 <__ieee754_pow+0x9ee>
 8018556:	f001 0101 	and.w	r1, r1, #1
 801855a:	f1c1 0302 	rsb	r3, r1, #2
 801855e:	9304      	str	r3, [sp, #16]
 8018560:	4b5c      	ldr	r3, [pc, #368]	; (80186d4 <__ieee754_pow+0x25c>)
 8018562:	4598      	cmp	r8, r3
 8018564:	d132      	bne.n	80185cc <__ieee754_pow+0x154>
 8018566:	f1b9 0f00 	cmp.w	r9, #0
 801856a:	f280 8478 	bge.w	8018e5e <__ieee754_pow+0x9e6>
 801856e:	4959      	ldr	r1, [pc, #356]	; (80186d4 <__ieee754_pow+0x25c>)
 8018570:	4632      	mov	r2, r6
 8018572:	463b      	mov	r3, r7
 8018574:	2000      	movs	r0, #0
 8018576:	f7ec f94b 	bl	8004810 <__aeabi_ddiv>
 801857a:	e79c      	b.n	80184b6 <__ieee754_pow+0x3e>
 801857c:	2300      	movs	r3, #0
 801857e:	9304      	str	r3, [sp, #16]
 8018580:	2a00      	cmp	r2, #0
 8018582:	d13d      	bne.n	8018600 <__ieee754_pow+0x188>
 8018584:	4b51      	ldr	r3, [pc, #324]	; (80186cc <__ieee754_pow+0x254>)
 8018586:	4598      	cmp	r8, r3
 8018588:	d1ea      	bne.n	8018560 <__ieee754_pow+0xe8>
 801858a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801858e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8018592:	ea53 030a 	orrs.w	r3, r3, sl
 8018596:	f000 845a 	beq.w	8018e4e <__ieee754_pow+0x9d6>
 801859a:	4b4f      	ldr	r3, [pc, #316]	; (80186d8 <__ieee754_pow+0x260>)
 801859c:	429c      	cmp	r4, r3
 801859e:	dd08      	ble.n	80185b2 <__ieee754_pow+0x13a>
 80185a0:	f1b9 0f00 	cmp.w	r9, #0
 80185a4:	f2c0 8457 	blt.w	8018e56 <__ieee754_pow+0x9de>
 80185a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80185ac:	e783      	b.n	80184b6 <__ieee754_pow+0x3e>
 80185ae:	2302      	movs	r3, #2
 80185b0:	e7e5      	b.n	801857e <__ieee754_pow+0x106>
 80185b2:	f1b9 0f00 	cmp.w	r9, #0
 80185b6:	f04f 0000 	mov.w	r0, #0
 80185ba:	f04f 0100 	mov.w	r1, #0
 80185be:	f6bf af7a 	bge.w	80184b6 <__ieee754_pow+0x3e>
 80185c2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80185c6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80185ca:	e774      	b.n	80184b6 <__ieee754_pow+0x3e>
 80185cc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80185d0:	d106      	bne.n	80185e0 <__ieee754_pow+0x168>
 80185d2:	4632      	mov	r2, r6
 80185d4:	463b      	mov	r3, r7
 80185d6:	4630      	mov	r0, r6
 80185d8:	4639      	mov	r1, r7
 80185da:	f7eb ffef 	bl	80045bc <__aeabi_dmul>
 80185de:	e76a      	b.n	80184b6 <__ieee754_pow+0x3e>
 80185e0:	4b3e      	ldr	r3, [pc, #248]	; (80186dc <__ieee754_pow+0x264>)
 80185e2:	4599      	cmp	r9, r3
 80185e4:	d10c      	bne.n	8018600 <__ieee754_pow+0x188>
 80185e6:	2d00      	cmp	r5, #0
 80185e8:	db0a      	blt.n	8018600 <__ieee754_pow+0x188>
 80185ea:	ec47 6b10 	vmov	d0, r6, r7
 80185ee:	b009      	add	sp, #36	; 0x24
 80185f0:	ecbd 8b06 	vpop	{d8-d10}
 80185f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185f8:	f000 bc6c 	b.w	8018ed4 <__ieee754_sqrt>
 80185fc:	2300      	movs	r3, #0
 80185fe:	9304      	str	r3, [sp, #16]
 8018600:	ec47 6b10 	vmov	d0, r6, r7
 8018604:	f000 fd48 	bl	8019098 <fabs>
 8018608:	ec51 0b10 	vmov	r0, r1, d0
 801860c:	f1ba 0f00 	cmp.w	sl, #0
 8018610:	d129      	bne.n	8018666 <__ieee754_pow+0x1ee>
 8018612:	b124      	cbz	r4, 801861e <__ieee754_pow+0x1a6>
 8018614:	4b2f      	ldr	r3, [pc, #188]	; (80186d4 <__ieee754_pow+0x25c>)
 8018616:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801861a:	429a      	cmp	r2, r3
 801861c:	d123      	bne.n	8018666 <__ieee754_pow+0x1ee>
 801861e:	f1b9 0f00 	cmp.w	r9, #0
 8018622:	da05      	bge.n	8018630 <__ieee754_pow+0x1b8>
 8018624:	4602      	mov	r2, r0
 8018626:	460b      	mov	r3, r1
 8018628:	2000      	movs	r0, #0
 801862a:	492a      	ldr	r1, [pc, #168]	; (80186d4 <__ieee754_pow+0x25c>)
 801862c:	f7ec f8f0 	bl	8004810 <__aeabi_ddiv>
 8018630:	2d00      	cmp	r5, #0
 8018632:	f6bf af40 	bge.w	80184b6 <__ieee754_pow+0x3e>
 8018636:	9b04      	ldr	r3, [sp, #16]
 8018638:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801863c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8018640:	4323      	orrs	r3, r4
 8018642:	d108      	bne.n	8018656 <__ieee754_pow+0x1de>
 8018644:	4602      	mov	r2, r0
 8018646:	460b      	mov	r3, r1
 8018648:	4610      	mov	r0, r2
 801864a:	4619      	mov	r1, r3
 801864c:	f7eb fdfe 	bl	800424c <__aeabi_dsub>
 8018650:	4602      	mov	r2, r0
 8018652:	460b      	mov	r3, r1
 8018654:	e78f      	b.n	8018576 <__ieee754_pow+0xfe>
 8018656:	9b04      	ldr	r3, [sp, #16]
 8018658:	2b01      	cmp	r3, #1
 801865a:	f47f af2c 	bne.w	80184b6 <__ieee754_pow+0x3e>
 801865e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018662:	4619      	mov	r1, r3
 8018664:	e727      	b.n	80184b6 <__ieee754_pow+0x3e>
 8018666:	0feb      	lsrs	r3, r5, #31
 8018668:	3b01      	subs	r3, #1
 801866a:	9306      	str	r3, [sp, #24]
 801866c:	9a06      	ldr	r2, [sp, #24]
 801866e:	9b04      	ldr	r3, [sp, #16]
 8018670:	4313      	orrs	r3, r2
 8018672:	d102      	bne.n	801867a <__ieee754_pow+0x202>
 8018674:	4632      	mov	r2, r6
 8018676:	463b      	mov	r3, r7
 8018678:	e7e6      	b.n	8018648 <__ieee754_pow+0x1d0>
 801867a:	4b19      	ldr	r3, [pc, #100]	; (80186e0 <__ieee754_pow+0x268>)
 801867c:	4598      	cmp	r8, r3
 801867e:	f340 80fb 	ble.w	8018878 <__ieee754_pow+0x400>
 8018682:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8018686:	4598      	cmp	r8, r3
 8018688:	4b13      	ldr	r3, [pc, #76]	; (80186d8 <__ieee754_pow+0x260>)
 801868a:	dd0c      	ble.n	80186a6 <__ieee754_pow+0x22e>
 801868c:	429c      	cmp	r4, r3
 801868e:	dc0f      	bgt.n	80186b0 <__ieee754_pow+0x238>
 8018690:	f1b9 0f00 	cmp.w	r9, #0
 8018694:	da0f      	bge.n	80186b6 <__ieee754_pow+0x23e>
 8018696:	2000      	movs	r0, #0
 8018698:	b009      	add	sp, #36	; 0x24
 801869a:	ecbd 8b06 	vpop	{d8-d10}
 801869e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186a2:	f000 bcf0 	b.w	8019086 <__math_oflow>
 80186a6:	429c      	cmp	r4, r3
 80186a8:	dbf2      	blt.n	8018690 <__ieee754_pow+0x218>
 80186aa:	4b0a      	ldr	r3, [pc, #40]	; (80186d4 <__ieee754_pow+0x25c>)
 80186ac:	429c      	cmp	r4, r3
 80186ae:	dd19      	ble.n	80186e4 <__ieee754_pow+0x26c>
 80186b0:	f1b9 0f00 	cmp.w	r9, #0
 80186b4:	dcef      	bgt.n	8018696 <__ieee754_pow+0x21e>
 80186b6:	2000      	movs	r0, #0
 80186b8:	b009      	add	sp, #36	; 0x24
 80186ba:	ecbd 8b06 	vpop	{d8-d10}
 80186be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186c2:	f000 bcd7 	b.w	8019074 <__math_uflow>
 80186c6:	bf00      	nop
 80186c8:	fff00000 	.word	0xfff00000
 80186cc:	7ff00000 	.word	0x7ff00000
 80186d0:	433fffff 	.word	0x433fffff
 80186d4:	3ff00000 	.word	0x3ff00000
 80186d8:	3fefffff 	.word	0x3fefffff
 80186dc:	3fe00000 	.word	0x3fe00000
 80186e0:	41e00000 	.word	0x41e00000
 80186e4:	4b60      	ldr	r3, [pc, #384]	; (8018868 <__ieee754_pow+0x3f0>)
 80186e6:	2200      	movs	r2, #0
 80186e8:	f7eb fdb0 	bl	800424c <__aeabi_dsub>
 80186ec:	a354      	add	r3, pc, #336	; (adr r3, 8018840 <__ieee754_pow+0x3c8>)
 80186ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80186f2:	4604      	mov	r4, r0
 80186f4:	460d      	mov	r5, r1
 80186f6:	f7eb ff61 	bl	80045bc <__aeabi_dmul>
 80186fa:	a353      	add	r3, pc, #332	; (adr r3, 8018848 <__ieee754_pow+0x3d0>)
 80186fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018700:	4606      	mov	r6, r0
 8018702:	460f      	mov	r7, r1
 8018704:	4620      	mov	r0, r4
 8018706:	4629      	mov	r1, r5
 8018708:	f7eb ff58 	bl	80045bc <__aeabi_dmul>
 801870c:	4b57      	ldr	r3, [pc, #348]	; (801886c <__ieee754_pow+0x3f4>)
 801870e:	4682      	mov	sl, r0
 8018710:	468b      	mov	fp, r1
 8018712:	2200      	movs	r2, #0
 8018714:	4620      	mov	r0, r4
 8018716:	4629      	mov	r1, r5
 8018718:	f7eb ff50 	bl	80045bc <__aeabi_dmul>
 801871c:	4602      	mov	r2, r0
 801871e:	460b      	mov	r3, r1
 8018720:	a14b      	add	r1, pc, #300	; (adr r1, 8018850 <__ieee754_pow+0x3d8>)
 8018722:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018726:	f7eb fd91 	bl	800424c <__aeabi_dsub>
 801872a:	4622      	mov	r2, r4
 801872c:	462b      	mov	r3, r5
 801872e:	f7eb ff45 	bl	80045bc <__aeabi_dmul>
 8018732:	4602      	mov	r2, r0
 8018734:	460b      	mov	r3, r1
 8018736:	2000      	movs	r0, #0
 8018738:	494d      	ldr	r1, [pc, #308]	; (8018870 <__ieee754_pow+0x3f8>)
 801873a:	f7eb fd87 	bl	800424c <__aeabi_dsub>
 801873e:	4622      	mov	r2, r4
 8018740:	4680      	mov	r8, r0
 8018742:	4689      	mov	r9, r1
 8018744:	462b      	mov	r3, r5
 8018746:	4620      	mov	r0, r4
 8018748:	4629      	mov	r1, r5
 801874a:	f7eb ff37 	bl	80045bc <__aeabi_dmul>
 801874e:	4602      	mov	r2, r0
 8018750:	460b      	mov	r3, r1
 8018752:	4640      	mov	r0, r8
 8018754:	4649      	mov	r1, r9
 8018756:	f7eb ff31 	bl	80045bc <__aeabi_dmul>
 801875a:	a33f      	add	r3, pc, #252	; (adr r3, 8018858 <__ieee754_pow+0x3e0>)
 801875c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018760:	f7eb ff2c 	bl	80045bc <__aeabi_dmul>
 8018764:	4602      	mov	r2, r0
 8018766:	460b      	mov	r3, r1
 8018768:	4650      	mov	r0, sl
 801876a:	4659      	mov	r1, fp
 801876c:	f7eb fd6e 	bl	800424c <__aeabi_dsub>
 8018770:	4602      	mov	r2, r0
 8018772:	460b      	mov	r3, r1
 8018774:	4680      	mov	r8, r0
 8018776:	4689      	mov	r9, r1
 8018778:	4630      	mov	r0, r6
 801877a:	4639      	mov	r1, r7
 801877c:	f7eb fd68 	bl	8004250 <__adddf3>
 8018780:	2000      	movs	r0, #0
 8018782:	4632      	mov	r2, r6
 8018784:	463b      	mov	r3, r7
 8018786:	4604      	mov	r4, r0
 8018788:	460d      	mov	r5, r1
 801878a:	f7eb fd5f 	bl	800424c <__aeabi_dsub>
 801878e:	4602      	mov	r2, r0
 8018790:	460b      	mov	r3, r1
 8018792:	4640      	mov	r0, r8
 8018794:	4649      	mov	r1, r9
 8018796:	f7eb fd59 	bl	800424c <__aeabi_dsub>
 801879a:	9b04      	ldr	r3, [sp, #16]
 801879c:	9a06      	ldr	r2, [sp, #24]
 801879e:	3b01      	subs	r3, #1
 80187a0:	4313      	orrs	r3, r2
 80187a2:	4682      	mov	sl, r0
 80187a4:	468b      	mov	fp, r1
 80187a6:	f040 81e7 	bne.w	8018b78 <__ieee754_pow+0x700>
 80187aa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8018860 <__ieee754_pow+0x3e8>
 80187ae:	eeb0 8a47 	vmov.f32	s16, s14
 80187b2:	eef0 8a67 	vmov.f32	s17, s15
 80187b6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80187ba:	2600      	movs	r6, #0
 80187bc:	4632      	mov	r2, r6
 80187be:	463b      	mov	r3, r7
 80187c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80187c4:	f7eb fd42 	bl	800424c <__aeabi_dsub>
 80187c8:	4622      	mov	r2, r4
 80187ca:	462b      	mov	r3, r5
 80187cc:	f7eb fef6 	bl	80045bc <__aeabi_dmul>
 80187d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80187d4:	4680      	mov	r8, r0
 80187d6:	4689      	mov	r9, r1
 80187d8:	4650      	mov	r0, sl
 80187da:	4659      	mov	r1, fp
 80187dc:	f7eb feee 	bl	80045bc <__aeabi_dmul>
 80187e0:	4602      	mov	r2, r0
 80187e2:	460b      	mov	r3, r1
 80187e4:	4640      	mov	r0, r8
 80187e6:	4649      	mov	r1, r9
 80187e8:	f7eb fd32 	bl	8004250 <__adddf3>
 80187ec:	4632      	mov	r2, r6
 80187ee:	463b      	mov	r3, r7
 80187f0:	4680      	mov	r8, r0
 80187f2:	4689      	mov	r9, r1
 80187f4:	4620      	mov	r0, r4
 80187f6:	4629      	mov	r1, r5
 80187f8:	f7eb fee0 	bl	80045bc <__aeabi_dmul>
 80187fc:	460b      	mov	r3, r1
 80187fe:	4604      	mov	r4, r0
 8018800:	460d      	mov	r5, r1
 8018802:	4602      	mov	r2, r0
 8018804:	4649      	mov	r1, r9
 8018806:	4640      	mov	r0, r8
 8018808:	f7eb fd22 	bl	8004250 <__adddf3>
 801880c:	4b19      	ldr	r3, [pc, #100]	; (8018874 <__ieee754_pow+0x3fc>)
 801880e:	4299      	cmp	r1, r3
 8018810:	ec45 4b19 	vmov	d9, r4, r5
 8018814:	4606      	mov	r6, r0
 8018816:	460f      	mov	r7, r1
 8018818:	468b      	mov	fp, r1
 801881a:	f340 82f1 	ble.w	8018e00 <__ieee754_pow+0x988>
 801881e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8018822:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8018826:	4303      	orrs	r3, r0
 8018828:	f000 81e4 	beq.w	8018bf4 <__ieee754_pow+0x77c>
 801882c:	ec51 0b18 	vmov	r0, r1, d8
 8018830:	2200      	movs	r2, #0
 8018832:	2300      	movs	r3, #0
 8018834:	f7ec f934 	bl	8004aa0 <__aeabi_dcmplt>
 8018838:	3800      	subs	r0, #0
 801883a:	bf18      	it	ne
 801883c:	2001      	movne	r0, #1
 801883e:	e72b      	b.n	8018698 <__ieee754_pow+0x220>
 8018840:	60000000 	.word	0x60000000
 8018844:	3ff71547 	.word	0x3ff71547
 8018848:	f85ddf44 	.word	0xf85ddf44
 801884c:	3e54ae0b 	.word	0x3e54ae0b
 8018850:	55555555 	.word	0x55555555
 8018854:	3fd55555 	.word	0x3fd55555
 8018858:	652b82fe 	.word	0x652b82fe
 801885c:	3ff71547 	.word	0x3ff71547
 8018860:	00000000 	.word	0x00000000
 8018864:	bff00000 	.word	0xbff00000
 8018868:	3ff00000 	.word	0x3ff00000
 801886c:	3fd00000 	.word	0x3fd00000
 8018870:	3fe00000 	.word	0x3fe00000
 8018874:	408fffff 	.word	0x408fffff
 8018878:	4bd5      	ldr	r3, [pc, #852]	; (8018bd0 <__ieee754_pow+0x758>)
 801887a:	402b      	ands	r3, r5
 801887c:	2200      	movs	r2, #0
 801887e:	b92b      	cbnz	r3, 801888c <__ieee754_pow+0x414>
 8018880:	4bd4      	ldr	r3, [pc, #848]	; (8018bd4 <__ieee754_pow+0x75c>)
 8018882:	f7eb fe9b 	bl	80045bc <__aeabi_dmul>
 8018886:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801888a:	460c      	mov	r4, r1
 801888c:	1523      	asrs	r3, r4, #20
 801888e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8018892:	4413      	add	r3, r2
 8018894:	9305      	str	r3, [sp, #20]
 8018896:	4bd0      	ldr	r3, [pc, #832]	; (8018bd8 <__ieee754_pow+0x760>)
 8018898:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801889c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80188a0:	429c      	cmp	r4, r3
 80188a2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80188a6:	dd08      	ble.n	80188ba <__ieee754_pow+0x442>
 80188a8:	4bcc      	ldr	r3, [pc, #816]	; (8018bdc <__ieee754_pow+0x764>)
 80188aa:	429c      	cmp	r4, r3
 80188ac:	f340 8162 	ble.w	8018b74 <__ieee754_pow+0x6fc>
 80188b0:	9b05      	ldr	r3, [sp, #20]
 80188b2:	3301      	adds	r3, #1
 80188b4:	9305      	str	r3, [sp, #20]
 80188b6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80188ba:	2400      	movs	r4, #0
 80188bc:	00e3      	lsls	r3, r4, #3
 80188be:	9307      	str	r3, [sp, #28]
 80188c0:	4bc7      	ldr	r3, [pc, #796]	; (8018be0 <__ieee754_pow+0x768>)
 80188c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80188c6:	ed93 7b00 	vldr	d7, [r3]
 80188ca:	4629      	mov	r1, r5
 80188cc:	ec53 2b17 	vmov	r2, r3, d7
 80188d0:	eeb0 9a47 	vmov.f32	s18, s14
 80188d4:	eef0 9a67 	vmov.f32	s19, s15
 80188d8:	4682      	mov	sl, r0
 80188da:	f7eb fcb7 	bl	800424c <__aeabi_dsub>
 80188de:	4652      	mov	r2, sl
 80188e0:	4606      	mov	r6, r0
 80188e2:	460f      	mov	r7, r1
 80188e4:	462b      	mov	r3, r5
 80188e6:	ec51 0b19 	vmov	r0, r1, d9
 80188ea:	f7eb fcb1 	bl	8004250 <__adddf3>
 80188ee:	4602      	mov	r2, r0
 80188f0:	460b      	mov	r3, r1
 80188f2:	2000      	movs	r0, #0
 80188f4:	49bb      	ldr	r1, [pc, #748]	; (8018be4 <__ieee754_pow+0x76c>)
 80188f6:	f7eb ff8b 	bl	8004810 <__aeabi_ddiv>
 80188fa:	ec41 0b1a 	vmov	d10, r0, r1
 80188fe:	4602      	mov	r2, r0
 8018900:	460b      	mov	r3, r1
 8018902:	4630      	mov	r0, r6
 8018904:	4639      	mov	r1, r7
 8018906:	f7eb fe59 	bl	80045bc <__aeabi_dmul>
 801890a:	2300      	movs	r3, #0
 801890c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018910:	9302      	str	r3, [sp, #8]
 8018912:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8018916:	46ab      	mov	fp, r5
 8018918:	106d      	asrs	r5, r5, #1
 801891a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801891e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8018922:	ec41 0b18 	vmov	d8, r0, r1
 8018926:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801892a:	2200      	movs	r2, #0
 801892c:	4640      	mov	r0, r8
 801892e:	4649      	mov	r1, r9
 8018930:	4614      	mov	r4, r2
 8018932:	461d      	mov	r5, r3
 8018934:	f7eb fe42 	bl	80045bc <__aeabi_dmul>
 8018938:	4602      	mov	r2, r0
 801893a:	460b      	mov	r3, r1
 801893c:	4630      	mov	r0, r6
 801893e:	4639      	mov	r1, r7
 8018940:	f7eb fc84 	bl	800424c <__aeabi_dsub>
 8018944:	ec53 2b19 	vmov	r2, r3, d9
 8018948:	4606      	mov	r6, r0
 801894a:	460f      	mov	r7, r1
 801894c:	4620      	mov	r0, r4
 801894e:	4629      	mov	r1, r5
 8018950:	f7eb fc7c 	bl	800424c <__aeabi_dsub>
 8018954:	4602      	mov	r2, r0
 8018956:	460b      	mov	r3, r1
 8018958:	4650      	mov	r0, sl
 801895a:	4659      	mov	r1, fp
 801895c:	f7eb fc76 	bl	800424c <__aeabi_dsub>
 8018960:	4642      	mov	r2, r8
 8018962:	464b      	mov	r3, r9
 8018964:	f7eb fe2a 	bl	80045bc <__aeabi_dmul>
 8018968:	4602      	mov	r2, r0
 801896a:	460b      	mov	r3, r1
 801896c:	4630      	mov	r0, r6
 801896e:	4639      	mov	r1, r7
 8018970:	f7eb fc6c 	bl	800424c <__aeabi_dsub>
 8018974:	ec53 2b1a 	vmov	r2, r3, d10
 8018978:	f7eb fe20 	bl	80045bc <__aeabi_dmul>
 801897c:	ec53 2b18 	vmov	r2, r3, d8
 8018980:	ec41 0b19 	vmov	d9, r0, r1
 8018984:	ec51 0b18 	vmov	r0, r1, d8
 8018988:	f7eb fe18 	bl	80045bc <__aeabi_dmul>
 801898c:	a37c      	add	r3, pc, #496	; (adr r3, 8018b80 <__ieee754_pow+0x708>)
 801898e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018992:	4604      	mov	r4, r0
 8018994:	460d      	mov	r5, r1
 8018996:	f7eb fe11 	bl	80045bc <__aeabi_dmul>
 801899a:	a37b      	add	r3, pc, #492	; (adr r3, 8018b88 <__ieee754_pow+0x710>)
 801899c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189a0:	f7eb fc56 	bl	8004250 <__adddf3>
 80189a4:	4622      	mov	r2, r4
 80189a6:	462b      	mov	r3, r5
 80189a8:	f7eb fe08 	bl	80045bc <__aeabi_dmul>
 80189ac:	a378      	add	r3, pc, #480	; (adr r3, 8018b90 <__ieee754_pow+0x718>)
 80189ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189b2:	f7eb fc4d 	bl	8004250 <__adddf3>
 80189b6:	4622      	mov	r2, r4
 80189b8:	462b      	mov	r3, r5
 80189ba:	f7eb fdff 	bl	80045bc <__aeabi_dmul>
 80189be:	a376      	add	r3, pc, #472	; (adr r3, 8018b98 <__ieee754_pow+0x720>)
 80189c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189c4:	f7eb fc44 	bl	8004250 <__adddf3>
 80189c8:	4622      	mov	r2, r4
 80189ca:	462b      	mov	r3, r5
 80189cc:	f7eb fdf6 	bl	80045bc <__aeabi_dmul>
 80189d0:	a373      	add	r3, pc, #460	; (adr r3, 8018ba0 <__ieee754_pow+0x728>)
 80189d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189d6:	f7eb fc3b 	bl	8004250 <__adddf3>
 80189da:	4622      	mov	r2, r4
 80189dc:	462b      	mov	r3, r5
 80189de:	f7eb fded 	bl	80045bc <__aeabi_dmul>
 80189e2:	a371      	add	r3, pc, #452	; (adr r3, 8018ba8 <__ieee754_pow+0x730>)
 80189e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189e8:	f7eb fc32 	bl	8004250 <__adddf3>
 80189ec:	4622      	mov	r2, r4
 80189ee:	4606      	mov	r6, r0
 80189f0:	460f      	mov	r7, r1
 80189f2:	462b      	mov	r3, r5
 80189f4:	4620      	mov	r0, r4
 80189f6:	4629      	mov	r1, r5
 80189f8:	f7eb fde0 	bl	80045bc <__aeabi_dmul>
 80189fc:	4602      	mov	r2, r0
 80189fe:	460b      	mov	r3, r1
 8018a00:	4630      	mov	r0, r6
 8018a02:	4639      	mov	r1, r7
 8018a04:	f7eb fdda 	bl	80045bc <__aeabi_dmul>
 8018a08:	4642      	mov	r2, r8
 8018a0a:	4604      	mov	r4, r0
 8018a0c:	460d      	mov	r5, r1
 8018a0e:	464b      	mov	r3, r9
 8018a10:	ec51 0b18 	vmov	r0, r1, d8
 8018a14:	f7eb fc1c 	bl	8004250 <__adddf3>
 8018a18:	ec53 2b19 	vmov	r2, r3, d9
 8018a1c:	f7eb fdce 	bl	80045bc <__aeabi_dmul>
 8018a20:	4622      	mov	r2, r4
 8018a22:	462b      	mov	r3, r5
 8018a24:	f7eb fc14 	bl	8004250 <__adddf3>
 8018a28:	4642      	mov	r2, r8
 8018a2a:	4682      	mov	sl, r0
 8018a2c:	468b      	mov	fp, r1
 8018a2e:	464b      	mov	r3, r9
 8018a30:	4640      	mov	r0, r8
 8018a32:	4649      	mov	r1, r9
 8018a34:	f7eb fdc2 	bl	80045bc <__aeabi_dmul>
 8018a38:	4b6b      	ldr	r3, [pc, #428]	; (8018be8 <__ieee754_pow+0x770>)
 8018a3a:	2200      	movs	r2, #0
 8018a3c:	4606      	mov	r6, r0
 8018a3e:	460f      	mov	r7, r1
 8018a40:	f7eb fc06 	bl	8004250 <__adddf3>
 8018a44:	4652      	mov	r2, sl
 8018a46:	465b      	mov	r3, fp
 8018a48:	f7eb fc02 	bl	8004250 <__adddf3>
 8018a4c:	2000      	movs	r0, #0
 8018a4e:	4604      	mov	r4, r0
 8018a50:	460d      	mov	r5, r1
 8018a52:	4602      	mov	r2, r0
 8018a54:	460b      	mov	r3, r1
 8018a56:	4640      	mov	r0, r8
 8018a58:	4649      	mov	r1, r9
 8018a5a:	f7eb fdaf 	bl	80045bc <__aeabi_dmul>
 8018a5e:	4b62      	ldr	r3, [pc, #392]	; (8018be8 <__ieee754_pow+0x770>)
 8018a60:	4680      	mov	r8, r0
 8018a62:	4689      	mov	r9, r1
 8018a64:	2200      	movs	r2, #0
 8018a66:	4620      	mov	r0, r4
 8018a68:	4629      	mov	r1, r5
 8018a6a:	f7eb fbef 	bl	800424c <__aeabi_dsub>
 8018a6e:	4632      	mov	r2, r6
 8018a70:	463b      	mov	r3, r7
 8018a72:	f7eb fbeb 	bl	800424c <__aeabi_dsub>
 8018a76:	4602      	mov	r2, r0
 8018a78:	460b      	mov	r3, r1
 8018a7a:	4650      	mov	r0, sl
 8018a7c:	4659      	mov	r1, fp
 8018a7e:	f7eb fbe5 	bl	800424c <__aeabi_dsub>
 8018a82:	ec53 2b18 	vmov	r2, r3, d8
 8018a86:	f7eb fd99 	bl	80045bc <__aeabi_dmul>
 8018a8a:	4622      	mov	r2, r4
 8018a8c:	4606      	mov	r6, r0
 8018a8e:	460f      	mov	r7, r1
 8018a90:	462b      	mov	r3, r5
 8018a92:	ec51 0b19 	vmov	r0, r1, d9
 8018a96:	f7eb fd91 	bl	80045bc <__aeabi_dmul>
 8018a9a:	4602      	mov	r2, r0
 8018a9c:	460b      	mov	r3, r1
 8018a9e:	4630      	mov	r0, r6
 8018aa0:	4639      	mov	r1, r7
 8018aa2:	f7eb fbd5 	bl	8004250 <__adddf3>
 8018aa6:	4606      	mov	r6, r0
 8018aa8:	460f      	mov	r7, r1
 8018aaa:	4602      	mov	r2, r0
 8018aac:	460b      	mov	r3, r1
 8018aae:	4640      	mov	r0, r8
 8018ab0:	4649      	mov	r1, r9
 8018ab2:	f7eb fbcd 	bl	8004250 <__adddf3>
 8018ab6:	a33e      	add	r3, pc, #248	; (adr r3, 8018bb0 <__ieee754_pow+0x738>)
 8018ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018abc:	2000      	movs	r0, #0
 8018abe:	4604      	mov	r4, r0
 8018ac0:	460d      	mov	r5, r1
 8018ac2:	f7eb fd7b 	bl	80045bc <__aeabi_dmul>
 8018ac6:	4642      	mov	r2, r8
 8018ac8:	ec41 0b18 	vmov	d8, r0, r1
 8018acc:	464b      	mov	r3, r9
 8018ace:	4620      	mov	r0, r4
 8018ad0:	4629      	mov	r1, r5
 8018ad2:	f7eb fbbb 	bl	800424c <__aeabi_dsub>
 8018ad6:	4602      	mov	r2, r0
 8018ad8:	460b      	mov	r3, r1
 8018ada:	4630      	mov	r0, r6
 8018adc:	4639      	mov	r1, r7
 8018ade:	f7eb fbb5 	bl	800424c <__aeabi_dsub>
 8018ae2:	a335      	add	r3, pc, #212	; (adr r3, 8018bb8 <__ieee754_pow+0x740>)
 8018ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ae8:	f7eb fd68 	bl	80045bc <__aeabi_dmul>
 8018aec:	a334      	add	r3, pc, #208	; (adr r3, 8018bc0 <__ieee754_pow+0x748>)
 8018aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018af2:	4606      	mov	r6, r0
 8018af4:	460f      	mov	r7, r1
 8018af6:	4620      	mov	r0, r4
 8018af8:	4629      	mov	r1, r5
 8018afa:	f7eb fd5f 	bl	80045bc <__aeabi_dmul>
 8018afe:	4602      	mov	r2, r0
 8018b00:	460b      	mov	r3, r1
 8018b02:	4630      	mov	r0, r6
 8018b04:	4639      	mov	r1, r7
 8018b06:	f7eb fba3 	bl	8004250 <__adddf3>
 8018b0a:	9a07      	ldr	r2, [sp, #28]
 8018b0c:	4b37      	ldr	r3, [pc, #220]	; (8018bec <__ieee754_pow+0x774>)
 8018b0e:	4413      	add	r3, r2
 8018b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b14:	f7eb fb9c 	bl	8004250 <__adddf3>
 8018b18:	4682      	mov	sl, r0
 8018b1a:	9805      	ldr	r0, [sp, #20]
 8018b1c:	468b      	mov	fp, r1
 8018b1e:	f7eb fce3 	bl	80044e8 <__aeabi_i2d>
 8018b22:	9a07      	ldr	r2, [sp, #28]
 8018b24:	4b32      	ldr	r3, [pc, #200]	; (8018bf0 <__ieee754_pow+0x778>)
 8018b26:	4413      	add	r3, r2
 8018b28:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018b2c:	4606      	mov	r6, r0
 8018b2e:	460f      	mov	r7, r1
 8018b30:	4652      	mov	r2, sl
 8018b32:	465b      	mov	r3, fp
 8018b34:	ec51 0b18 	vmov	r0, r1, d8
 8018b38:	f7eb fb8a 	bl	8004250 <__adddf3>
 8018b3c:	4642      	mov	r2, r8
 8018b3e:	464b      	mov	r3, r9
 8018b40:	f7eb fb86 	bl	8004250 <__adddf3>
 8018b44:	4632      	mov	r2, r6
 8018b46:	463b      	mov	r3, r7
 8018b48:	f7eb fb82 	bl	8004250 <__adddf3>
 8018b4c:	2000      	movs	r0, #0
 8018b4e:	4632      	mov	r2, r6
 8018b50:	463b      	mov	r3, r7
 8018b52:	4604      	mov	r4, r0
 8018b54:	460d      	mov	r5, r1
 8018b56:	f7eb fb79 	bl	800424c <__aeabi_dsub>
 8018b5a:	4642      	mov	r2, r8
 8018b5c:	464b      	mov	r3, r9
 8018b5e:	f7eb fb75 	bl	800424c <__aeabi_dsub>
 8018b62:	ec53 2b18 	vmov	r2, r3, d8
 8018b66:	f7eb fb71 	bl	800424c <__aeabi_dsub>
 8018b6a:	4602      	mov	r2, r0
 8018b6c:	460b      	mov	r3, r1
 8018b6e:	4650      	mov	r0, sl
 8018b70:	4659      	mov	r1, fp
 8018b72:	e610      	b.n	8018796 <__ieee754_pow+0x31e>
 8018b74:	2401      	movs	r4, #1
 8018b76:	e6a1      	b.n	80188bc <__ieee754_pow+0x444>
 8018b78:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8018bc8 <__ieee754_pow+0x750>
 8018b7c:	e617      	b.n	80187ae <__ieee754_pow+0x336>
 8018b7e:	bf00      	nop
 8018b80:	4a454eef 	.word	0x4a454eef
 8018b84:	3fca7e28 	.word	0x3fca7e28
 8018b88:	93c9db65 	.word	0x93c9db65
 8018b8c:	3fcd864a 	.word	0x3fcd864a
 8018b90:	a91d4101 	.word	0xa91d4101
 8018b94:	3fd17460 	.word	0x3fd17460
 8018b98:	518f264d 	.word	0x518f264d
 8018b9c:	3fd55555 	.word	0x3fd55555
 8018ba0:	db6fabff 	.word	0xdb6fabff
 8018ba4:	3fdb6db6 	.word	0x3fdb6db6
 8018ba8:	33333303 	.word	0x33333303
 8018bac:	3fe33333 	.word	0x3fe33333
 8018bb0:	e0000000 	.word	0xe0000000
 8018bb4:	3feec709 	.word	0x3feec709
 8018bb8:	dc3a03fd 	.word	0xdc3a03fd
 8018bbc:	3feec709 	.word	0x3feec709
 8018bc0:	145b01f5 	.word	0x145b01f5
 8018bc4:	be3e2fe0 	.word	0xbe3e2fe0
 8018bc8:	00000000 	.word	0x00000000
 8018bcc:	3ff00000 	.word	0x3ff00000
 8018bd0:	7ff00000 	.word	0x7ff00000
 8018bd4:	43400000 	.word	0x43400000
 8018bd8:	0003988e 	.word	0x0003988e
 8018bdc:	000bb679 	.word	0x000bb679
 8018be0:	080194e8 	.word	0x080194e8
 8018be4:	3ff00000 	.word	0x3ff00000
 8018be8:	40080000 	.word	0x40080000
 8018bec:	08019508 	.word	0x08019508
 8018bf0:	080194f8 	.word	0x080194f8
 8018bf4:	a3b5      	add	r3, pc, #724	; (adr r3, 8018ecc <__ieee754_pow+0xa54>)
 8018bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bfa:	4640      	mov	r0, r8
 8018bfc:	4649      	mov	r1, r9
 8018bfe:	f7eb fb27 	bl	8004250 <__adddf3>
 8018c02:	4622      	mov	r2, r4
 8018c04:	ec41 0b1a 	vmov	d10, r0, r1
 8018c08:	462b      	mov	r3, r5
 8018c0a:	4630      	mov	r0, r6
 8018c0c:	4639      	mov	r1, r7
 8018c0e:	f7eb fb1d 	bl	800424c <__aeabi_dsub>
 8018c12:	4602      	mov	r2, r0
 8018c14:	460b      	mov	r3, r1
 8018c16:	ec51 0b1a 	vmov	r0, r1, d10
 8018c1a:	f7eb ff5f 	bl	8004adc <__aeabi_dcmpgt>
 8018c1e:	2800      	cmp	r0, #0
 8018c20:	f47f ae04 	bne.w	801882c <__ieee754_pow+0x3b4>
 8018c24:	4aa4      	ldr	r2, [pc, #656]	; (8018eb8 <__ieee754_pow+0xa40>)
 8018c26:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8018c2a:	4293      	cmp	r3, r2
 8018c2c:	f340 8108 	ble.w	8018e40 <__ieee754_pow+0x9c8>
 8018c30:	151b      	asrs	r3, r3, #20
 8018c32:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8018c36:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8018c3a:	fa4a f303 	asr.w	r3, sl, r3
 8018c3e:	445b      	add	r3, fp
 8018c40:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8018c44:	4e9d      	ldr	r6, [pc, #628]	; (8018ebc <__ieee754_pow+0xa44>)
 8018c46:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8018c4a:	4116      	asrs	r6, r2
 8018c4c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8018c50:	2000      	movs	r0, #0
 8018c52:	ea23 0106 	bic.w	r1, r3, r6
 8018c56:	f1c2 0214 	rsb	r2, r2, #20
 8018c5a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8018c5e:	fa4a fa02 	asr.w	sl, sl, r2
 8018c62:	f1bb 0f00 	cmp.w	fp, #0
 8018c66:	4602      	mov	r2, r0
 8018c68:	460b      	mov	r3, r1
 8018c6a:	4620      	mov	r0, r4
 8018c6c:	4629      	mov	r1, r5
 8018c6e:	bfb8      	it	lt
 8018c70:	f1ca 0a00 	rsblt	sl, sl, #0
 8018c74:	f7eb faea 	bl	800424c <__aeabi_dsub>
 8018c78:	ec41 0b19 	vmov	d9, r0, r1
 8018c7c:	4642      	mov	r2, r8
 8018c7e:	464b      	mov	r3, r9
 8018c80:	ec51 0b19 	vmov	r0, r1, d9
 8018c84:	f7eb fae4 	bl	8004250 <__adddf3>
 8018c88:	a37b      	add	r3, pc, #492	; (adr r3, 8018e78 <__ieee754_pow+0xa00>)
 8018c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c8e:	2000      	movs	r0, #0
 8018c90:	4604      	mov	r4, r0
 8018c92:	460d      	mov	r5, r1
 8018c94:	f7eb fc92 	bl	80045bc <__aeabi_dmul>
 8018c98:	ec53 2b19 	vmov	r2, r3, d9
 8018c9c:	4606      	mov	r6, r0
 8018c9e:	460f      	mov	r7, r1
 8018ca0:	4620      	mov	r0, r4
 8018ca2:	4629      	mov	r1, r5
 8018ca4:	f7eb fad2 	bl	800424c <__aeabi_dsub>
 8018ca8:	4602      	mov	r2, r0
 8018caa:	460b      	mov	r3, r1
 8018cac:	4640      	mov	r0, r8
 8018cae:	4649      	mov	r1, r9
 8018cb0:	f7eb facc 	bl	800424c <__aeabi_dsub>
 8018cb4:	a372      	add	r3, pc, #456	; (adr r3, 8018e80 <__ieee754_pow+0xa08>)
 8018cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018cba:	f7eb fc7f 	bl	80045bc <__aeabi_dmul>
 8018cbe:	a372      	add	r3, pc, #456	; (adr r3, 8018e88 <__ieee754_pow+0xa10>)
 8018cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018cc4:	4680      	mov	r8, r0
 8018cc6:	4689      	mov	r9, r1
 8018cc8:	4620      	mov	r0, r4
 8018cca:	4629      	mov	r1, r5
 8018ccc:	f7eb fc76 	bl	80045bc <__aeabi_dmul>
 8018cd0:	4602      	mov	r2, r0
 8018cd2:	460b      	mov	r3, r1
 8018cd4:	4640      	mov	r0, r8
 8018cd6:	4649      	mov	r1, r9
 8018cd8:	f7eb faba 	bl	8004250 <__adddf3>
 8018cdc:	4604      	mov	r4, r0
 8018cde:	460d      	mov	r5, r1
 8018ce0:	4602      	mov	r2, r0
 8018ce2:	460b      	mov	r3, r1
 8018ce4:	4630      	mov	r0, r6
 8018ce6:	4639      	mov	r1, r7
 8018ce8:	f7eb fab2 	bl	8004250 <__adddf3>
 8018cec:	4632      	mov	r2, r6
 8018cee:	463b      	mov	r3, r7
 8018cf0:	4680      	mov	r8, r0
 8018cf2:	4689      	mov	r9, r1
 8018cf4:	f7eb faaa 	bl	800424c <__aeabi_dsub>
 8018cf8:	4602      	mov	r2, r0
 8018cfa:	460b      	mov	r3, r1
 8018cfc:	4620      	mov	r0, r4
 8018cfe:	4629      	mov	r1, r5
 8018d00:	f7eb faa4 	bl	800424c <__aeabi_dsub>
 8018d04:	4642      	mov	r2, r8
 8018d06:	4606      	mov	r6, r0
 8018d08:	460f      	mov	r7, r1
 8018d0a:	464b      	mov	r3, r9
 8018d0c:	4640      	mov	r0, r8
 8018d0e:	4649      	mov	r1, r9
 8018d10:	f7eb fc54 	bl	80045bc <__aeabi_dmul>
 8018d14:	a35e      	add	r3, pc, #376	; (adr r3, 8018e90 <__ieee754_pow+0xa18>)
 8018d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d1a:	4604      	mov	r4, r0
 8018d1c:	460d      	mov	r5, r1
 8018d1e:	f7eb fc4d 	bl	80045bc <__aeabi_dmul>
 8018d22:	a35d      	add	r3, pc, #372	; (adr r3, 8018e98 <__ieee754_pow+0xa20>)
 8018d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d28:	f7eb fa90 	bl	800424c <__aeabi_dsub>
 8018d2c:	4622      	mov	r2, r4
 8018d2e:	462b      	mov	r3, r5
 8018d30:	f7eb fc44 	bl	80045bc <__aeabi_dmul>
 8018d34:	a35a      	add	r3, pc, #360	; (adr r3, 8018ea0 <__ieee754_pow+0xa28>)
 8018d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d3a:	f7eb fa89 	bl	8004250 <__adddf3>
 8018d3e:	4622      	mov	r2, r4
 8018d40:	462b      	mov	r3, r5
 8018d42:	f7eb fc3b 	bl	80045bc <__aeabi_dmul>
 8018d46:	a358      	add	r3, pc, #352	; (adr r3, 8018ea8 <__ieee754_pow+0xa30>)
 8018d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d4c:	f7eb fa7e 	bl	800424c <__aeabi_dsub>
 8018d50:	4622      	mov	r2, r4
 8018d52:	462b      	mov	r3, r5
 8018d54:	f7eb fc32 	bl	80045bc <__aeabi_dmul>
 8018d58:	a355      	add	r3, pc, #340	; (adr r3, 8018eb0 <__ieee754_pow+0xa38>)
 8018d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d5e:	f7eb fa77 	bl	8004250 <__adddf3>
 8018d62:	4622      	mov	r2, r4
 8018d64:	462b      	mov	r3, r5
 8018d66:	f7eb fc29 	bl	80045bc <__aeabi_dmul>
 8018d6a:	4602      	mov	r2, r0
 8018d6c:	460b      	mov	r3, r1
 8018d6e:	4640      	mov	r0, r8
 8018d70:	4649      	mov	r1, r9
 8018d72:	f7eb fa6b 	bl	800424c <__aeabi_dsub>
 8018d76:	4604      	mov	r4, r0
 8018d78:	460d      	mov	r5, r1
 8018d7a:	4602      	mov	r2, r0
 8018d7c:	460b      	mov	r3, r1
 8018d7e:	4640      	mov	r0, r8
 8018d80:	4649      	mov	r1, r9
 8018d82:	f7eb fc1b 	bl	80045bc <__aeabi_dmul>
 8018d86:	2200      	movs	r2, #0
 8018d88:	ec41 0b19 	vmov	d9, r0, r1
 8018d8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8018d90:	4620      	mov	r0, r4
 8018d92:	4629      	mov	r1, r5
 8018d94:	f7eb fa5a 	bl	800424c <__aeabi_dsub>
 8018d98:	4602      	mov	r2, r0
 8018d9a:	460b      	mov	r3, r1
 8018d9c:	ec51 0b19 	vmov	r0, r1, d9
 8018da0:	f7eb fd36 	bl	8004810 <__aeabi_ddiv>
 8018da4:	4632      	mov	r2, r6
 8018da6:	4604      	mov	r4, r0
 8018da8:	460d      	mov	r5, r1
 8018daa:	463b      	mov	r3, r7
 8018dac:	4640      	mov	r0, r8
 8018dae:	4649      	mov	r1, r9
 8018db0:	f7eb fc04 	bl	80045bc <__aeabi_dmul>
 8018db4:	4632      	mov	r2, r6
 8018db6:	463b      	mov	r3, r7
 8018db8:	f7eb fa4a 	bl	8004250 <__adddf3>
 8018dbc:	4602      	mov	r2, r0
 8018dbe:	460b      	mov	r3, r1
 8018dc0:	4620      	mov	r0, r4
 8018dc2:	4629      	mov	r1, r5
 8018dc4:	f7eb fa42 	bl	800424c <__aeabi_dsub>
 8018dc8:	4642      	mov	r2, r8
 8018dca:	464b      	mov	r3, r9
 8018dcc:	f7eb fa3e 	bl	800424c <__aeabi_dsub>
 8018dd0:	460b      	mov	r3, r1
 8018dd2:	4602      	mov	r2, r0
 8018dd4:	493a      	ldr	r1, [pc, #232]	; (8018ec0 <__ieee754_pow+0xa48>)
 8018dd6:	2000      	movs	r0, #0
 8018dd8:	f7eb fa38 	bl	800424c <__aeabi_dsub>
 8018ddc:	ec41 0b10 	vmov	d0, r0, r1
 8018de0:	ee10 3a90 	vmov	r3, s1
 8018de4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8018de8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8018dec:	da2b      	bge.n	8018e46 <__ieee754_pow+0x9ce>
 8018dee:	4650      	mov	r0, sl
 8018df0:	f000 f966 	bl	80190c0 <scalbn>
 8018df4:	ec51 0b10 	vmov	r0, r1, d0
 8018df8:	ec53 2b18 	vmov	r2, r3, d8
 8018dfc:	f7ff bbed 	b.w	80185da <__ieee754_pow+0x162>
 8018e00:	4b30      	ldr	r3, [pc, #192]	; (8018ec4 <__ieee754_pow+0xa4c>)
 8018e02:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8018e06:	429e      	cmp	r6, r3
 8018e08:	f77f af0c 	ble.w	8018c24 <__ieee754_pow+0x7ac>
 8018e0c:	4b2e      	ldr	r3, [pc, #184]	; (8018ec8 <__ieee754_pow+0xa50>)
 8018e0e:	440b      	add	r3, r1
 8018e10:	4303      	orrs	r3, r0
 8018e12:	d009      	beq.n	8018e28 <__ieee754_pow+0x9b0>
 8018e14:	ec51 0b18 	vmov	r0, r1, d8
 8018e18:	2200      	movs	r2, #0
 8018e1a:	2300      	movs	r3, #0
 8018e1c:	f7eb fe40 	bl	8004aa0 <__aeabi_dcmplt>
 8018e20:	3800      	subs	r0, #0
 8018e22:	bf18      	it	ne
 8018e24:	2001      	movne	r0, #1
 8018e26:	e447      	b.n	80186b8 <__ieee754_pow+0x240>
 8018e28:	4622      	mov	r2, r4
 8018e2a:	462b      	mov	r3, r5
 8018e2c:	f7eb fa0e 	bl	800424c <__aeabi_dsub>
 8018e30:	4642      	mov	r2, r8
 8018e32:	464b      	mov	r3, r9
 8018e34:	f7eb fe48 	bl	8004ac8 <__aeabi_dcmpge>
 8018e38:	2800      	cmp	r0, #0
 8018e3a:	f43f aef3 	beq.w	8018c24 <__ieee754_pow+0x7ac>
 8018e3e:	e7e9      	b.n	8018e14 <__ieee754_pow+0x99c>
 8018e40:	f04f 0a00 	mov.w	sl, #0
 8018e44:	e71a      	b.n	8018c7c <__ieee754_pow+0x804>
 8018e46:	ec51 0b10 	vmov	r0, r1, d0
 8018e4a:	4619      	mov	r1, r3
 8018e4c:	e7d4      	b.n	8018df8 <__ieee754_pow+0x980>
 8018e4e:	491c      	ldr	r1, [pc, #112]	; (8018ec0 <__ieee754_pow+0xa48>)
 8018e50:	2000      	movs	r0, #0
 8018e52:	f7ff bb30 	b.w	80184b6 <__ieee754_pow+0x3e>
 8018e56:	2000      	movs	r0, #0
 8018e58:	2100      	movs	r1, #0
 8018e5a:	f7ff bb2c 	b.w	80184b6 <__ieee754_pow+0x3e>
 8018e5e:	4630      	mov	r0, r6
 8018e60:	4639      	mov	r1, r7
 8018e62:	f7ff bb28 	b.w	80184b6 <__ieee754_pow+0x3e>
 8018e66:	9204      	str	r2, [sp, #16]
 8018e68:	f7ff bb7a 	b.w	8018560 <__ieee754_pow+0xe8>
 8018e6c:	2300      	movs	r3, #0
 8018e6e:	f7ff bb64 	b.w	801853a <__ieee754_pow+0xc2>
 8018e72:	bf00      	nop
 8018e74:	f3af 8000 	nop.w
 8018e78:	00000000 	.word	0x00000000
 8018e7c:	3fe62e43 	.word	0x3fe62e43
 8018e80:	fefa39ef 	.word	0xfefa39ef
 8018e84:	3fe62e42 	.word	0x3fe62e42
 8018e88:	0ca86c39 	.word	0x0ca86c39
 8018e8c:	be205c61 	.word	0xbe205c61
 8018e90:	72bea4d0 	.word	0x72bea4d0
 8018e94:	3e663769 	.word	0x3e663769
 8018e98:	c5d26bf1 	.word	0xc5d26bf1
 8018e9c:	3ebbbd41 	.word	0x3ebbbd41
 8018ea0:	af25de2c 	.word	0xaf25de2c
 8018ea4:	3f11566a 	.word	0x3f11566a
 8018ea8:	16bebd93 	.word	0x16bebd93
 8018eac:	3f66c16c 	.word	0x3f66c16c
 8018eb0:	5555553e 	.word	0x5555553e
 8018eb4:	3fc55555 	.word	0x3fc55555
 8018eb8:	3fe00000 	.word	0x3fe00000
 8018ebc:	000fffff 	.word	0x000fffff
 8018ec0:	3ff00000 	.word	0x3ff00000
 8018ec4:	4090cbff 	.word	0x4090cbff
 8018ec8:	3f6f3400 	.word	0x3f6f3400
 8018ecc:	652b82fe 	.word	0x652b82fe
 8018ed0:	3c971547 	.word	0x3c971547

08018ed4 <__ieee754_sqrt>:
 8018ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ed8:	ec55 4b10 	vmov	r4, r5, d0
 8018edc:	4e55      	ldr	r6, [pc, #340]	; (8019034 <__ieee754_sqrt+0x160>)
 8018ede:	43ae      	bics	r6, r5
 8018ee0:	ee10 0a10 	vmov	r0, s0
 8018ee4:	ee10 3a10 	vmov	r3, s0
 8018ee8:	462a      	mov	r2, r5
 8018eea:	4629      	mov	r1, r5
 8018eec:	d110      	bne.n	8018f10 <__ieee754_sqrt+0x3c>
 8018eee:	ee10 2a10 	vmov	r2, s0
 8018ef2:	462b      	mov	r3, r5
 8018ef4:	f7eb fb62 	bl	80045bc <__aeabi_dmul>
 8018ef8:	4602      	mov	r2, r0
 8018efa:	460b      	mov	r3, r1
 8018efc:	4620      	mov	r0, r4
 8018efe:	4629      	mov	r1, r5
 8018f00:	f7eb f9a6 	bl	8004250 <__adddf3>
 8018f04:	4604      	mov	r4, r0
 8018f06:	460d      	mov	r5, r1
 8018f08:	ec45 4b10 	vmov	d0, r4, r5
 8018f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f10:	2d00      	cmp	r5, #0
 8018f12:	dc10      	bgt.n	8018f36 <__ieee754_sqrt+0x62>
 8018f14:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8018f18:	4330      	orrs	r0, r6
 8018f1a:	d0f5      	beq.n	8018f08 <__ieee754_sqrt+0x34>
 8018f1c:	b15d      	cbz	r5, 8018f36 <__ieee754_sqrt+0x62>
 8018f1e:	ee10 2a10 	vmov	r2, s0
 8018f22:	462b      	mov	r3, r5
 8018f24:	ee10 0a10 	vmov	r0, s0
 8018f28:	f7eb f990 	bl	800424c <__aeabi_dsub>
 8018f2c:	4602      	mov	r2, r0
 8018f2e:	460b      	mov	r3, r1
 8018f30:	f7eb fc6e 	bl	8004810 <__aeabi_ddiv>
 8018f34:	e7e6      	b.n	8018f04 <__ieee754_sqrt+0x30>
 8018f36:	1512      	asrs	r2, r2, #20
 8018f38:	d074      	beq.n	8019024 <__ieee754_sqrt+0x150>
 8018f3a:	07d4      	lsls	r4, r2, #31
 8018f3c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8018f40:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8018f44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8018f48:	bf5e      	ittt	pl
 8018f4a:	0fda      	lsrpl	r2, r3, #31
 8018f4c:	005b      	lslpl	r3, r3, #1
 8018f4e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8018f52:	2400      	movs	r4, #0
 8018f54:	0fda      	lsrs	r2, r3, #31
 8018f56:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8018f5a:	107f      	asrs	r7, r7, #1
 8018f5c:	005b      	lsls	r3, r3, #1
 8018f5e:	2516      	movs	r5, #22
 8018f60:	4620      	mov	r0, r4
 8018f62:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8018f66:	1886      	adds	r6, r0, r2
 8018f68:	428e      	cmp	r6, r1
 8018f6a:	bfde      	ittt	le
 8018f6c:	1b89      	suble	r1, r1, r6
 8018f6e:	18b0      	addle	r0, r6, r2
 8018f70:	18a4      	addle	r4, r4, r2
 8018f72:	0049      	lsls	r1, r1, #1
 8018f74:	3d01      	subs	r5, #1
 8018f76:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8018f7a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8018f7e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8018f82:	d1f0      	bne.n	8018f66 <__ieee754_sqrt+0x92>
 8018f84:	462a      	mov	r2, r5
 8018f86:	f04f 0e20 	mov.w	lr, #32
 8018f8a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8018f8e:	4281      	cmp	r1, r0
 8018f90:	eb06 0c05 	add.w	ip, r6, r5
 8018f94:	dc02      	bgt.n	8018f9c <__ieee754_sqrt+0xc8>
 8018f96:	d113      	bne.n	8018fc0 <__ieee754_sqrt+0xec>
 8018f98:	459c      	cmp	ip, r3
 8018f9a:	d811      	bhi.n	8018fc0 <__ieee754_sqrt+0xec>
 8018f9c:	f1bc 0f00 	cmp.w	ip, #0
 8018fa0:	eb0c 0506 	add.w	r5, ip, r6
 8018fa4:	da43      	bge.n	801902e <__ieee754_sqrt+0x15a>
 8018fa6:	2d00      	cmp	r5, #0
 8018fa8:	db41      	blt.n	801902e <__ieee754_sqrt+0x15a>
 8018faa:	f100 0801 	add.w	r8, r0, #1
 8018fae:	1a09      	subs	r1, r1, r0
 8018fb0:	459c      	cmp	ip, r3
 8018fb2:	bf88      	it	hi
 8018fb4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8018fb8:	eba3 030c 	sub.w	r3, r3, ip
 8018fbc:	4432      	add	r2, r6
 8018fbe:	4640      	mov	r0, r8
 8018fc0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8018fc4:	f1be 0e01 	subs.w	lr, lr, #1
 8018fc8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8018fcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8018fd0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8018fd4:	d1db      	bne.n	8018f8e <__ieee754_sqrt+0xba>
 8018fd6:	430b      	orrs	r3, r1
 8018fd8:	d006      	beq.n	8018fe8 <__ieee754_sqrt+0x114>
 8018fda:	1c50      	adds	r0, r2, #1
 8018fdc:	bf13      	iteet	ne
 8018fde:	3201      	addne	r2, #1
 8018fe0:	3401      	addeq	r4, #1
 8018fe2:	4672      	moveq	r2, lr
 8018fe4:	f022 0201 	bicne.w	r2, r2, #1
 8018fe8:	1063      	asrs	r3, r4, #1
 8018fea:	0852      	lsrs	r2, r2, #1
 8018fec:	07e1      	lsls	r1, r4, #31
 8018fee:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8018ff2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8018ff6:	bf48      	it	mi
 8018ff8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8018ffc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8019000:	4614      	mov	r4, r2
 8019002:	e781      	b.n	8018f08 <__ieee754_sqrt+0x34>
 8019004:	0ad9      	lsrs	r1, r3, #11
 8019006:	3815      	subs	r0, #21
 8019008:	055b      	lsls	r3, r3, #21
 801900a:	2900      	cmp	r1, #0
 801900c:	d0fa      	beq.n	8019004 <__ieee754_sqrt+0x130>
 801900e:	02cd      	lsls	r5, r1, #11
 8019010:	d50a      	bpl.n	8019028 <__ieee754_sqrt+0x154>
 8019012:	f1c2 0420 	rsb	r4, r2, #32
 8019016:	fa23 f404 	lsr.w	r4, r3, r4
 801901a:	1e55      	subs	r5, r2, #1
 801901c:	4093      	lsls	r3, r2
 801901e:	4321      	orrs	r1, r4
 8019020:	1b42      	subs	r2, r0, r5
 8019022:	e78a      	b.n	8018f3a <__ieee754_sqrt+0x66>
 8019024:	4610      	mov	r0, r2
 8019026:	e7f0      	b.n	801900a <__ieee754_sqrt+0x136>
 8019028:	0049      	lsls	r1, r1, #1
 801902a:	3201      	adds	r2, #1
 801902c:	e7ef      	b.n	801900e <__ieee754_sqrt+0x13a>
 801902e:	4680      	mov	r8, r0
 8019030:	e7bd      	b.n	8018fae <__ieee754_sqrt+0xda>
 8019032:	bf00      	nop
 8019034:	7ff00000 	.word	0x7ff00000

08019038 <with_errno>:
 8019038:	b570      	push	{r4, r5, r6, lr}
 801903a:	4604      	mov	r4, r0
 801903c:	460d      	mov	r5, r1
 801903e:	4616      	mov	r6, r2
 8019040:	f7fe ffd0 	bl	8017fe4 <__errno>
 8019044:	4629      	mov	r1, r5
 8019046:	6006      	str	r6, [r0, #0]
 8019048:	4620      	mov	r0, r4
 801904a:	bd70      	pop	{r4, r5, r6, pc}

0801904c <xflow>:
 801904c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801904e:	4614      	mov	r4, r2
 8019050:	461d      	mov	r5, r3
 8019052:	b108      	cbz	r0, 8019058 <xflow+0xc>
 8019054:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8019058:	e9cd 2300 	strd	r2, r3, [sp]
 801905c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019060:	4620      	mov	r0, r4
 8019062:	4629      	mov	r1, r5
 8019064:	f7eb faaa 	bl	80045bc <__aeabi_dmul>
 8019068:	2222      	movs	r2, #34	; 0x22
 801906a:	b003      	add	sp, #12
 801906c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019070:	f7ff bfe2 	b.w	8019038 <with_errno>

08019074 <__math_uflow>:
 8019074:	b508      	push	{r3, lr}
 8019076:	2200      	movs	r2, #0
 8019078:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801907c:	f7ff ffe6 	bl	801904c <xflow>
 8019080:	ec41 0b10 	vmov	d0, r0, r1
 8019084:	bd08      	pop	{r3, pc}

08019086 <__math_oflow>:
 8019086:	b508      	push	{r3, lr}
 8019088:	2200      	movs	r2, #0
 801908a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801908e:	f7ff ffdd 	bl	801904c <xflow>
 8019092:	ec41 0b10 	vmov	d0, r0, r1
 8019096:	bd08      	pop	{r3, pc}

08019098 <fabs>:
 8019098:	ec51 0b10 	vmov	r0, r1, d0
 801909c:	ee10 2a10 	vmov	r2, s0
 80190a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80190a4:	ec43 2b10 	vmov	d0, r2, r3
 80190a8:	4770      	bx	lr

080190aa <finite>:
 80190aa:	b082      	sub	sp, #8
 80190ac:	ed8d 0b00 	vstr	d0, [sp]
 80190b0:	9801      	ldr	r0, [sp, #4]
 80190b2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80190b6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80190ba:	0fc0      	lsrs	r0, r0, #31
 80190bc:	b002      	add	sp, #8
 80190be:	4770      	bx	lr

080190c0 <scalbn>:
 80190c0:	b570      	push	{r4, r5, r6, lr}
 80190c2:	ec55 4b10 	vmov	r4, r5, d0
 80190c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80190ca:	4606      	mov	r6, r0
 80190cc:	462b      	mov	r3, r5
 80190ce:	b99a      	cbnz	r2, 80190f8 <scalbn+0x38>
 80190d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80190d4:	4323      	orrs	r3, r4
 80190d6:	d036      	beq.n	8019146 <scalbn+0x86>
 80190d8:	4b39      	ldr	r3, [pc, #228]	; (80191c0 <scalbn+0x100>)
 80190da:	4629      	mov	r1, r5
 80190dc:	ee10 0a10 	vmov	r0, s0
 80190e0:	2200      	movs	r2, #0
 80190e2:	f7eb fa6b 	bl	80045bc <__aeabi_dmul>
 80190e6:	4b37      	ldr	r3, [pc, #220]	; (80191c4 <scalbn+0x104>)
 80190e8:	429e      	cmp	r6, r3
 80190ea:	4604      	mov	r4, r0
 80190ec:	460d      	mov	r5, r1
 80190ee:	da10      	bge.n	8019112 <scalbn+0x52>
 80190f0:	a32b      	add	r3, pc, #172	; (adr r3, 80191a0 <scalbn+0xe0>)
 80190f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190f6:	e03a      	b.n	801916e <scalbn+0xae>
 80190f8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80190fc:	428a      	cmp	r2, r1
 80190fe:	d10c      	bne.n	801911a <scalbn+0x5a>
 8019100:	ee10 2a10 	vmov	r2, s0
 8019104:	4620      	mov	r0, r4
 8019106:	4629      	mov	r1, r5
 8019108:	f7eb f8a2 	bl	8004250 <__adddf3>
 801910c:	4604      	mov	r4, r0
 801910e:	460d      	mov	r5, r1
 8019110:	e019      	b.n	8019146 <scalbn+0x86>
 8019112:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8019116:	460b      	mov	r3, r1
 8019118:	3a36      	subs	r2, #54	; 0x36
 801911a:	4432      	add	r2, r6
 801911c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8019120:	428a      	cmp	r2, r1
 8019122:	dd08      	ble.n	8019136 <scalbn+0x76>
 8019124:	2d00      	cmp	r5, #0
 8019126:	a120      	add	r1, pc, #128	; (adr r1, 80191a8 <scalbn+0xe8>)
 8019128:	e9d1 0100 	ldrd	r0, r1, [r1]
 801912c:	da1c      	bge.n	8019168 <scalbn+0xa8>
 801912e:	a120      	add	r1, pc, #128	; (adr r1, 80191b0 <scalbn+0xf0>)
 8019130:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019134:	e018      	b.n	8019168 <scalbn+0xa8>
 8019136:	2a00      	cmp	r2, #0
 8019138:	dd08      	ble.n	801914c <scalbn+0x8c>
 801913a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801913e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8019142:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8019146:	ec45 4b10 	vmov	d0, r4, r5
 801914a:	bd70      	pop	{r4, r5, r6, pc}
 801914c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8019150:	da19      	bge.n	8019186 <scalbn+0xc6>
 8019152:	f24c 3350 	movw	r3, #50000	; 0xc350
 8019156:	429e      	cmp	r6, r3
 8019158:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801915c:	dd0a      	ble.n	8019174 <scalbn+0xb4>
 801915e:	a112      	add	r1, pc, #72	; (adr r1, 80191a8 <scalbn+0xe8>)
 8019160:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019164:	2b00      	cmp	r3, #0
 8019166:	d1e2      	bne.n	801912e <scalbn+0x6e>
 8019168:	a30f      	add	r3, pc, #60	; (adr r3, 80191a8 <scalbn+0xe8>)
 801916a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801916e:	f7eb fa25 	bl	80045bc <__aeabi_dmul>
 8019172:	e7cb      	b.n	801910c <scalbn+0x4c>
 8019174:	a10a      	add	r1, pc, #40	; (adr r1, 80191a0 <scalbn+0xe0>)
 8019176:	e9d1 0100 	ldrd	r0, r1, [r1]
 801917a:	2b00      	cmp	r3, #0
 801917c:	d0b8      	beq.n	80190f0 <scalbn+0x30>
 801917e:	a10e      	add	r1, pc, #56	; (adr r1, 80191b8 <scalbn+0xf8>)
 8019180:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019184:	e7b4      	b.n	80190f0 <scalbn+0x30>
 8019186:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801918a:	3236      	adds	r2, #54	; 0x36
 801918c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8019190:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8019194:	4620      	mov	r0, r4
 8019196:	4b0c      	ldr	r3, [pc, #48]	; (80191c8 <scalbn+0x108>)
 8019198:	2200      	movs	r2, #0
 801919a:	e7e8      	b.n	801916e <scalbn+0xae>
 801919c:	f3af 8000 	nop.w
 80191a0:	c2f8f359 	.word	0xc2f8f359
 80191a4:	01a56e1f 	.word	0x01a56e1f
 80191a8:	8800759c 	.word	0x8800759c
 80191ac:	7e37e43c 	.word	0x7e37e43c
 80191b0:	8800759c 	.word	0x8800759c
 80191b4:	fe37e43c 	.word	0xfe37e43c
 80191b8:	c2f8f359 	.word	0xc2f8f359
 80191bc:	81a56e1f 	.word	0x81a56e1f
 80191c0:	43500000 	.word	0x43500000
 80191c4:	ffff3cb0 	.word	0xffff3cb0
 80191c8:	3c900000 	.word	0x3c900000

080191cc <_init>:
 80191cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80191ce:	bf00      	nop
 80191d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80191d2:	bc08      	pop	{r3}
 80191d4:	469e      	mov	lr, r3
 80191d6:	4770      	bx	lr

080191d8 <_fini>:
 80191d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80191da:	bf00      	nop
 80191dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80191de:	bc08      	pop	{r3}
 80191e0:	469e      	mov	lr, r3
 80191e2:	4770      	bx	lr
